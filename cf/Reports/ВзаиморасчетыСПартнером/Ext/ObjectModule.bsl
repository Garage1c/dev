
Процедура УстановитьПараметрОтчета(КомпоновщикНастроек, Имя, Значение, ТолькоНезаполненный = Ложь) Экспорт
	
	
КонецПроцедуры

Функция ДанныеИзВнешнегоИсточника()
	
	Организация = ""; Партнер = ""; НачалоПериода = ""; КонецПериода = "";
	
	// объявим таблицу значений для использования в отчете в качестве внешнего объекта, содержащего данные	
	
	Регистраторы = Новый Массив;
	Регистраторы.Добавить("ДокументСсылка.ВозвратОтПокупателя");
	Регистраторы.Добавить("ДокументСсылка.ВозвратПоставщику");
	Регистраторы.Добавить("ДокументСсылка.ПоступлениеТоваров");
	Регистраторы.Добавить("ДокументСсылка.РеализацияТоваров");
	Регистраторы.Добавить("ДокументСсылка.ПлатежноеПоручениеВходящее");   
	Регистраторы.Добавить("ДокументСсылка.ПлатежноеПоручениеИсходящее");
	Регистраторы.Добавить("ДокументСсылка.РасходныйКассовыйОрдер");
	Регистраторы.Добавить("ДокументСсылка.ПриходныйКассовыйОрдер");      
	
	Регистраторы.Добавить("ВнешнийИсточникДанныхТаблицаСсылка.Торговля81.ПриходныйКассовыйОрдер"); 
	Регистраторы.Добавить("ВнешнийИсточникДанныхТаблицаСсылка.Торговля81.РеализацияТоваров"); 
	Регистраторы.Добавить("ВнешнийИсточникДанныхТаблицаСсылка.Торговля81.ПоступлениеТоваров"); 
    Регистраторы.Добавить("ВнешнийИсточникДанныхТаблицаСсылка.Торговля81.ПлатежноеПоручениеВходящее"); 
    Регистраторы.Добавить("ВнешнийИсточникДанныхТаблицаСсылка.Торговля81.ПлатежноеПоручениеИсходящее"); 
	
	Регистраторы.Добавить("ДокументСсылка.ЗаказНаряд");
	Регистраторы.Добавить("ДокументСсылка.ОплатаЭлектроннымиДеньгами");
    Регистраторы.Добавить("ДокументСсылка.РедактированиеРегистра");	
	
	ТаблицаРезультат = Новый ТаблицаЗначений;
	ТаблицаРезультат.Колонки.Добавить("Организация",Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаРезультат.Колонки.Добавить("Регистратор",Новый ОписаниеТипов(Регистраторы));
	ТаблицаРезультат.Колонки.Добавить("Партнер",	Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	ТаблицаРезультат.Колонки.Добавить("Контрагент",	Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаРезультат.Колонки.Добавить("Приход",		Новый ОписаниеТипов("Число"));
	ТаблицаРезультат.Колонки.Добавить("Расход", 	Новый ОписаниеТипов("Число"));
	ТаблицаРезультат.Колонки.Добавить("НачальныйОстаток", 	Новый ОписаниеТипов("Число"));
	ТаблицаРезультат.Колонки.Добавить("КонечныйОстаток", 	Новый ОписаниеТипов("Число"));
    ТаблицаРезультат.Колонки.Добавить("Период",		Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаРезультат.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(100)));
	
	// установим соединение с внешним источником данных
	
	ВнешнееСоединение = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
	ВнешнееСоединение.СтрокаСоединения = "DRIVER={SQL Server};SERVER=GARAGE-SERVER;UID=externalsource;PWD=123456qwerty;APP=Торговля81;DATABASE=work";
	ВнешниеИсточникиДанных.Торговля81.УстановитьОбщиеПараметрыСоединения(ВнешнееСоединение);
	ВнешниеИсточникиДанных.Торговля81.УстановитьСоединение();
	
	// получим пользовательские настройки компановки данных
	
	Для Каждого Элемент ИЗ КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		
		Если	Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Партнер") Тогда
				партнерИД = Элемент.ИдентификаторПользовательскойНастройки;
		ИначеЕсли
			 	Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация") Тогда
			 	организацияИД = Элемент.ИдентификаторПользовательскойНастройки;
		ИначеЕсли
				Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Контрагент") Тогда
				контрагентИД = Элемент.ИдентификаторПользовательскойНастройки;
		КонецЕсли;
	КонецЦикла;
	
	СписокЭлементов = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;
	
	Для Каждого Элемент из СписокЭлементов Цикл
		Если ТипЗнч(Элемент) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") И Элемент.Использование Тогда
			
			Если 	Элемент.Параметр = Новый ПараметрКомпоновкиДанных("НачалоПериодаОбщее") Тогда
				  	НачалоПериода 	= ?(ТипЗнч(Элемент.Значение) = Тип("Дата"), Элемент.Значение, Элемент.Значение.Дата);
			ИначеЕсли
					Элемент.Параметр = Новый ПараметрКомпоновкиДанных("КонецПериодаОбщий") Тогда
		        	КонецПериода 	= ?(ТипЗнч(Элемент.Значение) = Тип("Дата"), Элемент.Значение, Элемент.Значение.Дата);
			КонецЕсли;
		ИначеЕсли
			ТипЗнч(Элемент) = Тип("ЭлементОтбораКомпоновкиДанных") И Элемент.Использование Тогда
			
				Если	Элемент.ИдентификаторПользовательскойНастройки = партнерИД Тогда
						Партнер = Элемент.ПравоеЗначение;
				ИначеЕсли 
						Элемент.ИдентификаторПользовательскойНастройки = организацияИД Тогда
						Организация = Элемент.ПравоеЗначение;
				ИначеЕсли
						Элемент.ИдентификаторПользовательскойНастройки = контрагентИД Тогда
						Контрагент = Элемент.ПравоеЗначение;
				КонецЕсли;
		КонецЕсли
	КонецЦикла;
	
	ЕстьПартнер 		= ЗначениеЗаполнено(Партнер);
	ЕстьНачалоПериода 	= ЗначениеЗаполнено(НачалоПериода);
	ЕстьКонецПериода	= ЗначениеЗаполнено(КонецПериода);
	ЕстьОрганизация		= ЗначениеЗаполнено(Организация);
	
	// получим выборку данных 8.1
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	МАКСИМУМ(Период) Период,
	|	ВидДвижения,
	|	Регистратор,
	|	Организация,
	|	Контрагент 								Партнер,
	|   ВЫБОР КОГДА ВидДвижения = 0 ТОГДА
	|		СУММА(СуммаУпр)
	|	КОНЕЦ									Приход,
	|   ВЫБОР КОГДА ВидДвижения = 1 ТОГДА
	|		СУММА(СуммаУпр)
	|	КОНЕЦ									Расход
	|ИЗ
	|	ВнешнийИсточникДанных.Торговля81.Таблица.ВзаиморасчетыСКонтрагентами
	|" + ?(ЕстьПартнер ИЛИ ЕстьНачалоПериода ИЛИ ЕстьКонецПериода ИЛИ ЕстьОрганизация, "ГДЕ", "") +"
	|
	|" + ?(ЕстьОрганизация, " Организация В (&Организация) " + ?(ЕстьПартнер ИЛИ ЕстьНачалоПериода ИЛИ ЕстьКонецПериода, "И", ""), "") +"
	|
	|" + ?(ЕстьПартнер, " Контрагент = &Партнер " + ?(ЕстьНачалоПериода ИЛИ ЕстьКонецПериода, "И", ""), "") + "
	|
	|" + ?(ЕстьНачалоПериода, " Период > &НачалоПериода " + ?(ЕстьКонецПериода, "И", ""), "") + ?(ЕстьКонецПериода, " Период < &КонецПериода ", "") + "
	|
	|СГРУППИРОВАТЬ ПО Организация, Контрагент, Регистратор, ВидДвижения
	|УПОРЯДОЧИТЬ ПО Организация, Партнер, Период Возр
	|");
	
	Если ЕстьОрганизация Тогда
		
		Организации = Организация;
		//Если ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда
		//	Организации = Новый СписокЗначений;
		//	Организации.Добавить(Организация);
		//КонецЕсли;
		
		оргМассив = Новый Массив;
		Для Каждого Строка ИЗ Организации Цикл
			оргМассив.Добавить(Строка.Значение.УникальныйИдентификатор());
		КонецЦикла;
		
		Запрос.УстановитьПараметр("Организация", оргМассив);
	КонецЕсли;
	Если ЕстьПартнер Тогда
		Запрос.УстановитьПараметр("Партнер", Партнер.УникальныйИдентификатор());
	КонецЕсли;
	Если ЗначениеЗаполнено(Контрагент) Тогда
		Запрос.УстановитьПараметр("Партнер", Контрагент.УникальныйИдентификатор());
	КонецЕсли;
	Если ЕстьНачалоПериода  Тогда
		Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	КонецЕсли;
	Если ЕстьКонецПериода Тогда
		Запрос.УстановитьПараметр("КонецПериода",  КонецПериода);
	КонецЕсли;
		
	СписокПриход = Новый СписокЗначений;
	СписокПриход.Добавить("РеализацияТоваров", "Реализация товаров и услуг", Истина);
	СписокПриход.Добавить("ПлатежноеПоручениеИсходящее", "Платежное поручение исходящее", Истина);
	СписокПриход.Добавить("ВозвратОтПокупателя", "Возврат товаров от покупателя");
	СписокПриход.Добавить("РасходныйКассовыйОрдер", "Расходный кассовый ордер");
	
	СписокРасход = Новый СписокЗначений;
	СписокРасход.Добавить("ПриходныйКассовыйОрдер", "Приходный кассовый ордер", Истина);
	СписокРасход.Добавить("ПлатежноеПоручениеВходящее", "Платежное поручение входящее", Истина);
	СписокРасход.Добавить("ПоступлениеТоваров", "Возврат товаров от покупателя", Истина);
	СписокРасход.Добавить("РасходныйКассовыйОрдер", "Расходный кассовый ордер");
	СписокРасход.Добавить("ВозвратПоставщику", "Возврат товаров поставщику");
	
	НачОстаток = 0;
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.СледующийПоЗначениюПоля("Организация") Цикл
		
		НачОстаток = 0;
		текОрганизация 	= Справочники.Организации.ПолучитьСсылку(Результат.Организация);
		
		Пока Результат.СледующийПоЗначениюПоля("Партнер") Цикл
			
			НачОстаток = 0;
			текПартнер		= Справочники.Партнеры.ПолучитьСсылку(Результат.Партнер);
			текКонтрагент	= Справочники.Контрагенты.ПолучитьСсылку(Результат.Партнер);	
			
			Пока Результат.Следующий() Цикл
				
				Рег = Неопределено; Представление = "";	НайденРег = Ложь;

				Регистратор = Результат.Регистратор; 
				
				регСписок = ?(Результат.ВидДвижения, СписокРасход, СписокПриход);
				
				// ищем документ-регистратор
				
				Для Каждого Элемент ИЗ регСписок Цикл
										
					Рег = Документы[Элемент.Значение].ПолучитьСсылку(Регистратор);
					Если Рег.ПолучитьОбъект() = Неопределено Тогда 
						
						// если для данного документа есть аналог из внешнего источника данных, ищем там
						
						Если Элемент.Пометка Тогда
							Рег = ВнешниеИсточникиДанных.Торговля81.Таблицы[Элемент.Значение].НайтиПоПолю("ID", Регистратор);
							Если НЕ Рег.Пустая() Тогда
								
								Представление = Элемент.Представление + " " + Рег.Номер + " от " + Формат(Рег.Дата, "ДЛФ=DT");
								НайденРег = Истина;
								Прервать;
								
							КонецЕсли;
						КонецЕсли;
					Иначе
						НайденРег = Истина;
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				                     		
				СтрокаНовая = ТаблицаРезультат.Добавить();

				Если НайденРег Тогда
					СтрокаНовая.Регистратор = Рег;
				КонецЕсли;
				
			 	СтрокаНовая.Организация = текОрганизация;
				СтрокаНовая.Партнер 	= текПартнер;
				СтрокаНовая.Контрагент 	= текКонтрагент;
				
				СтрокаНовая.Приход = Результат.Приход;
				СтрокаНовая.Расход = Результат.Расход;
				
				СтрокаНовая.НачальныйОстаток 	= НачОстаток;
				СтрокаНовая.КонечныйОстаток 	= СтрокаНовая.НачальныйОстаток + СтрокаНовая.Приход - СтрокаНовая.Расход;
				
				СтрокаНовая.Период = Результат.Период;
				СтрокаНовая.Представление = Представление;
				
				НачОстаток = СтрокаНовая.КонечныйОстаток;
		
			КонецЦикла;
		КонецЦикла;
    КонецЦикла;
	// установить начальную границу выборки данных 8.2
	
	начГраница = '20111217';
	
	НачалоПериода82  = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));	
	Если НачалоПериода82 <> Неопределено Тогда
		НачалоПериода82.Значение = начГраница;
		НачалоПериода82.Использование = Истина;	
	КонецЕсли;
		
	// конец периода сдвигаем на границу выборки
	
	КонецПериода82 = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));	
	Если КонецПериода82 <> Неопределено Тогда
		
		КонецПериода82.Значение = '00010101';
		КонецПериода82.Использование = Ложь; 
		
		Если ЕстьКонецПериода Тогда
			КонецПериода82.Значение = ?(КонецПериода < НачалоПериода82.Значение, НачалоПериода82.Значение, КонецПериода);
			КонецПериода82.Использование = Истина;
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат ТаблицаРезультат;
	
КонецФункции


Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	//Связь между таблицей значений и именами в СКД 
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ТаблицаНабораДанных", ДанныеИзВнешнегоИсточника());

	//Макет компоновки 
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(ЭтотОбъект.СхемаКомпоновкиДанных, ЭтотОбъект.КомпоновщикНастроек.ПолучитьНастройки(), ДанныеРасшифровки);

	//Компоновка данных 
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);

	//Вывод результата 
	ДокументРезультат.Очистить();
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
КонецПроцедуры