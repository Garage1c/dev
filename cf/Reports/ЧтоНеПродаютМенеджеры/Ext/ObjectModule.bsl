
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	УстановитьПривилегированныйРежим(Истина);
	
	//Макет компоновки 
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
    Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	Параметры = Настройки.ПараметрыДанных;

	//ЗначениеПараметра = Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ТипЦенСебестоимость"));
	//Если НЕ ЗначениеЗаполнено(ЗначениеПараметра.Значение) Тогда
	//   	Параметры.УстановитьЗначениеПараметра("ТипЦенСебестоимость", Константы.ТипЦенСебестоимостьДляРасчетаЗП.Получить());
	//КонецЕсли;
	//ЗначениеПараметра = Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ТипЦенЗакупка"));
	//Если НЕ ЗначениеЗаполнено(ЗначениеПараметра.Значение) Тогда
	//    Параметры.УстановитьЗначениеПараметра("ТипЦенЗакупка", 			Константы.ТипЦенЗакупочныйРуб.Получить());
	//КонецЕсли;
	Период = Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период")).Значение;
	ПараметрСкладыПродажи = Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("СкладыПродажи"));
	Если Не ПараметрСкладыПродажи.Использование ИЛИ ПараметрСкладыПродажи.Значение = Неопределено Тогда
		ФлагИспользоватьСкладыПродажи = Ложь;
	Иначе	
		ФлагИспользоватьСкладыПродажи = Истина;
	КонецЕсли;
	СкладыПродажи = ПараметрСкладыПродажи.Значение;
	
	
	ПараметрСкладыХранения = Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("СкладыХранения"));
	Если Не ПараметрСкладыХранения.Использование ИЛИ ПараметрСкладыХранения.Значение = Неопределено Тогда
		ФлагИспользоватьСкладыХранения = Ложь;
	Иначе	
		ФлагИспользоватьСкладыХранения = Истина;
	КонецЕсли;
	
	СкладыХранения = ПараметрСкладыХранения.Значение;
	УсловиеКатегорияОтделМенеджер = "";	
	ПараметрКатегории = Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Категории"));
	Если Не ПараметрКатегории.Использование ИЛИ ПараметрКатегории.Значение = Неопределено Тогда
		ФлагИспользоватьКатегории = Ложь;
	Иначе	
		ФлагИспользоватьКатегории = Истина;
		УсловиеКатегорияОтделМенеджер = 			"ГДЕ ВТ_Категории.Категория В(&Категории)";
	КонецЕсли;
	
	ПараметрМенеджеры = Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Менеджеры"));
	Если Не ПараметрМенеджеры.Использование ИЛИ ПараметрМенеджеры.Значение = Неопределено Тогда
		ФлагИспользоватьМенеджеров = Ложь;
	Иначе	
		ФлагИспользоватьМенеджеров = Истина;
		Условие = " ВТ_МенеджерыОплаты.Менеджер В(&Менеджеры) ";
		УсловиеКатегорияОтделМенеджер = ?(УсловиеКатегорияОтделМенеджер = "", " ГДЕ ", УсловиеКатегорияОтделМенеджер + " И " )  +  Условие;
	КонецЕсли;
	ПараметрОтделы = Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Отделы"));
	Если Не ПараметрОтделы.Использование ИЛИ ПараметрОтделы.Значение = Неопределено Тогда
		ФлагИспользоватьОтделы = Ложь;
	Иначе	
		ФлагИспользоватьОтделы = Истина;
		Условие = " ВТ_МенеджерыОплаты.Менеджер.Отдел В ИЕРАРХИИ(&Отделы) ";
		УсловиеКатегорияОтделМенеджер = ?(УсловиеКатегорияОтделМенеджер = "", " ГДЕ ",УсловиеКатегорияОтделМенеджер+ " И " )  +  Условие;
	КонецЕсли;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), ДанныеРасшифровки);
	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПродажиОбороты.Номенклатура.КатегорияТовара КАК Категория,
		|	МАКСИМУМ(ПродажиОбороты.СуммаОборот) КАК Сумма,
		|	ПродажиОбороты.Заказ КАК Заказ
		|ПОМЕСТИТЬ ВТ_Категории
		|ИЗ
		|	РегистрНакопления.Продажи.Обороты(
		|			&Дата1,
		|			&Дата2,
		|			,
		|			(Заказ ССЫЛКА Документ.ЗаказПокупателя
		|				ИЛИ Заказ ССЫЛКА Документ.ИнтернетЗаказПокупателя)
		|				"+	?(ФлагИспользоватьСкладыПродажи," И Склад В (&СкладыПродажи) ","")+ " 
		|) КАК ПродажиОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	ПродажиОбороты.Номенклатура.КатегорияТовара,
		|	ПродажиОбороты.Заказ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Заказ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДолгиПоЗаказам.Менеджер,
		|	ДолгиПоЗаказам.Заказ КАК Заказ
		|ПОМЕСТИТЬ ВТ_МенеджерыОплаты
		|ИЗ
		|	РегистрНакопления.ДолгиПоЗаказам КАК ДолгиПоЗаказам
		|ГДЕ
		|	ДолгиПоЗаказам.Заказ В
		|			(ВЫБРАТЬ
		|				ВТ_Категории.Заказ
		|			ИЗ
		|				ВТ_Категории КАК ВТ_Категории
		|			ГДЕ
		|				ВТ_Категории.Заказ.МенеджерЗаказа = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Заказ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Категории.Категория КАК Категория,
		|	ВЫБОР
		|		КОГДА ВТ_Категории.Заказ.МенеджерЗаказа = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|			ТОГДА ЕСТЬNULL(ВТ_МенеджерыОплаты.Менеджер, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
		|		ИНАЧЕ ВТ_Категории.Заказ.МенеджерЗаказа
		|	КОНЕЦ КАК Менеджер,
		|	СУММА(ВТ_Категории.Сумма) КАК Сумма
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	ВТ_Категории КАК ВТ_Категории
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МенеджерыОплаты КАК ВТ_МенеджерыОплаты
		|		ПО ВТ_Категории.Заказ = ВТ_МенеджерыОплаты.Заказ
		| "+ УсловиеКатегорияОтделМенеджер + "

		|СГРУППИРОВАТЬ ПО
		|	ВТ_Категории.Категория,
		|	ВЫБОР
		|		КОГДА ВТ_Категории.Заказ.МенеджерЗаказа = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|			ТОГДА ЕСТЬNULL(ВТ_МенеджерыОплаты.Менеджер, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
		|		ИНАЧЕ ВТ_Категории.Заказ.МенеджерЗаказа
		|	КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыНаСкладахОстатки.Номенклатура,
		|	ТоварыНаСкладахОстатки.КоличествоОстаток
		|ПОМЕСТИТЬ ТоварынаСкладах
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Остатки(
		|			&Дата2,
		|			Номенклатура.КатегорияТовара В
		|					(ВЫБРАТЬ
		|						ВТ.Категория
		|					ИЗ
		|						ВТ КАК ВТ)
		|				"+	?(ФлагИспользоватьСкладыХранения," И Склад В (&СкладыХранения) ","")+ " 
		|	
		|) КАК ТоварыНаСкладахОстатки
	
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ЦенСеб.Номенклатура, ЦенЗак.Номенклатура) КАК Номенклатура,
		|	ЕСТЬNULL(ЦенСеб.Цена, ЦенЗак.Цена) КАК Цена,
		|	ЕСТЬNULL(ЦенСеб.Валюта, ЦенЗак.Валюта) КАК Валюта
		|ПОМЕСТИТЬ ЦеныСебестоимость
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			&Дата2,
		|			ТипЦен = &ТипЦенСебестоимость
		|				И Упаковка = &ПустаяУпаковка
		|				И Номенклатура В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ТоварынаСкладах.Номенклатура
		|					ИЗ
		|						ТоварынаСкладах КАК ТоварынаСкладах) {(Номенклатура).* КАК Номенклатура}) КАК ЦенСеб
		|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|				&Дата2,
		|				ТипЦен = &ТипЦенЗакупка
		|					И Упаковка = &ПустаяУпаковка
		|					И Номенклатура В
		|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|							ТоварынаСкладах.Номенклатура
		|						ИЗ
		|							ТоварынаСкладах КАК ТоварынаСкладах) {(Номенклатура).* КАК Номенклатура}) КАК ЦенЗак
		|		ПО ЦенСеб.Номенклатура = ЦенЗак.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КурсыВалютСрезПоследних.Валюта,
		|	КурсыВалютСрезПоследних.Курс,
		|	КурсыВалютСрезПоследних.Кратность
		|ПОМЕСТИТЬ КурсыВалют
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних(
		|			&Дата2,
		|			Валюта В
		|				(ВЫБРАТЬ
		|					ЦеныСебестоимость.Валюта
		|				ИЗ
		|					ЦеныСебестоимость КАК ЦеныСебестоимость)) КАК КурсыВалютСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЦеныСебестоимость.Номенклатура,
		|	ЦеныСебестоимость.Цена * (ЕСТЬNULL(КурсыВалют.Курс, 1) * ЕСТЬNULL(КурсыВалютУУ.Кратность, 1)) / (ЕСТЬNULL(КурсыВалют.Кратность, 1) * ЕСТЬNULL(КурсыВалютУУ.Курс, 1)) КАК Себестоимость
		|ПОМЕСТИТЬ СебестоимостьНоменклатуры
		|ИЗ
		|	ЦеныСебестоимость КАК ЦеныСебестоимость
		|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
		|		ПО ЦеныСебестоимость.Валюта = КурсыВалют.Валюта
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
		|				&Дата2,
		|				Валюта В
		|					(ВЫБРАТЬ
		|						ВалютаУправленческогоУчета.Значение
		|					ИЗ
		|						Константа.ВалютаУправленческогоУчета КАК ВалютаУправленческогоУчета)) КАК КурсыВалютУУ
		|		ПО (ИСТИНА)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварынаСкладах.Номенклатура.КатегорияТовара КАК КатегорияТовара,
		|	СУММА(ТоварынаСкладах.КоличествоОстаток * СебестоимостьНоменклатуры.Себестоимость) КАК Стоимость
		|ПОМЕСТИТЬ СтоимостьКатегорий
		|ИЗ
		|	ТоварынаСкладах КАК ТоварынаСкладах
		|		ЛЕВОЕ СОЕДИНЕНИЕ СебестоимостьНоменклатуры КАК СебестоимостьНоменклатуры
		|		ПО ТоварынаСкладах.Номенклатура = СебестоимостьНоменклатуры.Номенклатура
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварынаСкладах.Номенклатура.КатегорияТовара
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	КатегорияТовара
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ВТ.Категория КАК Категория,
|	ВТ.Менеджер КАК Менеджер,
|	ВТ.Сумма КАК СуммаПродаж,
|	ЕСТЬNULL(СтоимостьКатегорий.Стоимость, 0) КАК Стоимость,
|	0 КАК  ПроцМен,
|   0 КАК  ПроцМенКат,
|   0 КАК  ПроцОбщКат,
|   0 КАК  ПроцОст,
|	"""" КАК АВСКатМен,
|	"""" КАК АВСМенКат,
|	"""" КАК АВСОбщКат,
|	"""" КАК АВСОст,
|	ВТ.Менеджер.Отдел КАК Отдел
|ИЗ
|	ВТ КАК ВТ
|		ЛЕВОЕ СОЕДИНЕНИЕ СтоимостьКатегорий КАК СтоимостьКатегорий
|		ПО ВТ.Категория = СтоимостьКатегорий.КатегорияТовара
|
|УПОРЯДОЧИТЬ ПО
|	СуммаПродаж УБЫВ
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ВТ.Категория КАК Категория,
|	СУММА(ВТ.Сумма) КАК СуммаПродаж
|ИЗ
|	ВТ КАК ВТ
|
|СГРУППИРОВАТЬ ПО
|	ВТ.Категория
|
|УПОРЯДОЧИТЬ ПО
|	СуммаПродаж УБЫВ
|ИТОГИ
|	СУММА(СуммаПродаж)
|ПО
|	ОБЩИЕ
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ВТ.Менеджер КАК Менеджер,
|	СУММА(ВТ.Сумма) КАК СуммаПродаж
|ИЗ
|	ВТ КАК ВТ
|
|СГРУППИРОВАТЬ ПО
|	ВТ.Менеджер
|
|УПОРЯДОЧИТЬ ПО
|	СуммаПродаж УБЫВ
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	СУММА(СтоимостьКатегорий.Стоимость) КАК Стоимость
|ИЗ
|	СтоимостьКатегорий КАК СтоимостьКатегорий
|
|УПОРЯДОЧИТЬ ПО
|	Стоимость УБЫВ";
		
		
		
			
	
	Запрос.УстановитьПараметр("ПустаяУпаковка", Справочники.УпаковкиНоменклатуры.ПустаяСсылка());
	Запрос.УстановитьПараметр("СкладыПродажи", СкладыПродажи);
	Запрос.УстановитьПараметр("СкладыХранения", СкладыХранения);
	
	Запрос.УстановитьПараметр("Категории", ПараметрКатегории.Значение);
	Запрос.УстановитьПараметр("Менеджеры", ПараметрМенеджеры.Значение);
	Запрос.УстановитьПараметр("Отделы", ПараметрОтделы.Значение);
	
	
	Запрос.УстановитьПараметр("ТипЦенЗакупка", Константы.ТипЦенСебестоимостьДляРасчетаЗП.Получить());
	Запрос.УстановитьПараметр("ТипЦенСебестоимость", Константы.ТипЦенСебестоимостьДляРасчетаЗП.Получить());
	Запрос.УстановитьПараметр("Дата1", Период.ДатаНачала);
	Запрос.УстановитьПараметр("Дата2", Период.ДатаОкончания);
	
	Пакет = Запрос.ВыполнитьПакет();
	
	
	ТЗ = Пакет[Пакет.ВГраница() - 3].Выгрузить();
	
	ВыборкаИтогКатегорияОбщ = Пакет[Пакет.ВГраница() - 2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаИтогКатегорияОбщ.Следующий();
	ВыборкаИтогКатегория = ВыборкаИтогКатегорияОбщ.Выбрать();
	ВыборкаИтогМенеджер = Пакет[Пакет.ВГраница() - 1].Выбрать();
	ВыборкаИтогСтоимость = Пакет[Пакет.ВГраница()].Выбрать();
	ВыборкаИтогСтоимость.Следующий();
	Для каждого Эл Из ТЗ Цикл
		//1 АВСКатМен
		ВыборкаИтогМенеджер.Сбросить();
		ВыборкаИтогМенеджер.НайтиСледующий(Эл.Менеджер,"Менеджер");
		Эл.ПроцМен = Эл.СуммаПродаж/ВыборкаИтогМенеджер.СуммаПродаж * 100; 

		//2 АВСМенКат
		ВыборкаИтогКатегория.Сбросить();
		ВыборкаИтогКатегория.НайтиСледующий(Эл.Категория,"Категория");
		Эл.ПроцМенКат = Эл.СуммаПродаж/ВыборкаИтогКатегория.СуммаПродаж * 100;
		
		//3 АВСОбщКат
		Эл.ПроцОбщКат = ВыборкаИтогКатегория.СуммаПродаж/ВыборкаИтогКатегорияОбщ.СуммаПродаж * 100;
		
		
		Если ВыборкаИтогСтоимость.Стоимость = NULL Тогда
		
			Эл.АВСОст = "";
		Иначе
			//4 АВСОст
			Эл.ПроцОст =  Эл.Стоимость / ВыборкаИтогСтоимость.Стоимость * 100;
		КонецЕсли;
		
	КонецЦикла;
	
	//1 АВСКатМен
	ТЗ.Сортировать("ПроцМен УБЫВ");
	ВыборкаИтогМенеджер.Сбросить();
	Пока ВыборкаИтогМенеджер.Следующий() Цикл
		Массив = ТЗ.НайтиСтроки(Новый Структура("Менеджер",ВыборкаИтогМенеджер.Менеджер));
		ТекИтог = 0;
		ТекГруппа = "А";
		ИмяГруппы = "АВСКатМен";
		Для каждого Эл Из Массив Цикл
			Эл[ИмяГруппы] = "А";
			ИзменитьАВС(ТекИтог, Эл.ПроцМен, ТекГруппа, ИмяГруппы, Эл)
		КонецЦикла;
	КонецЦикла;
	
	//2 АВСМенКат
	ТЗ.Сортировать("ПроцМенКат УБЫВ");
	ВыборкаИтогКатегория.Сбросить();
	Пока ВыборкаИтогКатегория.Следующий() Цикл
		Массив = ТЗ.НайтиСтроки(Новый Структура("Категория",ВыборкаИтогКатегория.Категория));
		ТекИтог = 0;
		ТекГруппа = "А";
		ИмяГруппы = "АВСМенКат";
		Для каждого Эл Из Массив Цикл
			Эл[ИмяГруппы] = "А";
			ИзменитьАВС(ТекИтог, Эл.ПроцМенКат, ТекГруппа, ИмяГруппы, Эл)
		КонецЦикла;
	КонецЦикла;

	//3 АВСОбщКат
	ТЗОбщКат = ТЗ.Скопировать(,"Категория, ПроцОбщКат, АВСОбщКат");
	ТЗОбщКат.Свернуть("Категория, ПроцОбщКат, АВСОбщКат");
	ТЗОбщКат.Сортировать("ПроцОбщКат УБЫВ");
	ТекИтог = 0;
	ТекГруппа = "А";
	ИмяГруппы = "АВСОбщКат";
	Для каждого Эл Из ТЗОбщКат Цикл
		Эл[ИмяГруппы] = "А";
		ИзменитьАВС(ТекИтог, Эл.ПроцОбщКат, ТекГруппа, ИмяГруппы, Эл);
		Массив = ТЗ.НайтиСтроки(Новый Структура("Категория",Эл.Категория));
		Для каждого СтрокаТЗ Из Массив Цикл
			СтрокаТЗ.АВСОбщКат = Эл.АВСОбщКат;
		КонецЦикла;
	КонецЦикла;
	
	//4 АВСОст
	ТЗОбщКат = ТЗ.Скопировать(,"Категория, ПроцОст, АВСОст");
	ТЗОбщКат.Свернуть("Категория, ПроцОст, АВСОст");
	ТЗОбщКат.Сортировать("ПроцОст УБЫВ");
	ТекИтог = 0;
	ТекГруппа = "А";
	ИмяГруппы = "АВСОст";
	Для каждого Эл Из ТЗОбщКат Цикл
		Эл[ИмяГруппы] = "А";
		ИзменитьАВС(ТекИтог, Эл.ПроцОст, ТекГруппа, ИмяГруппы, Эл);
		Массив = ТЗ.НайтиСтроки(Новый Структура("Категория",Эл.Категория));
		Для каждого СтрокаТЗ Из Массив Цикл
			СтрокаТЗ.АВСОст = Эл.АВСОст;
		КонецЦикла;
	КонецЦикла;

    
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	//Компоновка данных 
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,Новый Структура("ТЗ",ТЗ) , ДанныеРасшифровки);

	//Вывод результата 
	ДокументРезультат.Очистить();
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);

	

КонецПроцедуры

Процедура  ИзменитьАВС(ТекИтог, ТекЧисло , ТекГруппа ,ИмяГруппы, Эл)
	Если ТекГруппа = "А" Тогда
		Если  (ТекИтог + ТекЧисло/2) > 80 Тогда
			//СледГруппа
			Эл[ИмяГруппы] = "В";
			ТекГруппа = "В";
		Иначе
			Эл[ИмяГруппы] = "А";
		КонецЕсли
	ИначеЕсли ТекГруппа = "В" Тогда
		Если  (ТекИтог + ТекЧисло/2) > 95 Тогда
			//СледГруппа
			Эл[ИмяГруппы] = "С";
			ТекГруппа = "С";
		Иначе
			Эл[ИмяГруппы] = "В";
		КонецЕсли
	Иначе
		 Эл[ИмяГруппы] = "С";
	КонецЕсли;
	ТекИтог = ТекИтог + ТекЧисло; 
КонецПроцедуры

