
&НаСервере
Функция ПолучитьВидСранвнения(ВидСравненияКД)
	
	Если ВидСравненияКД = ВидСравненияКомпоновкиДанных.Больше Тогда
		Возврат ВидСравнения.Больше;
	ИначеЕсли  ВидСравненияКД = ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
		Возврат ВидСравнения.БольшеИлиРавно;
	ИначеЕсли  ВидСравненияКД = ВидСравненияКомпоновкиДанных.ВИерархии Тогда
		Возврат ВидСравнения.ВИерархии;
	ИначеЕсли  ВидСравненияКД = ВидСравненияКомпоновкиДанных.ВСписке Тогда
		Возврат ВидСравнения.ВСписке;
	ИначеЕсли  ВидСравненияКД = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда
		Возврат ВидСравнения.ВСпискеПоИерархии;
	ИначеЕсли  ВидСравненияКД = ВидСравненияКомпоновкиДанных.Меньше Тогда
		Возврат ВидСравнения.Меньше;
	ИначеЕсли  ВидСравненияКД = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
		Возврат ВидСравнения.МеньшеИлиРавно;
	ИначеЕсли  ВидСравненияКД = ВидСравненияКомпоновкиДанных.Равно Тогда
		Возврат ВидСравнения.Равно;
	ИначеЕсли  ВидСравненияКД = ВидСравненияКомпоновкиДанных.НеРавно Тогда
		Возврат ВидСравнения.НеРавно;
	ИначеЕсли  ВидСравненияКД = ВидСравненияКомпоновкиДанных.Содержит Тогда
		Возврат ВидСравнения.Содержит;
	ИначеЕсли  ВидСравненияКД = ВидСравненияКомпоновкиДанных.НеСодержит Тогда
		Возврат ВидСравнения.НеСодержит;
	ИначеЕсли  ВидСравненияКД = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
		Возврат ВидСравнения.НеВИерархии;
	ИначеЕсли  ВидСравненияКД = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
		Возврат ВидСравнения.НеВСписке;
	ИначеЕсли  ВидСравненияКД = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
		Возврат ВидСравнения.НеВСпискеПоИерархии;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

	//ИначеЕсли  ВидСравненияКД = ВидСравненияКомпоновкиДанных.Заполнено Тогда
	//	Возврат ВидСравнения.;
	//ИначеЕсли  ВидСравненияКД = ВидСравненияКомпоновкиДанных.НачинаетсяС Тогда
	//	Возврат ВидСравнения.;
	//ИначеЕсли  ВидСравненияКД = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
	//	Возврат ВидСравнения.;
	//
КонецФункции

&НаСервере
Функция ПолучитьТаблицуОстатковНаДень(НачалоПериода = '00010101', КонецПериода= '00010101', НоменклатурнаяГруппа = Неопределено, Отбор = Неопределено, МассивЭлементовОтбора = Неопределено, ПустаяТаблица = Ложь)
	
	Товары = Новый ТаблицаЗначений;
	Товары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Товары.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	Товары.Колонки.Добавить("КоличествоСреднее", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,3)));
	
	Если ПустаяТаблица Тогда Возврат Товары; КонецЕсли;
	
	Построитель = Новый ПостроительОтчета;
	Построитель.Текст = "
	|	ВЫБРАТЬ
	|    Номенклатура КАК Номенклатура,
	|	 Склад  КАК Склад,
	|    Период КАК Дата,
	|    КоличествоНачальныйОстаток КАК Количество
	|ИЗ
	|    РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, День, ДвиженияИГраницыПериода, {Номенклатура.* КАК Номенклатура, Склад.* КАК Склады,
	|								Номенклатура В (ВЫБРАТЬ Номенклатура Из Справочник.НоменклатурныеГруппы.Состав ГДЕ Ссылка = &НоменклатурнаяГруппа)} )
	| 
	|   ИТОГИ
	|    СУММА(КоличествоНачальныйОстаток)
	|ПО
	|     Номенклатура, Склад, Дата ПЕРИОДАМИ(ДЕНЬ, &НачалоПериода, &КонецПериода)";

	//Запрос.УстановитьПараметр("Пер1", НачалоПериода);
	//Запрос.УстановитьПараметр("Пер2", КонецПериода);
	//Запрос.УстановитьПараметр("Товар", Товар);
	
	//Если Построитель.Отбор.Найти("НачалоПериода") = Неопределено Тогда
	//    Построитель.Отбор.Добавить("НачалоПериода",,"Начало периода");
	//КонецЕсли;
	//Построитель.Отбор["НачалоПериода"].Использование = Истина;
	//Построитель.Отбор["НачалоПериода"].Значение      = НачалоПериода;
	//Построитель.Отбор["НачалоПериода"].ВидСравнения  = ВидСравнения.Равно;
	//
	//Если Построитель.Отбор.Найти("КонецПериода") = Неопределено Тогда
	//    Построитель.Отбор.Добавить("КонецПериода",,"Конец периода");
	//КонецЕсли;
	//Построитель.Отбор["КонецПериода"].Использование = Истина;
	//Построитель.Отбор["КонецПериода"].Значение      = ОкончаниеПериода;
	//Построитель.Отбор["КонецПериода"].ВидСравнения  = ВидСравнения.Равно;
	//
	Построитель.ЗаполнитьНастройки();
	
	Построитель.Параметры.Вставить("НачалоПериода", Дата(НачалоПериода));
	Построитель.Параметры.Вставить("КонецПериода", Дата(КонецПериода));
	Если НоменклатурнаяГруппа <> Неопределено Тогда
		Построитель.Параметры.Вставить("НоменклатурнаяГруппа", НоменклатурнаяГруппа); КонецЕсли;

	//Если Построитель.ДоступныеПоля.Найти("Склад") <> Неопределено Тогда
	//	Поле =  Построитель.ДоступныеПоля.Найти("Склад");
	//	Типы = Новый Массив;
	//	Типы.Добавить(Тип("СписокЗначений"));
	//	Типы.Добавить(Поле.ТипЗначения);
	//	Поле.ТипЗначения = Новый ОписаниеТипов(Типы); КонецЕсли;
	
	Для Каждого Элемент ИЗ Отбор.Элементы Цикл
		
		// Если значение отбора включено в пользовательскую настройку
		
		Если МассивЭлементовОтбора.Получить(Элемент.ИдентификаторПользовательскойНастройки) <> Неопределено Тогда
			ЭлементПН = МассивЭлементовОтбора.Получить(Элемент.ИдентификаторПользовательскойНастройки); // у него не заполнено левоезначение, будем его брыть из элемента отбора
			ИмяОтбора = Строка(Элемент.ЛевоеЗначение);
			Если стрНайти(ИмяОтбора, "Номенклатура")= 1 ИЛИ стрНайти(ИмяОтбора, "Склады") = 1 Тогда  Построитель.Отбор.Добавить(ИмяОтбора, ИмяОтбора);
				
				Построитель.Отбор[ИмяОтбора].ВидСравнения  = ПолучитьВидСранвнения(ЭлементПН.ВидСравнения); 
				
				Если ТипЗнч(ЭлементПН.ПравоеЗначение) = Тип("СписокЗначений") Тогда
					Построитель.Отбор[ИмяОтбора].Значение.ЗагрузитьЗначения(ЭлементПН.ПравоеЗначение.ВыгрузитьЗначения()); Построитель.Отбор[ИмяОтбора].Использование = Истина;
				Иначе
					Построитель.Отбор[ИмяОтбора].Установить(ЭлементПН.ПравоеЗначение, Истина); КонецЕсли; КонецЕсли;
		Иначе
			
			Если Элемент.Использование Тогда ИмяОтбора = Строка(Элемент.ЛевоеЗначение);
				Если стрНайти(ИмяОтбора, "Номенклатура")= 1 ИЛИ стрНайти(ИмяОтбора, "Склады") = 1 Тогда  Построитель.Отбор.Добавить(ИмяОтбора, ИмяОтбора);

				Построитель.Отбор[ИмяОтбора].ВидСравнения  = ПолучитьВидСранвнения(Элемент.ВидСравнения);
				Если ТипЗнч(Элемент.ПравоеЗначение) = Тип("СписокЗначений") Тогда
					Построитель.Отбор[ИмяОтбора].Значение.ЗагрузитьЗначения(Элемент.ПравоеЗначение.ВыгрузитьЗначения()); Построитель.Отбор[ИмяОтбора].Использование = Истина;
				Иначе
					Построитель.Отбор[ИмяОтбора].Установить(Элемент.ПравоеЗначение, Истина); КонецЕсли; КонецЕсли;
		КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Результат = Построитель.ПолучитьЗапрос().Выполнить();
	КолДней =(КонецДня(КонецПериода)+1 - НачалоДня(НачалоПериода))/86400; //считаем количество полных дней в периоде
	ВыборкаПериод = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Номенклатура"); 
	Пока ВыборкаПериод.Следующий() Цикл ВыборкаСклад = ВыборкаПериод.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Склад");
		Пока ВыборкаСклад.Следующий() Цикл Сум = 0; Выборка = ВыборкаСклад.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Дата", "ВСЕ"); Ид = 0;
			Пока Выборка.Следующий() Цикл Сум = Сум + Выборка.Количество; КонецЦикла;  
			НовСтрока = Товары.Добавить();	ЗаполнитьЗначенияСвойств(НовСтрока, ВыборкаСклад); НовСтрока.КоличествоСреднее = Сум/КолДней; КонецЦикла; КонецЦикла;
	
	Возврат Товары;
КонецФункции

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	//Связь между таблицей значений и именами в СКД 

	Отбор = КомпоновщикНастроек.Настройки.Отбор;
	Параметры = КомпоновщикНастроек.ПользовательскиеНастройки;
	ЗначениеНоменклатурнаяГруппа = Неопределено; МассивЭлементовОтбора = Новый Соответствие;
	Для Каждого Элемент ИЗ Параметры.Элементы Цикл
		
		Если ТипЗнч(Элемент) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") И Элемент.Параметр = Новый ПараметрКомпоновкиДанных("НачалоПериода") И Элемент.Использование Тогда
	    	ЗначениеНачалоПериода = Элемент.Значение;
		КонецЕсли;
		
		Если ТипЗнч(Элемент) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") И Элемент.Параметр = Новый ПараметрКомпоновкиДанных("КонецПериода") И Элемент.Использование Тогда
	    	ЗначениеКонецПериода = Элемент.Значение;
		КонецЕсли;		
		
		Если ТипЗнч(Элемент) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") И Элемент.Параметр = Новый ПараметрКомпоновкиДанных("НоменклатурнаяГруппа") И Элемент.Использование Тогда
	    	ЗначениеНоменклатурнаяГруппа = Элемент.Значение;
		КонецЕсли;
		Если ТипЗнч(Элемент) = Тип("ЭлементОтбораКомпоновкиДанных") И Элемент.Использование Тогда
			МассивЭлементовОтбора.Вставить(Элемент.ИдентификаторПользовательскойНастройки, Элемент);
		КонецЕсли;
	КонецЦикла;
	ВнешниеНаборыДанных = Новый Структура;

	ВнешниеНаборыДанных.Вставить("ОстаткиНаКаждыйДень", ПолучитьТаблицуОстатковНаДень(, , , , , Истина));

	ПолеКоличествоСреднее = Новый ПолеКомпоновкиДанных("КоличествоСреднее");
	ПоказатьОстаткиНаКаждыйДень = Ложь;
	Для Каждого Элемент ИЗ КомпоновщикНастроек.Настройки.Выбор.Элементы Цикл
		
		Если Элемент.Поле = ПолеКоличествоСреднее И Элемент.Использование Тогда ПоказатьОстаткиНаКаждыйДень = Истина; Прервать; КонецЕсли; КонецЦикла;
	
	//ЗначениеНачалоПериода = Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	//ЗначениеКонецПериода = Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	Если ПоказатьОстаткиНаКаждыйДень И ЗначениеЗаполнено(ЗначениеНачалоПериода) И ЗначениеЗаполнено(ЗначениеКонецПериода) Тогда
		ВнешниеНаборыДанных.Вставить("ОстаткиНаКаждыйДень", ПолучитьТаблицуОстатковНаДень(ЗначениеНачалоПериода, ЗначениеКонецПериода, ЗначениеНоменклатурнаяГруппа, Отбор, МассивЭлементовОтбора));
	КонецЕсли;
	
	//Макет компоновки 
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), ДанныеРасшифровки);

	//Компоновка данных 
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);

	//Вывод результата 
	ДокументРезультат.Очистить();
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);

КонецПроцедуры
