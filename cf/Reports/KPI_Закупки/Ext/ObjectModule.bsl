Функция КомпоновщикНастроекУстановитьПараметр(КомпоновщикНастроек, ИмяПараметра, Значение)
	НекийПараметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
   
	Если НекийПараметр = Неопределено Тогда
		НекийПараметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Добавить();
		НекийПараметр.Параметр = Новый ПараметрКомпоновкиДанных(ИмяПараметра);
	КонецЕсли;
	
	НекийПараметр.Использование = Истина;
	НекийПараметр.Значение = Значение;
КонецФункции
Функция ПолучитьТаблицуABC(Период, Склады = Неопределено, A, B, КатегорияТовара = Неопределено, Бренд = Неопределено)
		
	УстановитьПривилегированныйРежим(Истина);
	
	Схема = Отчеты.ABCАнализНоменклатурыДинамичесий.ПолучитьМакет("СхемаПодбора");

//	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
//	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
//	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
//	ТаблицаЗначений = Новый ТаблицаЗначений;
//		
//	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(Схема, КомпановщикПодбора.ПолучитьНастройки(), , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
//	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
//	ПроцессорВывода.УстановитьОбъект(ТаблицаЗначений);
//	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
/////
	
	//Из схемы возьмем настройки по умолчанию
	Настройки = Схема.НастройкиПоУмолчанию;
	//Если Настройки = Неопределено Тогда Настройки = КомпоновщикОтчета.Настройки КонецЕсли;
	
	//Формируем макет, с помощью компоновщика макета
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	        
	// Загрузим пользовтельские настройки которые ввыел пользователь совсем недавно
	КомпНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпНастроек.ЗагрузитьНастройки(Настройки);
	//КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(КомпоновщикОтчета.ПользовательскиеНастройки);
	
	КомпоновщикНастроекУстановитьПараметр(КомпНастроек, "ПериодРасчета"		, Период);
	КомпоновщикНастроекУстановитьПараметр(КомпНастроек, "ТипЦен", Константы.ТипЦенСебестоимостьДляРасчетаЗП.Получить());
	КомпоновщикНастроекУстановитьПараметр(КомпНастроек, "ТипЦен1", Константы.ТипЦенЗакупочныйРуб.Получить());
	Если Склады <> НЕОПРЕДЕЛЕНО ТОГДА
		КомпоновщикНастроекУстановитьПараметр(КомпНастроек, "Склады"	,Склады); КонецЕсли;
	
	Для каждого элементОтбора Из КомпНастроек.Настройки.Отбор.Элементы Цикл
		Если элементОтбора.Представление = "КатегорияТовара" И КатегорияТовара <> Неопределено Тогда
			элементОтбора.ПравоеЗначение = КатегорияТовара; 
			элементОтбора.Использование = Истина;
		ИначеЕсли
			элементОтбора.Представление = "Бренд" И Бренд <> Неопределено Тогда
			элементОтбора.ПравоеЗначение = Бренд; 
			элементОтбора.Использование = Истина;
		КонецЕсли;	
	КонецЦикла;
	
	//Передаем в макет компоновки схему, настройки и данные расшифровки
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, КомпНастроек.ПолучитьНастройки(),,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	//Выполним компоновку с помощью процессора компоновки
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	              
	//Очищаем поле табличного документа
	Результат = Новый ТаблицаЗначений;
	
	//Выводим результат в табличный документ
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(Результат);

	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	УстановитьПривилегированныйРежим(Ложь);
	
	ABCXYZАнализ.ОпределитьКатегорииABC(Результат,Перечисления.КлассификацияАнализа.Прибыль, Перечисления.СпособРасчетаABC.ПоПарето, A, B);
	
	Возврат Результат;

КонецФункции
Функция ПолучитьТаблицуГодовыхПродаж(ДатаНачала, ДатаОкончания, Склады = Неопределено, ГруппыСкладов = Неопределено, КатегорияТовара = Неопределено, Бренд = Неопределено)
	
	Условие = ?(Склады = Неопределено, "", " Склад В (&Склады) ");
	Условие = Условие + ?(ГруппыСкладов = Неопределено, "", ?(ПустаяСтрока(Условие), "", " И ") + " Склад В (ВЫБРАТЬ Склад ИЗ Справочник.ГруппыСкладов.Склады ГДЕ Ссылка В (&ГруппыСкладов)) ");
	Условие = Условие + ?(КатегорияТовара = Неопределено, "", ?(ПустаяСтрока(Условие), "", " И ") + " Номенклатура.КатегорияТовара = &КатегорияТовара ");
	Условие = Условие + ?(Бренд = Неопределено, "", ?(ПустаяСтрока(Условие), "", " И ") + " Номенклатура.Производитель = &Бренд ");
	
	Запрос = Новый Запрос("ВЫБРАТЬ Номенклатура, КоличествоОборот КАК ГодовыеПродажи, КоличествоОборот/12 КАК СредниеГодовыеПродажи 
	|ИЗ РегистрНакопления.Продажи.Обороты(&НачалоПериода, &КонецПериода,,"  + Условие + ")");
	Запрос.УстановитьПараметр("НачалоПериода", ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода", ДатаОкончания);
	Запрос.УстановитьПараметр("Склады", Склады);
	Запрос.УстановитьПараметр("ГруппыСкладов", ГруппыСкладов);
	Запрос.УстановитьПараметр("КатегорияТовара", КатегорияТовара);
	Запрос.УстановитьПараметр("Бренд", Бренд);

	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьТаблицуСреднихПродажПомесячно(НачалоПериода, КонецПериода, Склады = Неопределено, ГруппыСкладов = Неопределено, КатегорияТовара = Неопределено, Бренд = Неопределено)
	
	// разбиваем период на месяца
	Запрос = Новый Запрос("ВЫБРАТЬ НАЧАЛОПЕРИОДА(Дата, МЕСЯЦ) НачалоПериода ИЗ РегистрСведений.РабочиеДни ГДЕ Дата МЕЖДУ &НачалоПериода И &КонецПериода СГРУППИРОВАТЬ ПО НАЧАЛОПЕРИОДА(Дата, МЕСЯЦ)");
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТаблицаРезультат = Новый ТаблицаЗначений;
	ТаблицаРезультат.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаРезультат.Колонки.Добавить("ГодовыеПродажи", Новый ОписаниеТипов("Число"));
	ТаблицаРезультат.Колонки.Добавить("СредниеГодовыеПродажи", Новый ОписаниеТипов("Число"));
	ТаблицаРезультат.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	Пока Выборка.Следующий() Цикл
		Таблица = ПолучитьТаблицуГодовыхПродаж(ДобавитьМесяц(Выборка.НачалоПериода, -12), Выборка.НачалоПериода, Склады, ГруппыСкладов, КатегорияТовара, Бренд);
	   	Таблица.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
		Таблица.ЗаполнитьЗначения(Выборка.НачалоПериода, "Период");
		КонвертацияТипов.ДобавитьТаблицуКДругойТаблице(ТаблицаРезультат, Таблица);
	КонецЦикла;

	Возврат ТаблицаРезультат;
	
КонецФункции


Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	//Макет компоновки 
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;

	Параметры = КомпоновщикНастроек.ПользовательскиеНастройки;

	Склады = Неопределено; A = 80; B = 15; КатегорияТовара = Неопределено; Бренд = Неопределено;
	ГруппыСкладов = Неопределено;
	
	Для Каждого Элемент ИЗ Параметры.Элементы Цикл
		
		
		Если ТипЗнч(Элемент) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") И Элемент.Параметр = Новый ПараметрКомпоновкиДанных("Период") И Элемент.Использование Тогда
	    	ЗначениеПериод = Элемент.Значение;
		КонецЕсли;

		
		Если ТипЗнч(Элемент) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") И Элемент.Параметр = Новый ПараметрКомпоновкиДанных("НачалоПериода") И Элемент.Использование Тогда
	    	ЗначениеНачалоПериода = Элемент.Значение;
		КонецЕсли;
		
		Если ТипЗнч(Элемент) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") И Элемент.Параметр = Новый ПараметрКомпоновкиДанных("КонецПериода") И Элемент.Использование Тогда
	    	ЗначениеКонецПериода = Элемент.Значение;
		КонецЕсли;	
		
		Если ТипЗнч(Элемент) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") И Элемент.Параметр = Новый ПараметрКомпоновкиДанных("A") И Элемент.Использование Тогда
	    	A = Элемент.Значение;
		КонецЕсли;
		
		Если ТипЗнч(Элемент) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") И Элемент.Параметр = Новый ПараметрКомпоновкиДанных("B") И Элемент.Использование Тогда
	    	B = Элемент.Значение;
		КонецЕсли;	
		
		Если ТипЗнч(Элемент) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") И Элемент.Параметр = Новый ПараметрКомпоновкиДанных("Склады") И Элемент.Использование Тогда
	    	Склады = Элемент.Значение;
		КонецЕсли;
		
		Если ТипЗнч(Элемент) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") И Элемент.Параметр = Новый ПараметрКомпоновкиДанных("ГруппыСкладов") И Элемент.Использование Тогда
	    	ГруппыСкладов = Элемент.Значение;
		КонецЕсли;
		
		Если ТипЗнч(Элемент) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если ТипЗнч(Элемент.ПравоеЗначение) = Тип("СправочникСсылка.КатегорииТоваров") И Элемент.Использование Тогда
			КатегорияТовара = Элемент.ПравоеЗначение; КонецЕсли;
		КонецЕсли;	
		Если ТипЗнч(Элемент) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если ТипЗнч(Элемент.ПравоеЗначение) = Тип("СправочникСсылка.Производители") И Элемент.Использование Тогда
			Бренд = Элемент.ПравоеЗначение; КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), ДанныеРасшифровки, ,); //Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ТаблицаABC", ПолучитьТаблицуABC(ЗначениеПериод, Склады, A, B, КатегорияТовара, Бренд));
	ВнешниеНаборыДанных.Вставить("ГодовыеПродажи", ПолучитьТаблицуСреднихПродажПомесячно(ЗначениеПериод.ДатаНачала, ЗначениеПериод.ДатаОкончания, Склады, ГруппыСкладов, КатегорияТовара, Бренд));
	
	//Компоновка данных 
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);

	//Вывод результата 
	ДокументРезультат.Очистить();
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);

	
	////Выводим результат в табличный документ
	//Результат = Новый ТаблицаЗначений;

	//ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	//ПроцессорВывода.УстановитьОбъект(Результат);

	//ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	//а = 1;
КонецПроцедуры
