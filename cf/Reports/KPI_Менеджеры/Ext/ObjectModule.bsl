//Функция КомпоновщикНастроекУстановитьПараметр(КомпоновщикНастроек, ИмяПараметра, Значение)
//	НекийПараметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
//   
//	Если НекийПараметр = Неопределено Тогда
//		НекийПараметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Добавить();
//		НекийПараметр.Параметр = Новый ПараметрКомпоновкиДанных(ИмяПараметра);
//	КонецЕсли;
//	
//	НекийПараметр.Использование = Истина;
//	НекийПараметр.Значение = Значение;
//КонецФункции

//Функция ПолучитьПрибыльПоМенеджерам(ДатаНачала, ДатаОкончания, Менеджер = Неопределено, МенеджерОплаты = Неопределено)
//	
//	// разделим заданный интервал дат на месяцы и рассчитаем прибыль на каждый месяц
//	
//	Запрос = Новый Запрос("ВЫБРАТЬ НАЧАЛОПЕРИОДА(Дата, МЕСЯЦ) НачалоПериода ИЗ РегистрСведений.РабочиеДни ГДЕ Дата МЕЖДУ &НачалоПериода И &КонецПериода СГРУППИРОВАТЬ ПО НАЧАЛОПЕРИОДА(Дата, МЕСЯЦ)");
//	Запрос.УстановитьПараметр("НачалоПериода", ДатаНачала.Дата);
//	Запрос.УстановитьПараметр("КонецПериода", ДатаОкончания.Дата);
//	Выборка = Запрос.Выполнить().Выбрать();
//	ИтоговаяТаблица = Новый ТаблицаЗначений;
//	Если МенеджерОплаты <> Неопределено Тогда
//		ИтоговаяТаблица.Колонки.Добавить("МенеджерОплаты", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
//	Иначе
//		ИтоговаяТаблица.Колонки.Добавить("Менеджер", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
//	КонецЕсли;
//	
//	ИтоговаяТаблица.Колонки.Добавить("Прибыль", Новый ОписаниеТипов("Число"));
//	ИтоговаяТаблица.Колонки.Добавить("ОплаченнаяСебестоимость", Новый ОписаниеТипов("Число"));
//	ИтоговаяТаблица.Колонки.Добавить("СуммаОплаты", Новый ОписаниеТипов("Число"));
//	ИтоговаяТаблица.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));

//	Пока Выборка.Следующий() Цикл
//		
//		Таблица = ПолучитьПрибыльПоМенеджерам_ЗаМесяц(?(Выборка.НачалоПериода < ДатаНачала.Дата, ДатаНачала.Дата, Выборка.НачалоПериода), ?(КонецМесяца(Выборка.НачалоПериода) > ДатаОкончания.Дата, ДатаОкончания.Дата, КонецМесяца(Выборка.НачалоПериода)), Менеджер, МенеджерОплаты);
//		Таблица.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
//		Таблица.ЗаполнитьЗначения(Выборка.НачалоПериода, "Период");
//		КонвертацияТипов.ДобавитьТаблицуКДругойТаблице(ИтоговаяТаблица, Таблица);
//		
//	КонецЦикла;
//	
//	// переименовываем
//	Если МенеджерОплаты <> Неопределено Тогда
//		ИтоговаяТаблица.Колонки.МенеджерОплаты.Имя = "Менеджер";
//	КонецЕсли;

//	Возврат ИтоговаяТаблица;
//	
//КонецФункции

//Функция ПолучитьПрибыльПоМенеджерам_ЗаМесяц(ДатаНачала, ДатаОкончания, Менеджер = Неопределено, МенеджерОплаты = Неопределено)
//		
//	УстановитьПривилегированныйРежим(Истина);
//	
//	Схема = Отчеты.ПрибыльПоМенеджерам.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных_нов");
//	
//	Настройки = Схема.ВариантыНастроек.Найти("ВариантСводный").Настройки;
//	
//	// добавлем отбор по менеджерам
//	Если Менеджер <> НЕОПРЕДЕЛЕНО ТОГДА
//	//	КомпоновщикНастроекУстановитьПараметр(КомпНастроек, "Менеджер"	,Менеджер); 
//	
//		ЭлементОтбора = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
//		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОсновнойМенеджер");
//		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
//		ЭлементОтбора.ПравоеЗначение = Менеджер;
//		ЭлементОтбора.Использование = Истина;
//	КонецЕсли;		
//	
//	Если МенеджерОплаты <> НЕОПРЕДЕЛЕНО ТОГДА
//	//	КомпоновщикНастроекУстановитьПараметр(КомпНастроек, "Менеджер"	,Менеджер); 
//		Настройки = Схема.ВариантыНастроек.Найти("ВариантСводныйПоМенеджеруОплаты").Настройки;
//	
//		ЭлементОтбора = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
//		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МенеджерОплаты");
//		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
//		ЭлементОтбора.ПравоеЗначение = МенеджерОплаты;
//		ЭлементОтбора.Использование = Истина;
//	КонецЕсли;	
//	
//	// отключаем вертикальные итоги, а то в ТЗ лишняя строка появляется по итогам, она нам не нужна
//	Параметр = Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВертикальноеРасположениеОбщихИтогов"));
//    Параметр.Значение = РасположениеИтоговКомпоновкиДанных.Нет;
//    Параметр.Использование = ИСТИНА;
//	
//	//Формируем макет, с помощью компоновщика макета
//	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
//	        
//	КомпНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
//	КомпНастроек.ЗагрузитьНастройки(Настройки);
//	
//	КомпоновщикНастроекУстановитьПараметр(КомпНастроек, "НачалоПериода"		, ДатаНачала);
//	КомпоновщикНастроекУстановитьПараметр(КомпНастроек, "КонецПериода"		, ДатаОкончания);
//	
//	КомпоновщикНастроекУстановитьПараметр(КомпНастроек, "ТипЦенСебестоимость", Константы.ТипЦенСебестоимостьДляРасчетаЗП.Получить());
//	КомпоновщикНастроекУстановитьПараметр(КомпНастроек, "ТипЦенЗакупка", Константы.ТипЦенЗакупочныйРуб.Получить());
//	

//	
//	//Для каждого элементОтбора Из КомпНастроек.Настройки.Отбор.Элементы Цикл
//	//	Если элементОтбора.Представление = "КатегорияТовара" И КатегорияТовара <> Неопределено Тогда
//	//		элементОтбора.ПравоеЗначение = КатегорияТовара; 
//	//		элементОтбора.Использование = Истина;
//	//	ИначеЕсли
//	//		элементОтбора.Представление = "Бренд" И Бренд <> Неопределено Тогда
//	//		элементОтбора.ПравоеЗначение = Бренд; 
//	//		элементОтбора.Использование = Истина;
//	//	КонецЕсли;	
//	//КонецЦикла;
//	
//	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, КомпНастроек.ПолучитьНастройки(),,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
//	
//	//Выполним компоновку с помощью процессора компоновки
//	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
//	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
//	              
//	//Выводим результат в табличный документ
//	Результат = Новый ТаблицаЗначений;
//	
//	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
//	ПроцессорВывода.УстановитьОбъект(Результат);

//	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
//	УстановитьПривилегированныйРежим(Ложь);
//		
//	Возврат Результат;

//КонецФункции

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	УстановитьПривилегированныйРежим(Истина);

	Настройки = КомпоновщикНастроек.ПолучитьНастройки();

	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,Настройки,ДанныеРасшифровки);

	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);

	ДокументРезультат.Очистить();
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);

	ПроцессорВывода.НачатьВывод();

	ЭлементРезультата = ПроцессорКомпоновки.Следующий();
	Пока ЭлементРезультата <> Неопределено Цикл
		ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
		ЭлементРезультата = ПроцессорКомпоновки.Следующий();
	КонецЦикла;
	ПроцессорВывода.ЗакончитьВывод();
	
//	СтандартнаяОбработка = Ложь;
//	
//	//Макет компоновки 
//	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;

//	Параметры = КомпоновщикНастроек.ПользовательскиеНастройки;
//	Менеджер = Неопределено;
//	МенеджерОплаты = Неопределено;
//	Для Каждого Элемент ИЗ Параметры.Элементы Цикл
//		
//		Если ТипЗнч(Элемент) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") И Элемент.Параметр = Новый ПараметрКомпоновкиДанных("НачалоПериода") И Элемент.Использование Тогда
//	    	ЗначениеНачалоПериода = Элемент.Значение;
//		КонецЕсли;
//		
//		Если ТипЗнч(Элемент) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") И Элемент.Параметр = Новый ПараметрКомпоновкиДанных("КонецПериода") И Элемент.Использование Тогда
//	    	ЗначениеКонецПериода = Элемент.Значение;
//		КонецЕсли;
//		
//		Если ТипЗнч(Элемент) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") И Элемент.Параметр = Новый ПараметрКомпоновкиДанных("МенеджерОплаты") И Элемент.Использование Тогда
//	    	МенеджерОплаты = Элемент.Значение;
//		КонецЕсли;			
//		
//		//Если ТипЗнч(Элемент) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") И Элемент.Параметр = Новый ПараметрКомпоновкиДанных("Менеджер") И Элемент.Использование Тогда
//		//	Менеджер = Элемент.Значение;
//		//КонецЕсли;
//	//	
//		Если ТипЗнч(Элемент) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
//			//Если ТипЗнч(Элемент.ПравоеЗначение) = Тип("СправочникСсылка.КатегорииТоваров") И
//				Если Элемент.Использование Тогда
//			Менеджер = Элемент.ПравоеЗначение; КонецЕсли;
//		КонецЕсли;	
//	КонецЦикла;
//	
//	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), ДанныеРасшифровки);

//	ВнешниеНаборыДанных = Новый Структура;
//	ВнешниеНаборыДанных.Вставить("ПрибыльПоМенеджерам", ПолучитьПрибыльПоМенеджерам(ЗначениеНачалоПериода, ЗначениеКонецПериода, Менеджер, МенеджерОплаты));
//	
//	//Компоновка данных 
//	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
//	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);

//	//Вывод результата 
//	ДокументРезультат.Очистить();
//	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
//	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
//	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
//	
КонецПроцедуры
