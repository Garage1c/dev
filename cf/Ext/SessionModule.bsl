
Процедура УстановкаПараметровСеанса(ИменаПараметровСеанса)
	Если ИменаПараметровСеанса = Неопределено Тогда
		// Раздел установки параметров сеанса при начале сеанса (ИменаПараметровСеанса = Неопределено)
		// Выполняется установка параметров сеанса, которые можно инициализировать 
		// при начале работы системы
		
	Иначе
		// Установка параметров сеанса "по требованию"
		
		// Параметры сеанса, инициализация которых требует обращения к одним и тем же данным
		// следует инициализировать сразу группой. Для того, чтобы избежать их повторной инициализации,
		// имена уже установленных параметров сеанса сохраняются в структуре УстановленныеПараметры
		УстановленныеПараметры = Новый Структура;
		Для Каждого ИмяПараметра ИЗ ИменаПараметровСеанса Цикл УстановитьЗначениеПараметраСеанса(ИмяПараметра, УстановленныеПараметры) КонецЦикла; КонецЕсли;
	
КонецПроцедуры

// Установить значения параметров сеанса и возвратить имена установленных параметров сеанса
// в параметре УстановленныеПараметры.
//
// Параметры
//  ИмяПараметра  - Строка - имя параметра сеанса, который требуется установить (проинициализировать).
//  УстановленныеПараметры  - Массив - массив, в который добавляются имена
//                                        установленных (проинициализированных) параметров.
//
Процедура УстановитьЗначениеПараметраСеанса(Знач ИмяПараметра, УстановленныеПараметры)
	
	// СтандартныеПодсистемы
	// Если в данном вызове УстановкаПараметровСеанса параметр ИмяПараметра уже 
	// установлен - возврат
	Если УстановленныеПараметры.Свойство(ИмяПараметра) Тогда Возврат КонецЕсли;

	// Пользователи
	Если ИмяПараметра = "ТекущийПользователь" Тогда
		
		ПараметрыСеанса[ИмяПараметра] = Справочники.Пользователи.НайтиПоРеквизиту("ПользовательИБ", ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор);
		//ПользователиПолныеПрава.ОпределитьТекущегоПользователя(ИмяПараметра, УстановленныеПараметры);
		
	ИначеЕсли ИмяПараметра = "СобытияСистемы" Тогда // закешируем события
		
		Соответствие 	= Новый Структура;
		Запрос 			= Новый Запрос("ВЫБРАТЬ Ссылка, Представление ИЗ Справочник.СобытияСистемы");
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл Соответствие.Вставить(Выборка.Представление, Выборка.Ссылка) КонецЦикла;
		ПараметрыСеанса[ИмяПараметра] = Новый ФиксированнаяСтруктура(Соответствие);
		
	ИначеЕсли ИмяПараметра = "УстановитьПараллельныйПризнак" Тогда
		
		ПараметрыСеанса[ИмяПараметра] = Ложь;
		
	ИначеЕсли ИмяПараметра = "ИмяКомпьютераКлиента" Тогда
		
		УстановленныеПараметры.Вставить("ИмяКомпьютераКлиента", "");
		ПараметрыСеанса[ИмяПараметра] = УстановленныеПараметры.ИмяКомпьютераКлиента;
		
	ИначеЕсли ИмяПараметра = "ДоступныВсеПартнеры" Тогда
		
		ПараметрыСеанса[ИмяПараметра] = ПолныеПрава.ДоступныВсеПартнеры();
		
	ИначеЕсли ИмяПараметра = "ДоступныеПользователи" Тогда
		
		ПараметрыСеанса[ИмяПараметра] = Новый ФиксированныйМассив(ПолныеПрава.ПолучитьДоступныхМенеджеров());
		
	ИначеЕсли ИмяПараметра = "ДоступныеТипыЦен" Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ ПЕРВЫЕ 1 ИСТИНА ПОМЕСТИТЬ ВидитВсе ИЗ РегистрСведений.ПравоПросмотраТиповЦен ГДЕ Пользователь = &Пользователь И ТипЦен = &ПустойТипЦен;
		
		|ВЫБРАТЬ РАЗЛИЧНЫЕ Ссылка ТипЦен
		|ИЗ Справочник.ТипыЦен Спр
		|
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ПравоПросмотраТиповЦен Рег
		|ПО
		|	ИСТИНА В(ВЫБРАТЬ ИСТИНА ИЗ ВидитВсе) ИЛИ
		|		(Спр.Ссылка = Рег.ТипЦен И
		|		(Рег.Пользователь = &Пользователь ИЛИ Рег.Пользователь = &ПустойПользователь))
		|");
		
		Запрос.УстановитьПараметр("Пользователь", 		ПараметрыСеанса.ТекущийПользователь);
		Запрос.УстановитьПараметр("ПустойПользователь", Справочники.Пользователи.ПустаяСсылка());
		Запрос.УстановитьПараметр("ПустойТипЦен", 		Справочники.ТипыЦен.ПустаяСсылка());
		
		ПараметрыСеанса[ИмяПараметра] = Новый ФиксированныйМассив(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ТипЦен"));
		
	ИначеЕсли ИмяПараметра = "ТекущиеРоли" Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ 	Роль 
		|ПОМЕСТИТЬ 	СписокРолей
		|ИЗ 		РегистрСведений.РолиПользователей 
		|ГДЕ 		Пользователь = &Пользователь
		|;
		|ВЫБРАТЬ 	Ссылка КАК Роль
		|ИЗ 		Справочник.Роли
		|ГДЕ		Ссылка В ИЕРАРХИИ(ВЫБРАТЬ Роль ИЗ СписокРолей КАК СписокРолей)
		|");
		
		Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
		
		ПараметрыСеанса[ИмяПараметра] = Новый ФиксированныйМассив(
					Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Роль"));
					
	ИначеЕсли ИмяПараметра = "ТекущиеСклады" Тогда
			
		Запрос = Новый Запрос("
		|ВЫБРАТЬ 	Склад 
		|ПОМЕСТИТЬ 	СписокСкладов
		|ИЗ 		регистрСведений.СкладыПользователя 
		|ГДЕ 		Пользователь = &Пользователь
		|;
		|ВЫБРАТЬ 	Ссылка КАК Склад
		|ИЗ 		Справочник.Склады
		|ГДЕ		Ссылка В ИЕРАРХИИ(ВЫБРАТЬ Склад ИЗ СписокСкладов)
		|");
		
		Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
		
		ПараметрыСеанса[ИмяПараметра] = Новый ФиксированныйМассив(
				Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Склад"));
				
	ИначеЕсли ИмяПараметра = "ТекущийСклад" Тогда
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 	ПЕРВЫЕ 1 Ссылка
	|ИЗ 		Справочник.Склады
	|ГДЕ		СтрокаПодключения = &СтрокаСоединения И
	|			ПометкаУдаления = Ложь
	|");
	
	Запрос.УстановитьПараметр("СтрокаСоединения", СтрокаСоединенияИнформационнойБазы());
	
	Выполнение = Запрос.Выполнить();
	
	Если Выполнение.Пустой() Тогда
		
		ПараметрыСеанса[ИмяПараметра] = Справочники.Склады.ПустаяСсылка();
		
	Иначе
		
		Выборка = Выполнение.Выбрать();
		Выборка.Следующий();
		
		ПараметрыСеанса[ИмяПараметра] = Выборка.Ссылка;	КонецЕсли;
		
	ИначеЕсли 	ИмяПараметра = "ЗащитаПроведенияЗаказНаряда" Или
				ИмяПараметра = "ИнтеграцияС81Отключена" Или
				ИмяПараметра = "СканированиеИзмененийОтключено" Или
				ИмяПараметра = "ИнтеграцияСБухгалтериейОтключена" Тогда
				
		ПараметрыСеанса[ИмяПараметра] = Ложь;
				
	ИначеЕсли ИмяПараметра = "ДействияПоСборкиЗаказа" Тогда ПараметрыСеанса[ИмяПараметра] = Новый Структура("ТаблицаПеремещений", Новый ТаблицаЗначений);
		
	ИначеЕсли ИмяПараметра = "НастройкиОперативнойИнфоОТоваре" Тогда ПараметрыСеанса[ИмяПараметра] = ЗначениеВСтрокуВнутр(РаботаСНоменклатурой.ПолучитьНастройкиОперативнойИнфоОТоваре());
		
	ИначеЕсли ИмяПараметра = "КонтрольОстатковВСеансеОтключен" Тогда ПараметрыСеанса[ИмяПараметра] = Ложь;
		
	//ИначеЕсли ИмяПараметра = "ВыгонялкаНазначена" Тогда ПараметрыСеанса[ИмяПараметра] = Константы.ВремяЗавершенияРаботыПользователей.Получить() > ТекущаяДата();
	ИначеЕсли ИмяПараметра = "ВыгонялкаНазначена" Тогда ПараметрыСеанса[ИмяПараметра] = Ложь;
		
	ИначеЕсли ИмяПараметра = "Отделы" Тогда 
		
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ ПЕРВЫЕ 1 ИСТИНА ПОМЕСТИТЬ ВидитВсе ИЗ РегистрСведений.ОтделыПользователя ГДЕ Пользователь = &Пользователь И Отдел = &ПустойОтдел;
		|ВЫБРАТЬ 	Ссылка Отдел
		|ИЗ Справочник.Отделы
		|ГДЕ 		Ссылка в иерархии(Выбрать Отдел из Справочник.Пользователи ГДЕ Ссылка=&Пользователь) ИЛИ ИСТИНА В (ВЫБРАТЬ ИСТИНА ИЗ ВидитВсе)
		|ОБЪЕДИНИТЬ
		|ВЫБРАТЬ 	Отдел
		|ИЗ			РегистрСведений.ОтделыПользователя
		|ГДЕ		Пользователь = &Пользователь И Отдел <> &ПустойОтдел
		|");
		Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
		Запрос.УстановитьПараметр("ПустойОтдел", Справочники.Отделы.ПустаяСсылка());
	
		ПараметрыСеанса[ИмяПараметра] = Новый ФиксированныйМассив(
				Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Отдел"));
				
	ИначеЕсли ИмяПараметра = "Подразделения" Тогда 
		
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ 	Подразделение Подразделение
		|ИЗ 		Справочник.Пользователи 
		|ГДЕ 		Ссылка = &Пользователь
		|ОБЪЕДИНИТЬ
		|ВЫБРАТЬ 	Подразделение
		|ИЗ			РегистрСведений.ПодразделенияПользователя
		|ГДЕ		Пользователь = &Пользователь
		|");
		Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
		
		ПараметрыСеанса[ИмяПараметра] = Новый ФиксированныйМассив(
				Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение"));
				
	ИначеЕсли ИмяПараметра = "ОтделыКлиентскогоСервиса" Тогда 
		
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ 	Отдел
		|ПОМЕСТИТЬ 	Отделы
		|ИЗ			РегистрСведений.ОтделыКлиентскогоСервиса
		|ГДЕ		Пользователь = &Пользователь
		|;
		|ВЫБРАТЬ 	Ссылка КАК Отдел 
		|ИЗ			Справочник.Отделы
		|ГДЕ		Ссылка В ИЕРАРХИИ (ВЫБРАТЬ Отдел ИЗ Отделы)
		|");
		Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
		
		ПараметрыСеанса[ИмяПараметра] = Новый ФиксированныйМассив(
				Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Отдел"));
				
	ИначеЕсли ИмяПараметра = "ТекущиеМгновенныеСообщения" Тогда 
		
		//ПараметрыСеанса[ИмяПараметра] = ЗначениеВСтрокуВнутр(Новый Массив);
		
		//ПараметрыСеанса[ИмяПараметра] = ПоместитьВоВременноеХранилище(Новый Массив, Новый УникальныйИдентификатор); // массив сообщений которые нужно вывести
		
		// Запустим фоновое задание которое будет сканировать регистр и помещать данные для сообщений
		
		//Поток.ЗапуститьПоток("События.ЗапуститьРоботаСканераСообщенийДляПользователя()", Новый УникальныйИдентификатор);
		
		//Структура = Новый Структура;
		//
		//Для Каждого Матрица Из РаботаСНоменклатурой.Матрицы() Цикл
		//	Структура.Вставить(Матрица, ПоместитьВоВременноеХранилище(БиблиотекаКартинок["Матрица" + Матрица], Новый УникальныйИдентификатор)) КонецЦикла;
		//
		//ПараметрыСеанса[ИмяПараметра] = Новый ФиксированнаяСтруктура(Структура);
			
		
	//ИначеЕсли ИмяПараметра = "ПараметрыПакетнойПечати" Тогда 
	//	
	//	СпособПечати = ОбщиеФункции.НастройкаПользователя("СпособПечати");
	//	Если СпособПечати = Неопределено Тогда СпособПечати = "НеПечатать" КонецЕсли;
	//	
	//	ПараметрыСеанса[ИмяПараметра] = Новый ФиксированнаяСтруктура(Новый Структура("СпособПечати",  СпособПечати));
		 
		
	//ИначеЕсли ИмяПараметра = "ТекущаяОбласть" Тогда  
	//	
	//	Структура = ПользователиИнформационнойБазы.ТекущийПользователь().РазделениеДанных;
	//	//ПараметрыСеанса[ИмяПараметра] = ?(Структура.Количество(), Структура.Область, Справочники.Область.ПустаяСсылка());
	//	ПараметрыСеанса[ИмяПараметра] = ?(Структура.Количество(), Структура.Область, Справочники.Область.Гараж);
	//	
	//ИначеЕсли ИмяПараметра = "РазделениеДанныхВключено" Тогда ПараметрыСеанса[ИмяПараметра] = Истина;
	//	
	////ИначеЕсли ИмяПараметра = "Мультиязычность" Тогда ПараметрыСеанса[ИмяПараметра] = Истина;
	//ИначеЕсли ИмяПараметра = "Мультиязычность" Тогда ПараметрыСеанса[ИмяПараметра] = ОбщиеФункции.ПолучитьЗначениеКонстантыВОбласти("Мультиязычность") = Истина;
	//	
	//ИначеЕсли ИмяПараметра = "ТекущийЯзык" Тогда  ПараметрыСеанса[ИмяПараметра] = ?(ПараметрыСеанса.ТекущийЯзыкСтр = "de", Перечисления.Языки.Немецкий, Перечисления.Языки.Русский);
	//ИначеЕсли ИмяПараметра = "ТекущийЯзыкСтр" Тогда ПараметрыСеанса[ИмяПараметра] = ТекущийЯзык().КодЯзыка;
	//	
	//ИначеЕсли ИмяПараметра = "ТекущаяПозицияОбласти" Тогда ПараметрыСеанса[ИмяПараметра] = ?(ПараметрыСеанса.ТекущаяОбласть.Пустая(), 0, ПараметрыСеанса.ТекущаяОбласть.Позиция); 
	
КонецЕсли;
	
	// ПодключаемоеОборудование
	МенеджерОборудованияВызовСервера.УстановитьПараметрыСеансаПодключаемогоОборудования(ИмяПараметра, УстановленныеПараметры);
	// Конец ПодключаемоеОборудование
КонецПроцедуры
