// Функция получения коэффициента пересчета валюты документа в валюту регл. учета.
//
// Параметры:
//	ДанныеПечати - ВыборкаИзРезультатаЗапроса - Данные шапки документа
//	ВалютаРегламентированногоУчета - СпрвочникСсылка.Валюты - Валюта регл. учета
//
// Возвращаемое значение:
//	Число - Коэффициент пересчета
//
Функция КоэффициентПересчетаВалюты(ДанныеПечати, ТаблицаКурсовВалют, ВалютаРегламентированногоУчета, Дата = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		Дата = ДанныеПечати.Дата;
	КонецЕсли;

	
	КоэффициентПересчета = 1;
	Если ДанныеПечати.Валюта <> ВалютаРегламентированногоУчета Тогда
		
		СтруктураПоиска = Новый Структура("Валюта, Дата", ДанныеПечати.Валюта, НачалоДня(Дата));
		Массив = ТаблицаКурсовВалют.НайтиСтроки(СтруктураПоиска);
		Если Массив.Количество() > 0 Тогда
			КоэффициентПересчета = ?(Массив[0].Кратность <> 0, Массив[0].Курс / Массив[0].Кратность, 1);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат КоэффициентПересчета;
	
КонецФункции // КоэффициентПересчетаВалюты()

Функция ПолучитьОснованиеДокумента(ДанныеПечати, Основание)

	Если ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Контрагенты")
		И ДанныеПечати.Контрагент.ВРазрезеДоговоров 
		Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 НомерДоговора, ДатаНачала ИЗ Справочник.Контрагенты.Организации ГДЕ Ссылка = &Ссылка И ЗначениеПоУмолчанию");
		Запрос.УстановитьПараметр("Ссылка", ДанныеПечати.Контрагент);
		
		Выполнение = Запрос.Выполнить();
		
		Выборка = Выполнение.Выбрать();
		Выборка.Следующий();
		
		Возврат " Договор " + Выборка.НомерДоговора + ?(Выборка.ДатаНачала = '00010101', ""," от " + Формат(Выборка.ДатаНачала,"ДЛФ=DD"));
	ИначеЕсли ТипЗнч(ДанныеПечати.Ссылка) = Тип("ДокументСсылка.РеализацияПереданныхТоваров") И ЗначениеЗаполнено(ДанныеПечати.Ссылка.Грузополучатель) Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		                      |	ДоговорыКонтрагентов.Ссылка,
		                      |	ДоговорыКонтрагентов.ДатаНачала,
		                      |	ДоговорыКонтрагентов.Наименование КАК НомерДоговора
		                      |ИЗ
		                      |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		                      |ГДЕ
		                      |	НЕ ДоговорыКонтрагентов.ПометкаУдаления
		                      |	И ДоговорыКонтрагентов.ЗначениеПоУмолчанию
		                      |	И ДоговорыКонтрагентов.Владелец = &Ссылка");
		Если  ТипЗнч(ДанныеПечати.Ссылка.Грузополучатель)=Тип("СправочникСсылка.Контрагенты") Тогда
			Запрос.УстановитьПараметр("Ссылка", ДанныеПечати.Грузополучатель);
		Иначе
			Запрос.УстановитьПараметр("Ссылка", ДанныеПечати.Грузополучатель.Владелец);
        КонецЕСли;
		Выполнение = Запрос.Выполнить();
		
		Если Выполнение.Пустой() Тогда Возврат ""
			//"<< не указан договор !!! >>" 
		КонецЕсли;

		Выборка = Выполнение.Выбрать();
		Выборка.Следующий();
		
		Возврат " Договор " + Выборка.НомерДоговора + ?(Выборка.ДатаНачала = '00010101', ""," от " + Формат(Выборка.ДатаНачала,"ДЛФ=DD"));
	ИначеЕсли ЗначениеЗаполнено(ДанныеПечати.Основание) Тогда
		
		Возврат Основание + " № " + ФормированиеПечатныхФорм.ПолучитьНомерНаПечать(ДанныеПечати.Основание.Номер) + " от " + Формат(ДанныеПечати.Основание.Дата, "ДЛФ=DD");
		
	Иначе Возврат "" КонецЕсли;
	
КонецФункции

// Проставляет прочерки в незаполненных полях печатной формы счета-фактуры
//
Процедура ПроставитьПрочеркиВПустыеПоляСтрокиСчетФактура(ОбластьМакета)

	Для т = 0 По ОбластьМакета.Параметры.Количество() - 1 Цикл
		
		ТекПараметр = ОбластьМакета.Параметры.Получить(т);
		
		Если НЕ ЗначениеЗаполнено(ТекПараметр) Тогда
			ОбластьМакета.Параметры.Установить(т, "--");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроставитьПрочеркиВПустыеПоля()

// Процедура заполнения реквизитов строки товара (номера ГТД и страны происхождения)
//
Процедура ЗаполнитьРеквизитыСтрокиТовараГТД(СтрокаТовары, ОбластьМакета)
	
	НомерГТД = СтрЗаменить(СтрокаТовары.НомерГТД, "/", "");
	Если Не ПустаяСтрока(НомерГТД) Тогда
		ОбластьМакета.Параметры.ПредставлениеГТД = Строка(СтрокаТовары.НомерГТД);
		ОбластьМакета.Параметры.ПредставлениеСтраны = СокрЛП(СтрокаТовары.СтранаПроисхождения);
		ОбластьМакета.Параметры.СтранаПроисхожденияКод = ?(ЗначениеЗаполнено(СтрокаТовары.СтранаПроисхождения), СтрокаТовары.СтранаПроисхождения.Код, "");
	Иначе
		ОбластьМакета.Параметры.СтранаПроисхожденияКод = "";
		ОбластьМакета.Параметры.ПредставлениеГТД = "";
		ОбластьМакета.Параметры.ПредставлениеСтраны = "";
	КонецЕсли;
		
КонецПроцедуры // ЗаполнитьРеквизитыСтрокиТовараГТД()

///////////////////////////////////////////////////////////////////////////////
// ТОРГ-12

// Функция формирования структуры хранения данных строки.
//
// Параметры:
//	КоэффициентПересчета - Число - Коэффициент пересчета в валюту регл. учета
//
// Возвращаемое значение:
//	Структура - Структура данных строки товаров
//
Функция СтруктураДанныеСтроки(КоэффициентПересчета)
	
	Структура = Новый Структура;
	Структура.Вставить("Номер", 0);
	Структура.Вставить("Мест", 0);
	Структура.Вставить("Количество", 0);
	Структура.Вставить("Цена", 0);
	Структура.Вставить("СуммаБезНДС", 0);
	Структура.Вставить("СуммаНДС", 0);
	Структура.Вставить("СуммаСНДС", 0);
	Структура.Вставить("КоэффициентПересчета", КоэффициентПересчета);
	Структура.Вставить("МассаБрутто", 0);
	Структура.Вставить("МассаНетто", 0);
	
	Возврат Структура;
	
КонецФункции // СтруктураДанныеСтроки()

Функция СтруктураИтоговыеСуммы()
	
	Структура = Новый Структура;
	
	// Инициализация итогов по странице.
	Структура.Вставить("ИтогоМассаБруттоНаСтранице", 0);
	Структура.Вставить("ИтогоМестНаСтранице", 0);
	Структура.Вставить("ИтогоКоличествоНаСтранице", 0);
	Структура.Вставить("ИтогоСуммаНаСтранице", 0);
	Структура.Вставить("ИтогоНДСНаСтранице", 0);
	Структура.Вставить("ИтогоСуммаСНДСНаСтранице", 0);
	Структура.Вставить("ИтогоМассаБруттоНаСтранице", 0);
	Структура.Вставить("ИтогоМассаНеттоНаСтранице", 0);
	
	// Инициализация итогов по документу.
	Структура.Вставить("ИтогоМассаБрутто", 0);
	Структура.Вставить("ИтогоМест", 0);
	Структура.Вставить("ИтогоКоличество", 0);
	Структура.Вставить("ИтогоСуммаСНДС", 0);
	Структура.Вставить("ИтогоСумма", 0);
	Структура.Вставить("ИтогоНДС", 0);
	Структура.Вставить("ИтогоМассаБрутто", 0);
	Структура.Вставить("ИтогоМассаНетто", 0);
    	
	Структура.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью", 0);
	Структура.Вставить("СуммаПрописью", "");
	
	Возврат Структура;
	
КонецФункции // СтруктураИтоговыеСуммы()

// Процедура заполнения реквизитов строки товара.
//
// Параметры:
//	ДанныеПечати - ВыборкаИзРезультатаЗапроса - Данные шапки документа
//	СтрокаТовары - ВыборкаИзРезультатаЗапроса - Текущая строка товаров
//	ДанныеСтроки - Структура - Данные строки товаров
//	ОбластьМакета - ОбластьЯчеекТабличногоДокумента - Область для вывода строки товаров
//	ТабличныйДокумент - Табличный документа
//
Процедура ЗаполнитьРеквизитыСтрокиТовара(ДанныеПечати, СтрокаТовары, ДанныеСтроки, ОбластьМакета, ЕдиницаИзмеренияВеса = Неопределено)
	
	ОбластьМакета.Параметры.Заполнить(СтрокаТовары);
	ОбластьМакета.Параметры.ТоварНаименование = ФормированиеПечатныхФорм.ПолучитьПредставлениеНоменклатурыДляПечати(
		СтрокаТовары.ТоварНаименование)
		+ ?(СтрокаТовары.ЭтоВозвратнаяТара, НСтр("ru=' (возвратная тара)'"), "");
	
	ДанныеСтроки.Мест = СтрокаТовары.КоличествоМест;
	ДанныеСтроки.Количество  = СтрокаТовары.Количество;
	
	Если ЕдиницаИзмеренияВеса <> Неопределено Тогда
		Если Не ЗначениеЗаполнено(ЕдиницаИзмеренияВеса) Тогда
			ДанныеСтроки.МассаБрутто = 0;
		Иначе
			ДанныеСтроки.МассаБрутто = СтрокаТовары.МассаБрутто;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеСтроки.СуммаСНДС   = Окр((СтрокаТовары.Сумма + ?(ДанныеПечати.ЦенаВключаетНДС, 0, СтрокаТовары.СуммаНДС)) * ДанныеСтроки.КоэффициентПересчета, 2);
	ДанныеСтроки.СуммаНДС    = Окр(СтрокаТовары.СуммаНДС * ДанныеСтроки.КоэффициентПересчета, 2);
	ДанныеСтроки.СуммаБезНДС = ДанныеСтроки.СуммаСНДС - ДанныеСтроки.СуммаНДС;
	
	Если ДанныеПечати.ЦенаВключаетНДС Тогда
		ДанныеСтроки.Цена = ?(ДанныеСтроки.Количество = 0, 0, ДанныеСтроки.СуммаБезНДС / ДанныеСтроки.Количество);
	Иначе
		//ДанныеСтроки.Цена = СтрокаТовары.Цена * ДанныеСтроки.КоэффициентПересчета;
		ДанныеСтроки.Цена = ?(ДанныеСтроки.Количество = 0, 0, ДанныеСтроки.СуммаБезНДС / ДанныеСтроки.Количество);
	КонецЕсли;
	
	ОбластьМакета.Параметры.Заполнить(ДанныеСтроки);
	
КонецПроцедуры // ЗаполнитьРеквизитыСтрокиТовара()

// Процедура рассчитывает итоговые суммы с учетом строки товаров.
//
// Параметры:
//	ИтоговыеСуммы - Структура - Структура итоговых сумм документа
//	ДанныеСтроки - Структура - Структура данных строки товаров
//
Процедура РассчитатьИтоговыеСуммы(ИтоговыеСуммы, ДанныеСтроки)
	
	// Увеличим итоги по странице.
	ИтоговыеСуммы.ИтогоМестНаСтранице        = ИтоговыеСуммы.ИтогоМестНаСтранице        + ДанныеСтроки.Мест;
	ИтоговыеСуммы.ИтогоКоличествоНаСтранице  = ИтоговыеСуммы.ИтогоКоличествоНаСтранице  + ДанныеСтроки.Количество;
	ИтоговыеСуммы.ИтогоСуммаНаСтранице       = ИтоговыеСуммы.ИтогоСуммаНаСтранице       + ДанныеСтроки.СуммаБезНДС;
	ИтоговыеСуммы.ИтогоНДСНаСтранице         = ИтоговыеСуммы.ИтогоНДСНаСтранице         + ДанныеСтроки.СуммаНДС;
	ИтоговыеСуммы.ИтогоСуммаСНДСНаСтранице   = ИтоговыеСуммы.ИтогоСуммаСНДСНаСтранице   + ДанныеСтроки.СуммаСНДС;
	ИтоговыеСуммы.ИтогоМассаБруттоНаСтранице = ИтоговыеСуммы.ИтогоМассаБруттоНаСтранице + ДанныеСтроки.МассаБрутто;
	ИтоговыеСуммы.ИтогоМассаНеттоНаСтранице  = ИтоговыеСуммы.ИтогоМассаНеттоНаСтранице  + ДанныеСтроки.МассаНетто;
	
	// Увеличим итоги по документу.
	ИтоговыеСуммы.ИтогоМест        = ИтоговыеСуммы.ИтогоМест        + ДанныеСтроки.Мест;
	ИтоговыеСуммы.ИтогоКоличество  = ИтоговыеСуммы.ИтогоКоличество  + ДанныеСтроки.Количество;
	ИтоговыеСуммы.ИтогоСумма       = ИтоговыеСуммы.ИтогоСумма       + ДанныеСтроки.СуммаБезНДС;
	ИтоговыеСуммы.ИтогоНДС         = ИтоговыеСуммы.ИтогоНДС         + ДанныеСтроки.СуммаНДС;
	ИтоговыеСуммы.ИтогоСуммаСНДС   = ИтоговыеСуммы.ИтогоСуммаСНДС   + ДанныеСтроки.СуммаСНДС;
	ИтоговыеСуммы.ИтогоМассаБрутто = ИтоговыеСуммы.ИтогоМассаБрутто + ДанныеСтроки.МассаБрутто;
	ИтоговыеСуммы.ИтогоМассаНетто  = ИтоговыеСуммы.ИтогоМассаНетто  + ДанныеСтроки.МассаНетто;
	
КонецПроцедуры // РассчитатьИтоговыеСуммы()

// Процедура обнуления итоговых сумм по странице.
//
Процедура ОбнулитьИтогиПоСтранице(ИтоговыеСуммы)
	
	ИтоговыеСуммы.ИтогоМассаБруттоНаСтранице = 0;
	ИтоговыеСуммы.ИтогоМассаНеттоНаСтранице  = 0;
	ИтоговыеСуммы.ИтогоМестНаСтранице        = 0;
	ИтоговыеСуммы.ИтогоКоличествоНаСтранице  = 0;
	ИтоговыеСуммы.ИтогоСуммаНаСтранице       = 0;
	ИтоговыеСуммы.ИтогоНДСНаСтранице         = 0;
	ИтоговыеСуммы.ИтогоСуммаСНДСНаСтранице   = 0;
	
КонецПроцедуры // ОбнулитьИтогиПоСтранице()

// Процедура формирует итоговые данные для вывода в подвал.
//
Процедура ДобавитьИтоговыеДанныеПодвала(ИтоговыеСуммы, ВсегоНомеров, ВалютаРегламентированногоУчета)
	
	ИтоговыеСуммы.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью", ЧислоПрописью(ВсегоНомеров, ,",,,,,,,,0"));
	ИтоговыеСуммы.Вставить("СуммаПрописью", РаботаСКурсамиВалют.СформироватьСуммуПрописью(ИтоговыеСуммы.ИтогоСуммаСНДС, ВалютаРегламентированногоУчета));
	
КонецПроцедуры // ДобавитьИтоговыеДанныеПодвала()

// Процедура заполнения реквизитов шапки ТОРГ-12.
//
// Параметры:
//	ДанныеПечати - ВыборкаИзРезультатаЗапроса - Данные шапки документа
//	Макет - Макет ТОРГ-12
//	ТабличныйДокумент - Табличный документ
//
Процедура ЗаполнитьРеквизитыШапкиТОРГ12(ДанныеПечати, Макет, ТабличныйДокумент, Основание)
	
	// Выводим общие реквизиты шапки
	СведенияОПоставщике       = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация,      ДанныеПечати.Дата,, ДанныеПечати.БанковскийСчетОрганизации);
	СведенияОПокупателе       = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент,       ДанныеПечати.Дата,, ДанныеПечати.БанковскийСчетКонтрагента);
	СведенияОГрузополучателе  = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Грузополучатель,  ДанныеПечати.Дата,, ДанныеПечати.БанковскийСчетГрузополучателя);
	СведенияОГрузоотправитель = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Грузоотправитель, ДанныеПечати.Дата,, ДанныеПечати.БанковскийСчетГрузоотправителя);
	СведенияОПлательщике      = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Плательщик,       ДанныеПечати.Дата,,);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(ДанныеПечати);               
	ОбластьМакета.Параметры.НомерДокумента = ФормированиеПечатныхФорм.ПолучитьНомерНаПечать(ДанныеПечати.Номер, Истина, ДанныеПечати.Дата);
	ОбластьМакета.Параметры.ДатаДокумента  = ДанныеПечати.Дата;
	
	Если ДанныеПечати.Организация = ДанныеПечати.Грузоотправитель Тогда
		ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике);
	Иначе
		ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправитель, 
			"ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПечати.Подразделение) Тогда
		ОбластьМакета.Параметры.ПредставлениеПодразделения = ДанныеПечати.Подразделение;
	КонецЕсли;
	
	ОбластьМакета.Параметры.ПредставлениеГрузополучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, 
		"ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");

	ОбластьМакета.Параметры.ПредставлениеПоставщика  = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике);
	ОбластьМакета.Параметры.ПредставлениеПлательщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПлательщике);
	
	// Выводим всевозможные коды
	ОбластьМакета.Параметры.ОрганизацияПоОКПО          = СведенияОГрузоотправитель.КодПоОКПО;
	ОбластьМакета.Параметры.ВидДеятельностиПоОКДП      = "";
	ОбластьМакета.Параметры.ГрузополучательПоОКПО      = СведенияОГрузополучателе.КодПоОКПО;
	ОбластьМакета.Параметры.ПоставщикПоОКПО            = СведенияОПоставщике.КодПоОКПО;
	ОбластьМакета.Параметры.ПлательщикПоОКПО           = СведенияОПлательщике.КодПоОКПО;
	ОбластьМакета.Параметры.ОснованиеНомер             = "";
	ОбластьМакета.Параметры.ОснованиеДата              = "";
	ОбластьМакета.Параметры.ТранспортнаяНакладнаяНомер = "";
	ОбластьМакета.Параметры.ТранспортнаяНакладнаяДата  = "";
	
	Если ТипЗнч(ДанныеПечати.Грузополучатель) = Тип("СправочникСсылка.Контрагенты") Тогда 	
		//АдресДоставкиПартнера = ФормированиеПечатныхФорм.ПолучитьАдресДоствкиИзКонтактнойИнформации(ДанныеПечати.Грузополучатель.Партнер);
		АдресДоставкиПартнера = ФормированиеПечатныхФорм.ПолучитьАдресДоствкиИзКонтактнойИнформации(ДанныеПечати.Грузополучатель);
	Иначе
		АдресДоставкиПартнера = ФормированиеПечатныхФорм.ПолучитьАдресДоствкиИзКонтактнойИнформации(ДанныеПечати.Грузополучатель);
	КонецЕсли;
	АдресДоставкиКонтрагента = ФормированиеПечатныхФорм.ПолучитьАдресДоствкиИзКонтактнойИнформации(ДанныеПечати.Грузополучатель);
	АдресДоставки = ?(ЗначениеЗаполнено(АдресДоставкиКонтрагента), АдресДоставкиКонтрагента, АдресДоставкиПартнера);
	ФактическийАдрес = ФормированиеПечатныхФорм.ПолучитьАдресИзКонтактнойИнформации(ДанныеПечати.Грузополучатель, "Фактический");
	
	ОбластьМакета.Параметры.АдресДоставки	= ?(ЗначениеЗаполнено(АдресДоставки), АдресДоставки, ФактическийАдрес);
	//ОбластьМакета.Параметры.Основание		= ?(ЗначениеЗаполнено(ДанныеПечати.Основание), Основание + " № " + ФормированиеПечатныхФорм.ПолучитьНомерНаПечать(ДанныеПечати.Основание.Номер) + " от " + Формат(ДанныеПечати.Основание.Дата, "ДЛФ=DD"), "");
	ОбластьМакета.Параметры.Основание		= ПолучитьОснованиеДокумента(ДанныеПечати, Основание);
		
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры // ЗаполнитьРеквизитыШапкиТОРГ12()


// Процедура заполнения реквизитов подвала ТОРГ-12.
//
// Параметры:
//	ДанныеПечати - ВыборкаИзРезультатаЗапроса - Данные шапки документа
//	ИтоговыеСуммы - Структура - Структура итоговых сумм документа
//	Макет - Макет ТОРГ-12
//	ТабличныйДокумент - Табличный документ
//
Процедура ЗаполнитьРеквизитыПодвалаТОРГ12(ДанныеПечати, ИтоговыеСуммы, Макет, ТабличныйДокумент, ЕдиницаИзмеренияВеса = Неопределено)
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		
	ПолнаяДатаДокумента = Формат(ДанныеПечати.Дата, "ДФ=""дд ММММ гггг """"года""""""");
	ДлинаСтроки = СтрДлина(ПолнаяДатаДокумента);
	ПервыйРазделитель = Найти(ПолнаяДатаДокумента, " ");
	ВторойРазделитель = Найти(Прав(ПолнаяДатаДокумента, ДлинаСтроки - ПервыйРазделитель), " ") + ПервыйРазделитель;
	ОбластьМакета.Параметры.ДатаДокументаДень = """" + Лев(ПолнаяДатаДокумента, ПервыйРазделитель -1 ) + """";
	ОбластьМакета.Параметры.ДатаДокументаМесяц = Сред(ПолнаяДатаДокумента, ПервыйРазделитель + 1, ВторойРазделитель - ПервыйРазделитель - 1);
	ОбластьМакета.Параметры.ДатаДокументаГод = Прав(ПолнаяДатаДокумента, ДлинаСтроки - ВторойРазделитель);
	
	// Главный бухгалтер
	ОбластьМакета.Параметры.ФИОГлавБухгалтера = ФормированиеПечатныхФорм.ФамилияИнициалыФизЛица(ДанныеПечати.ГлавныйБухгалтер);
	
	// Отпуск товара разрешил
	ОбластьМакета.Параметры.ФИОРуководителя = ФормированиеПечатныхФорм.ФамилияИнициалыФизЛица(ДанныеПечати.Руководитель);
	ОбластьМакета.Параметры.ДолжностьРуководителя = ДанныеПечати.ДолжностьРуководителя;
	
	ОбластьМакета.Параметры.ФИОКладовщика = ФормированиеПечатныхФорм.ФамилияИнициалыФизЛица(ДанныеПечати.Кладовщик);
	ОбластьМакета.Параметры.ДолжностьКладовщика = ДанныеПечати.ДолжностьКладовщика;
	
	// Доверенность
	ОбластьМакета.Параметры.ДоверенностьНомер     = ДанныеПечати.ДоверенностьНомер;
	ОбластьМакета.Параметры.ДоверенностьДата      = Формат(ДанныеПечати.ДоверенностьДата, "ДФ='дд ММММ гггг'");
	ОбластьМакета.Параметры.ДоверенностьВыдана    = ДанныеПечати.ДоверенностьВыдана;
	ОбластьМакета.Параметры.ДоверенностьЧерезКого = ДанныеПечати.ДоверенностьЛицо;
	
	Если ИтоговыеСуммы.ИтогоМест > 0 Тогда
		ОбластьМакета.Параметры.ВсегоМестПрописью = ЧислоПрописью(ИтоговыеСуммы.ИтогоМест, ,",,,,,,,,0");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЕдиницаИзмеренияВеса) И ИтоговыеСуммы.ИтогоМассаБрутто > 0 Тогда
		ОбластьМакета.Параметры.МассаГрузаПрописью = ЧислоПрописью(ИтоговыеСуммы.ИтогоМассаБрутто, ,",,,,,,,,0")+ " " + СокрЛП(ЕдиницаИзмеренияВеса) + ".";
	КонецЕсли;
	
	ОбластьМакета.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ИтоговыеСуммы.КоличествоПорядковыхНомеровЗаписейПрописью;
	ОбластьМакета.Параметры.СуммаПрописью = ИтоговыеСуммы.СуммаПрописью;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры // ЗаполнитьРеквизитыПодвалаТОРГ12()

// Процедура заполняет табличный документ ТОРГ-12.
//
Процедура ЗаполнитьТабличныйДокументТОРГ12(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, Основание = "") 
	
	ТабличныйДокумент.ПолеСлева = 5;
	ТабличныйДокумент.ПолеСправа = 5;
	ТабличныйДокумент.ПолеСверху = 5;
	ТабличныйДокумент.ПолеСнизу = 5;
	
	ТабличныйДокумент.РазмерКолонтитулаСверху = 0;
	ТабличныйДокумент.РазмерКолонтитулаСнизу = 0;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		
	ВалютаРегламентированногоУчета = ОбщиеФункции.ПолучитьЗначениеКонстантыВОбласти("ВалютаУправленческогоУчета");
	ЕдиницаИзмеренияВеса           = Справочники.ЕдиницыИзмерения.ПустаяСсылка(); 
	
	ТаблицаКурсовВалют  = ДанныеДляПечати.ТаблицаКурсовВалют;	
	ДанныеПечати      	= ДанныеДляПечати.РезультатПоШапке.Выбрать();
	
	Макет = Обработки.ПечатьОбщихФорм.ПолучитьМакет("ТОРГ12");
	
	Пока ДанныеПечати.Следующий() Цикл
		
		Если ДанныеПечати.ЕстьУслуги Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"ТОРГ12 при условии оказания услуг не выписывается",
				ДанныеПечати.Ссылка,
				?(ДанныеПечати.Номер = Неопределено, "ТекстСчетФактура", "ПредъявленСчетФактура")
			);
			Продолжить;
		КонецЕсли;
		
		Если НЕ ДанныеПечати.ЕстьТовары Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"В документе " +  ДанныеПечати.Ссылка + " отсутствуют товары",
				ДанныеПечати.Ссылка,
				?(ДанныеПечати.Номер = Неопределено, "ТекстСчетФактура", "ПредъявленСчетФактура")
			);
			Продолжить;
		 КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ЗаполнитьРеквизитыШапкиТОРГ12(ДанныеПечати, Макет, ТабличныйДокумент, Основание);
		
		НомерСтраницы = 1;
		ИтоговыеСуммы = СтруктураИтоговыеСуммы();
	
		КоэффициентПересчета = КоэффициентПересчетаВалюты(ДанныеПечати, ТаблицаКурсовВалют, ВалютаРегламентированногоУчета);
		ДанныеСтроки = СтруктураДанныеСтроки(КоэффициентПересчета);
		
		// Создаем массив для проверки вывода
		МассивВыводимыхОбластей = Новый Массив;
		
		// Выводим многострочную часть докмента
		ОбластьЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаб");
		ОбластьМакета           = Макет.ПолучитьОбласть("Строка");
		ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьВсего            = Макет.ПолучитьОбласть("Всего");
		ОбластьПодвала          = Макет.ПолучитьОбласть("Подвал");
		
		ТаблицаТовары = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выгрузить();
		
		//Документы.РеализацияТоваров.УдалитьЛишниеКопейкиВТабличнойЧасти(ДанныеПечати.Ссылка, ТаблицаТовары); 
		
		КоличествоСтрок = ТаблицаТовары.Количество();
		
		//Если КоличествоСтрок = 1 Тогда
		//	ТабличныйДокумент.МасштабПечати = 98;
		//Иначе
			ТабличныйДокумент.АвтоМасштаб = Истина;
		//КонецЕсли;

		
		Для Каждого СтрокаТовары Из ТаблицаТовары Цикл
			
			ДанныеСтроки.Номер = ДанныеСтроки.Номер + 1;
			
			ЗаполнитьРеквизитыСтрокиТовара(ДанныеПечати, СтрокаТовары, ДанныеСтроки, ОбластьМакета, ЕдиницаИзмеренияВеса);
			
			Если ДанныеСтроки.Номер = 1 Тогда // первая строка
			
				ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
				ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
				
			Иначе
				
				МассивВыводимыхОбластей.Очистить();
				МассивВыводимыхОбластей.Добавить(ОбластьМакета);
				МассивВыводимыхОбластей.Добавить(ОбластьИтоговПоСтранице);
				
				Если ДанныеСтроки.Номер = КоличествоСтрок Тогда
					
					МассивВыводимыхОбластей.Добавить(ОбластьВсего);
					МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
					
				КонецЕсли;
				
				Если ДанныеСтроки.Номер <> 1 И Не ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
					
					ОбластьИтоговПоСтранице.Параметры.Заполнить(ИтоговыеСуммы);
					ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);
					
					// Очистим итоги по странице
					ОбнулитьИтогиПоСтранице(ИтоговыеСуммы);
					
					НомерСтраницы = НомерСтраницы + 1;
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
					ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
					
				КонецЕсли;
				
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			РассчитатьИтоговыеСуммы(ИтоговыеСуммы, ДанныеСтроки);
			
		КонецЦикла;
		
		// Выводим итоги по последней странице
		ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьИтоговПоСтранице.Параметры.Заполнить(ИтоговыеСуммы);
		
		ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);
		
		// Выводим итоги по документу в целом
		ОбластьМакета = Макет.ПолучитьОбласть("Всего");
		ОбластьМакета.Параметры.Заполнить(ИтоговыеСуммы);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Выводим подвал документа
		ДобавитьИтоговыеДанныеПодвала(ИтоговыеСуммы, ДанныеСтроки.Номер, ВалютаРегламентированногоУчета);
		ЗаполнитьРеквизитыПодвалаТОРГ12(ДанныеПечати, ИтоговыеСуммы, Макет, ТабличныйДокумент, ЕдиницаИзмеренияВеса);
		
		ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		
		//Если НомерСтраницы = 1 И НЕ ТабличныйДокумент.ПроверитьВывод(ТабличныйДокумент) Тогда
		//	ТабличныйДокумент.АвтоМасштаб = Ложь;
		//	Шаг = 0.5;
		//	Масштаб = 100;
		//	Пока (НЕ ТабличныйДокумент.ПроверитьВывод(ТабличныйДокумент)) И Масштаб > 75 Цикл
		//		Масштаб = Масштаб - Шаг; 
		//		ТабличныйДокумент.МасштабПечати = Масштаб; КонецЦикла;
		//Конецесли;

		//Если НЕ ТабличныйДокумент.ПроверитьВывод(ТабличныйДокумент) Тогда
		//	ТабличныйДокумент.МасштабПечати = 97.5;
		//КонецЕсли;
	КонецЦикла;
	

КонецПроцедуры // ЗаполнитьТабличныйДокументТОРГ12()

Процедура ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Ссылка) Экспорт
	
	//Элемент = ОбъектыПечати.НайтиПоЗначению(Ссылка);
	//Если Элемент = Неопределено Тогда
	//	ИмяОбласти = "Документ_" + Формат(ОбъектыПечати.Количество() + 1, "ЧН=; ЧГ=");
	//	ОбъектыПечати.Добавить(Ссылка, ИмяОбласти);
	//Иначе
	//	ИмяОбласти = Элемент.Представление;
	//КонецЕсли;
		
	НомерСтрокиОкончание = ТабличныйДокумент.ВысотаТаблицы;
	ТабличныйДокумент.Область(НомерСтрокиНачало, , НомерСтрокиОкончание, ).Имя = "Документ";

КонецПроцедуры


Процедура Печать_ТОРГ12(ТабличныйДокумент, Ссылка) Экспорт
	
	Основание = "Счет";
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.РеализацияТоваров") Тогда
		ДанныеДляПечати = Документы.РеализацияТоваров.ПолучитьДанныеДляТОРГ12(ТабличныйДокумент, Ссылка);
	ИначеЕсли 
		ТипЗнч(Ссылка) = Тип("ДокументСсылка.РеализацияПереданныхТоваров") Тогда
		ДанныеДляПечати = Документы.РеализацияПереданныхТоваров.ПолучитьДанныеДляТОРГ12(ТабличныйДокумент, Ссылка);
	ИначеЕсли
		ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда
		ДанныеДляПечати = Документы.ПоступлениеТоваров.ПолучитьДанныеДляТОРГ12(ТабличныйДокумент, Ссылка);
	ИначеЕсли
		ТипЗнч(Ссылка) = Тип("ДокументСсылка.ВозвратПоставщику") Тогда
		ДанныеДляПечати = Документы.ВозвратПоставщику.ПолучитьДанныеДляТОРГ12(ТабличныйДокумент, Ссылка);
		Основание = "Поступление";
	ИначеЕсли	
		ТипЗнч(Ссылка) = Тип("БизнесПроцессСсылка.СборкаЗаказа") Тогда
		ДанныеДляПечати = Документы.РеализацияТоваров.ПолучитьДанныеДляТОРГ12(ТабличныйДокумент, Ссылка.РеализацияТоваров);
	ИначеЕсли
		ТипЗнч(Ссылка) = Тип("ДокументСсылка.ВозвратОтПокупателя") Тогда
		ДанныеДляПечати = Документы.ВозвратОтПокупателя.ПолучитьДанныеДляТОРГ12(ТабличныйДокумент, Ссылка);
		Основание = "Реализация";

    КонецЕсли;
		
	ЗаполнитьТабличныйДокументТОРГ12(ТабличныйДокумент, ДанныеДляПечати, Ссылка, Основание);

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ТТН

// Функция формирования структуры хранения итоговых суммы.
//
// Возвращаемое значение:
//	Структура - Структура хранения итоговых сумм
//
Функция СтруктураИтоговыеСуммыТТН()
	
	Структура = Новый Структура;
	
	// Инициализация итогов по странице.
	Структура.Вставить("ИтогоМассаБруттоНаСтранице", 0);
	Структура.Вставить("ИтогоМестНаСтранице", 0);
	Структура.Вставить("ИтогоКоличествоНаСтранице", 0);
	Структура.Вставить("ИтогоСуммаНаСтранице", 0);
	Структура.Вставить("ИтогоМассаНеттоНаСтранице", 0);
	
	// Инициализация итогов по документу.
	Структура.Вставить("ИтогоМассаБрутто", 0);
	Структура.Вставить("ИтогоМест", 0);
	Структура.Вставить("ИтогоКоличество", 0);
	Структура.Вставить("ИтогоСумма", 0);
	Структура.Вставить("ИтогоМассаНетто", 0);
	
	Структура.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью", 0);
	Структура.Вставить("СуммаПрописью", "");
	
	Возврат Структура;
	
КонецФункции // СтруктураИтоговыеСуммы()

// Функция формирования структуры хранения данных строки.
//
// Параметры:
//	КоэффициентПересчета - Число - Коэффициент пересчета в валюту регл. учета
//
// Возвращаемое значение:
//	Структура - Структура данных строки товаров
//
Функция СтруктураДанныеСтрокиТТН(КоэффициентПересчета)
	
	Структура = Новый Структура;
	Структура.Вставить("Номер", 0);
	Структура.Вставить("Мест", 0);
	Структура.Вставить("Количество", 0);
	Структура.Вставить("Цена", 0);
	Структура.Вставить("Сумма", 0);
	Структура.Вставить("КоэффициентПересчета", КоэффициентПересчета);
	Структура.Вставить("МассаБрутто", 0);
	Структура.Вставить("МассаНетто", 0);
	
	Возврат Структура;
	
КонецФункции // СтруктураДанныеСтроки()

// Процедура рассчитывает итоговые суммы с учетом строки товаров.
//
// Параметры:
//	ИтоговыеСуммы - Структура - Структура итоговых сумм документа
//	ДанныеСтроки - Структура - Структура данных строки товаров
//
Процедура РассчитатьИтоговыеСуммыТТН(ИтоговыеСуммы, ДанныеСтроки)
	
	// Увеличим итоги по странице.
	ИтоговыеСуммы.ИтогоМестНаСтранице        = ИтоговыеСуммы.ИтогоМестНаСтранице        + ДанныеСтроки.Мест;
	ИтоговыеСуммы.ИтогоКоличествоНаСтранице  = ИтоговыеСуммы.ИтогоКоличествоНаСтранице  + ДанныеСтроки.Количество;
	ИтоговыеСуммы.ИтогоСуммаНаСтранице       = ИтоговыеСуммы.ИтогоСуммаНаСтранице       + ДанныеСтроки.Сумма;
	ИтоговыеСуммы.ИтогоМассаБруттоНаСтранице = ИтоговыеСуммы.ИтогоМассаБруттоНаСтранице + ДанныеСтроки.МассаБрутто;
	ИтоговыеСуммы.ИтогоМассаНеттоНаСтранице  = ИтоговыеСуммы.ИтогоМассаНеттоНаСтранице  + ДанныеСтроки.МассаНетто;
	
	// Увеличим итоги по документу.
	ИтоговыеСуммы.ИтогоМест        = ИтоговыеСуммы.ИтогоМест        + ДанныеСтроки.Мест;
	ИтоговыеСуммы.ИтогоКоличество  = ИтоговыеСуммы.ИтогоКоличество  + ДанныеСтроки.Количество;
	ИтоговыеСуммы.ИтогоСумма       = ИтоговыеСуммы.ИтогоСумма       + ДанныеСтроки.Сумма;
	ИтоговыеСуммы.ИтогоМассаБрутто = ИтоговыеСуммы.ИтогоМассаБрутто + ДанныеСтроки.МассаБрутто;
	ИтоговыеСуммы.ИтогоМассаНетто  = ИтоговыеСуммы.ИтогоМассаНетто  + ДанныеСтроки.МассаНетто;
	
КонецПроцедуры // РассчитатьИтоговыеСуммы()

// Процедура обнуления итоговых сумм по странице.
//
Процедура ОбнулитьИтогиПоСтраницеТТН(ИтоговыеСуммы)
	
	ИтоговыеСуммы.ИтогоМассаБруттоНаСтранице = 0;
	ИтоговыеСуммы.ИтогоМассаНеттоНаСтранице  = 0;
	ИтоговыеСуммы.ИтогоМестНаСтранице        = 0;
	ИтоговыеСуммы.ИтогоКоличествоНаСтранице  = 0;
	ИтоговыеСуммы.ИтогоСуммаНаСтранице       = 0;
	
КонецПроцедуры // ОбнулитьИтогиПоСтранице()

// Процедура формирует итоговые данные для вывода в подвал.
//
Процедура ДобавитьИтоговыеДанныеПодвалаТТН(ИтоговыеСуммы, ВсегоНомеров, ВалютаРегламентированногоУчета)
	
	ИтоговыеСуммы.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью", ЧислоПрописью(ВсегоНомеров, ,",,,,,,,,0"));
	ИтоговыеСуммы.Вставить("СуммаПрописью", РаботаСКурсамиВалют.СформироватьСуммуПрописью(ИтоговыеСуммы.ИтогоСумма, ВалютаРегламентированногоУчета));
	
КонецПроцедуры // ДобавитьИтоговыеДанныеПодвала()

// Процедура заполнения реквизитов строки товара.
//
// Параметры:
//	ДанныеПечати - ВыборкаИзРезультатаЗапроса - Данные шапки документа
//	СтрокаТовары - ВыборкаИзРезультатаЗапроса - Текущая строка товаров
//	ДанныеСтроки - Структура - Данные строки товаров
//	ОбластьМакета - ОбластьЯчеекТабличногоДокумента - Область для вывода строки товаров
//	ТабличныйДокумент - Табличный документа
//
Процедура ЗаполнитьРеквизитыСтрокиТовараТТН(ДанныеПечати, СтрокаТовары, ДанныеСтроки, ОбластьМакета, ЕдиницаИзмеренияВеса = Неопределено, КоэффициентПересчетаВТонны = 0)
	
	ОбластьМакета.Параметры.ТоварНаименование = ФормированиеПечатныхФорм.ПолучитьПредставлениеНоменклатурыДляПечати(
		СтрокаТовары.ТоварНаименование)
		+ ?(СтрокаТовары.ЭтоВозвратнаяТара, НСтр("ru=' (возвратная тара)'"), "");
		
	ОбластьМакета.Параметры.ТоварКод = СтрокаТовары.ТоварКод;
	
	Если ЕдиницаИзмеренияВеса <> Неопределено Тогда
		Если Не ЗначениеЗаполнено(ЕдиницаИзмеренияВеса) Тогда
			ДанныеСтроки.МассаБрутто = 0;
			ДанныеСтроки.МассаНетто = 0;
		Иначе
			ДанныеСтроки.МассаБрутто = СтрокаТовары.МассаБрутто;
			ДанныеСтроки.МассаНетто = СтрокаТовары.МассаНетто;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеСтроки.Сумма   = Окр((СтрокаТовары.Сумма + ?(ДанныеПечати.ЦенаВключаетНДС, 0, СтрокаТовары.СуммаНДС)) * ДанныеСтроки.КоэффициентПересчета, 2);
	
	Если Не ДанныеПечати.ЦенаВключаетНДС Тогда
		ДанныеСтроки.Цена = ?(СтрокаТовары.Количество = 0, 0, ДанныеСтроки.Сумма / СтрокаТовары.Количество);
	Иначе
		ДанныеСтроки.Цена = СтрокаТовары.Цена * ДанныеСтроки.КоэффициентПересчета;
	КонецЕсли;
	
	Если СтрокаТовары.Весовой Тогда
		ДанныеСтроки.Мест = 0;
		ДанныеСтроки.Количество  = 0;
		
		ОбластьМакета.Параметры.Цена = ДанныеСтроки.Цена;
		ОбластьМакета.Параметры.Сумма = ДанныеСтроки.Сумма;
		ОбластьМакета.Параметры.Количество = 0;
		ОбластьМакета.Параметры.КоличествоМест = 0;
		ОбластьМакета.Параметры.БазоваяЕдиницаНаименование = "";
		ОбластьМакета.Параметры.ВидУпаковки = "";
		ОбластьМакета.Параметры.МассаНетто = Окр(СтрокаТовары.МассаНетто*КоэффициентПересчетаВТонны, 2 , РежимОкругления.Окр15как20);
		
	Иначе
		ДанныеСтроки.Мест = СтрокаТовары.КоличествоМест;
		ДанныеСтроки.Количество  = СтрокаТовары.Количество;
		
		ОбластьМакета.Параметры.Цена = ДанныеСтроки.Цена;
		ОбластьМакета.Параметры.Сумма = ДанныеСтроки.Сумма;
		ОбластьМакета.Параметры.Количество = ДанныеСтроки.Количество;
		ОбластьМакета.Параметры.КоличествоМест = ДанныеСтроки.Мест;
		ОбластьМакета.Параметры.БазоваяЕдиницаНаименование = СтрокаТовары.БазоваяЕдиницаНаименование;
		ОбластьМакета.Параметры.ВидУпаковки = СтрокаТовары.ВидУпаковки;
		ОбластьМакета.Параметры.МассаНетто = 0;
	КонецЕсли;
		
КонецПроцедуры // ЗаполнитьРеквизитыСтрокиТовара()

// Процедура заполнения реквизитов шапки ТТН.
//
// Параметры:
//	ДанныеПечати - ВыборкаИзРезультатаЗапроса - Данные шапки документа
//	Макет - Макет ТТН
//	ТабличныйДокумент - Табличный документ
//
Процедура ЗаполнитьРеквизитыШапкиТТН(ДанныеПечати, Макет, ТабличныйДокумент)
	
	// Выводим общие реквизиты шапки
	СведенияОПокупателе       = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент,       ДанныеПечати.Дата,, ДанныеПечати.БанковскийСчетКонтрагента);
	СведенияОГрузополучателе  = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Грузополучатель,  ДанныеПечати.Дата,, ДанныеПечати.БанковскийСчетГрузополучателя);
	СведенияОГрузоотправитель = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Грузоотправитель, ДанныеПечати.Дата,, ДанныеПечати.БанковскийСчетГрузоотправителя);
	СведенияОПоставщике       = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация,      ДанныеПечати.Дата,, ДанныеПечати.БанковскийСчетОрганизации);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
	ОбластьМакета.Параметры.НомерДокумента = ФормированиеПечатныхФорм.ПолучитьНомерНаПечать(ДанныеПечати.Номер, Истина, ДанныеПечати.Дата);
	ОбластьМакета.Параметры.ДатаДокумента  = ДанныеПечати.Дата;
	
	Если ДанныеПечати.Организация = ДанныеПечати.Грузоотправитель Тогда
		ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике,
		    "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны");
	Иначе
		ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправитель, 
			"ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны");
	КонецЕсли;
	
	ОбластьМакета.Параметры.ПредставлениеГрузополучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, 
		"ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
	
	ОбластьМакета.Параметры.ПредставлениеПлательщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе);
	
	// Выводим всевозможные коды
	ОбластьМакета.Параметры.ОрганизацияПоОКПО          = СведенияОГрузоотправитель.КодПоОКПО;
	ОбластьМакета.Параметры.ГрузополучательПоОКПО      = СведенияОГрузополучателе.КодПоОКПО;
	ОбластьМакета.Параметры.ПлательщикПоОКПО           = СведенияОПокупателе.КодПоОКПО;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры // ЗаполнитьРеквизитыШапкиТТН()

// Процедура заполнения реквизитов подвала ТТН.
//
// Параметры:
//	ДанныеПечати - ВыборкаИзРезультатаЗапроса - Данные шапки документа
//	ИтоговыеСуммы - Структура - Структура итоговых сумм документа
//	Макет - Макет ТТН
//	ТабличныйДокумент - Табличный документ
//
Процедура ЗаполнитьРеквизитыПодвалаТТН(ДанныеПечати, ИтоговыеСуммы, Макет, ТабличныйДокумент, ЕдиницаИзмеренияВеса = Неопределено, КоэффициентПересчетаВТонны = 0)
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		
	ПолнаяДатаДокумента = Формат(ДанныеПечати.Дата, "ДФ=""дд ММММ гггг """"года""""""");
	ДлинаСтроки = СтрДлина(ПолнаяДатаДокумента);
	ПервыйРазделитель = Найти(ПолнаяДатаДокумента, " ");
	ВторойРазделитель = Найти(Прав(ПолнаяДатаДокумента, ДлинаСтроки - ПервыйРазделитель), " ") + ПервыйРазделитель;
	ОбластьМакета.Параметры.ДатаДокументаДень = """" + Лев(ПолнаяДатаДокумента, ПервыйРазделитель -1 ) + """";
	ОбластьМакета.Параметры.ДатаДокументаМесяц = Сред(ПолнаяДатаДокумента, ПервыйРазделитель + 1, ВторойРазделитель - ПервыйРазделитель - 1);
	ОбластьМакета.Параметры.ДатаДокументаГод = Прав(ПолнаяДатаДокумента, ДлинаСтроки - ВторойРазделитель);
	
	// Главный бухгалтер
	ОбластьМакета.Параметры.ФИОГлавБухгалтера = ФормированиеПечатныхФорм.ФамилияИнициалыФизЛица(ДанныеПечати.ГлавныйБухгалтер);
	
	ОбластьМакета.Параметры.ФИОРуководителя = ФормированиеПечатныхФорм.ФамилияИнициалыФизЛица(ДанныеПечати.Руководитель);
	ОбластьМакета.Параметры.ДолжностьРуководителя = ДанныеПечати.ДолжностьРуководителя;
	
	ОбластьМакета.Параметры.ФИОКладовщика = ФормированиеПечатныхФорм.ФамилияИнициалыФизЛица(ДанныеПечати.Кладовщик);
	ОбластьМакета.Параметры.ДолжностьКладовщика = ДанныеПечати.ДолжностьКладовщика;
	
	// Доверенность
	ОбластьМакета.Параметры.ДоверенностьНомер     = ДанныеПечати.ДоверенностьНомер;
	ОбластьМакета.Параметры.ДоверенностьДата      = Формат(ДанныеПечати.ДоверенностьДата, "ДФ='дд ММММ гггг'");
	ОбластьМакета.Параметры.ДоверенностьВыдана    = ДанныеПечати.ДоверенностьВыдана;
	ОбластьМакета.Параметры.ДоверенностьЧерезКого = ДанныеПечати.ДоверенностьЛицо;
	
	Если ИтоговыеСуммы.ИтогоМест > 0 Тогда
		ОбластьМакета.Параметры.ВсегоМестПрописью = ЧислоПрописью(ИтоговыеСуммы.ИтогоМест, ,",,,,,,,,0");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЕдиницаИзмеренияВеса) И ИтоговыеСуммы.ИтогоМассаБрутто > 0 Тогда
		ОбластьМакета.Параметры.МассаГрузаБуттоПрописью = ЧислоПрописью(ИтоговыеСуммы.ИтогоМассаБрутто, ,",,,,,,,,0")+ " " + СокрЛП(ЕдиницаИзмеренияВеса) + ".";
		Если КоэффициентПересчетаВТонны <> 0 Тогда
			ОбластьМакета.Параметры.МассаГрузаБрутто = Окр(ИтоговыеСуммы.ИтогоМассаБрутто * КоэффициентПересчетаВТонны,2,РежимОкругления.Окр15как20);
		КонецЕсли;                  
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЕдиницаИзмеренияВеса) И ИтоговыеСуммы.ИтогоМассаНетто > 0 Тогда
		ОбластьМакета.Параметры.МассаГрузаНеттоПрописью = ЧислоПрописью(ИтоговыеСуммы.ИтогоМассаНетто, ,",,,,,,,,0")+ " " + СокрЛП(ЕдиницаИзмеренияВеса) + ".";
		Если КоэффициентПересчетаВТонны <> 0 Тогда
			ОбластьМакета.Параметры.МассаГрузаНетто = Окр(ИтоговыеСуммы.ИтогоМассаНетто * КоэффициентПересчетаВТонны,2,РежимОкругления.Окр15как20);
		КонецЕсли;                  
	КонецЕсли;
	
	ОбластьМакета.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ИтоговыеСуммы.КоличествоПорядковыхНомеровЗаписейПрописью;
	ОбластьМакета.Параметры.ВсегоНаименованийПрописью = ЧислоПрописью(ДанныеПечати.КоличествоНаименований, ,",,,,,,,,0");
	ОбластьМакета.Параметры.СуммаПрописью = ИтоговыеСуммы.СуммаПрописью;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры // ЗаполнитьРеквизитыПодвалаТТН()

// Процедура заполнения реквизитов подвала ТТН.
//
// Параметры:
//	ДанныеПечати - ВыборкаИзРезультатаЗапроса - Данные шапки документа
//	ИтоговыеСуммы - Структура - Структура итоговых сумм документа
//	Макет - Макет ТТН
//	ТабличныйДокумент - Табличный документ
//
Процедура ЗаполнитьРеквизитыТранспортногоРазделаТТН(ДанныеДляПечати, Макет, ОбластьМакета)
	
	Если ДанныеДляПечати.Свойство("ПараметрыПечатиТранспортныйРаздел") Тогда
		ПараметрыПечатиТранспортныйРаздел = ДанныеДляПечати.ПараметрыПечатиТранспортныйРаздел;
		ОбластьМакета.Параметры.Заполнить(ПараметрыПечатиТранспортныйРаздел);
		СтандартнаяКарточка  = ПараметрыПечатиТранспортныйРаздел.ЛицензионнаяКарточкаВид = "Стандартная";
		ОграниченнаяКарточка = ПараметрыПечатиТранспортныйРаздел.ЛицензионнаяКарточкаВид = "Ограниченная";

	Иначе
		ДанныеПечати      	= ДанныеДляПечати.РезультатПоШапке.Выбрать();

		СведенияОПеревозчике = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Перевозчик, ДанныеПечати.Дата,,ДанныеПечати.БанковскийСчетПеревозчика);
		СведенияОЗаказчикеПеревозок = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.ЗаказчикПеревозок, ДанныеПечати.Дата,,ДанныеПечати.БанковскийСчетЗаказчикаПеревозок);
		
		ОбластьМакета.Параметры.НомерДокумента = ФормированиеПечатныхФорм.ПолучитьНомерНаПечать(ДанныеПечати.Номер, Ложь, ДанныеПечати.Дата);
		
		ОбластьМакета.Параметры.ПредставлениеПеревозчика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПеревозчике, 
			"ПолноеНаименование,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
			
		ОбластьМакета.Параметры.ПредставлениеЗаказчикаПеревозок	 = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОЗаказчикеПеревозок, 
			"ПолноеНаименование,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
			
		ОбластьМакета.Параметры.ПредставлениеВодителя     = ФормированиеПечатныхФорм.ФамилияИнициалыФизЛица(ДанныеПечати.Водитель);	
		//ОбластьМакета.Параметры.ВодительскоеУдостоверение = ОписаниеВодительскогоУдостоверения(ДанныеПечати.Водитель, ДанныеПечати.Дата);	
		
		ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
		
		СтандартнаяКарточка  = ДанныеПечати.ЛицензионнаяКарточкаВид = "Стандартная";
		ОграниченнаяКарточка = ДанныеПечати.ЛицензионнаяКарточкаВид = "Ограниченная";
		
	КонецЕсли;
	
	
	Если СтандартнаяКарточка
		Или ОграниченнаяКарточка Тогда
		ШрифтСтандарт   = Новый Шрифт(ОбластьМакета.Области.Стандарт.Шрифт, , , , , ,Не СтандартнаяКарточка);
		ШрифтОграничено = Новый Шрифт(ОбластьМакета.Области.Стандарт.Шрифт, , , , , ,Не ОграниченнаяКарточка);
	КонецЕсли;

	ОбластьМакета.Области.Стандарт.Шрифт   = ШрифтСтандарт;
	ОбластьМакета.Области.Ограничено.Шрифт = ШрифтОграничено;
КонецПроцедуры // ЗаполнитьРеквизитыПодвалаТТН()

// Процедура заполняет табличный документ ТТН.
//
Процедура ЗаполнитьТабличныйДокументТТН(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати)
	
	ВалютаРегламентированногоУчета = ОбщиеФункции.ПолучитьЗначениеКонстантыВОбласти("ВалютаУправленческогоУчета");
	ЕдиницаИзмеренияВеса           = Справочники.ЕдиницыИзмерения.ПустаяСсылка(); //Константы.ЕдиницаИзмеренияВеса.Получить(); 
	КоэффициентПересчетаВТонны     = Число("0,001000"); //Константы.КоэффициентПересчетаВТонны.Получить(); 

//	ТабличныйДокумент.ПолеСверху = 0;
//	ТабличныйДокумент.ПолеСлева = 5;
//	ТабличныйДокумент.ПолеСнизу = 0;
//	ТабличныйДокумент.ПолеСправа = 5;
//	ТабличныйДокумент.РазмерКолонтитулаСверху = 0;
//	ТабличныйДокумент.РазмерКолонтитулаСнизу = 0;

	ТабличныйДокумент.ПолеСлева = 5;
	ТабличныйДокумент.ПолеСправа = 5;
	ТабличныйДокумент.ПолеСверху = 5;
	ТабличныйДокумент.ПолеСнизу = 5;

	ТабличныйДокумент.РазмерКолонтитулаСверху = 0;
	ТабличныйДокумент.РазмерКолонтитулаСнизу = 0;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ДанныеПечати      	= ДанныеДляПечати.РезультатПоШапке.Выбрать();
	//ВыборкаПоДокументам = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ТаблицаКурсовВалют  = ДанныеДляПечати.ТаблицаКурсовВалют;
	
	Макет = Обработки.ПечатьОбщихФорм.ПолучитьМакет("ТТН");
	
	//ПервыйДокумент = Истина;
	Пока ДанныеПечати.Следующий() Цикл
		
		// Найдем в выборке товары по текущему документу
		//СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		//НайденСледующий = ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска);
		
		// Если в ТТН только услуги - перейдем к следующему документу
		//Если НЕ(НайденСледующий) Тогда
		//	
		//	Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		//	НСтр("ru = 'В документе %1 отсутствуют Товары. Печать товарно - транспортной накладной не требуется.'"),
		//	ДанныеПечати.Ссылка
		//	);
		//	
		//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		//	Текст,
		//	ДанныеПечати.Ссылка
		//	);
		//	
		//	Продолжить;
		//КонецЕсли;

//		Если Не ПервыйДокумент Тогда
//			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
//		КонецЕсли;
//			
//		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ЗаполнитьРеквизитыШапкиТТН(ДанныеПечати, Макет, ТабличныйДокумент);
				
		НомерСтраницы = 1;
		ИтоговыеСуммы = СтруктураИтоговыеСуммыТТН();
		
		КоэффициентПересчета = КоэффициентПересчетаВалюты(ДанныеПечати, ТаблицаКурсовВалют, ВалютаРегламентированногоУчета);
		ДанныеСтроки = СтруктураДанныеСтрокиТТН(КоэффициентПересчета);
		
		// Создаем массив для проверки вывода
		МассивВыводимыхОбластей = Новый Массив;
		
		// Выводим многострочную часть докмента
		ОбластьЗаголовокТаблицы      = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ОбластьМакета                = Макет.ПолучитьОбласть("Строка");
		ОбластьИтоговПоСтранице      = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьВсего                 = Макет.ПолучитьОбласть("Всего");
		ОбластьПодвала               = Макет.ПолучитьОбласть("Подвал");
		ОбластьТранспортногоРаздела  = Макет.ПолучитьОбласть("ТранспортныйРаздел");
		ОбластьСведенийОГрузе        = Макет.ПолучитьОбласть("СведенияОГрузе");
		ОбластьПодвалаСведенийОГрузе = Макет.ПолучитьОбласть("ПодвалСведенийОГрузе");
		ОбластьПрочихСведений        = Макет.ПолучитьОбласть("ПрочиеСведения");
		
		
		//КоличествоСтрок = 1; //ВыборкаПоДокументам.Количество();
		
		СтрокаТовары = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать();
		КоличествоСтрок = СтрокаТовары.Количество();
		
		Пока СтрокаТовары.Следующий() Цикл
			
			ДанныеСтроки.Номер = ДанныеСтроки.Номер + 1;
			
			ЗаполнитьРеквизитыСтрокиТовараТТН(ДанныеПечати, СтрокаТовары, ДанныеСтроки, ОбластьМакета, ЕдиницаИзмеренияВеса, КоэффициентПересчетаВТонны);
			
			Если ДанныеСтроки.Номер = 1 Тогда // первая строка
			
				ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
				ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
				
			Иначе
				
				МассивВыводимыхОбластей.Очистить();
				МассивВыводимыхОбластей.Добавить(ОбластьМакета);
				МассивВыводимыхОбластей.Добавить(ОбластьИтоговПоСтранице);
				
				Если ДанныеСтроки.Номер = КоличествоСтрок Тогда
					
					МассивВыводимыхОбластей.Добавить(ОбластьВсего);
					МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
					
				КонецЕсли;
				
				Если ДанныеСтроки.Номер <> 1 И Не ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
					
					ОбластьИтоговПоСтранице.Параметры.Заполнить(ИтоговыеСуммы);
					ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);
					
					// Очистим итоги по странице.
					ОбнулитьИтогиПоСтраницеТТН(ИтоговыеСуммы);
					
					НомерСтраницы = НомерСтраницы + 1;
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
					ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
					
				КонецЕсли;
				
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			РассчитатьИтоговыеСуммыТТН(ИтоговыеСуммы, ДанныеСтроки);
			
		КонецЦикла;
		
		// Выводим итоги по последней странице
		ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьИтоговПоСтранице.Параметры.Заполнить(ИтоговыеСуммы);
		
		ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);
		
		// Выводим итоги по документу в целом
		ОбластьМакета = Макет.ПолучитьОбласть("Всего");
		ОбластьМакета.Параметры.Заполнить(ИтоговыеСуммы);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Выводим подвал документа
		ДобавитьИтоговыеДанныеПодвалаТТН(ИтоговыеСуммы, ДанныеСтроки.Номер, ВалютаРегламентированногоУчета);
		ЗаполнитьРеквизитыПодвалаТТН(ДанныеПечати, ИтоговыеСуммы, Макет, ТабличныйДокумент, ЕдиницаИзмеренияВеса, КоэффициентПересчетаВТонны);
		
		МассивВыводимыхОбластей.Очистить();
		
		ЗаполнитьРеквизитыТранспортногоРазделаТТН(ДанныеДляПечати, Макет, ОбластьТранспортногоРаздела);
		
		МассивВыводимыхОбластей.Добавить(ОбластьТранспортногоРаздела);
		МассивВыводимыхОбластей.Добавить(ОбластьСведенийОГрузе);
		МассивВыводимыхОбластей.Добавить(ОбластьПодвалаСведенийОГрузе);
		МассивВыводимыхОбластей.Добавить(ОбластьПрочихСведений);
		
		Если Не ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьТранспортногоРаздела);
		ТабличныйДокумент.Вывести(ОбластьСведенийОГрузе);
		ТабличныйДокумент.Вывести(ОбластьПодвалаСведенийОГрузе);
		ТабличныйДокумент.Вывести(ОбластьПрочихСведений);
	
		//УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТабличныйДокументТТН()

Процедура Печать_ТТН(ТабличныйДокумент, СсылкаИлиМассив, ПараметрыПечатиТранспортныйРаздел = Неопределено) Экспорт
	
		
	Если ТипЗнч(СсылкаИлиМассив) =  Тип("БизнесПроцессСсылка.СборкаЗаказа") Тогда  //это не правильно 
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(СсылкаИлиМассив.РеализацияТоваров);
		ДанныеДляПечати = Документы.РеализацияТоваров.ПолучитьДанныеДляТТН(МассивСсылок);
		ДанныеДляПечатиТаблицаТоваров = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выгрузить();
	Иначе
		ВходящийТип = ТипЗнч(СсылкаИлиМассив[0]);
		Если ВходящийТип = Тип("ДокументСсылка.РеализацияТоваров") Тогда
			ДанныеДляПечати = Документы.РеализацияТоваров.ПолучитьДанныеДляТТН(СсылкаИлиМассив);
		ИначеЕсли 
			ВходящийТип = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
			ДанныеДляПечати = Документы.ПеремещениеТоваров.ПолучитьДанныеДляТТН(СсылкаИлиМассив,ПараметрыПечатиТранспортныйРаздел);
		ИначеЕсли
			ВходящийТип = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
			ДанныеДляПечати = Документы.ВнутреннийЗаказ.ПолучитьДанныеДляТТН(СсылкаИлиМассив, ПараметрыПечатиТранспортныйРаздел);
		ИначеЕсли
			ВходящийТип = Тип("ДокументСсылка.ПередачаТовара") Тогда
			ДанныеДляПечати = Документы.ПередачаТовара.ПолучитьДанныеДляТТН(СсылкаИлиМассив);
		//ИначеЕсли
		//	ВходящийТип = Тип("ЗадачаСсылка.ЗадачаПользователю") Тогда
		//	ДанныеДляПечати = Задачи.ЗадачаПользователю.ПолучитьДанныеДляТТН(СсылкаИлиМассив);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если ПараметрыПечатиТранспортныйРаздел <> Неопределено Тогда
		
		ДанныеДляПечати.Вставить("ПараметрыПечатиТранспортныйРаздел", ПараметрыПечатиТранспортныйРаздел);
	КонецЕсли;
	
    ЗаполнитьТабличныйДокументТТН(ТабличныйДокумент, ДанныеДляПечати, СсылкаИлиМассив);
	
КонецПроцедуры

Процедура Печать_СводнаяТТН(ТабличныйДокумент, МассивДокументов, ПараметрыПечатиТранспортныйРаздел = Неопределено) Экспорт
	
	
		//ВходящийТип = ТипЗнч(МассивДокументов[0]);
		//Если ВходящийТип = Тип("ДокументСсылка.РеализацияТоваров") Тогда
		//	ДанныеДляПечати = Документы.РеализацияТоваров.ПолучитьДанныеДляТТН(МассивДокументов);
		//ИначеЕсли 
		//	ВходящийТип = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		//	ДанныеДляПечати = Документы.ПеремещениеТоваров.ПолучитьДанныеДляТТН(МассивДокументов,ПараметрыПечатиТранспортныйРаздел);
		//ИначеЕсли
		//	ВходящийТип = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
		//	ДанныеДляПечати = Документы.ВнутреннийЗаказ.ПолучитьДанныеДляТТН(МассивДокументов, ПараметрыПечатиТранспортныйРаздел);
		//ИначеЕсли
		//	ВходящийТип = Тип("ДокументСсылка.ПередачаТовара") Тогда
		//	ДанныеДляПечати = Документы.ПередачаТовара.ПолучитьДанныеДляТТН(МассивДокументов);
		//КонецЕсли;
		
		
	//Ссылка = МассивДокументов[0];
	УстановитьПривилегированныйРежим(Истина);
	
	КолонкаКодов = "";
	
	Если Не ЗначениеЗаполнено(КолонкаКодов) Тогда
		КолонкаКодов = "Артикул";
	КонецЕсли;
	
	Ссылка = МассивДокументов[0];
	ДокументТип = СТРЗаменить(ТипЗнч(Ссылка)," ","");
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	Док.Ссылка КАК Ссылка,
	               |	Док.Номер КАК Номер,
	               |	Док.Дата КАК Дата,
	               |	&Организация КАК Организация,
	               |	&Грузополучатель КАК Грузополучатель,
	               |	&Грузоотправитель КАК Грузоотправитель,
	               |	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент,
	               |	"""""""" КАК Кладовщик,
	               |	"""""""" КАК ДолжностьКладовщика,
	               |	ЕСТЬNULL(Рук.ФизическоеЛицо.Наименование, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) КАК Руководитель,
	               |	ЕСТЬNULL(Рук.Должность, """") КАК ДолжностьРуководителя,
	               |	ЕСТЬNULL(Бух.ФизическоеЛицо.Наименование, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) КАК ГлавныйБухгалтер,
	               |	ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка) КАК БанковскийСчетОрганизации,
	               |	ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка) КАК БанковскийСчетКонтрагента,
	               |	ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка) КАК БанковскийСчетГрузоотправителя,
	               |	ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка) КАК БанковскийСчетГрузополучателя,
	               |	"""""""" КАК ДоверенностьНомер,
	               |	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДоверенностьДата,
	               |	"""""""" КАК ДоверенностьВыдана,
	               |	"""""""" КАК ДоверенностьЛицо,
	               |	ИСТИНА КАК ЦенаВключаетНДС,
	               |	&Валюта КАК Валюта,
	               |	НаименованияТоваров.Количество КАК КоличествоНаименований
	               |ИЗ
	               |	Документ."+ДокументТип+" КАК Док
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизации.СрезПоследних(
	               |				&Дата,
	               |				Организация = &Организация
	               |					И ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизации.ГлавныйБухгалтер)) КАК Бух
	               |		ПО (ИСТИНА)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизации.СрезПоследних(
	               |				&Дата,
	               |				Организация = &Организация
	               |					И ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизации.Руководитель)) КАК Рук
	               |		ПО (ИСТИНА)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			СУММА(1) КАК Количество
	               |		ИЗ
	               |			(ВЫБРАТЬ
	               |				ВнутреннийЗаказТовары.Ссылка КАК Ссылка,
	               |				ВнутреннийЗаказТовары.Номенклатура КАК Номенклатура
	               |			ИЗ
	               |				Документ.ВнутреннийЗаказ.Товары КАК ВнутреннийЗаказТовары
	               |			ГДЕ
	               |				ВнутреннийЗаказТовары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	               |				И ВнутреннийЗаказТовары.Ссылка В(&МассивСсылок)
	               |			
	               |			ОБЪЕДИНИТЬ ВСЕ
	               |			
	               |			ВЫБРАТЬ
	               |				ПередачаТовараТовары.Ссылка,
	               |				ПередачаТовараТовары.Номенклатура
	               |			ИЗ
	               |				Документ.ПередачаТовара.Товары КАК ПередачаТовараТовары
	               |			ГДЕ
	               |				ПередачаТовараТовары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	               |				И ПередачаТовараТовары.Ссылка В(&МассивСсылок)
	               |			
	               |			ОБЪЕДИНИТЬ ВСЕ
	               |			
	               |			ВЫБРАТЬ
	               |				ПеремещениеТоваровТовары.Ссылка,
	               |				ПеремещениеТоваровТовары.Номенклатура
	               |			ИЗ
	               |				Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	               |			ГДЕ
	               |				ПеремещениеТоваровТовары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	               |				И ПеремещениеТоваровТовары.Ссылка В(&МассивСсылок)
	               |			
	               |			ОБЪЕДИНИТЬ ВСЕ
	               |			
	               |			ВЫБРАТЬ
	               |				РеализацияТоваровТовары.Ссылка,
	               |				РеализацияТоваровТовары.Номенклатура
	               |			ИЗ
	               |				Документ.РеализацияТоваров.Товары КАК РеализацияТоваровТовары
	               |			ГДЕ
	               |				РеализацияТоваровТовары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	               |				И РеализацияТоваровТовары.Ссылка В(&МассивСсылок)) КАК СписокТоваров) КАК НаименованияТоваров
	               |		ПО (ИСТИНА)
	               |ГДЕ
	               |	Док.Ссылка = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВнутреннийЗаказТовары.Ссылка,
	               |	ВнутреннийЗаказТовары.Номенклатура,
	               |	ВнутреннийЗаказТовары.Номенклатура.Артикул КАК ТоварКод,
	               |	ВнутреннийЗаказТовары.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	               |	ВнутреннийЗаказТовары.Количество,
	               |	ВЫБОР
	               |		КОГДА ВнутреннийЗаказТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	               |			ТОГДА ВнутреннийЗаказТовары.Номенклатура.ЕдиницаИзмерения.Наименование
	               |		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ВнутреннийЗаказТовары.Упаковка)
	               |	КОНЕЦ КАК ВидУпаковки,
	               |	ВЫБОР
	               |		КОГДА ВнутреннийЗаказТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	               |			ТОГДА ВнутреннийЗаказТовары.Номенклатура.ЕдиницаИзмерения.Наименование
	               |		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ВнутреннийЗаказТовары.Упаковка)
	               |	КОНЕЦ КАК БазоваяЕдиницаНаименование,
	               |	0 КАК Цена,
	               |	0 КАК МассаБрутто,
	               |	ВнутреннийЗаказТовары.Количество * ВнутреннийЗаказТовары.Номенклатура.Вес КАК МассаНетто,
	               |	0 КАК КоличествоМест,
	               |	0 КАК Сумма,
	               |	0 КАК СуммаНДС,
	               |	ВнутреннийЗаказТовары.НомерСтроки,
	               |	ЛОЖЬ КАК Весовой,
	               |	ЛОЖЬ КАК ЭтоВозвратнаяТара
	               |ИЗ
	               |	Документ.ВнутреннийЗаказ.Товары КАК ВнутреннийЗаказТовары
	               |ГДЕ
	               |	ВнутреннийЗаказТовары.Ссылка В(&МассивСсылок)
	               |	И ВнутреннийЗаказТовары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ПередачаТовараТовары.Ссылка,
	               |	ПередачаТовараТовары.Номенклатура,
	               |	ПередачаТовараТовары.Номенклатура.Артикул,
	               |	ПередачаТовараТовары.Номенклатура.НаименованиеПолное,
	               |	ПередачаТовараТовары.Количество,
	               |	ВЫБОР
	               |		КОГДА ПередачаТовараТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	               |			ТОГДА ПередачаТовараТовары.Номенклатура.ЕдиницаИзмерения.Наименование
	               |		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ПередачаТовараТовары.Упаковка)
	               |	КОНЕЦ,
	               |	ВЫБОР
	               |		КОГДА ПередачаТовараТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	               |			ТОГДА ПередачаТовараТовары.Номенклатура.ЕдиницаИзмерения.Наименование
	               |		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ПередачаТовараТовары.Упаковка)
	               |	КОНЕЦ,
	               |	ПередачаТовараТовары.Цена,
	               |	0,
	               |	ПередачаТовараТовары.Количество * ПередачаТовараТовары.Номенклатура.Вес,
	               |	0,
	               |	ПередачаТовараТовары.Сумма,
	               |	ПередачаТовараТовары.СуммаНДС,
	               |	ПередачаТовараТовары.НомерСтроки,
	               |	ЛОЖЬ,
	               |	ЛОЖЬ
	               |ИЗ
	               |	Документ.ПередачаТовара.Товары КАК ПередачаТовараТовары
	               |ГДЕ
	               |	ПередачаТовараТовары.Ссылка В(&МассивСсылок)
	               |	И ПередачаТовараТовары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ПеремещениеТоваровТовары.Ссылка,
	               |	ПеремещениеТоваровТовары.Номенклатура,
	               |	ПеремещениеТоваровТовары.Номенклатура.Артикул,
	               |	ПеремещениеТоваровТовары.Номенклатура.НаименованиеПолное,
	               |	ПеремещениеТоваровТовары.Количество,
	               |	ВЫБОР
	               |		КОГДА ПеремещениеТоваровТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	               |			ТОГДА ПеремещениеТоваровТовары.Номенклатура.ЕдиницаИзмерения.Наименование
	               |		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ПеремещениеТоваровТовары.Упаковка)
	               |	КОНЕЦ,
	               |	ВЫБОР
	               |		КОГДА ПеремещениеТоваровТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	               |			ТОГДА ПеремещениеТоваровТовары.Номенклатура.ЕдиницаИзмерения.Наименование
	               |		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ПеремещениеТоваровТовары.Упаковка)
	               |	КОНЕЦ,
	               |	ПеремещениеТоваровТовары.Цена,
	               |	0,
	               |	ПеремещениеТоваровТовары.Количество * ПеремещениеТоваровТовары.Номенклатура.Вес,
	               |	0,
	               |	ПеремещениеТоваровТовары.Сумма,
	               |	0,
	               |	ПеремещениеТоваровТовары.НомерСтроки,
	               |	ЛОЖЬ,
	               |	ЛОЖЬ
	               |ИЗ
	               |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	               |ГДЕ
	               |	ПеремещениеТоваровТовары.Ссылка В(&МассивСсылок)
	               |	И ПеремещениеТоваровТовары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	РеализацияТоваровТовары.Ссылка,
	               |	РеализацияТоваровТовары.Номенклатура,
	               |	РеализацияТоваровТовары.Номенклатура.Артикул,
	               |	РеализацияТоваровТовары.Номенклатура.НаименованиеПолное,
	               |	РеализацияТоваровТовары.Количество,
	               |	ВЫБОР
	               |		КОГДА РеализацияТоваровТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	               |			ТОГДА РеализацияТоваровТовары.Номенклатура.ЕдиницаИзмерения.Наименование
	               |		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(РеализацияТоваровТовары.Упаковка)
	               |	КОНЕЦ,
	               |	ВЫБОР
	               |		КОГДА РеализацияТоваровТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	               |			ТОГДА РеализацияТоваровТовары.Номенклатура.ЕдиницаИзмерения.Наименование
	               |		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(РеализацияТоваровТовары.Упаковка)
	               |	КОНЕЦ,
	               |	0,
	               |	0,
	               |	РеализацияТоваровТовары.Количество * РеализацияТоваровТовары.Номенклатура.Вес,
	               |	0,
	               |	0,
	               |	0,
	               |	РеализацияТоваровТовары.НомерСтроки,
	               |	ЛОЖЬ,
	               |	ЛОЖЬ
	               |ИЗ
	               |	Документ.РеализацияТоваров.Товары КАК РеализацияТоваровТовары
	               |ГДЕ
	               |	РеализацияТоваровТовары.Ссылка В(&МассивСсылок)
	               |	И РеализацияТоваровТовары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)";
		
														   
    Запрос.УстановитьПараметр("Дата", 	Ссылка.Дата);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("МассивСсылок", МассивДокументов);
	Запрос.УстановитьПараметр("Организация", ПараметрыПечатиТранспортныйРаздел._Организация);
	Запрос.УстановитьПараметр("Грузоотправитель", ?(ЗначениеЗаполнено(ПараметрыПечатиТранспортныйРаздел._Грузоотправитель), ПараметрыПечатиТранспортныйРаздел._Грузоотправитель, ПараметрыПечатиТранспортныйРаздел._Организация));
	Запрос.УстановитьПараметр("Грузополучатель", ПараметрыПечатиТранспортныйРаздел._Грузополучатель);
	Запрос.УстановитьПараметр("Валюта", Справочники.Валюты.НайтиПоКоду("643"));
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(Ссылка);
	ТаблицаКурсовВалют = Новый ТаблицаЗначений;//ПолучитьТаблицуКурсовВалют(МассивОбъектов);
	
	МассивРезультатов 			= Запрос.ВыполнитьПакет();
	РезультатПоШапке			= МассивРезультатов[0];
	РезультатПоТабличнойЧасти 	= МассивРезультатов[1];
	
	ДанныеДляПечати 	= Новый Структура("РезультатПоШапке, РезультатПоТабличнойЧасти, ТаблицаКурсовВалют",
												   РезультатПоШапке, РезультатПоТабличнойЧасти, ТаблицаКурсовВалют);

	
	//Возврат СтруктураДанныхДляПечати;
		
	Если ПараметрыПечатиТранспортныйРаздел <> Неопределено Тогда
		
		ДанныеДляПечати.Вставить("ПараметрыПечатиТранспортныйРаздел", ПараметрыПечатиТранспортныйРаздел);
	КонецЕсли;
	
    ЗаполнитьТабличныйДокументТТН(ТабличныйДокумент, ДанныеДляПечати, МассивДокументов);
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////////////////
// ТРАНСПОРТНАЯ НАКЛАДНАЯ

Процедура Печать_ТранспортнаяНакладная(ТабличныйДокумент, Ссылка, ПараметрыПечатиТранспортныйРаздел = Неопределено) Экспорт
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.РеализацияТоваров") Тогда
		ДанныеДляПечати = Документы.РеализацияТоваров.ПолучитьДанныеДляТранспортнаяНакладная(Ссылка);
	ИначеЕсли 
		ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		ДанныеДляПечати = Документы.ПеремещениеТоваров.ПолучитьДанныеДляТранспортнаяНакладная(Ссылка,ПараметрыПечатиТранспортныйРаздел);		
	ИначеЕсли	
		ТипЗнч(Ссылка) = Тип("БизнесПроцессСсылка.СборкаЗаказа") Тогда
		ДанныеДляПечати = Документы.РеализацияТоваров.ПолучитьДанныеДляТранспортнаяНакладная(Ссылка.РеализацияТоваров);
	ИначеЕсли
		ТипЗнч(Ссылка) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
		ДанныеДляПечати = Документы.ВнутреннийЗаказ.ПолучитьДанныеДляПечатиТранспортнаяНакладная(Ссылка, ПараметрыПечатиТранспортныйРаздел);
	ИначеЕсли
		ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПередачаТовара") Тогда
		ДанныеДляПечати = Документы.ПередачаТовара.ПолучитьДанныеДляТранспортнаяНакладная(Ссылка);
		
	КонецЕсли;
	
    ЗаполнитьТабличныйДокументТН(ТабличныйДокумент, ДанныеДляПечати, Ссылка, ПараметрыПечатиТранспортныйРаздел);
	
КонецПроцедуры

Процедура ЗаполнитьТабличныйДокументТН(ТабличныйДокумент, ТаблицаДанныхДляПечати, Ссылка, ПараметрыПечати)
	//НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
	Макет = Обработки.ПечатьОбщихФорм.ПолучитьМакет("ТранспортнаяНакладная");
	
	Для Каждого ДанныеПечати Из ТаблицаДанныхДляПечати Цикл
		
		ОбластьМакета = Макет.ПолучитьОбласть("ГоризонтальнаяЛицеваяСторона");
		ОбластьМакетаОборотная = Макет.ПолучитьОбласть("ГоризонтальнаяОборотнаяСторона");
		
		СведенияОГрузополучателе  = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Грузополучатель,  ДанныеПечати.Дата);
		СведенияОГрузоотправитель = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Грузоотправитель, ДанныеПечати.Дата);
		//СведенияОПеревозчике      = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Перевозчик, ДанныеПечати.Дата);
		//СведенияОВодителе         = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Водитель, ДанныеПечати.Дата);
		
		ПредставлениеГрузоотправителя = "";
		ПредставлениеПеревозчика      = "";
		Перевозчик                    = "";
		Грузоотправитель              = "";
		
		Если ЗначениеЗаполнено(ДанныеПечати.Грузополучатель) И ТипЗнч(ДанныеПечати.Грузополучатель.Владелец) = Тип("СправочникСсылка.Организации") ИЛИ 
			ДанныеПечати.Грузополучатель.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
			
			ОбластьМакета.Параметры.Пункт2_2 = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, 
			"ПолноеНаименование,ФактическийАдрес,Телефоны");
		Иначе
			ОбластьМакета.Параметры.Пункт2_1 = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, 
			"ПолноеНаименование,ИНН,ФактическийАдрес");
		КонецЕсли;
			
		Если ЗначениеЗаполнено(ДанныеПечати.Грузоотправитель) И ТипЗнч(ДанныеПечати.Грузоотправитель.Владелец) = Тип("СправочникСсылка.Организации") ИЛИ 
			ДанныеПечати.Грузоотправитель.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
			
			ПредставлениеГрузоотправителя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправитель, 
			"ПолноеНаименование,ФактическийАдрес,Телефоны");
			ОбластьМакета.Параметры.Пункт1_2 = ПредставлениеГрузоотправителя;
			Грузоотправитель = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправитель, "ПолноеНаименование");
		Иначе
	 		ПредставлениеГрузоотправителя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправитель, 
			"ПолноеНаименование,ИНН,ФактическийАдрес");
			ОбластьМакета.Параметры.Пункт1_1 = ПредставлениеГрузоотправителя;
			Грузоотправитель = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправитель, "ПолноеНаименование");
		КонецЕсли;
		
		ОбластьМакета.Параметры.Пункт6_1 = ПараметрыПечати.ПунктПогрузки;
		ОбластьМакета.Параметры.Пункт7_1 = ПараметрыПечати.ПунктРазгрузки;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		Если НЕ ПараметрыПечати.ПеревозчикЮрЛицо Тогда
			ОбластьМакетаОборотная.Параметры.Пункт10_1 = ПараметрыПечати.ПредставлениеПеревозчика;
		Иначе
			ОбластьМакетаОборотная.Параметры.Пункт10_2 = ПараметрыПечати.ПредставлениеПеревозчика;
		КонецЕсли;
					
		ОбластьМакетаОборотная.Параметры.Пункт10_4 = ПараметрыПечати.ПредставлениеВодителя;
		ОбластьМакетаОборотная.Параметры.Пункт11_1 = ПараметрыПечати.МаркаАвтомобиля;
		ОбластьМакетаОборотная.Параметры.Пункт11_2 = ПараметрыПечати.ГосНомерАвтомобиля;
		
		ОбластьМакетаОборотная.Параметры.Пункт16_1 = Грузоотправитель;
		ОбластьМакетаОборотная.Параметры.Пункт16_2 = ПараметрыПечати.ПредставлениеПеревозчика;
		
		ТабличныйДокумент.Вывести(ОбластьМакетаОборотная);
		
	КонецЦикла;
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////
// СЧЕТ-ФАКТУРА

Процедура ЗаполнитьРеквизитыШапкиСчетФактура(ДанныеПечати, СведенияОПоставщике, Макет, ТабличныйДокумент, Номер, Дата, ПечатьВВалюте, ЭтоСчетФактураНаАванс)
		
	НомераДаты = Новый Структура;
	НомераДаты.Вставить("Номер", ФормированиеПечатныхФорм.ПолучитьНомерНаПечать(ДанныеПечати.Номер, Истина, ДанныеПечати.Дата));
	
	УчетПоОП = ЗначениеЗаполнено(ДанныеПечати.Дата) И ДанныеПечати.Дата >= КэшируемыеФункции.НачалоВеденияСФПоОбособленнымПодразделениям();
	
	//НомераДаты.Вставить("НомерПодразделения", ?(УчетПоОП И ДанныеПечати.НомерПодразделения <> 0, "/" + Строка(ДанныеПечати.НомерПодразделения), ""));
	
	НомераДаты.Вставить("НомерПодразделения", ?(УчетПоОП И ДанныеПечати.Ссылка.Склад.НомерПодразделения <> 0, "/" + Строка(ДанныеПечати.Ссылка.Склад.НомерПодразделения), ""));
		
	НомераДаты.Вставить("Дата", Формат(ДанныеПечати.Дата, "ДФ='дд ММММ гггг'")+ " г.");
	
	НомераДаты.Вставить("НомерИсправления","--");
	НомераДаты.Вставить("ДатаИсправления", "--");
	
	СведенияОПоставщике = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, Дата);
	СведенияОПокупателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент, Дата);
	СведенияОГрузоотправителе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Грузоотправитель, Дата);
	СведенияОГрузополучателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Грузополучатель,  Дата);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	
	ОбластьМакета.Параметры.Заполнить(ДанныеПечати); 
	ОбластьМакета.Параметры.Заполнить(НомераДаты);

	//ОбластьМакета.Параметры.Номер = "Счет-фактура № " + ФормированиеПечатныхФорм.ПолучитьНомерНаПечать(Номер)
	//	+ " от " + Формат(Дата, "ДФ='дд ММММ гггг'")+ " г.";
	
	// Выводим данные о поставщике.
	ПредставлениеПоставщика = "Продавец: " + СведенияОПоставщике.ОфициальноеНаименование;	
	
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;
	ОбластьМакета.Параметры.АдресПоставщика = "Адрес: " + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес");

	КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправителе, "КПП,", Ложь);
	ОбластьМакета.Параметры.ИННПоставщика = "ИНН/КПП продавца: " 
		+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ИНН", Ложь)
		+ ?(Не ПустаяСтрока(КПП), "/" + КПП, "");
		
	// Выводим данные грузоотправителя.	
	ПредставлениеГрузоотправителя = "Грузоотправитель и его адрес: ";
	
	Если ДанныеПечати.ТолькоУслуги ИЛИ ДанныеПечати.ЕстьУслуги ИЛИ ЭтоСчетФактураНаАванс Тогда
		ПредставлениеГрузоотправителя = ПредставлениеГрузоотправителя + "--";
	ИначеЕсли ДанныеПечати.Организация = ДанныеПечати.Грузоотправитель Тогда
		ПредставлениеГрузоотправителя = ПредставлениеГрузоотправителя + "он же";
	Иначе
		ПредставлениеГрузоотправителя = ПредставлениеГрузоотправителя 
			+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправителе, "ПолноеНаименование,ФактическийАдрес");
	КонецЕсли;
	ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = ПредставлениеГрузоотправителя;
		
	// Выводим данные грузополучателя и покупателя.
	ПредставлениеГрузополучателя = "Грузополучатель и его адрес: ";
	Если ДанныеПечати.ТолькоУслуги ИЛИ ДанныеПечати.ЕстьУслуги ИЛИ ЭтоСчетФактураНаАванс Тогда
		ПредставлениеГрузополучателя = ПредставлениеГрузополучателя + "--";
	Иначе
		Если Не ПустаяСтрока(ДанныеПечати.АдресДоставки) Тогда
			ПредставлениеГрузополучателя = ПредставлениеГрузополучателя
				+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "ПолноеНаименование", Ложь)
				+ ", " + СокрЛП(ДанныеПечати.АдресДоставки)
			;
		Иначе
			ПредставлениеГрузополучателя = ПредставлениеГрузополучателя
				+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "ПолноеНаименование,ФактическийАдрес", Ложь);
				 
		КонецЕсли;
	КонецЕсли;
	ОбластьМакета.Параметры.ПредставлениеГрузополучателя = ПредставлениеГрузополучателя;
	
	ПоДокументу = "К платежно-расчетному документу № ";
	ЕстьОплата	= Ложь;
	//ОбластьМакета.Параметры.ПоДокументу = ОбластьМакета.Параметры.ПоДокументу + ФормированиеПечатныхФорм.ПолучитьНомерНаПечать(ДанныеПечати.ПоДокументуНомер ) + " от " + Формат(ДанныеПечати.ПоДокументуДата, "ДФ='дд ММММ гггг'")+ " г.";
	
	
	Попытка
		РасчетныеДокументы = ДанныеПечати.РасчетныеДокументы.Выгрузить();
		ЕстьРасчетныеДокументы = РасчетныеДокументы.Количество();
	Исключение
		ЕстьРасчетныеДокументы = Ложь;
	КонецПопытки;
	
	Если ЕстьРасчетныеДокументы Тогда
		Для Каждого Строка ИЗ РасчетныеДокументы Цикл
			Если ЗначениеЗаполнено(Строка.Номер) Тогда ЕстьОплата = Истина;
					ПоДокументу = ПоДокументу+ " " +  
					ФормированиеПечатныхФорм.ПолучитьНомерНаПечать(Строка.Номер) + " от " +
					Формат(Строка.Дата, "ДФ='дд ММММ гггг'")+ " г." + ",";					
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЕстьОплата	Тогда
		ОбластьМакета.Параметры.ПоДокументу = Лев(ПоДокументу, СтрДлина(ПоДокументу)-1);
	Иначе
		ОбластьМакета.Параметры.ПоДокументу = ПоДокументу + "-- от --";
	КонецЕсли;
	
	ОбластьМакета.Параметры.ПредставлениеПокупателя = "Покупатель: " 
		+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование", Ложь);
	ОбластьМакета.Параметры.АдресПокупателя = "Адрес: "
		+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес", Ложь);
		
	Если ДанныеПечати.ТолькоУслуги ИЛИ ДанныеПечати.ЕстьУслуги ИЛИ ЭтоСчетФактураНаАванс Тогда
		КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "КПП,", Ложь);
	Иначе
		КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "КПП,", Ложь);
    КонецЕсли;
		
	ОбластьМакета.Параметры.ИННПокупателя = "ИНН/КПП покупателя: "
		+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ИНН,", Ложь)
		+ ?(Не ПустаяСтрока(КПП), "/" + КПП, "");
	
	Если ЗначениеЗаполнено(ДанныеПечати.Валюта) Тогда //И ПечатьВВалюте Тогда
		ОбластьМакета.Параметры.Валюта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Валюта: наименование, код %1, %2'"),
			СокрЛП(ДанныеПечати.ВалютаНаименованиеПолное),
			ДанныеПечати.ВалютаКод
		);
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
		
КонецПроцедуры // ЗаполнитьРеквизитыШапкиСчетФактура()

// Процедура заполнения реквизитов подвала Счет-фактуры.
//
// Параметры:
//	ДанныеПечати - ВыборкаИзРезультатаЗапроса - Данные шапки документа
//	ИтоговыеСуммы - Структура - Структура итоговых сумм документа
//	Макет - Макет ТОРГ-12
//	ТабличныйДокумент - Табличный документ
//
Процедура ЗаполнитьРеквизитыПодвалаСчетФактура(ДанныеПечати, СведенияОбОрганизации, ИтоговыеСуммы, Макет, ТабличныйДокумент, ЭтоСчетФактураНаАванс)
	
	ОбластьИтого = Макет.ПолучитьОбласть("Итого");
    ОбластьИтого.Параметры.ИтогоСуммаСНДС = ИтоговыеСуммы.ИтогоСуммаСНДС;
	
	Если НЕ ЭтоСчетФактураНаАванс Тогда
		
		ОбластьИтого.Параметры.ИтогоСуммаБезНДС = ИтоговыеСуммы.ИтогоСумма;
		ОбластьИтого.Параметры.ИтогоНДС = ?(
			ИтоговыеСуммы.ИтогоНДС > 0, 
			ИтоговыеСуммы.ИтогоНДС, 
			НСтр("ru='без НДС'")
		);
		
	КонецЕсли;
		
	ТабличныйДокумент.Вывести(ОбластьИтого);
	
	ОбластьПодвала = Макет.ПолучитьОбласть("Подвал");
	
	Если СведенияОбОрганизации.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		ОбластьПодвала.Параметры.ФИОРуководителя = ФормированиеПечатныхФорм.ФамилияИнициалыФизЛица(ДанныеПечати.Руководитель);
		ОбластьПодвала.Параметры.ФИОГлавногоБухгалтера = ФормированиеПечатныхФорм.ФамилияИнициалыФизЛица(ДанныеПечати.ГлавныйБухгалтер);
	Иначе
		ОбластьПодвала.Параметры.ФИОПБОЮЛ = ФормированиеПечатныхФорм.ФамилияИнициалыФизЛица(ДанныеПечати.Руководитель);
		ОбластьПодвала.Параметры.Свидетельство = СведенияОбОрганизации.Свидетельство;
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьПодвала);
		
КонецПроцедуры // ЗаполнитьРеквизитыПодвалаСчетФактура()

// Процедура заполняет табличный документ Счет-фактура.
//
Процедура ЗаполнитьТабличныйДокументСчетФактура(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, Номер, Дата, ЭтоСчетФактураНаАванс = Ложь, ПечатьВВалюте = Ложь) Экспорт
	
	ВалютаРегламентированногоУчета = ОбщиеФункции.ПолучитьЗначениеКонстантыВОбласти("ВалютаУправленческогоУчета");
	
	//Если НЕ ТипЗнч(ТабличныйДокумент) = Тип("ТабличныйДокумент") Тогда
		ТабличныйДокумент = Новый ТабличныйДокумент;
		ТабличныйДокумент.АвтоМасштаб = Истина;
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	//КонецЕсли;
		
	Макет = Обработки.ПечатьОбщихФорм.ПолучитьМакет("СчетФактура");

	ДанныеПечати      	= ДанныеДляПечати.РезультатПоШапке.Выбрать();
	//ВыборкаПоДокументам = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ТаблицаКурсовВалют  = ДанныеДляПечати.ТаблицаКурсовВалют;
	
	//ПервыйДокумент = Истина;
	Пока ДанныеПечати.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(ДанныеПечати.Номер) И Номер = "" Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для документа %1 не введен счет-фактура'"),
				ДанныеПечати.Ссылка
				);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДанныеПечати.Ссылка,
				?(ДанныеПечати.Номер = Неопределено, "ТекстСчетФактура", "ПредъявленСчетФактура")
			);
			
		ИначеЕсли ПечатьВВалюте И ДанныеПечати.Валюта = ВалютаРегламентированногоУчета Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для документа %1 не требуется печатать счет-фактуру в валюте'"),
				ДанныеПечати.Ссылка
				);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДанныеПечати.Ссылка
			);
			
		Иначе
	
			//Если Не ПервыйДокумент Тогда
			//	ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			//КонецЕсли;
			
			//ПервыйДокумент = Ложь;
			НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
			
			// Выводим общие реквизиты шапки
			СведенияОбОрганизации = Новый Структура;
			ЗаполнитьРеквизитыШапкиСчетФактура(ДанныеПечати, СведенияОбОрганизации, Макет, ТабличныйДокумент, Номер, Дата, ПечатьВВалюте, ЭтоСчетФактураНаАванс);
			//ЗаголовокТаблицы.Параметры.Валюта = ?(ПечатьВВалюте, ДанныеПечати.Валюта, ВалютаРегламентированногоУчета);
			
			// Выводим заголовок таблицы
			ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
			ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
			
			НомерСтраницы   = 1;
			
			// Инициализация итогов в документе
			ИтоговыеСуммы = СтруктураИтоговыеСуммы();
			
			Если ПечатьВВалюте Тогда
				КоэффициентПересчета = 1;
			Иначе
				КоэффициентПересчета = КоэффициентПересчетаВалюты(ДанныеПечати, ТаблицаКурсовВалют, ВалютаРегламентированногоУчета, Дата);
			КонецЕсли;
			ДанныеСтроки = СтруктураДанныеСтроки(КоэффициентПересчета);
			
			// Создаем массив для проверки вывода
			МассивВыводимыхОбластей = Новый Массив;
			
			// Выводим многострочную часть документа
			ОбластьМакета  = Макет.ПолучитьОбласть("Строка");
			ОбластьИтого = Макет.ПолучитьОбласть("Итого");
			ОбластьПодвала = Макет.ПолучитьОбласть("Подвал");
			
			//СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
			//ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска);
			//ВыборкаПоДокументам.Следующий();
			
			ТаблицаТовары = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выгрузить();
			
			//Документы.РеализацияТоваров.УдалитьЛишниеКопейкиВТабличнойЧасти(ДанныеПечати.Ссылка, ТаблицаТовары); 
			
			Если НЕ ДанныеПечати.ЕстьУслуги ИЛИ ДанныеПечати.ТолькоУслуги Тогда
				КоличествоСтрок = ТаблицаТовары.Количество();

				Для Каждого СтрокаТовары Из ТаблицаТовары Цикл
				
					ДанныеСтроки.Номер = ДанныеСтроки.Номер + 1;
					
					МассивВыводимыхОбластей.Очистить();
					МассивВыводимыхОбластей.Добавить(ОбластьМакета);
					
					Если ДанныеСтроки.Номер = КоличествоСтрок Тогда
						МассивВыводимыхОбластей.Добавить(ОбластьИтого);
						МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
					КонецЕсли;
					
					Если НЕ ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
						НомерСтраницы = НомерСтраницы + 1;
						ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
						ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
					КонецЕсли;
					
					ЗаполнитьРеквизитыСтрокиТовара(ДанныеПечати, СтрокаТовары, ДанныеСтроки, ОбластьМакета);
					
					Если НЕ ЭтоСчетФактураНаАванс Тогда
						ЗаполнитьРеквизитыСтрокиТовараГТД(СтрокаТовары, ОбластьМакета);
					КонецЕсли;
					
					Если ЭтоСчетФактураНаАванс Тогда
						ОбластьМакета.Параметры.Акциз = "";
						ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "";
					Иначе
						ОбластьМакета.Параметры.Акциз = "без акциза";
					КонецЕсли;
					
					Если ЭтоСчетФактураНаАванс Тогда
						// В счетах-фактурах на аванс колонки 3,4,5 не выводятся
						ОбластьМакета.Параметры.Заполнить(Новый Структура("Количество,Цена,СуммаБезНДС",0,0,0));
					КонецЕсли;
					
					ПроставитьПрочеркиВПустыеПоляСтрокиСчетФактура(ОбластьМакета);
					
					ТабличныйДокумент.Вывести(ОбластьМакета);
					РассчитатьИтоговыеСуммы(ИтоговыеСуммы, ДанныеСтроки);
					
				КонецЦикла;
			Иначе
				КоличествоСтрок = 1;
				УслугаСтроки = ТаблицаТовары.НайтиСтроки(Новый Структура("ЭтоУслуга", Истина));
				Если УслугаСтроки.Количество() Тогда
					
					СтрокаНаименованиеТоваров = "";				
					Для Каждого СтрокаТовары Из ТаблицаТовары Цикл
						
						Если НЕ СтрокаТовары.ЭтоУслуга Тогда
						
							СтрокаНаименованиеТоваров = СтрокаНаименованиеТоваров + ?(ПустаяСтрока(СтрокаНаименованиеТоваров), "", ", ") +
										ФормированиеПечатныхФорм.ПолучитьПредставлениеНоменклатурыДляПечати(СтрокаТовары.ТоварНаименование) + 
										?(СтрокаТовары.ЭтоВозвратнаяТара, НСтр("ru=' (возвратная тара)'"), "");					
							
						КонецЕсли;
						ЗаполнитьРеквизитыСтрокиТовара(ДанныеПечати, СтрокаТовары, ДанныеСтроки, ОбластьМакета);
                       	РассчитатьИтоговыеСуммы(ИтоговыеСуммы, ДанныеСтроки);
					КонецЦикла;
					
					УслугаНаименование = УслугаСтроки[0].ТоварНаименование + " в т.ч.:"; 
					ТоварНаименование = УслугаНаименование + Символы.ПС + СтрокаНаименованиеТоваров; 
					КоличествоНормоЧас = УслугаСтроки[0].Количество; 
					
					ЗаполнитьРеквизитыСтрокиТовара(ДанныеПечати, УслугаСтроки[0], ДанныеСтроки, ОбластьМакета);
					
					ОбластьМакета.Параметры.Заполнить(Новый Структура("СуммаСНДС, СуммаНДС, СуммаБезНДС, ТоварНаименование", 
										ИтоговыеСуммы.ИтогоСуммаСНДС, ИтоговыеСуммы.ИтогоНДС, ИтоговыеСуммы.ИтогоСумма,  ТоварНаименование));
										
					ОбластьМакета.Параметры.Цена = 	ИтоговыеСуммы.ИтогоСумма / КоличествоНормоЧас;					 
					ОбластьМакета.Параметры.Акциз = "без акциза";
		
					ПроставитьПрочеркиВПустыеПоляСтрокиСчетФактура(ОбластьМакета);
				
					МассивВыводимыхОбластей.Очистить();
					МассивВыводимыхОбластей.Добавить(ОбластьМакета);
					МассивВыводимыхОбластей.Добавить(ОбластьИтого);
					МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
						
					Если НЕ ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
						НомерСтраницы = НомерСтраницы + 1;
						ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
						ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
					КонецЕсли;
						
					ТабличныйДокумент.Вывести(ОбластьМакета);

				КонецЕсли;
				
			КонецЕсли;
			// Выводим итоги по документу
			ДобавитьИтоговыеДанныеПодвала(ИтоговыеСуммы, ДанныеСтроки.Номер, ВалютаРегламентированногоУчета);
			ЗаполнитьРеквизитыПодвалаСчетФактура(ДанныеПечати, СведенияОбОрганизации, ИтоговыеСуммы, Макет, ТабличныйДокумент, ЭтоСчетФактураНаАванс);
			
			//УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТабличныйДокументСчетФактура()

Процедура Печать_СчетФактура(ТабличныйДокумент, Ссылка, Номер = "", Дата = Неопределено) Экспорт
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.РеализацияТоваров") Тогда
		ДанныеДляПечати = Документы.РеализацияТоваров.ПолучитьДанныеДляСчетФактура_ИзРеализации(Ссылка);
	ИначеЕсли
		ТипЗнч(Ссылка) = Тип("ДокументСсылка.РеализацияПереданныхТоваров") Тогда
		ДанныеДляПечати = Документы.РеализацияПереданныхТоваров.ПолучитьДанныеДляСчетФактура_ИзРеализации(Ссылка);
	ИначеЕсли	
		ТипЗнч(Ссылка) = Тип("БизнесПроцессСсылка.СборкаЗаказа") Тогда
		ДанныеДляПечати = Документы.РеализацияТоваров.ПолучитьДанныеДляСчетФактура_ИзРеализации(Ссылка.РеализацияТоваров);
	ИначеЕсли	
		ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда
		ДанныеДляПечати = Документы.ПоступлениеТоваров.ПолучитьДанныеДляСчетФактура(Ссылка);
	ИначеЕсли	
		ТипЗнч(Ссылка) = Тип("ДокументСсылка.ВозвратПоставщику") Тогда
		ДанныеДляПечати = Документы.ВозвратПоставщику.ПолучитьДанныеДляСчетФактура(Ссылка);
	Иначе
		Возврат;
	КонецЕсли;
	ПечатьНаСервере.ЗаписатьИсториюПечати(Ссылка.Заказ,Перечисления.ТипыПечатаемыхДокументов.СчетФактура,Ссылка);

	ЗаполнитьТабличныйДокументСчетФактура(ТабличныйДокумент, ДанныеДляПечати, Ссылка, Номер, Дата);
	
 КонецПроцедуры
 
////////////////////////////////////////////////////////////////////////////////////////
// УПД

&НаСервере
 Процедура Печать_УПД(ТабличныйДокумент, Ссылка, Номер = "", Дата = Неопределено) Экспорт
	 
	Основание = "Заказ";
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.РеализацияТоваров") Тогда
		ДанныеДляПечати = Документы.РеализацияТоваров.ПолучитьДанныеДляУПД(Ссылка);
	ИначеЕсли	
		ТипЗнч(Ссылка) = Тип("БизнесПроцессСсылка.СборкаЗаказа") Тогда
		ДанныеДляПечати = Документы.РеализацияТоваров.ПолучитьДанныеДляУПД(Ссылка.РеализацияТоваров);
	ИначеЕсли	
		ТипЗнч(Ссылка) = Тип("ДокументСсылка.РеализацияПереданныхТоваров") Тогда
		ДанныеДляПечати = Документы.РеализацияПереданныхТоваров.ПолучитьДанныеДляУПД(Ссылка);
	Иначе
		Возврат;
    КонецЕсли;

	ПечатьНаСервере.ЗаписатьИсториюПечати(Ссылка.Заказ,Перечисления.ТипыПечатаемыхДокументов.УПД,Ссылка);
	
	ЗаполнитьТабличныйДокументУПД(ТабличныйДокумент, ДанныеДляПечати, Ссылка, Номер, Дата,,,Основание);
	
КонецПроцедуры

&НаСервере 
 Процедура ЗаполнитьТабличныйДокументУПД(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, Номер, Дата, ЭтоСчетФактураНаАванс = Ложь, ПечатьВВалюте = Ложь,Основание = "") Экспорт
	
	ВалютаРегламентированногоУчета = ОбщиеФункции.ПолучитьЗначениеКонстантыВОбласти("ВалютаУправленческогоУчета");
	
	
	//ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		
	Макет = Обработки.ПечатьОбщихФорм.ПолучитьМакет("УПД");

	ДанныеПечати      	= ДанныеДляПечати.РезультатПоШапке.Выбрать();
	//ВыборкаПоДокументам = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ТаблицаКурсовВалют  = ДанныеДляПечати.ТаблицаКурсовВалют;
	
	//ПервыйДокумент = Истина;
	Пока ДанныеПечати.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(ДанныеПечати.Номер) И Номер = "" Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для документа %1 не введен счет-фактура'"),
				ДанныеПечати.Ссылка
				);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДанныеПечати.Ссылка,
				?(ДанныеПечати.Номер = Неопределено, "ТекстСчетФактура", "ПредъявленСчетФактура")
			);
			
		ИначеЕсли ПечатьВВалюте И ДанныеПечати.Валюта = ВалютаРегламентированногоУчета Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для документа %1 не требуется печатать счет-фактуру в валюте'"),
				ДанныеПечати.Ссылка
				);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДанныеПечати.Ссылка
			);
			
		Иначе
	
			//Если Не ПервыйДокумент Тогда
			//	ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			//КонецЕсли;
			
			//ПервыйДокумент = Ложь;
			НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
			
			// Выводим общие реквизиты шапки
			СведенияОбОрганизации = Новый Структура;
			ЗаполнитьРеквизитыШапкиУПД(ДанныеПечати, СведенияОбОрганизации, Макет, ТабличныйДокумент, Номер, Дата, ПечатьВВалюте, ЭтоСчетФактураНаАванс);
			//ЗаголовокТаблицы.Параметры.Валюта = ?(ПечатьВВалюте, ДанныеПечати.Валюта, ВалютаРегламентированногоУчета);
			
			// Выводим заголовок таблицы
			ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
			ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
			
			НомерСтраницы   = 1;
			
			// Инициализация итогов в документе
			ИтоговыеСуммы = СтруктураИтоговыеСуммыУПД();
			
			Если ПечатьВВалюте Тогда
				КоэффициентПересчета = 1;
			Иначе
				КоэффициентПересчета = КоэффициентПересчетаВалюты(ДанныеПечати, ТаблицаКурсовВалют, ВалютаРегламентированногоУчета, Дата);
			КонецЕсли;
			ДанныеСтроки = СтруктураДанныеСтрокиУПД(КоэффициентПересчета);
			
			// Создаем массив для проверки вывода
			МассивВыводимыхОбластей = Новый Массив;
			
			// Выводим многострочную часть документа
			ОбластьМакета  = Макет.ПолучитьОбласть("Строка");
			ОбластьИтого = Макет.ПолучитьОбласть("Итого");
			ОбластьПодвала = Макет.ПолучитьОбласть("Подвал");
			///Антон
			ОбластьНумерацияЛистов = Макет.ПолучитьОбласть("НумерацияЛистов");
			ОбластьПодвалНакладной = Макет.ПолучитьОбласть("ПодвалНакладной");
			///Антон
			
			//Не уверен я что это нужно
			//ОбластьПодвалаНакладной = Макет.ПолучитьОбласть("ПодвалНакладной");
			//Конец неуверенности
			
			//СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
			//ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска);
			//ВыборкаПоДокументам.Следующий();
			
			ТаблицаТовары = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выгрузить();
			
			//Документы.РеализацияТоваров.УдалитьЛишниеКопейкиВТабличнойЧасти(ДанныеПечати.Ссылка, ТаблицаТовары); 
			
			Если НЕ ДанныеПечати.ЕстьУслуги ИЛИ ДанныеПечати.ТолькоУслуги Тогда
				КоличествоСтрок = ТаблицаТовары.Количество();
				НомерСтрокиПравильный = 0;
				Для Каждого СтрокаТовары Из ТаблицаТовары Цикл
				
					ДанныеСтроки.Номер = ДанныеСтроки.Номер + 1;
					
					МассивВыводимыхОбластей.Очистить();
					МассивВыводимыхОбластей.Добавить(ОбластьМакета);
					
					Если ДанныеСтроки.Номер = КоличествоСтрок Тогда
						МассивВыводимыхОбластей.Добавить(ОбластьИтого);
						МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
						МассивВыводимыхОбластей.Добавить(ОбластьПодвалНакладной);
						///
						//МассивВыводимыхОбластей.Добавить(Область
					КонецЕсли;
					
					Если НЕ ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
						НомерСтраницы = НомерСтраницы + 1;
						ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
						///
						ОбластьНумерацияЛистов.Параметры.Номер = "Универсальный передаточный документ № "+ФормированиеПечатныхФорм.ПолучитьНомерНаПечать(ДанныеПечати.Номер, Истина, ДанныеПечати.Дата)+" от "+Формат(ДанныеПечати.Дата, "ДФ='дд ММММ гггг'")+" г.";
						ОбластьНумерацияЛистов.Параметры.НомерЛиста = НомерСтраницы;
						ТабличныйДокумент.Вывести(ОбластьНумерацияЛистов);
						///
						ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
					КонецЕсли;
					
					ЗаполнитьРеквизитыСтрокиТовараУПД(ДанныеПечати, СтрокаТовары, ДанныеСтроки, ОбластьМакета);
					
					Если НЕ ЭтоСчетФактураНаАванс Тогда
						ЗаполнитьРеквизитыСтрокиТовараГТД(СтрокаТовары, ОбластьМакета);
					КонецЕсли;
					
					Если ЭтоСчетФактураНаАванс Тогда
						ОбластьМакета.Параметры.Акциз = "";
						ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "";
					Иначе
						ОбластьМакета.Параметры.Акциз = "без акциза";
					КонецЕсли;
					
					Если ЭтоСчетФактураНаАванс Тогда
						// В счетах-фактурах на аванс колонки 3,4,5 не выводятся
						ОбластьМакета.Параметры.Заполнить(Новый Структура("Количество,Цена,СуммаБезНДС",0,0,0));
					КонецЕсли;
					НомерСтрокиПравильный = НомерСтрокиПравильный + 1;
					ОбластьМакета.Параметры.НомерСтроки = НомерСтрокиПравильный;
					ПроставитьПрочеркиВПустыеПоляСтрокиСчетФактура(ОбластьМакета);
					
					ТабличныйДокумент.Вывести(ОбластьМакета);
					РассчитатьИтоговыеСуммы(ИтоговыеСуммы, ДанныеСтроки);
					
				КонецЦикла;
			Иначе
				КоличествоСтрок = 1;
				УслугаСтроки = ТаблицаТовары.НайтиСтроки(Новый Структура("ЭтоУслуга", Истина));
				Если УслугаСтроки.Количество() Тогда
					
					СтрокаНаименованиеТоваров = "";	
					Для Каждого СтрокаТовары Из ТаблицаТовары Цикл
						
						Если НЕ СтрокаТовары.ЭтоУслуга Тогда
						
							СтрокаНаименованиеТоваров = СтрокаНаименованиеТоваров + ?(ПустаяСтрока(СтрокаНаименованиеТоваров), "", ", ") +
										ФормированиеПечатныхФорм.ПолучитьПредставлениеНоменклатурыДляПечати(СтрокаТовары.ТоварНаименование) + 
										?(СтрокаТовары.ЭтоВозвратнаяТара, НСтр("ru=' (возвратная тара)'"), "");					
							
									КонецЕсли;
						ЗаполнитьРеквизитыСтрокиТовараУПД(ДанныеПечати, СтрокаТовары, ДанныеСтроки, ОбластьМакета);
                       	РассчитатьИтоговыеСуммыУПД(ИтоговыеСуммы, ДанныеСтроки);
					КонецЦикла;
					
					УслугаНаименование = УслугаСтроки[0].ТоварНаименование + " по заказ-наряду № " + ДанныеПечати.НомерЗаказа +" от " +  Формат(ДанныеПечати.ДатаЗаказа, "ДЛФ=D") + " в т.ч.:"; 
					ТоварНаименование = УслугаНаименование + Символы.ПС + СтрокаНаименованиеТоваров; 
					КоличествоНормоЧас = УслугаСтроки[0].Количество; 
					
					ЗаполнитьРеквизитыСтрокиТовараУПД(ДанныеПечати, УслугаСтроки[0], ДанныеСтроки, ОбластьМакета);
					
					ОбластьМакета.Параметры.Заполнить(Новый Структура("СуммаСНДС, СуммаНДС, СуммаБезНДС, ТоварНаименование", 
										ИтоговыеСуммы.ИтогоСуммаСНДС, ИтоговыеСуммы.ИтогоНДС, ИтоговыеСуммы.ИтогоСумма,  ТоварНаименование));
										
					ОбластьМакета.Параметры.Цена = 	ИтоговыеСуммы.ИтогоСумма / КоличествоНормоЧас;					 
					ОбластьМакета.Параметры.Акциз = "без акциза";
		
					ПроставитьПрочеркиВПустыеПоляСтрокиСчетФактура(ОбластьМакета);
				
					МассивВыводимыхОбластей.Очистить();
					МассивВыводимыхОбластей.Добавить(ОбластьМакета);
					МассивВыводимыхОбластей.Добавить(ОбластьИтого);
					МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
					//
					//МассивВыводимыхОбластей.Добавить(ОбластьПодвалаНакладной);
					//
				
					Если НЕ ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
						НомерСтраницы = НомерСтраницы + 1;
						ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
						///
						ОбластьНумерацияЛистов.Параметры.Номер = "Универсальный передаточный документ № "+ФормированиеПечатныхФорм.ПолучитьНомерНаПечать(ДанныеПечати.Номер, Истина, ДанныеПечати.Дата)+" от "+Формат(ДанныеПечати.Дата, "ДФ='дд ММММ гггг'")+" г.";
						ОбластьНумерацияЛистов.Параметры.НомерЛиста = НомерСтраницы;
						ТабличныйДокумент.Вывести(ОбластьНумерацияЛистов);
						///
						ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
					КонецЕсли;
						
					ТабличныйДокумент.Вывести(ОбластьМакета);

				КонецЕсли;
				
			КонецЕсли;
			// Выводим итоги по документу
			ДобавитьИтоговыеДанныеПодвалаУПД(ИтоговыеСуммы, ДанныеСтроки.Номер, ВалютаРегламентированногоУчета);
			ЗаполнитьРеквизитыПодвалаУПД(ДанныеПечати, СведенияОбОрганизации, ИтоговыеСуммы, Макет, ТабличныйДокумент, ЭтоСчетФактураНаАванс);
			
			ЗаполнитьРеквизитыПодвалаНакладнойУПД(ДанныеПечати, СведенияОбОрганизации, ИтоговыеСуммы, Макет, ТабличныйДокумент, Основание)
			//ЗаполнитьИВывестиПодвалНакладной()
			//УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
			
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры // ЗаполнитьТабличныйДокументСчетФактура()

Процедура ЗаполнитьРеквизитыШапкиУПД(ДанныеПечати, СведенияОПоставщике, Макет, ТабличныйДокумент, Номер, Дата, ПечатьВВалюте, ЭтоСчетФактураНаАванс)
		
	НомераДаты = Новый Структура;
	НомераДаты.Вставить("Номер", ФормированиеПечатныхФорм.ПолучитьНомерНаПечать(ДанныеПечати.Номер, Истина, ДанныеПечати.Дата));
	
	УчетПоОП = ЗначениеЗаполнено(ДанныеПечати.Дата) И ДанныеПечати.Дата >= КэшируемыеФункции.НачалоВеденияСФПоОбособленнымПодразделениям();
	
	//НомераДаты.Вставить("НомерПодразделения", ?(УчетПоОП И ДанныеПечати.НомерПодразделения <> 0, "/" + Строка(ДанныеПечати.НомерПодразделения), ""));
	
	НомераДаты.Вставить("НомерПодразделения", ?(УчетПоОП И ДанныеПечати.Ссылка.Склад.НомерПодразделения <> 0, "/" + Строка(ДанныеПечати.Ссылка.Склад.НомерПодразделения), ""));
		
	НомераДаты.Вставить("Дата", Формат(ДанныеПечати.Дата, "ДФ='дд ММММ гггг'")+ " г.");
	
	НомераДаты.Вставить("НомерИсправления","--");
	НомераДаты.Вставить("ДатаИсправления", "--");
	
	СведенияОПоставщике = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, Дата);
	СведенияОПокупателе = ?(ЗначениеЗаполнено(ДанныеПечати.Плательщик),ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Плательщик, Дата),ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент, Дата));
	СведенияОГрузоотправителе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Грузоотправитель, Дата);
	СведенияОГрузополучателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Грузополучатель,  Дата);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	
	ОбластьМакета.Параметры.Заполнить(ДанныеПечати); 
	ОбластьМакета.Параметры.Заполнить(НомераДаты);
	////
	Если ДанныеПечати.Организация.УчитыватьНДС Тогда
		ОбластьМакета.Параметры.СтатусУПД = "1";
	Иначе
		ОбластьМакета.Параметры.СтатусУПД = "2";
	КонецЕсли;
	//ОбластьМакета.Параметры.Номер = "Счет-фактура № " + ФормированиеПечатныхФорм.ПолучитьНомерНаПечать(Номер)
	//	+ " от " + Формат(Дата, "ДФ='дд ММММ гггг'")+ " г.";
	
	// Выводим данные о поставщике.
	ПредставлениеПоставщика = СведенияОПоставщике.ОфициальноеНаименование;	
	
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;
	ОбластьМакета.Параметры.АдресПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес");

	Если НЕ ЗначениеЗаполнено(ДанныеПечати.Грузоотправитель) Тогда
		Если НЕ ЗначениеЗаполнено(ДанныеПечати.Ссылка.Склад.ГрузоотправительСклада) Тогда
			КПП =  ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "КПП,", Ложь);  
		Иначе
			СведенияОГрузоотправителеСклада = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Ссылка.Склад.ГрузоотправительСклада,  Дата);
			КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправителеСклада, "КПП,", Ложь);  
		КонецЕсли;
	Иначе
		КПП =  ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправителе, "КПП,", Ложь); 
	КонецЕсли;
	//Если НЕ ПустаяСтрока(КПП) И ДанныеПечати.ЕстьУслуги Тогда
	//	КПП = ДанныеПечати.Склад.КПП;
	//КонецЕсли;
	
	ОбластьМакета.Параметры.ИННПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ИНН", Ложь)
		+ ?(Не ПустаяСтрока(КПП), "/" + КПП, "");
		
	// Выводим данные грузоотправителя.	
	ПредставлениеГрузоотправителя = "";
	
	Если ДанныеПечати.ТолькоУслуги ИЛИ ДанныеПечати.ЕстьУслуги ИЛИ ЭтоСчетФактураНаАванс Тогда
		ПредставлениеГрузоотправителя = ПредставлениеГрузоотправителя + "--";
	// по новым требованиям надпись "он же" никогда не пишем	
	//ИначеЕсли ДанныеПечати.Организация = ДанныеПечати.Грузоотправитель Тогда
	//	ПредставлениеГрузоотправителя = ПредставлениеГрузоотправителя + "он же";
	Иначе
		ПредставлениеГрузоотправителя = ПредставлениеГрузоотправителя 
			+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправителе, "ПолноеНаименование,ФактическийАдрес");
	КонецЕсли;
	ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = ПредставлениеГрузоотправителя;
		
	// Выводим данные грузополучателя и покупателя.
	ПредставлениеГрузополучателя = "";
	Если ДанныеПечати.ТолькоУслуги ИЛИ ДанныеПечати.ЕстьУслуги ИЛИ ЭтоСчетФактураНаАванс Тогда
		ПредставлениеГрузополучателя = ПредставлениеГрузополучателя + "--";
	Иначе
		Если Не ПустаяСтрока(ДанныеПечати.АдресДоставки) Тогда
			ПредставлениеГрузополучателя = ПредставлениеГрузополучателя
				+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "ПолноеНаименование", Ложь)
				+ ", " + СокрЛП(ДанныеПечати.АдресДоставки)
			;
		Иначе
			ПредставлениеГрузополучателя = ПредставлениеГрузополучателя
				+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "ПолноеНаименование,ФактическийАдрес", Ложь);
				 
		КонецЕсли;
	КонецЕсли;
	ОбластьМакета.Параметры.ПредставлениеГрузополучателя = ПредставлениеГрузополучателя;
	
	ПоДокументу = "";
	ЕстьОплата	= Ложь;
	//ОбластьМакета.Параметры.ПоДокументу = ОбластьМакета.Параметры.ПоДокументу + ФормированиеПечатныхФорм.ПолучитьНомерНаПечать(ДанныеПечати.ПоДокументуНомер ) + " от " + Формат(ДанныеПечати.ПоДокументуДата, "ДФ='дд ММММ гггг'")+ " г.";
	
	
	Попытка
		РасчетныеДокументы = ДанныеПечати.РасчетныеДокументы.Выгрузить();
		ЕстьРасчетныеДокументы = РасчетныеДокументы.Количество();
	Исключение
		ЕстьРасчетныеДокументы = Ложь;
	КонецПопытки;
	
	Если ЕстьРасчетныеДокументы Тогда
		Для Каждого Строка ИЗ РасчетныеДокументы Цикл
			Если ЗначениеЗаполнено(Строка.Номер) Тогда ЕстьОплата = Истина;
					ПоДокументу = ПоДокументу+ " " +  
					ФормированиеПечатныхФорм.ПолучитьНомерНаПечать(Строка.Номер) + " от " +
					Формат(Строка.Дата, "ДФ='дд ММММ гггг'")+ " г." + ",";					
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЕстьОплата	Тогда
		ОбластьМакета.Параметры.ПоДокументу = Лев(ПоДокументу, СтрДлина(ПоДокументу)-1);
	Иначе
		ОбластьМакета.Параметры.ПоДокументу = ПоДокументу + "-- от --";
	КонецЕсли;
	
	ОбластьМакета.Параметры.ПредставлениеПокупателя = "" 
		+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование", Ложь);
	ОбластьМакета.Параметры.АдресПокупателя = ""
		+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес", Ложь);
		
		
	Если ДанныеПечати.ТолькоУслуги ИЛИ ДанныеПечати.ЕстьУслуги ИЛИ ЭтоСчетФактураНаАванс или ЗначениеЗаполнено(ДанныеПечати.Плательщик) Тогда 
		КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "КПП,", Ложь);
	Иначе
		КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "КПП,", Ложь);
	КонецЕсли;
	
			
	ОбластьМакета.Параметры.ИННПокупателя = ""
		+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ИНН,", Ложь)
		+ ?(Не ПустаяСтрока(КПП), "/" + КПП, "");  
	
	Если ЗначениеЗаполнено(ДанныеПечати.Валюта) Тогда //И ПечатьВВалюте Тогда
		ОбластьМакета.Параметры.Валюта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1, %2'"),
			СокрЛП(ДанныеПечати.ВалютаНаименованиеПолное),
			ДанныеПечати.ВалютаКод
		);
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
		
КонецПроцедуры // ЗаполнитьРеквизитыШапкиСчетФактура()

Функция СтруктураИтоговыеСуммыУПД()
	
	Структура = Новый Структура;
	
	// Инициализация итогов по странице.
	Структура.Вставить("ИтогоМассаБруттоНаСтранице", 0);
	Структура.Вставить("ИтогоМестНаСтранице", 0);
	Структура.Вставить("ИтогоКоличествоНаСтранице", 0);
	Структура.Вставить("ИтогоСуммаНаСтранице", 0);
	Структура.Вставить("ИтогоНДСНаСтранице", 0);
	Структура.Вставить("ИтогоСуммаСНДСНаСтранице", 0);
	Структура.Вставить("ИтогоМассаБруттоНаСтранице", 0);
	Структура.Вставить("ИтогоМассаНеттоНаСтранице", 0);
	
	// Инициализация итогов по документу.
	Структура.Вставить("ИтогоМассаБрутто", 0);
	Структура.Вставить("ИтогоМест", 0);
	Структура.Вставить("ИтогоКоличество", 0);
	Структура.Вставить("ИтогоСуммаСНДС", 0);
	Структура.Вставить("ИтогоСумма", 0);
	Структура.Вставить("ИтогоНДС", 0);
	Структура.Вставить("ИтогоМассаБрутто", 0);
	Структура.Вставить("ИтогоМассаНетто", 0);
    	
	Структура.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью", 0);
	Структура.Вставить("СуммаПрописью", "");
	
	Возврат Структура;
	
КонецФункции // СтруктураИтоговыеСуммы()

Функция СтруктураДанныеСтрокиУПД(КоэффициентПересчета)
	
	Структура = Новый Структура;
	Структура.Вставить("ТоварКод", 0);
	Структура.Вставить("Номер", 0);
	Структура.Вставить("Мест", 0);
	Структура.Вставить("Количество", 0);
	Структура.Вставить("Цена", 0);
	Структура.Вставить("СуммаБезНДС", 0);
	Структура.Вставить("СуммаНДС", 0);
	Структура.Вставить("СуммаСНДС", 0);
	Структура.Вставить("КоэффициентПересчета", КоэффициентПересчета);
	Структура.Вставить("МассаБрутто", 0);
	Структура.Вставить("МассаНетто", 0);
	
	Возврат Структура;
	
КонецФункции // СтруктураДанныеСтроки()

Процедура ЗаполнитьРеквизитыСтрокиТовараУПД(ДанныеПечати, СтрокаТовары, ДанныеСтроки, ОбластьМакета, ЕдиницаИзмеренияВеса = Неопределено)
	
	ОбластьМакета.Параметры.Заполнить(СтрокаТовары);
	ОбластьМакета.Параметры.ТоварНаименование = ФормированиеПечатныхФорм.ПолучитьПредставлениеНоменклатурыДляПечати(
		СтрокаТовары.ТоварНаименование)
		+ ?(СтрокаТовары.ЭтоВозвратнаяТара, НСтр("ru=' (возвратная тара)'"), "");
	
	ДанныеСтроки.Мест = СтрокаТовары.КоличествоМест;
	ДанныеСтроки.Количество  = СтрокаТовары.Количество;
	ДанныеСтроки.ТоварКод = СтрокаТовары.Номенклатура.Артикул;
	Если ЕдиницаИзмеренияВеса <> Неопределено Тогда
		Если Не ЗначениеЗаполнено(ЕдиницаИзмеренияВеса) Тогда
			ДанныеСтроки.МассаБрутто = 0;
		Иначе
			ДанныеСтроки.МассаБрутто = СтрокаТовары.МассаБрутто;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеСтроки.СуммаСНДС   = Окр((СтрокаТовары.Сумма + ?(ДанныеПечати.ЦенаВключаетНДС, 0, СтрокаТовары.СуммаНДС)) * ДанныеСтроки.КоэффициентПересчета, 2);
	ДанныеСтроки.СуммаНДС    = Окр(СтрокаТовары.СуммаНДС * ДанныеСтроки.КоэффициентПересчета, 2);
	ДанныеСтроки.СуммаБезНДС = ДанныеСтроки.СуммаСНДС - ДанныеСтроки.СуммаНДС;
	
	Если ДанныеПечати.ЦенаВключаетНДС Тогда
		ДанныеСтроки.Цена = ?(ДанныеСтроки.Количество = 0, 0, ДанныеСтроки.СуммаБезНДС / ДанныеСтроки.Количество);
	Иначе
		ДанныеСтроки.Цена = СтрокаТовары.Цена * ДанныеСтроки.КоэффициентПересчета;
	КонецЕсли;
	
	ОбластьМакета.Параметры.Заполнить(ДанныеСтроки);
КонецПроцедуры // ЗаполнитьРеквизитыСтрокиТовара()

Процедура РассчитатьИтоговыеСуммыУПД(ИтоговыеСуммы, ДанныеСтроки)
	
	// Увеличим итоги по странице.
	ИтоговыеСуммы.ИтогоМестНаСтранице        = ИтоговыеСуммы.ИтогоМестНаСтранице        + ДанныеСтроки.Мест;
	ИтоговыеСуммы.ИтогоКоличествоНаСтранице  = ИтоговыеСуммы.ИтогоКоличествоНаСтранице  + ДанныеСтроки.Количество;
	ИтоговыеСуммы.ИтогоСуммаНаСтранице       = ИтоговыеСуммы.ИтогоСуммаНаСтранице       + ДанныеСтроки.СуммаБезНДС;
	ИтоговыеСуммы.ИтогоНДСНаСтранице         = ИтоговыеСуммы.ИтогоНДСНаСтранице         + ДанныеСтроки.СуммаНДС;
	ИтоговыеСуммы.ИтогоСуммаСНДСНаСтранице   = ИтоговыеСуммы.ИтогоСуммаСНДСНаСтранице   + ДанныеСтроки.СуммаСНДС;
	ИтоговыеСуммы.ИтогоМассаБруттоНаСтранице = ИтоговыеСуммы.ИтогоМассаБруттоНаСтранице + ДанныеСтроки.МассаБрутто;
	ИтоговыеСуммы.ИтогоМассаНеттоНаСтранице  = ИтоговыеСуммы.ИтогоМассаНеттоНаСтранице  + ДанныеСтроки.МассаНетто;
	
	// Увеличим итоги по документу.
	ИтоговыеСуммы.ИтогоМест        = ИтоговыеСуммы.ИтогоМест        + ДанныеСтроки.Мест;
	ИтоговыеСуммы.ИтогоКоличество  = ИтоговыеСуммы.ИтогоКоличество  + ДанныеСтроки.Количество;
	ИтоговыеСуммы.ИтогоСумма       = ИтоговыеСуммы.ИтогоСумма       + ДанныеСтроки.СуммаБезНДС;
	ИтоговыеСуммы.ИтогоНДС         = ИтоговыеСуммы.ИтогоНДС         + ДанныеСтроки.СуммаНДС;
	ИтоговыеСуммы.ИтогоСуммаСНДС   = ИтоговыеСуммы.ИтогоСуммаСНДС   + ДанныеСтроки.СуммаСНДС;
	ИтоговыеСуммы.ИтогоМассаБрутто = ИтоговыеСуммы.ИтогоМассаБрутто + ДанныеСтроки.МассаБрутто;
	ИтоговыеСуммы.ИтогоМассаНетто  = ИтоговыеСуммы.ИтогоМассаНетто  + ДанныеСтроки.МассаНетто;
	
КонецПроцедуры // РассчитатьИтоговыеСуммы()

Процедура ДобавитьИтоговыеДанныеПодвалаУПД(ИтоговыеСуммы, ВсегоНомеров, ВалютаРегламентированногоУчета)
	
	ИтоговыеСуммы.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью", ЧислоПрописью(ВсегоНомеров, ,",,,,,,,,0"));
	ИтоговыеСуммы.Вставить("СуммаПрописью", РаботаСКурсамиВалют.СформироватьСуммуПрописью(ИтоговыеСуммы.ИтогоСуммаСНДС, ВалютаРегламентированногоУчета));
	
КонецПроцедуры // ДобавитьИтоговыеДанныеПодвала()

Процедура ЗаполнитьРеквизитыПодвалаУПД(ДанныеПечати, СведенияОбОрганизации, ИтоговыеСуммы, Макет, ТабличныйДокумент, ЭтоСчетФактураНаАванс)
	
	ОбластьИтого = Макет.ПолучитьОбласть("Итого");
    ОбластьИтого.Параметры.ИтогоВсего = ИтоговыеСуммы.ИтогоСуммаСНДС;
	ОбластьИтого.Параметры.ИтогоКоличество = ИтоговыеСуммы.ИтогоКоличество;
	Если НЕ ЭтоСчетФактураНаАванс Тогда
		
		ОбластьИтого.Параметры.ИтогоСтоимость = ИтоговыеСуммы.ИтогоСумма;
		ОбластьИтого.Параметры.ИтогоСуммаНДС = ?(
			ИтоговыеСуммы.ИтогоНДС > 0, 
			ИтоговыеСуммы.ИтогоНДС, 
			НСтр("ru='без НДС'")
		);
		
	КонецЕсли;
		
	ТабличныйДокумент.Вывести(ОбластьИтого);
	
	ОбластьПодвала = Макет.ПолучитьОбласть("Подвал");
	
	Если СведенияОбОрганизации.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		ОбластьПодвала.Параметры.ФИОРуководителя = ФормированиеПечатныхФорм.ФамилияИнициалыФизЛица(ДанныеПечати.Руководитель);
		ОбластьПодвала.Параметры.ФИОГлавногоБухгалтера = ФормированиеПечатныхФорм.ФамилияИнициалыФизЛица(ДанныеПечати.ГлавныйБухгалтер);
	Иначе
		ОбластьПодвала.Параметры.ФИОПБОЮЛ = ФормированиеПечатныхФорм.ФамилияИнициалыФизЛица(ДанныеПечати.Руководитель);
		ОбластьПодвала.Параметры.Свидетельство = СведенияОбОрганизации.Свидетельство;
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьПодвала);
		
КонецПроцедуры // ЗаполнитьРеквизитыПодвалаСчетФактура()

Процедура ЗаполнитьРеквизитыПодвалаНакладнойУПД(ДанныеПечати, СведенияОбОрганизации, ИтоговыеСуммы, Макет, ТабличныйДокумент, Основание)
	ОбластьПодвалаНакладной = Макет.ПолучитьОбласть("ПодвалНакладной");
	ОбластьПодвалаНакладной.Параметры.ДатаОтгрузкиПередачи = Формат(ДанныеПечати.Дата, "ДФ='дд ММММ гггг'")+ " г.";
	ОбластьПодвалаНакладной.Параметры.ФИОКладовщика = ФормированиеПечатныхФорм.ФамилияИнициалыФизЛица(ДанныеПечати.Руководитель);
	ОбластьПодвалаНакладной.Параметры.ДолжностьКладовщика = ДанныеПечати.ДолжностьРуководителя;
	ОбластьПодвалаНакладной.Параметры.ДолжностьОТВ = ДанныеПечати.ДолжностьРуководителя;
	ОбластьПодвалаНакладной.Параметры.ФИООтв = ФормированиеПечатныхФорм.ФамилияИнициалыФизЛица(ДанныеПечати.Руководитель);
	ОбластьПодвалаНакладной.Параметры.Основание = ПолучитьОснованиеДокумента(ДанныеПечати, Основание);
	
	СведенияОПоставщике = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата);
	СведенияОПокупателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент, ДанныеПечати.Дата);
	ОфНаименованиеПС = ?(ЗначениеЗаполнено(СведенияОПоставщике.ОфициальноеНаименование), СведенияОПоставщике.ОфициальноеНаименование, СведенияОПоставщике.ПолноеНаименование);
	ОфНаименованиеКР = ?(ЗначениеЗаполнено(СведенияОПокупателе.ОфициальноеНаименование), СведенияОПокупателе.ОфициальноеНаименование, СведенияОПокупателе.ПолноеНаименование);
	ОбластьПодвалаНакладной.Параметры.ПредставлениеОрганизации = Строка(ОфНаименованиеПС) + ", ИНН/КПП: " + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ИНН,", Ложь) +"/"+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "КПП,", Ложь);
	ОбластьПодвалаНакладной.Параметры.ПредставлениеКонтрагента = Строка(ОфНаименованиеКР) + ", ИНН/КПП: " + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ИНН", Ложь) +"/"+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "КПП", Ложь);
	ТабличныйДокумент.Вывести(ОбластьПодвалаНакладной);
КонецПроцедуры

Функция ПолучитьСписокПовторногоВвода(КлючПовторногоВвода) Экспорт
	
	Список = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.ПечатьОбщихФорм.Форма.Форма", КлючПовторногоВвода);
	Возврат ?(Список = Неопределено, Новый СписокЗначений, Список);
	
КонецФункции

Процедура СохранитьЭлементПовторногоВвода(КлючПовторногоВвода, Значение) Экспорт
	
	СохранятьНеБолее = 10;
	
	Список = ПолучитьСписокПовторногоВвода(КлючПовторногоВвода);
	Элемент = Список.НайтиПоЗначению(Значение);
	Если Элемент <> Неопределено Тогда 
		Список.Удалить(Элемент) КонецЕсли;
	
	Список.Вставить(0, Значение);
	Пока Список.Количество() > СохранятьНеБолее Цикл Список.Удалить(СохранятьНеБолее) КонецЦикла;
	
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.ПечатьОбщихФорм.Форма.Форма", КлючПовторногоВвода, Список);
	
КонецПроцедуры

//Конец УПД
 
 
 //ЦЕННИКИ И ЭТИКЕТКИ
 
 //Процедура Печать_Ценники(ТабличныйДокумент, Ссылка) Экспорт
 //	
 //	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Номенклатура") Тогда
 //   	 ДанныеДляПечати = Справочники.Номенклатура.ПолучитьДанныеДляПечатиЦенники(Ссылка);
 //	ИначеЕсли
 //   	 ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда
 //   	 ДанныеДляПечати = Документы.ПоступлениеТоваров.ПолучитьДанныеДляПечатиЦенники(Ссылка);
 //   КонецЕсли;
 //   
 //   ЗаполнитьТабличныйДокументЦенники(ТабличныйДокумент, ДанныеДляПечати, Ссылка)
 //   
 //КонецПроцедуры
 
 
 
 
 