&НаКлиенте
Перем БылоРедактированиеКИ;
&НаКлиенте
Перем ТекущийКонтрагент;

////////////////////////////////
// HTML

&НаСервере
Процедура ПолучитьШапку(Текст)
	
	Текст = Текст + "
		|<!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Strict//EN"" ""http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"">
		|<html xmlns=""http://www.w3.org/1999/xhtml"" xml:lang=""ru"">
		|
		|<head>
		|	<meta http-equiv=""Content-Type"" content=""text/html"" />
		|</head>
		|
		|<body>"
	
КонецПроцедуры
&НаСервере
Процедура ПолучитьШапкуОсновнойТаблицы(Текст)
	
	Текст = Текст + "
	 		|<table width=""100%"" border=""0"" cellspacing=""0"" cellpadding=""0"">
			|	<tr>
			|		<td align=""center"" valign=""top"">
			|";

КонецПроцедуры	
	
&НаСервере
Процедура ПолучитьПодвалОсновнойТаблицы(Текст)
	
	Текст = Текст + "
		|		</td>
		|	</tr>
		|</table>";
	
КонецПроцедуры
&НаСервере
Процедура ПолучитьПодвал(Текст)
	
	Текст = Текст + "
		|</body>
		|
		|</html>
		|";
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьРазделитель(Текст, Заголовок)
	
	Текст = Текст + "
	|<table width=""95%"" cellspacing=""0"" cellpadding=""0"" border=""0"" style=""margin:20px 0 0"">
	|	<thead>
    |			<tr>
    |		        <th style=""padding:5px 5px; background-color:#fff; text-align:center;color:#000000;font-weight:400;line-height:20px;font-family: Verdana,Geneva,sans-serif;font-size:14px;border-bottom:1px solid #bbbbbb;"">" + Заголовок + "</th>
    |           </tr>
    |	</thead>
    |			<tr>
	|				<td align=""center"" valign=""top"">";
	
	
КонецПроцедуры
&НаСервере
Процедура ПолучитьПодвалДополнительнойТаблицы(Текст)
	
	Текст = Текст + "
		|		</td>
		|	</tr>
		|</table>";
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьКарточку(Ссылка)
	
	Текст = "";

	ПолучитьШапку(Текст);
    ПолучитьШапкуОсновнойТаблицы(Текст);

	УправлениеКонтактнойИнформацией.СформироватьКарточкуКонтактаHTML(Текст, Ссылка, "Контрагенты", Новый Структура ("СправочникВложение, РеквизитСвязи, ДопРеквизитВложения",
														"КонтактныеЛица", "Владелец", "Должность"), "Родитель", "НаименованиеПолное", "Комментарий", , Ложь);
	
	СписокКонтрагентов = ПолучитьСписокКонтрагентов(Ссылка);
	
	Если СписокКонтрагентов.Количество() Тогда
		ПолучитьРазделитель(Текст, "Контрагенты");
	КонецЕсли;
	
	Для Каждого Строка Из СписокКонтрагентов Цикл 
		УправлениеКонтактнойИнформацией.СформироватьКарточкуКонтактаHTML(Текст, Строка.Значение, "Контрагенты", 
											Новый Структура ("СправочникВложение, РеквизитСвязи, ДопРеквизитВложения",
														"ФизическиеЛица", "ФизЛицо", "ДатаРождения"),,, "Комментарий", Новый Структура("ЮрФизЛицо, ИНН, КПП, КодПоОКПО"), Ложь);		
	КонецЦикла;
	
	Если СписокКонтрагентов.Количество() Тогда
		ПолучитьПодвалДополнительнойТаблицы(Текст);
	КонецЕсли;
	
	ПолучитьПодвалОсновнойТаблицы(Текст);
	ПолучитьПодвал(Текст);
	
	Возврат Текст;
	
КонецФункции

////////////////////////////////////////
// УПРАВЛЕНИЕ

&НаКлиенте
Процедура ПартнерыПриАктивизацииСтроки(Элемент)
	
	ТекКонтрагент = Элементы.Контрагенты.ТекущаяСтрока;
	
	Если ТекКонтрагент <> Неопределено Тогда
		ВывестиДанныеДляКонтрагента(ТекКонтрагент, БылоРедактированиеКИ, ТекущийКонтрагент);
		БылоРедактированиеКИ = Ложь;
		ТекущийКонтрагент = ТекКонтрагент;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВывестиДанныеДляКонтрагента(Ссылка, СохранитьКИ, ТекущийКонтрагент)
	
	Если СохранитьКИ И ТекущийКонтрагент <> Неопределено Тогда
		ЗаписатьНаСервере(ТекущийКонтрагент);
	КонецЕсли;
	          
	Если Ссылка.ЭтоГруппа Тогда
			
		КарточкаКонтрагента = "<html></html>";
		Если КонтактнаяИнформация.Количество() Тогда
			КонтактнаяИнформация.Очистить();
		КонецЕсли;
	Иначе
		КарточкаКонтрагента = ЗаполнитьКарточку(Ссылка);
		ОбновитьКонтактнуюИнформацию(Ссылка);
		ДолгПарнера = ПолучитьДолгКонтрагента(Ссылка);
	КонецЕсли;
		
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокКонтрагентов(Ссылка)
	
	Список = Новый СписокЗначений;	
	
	Запрос = Новый Запрос("ВЫБРАТЬ Ссылка ИЗ Справочник.Контрагенты ГДЕ Ссылка = &Контрагент И НЕ ПометкаУдаления");
	Запрос.УстановитьПараметр("Контрагент", Ссылка);
	
	Рез = Запрос.Выполнить();
	
	Если НЕ Рез.Пустой() Тогда
		
		Выборка = Рез.Выбрать();
		Пока Выборка.Следующий() Цикл
			Список.Добавить(Выборка.Ссылка, Выборка.Ссылка);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Список;
	
КонецФункции
&НаСервереБезКонтекста
Функция ПолучитьСписокКонтактныхЛиц(Ссылка, Список = Неопределено)
	
	Если Список = Неопределено Тогда
		Список = Новый СписокЗначений;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ Ссылка ИЗ Справочник.КонтактныеЛица ГДЕ Владелец = &Контрагент И НЕ ПометкаУдаления");
	Запрос.УстановитьПараметр("Контрагент", Ссылка);
	
	Рез = Запрос.Выполнить();
	
	Если НЕ Рез.Пустой() Тогда
		
		Выборка = Рез.Выбрать();
		Пока Выборка.Следующий() Цикл
			Список.Добавить(Выборка.Ссылка);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Список;
	
КонецФункции

////////////////////////////////////////////////////
// ВЗАИМОРАСЧЕТЫ

&НаСервереБезКонтекста
Функция ПолучитьДолгКонтрагента(Ссылка)
	
	Запрос = Новый Запрос("ВЫБРАТЬ СуммаУпрОстаток СуммаДолга ИЗ РегистрНакопления.Взаиморасчеты.Остатки(, Контрагент = &Ссылка)");

	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СуммаДолга;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции
&НаКлиенте
Процедура ДолгПарнераНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекКонтрагент = Элементы.Контрагенты.ТекущаяСтрока;
	
	ОткрытьФорму("ОбщаяФорма.НастроенныйОтчет",
					Новый Структура("ИмяОтчета, ИмяМакета, Отборы, ЗаголовокОкна",
						"ВзаиморасчетыСПартнером",
						"ОсновнаяСхемаКомпоновкиДанных",
						Новый Структура("Контрагент", ТекКонтрагент),
						"Взаиморасчеты с Контрагентом """ + ТекКонтрагент + """"),
					ЭтаФорма);
	
КонецПроцедуры

///////////////////////////////////////////////////////
// ОБЪЕДИНЕНИЕ КонтрагентОВ

&НаСервере
Функция НайтиСсылки(НаборКонтрагентов, ОсновнойКонтрагент)
	
	ТЗ = НайтиПоСсылкам(НаборКонтрагентов);
	
	НайденныеСсылки.Очистить();
	
	Для Каждого Строка Из ТЗ  Цикл
		НоваяСтрока = НайденныеСсылки.Добавить();	
		//НоваяСтрока.Включено	= Истина;
		НоваяСтрока.Данные    	= Строка.Данные;
		НоваяСтрока.Метаданные  = Строка.Метаданные.ПолноеИмя();
		НоваяСтрока.Ссылка      = Строка.Ссылка;
		НоваяСтрока.Индекс		= ТЗ.Индекс(Строка);	
	КонецЦикла;
	
	ТЗ.Колонки.Добавить("Включено", Новый ОписаниеТипов("Булево"));
	ХранилищеСистемныхНастроек.Сохранить(УИДСтр,, ТЗ);	
КонецФункции
&НаСервере
Процедура ЗаменаСсылокПодготовка(Источник, Приемник)
	ТЗ	= ХранилищеСистемныхНастроек.Загрузить(УИДСтр);
	Если ТЗ = Неопределено Тогда
		Сообщить("Таблица найденных ссылок отсутствует!!");	
	Иначе
	
		НайденныеСтроки	= НайденныеСсылки.НайтиСтроки(Новый Структура("Ссылка", Источник));
		
		Для Каждого Строка Из НайденныеСтроки  Цикл
			СтрокаТаблицы = ТЗ.Получить(Строка.Индекс);
			СтрокаТаблицы.Включено = Истина;
			СтрокаТаблицы.Метаданные = Метаданные.НайтиПоПолномуИмени(Строка.Метаданные);	
		КонецЦикла;	
		
		Заменяемые = Новый Соответствие;
		Заменяемые.Вставить(Источник, Приемник);
		
		Если ВыполнитьЗаменуЭлементов(Заменяемые, ТЗ,, Истина) Тогда
			ИсточникОбъект = Источник.ПолучитьОбъект();
		    ИсточникОбъект.УстановитьПометкуУдаления(Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыполнитьЗаменуЭлементов(Заменяемые, ТаблицаСсылок, ВыполнятьВТранзакции = Истина, ОтключатьКонтрольЗаписи = Ложь)
	
	БылиИсключения 	= Ложь;
	Если ВыполнятьВТранзакции Тогда
		НачатьТранзакцию();
	КонецЕсли;
	ОбрабатываемаяСсылка = Неопределено;
		
	Параметры = Новый Структура;
	
	Для Каждого РегистрБухгалтерии ИЗ Метаданные.РегистрыБухгалтерии Цикл
		Параметры.Вставить(РегистрБухгалтерии.Имя+"Субконто", РегистрБухгалтерии.ПланСчетов.МаксКоличествоСубконто);
		Параметры.Вставить(РегистрБухгалтерии.Имя+"Корреспонденция", РегистрБухгалтерии.Корреспонденция);		
	КонецЦикла;
	
	Параметры.Вставить("Объект", Неопределено);	
		
	Для Каждого СтрокаТаблицы Из ТаблицаСсылок Цикл
		Если Не СтрокаТаблицы.Включено Тогда
			Продолжить;
		КонецЕсли;
		
		ПравильныйЭлемент = Заменяемые[СтрокаТаблицы.Ссылка];
		Ссылка = СтрокаТаблицы.Ссылка;
		
		Если ОбрабатываемаяСсылка <> СтрокаТаблицы.Данные Тогда
			Если ОбрабатываемаяСсылка <> Неопределено и Параметры.Объект <> Неопределено Тогда
				
				Если ОтключатьКонтрольЗаписи Тогда
					Параметры.Объект.ОбменДанными.Загрузка = Истина;
				КонецЕсли;
				
				Попытка
					Параметры.Объект.Записать();
				Исключение
					БылиИсключения = Истина;
					Если ВыполнятьВТранзакции Тогда
						Перейти ~ОТКАТ;
					КонецЕсли;
				КонецПопытки;
				Параметры.Объект = Неопределено;
			КонецЕсли;
			ОбрабатываемаяСсылка = СтрокаТаблицы.Данные;
			
		КонецЕсли;
		
		Если Метаданные.Документы.Содержит(СтрокаТаблицы.Метаданные) Тогда
			
			Если Параметры.Объект = Неопределено Тогда
				Параметры.Объект = СтрокаТаблицы.Данные.ПолучитьОбъект();
			КонецЕсли;
			
			Для Каждого Реквизит Из СтрокаТаблицы.Метаданные.Реквизиты Цикл
				Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) И Параметры.Объект[Реквизит.Имя] = Ссылка Тогда
					Параметры.Объект[Реквизит.Имя] = ПравильныйЭлемент;
				КонецЕсли;
			КонецЦикла;
				
			Для Каждого ТЧ ИЗ СтрокаТаблицы.Метаданные.ТабличныеЧасти Цикл
				Для Каждого Реквизит Из ТЧ.Реквизиты Цикл
					Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
						СтрокаТабЧасти = Параметры.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
						Пока СтрокаТабЧасти <> Неопределено Цикл
							СтрокаТабЧасти[Реквизит.Имя] = ПравильныйЭлемент;
							СтрокаТабЧасти = Параметры.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			Для Каждого Движение ИЗ СтрокаТаблицы.Метаданные.Движения Цикл
				
				ЭтоДвижениеРегистраБухгалтерии = Метаданные.РегистрыБухгалтерии.Содержит(Движение);
				ЕстьКорреспонденция = ЭтоДвижениеРегистраБухгалтерии и Параметры[Движение.Имя + "Корреспонденция"];
				
				НаборЗаписей  = Параметры.Объект.Движения[Движение.Имя];
				НаборЗаписей.Прочитать();
				НадоЗаписывать = Ложь;
				ТаблицаНабора = НаборЗаписей.Выгрузить();
				Для Каждого Измерение ИЗ Движение.Измерения Цикл
					Если Измерение.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
						СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, Измерение.Имя);
						Пока СтрокаТабЧасти <> Неопределено Цикл
							СтрокаТабЧасти[Измерение.Имя] = ПравильныйЭлемент;
							НадоЗаписывать = Истина;
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, Измерение.Имя);
						КонецЦикла;
					КонецЕсли; 
				КонецЦикла;
				
				ЕСли Метаданные.РегистрыСведений.Содержит(Движение) Тогда
					Для Каждого Ресурс ИЗ Движение.Ресурсы Цикл
						Если Ресурс.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, Ресурс.Имя);
							Пока СтрокаТабЧасти <> Неопределено Цикл
								СтрокаТабЧасти[Ресурс.Имя] = ПравильныйЭлемент;
								НадоЗаписывать = Истина;
								СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, Ресурс.Имя);
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Для Каждого Реквизит ИЗ Движение.Реквизиты Цикл
					Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
						СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, Реквизит.Имя);
						Пока СтрокаТабЧасти <> Неопределено Цикл
							СтрокаТабЧасти[Реквизит.Имя] = ПравильныйЭлемент;
							НадоЗаписывать = Истина;
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, Реквизит.Имя);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				
				Если Метаданные.РегистрыБухгалтерии.Содержит(Движение) Тогда
					
					Для ИндексСубконто = 1 по Параметры[Движение.Имя + "Субконто"] Цикл
						Если ЕстьКорреспонденция Тогда
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "СубконтоДт"+ИндексСубконто);
							Пока СтрокаТабЧасти <> Неопределено Цикл
								СтрокаТабЧасти["СубконтоДт"+ИндексСубконто] = ПравильныйЭлемент;
								НадоЗаписывать = Истина;
								СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "СубконтоДт"+ИндексСубконто);
							КонецЦикла;
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "СубконтоКт"+ИндексСубконто);
							Пока СтрокаТабЧасти <> Неопределено Цикл
								СтрокаТабЧасти["СубконтоКт"+ИндексСубконто] = ПравильныйЭлемент;
								НадоЗаписывать = Истина;
								СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "СубконтоКт"+ИндексСубконто);
							КонецЦикла;								
						Иначе							
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "Субконто"+ИндексСубконто);
							Пока СтрокаТабЧасти <> Неопределено Цикл
								СтрокаТабЧасти["Субконто"+ИндексСубконто] = ПравильныйЭлемент;
								НадоЗаписывать = Истина;
								СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "Субконто"+ИндексСубконто);
							КонецЦикла;							
						КонецЕсли;						
					КонецЦикла;
					
					Если Ссылка.Метаданные() = Движение.ПланСчетов Тогда
						Для Каждого СтрокаТабЧасти Из ТаблицаНабора Цикл
							Если ЕстьКорреспонденция Тогда
								Если СтрокаТабЧасти.СчетДт = Ссылка Тогда
									СтрокаТабЧасти.СчетДт = ПравильныйЭлемент;
									НадоЗаписывать = Истина;
								КонецЕсли;
								Если СтрокаТабЧасти.СчетКт = Ссылка Тогда
									СтрокаТабЧасти.СчетКт = ПравильныйЭлемент;
									НадоЗаписывать = Истина;
								КонецЕсли;
							Иначе
								Если СтрокаТабЧасти.Счет = Ссылка Тогда
									СтрокаТабЧасти.Счет = ПравильныйЭлемент;
									НадоЗаписывать = Истина;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				
				Если Метаданные.РегистрыРасчета.Содержит(Движение) Тогда
					СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "ВидРасчета");
					Пока СтрокаТабЧасти <> Неопределено Цикл
						СтрокаТабЧасти["ВидРасчета"] = ПравильныйЭлемент;
						НадоЗаписывать = Истина;
						СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "ВидРасчета");
					КонецЦикла;
				КонецЕсли;
				
				Если НадоЗаписывать Тогда
					НаборЗаписей.Загрузить(ТаблицаНабора);
					Если ОтключатьКонтрольЗаписи Тогда
						НаборЗаписей.ОбменДанными.Загрузка = Истина;
					КонецЕсли;
					Попытка
						НаборЗаписей.Записать();
					Исключение
						БылиИсключения = Истина;
						Если ВыполнятьВТранзакции Тогда
							Перейти ~ОТКАТ;
						КонецЕсли;
					КонецПопытки;
				КонецЕсли;
			КонецЦикла;
			
			
			Для Каждого Последовательность ИЗ Метаданные.Последовательности Цикл
				Если Последовательность.Документы.Содержит(СтрокаТаблицы.Метаданные) Тогда
					НадоЗаписывать = Ложь;
					НаборЗаписи = Последовательности[Последовательность.Имя].СоздатьНаборЗаписей();
					НаборЗаписи.Отбор.Регистратор.Установить(СтрокаТаблицы.Данные);
					НаборЗаписи.Прочитать();
					
					Если НаборЗаписи.Количество() > 0 Тогда
						Для Каждого Измерение ИЗ Последовательность.Измерения Цикл
							Если Измерение.Тип.СодержитТип(ТипЗнч(Ссылка)) И НаборЗаписи[0][Измерение.Имя]=Ссылка Тогда
								НаборЗаписи[0][Измерение.Имя] = ПравильныйЭлемент;
								НадоЗаписывать = Истина;
							КонецЕсли;
						КонецЦикла;					
						Если НадоЗаписывать Тогда
							Если ОтключатьКонтрольЗаписи Тогда
								НаборЗаписи.ОбменДанными.Загрузка = Истина;
							КонецЕсли;
							Попытка
								НаборЗаписи.Записать();
							Исключение
								БылиИсключения = Истина;
								Если ВыполнятьВТранзакции Тогда
									Перейти ~ОТКАТ;
								КонецЕсли;
							КонецПопытки;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			
			
		ИначеЕсли Метаданные.Справочники.Содержит(СтрокаТаблицы.Метаданные) Тогда
			
			Если Параметры.Объект = Неопределено Тогда
				Параметры.Объект = СтрокаТаблицы.Данные.ПолучитьОбъект();
			КонецЕсли;
			
			Если СтрокаТаблицы.Метаданные.Владельцы.Содержит(Ссылка.Метаданные()) И Параметры.Объект.Владелец = Ссылка Тогда
				Параметры.Объект.Владелец = ПравильныйЭлемент;
			КонецЕсли;
			
			Если СтрокаТаблицы.Метаданные.Иерархический И Параметры.Объект.Родитель = Ссылка Тогда
				Параметры.Объект.Родитель = ПравильныйЭлемент;
			КонецЕсли;
			
			Для Каждого Реквизит Из СтрокаТаблицы.Метаданные.Реквизиты Цикл
				Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) И Параметры.Объект[Реквизит.Имя] = Ссылка Тогда
					Параметры.Объект[Реквизит.Имя] = ПравильныйЭлемент;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ТЧ ИЗ СтрокаТаблицы.Метаданные.ТабличныеЧасти Цикл
				Для Каждого Реквизит Из ТЧ.Реквизиты Цикл
					Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
						СтрокаТабЧасти = Параметры.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
						Пока СтрокаТабЧасти <> Неопределено Цикл
							СтрокаТабЧасти[Реквизит.Имя] = ПравильныйЭлемент;
							СтрокаТабЧасти = Параметры.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
		ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(СтрокаТаблицы.Метаданные)
				  ИЛИ Метаданные.ПланыСчетов.Содержит(СтрокаТаблицы.Метаданные)
				  ИЛИ Метаданные.ПланыВидовРасчета.Содержит(СтрокаТаблицы.Метаданные)
				  ИЛИ Метаданные.Задачи.Содержит(СтрокаТаблицы.Метаданные)
				  ИЛИ Метаданные.БизнесПроцессы.Содержит(СтрокаТаблицы.Метаданные) Тогда
			
			Если Параметры.Объект = Неопределено Тогда
				Параметры.Объект = СтрокаТаблицы.Данные.ПолучитьОбъект();
			КонецЕсли;
						
			Для Каждого Реквизит Из СтрокаТаблицы.Метаданные.Реквизиты Цикл
				Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) И Параметры.Объект[Реквизит.Имя] = Ссылка Тогда
					Параметры.Объект[Реквизит.Имя] = ПравильныйЭлемент;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ТЧ ИЗ СтрокаТаблицы.Метаданные.ТабличныеЧасти Цикл
				Для Каждого Реквизит Из ТЧ.Реквизиты Цикл
					Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
						СтрокаТабЧасти = Параметры.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
						Пока СтрокаТабЧасти <> Неопределено Цикл
							СтрокаТабЧасти[Реквизит.Имя] = ПравильныйЭлемент;
							СтрокаТабЧасти = Параметры.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
						КонецЦикла;							
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;	
			
		ИначеЕсли Метаданные.Константы.Содержит(СтрокаТаблицы.Метаданные) Тогда
			
			Константы[СтрокаТаблицы.Метаданные.Имя].Установить(ПравильныйЭлемент);
			
			
		ИначеЕсли Метаданные.РегистрыСведений.Содержит(СтрокаТаблицы.Метаданные) Тогда	
			
			СтруктураИзмерений = Новый Структура;
			НаборЗаписей = РегистрыСведений[СтрокаТаблицы.Метаданные.Имя].СоздатьНаборЗаписей();
			Для Каждого Измерение ИЗ СтрокаТаблицы.Метаданные.Измерения Цикл
				НаборЗаписей.Отбор[Измерение.Имя].Установить(СтрокаТаблицы.Данные[Измерение.Имя]);
				СтруктураИзмерений.Вставить(Измерение.Имя);
			КонецЦикла;
			Если СтрокаТаблицы.Метаданные.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
				НаборЗаписей.Отбор["Период"].Установить(СтрокаТаблицы.Данные.Период);
			КонецЕсли;
			НаборЗаписей.Прочитать();
			ТаблицаНабора = НаборЗаписей.Выгрузить();
			НаборЗаписей.Очистить();
			
			Если ОтключатьКонтрольЗаписи Тогда
				НаборЗаписей.ОбменДанными.Загрузка = Истина;
			КонецЕсли;
			
			
			Если Не ВыполнятьВТранзакции Тогда
				НачатьТранзакцию();
			КонецЕсли;
			
			Попытка
				
				НаборЗаписей.Записать();
				
				Для Каждого Колонка ИЗ ТаблицаНабора.Колонки Цикл
					Если ТаблицаНабора[0][Колонка.Имя] = Ссылка Тогда
						ТаблицаНабора[0][Колонка.Имя] = ПравильныйЭлемент;
						Если СтруктураИзмерений.Свойство(Колонка.Имя) Тогда
							НаборЗаписей.Отбор[Колонка.Имя].Установить(ПравильныйЭлемент);
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
				
				НаборЗаписей.Загрузить(ТаблицаНабора);
				
				НаборЗаписей.Записать();
				
				Если Не ВыполнятьВТранзакции Тогда
					ЗафиксироватьТранзакцию();
				КонецЕсли; 
				
			Исключение
				
				Если ВыполнятьВТранзакции Тогда
					БылиИсключения = Истина;
					Перейти ~ОТКАТ;
				Иначе
					ОтменитьТранзакцию();
				КонецЕсли;
				
			КонецПопытки;
			
		Иначе
			Сообщить("Ссылки типа "+СтрокаТаблицы.Метаданные+" не заменяются!!");
		КонецЕсли;
	КонецЦикла;
	
	Если Параметры.Объект <> Неопределено Тогда
		Если ОтключатьКонтрольЗаписи Тогда
			Параметры.Объект.ОбменДанными.Загрузка = Истина;
		КонецЕсли;
		Попытка
			Параметры.Объект.Записать();
		Исключение
			БылиИсключения = Истина;
			Если ВыполнятьВТранзакции Тогда
				Перейти ~ОТКАТ;
			КонецЕсли;
		КонецПопытки;
	КонецЕсли;
	
~ОТКАТ:
	Если ВыполнятьВТранзакции Тогда
		Если БылиИсключения Тогда
			ОтменитьТранзакцию();
		Иначе
			ЗафиксироватьТранзакцию();
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Не БылиИсключения;
	
КонецФункции

&НаКлиенте
Процедура ОбъединитьКонтрагента(НаборКонтрагентов, ОсновнойКонтрагент)
	
	НайтиСсылки(НаборКонтрагентов, ОсновнойКонтрагент);
	ВсегоСтрок	= НаборКонтрагентов.Количество();
	
	сч	=0;
	Для Каждого Элемент Из НаборКонтрагентов Цикл сч	= сч + 1;
		ОбработкаПрерыванияПользователя();
		Состояние(Элемент,(100*сч)/ВсегоСтрок);
		
		ЗаменаСсылокПодготовка(Элемент, ОсновнойКонтрагент);  
		
		Состояние(Элемент,(100*сч)/ВсегоСтрок);
		ОбработкаПрерыванияПользователя();
	КонецЦикла;
	
	ПоказатьПредупреждение(,"Объединение Контрагентов завершено!",,"Предупреждение");
	
КонецПроцедуры
&НаКлиенте
Процедура Объединить(Команда)
	
	
	
		
	
	
	
	Массив = Элементы.Контрагенты.ВыделенныеСтроки;
	ОсновнойКонтрагент = Элементы.Контрагенты.ТекущаяСтрока;
	
	Массив.Удалить(Массив.Найти(ОсновнойКонтрагент));
	
	СтрокаМассива = "";
	Для Каждого Элемент Из Массив Цикл
		СтрокаМассива = СтрокаМассива + ?(ПустаяСтрока(СтрокаМассива), "", ",") + """" + Элемент + """";
	КонецЦикла;
	
	Ответ = Вопрос("Контрагенты " + СтрокаМассива + Символы.ПС + "Объединить Контрагентов?", РежимДиалогаВопрос.ДаНет, 0);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
	    Возврат;
	КонецЕсли;	
	
	Если Массив.Количество() И ОсновнойКонтрагент <> Неопределено Тогда
		
	    ОбъединитьКонтрагента(Массив, ОсновнойКонтрагент);

		Элементы.Контрагенты.Обновить();
		
	КонецЕсли;
	
	
КонецПроцедуры

/////////////////////////////////////////////////////
// КОНТАКТНАЯ ИНФОРМАЦИЯ

&НаКлиенте
Процедура КонтактнаяИнформацияКонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СписокКонтрагентов = ПолучитьСписокКонтрагентов(Элементы.Контрагенты.ТекущаяСтрока);
	
	СписокВыбора = Элемент.СписокВыбора;
	СписокВыбора.Очистить();
	Для Каждого Элемент Из СписокКонтрагентов Цикл
		СписокВыбора.Добавить(Элемент.Значение);
	КонецЦикла;
			
КонецПроцедуры
&НаКлиенте
Процедура КонтактнаяИнформацияПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.ПредставлениеНачалоВыбора(ЭтаФорма, Элементы.КонтактнаяИнформация.ТекущиеДанные.Объект, Модифицированность, СтандартнаяОбработка);
	                                                                           
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	УправлениеКонтактнойИнформациейКлиент.ПриНачалеРедактирования(ЭтаФорма, Элементы.Контрагенты.ТекущаяСтрока, НоваяСтрока, Копирование);
	
КонецПроцедуры
&НаКлиенте
Процедура КонтактнаяИнформацияПередУдалением(Элемент, Отказ)
	                                                                          
	УправлениеКонтактнойИнформациейКлиент.ПередУдалением(ЭтаФорма, Элементы.Контрагенты.ТекущаяСтрока, Отказ);

КонецПроцедуры
&НаКлиенте
Процедура КонтактнаяИнформацияПриИзменении(Элемент)
	БылоРедактированиеКИ = Истина;
КонецПроцедуры

&НаСервере
Процедура ОбновитьКонтактнуюИнформацию(Ссылка)
	
	Запрос = Новый Запрос("ВЫБРАТЬ Объект, Вид, ID, Представление, Комментарий, ЗначениеПоУмолчанию, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) Контрагент 
							//|	,0 Взаиморасчеты
							|ИЗ 
							|	РегистрСведений.ПредставлениеКонтактнойИнформации 
							|ГДЕ Объект = &Ссылка 
							|ОБЪЕДИНИТЬ ВСЕ 
							|ВЫБРАТЬ Рег.Объект, Рег.Вид, Рег.ID, Рег.Представление, Рег.Комментарий, Рег.ЗначениеПоУмолчанию, Спр.Ссылка Контрагент 
							//|	,Рас.СуммаУпрОстаток Взаиморасчеты
							|ИЗ 
							|	Справочник.Контрагенты Спр 
							|ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
							|	РегистрСведений.ПредставлениеКонтактнойИнформации Рег
							|ПО
							|	Спр.Ссылка = Рег.Объект
							//|ЛЕВОЕ СОЕДИНЕНИЕ
							//|	РегистрНакопления.Взаиморасчеты.Остатки() Рас
							//|ПО
							//|	Спр.Ссылка = Рас.Контрагент
							|ГДЕ Спр.Контрагент = &Ссылка И НЕ Спр.ПометкаУдаления");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Рез = Запрос.Выполнить();
	Если НЕ Рез.Пустой() Тогда
		КонтактнаяИнформация.Загрузить(Рез.Выгрузить());
	Иначе
		КонтактнаяИнформация.Очистить();
	КонецЕсли;
	
КонецПроцедуры
   
&НаСервере
Процедура ЗаписатьНаСервере(ТекущийКонтрагент)
	
	// записываем представление контактной информации 
	
	Для Каждого Элемент Из КонтактнаяИнформация Цикл	
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Элемент);
		// перенаправляем
		Приемник = ?(ЗначениеЗаполнено(Элемент.Контрагент), Элемент.Контрагент, ТекущийКонтрагент);
		Если Приемник <> Элемент.Объект  Тогда
			УправлениеКонтактнойИнформацией.ПеренаправитьКонтактнуюИнформацию(Элемент.Объект, Приемник, "Объект", Новый Структура("Вид, ID", Элемент.Вид, Элемент.ID), РегистрыСведений.КонтактнаяИнформация);
			УправлениеКонтактнойИнформацией.ПеренаправитьКонтактнуюИнформацию(Элемент.Объект, Приемник, "Объект", Новый Структура("Вид, ID", Элемент.Вид, Элемент.ID), РегистрыСведений.ПредставлениеКонтактнойИнформации);
		КонецЕсли;
	КонецЦикла;	
				
КонецПроцедуры
&НаКлиенте
Процедура СохранитьКонтактнуюИнформацию(Команда)
	
	ЗаписатьНаСервере(Элементы.Контрагенты.ТекущаяСтрока);	
		
КонецПроцедуры

/////////////////////////////////////////
// ОБРАБОТКА СОБЫТИЙ ФОРМЫ
 
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ВалютаУпр = ОбщиеФункции.ПолучитьЗначениеКонстантыВОбласти("ВалютаУправленческогоУчета");
	УИДСтр	=ЗначениеВСтрокуВнутр(Новый УникальныйИдентификатор)+ЗначениеВСтрокуВнутр(УникальныйИдентификатор);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОчиститьХранилищеСервер(УИДСтр)
	ХранилищеСистемныхНастроек.Удалить(УИДСтр, Неопределено, Неопределено);	
КонецПроцедуры
&НаКлиенте
Процедура ПриЗакрытии()
	ОчиститьХранилищеСервер(УИДСтр);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	БылоРедактированиеКИ = Ложь;
КонецПроцедуры







