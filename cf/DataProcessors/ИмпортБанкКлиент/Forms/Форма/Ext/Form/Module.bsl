
&НаКлиенте
Процедура ФайлЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НачатьПомещениеФайла(Новый ОписаниеОповещения("ЗавершениеВыбораФайла", ЭтаФорма),,, Истина, УникальныйИдентификатор); 
	
КонецПроцедуры
&НаКлиенте
Процедура ЗавершениеВыбораФайла(Результат, Адрес, ВыбранноеИмяФайла, Параметры) Экспорт
	
	Если НЕ Результат Тогда Возврат; КонецЕсли;
	
	Объект.ФайлЗагрузки = ВыбранноеИмяФайла;
	АдресФайла = Адрес;
	
КонецПроцедуры

&НаКлиенте
Функция БанковскийСчетЗаполнен()
	
	Если НЕ ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		ОбщиеФункции.СообщитьТекст(
			Нстр("ru = 'Не выбран банковский счет'")
			,, "Объект.БанковскийСчет");
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ПрочитатьДанные(Команда)
	
	Если НЕ БанковскийСчетЗаполнен() Тогда
		Возврат;
	КонецЕсли;
	Если АдресФайла = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Кодировка = "Windows";	
	ЗаголовокФайла = Новый Структура(ВРЕГ("ВерсияФормата, Кодировка, Отправитель, Получатель, ДатаСоздания, ВремяСоздания, ДатаНачала, ДатаКонца"));


	СписокСообщений      = Новый Массив;
	
	// Получаем файл
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(АдресФайла);
	ИмяВременногоФайла  = ПолучитьИмяВременногоФайла("txt");
	ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);
	// Получаем исходные данные.
	МассивСтрокФайла = ПрочитатьФайл(ИмяВременногоФайла, Кодировка, СписокСообщений);
	
	Если МассивСтрокФайла = Неопределено Тогда Возврат; КонецЕсли;
	
	РазобратьФайлИмпорта(
							ПолучитьСтруктуруДанныхИмпорта(),
							Объект.БанковскийСчет,
							Объект.Организация,
							Кодировка,
							ЗаголовокФайла,
							//СтруктураПараметров.Импорт_РасчетныеСчета,
							МассивСтрокФайла,
							Ложь,
							СписокСообщений,
							Истина);
							
	ЗаполнитьДокументыДляИмпортаНаСервере(СписокСообщений);						
							
	ДатаНачала 		= ЗаголовокФайла.ДатаНачала;
	ДатаОкончания 	= ЗаголовокФайла.ДатаКонца;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументыДляИмпортаНаСервере(СписокСообщений)
	Для Каждого Строка Из ДокументыДляИмпорта Цикл
		
		//ПлатежноеПоручение  = ВРЕГ(СтрЗаменить(СокрЛП(Строка.Операция), " ", "")) = "ПЛАТЕЖНОЕПОРУЧЕНИЕ";
		
		//Если ПлатежноеПоручение Тогда
			ЗаполнитьСсылочныеДанные(Строка, СписокСообщений);
		//КонецЕсли;
	КонецЦикла;
	Если ДокументыДляИмпорта.Количество() Тогда
		ДокументыДляИмпорта.Сортировать("СуммаСписано, СуммаПоступило"); КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруДанныхИмпорта()
	
	СтруктураДанныхИмпорта = Новый Соответствие;
	Для каждого КолонкаИмпорта Из ПолучитьРеквизиты("ДокументыДляИмпорта") Цикл
		СтруктураДанныхИмпорта.Вставить(КолонкаИмпорта.Имя, КолонкаИмпорта.Заголовок);
	КонецЦикла;
	
	Возврат СтруктураДанныхИмпорта;
	
КонецФункции
&НаСервере
// Разбирает файл импорта и заполняет таблицу документов (для импорта)
// (без распознавания)
Функция РазобратьФайлИмпорта(СтруктураДанныхИмпорта,
		Знач НомерСчета, Организация, Кодировка,
		Импорт_Заголовок, МассивСтрокФайла, СоздаватьНенайденныеЭлементы = Истина,
		СписокСообщений = Неопределено, КонтролироватьНекорректныеСимволыВНомере = Ложь) Экспорт
	
	// Подготавливаем структуры обработки данных
	Импорт_ВидыДокументов = Новый Массив;
	НомерСчета = НомерСчета.НомерСчета;
	
	// Подготавливаем структуры обработки данных.
	Импорт_ПризнакОбмена = Ложь;
	НайденКонецФайла     = Ложь;
	
	НомерОбрабатываемогоСчета = "";
	
	СписокДокументов = Новый СписокЗначений;
	
	//СписокБанковскихСчетовОрганизации = ПолучитьСписокСвоихСчетов(Организация);
	ДокументыДляИмпорта.Очистить();
	
	
	КоличествоСтрок = МассивСтрокФайла.Количество();
	
	Импорт_Загружаемые = Новый Структура(
		"Номер, Дата, Сумма,
		|ВидПлатежа, ВидОплаты,
		|КвитанцияДата, КвитанцияВремя, КвитанцияСодержание,
		|ДатаСписано,
		|ДатаПоступило,
		|ПлательщикСчет, Плательщик, ПлательщикИНН,Плательщик1,
		|ПлательщикРасчСчет, ПлательщикБанк1, ПлательщикБанк2, ПлательщикБИК, ПлательщикКорсчет,
		|ПолучательСчет, Получатель, ПолучательИНН,Получатель1,
		|ПолучательРасчСчет, ПолучательБанк1, ПолучательБанк2, ПолучательБИК, ПолучательКорсчет,
		|СтатусСоставителя, ПлательщикКПП, ПолучательКПП, ПоказательКБК, ОКАТО, ОКТМО,
		|ПоказательОснования, ПоказательПериода, ПоказательНомера, ПоказательДаты, ПоказательТипа,
		|Код,
		|НазначениеПлатежа, НазначениеПлатежа1, НазначениеПлатежа2, НазначениеПлатежа3, НазначениеПлатежа4, НазначениеПлатежа5, НазначениеПлатежа6,ВидПлатежа, ВидОплаты,
		|СрокПлатежа, Очередность,
		|УсловиеОплаты1, УсловиеОплаты2, УсловиеОплаты3,
		|СрокАкцепта, ВидАккредитива, ПлатежПоПредст, ДополнУсловия, НомерСчетаПоставщика, ДатаОтсылкиДок");
	
	// Заполняем первичные структуры данных.
	
	ТекущаяСтрока    = 1;
	Пока ТекущаяСтрока <= КоличествоСтрок Цикл
		
		Стр = ПолучитьСтрокуИмпорта(ТекущаяСтрока, КоличествоСтрок, МассивСтрокФайла);
		
		Если Лев(Врег(СокрЛП(Стр)), 14) = "СЕКЦИЯДОКУМЕНТ" Тогда
			
			Значение = "";
			Тег = "";
			РазобратьТеговуюСтроку(Стр, Тег, Значение);
			
			Если Тег = "СЕКЦИЯДОКУМЕНТ" Тогда
				Если НомерОбрабатываемогоСчета = "" Тогда
						
						ТекстСообщения = НСтр("ru = 'В заголовке файла не указан расчетный счет!
							|При загрузке будет использован расчетный счет, указанный в форме.'");
						СписокСообщений.Добавить(Новый Структура("Текст", ТекстСообщения));
					
					НомерОбрабатываемогоСчета = НомерСчета;
				КонецЕсли;
				
				Если НомерОбрабатываемогоСчета <> НомерСчета Тогда
						ТекстСообщения = НСтр("ru = 'В заголовке файла указаны счета, отличные от указанного. Расчеты загружаться не будут.'");
						СписокСообщений.Добавить(Новый Структура("Текст", ТекстСообщения));
						
						Возврат Ложь;
				КонецЕсли;
				
				НоваяСтрокаДокументов = ДокументыДляИмпорта.Добавить();
				НоваяСтрокаДокументов.Операция = Значение;
				Если НЕ ЗагрузитьСекциюДокумента(НоваяСтрокаДокументов, ТекущаяСтрока,
												 КоличествоСтрок, МассивСтрокФайла,
												 Импорт_Загружаемые, СписокСообщений) Тогда
					Возврат Ложь;
				КонецЕсли;
			Иначе
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Нарушена структура файла импорта, строка %1 : %2'"),
					ТекущаяСтрока - 1, Стр);
				СписокСообщений.Добавить(Новый Структура("Текст", ТекстСообщения));
				
				Возврат Ложь;
			КонецЕсли;
			
		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 14) = "СЕКЦИЯРАСЧСЧЕТ" Тогда
			
			СтруктураРССчет = ЗагрузитьСекциюРасчСчета(ТекущаяСтрока, КоличествоСтрок, МассивСтрокФайла, СписокСообщений);
			Если СтруктураРССчет = Неопределено Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Нарушена структура файла импорта в секции описания расчетного счета! Строка: %1'"),
					ТекущаяСтрока - 1);
				СписокСообщений.Добавить(Новый Структура("Текст", ТекстСообщения));
				
				Возврат Ложь;
			Иначе
				// делаем что хотим с этими данными, мне пока они не нужны.	
				
			КонецЕсли;
			
		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 8) = "РАСЧСЧЕТ" Тогда
			Значение = "";
			Тег      = "";
			РазобратьТеговуюСтроку(Стр, Тег, Значение);
			
			Если Тег = "РАСЧСЧЕТ" Тогда
			
				НомерОбрабатываемогоСчета = Значение;
								
	
				// тут надо проверить пренадлежит ли счет Организации выбранной	и если что сообщить вот это:	
				//		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				//			НСтр("ru = 'В заголовке файла указан счет, не принадлежащий организации: %1'"), Значение);
				//		
				//		СписокСообщений.Добавить(Новый Структура("Текст", ТекстСообщения));
					
				
				// а тут проверить на указанный в шапке счета и если что сообщить вот это:
				//	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				//		НСтр("ru = 'В заголовке файла указан счет (%1), отличный от указанного, расчеты по которому загружаться не будут'"),
				//		Значение);
					
				//	СписокСообщений.Добавить(Новый Структура("Текст", ТекстСообщения));
				КонецЕсли;
			
			
		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 8) = "ДОКУМЕНТ" Тогда
			
			Импорт_ВидыДокументов.Добавить(Значение);
			
		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 10) = "КОНЕЦФАЙЛА" Тогда
			
			Если НЕ Импорт_ПризнакОбмена Тогда
				
				ТекстСообщения = НСтр("ru = 'В файле импорта отсутствует признак обмена ""1CClientBankExchange""!'");
				
				СписокСообщений.Добавить(Новый Структура("Текст", ТекстСообщения));
				Возврат Ложь;
				
			КонецЕсли;
			
			НайденКонецФайла = Истина;
			Прервать;
			
		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 20) = "1CCLIENTBANKEXCHANGE" Тогда
			
			Импорт_ПризнакОбмена = Истина;
			
		Иначе
			
			ЗагрузитьСтрокуЗаголовка(Стр, ТекущаяСтрока, Импорт_Заголовок, СписокСообщений);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ НайденКонецФайла Тогда
		ДокументыДляИмпорта.Очистить();
		
		ТекстСообщения = НСтр("ru = 'Файл загрузки не соответствует стандарту (не найдена секция КонецФайла)!'");
		СписокСообщений.Добавить(Новый Структура("Текст", ТекстСообщения));
		
		Возврат Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Импорт_Заголовок.ДатаНачала) Тогда
		ТекстСообщения = НСтр("ru = 'В заголовке файла загрузки неверно указана дата начала интервала.'");
		СписокСообщений.Добавить(Новый Структура("Текст", ТекстСообщения));
	КонецЕсли;
	
	Если ПустаяСтрока(Импорт_Заголовок.ДатаКонца) Тогда
		ТекстСообщения = НСтр("ru = 'В заголовке файла импорта неверно указана дата окончания интервала'");
		СписокСообщений.Добавить(Новый Структура("Текст", ТекстСообщения));
		КонецИнтервалаЗагрузки = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // РазобратьФайлИмпорта

// Функция загружает секцию документа
//
Функция ЗагрузитьСекциюДокумента(СтрокаДокумента, Импорт_ТекущаяСтрока, Импорт_КоличествоСтрок,
								Импорт_МассивСтрок, Импорт_Загружаемые, СтекОповещений)
	
	СтрокаРазбора = ПолучитьСтрокуИмпорта(Импорт_ТекущаяСтрока, Импорт_КоличествоСтрок, Импорт_МассивСтрок);
	
	Пока Лев(Врег(СокрЛП(СтрокаРазбора)), 14) <> "КОНЕЦДОКУМЕНТА" Цикл
		Тег      = "";
		Значение = "";
		
		Если РазобратьТеговуюСтроку(СтрокаРазбора, Тег, Значение) Тогда
			
			Если Импорт_Загружаемые.Свойство(Тег) Тогда
				
				Если ЗначениеЗаполнено(Значение) И НЕ ЗначениеЗаполнено(СтрокаДокумента[Тег]) Тогда
					СтрокаДокумента[Тег] = Значение;
				КонецЕсли;
				
			Иначе
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Неверный реквизит платежного документа, строка %1 : %2'"), Импорт_ТекущаяСтрока - 1, СтрокаРазбора);
				СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
				
				Возврат Ложь;
				
			КонецЕсли;
			
		Иначе
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Нарушена структура платежного документа, строка %1 : %2'"), Импорт_ТекущаяСтрока - 1, СтрокаРазбора);
			СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
			
			Возврат Ложь;
			
		КонецЕсли;
		
		СтрокаРазбора = ПолучитьСтрокуИмпорта(Импорт_ТекущаяСтрока, Импорт_КоличествоСтрок, Импорт_МассивСтрок);
		
	КонецЦикла;
	
	СтрокаДокумента.СостояниеДокумента = 3;
	
	Возврат Истина;
	
КонецФункции // ЗагрузитьСекциюДокумента

// Функция загружает секцию расчетного счета
//
Функция ЗагрузитьСекциюРасчСчета(Импорт_ТекущаяСтрока, Импорт_КоличествоСтрок, Импорт_МассивСтрок, СтекОповещений)
	
	ТегиРасчетногоСчета = Новый Структура(
		ВРЕГ("ДатаНачала, ДатаКонца, РасчСчет, НачальныйОстаток, ВсегоПоступило, ВсегоСписано, КонечныйОстаток, КонецРасчСчет"));
	
	СтрокаРазбора = ПолучитьСтрокуИмпорта(Импорт_ТекущаяСтрока, Импорт_КоличествоСтрок, Импорт_МассивСтрок);
	
	Значение = "";
	Тег = "";
	
	Пока РазобратьТеговуюСтроку(СтрокаРазбора, Тег, Значение) Цикл
		
		Если ТегиРасчетногоСчета.Свойство(Тег) Тогда
			
			ТегиРасчетногоСчета[Тег] = Значение;
			
		Иначе
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Неверный реквизит в секции описания расчетного счета, строка %1 : %2'"), Импорт_ТекущаяСтрока - 1, СтрокаРазбора);
			СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
			
			Возврат Неопределено;
			
		КонецЕсли;
		
		СтрокаРазбора = ПолучитьСтрокуИмпорта(Импорт_ТекущаяСтрока, Импорт_КоличествоСтрок, Импорт_МассивСтрок);
		
		Значение = "";
		Тег = "";
		
	КонецЦикла;
	
	Если ВРЕГ(Лев(СокрЛП(СтрокаРазбора), 13)) = "КОНЕЦРАСЧСЧЕТ" Тогда
		Возврат ТегиРасчетногоСчета;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция загружает заголовок файла обмена
//
Функция ЗагрузитьСтрокуЗаголовка(ТекстСтрокиЗаголовка, ТекущаяСтрока, Импорт_Заголовок, СписокСообщений)
	
	
	Значение = "";
	Тег = "";
	РазобратьТеговуюСтроку(ТекстСтрокиЗаголовка, Тег, Значение);
	
	Если Импорт_Заголовок.Свойство(Тег) Тогда
		
		Импорт_Заголовок[Тег] = Значение;
		
	Иначе
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Неверный реквизит заголовка, строка %1 : %2'"), ТекущаяСтрока - 1, ТекстСтрокиЗаголовка);
		СписокСообщений.Добавить(Новый Структура("Текст", ТекстСообщения));
		
	КонецЕсли;
	
КонецФункции
// Функция возвращает очередную строку из прочитанного файла загрузки
//
Функция ПолучитьСтрокуИмпорта(ТекущаяСтрока, КоличествоСтрок, МассивСтрокФайла)
	
	выбСтрока = "";
	
	Пока ПустаяСтрока(выбСтрока) ИЛИ Лев(выбСтрока, 2) = "//" Цикл
		
		Если ТекущаяСтрока > КоличествоСтрок Тогда
			Возврат "";
		КонецЕсли;
		
		выбСтрока = МассивСтрокФайла[ТекущаяСтрока - 1];
		ТекущаяСтрока = ТекущаяСтрока + 1;
		
	КонецЦикла;
	
	Возврат выбСтрока;
	
КонецФункции

// Функция разбирает теговую строку
//
Функция РазобратьТеговуюСтроку(СтрокаРазбора, Тег, Значение)
	
	ПозицияПрисваивания = Найти(СтрокаРазбора, "=");
	
	Если ПозицияПрисваивания = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Тег = ВРЕГ(СокрЛП(Лев(СтрокаРазбора, ПозицияПрисваивания - 1)));
	
	Значение = СокрЛП(Сред(СтрокаРазбора, ПозицияПрисваивания + 1));
	
	Возврат НЕ ПустаяСтрока(Тег);
	
КонецФункции

// Проверяет строку на соответствие требованиям
//
// Параметры:
//  ПроверяемаяСтрока - Строка - проверяемый строка.
//
// Возвращаемое значение:
//  Булево - Истина, если ошибок нет.
//
Функция ТолькоСимволыВСтроке(Знач ПроверяемаяСтрока) Экспорт
	
	// допустимые символы для email
	Буквы = "abcdefghijklmnopqrstuvwxyzабвгдеёжзийклмнопрстуфхцчшщъыьэюя";
	Цифры = "0123456789";
	СпецСимволы = ".,;:$№#@&_-+*=?'/|\""%()[]{} ";
	
	// приводим строку к нижнему регистру
	ПроверяемаяСтрока = НРег(СокрЛП(ПроверяемаяСтрока));
	
	// проверяем наличие спецсимволов в начале строке
	Если ЕстьСимволыВНачалеСтроки(Лев(ПроверяемаяСтрока, 1), СпецСимволы) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// проверяем допустимые символы
	Если НЕ СтрокаСодержитТолькоДопустимыеСимволы(ПроверяемаяСтрока, Буквы + Цифры + СпецСимволы) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции
Функция СтрокаСодержитТолькоДопустимыеСимволы(Строка, ДопустимыеСимволы)
	МассивСимволов = Новый Массив;
	Для Позиция = 1 По СтрДлина(ДопустимыеСимволы) Цикл
		МассивСимволов.Добавить(Сред(ДопустимыеСимволы, Позиция, 1));
	КонецЦикла;
	
	Для Позиция = 1 По СтрДлина(Строка) Цикл
		Если МассивСимволов.Найти(Сред(Строка, Позиция, 1)) = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции
Функция ЕстьСимволыВНачалеСтроки(Строка, ПроверяемыеСимволы)
	Для Позиция = 1 По СтрДлина(ПроверяемыеСимволы) Цикл
		Символ = Сред(ПроверяемыеСимволы, Позиция, 1);
		СимволНайден = (Лев(Строка, 1) = Символ) Или (Прав(Строка,1) = Символ);
		Если СимволНайден Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции


// Функция возвращает прочитанный файл обмена
//
&НаКлиенте
Функция ПрочитатьФайл(Файл, Кодировка, СписокСообщений)
	
	ФайлЗагр = Новый Файл(Файл);
	Если НЕ ФайлЗагр.Существует() Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Файла %1 не существует!'"), Файл);
		СписокСообщений.Добавить(Новый Структура("Текст", ТекстСообщения));
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	// Кодировку задаем текстом, иначе бывают проблемы на сервере в Linux и в связке англоязычная Windows + англоязычный SQL
	Если Кодировка = "DOS" Тогда
		Кодир = "cp866";        // КодировкаТекста.OEM;
	Иначе
		Кодир = "windows-1251"; // КодировкаТекста.ANSI;
	КонецЕсли;
	
	МассивСтрокФайла = Новый Массив;
	
	Попытка
		
		ПотокЧтения = Новый ЧтениеТекста(Файл, Кодир,,, Ложь);
		
	Исключение
		
		ТекстСообщения = НСтр("ru = 'Файл не прочитан.'");
		СписокСообщений.Добавить(Новый Структура("Текст", ТекстСообщения));
		
		Возврат Неопределено;
		
	КонецПопытки;
	
	ПроверитьКодировку = Истина;
	ТекущаяСтрока = ПотокЧтения.ПрочитатьСтроку();
	Пока ТекущаяСтрока <> Неопределено Цикл
		МассивСтрокФайла.Добавить(СокрЛП(ТекущаяСтрока));
		ТекущаяСтрока = ПотокЧтения.ПрочитатьСтроку();
		
		Если ПроверитьКодировку И НЕ ПустаяСтрока(ТекущаяСтрока) Тогда
			ПроверитьКодировку = Ложь;
			
			Если НЕ ТолькоСимволыВСтроке(ТекущаяСтрока) Тогда
				ТекстСообщения = НСтр("ru = 'Указанный файл не является файлом обмена, или неверно указана кодировка!'");
				СписокСообщений.Добавить(Новый Структура("Текст", ТекстСообщения));
				
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСтрокФайла.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Файл загрузки не содержит данных!'");
		СписокСообщений.Добавить(Новый Структура("Текст", ТекстСообщения));
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Если МассивСтрокФайла[0] <> "1CClientBankExchange" Тогда
		
		МассивСтрокФайла.Очистить();
		ТекстСообщения = НСтр("ru = 'Указанный файл не является файлом обмена, или неверно указана кодировка!'");
		СписокСообщений.Добавить(Новый Структура("Текст", ТекстСообщения));
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат МассивСтрокФайла;
	
КонецФункции // ПрочитатьФайл

Функция ПолучитьРасчетныйСчет(ДокументСтрока)
					
	НовыйСчет = Справочники.БанковскиеСчета.СоздатьЭлемент();
	НовыйСчет.Владелец = ДокументСтрока.Контрагент;
    НовыйСчет.НомерСчета = ДокументСтрока.СчетКонтрагентаДляПоиска;
	НовыйСчет.Наименование = ?(ДокументСтрока.Исходящий, ДокументСтрока.ПолучательБанк1, ДокументСтрока.ПлательщикБанк1);
	
	ЕСли   ВРЕГ(СтрЗаменить(СокрЛП(ДокументСтрока.Операция), " ", "")) = "БАНКОВСКИЙОРДЕР" Тогда 
	БИК=ДокументСтрока.ПлательщикБИК;	
	Иначе
	Бик=?(ДокументСтрока.Исходящий, Строка(ДокументСтрока.ПолучательБИК), Строка(ДокументСтрока.ПлательщикБИК));
	КонецЕСли;
	
	Запрос  = Новый Запрос("ВЫБРАТЬ Ссылка ИЗ Справочник.Банки ГДЕ Код = """ + БИК + """");
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		НовыйСчет.Банк = Выборка.Ссылка;
	Иначе
		ДокументСтрока.ЕстьОшибка = Истина;
		ДокументСтрока.ОписаниеОшибок = "Банковский счет не может быть создан. Банк не найден";
		Возврат Ложь;
	КонецЕсли;
	
	НовыйСчет.ВалютаДенежныхСредств = Объект.БанковскийСчет.ВалютаДенежныхСредств;
	
	Попытка 
		НовыйСчет.Записать();
	Исключение
		ДокументСтрока.ОписаниеОшибок = ОписаниеОшибки();
		ДокументСтрока.ЕстьОшибка = Истина;
		Возврат Ложь;
	КонецПопытки;
	// Проставим всем строкам с таким номером счета найденный счет, что бы не создавать дубли.
	Строки = ДокументыДляИмпорта.НайтиСтроки(Новый Структура("Контрагент, СчетКонтрагентаДляПоиска", ДокументСтрока.Контрагент, ДокументСтрока.СчетКонтрагентаДляПоиска)); 
	Для Каждого Строка ИЗ Строки Цикл Строка.СчетКонтрагента = НовыйСчет.Ссылка; КонецЦикла;
	
	//ДокументСтрока.СчетКонтрагента = НовыйСчет.Ссылка;

	Возврат Истина;
	
КонецФункции

&НаСервере
Функция СоздатьДокумент(ДокументСтрока, СписокСообщений)
	
		// вначале создадим счет, если его нет
		Если НЕ ЗначениеЗаполнено(ДокументСтрока.СчетКонтрагента) И НЕ ПолучитьРасчетныйСчет(ДокументСтрока) Тогда Возврат Ложь; КонецЕсли;

		// Цитата из СБОЛ:
		// "Идентификация документов производится по расчетному счету (откуда исходит документ), виду документа, дате и номеру. 
		// Предполагается, что по одному расчетному счету не может быть нескольких исходящих документов одного вида за одну дату с одинаковыми номерами.
		// Для документов, передаваемых из БС "1С: Предприятие" в "Сбербанк Бизнес Онлайн", это обязательное правило."
		
		Запрос = Новый Запрос("ВЫБРАТЬ Ссылка ИЗ Документ." + Строка(ДокументСтрока.ВидДокумента) + " ГДЕ
		|Организация = &Организация
		|И БанковскийСчетОрганизации = &СчетОрганизации
		|И Контрагент = &Контрагент
		|И БанковскийСчетПартнера = &СчетПартнера
		|И Сумма = &Сумма
		|И НомерВходящегоДокумента = &НомерДокумента
		|И Дата МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаНачала, ДЕНЬ) И КОНЕЦПЕРИОДА(&ДатаНачала, ДЕНЬ)
		|");
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
		Запрос.УстановитьПараметр("СчетОрганизации", Объект.БанковскийСчет);
		Запрос.УстановитьПараметр("ДатаНачала", ДокументСтрока.ДатаПроведения);
		//Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
		Запрос.УстановитьПараметр("НомерДокумента", ДокументСтрока.НомерДок);
		Запрос.УстановитьПараметр("Контрагент", ДокументСтрока.Контрагент);
		Запрос.УстановитьПараметр("СчетПартнера", ДокументСтрока.СчетКонтрагента);
		Запрос.УстановитьПараметр("Сумма", ДокументСтрока.СуммаДокумента);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ДокументСтрока.ОписаниеОшибок = Строка(ДокументСтрока.ИмяДокумента) + " от " + Строка(ДокументСтрока.Контрагент) + " на сумму " + Строка(ДокументСтрока.Сумма) + " руб. уже было создано";	
			ДокументСтрока.Документ = Выборка.Ссылка;
			Возврат Ложь;
		КонецЕсли;
		
		НовыйДокумент = Документы[ДокументСтрока.ВидДокумента].СоздатьДокумент();
		ЗаполнитьЗначенияСвойств(НовыйДокумент, ДокументСтрока, "Контрагент, НазначениеПлатежа, СтавкаНДС, СуммаНДС, СтатьяДвиженияДенежныхСредств");
		НовыйДокумент.Дата = ДокументСтрока.ДатаПроведения;
		НовыйДокумент.Валюта = КэшируемыеФункции.ВалютаУправленческогоУчета();
		НовыйДокумент.БанковскийСчетОрганизации = Объект.БанковскийСчет;
		НовыйДокумент.Организация = Объект.Организация;
		НовыйДокумент.Контрагент = ДокументСтрока.Контрагент;
        НовыйДокумент.БанковскийСчетПартнера = ДокументСтрока.СчетКонтрагента;
		НовыйДокумент.Сумма = ДокументСтрока.СуммаДокумента;
		НовыйДокумент.УчитыватьНДС = Объект.Организация.УчитыватьНДС;
		НовыйДокумент.СуммаВключаетНДС = Истина;
		Если ДокументСтрока.ВидДокумента = "ПлатежноеПоручениеВходящее" Тогда
			НовыйДокумент.КурсВзаиморасчетов = 1;
		Иначе
			НовыйДокумент.ВидПлатежаВБюджет = ДокументСтрока.ВидПлатежаВБюджет;
		КонецЕсли;	
		
		//НовыйДокумент.СтавкаНДС = ?(НовыйДокумент.УчитыватьНДС, Перечисления.СтавкиНДС.НДС18, Перечисления.СтавкиНДС.БезНДС);
		//Если ДокументСтрока.ВидДокумента = "ПлатежноеПоручениеИсходящее" Тогда
		//	НовыйДокумент.СтавкаНДС = ?(ЗначениеЗаполнено(НовыйДокумент.Контрагент.СтавкаНДС), НовыйДокумент.Контрагент.СтавкаНДС, НовыйДокумент.СтавкаНДС); КонецЕсли;	
		
		//СтавкаНДС = КэшируемыеФункции.ПолучитьЧислоСтавкиНДС(НовыйДокумент.СтавкаНДС);
		//НовыйДокумент.СуммаНДС	= СтавкаНДС * НовыйДокумент.Сумма / (СтавкаНДС + 100);
			
		НовыйДокумент.ДатаВходящегоДокумента = ДокументСтрока.Дата;
		НовыйДокумент.НомерВходящегоДокумента = ДокументСтрока.Номер;
		НовыйДокумент.ВидОперации = ДокументСтрока.ВидОперации;
		
		//отдел заполняем только, если основной менеджер Контрагента не является свободным лидом. Если свободный лид, то отдел заполняется из автора заказа соответственно, после разнесения.
		Если ТипЗнч(НовыйДокумент) = Тип("ДокументОбъект.ПлатежноеПоручениеВходящее") тогда
			Если ЗначениеЗаполнено(НовыйДокумент.Контрагент) Тогда
				ОснМен=НовыйДокумент.Контрагент.ОсновнойМенеджер;
				Если ЗначениеЗаполнено(ОснМен) Тогда
					Если Не ОснМен = Справочники.Пользователи.СвободныйЛид Тогда
						НовыйДокумент.Отдел = ОснМен.Отдел;
						НовыйДокумент.Подразделение = ОснМен.Отдел.Подразделение;
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;
		
				
		Если НЕ ЗначениеЗаполнено(ДокументСтрока.СтатьяДвиженияДенежныхСредств) И НовыйДокумент.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя Тогда 
			//Оплата от покупателя
			НовыйДокумент.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателя;
			//Если ЗначениеЗаполнено(НовыйДокумент.СтатьяДвиженияДенежныхСредств) Тогда
			//	НовыйДокумент.СтатьяДДСБух = ?(ЗначениеЗаполнено(НовыйДокумент.СтатьяДвиженияДенежныхСредств.СтатьяДДСБух), НовыйДокумент.СтатьяДвиженияДенежныхСредств.СтатьяДДСБух, НовыйДокумент.СтатьяДвиженияДенежныхСредств); 
			//КонецЕсли; 		
		КонецЕсли;
		Если ЗначениеЗаполнено(НовыйДокумент.СтатьяДвиженияДенежныхСредств) Тогда
			НовыйДокумент.СтатьяДДСБух = ?(ЗначениеЗаполнено(НовыйДокумент.СтатьяДвиженияДенежныхСредств.СтатьяДДСБух), НовыйДокумент.СтатьяДвиженияДенежныхСредств.СтатьяДДСБух, НовыйДокумент.СтатьяДвиженияДенежныхСредств); 
		КонецЕсли; 		

		Попытка
			НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ДокументСтрока.ОписаниеОшибок = ОписаниеОшибки();
			ДокументСтрока.ЕстьОшибка = Истина;
			Возврат Ложь;
		КонецПопытки;
		
		ДокументСтрока.Документ = НовыйДокумент.Ссылка;
		ДокументСтрока.ЭтоНовый = Истина;
КонецФункции

Функция ПолучитьДатуИзСтроки(Источник, ВажнаяДата = Истина)
	Приемник = '00010101';
	
	Если ПустаяСтрока(Источник) Тогда
		Возврат Приемник;
	КонецЕсли;
	
	Буфер = Источник;
	
	ПозицияТочки = Найти(Буфер, ".");
	
	Если ПозицияТочки = 0 Тогда
		Если ВажнаяДата Тогда
			ВызватьИсключение НСтр("ru = 'Не удалось преобразовать строку в дату. Неверный формат.'");
		Иначе
			Возврат Приемник;
		КонецЕсли;
	КонецЕсли;
	
	ЧислоДаты = Лев(Буфер, ПозицияТочки - 1);
	Буфер    = Сред(Буфер, ПозицияТочки + 1);
	
	ПозицияТочки = Найти(Буфер, ".");
	
	Если ПозицияТочки = 0 Тогда
		Если ВажнаяДата Тогда
			ВызватьИсключение НСтр("ru = 'Не удалось преобразовать строку в дату. Неверный формат.'");
		Иначе
			Возврат Приемник;
		КонецЕсли;
	КонецЕсли;
	
	МесяцДаты = Лев(Буфер, ПозицияТочки - 1);
	ГодДаты  = Сред(Буфер, ПозицияТочки + 1);
	
	Если СтрДлина(ГодДаты) = 2 Тогда
		
		Если Число(ГодДаты) < 50 Тогда
			ГодДаты = "20" + ГодДаты;
		Иначе
			ГодДаты = "19" + ГодДаты ;
		КонецЕсли;
		
	КонецЕсли;
	
	Если (ПустаяСтрока(ГодДаты) ИЛИ ГодДаты = "0") И (ПустаяСтрока(МесяцДаты) ИЛИ МесяцДаты = "0") И (ПустаяСтрока(ЧислоДаты) ИЛИ ЧислоДаты = "0") Тогда
		Возврат Приемник;
	КонецЕсли;
	
	Попытка
		
		Приемник = Дата(Число(ГодДаты), Число(МесяцДаты), Число(ЧислоДаты));
		
	Исключение
		// Запись в журнал регистрации не требуется
		
		Если ВажнаяДата Тогда
			ВызватьИсключение НСтр("ru = 'Не удалось преобразовать строку в дату. Неверный формат.'");
		Иначе
			Возврат Приемник;
		КонецЕсли;
		
	КонецПопытки;
	
	Возврат Приемник;
	
КонецФункции
Функция ПолучитьЧислоИзСтроки(Знач НомерДок)
	
	Если ПустаяСтрока(НомерДок) Тогда
		Возврат 0;
	КонецЕсли;
	
	ТолькоЦифры = Истина;
	ДлинаНомера = СтрДлина(НомерДок);
	Для инд = 1 По ДлинаНомера Цикл
		// поиск ведем с конца номера, до первого не цифрового символа
		ПозицияНеЦифровойСимвол = ДлинаНомера - инд + 1;
		
		Код = КодСимвола(НомерДок, ПозицияНеЦифровойСимвол);
		
		Если Код < 48 ИЛИ Код > 57 Тогда
			ТолькоЦифры = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТолькоЦифры Тогда
		Номер = НомерДок;
	ИначеЕсли ПозицияНеЦифровойСимвол < ДлинаНомера Тогда
		Номер = Сред(НомерДок, ПозицияНеЦифровойСимвол + 1);
	ИначеЕсли ПозицияНеЦифровойСимвол = ДлинаНомера Тогда
		Возврат НомерДок;
	КонецЕсли;
	
	Возврат Число(Номер);
	
КонецФункции

Функция ЭтоНалоговыеДоходы(КБК) Экспорт
	
	// Выделяем платежи в уплату налогов, взносов и т.п., учитываемого на счетах 68 и 69.
	// Для этого смотрим на код подгруппы доходов (4,5,6 символы КБК).
	
	НалоговыеДоходы = Новый Массив;
	НалоговыеДоходы.Добавить("101"); // налоги на прибыль, доходы;
	НалоговыеДоходы.Добавить("102"); // страховые взносы на обязательное социальное страхование;
	НалоговыеДоходы.Добавить("103"); // налоги на товары (работы, услуги), реализуемые на территории Российской Федерации;
	НалоговыеДоходы.Добавить("104"); // налоги на товары, ввозимые на территорию Российской Федерации;
	НалоговыеДоходы.Добавить("105"); // налоги на совокупный доход;
	НалоговыеДоходы.Добавить("106"); // налоги на имущество;
	НалоговыеДоходы.Добавить("107"); // налоги, сборы и регулярные платежи за пользование природными ресурсами;
	НалоговыеДоходы.Добавить("109"); // задолженность и перерасчеты по отмененным налогам, сборам и иным обязательным платежам;
	НалоговыеДоходы.Добавить("112"); // платежи при пользовании природными ресурсами;
	
	РасположениеЭлемента = РасположениеЭлементаКБК("ПодгруппаДоходов");
	
	ПодгруппаДоходов = Сред(КБК, РасположениеЭлемента.Начало, РасположениеЭлемента.Длина);
	
	Возврат НалоговыеДоходы.Найти(ПодгруппаДоходов) <> Неопределено;
	
КонецФункции


// Приказ Минфина от 01.07.13 г. N 65н

//┌──────────────────────────────────────────────────────────────────────────────────────┐
//│                     Структура кода классификации доходов бюджетов                    │
//├──────────────┬─────────────────────────────────────────┬───────────┬─────────────────┤
//│ Код главного │        Код вида доходов бюджетов        │Код подвида│Код классификации│
//│администратора├───────┬───────┬───────┬─────────┬───────┤  доходов  │ операций сектора│
//│   доходов    │группа │под-   │статья │подстатья│элемент│ бюджетов  │ государственного│
//│   бюджета    │доходов│группа │доходов│ доходов │доходов│           │   управления,   │
//│              │       │доходов│       │         │       │           │  относящихся к  │
//│              │       │       │       │         │       │           │ доходам бюджетов│
//├────┬────┬────┼───────┼───┬───┼───┬───┼──┬──┬───┼───┬───┼──┬──┬──┬──┼─────┬─────┬─────┤
//│ 1  │ 2  │ 3  │   4   │ 5 │ 6 │ 7 │ 8 │9 │10│11 │12 │13 │14│15│16│17│ 18  │ 19  │  20 │
//└────┴────┴────┴───────┴───┴───┴───┴───┴──┴──┴───┴───┴───┴──┴──┴──┴──┴─────┴─────┴─────┘

Функция РасположениеЭлементаКБК(ИмяЭлементаКБК) Экспорт
	
	Результат = Новый Структура("Начало, Длина", 0, 0);
	Если ИмяЭлементаКБК = "КодГлавногоАдминистратора" Тогда
		Результат.Начало = 1;
		Результат.Длина  = 3;
	ИначеЕсли ИмяЭлементаКБК = "КодГруппыДоходов" Тогда
		Результат.Начало = 4;
		Результат.Длина  = 1;
	ИначеЕсли ИмяЭлементаКБК = "КодПодгруппыДоходов" Тогда
		Результат.Начало = 5;
		Результат.Длина  = 2;
	ИначеЕсли ИмяЭлементаКБК = "ПодгруппаДоходов" Тогда
		Результат.Начало = 4;
		Результат.Длина  = 3;
	ИначеЕсли ИмяЭлементаКБК = "КодСтатьиДоходов" Тогда
		Результат.Начало = 7;
		Результат.Длина  = 2;
	ИначеЕсли ИмяЭлементаКБК = "КодВидаДоходов" Тогда
		Результат.Начало = 4;
		Результат.Длина  = 10;
	ИначеЕсли ИмяЭлементаКБК = "КодЭлементаДоходов" Тогда
		Результат.Начало = 12;
		Результат.Длина  = 2;
	ИначеЕсли ИмяЭлементаКБК = "КодПодвидаДоходов" Тогда
		Результат.Начало = 14;
		Результат.Длина  = 4;
	ИначеЕсли ИмяЭлементаКБК = "КодОперацииСектораУправления" Тогда
		Результат.Начало = 18;
		Результат.Длина  = 3;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВидОплатыЧислом(Знач ВидОплатыИзФайла)
	
	Если ПустаяСтрока(ВидОплатыИзФайла) Тогда
		ВидОплаты = 1;
	Иначе
		Попытка
			ВидОплаты = Число(ВидОплатыИзФайла);
		Исключение
			ВидОплаты = 1;
		КонецПопытки;
	КонецЕсли;
	
	Возврат ВидОплаты;
	
КонецФункции

Функция ЭтоКомиссияБанка(Знач СтрокаДокумента)
	
	ВидОплаты = ВидОплатыЧислом(СтрокаДокумента.ВидОплаты);
	Операция  = ВРег(СтрЗаменить(СтрокаДокумента.Операция, " ", ""));
	ЭтоКомиссияБанка = СтрокаДокумента.ПолучательБИК = СтрокаДокумента.ПлательщикБИК
		И (Операция = "МЕМОРИАЛЬНЫЙОРДЕР" ИЛИ Операция = "БАНКОВСКИЙОРДЕР" ИЛИ Операция = "ВНУТРЕННИЙПЕРЕВОД")
		ИЛИ ВидОплаты > 1 И ВидОплаты <> 3;
	
	// последняя проверка по корр.счету
	Если НЕ ЭтоКомиссияБанка Тогда
		БалансовыйСчет =  Лев(СтрокаДокумента.СчетКонтрагентаДляПоиска, 5);
		Если БалансовыйСчет    = "70601" // доходы (банка)
			ИЛИ БалансовыйСчет = "61301" // Доходы (банка) будущих периодов по кредитным операциям
			ИЛИ БалансовыйСчет = "61304" // Доходы (банка) будущих периодов по другим операциям
		Тогда
			ЭтоКомиссияБанка = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЭтоКомиссияБанка;
	
КонецФункции
// Функция проверяет наличие в строке только цифр
//
Функция ЕстьНеЦифры(Знач СтрокаПроверки)
	
	Если ТипЗнч(СтрокаПроверки) <> Тип("Строка") Тогда
		Возврат Истина;
	КонецЕсли;
	
	СтрокаПроверки = СокрЛП(СтрокаПроверки);
	Длина = СтрДлина(СтрокаПроверки);
	
	Для Ном = 1 По Длина Цикл
		Если Найти("0123456789", Сред(СтрокаПроверки, Ном, 1)) = 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция БалансовыйСчет(НомерСчета) Экспорт
	
	Возврат Лев(НомерСчета, 5);
	
КонецФункции


Функция УточнитьВидОперацииДокументаПоКорсчету(ВидОперацииДокумента, Знач СтрокаДокумента)
	
	ВидОплаты      = ВидОплатыЧислом(СтрокаДокумента.ВидОплаты);
	БалансовыйСчет = БалансовыйСчет(СтрокаДокумента.СчетКонтрагентаДляПоиска);
	
	Если ПустаяСтрока(БалансовыйСчет) Тогда
		Возврат ВидОперацииДокумента;
	КонецЕсли;
	
	Если СтрокаДокумента.Исходящий Тогда
		Если БалансовыйСчет = "40817" // физические лица
			Тогда
			Если БалансовыйСчет(СтрокаДокумента.ПлательщикСчет) = "40802" // Физические лица - индивидуальные предприниматели
				И СтрДлина(СтрокаДокумента.ПлательщикИНН) = 12 И СтрДлина(СтрокаДокумента.ПолучательИНН) = 12
				И СтрокаДокумента.ПлательщикИНН = СтрокаДокумента.ПолучательИНН Тогда // это вывод средств ИП на личные нужды
				ВидОперацииДокумента = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание; // ЛичныеСредстваПредпринимателя (пока пусть будут прочее)
			Иначе
				ВидОперацииДокумента = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП;
			КонецЕсли;
		ИначеЕсли ВидОплаты = 3   // 03 - выдано (банком) по расходному кассовому ордеру
			И БалансовыйСчет = "20202" // касса кредитных организаций
			Тогда
			ВидОперацииДокумента = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание; // это выдача наличных - если отражать в банке, то через 57.01
		КонецЕсли;
	Иначе
		Если ВидОплаты = 4 // "04" поступило наличными по объявлению на взнос наличными, препроводительной ведомости
			ИЛИ БалансовыйСчет = "20202" // поступление наличных из кассы
			ИЛИ БалансовыйСчет = "20208" // поступление наличных из банкомата, устройства Cash-in
			Тогда
			ВидОперацииДокумента = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Инкассация;
		ИначеЕсли БалансовыйСчет   = "30232" // незавершенные расчеты с торгово-серсвисными предприятиями (в ред. Указания ЦБ РФ от 04.09.13 №3053-У)
			Тогда
			Если Найти(СтрокаДокумента.Получатель, "//") = 0 И Найти(СтрокаДокумента.Получатель1, "//") = 0 Тогда // это не платеж по квитанции от физ.лица
				ВидОперацииДокумента = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступлениеОтОператораПлатежнойСистемы;
				СтрокаДокумента.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("000000125");
			КонецЕсли;
		ИначеЕсли БалансовыйСчет = "30222" // незавершенные переводы и расчеты кредитной организации
			ИЛИ БалансовыйСчет   = "30233" // незавершенные расчеты с операторами услуг платежной инфраструктуры и операторами по переводу денежных средств
			Тогда
			Если Найти(СтрокаДокумента.Получатель, "//") = 0 И Найти(СтрокаДокумента.Получатель1, "//") = 0 Тогда // это не платеж по квитанции от физ.лица
				//ВидОперацииДокумента = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам;
				ВидОперацииДокумента = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПоБанковскойКарте;
			КонецЕсли;
		ИначеЕсли БалансовыйСчет = "40817" // физические лица
			Тогда
			Если БалансовыйСчет(СтрокаДокумента.ПолучательСчет) = "40802" // физические лица - индивидуальные предприниматели
				И СтрДлина(СтрокаДокумента.ПлательщикИНН) = 12 И СтрДлина(СтрокаДокумента.ПолучательИНН) = 12
				И СтрокаДокумента.ПлательщикИНН = СтрокаДокумента.ПолучательИНН Тогда // это поступление личных средства ИП на ведение предпринимательской деятельности
				ВидОперацииДокумента = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление; //ЛичныеСредстваПредпринимателя (пока пусть будут прочее)
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВидОперацииДокумента;
	
КонецФункции

&НаСервере
Функция ЗаполнитьСсылочныеДанные(СтрокаДокумента, СписокСообщений)
	
	СписокБанковскихСчетовОрганизации = ПолучитьСписокСвоихСчетов(Объект.Организация);
	
		
	//1) Определим вид платежа – входящий или исходящий
	ПлатежноеПоручение  = ВРЕГ(СтрЗаменить(СокрЛП(СтрокаДокумента.Операция), " ", "")) = "ПЛАТЕЖНОЕПОРУЧЕНИЕ";
	ПлатежноеТребование = ВРЕГ(СтрЗаменить(СокрЛП(СтрокаДокумента.Операция), " ", "")) = "ПЛАТЕЖНОЕТРЕБОВАНИЕ";
	БанковскийОрдер = ВРЕГ(СтрЗаменить(СокрЛП(СтрокаДокумента.Операция), " ", "")) = "БАНКОВСКИЙОРДЕР";
	
	Исходящий = СтрокаДокумента.ПлательщикСчет = Объект.БанковскийСчет.НомерСчета;
	СтрокаДокумента.Исходящий = Исходящий;

	
	//_______________________________________________________________________________________________________________
	//10) Определим сумму
	
	// Преобразуем из строки в число
	Буфер = СокрЛП(СтрЗаменить(СтрокаДокумента.Сумма, " ", ""));
	
	Если НЕ ЕстьНеЦифры(СтрЗаменить(СтрЗаменить(СтрЗаменить(Буфер, ".", ""), "-", ""), ",", "")) И Буфер <> "" Тогда
		Сумма = Число(Буфер);
		
		Если Сумма < 0 Тогда
			Сумма = - Сумма;
		КонецЕсли;
		
		СтрокаДокумента.СуммаДокумента = Сумма;
		Если Исходящий Тогда
			СтрокаДокумента.СуммаСписано   = Сумма;
		Иначе
			СтрокаДокумента.СуммаПоступило = Сумма;
		КонецЕсли;
	Иначе
		СписокСообщений.Добавить("Указана неверная сумма документа(" + Буфер + ")");
	КонецЕсли;
	
	  	
	//_______________________________________________________________________________________________________________
	//14) ДатаСписано и ДатаПоступило, ДатаПроведения
	// Преобразуем в дату из строки, если не пустая
	Если СтрокаДокумента.СуммаСписано <> 0 Тогда
		СтрокаДокумента.Списано = ПолучитьДатуИзСтроки(СтрокаДокумента.ДатаСписано, Ложь);
		Если ЗначениеЗаполнено(СтрокаДокумента.Списано) Тогда
			СтрокаДокумента.ДатаПроведения = СтрокаДокумента.Списано;
		Иначе СтрокаДокумента.ДатаПроведения = ПолучитьДатуИзСтроки(СтрокаДокумента.Дата, Ложь);	
		КонецЕсли;
	Иначе
		СтрокаДокумента.Списано = '00010101';
	КонецЕсли;
	
	// Преобразуем в дату из строки, если не пустая
	Если СтрокаДокумента.СуммаПоступило <> 0 Тогда
		СтрокаДокумента.Поступило = ПолучитьДатуИзСтроки(СтрокаДокумента.ДатаПоступило, Ложь);
		Если ЗначениеЗаполнено(СтрокаДокумента.Поступило) Тогда
			СтрокаДокумента.ДатаПроведения = СтрокаДокумента.Поступило;
		КонецЕсли;
	Иначе
		СтрокаДокумента.Поступило = '00010101';
	КонецЕсли;
	
	// пока Исходящие не грузим, не успела доделать, только Входящие
	//Если Исходящий Тогда СтрокаДокумента.ОписаниеОшибок = "Выгрузка исходящих платежных поручений/требований пока не возможна";
  	//Возврат Ложь; КонецЕсли;
	
	//2) Определим вид документа в программе
	ВидДокумента = ?(Исходящий, "ПлатежноеПоручениеИсходящее", "ПлатежноеПоручениеВходящее");
	ИмяДокумента = ?(Исходящий, "Списание с расчетного счета", "Поступление на расчетный счет");
	
	СтрокаДокумента.ВидДокумента = ВидДокумента;
	СтрокаДокумента.ИмяДокумента = ИмяДокумента;
	РеквизитСчета = ?(Исходящий, "ПлатежноеПоручениеИсходящее", "ПлатежноеПоручениеВходящее");
	
	//_______________________________________________________________________________________________________________
	//3) Найдем ранее загруженный (введенный вручную) документ.
	//Реквизиты для поиска: Вид документа, Дата, Номер, Номер счета.
	
	// Распознаем дату документа
	ВсеРеквизитыПоискаЕсть   = Ложь;
	ДокументНайден           = Ложь;
	СтрокаДокумента.НомерДок = СтрокаДокумента.Номер;
	
	ДатаПлДокумента  = ПолучитьДатуИзСтроки(СтрокаДокумента.Дата);
	Если НЕ ПустаяСтрока(СтрокаДокумента.ДатаСписано) Тогда
		ДатаИзСтроки = ПолучитьДатуИзСтроки(СтрокаДокумента.ДатаСписано);
	ИначеЕсли НЕ ПустаяСтрока(СтрокаДокумента.ДатаПоступило) Тогда
		ДатаИзСтроки = ПолучитьДатуИзСтроки(СтрокаДокумента.ДатаПоступило);
	Иначе
		ДатаИзСтроки = ДатаПлДокумента;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаИзСтроки) Тогда
		//СтрокаДокумента.ЕстьДатаПлатежа  = Истина;
		СтрокаДокумента.ДатаПлПоручения  = ДатаПлДокумента;
		СтрокаДокумента.ДатаДок          = ДатаИзСтроки;
		
	//	СтрокаДокумента.ЭтоПлатежноеПоручение = Исходящий И ПлатежноеПоручение;
	КонецЕсли;

	//_______________________________________________________________________________________________________________
	//4) Определяем вид операции документа
	ЭтоКомиссия = Ложь;
	СтрокаДокумента.СчетКонтрагентаДляПоиска = ?(Исходящий, СтрокаДокумента.ПолучательСчет, СтрокаДокумента.ПлательщикСчет);
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.ВидОперации) Тогда
		Если Исходящий Тогда
			Если 
				ЗначениеЗаполнено(СтрокаДокумента.СтатусСоставителя) И СокрП(СтрокаДокумента.СтатусСоставителя) <> 0 Тогда
				
				Если ЭтоНалоговыеДоходы(СтрокаДокумента.ПоказательКБК) Тогда
					ВидОперацииДокумента = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога");
				Иначе
					//ВидОперацииДокумента = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами");
					ВидОперацииДокумента = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание");
				КонецЕсли;
				
			ИначеЕсли ЭтоКомиссияБанка(СтрокаДокумента) Тогда
				ЭтоКомиссия = Истина;
				ВидОперацииДокумента = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание;
			ИначеЕсли СписокБанковскихСчетовОрганизации.НайтиСтроки(
					Новый Структура("НомерСчета, БИК", СтрокаДокумента.ПолучательСчет, СтрокаДокумента.ПолучательБИК)).Количество() > 0 Тогда
				ВидОперацииДокумента = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет;
			Иначе
				ВидОперацииДокумента = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику;
			КонецЕсли;
		Иначе // входящий платеж
			ВидОперацииДокумента = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя;
		КонецЕсли;
		
		СтрокаДокумента.ВидОперации = ВидОперацииДокумента;
	Иначе
		ВидОперацииДокумента = СтрокаДокумента.ВидОперации;
	КонецЕсли;
	
	//_______________________________________________________________________________________________________________
	//9) Определим Статью ДДС по умолчанию
	
	//Если ВидОперацииДокумента <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога
	//	И ВидОперацииДокумента <> Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Инкассация Тогда
	//	Если ЭтоКомиссия Тогда
	//		СтрокаДокумента.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("000000035");
	//	ИначеЕсли ВидОперацииДокумента = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП Тогда
	//		СтрокаДокумента.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("000000003");
	//	КонецЕсли;
	//КонецЕсли;
	
	//новые правила
	Если ВидДокумента="ПлатежноеПоручениеВходящее" Тогда
		СтрокаДокумента.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателя;
	Иначе
			
		Если ВидОперацииДокумента <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
			Если ЭтоКомиссия Тогда
				СтрокаДокумента.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("000000035");
			ИначеЕсли ВидОперацииДокумента = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП Тогда
				СтрокаДокумента.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("000000003");
			КонецЕсли;
		Иначе
			СтрокаДокумента.ВидПлатежаВБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		КонецЕсли;
		
	КонецЕсли;	
		
		//Проверка на кооректность БИКа плательщика/получателя
	Если ЗначениеЗаполнено(СтрокаДокумента.ПлательщикБИК) Тогда
		Длина = СтрДлина(СтрокаДокумента.ПлательщикБИК);
		Если    Длина = 9 И Лев(СтрокаДокумента.ПлательщикБИК, 2) <> "04"
			ИЛИ Длина = 8 И Лев(СтрокаДокумента.ПлательщикБИК, 1) <> "4"
			ИЛИ Длина < 8 Тогда
			СтрокаДокумента.ОписаниеОшибок = "Не корректный БИК (" + СтрокаДокумента.ПлательщикБИК + ") плательщика";
		ИначеЕсли Длина = 8 Тогда
			СтрокаДокумента.ПлательщикБИК = "0" + СтрокаДокумента.ПлательщикБИК;
		КонецЕсли;

	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДокумента.ПолучательБИК) Тогда
		Длина = СтрДлина(СтрокаДокумента.ПолучательБИК);
		Если    Длина = 9 И Лев(СтрокаДокумента.ПолучательБИК, 2) <> "04"
			ИЛИ Длина = 8 И Лев(СтрокаДокумента.ПолучательБИК, 1) <> "4"
			ИЛИ Длина < 8 Тогда
			СтрокаДокумента.ОписаниеОшибок = "Не корректный БИК (" + СтрокаДокумента.ПолучательБИК + ") получателя";
		ИначеЕсли Длина = 8 Тогда
			СтрокаДокумента.ПолучательБИК = "0" + СтрокаДокумента.ПолучательБИК;
		КонецЕсли;
		
	КонецЕсли;

	
	//СтрокаДокумента.ВидОперацииДокумента = ВидОперацииДокумента;
	
	//_______________________________________________________________________________________________________________
	//5) Определяем банковский счет организации
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.СчетОрганизации) Тогда
		СтрокаДокумента.СчетОрганизации = Объект.БанковскийСчет;
	КонецЕсли;
	
	//Контрагент
	
	Если СтрокаДокумента.Исходящий Тогда
		СтрокаДокумента.ИННКонтрагента  = СокрЛП(СтрокаДокумента.ПолучательИНН);
		СтрокаДокумента.КППКонтрагента  = СокрЛП(СтрокаДокумента.ПолучательКПП);
		БИК = СтрокаДокумента.ПолучательБИК;
	Иначе
		СтрокаДокумента.ИННКонтрагента  = СокрЛП(СтрокаДокумента.ПлательщикИНН);
		СтрокаДокумента.КППКонтрагента  = СокрЛП(СтрокаДокумента.ПлательщикКПП);
		БИК = СтрокаДокумента.ПлательщикБИК;
	КонецЕсли;
	
	Если БанковскийОрдер Тогда
		
		Бик=СтрокаДокумента.ПлательщикБИК;
	КонецЕСли;	
	
	Если НЕ ПустаяСтрока(СтрокаДокумента.ИННКонтрагента) Тогда
		Запрос = Новый Запрос("
		|ВЫБРАТЬ Ссылка, СтатьяДвиженияДенежныхСредств СтатьяДДС ИЗ Справочник.Контрагенты ГДЕ НЕ ПометкаУдаления И ИНН = &ИНН" + ?(СтрокаДокумента.КППКонтрагента = "0" ИЛИ СтрокаДокумента.КППКонтрагента = "", "", " И КПП = &КПП") + "; " + " 
		|ВЫБРАТЬ Ссылка, СтатьяДвиженияДенежныхСредств СтатьяДДС ИЗ Справочник.Контрагенты ГДЕ НЕ ПометкаУдаления И ИНН = &ИНН");
		
		Запрос.УстановитьПараметр("ИНН", СтрокаДокумента.ИННКонтрагента);
		Запрос.УстановитьПараметр("КПП", СтрокаДокумента.КППКонтрагента);
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		 // вначале ищем по ИНН и КПП
		Выборка = РезультатЗапроса[0].Выбрать();
		Если Выборка.Следующий() Тогда
			СтрокаДокумента.Контрагент = Выборка.Ссылка;
			
			Если ВидДокумента="ПлатежноеПоручениеИсходящее" Тогда
				Если НЕ ЗначениеЗаполнено(СтрокаДокумента.СтатьяДвиженияДенежныхСредств) Тогда
					СтрокаДокумента.СтатьяДвиженияДенежныхСредств = Выборка.СтатьяДДС; 
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			// если по ИНН и КПП не нашли, поищем толькопо ИНН, и предупредим, что по КПП не нашли
			СтрокаДокумента.ОписаниеОшибок = "Контрагент с КПП = " + Строка(СтрокаДокумента.КППКонтрагента) + " не найден. ";
		    СтрокаДокумента.Предупреждение = Истина;
			
			Выборка = РезультатЗапроса[1].Выбрать();
			Если Выборка.Следующий() Тогда
				СтрокаДокумента.Контрагент = Выборка.Ссылка;
				
				Если ВидДокумента="ПлатежноеПоручениеИсходящее" Тогда
					Если НЕ ЗначениеЗаполнено(СтрокаДокумента.СтатьяДвиженияДенежныхСредств) Тогда
						СтрокаДокумента.СтатьяДвиженияДенежныхСредств = Выборка.СтатьяДДС; 
					КонецЕсли;
				КонецЕсли
						
			Иначе
				СтрокаДокумента.ОписаниеОшибок = "Контрагент с ИНН = " + Строка(СтрокаДокумента.ИННКонтрагента) + " не найден";
				СтрокаДокумента.Предупреждение = Ложь;
				СтрокаДокумента.ЕстьОшибка = Истина;
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если Не БанковскийОрдер Тогда
			СтрокаДокумента.ОписаниеОшибок = "ИНН плательщика не заполнен, поиск контрагента невозможен";
			СтрокаДокумента.ЕстьОшибка = Истина;
			Возврат Ложь;
		КонецЕСли;
	КонецЕсли;
	
	// всякие дурацкие расчеты
	УчитыватьНДС = Объект.Организация.УчитыватьНДС;
	СтрокаДокумента.СтавкаНДС = ?(УчитыватьНДС, Перечисления.СтавкиНДС.НДС18, Перечисления.СтавкиНДС.БезНДС);
	Если СтрокаДокумента.ВидДокумента = "ПлатежноеПоручениеИсходящее"  и не БанковскийОрдер Тогда
		СтрокаДокумента.СтавкаНДС = ?(ЗначениеЗаполнено(СтрокаДокумента.Контрагент.СтавкаНДС), СтрокаДокумента.Контрагент.СтавкаНДС, СтрокаДокумента.СтавкаНДС); КонецЕсли;	
	
	СуммаВключаетНДС = Истина; // пусть будет так
	СтавкаНДСЧисло = КэшируемыеФункции.ПолучитьЧислоСтавкиНДС(СтрокаДокумента.СтавкаНДС);
	СтрокаДокумента.СуммаНДС	= СтавкаНДСЧисло * СтрокаДокумента.СуммаДокумента / (СтавкаНДСЧисло + 100);
	
	Если БанковскийОрдер и 	НЕ ЗначениеЗаполнено(СтрокаДокумента.ПолучательИНН) Тогда
		СтрокаДокумента.Контрагент="";
		СтрокаДокумента.Контрагент=Справочники.Контрагенты.НайтиПоНаименованию(СтрокаДокумента.ПлательщикБанк1);
		Если  СтрокаДокумента.Контрагент=""  или СтрокаДокумента.Контрагент=Справочники.Контрагенты.ПустаяСсылка() Тогда
			СтрокаДокумента.ОписаниеОшибок="Не найден контрагент " +  СтрокаДокумента.ПлательщикБанк1;
		Иначе
			СтрокаДокумента.ЕстьОшибка=Ложь;
        КонецЕСли;
	КонецЕсли;
		
	//БанковскийСчет    
	Если НЕ ПустаяСтрока(БИК) ИЛИ НЕ ПустаяСтрока(СтрокаДокумента.СчетКонтрагентаДляПоиска) Тогда
		
	Запрос = Новый Запрос("ВЫБРАТЬ Ссылка ПОМЕСТИТЬ Банк ИЗ Справочник.Банки ГДЕ Код = &БИК И НЕ ПометкаУдаления; ВЫБРАТЬ Ссылка ИЗ Справочник.БанковскиеСчета ГДЕ Владелец = &Контрагент И НомерСчета = &НомерСчета И Банк В (ВЫБРАТЬ Ссылка ИЗ Банк) И НЕ ПометкаУдаления");
	Запрос.УстановитьПараметр("Контрагент", СтрокаДокумента.Контрагент);
	Запрос.УстановитьПараметр("БИК", БИК);
	Запрос.УстановитьПараметр("НомерСчета", СтрокаДокумента.СчетКонтрагентаДляПоиска);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтрокаДокумента.СчетКонтрагента = Выборка.Ссылка;
	Иначе
		СтрокаДокумента.ОписаниеОшибок = СтрокаДокумента.ОписаниеОшибок + "Банковский счет " + Строка(СтрокаДокумента.СчетКонтрагентаДляПоиска) + " Контрагента не найден. Будет создан новый.";
		СтрокаДокумента.Предупреждение = Истина;
		//Возврат Ложь;
	КонецЕсли;
	
    Иначе 
		Если Не БанковскийОрдер Тогда
			СтрокаДокумента.ОписаниеОшибок = "БИК банка плательщика или Номер счета плательщика не заполнены, поиск банковского счета контрагента невозможен";
			СтрокаДокумента.ЕстьОшибка = Истина;
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
    СтрокаДокумента.ВидОперации = УточнитьВидОперацииДокументаПоКорсчету(ВидОперацииДокумента, СтрокаДокумента);
	
	//Если НазначениеПлатежа пустое, формируем его из НазначениеПлатежа1...НазначениеПлатежа6.
	Если ПустаяСтрока(СтрокаДокумента.НазначениеПлатежа) Тогда
		
		СтрокаДокумента.НазначениеПлатежа = СтрокаДокумента.НазначениеПлатежа1;
		Для й = 2 По 6 Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаДокумента["НазначениеПлатежа" + й]) Тогда
				Прервать;
			КонецЕсли;
			СтрокаДокумента.НазначениеПлатежа = СтрокаДокумента.НазначениеПлатежа + Символы.ПС + СтрокаДокумента["НазначениеПлатежа" + й];
		КонецЦикла;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСписокСвоихСчетов(Организация)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БанковскиеСчета.Ссылка КАК Ссылка,
	|	БанковскиеСчета.НомерСчета КАК НомерСчета,
	|	БанковскиеСчета.Банк.Код КАК БИК
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Владелец = &Организация";
	
	УстановитьПривилегированныйРежим(Истина);
	СписокБановскихСчетов = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	СписокБановскихСчетов.Индексы.Добавить("НомерСчета");
	СписокБановскихСчетов.Индексы.Добавить("НомерСчета, БИК");
	
	Возврат СписокБановскихСчетов;
	
КонецФункции

&НаСервере
Процедура СоздатьДокументыНаСервере(СписокСообщений)
	Для Каждого Строка Из ДокументыДляИмпорта Цикл
		
		ПлатежноеПоручение  = ВРЕГ(СтрЗаменить(СокрЛП(Строка.Операция), " ", "")) = "ПЛАТЕЖНОЕПОРУЧЕНИЕ";
		//СписокБанковскихСчетовОрганизации = ПолучитьСписокСвоихСчетов(Объект.Организация);
		Строка.ЭтоНовый = Ложь;
		
		Если Строка.Загружать Тогда //И ПлатежноеПоручение Тогда
			//ЗаполнитьСсылочныеДанные(Строка, СписокБанковскихСчетовОрганизации, СписокСообщений);
			Если НЕ Строка.ЕстьОшибка Тогда	СоздатьДокумент(Строка, СписокСообщений); КонецЕсли;
		КонецЕсли;
	КонецЦикла
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументы(Команда)
	СписокСообщений = Новый Массив;
	СоздатьДокументыНаСервере(СписокСообщений);
	Для Каждого Строка ИЗ СписокСообщений Цикл
		Сообщить(Строка);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВсе(Команда)
	Для Каждого Строка ИЗ ДокументыДляИмпорта Цикл Если НЕ Строка.ЕстьОшибка Тогда Строка.Загружать = Истина; КонецЕсли; КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсе(Команда)
	Для Каждого Строка ИЗ ДокументыДляИмпорта Цикл Строка.Загружать = Ложь; КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Организация"));
	Элементы.БанковскийСчет.СвязиПараметровВыбора  = Новый ФиксированныйМассив(НовыйМассив);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ДокументыДляИмпорта.Очистить();
	Объект.ФайлЗагрузки = "";
	
КонецПроцедуры
