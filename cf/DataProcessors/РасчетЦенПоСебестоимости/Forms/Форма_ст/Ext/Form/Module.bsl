&НаКлиенте
Перем НомерКолонкаПроцент Экспорт;
&НаКлиенте
Перем ИмяВременногоФайла Экспорт;

//	ДОПОЛНИТЕЛЬНО

&НаСервере
Процедура ВидимостьДаты(Видимость)
	
	Для Каждого Элемент Из Элементы.Цены.ПодчиненныеЭлементы Цикл
		Если Найти(Элемент.Имя, "БазовыйТипДата") Тогда
			Элемент.Видимость = Видимость;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
&НаКлиенте
Процедура ПоказатьДаты(Команда)
	
	ВидимостьДаты = НЕ Элементы.ПоказатьДаты.Пометка;
	Элементы.ПоказатьДаты.Пометка = ВидимостьДаты;
 	
	ВидимостьДаты(ВидимостьДаты);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьВсе(Команда)
	
	Строки = Элементы.Цены.ВыделенныеСтроки;
	
	Если Строки.Количество()>1 Тогда
		Для Каждого Ид Из Строки Цикл
			Строка = Цены.НайтиПоИдентификатору(Ид);
			Строка.Пометка = Истина;
		КонецЦикла;
	Иначе
		Для Каждого Строка Из Цены Цикл
			Строка.Пометка = Истина;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура СнятьВсе(Команда)
	Строки = Элементы.Цены.ВыделенныеСтроки;
	
	Если Строки.Количество()>1 Тогда
		Для Каждого Ид Из Строки Цикл
			Строка = Цены.НайтиПоИдентификатору(Ид);
			Строка.Пометка = Ложь;
		КонецЦикла;
	Иначе
		Для Каждого Строка Из Цены Цикл
			Строка.Пометка = Ложь;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры


//+
&НаСервере
Процедура СформироватьВалютныйЗаголовок(Элемент, ТипЦен)
	
	Элементы[Элемент].Заголовок = Строка(ТипЦен) + ", " + Строка(ТипЦен.Валюта);
	
КонецПроцедуры
//+
&НаСервере
Процедура ЗаполнитьДополнительныеДанные();
	
	Объект.КомиссияЗаДоставку	= Константы.КомиссияЗаДоставкуТовара.Получить();
	Объект.КомиссияЗаОплату 	= Константы.КомиссияЗаОплатуТовара.Получить();
	
	Объект.ТипЦенЗакупочный		= Константы.ТипЦенЗакупочный.Получить();
	СформироватьВалютныйЗаголовок("ЦенаЗакупочная", Объект.ТипЦенЗакупочный);
	
	ТипЦенСебестоимость 		= Константы.Себестоимость.Получить();
	СформироватьВалютныйЗаголовок("Себестоимость", ТипЦенСебестоимость);

	ВалютаУЕ = Константы.УсловнаяВалютаПриРасчетеСебестоимости.Получить();
	
КонецПроцедуры

&НаСервере
Процедура ЗадатьУсловноеОформление()
	
	СоответствиеИмен = ПолучитьСоответствияИменКолонок();
	
	ЭтаФорма.УсловноеОформление.Элементы.Очистить();
	
	Для Каждого Строка Из СоответствиеИмен Цикл
	    ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	    ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	    ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("БазовыйТипНоваяЦена" + Строка.Ключ);
	    ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	    ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Цены.БазовыйТипНоваяЦена" + Строка.Ключ);
	    ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	    ЭлементОтбора.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Цены.БазовыйТип" + Строка.Ключ);;
	    ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СветлоЖелтый);
	КонецЦикла;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
    ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("КодТНВЭД");
    ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Маркер");
    ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
    ЭлементОтбора.ПравоеЗначение = Истина;
    ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Красный);

КонецПроцедуры

//	МЕНЮ

&НаСервере
Процедура ЗаполнитьМеню()
	
	ПунктМеню = Элементы.Добавить("ПунктМенюЦеныКонкурентов", Тип("КнопкаФормы"), Элементы.Цены.КонтекстноеМеню);
	ПунктМеню.Заголовок 	= "Цены конкурентов";
	ПунктМеню.ИмяКоманды 	= "СравнитьСЦенамиКонкурентов";
	
	ПунктМеню = Элементы.Добавить("ПодменюВывестиПроцент", Тип("ГруппаФормы"), Элементы.Цены.КонтекстноеМеню);
	ПунктМеню.Вид = ВидГруппыФормы.Подменю;
	ПунктМеню.Заголовок 	= "Вывести % от";	
	
	ЗаполнитьПодменюВывестиПроцент();
	ЗаполнитьПодменюОчиститьЦены(); 
    ЗаполнитьПодменюУстановкаЦен();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодменюБазовымиТипамиЦен(ИмяПодменю, ПрефиксКоманды, Действие, ЧислоНеДинамическихПунктов = 0)
	
	// удаляем все ранее созданные кнопки
	Пока Элементы[ИмяПодменю].ПодчиненныеЭлементы.Количество() > ЧислоНеДинамическихПунктов Цикл
		Элементы.Удалить(Элементы[ИмяПодменю].ПодчиненныеЭлементы[Элементы[ИмяПодменю].ПодчиненныеЭлементы.Количество()-1]);
	КонецЦикла;
		
	// команды удалять не будем, никому не мешают
	// добавим новые команды, если их еще нет
	
	СоответствиеИмен = ПолучитьСоответствияИменКолонок();
	
	Для Каждого Строка Из СоответствиеИмен Цикл
		
			ИмяКоманды = ПрефиксКоманды + Строка.Ключ;
			
			Команда = Команды.Найти(ИмяКоманды);
			НоваяКоманда = ?(Команда = Неопределено, Команды.Добавить(ИмяКоманды), Команда);
			НоваяКоманда.Действие = Действие;
			
			ПунктМеню = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), Элементы[ИмяПодменю]);
			ПунктМеню.Заголовок 	= Строка.Значение;
			ПунктМеню.ИмяКоманды 	= ИмяКоманды;
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодменюВывестиПроцент()
	
	ЗаполнитьПодменюБазовымиТипамиЦен("ПодменюВывестиПроцент", "КомандаПроцент", "РасчитатьПроцентОт")		
		
 КонецПроцедуры
&НаСервере
Процедура ЗаполнитьПодменюОчиститьЦены()
	 ЗаполнитьПодменюБазовымиТипамиЦен("ПодменюОчистить", "КомандаОчистить", "ОчиститьЦену")
КонецПроцедуры
&НаСервере
Процедура ЗаполнитьПодменюУстановкаЦен();
	ЗаполнитьПодменюБазовымиТипамиЦен("ПодменюУстановкаЦен", "КомандаУстановкаЦен", "УстановитьЦену", 1)
КонецПроцедуры


//	ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗаполнитьМеню();
	
	НомерКолонкаПроцент = 0;

КонецПроцедуры
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.НаДату = ТекущаяДата();	
	ЗаполнитьДополнительныеДанные();
	
	ЗаполнитьСписокБазовыхКолонок();  
	СформироватьТаблицуЦен(Ложь); // при открытии обработки заполнение строк с ценами бессмысленно
	
	ЗадатьУсловноеОформление();
	
	ВидимостьДаты   = Элементы.ПоказатьДаты.Пометка;
	ВидимостьДаты(ВидимостьДаты);
	
КонецПроцедуры
&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)	
	Если Объект.Товары.Количество() Тогда
		Ответ = Вопрос("Данные были изменены. Сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена, 0);
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
		    Отказ = Истина;
		ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
			
			СохранитьКодыТНВЭД();
			
			СохранитьТаможенныеЦены();
			
			СохранитьВременноНовыеЦены(ИмяВременногоФайла);
			
		КонецЕсли;
   КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЦеныПриАктивизацииПоля(Элемент)
	
	Если Найти(Элементы.Цены.ТекущийЭлемент.Имя, "БазовыйТип") Тогда
		Элементы.ПунктМенюЦеныКонкурентов.Доступность = Истина;
	Иначе
		Элементы.ПунктМенюЦеныКонкурентов.Доступность = Ложь;
	КонецЕсли;

КонецПроцедуры

 
// ЗАГРУЗКА И СОХРАНЕНИЕ ДАННЫХ

&НаСервере
Процедура СохранитьВременноНовыеЦены(Имя)
	
	Рез = ЗначениеВФайл(КаталогВременныхФайлов() + Имя, Новый Структура("БазовыеКолонки, Цены", БазовыеКолонки.ВыгрузитьЗначения(), Цены.Выгрузить()));	

КонецПроцедуры           
&НаСервере
Процедура ПолучитьВременноНовыеЦены(Имя)
	
	ИмяФайла = КаталогВременныхФайлов() + Имя;
	
	ВремФайл = Новый Файл(ИмяФайла);
	
	Если ВремФайл.Существует() Тогда
		
		Данные = ЗначениеИзФайла(ИмяФайла);
		
		БазовыеКолонки.ЗагрузитьЗначения(Данные.БазовыеКолонки);
		ПриИзмененииСпискаБазовыхКолонок(Ложь);
		
		Цены.Загрузить(Данные.Цены); 
	КонецЕсли;		
	
КонецПроцедуры
&НаСервере
Процедура УдалитьВременноНовыеЦены(Имя)
	
	ИмяФайла = КаталогВременныхФайлов() + Имя;
	
	ВремФайл = Новый Файл(ИмяФайла);
	
	Если ВремФайл.Существует() Тогда
	
		УдалитьФайлы(ИмяФайла);
	КонецЕсли;
	
КонецПроцедуры	


// +
&НаКлиенте
Процедура ЗаполнитьТовары(Команда)
	ОткрытьФорму("Документ.Инвойс.ФормаВыбора", , ЭтаФорма);
КонецПроцедуры
//+
&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма") И ИсточникВыбора.ИмяФормы = "Обработка.РасчетСебестоимости.Форма.ФормаПодбора" Тогда
		
		ЗаполнитьТаблицу(ВыбранноеЗначение);
		
	Иначе
		
		
		ЗаполнитьТаблицу(ВыбранноеЗначение);
		
		ИмяВременногоФайла = СтрЗаменить(Строка(ВыбранноеЗначение.УникальныйИдентификатор()),"-","") + ".dat";
	 
		ПолучитьВременноНовыеЦены(ИмяВременногоФайла);
		
	КонецЕсли;
	
КонецПроцедуры
// +
&НаСервере 
Процедура ЗаполнитьТаблицу(Ссылка, ДобавитьТовары = Истина) Экспорт 
 	Запрос = Новый Запрос(" ВЫБРАТЬ
	                        |	&Ссылка										Инвойс,
							|	Пак.Номенклатура.Артикул					Артикул,
							|	Пак.Номенклатура                    		Номенклатура,
							|	Пак.НоменклатураДляТаможни.КодТНВЭД			КодТНВЭД,
							|	Пак.НоменклатураДляТаможни					НоменклатураДляТаможни,
							|	Пак.Количество								Количество,	
							|	Пак.Упаковка								Упаковка,
							|   Пак.Количество/Пак.Упаковка.Коэффициент 						КоличествоМест,			
							|	Пак.Упаковка.ВесНетто*(Пак.Количество/Пак.Упаковка.Коэффициент)   	НеттоИтого,																			
							|   Пак.Упаковка.ВесБрутто*(Пак.Количество/Пак.Упаковка.Коэффициент)  	БруттоИтого,
							|	Рег.ЦенаПоРиску,
							|	Рег.Пошлина,
							|	Рег.КоэффициентТаможенногоПлатежа,
							|	Зак.Цена 		ЦенаЗакупочная
							|ИЗ
							|	Документ.Инвойс.ТоварыПакинг Пак
							|	ЛЕВОЕ СОЕДИНЕНИЕ
							|		РегистрСведений.ТаможенныеЦены.СрезПоследних() Рег
			                |	ПО
							|		Пак.НоменклатураДляТаможни = Рег.НоменклатураДляТаможни
							|	ЛЕВОЕ СОЕДИНЕНИЕ
							|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, ТипЦен = &Закупочная) Зак
							|	ПО	
							|		Пак.Номенклатура = Зак.Номенклатура
							|ГДЕ
							|	Ссылка = &Ссылка
							|");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Дата", Объект.НаДату);
	Запрос.УстановитьПараметр("Закупочная", Объект.ТипЦенЗакупочный);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Если НЕ ДобавитьТовары Тогда
			Объект.Товары.Загрузить(РезультатЗапроса.Выгрузить());
		Иначе
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				НоваяСтрока = Объект.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
 	ПересчитатьТаблицу();
	
КонецПроцедуры
// + 
&НаСервере                               
Процедура ЗаполнитьТаблицуЦен()
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
		
	СоответствиеИмен = ПолучитьСоответствияЦен();
	
	Цены.Очистить();
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос("	ВЫБРАТЬ
							|	Товары.Номенклатура,
							|   Товары.ТаможенныйПлатежИтого		ТаможенныйПлатеж,
							|	Товары.Количество
							//|	Товары.ЦенаЗакупочная
							|ПОМЕСТИТЬ
							|	ТоварыДокумента
							|ИЗ
							|	&ВыбТаблица КАК Товары");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	                                     
	Запрос.УстановитьПараметр("ВыбТаблица", Объект.Товары.Выгрузить());
	Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ
					|	Тов.Номенклатура,
					|	"" "" + Тов.Номенклатура.Артикул Артикул,
					|	Тов.Количество,
					//|	Тов.ЦенаЗакупочная,
					|	Ном.ТаможенныйПлатеж,
					|	Спр.ТипЦен,
					|	ЕСТЬNULL(Рег.Цена,0)*(ЕСТЬNULL(Цен.Курс,1)*ЕСТЬNULL(Баз.Кратность,1))/(ЕСТЬNULL(Цен.Кратность,1)*ЕСТЬNULL(Баз.Курс,1)) Цена,  // приводим цену из установки цен к валюте типа цен
					|	ЕСТЬNULL(Рег.Цена,0)*(ЕСТЬNULL(Цен.Курс,1)*ЕСТЬNULL(Баз.Кратность,1))/(ЕСТЬNULL(Цен.Кратность,1)*ЕСТЬNULL(Баз.Курс,1)) НоваяЦена,
					|	Спр.ТипЦен.Валюта 	Валюта,   // валюта типа цен
					|	Рег.Период,
					|	Рег.Валюта,					// валюта установки цен
					|	Зак.Цена	ЦенаЗакупочная,
					|	ЕСТЬNULL(Баз.Курс,1)		КурсБаза,
					|	ЕСТЬNULL(Баз.Кратность,1)	КратностьБаза,
					|	ЕСТЬNULL(Усл.Курс,1)	    КурсУЕ,
					|	ЕСТЬNULL(Усл.Кратность,1)	КратностьУЕ,
					|	ВЫБОР КОГДА ЕСТЬNULL(Зак.Цена, 0) = 0 ТОГДА 0 ИНАЧЕ Ном.ТаможенныйПлатеж/(Тов.Количество*Зак.Цена) + 1 КОНЕЦ Удорожание,
					|	ЕСТЬNULL(Рег.Цена,0)*ЕСТЬNULL(Цен.Курс,1)*ЕСТЬNULL(Усл.Кратность,1)/((Ном.ТаможенныйПлатеж/Тов.Количество + ЕСТЬNULL(Зак.Цена,0))*ЕСТЬNULL(Усл.Курс,1)*ЕСТЬNULL(Цен.Кратность,1))	Процент,					
					|	(Ном.ТаможенныйПлатеж/Тов.Количество + ЕСТЬNULL(Зак.Цена,0))*(ЕСТЬNULL(Усл.Курс,1)*ЕСТЬNULL(Себ.Кратность,1)/ЕСТЬNULL(Себ.Курс,1)*ЕСТЬNULL(Усл.Кратность,1)) Себестоимость,
					|	Ном.ТаможенныйПлатеж/Тов.Количество + ЕСТЬNULL(Зак.Цена,0) СебестоимостьУЕ
                    |ИЗ
					|	ТоварыДокумента Тов
					|	ЛЕВОЕ СОЕДИНЕНИЕ
					|		(	ВЫБРАТЬ
					|				МАКСИМУМ(Таб.Номенклатура)		Номенклатура,
					|				СУММА(Таб.ТаможенныйПлатеж)		ТаможенныйПлатеж
					|			ИЗ
					|				ТоварыДокумента Таб
					|			СГРУППИРОВАТЬ ПО Таб.Номенклатура	
					|		) Ном
					|	ПО 
					|		Ном.Номенклатура = Тов.Номенклатура
					|	ЛЕВОЕ СОЕДИНЕНИЕ
					|		(	ВЫБРАТЬ
					|				Тип.Ссылка	ТипЦен
					|			ИЗ
					|				Справочник.ТипыЦен Тип
					|			ГДЕ
					|				Тип.Ссылка В (&ТипыЦен)
					|		) Спр
					|	ПО ИСТИНА
					|	ЛЕВОЕ СОЕДИНЕНИЕ
					|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, ТипЦен В (&ТипыЦен)) Рег
					|	ПО 
					|		Тов.Номенклатура = Рег.Номенклатура И Спр.ТипЦен = Рег.ТипЦен
					|	ЛЕВОЕ СОЕДИНЕНИЕ
					|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, ТипЦен = &Закупочная) Зак
					|	ПО
					|		Тов.Номенклатура = Зак.Номенклатура
					|	ЛЕВОЕ СОЕДИНЕНИЕ
					|		РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &ВалютаСебестоимости) Себ	// курс валют себестоимости
					|	ПО ИСТИНА
					|	ЛЕВОЕ СОЕДИНЕНИЕ
					|		РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &ВалютаУЕ) Усл             // курс валют УЕ
					|	ПО ИСТИНА
					|	ЛЕВОЕ СОЕДИНЕНИЕ
					|		РегистрСведений.КурсыВалют.СрезПоследних(&Дата) Баз             					// курс валют базовой колонки
					|	ПО Спр.ТипЦен.Валюта = Баз.Валюта
					|	ЛЕВОЕ СОЕДИНЕНИЕ
					|		РегистрСведений.КурсыВалют.СрезПоследних(&Дата) Цен             					// курс валют установки цен базовой колонки
					|	ПО Рег.Валюта = Цен.Валюта 
					|	ИТОГИ МАКСИМУМ(Тов.Количество), МАКСИМУМ(Ном.ТаможенныйПлатеж), МАКСИМУМ(ЦенаЗакупочная), МАКСИМУМ(Удорожание), МАКСИМУМ(Себестоимость), 
					|	МАКСИМУМ(СебестоимостьУЕ), МАКСИМУМ(КурсУЕ), МАКСИМУМ(КратностьУЕ) ПО Тов.Номенклатура";

	Запрос.УстановитьПараметр("ТипыЦен", БазовыеКолонки);
	Запрос.УстановитьПараметр("Дата", Объект.НаДату);
	Запрос.УстановитьПараметр("Закупочная", Объект.ТипЦенЗакупочный);
	Запрос.УстановитьПараметр("ВалютаУЕ", ВалютаУЕ);
	Запрос.УстановитьПараметр("ВалютаСебестоимости", ТипЦенСебестоимость.Валюта);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаТовары = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		Пока ВыборкаТовары.Следующий() Цикл
			
			НоваяСтрока = Цены.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаТовары);
			
			НоваяСтрока.Пометка = Истина;
			
			Выборка = ВыборкаТовары.Выбрать();
			
			Если БазовыеКолонки.Количество() Тогда  // пока так
				Пока Выборка.Следующий() Цикл
					
					ТипЦен = Выборка.ТипЦен;
					Если ЗначениеЗаполнено(ТипЦен) Тогда
					
						НоваяСтрока["БазовыйТип" + СоответствиеИмен[ТипЦен]] = Выборка.Цена;
						НоваяСтрока["БазовыйТипНоваяЦена" + СоответствиеИмен[ТипЦен]] = Выборка.НоваяЦена;
						НоваяСтрока["БазовыйТипДата" + СоответствиеИмен[ТипЦен]] = Выборка.Период;
						НоваяСтрока["БазовыйТипПроцент" + СоответствиеИмен[ТипЦен]] = Выборка.Процент;
	                    НоваяСтрока["БазовыйТипКурс" + СоответствиеИмен[ТипЦен]] = ?(ЗначениеЗаполнено(Выборка.КурсБаза), Выборка.КурсБаза, 1);
						НоваяСтрока["БазовыйТипКратность" + СоответствиеИмен[ТипЦен]] = ?(ЗначениеЗаполнено(Выборка.КратностьБаза), Выборка.КратностьБаза, 1);
						
					КонецЕсли;

				КонецЦикла;
			КонецЕсли;
		
		КонецЦикла;
	КонецЕсли;
					
КонецПроцедуры
// +
&НаКлиенте
Процедура РасчетЦен(Команда)
	
	Если ЗначениеЗаполнено(Объект.ТипЦенЗакупочный) Тогда
		ЗаполнитьТаблицуЦен();
	Иначе
		ОбщиеФункции.СообщитьТекст("Тип цен закупочный не заполнен", "Объект.ТипЦенЗакупочный", Объект);
	КонецЕсли;
	
КонецПроцедуры
// +
&НаКлиенте
Процедура ЗагрузитьИзExcel(Команда)
	
	ОткрытьФорму("Обработка.РасчетСебестоимости.Форма.ЗагрузкаДанных", , ЭтаФорма);
	
КонецПроцедуры



&НаСервере
Процедура СохранитьКодыТНВЭД()
	
	Для Каждого Строка Из Объект.Товары Цикл
		
		Товар = Строка.НоменклатураДляТаможни;
		
		Если ЗначениеЗаполнено(Товар) И Товар.КодТНВЭД <> Строка.КодТНВЭД Тогда
			ТоварОбъект = Товар.ПолучитьОбъект();
			ТоварОбъект.КодТНВЭД = Строка.КодТНВЭД;
			Попытка
				ТоварОбъект.Записать();
			Исключение
				Сообщить("Ошибка сохранения кода ТНВЭД: " + ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
&НаСервере
Процедура СохранитьТаможенныеЦены()
	
	Менеджер = РегистрыСведений.ТаможенныеЦены;
	
	Для Каждого Строка Из Объект.Товары Цикл
		Если ЗначениеЗаполнено(Строка.НоменклатураДляТаможни) И (Строка.ЦенаПоРиску+Строка.КоэффициентТаможенногоПлатежа+Строка.Пошлина)>0 Тогда
			Запись = Менеджер.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, Строка);
			Запись.Период = Объект.НаДату;
			
			Запись.Записать();
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры	


//	ПЕРЕСЧЕТЫ
&НаСервере
Процедура ПересчитатьПроцентОт(ТекущиеДанные, ИмяКолонки, ИмяКолонкиОснование)
	Если ЗначениеЗаполнено(ТекущиеДанные["БазовыйТипНоваяЦена" + ИмяКолонкиОснование]) Тогда
		ТекущиеДанные[ИмяКолонки + ИмяКолонкиОснование] = ТекущиеДанные["БазовыйТипНоваяЦена" + ИмяКолонки]*(ТекущиеДанные["БазовыйТипКурс" + ИмяКолонки]*ТекущиеДанные["БазовыйТипКратность" + ИмяКолонкиОснование])/(ТекущиеДанные["БазовыйТипКратность" + ИмяКолонки]*ТекущиеДанные["БазовыйТипКурс" + ИмяКолонкиОснование])/ТекущиеДанные["БазовыйТипНоваяЦена" + ИмяКолонкиОснование];
	Иначе
		ТекущиеДанные[ИмяКолонки + ИмяКолонкиОснование] = 0;
	КонецЕсли
КонецПроцедуры
&НаСервере
Процедура ПересчитатьПроцентСебестоимости(ТекущиеДанные, ИмяКолонки)
	ТекущиеДанные["БазовыйТипПроцент" + ИмяКолонки] = (ТекущиеДанные["БазовыйТипНоваяЦена" + ИмяКолонки]*ТекущиеДанные["БазовыйТипКурс" + ИмяКолонки]*ТекущиеДанные["КратностьУЕ"])/(ТекущиеДанные.СебестоимостьУЕ*ТекущиеДанные["КурсУЕ"]*ТекущиеДанные["БазовыйТипКратность" + ИмяКолонки]);
КонецПроцедуры
&НаСервере
Процедура ПересчитатьНовуюЦену(ТекущиеДанные, ИмяКолонки)
	ТекущиеДанные["БазовыйТипНоваяЦена" + ИмяКолонки] = ТекущиеДанные["БазовыйТипПроцент" + ИмяКолонки]*ТекущиеДанные.СебестоимостьУЕ*ТекущиеДанные.КурсУЕ*ТекущиеДанные["БазовыйТипКратность" + ИмяКолонки]/(ТекущиеДанные.КратностьУЕ * ТекущиеДанные["БазовыйТипКурс" + ИмяКолонки])
КонецПроцедуры

&НаСервере
Процедура ЦеныПересчеты(Идентификатор, ИмяКолонки, ПересчитатьНовуюЦену = Ложь, ПересчитатьПроцентСеб = Истина) Экспорт
	
	ТекущиеДанные = Цены.НайтиПоИдентификатору(Идентификатор);
	
	Если ПересчитатьНовуюЦену Тогда
		ПересчитатьНовуюЦену(ТекущиеДанные, ИмяКолонки);
	КонецЕсли;
	
	Если ПересчитатьПроцентСеб Тогда
		ПересчитатьПроцентСебестоимости(ТекущиеДанные, ИмяКолонки);
	КонецЕсли;
	
    // пересчитать процент от базовой колонки
	
	Строки = КолонкиПроцент.НайтиСтроки(Новый Структура("Колонка", ИмяКолонки));
		
	Для Каждого Строка Из Строки Цикл
		ПересчитатьПроцентОт(ТекущиеДанные, Строка.Колонка, Строка.КолонкаОснование);
	КонецЦикла;
	
	Строки = КолонкиПроцент.НайтиСтроки(Новый Структура("КолонкаОснование", ИмяКолонки));
	
	Для Каждого Строка Из Строки Цикл
		ПересчитатьПроцентОт(ТекущиеДанные, Строка.Колонка, Строка.КолонкаОснование);
	КонецЦикла;

	
КонецПроцедуры

&НаКлиенте
Процедура НоваяЦенаПриИзменении(Элемент);
	
	ИмяКолонки = СтрЗаменить(Элемент.Имя, "БазовыйТипНоваяЦена", ""); 
	ЦеныПересчеты(Элементы.Цены.ТекущиеДанные.ПолучитьИдентификатор(), ИмяКолонки);	
	
КонецПроцедуры
&НаКлиенте
Процедура ПроцентПриИзменении(Элемент)
	
	ИмяКолонки = СтрЗаменить(Элемент.Имя, "БазовыйТипПроцент", "");
	ЦеныПересчеты(Элементы.Цены.ТекущиеДанные.ПолучитьИдентификатор(), ИмяКолонки, Истина, Ложь);
	
КонецПроцедуры


// +
&НаСервере
Процедура ПересчитатьТаблицу()
	
	Для Каждого Строка Из Объект.Товары Цикл
		Пересчеты(Строка.ПолучитьИдентификатор());
	КонецЦикла
	
КонецПроцедуры
// +
&НаСервере
Процедура Пересчеты(Идентификатор, ИмяПоля = "") Экспорт
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Идентификатор);
			
	ТекущиеДанные.ТаможенныйПлатежЧистый = ТекущиеДанные.НеттоИтого * ТекущиеДанные.ЦенаПоРиску;
	
	// какой-то работающий бред
	Если ИмяПоля = "ТаможенныйПлатеж" Тогда
		ТекущиеДанные.КоэффициентТаможенногоПлатежа = ТекущиеДанные.ТаможенныйПлатеж/ТекущиеДанные.ТаможенныйПлатежЧистый;
	ИначеЕсли ИмяПоля = "КоэффициентТаможенногоПлатежа" Тогда
		ТекущиеДанные.ТаможенныйПлатеж = ТекущиеДанные.ТаможенныйПлатежЧистый * ТекущиеДанные.КоэффициентТаможенногоПлатежа;
	Иначе
		
		Если ЗначениеЗаполнено(ТекущиеДанные.ТаможенныйПлатеж) Тогда
			ТекущиеДанные.КоэффициентТаможенногоПлатежа = ТекущиеДанные.ТаможенныйПлатеж/ТекущиеДанные.ТаможенныйПлатежЧистый;
		ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.КоэффициентТаможенногоПлатежа) Тогда
				ТекущиеДанные.ТаможенныйПлатеж = ТекущиеДанные.ТаможенныйПлатежЧистый * ТекущиеДанные.КоэффициентТаможенногоПлатежа;
		КонецЕсли;
	КонецЕсли;
	
	ТекущиеДанные.ТаможенныйПлатежСТранспортнымиРасходами = ((ТекущиеДанные.БруттоИтого/Объект.Товары.Итог("БруттоИтого"))*Объект.ОбщийРасходТранспортировки + ТекущиеДанные.ТаможенныйПлатеж)*(1+Объект.КомиссияЗаДоставку);
	ТекущиеДанные.ТаможенныйПлатежИтого = ТекущиеДанные.ТаможенныйПлатежСТранспортнымиРасходами + ТекущиеДанные.ЦенаЗакупочная*ТекущиеДанные.Количество*Объект.КомиссияЗаОплату;
	
КонецПроцедуры


//+
&НаКлиенте
Процедура ЦенаПоРискуПриИзменении(Элемент)
	Пересчеты(Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор());
КонецПроцедуры
//+
&НаКлиенте
Процедура ТоварыТаможенныйПлатежПриИзменении(Элемент)
	Пересчеты(Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор(), Элемент.Имя);
КонецПроцедуры
//+
&НаКлиенте
Процедура КоэффициентТаможенногоПлатежаПриИзменении(Элемент)
	Пересчеты(Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор(), Элемент.Имя);
КонецПроцедуры
//+
&НаКлиенте
Процедура ОбщийРасходТранспортировкиПриИзменении(Элемент)
	
	Если Объект.Товары.Количество() Тогда
		
		ПересчитатьТаблицу();
		
	КонецЕсли;
	Если Цены.Количество() Тогда
		
		ЗаполнитьТаблицуЦен(); // расчет цен
		
	КонецЕсли;

КонецПроцедуры
//+
&НаКлиенте
Процедура Константы(Команда)	
	Ответ = ОткрытьФорму("ОбщаяФорма.ФормаКонстантСебестоимости",,,,,,Новый ОписаниеОповещения("ОбработкаВызоваФормыКонстант",ЭтаФорма,Новый Структура("Команда", Команда)));
КонецПроцедуры
&НаКлиенте
Процедура ОбработкаВызоваФормыКонстант(Результат, Параметры) Экспорт
	Если Результат <> Неопределено Тогда
		Если Объект.Товары.Количество() Тогда
			
			ЗаполнитьДополнительныеДанные();
			ПересчитатьТаблицу();

		КонецЕсли;
		Если Цены.Количество() Тогда
			
			РасчетЦен(Параметры.Команда);
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
//	ДИНАМИЧЕСКИЕ КОЛОНКИ

&НаСервере
Процедура ЗаполнитьСписокБазовыхКолонок()
	
	Запрос = Новый Запрос("ВЫБРАТЬ Ссылка ИЗ Справочник.ТипыЦен ГДЕ Базовый = ИСТИНА");
	
	БазовыеКолонки.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
		
КонецПроцедуры
&НаСервере
Функция ПолучитьСписокКолонок()
	
	Запрос = Новый Запрос("ВЫБРАТЬ Ссылка ИЗ Справочник.ТипыЦен ГДЕ НЕ ПометкаУдаления УПОРЯДОЧИТЬ ПО Наименование");
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

 &НаСервере
Функция ПолучитьСоответствияИменКолонок()
	
	Соответствия	= Новый Соответствие;
	
	Для Каждого Элемент Из БазовыеКолонки Цикл
		Соответствия.Вставить(СтрЗаменить(Строка(Элемент.Значение.УникальныйИдентификатор()),"-",""), Элемент.Значение);
	КонецЦикла;
	
	Возврат Соответствия;
	
КонецФункции
&НаСервере
Функция ПолучитьСоответствияЦен() Экспорт
	
	Соответствия	= Новый Соответствие;
	
	Для Каждого Элемент Из БазовыеКолонки Цикл
			
		Соответствия.Вставить(Элемент.Значение, СтрЗаменить(Строка(Элемент.Значение.УникальныйИдентификатор()),"-",""));
		
	КонецЦикла;
	
	Возврат Соответствия;
	
КонецФункции

&НаСервере
Функция ДобавитьПолеФормы(Имя, ПутьКДанным, Родитель, Заголовок = Неопределено, ОбработчикПриИзменении = "", ТолькоПросмотр = Ложь)
	                     	// уникальное имя     тип      родитель       
	НовоеПоле = Элементы.Добавить(Имя, Тип("ПолеФормы"), Родитель);
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = ПутьКДанным;
	НовоеПоле.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Центр;
	НовоеПоле.Заголовок = ?(ЗначениеЗаполнено(Заголовок), Заголовок, "");
	НовоеПоле.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
	НовоеПоле.ТолькоПросмотр = ТолькоПросмотр;
	//НовоеПоле.ОтображатьВШапке = ВШапке;
	
	Если ЗначениеЗаполнено(ОбработчикПриИзменении) Тогда
		НовоеПоле.УстановитьДействие("ПриИзменении", ОбработчикПриИзменении);
	КонецЕсли;
	
	Возврат НовоеПоле;
	
КонецФункции
&НаСервере
Функция ДобавитьГруппуФормы(Имя, Родитель, Заголовок = Неопределено)
	                            // уникально имя      тип         родитель(таблица формы) 
	НоваяГруппа = Элементы.Добавить(Имя, Тип("ГруппаФормы"), Родитель);	
	НоваяГруппа.Заголовок = ?(ЗначениеЗаполнено(Заголовок), Заголовок, "");
	НоваяГруппа.Вид = ВидГруппыФормы.ГруппаКолонок;
	НоваяГруппа.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Центр;
	НоваяГруппа.Группировка = ГруппировкаКолонок.Горизонтальная;
	НоваяГруппа.ОтображатьВШапке = Истина;
	
	Возврат НоваяГруппа;
	
КонецФункции

&НаСервере
Процедура ПриИзмененииСпискаБазовыхКолонок(Перезапись)
	
	ЗаполнитьПодменюВывестиПроцент();
    ЗаполнитьПодменюОчиститьЦены();
    ЗаполнитьПодменюУстановкаЦен();
	
	ЗадатьУсловноеОформление();
	
	// Обновим таблицу
		
	СформироватьТаблицуЦен(Перезапись);
	
	ВидимостьДаты(Элементы.ПоказатьДаты.Пометка);
	
КонецПроцедуры

&НаКлиенте
Процедура БазовыеКолонкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Колонки	 	 = ПолучитьСписокКолонок();
	СписокВыбора = Новый СписокЗначений;
	
	// Проставим отметки
	
	СписокВыбора.ЗагрузитьЗначения(Колонки);
	
	Для Каждого ЭлементСписка Из СписокВыбора Цикл
		
		ЭлементСписка.Пометка = БазовыеКолонки.НайтиПоЗначению(ЭлементСписка.Значение) <> Неопределено;
		
	КонецЦикла;
	
	// Выберем
	
	Если СписокВыбора.ОтметитьЭлементы("Выбор базовых колонок:") Тогда
		
		// Созадим список
		
		БазовыеКолонки.Очистить();
		Для Каждого ЭлементСписка Из СписокВыбора Цикл
			Если ЭлементСписка.Пометка Тогда
			
				БазовыеКолонки.Добавить(ЭлементСписка.Значение);
				
			КонецЕсли;
		КонецЦикла;
		
		ПриИзмененииСпискаБазовыхКолонок(Истина);

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СформироватьТаблицуЦен(Перезапись)
	
	СоответствияИмен = ПолучитьСоответствияИменКолонок();
	
	ТипЧисло 	= Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 2, ДопустимыйЗнак.Неотрицательный));
	ТипДата		= Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	
	// старые колонки
	КолонкиТаблицы = Новый Массив;
	
	Для Каждого Элемент Из ПолучитьРеквизиты("Цены") Цикл
		ИмяРеквизита = Элемент.Имя;
		Если Найти(ИмяРеквизита, "БазовыйТип") Тогда
			
			КолонкиТаблицы.Добавить("Цены." + ИмяРеквизита); // путь к реквизиту
			
		КонецЕсли;
	КонецЦикла;
	
	// удалим старые колонки
	ИзменитьРеквизиты(,КолонкиТаблицы);
	
	// новые колонки
	КолонкиТаблицы.Очистить();
	
	Для Каждого Элемент Из СоответствияИмен Цикл
		
		ИмяКолонки = Элемент.Ключ;
         														  // имя          тип     путь      заголовок   сохраняемый реквизит формы
  		КолонкиТаблицы.Добавить(Новый РеквизитФормы("БазовыйТип" + ИмяКолонки, ТипЧисло, "Цены", Строка(Элемент.Значение) + ", " + Строка(Элемент.Значение.Валюта), Истина));
		КолонкиТаблицы.Добавить(Новый РеквизитФормы("БазовыйТипДата" + ИмяКолонки, ТипДата, "Цены", "Дата установки", Истина));
		КолонкиТаблицы.Добавить(Новый РеквизитФормы("БазовыйТипПроцент" + ИмяКолонки, ТипЧисло, "Цены",  "% (" + Элемент.Значение + ")", Истина));
 		КолонкиТаблицы.Добавить(Новый РеквизитФормы("БазовыйТипНоваяЦена" + ИмяКолонки, ТипЧисло, "Цены", , Истина));
		КолонкиТаблицы.Добавить(Новый РеквизитФормы("БазовыйТипКурс" + ИмяКолонки, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 4, ДопустимыйЗнак.Неотрицательный)), "Цены", , Истина));
		КолонкиТаблицы.Добавить(Новый РеквизитФормы("БазовыйТипКратность" + ИмяКолонки, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)), "Цены", , Истина));
	КонецЦикла;
	
	ИзменитьРеквизиты(КолонкиТаблицы);
	
	// Удалим колонки на форме
		
	Пока Элементы.Цены.ПодчиненныеЭлементы.Количество() > 7 Цикл
		Элементы.Удалить(Элементы.Цены.ПодчиненныеЭлементы[Элементы.Цены.ПодчиненныеЭлементы.Количество() - 1]);
	КонецЦикла;
	
	КолонкиПроцент.Очистить();
	
	// Добавим колонки на форме
	
	Для Каждого Элемент Из СоответствияИмен Цикл
	
		ИмяКолонки = Элемент.Ключ;
		
		НоваяГруппа = ДобавитьГруппуФормы("Группа" + ИмяКолонки, Элементы.Цены, Элемент.Значение);
		
		СформироватьВалютныйЗаголовок(НоваяГруппа.Имя, Элемент.Значение);
		
		ДобавитьПолеФормы("БазовыйТип" + ИмяКолонки, "Цены." + "БазовыйТип" + ИмяКолонки, НоваяГруппа, "Старая цена");
		ДобавитьПолеФормы("БазовыйТипПроцент" + ИмяКолонки, "Цены." + "БазовыйТипПроцент" + ИмяКолонки, НоваяГруппа, "%", "ПроцентПриИзменении");
		ДобавитьПолеФормы("БазовыйТипНоваяЦена" + ИмяКолонки, "Цены." + "БазовыйТипНоваяЦена" + ИмяКолонки, НоваяГруппа, "Новая цена", "НоваяЦенаПриИзменении");
		
		
		//ПунктМеню = Элементы.Добавить("КМ" + ИмяКолонки, Тип("КнопкаФормы"), НовоеПоле.КонтекстноеМеню);
		//ПунктМеню.Заголовок 	= "Цены аналогов колонка";
		//ПунктМеню.ИмяКоманды 	= "СравнитьСЦенамиКонкурентов";
		
        ДобавитьПолеФормы("БазовыйТипДата" + ИмяКолонки, "Цены." + "БазовыйТипДата" + ИмяКолонки, Элементы.Цены);
				
	 КонецЦикла;
	
	// Заполним строки
	Если Перезапись Тогда
		ЗаполнитьТаблицуЦен();
	КонецЕсли;
	
КонецПроцедуры


//	ФУНКЦИОНАЛ

&НаКлиенте
Процедура СравнитьСЦенамиКонкурентов(Команда)
	
	СоответствиеИмен = ПолучитьСоответствияИменКолонок();

	ИмяКолонки = СтрЗаменить(Элементы.Цены.ТекущийЭлемент.Родитель.Имя, "Группа", "");
	ОткрытьФорму("Обработка.РасчетСебестоимости.Форма.ЦеныКонкурентов", Новый Структура("БазовыйТипЦен", СоответствиеИмен[ИмяКолонки]), ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЦену(Команда)
	
	Ответ = Вопрос("Данные по новым ценам будут удалены. Очистить цены?", РежимДиалогаВопрос.ДаНет, 0);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
	    Возврат;
	КонецЕсли;	
	
	ИмяКолонки = СтрЗаменить(Команда.Имя, "КомандаОчистить", "");
	
	Для Каждого Строка Из Цены Цикл
		Если Строка.Пометка Тогда
			Строка["БазовыйТипНоваяЦена" + ИмяКолонки] = 0;
			ЦеныПересчеты(Строка.ПолучитьИдентификатор(), ИмяКолонки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЦеныНаПроцент(Команда)
	
	ОткрытьФорму("Обработка.РасчетСебестоимости.Форма.ИзменениеЦенНаПроцент", Новый Структура("ТипыЦен", БазовыеКолонки), ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчитатьПроцентОт(Команда)
	
	Если НЕ Найти(Элементы.Цены.ТекущийЭлемент.Имя, "БазовыйТип") Тогда
		Сообщить("Рачитать процент можно только между базовыми колонками");
		Возврат;
	КонецЕсли;
	
		
	ИмяКолонки = СтрЗаменить(Элементы.Цены.ТекущийЭлемент.Родитель.Имя, "Группа", "");
	ИмяКолонкиОснование = СтрЗаменить(Команда.Имя, "КомандаПроцент", "");
	
	Строки = КолонкиПроцент.НайтиСтроки(Новый Структура("УникальноеИмя", ИмяКолонки +  ИмяКолонкиОснование));
	
	Если НЕ Строки.Количество() Тогда
		РасчитатьПроцентОтНаСервере(ИмяКолонки, ИмяКолонкиОснование);
	КонецЕсли;

	Если Элементы["КомандаПроцент" + ИмяКолонкиОснование].Пометка Тогда
		Элементы[ИмяКолонки +  ИмяКолонкиОснование].Видимость = Ложь;
	Иначе
		Элементы[ИмяКолонки +  ИмяКолонкиОснование].Видимость = Истина;
	КонецЕсли;  	
	
	Элементы["КомандаПроцент" + ИмяКолонкиОснование].Пометка = Элементы[ИмяКолонки +  ИмяКолонкиОснование].Видимость;

КонецПроцедуры
&НаСервере
Процедура РасчитатьПроцентОтНаСервере(ИмяКолонки, ИмяКолонкиОснование)
	
	СоответствиеИмен = ПолучитьСоответствияИменКолонок();
	
	ТипЦен = СоответствиеИмен[ИмяКолонки];
	ТипЦенОснование = СоответствиеИмен[ИмяКолонкиОснование];
	
	УникальноеИмя = ИмяКолонки + ИмяКолонкиОснование;
		
	// добавим новый реквизит
	КолонкиТаблицы = Новый Массив;
	КолонкиТаблицы.Добавить(Новый РеквизитФормы(УникальноеИмя, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 2, ДопустимыйЗнак.Неотрицательный)), "Цены", , Истина));
	    	
	ИзменитьРеквизиты(КолонкиТаблицы);
		
	// добавим реквизит на форму
	ДобавитьПолеФормы(УникальноеИмя, "Цены." + УникальноеИмя, Элементы.Цены, "% " + Строка(ТипЦен)+ "/" +Строка(ТипЦенОснование), , Истина);
	
	Строка = КолонкиПроцент.Добавить();
	Строка.Колонка = ИмяКолонки;
	Строка.КолонкаОснование = ИмяКолонкиОснование;
	Строка.УникальноеИмя = УникальноеИмя;
	
	Для Каждого Строка Из Цены Цикл
		ПересчитатьПроцентОт(Строка, ИмяКолонки, ИмяКолонкиОснование);
	КонецЦикла;
	
КонецПроцедуры	

//	УСТАНОВКА ЦЕН

&НаСервере
Процедура РасчитатьСебестоимость()

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос("	ВЫБРАТЬ
							|	Товары.Номенклатура,
							|   Товары.Количество,
							|	Товары.Себестоимость
							|ПОМЕСТИТЬ
							|	ТоварыДокумента
							|ИЗ
							|	&ВыбТаблица КАК Товары");

	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	                                     
	Запрос.УстановитьПараметр("ВыбТаблица", Цены.Выгрузить());
	Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ
	|	Таб.Номенклатура,
	|	Таб.Себестоимость,
	| 	&Себестоимость	ТипЦен,
	|	Рег.Цена		СтЦена,
	|	Рег.Валюта		СтВалюта,
	|	Рег.ТипЦен		СтТипЦен,
	|	Ост.КоличествоОстаток,
	|	Таб.Количество,
	|	ВЫБОР КОГДА Рег.Цена ЕСТЬ NULL ТОГДА
	|		Таб.Себестоимость
	|	ИНАЧЕ
	|		(Таб.Количество*Таб.Себестоимость + ЕСТЬNULL(Ост.КоличествоОстаток,0)*ЕСТЬNULL(Рег.Цена,0)*(ЕСТЬNULL(Себ.Курс,1)*ЕСТЬNULL(Цен.Кратность,1))/(ЕСТЬNULL(Себ.Кратность,1)*ЕСТЬNULL(Цен.Курс,1)))/(Таб.Количество + ЕСТЬNULL(Ост.КоличествоОстаток,0))
	|																				// приводим цену из установки цен к типу цен себестоимости
	|	КОНЕЦ	Цена
	|ИЗ
	|	ТоварыДокумента Таб
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, ТипЦен = &Себестоимость) Рег  
	|	ПО
	|		Таб.Номенклатура = Рег.Номенклатура
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ТоварыНаСкладах.Остатки(&Дата) Ост
	|	ПО
	|		Таб.Номенклатура = Ост.Номенклатура
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &ВалютаСебестоимости) Себ	// курс валют себестоимости
	|	ПО ИСТИНА
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.КурсыВалют.СрезПоследних(&Дата) Цен             					// курс валют установки цен базовой колонки
	|	ПО Рег.Валюта = Цен.Валюта 
	|";	
	
	Запрос.УстановитьПараметр("Дата", Объект.НаДату);
	Запрос.УстановитьПараметр("Себестоимость", ТипЦенСебестоимость);
	Запрос.УстановитьПараметр("ВалютаСебестоимости", ТипЦенСебестоимость.Валюта);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Себестоимость.Загрузить(РезультатЗапроса.Выгрузить());
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСебестоимость(Команда)
	
	РасчитатьСебестоимость();
	
	Форма = ПолучитьФорму("Документ.УстановкаЦенНоменклатуры.ФормаОбъекта");
	
	СписокТиповЦен = Новый СписокЗначений;
	СписокТиповЦен.Добавить(ТипЦенСебестоимость);
	    
	Форма.СписокТиповЦен = СписокТиповЦен;
    
    Таблица = Форма.Объект.Товары;
 
    Для Каждого Строка Из Себестоимость Цикл
    	
    	НоваяСтрока = Таблица.Добавить();
    	
    	ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
    	НоваяСтрока.ДатаНачала = Объект.НаДату;
		
    КонецЦикла;
	
	Форма.СформироватьТаблицуТоваров(Истина);
	
    Форма.Открыть();

КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦену(Команда)
	
	// определим тип цен, для которого выбрана установка цены
	ИмяКолонки = СтрЗаменить(Команда.Имя, "КомандаУстановкаЦен", "");
	
	СоответствиеИмен = ПолучитьСоответствияИменКолонок();
    ТипЦены = СоответствиеИмен[ИмяКолонки];
	
	Форма = ПолучитьФорму("Документ.УстановкаЦенНоменклатуры.ФормаОбъекта");
	
	СписокТиповЦен = Новый СписокЗначений;
	СписокТиповЦен.Добавить(ТипЦены);
	
	Форма.СписокТиповЦен = СписокТиповЦен;
	    
    Таблица = Форма.Объект.Товары;
	
	КолонкаСЦеной = "БазовыйТипНоваяЦена" + ИмяКолонки;
	
	Для Каждого Строка Из Цены Цикл
		
		Если Строка[КолонкаСЦеной] <> Строка["БазовыйТип" + ИмяКолонки] Тогда
		
	    	НоваяСтрока = Таблица.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	    		
	    	НоваяСтрока.ТипЦен		= ТипЦены;
	    	НоваяСтрока.Цена	 	= Строка[КолонкаСЦеной];
			НоваяСтрока.ДатаНачала	= Объект.НаДату;
		КонецЕсли;
		
	КонецЦикла;
	
	Форма.СформироватьТаблицуТоваров(Истина);
	
    Форма.Открыть();
	
КонецПроцедуры

// EXCEL

&НаСервере                          
Функция ПолучитьКолонки()
	
	Таблица = Цены.Выгрузить();
	СписокКолонок = Новый СписокЗначений;
	
	Для Каждого Колонка Из Таблица.Колонки Цикл
		СписокКолонок.Добавить(Колонка.Имя);
    КонецЦикла;
	
	Возврат СписокКолонок;
	
КонецФункции

&НаКлиенте
Процедура СохранитьВЕксель(Команда)
	
	//ДВ = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	//ДВ.Фильтр =  "Эксель (*.xls)|*.xls*";
	//
	//Если ДВ.Выбрать() Тогда
	//	
	//	ИмяФайла = ДВ.ПолноеИмяФайла;
	//	
	//КонецЕсли;
	//
	//Если ПустаяСтрока(ИмяФайла) Тогда
	//	ОбщиеФункции.СообщитьТекст("Не выбран файл", "ИмяФайла", Объект);
	//	Возврат;
	//КонецЕсли;
	//
	Попытка
		Эксель = Новый COMОбъект("Excel.Application");
	Исключение
		стрОшибки = ОписаниеОшибки();
		стрОшибки = "Ошибка инициализации екселя
						|" + стрОшибки;
		Возврат;
	КонецПопытки;

	Книга = Эксель.WorkBooks.Add();
	Лист = Эксель.ActiveSheet;
	
	
	Колонки = ПолучитьКолонки();

	к=1;
		
	Для Каждого Колонка Из Колонки Цикл
		с=1;
		Лист.Cells(с,к).Value=Строка(Колонка.Значение);
		к = к+1;
		

		Для Каждого Запись Из Цены Цикл
			с = с+1;
			Если ТипЗнч(Запись[Колонка.Значение]) <> Тип("Строка") ИЛИ ТипЗнч(Запись[Колонка.Значение]) <> Тип("Число") Тогда 
				Лист.Cells(с,к).Value=Строка(Запись[Колонка.Значение]);
			ИначеЕсли ТипЗнч(Запись[Колонка.Значение]) = Тип("Число") Тогда 
				Лист.Cells(с,к).NumberFormat = "0,00";

			   	Лист.Cells(с,к).Value=Число(Запись[Колонка.Значение]);
				
			Иначе
				Лист.Cells(с,к).Value=Запись[Колонка.Значение];
			КонецЕсли;
			Если Запись.Пометка Тогда
				Лист.Cells(с,к).Interior.ColorIndex = 35;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
    Эксель.Visible         = Истина;
	//Попытка
	//	Книга.SaveAs(ИмяФайла);
	//Исключение
	// 	Сообщить(ОписаниеОшибки()+" Файл не сохранен!");
	//	Возврат;
	//КонецПопытки;
	//
	//Эксель = 0;
	
	// Получим эксель
	
		
	//ЭтаФорма.Закрыть();


КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	ОткрытьФорму("Обработка.РасчетСебестоимости.Форма.ФормаПодбора", , ЭтаФорма);
КонецПроцедуры

