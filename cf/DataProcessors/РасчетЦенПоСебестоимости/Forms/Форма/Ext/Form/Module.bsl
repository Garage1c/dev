&НаКлиенте
Перем ИмяВременногоФайла Экспорт;
&НаКлиенте
Перем СтруктураКолонокТовары Экспорт;

//	ДОПОЛНИТЕЛЬНО

&НаСервере
Процедура ВидимостьДаты(Видимость)
	
	Для Каждого Элемент Из Элементы.Цены.ПодчиненныеЭлементы Цикл
		Если Найти(Элемент.Имя, "БазовыйТипДата") Тогда
			Элемент.Видимость = Видимость;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
&НаКлиенте
Процедура ПоказатьДаты(Команда)
	
	ВидимостьДаты = НЕ Элементы.ПоказатьДаты.Пометка;
	Элементы.ПоказатьДаты.Пометка = ВидимостьДаты;
 	
	ВидимостьДаты(ВидимостьДаты);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьВсе(Команда)
	
	Строки = Элементы.Цены.ВыделенныеСтроки;
	
	Если Строки.Количество()>1 Тогда
		Для Каждого Ид Из Строки Цикл
			Строка = Цены.НайтиПоИдентификатору(Ид);
			Строка.Пометка = Истина;
		КонецЦикла;
	Иначе
		Для Каждого Строка Из Цены Цикл
			Строка.Пометка = Истина;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура СнятьВсе(Команда)
	Строки = Элементы.Цены.ВыделенныеСтроки;
	
	Если Строки.Количество()>1 Тогда
		Для Каждого Ид Из Строки Цикл
			Строка = Цены.НайтиПоИдентификатору(Ид);
			Строка.Пометка = Ложь;
		КонецЦикла;
	Иначе
		Для Каждого Строка Из Цены Цикл
			Строка.Пометка = Ложь;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// УСЛОВНОЕ ОФОРМЛЕНИЕ

&НаСервере
Процедура СформироватьВалютныйЗаголовок(Элемент, ТипЦен, Валюта = Неопределено)
	
	Если Валюта = Неопределено Тогда Валюта = ТипЦен.Валюта; КонецЕсли;
	
	Элементы[Элемент].Заголовок = Строка(ТипЦен) + ", " + Строка(Валюта);
	
КонецПроцедуры
&НаСервере
Процедура ЗадатьУсловноеОформление()
	
	СоответствиеИмен = ПолучитьСоответствияИменКолонок();
	
	ЭтаФорма.УсловноеОформление.Элементы.Очистить();
	
	Для Каждого Строка Из СоответствиеИмен Цикл
	    ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	    ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	    ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("БазовыйТипНоваяЦена" + Строка.Ключ);
	    ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	    ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Цены.БазовыйТипНоваяЦена" + Строка.Ключ);
	    ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	    ЭлементОтбора.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Цены.БазовыйТип" + Строка.Ключ);;
	    ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СветлоЖелтый);
	КонецЦикла;
	
	//ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	//ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	//ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Цены");
	//ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Цены.Пометка");
	//ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//ЭлементОтбора.ПравоеЗначение = Ложь;
	//ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WindowsЦвета.ТеньКнопкиСветлая);

КонецПроцедуры

//	МЕНЮ

&НаСервере
Процедура ЗаполнитьМеню()
	
	ПунктМеню = Элементы.Добавить("ПунктМенюЦеныКонкурентов", Тип("КнопкаФормы"), Элементы.Цены.КонтекстноеМеню);
	ПунктМеню.Заголовок 	= "Цены конкурентов";
	ПунктМеню.ИмяКоманды 	= "СравнитьСЦенамиКонкурентов";
	
	ПунктМеню = Элементы.Добавить("ПодменюВывестиПроцент", Тип("ГруппаФормы"), Элементы.Цены.КонтекстноеМеню);
	ПунктМеню.Вид = ВидГруппыФормы.Подменю;
	ПунктМеню.Заголовок 	= "Вывести % от";	
	
	ЗаполнитьПодменюВывестиПроцент();
	ЗаполнитьПодменюОчиститьЦены(); 
    ЗаполнитьПодменюУстановкаЦен();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодменюБазовымиТипамиЦен(ИмяПодменю, ПрефиксКоманды, Действие, ЧислоНеДинамическихПунктов = 0)
	
	// удаляем все ранее созданные кнопки
	Пока Элементы[ИмяПодменю].ПодчиненныеЭлементы.Количество() > ЧислоНеДинамическихПунктов Цикл
		Элементы.Удалить(Элементы[ИмяПодменю].ПодчиненныеЭлементы[Элементы[ИмяПодменю].ПодчиненныеЭлементы.Количество()-1]);
	КонецЦикла;
		
	// команды удалять не будем, никому не мешают
	// добавим новые команды, если их еще нет
	
	СоответствиеИмен = ПолучитьСоответствияИменКолонок();
	
	Для Каждого Строка Из СоответствиеИмен Цикл
		
			ИмяКоманды = ПрефиксКоманды + Строка.Ключ;
			
			Команда = Команды.Найти(ИмяКоманды);
			НоваяКоманда = ?(Команда = Неопределено, Команды.Добавить(ИмяКоманды), Команда);
			НоваяКоманда.Действие = Действие;
			
			ПунктМеню = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), Элементы[ИмяПодменю]);
			ПунктМеню.Заголовок 	= Строка.Значение;
			ПунктМеню.ИмяКоманды 	= ИмяКоманды;
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодменюВывестиПроцент()
	
	ЗаполнитьПодменюБазовымиТипамиЦен("ПодменюВывестиПроцент", "КомандаПроцент", "РасчитатьПроцентОт")		
		
 КонецПроцедуры
&НаСервере
Процедура ЗаполнитьПодменюОчиститьЦены()
	 ЗаполнитьПодменюБазовымиТипамиЦен("ПодменюОчистить", "КомандаОчистить", "ОчиститьЦену")
КонецПроцедуры
&НаСервере
Процедура ЗаполнитьПодменюУстановкаЦен()
	ЗаполнитьПодменюБазовымиТипамиЦен("ПодменюУстановкаЦен", "КомандаУстановкаЦен", "УстановитьЦену")
КонецПроцедуры
&НаКлиенте
Процедура ЦеныПриАктивизацииПоля(Элемент)
	
	Если Найти(Элементы.Цены.ТекущийЭлемент.Имя, "БазовыйТип") Тогда
		Элементы.ПунктМенюЦеныКонкурентов.Доступность = Истина;
	Иначе
		Элементы.ПунктМенюЦеныКонкурентов.Доступность = Ложь;
	КонецЕсли;

КонецПроцедуры
 
//	СЛУЖЕБНЫЕ

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗаполнитьМеню();

КонецПроцедуры
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТипЦенСебестоимость = Справочники.ТипыЦен.НайтиПоКоду("000000028"); // Себестоимость(УЕ) //Константы.Себестоимость.Получить();
	Объект.НаДату = ТекущаяДата();	
		
	ЗаполнитьСписокБазовыхКолонок();  
	СформироватьТаблицуЦен(Ложь); // при открытии обработка заполнение строк с ценами бессмысленно
	
	ЗадатьУсловноеОформление();
	
	ВидимостьДаты = Элементы.ПоказатьДаты.Пометка;
	ВидимостьДаты(ВидимостьДаты);
		
КонецПроцедуры
&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)	
   // Если Цены.Количество() Тогда
   // 	Ответ = Вопрос("Данные были изменены. Сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена, 0);
   // 	Если Ответ = КодВозвратаДиалога.Отмена Тогда
   // 		Отказ = Истина;
   // 	ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
   // 		
   // 		СохранитьВременноНовыеЦены(ИмяВременногоФайла);
   // 		
   // 	КонецЕсли;
   //КонецЕсли;
КонецПроцедуры

// СОХРАНИТЬ

&НаСервере
Процедура СохранитьВременноНовыеЦены(Имя)
	
	Рез = ЗначениеВФайл(КаталогВременныхФайлов() + Имя, Новый Структура("БазовыеКолонки, Цены", БазовыеКолонки.ВыгрузитьЗначения(), Цены.Выгрузить()));	

КонецПроцедуры           
&НаСервере
Процедура ПолучитьВременноНовыеЦены(Имя)
	
	ИмяФайла = КаталогВременныхФайлов() + Имя;
	
	ВремФайл = Новый Файл(ИмяФайла);
	
	Если ВремФайл.Существует() Тогда
		
		Данные = ЗначениеИзФайла(ИмяФайла);
		
		БазовыеКолонки.ЗагрузитьЗначения(Данные.БазовыеКолонки);
		ПриИзмененииСпискаБазовыхКолонок(Ложь);
		
		Цены.Загрузить(Данные.Цены); 
	КонецЕсли;		
	
КонецПроцедуры

// ЗАПОЛНИТЬ

&НаКлиенте
Процедура ЗаполнитьСебестоимость(Команда)
	
	ОткрытьФорму("Документ.РасчетСебестоимости.ФормаВыбора", , ЭтаФорма);	
	
КонецПроцедуры
&НаСервере
Процедура ЗаполнитьДополнительныеДанные(Ссылка)
	
	ТипЦенЗакупочный 	= Ссылка.ТипЦенЗакупочный;
//	ВалютаРасчетов		= Ссылка.Валюта;
	
	СформироватьВалютныйЗаголовок("ЦенаЗакупочная", ТипЦенЗакупочный);
	СформироватьВалютныйЗаголовок("Себестоимость",  ТипЦенСебестоимость, Константы.ВалютаУправленческогоУчета.Получить());
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	//ИмяВременногоФайла = СтрЗаменить(Строка(ВыбранноеЗначение.УникальныйИдентификатор()),"-","") + ".dat";
	//ПолучитьВременноНовыеЦены(ИмяВременногоФайла);
	
    ЗаполнитьДополнительныеДанные(ВыбранноеЗначение);
	Объект.РасчетСебестоимости = ВыбранноеЗначение;
	ЗаполнитьТаблицуЦен(ВыбранноеЗначение);
			
КонецПроцедуры

&НаСервере                               
Процедура ЗаполнитьТаблицуЦен(Ссылка)
	
	
	КурсОплаты	 = Ссылка.КурсОплаты;
	КурсУЕ		 = 	ОбщиеФункции.ПолучитьКурсВалюты(Ссылка.Валюта, Неопределено); 
	Если НЕ КурсПереводаСебестоимости Тогда КурсПереводаСебестоимости  = КурсУЕ; КонецЕсли;
	
	ЗаполнитьДанныеТаблицы(Ссылка.Себестоимость.Выгрузить(,"Номенклатура").ВыгрузитьКолонку("Номенклатура"), Истина);
	
	Возврат;
	
	СоответствиеИмен = ПолучитьСоответствияЦен();
	
	Цены.Очистить();
	
	Запрос = Новый Запрос;
	
	// пока запрос берет все данные напрямую из документа, в дальнейшем можно реализовать подбор номенклатуры и выборку данных из регистра РасчетНоменклатуры
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	Тов.Номенклатура,
					|	"" "" + Тов.Номенклатура.Артикул Артикул,
					|	Тов.Количество,
					|	Тов.ЦенаЗакупочная,
					//|	Тов.ТаможенныйПлатеж,
					|	Тов.Удорожание, " +                     // Переводим цену из валюты документа в валюту управленческого учета
					?(КурсПереводаСебестоимости <> 0, " 					
					|	Тов.МаркетинговаяСебестоимостьУЕ* &КурсСеб * ЕСТЬNULL(ВалУпр.Кратность, 1)/ЕСТЬNULL(ВалУпр.Курс, 1) Себестоимость, "
					,"
					|	Тов.МаркетинговаяСебестоимостьУЕ*(ЕСТЬNULL(ВалДок.Курс, 1) * ЕСТЬNULL(ВалУпр.Кратность, 1)) / (ЕСТЬNULL(ВалУпр.Курс, 1) * ЕСТЬNULL(ВалДок.Кратность, 1)) Себестоимость," ) + "
					|	Спр.ТипЦен,
					|	Спр.Валюта 					Валюта,   // валюта типа цен базовой колонки
					|	ЕСТЬNULL(Рег.Цена,0)*(ЕСТЬNULL(Цен.Курс,1)*ЕСТЬNULL(Баз.Кратность,1))/(ЕСТЬNULL(Цен.Кратность,1)*ЕСТЬNULL(Баз.Курс,1)) Цена,  // приводим цену из установки цен к валюте типа цен
					|	ЕСТЬNULL(Рег.Цена,0)*(ЕСТЬNULL(Цен.Курс,1)*ЕСТЬNULL(Баз.Кратность,1))/(ЕСТЬNULL(Цен.Кратность,1)*ЕСТЬNULL(Баз.Курс,1)) НоваяЦена, // НоваяЦена = Цена
					|	Рег.Период,
					|	Рег.Валюта,	
					|	Тов.Ссылка.КурсОплаты КурсОплаты,
					// валюта установки цен базовой колонки
					//|	Зак.Цена	ЦенаЗакупочная,
					|	ЕСТЬNULL(Баз.Курс,1)		КурсБаза,
					|	ЕСТЬNULL(Баз.Кратность,1)	КратностьБаза
					//|	ЕСТЬNULL(Усл.Курс,1)	    КурсУЕ,
					//|	ЕСТЬNULL(Усл.Кратность,1)	КратностьУЕ,
					//|	(ЕСТЬNULL(Рег.Цена,0)*ЕСТЬNULL(Цен.Курс,1)/ЕСТЬNULL(Цен.Кратность,1))/Тов.МаркетинговаяСебестоимость	Процент					
					//|	Тов.ТаможенныйПлатеж/Тов.Количество + Тов.ЦенаЗакупочная СебестоимостьУЕ
                    |ИЗ
					|	Документ.РасчетСебестоимости.Себестоимость Тов
					|	ЛЕВОЕ СОЕДИНЕНИЕ
					|		(	ВЫБРАТЬ
					|				Тип.Ссылка	ТипЦен,
					|				Тип.Валюта	Валюта
					|			ИЗ
					|				Справочник.ТипыЦен Тип
					|			ГДЕ
					|				Тип.Ссылка В (&ТипыЦен)
					|		) Спр
					|	ПО ИСТИНА
					|	ЛЕВОЕ СОЕДИНЕНИЕ
					|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, ТипЦен В (&ТипыЦен)) Рег
					|	ПО 
					|		Тов.Номенклатура = Рег.Номенклатура И Спр.ТипЦен = Рег.ТипЦен                       // цена для базовой колонки в валюте установки цен
					|	ЛЕВОЕ СОЕДИНЕНИЕ
					|		РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &ВалютаУпр) ВалУпр             // курс валют Руб.
					|	ПО ИСТИНА
					|	ЛЕВОЕ СОЕДИНЕНИЕ
					|		РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &ВалютаДокумента) ВалДок       // курс валюты документа РасчетСебестоимости
					|	ПО ИСТИНА
					
					//|	ЛЕВОЕ СОЕДИНЕНИЕ
					//|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, ТипЦен = &Закупочная) Зак
					//|	ПО
					//|		Тов.Номенклатура = Зак.Номенклатура
					//|	ЛЕВОЕ СОЕДИНЕНИЕ
					//|		РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &ВалютаСебестоимости) Себ	// курс валют себестоимости
					//|	ПО ИСТИНА
					//|	ЛЕВОЕ СОЕДИНЕНИЕ
					//|		РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &ВалютаУЕ) Усл             // курс валют УЕ
					//|	ПО ИСТИНА
					|	ЛЕВОЕ СОЕДИНЕНИЕ
					|		РегистрСведений.КурсыВалют.СрезПоследних(&Дата) Баз             					// курс валют типа цен базовой колонки
					|	ПО Спр.Валюта = Баз.Валюта
					|	ЛЕВОЕ СОЕДИНЕНИЕ
					|		РегистрСведений.КурсыВалют.СрезПоследних(&Дата) Цен             					// курс валют установки цен базовой колонки
					|	ПО Рег.Валюта = Цен.Валюта 
					|	ГДЕ Тов.Ссылка = &Ссылка
					|	ИТОГИ МАКСИМУМ(Количество), МАКСИМУМ(ЦенаЗакупочная), МАКСИМУМ(Удорожание), МАКСИМУМ(Себестоимость), МАКСИМУМ(КурсОплаты)
					|	//МАКСИМУМ(ТаможенныйПлатеж),  
					|	//МАКСИМУМ(СебестоимостьУЕ),
					|	//МАКСИМУМ(КурсУЕ), МАКСИМУМ(КратностьУЕ) 
					|	ПО Тов.Номенклатура";
    Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ТипыЦен", БазовыеКолонки);
	Запрос.УстановитьПараметр("Дата", Объект.НаДату);
	//Запрос.УстановитьПараметр("Закупочная", ТипЦенЗакупочный);
	//Запрос.УстановитьПараметр("ВалютаУЕ", ВалютаРасчетов);
	//Запрос.УстановитьПараметр("ВалютаСебестоимости", ОбщиеФункции.ПолучитьЗначениеКонстантыВОбласти("ВалютаУправленческогоУчета"));
	Запрос.УстановитьПараметр("ВалютаУпр", Константы.ВалютаУправленческогоУчета.Получить());
	Запрос.УстановитьПараметр("ВалютаДокумента", Ссылка.Валюта);
	Запрос.УстановитьПараметр("КурсСеб", КурсПереводаСебестоимости);

	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаТовары = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		Пока ВыборкаТовары.Следующий() Цикл
			
			НоваяСтрока = Цены.Добавить();
				
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаТовары);
			
			НоваяСтрока.Пометка = Истина;
			
			Выборка = ВыборкаТовары.Выбрать();
			
			Если БазовыеКолонки.Количество() Тогда  // пока так
				Пока Выборка.Следующий() Цикл
					
					ТипЦен = Выборка.ТипЦен;
					Если ЗначениеЗаполнено(ТипЦен) Тогда
					   	ИмяКолонки = СоответствиеИмен[ТипЦен];
						НоваяСтрока["БазовыйТип" + ИмяКолонки] 			= Выборка.Цена;
						НоваяСтрока["БазовыйТипНоваяЦена" + ИмяКолонки] = Выборка.НоваяЦена;
						НоваяСтрока["БазовыйТипДата" + ИмяКолонки] 		= Выборка.Период;
	                    НоваяСтрока["БазовыйТипКурс" + ИмяКолонки] 		= ?(ЗначениеЗаполнено(Выборка.КурсБаза), Выборка.КурсБаза, 1);
						НоваяСтрока["БазовыйТипКратность" + ИмяКолонки] = ?(ЗначениеЗаполнено(Выборка.КратностьБаза), Выборка.КратностьБаза, 1);
						Если НоваяСтрока.Себестоимость <> 0 Тогда
							ПересчитатьПроцентСебестоимости(НоваяСтрока, ИмяКолонки);
						КонецЕсли;
				КонецЕсли;

				КонецЦикла;
			КонецЕсли;
		
		КонецЦикла;
	КонецЕсли;
					
КонецПроцедуры


//	ПЕРЕСЧЕТЫ

&НаСервере
Процедура ПересчитатьПроцентОт(ТекущиеДанные, ИмяКолонки, ИмяКолонкиОснование)
	Если ЗначениеЗаполнено(ТекущиеДанные["БазовыйТипНоваяЦена" + ИмяКолонкиОснование]) Тогда
		ТекущиеДанные[ИмяКолонки + ИмяКолонкиОснование] = ТекущиеДанные["БазовыйТипНоваяЦена" + ИмяКолонки]*(ТекущиеДанные["БазовыйТипКурс" + ИмяКолонки]*ТекущиеДанные["БазовыйТипКратность" + ИмяКолонкиОснование])/(ТекущиеДанные["БазовыйТипКратность" + ИмяКолонки]*ТекущиеДанные["БазовыйТипКурс" + ИмяКолонкиОснование])/ТекущиеДанные["БазовыйТипНоваяЦена" + ИмяКолонкиОснование];
	Иначе
		ТекущиеДанные[ИмяКолонки + ИмяКолонкиОснование] = 0;
	КонецЕсли
КонецПроцедуры
&НаСервере
Процедура ПересчитатьПроцентСебестоимости(ТекущиеДанные, ИмяКолонки)
	ТекущиеДанные["БазовыйТипПроцент" + ИмяКолонки] = (ТекущиеДанные["БазовыйТипНоваяЦена" + ИмяКолонки]*ТекущиеДанные["БазовыйТипКурс" + ИмяКолонки]/ТекущиеДанные["БазовыйТипКратность" + ИмяКолонки])/ТекущиеДанные.Себестоимость;
КонецПроцедуры
&НаСервере
Процедура ПересчитатьНовуюЦену(ТекущиеДанные, ИмяКолонки)
	ТекущиеДанные["БазовыйТипНоваяЦена" + ИмяКолонки] = ТекущиеДанные["БазовыйТипПроцент" + ИмяКолонки]*ТекущиеДанные.Себестоимость*ТекущиеДанные["БазовыйТипКратность" + ИмяКолонки]/ТекущиеДанные["БазовыйТипКурс" + ИмяКолонки];
КонецПроцедуры

&НаСервере
Процедура ЦеныПересчеты(Идентификатор, ИмяКолонки, ПересчитатьНовуюЦену = Ложь, ПересчитатьПроцентСеб = Истина) Экспорт
	
	ТекущиеДанные = Цены.НайтиПоИдентификатору(Идентификатор);
	
	Если ПересчитатьНовуюЦену Тогда
		ПересчитатьНовуюЦену(ТекущиеДанные, ИмяКолонки);
	КонецЕсли;
	
	Если ПересчитатьПроцентСеб Тогда
		ПересчитатьПроцентСебестоимости(ТекущиеДанные, ИмяКолонки);
	КонецЕсли;
	
    // пересчитать процент от базовой колонки
	
	Строки = КолонкиПроцент.НайтиСтроки(Новый Структура("Колонка", ИмяКолонки));
		
	Для Каждого Строка Из Строки Цикл
		ПересчитатьПроцентОт(ТекущиеДанные, Строка.Колонка, Строка.КолонкаОснование);
	КонецЦикла;
	
	Строки = КолонкиПроцент.НайтиСтроки(Новый Структура("КолонкаОснование", ИмяКолонки));
	
	Для Каждого Строка Из Строки Цикл
		ПересчитатьПроцентОт(ТекущиеДанные, Строка.Колонка, Строка.КолонкаОснование);
	КонецЦикла;

	
КонецПроцедуры

&НаКлиенте
Процедура НоваяЦенаПриИзменении(Элемент);
	
	ИмяКолонки = СтрЗаменить(Элемент.Имя, "БазовыйТипНоваяЦена", "");
	ЦеныПересчеты(Элементы.Цены.ТекущиеДанные.ПолучитьИдентификатор(), ИмяКолонки);	
	
КонецПроцедуры
&НаКлиенте
Процедура ПроцентПриИзменении(Элемент)
	
	ИмяКолонки = СтрЗаменить(Элемент.Имя, "БазовыйТипПроцент", "");
	ПересчитатьНовуюЦену = Истина;
	ПересчитатьПроцентСеб = Ложь;
	ЦеныПересчеты(Элементы.Цены.ТекущиеДанные.ПолучитьИдентификатор(), ИмяКолонки, ПересчитатьНовуюЦену, ПересчитатьПроцентСеб);
	
КонецПроцедуры

//	БАЗОВЫЕ КОЛОНКИ

&НаСервере
Процедура ЗаполнитьСписокБазовыхКолонок()
	
	Запрос = Новый Запрос("ВЫБРАТЬ Ссылка ИЗ Справочник.ТипыЦен ГДЕ Базовый = ИСТИНА И НЕ ПометкаУдаления");
	
	БазовыеКолонки.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
		
КонецПроцедуры
&НаСервере
Функция ПолучитьСписокКолонок()
	
	Запрос = Новый Запрос("ВЫБРАТЬ Ссылка ИЗ Справочник.ТипыЦен ГДЕ НЕ ПометкаУдаления УПОРЯДОЧИТЬ ПО Наименование");
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

 &НаСервере
Функция ПолучитьСоответствияИменКолонок()
	
	Соответствия	= Новый Соответствие;
	
	Для Каждого Элемент Из БазовыеКолонки Цикл
		Соответствия.Вставить(СтрЗаменить(Строка(Элемент.Значение.УникальныйИдентификатор()),"-",""), Элемент.Значение);
	КонецЦикла;
	
	Возврат Соответствия;
	
КонецФункции
&НаСервере
Функция ПолучитьСоответствияЦен() Экспорт
	
	Соответствия	= Новый Соответствие;
	
	Для Каждого Элемент Из БазовыеКолонки Цикл
			
		Соответствия.Вставить(Элемент.Значение, СтрЗаменить(Строка(Элемент.Значение.УникальныйИдентификатор()),"-",""));
		
	КонецЦикла;
	
	Возврат Соответствия;
	
КонецФункции

&НаСервере
Функция ДобавитьПолеФормы(Имя, ПутьКДанным, Родитель, Заголовок = Неопределено, ОбработчикПриИзменении = "", ТолькоПросмотр = Ложь)
	                     	// уникальное имя     тип      родитель       
	НовоеПоле = Элементы.Добавить(Имя, Тип("ПолеФормы"), Родитель);
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = ПутьКДанным;
	НовоеПоле.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Центр;
	НовоеПоле.Заголовок = ?(ЗначениеЗаполнено(Заголовок), Заголовок, "");
	НовоеПоле.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
	НовоеПоле.ТолькоПросмотр = ТолькоПросмотр;
	//НовоеПоле.ОтображатьВШапке = ВШапке;
	
	Если ЗначениеЗаполнено(ОбработчикПриИзменении) Тогда
		НовоеПоле.УстановитьДействие("ПриИзменении", ОбработчикПриИзменении);
	КонецЕсли;
	
	Возврат НовоеПоле;
	
КонецФункции
&НаСервере
Функция ДобавитьГруппуФормы(Имя, Родитель, Заголовок = Неопределено)
	                            // уникально имя      тип         родитель(таблица формы) 
	НоваяГруппа = Элементы.Добавить(Имя, Тип("ГруппаФормы"), Родитель);	
	НоваяГруппа.Заголовок = ?(ЗначениеЗаполнено(Заголовок), Заголовок, "");
	НоваяГруппа.Вид = ВидГруппыФормы.ГруппаКолонок;
	НоваяГруппа.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Центр;
	НоваяГруппа.Группировка = ГруппировкаКолонок.Горизонтальная;
	НоваяГруппа.ОтображатьВШапке = Истина;
	
	Возврат НоваяГруппа;
	
КонецФункции

&НаСервере
Процедура ПриИзмененииСпискаБазовыхКолонок(Перезапись)
	
	ЗаполнитьПодменюВывестиПроцент();
    ЗаполнитьПодменюОчиститьЦены();
    ЗаполнитьПодменюУстановкаЦен();
	
	ЗадатьУсловноеОформление();
	
	// Обновим таблицу
		
	СформироватьТаблицуЦен(Перезапись);
	
	ВидимостьДаты(Элементы.ПоказатьДаты.Пометка);
	
КонецПроцедуры

&НаКлиенте
Процедура БазовыеКолонкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если БазовыеКолонки.Количество() И Цены.Количество() Тогда
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Текст = "Цены, установленные для текущих типов цен будут очищены. Продолжить выполнение операции?";		
		Ответ = Вопрос(Текст, Режим, 0);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
		    Возврат;
		КонецЕсли;	 
		
	КонецЕсли;
	
	Колонки	 	 = ПолучитьСписокКолонок();
	СписокВыбора = Новый СписокЗначений;
	
	// Проставим отметки
	
	СписокВыбора.ЗагрузитьЗначения(Колонки);
	
	Для Каждого ЭлементСписка Из СписокВыбора Цикл
		
		ЭлементСписка.Пометка = БазовыеКолонки.НайтиПоЗначению(ЭлементСписка.Значение) <> Неопределено;
		
	КонецЦикла;
	
	// Выберем
	
	Если СписокВыбора.ОтметитьЭлементы("Выбор базовых колонок:") Тогда
		
		// Созадим список
		
		БазовыеКолонки.Очистить();
		Для Каждого ЭлементСписка Из СписокВыбора Цикл
			Если ЭлементСписка.Пометка Тогда
			
				БазовыеКолонки.Добавить(ЭлементСписка.Значение);
				
			КонецЕсли;
		КонецЦикла;
		
		ПриИзмененииСпискаБазовыхКолонок(Истина);

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СформироватьТаблицуЦен(Перезапись)
	
	СоответствияИмен = ПолучитьСоответствияИменКолонок();
	
	ТипЧисло 	= Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 2, ДопустимыйЗнак.Неотрицательный));
	ТипДата		= Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	
	// старые колонки
	КолонкиТаблицы = Новый Массив;
	
	Для Каждого Элемент Из ПолучитьРеквизиты("Цены") Цикл
		ИмяРеквизита = Элемент.Имя;
		Если Найти(ИмяРеквизита, "БазовыйТип") Тогда
			
			КолонкиТаблицы.Добавить("Цены." + ИмяРеквизита); // путь к реквизиту
			
		КонецЕсли;
	КонецЦикла;
	
	// удалим старые колонки
	ИзменитьРеквизиты(,КолонкиТаблицы);
	
	// новые колонки
	КолонкиТаблицы.Очистить();
	
	Для Каждого Элемент Из СоответствияИмен Цикл
		
		ИмяКолонки = Элемент.Ключ;
         														  // имя          тип     путь      заголовок   сохраняемый реквизит формы
  		КолонкиТаблицы.Добавить(Новый РеквизитФормы("БазовыйТип" + ИмяКолонки, ТипЧисло, "Цены", Строка(Элемент.Значение) + ", " + Строка(Элемент.Значение.Валюта), Истина));
		КолонкиТаблицы.Добавить(Новый РеквизитФормы("БазовыйТипДата" + ИмяКолонки, ТипДата, "Цены", "Дата установки", Истина));
		КолонкиТаблицы.Добавить(Новый РеквизитФормы("БазовыйТипПроцент" + ИмяКолонки, ТипЧисло, "Цены",  "% (" + Элемент.Значение + ")", Истина));
 		КолонкиТаблицы.Добавить(Новый РеквизитФормы("БазовыйТипНоваяЦена" + ИмяКолонки, ТипЧисло, "Цены", , Истина));
		КолонкиТаблицы.Добавить(Новый РеквизитФормы("БазовыйТипКурс" + ИмяКолонки, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 4, ДопустимыйЗнак.Неотрицательный)), "Цены", , Истина));
		КолонкиТаблицы.Добавить(Новый РеквизитФормы("БазовыйТипКратность" + ИмяКолонки, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)), "Цены", , Истина));
	КонецЦикла;
	
	ИзменитьРеквизиты(КолонкиТаблицы);
	
	// Удалим колонки на форме
		
	Пока Элементы.Цены.ПодчиненныеЭлементы.Количество() > 8 Цикл
		Элементы.Удалить(Элементы.Цены.ПодчиненныеЭлементы[Элементы.Цены.ПодчиненныеЭлементы.Количество() - 1]);
	КонецЦикла;
	
	КолонкиПроцент.Очистить();
	
	// Добавим колонки на форме
	
	Для Каждого Элемент Из СоответствияИмен Цикл
	
		ИмяКолонки = Элемент.Ключ;
		
		НоваяГруппа = ДобавитьГруппуФормы("Группа" + ИмяКолонки, Элементы.Цены, Элемент.Значение);
		
		СформироватьВалютныйЗаголовок(НоваяГруппа.Имя, Элемент.Значение);
		
		ДобавитьПолеФормы("БазовыйТип" + ИмяКолонки, "Цены." + "БазовыйТип" + ИмяКолонки, НоваяГруппа, "Старая цена");
		ДобавитьПолеФормы("БазовыйТипПроцент" + ИмяКолонки, "Цены." + "БазовыйТипПроцент" + ИмяКолонки, НоваяГруппа, "%", "ПроцентПриИзменении");
		ДобавитьПолеФормы("БазовыйТипНоваяЦена" + ИмяКолонки, "Цены." + "БазовыйТипНоваяЦена" + ИмяКолонки, НоваяГруппа, "Новая цена", "НоваяЦенаПриИзменении");
		
		
		//ПунктМеню = Элементы.Добавить("КМ" + ИмяКолонки, Тип("КнопкаФормы"), НовоеПоле.КонтекстноеМеню);
		//ПунктМеню.Заголовок 	= "Цены аналогов колонка";
		//ПунктМеню.ИмяКоманды 	= "СравнитьСЦенамиКонкурентов";
		
        ДобавитьПолеФормы("БазовыйТипДата" + ИмяКолонки, "Цены." + "БазовыйТипДата" + ИмяКолонки, Элементы.Цены);
				
	 КонецЦикла;
	
	// Заполним строки
	Если Перезапись Тогда
		ЗаполнитьТаблицуЦен(Объект.РасчетСебестоимости);
	КонецЕсли;
	
КонецПроцедуры


// СРАВНИТЬ С ЦЕНАМИ КОНКУРЕНТОВ

&НаКлиенте
Процедура СравнитьСЦенамиКонкурентов(Команда)
	
	СоответствиеИмен = ПолучитьСоответствияИменКолонок();

	ИмяКолонки = СтрЗаменить(Элементы.Цены.ТекущийЭлемент.Родитель.Имя, "Группа", "");
	ОткрытьФорму("Обработка.РасчетЦенПоСебестоимости.Форма.ЦеныКонкурентов", Новый Структура("БазовыйТипЦен", СоответствиеИмен[ИмяКолонки]), ЭтаФорма);
	
КонецПроцедуры

// ОЧИСТИТЬ ЦЕНЫ

&НаКлиенте
Процедура ОчиститьЦену(Команда)
	
	Ответ = Вопрос("Данные по новым ценам будут удалены. Очистить цены?", РежимДиалогаВопрос.ДаНет, 0);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
	    Возврат;
	КонецЕсли;	
	
	ИмяКолонки = СтрЗаменить(Команда.Имя, "КомандаОчистить", "");
	
	Для Каждого Строка Из Цены Цикл
		Если Строка.Пометка Тогда
			Строка["БазовыйТипНоваяЦена" + ИмяКолонки] = 0;
			ЦеныПересчеты(Строка.ПолучитьИдентификатор(), ИмяКолонки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// ИЗМЕНИТЬ ЦЕНЫ НА ПРОЦЕНТ

&НаКлиенте
Процедура ИзменитьЦеныНаПроцент(Команда)
	
	ОткрытьФорму("Обработка.РасчетЦенПоСебестоимости.Форма.ИзменениеЦенНаПроцент", Новый Структура("ТипыЦен", БазовыеКолонки), ЭтаФорма);
	
КонецПроцедуры

// РАСЧИТАТЬ ПРОЦЕНТ ОТ

&НаКлиенте
Процедура РасчитатьПроцентОт(Команда)
	
	Если НЕ Найти(Элементы.Цены.ТекущийЭлемент.Имя, "БазовыйТип") Тогда
		Сообщить("Рачитать процент можно только между базовыми колонками");
		Возврат;
	КонецЕсли;
	
		
	ИмяКолонки = СтрЗаменить(Элементы.Цены.ТекущийЭлемент.Родитель.Имя, "Группа", "");
	ИмяКолонкиОснование = СтрЗаменить(Команда.Имя, "КомандаПроцент", "");
	
	Строки = КолонкиПроцент.НайтиСтроки(Новый Структура("УникальноеИмя", ИмяКолонки +  ИмяКолонкиОснование));
	
	Если НЕ Строки.Количество() Тогда
		РасчитатьПроцентОтНаСервере(ИмяКолонки, ИмяКолонкиОснование);
	КонецЕсли;

	Если Элементы["КомандаПроцент" + ИмяКолонкиОснование].Пометка Тогда
		Элементы[ИмяКолонки +  ИмяКолонкиОснование].Видимость = Ложь;
	Иначе
		Элементы[ИмяКолонки +  ИмяКолонкиОснование].Видимость = Истина;
	КонецЕсли;  	
	
	Элементы["КомандаПроцент" + ИмяКолонкиОснование].Пометка = Элементы[ИмяКолонки +  ИмяКолонкиОснование].Видимость;

КонецПроцедуры
&НаСервере
Процедура РасчитатьПроцентОтНаСервере(ИмяКолонки, ИмяКолонкиОснование)
	
	СоответствиеИмен = ПолучитьСоответствияИменКолонок();
	
	ТипЦен = СоответствиеИмен[ИмяКолонки];
	ТипЦенОснование = СоответствиеИмен[ИмяКолонкиОснование];
	
	УникальноеИмя = ИмяКолонки + ИмяКолонкиОснование;
		
	// добавим новый реквизит
	КолонкиТаблицы = Новый Массив;
	КолонкиТаблицы.Добавить(Новый РеквизитФормы(УникальноеИмя, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 2, ДопустимыйЗнак.Неотрицательный)), "Цены", , Истина));
	    	
	ИзменитьРеквизиты(КолонкиТаблицы);
		
	// добавим реквизит на форму
	ДобавитьПолеФормы(УникальноеИмя, "Цены." + УникальноеИмя, Элементы.Цены, "% " + Строка(ТипЦен)+ "/" +Строка(ТипЦенОснование), , Истина);
	
	Строка = КолонкиПроцент.Добавить();
	Строка.Колонка = ИмяКолонки;
	Строка.КолонкаОснование = ИмяКолонкиОснование;
	Строка.УникальноеИмя = УникальноеИмя;
	
	Для Каждого Строка Из Цены Цикл
		ПересчитатьПроцентОт(Строка, ИмяКолонки, ИмяКолонкиОснование);
	КонецЦикла;
	
КонецПроцедуры	

//	УСТАНОВКА ЦЕН

&НаКлиенте
Процедура УстановитьЦену(Команда)
	
	// определим тип цен, для которого выбрана установка цены
	ИмяКолонки = СтрЗаменить(Команда.Имя, "КомандаУстановкаЦен", "");
	
	СоответствиеИмен = ПолучитьСоответствияИменКолонок();
    ТипЦены = СоответствиеИмен[ИмяКолонки];
	
	Форма = ПолучитьФорму("Документ.УстановкаЦенНоменклатуры.ФормаОбъекта");
	
	СписокТиповЦен = Новый СписокЗначений;
	СписокТиповЦен.Добавить(ТипЦены);
	
	Форма.СписокТиповЦен = СписокТиповЦен;
	    
    Таблица = Форма.Объект.Товары;
	
	КолонкаСЦеной = "БазовыйТипНоваяЦена" + ИмяКолонки;
	
	Для Каждого Строка Из Цены Цикл
		
		Если Строка[КолонкаСЦеной] <> Строка["БазовыйТип" + ИмяКолонки] И Строка.Пометка Тогда
		
	    	НоваяСтрока = Таблица.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	    		
	    	НоваяСтрока.ТипЦен		= ТипЦены;
	    	НоваяСтрока.Цена	 	= Строка[КолонкаСЦеной];
			НоваяСтрока.ДатаНачала	= Объект.НаДату;
		КонецЕсли;
		
	КонецЦикла;
	
	Форма.СформироватьТаблицуТоваров(Истина);
	
    Форма.Открыть();
	
КонецПроцедуры

// ПОДБОР

&НаСервере
Функция ПоместитьТоварыВХранилище() 
		
	Возврат ПоместитьВоВременноеХранилище(
					Цены.Выгрузить().Скопировать(,"Номенклатура"), 
					УникальныйИдентификатор);
					
КонецФункции

&НаКлиенте
Процедура ПодборВыполнить(Команда)
	
	Если ТипЦенЗакупочный.Пустая() Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьОтвет", ЭтаФорма), "Тип цен закупочный не заполнен, при подборе данная цена заполнена не будет. Продолжить?", РежимДиалогаВопрос.ДаНет);
	Иначе
		ОткрытьПодбор();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодбор()
	
	АдресТоваровВХранилище = ПоместитьТоварыВХранилище();
	ПараметрыПодбора = Новый Структура("АдресТоваровВХранилище", АдресТоваровВХранилище);
	
	СтруктураКолонокТовары = ФункцииФормДокументов.ПолучитьСтруктуруКолонокТовары(Элементы.Цены, Истина, , , , , Истина);

	ПараметрыПодбора.Вставить("СтруктураКолонокТовары", СтруктураКолонокТовары);
	//ПараметрыПодбора.Вставить("ВидЗапроса", "СписокНоменклатуры");
	//ПараметрыПодбора.Вставить("ВидыЗапросов", "СписокНоменклатуры");
	ПараметрыПодбора.Вставить("ТипЦен", 		ТипЦенЗакупочный);
	
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаПодбора", ПараметрыПодбора, Элементы.Цены);
  
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтвет(Результат, Параметры) Экспорт
    Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
	ОткрытьПодбор();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение <> Неопределено Тогда		
		
		ПолучитьТоварыИзХранилища(ВыбранноеЗначение);		// получаем
		УдалитьИзВременногоХранилища(ВыбранноеЗначение); 	// заметаем следы
		
	КонецЕсли;
	
КонецПроцедуры

 &НаСервере
Процедура ПолучитьТоварыИзХранилища(АдресТоваровВХранилище)
	
	ЗаполнитьДанныеТаблицы(ПолучитьИзВременногоХранилища(АдресТоваровВХранилище).ВыгрузитьКолонку("Номенклатура"));
				
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеТаблицы(Товары = Неопределено, ЗаполнитьЗаново = Ложь)
	
	СоответствиеИмен = ПолучитьСоответствияЦен();
	
	Запрос = Новый Запрос("
					|ВЫБРАТЬ РАЗРЕШЕННЫЕ Ссылка Номенклатура, Артикул ПОМЕСТИТЬ Товары ИЗ Справочник.Номенклатура ГДЕ Ссылка В (&Товары)
					|;
					|ВЫБРАТЬ Ссылка	ТипЦен, Валюта ПОМЕСТИТЬ ТипыЦен ИЗ Справочник.ТипыЦен ГДЕ Ссылка В (&ТипыЦен)
					|;
					|ВЫБРАТЬ Валюта, Курс, Кратность ПОМЕСТИТЬ КурсыВалют ИЗ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаСреза)
				 	|;
					|ВЫБРАТЬ Номенклатура, ТипЦен, Валюта, Период, Цена ПОМЕСТИТЬ ТекущиеЦены ИЗ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаСреза,  Номенклатура В (&Товары)) 
					|;
					|ВЫБРАТЬ
					|	Номенклатура,
					|	МАКСИМУМ(Период) Период
					|	ПОМЕСТИТЬ ДанныеРасчетаСебестоимости
					|	ИЗ
					|		РегистрСведений.РасчетСебестоимости.СрезПоследних(&ДатаСреза, Номенклатура В (&Товары)) 
					|СГРУППИРОВАТЬ ПО Номенклатура
					|;
					|ВЫБРАТЬ
					|	Себ.Номенклатура,
					|	Себ.Период,
					|	Себ.ЦенаЗакупочная,
					|	Себ.КурсОплаты,
					|   Себ.Удорожание,
					|	Себ.СебестоимостьРуб,
					|	Себ.Себестоимость
					|	ПОМЕСТИТЬ ТаблицаРасчетСебестоимости
					|ИЗ
					|	РегистрСведений.РасчетСебестоимости.СрезПоследних(&ДатаСреза, Номенклатура В (&Товары)) Себ
					|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
					|  	 	ДанныеРасчетаСебестоимости Дан
					|		По Себ.Номенклатура = Дан.Номенклатура И Себ.Период = Дан.Период
					|;
					|ВЫБРАТЬ
					|	"" "" + Тов.Артикул 									Артикул,
					|	Тов.Номенклатура										Номенклатура,
					|	Себ.Период												ДатаПартии,
					|	ЕСТЬNULL(Себ.ЦенаЗакупочная, ЕСТЬNULL(ЦенЗак.Цена,0))	ЦенаЗакупочная,  // берем закупочную цену последней партии товаров или текущую установленную
					|	ЕСТЬNULL(Себ.КурсОплаты, 0) 							КурсОплаты,
					|	ЕСТЬNULL(Себ.Удорожание, 0)								Удорожание,
					|	ЕСТЬNULL(Ост.КоличествоОстаток, 0)						Количество,   
					|
					|	// берем рублевую себестоимость последней партии или переводим себестоимость уе-шную последней партии в рубли
					|
					|" + ?(МаркетинговаяСебестоимостьРуб, "  
					|	ЕСТЬNULL(Себ.СебестоимостьРуб,0) Себестоимость, ",  ?(КурсПереводаСебестоимости <> 0, "					
					|	ЕСТЬNULL(Себ.Себестоимость, ЕСТЬNULL(ЦенСебУЕ.Цена, 0))* &КурсСеб * ЕСТЬNULL(КурсВалРуб.Кратность, 1)/ЕСТЬNULL(КурсВалРуб.Курс, 1) Себестоимость, " , "	
					|	ЕСТЬNULL(Себ.Себестоимость, ЕСТЬNULL(ЦенСебУЕ.Цена, 0))*(ЕСТЬNULL(ВалСебУЕ.Курс,1)*ЕСТЬNULL(КурсВалРуб.Кратность,1))/(ЕСТЬNULL(ВалСебУЕ.Кратность,1)*ЕСТЬNULL(КурсВалРуб.Курс,1)) Себестоимость, 
					|")) + "
					|   // данные для базовых колонок
					|	
					|	ТипыЦенБаз.ТипЦен,                  					
					|	ТипыЦенБаз.Валюта,	 // валюта типа цен базовой колонки
               		|	Цен.Период,			 // дата установки цены
					|
					|				 // приводим цену из установки цен в валюту типа цен
					|
					|	ЕСТЬNULL(Цен.Цена,0)*(ЕСТЬNULL(КурсВалУстЦен.Курс,1)*ЕСТЬNULL(КурсВалТипаЦен.Кратность,1))/(ЕСТЬNULL(КурсВалУстЦен.Кратность,1)*ЕСТЬNULL(КурсВалТипаЦен.Курс,1)) Цена,  
					|			
					|				// сохраним курс и кратность валют типов цен базовых колонок
					|
					|	ЕСТЬNULL(КурсВалТипаЦен.Курс,1)			КурсБаза,
					|	ЕСТЬNULL(КурсВалТипаЦен.Кратность,1)	КратностьБаза
					|
					//|	ЕСТЬNULL(Цен.Цена,0)*(ЕСТЬNULL(КурсВалУстЦен.Курс,1)*ЕСТЬNULL(КурсВалТипаЦен.Кратность,1))/(ЕСТЬNULL(КурсВалУстЦен.Кратность,1)*ЕСТЬNULL(КурсВалТипаЦен.Курс,1)) НоваяЦена, 	// НоваяЦена = Цена
							//|	Цен.Валюта,							// валюта установки цен базовой колонки
					//|	ВЫБОР КОГДА СебУЕ.Цена ЕСТЬ NULL ТОГДА 0 ИНАЧЕ
					//|		(ЕСТЬNULL(Рег.Цена,0)*(ЕСТЬNULL(Цен.Курс,1)*ЕСТЬNULL(ВалСебУЕ.Кратность,1))/(ЕСТЬNULL(Цен.Кратность,1)*ЕСТЬNULL(ВалСебУЕ.Курс,1)))/СебУЕ.Цена КОНЕЦ  Процент // приводим цену к валюте себестоимости и рассчитываем процен					
					|
					|ИЗ
					|	Товары Тов
					|	ЛЕВОЕ СОЕДИНЕНИЕ
					|		ТаблицаРасчетСебестоимости Себ
					|		ПО  Тов.Номенклатура = Себ.Номенклатура
					|					
					|	ЛЕВОЕ СОЕДИНЕНИЕ
					|		РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаСреза, Номенклатура В (&Товары)) Ост
					|		ПО Тов.Номенклатура = Ост.Номенклатура
					|
					|	ЛЕВОЕ СОЕДИНЕНИЕ
					|		ТекущиеЦены 			ЦенЗак
					|		ПО 	ЦенЗак.ТипЦен = &ТипЦенЗакупочная
					|			И Тов.Номенклатура = ЦенЗак.Номенклатура 
					|
					|	ЛЕВОЕ СОЕДИНЕНИЕ
					|		ТекущиеЦены 			ЦенСебУЕ
					|		ПО  ЦенСебУЕ.ТипЦен = &ТипЦенСебестоимостьУЕ
					|			И Тов.Номенклатура = ЦенСебУЕ.Номенклатура  
 					|
					|	ЛЕВОЕ СОЕДИНЕНИЕ
					|		КурсыВалют 		ВалСебУЕ 
					|		ПО ЦенСебУЕ.Валюта = ВалСебУЕ.Валюта
					|
					|	ЛЕВОЕ СОЕДИНЕНИЕ
					|		РегистрСведений.КурсыВалют.СрезПоследних(&ДатаСреза, Валюта В (ВЫБРАТЬ ВалютаУправленческогоУчета ИЗ Константы)) КурсВалРуб 
					|		ПО ИСТИНА 
					|
					|	ЛЕВОЕ СОЕДИНЕНИЕ
					|		ТипыЦен 	 ТипыЦенБаз
					|		ПО ИСТИНА
					|
					|	ЛЕВОЕ СОЕДИНЕНИЕ
					|		ТекущиеЦены		 Цен
					|		ПО 	Цен.ТипЦен В (&ТипыЦен)
					|			И Тов.Номенклатура = Цен.Номенклатура 
					|			И ТипыЦенБаз.ТипЦен = Цен.ТипЦен       
					|
					|	ЛЕВОЕ СОЕДИНЕНИЕ
					|		КурсыВалют 								КурсВалУстЦен            	// курс валюты установки цен базовых колонок
					|		ПО Цен.Валюта = КурсВалУстЦен.Валюта 
					|
					|	ЛЕВОЕ СОЕДИНЕНИЕ
					|		КурсыВалют 								КурсВалТипаЦен          	// курс валюты типа цен базовых колонок
					|		ПО ТипыЦенБаз.Валюта = КурсВалТипаЦен.Валюта
					|
					|	ИТОГИ
					|		МАКСИМУМ(Артикул),
					|		МАКСИМУМ(Количество),
					|		МАКСИМУМ(ЦенаЗакупочная), 
					|		МАКСИМУМ(Удорожание), 
					|		МАКСИМУМ(Себестоимость),
					|		МАКСИМУМ(ДатаПартии),
					|		МАКСИМУМ(КурсОплаты) 
					|	ПО
					|		Тов.Номенклатура");
	Запрос.УстановитьПараметр("Товары", ?(Товары = Неопределено, Цены.Выгрузить(, "Номенклатура").ВыгрузитьКолонку("Номенклатура"), Товары));
	Запрос.УстановитьПараметр("ТипыЦен", БазовыеКолонки);
	Запрос.УстановитьПараметр("ДатаСреза", Объект.НаДату);
	Запрос.УстановитьПараметр("ТипЦенЗакупочная", ТипЦенЗакупочный);
 	Запрос.УстановитьПараметр("ТипЦенСебестоимостьУЕ", ТипЦенСебестоимость);
    Запрос.УстановитьПараметр("КурсСеб", КурсПереводаСебестоимости);

	//Запрос.УстановитьПараметр("Закупочная", ТипЦенЗакупочный);
	//Запрос.УстановитьПараметр("ВалютаУЕ", ВалютаРасчетов);
	//Запрос.УстановитьПараметр("ВалютаСебестоимости", ОбщиеФункции.ПолучитьЗначениеКонстантыВОбласти("ВалютаУправленческогоУчета"));
	
	Если ЗаполнитьЗаново Тогда Цены.Очистить(); КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаТовары = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		Пока ВыборкаТовары.Следующий() Цикл
		
			Строки = Цены.НайтиСтроки(Новый Структура("Номенклатура", ВыборкаТовары.Номенклатура));
			
			Если Строки.Количество() Тогда Продолжить; КонецЕсли;
			
			НоваяСтрока = Цены.Добавить();

			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаТовары);
			
			НоваяСтрока.Пометка = Истина;
			
			Выборка = ВыборкаТовары.Выбрать();
			
			Если БазовыеКолонки.Количество() Тогда  // пока так
				Пока Выборка.Следующий() Цикл
					
					ТипЦен = Выборка.ТипЦен;
					Если ЗначениеЗаполнено(ТипЦен) Тогда
						
						ИмяКолонки = СоответствиеИмен[ТипЦен];
						
						НоваяСтрока["БазовыйТип" 			+ ИмяКолонки]	= Выборка.Цена;
						НоваяСтрока["БазовыйТипНоваяЦена" 	+ ИмяКолонки]	= Выборка.Цена;
						НоваяСтрока["БазовыйТипДата" 		+ ИмяКолонки] 	= Выборка.Период;
						
						//НоваяСтрока["БазовыйТипПроцент" + СоответствиеИмен[ТипЦен]] = Выборка.Процент;
	                    НоваяСтрока["БазовыйТипКурс" 		+ ИмяКолонки]	= ?(ЗначениеЗаполнено(Выборка.КурсБаза),		Выборка.КурсБаза, 		1);
						НоваяСтрока["БазовыйТипКратность" 	+ ИмяКолонки] 	= ?(ЗначениеЗаполнено(Выборка.КратностьБаза),	Выборка.КратностьБаза, 	1);
						
						Если НоваяСтрока.Себестоимость <> 0 Тогда
							ПересчитатьПроцентСебестоимости(НоваяСтрока, ИмяКолонки);
						КонецЕсли;
					
					КонецЕсли;

				КонецЦикла;
			КонецЕсли;
		
		КонецЦикла;
	КонецЕсли;
	
	СформироватьВалютныйЗаголовок("ЦенаЗакупочная", ТипЦенЗакупочный);
	СформироватьВалютныйЗаголовок("Себестоимость",  ТипЦенСебестоимость, Константы.ВалютаУправленческогоУчета.Получить());
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	БазовыеКолонки = Настройки.Получить("БазовыеКолонки");
	
	ПриИзмененииСпискаБазовыхКолонок(Ложь);

		
КонецПроцедуры

&НаКлиенте
Процедура ТипЦенЗакупочныйПриИзменении(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура КурсПереводаСебестоимостиПриИзменении(Элемент)
	Если Цены.Количество() Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ПриИзмененииКурсаПеревода", ЭтаФорма), "Будет перезаполнена таблица цен. Продолжить?", РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура ПриИзмененииКурсаПеревода(Результат, Параметры = Неопределено) Экспорт
	Если Результат <> Неопределено Тогда
		Если Результат = КодВозвратаДиалога.Да Тогда ЗаполнитьДанныеТаблицы(,Истина);
		Иначе
			// условие для события МаркетинговаяСебестоимостьРубПриИзменении
			Если Параметры <> Неопределено И Параметры.Свойство("ВернутьСтароеЗначение") Тогда
				МаркетинговаяСебестоимостьРуб = Не МаркетинговаяСебестоимостьРуб; КонецЕсли;	
		КонецЕсли;

		
	//	Если ЗначениеЗаполнено(Объект.РасчетСебестоимости) Тогда
	//		ЗаполнитьТаблицуЦен(Объект.РасчетСебестоимости);
	//	Иначе	
				//	КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МаркетинговаяСебестоимостьРубПриИзменении(Элемент)
	Если Цены.Количество() Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ПриИзмененииКурсаПеревода", ЭтаФорма, Новый Структура("ВернутьСтароеЗначение", Истина)), "Будет перезаполнена таблица цен. Продолжить?", РежимДиалогаВопрос.ДаНет);
	КонецЕсли;

КонецПроцедуры


