
&НаСервере
Процедура УстановитьОтборДляЗначения(ИмяПоля, ЗначениеПоля, Знач ВидСравнения = Неопределено)

	// Иницилизиуем параметры процедуры
	
	Если ВидСравнения = Неопределено Тогда ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; КонецЕсли;
	
	// Найдем элемент
	
	ПолеОтбора = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Для каждого Элемент Из Объект.КомпановщикНастроекВзаиморасчеты.Настройки.Отбор.Элементы Цикл 
		Если 	ТипЗнч(Элемент) <> Тип("ГруппаЭлементовОтбораКомпоновкиДанных") И
				Элемент.ЛевоеЗначение = ПолеОтбора Тогда 
				
			ЭлементОтбора = Элемент; 
			Прервать; 
			
		КонецЕсли;
	КонецЦикла; 
	
	// Добавим если нет
	
	Если ЭлементОтбора = Неопределено Тогда
		ЭлементОтбора = Объект.КомпановщикНастроекВзаиморасчеты.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	КонецЕсли; 
	
	// Установим значения в компановщик
	
	ЭлементОтбора.ВидСравнения 		= ВидСравнения;
	ЭлементОтбора.ЛевоеЗначение 	= ПолеОтбора;
	ЭлементОтбора.ПравоеЗначение 	= ЗначениеПоля;
	ЭлементОтбора.Использование		= ЗначениеЗаполнено(ЗначениеПоля);

КонецПроцедуры
&НаСервере
Процедура УстановитьПараметрДляЗначения(ИмяПараметра, Значениепараметра)

	Параметр = Объект.КомпановщикНастроекВзаиморасчеты.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(
					Новый ПараметрКомпоновкиДанных(ИмяПараметра));
					
	Если Параметр <> Неопределено Тогда
		
		Параметр.Значение 		= Значениепараметра;
		Параметр.Использование 	= Истина;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СформироватьЗадолжностиНаСервере(ПолучитьДанныеРасшифровки = Ложь)
	
	//Получаем схему из макета
	СхемаКомпоновкиДанных = Обработки.РабочийСтолРуководителя.ПолучитьМакет("Взаиморасчеты");

	//Из схемы возьмем настройки по умолчанию
	Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	//Помещаем в переменную данные о расшифровке данных
	НовыеДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	//Формируем макет, с помощью компоновщика макета
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;

	//Передаем в макет компоновки схему, настройки и данные расшифровки
	МакетКомпоновки 	= КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, НовыеДанныеРасшифровки);
	ДанныеРасшифровки 	= ПоместитьВоВременноеХранилище(НовыеДанныеРасшифровки, УникальныйИдентификатор);
	
	//Выполним компоновку с помощью процессора компоновки
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,, НовыеДанныеРасшифровки);
	
	//Очищаем поле табличного документа
	Взаиморасчеты.Очистить();

	//Выводим результат в табличный документ
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(Взаиморасчеты);

	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
КонецПроцедуры
&НаКлиенте
Процедура СформироватьЗадолжности(Команда)
	
	СформироватьЗадолжностиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПериодВзаиморасчетыПриИзмененииНаСервере(ДатаНачала, ДатаОкончания)
	
	УстановитьпараметрДляЗначения("Период", 		КонецДня(ДатаОкончания));
	
	УстановитьпараметрДляЗначения("КонецПериода", 	КонецДня(ДатаОкончания));
	УстановитьпараметрДляЗначения("НачалоПериода", 	НачалоДня(ДатаНачала));
	
КонецПроцедуры
&НаКлиенте
Процедура ПериодВзаиморасчетыПриИзменении(Элемент)
	
	ПериодВзаиморасчетыПриИзмененииНаСервере(ПериодВзаиморасчеты.ДатаНачала, ПериодВзаиморасчеты.ДатаОкончания);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Загрузим компановщик настроек
	
	Макет = Обработки.РабочийСтолРуководителя.ПолучитьМакет("Взаиморасчеты");
	Объект.КомпановщикНастроекВзаиморасчеты.ЗагрузитьНастройки(Макет.НастройкиПоУмолчанию);
	Объект.КомпановщикНастроекВзаиморасчеты.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Макет));
	
	// Загрузим организации
	
	Запрос = Новый Запрос("ВЫБРАТЬ Ссылка Организация, Истина ИЗ Справочник.Организации ГДЕ Не ПометкаУдаления Упорядочить По Код");
	ОрганизацииФильтрВзаиморасчеты.Загрузить(Запрос.Выполнить().Выгрузить());
	НовСтрока = ОрганизацииФильтрВзаиморасчеты.Вставить(0);
	НовСтрока.Организация 	= "По всем организациям";
	НовСтрока.Использовать 	= Истина;
	
	// Установим параметры
	
	УстановитьпараметрДляЗначения("Период", КонецДня(ТекущаяДата()));
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииФлагаОрганизацииНаСервере(Организация, Использовать)
	
	Если ТипЗнч(Организация) = Тип("Строка") Тогда
		
		// Установим всем одно и тоже
		
		Инд = -1; УВсех = ОрганизацииФильтрВзаиморасчеты[0].Использовать;
		Для Каждого Строка Из ОрганизацииФильтрВзаиморасчеты Цикл Инд = Инд + 1; Если Инд Тогда ОрганизацииФильтрВзаиморасчеты[Инд].Использовать = Использовать;КонецЕсли;КонецЦикла;
		
	Иначе
		
		// Проверим все ли одинаковые
		
		Инд = -1;
		УВсех = Использовать;
		Для Каждого Строка Из ОрганизацииФильтрВзаиморасчеты Цикл Инд = Инд + 1; Если Инд Тогда Если УВсех <> Строка.Использовать Тогда УВсех = 2; Прервать;КонецЕсли;КонецЕсли;КонецЦикла;
		ОрганизацииФильтрВзаиморасчеты[0].Использовать = УВсех;
		
	КонецЕсли;
	
	// Загрузим хначения в построитель
	
	Если УВсех = 2 Тогда
		
		СписокОрганизаций = Новый СписокЗначений; Инд = -1;
		Для Каждого Строка Из ОрганизацииФильтрВзаиморасчеты Цикл Инд = Инд + 1; Если Инд И Строка.Использовать Тогда СписокОрганизаций.Добавить(Строка.Организация);КонецЕсли;КонецЦикла;
		
		УстановитьОтборДляЗначения("Организация", СписокОрганизаций, ВидСравненияКомпоновкиДанных.ВСписке); // убрать отбор
		
	Иначе
		
		УстановитьОтборДляЗначения("Организация", Неопределено); // убрать отбор
		
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ОрганизацииФильтрВзаиморасчетыИспользоватьПриИзменении(Элемент)
	
	текДанные = Элементы.ОрганизацииФильтрВзаиморасчеты.ТекущиеДанные;
	Если текДанные.Использовать = 2 Тогда текДанные.Использовать = 0;КонецЕсли;
	
	ПриИзмененииФлагаОрганизацииНаСервере(текДанные.Организация, текДанные.Использовать);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеРасшифровки(Расшифровка)
	
	ДанныеРасшифровкиОбъект = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
	Поле = ДанныеРасшифровкиОбъект.Элементы[Расшифровка].ПолучитьПоля()[0];
	
	//ЗначениеРасшифровки = ДанныеРасшифровкиОбъект.Элементы[Расшифровка].ПолучитьПоля()[0].Значение;
	
	ЗначениеРасшифровки = Поле.Значение;
	
	Если Поле.Поле = "Картинки" И ЗначениеЗаполнено(ЗначениеРасшифровки) Тогда
		
		Возврат Поле.Значение;
		
	КонецЕсли;
	
КонецФункции


&НаСервере
Функция ПолучитьURLСхемы()
	
	ОсновнаяСхемаКомпоновкиДанных=Обработки.РабочийСтолРуководителя.ПолучитьМакет("Взаиморасчеты");
    Возврат ПоместитьВоВременноеХранилище(ОсновнаяСхемаКомпоновкиДанных);
	
КонецФункции
&НаКлиенте
Процедура ВзаиморасчетыОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	Перем ДействиеРасшифровки; 
	Перем ПараметрДействияРасшифровки; 

	СтандартнаяОбработка = Ложь; 

	Источник 	= Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПолучитьURLСхемы());
	Обработка 	= Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровки, Источник);
	
	ДоступныеДействия = Новый Массив; 
	ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение); 
	ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Расшифровать); 
	
	//ДопМеню = Новый СписокЗначений; 
	//ДопМеню.Добавить("Задать цену"); 
	//Обработка.ВыбратьДействие(Расшифровка, ДействиеРасшифровки, ПараметрДействияРасшифровки, ДоступныеДействия, ДопМеню); 
	Обработка.ВыбратьДействие(Расшифровка, ДействиеРасшифровки, ПараметрДействияРасшифровки, ДоступныеДействия); 

	Если ДействиеРасшифровки = ДействиеОбработкиРасшифровкиКомпоновкиДанных.Расшифровать            
		ИЛИ ДействиеРасшифровки = ДействиеОбработкиРасшифровкиКомпоновкиДанных.Отфильтровать Тогда 

	//Сообщить("1"); 
	// Открываем в новом окне 
		Описание = Новый ОписаниеОбработкиРасшифровкиКомпоновкиДанных(ДанныеРасшифровки, Расшифровка, ПараметрДействияРасшифровки);
		
		//СформироватьЗадолжностиНаСервере(Описание);
		
	    //СтруктураПараметров = Новый Структура; 
	    //СтруктураПараметров.Вставить("ПараметрОбработкиРашифровки", Описание); 
	 //   СтруктураПараметров.Вставить("ПроизвольныйОтчет", 			Отчет.ПроизвольныйОтчет); 
	    //СтруктураПараметров.Вставить("СохраненнаяНастройка", 		СохраненнаяНастройка); 
	    //СтруктураПараметров.Вставить("ФормироватьПриОткрытии", 		Истина); 
	 //
	 //   ОткрытьФорму("Отчет.ПроизвольныйОтчет.ФормаОбъекта", СтруктураПараметров); 

	ИначеЕсли ДействиеРасшифровки = ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение Тогда 

		ОткрытьЗначение(ПараметрДействияРасшифровки); 

	ИначеЕсли ДействиеРасшифровки = "Задать цену" Тогда 
		
		////СтруктураПолей = ПолучитьСтруктуруПолей(Расшифровка); 
		//СтруктураПараметров = Новый Структура; 
		//ПолучитьДокументУстановкиЦен(Расшифровка); 
		//СтруктураПараметров.Вставить("рамТаблицаТовары", ТаблицаНоменклатуры); 
		//СтруктураПараметров.Вставить("рамНоменклатура", ТаблицаНоменклатуры.Получить(0).Номенклатура); 
		//ОткрытьФорму("Документ.УстановкаЦенНоменклатуры.ФормаОбъекта", СтруктураПараметров); 
		
	ИначеЕсли ДействиеРасшифровки = ДействиеОбработкиРасшифровкиКомпоновкиДанных.Нет Тогда 

		//ВыполнитьРасшифровку(Расшифровка, ДанныеРасшифровки, ПараметрДействияРасшифровки); 
		//ОбновитьОтчет(); 

	КонецЕсли; 

	
КонецПроцедуры
