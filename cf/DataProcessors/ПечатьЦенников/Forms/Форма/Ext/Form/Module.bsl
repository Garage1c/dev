&НаКлиенте
Перем СтруктураКолонокТовары Экспорт;

// ПОДБОР

&НаСервере
Функция ПоместитьТоварыВХранилище() 
	
	Возврат ПоместитьВоВременноеХранилище(
					Товары.Выгрузить(), 
					УникальныйИдентификатор);
					
КонецФункции

&НаКлиенте
Процедура ПодборВыполнить(Команда)
	
	ИмяТабличнойЧасти = "Товары";
	
	АдресТоваровВХранилище = ПоместитьТоварыВХранилище();
	ПараметрыПодбора = Новый Структура("АдресТоваровВХранилище", АдресТоваровВХранилище);
	
	СтруктураКолонокТовары = ФункцииФормДокументов.ПолучитьСтруктуруКолонокТовары(Элементы.Товары, Истина, ТипЦен, , , Валюта, Истина);

	ПараметрыПодбора.Вставить("СтруктураКолонокТовары", СтруктураКолонокТовары);
	ПараметрыПодбора.Вставить("ВидЗапроса", 	"СписокНоменклатуры");
	ПараметрыПодбора.Вставить("ВидыЗапросов", 	"СписокНоменклатуры");
	ПараметрыПодбора.Вставить("ТипЦен", 			ТипЦен);
   	ПараметрыПодбора.Вставить("Валюта", 			Валюта);
  	ПараметрыПодбора.Вставить("ЦенаПоАкцииОтдельно",Истина);

	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаПодбора", ПараметрыПодбора, Элементы.Товары);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение <> Неопределено Тогда		
		
		ПолучитьТоварыИзХранилища(ВыбранноеЗначение, СтруктураКолонокТовары);		// получаем
		УдалитьИзВременногоХранилища(ВыбранноеЗначение); 	// заметаем следы
		
	КонецЕсли;
	
КонецПроцедуры

 &НаСервере
Процедура ПолучитьТоварыИзХранилища(АдресТоваровВХранилище, СтруктураКолонокТовары)
	
	Товары.Загрузить(ПолучитьИзВременногоХранилища(АдресТоваровВХранилище));
	ПриИзмененииРеквизитаВлияющегоНаТабличнуюЧасть(СтруктураКолонокТовары);			
КонецПроцедуры

// ПЕЧАТЬ
&НаКлиенте
Процедура ЗадатьНастройкиТабличногоДокумента(ТабДок, ТабДокАкция = Неопределено)
	
	ТабДок.АвтоМасштаб = Истина;
	табдок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	Если ТабДокАкция <> Неопределено Тогда
		ТабДокАкция.АвтоМасштаб = Истина;
		ТабДокАкция.ОриентацияСтраницы = ОриентацияСтраницы.Портрет; КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ТабДок, ТабДокАкция)
	
	МассивТоваров = Товары.Выгрузить();//.ВыгрузитьКолонку("Номенклатура"); 
	
	Возврат Обработки.ПечатьЦенников.Печать(ТабДок, ТабДокАкция, МассивТоваров, Новый Структура("Дата, Организация", Формат(Дата,"ДФ=dd.MM.yyyy"), Объект.Организация))
	
КонецФункции
&НаКлиенте
Процедура Печать(Команда)
	ТабДок = Новый ТабличныйДокумент;
	ТабДокАкция = Новый ТабличныйДокумент;
	ЗадатьНастройкиТабличногоДокумента(ТабДок, ТабДокАкция);
	
	Если ПечатьНаСервере(ТабДок, ТабДокАкция) Тогда
	
		Если ТабДок.ВысотаТаблицы >0 Тогда
			ТабДок.Показать(); КонецЕсли;
		
		Если ТабДокАкция.ВысотаТаблицы >0 Тогда
			ТабДокАкция.Показать(); КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
&НаСервере
Функция ПечатьНаСервереLicota(ТабДок, ТабДокАкция, ЭтоНовинка = Ложь)
	
	МассивТоваров = Товары.Выгрузить();//.ВыгрузитьКолонку("Номенклатура");
	
	Возврат Обработки.ПечатьЦенников.ПечатьLicota(ТабДок, ТабДокАкция, МассивТоваров, Новый Структура("Дата, Организация, ЭтоНовинка", Дата, Объект.Организация, ЭтоНовинка))
	
КонецФункции

&НаКлиенте
Процедура ПечатьЦенникLicota(Команда)
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДокАкция = Новый ТабличныйДокумент;

	ЗадатьНастройкиТабличногоДокумента(ТабДок, ТабДокАкция);
	
	Если ПечатьНаСервереLicota(ТабДок, ТабДокАкция) Тогда
	
		Если ТабДок.ВысотаТаблицы >0 Тогда
			ТабДок.Показать(); КонецЕсли;
		Если ТабДокАкция.ВысотаТаблицы >0 Тогда
			ТабДокАкция.Показать(); КонецЕсли;

	КонецЕсли;
	

КонецПроцедуры

&НаКлиенте
Процедура ПечатьЦенникНаНовинкиLicota(Команда)
	ТабДок = Новый ТабличныйДокумент;
	ЗадатьНастройкиТабличногоДокумента(ТабДок);
	
	Если ПечатьНаСервереLicota(ТабДок, Истина) Тогда
	
		Если ТабДок.ВысотаТаблицы >0 Тогда
			ТабДок.Показать(); КонецЕсли;
		
	КонецЕсли;
	

КонецПроцедуры


// GODEX

&НаСервере
Процедура ПечатьGodexСервер(ТабДок)
	
	МассивТоваров = Новый Массив;
	
	// делаем тупо, что бы не лезть куда не надо
	Для Каждого Строка ИЗ Товары Цикл
		Ном = 0;
		Пока Ном <> Строка.Количество Цикл Ном = Ном +1;
			МассивТоваров.Добавить(Строка.Номенклатура);
		КонецЦикла;
    КонецЦикла;
	ФормированиеПечатныхФорм.НаПечатьЭтикетки(ТабДок, МассивТоваров);//Товары.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
	
КонецПроцедуры
&НаКлиенте
Процедура ПечатьGodex(Команда)
	
	ТабДок = Новый ТабличныйДокумент;
	
	ПечатьGodexСервер(ТабДок);

	ФункцииФормДокументов.УстановитьНастройкиТабличногоДокумента(ТабДок);
	
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.РазмерКолонтитулаСверху = 0;
	ТабДок.РазмерКолонтитулаСнизу = 0;
	ТабДок.ПолеСверху = 0;
	ТабДок.ПолеСлева = 0;
	ТабДок.ПолеСнизу = 0;
	ТабДок.ПолеСправа = 0;
	
	//ТабДок.РазмерСтраницы = "eti01";
	
	ТабДок.Показать();
	
	в = 2;

	
КонецПроцедуры

// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// информация о товаре
	РаботаСНоменклатурой.ДобавитьОперативнуюИнформациюОТоваре(ЭтаФорма);
	

	ТипЦен = ОбщиеФункции.ПолучитьЗначениеКонстантыВОбласти("ТипЦенРозница");
	Валюта = ОбщиеФункции.ПолучитьЗначениеКонстантыВОбласти("ВалютаУправленческогоУчета");
	Объект.Организация =  ОбщиеФункции.НастройкаПользователя("ПоУмолчанию_Организация");
	Склад =  ОбщиеФункции.НастройкаПользователя("ПоУмолчанию_Склад");

	Дата = ТекущаяДата();

	МассивТоваров = Параметры.МассивТоваров; 
	Если ЗначениеЗаполнено(МассивТоваров) Тогда
		ОбработатьМассивТоваров(МассивТоваров);	
		
	КонецЕсли;
	
	ИнициализироватьНастройки();

КонецПроцедуры

&НаСервере
Процедура ОбработатьМассивТоваров(МассивТоваров, ПозицияНачало = 0, ПозицияКонец = 0)
		ТипСтруктура = Тип("Структура");
		Если ПозицияНачало + ПозицияКонец = 0 Тогда ПозицияКонец = МассивТоваров.Количество() -1; КонецЕсли;
		
		Для Поз = ПозицияНачало ПО ПозицияКонец Цикл //Строка Из МассивТоваров Цикл
			Строка =МассивТоваров[Поз]; 
			НоваяСтрока = Товары.Добавить();
			Если ТипЗнч(Строка) = ТипСтруктура Тогда
				
				Для Каждого Элемент Из Строка Цикл
					
					Попытка
						НоваяСтрока[Элемент.Ключ] = Элемент.Значение;
					Исключение
						Продолжить;
					КонецПопытки;
					
				КонецЦикла;
			Иначе		
				
				НоваяСтрока.Номенклатура = Строка;
			КонецЕсли;
			Акция = Неопределено;
			Цена = РаботаСНоменклатурой.ПолучитьЦену(НоваяСтрока.Номенклатура, ТипЦен, Валюта,,,Истина,Акция,Истина);
			НоваяСтрока.Цена = Цена.Цена;
			Если Акция <> Неопределено Тогда
				НоваяСтрока.Цена = Цена.Цена;
				НоваяСтрока.ЦенаПоАкции = Цена.ЦенаПоАкции;
				НоваяСтрока.Акция = Акция;
			КонецЕсли;
	
		КонецЦикла;
	
КонецПроцедуры
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	 СтруктураКолонокТовары = ФункцииФормДокументов.ПолучитьСтруктуруКолонокТовары(Элементы.Товары, , ТипЦен,,, Валюта, );
КонецПроцедуры

// ОБРАБОТЧИКИ ТАБЛИЧНОЙ ЧАСТИ

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ФункцииФормДокументов.УпаковкаПриИзменении(
			Элементы.Товары, 
			СтруктураКолонокТовары);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ФункцииФормДокументов.НоменклатураПриИзменении(
				Элементы.Товары, 
				СтруктураКолонокТовары);

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииРеквизитаВлияющегоНаТабличнуюЧасть(СтруктураКолонокТовары)
	
	ФункцииФормДокументов.ПересчитатьСуммыТабличныхЧастейПоСтарому(Товары, СтруктураКолонокТовары);
		
КонецПроцедуры
 
&НаКлиенте
Процедура ТипЦенПриИзменении(Элемент)
	
	СтруктураКолонокТовары.Вставить("ТипЦен", ТипЦен);

	Если ФункцииФормДокументов.ДиалогПриИзмененииТипаЦен(Товары.Количество(), СтруктураКолонокТовары, ТипЦен) Тогда
		
		ПриИзмененииРеквизитаВлияющегоНаТабличнуюЧасть(СтруктураКолонокТовары);
		
	КонецЕсли;
	
	СтруктураКолонокТовары.Вставить("стТипЦен", ТипЦен);

КонецПроцедуры


 // ИНФОРМАЦИЯ О ТОВАРЕ

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	// информация о товаре
	ОбработатьОтображениеИнформацииОТоваре()	
	 	
КонецПроцедуры
&НаСервере
Процедура ОбработатьОтображениеИнформацииОТоваре() Экспорт
	РаботаСНоменклатурой.ОбработатьОтображениеИнформацииОТоваре(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ИнфТовараТекстHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	РаботаСНоменклатуройКлиент.ИнфТовараТекстHTMLПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры
&НаКлиенте
Процедура ИнфТовараЗаголовокHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	РаботаСНоменклатуройКлиент.ИнфТовараЗаголовокHTMLПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры

 &НаКлиенте
Процедура ПоказатьСкрытьИнфОТоваре(Команда)
	РаботаСНоменклатуройКлиент.ПоказатьСкрытьИнфОТоваре(ЭтаФорма);
КонецПроцедуры
&НаКлиенте
Процедура НастройкаИнфОТоваре(Команда) 
	РаботаСНоменклатуройКлиент.НастройкаИнфОТоваре(ЭтаФорма);
КонецПроцедуры

// КОРЗИНА

#Если Не ВебКлиент Тогда
&НаСервере
Процедура ДобавитьИзКорзиныНаСервере(ИмяКомпа, СтруктураКолонокТовары, КолСтрок)
	
	МодульКорзины.ПолучитьТоварИзКорзины(Элементы.Товары, Товары, СтруктураКолонокТовары, ИмяКомпа, КолСтрок);
	
КонецПроцедуры
#КонецЕсли


#Если Не ВебКлиент Тогда
&НаКлиенте
Процедура ВставитьИзКорзины(Команда)
	
	КолСтрок = 0;
	ДобавитьИзКорзиныНаСервере(ИмяКомпьютера(), СтруктураКолонокТовары, КолСтрок);
	
	Если КолСтрок Тогда
		
		МодульКорзины.ОповеститьОВставкеТовараВДокумент(КолСтрок, Товары.Количество());
		
	Иначе
		
		МодульКорзины.ОповеститьЧтоНечегоДобавлять();
		
	КонецЕсли;
	ПриИзмененииРеквизитаВлияющегоНаТабличнуюЧасть(СтруктураКолонокТовары);
	Модифицированность = Истина;
	//УправлениеВидимостьюДоступностью();
	
	//ФункцииФормДокументов.ОбновитьПодвал(ЭтаФорма, Элементы, Всего, СтруктураКолонокТовары,,  "ВсегоНДС", ВсегоНДС);
		
КонецПроцедуры
#КонецЕсли

#Если Не ВебКлиент Тогда
&НаКлиенте
Процедура РедактироватьТоварВКорзине(Команда)
	
	ОткрытьФорму("РегистрСведений.Корзина.Форма.Форма");
	
КонецПроцедуры
#КонецЕсли

#Если Не ВебКлиент Тогда
&НаСервере
Функция ОчиститьНаСервере(ИмяКомпа)
	
	Возврат МодульКорзины.ОчиститьКорзину(ИмяКомпа);
	
КонецФункции
#КонецЕсли

#Если Не ВебКлиент Тогда
&НаКлиенте
Процедура ОчиститьКорзину(Команда)
	
	Если ОчиститьНаСервере(ИмяКомпьютера()) Тогда
		
		МодульКорзины.ОповеститьЧтоКорзинаОчищена();
		
	КонецЕсли;
	
КонецПроцедуры
#КонецЕсли

&НаСервере
Функция ПолучитьМассивТоваровПоНаличию(Склад)
			
	Запрос = Новый Запрос("ВЫБРАТЬ 
		|	Номенклатура 
		|	ИЗ 
		|	РегистрНакопления.ТоварыНаСкладах.Остатки(,Склад = &Склад)");
	Запрос.УстановитьПараметр("Склад", Склад);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура")	
		
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПоНаличиюПослеВыбораСклада(Результат, Параметры) Экспорт
	Если Результат <> Неопределено Тогда 
		Товары.Очистить();
		
		МассивТоваров = ПолучитьМассивТоваровПоНаличию(Результат);
		КоличествоТоваров = МассивТоваров.Количество();
		Порция = 100;
		Итераций = Цел(КоличествоТоваров/Порция);
		ПоследняяПорция = КоличествоТоваров - Итераций*Порция;
		Если ПоследняяПорция Тогда Итераций = Итераций + 1; КонецЕсли;
		Для Ит = 0 ПО Итераций Цикл
				
			Состояние("На выбранном скаладе очень много товаров, идет обработка запроса", (100/ Итераций)*Ит, "Обработано " + Строка(Ит*Порция) + " товаров");
			Если Ит = Итераций Тогда ОбработатьМассивТоваров(МассивТоваров,Ит*Порция, Ит*Порция + ПоследняяПорция-1); 
			Иначе
				ОбработатьМассивТоваров(МассивТоваров,Ит*Порция, Ит*Порция + Порция -1);	
			КонецЕсли;
			
		КонецЦикла;
	 КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеСкладаПоУмолчанию()  
	Возврат ОбщиеФункции.НастройкаПользователя("ПоУмолчанию_Склад");
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПоНаличию(Команда)
	
	//Склад =  ПолучитьЗначениеСкладаПоУмолчанию(); 
	//ПоказатьВводЗначения(Новый ОписаниеОповещения("ЗаполнитьПоНаличиюПослеВыбораСклада", ЭтаФорма), Склад, "Выберите склад", Новый ОписаниеТипов("СправочникСсылка.Склады")); 
	ЗаполнитьПоНаличиюНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоНаличиюНаСервере()
	Схема = Обработки.ПечатьЦенников.ПолучитьМакет("ОтборПоНаличию"); 
	
	АдресСхемыКомпоновкиНовый = ПоместитьВоВременноеХранилище(Схема, ЭтаФорма.УникальныйИдентификатор);
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиНовый);
	
	НовыйКомпоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	НовыйКомпоновщик.Инициализировать(ИсточникНастроек);
	
	НовыйКомпоновщик.ЗагрузитьНастройки(КомпоновщикНастроек.ПолучитьНастройки());
	
	ПараметрыОтчета = НовыйКомпоновщик.Настройки.ПараметрыДанных;
	
	ЗначениеПараметра = ПараметрыОтчета.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ТипЦен"));
	ПараметрыОтчета.УстановитьЗначениеПараметра("ТипЦен", ТипЦен);
	
	ЗначениеПараметра = ПараметрыОтчета.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПустаяАкция"));
	ПараметрыОтчета.УстановитьЗначениеПараметра("ПустаяАкция", Документы.Акция.ПустаяСсылка());
	
	ЗначениеПараметра = ПараметрыОтчета.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПустаяУпаковка"));
	ПараметрыОтчета.УстановитьЗначениеПараметра("ПустаяУпаковка", Справочники.УпаковкиНоменклатуры.ПустаяСсылка());
	
	ЗначениеПараметра = ПараметрыОтчета.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
	ПараметрыОтчета.УстановитьЗначениеПараметра("Период", ТекущаяДата());
	 	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных; 
   	Макет = КомпоновщикМакета.Выполнить(Схема, НовыйКомпоновщик.Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений")); 

	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных; 
	ПроцессорКомпоновки.Инициализировать(Макет); 

	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений; 
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Артикул", 		Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(25)));
	ТЗ.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТЗ.Колонки.Добавить("Цена", 		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,2)));
	ТЗ.Колонки.Добавить("ЦенаПоАкции", 	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,2)));
	ТЗ.Колонки.Добавить("Акция", 		Новый ОписаниеТипов("ДокументСсылка.Акция"));
	
	ПроцессорВывода.УстановитьОбъект(ТЗ); 
	ПроцессорВывода.Вывести(ПроцессорКомпоновки); 
	
	Товары.Загрузить(ТЗ);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьНастройки()
	
	СхемаКомпоновкиДанных = Обработки.ПечатьЦенников.ПолучитьМакет("ОтборПоНаличию");		

	Настройки = КомпоновщикНастроек.Настройки;
	
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных);
	КомпоновщикНастроек.Инициализировать(ИсточникНастроек);

	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	УстановитьЗначениеПользовательскойНастройки(КомпоновщикНастроек.ПользовательскиеНастройки,	"Склад", ПолучитьЗначениеСкладаПоУмолчанию());		

	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначениеПользовательскойНастройки(Настройки, Имя, Значение, Использование = Истина)
	
	Для Каждого Элемент Из Настройки.Элементы Цикл
        Если ТипЗнч(Элемент) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			Если Строка(Элемент.Параметр) = Имя Тогда
				Элемент.Значение = Значение;
                Элемент.Использование = Использование;
            КонецЕсли;
        КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоИзменениюЦенНаСервере()
	

	Запрос = Новый Запрос("
	|
	|ВЫБРАТЬ
	|Номенклатура 
	|ПОМЕСТИТЬ Остатки
	|ИЗ 
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(,	Склад = &Склад)
	|;
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ  
	|	Акция, Номенклатура, НоваяЦена, Валюта
	|	ПОМЕСТИТЬ АкцииСейчас
	|ИЗ	
	|	РегистрСведений.Акция.СрезПоследних(&КонецСегодня, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ Остатки) И ТипЦен = &ТипЦен)  
	|ГДЕ Акция <> &ПустаяАкция
	|;
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Акция, Номенклатура, НоваяЦена, Валюта
	|	ПОМЕСТИТЬ АкцииВчера
	|ИЗ	
	|	РегистрСведений.Акция.СрезПоследних(&КонецВчера, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ Остатки) И ТипЦен = &ТипЦен)  
	|ГДЕ Акция <> &ПустаяАкция
	|;
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Цен.ТипЦен 							ТипЦен,
	|	Цен.Номенклатура					Номенклатура, 
	|	Цен.Упаковка, 
	|	Цен.Цена * (ЕСТЬNULL(ВалЦен.Курс, 1) * ЕСТЬNULL(ВалУпр.Кратность, 1)) / (ЕСТЬNULL(ВалУпр.Курс, 1) * ЕСТЬNULL(ВалЦен.Кратность, 1)) КАК ЦенаБезАкции,
	|	ЕСТЬNULL(Акц.НоваяЦена, 0)*(ЕСТЬNULL(ВалЦенАкция.Курс, 1) * ЕСТЬNULL(ВалУпр.Кратность, 1)) / (ЕСТЬNULL(ВалУпр.Курс, 1) * ЕСТЬNULL(ВалЦенАкция.Кратность, 1)) ЦенаПоАкции,
	|
	|	ВЫБОР 
	|		КОГДА НЕ Акц.НоваяЦена ЕСТЬ NULL ТОГДА
	|			ЕСТЬNULL(Акц.НоваяЦена, 0)*(ЕСТЬNULL(ВалЦенАкция.Курс, 1) * ЕСТЬNULL(ВалУпр.Кратность, 1)) / (ЕСТЬNULL(ВалУпр.Курс, 1) * ЕСТЬNULL(ВалЦенАкция.Кратность, 1)) 
	|		ИНАЧЕ
	|			Цен.Цена * (ЕСТЬNULL(ВалЦен.Курс, 1) * ЕСТЬNULL(ВалУпр.Кратность, 1)) / (ЕСТЬNULL(ВалУпр.Курс, 1) * ЕСТЬNULL(ВалЦен.Кратность, 1))
	|		КОНЕЦ ЦенаРуб,
	|
	| 	ЕСТЬNULL(Акц.НоваяЦена, Цен.Цена)	Цена,
	|	ЕСТЬNULL(Акц.Валюта, Цен.Валюта) 	Валюта,
	|	ЕСТЬNULL(Акц.Акция, &ПустаяАкция)  	Акция
	|
	|ПОМЕСТИТЬ ЦеныСейчас
	|ИЗ 
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&КонецСегодня, ТипЦен = &ТипЦен И Номенклатура В(ВЫБРАТЬ Номенклатура ИЗ Остатки)) Цен
	|ЛЕВОЕ СОЕДИНЕНИЕ 
	|	РегистрСведений.КурсыВалют.СрезПоследних(&КонецСегодня, ) ВалЦен
	|	ПО 	Цен.Валюта = ВалЦен.Валюта
	|	
	|ЛЕВОЕ СОЕДИНЕНИЕ 
	|	РегистрСведений.КурсыВалют.СрезПоследних(&КонецСегодня, Валюта В (ВЫБРАТЬ ВалютаУправленческогоУчета ИЗ Константы)) ВалУпр
	|	ПО ИСТИНА
	|	
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	АкцииСейчас	Акц
	|	ПО Цен.Номенклатура = Акц.Номенклатура
	|ЛЕВОЕ СОЕДИНЕНИЕ 
	|	РегистрСведений.КурсыВалют.СрезПоследних(, ) ВалЦенАкция
	|ПО  Акц.Валюта= ВалЦенАкция.Валюта		
	|	
	|;	
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Цен.ТипЦен 							ТипЦен,
	|	Цен.Номенклатура					Номенклатура, 
	|	Цен.Упаковка, 
	|	ВЫБОР 
	|		КОГДА НЕ Акц.НоваяЦена ЕСТЬ NULL ТОГДА
	|			ЕСТЬNULL(Акц.НоваяЦена, 0)*(ЕСТЬNULL(ВалЦенАкция.Курс, 1) * ЕСТЬNULL(ВалУпр.Кратность, 1)) / (ЕСТЬNULL(ВалУпр.Курс, 1) * ЕСТЬNULL(ВалЦенАкция.Кратность, 1)) 
	|		ИНАЧЕ
	|			Цен.Цена * (ЕСТЬNULL(ВалЦен.Курс, 1) * ЕСТЬNULL(ВалУпр.Кратность, 1)) / (ЕСТЬNULL(ВалУпр.Курс, 1) * ЕСТЬNULL(ВалЦен.Кратность, 1))
	|		КОНЕЦ ЦенаРуб,
	|
	| 	ЕСТЬNULL(Акц.НоваяЦена, Цен.Цена)	Цена,
	|	ЕСТЬNULL(Акц.Валюта, Цен.Валюта) 	Валюта,
	|	ЕСТЬNULL(Акц.Акция, &ПустаяАкция)  	Акция
	|
	|ПОМЕСТИТЬ ЦеныВчера
	|
	|ИЗ 
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&КонецВчера, ТипЦен = &ТипЦен И Номенклатура В(ВЫБРАТЬ Номенклатура ИЗ Остатки)) Цен
	|ЛЕВОЕ СОЕДИНЕНИЕ 
	|	РегистрСведений.КурсыВалют.СрезПоследних(&КонецВчера, ) ВалЦен
	|	ПО 	Цен.Валюта = ВалЦен.Валюта
	|	
	|ЛЕВОЕ СОЕДИНЕНИЕ 
	|	РегистрСведений.КурсыВалют.СрезПоследних(&КонецВчера, Валюта В (ВЫБРАТЬ ВалютаУправленческогоУчета ИЗ Константы)) ВалУпр
	|	ПО ИСТИНА
	|	
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	АкцииВчера	Акц
	|	ПО Цен.Номенклатура = Акц.Номенклатура
	|ЛЕВОЕ СОЕДИНЕНИЕ 
	|	РегистрСведений.КурсыВалют.СрезПоследних(, ) ВалЦенАкция
	|ПО  Акц.Валюта= ВалЦенАкция.Валюта		
	|;
	|ВЫБРАТЬ 
	|	ЦеныСег.ТипЦен 					ТипЦен,
	|	ЦеныСег.Номенклатура 			Номенклатура, 
	|	ЦеныСег.Номенклатура.Артикул 	Артикул, 	
	|	ЦеныСег.Упаковка        		Упаковка,
	|   ЦеныСег.ЦенаПоАкции     		ЦенаПоАкции,
	|   ЦеныСег.ЦенаБезАкции			Цена,
	|	ЦеныСег.Акция           		Акция
	|ИЗ 
	|	ЦеныСейчас ЦеныСег
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ 
	|	ЦеныВчера  ЦеныВч
	|ПО 
	|	ЦеныСег.ТипЦен			= ЦеныВч.ТипЦен И
	|	ЦеныСег.Номенклатура 	= ЦеныВч.Номенклатура И
	|	ЦеныСег.Упаковка 		= ЦеныВч.Упаковка
	|ГДЕ	ВЫБОР КОГДА ЦеныСег.Валюта = ЦеныВч.Валюта ТОГДА ЦеныСег.Цена <> ЦеныВч.Цена ИНАЧЕ ЦеныСег.ЦенаРуб <> ЦеныВч.ЦенаРуб КОНЕЦ
	|
	|");
	
	Запрос.УстановитьПараметр("КонецВчера", 	НачалоДня(Дата) - 1);
	Запрос.УстановитьПараметр("КонецСегодня", 	КонецДня(Дата));
	Запрос.УстановитьПараметр("ТипЦен", ТипЦен);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("ПустаяАкция", Документы.Акция.ПустаяСсылка());
	
	Товары.Загрузить(Запрос.Выполнить().Выгрузить());
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоИзменениюЦен(Команда)
	ЗаполнитьПоИзменениюЦенНаСервере();
КонецПроцедуры




