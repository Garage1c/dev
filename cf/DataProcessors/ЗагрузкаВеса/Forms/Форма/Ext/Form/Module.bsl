
&НаСервере
Функция ЗагрузитьНаСервере(ДанныЭкселя, НачалоСообщОбОшибке)
	
	НачалоТекстоОшибки = НачалоСообщОбОшибке + "В строке № " + ДанныЭкселя.НомерСтроки + " "; 
	
	// Проверим корректность
	
	Ош = Ложь;
	
	Если ПустаяСтрока(ДанныЭкселя.Код) Тогда
		Ош = Истина;
		ОбщиеФункции.СообщитьТекст(НачалоТекстоОшибки + " не заполнен код номенклатуры!");
	КонецЕсли;
	
	Если ПустаяСтрока(ДанныЭкселя.Свойство) Тогда
		
		Ош = Истина;
		ОбщиеФункции.СообщитьТекст(НачалоТекстоОшибки + " не заполнено свойство!");
		
	Иначе
		
		Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыНоменклатуры.НайтиПоНаименованию(ДанныЭкселя.Свойство);
		Если Свойство.Пустая() Тогда
			ОбщиеФункции.СообщитьТекст(НачалоТекстоОшибки + " не найдено свойство - " + ДанныЭкселя.Свойство);
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПустаяСтрока(ДанныЭкселя.Значение) Тогда
		Ош = Истина;
		ОбщиеФункции.СообщитьТекст(НачалоТекстоОшибки + " не заполнено значение!");
	КонецЕсли;

	Если ПустаяСтрока(ДанныЭкселя.Производитель) Тогда
		ОбщиеФункции.СообщитьТекст(НачалоТекстоОшибки + " не заполнен производитель.");
		ВыбПроизводитель = Справочники.Производители.ПустаяСсылка();
	Иначе
		ВыбПроизводитель = Справочники.Производители.НайтиПоНаименованию(ДанныЭкселя.Производитель);
	КонецЕсли;

	
	Если Ош Тогда
		ОбщиеФункции.СообщитьТекст("Строка пропущена");
		Возврат Истина; // пропустим но не будем вылетать
	КонецЕсли;
	
	// Найдем номенклатуру
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ Ссылка ИЗ Справочник.Номенклатура ГДЕ ЭтоГруппа = ЛОЖЬ и Код = """ + ДанныЭкселя.Код + """");
	
	Выборка 	= Запрос.Выполнить().Выбрать();
	КолТоваров 	= Выборка.Количество();
	
	Если Не КолТоваров Тогда
		
		ОбщиеФункции.СообщитьТекст(НачалоТекстоОшибки + "по коду " + ДанныЭкселя.Код + " товар не найден, строка пропущена");
		Возврат Истина;
		
	ИначеЕсли КолТоваров > 1 Тогда
		
		ОбщиеФункции.СообщитьТекст(НачалоТекстоОшибки + "по коду " + ДанныЭкселя.Код + " найдено " + КолТоваров + "поз. товаров, всем им установлены одинаковые свойства");
		
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ВыбПроизводитель.Пустая() И Выборка.Ссылка.Производитель <> ВыбПроизводитель Тогда 
			ОбъектНоменклатура = Выборка.Ссылка.ПолучитьОбъект();
			ОбъектНоменклатура.Производитель = ВыбПроизводитель;
			Попытка
				ОбъектНоменклатура.Записать();
			Исключение
				опОшибки = ОписаниеОшибки();
				ОбщиеФункции.СообщитьТекст(НачалоТекстоОшибки + "не удалось записать элемент справочника Номенклатура: " + опОшибки);
			КонецПопытки;	
		КонецЕсли;
		
		// Найдем значение свойства
	
		ТипыЗначений 	= Свойство.ТипЗначения.Типы();
		ТипЗн 			= ТипыЗначений[0];
		МетаДанное 		= Метаданные.НайтиПоТипу(ТипЗн);
	
		Если ТипЗн = Тип("Строка") Тогда
		
			Значение = ДанныЭкселя.Значение;
			
		ИначеЕсли ТипЗн = Тип("Число") Тогда
			
			Попытка
				Значение = Число(ДанныЭкселя.Значение);
			Исключение
				ОбщиеФункции.СообщитьТекст(НачалоТекстоОшибки + "не удалось преобразовать к числу """ + ДанныЭкселя.Значение + """, строка пропущена");
				Прервать;
			КонецПопытки;
		
		ИначеЕсли Метаданные.Справочники.Содержит(МетаДанное) Тогда
			
			//ОбщиеФункции.СообщитьТекст("Справочник." + МетаДанное.Имя);
			
			ИмяСправочник 		= МетаДанное.Имя;
			ВладелецСправочника = Неопределено;
			
			Если ИмяСправочник = "ЗначенияДополнительныхРеквизитовНоменклатуры" Тогда
				
				ВладелецСправочника = Свойство;
				Значение 			= Справочники[ИмяСправочник].НайтиПоНаименованию(ДанныЭкселя.Значение,,,Свойство);
				
			Иначе
				
				Значение = Справочники[ИмяСправочник].НайтиПоНаименованию(ДанныЭкселя.Значение);
				
			КонецЕсли;
				
			Если Значение.Пустая() Тогда
				
				// Создадим новое значение
				
				ЗначениеОбъект = Справочники[ИмяСправочник].СоздатьЭлемент();
				ЗначениеОбъект.Наименование = ДанныЭкселя.Значение;
				
				Если ВладелецСправочника <> Неопределено Тогда
					ЗначениеОбъект.Владелец 	= ВладелецСправочника;
				КонецЕсли;
				
				Попытка
					ЗначениеОбъект.Записать();
				Исключение
					опОшибки = ОписаниеОшибки();
					ОбщиеФункции.СообщитьТекст(НачалоТекстоОшибки + "не удалось записать значение справочника " + ИмяСправочник + ", значение - " + ДанныЭкселя.Значение + "
									|" + опОшибки);
					Возврат Ложь;
				КонецПопытки;
				
				Значение = ЗначениеОбъект.Ссылка;
				
			КонецЕсли;
		
		Иначе
			
			ОбщиеФункции.СообщитьТекст(НачалоТекстоОшибки + "не определен тип свойства " + ТипЗн + ", нужно прописать определение типа в обработчике, обратитесь в IT");
			Возврат Ложь;
		
		КонецЕсли;
		
		// Проверим свойство
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ 	ИСТИНА 
		|ИЗ 		РегистрСведений.ЗначенияДополнительныхРеквизитовНоменклатуры 
		|ГДЕ 		Номенклатура = &Номенклатура И Свойство = &Свойство И Значение = &Значение");
		
		Запрос.УстановитьПараметр("Номенклатура", 	Выборка.Ссылка);
		Запрос.УстановитьПараметр("Свойство", 		Свойство);
		Запрос.УстановитьПараметр("Значение", 		Значение);
		
		Если Запрос.Выполнить().Пустой() Тогда  // раз нет значит внесем
		
			// Запишем свойство
			
			НовЗапись = РегистрыСведений.ЗначенияДополнительныхРеквизитовНоменклатуры.СоздатьМенеджерЗаписи();
			НовЗапись.Номенклатура 	= Выборка.Ссылка;
			НовЗапись.Свойство 		= Свойство;
			НовЗапись.Значение 		= Значение;
			НовЗапись.Владелец 		= Выборка.Ссылка;
			
			Попытка
				НовЗапись.Записать();
			Исключение
				опОшибки = ОписаниеОшибки();
				ОбщиеФункции.СообщитьТекст(НачалоТекстоОшибки + "не удалось записать значение в регистр
										|" + опОшибки);
				Возврат Ложь;
			КонецПопытки;
			
			// Все загруженные свойства обновяться на сайте
		
			Если Объект.ОбновлятьНаСайте Тогда
			
				//Если Не HTTP.ДатьЗаданиеНаИзменениеСайту(
				//			Выборка.Ссылка, 
				//			Перечисления.КомандыHTTP.POST, 
				//			"/api/products.json",
				//			"",
				//			Ложь) Тогда
				//	Возврат Ложь;
				//КонецЕсли;
			КонецЕсли;
 		
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина
		
КонецФункции

&НаКлиенте
Функция ВыгрузитьДанные(Лист, НачалоСообщОбОшибке)
	
	стрОшибки = "";
	
	КолВоКолонок 	= Лист.Cells(1,1).SpecialCells(11).Column;
	КолВоСтрок 		= Лист.Cells(1,1).SpecialCells(11).Row;
	
	НачальнаяСтрока = 2;
	
	Для Ном = НачальнаяСтрока По КолВоСтрок Цикл
		
		// передадим серваку на обработку
		
		Если Не ЗагрузитьНаСервере(
					Новый Структура("НомерСтроки, Код, Свойство, Значение, Производитель",
								Ном,
								СокрЛП(Лист.Cells(Ном, 1).Value),
								СокрЛП(Лист.Cells(Ном, 5).Value),
								СокрЛП(Лист.Cells(Ном, 6).Value),
								СокрЛП(Лист.Cells(Ном, 4).Value)), НачалоСообщОбОшибке) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		// отобразим ход загрузки
		
		//Всего 		= КолВоСтрок - НачальнаяСтрока;
		//ПорНомер 	= Ном - НачальнаяСтрока;
		//Состояние("Загрузка свойст из экселя", ПорНомер / (КолВоСтрок - НачальнаяСтрока) * 100, "" + ПорНомер + " из " + Всего);
		//
		//ОбработкаПрерыванияПользователя();
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция СчитатьСЛиста(Эксель, ИмяЛиста, СтруктураКолонок, Таблица, СообщенияСостояния = "")
	
	Попытка
		Лист = Эксель.Sheets(СокрЛП(ИмяЛиста));
	Исключение
		ОбщиеФункции.СообщитьТекст("Не найден лист экселя по имени """ + ИмяЛиста + """");
		COMФункцииДиалогов.ЗакрытьЭксель(Эксель);
		Возврат Ложь;
	КонецПопытки;
	
	КолВоКолонок 	= Лист.Cells(1,1).SpecialCells(11).Column;
	КолВоСтрок 		= Лист.Cells(1,1).SpecialCells(11).Row;
	
	НачальнаяСтрока = 2;
	ПорНомер 		= 0;
	
	Для Ном = НачальнаяСтрока По КолВоСтрок Цикл ПорНомер = ПорНомер + 1;
		
		ОбработкаПрерыванияПользователя();
		
		// Загрузим для обработки
		
		НовСтрока = Таблица.Добавить();
		
		Для Каждого ЭлементКОлонки Из СтруктураКолонок Цикл
			
			ЗначениеЭкселя 	= Лист.Cells(Ном, ЭлементКолонки.Значение).Value;
			ЭтоЧисло		= ТипЗнч(ЗначениеЭкселя) = Тип("Число");
			
			Если ЭтоЧисло Тогда
				Текст = Формат(ЗначениеЭкселя, "ЧГ=");
			Иначе
				Текст = СокрЛП(ЗначениеЭкселя);
			КонецЕсли;
			
			Если ЭлементКолонки.Ключ = "Артикул" Тогда
				
				НовСтрока[ЭлементКолонки.Ключ] = Текст;
				
			Иначе
				
				Если Не ПустаяСтрока(Текст) Тогда
					
					Если ЭтоЧисло Тогда
						
						НовСтрока[ЭлементКолонки.Ключ] = Текст;
						
					Иначе
					
						Попытка
							НовСтрока[ЭлементКолонки.Ключ] = Число(Текст);
						Исключение
						КонецПопытки;
						
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Состояние(СообщенияСостояния, ПорНомер / (КолВоСтрок - НачальнаяСтрока) * 100, "" + ПорНомер + " из " + КолВоСтрок);
		
	КонецЦикла;
	
	Возврат Истина;
	                        
КонецФункции

&НаСервере
Функция ОбъектыРавны(Выборка, Структура)
	
	Одинаковые = Истина;
	
	Для Каждого Элемент Из Структура ЦИкл
		
		Если Элемент.Ключ = "Артикул" Тогда 
			Продолжить; 
		КонецЕсли;
		
		Если Выборка[Элемент.Ключ] <> Структура[Элемент.Ключ] Тогда
			Одинаковые = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Одинаковые;
	
КонецФункции
&НаСервере
Функция ЗаписатьОбъектПоСтруктуре(СпрОбъект, Структура, ИмяСправочника)
	
	Для Каждого Элемент Из Структура ЦИкл
		
		Если Элемент.Ключ = "Артикул" Тогда 
			Продолжить; 
		КонецЕсли;
		
		СпрОбъект[Элемент.Ключ] = Структура[Элемент.Ключ];
		
	КонецЦикла;
	
	Попытка
		СпрОбъект.Записать();
	Исключение
		стрОшибки = ОписаниеОшибки();
		ОбщиеФункции.СообщитьТекст("Ошибка при записи <" + ИмяСправочника + ">
										|" + стрОшибки);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция УстановитьНаТоварВес(ИндексСтроки)
	
	Строка		= ТаблицаТоваров[ИндексСтроки];
	Запрос 		= Новый Запрос("ВЫБРАТЬ Ссылка, Вес, Объем ИЗ Справочник.Номенклатура ГДЕ Артикул = """ + Строка.Артикул + """");
	Выборка 	= Запрос.Выполнить().Выбрать();
	КолТоваров 	= Выборка.Количество();
	
	
	НачалоТекстоОшибки = "В строке товара №" + (ИндексСтроки + 1) + " ";
	
	Если Не КолТоваров Тогда
		
		ОбщиеФункции.СообщитьТекст(НачалоТекстоОшибки + "по артикулу " + Строка.Артикул + " товар не найден, строка пропущена");
		Возврат Истина;
		
	ИначеЕсли КолТоваров > 1 Тогда
		
		ОбщиеФункции.СообщитьТекст(НачалоТекстоОшибки + "по артикулу " + Строка.Артикул + " найдено " + КолТоваров + "поз. товаров, всем им установлены одинаковый вес");
		
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		Если 	Выборка.Вес <> Строка.Вес Или
				Выборка.Объем <> Строка.Объем Тогда
				
				
			СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			СпрОбъект.Вес 	= Строка.Вес;
			СпрОбъект.Объем = Строка.Объем;
			
			Попытка
				СпрОбъект.Записать();
			Исключение
				стрОшибки = ОписаниеОшибки();
				ОбщиеФункции.СообщитьТекст("При записи справочника номенклатура " + Выборка.Ссылка + " произошли ошибки
												|" + стрОшибки);
				Возврат Ложь;
			КонецПопытки;
			
			Если Объект.ОбновлятьНаСайте Тогда
			
				//Если Не HTTP.ДатьЗаданиеНаИзменениеСайту(
				//			Выборка.Ссылка, 
				//			Перечисления.КомандыHTTP.POST, 
				//			"/api/products.json",
				//			"",
				//			Ложь) Тогда
				//	Возврат Ложь;
				//КонецЕсли;
			КонецЕсли;
				
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции
&НаСервере
Функция УстановитьНаУпаковкуВес(ИндексСтроки, Структура, ИмяТаблицы, НаименованиеУпаковки)
	
	Строка = ЭтаФорма[ИмяТаблицы][ИндексСтроки];
	
	Запрос 		= Новый Запрос("ВЫБРАТЬ Ссылка, Вес, Объем ИЗ Справочник.Номенклатура ГДЕ Артикул = """ + Строка.Артикул + """");
	Выборка 	= Запрос.Выполнить().Выбрать();
	КолТоваров 	= Выборка.Количество();
	
	НачалоТекстоОшибки = "В строке <" + НаименованиеУпаковки + "> №" + (ИндексСтроки + 1) + " ";
	
	Если Не КолТоваров Тогда
		
		ОбщиеФункции.СообщитьТекст(НачалоТекстоОшибки + "по артикулу " + Строка.Артикул + " товар не найден, строка пропущена");
		Возврат Истина;
		
	ИначеЕсли КолТоваров > 1 Тогда
		
		ОбщиеФункции.СообщитьТекст(НачалоТекстоОшибки + "по артикулу " + Строка.Артикул + " найдено " + КолТоваров + "поз. товаров, всем им установлены одинаковая упаковка");
		
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		// Полуим или создадим новую упаковку
		
		ВыборкаУпаковок = Справочники.УпаковкиНоменклатуры.Выбрать(, Выборка.Ссылка, Новый Структура("Наименование", НаименованиеУпаковки));
		
		ЕстьКтото = Ложь;
		Пока ВыборкаУпаковок.Следующий() Цикл ЕстьКтото = Истина;
			
			Если Не ОбъектыРавны(ВыборкаУпаковок, Структура) Тогда
				
				Если Не ЗаписатьОбъектПоСтруктуре(ВыборкаУпаковок.Ссылка.ПолучитьОбъект(), Структура, НаименованиеУпаковки) Тогда
					Возврат ЛОжь;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ЕстьКтото Тогда
			
			НовУпаковка = Справочники.УпаковкиНоменклатуры.СоздатьЭлемент();
			
			НовУпаковка.Владелец 		= Выборка.Ссылка;
			НовУпаковка.Наименование 	= НаименованиеУпаковки;
			
			Если Не ЗаписатьОбъектПоСтруктуре(НовУпаковка, Структура, НаименованиеУпаковки) Тогда
				Возврат ЛОжь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции
&НаСервере
Функция УстановитьНаМаленькуюУпаковкуВес(ИндексСтроки)
	
	//Строка = ТаблицаМаленькойУпаковки[ИндексСтроки];
	//
	//Запрос 		= Новый Запрос("ВЫБРАТЬ Ссылка, Вес, Объем ИЗ Справочник.Номенклатура ГДЕ Артикул = """ + Строка.Артикул + """");
	//Выборка 	= Запрос.Выполнить().Выбрать();
	//КолТоваров 	= Выборка.Количество();
	//
	//НачалоТекстоОшибки = "В строке <" + НаименованиеУпаковки + "> №" + (ИндексСтроки + 1) + " ";
	//
	//Если Не КолТоваров Тогда
	//	
	//	ОбщиеФункции.СообщитьТекст(НачалоТекстоОшибки + "по артикулу " + Строка.Артикул + " товар не найден, строка пропущена");
	//	Возврат Истина;
	//	
	//ИначеЕсли КолТоваров > 1 Тогда
	//	
	//	ОбщиеФункции.СообщитьТекст(НачалоТекстоОшибки + "по артикулу " + Строка.Артикул + " найдено " + КолТоваров + "поз. товаров, всем им установлены одинаковая упаковка");
	//	
	//КонецЕсли;
	//
	//Пока Выборка.Следующий() Цикл
	//	
	//	// Полуим или создадим новую упаковку
	//	
	//	ВыборкаУпаковок = Справочники.УпаковкиНоменклатуры.Выбрать(, Выборка.Ссылка, Новый Структура("Наименование", НаименованиеУпаковки));
	//	
	//	ЕстьКтото = Ложь;
	//	Пока ВыборкаУпаковок.Следующий() Цикл ЕстьКтото = Истина;
	//		
	//		Если Не ОбъектыРавны(ВыборкаУпаковок, Структура) Тогда
	//			
	//			Если Не ЗаписатьОбъектПоСтруктуре(ВыборкаУпаковок.Ссылка.ПолучитьОбъект(), Структура, НаименованиеУпаковки) Тогда
	//				Возврат ЛОжь;
	//			КонецЕсли;
	//		КонецЕсли;
	//		
	//	КонецЦикла;
	//	
	//	Если Не ЕстьКтото Тогда
	//		
	//		НовУпаковка = Справочники.УпаковкиНоменклатуры.СоздатьЭлемент();
	//		
	//		НовУпаковка.Владелец 		= Выборка.Ссылка;
	//		НовУпаковка.Наименование 	= НаименованиеУпаковки;
	//		
	//		Если Не ЗаписатьОбъектПоСтруктуре(НовУпаковка, Структура, НаименованиеУпаковки) Тогда
	//			Возврат ЛОжь;
	//		КонецЕсли;
	//		
	//	КонецЕсли;
	//	
	//КонецЦикла;
	//
	//Возврат Истина;
	
КонецФункции


&НаКлиенте
Процедура Загрузить(Команда)
	
	стрОшибки = "";
	
	ТаблицаТоваров.Очистить();
	ТаблицаМаленькойУпаковки.Очистить();
	ТаблицаБольшойУпаковки.Очистить();
	
	// Проверим файл
	
	Если ПустаяСтрока(Объект.ИмяФайла) Тогда
		ОбщиеФункции.СообщитьТекст("Не выбран файл", "ИмяФайла", Объект);
		Возврат;
	КонецЕсли;
	
	// Получим эксель
	
	Эксель = COMФункцииДиалогов.ОткрытьФайлЭкселя(Объект.ИмяФайла, стрОшибки);
	
	Если Эксель = Неопределено Тогда
		ОбщиеФункции.СообщитьТекст(стрОшибки);
		Возврат;
	КонецЕсли;
	
	// Считаем информацию со всех листов
	
	структураТоваров 			= Новый Структура("Артикул, Вес, Объем",
															1,2,3);
	структураМалойУпаковки 		= Новый Структура("Артикул, Коэффициент, Вес, ВесПустойУпаковки, Объем",
															1,2,3,4,5);
	структураБольшойУпаковки 	= Новый Структура("Артикул, Коэффициент, Количество, ВесН, ВесБ, Объем",
															1,2,5,6);
	
	Если 	Не ПустаяСтрока(Объект.ЛистЭкселяТовара) И
			Не СчитатьСЛиста(Эксель, Объект.ЛистЭкселяТовара, структураТоваров, ТаблицаТоваров, "Загрузка из экселя товаров") Тогда
		COMФункцииДиалогов.ЗакрытьЭксель(Эксель);
		Возврат;
	КонецЕсли;
	
	Если 	Не ПустаяСтрока(Объект.ЛистЭкселяМаленькойУпаковки) И
			Не СчитатьСЛиста(Эксель, Объект.ЛистЭкселяМаленькойУпаковки, структураМалойУпаковки, ТаблицаМаленькойУпаковки, "Загрузка из экселя маленькой упаковки") Тогда
		COMФункцииДиалогов.ЗакрытьЭксель(Эксель);
		Возврат;
	КонецЕсли;
	
	Если 	Не ПустаяСтрока(Объект.ЛистЭкселяБольшойУпаковки) И
			Не СчитатьСЛиста(Эксель, Объект.ЛистЭкселяБольшойУпаковки, структураБольшойУпаковки, ТаблицаБольшойУпаковки, "Загрузка из экселя большой упаковки") Тогда
		COMФункцииДиалогов.ЗакрытьЭксель(Эксель);
		Возврат;
	КонецЕсли;
 
	// Загрузим по товарам
	
	КолВоСтрок = ТаблицаТоваров.Количество();
	
	Для ИндексСтроки = 0 По КолВоСтрок - 1 Цикл;
		
		ОбработкаПрерыванияПользователя();
		
		Если Не УстановитьНаТоварВес(ИндексСтроки) Тогда
			COMФункцииДиалогов.ЗакрытьЭксель(Эксель);
			Возврат;
		КонецЕсли;
		
		Состояние("Загрузка веса товаров в базу", (ИндексСтроки - 1) / КолВоСтрок * 100, "" + (ИндексСтроки + 1) + " из " + КолВоСтрок);
		
	КонецЦикла;
	
	// Загрузим маленькие упаковки
	
	КолВоСтрок 	= ТаблицаМаленькойУпаковки.Количество();
	
	Для ИндексСтроки = 0 По КолВоСтрок - 1 Цикл;
		
		ОбработкаПрерыванияПользователя();
		
		Если Не УстановитьНаУпаковкуВес(ИндексСтроки, структураМалойУпаковки, "ТаблицаМаленькойУпаковки", НаименованиеМаленькойУпаковки) Тогда
			COMФункцииДиалогов.ЗакрытьЭксель(Эксель);
			Возврат;
		КонецЕсли;
		
		Состояние("Загрузка веса маленькой упаковки в базу", (ИндексСтроки - 1) / КолВоСтрок * 100, "" + (ИндексСтроки - 1) + " из " + КолВоСтрок);
		
	КонецЦикла;
	
	// Загрузим большие упаковки
	
	КолВоСтрок 	= ТаблицаБольшойУпаковки.Количество();
	
	Для ИндексСтроки = 0 По КолВоСтрок - 1 Цикл;
		
		ОбработкаПрерыванияПользователя();
		
		Если Не УстановитьНаУпаковкуВес(ИндексСтроки, структураМалойУпаковки, "ТаблицаБольшойУпаковки",  НаименованиеБольшойУпаковки) Тогда
			COMФункцииДиалогов.ЗакрытьЭксель(Эксель);
			Возврат;
		КонецЕсли;
		
		Состояние("Загрузка веса большой упаковки в базу", (ИндексСтроки - 1) / КолВоСтрок * 100, "" + (ИндексСтроки - 1) + " из " + КолВоСтрок);
		
	КонецЦикла;
	
	COMФункцииДиалогов.ЗакрытьЭксель(Эксель);
	ОбщиеФункции.СообщитьТекст("Вес загружен.");
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДВ = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДВ.Фильтр =  "Эксель (*.xls)|*.xls*";
	
	Если ДВ.Выбрать() Тогда
		
		Объект.ИмяФайла = ДВ.ПолноеИмяФайла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	
КонецПроцедуры

