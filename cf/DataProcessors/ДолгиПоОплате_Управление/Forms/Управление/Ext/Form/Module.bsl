&НаКлиенте
Перем НеОтрабатыватьАктивациюСтроки;


&НаСервере
Процедура ПрочитатьТаблицу()
	
	
	//новый запрос
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Минимум(Период) КАК Дата,
	                      |	Сумма(Сумма),
	                      |	Заказ
	                      |ПОМЕСТИТЬ Заказы
	                      |ИЗ
	                      |	РегистрНакопления.ДолгиПоЗаказам  
	                      |ГДЕ
	                      |	Контрагент = &Контрагент
	                      |	И Период > &ДатаНачала
	                      |	И ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	                      |
	                      |Сгруппировать по Заказ
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	""оставлено для совместимости""
	                      |ПОМЕСТИТЬ Движ
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	Регистратор  ДокументОплаты,
	                      |	Период КАК Дата,
	                      |	Сумма,
	                      |	Заказ,
	                      |	ДокументОтгрузки
	                      |ПОМЕСТИТЬ Оплаты
	                      |ИЗ
	                      |	РегистрНакопления.ДолгиПоОтгрузкам  
	                      |ГДЕ
	                      |	Контрагент = &Контрагент
	                      |	И Период > &ДатаНачала
	                      |	И ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	Заказ,
	                      |	ДокументОтгрузки,
	                      |	ДокументОтгрузки.Дата КАК Дата,
	                      |	Сумма КАК СуммаОтгрузки
	                      |ПОМЕСТИТЬ Отгрузки
	                      |ИЗ
	                      |	РегистрНакопления.ДолгиПоОтгрузкам  
	                      |ГДЕ
	                      |	Контрагент = &Контрагент
	                      |	И Период > &ДатаНачала
	                      |	И ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
						  |Выбрать Дата,Заказ,Максимум(Сумма),Сумма(СуммаОплаты),Сумма(СуммаОтгрузки),
	                      |	ВЫБОР
	                      |		КОГДА Максимум(Сумма) = 0
	                      |			ТОГДА 0
	                      |		КОГДА Сумма(СуммаОплаты) = 0
	                      |			ТОГДА 1
	                      |		КОГДА Сумма(СуммаОплаты) = Максимум(Сумма)
	                      |			ТОГДА 3
	                      |		ИНАЧЕ 2
	                      |	КОНЕЦ КАК КартинкаОплаты,
	                      |	ВЫБОР
	                      |		КОГДА Сумма(СуммаОтгрузки) = 0
	                      |			ТОГДА 0
	                      |		КОГДА Сумма(СуммаОтгрузки) = Максимум(Сумма)
	                      |			ТОГДА 2
	                      |		ИНАЧЕ 1
	                      |	КОНЕЦ КАК КартинкаОтгрузки
						  |из
						  |(
	                      |ВЫБРАТЬ
	                      |	Заказы.Дата КАК Дата,
	                      |	Заказы.Заказ КАК Заказ,
	                      |	Заказы.Сумма КАК Сумма,
	                      |	0 КАК СуммаОплаты,
	                      |	ЕСТЬNULL(Отгрузки.СуммаОтгрузки, 0) КАК СуммаОтгрузки
	                      |ИЗ
	                      |	Заказы КАК Заказы
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Отгрузки КАК Отгрузки
	                      |		ПО Заказы.Заказ = Отгрузки.Заказ
						  |
						  |Объединить все
						  |
	                      |ВЫБРАТЬ
	                      |	Заказы.Дата КАК Дата,
	                      |	Заказы.Заказ КАК Заказ,
	                      |	Заказы.Сумма КАК Сумма,
	                      |	ЕСТЬNULL(Оплаты.Сумма, 0) КАК СуммаОплаты,
	                      |	0 КАК СуммаОтгрузки
	                      |ИЗ
	                      |	Заказы КАК Заказы
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Оплаты 
	                      |		ПО Заказы.Заказ = Оплаты.Заказ
						  |) как вт
						  |Сгруппировать по Дата,Заказ
	                      |
	                      |УПОРЯДОЧИТЬ ПО Дата
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	Отгрузки.Дата КАК Дата,
	                      |	Отгрузки.ДокументОтгрузки,
	                      |	Отгрузки.Заказ,
	                      |	Отгрузки.СуммаОтгрузки КАК Сумма
	                      |ИЗ
	                      |	Отгрузки КАК Отгрузки
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Дата
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	Оплаты.ДокументОплаты,
	                      |	Оплаты.Дата КАК Дата,
	                      |	СУММА(Оплаты.Сумма) КАК Сумма
	                      |ИЗ
	                      |	Оплаты КАК Оплаты
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	Оплаты.ДокументОплаты,
	                      |	Оплаты.Дата
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Дата
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	Оплаты.ДокументОплаты,
	                      |	Оплаты.Дата,
	                      |	Оплаты.Сумма,
	                      |	Оплаты.Заказ,
	                      |	Оплаты.ДокументОтгрузки
	                      |ИЗ
	                      |	Оплаты КАК Оплаты
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	Отгрузки.Дата КАК Дата,
	                      |	Отгрузки.ДокументОтгрузки,
	                      |	Отгрузки.Заказ,
	                      |	Отгрузки.СуммаОтгрузки КАК Сумма
	                      |ИЗ
	                      |	Отгрузки КАК Отгрузки"
	
	);
	
	
	
	//новый запрос
	
	
	Запрос.УстановитьПараметр("ДатаНачала", 	ДатаНачала);
	Запрос.УстановитьПараметр("Контрагент", 		Контрагент);
	
	Пакет = Запрос.ВыполнитьПакет();
	
	//таблЗаказы.Загрузить(Пакет[0].Выгрузить());
	//таблОтгрузки.Загрузить(Пакет[1].Выгрузить());
	//таблОплаты.Загрузить(Пакет[2].Выгрузить());
	//таблСвязи.Загрузить(Пакет[4].Выгрузить());
	
	таблЗаказы.Загрузить(Пакет[4].Выгрузить());
	таблОтгрузки.Загрузить(Пакет[5].Выгрузить());
	таблОплаты.Загрузить(Пакет[6].Выгрузить());
	таблСвязиОпл.Загрузить(Пакет[7].Выгрузить());
	таблСвязиОтгр.Загрузить(Пакет[8].Выгрузить());
	
	
	//ВыборкаДолгов = Пакет[3].Выбрать();
	//Пока ВыборкаДолгов.Следующий() Цикл
	//	
	//	Если 	ВыборкаДолгов.ДокументОтгрузки <> Неопределено И
	//			ВыборкаДолгов.Заказ <> Неопределено Тогда
	//			
	//		СтрокаЗаказа = таблЗаказы.НайтиСтроки(Новый Структура("Заказ", ВыборкаДолгов.Заказ));
	//		Для Каждого Строка Из СтрокаЗаказа Цикл
	//			
	//		КонецЦикла;
	//			
	//	КонецЕсли;
	//КонецЦикла;
	
	
		
КонецПроцедуры
&НаСервере
Процедура ОбновитьВсе()
	
	ПрочитатьТаблицу();
	
	ИтогЗаказы = "";
	ИтогОплаты = "";
	ИтогОтгрузки = "";
	
	ДолгПарнера = ?(Контрагент.Пустая(), 0, ДенежныеСредства.ПолучитьДолгКонтрагента(Контрагент));
	
КонецПроцедуры
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//Если Не Параметры.Организация.Пустая() Тогда
	//	Организация = Параметры.Организация;
	//КонецЕсли;
	
	Контрагент=Параметры.Контрагент;
	
	ДатаНачала=ДобавитьМесяц(ТекущаяДата(),-24);
	
	
	ОбновитьВсе();
	
КонецПроцедуры

// ПОЗИЦИОНИРОВАНИЯ СТРОК В СВЯЗАННЫХ ТАБЛИЦАХ

&НаКлиенте
Процедура ПроставитьТекДокиВТаблице(таблица, ДокСсылка, ИмяКолонкиПоиска, ИмяКолонкиДокумента, ИтоговаяСтрока, ТаблСвязи)
	
	СтрокиСвязей 	= таблСвязи.НайтиСтроки(Новый Структура(ИмяКолонкиПоиска, ДокСсылка));
	колДоков		= 0;
	Отработанные 	= Новый Соответствие;
	
	Для Каждого СтрокаСвязи Из СтрокиСвязей Цикл
		
		СтрокиДока = Таблица.НайтиСтроки(Новый Структура(ИмяКолонкиДокумента, СтрокаСвязи[ИмяКолонкиДокумента]));
		Для Каждого СтрокаДока Из СтрокиДока Цикл 
			
			Найденный = СтрокаДока[ИмяКолонкиДокумента];
			Если Отработанные[Найденный] = Неопределено Тогда колДоков = колДоков + 1;
			
				СтрокаДока[ИмяКолонкиПоиска] = ДокСсылка;
				Отработанные.Вставить(Найденный, ИСТИНА);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ИтоговаяСтрока = ?(колДоков, "связанных " + колДоков + " док.", "нет связанных");
	
КонецПроцедуры
&НаКлиенте
Процедура УстановитьКурсорВПодобнойТаблице(ТаблицаУстановки, ЭлементТаблицаНаФорме, Отбор)
	
	Строки 		= ТаблицаУстановки.НайтиСтроки(Отбор);
	колСтрок 	= Строки.Количество();
	
	Если колСтрок Тогда
		ЭлементТаблицаНаФорме.ТекущаяСтрока = Строки[колСтрок - 1].ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ПокраситьСерым(Таблица, ДатаНеБолее = '00010101')
	
	Для Каждого Строка Из Таблица Цикл
		
		Строка.Серый = ДатаНеБолее <> '00010101' И Строка.Дата > ДатаНеБолее;
		
	КонецЦикла;
	
КонецПроцедуры
&НаКлиенте
Процедура ЗаказыПриАктивизацииСтроки(Элемент)
	
	Если НеОтрабатыватьАктивациюСтроки <> Истина Тогда
	
		текОтгрузка = Неопределено;
		текОплата 	= Неопределено;
		ПокраситьСерым(таблЗаказы);
		
		текДанные = Элемент.ТекущиеДанные;
		
		Если текДанные <> Неопределено Тогда
			
			текЗаказ = текДанные.Заказ;
			
			// Установим значения текущих документов в таблице
			
			ПроставитьТекДокиВТаблице(таблОтгрузки, текЗаказ, "Заказ", "ДокументОтгрузки", ИтогОтгрузки, таблСвязиОтгр);
			ПроставитьТекДокиВТаблице(таблОплаты, текЗаказ, "Заказ", "ДокументОплаты", ИтогОплаты, таблСвязиОпл);
			
			// Установим курсоры на оплатах и отгрузках
			
			Отбор = Новый Структура("Заказ", текЗаказ);
			
			НеОтрабатыватьАктивациюСтроки = Истина;
			
			УстановитьКурсорВПодобнойТаблице(таблОтгрузки, Элементы.Отгрузки, Отбор);
			УстановитьКурсорВПодобнойТаблице(таблОплаты, Элементы.Оплаты, Отбор);
			
			// Сбросим курсоры
			
			Элементы.Отгрузки.ТекущаяСтрока = Неопределено;
			Элементы.Оплаты.ТекущаяСтрока = Неопределено;
			
			// Покрасим серым
			
			ПокраситьСерым(таблОтгрузки, текДанные.Дата);
			ПокраситьСерым(таблОплаты, текДанные.Дата);
			
			НеОтрабатыватьАктивациюСтроки = Ложь;
			
			ИтогЗаказы = ?(текДанные.КартинкаОплаты = 2,"оплачен",?(текДанные.КартинкаОплаты = 1,"оплачен частично","не оплачен")) + ", " +
						?(текДанные.КартинкаОтгрузки = 2,"отгружен",?(текДанные.КартинкаОтгрузки = 1,"отгружен частично","не отгружен"))
			
		Иначе
			
			ИтогЗаказы	 	= "";
			ИтогОтгрузки 	= "";
			ИтогОплаты 		= "";
			текЗаказ 		= Неопределено;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ОтгрузкиПриАктивизацииСтроки(Элемент)
	
	Если НеОтрабатыватьАктивациюСтроки <> Истина Тогда
	
		текЗаказ 	= Неопределено;
		текОплата 	= Неопределено;
		ПокраситьСерым(таблОтгрузки);
		
		текДанные = Элемент.ТекущиеДанные;
		
		Если текДанные <> Неопределено Тогда
			
			текОтгрузка = текДанные.ДокументОтгрузки;
			
			// Установим значения текущих документов в таблице
			
			ПроставитьТекДокиВТаблице(таблЗаказы, текОтгрузка, "ДокументОтгрузки", "Заказ", ИтогЗаказы, ТаблСвязиОтгр);
			ПроставитьТекДокиВТаблице(таблОплаты, текОтгрузка, "ДокументОтгрузки", "ДокументОплаты", ИтогОплаты, ТаблСвязиОпл);
			
			// Установим курсоры на оплатах и отгрузках
			
			Отбор = Новый Структура("ДокументОтгрузки", текОтгрузка);
			
			НеОтрабатыватьАктивациюСтроки = Истина;
			
			УстановитьКурсорВПодобнойТаблице(таблЗаказы, Элементы.Заказы, Отбор);
			УстановитьКурсорВПодобнойТаблице(таблОплаты, Элементы.Оплаты, Отбор);
			
			// Сбросим курсоры
			
			Элементы.Заказы.ТекущаяСтрока = Неопределено;
			Элементы.Оплаты.ТекущаяСтрока = Неопределено;
			
			// Покрасим серым
			
			ПокраситьСерым(таблЗаказы, текДанные.Дата);
			ПокраситьСерым(таблОплаты, текДанные.Дата);
			
			НеОтрабатыватьАктивациюСтроки = Ложь;
			
			ИтогОтгрузки = "";
			
		Иначе
			
			ИтогЗаказы 		= "";
			ИтогОтгрузки 	= "";
			ИтогОплаты 		= "";
			текОтгрузка		= Неопределено;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ОплатыПриАктивизацииСтроки(Элемент)
	
	Если НеОтрабатыватьАктивациюСтроки <> Истина Тогда
	
		текОтгрузка = Неопределено;
		текЗаказ 	= Неопределено;
		ПокраситьСерым(таблОплаты);
		
		текДанные = Элемент.ТекущиеДанные;
		
		Если текДанные <> Неопределено Тогда
			
			текОплата = текДанные.ДокументОплаты;
			
			// Установим значения текущих документов в таблице
			
			ПроставитьТекДокиВТаблице(таблОтгрузки, текОплата, "ДокументОплаты", "ДокументОтгрузки", ИтогОтгрузки, ТаблСвязиОпл);
			ПроставитьТекДокиВТаблице(таблЗаказы, текОплата, "ДокументОплаты", "Заказ", ИтогЗаказы, ТаблСвязиОпл);
			
			// Установим курсоры на оплатах и отгрузках
			
			Отбор = Новый Структура("ДокументОплаты", текОплата);
			
			НеОтрабатыватьАктивациюСтроки = Истина;
			
			УстановитьКурсорВПодобнойТаблице(таблОтгрузки, Элементы.Отгрузки, Отбор);
			УстановитьКурсорВПодобнойТаблице(таблЗаказы, Элементы.Заказы, Отбор);
			
			// Сбросим курсоры
			
			Элементы.Отгрузки.ТекущаяСтрока = Неопределено;
			Элементы.Заказы.ТекущаяСтрока = Неопределено;
			
			// Покрасим серым
			
			ПокраситьСерым(таблОтгрузки, текДанные.Дата);
			ПокраситьСерым(таблЗаказы, текДанные.Дата);
			
			НеОтрабатыватьАктивациюСтроки = Ложь;
			
			ИтогОплаты 	= "";
			
		Иначе
			
			ИтогОтгрузки 	= "";
			ИтогЗаказы 		= "";
			текОплата 		= Неопределено;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// ВЫБОР ДОКУМЕНТОВ ДВОЙНЫМ КЛИКОМ

&НаСервере
Функция ПолучитьБП(Заказ, ИмяБП)
	
	Возврат Заказы.ПолучитьПроцесс(Заказ, ИмяБП);
	
КонецФункции
&НаСервере
Функция ПолучитьИмяДокумента(ДокСсылка)
	
	Возврат ДокСсылка.Метаданные().Имя;
	
КонецФункции

&НаКлиенте
Процедура ЗаказыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ИмяБП = "";
	Заказ = ПолучитьБП(таблЗаказы.НайтиПоИдентификатору(ВыбраннаяСтрока).Заказ, ИмяБП);
	ОткрытьФорму("БизнесПроцесс." + ИмяБП + ".ФормаОбъекта", Новый Структура("Ключ", Заказ));
	
КонецПроцедуры
&НаКлиенте
Процедура ОтгрузкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Док 	= таблОтгрузки.НайтиПоИдентификатору(ВыбраннаяСтрока).ДокументОтгрузки;
	ИмяДок 	= ПолучитьИмяДокумента(Док);
	
	ОткрытьФорму("Документ." + ИмяДок + ".ФормаОбъекта", Новый Структура("Ключ", Док));
	
КонецПроцедуры
&НаКлиенте
Процедура ОплатыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Док 	= таблОплаты.НайтиПоИдентификатору(ВыбраннаяСтрока).ДокументОплаты;
	ИмяДок 	= ПолучитьИмяДокумента(Док);
	
	ОткрытьФорму("Документ." + ИмяДок + ".ФормаОбъекта", Новый Структура("Ключ", Док));
	
КонецПроцедуры



&НаКлиенте
Процедура ДолгПарнераНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	
	ПараметрыФормы = Новый Структура("Отбор", Новый Структура("Контрагент",Контрагент));
								
	ОткрытьФорму("Отчет.ЗадолженностьПоОтгрузкамПоСрокам.ФормаОбъекта", ПараметрыФормы); 

КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьВсе();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Массив = ПараметрыПеретаскивания.Значение;
	
	Попытка                   
                                                                   
		НашСлучай = ТипЗнч(Массив) = Тип("Массив") И Массив.Количество() = 1 И Не Массив[0].ДокументОплаты.Пустая();
		
	Исключение
		НашСлучай = Ложь;
	КонецПопытки;
	
	Если НашСлучай Тогда

		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОплатыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	 а = 1;
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Массив = ПараметрыПеретаскивания.Значение;
	
	Попытка                   
                                                                   
		СтандартнаяОбработка = Не (ТипЗнч(Массив) = Тип("Массив") И Массив.Количество() = 1 И Не Массив[0].ДокументОплаты.Пустая());
		
	Исключение
	КонецПопытки;
	
	Если Не СтандартнаяОбработка Тогда
		
		ДокументОплаты = Массив[0].ДокументОплаты;
		ОбщиеФункции.СообщитьТекст("Документ оплаты: " + ДокументОплаты);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПровестиНаСервере(ДокСсылка, РедактироватьДок = Истина)
	
	Возврат Обработки.ДолгиПоОплате_Управление.ПровестиНаСервере(ДокСсылка, РедактироватьДок);
	
КонецФункции
&НаКлиенте
Процедура ПерепровестиВсе(Команда)
	
	//УжеПровел = Новый Соответствие;
	//
	//Если Вопрос("перепровести все документы?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
	//
	//	КолВсего		= таблСвязиОпл.Количество();
	//	Ном				= 0;
	//	
	//	// Подготовим линейную таблицу
	//	
	//	ДокументыДляПроведения.Очистить();
	//	
	//	Для Каждого Строка Из таблСвязиОпл Цикл
	//		
	//		Если Строка.Заказ <> Неопределено И УжеПровел[Строка.Заказ] = Неопределено Тогда УжеПровел.Вставить(Строка.Заказ, ИСТИНА);
	//			НовСтрока = ДокументыДляПроведения.Добавить();
	//			НовСтрока.Дата 		= Строка.Дата;
	//			НовСтрока.Документ 	= Строка.Заказ;
	//		КонецЕсли;
	//		
	//		Если Строка.КорректировкаЗаказа <> Неопределено И УжеПровел[Строка.КорректировкаЗаказа] = Неопределено Тогда УжеПровел.Вставить(Строка.КорректировкаЗаказа, ИСТИНА);
	//			НовСтрока = ДокументыДляПроведения.Добавить();
	//			НовСтрока.Дата 		= Строка.Дата;
	//			НовСтрока.Документ 	= Строка.КорректировкаЗаказа;
	//		КонецЕсли;
	//		
	//		Если Строка.ДокументОтгрузки <> Неопределено И УжеПровел[Строка.ДокументОтгрузки] = Неопределено Тогда УжеПровел.Вставить(Строка.ДокументОтгрузки, ИСТИНА);
	//			НовСтрока = ДокументыДляПроведения.Добавить();
	//			НовСтрока.Дата 		= Строка.Дата;
	//			НовСтрока.Документ 	= Строка.ДокументОтгрузки;
	//		КонецЕсли;
	//		
	//		Если Строка.ДокументОплаты <> Неопределено И УжеПровел[Строка.ДокументОплаты] = Неопределено Тогда УжеПровел.Вставить(Строка.ДокументОплаты, ИСТИНА);
	//			НовСтрока = ДокументыДляПроведения.Добавить();
	//			НовСтрока.Дата 		= Строка.Дата;
	//			НовСтрока.Документ 	= Строка.ДокументОплаты;
	//		КонецЕсли;
	//		
	//	КонецЦикла;
	//	
	//	ДокументыДляПроведения.Сортировать("Дата");
	//	Для Каждого Строка Из ДокументыДляПроведения Цикл
	//		ОбработкаПрерыванияПользователя();
	//		Состояние("Проводим документ", ном / КолВсего * 100, Строка.Документ);
	//		ПровестиНаСервере(Строка.Документ);
	//	КонецЦикла;
	//	
	//	//Для Каждого Строка Из таблСвязи Цикл Ном = Ном + 1;
	//	//	
	//	//	ОбработкаПрерыванияПользователя();
	//	//	
	//	//	Если Строка.Заказ <> Неопределено И УжеПровел[Строка.Заказ] = Неопределено Тогда УжеПровел.Вставить(Строка.Заказ, ИСТИНА);
	//	//		Состояние("Проводим документ", ном / КолВсего * 100, Строка.Заказ);
	//	//		ПровестиНаСервере(Строка.Заказ);
	//	//	КонецЕсли;
	//	//	
	//	//	Если Строка.КорректировкаЗаказа <> Неопределено И УжеПровел[Строка.КорректировкаЗаказа] = Неопределено Тогда УжеПровел.Вставить(Строка.КорректировкаЗаказа, ИСТИНА);
	//	//		Состояние("Проводим документ", ном / КолВсего * 100, Строка.КорректировкаЗаказа);
	//	//		ПровестиНаСервере(Строка.КорректировкаЗаказа);
	//	//	КонецЕсли;
	//	//	
	//	//	Если Строка.ДокументОтгрузки <> Неопределено И УжеПровел[Строка.ДокументОтгрузки] = Неопределено Тогда УжеПровел.Вставить(Строка.ДокументОтгрузки, ИСТИНА);
	//	//		Состояние("Проводим документ", ном / КолВсего * 100, Строка.ДокументОтгрузки);
	//	//		ПровестиНаСервере(Строка.ДокументОтгрузки);
	//	//	КонецЕсли;
	//	//	
	//	//	Если Строка.ДокументОплаты <> Неопределено И УжеПровел[Строка.ДокументОплаты] = Неопределено Тогда УжеПровел.Вставить(Строка.ДокументОплаты, ИСТИНА);
	//	//		Состояние("Проводим документ", ном / КолВсего * 100, Строка.ДокументОплаты);
	//	//		ПровестиНаСервере(Строка.ДокументОплаты);
	//	//	КонецЕсли;
	//	//	
	//	//КонецЦикла;
	//	
	//	ОбновитьВсе();
	//	
	//КонецЕсли;
	//
КонецПроцедуры

&НаКлиенте
Процедура ПосмотретьДвиженияРегистра(Команда)
	
	ОткрытьФорму("Обработка.ДолгиПоОплате_Управление.Форма", Новый Структура("Организация, Контрагент", Организация, Контрагент));
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиВыделенные(Команда)
	
	Строки 		= Элементы.Заказы.ВыделенныеСтроки;
	КолВсего 	= Строки.Количество();
	Ном 		= 0;
	
	Если Не КолВсего Тогда
		ПоказатьПредупреждение(,"Не выбраны заказы",,"Предупреждение");
		Возврат;
	КонецЕсли;
	
	Для КАждого Идентификатор Из Строки Цикл Ном = Ном + 1;
		
		СтрокаЗаказа = таблЗаказы.НайтиПоИдентификатору(Идентификатор);
		
		// Проведем заказ
		
		Если Не ПровестиНаСервере(СтрокаЗаказа.Заказ, Ложь) Тогда
			Прервать;
		КонецЕсли;
		
		// Проведем связанные реаизациии
		
		СвДоки = таблСвязиОтгр.НайтиСтроки(Новый Структура("Заказ", СтрокаЗаказа.Заказ));
		Для Каждого Строка Из СвДоки Цикл
			
			Если Строка.ДокументОтгрузки <> Неопределено Тогда
				Если Не ПровестиНаСервере(Строка.ДокументОтгрузки, Ложь) Тогда
					ОбновитьВсе();
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		СвДоки = таблСвязиОпл.НайтиСтроки(Новый Структура("Заказ", СтрокаЗаказа.Заказ));
		Для Каждого Строка Из СвДоки Цикл
			
			Если Строка.ДокументОтгрузки <> Неопределено Тогда
				Если Не ПровестиНаСервере(Строка.ДокументОтгрузки, Ложь) Тогда
					ОбновитьВсе();
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Если КолВсего > 1 Тогда
			Состояние("Проводим заказ", ном / КолВсего * 100, СтрокаЗаказа.Заказ);
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьВсе();
	
КонецПроцедуры

