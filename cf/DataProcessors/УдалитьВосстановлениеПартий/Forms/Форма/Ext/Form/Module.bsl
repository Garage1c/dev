
&НаКлиенте
Перем РежимОжиданияПодчиненнойОбработки;

&НаСервере
Функция ПолучитьТаблицуСебестоимости(Товары, ДатаКурса)
	
	Запрос = Новый Запрос;
	
	ТекстПолученияЦены = "
	|	ВЫБРАТЬ РАЗРЕШЕННЫЕ	Номенклатура, Упаковка, Цена * (ЕСТЬNULL(ВалЦен.Курс, 1) * ЕСТЬNULL(ВалУпр.Кратность, 1)) / (ЕСТЬNULL(ВалУпр.Курс, 1) * ЕСТЬNULL(ВалЦен.Кратность, 1)) КАК Цена
	|	ИЗ 		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаКурса, ТипЦен = &ТипЦен И Номенклатура В(&Товары)) Рег
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.КурсыВалют.СрезПоследних(&ДатаКурса, ) ВалЦен
	|		ПО	Рег.Валюта = ВалЦен.Валюта
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаКурса, Валюта В (ВЫБРАТЬ Значение ИЗ Константа.ВалютаУправленческогоУчета)) ВалУпр ПО ИСТИНА
	|";
	
	Текст = "
	|ВЫБРАТЬ
	|	Номенклатура, Упаковка, МАКСИМУМ(Цена) Цена
	|ИЗ (";
	
	Инд = -1;
	Для Каждого Элемент Из СписокТиповЦен Цикл Инд = Инд + 1;
		ИмяПараметра = "ТипЦен" + Формат(Инд, "ЧГ=");
		Запрос.УстановитьПараметр(ИмяПараметра, Элемент.Значение);
		Текст = Текст + ?(Инд, "
					|ОБЪЕДИНИТЬ ВСЕ
					|", "") + СтрЗаменить(ТекстПолученияЦены, "&ТипЦен", "&" + ИмяПараметра); КонецЦикла;
	
	Запрос.Текст = Текст + "
	
	// Добавим запрос который будет брать минимальную цену на сегодня в том случае когда цен вообще нет
	
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ 	Номенклатура, Упаковка, МИНИМУМ(Цена * (ЕСТЬNULL(ВалЦен.Курс, 1) * ЕСТЬNULL(ВалУпр.Кратность, 1)) / (ЕСТЬNULL(ВалУпр.Курс, 1) * ЕСТЬNULL(ВалЦен.Кратность, 1))) КАК Цена
	|	ИЗ 		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, Номенклатура В(&Товары)) Рег
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.КурсыВалют.СрезПоследних(&ДатаКурса, ) ВалЦен
	|		ПО	Рег.Валюта = ВалЦен.Валюта
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаКурса, Валюта В (ВЫБРАТЬ Значение ИЗ Константа.ВалютаУправленческогоУчета)) ВалУпр ПО ИСТИНА
	|
	|	СГРУППИРОВАТЬ ПО Номенклатура, Упаковка
	
	|) Запрос
	|СГРУППИРОВАТЬ ПО Номенклатура, Упаковка
	|";
	
	Запрос.УстановитьПараметр("ДатаКурса", 				ДатаКурса);
	//Запрос.УстановитьПараметр("ТипЦенСебестоимость", 	Объект.ТипЦенСебестоимость);
	Запрос.УстановитьПараметр("Товары", 				Товары);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Таблица.Индексы.Добавить("Упаковка, Номенклатура");
	Возврат Таблица;
	
КонецФункции

&НаСервере
Функция РазобратьПартииСтрокИЗаписать(ДокОбъект, ТаблицаПартий)
	
	ЕстьИзменения 	= Ложь;
	СтрокиБезПартий = ?(Объект.ПринудительноеПроведение, ДокОбъект.Товары, ДокОбъект.Товары.НайтиСтроки(Новый Структура("Партия", Неопределено)));
	СсылкаДок 		= ДокОбъект.Ссылка;
		
	Для Каждого Строка Из СтрокиБезПартий Цикл
			
		строкиПартий = ТаблицаПартий.НайтиСтроки(Новый Структура("Номенклатура, Упаковка", Строка.Номенклатура, Строка.Упаковка));
		Если строкиПартий.Количество() Тогда
			Для Каждого СтрокаПартии ИЗ строкиПартий Цикл
				Если строкаПартии.Количество И (
							Не (строкаПартии.Количество = Строка.Количество И строкаПартии.Партия = Строка.Партия)
							ИЛИ Объект.Товар.Количество() И Объект.Товар.НайтиСтроки(Новый Структура("Номенклатура", Строка.Номенклатура)).Количество()) Тогда
							
					ЕстьИзменения = Истина;
					Строка.Партия 		= СтрокаПартии.Партия;
					Строка.СуммаПартии 	= ?(строкаПартии.Количество = Строка.Количество, строкаПартии.СуммаПартии, строкаПартии.СуммаПартии / строкаПартии.Количество * Строка.Количество);
					Прервать; КонецЕсли; КонецЦикла;
		Иначе
			ОбщиеФункции.СообщитьТекст("не найдена цена для себестоимости товара " + Строка.Номенклатура + " -- (товар пропущен) " + СсылкаДок); КонецЕсли; КонецЦикла;
		
	//Если (Объект.ПринудительноеПроведение Или ЕстьИзменения) И Не ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(ДокОбъект, РежимЗаписиДокумента.Проведение) Тогда
	Если Не ЗаписатьДок(ДокОбъект.Метаданные(), ДокОбъект, ЕстьИзменения) Тогда
		Возврат Ложь; КонецЕсли;
	
	Возврат Истина;
	
КонецФункции
&НаСервере
Функция ПосчитатьКоличествоСУпаковкой(ТаблицаТоваров)
	
	Кол = 0;
	Для Каждого Строка Из ТаблицаТоваров Цикл Кол = Кол + Строка.Количество * ?(Строка.Упаковка.Пустая(), 1, Строка.Упаковка.Коэффициент) КонецЦикла;
	Возврат Кол;
	
КонецФункции
&НаСервере
Функция УстановитьПартииМетодомFIFOИПроверитьЕстьИзмененияИлиНет(ДокОбъект, ЭтоЗаказНаряд = Ложь, ПерезаполнятьПартии = Ложь)
	
	ТаблицаТоваров = ДокОбъект[?(ЭтоЗаказНаряд, "Запчасти", "Товары")];
	МассивПартийДо = ТаблицаТоваров.ВыгрузитьКолонку("СуммаПартии");
		
	// Очистим партии в документе
		
	Если Объект.ПринудительноеПроведение Тогда
		ТоварыТмп = ТаблицаТоваров.Выгрузить();
		ТоварыТмп.ЗаполнитьЗначения(Неопределено, "Партия");
		ТоварыТмп.ЗаполнитьЗначения(0, "СуммаПартии");
		ТаблицаТоваров.Загрузить(ТоварыТмп); КонецЕсли;
	
	СтруктураКолонокТовары = ФункцииФормДокументов.ПолучитьСтруктуруКолонокТоварыПоОбъекту(ДокОбъект, ?(ЭтоЗаказНаряд, "Запчасти", "Товары"));
	
	КолДо = ?(СтруктураКолонокТовары.ЕстьУпаковка, ПосчитатьКоличествоСУпаковкой(ТаблицаТоваров), ТаблицаТоваров.Итог("Количество"));
	
	Если ТипЗнч(ДокОбъект) = Тип("ДокументОбъект.РеализацияТоваров") Тогда
		МодульПартий.РазнестиПартииВТаблицеМетодомFIFO(ТаблицаТоваров, "Размещение", 						СтруктураКолонокТовары, ДокОбъект.Дата,, ПерезаполнятьПартии, ДокОбъект.Склад); Иначе
		МодульПартий.РазнестиПартииВТаблицеМетодомFIFO(ТаблицаТоваров, ДокОбъект.ПолучитьСкладСписания(), 	СтруктураКолонокТовары, ДокОбъект.Дата,, ПерезаполнятьПартии); КонецЕсли;
	
	// Проверим не изменилось ли от наших манипуляций количество
	
	Если КолДо <> ?(СтруктураКолонокТовары.ЕстьУпаковка, ПосчитатьКоличествоСУпаковкой(ТаблицаТоваров), ТаблицаТоваров.Итог("Количество")) Тогда
		ВызватьИсключение "Разное количество товара после заполнения партий " + Строка(ДокОбъект); КонецЕсли;
	
	// Проверим были ли изменений партий
		
	МассивПартийПосле = ТаблицаТоваров.ВыгрузитьКолонку("СуммаПартии");
	ЕстьИзменения = Ложь; Ид = -1;
	Для Каждого СуммаПартии Из МассивПартийДо Цикл Ид = Ид + 1; Если СуммаПартии <> МассивПартийПосле[Ид] Тогда ЕстьИзменения = Истина; Прервать; КонецЕсли; КонецЦикла;
		
	// Запишем
		
	Возврат ЕстьИзменения;
	
КонецФункции


&НаСервере
Функция ПолучитьТаблицуВесаТоваров(МассивТоваров, ДатаКурса)
	
	// ТЕПЕРЬ ТАКАЯ ФУНКЦИЯ ЕСТЬ В МОДУЛЕ ПАРТИЙ
	
	//Запрос = Новый Запрос("
	//
	//// Вытащим все супер большие цены
	//
	//|ВЫБРАТЬ 	Номенклатура, МАКСИМУМ(Цена * (ЕСТЬNULL(ВалЦен.Курс, 1) * ЕСТЬNULL(ВалУпр.Кратность, 1)) / (ЕСТЬNULL(ВалУпр.Курс, 1) * ЕСТЬNULL(ВалЦен.Кратность, 1))) КАК Цена
	//|ПОМЕСТИТЬ 	ТаблТоваров
	//|ИЗ 		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаКурса, Упаковка = &ПустаяУпаковка И Номенклатура В(&Товары)) Рег
	//|
	//|ЛЕВОЕ СОЕДИНЕНИЕ 
	//|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаКурса, ) ВалЦен
	//|	ПО	Рег.Валюта = ВалЦен.Валюта
	//|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаКурса, Валюта В (ВЫБРАТЬ Значение ИЗ Константа.ВалютаУправленческогоУчета)) ВалУпр ПО ИСТИНА
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	Номенклатура;
	//
	//// Посчитаем общий итог
	//
	//|ВЫБРАТЬ СУММА(Цена) Итог
	//|ПОМЕСТИТЬ ИтогТаблица
	//|ИЗ ТаблТоваров;
	//
	//// Рассчитаем коэффициент
	//
	//|ВЫБРАТЬ	Номенклатура, Цена / Итог Коэффициент
	//|ИЗ			ТаблТоваров, ИтогТаблица
	//|");
	//
	//Запрос.УстановитьПараметр("ДатаКурса",		ДатаКурса);
	//Запрос.УстановитьПараметр("Товары",			МассивТоваров);
	//Запрос.УстановитьПараметр("ПустаяУпаковка",	Справочники.УпаковкиНоменклатуры.ПустаяСсылка());
	//
	//Возврат Запрос.Выполнить().Выгрузить();
	//
КонецФункции

&НаСервере
Функция ЗаписатьДок(МетаДок, ДокОбъект, ЕстьИзменения, Перепроводить = Ложь)
	
	// Если принудительно тогда проведем в любом случае
	
	Если Перепроводить Тогда
		
		Если Не ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(ДокОбъект, РежимЗаписиДокумента.Проведение) Тогда
			Возврат Ложь; КонецЕсли;
		
	Иначе // Запишем только если есть изменения
		
		// Сперва запишем
		
		Если ЕстьИзменения Тогда
			
			Если Не ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(ДокОбъект, РежимЗаписиДокумента.Запись) Тогда
				ПараметрыСеанса.КонтрольОстатковВСеансеОтключен = Ложь;
				Возврат Ложь; КонецЕсли; КонецЕсли;
		
		// Считаем партии
		
		Документы[МетаДок.Имя].ИницилизироватьДополнительныеДанныеДокумента(ДокОбъект.Ссылка, ДокОбъект.ДополнительныеСвойства);
		НаборДляПроведения = ДокОбъект.ДополнительныеСвойства.ПартииТоваров;
		
		// Затем поймем проводить или нет
		
		Проводить = Ложь;
		Набор = РегистрыНакопления.ПартииТоваров.СоздатьНаборЗаписей();
		Набор.Отбор.Регистратор.Установить(ДокОбъект.Ссылка);
		Набор.Прочитать();
			
		Если Набор.Количество() <> НаборДляПроведения.Количество() Тогда
			Проводить = Истина;
		Иначе 	
			Инд = -1;
			Для Каждого Строка Из Набор Цикл Инд = Инд + 1; Если Строка.Партия <> НаборДляПроведения[Инд].Партия Или Строка.Количество <> НаборДляПроведения[Инд].Количество Или Строка.Сумма <> НаборДляПроведения[Инд].Сумма Тогда Проводить = Истина; Прервать; КонецЕсли; КонецЦикла; КонецЕсли;
		      //Schraubendreherbit 1/4"(6,3mm) für Innensechskantschrauben H3, 30mm
		// Ну и проведем
		
		Если Проводить Тогда
			
			Набор.Загрузить(НаборДляПроведения);
			Если Не ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(Набор) Тогда
				Возврат Ложь; КонецЕсли; КонецЕсли; КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПолучитьЦенуИзТаблицыСебестоиимости(ТаблицаСебестоимости, Номенклатура, Упаковка = Неопределено)
	
	СтрокиЦен = ТаблицаСебестоимости.НайтиСтроки(?(Упаковка = Неопределено, Новый Структура("Номенклатура", Номенклатура), Новый Структура("Номенклатура, Упаковка", Номенклатура, Упаковка)));
	
	Если СтрокиЦен.Количество() = 0 Тогда 
		
		Возврат 0
		
	ИначеЕсли СтрокиЦен.Количество() = 1 Тогда 
		
		Возврат СтрокиЦен[0].Цена;
		
	Иначе
	
		// Возмем любую, но приоритет отдадим цене с такойже упаковкой
	
		Если Упаковка = Неопределено Тогда Упаковка = Справочники.УпаковкиНоменклатуры.ПустаяСсылка() КонецЕсли;
	
		текЦена = 0;
		Для Каждого Строка Из СтрокиЦен Цикл текЦена = Строка.Цена; Если Строка.Упаковка = Упаковка Тогда Прервать КонецЕсли; КонецЦикла;
		Возврат текЦена; КонецЕсли;
	
КонецФункции
&НаСервере
Функция ПолучитьМассивТоваров(Таблица, ИскатьПустуюСуммуПартии = Истина)
	
	ЕстьФильтр 		= Булево(Объект.Товар.Количество());
	Строки 			= ?(ИскатьПустуюСуммуПартии, Таблица.НайтиСтроки(Новый Структура("СуммаПартии", 0)), Таблица);
	Товары 			= Новый Массив;
	Для Каждого Строка Из Строки Цикл Если Не ЕстьФильтр Или Не ИскатьПустуюСуммуПартии Или Объект.Товар.НайтиСтроки(Новый Структура("Номенклатура", Строка.Номенклатура)).Количество() Тогда Товары.Добавить(Строка.Номенклатура); КонецЕсли; КонецЦикла;

	Возврат Товары;
	
КонецФункции
&НаСервере
Функция ПровестиДок(СсылкаДок, ПроведенныеДокументы, ЭтоПовторнаяЗапись = Ложь, ПерепровестиЭтиТовары = Неопределено)
	
	Записывать 		= Ложь;
	ЕстьТранзакция	= Ложь;
	Перепроводить	= Ложь; // будет перепроведен документ вместе с другими регистрами, иначе будут записаны только партии
	
	// ЭтоПовторнаяЗапись 		- значит этот докмуент уже только что записывался и сейчас записывается повторно
	// ПерепровестиЭтиТовары 	-  массив товаров для запуска такойже обработки с параметрами проведения по данным товарам
	
	Если ПроведенныеДокументы[СсылкаДок] = Истина Тогда Возврат Истина Иначе ПроведенныеДокументы.Вставить(СсылкаДок, Истина) КонецЕсли;
	
	ПараметрыСеанса.КонтрольОстатковВСеансеОтключен = Объект.КонтрольОстатковВСеансеОтключен;
	ПараметрыСеанса.СканированиеИзмененийОтключено 	= Объект.ОтключитьЗаписьИсторииИзменений;
	МетаДок 	= СсылкаДок.Метаданные();
	ДокОбъект 	= СсылкаДок.ПолучитьОбъект();
	
	Если Объект.ЗагрузкаДанных Тогда ДокОбъект.ОбменДанными.Загрузка = Истина КонецЕсли;
	
	Если МетаДок.Имя = "ПоступлениеТоваров" Или МетаДок.Имя = "ОприходованиеТоваров" Тогда
#Область Поступление_и_оприходование
		
		// Заполним себестоимость
		
		СтрокиБезПартий = ?(Объект.ПринудительноеПроведение Или Объект.ПерезаполнятьПартии, ДокОбъект.Товары, ДокОбъект.Товары.НайтиСтроки(Новый Структура("СуммаПартии", 0)));
		Если Не Объект.ВПоступленииСебестоимостьБратьИзДокумента Или МетаДок.Имя = "ОприходованиеТоваров" Тогда
			ТаблицаСебестоимости = ПолучитьТаблицуСебестоимости(ПолучитьМассивТоваров(ДокОбъект.Товары), ДокОбъект.Дата); КонецЕсли;
		
		// Обработаем себестоимость
		
		ЕстьИзменения = Ложь; ЕстьОшибка = Ложь;
		Для Каждого Строка Из СтрокиБезПартий Цикл 
			
			Цена = ?(Объект.ВПоступленииСебестоимостьБратьИзДокумента И МетаДок.Имя = "ПоступлениеТоваров", 
							?(СсылкаДок.КурсПартии, СсылкаДок.КурсПартии * Строка.Цена, ОбщиеФункции.СконвертироватьЦенуПоВалюте(Строка.Цена, ДокОбъект.Валюта, Константы.ВалютаУправленческогоУчета.Получить(), ДокОбъект.Дата)), 
							ПолучитьЦенуИзТаблицыСебестоиимости(ТаблицаСебестоимости, Строка.Номенклатура, Строка.Упаковка));
			Если Не Цена Тогда ЕстьОшибка = Истина КонецЕсли;
			
			Если Цена <> 0 Тогда ЕстьИзменения = Истина;
				
				// Если это валюта тогда надо привести к валюте
				//Если МетаДок.Имя = "ПоступлениеТоваров" Тогда Цена = ОбщиеФункции.СконвертироватьЦенуПоВалюте(Цена, Константы.ВалютаУправленческогоУчета.Получить(), ДокОбъект.Валюта, ДокОбъект.Дата) КонецЕсли;
				Строка.СуммаПартии = Строка.Количество * Цена;
				
			ИначеЕсли МетаДок.Имя = "ПоступлениеТоваров" Тогда ЕстьИзменения = Истина;
				
				Строка.СуммаПартии = Строка.Сумма;
				Если МетаДок.Имя = "ПоступлениеТоваров" Тогда Строка.СуммаПартии = ОбщиеФункции.СконвертироватьЦенуПоВалюте(Строка.Сумма, ДокОбъект.Валюта, Константы.ВалютаУправленческогоУчета.Получить(), ДокОбъект.Дата) КонецЕсли;
				
				ОбщиеФункции.СообщитьТекст("Позиция " + Строка.НомерСтроки + " - не найдена цена для себестоимости товара " + Строка.Номенклатура + " -- (себестоимость будет взята из сумммы поступления) " + СсылкаДок);
				
			Иначе
				ОбщиеФункции.СообщитьТекст("Позиция " + Строка.НомерСтроки + " - не найдена цена для себестоимости товара " + Строка.Номенклатура + " -- (товар пропущен) " + СсылкаДок);  КонецЕсли; КонецЦикла;
		
		Если ЕстьОшибка И Объект.ОстанавливатсяЕслиНетВозможностиОпределитьСебестоимость Тогда
			Перейти ~ПлохойКонец; КонецЕсли;
			
		//Если (Объект.ПринудительноеПроведение Или ЕстьИзменения) И Не ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(ДокОбъект, РежимЗаписиДокумента.Проведение) Тогда
		//	ПараметрыСеанса.КонтрольОстатковВСеансеОтключен = Ложь;
		Если Не ЗаписатьДок(МетаДок, ДокОбъект, ЕстьИзменения) Тогда
			Перейти ~ПлохойКонец; КонецЕсли; 
#КонецОбласти
	ИначеЕсли МетаДок.Имя = "РедактированиеРегистра" Тогда
#Область Редактирование_регистра

		ДатаПовышенияКурса = '20150831'; // будем брать до повышения курса

//		Если Объект.Товар.Количество() Тогда 
//			
//#Область Менеджер_записи
//			
//			Запрос = Новый Запрос("
//			|ВЫБРАТЬ Склад, Партия, Номенклатура, Количество, Сумма ИЗ РегистрНакопления.ПартииТоваров 		ГДЕ Регистратор = &Регистратор;
//			|ВЫБРАТЬ Склад, 		Номенклатура, Количество, Сумма ИЗ РегистрНакопления.ТоварыНаСкладах 	ГДЕ Регистратор = &Регистратор");
//			Запрос.УстановитьПараметр("Регистратор", СсылкаДок);
//			
//			Пакет = Запрос.ВыполнитьПакет();
//			ТекПартии	 	= Пакет[0].Выгрузить();
//			ТаблицаТоваров 	= Пакет[1].Выгрузить();
//			
//			НачатьТранзакцию();
//			
//			Для Каждого Запись Из ТаблицаТоваров Цикл
//			
//				Цена 	= ПолучитьЦенуИзТаблицыСебестоиимости(ТаблицаСебестоимости, Запись.Номенклатура);
//				Сумма 	= Запись.Количество * Цена;
//				строкаТекПартии = ТекПартии.Найти(Запись.Номенклатура, "Номенклатура"); 
//				
//				Если Сумма <> 0 И строкаТекПартии <> Неопределено И строкаТекПартии.Сумма = Сумма Тогда 
//					Продолжить КонецЕсли; // Если такая запись уже есть тогда продолжим
//				
//				Если Цена <> 0 Тогда ЕстьИзменения = Истина;
//					
//					НовЗапись = РегистрыНакопления.ПартииТоваров.Созда  НовНабор.Добавить();
//					ЗаполнитьЗначенияСвойств(НовЗапись, Запись);
//					НовЗапись.Регистратор 	= СсылкаДок;
//					НовЗапись.Партия 		= СсылкаДок;
//					НовЗапись.Сумма 		= Сумма;
//					
//				Иначе
//					ОбщиеФункции.СообщитьТекст("не найдена цена для себестоимости товара " + Запись.Номенклатура + " -- (товар пропущен) " + СсылкаДок); КонецЕсли; КонецЦикла; 
//			
//			Если 	(Объект.ПринудительноеПроведение Или ЕстьИзменения) И
//					Не ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(НовНабор) Тогда 
//					
//				ПараметрыСеанса.КонтрольОстатковВСеансеОтключен = Ложь;
//				ОтменитьТранзакцию();
//				Перейти ~ПлохойКонец; КонецЕсли; КонецЕсли; 


//					
//			ЗафиксироватьТранзакцию();
//			
#КонецОбласти
//	
//		Иначе	// Набор перепишем все товары
			
#Область Набор_записей

			Набор = РегистрыНакопления.ТоварыНаСкладах.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(СсылкаДок);
			Набор.Прочитать();
			
			//ТаблицаСебестоимости = ПолучитьТаблицуСебестоимости(Набор.Выгрузить(,"Номенклатура").ВыгрузитьКолонку("Номенклатура"), ?(СсылкаДок.Дата < ДатаПовышенияКурса, Неопределено, ДатаПовышенияКурса));
			ТаблицаСебестоимости = ПолучитьТаблицуСебестоимости(ПолучитьМассивТоваров(Набор.Выгрузить(,"Номенклатура"), Ложь), ?(СсылкаДок.Дата > ДатаПовышенияКурса, Неопределено, ДокОбъект.Дата));
			
			НовНабор = РегистрыНакопления.ПартииТоваров.СоздатьНаборЗаписей();
			НовНабор.Отбор.Регистратор.Установить(СсылкаДок);
			НовНабор.Прочитать();
			
			ТекПартии = НовНабор.Выгрузить();
			ТекПартии.Индексы.Добавить("Склад, Номенклатура");
			НовНабор.Очистить();
			ЕстьИзменения = Ложь;
			
			Для Каждого Запись Из Набор Цикл 
				
				Цена 	= ПолучитьЦенуИзТаблицыСебестоиимости(ТаблицаСебестоимости, Запись.Номенклатура);
				Сумма 	= Запись.Количество * Цена;
				
				//строкаТекПартии = ТекПартии.Найти(Запись.Номенклатура, "Номенклатура"); 
				строкиТекПартии = ТекПартии.НайтиСтроки(Новый Структура("Склад, Номенклатура", Запись.Склад, Запись.Номенклатура)); 
				СтрокаТекПартии = ?(строкиТекПартии.Количество(), строкиТекПартии[0], Неопределено);
				
				Если Сумма <> 0 И строкаТекПартии <> Неопределено И строкаТекПартии.Сумма = Сумма И СтрокаТекПартии.Количество = Запись.Количество Тогда 
					
					// Если такая запись уже есть тогда продолжим
					
					ЗаполнитьЗначенияСвойств(НовНабор.Добавить(), строкаТекПартии);
					Продолжить КонецЕсли;
				
				Если Сумма <> 0 Тогда 
					
					ЕстьИзменения = Истина;
					
					НовЗапись = НовНабор.Добавить();
					ЗаполнитьЗначенияСвойств(НовЗапись, Запись);
					НовЗапись.Регистратор 	= СсылкаДок;
					НовЗапись.Партия 		= СсылкаДок;
					НовЗапись.Сумма 		= Сумма;
					
				Иначе
					ОбщиеФункции.СообщитьТекст("не найдена цена для себестоимости товара " + Запись.Номенклатура + " -- (товар пропущен) " + СсылкаДок); КонецЕсли; КонецЦикла; 
			
			Если 	(Объект.ПринудительноеПроведение Или ЕстьИзменения) И
					Не ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(НовНабор) Тогда 
					
				ПараметрыСеанса.КонтрольОстатковВСеансеОтключен = Ложь;
				Перейти ~ПлохойКонец; КонецЕсли;  
			
			#КонецОбласти			
	ИначеЕсли МетаДок.Имя = "ПриемТоваров" Тогда
#Область Прием_товаров			

		ПервыйПрием = Истина;

~ПовторитьПриемТовара:

		// Найдем отгрузку товаров
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ 	Номенклатура, Упаковка, Партия, СУММА(СуммаПартии) СуммаПартии, СУММА(Количество) Количество
		|ИЗ 		Документ.ОтгрузкаТоваров.Товары
		|ГДЕ 		Ссылка.Процесс = &Процесс И Ссылка.Проведен
		|СГРУППИРОВАТЬ ПО
		|	Номенклатура, Упаковка, Партия
		|");
		
		Запрос.УстановитьПараметр("Процесс", ДокОбъект.Процесс);
		ТаблицаПартий = Запрос.Выполнить().Выгрузить();
		
		Если Не РазобратьПартииСтрокИЗаписать(ДокОбъект, ТаблицаПартий) Тогда
			ПараметрыСеанса.КонтрольОстатковВСеансеОтключен = Ложь;
			Перейти ~ПлохойКонец; КонецЕсли;
		
		// если нет нифига парти значит предпологаем что документ отгрузки был позже чем это, тогда попробуем провести познии отгрузки, а потом уже повторить
		
		Если ПервыйПрием И ДокОбъект.Товары.НайтиСтроки(Новый Структура("СуммаПартии", 0)).Количество() Тогда
			
			Запрос = Новый Запрос("
			|ВЫБРАТЬ РАЗЛИЧНЫЕ Ссылка
			|ИЗ 		Документ.ОтгрузкаТоваров.Товары
			|ГДЕ 		Ссылка.Процесс = &Процесс И Ссылка.Проведен И Ссылка.Дата < &Дата И СуммаПартии = 0 И Ссылка.СкладОтправитель = &СкладОтправитель И Ссылка.СкладПолучатель = &СкладПолучатель");
			
			Запрос.УстановитьПараметр("Дата", 				ДокОбъект.Дата);
			Запрос.УстановитьПараметр("Процесс", 			ДокОбъект.Процесс);
			Запрос.УстановитьПараметр("СкладОтправитель", 	ДокОбъект.СкладОтправитель);
			Запрос.УстановитьПараметр("СкладПолучатель", 	ДокОбъект.СкладПолучатель);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл 
				
				ПроведенныеДокументы.Вставить(Выборка.Ссылка, Ложь);
				ПровестиДок(Выборка.Ссылка, ПроведенныеДокументы); КонецЦикла; 
			
			Если Выборка.Количество() Тогда 
				ПервыйПрием = Ложь;
				Перейти ~ПовторитьПриемТовара КонецЕсли; КонецЕсли;
		
		//ЕстьИзменения 	= Ложь;
		//СтрокиБезПартий = ДокОбъект.Товары.НайтиСтроки(Новый Структура("Партия", Неопределено));
		//
		//Для Каждого Строка Из СтрокиБезПартий Цикл
		//	
		//	строкаПартии = ТаблицаПартий.НайтиСтроки(Новый Структура("Номенклатура, Упаковка", Строка.Номенклатура, Строка.Упаковка));
		//	Если строкаПартии.Количество() Тогда ЕстьИзменения = Истина;
		//		Строка.Партия 		= строкаПартии[0].Партия;
		//		Строка.СуммаПартии 	= ?(строкаПартии[0].Количество = Строка.Количество, строкаПартии[0].СуммаПартии, строкаПартии[0].СуммаПартии / строкаПартии[0].Количество * Строка.Количество);
		//	Иначе
		//		ОбщиеФункции.СообщитьТекст("не найдена цена для себестоимости товара " + Строка.Номенклатура + " -- (товар пропущен) " + СсылкаДок); КонецЕсли; КонецЦикла;
		//
		//Если (Объект.ПринудительноеПроведение Или ЕстьИзменения) И Не ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(ДокОбъект, РежимЗаписиДокумента.Проведение) Тогда
		//	ПараметрыСеанса.КонтрольОстатковВСеансеОтключен = Ложь;
		//	Перейти ~ПлохойКонец; КонецЕсли;
		
#КонецОбласти
	ИначеЕсли МетаДок.Имя = "Комплектация" Тогда
#Область Комплектация

		НАЧАТЬТРАНЗАКЦИЮ();
		ЕстьТранзакция = Истина;

		Записывать = Ложь Или Объект.ПринудительноеПроведение;
		
		Если ДокОбъект.Операция = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация Тогда
			
			// Заполним партию как сумму запчастей
			
			Если УстановитьПартииМетодомFIFOИПроверитьЕстьИзмененияИлиНет(ДокОбъект) Тогда
				
				Записывать = Истина;
				
				СуммаВсех = ДокОбъект.Товары.Итог("СуммаПартии");
				Если ДокОбъект.СуммаПартии < СуммаВсех Тогда
					ДокОбъект.СуммаПартии = СуммаВсех; КонецЕсли; КонецЕсли;
		Иначе
			
			// Получим сумму партии
			
			Если Объект.ПерезаполнятьПартии Или Не ЗначениеЗаполнено(ДокОбъект.Партия) Тогда
				
				// Получим партию
				
				СтруктураПартии = МодульПартий.ПолучитьПартиюДляСписания(ДокОбъект.Номенклатура, ДокОбъект.Количество, ДокОбъект.Склад, ДокОбъект.Дата);
				Если СтруктураПартии <> Неопределено Тогда
					
					Записывать 				= Истина;
					ДокОбъект.СуммаПартии 	= ?(ДокОбъект.Количество = СтруктураПартии.Количество, СтруктураПартии.Сумма, СтруктураПартии.Сумма / СтруктураПартии.Количество * ДокОбъект.Количество);
					ДокОбъект.Партия 		= СтруктураПартии.Партия;
					
				ИначеЕсли Объект.РазбиватьРазукомплектацияКогдаОднойПартииМало Тогда
					
					Перепроводить = Истина;
					Записывать = Истина;
					
					// Попробуем разбить комплектацию на несколько комплектация
					
					нужноСписать 		= ДокОбъект.Количество;
					ТаблицаМелкихПартий = МодульПартий.ПолучитьПартииДляСписания(ДокОбъект.Номенклатура, ДокОбъект.Склад, ДокОбъект.Дата);
					
					Если ТаблицаМелкихПартий.Итог("Количество") < нужноСписать Тогда
						
						ОбщиеФункции.СообщитьТекст("не найдена никакая цена товара " + ДокОбъект.Номенклатура + " -- (товар пропущен) " + СсылкаДок);
						Если Объект.ОстанавливатсяЕслиНетВозможностиОпределитьСебестоимость Тогда
							Перейти ~ПлохойКонец; КонецЕсли;
						
					Иначе

						КолПартий 	= ТаблицаМелкихПартий.Количество();
						ПервнКол	= нужноСписать;
						
						Для Каждого СтрокаМелкойПартии Из ТаблицаМелкихПартий Цикл
							Если Не нужноСписать Тогда Прервать КонецЕсли;
							
							ЭтоДокКопия = нужноСписать > СтрокаМелкойПартии.Количество;
							Списываем 	= Мин(СтрокаМелкойПартии.Количество, нужноСписать);
							нужноСписать = нужноСписать - Списываем;
							
							НовКомплеткация = ?(ЭтоДокКопия, ДокОбъект.Скопировать(), ДокОбъект);
							НовКомплеткация.Количество 	= Списываем;
							НовКомплеткация.СуммаПартии = ?(Списываем = СтрокаМелкойПартии.Количество, СтрокаМелкойПартии.Сумма, СтрокаМелкойПартии.Сумма / СтрокаМелкойПартии.Количество * Списываем);
							НовКомплеткация.Партия		= СтрокаМелкойПартии.Партия;
								
							// Уменьшим количество в призраке в табличных частях
								
							КоэффУменьшения = Списываем / ПервнКол;
							Для Каждого СтрокаНовКомпл Из НовКомплеткация.Товары Цикл СтрокаНовКомпл.Количество = СтрокаНовКомпл.Количество * КоэффУменьшения КонецЦикла;
								
							ИтогКол = НовКомплеткация.Товары.Итог("Количество");
							Если Цел(ИтогКол) <> ИтогКол Тогда
									ОбщиеФункции.СообщитьТекст("Количество после разбивки комплектации на несколько документов, оказалось дробным " + СсылкаДок);
									Перейти ~ПлохойКонец; КонецЕсли; 
								
							Если ЭтоДокКопия Тогда
								
								НовКомплеткация.Дата = ДокОбъект.Дата;
								НовКомплеткация.РасспредлитьСуммуПартийПоТипуЦенНаСервере(); // распределим в копии

								Если НовКомплеткация.Товары.Найти(0, "СуммаПартии") <> Неопределено Тогда
									ОбщиеФункции.СообщитьТекст("не определить себестоимость разобранного товара  " + СсылкаДок);
									Если Объект.ОстанавливатсяЕслиНетВозможностиОпределитьСебестоимость Тогда
										Перейти ~ПлохойКонец; КонецЕсли;  КонецЕсли; 
								
								НовКомплеткация.Комментарий = "Создан путем копирования документа " + СсылкаДок + " и уменьшением количества партии";
								
								Если Не ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(НовКомплеткация, РежимЗаписиДокумента.Проведение) Тогда
									Перейти ~ПлохойКонец; КонецЕсли; КонецЕсли; КонецЦикла; КонецЕсли;
				Иначе	
					
					ОбщиеФункции.СообщитьТекст("не найдена никакая цена товара " + ДокОбъект.Номенклатура + " -- (товар пропущен) " + СсылкаДок);
					Если Объект.ОстанавливатсяЕслиНетВозможностиОпределитьСебестоимость Тогда
						Перейти ~ПлохойКонец; КонецЕсли; КонецЕсли; КонецЕсли;
				
			// Спишем сумму партии на запчасти
				
			Если ДокОбъект.СуммаПартии <> 0 Тогда
					
			 // Разберем
			              
			 	ДокОбъект.РасспредлитьСуммуПартийПоТипуЦенНаСервере();
				
				// Проверим остались если пустые партии
				
				Если ДокОбъект.Товары.Найти(0, "СуммаПартии") <> Неопределено Тогда
					ОбщиеФункции.СообщитьТекст("не определить себестоимость разобранного товара  " + СсылкаДок);
					Если Объект.ОстанавливатсяЕслиНетВозможностиОпределитьСебестоимость Тогда
						Перейти ~ПлохойКонец; КонецЕсли; КонецЕсли; КонецЕсли; 
			
		// Проверим если есть пустые товары в разукомплектации, тогда перепроведем их чтобы не было пробелов
		// если мы уже так делали то тогда пропускаем
		
			Если Объект.ПерепроводитьТоварыГдеНеЗаполненаПартияВазукомплектации И Не ЭтоПовторнаяЗапись Тогда
		
				ПерепровестиЭтиТовары = КонвертацияТипов.ПолучитьМассивИзНайденныхЗначенийСтрокТаблицыЗначений(ДокОбъект.Товары, Новый Структура("Партия", Неопределено), "Номенклатура");
				//Возврат Ложь; КонецЕсли;
				
				// Проведем на сервере прям тут не будем заморачиватся с открытием повторных форм и красивого отображения для пользователей
				
				Если ПерепровестиЭтиТовары.Количество() Тогда
				
					СвязанныеДоки = ПолучитьСсылкиДвижений(ПерепровестиЭтиТовары, '00010101', ДокОбъект.Дата - 1);
					Для Каждого СвязанныйДок ИЗ СвязанныеДоки Цикл Если Не ПровестиДок(СвязанныйДок, ПроведенныеДокументы) Тогда Возврат Ложь КонецЕсли; КонецЦикла; 
					
					// Проведем повторно разукомплектацию
					
					ПроведенныеДокументы.Вставить(СсылкаДок, Ложь);
					Возврат ПровестиДок(СсылкаДок, ПроведенныеДокументы, Истина); КонецЕсли; КонецЕсли; КонецЕсли;
		
		//Если Записывать И ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(ДокОбъект, РежимЗаписиДокумента.Проведение) Тогда
		//	ПараметрыСеанса.КонтрольОстатковВСеансеОтключен = Ложь;
		Если Не ЗаписатьДок(МетаДок, ДокОбъект, Записывать) Тогда
			Перейти ~ПлохойКонец; КонецЕсли;
		
#КонецОбласти
	ИначеЕсли МетаДок.Имя = "ЧекККМ" И ДокОбъект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
#Область Возврат_чека_ККМ
		
		ДокОбъект.ДополнительныеСвойства.Вставить("НеПроверятьСтатьюДДС", Истина);
		
		// Получим партии возвращаемого чека
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ 	Номенклатура, Упаковка, Партия, СУММА(СуммаПартии) СуммаПартии, СУММА(Количество) Количество
		|ИЗ 		Документ.ЧекККМ.Товары
		|ГДЕ 		Ссылка = &Основание
		|СГРУППИРОВАТЬ ПО
		|	Номенклатура, Упаковка, Партия");
		
		Запрос.УстановитьПараметр("Основание", ДокОбъект.Основание);
		ТаблицаПартий = Запрос.Выполнить().Выгрузить();
		
		Если ТаблицаПартий.Количество() Тогда
		
			Если Не РазобратьПартииСтрокИЗаписать(ДокОбъект, ТаблицаПартий) Тогда
				ПараметрыСеанса.КонтрольОстатковВСеансеОтключен = Ложь;
				Перейти ~ПлохойКонец; КонецЕсли;
			
		Иначе // Попробуем установить себестоимость из себестоимости
			
			ТаблицаСебестоимости 	= ПолучитьТаблицуСебестоимости(ПолучитьМассивТоваров(ДокОбъект.Товары), ДокОбъект.Дата);
			СтрокиБезПартий 		= ?(Объект.ПринудительноеПроведение Или Объект.ПерезаполнятьПартии, ДокОбъект.Товары, ДокОбъект.Товары.НайтиСтроки(Новый Структура("СуммаПартии", 0)));
			
			ЕстьИзменения = Ложь; ЕстьОшибка = Ложь;
			Для Каждого Строка Из СтрокиБезПартий Цикл 
				
				Цена = ПолучитьЦенуИзТаблицыСебестоиимости(ТаблицаСебестоимости, Строка.Номенклатура, Строка.Упаковка);
				
				Если Не Цена Тогда ЕстьОшибка = Истина КонецЕсли;
			
				Если Цена <> 0 Тогда ЕстьИзменения = Истина;
					Записывать 			= Истина;
					Строка.СуммаПартии 	= Строка.Количество * Цена;
					Строка.Партия 		= СсылкаДок;
				Иначе
					ОбщиеФункции.СообщитьТекст("Позиция " + Строка.НомерСтроки + " - не найдена цена для себестоимости товара " + Строка.Номенклатура + " -- (товар пропущен) " + СсылкаДок);  КонецЕсли; КонецЦикла;
			
			Если ЕстьОшибка И Объект.ОстанавливатсяЕслиНетВозможностиОпределитьСебестоимость Тогда
				Перейти ~ПлохойКонец; КонецЕсли; 
			
			Если Не ЗаписатьДок(МетаДок, ДокОбъект, Записывать, Перепроводить) Тогда
				Перейти ~ПлохойКонец; КонецЕсли; КонецЕсли;
#КонецОбласти
	ИначеЕсли МетаДок.Имя = "ВозвратПереданныхТоваров" Тогда
#Область Возврат_переданных_товаров		

		// Получим партии возвращаемых товаров
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ 	Номенклатура, Упаковка, Партия, СУММА(СуммаПартии) СуммаПартии, СУММА(Количество) Количество
		|ИЗ 		Документ.ПередачаТовара.Товары
		|ГДЕ 		Ссылка = &Основание
		|СГРУППИРОВАТЬ ПО
		|	Номенклатура, Упаковка, Партия");
		
		Запрос.УстановитьПараметр("Основание", ДокОбъект.Основание);
		ТаблицаПартий = Запрос.Выполнить().Выгрузить();
		
		Если Не РазобратьПартииСтрокИЗаписать(ДокОбъект, ТаблицаПартий) Тогда
			ПараметрыСеанса.КонтрольОстатковВСеансеОтключен = Ложь;
			Перейти ~ПлохойКонец; КонецЕсли;

#КонецОбласти
	ИначеЕсли МетаДок.Имя = "ВозвратОтПокупателя" Тогда
#Область Возврат_товаров_покупателя

		// Получим партии возвращаемых товаров
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ 	Номенклатура, Упаковка, Партия, СУММА(СуммаПартии) СуммаПартии, СУММА(Количество) Количество
		|ИЗ 		Документ.РеализацияТоваров.Товары
		|ГДЕ 		Ссылка = &Основание
		|СГРУППИРОВАТЬ ПО
		|	Номенклатура, Упаковка, Партия
		
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ 	Номенклатура, Упаковка, Партия, СУММА(СуммаПартии) СуммаПартии, СУММА(Количество) Количество
		|ИЗ 		Документ.РеализацияТоваров.Товары
		|ГДЕ 		Ссылка.Проведен И Номенклатура В(&Номенклатура)
		|СГРУППИРОВАТЬ ПО
		|	Номенклатура, Упаковка, Партия
		|");
		
		Запрос.УстановитьПараметр("Основание", 		ДокОбъект.ДокументОтгрузки);
		Запрос.УстановитьПараметр("Номенклатура", 	ДокОбъект.Товары.Выгрузить(,"Номенклатура").ВыгрузитьКолонку("Номенклатура"));
		
		ТаблицаПартий = Запрос.Выполнить().Выгрузить();
		
		Если Не РазобратьПартииСтрокИЗаписать(ДокОбъект, ТаблицаПартий) Тогда
			ПараметрыСеанса.КонтрольОстатковВСеансеОтключен = Ложь;
			Перейти ~ПлохойКонец; КонецЕсли;

#КонецОбласти
	Иначе // Остальные доки заполняем по партиям и перепроводим
#Область Все_остальные
		
		Если МетаДок.Имя = "ЧекККМ" Тогда ДокОбъект.ДополнительныеСвойства.Вставить("НеПроверятьСтатьюДДС", Истина) КонецЕсли;
		
		//Записывать = Ложь Или Объект.ПринудительноеПроведение;
		
		//Если УстановитьПартииМетодомFIFOИПроверитьЕстьИзмененияИлиНет(ДокОбъект, МетаДок.Имя = "ЗаказНаряд") Или Записывать Тогда
		Записывать = УстановитьПартииМетодомFIFOИПроверитьЕстьИзмененияИлиНет(ДокОбъект, МетаДок.Имя = "ЗаказНаряд", Объект.ПерезаполнятьПартии);
		
			//МассивПартийДо = ДокОбъект.Товары.ВыгрузитьКолонку("СуммаПартии");
			//
			//// Очистим партии в документе
			//
			//Если Объект.ПринудительноеПроведение Тогда
			//	ТоварыТмп = ДокОбъект.Товары.Выгрузить();
			//	ТоварыТмп.ЗаполнитьЗначения(Неопределено, "Партия");
			//	ТоварыТмп.ЗаполнитьЗначения(0, "СуммаПартии");
			//	ДокОбъект.Товары.Загрузить(ТоварыТмп); КонецЕсли;
			//
			//МодульПартий.РазнестиПартииВТаблицеМетодомFIFO(ДокОбъект.Товары, ДокОбъект.ПолучитьСкладСписания(), ФункцииФормДокументов.ПолучитьСтруктуруКолонокТоварыПоОбъекту(ДокОбъект), ДокОбъект.Дата);
			//
			//// Проверим были ли изменений партий
			//
			//МассивПартийПосле = ДокОбъект.Товары.ВыгрузитьКолонку("СуммаПартии");
			//ЕстьИзменения = Ложь; Ид = -1;
			//Для Каждого СуммаПартии Из МассивПартийДо Цикл Ид = Ид + 1; Если СуммаПартии <> МассивПартийПосле[Ид] Тогда ЕстьИзменения = Истина; Прервать; КонецЕсли; КонецЦикла;
		
			// Запишем
			
			//Если (Объект.ПринудительноеПроведение Или ЕстьИзменения) И Не ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(ДокОбъект, РежимЗаписиДокумента.Проведение) Тогда
			//Если Записывать И Не ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(ДокОбъект, РежимЗаписиДокумента.Проведение) Тогда
			//	ПараметрыСеанса.КонтрольОстатковВСеансеОтключен = Ложь;
			Если Не ЗаписатьДок(МетаДок, ДокОбъект, Записывать, Перепроводить) Тогда
				Перейти ~ПлохойКонец; КонецЕсли; КонецЕсли; //КонецЕсли;	
#КонецОбласти

	Если ЕстьТранзакция Тогда ЗАФИКСИРОВАТЬТРАНЗАКЦИЮ() КонецЕсли;

	Возврат Истина;
	
	~ПлохойКонец:
	ПараметрыСеанса.КонтрольОстатковВСеансеОтключен = Ложь;
	ПараметрыСеанса.СканированиеИзмененийОтключено 	= Ложь;
	Если ЕстьТранзакция Тогда ОТМЕНИТЬТРАНЗАКЦИЮ() КонецЕсли;
	Возврат Ложь;
	
КонецФункции
&НаСервере
Функция ПолучитьСсылкиДвижений(текМассивТоваров = Неопределено, ДатаНач = Неопределено, ДатаКОн = Неопределено)
	
	МассивТоваров = ?(текМассивТоваров = Неопределено, Объект.Товар.Выгрузить().ВыгрузитьКолонку("Номенклатура"), текМассивТоваров);
	Если ДатаНач = Неопределено И Объект.ПродолжитьС <> '00010101' Тогда ДатаНач = Объект.ПродолжитьС КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ Регистратор, Период ИЗ РегистрНакопления.ТоварыНаСкладах ГДЕ ИСТИНА " + ?(МассивТоваров.Количество(), " И Номенклатура В(&Номенклатура)", "") + 
			?(ДатаНач <> Неопределено, " И Период >= &ДатаНач", "") + 
			?(ДатаКОн <> Неопределено, " И Период <= &ДатаКон", "") + 
			" УПОРЯДОЧИТЬ ПО Период");
			
	Запрос.УстановитьПараметр("Номенклатура", 	МассивТоваров);
	Запрос.УстановитьПараметр("ДатаНач", 		ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", 		ДатаКОн);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	
КонецФункции

&НаСервере
Функция ПолучитьТоварГотовыйВступитьВСектуПартий()
	
	МассивТоваров 	= Объект.Товар.Выгрузить().ВыгрузитьКолонку("Номенклатура");
	
	Запрос 			= Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура, МИНИМУМ(Одинаковые) Одинаковые
	|ИЗ
	|(
	|	ВЫБРАТЬ
	|		Ост.Номенклатура,
	|		ВЫБОР КОГДА Ост.КоличествоОборот = Парт.КоличествоОборот ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ  Одинаковые
	|	ИЗ
	|		РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты(,,Регистратор,,НЕ Склад.Таможня И Не Номенклатура.ПартионныйУчет " + ?(МассивТоваров.Количество(), " И Номенклатура В(&Номенклатура)", "") + ")  Ост
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ПартииТоваров.ОстаткиИОбороты(,,Регистратор,,НЕ Склад.Таможня И Не Номенклатура.ПартионныйУчет" + ?(МассивТоваров.Количество(), " И Номенклатура В(&Номенклатура)", "") + ") Парт
	|	ПО
	|		Парт.Регистратор 	= Ост.Регистратор И
	|		Парт.Склад 			= Ост.Склад И
	|		Парт.Номенклатура 	= Ост.Номенклатура
	|
	|	ОБЪЕДИНИТЬ ВСЕ	// То что вобще без движений сразу вступает в секту партий
	|
	|	ВЫБРАТЬ	Ссылка, ИСТИНА
	|	ИЗ		Справочник.Номенклатура Спр
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ	РегистрНакопления.ТоварыНаСкладах Рег
	|	ПО					Рег.Номенклатура = Спр.Ссылка
	|
	|	ГДЕ Рег.Номенклатура ЕСТЬ NULL И Не Спр.ЭтоГруппа И Не ПартионныйУчет
	|
	|	) Запрос
	|
	|СГРУППИРОВАТЬ ПО Номенклатура ИМЕЮЩИЕ МИНИМУМ(Одинаковые) = Ложь
	|");
	
	Запрос.УстановитьПараметр("Номенклатура", МассивТоваров);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура");
	
КонецФункции
&НаСервере
Функция УстановитьПризнакПартия(СсылкиТоваров)
	
	стПар = ПараметрыСеанса.СканированиеИзмененийОтключено;
	ПараметрыСеанса.СканированиеИзмененийОтключено 	= Объект.ОтключитьЗаписьИсторииИзменений;
	
	НачатьТранзакцию();
	
	Для Каждого СсылкаТовара Из СсылкиТоваров Цикл
		СпрОбъект = СсылкаТовара.ПолучитьОбъект();
		СпрОбъект.ПартионныйУчет = Истина;
		
		СпрОбъект.ОбменДанными.Загрузка = Истина;
	
		Если Не ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(СпрОбъект) Тогда
			ОтменитьТранзакцию();
			ПараметрыСеанса.СканированиеИзмененийОтключено = стПар;
			Возврат Ложь; КонецЕсли; КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	ПараметрыСеанса.СканированиеИзмененийОтключено = стПар;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ДокументКосячный(СсылкаДок)
	
	Возврат ПолучитьПервыйДокументКосякНаСервере(, СсылкаДок) <> Неопределено;
	
КонецФункции

&НаКлиенте
Процедура Восстановить(Команда)
	                                               
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗапуститьНаКленте", ЭтаФорма), НСтр("ru='Восстановить партии?'; de='Ausbessern?'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры
&НаКлиенте
Процедура ЗапуститьНаКленте(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Начало = ТекущаяДата();
		
		ДокиДвижений = ПолучитьСсылкиДвижений();
		Ном = 0; Всего = ДокиДвижений.Количество();
		Для Каждого Док Из ДокиДвижений Цикл 
			
			ОбработкаПрерыванияПользователя(); 
			Ном = Ном + 1; Состояние(НСтр("ru='Проведение документов'; de='holding Dokumente'") + " (" + Строка(Всего) + ")", Ном / Всего * 100, Строка(Док));
			
			ПроведенныеДокументы 	= Новый Соответствие;
			ПерепровестиЭтиТовары 	= Неопределено;
			
			Если Не ПровестиДок(Док, ПроведенныеДокументы,,ПерепровестиЭтиТовары) Тогда
				
				//Если ПерепровестиЭтиТовары <> Неопределено Тогда // Значит требуется перепроведение товаров
				//	
				//	ОткрытьФорму("ВнешняяОбработка.ВосстановлениеПартий.Форма", Новый Структура("ЗапуститьНемедлено", Истина), ЭтаФорма,,,,Новый ОписаниеОповещения("ПодчиненнаяФормаЗакрыта", ЭтаФорма));
				//	РежимОжиданияПодчиненнойОбработки = Истина;
				//	Возврат;
				//	
				//Иначе
					ПоказатьПредупреждение(,НСтр("ru='Остановлено с ошибкой'; de='stoppen'"));
					Прервать; КонецЕсли; 
				
				
			// Проверим провелся ли документ али нет
			Если 	Объект.ВыполнятьПроверкуПослеПроведенияИОстанавливатьсяПриОшибке И
					ДокументКосячный(Док) Тогда
					
				ОбщиеФункции.СообщитьТекст("Документ не прошел проверку " + Док);
				ПоказатьЗначение(,Док); 
				Прервать; КонецЕсли; КонецЦикла;
		
		Если Объект.ВнестиТоварВСектуПартий Тогда
			
			ДобавлятьПо = 100;
			Запоминалка = Новый Соответствие;
			
			СсылкиТоваров = ПолучитьТоварГотовыйВступитьВСектуПартий(); Всего = СсылкиТоваров.Количество(); Ном = 0;
			БуфСсылок = Новый Массив;
			Для Каждого СсылкаТовара Из СсылкиТоваров Цикл Ном = Ном + 1;  ОбработкаПрерыванияПользователя(); 
				
				Если Запоминалка[СсылкаТовара] = ИСТИНА ТОгда Продолжить Иначе Запоминалка.Вставить(СсылкаТовара, Истина) КонецЕсли;
				
				БуфСсылок.Добавить(СсылкаТовара);
				Если Цел(Ном / ДобавлятьПо) - (Ном / ДобавлятьПо) = 0 Тогда
					
					Если Не УстановитьПризнакПартия(БуфСсылок) Тогда
						ПоказатьПредупреждение(,НСтр("ru='Остановлено с ошибкой'; de='stoppen'"));
						Прервать; КонецЕсли; 
					
					Состояние(НСтр("ru='Добавление признака ""Партии""'; de='Überprüfen sootvetviya Rückstände Parteien'") + " (" + Строка(Всего) + ")", Ном / Всего * 100, Строка(СсылкаТовара));
				
				БуфСсылок = Новый Массив; КонецЕсли; КонецЦикла;
		
			Если Не УстановитьПризнакПартия(БуфСсылок) Тогда
				ПоказатьПредупреждение(,НСтр("ru='Остановлено с ошибкой'; de='stoppen'")); КонецЕсли; КонецЕсли;
		
		ОбщиеФункции.СообщитьТекст(НСтр("ru='Прошло времени: '; de='Wartete: '") + Строка(ТекущаяДата() - Начало));	 КонецЕсли;
	
КонецПроцедуры


//&НаКлиенте
//Процедура ПодчиненнаяФормаЗакрыта
//КонецПроцедуры

// Борьба с косяками

&НаСервере
Функция НайтиКосякТоварНаСервере()
	
	ЕстьТовар = Объект.Товар.Количество();
	
	Запрос = Новый Запрос("
	
	// ОСтатки
	
	|ВЫБРАТЬ	Период, Склад, Номенклатура, СУММА(Количество * ВЫБОР КОГДА ВидДвижения = &ВидДвиженияПриход ТОГДА 1 ИНАЧЕ -1 КОНЕЦ) Количество
	|ПОМЕСТИТЬ 	Остатки
	|ИЗ			РегистрНакопления.ТоварыНаСкладах
	|ГДЕ		Не Склад.Таможня // И Не Номенклатура.ПартионныйУчет
	|			И Номенклатура.ТипНоменклатуры = &ТипТовар
	|" + ?(ЕстьТовар, "И Номенклатура В(&Товары)", "") + "
	|" + ?(Объект.ПродолжитьС = '00010101', "", "И Период >= &Дата") + "
	|СГРУППИРОВАТЬ ПО Период, Склад, Номенклатура;
	
	// Партии
	
	|ВЫБРАТЬ	Период, Склад, Номенклатура, СУММА(Количество * ВЫБОР КОГДА ВидДвижения = &ВидДвиженияПриход ТОГДА 1 ИНАЧЕ -1 КОНЕЦ) Количество
	|ПОМЕСТИТЬ 	Партии
	|ИЗ			РегистрНакопления.ПартииТоваров
	|ГДЕ		Не Склад.Таможня // И Не Номенклатура.ПартионныйУчет
	|			И Номенклатура.ТипНоменклатуры = &ТипТовар
	|" + ?(ЕстьТовар, "И Номенклатура В(&Товары)", "") + "
	|" + ?(Объект.ПродолжитьС = '00010101', "", "И Период >= &Дата") + "
	|СГРУППИРОВАТЬ ПО Период, Склад, Номенклатура;
	
	// Ищем
	
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЕСТЬNULL(Ост.Номенклатура, Парт.Номенклатура) Номенклатура
	|ИЗ
	|	Остатки  Ост
	|
	|ПОЛНОЕ СОЕДИНЕНИЕ
	|	Партии Парт
	|ПО
	|	Парт.Склад 			= Ост.Склад И
	|	Парт.Номенклатура 	= Ост.Номенклатура И
	|	Парт.Период			= Ост.период
	|
	|ГДЕ
	|	ЕСТЬNULL(Ост.Количество, 0) <> ЕСТЬNULL(Парт.Количество, 0)
	|");

	Запрос.УстановитьПараметр("Дата", 				Объект.ПродолжитьС);
	Запрос.УстановитьПараметр("ВидДвиженияПриход", 	ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("ТипТовар", 			Перечисления.ТипыНоменклатуры.Товар);
	Запрос.УстановитьПараметр("Товары", 			Объект.Товар.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Номенклатура; КонецЕсли;
	
КонецФункции
&НаКлиенте
Процедура НайтиКосякТовар(Команда)
	
	КосТовар = НайтиКосякТоварНаСервере();
	Если КосТовар <> Неопределено Тогда
		Объект.Товар.Добавить().Номенклатура = КосТовар КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПоказатьРасхождения(Команда)
	
	Если Элементы.Товар.ТекущиеДанные <> Неопределено Тогда
		Объект.КосякТовар = Элементы.Товар.ТекущиеДанные.Номенклатура;
		ОткрытьФорму("ВнешняяОбработка.ВосстановлениеПартий.Форма.ФормаРасхождений", Новый Структура("Номенклатура", Объект.КосякТовар), ЭтаФорма); КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПервыйДокументКосякНаСервере(ДатаДока = Неопределено, КонкрентыйДок = Неопределено)
	
	ТекстУсловия = ?(КонкрентыйДок = Неопределено, " И Не Склад.Таможня", " И Регистратор = &Ссылка");
	
	Запрос = Новый Запрос("
	
	// ОСтатки
	
	|ВЫБРАТЬ	Период, Регистратор, Склад, Номенклатура, СУММА(Количество * ВЫБОР КОГДА ВидДвижения = &ВидДвиженияПриход ТОГДА 1 ИНАЧЕ -1 КОНЕЦ) Количество
	|ПОМЕСТИТЬ 	Остатки
	|ИЗ			РегистрНакопления.ТоварыНаСкладах
	|ГДЕ		Номенклатура.ТипНоменклатуры = &ТипТовар " + ТекстУсловия + "
	|" + ?(Объект.ПродолжитьС = '00010101', "", "И Период >= &Дата") + "
	|СГРУППИРОВАТЬ ПО Период, Регистратор, Склад, Номенклатура;
	
	// Партии
	
	|ВЫБРАТЬ	Период, Регистратор, Склад, Номенклатура, СУММА(Количество * ВЫБОР КОГДА ВидДвижения = &ВидДвиженияПриход ТОГДА 1 ИНАЧЕ -1 КОНЕЦ) Количество
	|ПОМЕСТИТЬ 	Партии
	|ИЗ			РегистрНакопления.ПартииТоваров
	|ГДЕ		Номенклатура.ТипНоменклатуры = &ТипТовар " + ТекстУсловия + "
	|" + ?(Объект.ПродолжитьС = '00010101', "", "И Период >= &Дата") + "
	|СГРУППИРОВАТЬ ПО Период, Регистратор, Склад, Номенклатура;
	
	// Ищем
	
	|ВЫБРАТЬ ПЕРВЫЕ 1	ЕСТЬNULL(Ост.Регистратор, Парт.Регистратор) Регистратор
	|ИЗ					Остатки  Ост
	|
	|ПОЛНОЕ СОЕДИНЕНИЕ
	|	Партии Парт
	|ПО
	|	Парт.Склад 			= Ост.Склад И
	|	Парт.Номенклатура 	= Ост.Номенклатура И
	|	Парт.Период			= Ост.период И
	|	Парт.Регистратор	= Ост.Регистратор
	|
	|ГДЕ
	|	ЕСТЬNULL(Ост.Количество, 0) <> ЕСТЬNULL(Парт.Количество, 0)
	|
	|УПОРЯДОЧИТЬ ПО ЕСТЬNULL(Ост.Период, Парт.Период)
	|");

	Запрос.УстановитьПараметр("Дата", 				Объект.ПродолжитьС);
	Запрос.УстановитьПараметр("Ссылка", 			КонкрентыйДок);
	Запрос.УстановитьПараметр("ВидДвиженияПриход", 	ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("ТипТовар", 			Перечисления.ТипыНоменклатуры.Товар);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДатаДока = Выборка.Регистратор.Дата;
		Возврат Выборка.Регистратор; КонецЕсли;
	
КонецФункции
&НаКлиенте
Процедура ВосстановитьОтКосяка(Команда)
	
	Перем ДатаДока;
	
	Состояние("Ищем первый косячный документ");
	Док = ПолучитьПервыйДокументКосякНаСервере(ДатаДока);
	Если Док <> Неопределено Тогда
		Объект.ПродолжитьС = ДатаДока;
		ЗапуститьНаКленте(КодВозвратаДиалога.Да, Неопределено); КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКосякДокумент(Команда)
	
	Состояние("Ищем первый косячный документ");
	Док = ПолучитьПервыйДокументКосякНаСервере();
	Если Док <> Неопределено Тогда ПоказатьЗначение(, Док) КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПоказатьТоварыБезСебестоимости(Команда)
	
	ОткрытьФорму("ВнешняяОбработка.ВосстановлениеПартий.Форма.СписокТоваров", Новый Структура("ОткрытьСТоварамиБезСебестоимости", Истина));
	
КонецПроцедуры


&НаКлиенте
Процедура ВостановитьОтКосякаДоКосяка(Команда)
	
	Перем ДатаДока;
	
	Состояние("Ищем первый косячный документ");
	Начало 		= ТекущаяДата();
	ДокКосяк 	= ПолучитьПервыйДокументКосякНаСервере(ДатаДока);
	Объект.ПродолжитьС = ДатаДока;
	
	Пока ДокКосяк <> Неопределено Цикл
		
		ОбработкаПрерыванияПользователя(); 
		Состояние(НСтр("ru='Проведение документов'; de='holding Dokumente'"),,ДокКосяк);
		
		ПроведенныеДокументы 	= Новый Соответствие;
		стДокКосяк				= ДокКосяк;
		
		// Проведем док
		
		Если Не ПровестиДок(ДокКосяк, ПроведенныеДокументы) Тогда
			ПоказатьПредупреждение(,НСтр("ru='Остановлено с ошибкой'; de='stoppen'"));
			Прервать; КонецЕсли; 
		
		// Получим следующий
		
		Состояние("Ищем следущий косячный документ от ",, ДокКосяк);
		ДокКосяк = ПолучитьПервыйДокументКосякНаСервере(); 
		Объект.ПродолжитьС = ДатаДока; 
		
		// Проверим провелся ли документ али нет
		
		Если стДокКосяк = ДокКосяк Тогда
			ОбщиеФункции.СообщитьТекст("Документ не прошел проверку " + ДокКосяк);
			ПоказатьЗначение(,ДокКосяк); 
			Прервать; КонецЕсли;  КонецЦикла;

	ОбщиеФункции.СообщитьТекст(НСтр("ru='Прошло времени: '; de='Wartete: '") + Строка(ТекущаяДата() - Начало));
	
КонецПроцедуры

