
&НаКлиенте
Перем ПодсвеченныеЯчейки;

Перем СсылкиНового; // соответствие ключ - ключпоиска + значение поиска Стр - в значении ссылка

#Область Типовые

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	Настройки.Вставить("ТабличныйДокумент", 	ЗначениеВСтрокуВнутр(ТабличныйДокумент));
	Настройки.Вставить("ТипыЦен", 				Объект.ТипыЦен.Выгрузить());
	
КонецПроцедуры
&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ВОЗВРАТ;
	
	СписокВыбораИД = Элементы.РеквизитИдентификатор.СписокВыбора;
	
	Если Объект.ОбъектОбработки <> "" Тогда
		МассивРеквизитов = ПолучитьРеквизитыОбъекта(,"Строка");
		СписокВыбораИД.ЗагрузитьЗначения(МассивРеквизитов.ВыгрузитьЗначения());
		ЗадатьОбластьТабличногоДокумента(); КонецЕсли;
	
	ТаблДок = Настройки["ТабличныйДокумент"];
	Если ТаблДок <> Неопределено Тогда
		ТабличныйДокумент = ЗначениеИзСтрокиВнутр(таблДок); КонецЕсли;
	
	ТипыЦен = Настройки["ТипыЦен"];
	Если ТипыЦен <> Неопределено Тогда
		Объект.ТипыЦен.Загрузить(ТипыЦен); КонецЕсли;
	
	ОбновитьПредставлениеТиповЦен();
	
	Элементы.ГруппаТипыЦен.Видимость 	= Объект.ОбъектОбработки = "Номенклатура";
	Элементы.ОбновлятьСайт.Видимость 	= Объект.ОбъектОбработки = "Номенклатура";
	
	//Реквизиты.Очистить();
//	ОбъектОбработкиПриИзмененииНаСервере();
	//Для Каждого Строка Из МассивРеквизитов Цикл
	//	НоваяСтрока = Реквизиты.Добавить();
	//	НоваяСтрока.Имя = Строка.Значение;
	//	НоваяСтрока.Представление = Строка.Представление;
	//КонецЦикла;
	//

КонецПроцедуры


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СписокВыбора = Элементы.ОбъектОбработки.СписокВыбора;
	Для Каждого Спр ИЗ Метаданные.Справочники Цикл СписокВыбора.Добавить(Спр.Имя, Спр.Представление()) КонецЦикла;
	
	Если Не ПустаяСтрока(Параметры.ФильтрОбъект) Тогда
		
		Объект.ОбъектОбработки = Параметры.ФильтрОбъект;
		
		Элементы.ГруппаТипыЦен.Видимость = Объект.ОбъектОбработки = "Номенклатура";
		Элементы.ОбновлятьСайт.Видимость = Объект.ОбъектОбработки = "Номенклатура";
		Элементы.ОбъектОбработки.Видимость = РольДоступна("ПолныеПрава") Или РольДоступна("ПолныеПраваВОбласти");
		
		ОбъектОбработкиПриИзмененииНаСервере(); КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьПредставлениеТиповЦен();
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ПолучитьРеквизитыОбъекта(МетаОбъект = Неопределено, ИмяТипа, ИмяТЧ = "", ДобавитьСтандартныеРквизиты = Истина, ВсеТипы = Ложь, ДобавитьВладельца = Ложь)   
	
	Если МетаОбъект = Неопределено Тогда
		Если Объект.ОбъектОбработки = "ДополнительныеРеквизитыНоменклатуры" Тогда
	  		  МетаОбъект = Метаданные.ПланыВидовХарактеристик["ДополнительныеРеквизитыНоменклатуры"];
			ДобавитьВладельца = Ложь;
		Иначе
			МетаОбъект = Метаданные.Справочники[Объект.ОбъектОбработки];
			ДобавитьВладельца = Истина;
		КонецЕсли;
	КонецЕсли;
	
	МассивРеквизитов = Новый СписокЗначений;
	Если НЕ ПустаяСтрока(ИмяТЧ) Тогда
		МетаОбъект = МетаОбъект.ТабличныеЧасти[ИмяТЧ]; 
	КонецЕсли;
	
	// стандартные
	Если ДобавитьСтандартныеРквизиты И ПустаяСтрока(ИмяТЧ) Тогда
		
	Если МетаОбъект.ДлинаКода > 0 Тогда
		МассивРеквизитов.Добавить("Код", "Код"); КонецЕсли;
	
	//Если МетаОБъект.Реквизиты.Найти("Код2") <> Неопределено Тогда
	//	МассивРеквизитов.Добавить("Код2"); КонецЕсли;
	//
	Если МетаОбъект.ДлинаНаименования > 0 Тогда
		МассивРеквизитов.Добавить("Наименование", "Наименование"); КонецЕсли;
	
	Если ДобавитьВладельца И МетаОбъект.Владельцы.Количество() Тогда
		МассивРеквизитов.Добавить("Владелец", "Владелец"); КонецЕсли; 
	
	КонецЕсли;
	//Элементы.Владелец.Видимость = МетаОбъект.Владельцы.Количество();
	
	// пробежимся по реквизитам, если строковые, добавим в список
	
	ПроверяемыйТип1 = Тип("Строка");
	ПроверяемыйТип2 = Тип("Число");

	МетаРеквизиты = МетаОбъект.Реквизиты;
	Для Каждого Рекв ИЗ МетаРеквизиты Цикл
		Если ВсеТипы ИЛИ Рекв.Тип.СодержитТип(ПроверяемыйТип1) ИЛИ Рекв.Тип.СодержитТип(ПроверяемыйТип2) Тогда	МассивРеквизитов.Добавить(Рекв.Имя, Рекв.Синоним); КонецЕсли;
	КонецЦикла;
	
	
	
	// получим из общих реквизитов
	
	//СвойствоИспользовать = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать;
	//   
	//Для Каждого ОбщийРеквизит ИЗ Метаданные.ОбщиеРеквизиты Цикл
	//	
	//	Элемент = ОбщийРеквизит.Состав.Найти(МетаОбъект);
	//	
	//	Если Элемент.Использование = СвойствоИспользовать Тогда
	//		МассивРеквизитов.Добавить(ОбщийРеквизит.Имя, ОбщийРеквизит.Синоним);
	//	КонецЕсли;
	//	
	//КонецЦикла;
	//
	Возврат МассивРеквизитов; 	
	
КонецФункции

&НаСервере
Процедура ОбъектОбработкиПриИзмененииНаСервере()
	
	//Объект.ТабличнаяЧасть = "";	
	
	//Если Объект.ОбъектОбработки = "ДополнительныеРеквизитыНоменклатуры" Тогда
	//    МетаОбъект = Метаданные.ПланыВидовХарактеристик["ДополнительныеРеквизитыНоменклатуры"];
	//	ДобавитьВладельца = Ложь;
	//Иначе
		МетаОбъект = Метаданные.Справочники[Объект.ОбъектОбработки];
		//МетаТЧ = МетаОбъект.ТабличныеЧасти;
		// заполним список табличных частей объекта

		//СписокВыбораТЧ = Элементы.ТабличнаяЧасть.СписокВыбора;
		//Для Каждого ТЧ ИЗ МетаТЧ Цикл СписокВыбораТЧ.Добавить(ТЧ.Имя, ТЧ.Представление()); КонецЦикла;
		
		ДобавитьВладельца = Истина;
	//КонецЕсли;

	// заполним список идентификаторов, по которому будет идентифицироваться элемент справочника
	СписокВыбораИД = Элементы.РеквизитИдентификатор.СписокВыбора;
	
	МассивРеквизитов = ПолучитьРеквизитыОбъекта(МетаОбъект, "Строка");
	СписокВыбораИД.ЗагрузитьЗначения(МассивРеквизитов.ВыгрузитьЗначения());
	
	ОчиститьПолеПоиска(МетаОбъект);

	ЗаполнитьТаблицуРеквизитов(МетаОбъект,,,,ДобавитьВладельца);

	
	ЗадатьОбластьТабличногоДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ОбъектОбработкиПриИзменении(Элемент)
	
	Элементы.ГруппаТипыЦен.Видимость 		= Объект.ОбъектОбработки = "Номенклатура";
	Элементы.ОбновлятьСайт.Видимость 	= Объект.ОбъектОбработки = "Номенклатура";
	
	ОбъектОбработкиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличныйДокумент()
	ТабличныйДокумент.Очистить();
КонецПроцедуры

&НаСервере 
Процедура ОчиститьПолеПоиска(МетаОбъект)
	
	Объект.РеквизитИдентификатор = ?(МетаОбъект.ДлинаКода > 0, "Код", 
		?(МетаОбъект.ДлинаНаименования > 0, "Наименование","")); 
КонецПроцедуры

&НаСервере 
Функция ПолучитьПутьПоОписаниюТипа(ОписаниеТипа)
	
	Возврат ?(обм_Среда.ЭтоПримитивный(ОписаниеТипа), "", Метаданные.НайтиПоТипу(ОписаниеТипа.Типы()[0]).ПолноеИмя());
	
КонецФункции
&НаКлиенте
Процедура РеквизитыТипРеквизитаПриИзменении(Элемент)
	
	текДанные = Элементы.Реквизиты.ТекущиеДанные;
	Если текДанные <> Неопределено Тогда
		текДанные.Путь = ПолучитьПутьПоОписаниюТипа(текДанные.ТипРеквизита); КонецЕсли;
	
КонецПроцедуры


#Область Загрузка_метаданных_реквизитов

&НаСервере 
Процедура ДобавитьКоллекциюМетаОсобогоОбъекта(ПолнПуть, Представление, МетаКоллекция, Кроме = "")
	
	Для Каждого Элемент Из МетаКоллекция Цикл
		Если НРег(Элемент.Имя) <> НРег(Кроме) Тогда
			ДобавитьРеквизит("[" + ПолнПуть + "]" + Элемент.Имя , "[" + Представление + "]." + Элемент.Синоним + ": " + Элемент.Синоним, Элемент.Тип); КонецЕсли; КонецЦикла;
	
КонецПроцедуры
&НаСервере 
Процедура ЗаполнитьРегистрСведений(ИмяРегистра, Кроме)
	
	МетаРег 	= Метаданные.РегистрыСведений[ИмяРегистра];
	ПолнПуть 	= МетаРег.ПолноеИмя();
	
	ДобавитьКоллекциюМетаОсобогоОбъекта(ПолнПуть, МетаРег.Синоним, МетаРег.Измерения, 	Кроме);
	ДобавитьКоллекциюМетаОсобогоОбъекта(ПолнПуть, МетаРег.Синоним, МетаРег.Ресурсы,		Кроме);
	ДобавитьКоллекциюМетаОсобогоОбъекта(ПолнПуть, МетаРег.Синоним, МетаРег.Реквизиты, 	Кроме);
	
КонецПроцедуры
&НаСервере 
Процедура ЗаполнитьОсобымиТипамиНоменклатуру()
	
	// Регистры
	
	ЗаполнитьРегистрСведений("ТаможенныеПошлины", 		"Номенклатура");
	ЗаполнитьРегистрСведений("НоменклатураПартнеров", 	"Номенклатура");
	
	// Установка цен
	
	МетаРеквизиты	= Метаданные.Документы.УстановкаЦенНоменклатуры.ТабличныеЧасти.Товары.Реквизиты;
	ДобРеквизиты 	= СтрРазделить(СтрЗаменить("Цена, Валюта, ДатаНачала", " ", ""), ",", Ложь);
	
	Для Каждого Строка Из Объект.ТипыЦен Цикл
		Для Каждого Реквизит ИЗ ДобРеквизиты Цикл
			МетаРекв = МетаРеквизиты[Реквизит];
			ДобавитьРеквизит("[Цены:" + Строка.ТипЦен.Код + "]" + МетаРекв.Имя, "[Установка цен: " + Строка.ТипЦен + "]." + МетаРекв.Синоним, МетаРекв.Тип); КонецЦикла; КонецЦикла;
	
КонецПроцедуры
&НаСервере 
Процедура ЗаполнитьТаблицуРеквизитов(МетаОбъект = Неопределено, ИмяТЧ = "", ИмяТипа = "", ДобавитьСтандартныеРеквизиты = Истина, ДобавитьВладельца = Ложь)
	
	МетаОбъект = Метаданные.Справочники[Объект.ОбъектОбработки];
	ДобавитьВладельца = Истина;
	
	ВсеТипы = ПустаяСтрока(ИмяТипа);
	Если НЕ ВсеТипы Тогда ПроверяемыйТип = Тип(ИмяТипа); КонецЕсли;
	
	Реквизиты.Очистить();
	
	// стандартные
	Если ДобавитьСтандартныеРеквизиты Тогда
		
		Если МетаОбъект.ДлинаКода > 0 Тогда
			ДобавитьРеквизит("Код", "Код", Новый ОписаниеТипов("Строка")); КонецЕсли;
		
		Если МетаОбъект.ДлинаНаименования > 0 Тогда
			ДобавитьРеквизит("Наименование", "Наименование", Новый ОписаниеТипов("Строка")); КонецЕсли; 
		
		Если ДобавитьВладельца И МетаОбъект.Владельцы.Количество() Тогда
			Для Каждого реквВладелец ИЗ МетаОбъект.Владельцы Цикл
				Если Лев(реквВладелец.ПолноеИмя(), 10) = "Справочник" Тогда
					
					ДобавитьРеквизит("Владелец", "Владелец", Новый ОписаниеТипов(стрЗаменить(реквВладелец.ПолноеИмя(), ".", "Ссылка."))); 
	             Иначе
					
					ДобавитьРеквизит("Владелец", "Владелец", реквВладелец.Тип); 	
				КонецЕсли;
				Прервать;
			КонецЦикла;
		Иначе
		КонецЕсли;
		
		Если МетаОбъект.Иерархический Тогда
			ДобавитьРеквизит("Родитель", "Родитель", Новый ОписаниеТипов("СправочникСсылка." + Объект.ОбъектОбработки));
			ДобавитьРеквизит("ЭтоГруппа", "ЭтоГруппа", Новый ОписаниеТипов("Булево"));

		КонецЕсли;
	КонецЕсли;
	
	// пробежимся по реквизитам, добавим в список, если есть проверяемые типы, то добавим только реквизиты типа ПроверяемыТип
	МетаРеквизиты = МетаОбъект.Реквизиты;
	Для Каждого Рекв ИЗ МетаРеквизиты Цикл
		Если ВсеТипы ИЛИ Рекв.Тип.СодержитТип(ПроверяемыйТип) Тогда	
			ДобавитьРеквизит(Рекв.Имя, Рекв.Синоним, Рекв.Тип); КонецЕсли; КонецЦикла;
	
	// Пробежимся по табличным частям
	
	Для Каждого МетаТабл Из МетаОбъект.ТабличныеЧасти Цикл
		Для Каждого Рекв ИЗ МетаТабл.Реквизиты Цикл
			Если ВсеТипы ИЛИ Рекв.Тип.СодержитТип(ПроверяемыйТип) Тогда	
				ДобавитьРеквизит(МетаТабл.Имя + "." + Рекв.Имя, МетаТабл.Синоним + ": " + Рекв.Синоним, Рекв.Тип); КонецЕсли; КонецЦикла; КонецЦикла;
	
	// Установим для особых товарищей особые условия
	
	Если МетаОбъект = Метаданные.Справочники.Номенклатура Тогда
		ЗаполнитьОсобымиТипамиНоменклатуру(); КонецЕсли;
	
	// для ссылочных реквизитов добавим поля поиска
	Для Каждого Стр Из Реквизиты Цикл
		ТекТип=Стр.ТипРеквизита.Типы()[0];
		Если ТекТип = Тип("ОписаниеТипов") Тогда
			Продолжить;
		КонецЕсли;	
		Если обм_Среда.ЭтоСсылочныйТип(ТекТип,Ложь) Тогда
			ТекТип=Стр.ТипРеквизита.Типы()[0];
			Мета = Метаданные.НайтиПоТипу(ТекТип);
			Если Мета.ДлинаКода=0 Тогда
				Стр.РеквизитПоиска="Наименование";
			Иначе	
				Стр.РеквизитПоиска="Код";
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	
	МетаОбъект=Неопределено;//если не обнулить переменную, он будет пытаться вернуть её на клиента с ошибкой
КонецПроцедуры
&НаСервере 
Процедура ДобавитьРеквизит(Имя, Представление, Знач ОписаниеТипа = Неопределено)
	
		НоваяСтрока = Реквизиты.Добавить();
		НоваяСтрока.Имя = Имя;
		НоваяСтрока.Представление = Представление;
		НоваяСтрока.ТипРеквизита = ОписаниеТипа;
		НоваяСтрока.ВсеТипыРеквизита = ОписаниеТипа;
		
		Если ОписаниеТипа <> Неопределено Тогда
			
			Типы = ОписаниеТипа.Типы();
			ЭтоМногоТип = Типы.Количество() > 1;
			НоваяСтрока.ЭтоМногоТип = ЭтоМногоТип;
			текОписаниеТипа = ОписаниеТипа;
			
			Если ЭтоМногоТип Тогда
				новТип = Новый Массив;
				новТип.Добавить(Типы[0]);
				текОписаниеТипа = Новый ОписаниеТипов(Новый ОписаниеТипов, новТип);
				НоваяСтрока.ТипРеквизита = текОписаниеТипа; КонецЕсли;
			
			НоваяСтрока.Путь = ПолучитьПутьПоОписаниюТипа(текОписаниеТипа); КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура РеквизитИдентификаторПриИзменении(Элемент)
	
	ЗадатьОбластьТабличногоДокумента();

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПеревод(Команда)
	
	Если ПустаяСтрока(Объект.РеквизитИдентификатор) Тогда
		ПоказатьПредупреждение(,"Не задано поле поиска. Загрузка реквизитов не может быть выполнена"); Возврат; КонецЕсли;
	
	// Очистим цветные ячейки
	
	Если ПодсвеченныеЯчейки = Неопределено Тогда
		ПодсвеченныеЯчейки = Новый Массив;
		// Очистим все все ячейки по цвету
		Для НомСтроки = 1 По ТабличныйДокумент.ВысотаТаблицы Цикл
			Для НомКолонки = 1 По ТабличныйДокумент.ШиринаТаблицы Цикл
				ТабличныйДокумент.Область("R" + Формат(НомСтроки, "ЧГ=") + "C" + Формат(НомКолонки, "ЧГ=")).ЦветФона = Новый Цвет; КонецЦикла; КонецЦикла;
	Иначе
		Для Каждого ИмяЯчейки Из ПодсвеченныеЯчейки Цикл
			ТабличныйДокумент.Область(ИмяЯчейки).ЦветФона = Новый Цвет; КонецЦикла; КонецЕсли;
	
	// Загрузим
	
	строшибки = "";
	ЗагрузитьТаблицу(стрОшибки);
	Если Не ПустаяСтрока(стрОшибки) Тогда
		
		Если ПоказатьЛогОшибок Тогда
			текст = Новый ТекстовыйДокумент;
			текст.УстановитьТекст(стрОшибки);
			текст.Показать("Ошибки загрузки"); КонецЕсли;
		
		ОбщиеФункции.СообщитьТекст(стрОшибки); КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НайтиОбъект(ИмяОбъектаПолное, РеквизитПоиска, Значение, стрОшибки = "", Подобно = Ложь, МетаОбъект)
	
	Если РеквизитПоиска = "Наименование" Тогда
		ИмяОбъекта = Сред(ИмяОбъектаПолное,Найти(ИмяОбъектаПолное, ".")+1);
		Если ИмяОбъекта = "ДополнительныеРеквизитыНоменклатуры" Тогда 
			Ссылка = ПланыВидовХарактеристик[ИмяОбъекта].НайтиПоНаименованию(Значение, Истина); 
		Иначе
			Ссылка = Справочники[ИмяОбъекта].НайтиПоНаименованию(Значение, Истина);
		КонецЕсли;
		Если Ссылка = Неопределено ИЛИ Ссылка.Пустая() Тогда Возврат Неопределено; КонецЕсли;
		
		Возврат Ссылка;
		
	КонецЕсли;
	
	//Круглов
	Если РеквизитПоиска = "Код" ИЛИ РеквизитПоиска="Наименование" ИЛИ РеквизитПоиска="ИмяПредопределенныхДанных" Тогда
		МетаРеквизит = МетаОбъект.СтандартныеРеквизиты[РеквизитПоиска];
	Иначе
		МетаРеквизит = МетаОбъект.Реквизиты[РеквизитПоиска];
	КонецЕсли;	
	
	Если МетаРеквизит.Тип.СодержитТип(Тип("Число")) Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ Ссылка ИЗ " + ИмяОбъектаПолное + " ГДЕ " + РеквизитПоиска +  " = " +  Число(Значение));
	ИначеЕсли МетаРеквизит.Тип.СодержитТип(Тип("Строка")) Тогда	
		Запрос = Новый Запрос("ВЫБРАТЬ Ссылка ИЗ " + ИмяОбъектаПолное + " ГДЕ " + РеквизитПоиска + ?(Подобно, " ПОДОБНО " , " = ") + """" +  Значение + ?(Подобно, "%""", """"));
	Иначе
		Сообщить("Поиск по реквизиту типа "+МетаРеквизит.Тип+" не поддерживается!");
		Возврат Неопределено;
	КонецЕсли;	
	//Круглов
	
	Попытка                      // мало ли что подусунули в реквизит...
		Рез = Запрос.Выполнить();
	Исключение
		стрОшибки = "Объект не найден. " +  ОписаниеОшибки();
		Возврат Неопределено;
	КонецПопытки;
	
	Если НЕ Рез.Пустой() Тогда
		
		Выборка = Рез.Выбрать();
		Если Выборка.Следующий() Тогда
			
			Возврат Выборка.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ЗаполнитьРеквизитВладелец(Сч, текОбъект, НомерКолонки, РеквизитПоиска)
	
	
	СтрОшибки="";
	
	//Если НЕ НомерКолонки Тогда НомерКолонки = 2 + Число(ЗагрузитьПошлины) + РеквизитВладелец.НомерКолонки; КонецЕсли;
	
	СтрокаВладелец = ТабличныйДокумент.Область("R"+Строка(Сч)+"C" + Строка(НомерКолонки)).Текст;
	Если ПустаяСтрока(СтрокаВладелец) Тогда
		стрОшибки = стрОшибки + "|Строка #" + Строка(Сч-1) + ": Не заполнен владелец для объекта. Выгрузка данных по этой строке не произведена";
		ТабличныйДокумент.Область("R"+Строка(Сч)+"C" + Строка(НомерКолонки)).ЦветФона = WebЦвета.Красный;
		Возврат Ложь;
	Иначе
		Ошибка = "";
		МетаОбъект = текОбъект["Владелец"].Метаданные();
		
			
		Если Метаданные.Справочники.Содержит(МетаОбъект) Тогда
			Ссылка = НайтиОбъект("Справочник." + МетаОбъект.Имя,  РеквизитПоиска, СтрокаВладелец, Ошибка, ,МетаОбъект);
		Иначе
			Ссылка = НайтиОбъект("ПланВидовХарактеристик." + МетаОбъект.Имя,  РеквизитПоиска, СтрокаВладелец, Ошибка, , МетаОбъект);
		КонецЕсли;	
		
		
		Если Ссылка = Неопределено Тогда 
	
			стрОшибки = стрОшибки + Символы.ПС + текОбъект + " - Ошибка присвоения значения реквизиту объекта: " + Ошибка;
			ТабличныйДокумент.Область("R"+Строка(Сч)+"C"+ Строка(НомерКолонки)).ЦветФона = WebЦвета.Красный;
			Возврат Ложь;
		Иначе			
		
			текОбъект["Владелец"] =  Ссылка;
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
									
	
КонецФункции

&НаСервере
Функция ПолучитьСсылкуИзБазы(Путь, ИмяРеквизитаКлюча, Ключ)
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка ИЗ " + Путь + " ГДЕ " + ИмяРеквизитаКлюча + " = &Значение");
	Запрос.УстановитьПараметр("Значение", Ключ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка КонецЕсли;
	
КонецФункции
&НаКлиенте
Функция СсылкаИзКеша(Путь, ИмяРеквизитаКлюча, Ключ, Кеш)

	// Если в кеше нет то найдем в базе и присвоим кешу
	
	текКлюч = Путь + Ключ;
	Ссылка 	= Кеш[текКлюч];
	Если Ссылка = Неопределено Тогда
		
		Ссылка = ПолучитьСсылкуИзБазы(Путь, ИмяРеквизитаКлюча, Ключ);
		
		// Если это справочник новый которы сейчас загружается тогда добавим его чтобы позже получить
		Если Ссылка = Неопределено И Путь = "Справочник." + Объект.ОбъектОбработки Тогда
			Ссылка = Новый Структура("ЭтоНовый, Ключ, Значение", Истина, ИмяРеквизитаКлюча, Ключ); КонецЕсли;
		
		Если Ссылка <> Неопределено Тогда
			Кеш.Вставить(текКлюч, Ссылка); КонецЕсли; КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

#Область Загрузка

&НаКлиенте
Функция ПолучитьЧисло(Стр)
	
	Число = 0;
	Попытка Число = Число(Стр) Исключение КонецПопытки;

	Возврат Число;
	
КонецФункции
&НаКлиенте
Функция ПолучитьТекстПоля(номСтр, номКол) Возврат ТабличныйДокумент.Область("R" + Формат(номСтр, "ЧГ=") + "C" + Формат(номКол, "ЧГ=")).Текст КонецФункции
&НаКлиенте
Процедура ВыделитьСущность(Сущность, Соотв, Строка)
	
	СтрокиСущностей = Соотв[Сущность];
	Если СтрокиСущностей = Неопределено Тогда СтрокиСущностей = Новый Массив КонецЕсли;
	
	СтрокиСущностей.Добавить(Строка);
	Соотв.Вставить(Сущность, СтрокиСущностей); 
	
КонецПроцедуры
&НаКлиенте
Функция ИзСтруктуры(Структура, Свойство) Возврат ?(Структура.Свойство(Свойство), Структура[Свойство], Неопределено) КонецФункции
&НаСервере
Процедура УстановитьРеквизит(стЗначение, НовЗначение, Изменился)
	
	Если стЗначение <> НовЗначение Тогда
		Изменился 	= Истина;
		стЗначение 	= НовЗначение; КонецЕсли;
	
КонецПроцедуры
&НаСервере
Функция ЗагрузитьНаСервере(Объекты, КолЗагруженных)
	
	ИмяПоляСущнТекОбъекта 	= Новый Соответствие; // в ключе имя сущности, в значении имя поля реквизита куда надо установить тек объект
	ТипСтруктура 			= Тип("Структура");
	СсылкиНаТовары			= Новый Соответствие; // в ключе ключ товара в значении его ссылка
	
	НачатьТранзакцию();
	//Если объект.НеИзменятьДанные Тогда НачатьТранзакцию() КонецЕсли;
	
#Область Установка_цен
	
	Если Объект.ОбъектОбработки = "Номенклатура" Тогда
		
		ДокУстановкаЦен = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент(); //КонецЕсли;
		ТипыЦенПоКодам = Новый Соответствие; // в ключе код типа цен, в значении ссылка на тип цен
		
		// Установим цены на товары сразу до записи чтобы проверить матрицы
		
		Для КАждого текОбъект Из Объекты Цикл
			
			СсылкаТовар = ?(текОбъект.ЭтоНовый, Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор), текОбъект.Ссылка);
			СсылкиНаТовары.Вставить(текОбъект.IDОбъекта, СсылкаТовар);
			
			Для Каждого Сущность Из текОбъект.Сущности Цикл
			
				Если СтрНачинаетсяС(Сущность.Ключ, "Цены:") Тогда
				
					// Вытащаим цены номенклатуры
				
					Для Каждого Строка Из Сущность.Значение Цикл
				
						НовСтрока = ДокУстановкаЦен.Товары.Добавить();
						ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
					
						НовСтрока.Номенклатура = СсылкаТовар;
						НовСтрока.ТипЦен = ПолучитьТипЦенПоСущности(Сущность.Ключ, ТипыЦенПоКодам); 
						
						Если НовСтрока.Валюта.Пустая() Тогда 			НовСтрока.Валюта 		= ВалютаПоУм КонецЕсли;
						Если НовСтрока.ДатаНачала = '00010101' Тогда 	НовСтрока.ДатаНачала 	= ?(ДатаПоУм = '00010101', ТекущаяДата(), ДатаПоУм) КонецЕсли; КонецЦикла; КонецЕсли; КонецЦикла; КонецЦикла;
						
		Если ДокУстановкаЦен.Товары.Количество()  Тогда
		
			ДокУстановкаЦен.Дата = ТекущаяДата();
			ДокУстановкаЦен.Комментарий = "Создана автоматически универсальной загрузкой: " + ТекущаяДата() + " " + ПараметрыСеанса.ТекущийПользователь;
		
			Если ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(ДокУстановкаЦен, РежимЗаписиДокумента.Проведение) Тогда
				КолЗагруженных = КолЗагруженных + 1;
			Иначе
				//Если объект.НеИзменятьДанные Тогда ОтменитьТранзакцию(); КонецЕсли;
				ОтменитьТранзакцию();
				Возврат Ложь; КонецЕсли; КонецЕсли; КонецЕсли;
	
#КонецОбласти
	
	// Загрузим объекты
	
	Для КАждого текОбъект Из Объекты Цикл
		
#Область заполнение_объекта

		Изменился = Ложь;
		ЭтоНовый = Ложь;
		
		// Получим объект
		
		Если текОбъект.ЭтоНовый Или (ТипЗнч(текОбъект.Ссылка) = ТипСтруктура И текОбъект.Ссылка.Свойство("ЭтоНовый", ЭтоНовый)) Тогда
			
			СпрОбъект = ?(текОбъект.Свойство("ЭтоГруппа") И текОбъект.ЭтоГруппа, Справочники[Объект.ОбъектОбработки].СоздатьГруппу(), Справочники[Объект.ОбъектОбработки].СоздатьЭлемент());
			
			Если Объект.ОбъектОбработки = "Номенклатура" Тогда
				СсылкаОбъекта = ТипыЦенПоКодам[текОбъект.IDОбъекта];
				СпрОбъект.УстановитьСсылкуНового(СсылкаОбъекта); КонецЕсли;
			
			СсылкаОбъекта = СпрОбъект.ПолучитьСсылкуНового();
			
			Если ЭтоНовый Тогда 
				СпрОбъект[текОбъект.Ссылка.Ключ] = текОбъект.Ссылка.Значение;
				текОбъект.Ссылка = СсылкаОбъекта; КонецЕсли;
		Иначе	
			СсылкаОбъекта 	= текОбъект.Ссылка;
			СпрОбъект 		= СсылкаОбъекта.ПолучитьОбъект();  КонецЕсли;
		
		// Добавим реквизиты
		
		Для Каждого Реквизит Из текОбъект Цикл
			Если Не СтрНайти("IDОбъекта, ЭтоНовый, Ссылка, ЭтоГруппа, Сущности, ТабличныеЧасти", Реквизит.Ключ)  Тогда
			
				// таблица значений
				
				Если ТипЗнч(Реквизит) = ТипСтруктура Тогда
					
					НовСтрока = СпрОбъект[Реквизит.Ключ].Добавить();
					Для Каждого Строка Из Реквизит.Значения Цикл
						УстановитьРеквизит(НовСтрока[Строка.Ключ], Строка[Строка.Ключ], Изменился); КонецЦикла; 
				Иначе
					
					УстановитьРеквизит(СпрОбъект[Реквизит.Ключ], текОбъект[Реквизит.Ключ], Изменился); КонецЕсли; КонецЕсли; КонецЦикла;
		
		// Добавим табличные части
		
		Для Каждого Табл Из текОбъект.ТабличныеЧасти Цикл
			Для Каждого Строка Из Табл.Значение Цикл
				
				НовСтрока = СпрОбъект[Табл.Ключ].Добавить();
				Для КАждого Поле Из Строка Цикл
					НовСтрока[Поле.Ключ] = Поле.Значение; КонецЦикла; КонецЦикла; КонецЦикла;
#КонецОбласти
		
		// Вытащим сущности
		
		Для Каждого Сущность Из текОбъект.Сущности Цикл
			
			Если СтрНачинаетсяС(Сущность.Ключ, "РегистрСведений.") Тогда
#Область Регистры_сведений				
				// Запишем регистры сведений
				
				Для Каждого Строка Из Сущность.Значение Цикл
					
					ИмяРегистра 	= Сред(Сущность.Ключ, СтрНайти(Сущность.Ключ, ".") + 1);
					ЭтоНомПартнеров = НРег(ИмяРегистра) = "номенклатурапартнеров";
					
					Запись = РегистрыСведений[ИмяРегистра].СоздатьМенеджерЗаписи();
					ЗаполнитьЗначенияСвойств(Запись, Строка);
					Запись[ПолучитьИмяПоляСущнТекОбъекта(Сущность.Ключ, Сущность.Ключ, ИмяПоляСущнТекОбъекта)] = СсылкаОбъекта;
					
					// Опишем запись номенлатуры партнеров, ам необходимо чтобы поля уже были в карточке товара, иначе на потеряется фокус на объект товар
					
					Если ЭтоНомПартнеров Тогда
						ПараметрыСеанса.КонтрольОстатковВСеансеОтключен = Истина;
						Изменился = Ложь;
						РегистрыСведений.НоменклатураПартнеров.ПроверитьИУстановитьСоответвияРеквизитовСправочникаРегиструНоНеЗаписывать(СпрОбъект, Запись, Изменился); КонецЕсли;
					
					Если Не ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(Запись) Тогда
						//Если объект.НеИзменятьДанные Тогда ОтменитьТранзакцию(); КонецЕсли;
						ОтменитьТранзакцию();
						Если ЭтоНомПартнеров Тогда ПараметрыСеанса.КонтрольОстатковВСеансеОтключен = Ложь КонецЕсли;
						Возврат Ложь; КонецЕсли; 
					
					Если ЭтоНомПартнеров Тогда ПараметрыСеанса.КонтрольОстатковВСеансеОтключен = Ложь КонецЕсли;
					КолЗагруженных = КолЗагруженных + 1; КонецЦикла;
#КонецОбласти
			Иначе // Тут ниже втыкайте обработки еще не виданных новых сщностей (плагин + )
				// ВызватьИсключение "Не известный вид сущности: " + Сущность.Ключ; 
			КонецЕсли; КонецЦикла;
		
		// Чтобы не уходил товар на сайт через супер медленную процедуру
		
		Если Объект.ОбъектОбработки = "Номенклатура" Тогда
			
			Если Не Объект.ОбновлятьСайт Тогда
				// Чтобы не тормозило из-за мегапроцедур для сайта
				СпрОбъект.ДополнительныеСвойства.Вставить("Обновление", Ложь); КонецЕсли; КонецЕсли;
		
		// Запишем объект
		
		Если Изменился Тогда
			Если ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(СпрОбъект) Тогда
				КолЗагруженных = КолЗагруженных + 1;
			Иначе
				ОтменитьТранзакцию();
				//Если объект.НеИзменятьДанные Тогда ОтменитьТранзакцию(); КонецЕсли;
				Возврат Ложь; КонецЕсли; КонецЕсли; КонецЦикла;
	
	// Фсе
	
	//Если объект.НеИзменятьДанные Тогда ОтменитьТранзакцию(); КонецЕсли;
	Если объект.НеИзменятьДанные Тогда 
			ОтменитьТранзакцию(); 
	Иначе	ЗафиксироватьТранзакцию(); КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПолучитьТипЦенПоСущности(Сущность, Кеш)
	
	ТипЦен = Кеш[Сущность];
	Если ТипЦен = Неопределено Тогда
		
		ТипЦен = Справочники.ТипыЦен.НайтиПоКоду(Сред(Сущность, СтрНайти(Сущность, ":") + 1));
		Кеш.Вставить(Сущность, ТипЦен); КонецЕсли;
		
	Возврат ТипЦен;
	
КонецФункции
&НаСервере
Функция ПолучитьИмяПоляСущнТекОбъекта(ИмяСущности, Путь, Кеш)
	
	// Вычислим в какое поле запихивать текущий объект
	
	ИмяПоля = Кеш[ИмяСущности];
	Если ИмяПоля = Неопределено Тогда
		
		текТип = Тип("СправочникСсылка." + Объект.ОбъектОбработки);
		
		текРеквизиты = Метаданные.НайтиПоПолномуИмени(Путь);
		Для Каждого Реквизит Из текРеквизиты.Измерения Цикл
			Если Реквизит.Тип.СодержитТип(текТип) Тогда
				
				ИмяПоля = Реквизит.Имя;
				Кеш.Вставить(ИмяСущности, ИмяПоля);
				Возврат ИмяПоля; КонецЕсли; КонецЦикла; КонецЕсли;
	
	Возврат ИмяПоля;
	
КонецФункции


&НаКлиенте
Функция ЭтоСущность(Имя) Возврат СтрНачинаетсяС(Имя, "[") КонецФункции
&НаКлиенте
Функция ЭтоТаблица(Имя) Возврат Булево(СтрНайти(Имя, ".")) КонецФункции
&НаКлиенте
Функция ПолучитьИДОбъектИзМассиваПоКлючу(Массив, Ключ)
	
	Ид = -1;
	Для Каждого искСтрукт Из Массив Цикл Ид = Ид + 1;
		
		Если искСтрукт.IDОбъекта = Ключ Тогда 
			Возврат Ид; КонецЕсли; КонецЦикла;
	
КонецФункции
&НаКлиенте
Процедура ДобавитьОбъектВМассивПоКлючу(Массив, Ключ, Значение)
	
	текОбъект = Неопределено;
	Ид = ПолучитьИДОбъектИзМассиваПоКлючу(Массив, Ключ);
	
	Если Ид = Неопределено Тогда
		Массив.Добавить(Значение);
	Иначе
		Массив.Установить(Ид, Значение); КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ВОшибку(опОшибки, НомСтроки, НомКолонки, СтрОшибки)
	
	СтрОшибки = СтрОшибки + "
	|Строка #" + Строка(НомСтроки - 1) + ": " + опОшибки;
	
	ИмяЯчейки = "R" + Формат(НомСтроки, "ЧГ=") + "C" + Формат(НомКолонки, "ЧГ=");
	ПодсвеченныеЯчейки.Добавить(ИмяЯчейки);
	
	ТабличныйДокумент.Область(ИмяЯчейки).ЦветФона = WebЦвета.ЛососьСветлый;
	
КонецПроцедуры
&НаКлиенте
Процедура ЗагрузитьТаблицу(стрОшибки = "")

//							╭∩╮（︶︿︶）╭∩╮

	НомПослКол 		= 2; // тут типа код товара или по чему там ищут и от него пляшут остальные все поля
	ТипЧисло		= Тип("Число");
	ТипБулево		= Тип("Булево");
	ТипДата			= Тип("Дата");
	КоличествоСтрок = ТабличныйДокумент.ВысотаТаблицы;
	ЗагрСтроки		= Новый Массив;
	
	Кеш = Новый Соответствие; 	// (Путь - ключ) - значение
								// если тип не заполнен значит это относится к загружаемомому объекту
								
	// Подготовим групповые объекты в рамках которых будем считывать порции
	
#Область Что_будет_на_выходе

	// Преобразует линейную структуру в MongoDB

	// ТекОбъект (масс реквизитов)
	//  - рекв 1 
	//  - рекв 2
	//	- сущности (соотв)
	//		- сущность 1 (массив структур)
	//			- рекв сущ 1
	//			- рекв сущ 2
	//			- рекв сущ 3
	//		- сущность 2 (массив структур)
	//			- рекв сущ 1
	//			- рекв сущ 2
	//	- ТабличныеЧасти (структ)
	//		- табл 1 (массив структур)
	//			- Рекв 1
	//			- Рекв 2
	//			- Рекв 3
	//		- табл 2 (массив структур)
	//			- Рекв 1
	
#КонецОбласти
	
#Область Преобразование_текста_в_типы_1с
	
	Для НомСтр = НомПослКол По КоличествоСтрок Цикл 
		
		// Получим ключ
		
		СтрокаИД = ПолучитьТекстПоля(НомСтр, НомПослКол);
		Если ПустаяСтрока(СтрокаИД) Тогда
			ВОшибку("Не заполнен реквизит поиска объекта. Выгрузка данных по этой строке не произведена", НомСтр, НомПослКол, СтрОшибки);
			Продолжить; КонецЕсли;
		
		ОбработкаПрерыванияПользователя();
		Если КоличествоСтрок > НомПослКол Тогда
			Состояние("Идентификация ссылок", (НомСтр - НомПослКол) / (КоличествоСтрок - НомПослКол) * 100, СтрокаИД + " №" + НомСтр); КонецЕсли;
		
		// Используем структуру, возможно мы ее уже грузили и это повторяяющийся объект (например когда строки или сущности)
		
		текОбъект = Неопределено;
		Ид = ПолучитьИДОбъектИзМассиваПоКлючу(ЗагрСтроки, СтрокаИД);
		Если Ид <> Неопределено Тогда текОбъект = ЗагрСтроки[Ид] КонецЕсли;
			
		// Вытащим ссылку
			
		Если текОбъект = Неопределено Тогда 
			
			текОбъект	= Новый Структура("IDОбъекта, ТабличныеЧасти, Сущности", СтрокаИД, Новый Структура, Новый Соответствие);
			Ссылка 		= СсылкаИзКеша("Справочник." + Объект.ОбъектОбработки, Объект.РеквизитИдентификатор, СтрокаИД, Кеш);
			
			Если Ссылка = Неопределено Тогда
				Если Не Объект.СоздаватьНовый Тогда Продолжить КонецЕсли; // Если новые не делаем то пропустим
				текОбъект.Вставить("ЭтоНовый", Истина); 
			Иначе
				текОбъект.Вставить("Ссылка", 	Ссылка);
				текОбъект.Вставить("ЭтоНовый", 	Ложь);  КонецЕсли; КонецЕсли;
		
		// Зададим накапливыемые переменные
		
		ОтрабСущности 	= Новый Соответствие; 	// будем определять новая строка это или текущая
		ОтрабТаблицы 	= Новый Структура;		// тоже самое
		
		// Переберм реквизиты и повытаскиваем ссылки
		
		Ид = НомПослКол;
		Для Каждого Строка ИЗ Реквизиты Цикл
			
			Если Строка.Выбор Тогда Ид = Ид + 1; текЗначение = Неопределено;
			
				СтрокаРеквизит = ПолучитьТекстПоля(НомСтр, Ид);
				Если ПустаяСтрока(СтрокаРеквизит) Тогда Продолжить КонецЕсли;
				                        											// Ссылка
				Если Не ПустаяСтрока(Строка.Путь) Тогда
					
					текСсылка = СсылкаИзКеша(Строка.Путь, Строка.РеквизитПоиска, СтрокаРеквизит, Кеш);
					Если текСсылка = Неопределено Тогда
						ВОшибку("Не найден объект (" + Строка.Путь + ") по " + Строка.РеквизитПоиска + " = " + СтрокаРеквизит, НомСтр, Ид, СтрОшибки);
						Продолжить; КонецЕсли;
					
					текЗначение = текСсылка;
				ИначеЕсли Строка.ТипРеквизита.СодержитТип(ТипЧисло) Тогда			// Число
					текЗначение = ПолучитьЧисло(СтрокаРеквизит);
				ИначеЕсли Строка.ТипРеквизита.СодержитТип(ТипБулево) Тогда			// Булево
					текЗначение = Булево(ПолучитьЧисло(СтрокаРеквизит));
				ИначеЕсли Строка.ТипРеквизита.СодержитТип(ТипДата) Тогда			// Дата
					ВызватьИсключение "Даты обработка не умеет загружать - обратитесь великому скраму чтобы исправить это недорозумение";
				Иначе
					текЗначение = СтрокаРеквизит; КонецЕсли; 
				
				// Поместим в нужные нам объекты далее по дереву сущностей и табличных частей
				
				Если текЗначение <> Неопределено Тогда
					
					Если ЭтоСущность(Строка.Имя) Тогда
						
						ИмяСущности 		= Сред(Строка.Имя, 2, СтрНайти(Строка.Имя, "]") - 2);
						ИмяРеквСущности 	= Сред(Строка.Имя, СтрНайти(Строка.Имя, "]") + 1);
						
						текСтрокаСущности = ОтрабСущности[ИмяСущности];
						Если текСтрокаСущности = Неопределено Тогда текСтрокаСущности = Новый Структура КонецЕсли;
							
						текСтрокаСущности.Вставить(ИмяРеквСущности, текЗначение);
						ОтрабСущности.Вставить(ИмяСущности, текСтрокаСущности);
						
					ИначеЕсли ЭтоТаблица(Строка.Имя) Тогда
						
						ИмяТаблЧасти 	= Лев(Строка.Имя, СтрНайти(Строка.Имя, ".") - 1);
						ИмяРеквТабл 	= Сред(Строка.Имя, СтрНайти(Строка.Имя, ".") + 1);
						
						текСтрокаТабл = ?(ОтрабТаблицы.Свойство(ИмяТаблЧасти), ОтрабТаблицы[ИмяТаблЧасти], Новый Структура);
							
						текСтрокаТабл.Вставить(ИмяРеквТабл, текЗначение);
						ОтрабТаблицы.Вставить(ИмяТаблЧасти, текСтрокаТабл);
						
					Иначе
						текОбъект.Вставить(Строка.Имя, текЗначение); КонецЕсли; КонецЕсли; КонецЕсли; КонецЦикла; 
			
		// Вставим строки сущностей
		
		Для Каждого текСущность Из ОтрабСущности Цикл
			
			МассСущностей = текОбъект.Сущности[текСущность.Ключ];
			Если МассСущностей = Неопределено Тогда МассСущностей = Новый Массив КонецЕсли;
			
			МассСущностей.Добавить(текСущность.Значение);
			текОбъект.Сущности.Вставить(текСущность.Ключ, МассСущностей); КонецЦикла;
		
		// Вставим строки табли
		
		Для Каждого текТабл Из ОтрабТаблицы Цикл
			
			Масстабл = ?(текОбъект.ТабличныеЧасти.Свойство(текТабл.Ключ), текОбъект.ТабличныеЧасти[текТабл.Ключ], Новый Массив);
			
			Масстабл.Добавить(текТабл.Значение);
			текОбъект.ТабличныеЧасти.Вставить(текТабл.Ключ, Масстабл); КонецЦикла;
		
		// Добавим в общий массив объектов
		
		ДобавитьОбъектВМассивПоКлючу(ЗагрСтроки, СтрокаИД, текОбъект); КонецЦикла;
	
#КонецОбласти

	// Теперь разобъем массив на разные мсассивы разных объектов для загрузки

	ПоказатьОповещениеПользователя("Загрузка на сервере (" + ЗагрСтроки.Количество() + ")",,"Объекты получены и сейчас загружаются на сервере");

	// Отправим все добро на сервер, пусть сам мучается
	
	КолЗагруженных = 0;
	Если ЗагрузитьНаСервере(ЗагрСтроки, КолЗагруженных) Тогда
		ПоказатьОповещениеПользователя("Загрузка завершена",,"Изменено(создано) " + КолЗагруженных + " разных объектов"); КонецЕсли;
	
КонецПроцедуры
&НаСервере
Процедура ЗадатьОбластьТабличногоДокумента()
	
	ТабличныйДокумент.Очистить();
	Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Перевод");
	ОбластьКолонкаНомер = Макет.ПолучитьОбласть("Заголовок|КолонкаНомер");
	ТабличныйДокумент.Присоединить(ОбластьКолонкаНомер);
	
	ОбластьИмя = Макет.ПолучитьОбласть("Заголовок|КолонкаИмя");
	ОбластьИмя.Параметры.ИмяРеквизита = Объект.РеквизитИдентификатор;
	ТабличныйДокумент.Присоединить(ОбластьИмя); 

	//Если ЗагрузитьПошлины Тогда
	//	ОбластьИмя.Параметры.ИмяРеквизита = "Пошлина";
	//	ТабличныйДокумент.Присоединить(ОбластьИмя); КонецЕсли;
	
	Для Каждого Строка Из Реквизиты Цикл Если Строка.Выбор Тогда
		ОбластьИмя.Параметры.ИмяРеквизита = Строка.Представление;
		ТабличныйДокумент.Присоединить(ОбластьИмя); КонецЕсли;
	КонецЦикла;
	
	Область = Макет.ПолучитьОбласть("Строки");
	//Для Сч = 1 По КоличествоСтрок Цикл
	//	Область.Параметры.Номер = Сч;
	ТабличныйДокумент.Вывести(Область);
	//КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура РеквизитыВыборПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Реквизиты.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		ТекущиеДанные.НомерКолонки = 0;
		ПеренумероватьКолонки();
	КонецЕсли;
	ЗадатьОбластьТабличногоДокумента();

КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриИзменении(Элемент)
	ТабличныйДокументПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ТабличныйДокументПриИзмененииНаСервере()
	
	КоличествоСтрок = ТабличныйДокумент.ВысотаТаблицы;
	
	Для Сч = 2 По КоличествоСтрок Цикл ТабличныйДокумент.Область("R"+Строка(Сч)+"C1").Текст = Строка(Сч-1); КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура Очистить(Команда)
	ЗадатьОбластьТабличногоДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область)
	ТабличныйДокументПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	//Для Каждого Строка ИЗ ПараметрыПеретаскивания.Значение Цикл
	Строка = ПараметрыПеретаскивания.Значение;
	
	// перенумерация если перетаскивают выбранную колонку
	Если Строка.Выбор Тогда	ПеренумероватьКолонки(); КонецЕсли;
	//КонецЦикла;
	
	ЗадатьОбластьТабличногоДокумента();	
			
КонецПроцедуры

&НаКлиенте
Процедура ПеренумероватьКолонки()
	
	Строки = Реквизиты.НайтиСтроки(Новый Структура("Выбор", Истина));
	Ном = 0;
	Для Каждого Строка Из Строки Цикл Ном = Ном + 1; Строка.НомерКолонки = Ном;	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура РеквизитыРеквизитПоискаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанные = Элементы.Реквизиты.ТекущиеДанные;
	Элемент.СписокВыбора.Очистить();
	Мас = ПолучитьМассивРеквизитовОбъектаПоТипу(ТекДанные.ТипРеквизита);
	Элемент.СписокВыбора.ЗагрузитьЗначения(Мас);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивРеквизитовОбъектаПоТипу(ТипРеквизита_Описание)
	
	М=Новый Массив;
	
	//получим тип из описания типов
	ТипРеквизита = ТипРеквизита_Описание.Типы()[0];
	
	Если ТипРеквизита=Тип("ОписаниеТипов") Тогда
		Возврат М;
	КонецЕсли;	
	
	Если обм_Среда.ЭтоСсылочныйТип(ТипРеквизита,Ложь) тогда
		Мета = Метаданные.НайтиПоТипу(ТипРеквизита);
		Рекв=Мета.СтандартныеРеквизиты;
		Для Каждого ТекРеквизит из рекв Цикл
			ТекТип=ТекРеквизит.Тип.Типы()[0];
			Если ТекТип = Тип("Строка") или ТекТип=Тип("Число") Тогда
				М.Добавить(ТекРеквизит.Имя);
			КонецЕсли;	
		КонецЦикла;	
		Рекв=Мета.Реквизиты;
		Для Каждого ТекРеквизит из рекв Цикл
			ТекТип=ТекРеквизит.Тип.Типы()[0];
			Если ТекТип = Тип("Строка") или ТекТип=Тип("Число") Тогда
				М.Добавить(ТекРеквизит.Имя);
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
	Возврат М;
	
КонецФункции	

&НаКлиенте
Процедура РеквизитыПриАктивизацииСтроки(Элемент)
	
	// Установим возможные типы для выбора
	
	текДанные = Элемент.ТекущиеДанные;
	
	Если текДанные <> Неопределено Тогда
		
		текЭлемент = Элементы.РеквизитыТипРеквизита;
		
		Если текДанные.ЭтоМногоТип Тогда
			текЭлемент.ТолькоПросмотр = Ложь;
			текЭлемент.ДоступныеТипы = текДанные.ВсеТипыРеквизита;
		Иначе
			текЭлемент.ТолькоПросмотр = Истина; КонецЕсли; КонецЕсли;
	
КонецПроцедуры


#Область Типы_цен

&НаСервере
Функция ПолучитьТипыЦенДляОтметок()
	
	Запрос = Новый Запрос("ВЫБРАТЬ Табл.ТипЦен ПОМЕСТИТЬ тутТипыЦен ИЗ &ТипыЦен КАК Табл;
	
	|ВЫБРАТЬ 	Ссылка ТипЦен, ВЫБОР КОГДА Тут.ТипЦен ЕСТЬ NULL ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ Пометка
	|ИЗ 		Справочник.ТипыЦен Там
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ	тутТипыЦен тут
	|ПО					Тут.ТипЦен = Там.Ссылка
	|
	|ГДЕ НЕ ПометкаУдаления
	|");
	
	Запрос.УстановитьПараметр("ТипыЦен", Объект.ТипыЦен.Выгрузить());
	
	Возврат КонвертацияТипов.ПолучитьСписокЗначенийИзВыборки(Запрос.Выполнить().Выбрать(), "ТипЦен",,"Пометка");
	
КонецФункции
Процедура ОбновитьПредставлениеТиповЦен()
	
	стр = "";
	Для КАждого Строка Из Объект.ТипыЦен Цикл стр = стр + ?(стр = "", "","; ") + Строка.ТипЦен КонецЦикла;
	
	стрТипыЦен = стр;
	
КонецПроцедуры
&НаКлиенте
Процедура ПользовательОтметилТипыЦен(Список, ДопПараметры) Экспорт
	
	Если Список <> Неопределено Тогда
		
		Объект.ТипыЦен.Очистить();
		Для Каждого Элемент Из Список Цикл Если Элемент.Пометка Тогда Объект.ТипыЦен.Добавить().ТипЦен = Элемент.Значение КонецЕсли; КонецЦикла;
		
		ОбновитьПредставлениеТиповЦен();
		ОбъектОбработкиПриИзмененииНаСервере(); КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура стрТипыЦенНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПолучитьТипыЦенДляОтметок().ПоказатьОтметкуЭлементов(Новый ОписаниеОповещения("ПользовательОтметилТипыЦен", ЭтаФорма), "Выберите типы цен") ;
	
КонецПроцедуры

#КонецОбласти

#Область Варианты

&НаСервере
Функция ИмяНастроекВариантовОбъекта() Возврат "+ВариантыДляУниверсальнойЗагрузкиСправочников" КонецФункции
&НаСервере
Функция ИмяНастроекВариантовНастроек() Возврат "ВыбранныеПоля" КонецФункции


&НаСервере
Процедура СохранитьНастрокуВарианта(Название)
	
	Настройки = ХранилищеНастроекДанныхФорм.Выбрать(Новый Структура("КлючОбъекта, КлючНастроек", ИмяНастроекВариантовОбъекта(), ИмяНастроекВариантовНастроек())).Настройки;
	Если Настройки = Неопределено Тогда Настройки = Новый Соответствие КонецЕсли;
	
	Настройки.Вставить(Название, КонвертацияТипов.ПолучитьМассивИзНайденныхЗначенийСтрокТаблицыЗначений(Реквизиты, Новый Структура("Выбор", Истина), "Имя"));
	ХранилищеНастроекДанныхФорм.Сохранить(ИмяНастроекВариантовОбъекта(), ИмяНастроекВариантовНастроек(), Настройки);
	
КонецПроцедуры
&НаКлиенте
Процедура ВведеноНазваниеВарианта(Строка, ДопПараметры) Экспорт
	
	Если Строка <> Неопределено Тогда СохранитьНастрокуВарианта(Строка) КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура СохранитьВариант(Команда)
	
	ПоказатьВводСтроки(Новый ОписаниеОповещения("ВведеноНазваниеВарианта", ЭтаФорма),,"Название варианта");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранВариант(ВыбЭлемент, ДопПараметры) Экспорт
	
	Если ВыбЭлемент <> Неопределено Тогда
		
		
		
		
	КонецЕсли;
	
КонецПроцедуры
&НаСервере
Функция ПолучитьСписокВариантов()
	
	Настройки 	= ХранилищеНастроекДанныхФорм.Выбрать(Новый Структура("КлючОбъекта, КлючНастроек", ИмяНастроекВариантовОбъекта(), ИмяНастроекВариантовНастроек())).Настройки;
	Список 		= Новый СписокЗначений;
	
	Если Настройки <> Неопределено Тогда Для Каждого Элемент ИЗ Настройки Цикл Список.Добавить(Элемент.Ключ) КонецЦикла; КонецЕсли;
		
	Возврат Список;
		
КонецФункции
&НаКлиенте
Процедура ВыбратьВариант(Команда)
	
	ПоказатьВыборИзМеню(Новый ОписаниеОповещения("ВыбранВариант", ЭтаФорма), ПолучитьСписокВариантов(), Команда);
	
КонецПроцедуры

#КонецОбласти