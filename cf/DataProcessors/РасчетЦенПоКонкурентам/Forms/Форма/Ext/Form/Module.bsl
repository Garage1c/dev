&НаКлиенте
Перем ИмяВременногоФайла Экспорт;
&НаКлиенте
Перем СтруктураКолонокТовары Экспорт;

//	ДОПОЛНИТЕЛЬНО

&НаСервере
Процедура ВидимостьДаты(Видимость)
	
	Для Каждого Элемент Из Элементы.Цены.ПодчиненныеЭлементы Цикл
		Если Найти(Элемент.Имя, "БазовыйТипДата") Тогда
			Элемент.Видимость = Видимость;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
&НаКлиенте
Процедура ПоказатьДаты(Команда)
	
	ВидимостьДаты = НЕ Элементы.ПоказатьДаты.Пометка;
	Элементы.ПоказатьДаты.Пометка = ВидимостьДаты;
 	
	ВидимостьДаты(ВидимостьДаты);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьВсе(Команда)
	
	Строки = Элементы.Цены.ВыделенныеСтроки;
	
	Если Строки.Количество()>1 Тогда
		Для Каждого Ид Из Строки Цикл
			Строка = Цены.НайтиПоИдентификатору(Ид);
			Строка.Пометка = Истина;
		КонецЦикла;
	Иначе
		Для Каждого Строка Из Цены Цикл
			Строка.Пометка = Истина;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура СнятьВсе(Команда)
	Строки = Элементы.Цены.ВыделенныеСтроки;
	
	Если Строки.Количество()>1 Тогда
		Для Каждого Ид Из Строки Цикл
			Строка = Цены.НайтиПоИдентификатору(Ид);
			Строка.Пометка = Ложь;
		КонецЦикла;
	Иначе
		Для Каждого Строка Из Цены Цикл
			Строка.Пометка = Ложь;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// УСЛОВНОЕ ОФОРМЛЕНИЕ

&НаСервере
Процедура ЗадатьУсловноеОформление()
	ЭтаФорма.УсловноеОформление.Элементы.Очистить();
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЦеныТипценСравненияНоваяЦена");
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Цены.ТипценСравненияНоваяЦена");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбора.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Цены.ТипценСравненияЦена");
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СветлоЖелтый);
КонецПроцедуры

//	МЕНЮ

&НаСервере
Процедура ЗаполнитьМеню()
	
	ЗаполнитьПодменюКонкурентами("ПодменюПроцентОтЦены"		, "КомандаОтЦены"		, "РасчитатьПроцентОтЦены");
	ЗаполнитьПодменюКонкурентами("ПодменюПроцентОтНаценки"	, "КомандаОтНаценки"	, "РасчитатьПроцентОтНаценки");
	ЗаполнитьПодменюКонкурентами("ПодменюЧислоОтЦены"		, "КомандаЧислоОтЦены"	, "РасчитатьЧислоОтЦены");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодменюКонкурентами(ИмяПодменю, ПрефиксКоманды, Действие, ЧислоНеДинамическихПунктов = 0)
	
	// удаляем все ранее созданные кнопки
	Пока Элементы[ИмяПодменю].ПодчиненныеЭлементы.Количество() > ЧислоНеДинамическихПунктов Цикл
		Элементы.Удалить(Элементы[ИмяПодменю].ПодчиненныеЭлементы[Элементы[ИмяПодменю].ПодчиненныеЭлементы.Количество()-1]);
	КонецЦикла;
		
	// команды удалять не будем, никому не мешают
	// добавим новые команды, если их еще нет
	
	// минимальная, средняя
	массивКоманд = Новый Массив;
	массивКоманд.Добавить(Новый Структура("Ключ, Значение", "отМинимума", "от минимума"));
	массивКоманд.Добавить(Новый Структура("Ключ, Значение", "отСредней", "от средней"));
	Для Каждого Строка Из массивКоманд Цикл
		ИмяКоманды = ПрефиксКоманды + Строка.Ключ;
			
		Команда = Команды.Найти(ИмяКоманды);
		НоваяКоманда = ?(Команда = Неопределено, Команды.Добавить(ИмяКоманды), Команда);
		НоваяКоманда.Действие = Действие;
			
		ПунктМеню = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), Элементы[ИмяПодменю]);
		ПунктМеню.Заголовок 	= Строка.Значение;
		ПунктМеню.ИмяКоманды 	= ИмяКоманды;
	КонецЦикла;
	
	СоответствиеИмен = ПолучитьСоответствияИменКолонок();
	
	Для Каждого Строка Из СоответствиеИмен Цикл
		ИмяКоманды = ПрефиксКоманды + Строка.Ключ;
			
		Команда = Команды.Найти(ИмяКоманды);
		НоваяКоманда = ?(Команда = Неопределено, Команды.Добавить(ИмяКоманды), Команда);
		НоваяКоманда.Действие = Действие;
			
		ПунктМеню = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), Элементы[ИмяПодменю]);
		ПунктМеню.Заголовок 	= Строка.Значение;
		ПунктМеню.ИмяКоманды 	= ИмяКоманды;
	КонецЦикла;
КонецПроцедуры

//	СЛУЖЕБНЫЕ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТипЦенСебестоимость = Справочники.ТипыЦен.НайтиПоКоду("000000028"); // Себестоимость(УЕ) //Константы.Себестоимость.Получить();
	Объект.НаДату = КонецДня(ТекущаяДата());	
	
	ЗадатьУсловноеОформление();
	
КонецПроцедуры
&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)	
   // Если Цены.Количество() Тогда
   // 	Ответ = Вопрос("Данные были изменены. Сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена, 0);
   // 	Если Ответ = КодВозвратаДиалога.Отмена Тогда
   // 		Отказ = Истина;
   // 	ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
   // 		
   // 		СохранитьВременноНовыеЦены(ИмяВременногоФайла);
   // 		
   // 	КонецЕсли;
   //КонецЕсли;
КонецПроцедуры

// СОХРАНИТЬ

&НаСервере
Процедура СохранитьВременноНовыеЦены(Имя)
	
	//Рез = ЗначениеВФайл(КаталогВременныхФайлов() + Имя, Новый Структура("БазовыеКолонки, Цены", БазовыеКолонки.ВыгрузитьЗначения(), Цены.Выгрузить()));	

КонецПроцедуры           
&НаСервере
Процедура ПолучитьВременноНовыеЦены(Имя)
	
	//ИмяФайла = КаталогВременныхФайлов() + Имя;
	//
	//ВремФайл = Новый Файл(ИмяФайла);
	//
	//Если ВремФайл.Существует() Тогда
	//	
	//	Данные = ЗначениеИзФайла(ИмяФайла);
	//	
	//	БазовыеКолонки.ЗагрузитьЗначения(Данные.БазовыеКолонки);
	//	ПриИзмененииСпискаБазовыхКолонок(Ложь);
	//	
	//	Цены.Загрузить(Данные.Цены); 
	//КонецЕсли;		
	
КонецПроцедуры

// ЗАПОЛНИТЬ

&НаКлиенте
Процедура ЗаполнитьСебестоимость(Команда)
	АдресТоваровВХранилище = ПоместитьТоварыВХранилище();
	ПолучитьТоварыИзХранилища(АдресТоваровВХранилище);
КонецПроцедуры

//	БАЗОВЫЕ КОЛОНКИ

 &НаСервере
Функция ПолучитьСоответствияИменКолонок()
	
	Соответствия	= Новый Соответствие;
	
	Для Каждого Элемент Из СписокКонкурентов Цикл
		Соответствия.Вставить(СтрЗаменить(Строка(Элемент.Значение.УникальныйИдентификатор()),"-",""), Элемент.Значение);
	КонецЦикла;
	
	Возврат Соответствия;
	
КонецФункции
&НаСервере
Функция ПолучитьСоответствияКонкурентов() Экспорт
	
	Соответствия	= Новый Соответствие;
	
	Для Каждого Элемент Из СписокКонкурентов Цикл
		Соответствия.Вставить(Элемент.Значение, СтрЗаменить(Строка(Элемент.Значение.УникальныйИдентификатор()),"-",""));
	КонецЦикла;
	
	Возврат Соответствия;
	
КонецФункции

&НаСервере
Функция ДобавитьПолеФормы(Имя, Группа, Заголовок = Неопределено, ОбработчикПриИзменении = "", НачалоВыбораИзСписка = "", ИзменитьЦвет = Ложь, ОтображатьВШапке = Истина, ЦветФона = Неопределено, ЦветФонаЗаголовка = Неопределено, ТолькоПросмотр = Ложь)
	                      // уникальное имя     тип      родитель       
	НовоеПоле = Элементы.Добавить(Имя, Тип("ПолеФормы"), Группа);	
	НовоеПоле.ПутьКДанным = "Цены." + Имя;
	НовоеПоле.Заголовок = ?(Заголовок <> Неопределено, Заголовок, Имя);
	НовоеПоле.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ОтображатьВШапке = ОтображатьВШапке;
	НовоеПоле.ТолькоПросмотр = ТолькоПросмотр;
	Если ИзменитьЦвет Тогда
		НовоеПоле.ЦветТекста = WebЦвета.Серый;
	КонецЕсли;
	
	Если ЦветФонаЗаголовка <> Неопределено Тогда
		НовоеПоле.ЦветФонаЗаголовка = ЦветФонаЗаголовка;
	КонецЕсли;
	
	Если ЦветФона <> Неопределено Тогда
		НовоеПоле.ЦветФона = ЦветФона;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ОбработчикПриИзменении) Тогда
		НовоеПоле.УстановитьДействие("ПриИзменении", ОбработчикПриИзменении);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НачалоВыбораИзСписка) Тогда
		НовоеПоле.УстановитьДействие("НачалоВыбораИзСписка", НачалоВыбораИзСписка);
	КонецЕсли;
	
	Возврат НовоеПоле;
	
КонецФункции

&НаСервере
Функция ДобавитьГруппуФормы(Имя, Заголовок = Неопределено, Родитель = Неопределено, Группировка = Неопределено, ОтображатьВШапке = Истина, ОбработчикПриИзменении = "", ОбработчикНачалоВыбора = "", ЦветФона = Неопределено, ЦветФонаЗаголовка = Неопределено)
	
	// уникально имя      тип         родитель(таблица формы) 
	НоваяГруппа = Элементы.Добавить(Имя, Тип("ГруппаФормы"), Родитель);	
	НоваяГруппа.Заголовок = ?(ЗначениеЗаполнено(Заголовок), Заголовок, Имя);
	НоваяГруппа.Вид = ВидГруппыФормы.ГруппаКолонок;
	НоваяГруппа.ОтображатьВШапке = ОтображатьВШапке;
	НоваяГруппа.Группировка = Группировка;
	
	Если ЦветФонаЗаголовка <> Неопределено Тогда
		НоваяГруппа.ЦветФонаЗаголовка = ЦветФонаЗаголовка;
	КонецЕсли;
	
	Если ЦветФона <> Неопределено Тогда
		НоваяГруппа.ЦветФона = ЦветФона;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ОбработчикПриИзменении) Тогда
		НоваяГруппа.УстановитьДействие("ПриИзменении", ОбработчикПриИзменении);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбработчикНачалоВыбора) Тогда
		НоваяГруппа.УстановитьДействие("НачалоВыбора", ОбработчикНачалоВыбора);
	КонецЕсли;
	
	Возврат НоваяГруппа;
	
КонецФункции

// СРАВНИТЬ С ЦЕНАМИ КОНКУРЕНТОВ

&НаКлиенте
Процедура СравнитьСЦенамиКонкурентов(Команда)
	
	СоответствиеИмен = ПолучитьСоответствияИменКолонок();

	ИмяКолонки = СтрЗаменить(Элементы.Цены.ТекущийЭлемент.Родитель.Имя, "Группа", "");
	ОткрытьФорму("Обработка.РасчетЦенПоСебестоимости.Форма.ЦеныКонкурентов", Новый Структура("БазовыйТипЦен", СоответствиеИмен[ИмяКолонки]), ЭтаФорма);
	
КонецПроцедуры

// РАСЧИТАТЬ ПРОЦЕНТ ОТ

&НаКлиенте
Процедура РасчитатьПроцентОтЦены(Команда)
	конкурент = СтрЗаменить(Команда.Имя, "КомандаОтЦены", "");
	Если конкурент = "отМинимума" Тогда
		конкурент = "МинКонкурентЦена";
	ИначеЕсли конкурент = "отСредней" Тогда
		конкурент = "СредняяКонкурентЦена";
	Иначе
		конкурент = "конкурентЦена" + конкурент;
	КонецЕсли;
	колонки = ПолучитьСоответствияИменКолонок();
	
	процент = 0;
	ВвестиЧисло(процент, "Процент от цены конкурента", 7, 2);
	Для Каждого Строка Из Цены Цикл
		Если Строка.Пометка И НЕ Строка[конкурент] = 0 Тогда
			Строка.ТипценСравненияНоваяЦена = Строка[конкурент] * процент;
			
			ПересчитатьНаценкиКонкурентов(Строка, колонки);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // РасчитатьПроцентОтЦены()

&НаКлиенте
Процедура РасчитатьПроцентОтНаценки(Команда)
	конкурент = СтрЗаменить(Команда.Имя, "КомандаОтНаценки", "");
	Если конкурент = "отМинимума" Тогда
		конкурент 		= "МинКонкурентНаценка";
		конкурентЦена 	= "МинКонкурентЦена";
	ИначеЕсли конкурент = "отСредней" Тогда
		конкурент 		= "СредняяКонкурентНаценка";
		конкурентЦена 	= "СредняяКонкурентЦена";
	Иначе
		конкурент 		= "конкурентСравнение" + конкурент;
		конкурентЦена 	= "конкурентЦена" + конкурент;
	КонецЕсли;
	
	колонки = ПолучитьСоответствияИменКолонок();
	
	процент = 0;
	ВвестиЧисло(процент, "Уменьшение/Увеличение процента наценки. Если с минусом, то уменьшение", 5, 2);
	Для Каждого Строка Из Цены Цикл
		Если Строка.Пометка И НЕ Строка[конкурентЦена] = 0 Тогда
			//Строка["конкурентСравнение" + конкурент] = Строка["конкурентСравнение" + конкурент] + процент;
			Строка.ТипценСравненияНоваяЦена = Строка[конкурентЦена] * (Строка[конкурент] + процент);
			
			ПересчитатьНаценкиКонкурентов(Строка, колонки);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // РасчитатьПроцентОтНаценки()

&НаКлиенте
Процедура РасчитатьЧислоОтЦены(Команда)
	конкурент = СтрЗаменить(Команда.Имя, "КомандаЧислоОтЦены", "");
	Если конкурент = "отМинимума" Тогда
		конкурент = "МинКонкурентЦена";
	ИначеЕсли конкурент = "отСредней" Тогда
		конкурент = "СредняяКонкурентЦена";
	Иначе
		конкурент = "конкурентЦена" + конкурент;
	КонецЕсли;
	
	колонки = ПолучитьСоответствияИменКолонок();
	
	Разница = 0;
	ВвестиЧисло(Разница, "Уменьшение/Увеличение цены от цены конкурента. Если с минусом, то уменьшение", 15, 2);
	Для Каждого Строка Из Цены Цикл
		Если Строка.Пометка И НЕ Строка[конкурент] = 0 Тогда
			Строка.ТипценСравненияНоваяЦена = Строка[конкурент] + Разница;
			
			ПересчитатьНаценкиКонкурентов(Строка, колонки);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // РасчитатьЧислоОтЦены()

&НаКлиенте
Процедура ПересчитатьНаценкиКонкурентов(Строка, колонки)
	// другие пересчеты
	Строка.ТипценСравненияНаценка = Строка.ТипценСравненияНоваяЦена * Строка.ТипценСравненияКурс / (Строка.ЦенаЗакупочная * Строка.ТипценСравненияКратность);
	агрегаторы = Новый Структура("МинКонкурентНаценка, СредняяКонкурентНаценка, Количество", 1000000, 0, 0);
	
	Для каждого колонка Из колонки Цикл
		Если Строка["конкурентЦена" + колонка.Ключ] = 0 Тогда
			Продолжить;
		КонецЕсли;
		Строка["конкурентСравнение" + колонка.Ключ] = Строка.ТипценСравненияНоваяЦена / Строка["конкурентЦена" + колонка.Ключ];
		
		Если Строка["конкурентСравнение" + колонка.Ключ] < агрегаторы.МинКонкурентНаценка Тогда
			агрегаторы.МинКонкурентНаценка 	= Строка["конкурентСравнение" + колонка.Ключ];
		КонецЕсли;
					
		агрегаторы.СредняяКонкурентНаценка 	= агрегаторы.СредняяКонкурентНаценка + Строка["конкурентСравнение" + колонка.Ключ];
		агрегаторы.Количество 				= агрегаторы.Количество + 1;
	КонецЦикла;
	
	агрегаторы.СредняяКонкурентНаценка 	= агрегаторы.СредняяКонкурентНаценка / агрегаторы.Количество;
	
	Строка.МинКонкурентНаценка = агрегаторы.МинКонкурентНаценка;
	Строка.СредняяКонкурентНаценка = агрегаторы.СредняяКонкурентНаценка;
КонецПроцедуры // ПересчитатьНаценкиКонкурентов()

//	УСТАНОВКА ЦЕН

&НаКлиенте
Процедура УстановитьЦену(Команда)
	
	// определим тип цен, для которого выбрана установка цены
	ИмяКолонки = СтрЗаменить(Команда.Имя, "КомандаУстановкаЦен", "");
	
	СоответствиеИмен = ПолучитьСоответствияИменКолонок();
    ТипЦены = СоответствиеИмен[ИмяКолонки];
	
	Форма = ПолучитьФорму("Документ.УстановкаЦенНоменклатуры.ФормаОбъекта");
	
	СписокТиповЦен = Новый СписокЗначений;
	СписокТиповЦен.Добавить(ТипЦены);
	
	Форма.СписокТиповЦен = СписокТиповЦен;
	    
    Таблица = Форма.Объект.Товары;
	
	КолонкаСЦеной = "БазовыйТипНоваяЦена" + ИмяКолонки;
	
	Для Каждого Строка Из Цены Цикл
		
		Если Строка[КолонкаСЦеной] <> Строка["БазовыйТип" + ИмяКолонки] И Строка.Пометка Тогда
		
	    	НоваяСтрока = Таблица.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	    		
	    	НоваяСтрока.ТипЦен		= ТипЦены;
	    	НоваяСтрока.Цена	 	= Строка[КолонкаСЦеной];
			НоваяСтрока.ДатаНачала	= Объект.НаДату;
		КонецЕсли;
		
	КонецЦикла;
	
	Форма.СформироватьТаблицуТоваров(Истина);
	
    Форма.Открыть();
	
КонецПроцедуры

// ПОДБОР

&НаСервере
Функция ПоместитьТоварыВХранилище() 
		
	Возврат ПоместитьВоВременноеХранилище(
					Цены.Выгрузить().Скопировать(,"Номенклатура"), 
					УникальныйИдентификатор);
					
КонецФункции

&НаКлиенте
Процедура ПодборВыполнить(Команда)
	ОткрытьПодбор();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодбор()
	
	АдресТоваровВХранилище = ПоместитьТоварыВХранилище();
	ПараметрыПодбора = Новый Структура("АдресТоваровВХранилище", АдресТоваровВХранилище);
	
	СтруктураКолонокТовары = ФункцииФормДокументов.ПолучитьСтруктуруКолонокТовары(Элементы.Цены, Истина, , , , , Истина);

	ПараметрыПодбора.Вставить("СтруктураКолонокТовары", СтруктураКолонокТовары);
	//ПараметрыПодбора.Вставить("ВидЗапроса", "СписокНоменклатуры");
	//ПараметрыПодбора.Вставить("ВидыЗапросов", "СписокНоменклатуры");
	ПараметрыПодбора.Вставить("ТипЦен", 		ТипЦенЗакупочный);
	
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаПодбора", ПараметрыПодбора, Элементы.Цены);
  
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтвет(Результат, Параметры) Экспорт
    Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
	ОткрытьПодбор();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение <> Неопределено Тогда		
		
		ПолучитьТоварыИзХранилища(ВыбранноеЗначение);		// получаем
		УдалитьИзВременногоХранилища(ВыбранноеЗначение); 	// заметаем следы
		
	КонецЕсли;
	
КонецПроцедуры

 &НаСервере
Процедура ПолучитьТоварыИзХранилища(АдресТоваровВХранилище)
	
	ЗаполнитьДанныеТаблицы(ПолучитьИзВременногоХранилища(АдресТоваровВХранилище).ВыгрузитьКолонку("Номенклатура"));
				
КонецПроцедуры

//	ЗАПОЛНЕНИЕ

&НаСервере
Процедура ЗаполнитьДанныеТаблицы(Товары)
	
	СоответствиеИмен = ПолучитьСоответствияКонкурентов();
	
	Цены.Очистить();
		
	Запрос = Новый Запрос("
	// Получим таблицу товаров
	|ВЫБРАТЬ Ссылка, Артикул Поместить Товары ИЗ Справочник.Номенклатура ГДЕ Ссылка В (&Товары);
	// Выберим себестоимость (конвертируем в рубли)
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	Тов.Ссылка		Номенклатура,
	|	
	|	ЕСТЬNULL(ЦенСеб.Цена*ЕСТЬNULL(ТабВал.Курс,1)*ЕСТЬNULL(ВалРуб.Кратность,1)/(ЕСТЬNULL(ТабВал.Кратность,1)*ЕСТЬNULL(ВалРуб.Курс,1)), 
	|    	ЕСТЬNULL(ЦенЗак.Цена*ЕСТЬNULL(ТабВалЗакуп.Курс,1)*ЕСТЬNULL(ВалРуб.Кратность,1)/(ЕСТЬNULL(ТабВалЗакуп.Кратность,1)*ЕСТЬNULL(ВалРуб.Курс,1)), 0)
	|	) Себестоимость
	|	 
	|ПОМЕСТИТЬ СебестоимостьТоваров
	|ИЗ
	|	Товары КАК Тов
	|ЛЕВОЕ СОЕДИНЕНИЕ 
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, ТипЦен = &ТипЦенСебестоимость 
	|		И Упаковка = Значение(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)) КАК ЦенСеб
	|	ПО Тов.Ссылка = ЦенСеб.Номенклатура
	|ЛЕВОЕ СОЕДИНЕНИЕ 
	|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата) ТабВал
	|	ПО ЦенСеб.Валюта = ТабВал.Валюта
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, ТипЦен  =&ТипЦенЗакупочная И Упаковка = Значение(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)) ЦенЗак
	|	ПО Тов.Ссылка = ЦенЗак.Номенклатура
	|ЛЕВОЕ СОЕДИНЕНИЕ 
	|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата) ТабВалЗакуп 
	|	ПО ЦенЗак.Валюта = ТабВалЗакуп.Валюта 
	|	
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта В (ВЫБРАТЬ ВалютаУправленческогоУчета ИЗ Константы)) ВалРуб
	|	ПО ИСТИНА
	|;
	|ВЫБРАТЬ
	|	Тов.Ссылка				Номенклатура,
	|	"" "" + Тов.Артикул 	Артикул,
	|	Ост.КоличествоОстаток	Количество,
	|	Себ.Себестоимость		ЦенаЗакупочная,
	|	Спр.ТипЦен,
	|	Спр.Валюта 					Валюта, // валюта типа цен базовой колонки
	|	ЕСТЬNULL(Рег.Цена,0)*(ЕСТЬNULL(Цен.Курс,1)*ЕСТЬNULL(Баз.Кратность,1))/(ЕСТЬNULL(Цен.Кратность,1)*ЕСТЬNULL(Баз.Курс,1)) Цена,  		// приводим цену из установки цен к валюте типа цен
	|	ЕСТЬNULL(Рег.Цена,0)*(ЕСТЬNULL(Цен.Курс,1)*ЕСТЬNULL(Баз.Кратность,1))/(ЕСТЬNULL(Цен.Кратность,1)*ЕСТЬNULL(Баз.Курс,1)) НоваяЦена, 	// НоваяЦена = Цена
	|	ВЫБОР КОГДА Себ.Себестоимость = 0 ТОГДА 0 ИНАЧЕ (ЕСТЬNULL(Рег.Цена,0)*(ЕСТЬNULL(Цен.Курс,1)*ЕСТЬNULL(ВалРуб.Кратность,1))/(ЕСТЬNULL(Цен.Кратность,1)*ЕСТЬNULL(ВалРуб.Курс,1))) / Себ.Себестоимость КОНЕЦ Наценка, // приводим цену из установки цен к валюте руб, чтобы поделить на себестоимость
	|	Рег.Период,
	|	Рег.Валюта,							// валюта установки цен базовой колонки
	|	ЕСТЬNULL(Баз.Курс,1)		КурсБаза,
	|	ЕСТЬNULL(Баз.Кратность,1)	КратностьБаза,
	// ПОЛЯ ЦЕН КОНКУРЕНТОВ
	|	ЦеныКонкурентов.Конкурент КАК Конкурент,
	|	ЕСТЬNULL(ЦеныКонкурентов.Цена,0)*(ЕСТЬNULL(ВалКонк.Курс,1)*ЕСТЬNULL(Баз.Кратность,1))/(ЕСТЬNULL(ВалКонк.Кратность,1)*ЕСТЬNULL(Баз.Курс,1)) ЦенаКонкурента,  		// приводим цену из установки цен к валюте типа цен
	|	ВЫБОР 	КОГДА ЕСТЬNULL(ЦеныКонкурентов.Цена,0)*(ЕСТЬNULL(ВалКонк.Курс,1)*ЕСТЬNULL(Баз.Кратность,1))/(ЕСТЬNULL(ВалКонк.Кратность,1)*ЕСТЬNULL(Баз.Курс,1)) = 0
	|			ТОГДА 0
	|			ИНАЧЕ ЕСТЬNULL(Рег.Цена,0)*(ЕСТЬNULL(Цен.Курс,1)*ЕСТЬNULL(Баз.Кратность,1))/(ЕСТЬNULL(Цен.Кратность,1)*ЕСТЬNULL(Баз.Курс,1)) / (ЕСТЬNULL(ЦеныКонкурентов.Цена,0)*(ЕСТЬNULL(ВалКонк.Курс,1)*ЕСТЬNULL(Баз.Кратность,1))/(ЕСТЬNULL(ВалКонк.Кратность,1)*ЕСТЬNULL(Баз.Курс,1)))
	|	КОНЕЦ КАК НаценкаНаКонкурента
	|ИЗ
	|	Товары КАК Тов
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(&Дата, Номенклатура В (&Товары)) Ост
	|	ПО Тов.Ссылка = Ост.Номенклатура
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	СебестоимостьТоваров Себ
	|	ПО Тов.Ссылка = Себ.Номенклатура
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта В (ВЫБРАТЬ ВалютаУправленческогоУчета ИЗ Константы)) ВалРуб 
	|	ПО ИСТИНА
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(	ВЫБРАТЬ
	|			Тип.Ссылка	ТипЦен,
	|			Тип.Валюта	Валюта
	|		ИЗ
	|			Справочник.ТипыЦен Тип
	|		ГДЕ
	|			Тип.Ссылка = &ТипЦен
	|		) Спр
	|	ПО ИСТИНА
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, ТипЦен = &ТипЦен) Рег
	|	ПО 
	|		Тов.Ссылка = Рег.Номенклатура И Спр.ТипЦен = Рег.ТипЦен                     // цена для базовой колонки в валюте установки цен
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.КурсыВалют.СрезПоследних(&Дата) Баз             			// курс валют типа цен базовой колонки
	|	ПО Спр.Валюта = Баз.Валюта
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.КурсыВалют.СрезПоследних(&Дата) Цен             			// курс валют установки цен базовой колонки
	|	ПО Рег.Валюта = Цен.Валюта
	|
	// цены конкурентов
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ЦеныНоменклатурыКонкурентов.СрезПоследних(&Дата, ТипЦен = &ТипЦен И Конкурент В (&Конкуренты)) ЦеныКонкурентов
	|	ПО Тов.Ссылка = ЦеныКонкурентов.Номенклатура
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.КурсыВалют.СрезПоследних(&Дата) ВалКонк             			// курс валют установки цен 
	|	ПО ЦеныКонкурентов.Валюта = ВалКонк.Валюта
	|
	// ИТОГИ
	|ИТОГИ
	|	МАКСИМУМ(Артикул),
	|	МАКСИМУМ(Количество),
	|	МАКСИМУМ(ЦенаЗакупочная),
	|	МАКСИМУМ(Цена), 
	|	МАКСИМУМ(НоваяЦена), 
	|	МАКСИМУМ(Наценка),
	|	МАКСИМУМ(КурсБаза),
	|	МАКСИМУМ(КратностьБаза)
	|ПО
	|	Тов.Ссылка
	|");
	Запрос.УстановитьПараметр("Товары", Товары);
	Запрос.УстановитьПараметр("ТипЦен", ТипЦенСравнения);
	Запрос.УстановитьПараметр("Конкуренты", СписокКонкурентов);
	Запрос.УстановитьПараметр("Дата", КонецДня(Объект.НаДату));
	Запрос.УстановитьПараметр("ТипЦенЗакупочная", ТипЦенЗакупочный);
 	Запрос.УстановитьПараметр("ТипЦенСебестоимость", ТипЦенСебестоимость);
 
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаТовары = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		Пока ВыборкаТовары.Следующий() Цикл
			
			НоваяСтрока = Цены.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаТовары);
			
			НоваяСтрока.Пометка = Истина;
			
			НоваяСтрока["ТипценСравненияЦена"] 		= ВыборкаТовары.Цена;
			НоваяСтрока["ТипценСравненияНоваяЦена"] = ВыборкаТовары.НоваяЦена;
			НоваяСтрока["ТипценСравненияНаценка"] 	= ВыборкаТовары.Наценка;
			НоваяСтрока["ТипценСравненияКурс"] 		= ВыборкаТовары.КурсБаза;
			НоваяСтрока["ТипценСравненияКратность"] = ВыборкаТовары.КратностьБаза;
			
			агрегаторы = Новый Структура("МинКонкурентЦена, МинКонкурентНаценка, СредняяКонкурентЦена, СредняяКонкурентНаценка, Количество", 1000000, 0, 0, 0, 0);
			
			выборкаКонкурентов = ВыборкаТовары.Выбрать();
			Пока выборкаКонкурентов.Следующий() Цикл
				Конкурент = выборкаКонкурентов.Конкурент;
				Если ЗначениеЗаполнено(Конкурент) Тогда
					НоваяСтрока["конкурентЦена" + СоответствиеИмен[Конкурент]] = выборкаКонкурентов.ЦенаКонкурента;
					НоваяСтрока["конкурентСравнение" + СоответствиеИмен[Конкурент]] = выборкаКонкурентов.НаценкаНаКонкурента;
					
					Если выборкаКонкурентов.ЦенаКонкурента < агрегаторы.МинКонкурентЦена Тогда
						агрегаторы.МинКонкурентЦена 	= выборкаКонкурентов.ЦенаКонкурента;
						агрегаторы.МинКонкурентНаценка 	= выборкаКонкурентов.НаценкаНаКонкурента;
					КонецЕсли;
					
					агрегаторы.СредняяКонкурентЦена 	= агрегаторы.СредняяКонкурентЦена + выборкаКонкурентов.ЦенаКонкурента;
					агрегаторы.СредняяКонкурентНаценка 	= агрегаторы.СредняяКонкурентНаценка + выборкаКонкурентов.НаценкаНаКонкурента;
					агрегаторы.Количество 				= агрегаторы.Количество + 1;
				КонецЕсли;
			КонецЦикла;
			
			Если агрегаторы.Количество > 0 Тогда
				агрегаторы.СредняяКонкурентЦена 	= агрегаторы.СредняяКонкурентЦена / агрегаторы.Количество;
				агрегаторы.СредняяКонкурентНаценка 	= агрегаторы.СредняяКонкурентНаценка / агрегаторы.Количество;
			КонецЕсли;
			
			Если агрегаторы.МинКонкурентЦена = 1000000 Тогда
				агрегаторы.МинКонкурентЦена = 0;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, агрегаторы);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
//	БазовыеКолонки = Настройки.Получить("БазовыеКолонки");
	
КонецПроцедуры

&НаКлиенте
Процедура ТипЦенЗакупочныйПриИзменении(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ТипЦенСравненияПриИзменении(Элемент)
	ТипЦенСравненияПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ТипЦенСравненияПриИзмененииНаСервере()
	Элементы.БазоваяЦена.Заголовок = Строка(ТипЦенСравнения) + " [наша цена]";
КонецПроцедуры

&НаКлиенте
Процедура СписокКонкурентовПриИзменении(Элемент)
	СписокКонкурентовПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура СписокКонкурентовПриИзмененииНаСервере()
	// Добавим колонки
	
	СоответствияИмен = ПолучитьСоответствияИменКолонок();
	
	ТипЧисло 	= Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 2));
	Таблица 	= Новый ТаблицаЗначений;
	Колонки		= Таблица.Колонки;
	
	Колонки.Добавить("НомерСтроки", 	Новый ОписаниеТипов("Число"));
	Колонки.Добавить("Номенклатура", 	Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Колонки.Добавить("Упаковка", 		Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	Колонки.Добавить("ДатаНачала", 		Новый ОписаниеТипов("Дата"));
		
	КолонкиТаблицыТоваров = Новый Массив;
	
	КолонкиКонкурента = Новый Структура;
	КолонкиКонкурента.Вставить("конкурентЦена", Новый Структура("Тип, Заголовок, ПриИзменении, НачалоВыбораИзСписка, ИзменитьЦвет, ТолькоПросмотр", ТипЧисло, "Цена", "", "", Ложь, Истина));
	КолонкиКонкурента.Вставить("конкурентСравнение", Новый Структура("Тип, Заголовок, ПриИзменении, НачалоВыбораИзСписка, ИзменитьЦвет, ТолькоПросмотр", ТипЧисло, "В сравнении", "КонкурентНаценкаПриИзменении", "", Ложь, Ложь));
	// старые колонки
    
	Для Каждого Элемент Из ПолучитьРеквизиты("Цены") Цикл
		ИмяРеквизита = Элемент.Имя;
		Для каждого киз Из КолонкиКонкурента Цикл
			Если Найти(ИмяРеквизита, киз.Ключ) Тогда
				КолонкиТаблицыТоваров.Добавить(ИмяРеквизита);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Добавим колонки новые колонки
	
	НовыеКолонки = Новый Массив;
	ИменаНовыхКолонок = Новый Массив;

	Для Каждого Элемент Из СоответствияИмен Цикл
		ИмяКолонки = Элемент.Ключ;
			
		Для каждого киз Из КолонкиКонкурента Цикл
			Колонки.Добавить(киз.Ключ + ИмяКолонки, киз.Значение.Тип);           
			ИменаНовыхКолонок.Добавить(киз.Ключ + ИмяКолонки);
        	НовыеКолонки.Добавить(Новый РеквизитФормы(киз.Ключ + ИмяКолонки, киз.Значение.Тип, "Цены", ИмяКолонки, Истина));
		КонецЦикла;
	КонецЦикла;
	
	// добавляемые реквизиты
	
	КолонкиДобавить = Новый Массив;
	ГруппыДобавить = Новый Массив;
	
	Для Каждого Строка Из НовыеКолонки Цикл
		Если КолонкиТаблицыТоваров.Найти(Строка.Имя) = Неопределено Тогда  // в старых рекцизитах такого элемнета нет, нужно его добавить
			КолонкиДобавить.Добавить(Строка);
			Если ГруппыДобавить.Найти(Строка.Заголовок) = Неопределено Тогда
				ГруппыДобавить.Добавить(Строка.Заголовок);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	//удаляемые реквизиты
	
	КолонкиУдалить = Новый Массив;
	ГруппыУдалить = Новый Массив;
	
	Для Каждого Строка Из КолонкиТаблицыТоваров Цикл
		Если ИменаНовыхКолонок.Найти(Строка) = Неопределено Тогда // старой колонки нету в новых значит удалим ее
			КолонкиУдалить.Добавить("Цены." + Строка);
			
			ИмяТипЦен = Строка;
			Для каждого киз Из КолонкиКонкурента Цикл
				ИмяТипЦен = СтрЗаменить(ИмяТипЦен,  киз.Ключ, "");
			КонецЦикла;
			
			Если Не (ИмяТипЦен = Строка) И ГруппыУдалить.Найти(ИмяТипЦен) = Неопределено Тогда
				ГруппыУдалить.Добавить(ИмяТипЦен);
			КонецЕсли;
  		КонецЕсли;
	КонецЦикла;
	
	ИзменитьРеквизиты(КолонкиДобавить, КолонкиУдалить);
	Для Каждого Строка Из ГруппыУдалить Цикл
		Если Элементы.Цены.ПодчиненныеЭлементы["Группа" + Строка] <> Неопределено Тогда
			Элементы.Удалить(Элементы.Цены.ПодчиненныеЭлементы["Группа" + Строка]);
		КонецЕсли;
	КонецЦикла;

	// Добавим колонки на форме
	Для Каждого Элемент Из ГруппыДобавить Цикл
		ИмяКолонки = Элемент;	
		
		НоваяГруппа =  ДобавитьГруппуФормы("Группа" + ИмяКолонки,  СоответствияИмен[Элемент].Наименование, Элементы.Цены, ГруппировкаКолонок.Вертикальная);
		НоваяПодГруппа = ДобавитьГруппуФормы("ПодГруппа" + ИмяКолонки, СоответствияИмен[Элемент].Наименование, НоваяГруппа, ГруппировкаКолонок.Горизонтальная, Ложь);
		
		Для каждого киз Из КолонкиКонкурента Цикл
			ДобавитьПолеФормы(киз.Ключ + ИмяКолонки, НоваяПодГруппа, киз.Значение.Заголовок, киз.Значение.ПриИзменении, киз.Значение.НачалоВыбораИзСписка, киз.Значение.ИзменитьЦвет, , , , киз.Значение.ТолькоПросмотр);
		КонецЦикла;
	КонецЦикла;
	
	ЗаполнитьМеню();
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	ТипЦенСравненияПриИзмененииНаСервере();
	СписокКонкурентовПриИзмененииНаСервере();
КонецПроцедуры

/////////////////////////////////////////////////////////
// Изменения цены в строке

&НаКлиенте
Процедура ЦеныТипценСравненияНоваяЦенаПриИзменении(Элемент)
	ПересчитатьКолонки(Элементы.Цены.ТекущиеДанные.ПолучитьИдентификатор(), Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ЦеныТипценСравненияНаценкаПриИзменении(Элемент)
	ПересчитатьКолонки(Элементы.Цены.ТекущиеДанные.ПолучитьИдентификатор(), Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ЦеныМинКонкурентНаценкаПриИзменении(Элемент)
	//ПересчитатьКолонки(Элементы.Цены.ТекущиеДанные.ПолучитьИдентификатор(), Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ЦеныСредняяКонкурентНаценкаПриИзменении(Элемент)
	//ПересчитатьКолонки(Элементы.Цены.ТекущиеДанные.ПолучитьИдентификатор(), Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура КонкурентНаценкаПриИзменении(Элемент)
	ПересчитатьКолонки(Элементы.Цены.ТекущиеДанные.ПолучитьИдентификатор(), Элемент.Имя);
КонецПроцедуры

&НаСервере
Процедура ПересчитатьКолонки(Идентификатор, ИзмененнаяКолонка)
	ТекущиеДанные = Цены.НайтиПоИдентификатору(Идентификатор);
	
	// если поменялась новая цена, то меняем проценты
	// если поменялся процент, то меняем новую цену
	// если новая цена, то пересчитываем все проценты
	Если ИзмененнаяКолонка = "ЦеныТипценСравненияНоваяЦена" Тогда
		Если НЕ ТекущиеДанные.ЦенаЗакупочная = 0 Тогда
			ТекущиеДанные.ТипценСравненияНаценка = ТекущиеДанные.ТипценСравненияНоваяЦена * ТекущиеДанные.ТипценСравненияКурс / (ТекущиеДанные.ЦенаЗакупочная * ТекущиеДанные.ТипценСравненияКратность);
		Иначе
			Возврат;
		КонецЕсли;
	ИначеЕсли ИзмененнаяКолонка = "ЦеныТипценСравненияНаценка" Тогда
		Если НЕ ТекущиеДанные.ЦенаЗакупочная = 0 Тогда
			ТекущиеДанные.ТипценСравненияНоваяЦена = ТекущиеДанные.ЦенаЗакупочная * ТекущиеДанные.ТипценСравненияКратность * ТекущиеДанные.ТипценСравненияНаценка / ТекущиеДанные.ТипценСравненияКурс;
		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		колонкаЦеныКонкурента = "конкурентЦена" + СтрЗаменить(ИзмененнаяКолонка, "конкурентСравнение", "");
		Если НЕ ТекущиеДанные[колонкаЦеныКонкурента] = 0 Тогда
			ТекущиеДанные.ТипценСравненияНоваяЦена = ТекущиеДанные[колонкаЦеныКонкурента] * ТекущиеДанные[ИзмененнаяКолонка];
			ТекущиеДанные.ТипценСравненияНаценка = ТекущиеДанные.ТипценСравненияНоваяЦена * ТекущиеДанные.ТипценСравненияКурс / (ТекущиеДанные.ЦенаЗакупочная * ТекущиеДанные.ТипценСравненияКратность);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	колонки = ПолучитьСоответствияИменКолонок();
	Для каждого колонка Из колонки Цикл
		Если ИзмененнаяКолонка = "конкурентСравнение" + колонка.Ключ Тогда
			Продолжить;
		КонецЕсли;
		Если ТекущиеДанные["конкурентЦена" + колонка.Ключ] = 0 Тогда
			Продолжить;
		КонецЕсли;
		ТекущиеДанные["конкурентСравнение" + колонка.Ключ] = ТекущиеДанные.ТипценСравненияНоваяЦена / ТекущиеДанные["конкурентЦена" + колонка.Ключ];
	КонецЦикла;
КонецПроцедуры

/////////////////////////////////////////////////////////

&НаКлиенте
Процедура УстановитьНовыеЦены(Команда)
	Форма = ПолучитьФорму("Документ.УстановкаЦенНоменклатуры.ФормаОбъекта");
	
	СписокТиповЦен = Новый СписокЗначений;
	СписокТиповЦен.Добавить(ТипЦенСравнения);
	
	Форма.СписокТиповЦен = СписокТиповЦен;
	    
    Таблица = Форма.Объект.Товары;
	
	КолонкаСЦеной = "ТипценСравненияНоваяЦена";
	
	Для Каждого Строка Из Цены Цикл
		
		Если Строка[КолонкаСЦеной] <> Строка["ТипценСравненияЦена"] И Строка.Пометка Тогда
		
	    	НоваяСтрока = Таблица.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	    		
	    	НоваяСтрока.ТипЦен		= ТипЦенСравнения;
	    	НоваяСтрока.Цена	 	= Строка[КолонкаСЦеной];
			НоваяСтрока.ДатаНачала	= Объект.НаДату;
		КонецЕсли;
		
	КонецЦикла;
	
	Форма.СформироватьТаблицуТоваров(Истина);
	
    Форма.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ПоПроизводителю(Команда)
	ТипПодбора = "ПоПроизводителю";
	Элементы.ГруппаТаблицыПодбора.Заголовок = "Подбор: выберите производителей и нажмите Подобрать";
	Элементы.Группа4.ТекущаяСтраница = Элементы.СтраницаПодбор;
	Элементы.СтраницыПодбора.ТекущаяСтраница = Элементы.СтраницаПодборПроизводители;
КонецПроцедуры

&НаКлиенте
Процедура ПоГруппеТоваров(Команда)
	ТипПодбора = "ПоГруппе";
	Элементы.ГруппаТаблицыПодбора.Заголовок = "Подбор: выберите группы товаров и нажмите Подобрать";
	Элементы.Группа4.ТекущаяСтраница = Элементы.СтраницаПодбор;
	Элементы.СтраницыПодбора.ТекущаяСтраница = Элементы.СтраницаПодборГруппаТоваров;
КонецПроцедуры

&НаКлиенте
Процедура ПодборВсе(Команда)
	ТипПодбора = "Все";
	ТолькоСНаличиемЦеныКонкурента = Истина;
	Элементы.ГруппаТаблицыПодбора.Заголовок = "Подбор: нажмите Подобрать";
	Элементы.Группа4.ТекущаяСтраница = Элементы.СтраницаПодбор;
	Элементы.СтраницыПодбора.ТекущаяСтраница = Элементы.СтраницаПодборВсехСЦенами;
КонецПроцедуры

&НаКлиенте
Процедура Подобрать(Команда)
	Элементы.Группа4.ТекущаяСтраница = Элементы.Главная;
	
	ПодобратьНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПодобратьНаСервере()
	УсловиеГДЕ = "ГДЕ ИСТИНА";
	Если ТипПодбора = "ПоПроизводителю" Тогда
		УсловиеГДЕ = УсловиеГДЕ + " И Тов.Производитель В (&Производители)";
	КонецЕсли;
	Если ТипПодбора = "ПоГруппе" Тогда
		УсловиеГДЕ = УсловиеГДЕ + " И Тов.Родитель В (&ГруппыТоваров)";
	КонецЕсли;
	Если ТолькоСНаличиемЦеныКонкурента Тогда
		УсловиеГДЕ = УсловиеГДЕ + " И НЕ ЦеныКонкурентов.Цена Есть NULL";
	КонецЕсли;
	Если ЕстьОстаток Тогда
		УсловиеГДЕ = УсловиеГДЕ + " И НЕ ЕстьNULL(Ост.КоличествоОстаток, 0) = 0";
	КонецЕсли;
	
	Запрос = Новый Запрос("
	// Получим таблицу товаров
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Тов.Ссылка				Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК Тов
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(&Дата, ) Ост
	|	ПО Тов.Ссылка = Ост.Номенклатура
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ЦеныНоменклатурыКонкурентов.СрезПоследних(&Дата, ТипЦен = &ТипЦен И Конкурент В (&Конкуренты)) ЦеныКонкурентов
	|	ПО Тов.Ссылка = ЦеныКонкурентов.Номенклатура
	|" + УсловиеГДЕ + "
	|");
	Запрос.УстановитьПараметр("Конкуренты", СписокКонкурентов);
	Запрос.УстановитьПараметр("Производители", Производители);
	Запрос.УстановитьПараметр("ГруппыТоваров", ГруппыТоваров);
	Запрос.УстановитьПараметр("ТипЦен", ТипЦенСравнения);
	Запрос.УстановитьПараметр("Дата", КонецДня(Объект.НаДату));
	Товары = Запрос.Выполнить().Выгрузить();
	
	АдресТоваровВХранилище = ПоместитьВоВременноеХранилище(Товары, УникальныйИдентификатор);
	ПолучитьТоварыИзХранилища(АдресТоваровВХранилище);
КонецПроцедуры

/////////////////////////////////////////////////////////

&НаКлиенте
Процедура СписокКонкурентовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Обработка.РасчетЦенПоКонкурентам.Форма.ВыборКонкурентов", Новый Структура("списокКонкурентов", СписокКонкурентов), , , , , Новый ОписаниеОповещения("ВыборКонкурентов", ЭтаФорма));
КонецПроцедуры

&НаКлиенте
Процедура ВыборКонкурентов(значение, Параметры) Экспорт 
	Если значение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СписокКонкурентов = значение;
	СписокКонкурентовПриИзмененииНаСервере();
КонецПроцедуры // ВыборКонкурентов()

&НаКлиенте
Процедура СортироватьЦеныПоВозрастанию(Команда)
	Цены.Сортировать(СтрЗаменить(Элементы.Цены.ТекущийЭлемент.Имя, "Цены", "") + " Возр");
	Элементы.Цены.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура СортироватьЦеныПоУбыванию(Команда)
	Цены.Сортировать(СтрЗаменить(Элементы.Цены.ТекущийЭлемент.Имя, "Цены", "") + " Убыв");
	Элементы.Цены.Обновить();
КонецПроцедуры



