
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	РабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
	ПолучитьОборудованиеРМНаСервере();
	ТекущийПЛУ = 1;
	
	ШтрихкодEAN8 = "46120441";
	ШтрихкодEAN13 = "2900001462105";
	ШтрихкодCODE39 = "2PMP-468-PJM";
	ШтрихкодQR = "http://www.1c.ru";
	
	ПечатьШтрихкодаEAN8 = Истина;
	ПечатьШтрихкодаEAN13 = Истина;
	ПечатьШтрихкодаCODE39 = Истина;
	ПечатьШтрихкодаQR = Истина;
	
	Отправляет1СEmail = Ложь;
	Отправляет1СSMS   = Ложь;
	
	ЭТСумма  = 10.12;
	СуммаИнкассации = 10.12;
	
	ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств;
	ФискальноеУстройствоТип = Перечисления.ТипыПодключаемогоОборудования.ККТ;
	
	ТипЭквайринговойОперации = "AuthorizeSales";
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если Источник = "ПодключаемоеОборудование" Тогда
		// Отладочное
		Лог = "Получено внешнее событие
		      |Источник = " + Источник + "
		      |Событие = "  + ИмяСобытия;
		ЭтотОбъект.ОбновитьОтображениеДанных();
	
		Если ИмяСобытия = "ScanData" Тогда
			// Преобразуем предварительно к ожидаемому формату.
			Данные = Новый Массив();
			Если Параметр[1] = Неопределено Тогда
				Данные.Добавить(Новый Структура("Штрихкод, Количество", Параметр[0], 1));
			Иначе
				Данные.Добавить(Новый Структура("Штрихкод, Количество", Параметр[1][1], 1));
			КонецЕсли;
			ПолученыШтрихкоды(Данные);
			
		ИначеЕсли ИмяСобытия = "TracksData" Тогда
			
			Если Параметр[1] = Неопределено Тогда
				ПолученКодКарты(Параметр[0], Параметр[0]);
			Иначе
				ПолученКодКарты(Параметр[0], Параметр[1][1]);
			КонецЕсли;
			
		ИначеЕсли ИмяСобытия = "RFID" Тогда
			
			Для Каждого Элемент Из Параметр Цикл
				МеткаRFID = МеткиRFID.Добавить();
				ЗаполнитьЗначенияСвойств(МеткаRFID, Элемент);
			КонецЦикла;
				
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПолученыШтрихкоды(МассивДанных)

	// Пишем лог
	Лог = Формат(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса(),"ДЛФ=T") + " Имя команды: ПолученыШтрихкоды" + Символы.ПС;
	Сч = 0;

	ТаблицаЗагрузкиИзТСД.Очистить();
	ЧислоКодов = МассивДанных.Количество();
	Для каждого СтрокаЗагрузки Из МассивДанных Цикл
		Сч = Сч + 1;
		НоваяСтрока = ТаблицаЗагрузкиИзТСД.Добавить();
		НоваяСтрока.Штрихкод   = СтрокаЗагрузки.Штрихкод;
		НоваяСтрока.Количество = СтрокаЗагрузки.Количество;
		Лог = Лог + "Штрихкод" + ?(ЧислоКодов > 1,"(" + Сч + ")", "") + ": " + СтрокаЗагрузки.Штрихкод;
		Лог = Лог + " Количество: " + СтрокаЗагрузки.Количество + Символы.ПС;
	КонецЦикла;
	Лог = Лог + "========================================" + Символы.ПС;
	ОтветОтУстройства = Лог + ОтветОтУстройства;

	ДанныеСканера = МассивДанных[0].Штрихкод; // Выводим считанные данные
	ТипШтрихкода  = МенеджерОборудованияВызовСервера.ОпределитьТипШтрихкода(МассивДанных[0].Штрихкод);
	
	ЭтотОбъект.ОбновитьОтображениеДанных();

	Возврат Истина;

КонецФункции

&НаКлиенте
Функция ПолученКодКарты(КодКарты, ДанныеДорожек)

	// Пишем лог
	Лог = Формат(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса(), "ДЛФ=T") + " Имя команды: ПолученКодКарты" + Символы.ПС;
	Лог = Лог + "Код карты: " + КодКарты + Символы.ПС;
	Если ТипЗнч(ДанныеДорожек) = Тип("Массив") Тогда
		Для НомерДорожки = 1 По ДанныеДорожек.Количество() Цикл
			НоваяСтрока = ТаблицаЗагрузкиИзТСД.Добавить();
			Лог = Лог + "ДанныеДорожки(" + НомерДорожки + "): " + ДанныеДорожек[НомерДорожки - 1] + Символы.ПС;
		КонецЦикла;
		// Выводим считанные данные
		Дорожка1 = ?(ДанныеДорожек.Количество() > 0, ДанныеДорожек[0], "");
		Дорожка2 = ?(ДанныеДорожек.Количество() > 1, ДанныеДорожек[1], "");
		Дорожка3 = ?(ДанныеДорожек.Количество() > 2, ДанныеДорожек[2], "");
		
	ИначеЕсли ТипЗнч(ДанныеДорожек) = Тип("Строка") Тогда
		Дорожка1 = ДанныеДорожек;
		Лог = Лог + "ДанныеДорожек: " + ДанныеДорожек + Символы.ПС;
	КонецЕсли;
	
	Лог = Лог + "========================================" + Символы.ПС;
	ОтветОтУстройства = Лог + ОтветОтУстройства;
	
	ЭтотОбъект.ОбновитьОтображениеДанных();

	Возврат Истина;

КонецФункции

&НаКлиенте
Процедура ДанныеСканераПриИзменении(Элемент)
	
	ТипШтрихкода  = МенеджерОборудованияВызовСервера.ОпределитьТипШтрихкода(ДанныеСканера);
	ЭтотОбъект.ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	МенеджерОборудованияКлиент.НачатьОтключениеВсегоОборудования();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииНаСервере

&НаСервере
Процедура ПолучитьОборудованиеРМНаСервере()

	Отбор = Новый Структура("РабочееМесто", РабочееМесто);
	ОборудованиеРМ = Справочники.ПодключаемоеОборудование.Выбрать(,, Отбор);
	Пока ОборудованиеРМ.Следующий() Цикл
		Если НЕ ОборудованиеРМ.УстройствоИспользуется Или ОборудованиеРМ.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		_ТипОборудования = ОборудованиеРМ.ТипОборудования;
		Если _ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.СканерШтрихкода Тогда
			СканерШК = ОборудованиеРМ.Ссылка;
		ИначеЕсли _ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ФискальныйРегистратор Тогда
			ФР = ОборудованиеРМ.Ссылка;
		ИначеЕсли _ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ККТ Тогда
			ККТ = ОборудованиеРМ.Ссылка;
		ИначеЕсли _ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ТерминалСбораДанных Тогда
			ТСД = ОборудованиеРМ.Ссылка;
		ИначеЕсли _ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ДисплейПокупателя Тогда
			Дисплей = ОборудованиеРМ.Ссылка;
		ИначеЕсли _ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.СчитывательМагнитныхКарт Тогда
			СчитывательМК = ОборудованиеРМ.Ссылка;
		ИначеЕсли _ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.СчитывательRFID Тогда
			СчитывательRFID = ОборудованиеРМ.Ссылка;
		ИначеЕсли _ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ЭлектронныеВесы Тогда
			Весы = ОборудованиеРМ.Ссылка;
		ИначеЕсли _ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал Тогда
			ЭТ = ОборудованиеРМ.Ссылка;
		ИначеЕсли _ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток Тогда
			ВесыСПечатьюЭтикеток = ОборудованиеРМ.Ссылка;
		ИначеЕсли _ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ККМOffline Тогда
			ККМOffline = ОборудованиеРМ.Ссылка;
		ИначеЕсли _ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ПринтерЧеков Тогда
			ПринтерЧеков = ОборудованиеРМ.Ссылка;
		ИначеЕсли _ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ПринтерЭтикеток Тогда
			ПринтерЭтикеток = ОборудованиеРМ.Ссылка;
		Иначе
			Продолжить;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОчиститьКэш()
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтрокиМакетаСлипЧека()
   
  Возврат Обработки.ТестированиеПодключаемогоОборудования.ПолучитьМакет("МакетЧеков").ПолучитьТекст();

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ПолучитьТекущееТО(ИмяТипа)
	Если ИмяТипа = "ФР" Тогда
		Оборудование = ФР;
	ИначеЕсли ИмяТипа = "ККТ" Тогда
		Оборудование = ККТ;
	ИначеЕсли ИмяТипа = "ТСД" Тогда
		Оборудование = ТСД;
	ИначеЕсли ИмяТипа = "Дисплей" Тогда
		Оборудование = Дисплей;
	ИначеЕсли ИмяТипа = "Весы" Тогда
		Оборудование = Весы;
	ИначеЕсли ИмяТипа = "ЭТ" Тогда
		Оборудование = ЭТ;
	ИначеЕсли ИмяТипа = "Сканер" Тогда
		Оборудование = СканерШК;
	ИначеЕсли ИмяТипа = "RFID" Тогда
		Оборудование = СчитывательRFID;
	ИначеЕсли ИмяТипа = "СМК" Тогда
		Оборудование = СчитывательМК;
	ИначеЕсли ИмяТипа = "ККМOffline" Тогда
		Оборудование = ККМOffline;
	ИначеЕсли ИмяТипа = "ВесыСПечатьюЭтикеток" Тогда
		Оборудование = ВесыСПечатьюЭтикеток;
	ИначеЕсли ИмяТипа = "ПринтерЧеков" Тогда
		Оборудование = ПринтерЧеков;
	ИначеЕсли ИмяТипа = "ПЭ" Тогда
		Оборудование = ПринтерЭтикеток;
	КонецЕсли;
	Возврат Оборудование;
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийЭлементов

&НаКлиенте
Процедура РабочееМестоПриИзменении(Элемент)

	// Заполняем оборудование рабочего места.
	ПолучитьОборудованиеРМНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ПодключитьУстройствоВыполнить_Завершение(РезультатВыполнения, Параметры) Экспорт
	
	// Пишем лог
	Лог = Формат(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса(),"ДЛФ=T") + " Имя команды: Подключить - Завершение" + Символы.ПС;
	ОписаниеОшибки = ?(РезультатВыполнения.Результат, "Команда выполнена успешно!", РезультатВыполнения.ОписаниеОшибки);
	
	// Пишем лог
	Лог = Лог + Формат(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса(),"ДЛФ=T") + " " + ОписаниеОшибки + Символы.ПС +
	      "========================================" + Символы.ПС;
	ОтветОтУстройства = Лог + ОтветОтУстройства;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьУстройствоВыполнить(Команда)

	// Получаем имя типу оборудования.
	ИмяТипа = СтрЗаменить(ЭтотОбъект.ТекущийЭлемент.Имя, "Подключить", "");
	// Получаем оборудование по типу.
	Оборудование = ПолучитьТекущееТО(ИмяТипа);
	Если Оборудование.Пустая() Тогда
		ТекстСообщения = НСтр("ru='Оборудование не выбрано!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОповещенияПриПодключении = Новый ОписаниеОповещения("ПодключитьУстройствоВыполнить_Завершение", ЭтотОбъект);                                 
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПоИдентификатору(ОповещенияПриПодключении, ЭтотОбъект.УникальныйИдентификатор, Оборудование);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьУстройствоВыполнить_Завершение(РезультатВыполнения, Параметры) Экспорт
	
	// Пишем лог
	Лог = Формат(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса(),"ДЛФ=T") + " Имя команды: Отключить - Завершение" + Символы.ПС;
	ОписаниеОшибки = ?(РезультатВыполнения.Результат, "Команда выполнена успешно!", РезультатВыполнения.ОписаниеОшибки);
	
	Лог = Лог + Формат(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса(),"ДЛФ=T") + " " + ОписаниеОшибки + Символы.ПС +
	      "========================================" + Символы.ПС;
	ОтветОтУстройства = Лог + ОтветОтУстройства;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьУстройствоВыполнить(Команда)
	
	// Получаем имя типу оборудования.
	ИмяТипа = СтрЗаменить(ЭтотОбъект.ТекущийЭлемент.Имя,"Отключить","");
	// Получаем оборудование по типу.
	Оборудование = ПолучитьТекущееТО(ИмяТипа);
	Если Оборудование.Пустая() Тогда
		ТекстСообщения = НСтр("ru='Оборудование не выбрано!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОповещенияПриПодключении = Новый ОписаниеОповещения("ОтключитьУстройствоВыполнить_Завершение", ЭтотОбъект);                                 
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПоИдентификатору(ОповещенияПриПодключении, ЭтотОбъект.УникальныйИдентификатор, Оборудование);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьУстройствоВыполнить(Команда)
	
	// Получаем имя типу оборудования.
	ИмяТипа = СтрЗаменить(ЭтотОбъект.ТекущийЭлемент.Имя,"Настроить","");
	// Получаем оборудование по типу.
	Оборудование = ПолучитьТекущееТО(ИмяТипа);
	Если Оборудование.Пустая() Тогда
		ТекстСообщения = НСтр("ru='Оборудование не выбрано!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	МенеджерОборудованияКлиент.ВыполнитьНастройкуОборудования(Оборудование);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьКэшВыполнить()
	
	ОчиститьКэш();
	
КонецПроцедуры

&НаКлиенте
Процедура ТестВыполнить_Завершение(РезультатВыполнения, Параметры) Экспорт
	
	// Пишем лог
	Лог = Формат(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса(),"ДЛФ=T") + " Имя команды: ТестУстройства - Завершение" + Символы.ПС;
	ОписаниеОшибки = ?(РезультатВыполнения.Результат, "Команда выполнена успешно!", РезультатВыполнения.ОписаниеОшибки);
	
	Если РезультатВыполнения.ВыходныеПараметры.Количество() > 1 Тогда
		ОписаниеОшибки = РезультатВыполнения.ВыходныеПараметры[1];
	Иначе
		ОписаниеОшибки = "";
	КонецЕсли;

	Если РезультатВыполнения.Результат Тогда
		ОписаниеОшибки = "Команда выполнена успешно." + Символы.ПС + ОписаниеОшибки;
	Иначе
		ОписаниеОшибки = "Тест не был пройден!" + + Символы.ПС + ОписаниеОшибки;
	КонецЕсли;
	
	// Пишем лог
	Лог = Лог + Формат(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса(),"ДЛФ=T") + " " + ОписаниеОшибки + Символы.ПС;
	ОтветОтУстройства = Лог + ОтветОтУстройства;
	
КонецПроцедуры

&НаКлиенте
Процедура ТестВыполнить(Команда)
	
	// Получаем имя типу оборудования.
	ИмяТипа = СтрЗаменить(ЭтотОбъект.ТекущийЭлемент.Имя,"Тест","");
	// Получаем оборудование по типу.
	Оборудование = ПолучитьТекущееТО(ИмяТипа);
	Если Оборудование.Пустая() Тогда
		ТекстСообщения = НСтр("ru='Оборудование не выбрано!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ПараметрыУстройства = МенеджерОборудованияКлиентПовтИсп.ПолучитьПараметрыУстройства(Оборудование);
	Если НЕ ПараметрыУстройства.Количество() > 0  Тогда
		ОписаниеОшибки = НСтр("ru='Не настроены параметры устройства.
		|Для корректной работы устройства необходимо задать параметры его работы.
		|Сделать это можно при помощи формы ""Настройка параметров"" модели
		|подключаемого оборудования в форме ""Подключение и настройка оборудования"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
	Иначе
		ВходныеПараметры = Неопределено;
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("ТестВыполнить_Завершение", ЭтотОбъект);       
		МенеджерОборудованияКлиент.НачатьВыполнениеДополнительнойКоманды(ОповещениеПриЗавершении, "CheckHealth", ВходныеПараметры, Оборудование, ПараметрыУстройства)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьВсеПодключенноеОборудованиеВыполнить()
	
	МенеджерОборудованияКлиент.НачатьОтключениеВсегоОборудования();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПоставляемыеДрайвера(Команда)
	
	МенеджерОборудованияВызовСервераПереопределяемый.ОбновлениеБиблиотеки();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормыККМ

&НаКлиенте
Функция ПолучитьШаблонЧекаПечатиШтрихкодов()
	
	Текст = ФУТекст;
	
	Если ПечатьШтрихкодаEAN8 Тогда
		Текст = Текст + Символы.ПС + "|ШтрихКод|EAN8|" + ШтрихкодEAN8;
	КонецЕсли;
	
	Если ПечатьШтрихкодаEAN13 Тогда
		Текст = Текст + Символы.ПС + "|ШтрихКод|EAN13|" + ШтрихкодEAN13;
	КонецЕсли;
	
	Если ПечатьШтрихкодаCODE39 Тогда
		Текст = Текст + Символы.ПС + "|ШтрихКод|CODE39|" + ШтрихкодCODE39;
	КонецЕсли;
	
	Если ПечатьШтрихкодаQR Тогда
		Текст = Текст + Символы.ПС + "|ШтрихКод|QR|" + ШтрихкодQR;
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

&НаКлиенте
Функция ПолучитьШаблонЧека()
	
	// Общие параметры чека
	ОбщиеПараметры = МенеджерОборудованияКлиентСервер.ПараметрыОперацииФискализацииЧека();
	
	// Параметры установлены по умолчанию.
	ОбщиеПараметры.ТипРасчета = ТипРасчета;
	ОбщиеПараметры.Электронно = Истина;
	
	ОбщиеПараметры.ПокупательEmail = Неопределено;
	ОбщиеПараметры.ПокупательНомер = Неопределено;
	// Параметры необходимые для чека ЕНВД на принтере чеков
	ОбщиеПараметры.Кассир          = "Иванов И.И";
	ОбщиеПараметры.КодСистемыНалогообложения = КодСистемыНалогообложения;
	ОбщиеПараметры.ОрганизацияНазвание = "ООО ""1C-СОФТ""";
	ОбщиеПараметры.ОрганизацияИНН = "7709860400";
	ОбщиеПараметры.ОрганизацияКПП = "770901001";
	ОбщиеПараметры.НомерКассы     = "00001";
	ОбщиеПараметры.НомерЧека      = "1";
	ОбщиеПараметры.НомерСмены     = "1";
	ОбщиеПараметры.Отправляет1СSMS   = Отправляет1СSMS;   // SMS отправляет средствами 1C.
	ОбщиеПараметры.Отправляет1СEmail = Отправляет1СEmail; // Email отправляет средствами 1C. 
	
	СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека(); 
	СтрокаПозицииЧека.Наименование = "Товарная позиция";
	СтрокаПозицииЧека.Количество   = 3;
	СтрокаПозицииЧека.Цена         = 100;
	СтрокаПозицииЧека.Сумма        = 330;
	СтрокаПозицииЧека.НомерСекции  = 1;
	СтрокаПозицииЧека.СтавкаНДС    = Неопределено;
	ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
	
	СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека(); 
	СтрокаПозицииЧека.Наименование = "Строка без скидок и наценок";
	СтрокаПозицииЧека.Количество   = 1;
	СтрокаПозицииЧека.Цена         = 100;
	СтрокаПозицииЧека.Сумма        = 100;
	СтрокаПозицииЧека.НомерСекции  = 1;
	СтрокаПозицииЧека.СтавкаНДС    = 18;
	ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
	
	СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека(); 
	СтрокаПозицииЧека.Наименование = "Другая товарная позиция c очень длинным наименование для проверки";
	СтрокаПозицииЧека.Количество   = 2;
	СтрокаПозицииЧека.Цена         = 200;
	СтрокаПозицииЧека.Сумма        = 150;
	СтрокаПозицииЧека.НомерСекции  = 1;
	СтрокаПозицииЧека.СтавкаНДС    = 10;
	ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
	
	СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека(); 
	СтрокаПозицииЧека.Наименование = "Яблоки на развес";
	СтрокаПозицииЧека.Количество   = 0.61;
	СтрокаПозицииЧека.Цена         = 172.5;
	СтрокаПозицииЧека.Сумма        = 105.23;
	СтрокаПозицииЧека.НомерСекции  = 3;
	СтрокаПозицииЧека.СтавкаНДС    = 18;
	ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);

	
	СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыТекстовойСтрокиЧека("Накопление по карте: 234543443");
	ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
	
	СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыШтрихкодВСтрокеЧека("EAN13", "2900001462105");
	ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
	
	Если НесколькоВидовОплат Тогда
		СтрокаОплаты = Новый Структура();
		СтрокаОплаты.Вставить("ТипОплаты", 2); 
		СтрокаОплаты.Вставить("Сумма", 200);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	
		СтрокаОплаты = Новый Структура();
		СтрокаОплаты.Вставить("ТипОплаты", 1);
		СтрокаОплаты.Вставить("Сумма", 300);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	
		СтрокаОплаты = Новый Структура();
		СтрокаОплаты.Вставить("ТипОплаты", 0);  // Наличные
		СтрокаОплаты.Вставить("Сумма", 1000);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	Иначе
		СтрокаОплаты = Новый Структура();
		СтрокаОплаты.Вставить("ТипОплаты", 0);  // Наличные
		СтрокаОплаты.Вставить("Сумма", 1500);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	
	Возврат ОбщиеПараметры;
	
КонецФункции

&НаКлиенте
Процедура ФУ_КомандаВыполнитьЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ОчиститьСообщения();
	Элементы.ФискальноеУстройство.Доступность = Истина;
	
	НомерСмены  = Неопределено; 
	НомерЧека   = Неопределено;
	СтатусСмены = Неопределено;
	ФискальныйПризнак = Неопределено;
	СайтПроверкиОФД   = Неопределено;
	
	Если РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru='Операция завершена.'");
		Если РезультатВыполнения.ВыходныеПараметры.Количество() > 0 Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС + РезультатВыполнения.ВыходныеПараметры[0];
			Если РезультатВыполнения.ВыходныеПараметры.Количество() > 1 Тогда
				НомерСмены = РезультатВыполнения.ВыходныеПараметры[0]; 
				НомерЧека  = РезультатВыполнения.ВыходныеПараметры[1];
				Если РезультатВыполнения.ВыходныеПараметры.Количество() > 2 Тогда
					СтатусСмены  = РезультатВыполнения.ВыходныеПараметры[2];
				КонецЕсли;
				Если РезультатВыполнения.ВыходныеПараметры.Количество() > 4 Тогда
					ФискальныйПризнак  = РезультатВыполнения.ВыходныеПараметры[4];
				КонецЕсли;
				Если РезультатВыполнения.ВыходныеПараметры.Количество() > 5 Тогда
					СайтПроверкиОФД  = РезультатВыполнения.ВыходныеПараметры[5];
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ТекстСообщения = РезультатВыполнения.ОписаниеОшибки;
		// Пишем лог
		ОтветОтУстройства = ОтветОтУстройства + ТекстСообщения + Символы.ПС;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура ФУ_КомандаПараметрыВыполнитьЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ОчиститьСообщения();
	Элементы.ФискальноеУстройство.Доступность = Истина;
	
	Если РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru='Операция завершена.'");
		Если РезультатВыполнения.ВыходныеПараметры.Количество() > 0 Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС + РезультатВыполнения.ВыходныеПараметры[0];
			Сообщить("НомерСмены="  + РезультатВыполнения.ВыходныеПараметры[0]); 
			Сообщить("НомерЧека="   + РезультатВыполнения.ВыходныеПараметры[1]); 
			Сообщить("СтатусСмены=" + РезультатВыполнения.ВыходныеПараметры[2]); 
			ПараметрыСостояния = РезультатВыполнения.ВыходныеПараметры[4];
			Если ПараметрыСостояния <> Неопределено Тогда
				Для Каждого ПараметрСостояния Из ПараметрыСостояния Цикл
					Сообщить(ПараметрСостояния.Ключ + "=" + ПараметрСостояния.Значение);
				КонецЦикла;
			КонецЕсли
		КонецЕсли;
	Иначе
		ТекстСообщения = РезультатВыполнения.ОписаниеОшибки;
		// Пишем лог
		ОтветОтУстройства = ОтветОтУстройства + ТекстСообщения + Символы.ПС;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьФискальноеУстройство()
	
	Если ФискальноеУстройствоТип = ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ФискальныйРегистратор") Тогда
		ФискальноеУстройство = ФР
	ИначеЕсли ФискальноеУстройствоТип = ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ПринтерЧеков") Тогда
		ФискальноеУстройство = ПринтерЧеков
	Иначе
		ФискальноеУстройство = ККТ
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ФискальноеУстройство) Тогда
		ТекстСообщения = НСтр("ru='Оборудование не выбрано!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	Иначе
		Возврат ФискальноеУстройство;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ФУ_ОткрытьСмену(Команда)
	
	ФискальноеУстройство = ПолучитьФискальноеУстройство();
	Если Не ЗначениеЗаполнено(ФискальноеУстройство) Тогда
		Возврат;
	КонецЕсли;

	Элементы.ФискальноеУстройство.Доступность = Ложь;
	
	ПараметрыОперации = МенеджерОборудованияКлиентСервер.ПараметрыОткрытияЗакрытияСмены();
	ПараметрыОперации.Кассир = НСтр("ru='Администратор'");
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ФУ_КомандаВыполнитьЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьОткрытиеСменыНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, ПараметрыОперации, ФискальноеУстройство);
	
КонецПроцедуры

&НаКлиенте
Процедура ФУ_ЗакрытьСмену(Команда)
	
	ФискальноеУстройство = ПолучитьФискальноеУстройство();
	Если Не ЗначениеЗаполнено(ФискальноеУстройство) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ФискальноеУстройство.Доступность = Ложь;
	
	ПараметрыОперации = МенеджерОборудованияКлиентСервер.ПараметрыОткрытияЗакрытияСмены();
	ПараметрыОперации.Кассир = НСтр("ru='Администратор'");
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ФУ_КомандаВыполнитьЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьЗакрытиеСменыНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, ПараметрыОперации, ФискальноеУстройство);
	
КонецПроцедуры

&НаКлиенте
Процедура ФУ_ВнестиСумму(Команда)
	
	ФискальноеУстройство = ПолучитьФискальноеУстройство();
	Если Не ЗначениеЗаполнено(ФискальноеУстройство) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ФискальноеУстройство.Доступность = Ложь;
	
	ПараметрыОперации = Новый Структура("ТипИнкассации, Сумма", 1, СуммаИнкассации);
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ФУ_КомандаВыполнитьЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьИнкассациюНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, ПараметрыОперации, ФискальноеУстройство);
	
КонецПроцедуры

&НаКлиенте
Процедура ФУ_ИзъятьСумму(Команда)
	
	ФискальноеУстройство = ПолучитьФискальноеУстройство();
	Если Не ЗначениеЗаполнено(ФискальноеУстройство) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ФискальноеУстройство.Доступность = Ложь;
	
	ПараметрыОперации = Новый Структура("ТипИнкассации, Сумма", 0, СуммаИнкассации);
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ФУ_КомандаВыполнитьЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьИнкассациюНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, ПараметрыОперации, ФискальноеУстройство);
	
КонецПроцедуры

&НаКлиенте
Процедура ФУ_ПечатьТекста(Команда)
	
	ФискальноеУстройство = ПолучитьФискальноеУстройство();
	Если Не ЗначениеЗаполнено(ФискальноеУстройство) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ФискальноеУстройство.Доступность = Ложь;
	
	СтрокиПечати = ПолучитьСтрокиМакетаСлипЧека();
	//Печатаем слип чек
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ФУ_КомандаВыполнитьЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьПечатьТекста(ОповещениеПриЗавершении, УникальныйИдентификатор, СтрокиПечати, ФискальноеУстройство);
	
КонецПроцедуры

&НаКлиенте
Процедура ФУ_ОтчетОТекущемСостоянииРасчетов(Команда)
	
	ФискальноеУстройство = ПолучитьФискальноеУстройство();
	Если Не ЗначениеЗаполнено(ФискальноеУстройство) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ФискальноеУстройство.Доступность = Ложь;
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ФУ_КомандаВыполнитьЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьФормированиеОтчетаОТекущемСостоянииРасчетов(ОповещениеПриЗавершении, УникальныйИдентификатор, ФискальноеУстройство);
	
КонецПроцедуры

&НаКлиенте
Процедура ФУ_ОтчетБезГашения(Команда)
	
	ФискальноеУстройство = ПолучитьФискальноеУстройство();
	Если Не ЗначениеЗаполнено(ФискальноеУстройство) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ФискальноеУстройство.Доступность = Ложь;
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ФУ_КомандаВыполнитьЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьФормированиеОтчетаБезГашения(ОповещениеПриЗавершении, УникальныйИдентификатор, ФискальноеУстройство);
	
КонецПроцедуры

&НаКлиенте
Процедура ФУ_ОперацияФН_Продолжить(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения <> Неопределено И Тип(РезультатВыполнения) = Тип("Структура") Тогда
		ФискальноеУстройство = ПолучитьФискальноеУстройство();
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("ФУ_КомандаВыполнитьЗавершение", ЭтотОбъект);
		МенеджерОборудованияКлиент.НачатьОперациюФНДляФискальногоУстройства(ОповещениеПриЗавершении, УникальныйИдентификатор, РезультатВыполнения, ФискальноеУстройство); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФУ_ОперацияФН(Команда)
	
	ФискальноеУстройство = ПолучитьФискальноеУстройство();
	Если Не ЗначениеЗаполнено(ФискальноеУстройство) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОперации = Новый Структура("ФискальноеУстройство", ФискальноеУстройство);
	Обработчик = Новый ОписаниеОповещения("ФУ_ОперацияФН_Продолжить", ЭтотОбъект);
	ОткрытьФорму("Справочник.ПодключаемоеОборудование.Форма.ПараметрыФискализации", ПараметрыОперации,,,,,Обработчик, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ФУ_НапечататьЧекПоШаблону(Команда)
	
	ФискальноеУстройство = ПолучитьФискальноеУстройство();
	Если Не ЗначениеЗаполнено(ФискальноеУстройство) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ФискальноеУстройство.Доступность = Ложь;
	
	ПараметрыОперации = ПолучитьШаблонЧека();
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ФУ_КомандаВыполнитьЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьФискализациюЧекаНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, ПараметрыОперации, ФискальноеУстройство);
	
КонецПроцедуры

&НаКлиенте
Процедура ФУ_ПечатьЧекаКоррекции(Команда)
	
	ФискальноеУстройство = ПолучитьФискальноеУстройство();
	Если Не ЗначениеЗаполнено(ФискальноеУстройство) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ФискальноеУстройство.Доступность = Ложь;
	
	ПараметрыОперации = МенеджерОборудованияКлиентСервер.ПараметрыОперацииЧекаКоррекции();
	ПараметрыОперации.ТипРасчета = ТипРасчета;
	ПараметрыОперации.ТипОплаты  = 0; // Наличные
	ПараметрыОперации.Сумма      = СуммаИнкассации;
	ПараметрыОперации.Кассир     = НСтр("ru='Администратор'");
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ФУ_КомандаВыполнитьЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьФормированиеЧекаКоррекцииНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, ПараметрыОперации, ФискальноеУстройство);
	
КонецПроцедуры

&НаКлиенте
Процедура ФУ_ПолучитьПараметрыЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Элементы.ФискальноеУстройство.Доступность = Истина;
	
	ОчиститьСообщения();
	
	Если РезультатВыполнения.Результат Тогда
		ПараметрыККТ = РезультатВыполнения.ВыходныеПараметры;
		Если ПараметрыККТ <> Неопределено Тогда
			Для Каждого ПараметрККТ из ПараметрыККТ Цикл
				Сообщить(ПараметрККТ.Ключ + "=" + ПараметрККТ.Значение);
			КонецЦикла;
		КонецЕсли
	Иначе
		ТекстСообщения = РезультатВыполнения.ОписаниеОшибки;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		// Пишем лог
		ОтветОтУстройства = ОтветОтУстройства + ТекстСообщения + Символы.ПС;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ФУ_ПолучитьПараметры(Команда)
	
	ФискальноеУстройство = ПолучитьФискальноеУстройство();
	Если Не ЗначениеЗаполнено(ФискальноеУстройство) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ФискальноеУстройство.Доступность = Ложь;
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ФУ_ПолучитьПараметрыЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьПолучениеПараметровФискальногоУстройства(ОповещениеПриЗавершении, УникальныйИдентификатор, ФискальноеУстройство, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ФУ_ПолучитьТекущееСостояние(Команда)
	
	ФискальноеУстройство = ПолучитьФискальноеУстройство();
	Если Не ЗначениеЗаполнено(ФискальноеУстройство) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ФискальноеУстройство.Доступность = Ложь;
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ФУ_КомандаПараметрыВыполнитьЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьПолучениеТекущегоСостоянияФискальногоУстройства(ОповещениеПриЗавершении, УникальныйИдентификатор, ФискальноеУстройство);

КонецПроцедуры

&НаКлиенте
Процедура ФУ_ОткрытьДенежныйЯщик(Команда)
	
	ФискальноеУстройство = ПолучитьФискальноеУстройство();
	Если Не ЗначениеЗаполнено(ФискальноеУстройство) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ФискальноеУстройство.Доступность = Ложь;
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ФУ_КомандаВыполнитьЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьОткрытиеДенежногоЯщика(ОповещениеПриЗавершении, УникальныйИдентификатор, ФискальноеУстройство);
	
КонецПроцедуры

&НаКлиенте
Процедура ФУ_ПолучитьШиринуСтроки(Команда)
	
	ФискальноеУстройство = ПолучитьФискальноеУстройство();
	Если Не ЗначениеЗаполнено(ФискальноеУстройство) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ФискальноеУстройство.Доступность = Ложь;
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ФУ_КомандаВыполнитьЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьПолучениеШириныСтрокиПечатающегоУстройства(ОповещениеПриЗавершении, УникальныйИдентификатор, ФискальноеУстройство);
	
КонецПроцедуры

&НаКлиенте
Процедура ФУ_ПечатьТекстаИШтрихкода(Команда)
	
	ФискальноеУстройство = ПолучитьФискальноеУстройство();
	Если Не ЗначениеЗаполнено(ФискальноеУстройство) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ФискальноеУстройство.Доступность = Ложь;
	
	СтрокиПечати = ПолучитьШаблонЧекаПечатиШтрихкодов();
	//Печатаем слип чек
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ФУ_КомандаВыполнитьЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьПечатьТекста(ОповещениеПриЗавершении, УникальныйИдентификатор, СтрокиПечати, ФискальноеУстройство);

КонецПроцедуры

&НаКлиенте
Процедура ФУ_АннулироватьЧек(Команда)
	
	ФискальноеУстройство = ПолучитьФискальноеУстройство();
	Если Не ЗначениеЗаполнено(ФискальноеУстройство) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОперации = МенеджерОборудованияКлиентСервер.ПараметрыОперацииАннулированияЧека();
	
	Элементы.ФискальноеУстройство.Доступность = Ложь;
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ФУ_КомандаВыполнитьЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьАннулированиеЧекаНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, ПараметрыОперации, ФискальноеУстройство);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормыRFID

&НаКлиенте
Процедура RFID_ОперацияЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Операция выполнена успешно:'") + РезультатВыполнения.ИдентификаторУстройства);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатВыполнения.ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура RFID_ОткрытьСессию(Команда)
	
	Если Не ЗначениеЗаполнено(СчитывательRFID) Тогда
		ТекстСообщения = НСтр("ru='Не выбран считыватель RFID!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещениеПриЗавершении = Новый ОписаниеОповещения("RFID_ОперацияЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьОткрытиеСессииСчитывателяRFID(ОписаниеОповещениеПриЗавершении, УникальныйИдентификатор, СчитывательRFID);
	
КонецПроцедуры

&НаКлиенте
Процедура RFID_ЗакрытьСессию(Команда)
	
	Если Не ЗначениеЗаполнено(СчитывательRFID) Тогда
		ТекстСообщения = НСтр("ru='Не выбран считыватель RFID!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещениеПриЗавершении = Новый ОписаниеОповещения("RFID_ОперацияЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьЗакрытиеСессииСчитывателяRFID(ОписаниеОповещениеПриЗавершении, УникальныйИдентификатор, СчитывательRFID);

КонецПроцедуры

&НаКлиенте
Процедура RFID_ЗаписатьВМеткуEPC(Команда)
	
	Если Не ЗначениеЗаполнено(СчитывательRFID) Тогда
		ТекстСообщения = НСтр("ru='Не выбран считыватель RFID!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ТекущаяСрока = Элементы.МеткиRFID.ТекущиеДанные;
	Если ТекущаяСрока <> Неопределено Тогда
		ПараметрыЗаписи = МенеджерОборудованияКлиент.ПараметрыЗаписиМеткиRFID();
		ПараметрыЗаписи.TID = ТекущаяСрока.TID;
		ПараметрыЗаписи.EPC = ТекущаяСрока.EPC;
		ПараметрыЗаписи.БанкПамяти = "EPC";
		ПараметрыЗаписи.Данные = МенеджерОборудованияКлиентСервер.СформироватьДанныеSGTIN96(ТекущаяСрока.GTIN, ТекущаяСрока.СерийныйНомер);
		ОписаниеОповещениеПриЗавершении = Новый ОписаниеОповещения("RFID_ОперацияЗавершение", ЭтотОбъект);
		МенеджерОборудованияКлиент.НачатьЗаписьДанныхВМеткуRFID(ОписаниеОповещениеПриЗавершении, УникальныйИдентификатор, СчитывательRFID, ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура RFID_ЗаписатьВМеткуGTINSerial(Команда)
	
	Если Не ЗначениеЗаполнено(СчитывательRFID) Тогда
		ТекстСообщения = НСтр("ru='Не выбран считыватель RFID!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ТекущаяСрока = Элементы.МеткиRFID.ТекущиеДанные;
	Если ТекущаяСрока <> Неопределено Тогда
		ПараметрыЗаписи = МенеджерОборудованияКлиент.ПараметрыЗаписиМеткиRFID();
		ПараметрыЗаписи.TID = ТекущаяСрока.TID;
		ПараметрыЗаписи.EPC = ТекущаяСрока.EPC;
		ПараметрыЗаписи.БанкПамяти = "EPC";
		ПараметрыЗаписи.Данные = МенеджерОборудованияКлиентСервер.СформироватьДанныеSGTIN96(ТекущаяСрока.GTIN, ТекущаяСрока.СерийныйНомер);
		ОписаниеОповещениеПриЗавершении = Новый ОписаниеОповещения("RFID_ОперацияЗавершение", ЭтотОбъект);
		МенеджерОборудованияКлиент.НачатьЗаписьДанныхВМеткуRFID(ОписаниеОповещениеПриЗавершении, УникальныйИдентификатор, СчитывательRFID, ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура RFID_ЗаписатьВМеткуUserMemory(Команда)
	
	Если Не ЗначениеЗаполнено(СчитывательRFID) Тогда
		ТекстСообщения = НСтр("ru='Не выбран считыватель RFID!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ТекущаяСрока = Элементы.МеткиRFID.ТекущиеДанные;
	Если ТекущаяСрока <> Неопределено Тогда
		ПараметрыЗаписи = МенеджерОборудованияКлиент.ПараметрыЗаписиМеткиRFID();
		ПараметрыЗаписи.TID = ТекущаяСрока.TID;
		ПараметрыЗаписи.EPC = ТекущаяСрока.EPC;
		ПараметрыЗаписи.БанкПамяти = "USER";
		ПараметрыЗаписи.Данные = МенеджерОборудованияКлиентСервер.ПреобразоватьСтрокуВHEX(ТекущаяСрока.UserMemory);
		ОписаниеОповещениеПриЗавершении = Новый ОписаниеОповещения("RFID_ОперацияЗавершение", ЭтотОбъект);
		МенеджерОборудованияКлиент.НачатьЗаписьДанныхВМеткуRFID(ОписаниеОповещениеПриЗавершении, УникальныйИдентификатор, СчитывательRFID, ПараметрыЗаписи);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ККМOffline

&НаКлиенте
Процедура ТестированиеОборудованияПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	//Если ТекущаяСтраница = Элементы.РаботаСККМOffline Тогда
	//	
	//	Если ЗначениеЗаполнено(ККМOffline) Тогда
	//		ОбработчикДрайвера = ПолучитьОбработчикДрайвераУстройства(ККМOffline);
	//		УстановитьВидимостьДоступностьИЗначенияДляЭлементовККМOffline(ОбработчикДрайвера = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1СККМOffline"));
	//	Иначе
	//		УстановитьВидимостьДоступностьИЗначенияДляЭлементовККМOffline(Ложь);
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ККМОффлайн1СКаталогВыгрузкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеОткрытиеКаталога", ЭтотОбъект);
	НачатьЗапускПриложения(ОписаниеОповещения,ККМOfflineКаталогВыгрузки);
	
КонецПроцедуры

&НаКлиенте
Процедура ККМОффлайн1СКаталогЗагрузкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеОткрытиеКаталога", ЭтотОбъект);
	НачатьЗапускПриложения(ОписаниеОповещения,ККМOfflineКаталогЗагрузки);
	
КонецПроцедуры

&НаКлиенте
Процедура ККМOfflineНоменклатураПриАктивизацииСтроки(Элемент)
	УстановитьДоступностьКнопокДобавленияТоваровККМОффлайн1С();
КонецПроцедуры

&НаКлиенте
Процедура ККМOfflineНоменклатураИмеетХарактеристикиПриИзменении(Элемент)
	УстановитьДоступностьКнопокДобавленияТоваровККМОффлайн1С();
КонецПроцедуры

&НаКлиенте
Процедура ККМOfflineНоменклатураИмеетУпаковкиПриИзменении(Элемент)
	УстановитьДоступностьКнопокДобавленияТоваровККМОффлайн1С();
КонецПроцедуры

&НаКлиенте
Процедура ККМOfflineОтчетыПриАктивизацииСтроки(Элемент)
	УстановитьОтборПоСмене();
КонецПроцедуры

&НаКлиенте
Процедура РасширеннаяЗагрузкаПриИзменении(Элемент)
	УстановитьВидимостьРасширеннойЗагрузки();
	УстановитьОтборПоСмене();
КонецПроцедуры

&НаКлиенте
Процедура РасширеннаяВыгрузкаПриИзменении(Элемент)
	
	Если ККМOfflineРасширеннаяВыгрузка Тогда
		Элементы.СтраницыККМOfflineВыгрузка.ТекущаяСтраница = Элементы.СтраницаККМOfflineРасширеннаяВыгрузка;
	Иначе
		
		Элементы.СтраницыККМOfflineВыгрузка.ТекущаяСтраница = Элементы.СтраницаККМOfflineОбычнаяВыгрузка;
	КонецЕсли;
	
	ОбработчикДрайвера = ПолучитьОбработчикДрайвераУстройства(ККМOffline);
	УстановитьВидимостьДоступностьИЗначенияДляЭлементовККМOffline(ОбработчикДрайвера = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1СККМOffline"));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормыТСД

&НаКлиенте
Процедура ТСД_ОперацияЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения.Результат И РезультатВыполнения.Свойство("ТаблицаТоваров") Тогда
		ТаблицаЗагрузкиИзТСД.Очистить();
		Для Каждого Позиция Из РезультатВыполнения.ТаблицаТоваров Цикл
			НоваяСтрока = ТаблицаЗагрузкиИзТСД.Добавить();
			НоваяСтрока.Штрихкод   = Позиция.Штрихкод;
			НоваяСтрока.Количество = Позиция.Количество;
			НоваяСтрока.МаркаАлкогольнойПродукции = ?(Позиция.Свойство("ШтрихкодМаркиАлкогольнойПродукции"), Позиция.ШтрихкодМаркиАлкогольнойПродукции, "");
			НоваяСтрока.СерийныйНомерАлкогольнойПродукции = ?(Позиция.Свойство("СерийныйНомерАлкогольнойПродукции"), Позиция.СерийныйНомерАлкогольнойПродукции, "");
		КонецЦикла;
	КонецЕсли;
	
	ТекстСообщения = ?(РезультатВыполнения.Результат, НСтр("ru='Операция выполнена успешна.'"), РезультатВыполнения.ОписаниеОшибки);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
	Элементы.РаботаСТСД.Доступность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ТСД_ОчиститьТаблицу(Команда)
	
	ТаблицаЗагрузкиИзТСД.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ТСД_ЗагрузитьБезПодключения(Команда)
	
	Элементы.РаботаСТСД.Доступность = Ложь;
	
	ТаблицаЗагрузкиИзТСД.Очистить();
	ОповещенияПриЗагрузкеИзТСД = Новый ОписаниеОповещения("ТСД_ОперацияЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(ОповещенияПриЗагрузкеИзТСД, УникальныйИдентификатор, ТСДСворачиватьДанныеПриЗагрузке);
	
КонецПроцедуры

&НаКлиенте
Процедура ТСД_ВыгрузитьБезПодключенияВыполнить(Команда)
	
	Элементы.РаботаСТСД.Доступность = Ложь;
	
	ТаблицаТСД = Новый Массив;
	Для каждого текСтрока Из ТаблицаЗагрузкиИзТСД Цикл
		
		НоваяСтрока = Новый Структура;
		
		НоваяСтрока.Вставить("Штрихкод",					текСтрока.Штрихкод);
		НоваяСтрока.Вставить("Номенклатура",				текСтрока.Номенклатура);
		НоваяСтрока.Вставить("ЕдиницаИзмерения",			текСтрока.ЕдиницаИзмерения);
		НоваяСтрока.Вставить("ХарактеристикаНоменклатуры",	текСтрока.ХарактеристикаНоменклатуры);
		НоваяСтрока.Вставить("СерияНоменклатуры",			текСтрока.СерияНоменклатуры);
		НоваяСтрока.Вставить("Качество",					текСтрока.Качество);
		НоваяСтрока.Вставить("Цена",						текСтрока.Цена);
		НоваяСтрока.Вставить("Количество",					текСтрока.Количество);
		
		ТаблицаТСД.Добавить(НоваяСтрока);
		
	КонецЦикла;
	
	ОповещенияПриВыгрузкеВТСД = Новый ОписаниеОповещения("ТСД_ОперацияЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьВыгрузкуДанныеВТСД(ОповещенияПриВыгрузкеВТСД, УникальныйИдентификатор, ТаблицаТСД, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ТСД_ОчиститьТовары(Команда)
	
	Элементы.РаботаСТСД.Доступность = Ложь;
	
	ОповещенияПриЗавершении = Новый ОписаниеОповещения("ТСД_ОперацияЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьОчисткуДанныеВТСД(ОповещенияПриЗавершении, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ТСД_ЗаполнитьБазуДемоДанными(Команда)
	
	ТСД_ЗаполнитьДемоДанные(50);
	
КонецПроцедуры

&НаКлиенте
Процедура ТСД_ЗаполнитьБазуДемоДанными1000(Команда)
	
	ТСД_ЗаполнитьДемоДанные(1000);
	
КонецПроцедуры

&НаКлиенте
Процедура ТСД_ЗаполнитьДемоДанные(Количество)
	
	// Формирование тестовых данных.
	Для Итератор = 1 По Количество Цикл
		Строка = ТаблицаЗагрузкиИзТСД.Добавить();
		Строка.Штрихкод = ТекущийПЛУ;
		Строка.Номенклатура = "Наименование товара " + Строка(ТекущийПЛУ);	
		Строка.ЕдиницаИзмерения = "Штука";
		Строка.ХарактеристикаНоменклатуры = "Цвет" + Строка(ТекущийПЛУ);
		Строка.СерияНоменклатуры  = "Серия" + Строка(ТекущийПЛУ); 
		Строка.Качество  = "Качество"; 
		Строка.Цена = ТекущийПЛУ + 11.20;
		Строка.Количество = ТекущийПЛУ;
		ТекущийПЛУ = ТекущийПЛУ + 1;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормыДисплеиПокупателя

&НаКлиенте
Процедура ДП_ВыполнитьЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ТекстСообщения = ?(РезультатВыполнения.Результат, НСтр("ru='Операция завершена.'"), РезультатВыполнения.ОписаниеОшибки);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДП_ВывестиТекстВыполнить()
	
	Если Не ЗначениеЗаполнено(Дисплей) Тогда
		ТекстСообщения = НСтр("ru='Оборудование не выбрано!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещениеПриЗавершении = Новый ОписаниеОповещения("ДП_ВыполнитьЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьВыводИнформацииНаДисплейПокупателя(ОписаниеОповещениеПриЗавершении, УникальныйИдентификатор, Дисплей, ДПТекст); 
	
КонецПроцедуры

&НаКлиенте
Процедура ДП_ОчиститьТекстВыполнить()
	
	Если Не ЗначениеЗаполнено(Дисплей) Тогда
		ТекстСообщения = НСтр("ru='Оборудование не выбрано!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещениеПриЗавершении = Новый ОписаниеОповещения("ДП_ВыполнитьЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьОчисткуДисплеяПокупателя(ОписаниеОповещениеПриЗавершении, УникальныйИдентификатор, Дисплей); 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормыЭлектронныеВесы

&НаКлиенте
Процедура ЭВ_ПолучитьВесВыполнитьЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Элементы.РаботаВесовоеОборудование.Доступность = Истина;
	
	Если РезультатВыполнения.Результат Тогда
		
		ТекстСообщения = НСтр("ru='Операция завершена.'");
		Если РезультатВыполнения.Вес = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Электронные весы вернули нулевой вес.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Вес = 0;
		Иначе
			Вес = РезультатВыполнения.Вес;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭВ_ТарироватьВыполнить(Команда)
	
	Если Не ЗначениеЗаполнено(Весы) Тогда
		ТекстСообщения = НСтр("ru='Оборудование не выбрано!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Элементы.РаботаВесовоеОборудование.Доступность = Ложь;
	
	ОписаниеОповещениеПриЗавершении = Новый ОписаниеОповещения("ЭВ_ПолучитьВесВыполнитьЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьПолученияВесаСЭлектронныхВесов(ОписаниеОповещениеПриЗавершении, УникальныйИдентификатор, Весы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭВ_ПолучитьВесВыполнить(Команда)
	
	Если Не ЗначениеЗаполнено(Весы) Тогда
		ТекстСообщения = НСтр("ru='Оборудование не выбрано!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Элементы.РаботаВесовоеОборудование.Доступность = Ложь;
	
	ОписаниеОповещениеПриЗавершении = Новый ОписаниеОповещения("ЭВ_ПолучитьВесВыполнитьЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьПолученияВесаСЭлектронныхВесов(ОписаниеОповещениеПриЗавершении, УникальныйИдентификатор, Весы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормыВесыСПечатьюЭтикеток

&НаКлиенте
Процедура ОперацияБезПодключенияЗавершение(Результат, Параметры) Экспорт
	
	Элементы.РаботаВесовоеОборудование.Доступность = Истина;
	
	ОчиститьСообщения();
	
	Если Результат.Результат Тогда
		Лог = "Операция завершилась успешно." + Символы.ПС;
	Иначе
		Лог = Результат.ОписаниеОшибки + Символы.ПС;
	КонецЕсли;
	
	ОтветОтУстройства = Лог + ОтветОтУстройства;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивБазыТоваровВесовСПечатьюЭтикеток()

	МассивВыгрузки = Новый Массив();
	
	Для Каждого СтрокаТЧ Из ТаблицаТоваровВесовСПечатьюЭтикеток Цикл
		
		ЭлементМассива = Новый Структура;
		
		ЭлементМассива.Вставить("PLU",					СтрокаТЧ.PLU);
		ЭлементМассива.Вставить("Код",					СтрокаТЧ.Код);
		ЭлементМассива.Вставить("Штрихкод",				СтрокаТЧ.Штрихкод);
		ЭлементМассива.Вставить("Наименование",			СтрокаТЧ.Наименование);
		ЭлементМассива.Вставить("НаименованиеПолное",	СтрокаТЧ.НаименованиеПолное);
		ЭлементМассива.Вставить("Цена",					СтрокаТЧ.Цена);
		ЭлементМассива.Вставить("ОписаниеТовара",		СтрокаТЧ.ОписаниеТовара);
		ЭлементМассива.Вставить("СрокХранения",			СтрокаТЧ.СрокХранения);
		
		МассивВыгрузки.Добавить(ЭлементМассива);
		
	КонецЦикла;

	Возврат МассивВыгрузки;

КонецФункции

&НаКлиенте
Процедура ВесыOffline_Выгрузить(Команда)
	
	Если Не ЗначениеЗаполнено(ВесыСПечатьюЭтикеток) Тогда
		ТекстСообщения = НСтр("ru='Оборудование не выбрано!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Элементы.РаботаВесовоеОборудование.Доступность = Ложь;
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ОперацияБезПодключенияЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьВыгрузкуДанныеВВесыСПечатьюЭтикеток(ОповещениеПриЗавершении, УникальныйИдентификатор, ПолучитьМассивБазыТоваровВесовСПечатьюЭтикеток(), ВесыСПечатьюЭтикеток);
	
КонецПроцедуры

&НаКлиенте
Процедура ВесыOffline_ОчиститьБазу(Команда)
	
	Если Не ЗначениеЗаполнено(ВесыСПечатьюЭтикеток) Тогда
		ТекстСообщения = НСтр("ru='Оборудование не выбрано!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Элементы.РаботаВесовоеОборудование.Доступность = Ложь;
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ОперацияБезПодключенияЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьОчисткуТоваровВВесахСПечатьюЭтикеток(ОповещениеПриЗавершении, УникальныйИдентификатор, ВесыСПечатьюЭтикеток);
	
КонецПроцедуры

&НаКлиенте
Процедура ВесыOffline_ЗаполнитьБазуДемоДанными(Команда)
	
	ВесыOffline_ЗаполнитьДемоДанные(50);
	
КонецПроцедуры

&НаКлиенте
Процедура ВесыOffline_ЗаполнитьБазуДемоДанными1000(Команда)
	
	ВесыOffline_ЗаполнитьДемоДанные(1000);
	
КонецПроцедуры

&НаКлиенте
Процедура ВесыOffline_ЗаполнитьДемоДанные(Количество)
	
	// Формирование тестовых данных.
	Для Итератор = 1 По Количество Цикл
		Строка = ТаблицаТоваровВесовСПечатьюЭтикеток.Добавить();
		Строка.PLU = ТекущийПЛУ;
		Строка.Наименование = "Наименование товара " + Строка(ТекущийПЛУ);
		Строка.Цена = ТекущийПЛУ + 11.01;
		Строка.Код = ТекущийПЛУ;
		Строка.СрокХранения = 4;
		Строка.ОписаниеТовара = "Описание товара " + Строка(ТекущийПЛУ);
		ТекущийПЛУ = ТекущийПЛУ + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВесыOffline_ОчиститьДемоДанные(Команда)
	
	ТаблицаТоваровВесовСПечатьюЭтикеток.Очистить();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормыЭТ

&НаКлиенте
Процедура ЭТ_ВыполнитьОперациюЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Элементы.РаботаСЭТ.Доступность = Истина;
	
	Если РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru = 'Операция выполнена успешно.'");
		ЭТНомерСсылкиОперации = ?(РезультатВыполнения.Свойство("СсылочныйНомер"), РезультатВыполнения.СсылочныйНомер, "");
		ЭТНомерКарты = ?(РезультатВыполнения.Свойство("НомерКарты"), РезультатВыполнения.НомерКарты, "");
		ЭТНомерЧека = ?(РезультатВыполнения.Свойство("НомерЧекаЭТ"), РезультатВыполнения.НомерЧекаЭТ, "");
		ЭТКодАвторизации = ?(РезультатВыполнения.Свойство("КодАвторизации"), РезультатВыполнения.КодАвторизации, "");
	Иначе
		ТекстСообщения = РезультатВыполнения.ОписаниеОшибки;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭТ_ВыполнитьСверкуИтогов(Команда)
	
	Если Не ЗначениеЗаполнено(ЭТ) Тогда
		ТекстСообщения = НСтр("ru='Оборудование не выбрано!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;

	ОчиститьСообщения();
	Элементы.РаботаСЭТ.Доступность = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЭТ_ВыполнитьОперациюЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьВыполнениеСверкиИтоговНаЭквайринговомТерминале(ОписаниеОповещения, УникальныйИдентификатор, ЭТ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭТ_ВыполнитьОперацию(Команда)

	Если ЭТ.Пустая() Тогда
		ТекстСообщения = "ЭТ не выбран!";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	Элементы.РаботаСЭТ.Доступность = Ложь;
	
	ПараметрыОперации = МенеджерОборудованияКлиент.ПараметрыВыполненияЭквайринговойОперации();
	ПараметрыОперации.ТипТранзакции  = ТипЭквайринговойОперации;
	ПараметрыОперации.СуммаОперации  = ЭТСумма;
	ПараметрыОперации.НомерЧека      = ЭТНомерЧека;
	ПараметрыОперации.СсылочныйНомер = ЭТНомерСсылкиОперации;

	ОписаниеОповещения = Новый ОписаниеОповещения("ЭТ_ВыполнитьОперациюЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьВыполнениеОперацииНаЭквайринговомТерминале(ОписаниеОповещения, УникальныйИдентификатор, ЭТ, Неопределено, ПараметрыОперации); 
	
КонецПроцедуры

&НаКлиенте
Процедура ЭТ_НапечататьПоследнийСлипЧек(Команда)
	
	СлипЧек = глПодключаемоеОборудование.ПоследнийСлипЧек;
	Если Не ПустаяСтрока(СлипЧек) Тогда
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("ФУ_КомандаВыполнитьЗавершение", ЭтотОбъект);
		МенеджерОборудованияКлиент.НачатьПечатьТекста(ОповещениеПриЗавершении, УникальныйИдентификатор, СлипЧек);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Отсутствует последний чек.
		    |Возможно после запуска приложения операции по картам еще не проводились.'"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормыККМOffline

&НаКлиенте
Процедура ККМOfflineДобавитьНоменклатуру(Команда)
	
	НовыйЭлемент = ККМOfflineНоменклатура.ПолучитьЭлементы().Добавить();
	НовыйЭлемент.ТипОбъекта = "Номенклатура";
	НовыйЭлемент.УникальныйИдентификатор = Строка(Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ККМOfflineДобавитьХарактеристику(Команда)
	
	ТекущиеДанные = Элементы.ККМOfflineНоменклатура.ТекущиеДанные;
	Если ТекущиеДанные<>Неопределено Тогда
		НовыйЭлемент = ТекущиеДанные.ПолучитьЭлементы().Добавить();
		НовыйЭлемент.ТипОбъекта = "Характеристика";
		ТекущиеДанные.ИмеетХарактеристики = Истина;
		НовыйЭлемент.УникальныйИдентификатор = Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ККМOfflineДобавитьУпаковку(Команда)
	
	ТекущиеДанные = Элементы.ККМOfflineНоменклатура.ТекущиеДанные;
	Если ТекущиеДанные<>Неопределено Тогда
		НовыйЭлемент = ТекущиеДанные.ПолучитьЭлементы().Добавить();
		НовыйЭлемент.ТипОбъекта = "Упаковка";
		ТекущиеДанные.ИмеетУпаковки = Истина;
		НовыйЭлемент.УникальныйИдентификатор = Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ККМOfflineЗагрузитьОтчет(Команда)
	
	ККМOfflineОтчеты.Очистить();
	ККМOfflineОтчетПродажи.Очистить();
	ККМOfflineОтчетОплаты.Очистить();
	ККМOfflineОтчетВскрытияТары.Очистить();
		
	Если ККМOffline.Пустая() Тогда
		ТекстСообщения = НСтр("ru='ККМ Offline не выбрана!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ИдентификаторУстройства = ?(ПустаяСтрока(ККМOffline), Неопределено, ККМOffline);
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ЗагрузитьОтчетЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьЗагрузкуОтчетаОРозничныхПродажахИзККМOffline(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства, Ложь, ККМOfflineРасширеннаяЗагрузка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОтчетЗавершение(Результат, Параметры) Экспорт
	
	Если Результат.Результат Тогда
		Лог = "Операция завершилась успешно." + Символы.ПС;
	Иначе
		Лог = Результат.ОписаниеОшибки + Символы.ПС;
	КонецЕсли;
	
	ОтветОтУстройства = Лог + ОтветОтУстройства;
	
	Если НЕ Результат.Результат Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.РасширеннаяЗагрузка Тогда
		Данные = Результат.ТаблицаТоваров;
		
		// Обходим отчеты.
		Для Каждого ТекОтчет Из Данные Цикл
			
			НовыйОтчет = ККМOfflineОтчеты.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйОтчет, ТекОтчет, "НомерСмены, ДатаОткрытияСмены, ДатаЗакрытияСмены");
			
			Если ЗначениеЗаполнено(ТекОтчет.НомерСмены) Тогда
				НовыйОтчет.НомерСмены = ТекОтчет.НомерСмены;
			Иначе
				НовыйОтчет.НомерСмены = "Неопределен";
			КонецЕсли;
				
			// Перебираем товары.
			Для Каждого ТекТовар Из ТекОтчет.Товары Цикл
				
				НоваяПродажа = ККМOfflineОтчетПродажи.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяПродажа, ТекТовар);
				Если ЗначениеЗаполнено(НовыйОтчет.НомерСмены) Тогда
					НоваяПродажа.НомерСмены = НовыйОтчет.НомерСмены;
				Иначе
					НоваяПродажа.НомерСмены = "Неопределен";
				КонецЕсли;
				НоваяПродажа.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор());
				
			КонецЦикла;
			
			// Перебираем оплаты.
			Для Каждого ТекОплата Из ТекОтчет.Оплаты Цикл
				
				НоваяОплата = ККМOfflineОтчетОплаты.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяОплата, ТекОплата);
				Если ЗначениеЗаполнено(НовыйОтчет.НомерСмены) Тогда
					НоваяОплата.НомерСмены = НовыйОтчет.НомерСмены;
				Иначе
					НоваяОплата.НомерСмены = "Неопределен";
				КонецЕсли;
				
			КонецЦикла;
			
			// Перебираем вскрытия тары.
			Для Каждого ТекВскрытие Из ТекОтчет.ВскрытияТары Цикл
				
				НовоеВскрытие = ККМOfflineОтчетВскрытияТары.Добавить();
				
				ЗаполнитьЗначенияСвойств(НовоеВскрытие, ТекВскрытие);
				
				Если ЗначениеЗаполнено(НовыйОтчет.НомерСмены) Тогда
					НовоеВскрытие.НомерСмены = НовыйОтчет.НомерСмены;
				Иначе
					НовоеВскрытие.НомерСмены = "Неопределен";
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		
	Иначе
		Данные = Результат.ТаблицаТоваров;
		
		Для каждого ТекТовар Из Данные Цикл
			
			НоваяПродажа = ККМOfflineОтчетПродажи.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяПродажа, ТекТовар);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ККМOfflineОтметитьОбработкуОтчета(Команда)
	
	Если ККМOffline.Пустая() Тогда
		ТекстСообщения = НСтр("ru='ККМ Offline не выбрана!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ИдентификаторУстройства = ?(ПустаяСтрока(ККМOffline), Неопределено, ККМOffline);
	МенеджерОборудованияКлиент.НачатьВыставитьФлагОтчетЗагруженККМOffline(УникальныйИдентификатор, ИдентификаторУстройства);
	
КонецПроцедуры

&НаКлиенте
Процедура ККМOfflineПолнаяВыгрузка(Команда)
	
	Если ККМOffline.Пустая() Тогда
		ТекстСообщения = НСтр("ru='ККМ Offline не выбрана!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ЕстьДанныеДляВыгрузки = Истина;
	
	Если ККМOfflineРасширеннаяВыгрузка Тогда
		КоличествоЭлементов = ККМOfflineГруппыНоменклатуры.Количество()
						+ ККМOfflineНоменклатура.ПолучитьЭлементы().Количество();
	Иначе
		КоличествоЭлементов = ККМOfflineНоменклатура.ПолучитьЭлементы().Количество();
	КонецЕсли;
	
	Если КоличествоЭлементов = 0 Тогда
		ТекстСообщения = НСтр("ru='Таблица прайс-листа пуста.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ЕстьДанныеДляВыгрузки = Ложь;
	КонецЕсли;
	
	Если НЕ ЕстьДанныеДляВыгрузки Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПрайсЛиста = МенеджерОборудованияСервисыКлиентСервер.ПолучитьСтруктуруПрайсЛиста();
	
	ЗаполнитьСтруктуруПрайсЛистаККМOffline(СтруктураПрайсЛиста, Ложь);
	
	ИдентификаторУстройства = ?(ПустаяСтрока(ККМOffline), Неопределено, ККМOffline);
	
	ОбработчикДрайвера = ПолучитьОбработчикДрайвераУстройства(ККМOffline);
	
	Если ККМOfflineРасширеннаяВыгрузка Тогда
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("ККМOfflineПолнаяВыгрузкаЗавершение", ЭтотОбъект);
	Иначе
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("ОперацияБезПодключенияЗавершение", ЭтотОбъект);
	КонецЕсли;
	
	МенеджерОборудованияКлиент.НачатьВыгрузкуДанныеВККМOffline(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства,
			СтруктураПрайсЛиста, Ложь,, ККМOfflineРасширеннаяВыгрузка);
		
КонецПроцедуры

&НаКлиенте
Процедура ККМOfflineПолнаяВыгрузкаЗавершение(Результат, Параметры) Экспорт
	
	Лог = "";
	
	ОбработчикДрайвера = ПолучитьОбработчикДрайвераУстройства(ККМOffline);
	
	Если Результат.Результат Тогда
		
		СтруктураНастроек = МенеджерОборудованияСервисыКлиентСервер.ПолучитьСтруктуруНастроек();
		
		// Демо
		СтруктураНастроек.НазваниеОрганизации = ККМOfflineНазваниеОрганизации;
		СтруктураНастроек.ИНН                 = ККМOfflineИНН;
		СтруктураНастроек.Налогообложение     = ККМOfflineНалогообложение;
		СтруктураНастроек.ИспользоватьСкидки  = ККМOfflineИспользоватьСкидкиНаценки;
		СтруктураНастроек.ИспользоватьБанковскиеКарты  = ККМOfflineИспользоватьОплатуПлатежнымиКартами;
		
		Для Каждого СтрокаВидыОплаты Из ККМOfflineВидыОплаты Цикл
			ЗаписьВидОплаты = МенеджерОборудованияСервисыКлиентСервер.ПолучитьСтруктуруЗаписиМассиваВидыОплаты();
			ЗаполнитьЗначенияСвойств(ЗаписьВидОплаты, СтрокаВидыОплаты);
			СтруктураНастроек.ВидыОплаты.Добавить(ЗаписьВидОплаты);
		КонецЦикла;
		
		Если (ОбработчикДрайвера = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1СККМOffline") И ККМOfflineНалогообложение = "Общая")
			ИЛИ (ОбработчикДрайвера <> ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1СККМOffline")) Тогда
			
			СформироватьСпискиНалоговИКомбинацийНалогов(СтруктураНастроек);
			
		КонецЕсли;
		
		// Демо конец
		
		ИдентификаторУстройства = ?(ПустаяСтрока(ККМOffline), Неопределено, ККМOffline);
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("ОперацияБезПодключенияЗавершение", ЭтотОбъект);
		МенеджерОборудованияКлиент.НачатьВыгрузкуНастроекВККМOffline(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства,	СтруктураНастроек);
		
	Иначе
		
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("ОперацияБезПодключенияЗавершение", ЭтотОбъект);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ККМOfflineПолнаяОчистка(Команда)
	
	Если ККМOffline.Пустая() Тогда
		ТекстСообщения = НСтр("ru='ККМ Offline не выбрана!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ИдентификаторУстройства = ?(ПустаяСтрока(ККМOffline), Неопределено, ККМOffline);
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ККМOfflineОчисткаТоваровЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьОчисткуТоваровВККМOffline(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства);
	
КонецПроцедуры

&НаКлиенте
Процедура ККМOfflineОчисткаТоваровЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат.Результат Тогда
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("ОперацияБезПодключенияЗавершение", ЭтотОбъект);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
	Иначе
		ИдентификаторУстройства = ?(ПустаяСтрока(ККМOffline), Неопределено, ККМOffline);
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("ОперацияБезПодключенияЗавершение", ЭтотОбъект);
		МенеджерОборудованияКлиент.НачатьОчисткуНастроекВККМOffline(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ККМOfflineВыгрузкаНастроек(Команда)
	
	СтруктураНастроек = МенеджерОборудованияСервисыКлиентСервер.ПолучитьСтруктуруНастроек();
	
	// Демо
	СтруктураНастроек.НазваниеОрганизации = ККМOfflineНазваниеОрганизации;
	СтруктураНастроек.ИНН                 = ККМOfflineИНН;
	СтруктураНастроек.Налогообложение     = ККМOfflineНалогообложение;
	СтруктураНастроек.ИспользоватьСкидки  = ККМOfflineИспользоватьСкидкиНаценки;
	СтруктураНастроек.ИспользоватьБанковскиеКарты  = ККМOfflineИспользоватьОплатуПлатежнымиКартами;
	
	Для Каждого СтрокаВидыОплаты Из ККМOfflineВидыОплаты Цикл
		ЗаписьВидОплаты = МенеджерОборудованияСервисыКлиентСервер.ПолучитьСтруктуруЗаписиМассиваВидыОплаты();
		ЗаполнитьЗначенияСвойств(ЗаписьВидОплаты, СтрокаВидыОплаты);
		СтруктураНастроек.ВидыОплаты.Добавить(ЗаписьВидОплаты);
	КонецЦикла;
	
	ОбработчикДрайвера = ПолучитьОбработчикДрайвераУстройства(ККМOffline);
	
	Если (ОбработчикДрайвера = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1СККМOffline") И ККМOfflineНалогообложение = "Общая")
		ИЛИ (ОбработчикДрайвера <> ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1СККМOffline")) Тогда
		
		// Формируем список налогов.
		СформироватьСпискиНалоговИКомбинацийНалогов(СтруктураНастроек);
				
	КонецЕсли;
	// Демо конец
	
	
	ИдентификаторУстройства = ?(ПустаяСтрока(ККМOffline), Неопределено, ККМOffline);
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ОперацияБезПодключенияЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьВыгрузкуНастроекВККМOffline(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства,
		СтруктураНастроек);
		
КонецПроцедуры

&НаКлиенте
Процедура ККМOfflineВыгрузкаИзмененныхТоваров(Команда)
	
	Если ККМOffline.Пустая() Тогда
		ТекстСообщения = НСтр("ru='ККМ Offline не выбрана!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если ККМOfflineРасширеннаяВыгрузка Тогда
		КоличествоЭлементов = ККМOfflineГруппыНоменклатуры.Количество()
						+ ККМOfflineНоменклатура.ПолучитьЭлементы().Количество();
	Иначе
		КоличествоЭлементов = ККМOfflineНоменклатура.ПолучитьЭлементы().Количество();
	КонецЕсли;
					
	Если КоличествоЭлементов = 0 Тогда
		ТекстСообщения = НСтр("ru='Таблица прайс-листа пуста.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	СтруктураПрайсЛиста = МенеджерОборудованияСервисыКлиентСервер.ПолучитьСтруктуруПрайсЛиста();
	
	ЗаполнитьСтруктуруПрайсЛистаККМOffline(СтруктураПрайсЛиста, Истина);
	
	ИдентификаторУстройства = ?(ПустаяСтрока(ККМOffline), Неопределено, ККМOffline);
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ОперацияБезПодключенияЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьВыгрузкуДанныеВККМOffline(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства,
			СтруктураПрайсЛиста, Истина, , ККМOfflineРасширеннаяВыгрузка);
			
КонецПроцедуры

&НаКлиенте
Процедура ККМOfflineДобавитьНоменклатуруИзСправочника(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ККМOfflineДобавитьНоменклатуруИзСправочникаЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Справочник._ДемоНоменклатура.Форма.ФормаВыбора",, ЭтотОбъект,,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ККМOfflineДобавитьНоменклатуруИзСправочникаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    Номенклатура = Результат;
	
	ДобавитьСтроку(Номенклатура);
					
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормыПринтерЭтикеток

&НаСервере
Функция ПолучитьРезультатВыполненияЗапроса(СКД)
	
	МассивНоменклатуры = Новый Массив;
	МассивНоменклатуры.Добавить(НоменклатураДляПечатиЭтикетки);
	
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
    Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД));
	Компоновщик.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
	
	Настройки = Компоновщик.Настройки;
	Параметр = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("МассивНоменклатуры"));
	Параметр.Значение = МассивНоменклатуры;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	ПКД = Новый ПроцессорКомпоновкиДанных;
    ПКД.Инициализировать(КомпоновщикМакета.Выполнить(СКД, Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений")));
	
	ТЗ = Новый ТаблицаЗначений;
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
    ПроцессорВывода.УстановитьОбъект(ТЗ);
    ПроцессорВывода.Вывести(ПКД);

    Возврат ТЗ;
	
КонецФункции

&НаСервере
Функция СформироватьДанныеДляПечати()
	
	СхемаКомпоновкиДанных = Справочники._ДемоЭтикеткиИЦенники.ПолучитьМакет("ПоляШаблонаЭтикетки");
	АдресХранилищаСКД = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	СКД = ПолучитьИзВременногоХранилища(АдресХранилищаСКД);
	РезультатВыполненияЗапроса = ПолучитьРезультатВыполненияЗапроса(СКД);
	
	Поля = Новый Массив;
	
	Если РезультатВыполненияЗапроса.Количество()>0 Тогда
		Источник = РезультатВыполненияЗапроса[0];
		Для Каждого ТекПоле Из Этикетка.Поля Цикл
			Если ТекПоле.ТипЗаполнения = "Parameter" Тогда
				НовоеПоле = Новый Структура;
				НовоеПоле.Вставить("ИмяПоля", ТекПоле.Наименование);
				
				Попытка
					Значение = Вычислить("Источник." + ТекПоле.Значение);
				Исключение
					Значение = "";
				КонецПопытки;
				
				Если ТипЗнч(Значение) = Тип("ХранилищеЗначения") Тогда
					Значение = Значение.Получить();
					Если ТипЗнч(Значение) = Тип("ДвоичныеДанные") Тогда
						Значение = Base64Строка(Значение);
					Иначе
						Значение = Строка(Значение);
					КонецЕсли;
				КонецЕсли;
				Если ЗначениеЗаполнено(Значение) Тогда
					НовоеПоле.Вставить("Значение", Значение);
				Иначе
					Если ЗначениеЗаполнено(ТекПоле.ЗначениеПоУмолчанию) Тогда
						НовоеПоле.Вставить("Значение", ТекПоле.ЗначениеПоУмолчанию);
					Иначе
						НовоеПоле.Вставить("Значение", "");
					КонецЕсли;
				КонецЕсли;
				Поля.Добавить(НовоеПоле);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	МассивЭтикеток = Новый Массив;
	НоваяЭтикетка = Новый Структура;
	НоваяЭтикетка.Вставить("Количество", 1);
	НоваяЭтикетка.Вставить("Поля", Поля);
	МассивЭтикеток.Добавить(НоваяЭтикетка);
	
	Возврат Новый Структура("МассивЭтикеток, XMLОписаниеМакета", МассивЭтикеток, Этикетка.XMLОписаниеМакета);
	
КонецФункции

&НаКлиенте
Процедура ПЭ_ПечатьЗавершение(РезультатПечати, ДополнительныеПараметры) Экспорт
	
	Если РезультатПечати.Результат Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Печать завершена.'"));
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПечати.ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПЭ_Печать(Команда)
	
	ДанныеЗаполнены = Истина;
	
	Если Не ЗначениеЗаполнено(Этикетка) Тогда
		ТекстСообщения = НСтр("ru='Не выбрана этикетка для печати!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ДанныеЗаполнены = Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НоменклатураДляПечатиЭтикетки) Тогда
		ТекстСообщения = НСтр("ru='Не выбрана номенклатура для печати этикетки!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ДанныеЗаполнены = Ложь;
	КонецЕсли;
	
	Если ДанныеЗаполнены Тогда
		ДанныеДляПечати = СформироватьДанныеДляПечати();
		ОписаниеОповещениеПриЗавершенииПечати = Новый ОписаниеОповещения("ПЭ_ПечатьЗавершение", ЭтотОбъект);
		МенеджерОборудованияКлиент.НачатьПечатьЭтикеток(ОписаниеОповещениеПриЗавершенииПечати, УникальныйИдентификатор, ДанныеДляПечати.XMLОписаниеМакета, ДанныеДляПечати.МассивЭтикеток, ПринтерЭтикеток);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПЭ_Инициализация(Команда)
	
	Если ПринтерЭтикеток.Пустая() Тогда
		ТекстСообщения = НСтр("ru='Принтер печати этикеток не выбран!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещениеПриЗавершенииПечати = Новый ОписаниеОповещения("ПЭ_ПечатьЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьИнициализацияПринтераЭтикеток(ОписаниеОповещениеПриЗавершенииПечати, УникальныйИдентификатор, ПринтерЭтикеток);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ДобавитьСтроку(Номенклатура)
	
	НоваяСтрока = ККМOfflineНоменклатура.ПолучитьЭлементы().Добавить();
	
	НоваяСтрока.Код						= Формат(Номенклатура.SKU, "ЧГ=0");
	НоваяСтрока.КодГруппы				= ?(ККМOfflineРасширеннаяВыгрузка И ЗначениеЗаполнено(Номенклатура.Родитель), Формат(Номенклатура.Родитель.SKU, "ЧГ=0"), "");
	НоваяСтрока.Наименование			= Номенклатура.Наименование;
	НоваяСтрока.ИмеетХарактеристики		= Ложь;
	НоваяСтрока.ИмеетУпаковки			= Ложь;
	НоваяСтрока.Артикул					= Номенклатура.Артикул;
	НоваяСтрока.ЕдиницаИзмерения		= Номенклатура.ЕдиницаИзмерения;
	НоваяСтрока.Весовой					= Номенклатура.Весовой;
	НоваяСтрока.Цена					= Номенклатура.Цена;
	НоваяСтрока.Остаток					= 0;
	НоваяСтрока.Услуга					= Ложь;
	НоваяСтрока.ТипОбъекта				= "Номенклатура";
	НоваяСтрока.Алкоголь				= Номенклатура.Алкоголь;
	НоваяСтрока.УникальныйИдентификатор	= Строка(Номенклатура.УникальныйИдентификатор());
	
	Если НоваяСтрока.Алкоголь Тогда
		НоваяСтрока.Маркируемый					= Номенклатура.Маркируемый;
		НоваяСтрока.КодВидаАлкогольнойПродукции	= Номенклатура.КодАлкогольнойПродукции;
		НоваяСтрока.Крепость					= Номенклатура.Крепость;
		НоваяСтрока.ИННПроизводителя			= Номенклатура.ИННПроизводителя;
		НоваяСтрока.КПППроизводителя			= Номенклатура.КПППроизводителя;
	КонецЕсли;
	
	Если Номенклатура.СтавкаНДС = ПредопределенноеЗначение("Перечисление._ДемоСтавкиНДС.НДС18") Тогда
		НоваяСтрока.СтавкаНДС = 18;
	ИначеЕсли Номенклатура.СтавкаНДС = ПредопределенноеЗначение("Перечисление._ДемоСтавкиНДС.НДС10") Тогда
		НоваяСтрока.СтавкаНДС = 10;
	Иначе
		НоваяСтрока.СтавкаНДС = 0;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	_ДемоШтрихкоды.Штрихкод
	               |ИЗ
	               |	РегистрСведений._ДемоШтрихкоды КАК _ДемоШтрихкоды
	               |ГДЕ
	               |	_ДемоШтрихкоды.Владелец = &Номенклатура";
				   
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		НоваяСтрока.Штрихкод = Выборка.Штрихкод;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДополнитьИмяКаталогаСлешем(Знач ИмяКаталога)
	
	Если Найти(ИмяКаталога, "ftp") > 0 Тогда
		Слеш = "/";
	Иначе
		Слеш = "\";
	КонецЕсли;
	
	Если НЕ Прав(ИмяКаталога,1) = Слеш Тогда
		ИмяКаталога = ИмяКаталога + Слеш;
	КонецЕсли;
	
	Возврат ИмяКаталога;
	
КонецФункции

&НаКлиенте
Функция ЗаполнитьСтруктуруПрайсЛистаККМOffline(СтруктураПрайсЛиста, ЧастичнаяВыгрузка=Истина)
	
	Если ККМOfflineРасширеннаяВыгрузка Тогда
		
		СтруктураПрайсЛиста.ПолнаяЗагрузка = НЕ ЧастичнаяВыгрузка;
		
		// Группы товаров.
		Для Каждого ГруппаТоваров Из ККМOfflineГруппыНоменклатуры Цикл
			
			ЗаписьГруппа = МенеджерОборудованияСервисыКлиентСервер.ПолучитьСтруктуруЗаписиМассиваГруппыТоваров();
			ЗаполнитьЗначенияСвойств(ЗаписьГруппа, ГруппаТоваров);
			
			СтруктураПрайсЛиста.ГруппыТоваров.Добавить(ЗаписьГруппа);
			
		КонецЦикла;
		
		// Товары.
		Для Каждого Номенклатура Из ККМOfflineНоменклатура.ПолучитьЭлементы() Цикл
			
			ЗаписьТовар = МенеджерОборудованияСервисыКлиентСервер.ПолучитьСтруктуруЗаписиМассиваТовары();
			ЗаполнитьЗначенияСвойств(ЗаписьТовар, Номенклатура);
			
			// Заполняем код налога в соответствии с выгруженными настройками.
			Если Номенклатура.СтавкаНДС = 18 Тогда
				ЗаписьТовар.КодНалога = 1;
			ИначеЕсли Номенклатура.СтавкаНДС = 10 Тогда
				ЗаписьТовар.КодНалога = 2;
			ИначеЕсли Номенклатура.СтавкаНДС = 0 Тогда
				ЗаписьТовар.КодНалога = 3;
			Иначе
				ЗаписьТовар.КодНалога = Неопределено;
			КонецЕсли;
			
			Если Номенклатура.ИмеетУпаковки Тогда
				
				Упаковки = Номенклатура.ПолучитьЭлементы();
				ЗаписьТовар.Упаковки = Новый Массив;
				
				Для Каждого Упаковка Из Упаковки Цикл
					ЗаписьУпаковка = МенеджерОборудованияСервисыКлиентСервер.ПолучитьСтруктуруЗаписиМассиваУпаковки();
					ЗаполнитьЗначенияСвойств(ЗаписьУпаковка, Упаковка);
					ЗаписьТовар.Упаковки.Добавить(ЗаписьУпаковка);
				КонецЦикла;
				
			ИначеЕсли Номенклатура.ИмеетХарактеристики Тогда
				
				Характеристики = Номенклатура.ПолучитьЭлементы();
				ЗаписьТовар.Характеристики = Новый Массив;
				
				Для Каждого Характеристика Из Характеристики Цикл
					
					ЗаписьХарактеристика = МенеджерОборудованияСервисыКлиентСервер.ПолучитьСтруктуруЗаписиМассиваХарактеристики();
					ЗаполнитьЗначенияСвойств(ЗаписьХарактеристика, Характеристика);
					
					Если Характеристика.ИмеетУпаковки Тогда
						
						Упаковки = Характеристика.ПолучитьЭлементы();
						ЗаписьХарактеристика.Упаковки = Новый Массив;
						
						Для Каждого Упаковка Из Упаковки Цикл
							ЗаписьУпаковка = МенеджерОборудованияСервисыКлиентСервер.ПолучитьСтруктуруЗаписиМассиваУпаковки();
							ЗаполнитьЗначенияСвойств(ЗаписьУпаковка, Упаковка);
							ЗаписьХарактеристика.Упаковки.Добавить(ЗаписьУпаковка);
						КонецЦикла;
						
					КонецЕсли;
					
					ЗаписьТовар.Характеристики.Добавить(ЗаписьХарактеристика);
				КонецЦикла;
				
			КонецЕсли;
			
			СтруктураПрайсЛиста.Товары.Добавить(ЗаписьТовар);
			
		КонецЦикла;
		
		
	Иначе
		
		СтруктураПрайсЛиста = Новый Массив;
		
		Для Каждого Номенклатура Из ККМOfflineНоменклатура.ПолучитьЭлементы() Цикл
			
			ЗаписьТовар = МенеджерОборудованияСервисыКлиентСервер.ПолучитьСтруктуруЗаписиМассиваТовары();
			
			ЗаписьТовар.Удалить("Весовой");
			
			ЗаполнитьЗначенияСвойств(ЗаписьТовар, Номенклатура);
			
			ЗаписьТовар.Вставить("ВесовойТовар", Номенклатура.Весовой);
			
			СтруктураПрайсЛиста.Добавить(ЗаписьТовар);
			
		КонецЦикла;
		
	КонецЕсли;
	
		
КонецФункции

&НаКлиенте
Процедура УстановитьДоступностьКнопокДобавленияТоваровККМОффлайн1С()
	
	ТекущиеДанные = Элементы.ККМOfflineНоменклатура.ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		
		ТекущаяСтрокаККМOfflineНоменклатура=Элементы.ККМOfflineНоменклатура.ТекущаяСтрока;
		
		Если ТекущиеДанные.ТипОбъекта = "Номенклатура" Тогда
			
			Элементы.ККМOfflineНоменклатураККМOfflineДобавитьХарактеристику.Доступность = ТекущиеДанные.ИмеетХарактеристики;
			Элементы.ККМOfflineНоменклатураККМOfflineДобавитьУпаковку.Доступность       = ТекущиеДанные.ИмеетУпаковки;
			
		ИначеЕсли ТекущиеДанные.ТипОбъекта = "Характеристика" Тогда
			Элементы.ККМOfflineНоменклатураККМOfflineДобавитьХарактеристику.Доступность = Ложь;
			Элементы.ККМOfflineНоменклатураККМOfflineДобавитьУпаковку.Доступность       = ТекущиеДанные.ИмеетУпаковки;
		Иначе
			Элементы.ККМOfflineНоменклатураККМOfflineДобавитьХарактеристику.Доступность = Ложь;
			Элементы.ККМOfflineНоменклатураККМOfflineДобавитьУпаковку.Доступность       = Ложь;
		КонецЕсли;
	Иначе
		
		Элементы.ККМOfflineНоменклатураККМOfflineДобавитьХарактеристику.Доступность = Ложь;
		Элементы.ККМOfflineНоменклатураККМOfflineДобавитьУпаковку.Доступность       = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтображаемыеНастройкиККМОффлайн1С();
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	СимволСлеш = ?(СтрНайти(Строка(СистемнаяИнформация.ТипПлатформы), "Windows")>0, "\", "/"); 
	
	ОбработчикДрайвера = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1СККМOffline");
	ПараметрыУстройства = Справочники.ПодключаемоеОборудование.ПолучитьПараметрыУстройства(ККМOffline);
	
	// Каталог выгрузки.
	КаталогВыгрузки = "";
	
	Если ПараметрыУстройства.Свойство("КаталогВыгрузки") Тогда
		
		КаталогВыгрузки = ПараметрыУстройства.КаталогВыгрузки;
		
		Если НЕ ПустаяСтрока(КаталогВыгрузки) Тогда
			
			КаталогВыгрузки = ДополнитьИмяКаталогаСлешем(КаталогВыгрузки);
			ККМOfflineКаталогВыгрузки = КаталогВыгрузки;
			Элементы.ККМOfflineКаталогВыгрузки.Гиперссылка = Истина;
			
		Иначе
			
			ККМOfflineКаталогВыгрузки = НСтр("ru = 'Неопределен'");
			Элементы.ККМOfflineКаталогВыгрузки.Гиперссылка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	////////////////////
	
	// Файл настроек.
	Если ПараметрыУстройства.Свойство("ИмяФайлаНастроек") И ЗначениеЗаполнено(ПараметрыУстройства.ИмяФайлаНастроек) Тогда
		ККМOfflineИмяФайлаНастроек = ПараметрыУстройства.ИмяФайлаНастроек + ".xls";
	Иначе
		ККМOfflineИмяФайлаНастроек = НСтр("ru = 'Неопределен'");
	КонецЕсли;
	////////////////
	
	// Имя файла прайс-листа.
	Если ПараметрыУстройства.Свойство("ИмяФайлаПрайсЛиста") И ЗначениеЗаполнено(ПараметрыУстройства.ИмяФайлаПрайсЛиста) Тогда
		ККМOfflineИмяФайлаПрайсЛиста = ПараметрыУстройства.ИмяФайлаПрайсЛиста;
	Иначе
		ККМOfflineИмяФайлаПрайсЛиста = НСтр("ru = 'Неопределен'");
	КонецЕсли;
	/////////////////////////
	
	// Имя каталога и файла выгрузки АТОЛ и Штрих-М.
	Если ПараметрыУстройства.Свойство("БазаТоваров") Тогда
		
		ИндексСлеша = СтрНайти(ПараметрыУстройства.БазаТоваров, СимволСлеш, НаправлениеПоиска.СКонца);
		
		КаталогВыгрузки = Лев(ПараметрыУстройства.БазаТоваров, ИндексСлеша);
		
		Если НЕ ПустаяСтрока(КаталогВыгрузки) Тогда
			ККМOfflineКаталогВыгрузки = КаталогВыгрузки;
			Элементы.ККМOfflineКаталогВыгрузки.Гиперссылка = Истина;
		КонецЕсли;
		
		ККМOfflineИмяФайлаПрайсЛиста = Прав(ПараметрыУстройства.БазаТоваров, СтрДлина(ПараметрыУстройства.БазаТоваров)-ИндексСлеша);
		
	КонецЕсли;
	////////////////////////////////////////////////
	
	// Каталог загрузки.
	Если ПараметрыУстройства.Свойство("КаталогЗагрузки") И ЗначениеЗаполнено(ПараметрыУстройства.КаталогЗагрузки) Тогда
		ККМOfflineКаталогЗагрузки = ПараметрыУстройства.КаталогЗагрузки;
	Иначе
		ККМOfflineКаталогЗагрузки = НСтр("ru = 'Неопределен'");
	КонецЕсли;
	////////////////////
	
	// Имя файла-отчета.
	Если ПараметрыУстройства.Свойство("ИмяЗагружаемогоФайла") И ЗначениеЗаполнено(ПараметрыУстройства.ИмяЗагружаемогоФайла) Тогда
		ККМOfflineИмяФайлаОтчетаОПродажах = ПараметрыУстройства.ИмяЗагружаемогоФайла;
	Иначе
		ККМOfflineИмяФайлаОтчетаОПродажах = НСтр("ru = 'Неопределен'");
	КонецЕсли;
	////////////////////
	
	// Имя каталога и файла выгрузки АТОЛ и Штрих-М.
	Если ПараметрыУстройства.Свойство("ФайлОтчета") Тогда
		
		ИндексСлеша = СтрНайти(ПараметрыУстройства.ФайлОтчета, СимволСлеш, НаправлениеПоиска.СКонца);
		
		КаталогЗагрузки = Лев(ПараметрыУстройства.ФайлОтчета, ИндексСлеша);
		
		Если НЕ ПустаяСтрока(КаталогЗагрузки) Тогда
			ККМOfflineКаталогЗагрузки = КаталогЗагрузки;
			Элементы.ККМOfflineКаталогЗагрузки.Гиперссылка = Истина;
		КонецЕсли;
		
		ККМOfflineИмяФайлаОтчетаОПродажах = Прав(ПараметрыУстройства.ФайлОтчета, СтрДлина(ПараметрыУстройства.ФайлОтчета)-ИндексСлеша);
		
	КонецЕсли;
	////////////////////////////////////////////////
	
	Если ПустаяСтрока(ККМOfflineНалогообложение) Тогда
		ККМOfflineНалогообложение = "Общая";
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОбработчикДрайвераУстройства(Устройство)
	
	Если НЕ ЗначениеЗаполнено(Устройство) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеУстройства = Справочники.ПодключаемоеОборудование.ПолучитьДанныеУстройства(Устройство);
	
	Возврат ДанныеУстройства.ОбработчикДрайвера;
	
КонецФункции

&НаКлиенте
Процедура УстановитьВидимостьРасширеннойЗагрузки()
	
	Если ККМOfflineРасширеннаяЗагрузка Тогда
		Элементы.СтраницыККМOfflineЗагрузкаОтчета.ТекущаяСтраница = Элементы.СтраницаККМOfflineРасширеннаяЗагрузка;
	Иначе
		Элементы.СтраницыККМOfflineЗагрузкаОтчета.ТекущаяСтраница = Элементы.СтраницаККМOfflineОбычнаяЗагрузка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоСмене()
	
	Если ККМOfflineРасширеннаяЗагрузка Тогда
		ТекущиеДанные = Элементы.ККМOfflineОтчеты.ТекущиеДанные;
		
		НомерСмены = Неопределено;
		Если ТекущиеДанные <> Неопределено Тогда
			НомерСмены = ТекущиеДанные.НомерСмены;
		КонецЕсли;
		
		Отбор = Новый ФиксированнаяСтруктура("НомерСмены", НомерСмены);
		Элементы.ККМOfflineОтчетПродажи.ОтборСтрок		= Отбор;
		Элементы.ККМOfflineОтчетОплаты.ОтборСтрок		= Отбор;
		Элементы.ККМOfflineОтчетВскрытияТары.ОтборСтрок	= Отбор;
		
	Иначе
		
		Элементы.ККМOfflineОтчетПродажи.ОтборСтрок		= Неопределено;
		Элементы.ККМOfflineОтчетОплаты.ОтборСтрок		= Неопределено;
		Элементы.ККМOfflineОтчетВскрытияТары.ОтборСтрок	= Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытиеКаталога(Результат, ДополнительныеПараметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоступностьИЗначенияДляЭлементовККМOffline(ККМ1С)
	
	Элементы.СтраницаККМOfflineВыгрузкаНастройки.Видимость = ККМ1С;
	Элементы.ККМOfflineВыгрузкаИзмененныхТоваров.Доступность = ККМOfflineРасширеннаяВыгрузка;
	Элементы.ККМOfflineВыгрузкаНастроек.Доступность = ККМ1С И ККМOfflineРасширеннаяВыгрузка;
	Элементы.ККМOfflineПолнаяОчистка.Доступность = НЕ ККМ1С И ККМOfflineРасширеннаяВыгрузка;
	Если ЗначениеЗаполнено(ККМOffline) Тогда
		ЗаполнитьОтображаемыеНастройкиККМОффлайн1С();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьСпискиНалоговИКомбинацийНалогов(Настройки)
	
	// Один налог +
	НДС = МенеджерОборудованияСервисыКлиентСервер.ПолучитьСтруктуруЗаписиМассиваНалоги();
	НДС.Код = "1";
	НДС.Наименование = "НДС";
	
	// 18%
	ШаблонСтавкиНалога = МенеджерОборудованияСервисыКлиентСервер.ПолучитьСтруктуруЗаписиМассиваСтавкиНалогов();
	ШаблонСтавкиНалога.Код = 1;
	ШаблонСтавкиНалога.Текст = "НДС 18%";
	ШаблонСтавкиНалога.Значение = 18;
	НДС.Ставки.Добавить(ШаблонСтавкиНалога);
	// 10%
	ШаблонСтавкиНалога = МенеджерОборудованияСервисыКлиентСервер.ПолучитьСтруктуруЗаписиМассиваСтавкиНалогов();
	ШаблонСтавкиНалога.Код = 2;
	ШаблонСтавкиНалога.Текст = "НДС 10%";
	ШаблонСтавкиНалога.Значение = 10;
	НДС.Ставки.Добавить(ШаблонСтавкиНалога);
	// 0%
	ШаблонСтавкиНалога = МенеджерОборудованияСервисыКлиентСервер.ПолучитьСтруктуруЗаписиМассиваСтавкиНалогов();
	ШаблонСтавкиНалога.Код = 3;
	ШаблонСтавкиНалога.Текст = "Без НДС";
	ШаблонСтавкиНалога.Значение = 0;
	НДС.Ставки.Добавить(ШаблонСтавкиНалога);
	
	Настройки.Налоги.Добавить(НДС);
	// Один налог -
	
	// Несколько налогов +
	//// Налоги и ставки.
	//НДС = МенеджерОборудованияСервисыКлиентСервер.ПолучитьСтруктуруЗаписиМассиваНалоги();
	//НДС.Код = "1";
	//НДС.Наименование = "НДС";
	//
	//// 18%
	//ШаблонСтавкиНалога = МенеджерОборудованияСервисыКлиентСервер.ПолучитьСтруктуруЗаписиМассиваСтавкиНалогов();
	//ШаблонСтавкиНалога.Код = 1;
	//ШаблонСтавкиНалога.Текст = "НДС 18%";
	//ШаблонСтавкиНалога.Значение = 18;
	//НДС.Ставки.Добавить(ШаблонСтавкиНалога);
	//// 10%
	//ШаблонСтавкиНалога = МенеджерОборудованияСервисыКлиентСервер.ПолучитьСтруктуруЗаписиМассиваСтавкиНалогов();
	//ШаблонСтавкиНалога.Код = 2;
	//ШаблонСтавкиНалога.Текст = "НДС 10%";
	//ШаблонСтавкиНалога.Значение = 10;
	//НДС.Ставки.Добавить(ШаблонСтавкиНалога);
	//// 0%
	//ШаблонСтавкиНалога = МенеджерОборудованияСервисыКлиентСервер.ПолучитьСтруктуруЗаписиМассиваСтавкиНалогов();
	//ШаблонСтавкиНалога.Код = 3;
	//ШаблонСтавкиНалога.Текст = "Без НДС";
	//ШаблонСтавкиНалога.Значение = 0;
	//НДС.Ставки.Добавить(ШаблонСтавкиНалога);
	//
	//Настройки.Налоги.Добавить(НДС);
	//
	//ВторойНалог = МенеджерОборудованияСервисыКлиентСервер.ПолучитьСтруктуруЗаписиМассиваНалоги();
	//ВторойНалог.Код = "2";
	//ВторойНалог.Наименование = "Второй налог";
	//
	//// 10%
	//ШаблонСтавкиНалога = МенеджерОборудованияСервисыКлиентСервер.ПолучитьСтруктуруЗаписиМассиваСтавкиНалогов();
	//ШаблонСтавкиНалога.Код = 1;
	//ШаблонСтавкиНалога.Текст = "ВН 10%";
	//ШаблонСтавкиНалога.Значение = 10;
	//ВторойНалог.Ставки.Добавить(ШаблонСтавкиНалога);
	//// 6%
	//ШаблонСтавкиНалога = МенеджерОборудованияСервисыКлиентСервер.ПолучитьСтруктуруЗаписиМассиваСтавкиНалогов();
	//ШаблонСтавкиНалога.Код = 2;
	//ШаблонСтавкиНалога.Текст = "ВН 6%";
	//ШаблонСтавкиНалога.Значение = 6;
	//ВторойНалог.Ставки.Добавить(ШаблонСтавкиНалога);
	//
	//Настройки.Налоги.Добавить(ВторойНалог);
	//
	//// Комбинации налогов.
	//// 1-я комбинация.
	//Комбинация = МенеджерОборудованияСервисыКлиентСервер.ПолучитьСтруктуруЗаписиМассиваКомбинацииНалогов();
	//Комбинация.Код = 1;
	//
	//ШаблонСтавкиКомбинации = МенеджерОборудованияСервисыКлиентСервер.ПолучитьСтруктуруЗаписиМассиваСтавкиКомбинаций();
	//ШаблонСтавкиКомбинации.КодНалога = "1";
	//ШаблонСтавкиКомбинации.КодСтавки = 1;
	//Комбинация.Ставки.Добавить(ШаблонСтавкиКомбинации);
	//
	//ШаблонСтавкиКомбинации = МенеджерОборудованияСервисыКлиентСервер.ПолучитьСтруктуруЗаписиМассиваСтавкиКомбинаций();
	//ШаблонСтавкиКомбинации.КодНалога = "2";
	//ШаблонСтавкиКомбинации.КодСтавки = 1;
	//Комбинация.Ставки.Добавить(ШаблонСтавкиКомбинации);
	//
	//Настройки.КомбинацииНалогов.Добавить(Комбинация);
	//
	//// 2-я комбинация.
	//Комбинация = МенеджерОборудованияСервисыКлиентСервер.ПолучитьСтруктуруЗаписиМассиваКомбинацииНалогов();
	//Комбинация.Код = 2;
	//
	//ШаблонСтавкиКомбинации = МенеджерОборудованияСервисыКлиентСервер.ПолучитьСтруктуруЗаписиМассиваСтавкиКомбинаций();
	//ШаблонСтавкиКомбинации.КодНалога = "1";
	//ШаблонСтавкиКомбинации.КодСтавки = 1;
	//Комбинация.Ставки.Добавить(ШаблонСтавкиКомбинации);
	//
	//ШаблонСтавкиКомбинации = МенеджерОборудованияСервисыКлиентСервер.ПолучитьСтруктуруЗаписиМассиваСтавкиКомбинаций();
	//ШаблонСтавкиКомбинации.КодНалога = "2";
	//ШаблонСтавкиКомбинации.КодСтавки = 2;
	//Комбинация.Ставки.Добавить(ШаблонСтавкиКомбинации);
	//
	//Настройки.КомбинацииНалогов.Добавить(Комбинация);
	//
	//// 3-я комбинация.
	//Комбинация = МенеджерОборудованияСервисыКлиентСервер.ПолучитьСтруктуруЗаписиМассиваКомбинацииНалогов();
	//Комбинация.Код = 3;
	//
	//ШаблонСтавкиКомбинации = МенеджерОборудованияСервисыКлиентСервер.ПолучитьСтруктуруЗаписиМассиваСтавкиКомбинаций();
	//ШаблонСтавкиКомбинации.КодНалога = "1";
	//ШаблонСтавкиКомбинации.КодСтавки = 2;
	//Комбинация.Ставки.Добавить(ШаблонСтавкиКомбинации);
	//
	//ШаблонСтавкиКомбинации = МенеджерОборудованияСервисыКлиентСервер.ПолучитьСтруктуруЗаписиМассиваСтавкиКомбинаций();
	//ШаблонСтавкиКомбинации.КодНалога = "2";
	//ШаблонСтавкиКомбинации.КодСтавки = 1;
	//Комбинация.Ставки.Добавить(ШаблонСтавкиКомбинации);
	//
	//Настройки.КомбинацииНалогов.Добавить(Комбинация);
	//
	//// 4-я комбинация.
	//Комбинация = МенеджерОборудованияСервисыКлиентСервер.ПолучитьСтруктуруЗаписиМассиваКомбинацииНалогов();
	//Комбинация.Код = 4;
	//
	//ШаблонСтавкиКомбинации = МенеджерОборудованияСервисыКлиентСервер.ПолучитьСтруктуруЗаписиМассиваСтавкиКомбинаций();
	//ШаблонСтавкиКомбинации.КодНалога = "1";
	//ШаблонСтавкиКомбинации.КодСтавки = 2;
	//Комбинация.Ставки.Добавить(ШаблонСтавкиКомбинации);
	//
	//ШаблонСтавкиКомбинации = МенеджерОборудованияСервисыКлиентСервер.ПолучитьСтруктуруЗаписиМассиваСтавкиКомбинаций();
	//ШаблонСтавкиКомбинации.КодНалога = "2";
	//ШаблонСтавкиКомбинации.КодСтавки = 2;
	//Комбинация.Ставки.Добавить(ШаблонСтавкиКомбинации);
	//
	//Настройки.КомбинацииНалогов.Добавить(Комбинация);
	//
	//// 5-я комбинация.
	//Комбинация = МенеджерОборудованияСервисыКлиентСервер.ПолучитьСтруктуруЗаписиМассиваКомбинацииНалогов();
	//Комбинация.Код = 5;
	//
	//ШаблонСтавкиКомбинации = МенеджерОборудованияСервисыКлиентСервер.ПолучитьСтруктуруЗаписиМассиваСтавкиКомбинаций();
	//ШаблонСтавкиКомбинации.КодНалога = "1";
	//ШаблонСтавкиКомбинации.КодСтавки = 3;
	//Комбинация.Ставки.Добавить(ШаблонСтавкиКомбинации);
	//
	//ШаблонСтавкиКомбинации = МенеджерОборудованияСервисыКлиентСервер.ПолучитьСтруктуруЗаписиМассиваСтавкиКомбинаций();
	//ШаблонСтавкиКомбинации.КодНалога = "2";
	//ШаблонСтавкиКомбинации.КодСтавки = 1;
	//Комбинация.Ставки.Добавить(ШаблонСтавкиКомбинации);
	//
	//Настройки.КомбинацииНалогов.Добавить(Комбинация);
	//
	//// 6-я комбинация.
	//Комбинация = МенеджерОборудованияСервисыКлиентСервер.ПолучитьСтруктуруЗаписиМассиваКомбинацииНалогов();
	//Комбинация.Код = 6;
	//
	//ШаблонСтавкиКомбинации = МенеджерОборудованияСервисыКлиентСервер.ПолучитьСтруктуруЗаписиМассиваСтавкиКомбинаций();
	//ШаблонСтавкиКомбинации.КодНалога = "1";
	//ШаблонСтавкиКомбинации.КодСтавки = 3;
	//Комбинация.Ставки.Добавить(ШаблонСтавкиКомбинации);
	//
	//ШаблонСтавкиКомбинации = МенеджерОборудованияСервисыКлиентСервер.ПолучитьСтруктуруЗаписиМассиваСтавкиКомбинаций();
	//ШаблонСтавкиКомбинации.КодНалога = "2";
	//ШаблонСтавкиКомбинации.КодСтавки = 2;
	//Комбинация.Ставки.Добавить(ШаблонСтавкиКомбинации);
	//
	//Настройки.КомбинацииНалогов.Добавить(Комбинация);
	// Несколько налогов -
	
КонецПроцедуры

&НаКлиенте
Процедура ККМOfflineЗаполнитьДемоДанными(Команда)
	
	// Общие настройки.
	ККМOfflineНазваниеОрганизации = "ЗАО 'Наименование организации'";
	ККМOfflineИНН = "776545646848";
	ККМOfflineНалогообложение = "Общая";
	ККМOfflineИспользоватьСкидкиНаценки = Истина;
	
	// Виды оплаты.
	ККМOfflineВидыОплаты.Очистить();
	
	НовыйВидОплаты = ККМOfflineВидыОплаты.Добавить();
	НовыйВидОплаты.Код = 1;
	НовыйВидОплаты.ТипОплаты = 1;
	НовыйВидОплаты.Наименование = "MasterCard";
	
	НовыйВидОплаты = ККМOfflineВидыОплаты.Добавить();
	НовыйВидОплаты.Код = 2;
	НовыйВидОплаты.ТипОплаты = 1;
	НовыйВидОплаты.Наименование = "VISA";
	
	НовыйВидОплаты = ККМOfflineВидыОплаты.Добавить();
	НовыйВидОплаты.Код = 3;
	НовыйВидОплаты.ТипОплаты = 1;
	НовыйВидОплаты.Наименование = "Maestro";
	
	// Группы номенклатуры.
	ККМOfflineГруппыНоменклатуры.Очистить();
	
	НоваяГруппа = ККМOfflineГруппыНоменклатуры.Добавить();
	НоваяГруппа.Код = "0001";
	НоваяГруппа.Наименование = "Товары";
	НоваяГруппа.КодГруппы = "";
	НоваяГруппа.УникальныйИдентификатор = Строка(Новый УникальныйИдентификатор);
	
	НоваяГруппа = ККМOfflineГруппыНоменклатуры.Добавить();
	НоваяГруппа.Код = "0002";
	НоваяГруппа.Наименование = "Алкоголь";
	НоваяГруппа.КодГруппы = "0001";
	НоваяГруппа.УникальныйИдентификатор = Строка(Новый УникальныйИдентификатор);
	
	НоваяГруппа = ККМOfflineГруппыНоменклатуры.Добавить();
	НоваяГруппа.Код = "0003";
	НоваяГруппа.Наименование = "Весовые товары";
	НоваяГруппа.КодГруппы = "0001";
	НоваяГруппа.УникальныйИдентификатор = Строка(Новый УникальныйИдентификатор);
	
	//Номенклатура.
	ККМOfflineНоменклатура.ПолучитьЭлементы().Очистить();
	
	НоваяСтрока = ККМOfflineНоменклатура.ПолучитьЭлементы().Добавить();
	НоваяСтрока.ТипОбъекта = "Номенклатура";
	НоваяСтрока.Наименование = "Товар №1";
	НоваяСтрока.ЕдиницаИзмерения = "шт.";
	НоваяСтрока.КодГруппы = "0002";
	НоваяСтрока.Артикул = "0004";
	НоваяСтрока.СтавкаНДС = 18;
	НоваяСтрока.Код = "0004";
	НоваяСтрока.Штрихкод = "000001 000002 000003";
	НоваяСтрока.Цена = 500;
	НоваяСтрока.Остаток = 100;
	НоваяСтрока.Алкоголь = Истина;
	НоваяСтрока.Маркируемый = Истина;
	НоваяСтрока.КодВидаАлкогольнойПродукции = "010";
	НоваяСтрока.ЕмкостьТары = 0.75;
	НоваяСтрока.Крепость = 40;
	НоваяСтрока.ИННПроизводителя = "123456789101";
	НоваяСтрока.КПППроизводителя = "123456789";
	НоваяСтрока.УникальныйИдентификатор = Строка(Новый УникальныйИдентификатор);
	
	НоваяСтрока = ККМOfflineНоменклатура.ПолучитьЭлементы().Добавить();
	НоваяСтрока.ТипОбъекта = "Номенклатура";
	НоваяСтрока.Наименование = "Товар №2";
	НоваяСтрока.ЕдиницаИзмерения = "кг.";
	НоваяСтрока.КодГруппы = "0003";
	НоваяСтрока.Артикул = "0005";
	НоваяСтрока.СтавкаНДС = 10;
	НоваяСтрока.Весовой = Истина;
	НоваяСтрока.ИмеетУпаковки = Истина;
	НоваяСтрока.УникальныйИдентификатор = Строка(Новый УникальныйИдентификатор);
	
	НоваяУпаковка = НоваяСтрока.ПолучитьЭлементы().Добавить();
	НоваяУпаковка.ТипОбъекта = "Упаковка";
	НоваяУпаковка.Наименование = "Упаковка №1";
	НоваяУпаковка.Код = "0005";
	НоваяУпаковка.Штрихкод = "000004 000005";
	НоваяУпаковка.Цена = 250;
	НоваяУпаковка.Остаток = 20;
	НоваяУпаковка.Коэффициент = 0.5;
	НоваяУпаковка.УникальныйИдентификатор = Строка(Новый УникальныйИдентификатор);
	
	НоваяУпаковка = НоваяСтрока.ПолучитьЭлементы().Добавить();
	НоваяУпаковка.ТипОбъекта = "Упаковка";
	НоваяУпаковка.Наименование = "Упаковка №2";
	НоваяУпаковка.Код = "0006";
	НоваяУпаковка.Штрихкод = "000006";
	НоваяУпаковка.Цена = 490;
	НоваяУпаковка.Остаток = 10;
	НоваяУпаковка.Коэффициент = 1;
	НоваяУпаковка.УникальныйИдентификатор = Строка(Новый УникальныйИдентификатор);
	
	НоваяСтрока = ККМOfflineНоменклатура.ПолучитьЭлементы().Добавить();
	НоваяСтрока.ТипОбъекта = "Номенклатура";
	НоваяСтрока.Наименование = "Товар №3";
	НоваяСтрока.ЕдиницаИзмерения = "шт.";
	НоваяСтрока.КодГруппы = "0003";
	НоваяСтрока.Артикул = "0007";
	НоваяСтрока.СтавкаНДС = 10;
	НоваяСтрока.ИмеетХарактеристики = Истина;
	НоваяСтрока.УникальныйИдентификатор = Строка(Новый УникальныйИдентификатор);
	
	НоваяХарактеристика = НоваяСтрока.ПолучитьЭлементы().Добавить();
	НоваяХарактеристика.ТипОбъекта = "Характеристика";
	НоваяХарактеристика.Наименование = "Характеристика №1";
	НоваяХарактеристика.Код = "0007";
	НоваяХарактеристика.Штрихкод = "000007";
	НоваяХарактеристика.Цена = 300;
	НоваяХарактеристика.Остаток = 15;
	НоваяХарактеристика.УникальныйИдентификатор = Строка(Новый УникальныйИдентификатор);
	
	НоваяСтрока = ККМOfflineНоменклатура.ПолучитьЭлементы().Добавить();
	НоваяСтрока.ТипОбъекта = "Номенклатура";
	НоваяСтрока.Наименование = "Товар №4";
	НоваяСтрока.ЕдиницаИзмерения = "кг.";
	НоваяСтрока.КодГруппы = "0002";
	НоваяСтрока.Артикул = "0008";
	НоваяСтрока.СтавкаНДС = 18;
	НоваяСтрока.Весовой = Истина;
	НоваяСтрока.ИмеетХарактеристики = Истина;
	НоваяСтрока.Алкоголь = Истина;
	НоваяСтрока.Маркируемый = Ложь;
	НоваяСтрока.КодВидаАлкогольнойПродукции = "400";
	НоваяСтрока.ЕмкостьТары = 0.5;
	НоваяСтрока.Крепость = 10;
	НоваяСтрока.ИННПроизводителя = "123456789102";
	НоваяСтрока.КПППроизводителя = "123456789";
	НоваяСтрока.УникальныйИдентификатор = Строка(Новый УникальныйИдентификатор);
	
	НоваяХарактеристика = НоваяСтрока.ПолучитьЭлементы().Добавить();
	НоваяХарактеристика.ТипОбъекта = "Характеристика";
	НоваяХарактеристика.Наименование = "Характеристика №2";
	НоваяХарактеристика.ИмеетУпаковки = Истина;
	НоваяХарактеристика.УникальныйИдентификатор = Строка(Новый УникальныйИдентификатор);
	
	НоваяУпаковка = НоваяХарактеристика.ПолучитьЭлементы().Добавить();
	НоваяУпаковка.ТипОбъекта = "Упаковка";
	НоваяУпаковка.Наименование = "Упаковка №3";
	НоваяУпаковка.Код = "0008";
	НоваяУпаковка.Штрихкод = "000008";
	НоваяУпаковка.Цена = 150;
	НоваяУпаковка.Остаток = 100;
	НоваяУпаковка.Коэффициент = 0.25;
	НоваяУпаковка.УникальныйИдентификатор = Строка(Новый УникальныйИдентификатор);
	
	НоваяУпаковка = НоваяХарактеристика.ПолучитьЭлементы().Добавить();
	НоваяУпаковка.ТипОбъекта = "Упаковка";
	НоваяУпаковка.Наименование = "Упаковка №4";
	НоваяУпаковка.Код = "0009";
	НоваяУпаковка.Штрихкод = "000009";
	НоваяУпаковка.Цена = 290;
	НоваяУпаковка.Остаток = 50;
	НоваяУпаковка.Коэффициент = 0.5;
	НоваяУпаковка.УникальныйИдентификатор = Строка(Новый УникальныйИдентификатор);
	
	НоваяУпаковка = НоваяХарактеристика.ПолучитьЭлементы().Добавить();
	НоваяУпаковка.ТипОбъекта = "Упаковка";
	НоваяУпаковка.Наименование = "Упаковка №5";
	НоваяУпаковка.Код = "0010";
	НоваяУпаковка.Штрихкод = "000010";
	НоваяУпаковка.Цена = 550;
	НоваяУпаковка.Остаток = 15;
	НоваяУпаковка.Коэффициент = 1;
	НоваяУпаковка.УникальныйИдентификатор = Строка(Новый УникальныйИдентификатор);
	
	НоваяСтрока = ККМOfflineНоменклатура.ПолучитьЭлементы().Добавить();
	НоваяСтрока.ТипОбъекта = "Номенклатура";
	НоваяСтрока.Наименование = "Товар №5";
	НоваяСтрока.ЕдиницаИзмерения = "шт.";
	НоваяСтрока.КодГруппы = "0002";
	НоваяСтрока.Артикул = "0011";
	НоваяСтрока.СтавкаНДС = 0;
	НоваяСтрока.Код = "0011";
	НоваяСтрока.Штрихкод = "000011";
	НоваяСтрока.Цена = 380;
	НоваяСтрока.Остаток = 10;
	НоваяСтрока.УникальныйИдентификатор = Строка(Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ФискальноеУстройствоТипПриИзменении(Элемент)
	
	Элементы.ККТ_ОперацияФН.Видимость = ФискальноеУстройствоТип = ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ККТ")
	
КонецПроцедуры


#КонецОбласти

