&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЗаполнитьТаблицуАдресныхОбъектов();
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайламДанныхНаДискеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
#Если Не ВебКлиент Тогда
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выбор каталога с файлами адресных сведений'");
	ДиалогОткрытияФайла.Каталог = Элементы.ПутьКФайламДанныхНаДиске.ТекстРедактирования;
	
	ДиалогОткрытияФайла.Показать(Новый ОписаниеОповещения("ВыполнитьПослеЗакрытияВопроса", ЭтотОбъект));
#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеЗакрытияВопроса(ВыбранныеФайлы, ДопПараметры) Экспорт
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКФайламДанныхНаДиске = ВыбранныеФайлы[0];
	
	ОчиститьСообщения();
	
	Если НЕ ПроверитьНаличиеФайловДанныхВКаталоге(ПутьКФайламДанныхНаДиске) Тогда
		Сообщить("Файлы адресных сведений не найдены в каталоге "+ПутьКФайламДанныхНаДиске+". Путь должен быть сетевой, у сервера должен быть доступ в эту папку и в этой папке должны быть все файлы КЛАДР в разархивированном виде.");
		Возврат;
	КонецЕсли;
КонецПроцедуры

// Проверяет существование файлов данных в переданном каталоге
//
// Параметры:
//    ПутьККаталогу - строка - путь к каталогу, который необходимо проверить на наличие файлов
// 
// Возвращаемое значение:
//    Истина        - файлы существуют на диске
//    Ложь          - хотя бы одного файла из необходимого набора файлов
//                    не существует на диске
//
&НаСервере
Функция ПроверитьНаличиеФайловДанныхВКаталоге(Знач ПутьККаталогу)
	
	Если ПустаяСтрока(ПутьККаталогу) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Прав(ПутьККаталогу, 1) <> "\" Тогда
		ПутьККаталогу = ПутьККаталогу + "\";
	КонецЕсли;
	
	Для Каждого ПутьКФайлу Из СписокФайловДанных() Цикл
		ФайлНаДиске = Новый Файл(ПутьККаталогу+ПутьКФайлу);
		Если Не ФайлНаДиске.Существует() Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Содержит полный список файлов данных КЛАДР
//
&НаСервере
Функция СписокФайловДанных()
	
	Список = Новый Массив;
	
	Список.Добавить("SOCRBASE.DBF");
	Список.Добавить("ALTNAMES.DBF");
	Список.Добавить("DOMA.DBF");
	Список.Добавить("KLADR.DBF");
	Список.Добавить("STREET.DBF");
	
	Возврат Список;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьНаСервере(ПутьКФайламДанныхНаДиске,АдресныеОбъекты)
	Для Каждого ТекОбъект Из АдресныеОбъекты Цикл
		ЗагрузитьКлассификаторПоАдресномуОбъекту(ТекОбъект,ПутьКФайламДанныхНаДиске);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура Загрузить(Команда)
	АдресныеОбъекты = Новый Массив;
	Для Каждого ЭлементАдресныйОбъект Из АдресныеОбъектыДляЗагрузки Цикл
		ОбработкаПрерыванияПользователя();
		Если ЭлементАдресныйОбъект.Пометка Тогда
			АдресныеОбъекты.Добавить(Лев(ЭлементАдресныйОбъект.НаименованиеАдресногоОбъекта, 2));
			Состояние("Загружаем "+ЭлементАдресныйОбъект.НаименованиеАдресногоОбъекта);
			ЗагрузитьКлассификаторПоАдресномуОбъекту(Лев(ЭлементАдресныйОбъект.НаименованиеАдресногоОбъекта, 2),ПутьКФайламДанныхНаДиске+"\");
		КонецЕсли;
	КонецЦикла;
	
	Если АдресныеОбъекты.Количество()=0 Тогда
		ПоказатьПредупреждение(,"Нет выбранных элементов. Загрузка прозведена не будет.");
		Возврат;
	КонецЕсли;
	
	//ЗагрузитьНаСервере(ПутьКФайламДанныхНаДиске+"\",АдресныеОбъекты);
КонецПроцедуры


// Процедура для загрузки данных в КЛАДР
//
// Параметры:
//    КодАдресногоОбъекта  - Строка - код адресного объекта в формате NN
//    ПутьКДаннымНаСервере - Строка - путь к каталогу на сервере, в котором хранятся файлы кладр
//
&НаСервере
Процедура ЗагрузитьКлассификаторПоАдресномуОбъекту(Знач КодАдресногоОбъекта, ПутьКДаннымНаСервере)
	
	КодАдресногоОбъекта = Лев(КодАдресногоОбъекта, 2);
	
	КЧ = Новый КвалификаторыЧисла(30,0);
	КС = Новый КвалификаторыСтроки(100);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповС = Новый ОписаниеТипов(Массив, , КС);
	Массив.Очистить();
	Массив.Добавить(Тип("Число"));
	ОписаниеТиповЧ = Новый ОписаниеТипов(Массив, , ,КЧ);

	АдресныеСведения = Новый ТаблицаЗначений;
	АдресныеСведения.Колонки.Добавить("Код",ОписаниеТиповС);
	АдресныеСведения.Колонки.Добавить("КодАдресногоОбъектаВКоде",ОписаниеТиповС);
	АдресныеСведения.Колонки.Добавить("ПолныйКодГорода",ОписаниеТиповС);
	АдресныеСведения.Колонки.Добавить("ПолныйКодУлицы",ОписаниеТиповС);
	АдресныеСведения.Колонки.Добавить("Наименование",ОписаниеТиповС);
	АдресныеСведения.Колонки.Добавить("Сокращение",ОписаниеТиповС);
	АдресныеСведения.Колонки.Добавить("Индекс",ОписаниеТиповС);
	АдресныеСведения.Колонки.Добавить("ТипАдресногоЭлемента",ОписаниеТиповЧ);
	АдресныеСведения.Колонки.Добавить("КодРайонаВКоде",ОписаниеТиповЧ);
	АдресныеСведения.Колонки.Добавить("КодГородаВКоде",ОписаниеТиповЧ);
	АдресныеСведения.Колонки.Добавить("КодНаселенногоПунктаВКоде",ОписаниеТиповЧ);
	АдресныеСведения.Колонки.Добавить("КодУлицыВКоде",ОписаниеТиповЧ);
	АдресныеСведения.Колонки.Добавить("ПризнакАктуальности",ОписаниеТиповЧ);
	
	ЗагрузитьАдресныеСведения(КодАдресногоОбъекта, 
		ПутьКДаннымНаСервере + "KLADR", АдресныеСведения,
		4);
		
	АдресныеСведения.Очистить();
	ЗагрузитьАдресныеСведения(КодАдресногоОбъекта,
		ПутьКДаннымНаСервере + "STREET", АдресныеСведения,
		5);
	
	АдресныеСведения.Очистить();
	ЗагрузитьАдресныеСведения(КодАдресногоОбъекта,
		ПутьКДаннымНаСервере + "DOMA", АдресныеСведения,
		6);
	
	Если АдресныеСведения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	//ЗаписатьКлассификатор(КодАдресногоОбъекта, АдресныеСведения);
	
КонецПроцедуры

// Функция для заполнения данных с 2-го по 6-й уровень классификации:
// 2-й - районы (улусы) республик, краев, областей, автономных областей,
//       автономных округов, входящих в состав Российской Федерации.
// 3-й   города и поселки городского типа1 регионального и районного подчинения;
//       сельсоветы (сельские округа, сельские администрации, волости и т.п.).
// 4-й   города и поселки городского типа , подчиненные администрациям городов третьего уровня;
//       сельские населенные пункты
// 5-й   улицы городов, поселков городского типа и сельских населенных пунктов.
// 6-й   дома, расположенные в городах и поселках городского типа, являющихся объектами
//       третьего уровня , в т.ч. дома, непосредственно привязанные к городам и поселкам
//       городского типа
//
// Параметры:
//    КодАдресногоОбъекта    - строка (2 символа) - строковое представление номера адресного объекта
//    ПутьКДаннымНаСервере   - Строка - путь к каталогу на сервере, в котором хранятся файлы кладр. 
//                             Путь заканчивается слешем (обратным или прямым)
//    АдресныеСведения       - ТаблицаЗначений - таблица, которая заполняется загружаемыми элементами
//    ТипАдресногоЭлемента   - Число - уровень адресного объекта.
//
// Возвращаемое значение:
//    Булево - Истина, если адресные сведения загружены, Ложь - Иначе.
//
&НаСервере
Функция ЗагрузитьАдресныеСведения(КодАдресногоОбъекта, ПутьКДаннымНаСервере, АдресныеСведения, Знач ТипАдресногоЭлемента=Неопределено)
	Перем ФайлИндексаКлассификатора;
	
	РегионВладелец = Справочники.Регионы.НайтиПоКоду(КодАдресногоОбъекта);
	Если РегионВладелец.Пустая() Тогда
		Сообщить("Нет региона с кодом "+КодАдресногоОбъекта+". Загрузка невозможна.");
		Возврат Истина;
	КонецЕсли;
	
	ФайлАдресногоКлассификатора = ПутьКДаннымНаСервере +  ".DBF";
	
	ФайлИндексаКлассификатора   = ПутьКДаннымНаСервере +  ".CDX";
	ФайлИндекса = Новый Файл (ФайлИндексаКлассификатора);
	Если НЕ ФайлИндекса.Существует() Тогда
		xB = Новый XBase(ФайлАдресногоКлассификатора);
		xB.Кодировка = КодировкаXBase.OEM;
		
		Если xB.Открыта() Тогда
			// Для загрузки сразу группы адресных сведений удобно пользоваться индексом по всему поле CODE
			xB.Индексы.Добавить("IDXCODE", "CODE", Истина);
			xB.СоздатьИндексныйФайл(ФайлИндексаКлассификатора);
			xB.ЗакрытьФайл();
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	xB = Новый XBase(ФайлАдресногоКлассификатора, ФайлИндексаКлассификатора, Истина);
	xB.Кодировка = КодировкаXBase.OEM;
	
	// Если мы загружаем улицы или дома, то тип адресного элемента
	Если ТипАдресногоЭлемента <> Неопределено Тогда
		ТипАдресногоЭлементаУстановлен = Истина;
	Иначе
		ТипАдресногоЭлементаУстановлен = Ложь;
	КонецЕсли;
	
	Если Не xB.Открыта() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Контроль = Новый Соответствие;
	ЕстьОшибки = Ложь;
	
	xB.ТекущийИндекс = xB.Индексы.Найти("IDXCODE");
	xB.Найти (КодАдресногоОбъекта, "=");
	
	Пока Не xB.ВКонце() Цикл
		Код = xB.CODE;
		
		Если Контроль[Код] = НеОпределено Тогда
			Контроль[Код] = 0;
			
			Если Лев(Код, 2) <> КодАдресногоОбъекта Тогда
				Прервать;
			КонецЕсли;
			
			Если ТипАдресногоЭлементаУстановлен Тогда
				ПризнакАктуальности = Сред(Код, 16, 2);
			Иначе
				//Узнать нужно ли получать тип или мы его передадим
				ТипАдресногоЭлемента = ПолучитьТипАдресногоЭлементаПоКоду(Код);
				ПризнакАктуальности = Сред(Код, 12, 2);
			КонецЕсли;
			
			Если ТипАдресногоЭлемента <= 4 Тогда
				ТекПризнакАктуальности       = Число(Сред(Код, 12, 2));
			ИначеЕсли ТипАдресногоЭлемента = 5 Тогда
				ТекПризнакАктуальности       = Число(Сред(Код, 16, 2));
			Иначе
				ТекПризнакАктуальности       = 0;
			КонецЕсли;
			Если ТекПризнакАктуальности<>0 Тогда
				xB.Следующая();
				Продолжить;
			КонецЕсли;
			Если Код = КодАдресногоОбъекта+"00000000000" И КодАдресногоОбъекта <> "77" И КодАдресногоОбъекта <> "78" И КодАдресногоОбъекта <> "92" И КодАдресногоОбъекта <> "99" Тогда
				xB.Следующая();
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = АдресныеСведения.Добавить();

			НоваяСтрока.Код = Код;
			НоваяСтрока.ПолныйКодГорода			  = Лев(Код,11)+"00";
			НоваяСтрока.ПолныйКодУлицы			  = Лев(Код,15)+"00";
			
			НоваяСтрока.ТипАдресногоЭлемента      = ТипАдресногоЭлемента;
			НоваяСтрока.КодАдресногоОбъектаВКоде  = Число(Сред(Код, 1, 2));
			НоваяСтрока.КодРайонаВКоде            = Число(Сред(Код, 3, 3));
			НоваяСтрока.КодГородаВКоде            = Число(Сред(Код, 6, 3));
			НоваяСтрока.КодНаселенногоПунктаВКоде = Число(Сред(Код, 9, 3));
			
			Если ТипАдресногоЭлемента <= 4 Тогда
				НоваяСтрока.КодУлицыВКоде             = 0;
				НоваяСтрока.ПризнакАктуальности       = Число(Сред(Код, 12, 2));
			ИначеЕсли ТипАдресногоЭлемента = 5 Тогда
				НоваяСтрока.КодУлицыВКоде             = Число(Сред(Код, 12, 4));
				НоваяСтрока.ПризнакАктуальности       = Число(Сред(Код, 16, 2));
			Иначе
				НоваяСтрока.КодУлицыВКоде             = Число(Сред(Код, 12, 4));
				НоваяСтрока.ПризнакАктуальности       = 0;
			КонецЕсли;
			
			НоваяСтрока.Наименование = СокрЛП(xB.NAME)+?(ЗначениеЗаполнено(СокрЛП(xB.SOCR))," "+СокрЛП(xB.SOCR),"");
			НоваяСтрока.Индекс       = xB.INDEX;
			НоваяСтрока.Сокращение   = СокрЛП(xB.SOCR);
			
			xB.Следующая();
		Иначе
			ЕстьОшибки = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	xB.ЗакрытьФайл();
	
	Если ТипАдресногоЭлемента = 4 Тогда
		ЗаполнитьГорода(РегионВладелец,КодАдресногоОбъекта,АдресныеСведения);
	ИначеЕсли ТипАдресногоЭлемента = 5 Тогда
		ЗаполнитьУлицы(АдресныеСведения);
	ИначеЕсли ТипАдресногоЭлемента = 6 Тогда
		ЗаполнитьИндексы(РегионВладелец,АдресныеСведения);
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		Сообщить("В файле адресного классификатора "+ПутьКДаннымНаСервере+" есть ошибки уникальности кодов");
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

&НаСервере
Процедура ЗаполнитьГорода(РегионВладелец,КодАдресногоОбъекта,АдресныеСведения)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	АдресныеСведения.Код,
	               |	АдресныеСведения.КодАдресногоОбъектаВКоде,
	               |	АдресныеСведения.Наименование,
	               |	АдресныеСведения.Сокращение,
	               |	АдресныеСведения.Индекс,
	               |	АдресныеСведения.ТипАдресногоЭлемента,
	               |	АдресныеСведения.КодРайонаВКоде,
	               |	АдресныеСведения.КодГородаВКоде,
	               |	АдресныеСведения.КодНаселенногоПунктаВКоде,
	               |	АдресныеСведения.КодУлицыВКоде,
	               |	АдресныеСведения.ПризнакАктуальности,
	               |	АдресныеСведения.ПолныйКодГорода
	               |ПОМЕСТИТЬ втАдресныеСведения
	               |ИЗ
	               |	&АдресныеСведения КАК АдресныеСведения
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втАдресныеСведения.Код КАК Код,
	               |	втАдресныеСведения.КодАдресногоОбъектаВКоде,
	               |	втАдресныеСведения.Наименование,
	               |	втАдресныеСведения.Сокращение,
	               |	втАдресныеСведения.Индекс,
	               |	втАдресныеСведения.ТипАдресногоЭлемента,
	               |	втАдресныеСведения.КодРайонаВКоде,
	               |	втАдресныеСведения.КодГородаВКоде,
	               |	втАдресныеСведения.КодНаселенногоПунктаВКоде,
	               |	втАдресныеСведения.КодУлицыВКоде,
	               |	втАдресныеСведения.ПризнакАктуальности,
	               |	ЕСТЬNULL(ГородПоменялся.Ссылка, ЗНАЧЕНИЕ(Справочник.Города.ПустаяСсылка)) КАК СсылкаНаОбъект,
	               |	втАдресныеСведения.ПолныйКодГорода
	               |ИЗ
	               |	втАдресныеСведения КАК втАдресныеСведения
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Города КАК ГородЕсть
	               |		ПО втАдресныеСведения.ПолныйКодГорода = ГородЕсть.Код
	               |			И втАдресныеСведения.Наименование = ГородЕсть.Наименование
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Города КАК ГородПоменялся
	               |		ПО втАдресныеСведения.ПолныйКодГорода = ГородПоменялся.Код
	               |ГДЕ
	               |	ГородЕсть.Ссылка ЕСТЬ NULL 
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Код";
	Запрос.УстановитьПараметр("АдресныеСведения",АдресныеСведения);
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		Родитель = Справочники.Города.НайтиПоКоду(ЛЕВ(Результат.ПолныйКодГорода,8)+"00000");
		
		Если Результат.СсылкаНаОбъект.Пустая() Тогда
			СсылкаНаОбъект = Справочники.Города.СоздатьЭлемент();
		Иначе
			СсылкаНаОбъект = Результат.СсылкаНаОбъект.ПолучитьОбъект();
		КонецЕсли;
		СсылкаНаОбъект.Код = Результат.Код;
		СсылкаНаОбъект.Наименование = Результат.Наименование;
		СсылкаНаОбъект.Владелец = РегионВладелец;
		Если Родитель <> СсылкаНаОбъект.Ссылка Тогда
			СсылкаНаОбъект.Родитель = Родитель;
		КонецЕсли;
		СсылкаНаОбъект.Записать();
		Если Родитель.Пустая() Тогда
			Родитель = СсылкаНаОбъект.Ссылка;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУлицы(АдресныеСведения)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	АдресныеСведения.Код,
	               |	АдресныеСведения.КодАдресногоОбъектаВКоде,
	               |	АдресныеСведения.Наименование,
	               |	АдресныеСведения.Сокращение,
	               |	АдресныеСведения.Индекс,
	               |	АдресныеСведения.ТипАдресногоЭлемента,
	               |	АдресныеСведения.КодРайонаВКоде,
	               |	АдресныеСведения.КодГородаВКоде,
	               |	АдресныеСведения.КодНаселенногоПунктаВКоде,
	               |	АдресныеСведения.КодУлицыВКоде,
	               |	АдресныеСведения.ПризнакАктуальности,
	               |	АдресныеСведения.ПолныйКодГорода
	               |ПОМЕСТИТЬ втАдресныеСведения
	               |ИЗ
	               |	&АдресныеСведения КАК АдресныеСведения
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втАдресныеСведения.Код КАК Код,
	               |	втАдресныеСведения.КодАдресногоОбъектаВКоде,
	               |	втАдресныеСведения.Наименование,
	               |	втАдресныеСведения.Сокращение,
	               |	втАдресныеСведения.Индекс,
	               |	втАдресныеСведения.ТипАдресногоЭлемента,
	               |	втАдресныеСведения.КодРайонаВКоде,
	               |	втАдресныеСведения.КодГородаВКоде,
	               |	втАдресныеСведения.КодНаселенногоПунктаВКоде,
	               |	втАдресныеСведения.КодУлицыВКоде,
	               |	втАдресныеСведения.ПризнакАктуальности,
	               |	ЕСТЬNULL(УлицыПоменялся.Ссылка, ЗНАЧЕНИЕ(Справочник.Улицы.ПустаяСсылка)) КАК СсылкаНаОбъект,
	               |	ЕСТЬNULL(Города.Ссылка, ЗНАЧЕНИЕ(Справочник.Города.ПустаяСсылка)) КАК Город,
	               |	втАдресныеСведения.ПолныйКодГорода
	               |ИЗ
	               |	втАдресныеСведения КАК втАдресныеСведения
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Города КАК Города
	               |		ПО втАдресныеСведения.ПолныйКодГорода = Города.Код
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Улицы КАК УлицыЕсть
	               |		ПО втАдресныеСведения.Код = УлицыЕсть.Код
	               |			И втАдресныеСведения.Наименование = УлицыЕсть.Наименование
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Улицы КАК УлицыПоменялся
	               |		ПО втАдресныеСведения.Код = УлицыПоменялся.Код
	               |ГДЕ
	               |	УлицыЕсть.Ссылка ЕСТЬ NULL 
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Код";
	Запрос.УстановитьПараметр("АдресныеСведения",АдресныеСведения);
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		Если Результат.Город.Пустая() Тогда
			Сообщить("Ошибка! Не найден город! Код: "+Результат.Код);
			Продолжить;
		КонецЕсли;
		Если Результат.СсылкаНаОбъект.Пустая() Тогда
			СсылкаНаОбъект = Справочники.Улицы.СоздатьЭлемент();
		Иначе
			СсылкаНаОбъект = Результат.СсылкаНаОбъект.ПолучитьОбъект();
		КонецЕсли;
		СсылкаНаОбъект.Код = Результат.Код;
		СсылкаНаОбъект.Наименование = Результат.Наименование;
		СсылкаНаОбъект.Владелец = Результат.Город;
		СсылкаНаОбъект.Записать();
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИндексы(РегионВладелец,АдресныеСведения)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	АдресныеСведения.Код,
	               |	АдресныеСведения.КодАдресногоОбъектаВКоде,
	               |	АдресныеСведения.Наименование,
	               |	АдресныеСведения.Сокращение,
	               |	АдресныеСведения.Индекс,
	               |	АдресныеСведения.ТипАдресногоЭлемента,
	               |	АдресныеСведения.КодРайонаВКоде,
	               |	АдресныеСведения.КодГородаВКоде,
	               |	АдресныеСведения.КодНаселенногоПунктаВКоде,
	               |	АдресныеСведения.КодУлицыВКоде,
	               |	АдресныеСведения.ПризнакАктуальности,
	               |	АдресныеСведения.ПолныйКодГорода,
	               |	АдресныеСведения.ПолныйКодУлицы
	               |ПОМЕСТИТЬ втАдресныеСведения
	               |ИЗ
	               |	&АдресныеСведения КАК АдресныеСведения
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втАдресныеСведения.Индекс,
	               |	Улицы.Ссылка КАК Улица
	               |ИЗ
	               |	втАдресныеСведения КАК втАдресныеСведения
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Улицы КАК Улицы
	               |		ПО втАдресныеСведения.ПолныйКодУлицы = Улицы.Код
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	втАдресныеСведения.Индекс,
	               |	Улицы.Ссылка";
	Запрос.УстановитьПараметр("АдресныеСведения",АдресныеСведения);
	Результат = Запрос.Выполнить().Выбрать();
	
	РегНабор = РегистрыСведений.АдресныйКлассификаторИндекс.СоздатьНаборЗаписей();
	РегНабор.Отбор.Регион.Установить(РегионВладелец);
	Пока Результат.Следующий() Цикл
		Если Не ЗначениеЗаполнено(СокрЛП(Результат.Индекс)) Тогда
			Продолжить;
		КонецЕсли;
		НовРег = РегНабор.Добавить();
		НовРег.Индекс = Результат.Индекс;
		НовРег.Улица = Результат.Улица;
		НовРег.Регион = РегионВладелец;
	КонецЦикла;
	РегНабор.Записать(Истина);
КонецПроцедуры

// Функция получает уровень адресного элемента (всего 6 уровней) в иерархической системе классификации по его коду
// формат кода:
// _2__3___3___3___4____4____
// |СС|РРР|ГГГ|ППП|УУУУ|ДДДД|
// 
// чем глубже уровень иерархии тем более младшие разряды являются заполненными
//
// Параметры:
//    Код - строка - код, взятый из поля записи CODE файла данных
// 
// Возвращаемое значение:
//    Число [1-6]
&НаСервере
Функция ПолучитьТипАдресногоЭлементаПоКоду(Знач Код)
	
	Размерность = СтрДлина(Код);
	
	// для кодов с размерностью 13 или 17 необходимо уменьшить код
	// на 2 разряда - символы актуальности адресного объекта
	Если Размерность = 13 ИЛИ Размерность = 17 Тогда
		Размерность = Размерность - 2;
		КодЧисло = Число(Сред(Код, 1, СтрДлина(Код)-2));
	ИначеЕсли Размерность = 19 Тогда
		КодЧисло = Число(Сред(Код, 1, СтрДлина(Код)));
	КонецЕсли;
	
	// Проверяем заполненность разрядов ДДДД
	Если Размерность = 19 Тогда
		
		Остаток = КодЧисло % 10000;
		Если Остаток <> 0 Тогда
			Возврат 6;
		КонецЕсли;
		
		КодЧисло = КодЧисло / 10000;
		
	КонецЕсли;
	
	// Проверяем заполненность разрядов УУУУ
	Если Размерность = 15 Тогда
		
		Остаток = КодЧисло % 10000;
		Если Остаток <> 0 Тогда
			Возврат 5;
		КонецЕсли;
		
		КодЧисло = КодЧисло / 10000;
		
	КонецЕсли;
	
	// Проверяем заполненность разрядов ППП
	Остаток = КодЧисло % 1000;
	Если Остаток <> 0 Тогда
		Возврат 4;
	КонецЕсли;
	
	// Проверяем заполненность разрядов ГГГ
	Остаток = КодЧисло % 1000000;
	Если Остаток <> 0 Тогда
		Возврат 3;
	КонецЕсли;
	
	// Проверяем заполненность разрядов РРР
	Остаток = КодЧисло % 1000000000;
	Если Остаток <> 0 Тогда
		Возврат 2;
	КонецЕсли;
	
	// Верхний уровень иерархии - единица
	
	Возврат 1;
	
КонецФункции


// Заполняет переданную таблицу значений по значениям таблицы адресных объектов.
// Выбирается код, наименование и сокращение типа объекта.
//
&НаСервере
Процедура ЗаполнитьТаблицуАдресныхОбъектов()
	
	АдресныеОбъектыДляЗагрузки.Очистить();
	
	КлассификаторАдресныхОбъектовXML = 
	Обработки.КонтактнаяИнформация.ПолучитьМакет("КлассификаторАдресныхОбъектовРоссии").ПолучитьТекст();
	
	КлассификаторТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(КлассификаторАдресныхОбъектовXML).Данные;
	
	Для Каждого АдресныйОбъект Из КлассификаторТаблица Цикл
		
		Наименование = СокрЛП(Лев(АдресныйОбъект.Code, 2) + " - " + АдресныйОбъект.Name + " " + АдресныйОбъект.Socr);
		
		НоваяСтрока = АдресныеОбъектыДляЗагрузки.Добавить();
		НоваяСтрока.НаименованиеАдресногоОбъекта = Наименование;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьВсе(Команда)
	Для Каждого ЭлементАдресныйОбъект Из АдресныеОбъектыДляЗагрузки Цикл
		ЭлементАдресныйОбъект.Пометка = Истина;
	КонецЦикла;
КонецПроцедуры
