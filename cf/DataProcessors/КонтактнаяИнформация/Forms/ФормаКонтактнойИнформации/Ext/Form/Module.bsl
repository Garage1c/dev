// СТАРОЕ НОВОЕ

&НаСервере
Функция ДобавитьПолеФормы(Имя, Группа = Неопределено, Заголовок = Неопределено, ОбработчикПриИзменении = "", ОбработчикНачалоВыбора = "", ЦветФона = Неопределено, ЦветФонаЗаголовка = Неопределено)
	                      // уникальное имя     тип      родитель       
	НовоеПоле = Элементы.Добавить("Поле" + Имя, Тип("ПолеФормы"), Группа);	
	НовоеПоле.ПутьКДанным = Имя;
	НовоеПоле.Заголовок = ?(ЗначениеЗаполнено(Заголовок), Заголовок, Имя);
	НовоеПоле.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	
	Если ЦветФонаЗаголовка <> Неопределено Тогда
		НовоеПоле.ЦветФонаЗаголовка = ЦветФонаЗаголовка;
	КонецЕсли;
	
	Если ЦветФона <> Неопределено Тогда
		НовоеПоле.ЦветФона = ЦветФона;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ОбработчикПриИзменении) Тогда
		НовоеПоле.УстановитьДействие("ПриИзменении", ОбработчикПриИзменении);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбработчикНачалоВыбора) Тогда
		НовоеПоле.УстановитьДействие("НачалоВыбора", ОбработчикНачалоВыбора);
	КонецЕсли;
	
	Возврат НовоеПоле;
	
КонецФункции
&НаСервере
Функция ПолучитьРезультатЗаполнения()
	
	НовоеПредставление = "";
	
	Для Каждого Строка Из ЗначенияПолей Цикл
		Реквизит = ЭтаФорма["Реквизит" + ЗначенияПолей.Индекс(Строка)];
        Если ЗначениеЗаполнено(Реквизит) Тогда
			
			Строка.Значение = Реквизит;
			НовоеПредставление	= НовоеПредставление + ", "  + Строка.Поле.Сокращение + Реквизит;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат СокрЛП(Сред(НовоеПредставление, 2));
	
КонецФункции
&НаСервере
Процедура СформироватьЗаполнитьФорму();
		
			
		НовыеРеквизиты = Новый Массив;
			
		СоответствияИмен	 = Новый Соответствие;
		СоответствияЗначений = Новый Соответствие;
			
		Для Каждого Строка Из ЗначенияПолей Цикл
				
			Имя 		= "Реквизит" + ЗначенияПолей.Индекс(Строка);
			Заголовок 	= Строка.Поле.Наименование;
			Значение	= Строка.Значение;
			Тип         = Строка.Поле.ТипЗначения;
				
			НовыйРеквизит = Новый РеквизитФормы(Имя, Тип, , Заголовок, Истина);
			НовыеРеквизиты.Добавить(НовыйРеквизит);
				                                         
			СоответствияИмен.Вставить(Имя, Заголовок);  
			СоответствияЗначений.Вставить(Имя, Значение);   
				
		КонецЦикла;
			
		// добавляем новые реквизиты формы
		ИзменитьРеквизиты(НовыеРеквизиты);
			
		// заполняем значения реквизитов формы
		Для Каждого Элемент Из СоответствияЗначений Цикл
			ЭтаФорма[Элемент.Ключ] = Элемент.Значение; 	
		КонецЦикла;
			
		// добавлем новые элементы формы
		Для Каждого Элемент Из СоответствияИмен Цикл
			ДобавитьПолеФормы(Элемент.Ключ, , Элемент.Значение);
		КонецЦикла;
			
		ДобавитьПолеФормы("ПолноеПредставление", , "Представление");
		
КонецПроцедуры

// НОВОЕ РАБОТАЮЩЕЕ

&НаСервере
Функция	СформироватьПредставление()
	
	Возврат Обработки.КонтактнаяИнформация.СформироватьПредставление(Группа, ЗначенияПолей, Истина);
	
КонецФункции

&НаКлиенте
Процедура ЗначенияПолейЗначениеПриИзменении(Элемент)
	Если Элементы.ЗначенияПолей.ТекущиеДанные <> Неопределено Тогда //И ЗначениеЗаполнено(Элементы.ЗначенияПолей.ТекущиеДанные.Значение) 
		ТекДанные = Элементы.ЗначенияПолей.ТекущиеДанные;
		
		ОчиститьПоВладельцу(ТекДанные.Поле,ТекДанные.Значение);
		
	КонецЕсли;
	
	ПредставлениеБыло = Представление;
	Представление = СформироватьПредставление();
	
	Если ПредставлениеБыло<>Представление Тогда
		БылоРедактированиеКИ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПоВладельцу(Поле,Значение)
	стрЗначениеВладельца = ЗначенияПолей.НайтиСтроки(Новый Структура("СвязьМеждуТипами",Поле));
	Для Каждого ТекЗначение Из стрЗначениеВладельца Цикл
		ТекЗначение.ЗначениеВладельца = Значение;
		ТекЗначение.Значение = Неопределено;
		
		ОчиститьПоВладельцу(ТекЗначение.Поле,Неопределено);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПроверитьВхождениеСимволов(Поле,Значение)
	Для Каждого ТекЗначение Из Поле.ОграничениеПоСтрокам Цикл
		Если СтрЧислоВхождений(Значение,ТекЗначение.Строка) <> ТекЗначение.Количество Тогда
			Возврат("Поле "+Поле+" заполнено неправильно. Символов """+ТекЗначение.Строка+""" должно быть: "+ТекЗначение.Количество);
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИдентификаторСтроки = Параметры.ИдентификаторСтроки;
	ПодготовитьКонтактныеДанные();  
	
	Если НЕ ЗначенияПолей.Количество() Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Представление 	= ВладелецФормы.КонтактнаяИнформация.НайтиПоИдентификатору(ИдентификаторСтроки).Представление;
    Комментарий		= ВладелецФормы.КонтактнаяИнформация.НайтиПоИдентификатору(ИдентификаторСтроки).Комментарий;
		
КонецПроцедуры
&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	СохранитьДанные();
	Закрыть(ЗначенияПолей);
КонецПроцедуры

&НаСервере
Функция ПоместитьИнформациюВХранилище() 
	
	//Возврат ПоместитьВоВременноеХранилище(
	//				ЗначенияПолей.Выгрузить(), 
	//				УникальныйИдентификатор);
	
	СтруктураПолей = Новый Соответствие;
	Для Каждого Строка ИЗ ЗначенияПолей Цикл Если ЗначениеЗаполнено(Строка.Значение) Тогда СтруктураПолей.Вставить(Строка.Поле, Строка.Значение); КонецЕсли; КонецЦикла;

	Возврат ЗначениеВСтрокуВнутр(СтруктураПолей);
	
КонецФункции
&НаКлиенте
Процедура Выбрать(Команда)
	СохранитьДанные();
	
	БылоРедактированиеКИ = Ложь;
	Модифицированность 	= Ложь;
	ОповеститьОВыборе(Новый Структура("ИД, Поля", ИдентификаторСтроки, ПоместитьИнформациюВХранилище()));
	
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	СохранитьДанные();
КонецПроцедуры

Процедура ЗаполнитьСтруктуруПолей(Вид, Поля, Представление = "")
	
	//Запрос = Новый Запрос("ВЫБРАТЬ Имя Поле, Имя.Сокращение Сокращение, ВЫБОР КОГДА Значение=Неопределено Тогда """" Иначе Значение Конец КАК Значение, ВЫБОР КОГДА Значение=Неопределено Тогда """" Иначе Значение Конец КАК ПустоеЗначение, СвязьМеждуТипами, ПереводСтроки, Вес  ИЗ Справочник.ВидыКонтактнойИнформации.СоставПолей ГДЕ Ссылка = &Ссылка");
	Запрос = Новый Запрос("ВЫБРАТЬ Имя Поле, Имя.Сокращение Сокращение, Имя.Владелец КАК СвязьМеждуТипами, Имя.Обязательный КАК Обязательный, ПереводСтроки, Вес  ИЗ Справочник.ВидыКонтактнойИнформации.СоставПолей ГДЕ Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Вид);
	
	ЗначенияПолей.Загрузить(Запрос.Выполнить().Выгрузить());	
	
	//СоответствиеПолей = КонвертацияТипов.ПолучитьСоответствиеИзВыборки(Запрос.Выполнить().Выбрать(), "Поле", "Значение");
	
	// заполним поля, какие найдем.

	Для Каждого Элемент ИЗ Поля Цикл
		
		Строки = ЗначенияПолей.НайтиСтроки(Новый Структура("Поле", Элемент.Ключ));
		
		Для Каждого Строка Из Строки Цикл Строка.Значение = Элемент.Значение; КонецЦикла;
		
	КонецЦикла;
	
	//Установим владельца по всем заполненным элементам
	Для Каждого ТекДанные Из ЗначенияПолей Цикл
		стрЗначениеВладельца = ЗначенияПолей.НайтиСтроки(Новый Структура("СвязьМеждуТипами",ТекДанные.Поле));
		Для Каждого ТекЗначение Из стрЗначениеВладельца Цикл
			ТекЗначение.ЗначениеВладельца = ТекДанные.Значение;
		КонецЦикла;
	КонецЦикла;
	//-Владелец
	
	Если ЗначенияПолей.НайтиСтроки(Новый Структура("Поле",ПланыВидовХарактеристик.СоставКонтактнойИнформации.КодСтраны)).Количество()>0 И 
	 ЗначенияПолей.НайтиСтроки(Новый Структура("Поле",ПланыВидовХарактеристик.СоставКонтактнойИнформации.КодГорода)).Количество()>0 И 
	 ЗначенияПолей.НайтиСтроки(Новый Структура("Поле",ПланыВидовХарактеристик.СоставКонтактнойИнформации.НомерТелефона)).Количество()>0 Тогда
		Элементы.ФормаВводТелефонаПоШаблону.Видимость = Истина;
	КонецЕсли;

	Если ЗначенияПолей.НайтиСтроки(Новый Структура("Поле",ПланыВидовХарактеристик.СоставКонтактнойИнформации.Улица)).Количество()>0 И 
	 ЗначенияПолей.НайтиСтроки(Новый Структура("Поле",ПланыВидовХарактеристик.СоставКонтактнойИнформации.Город)).Количество()>0 И 
	 ЗначенияПолей.НайтиСтроки(Новый Структура("Поле",ПланыВидовХарактеристик.СоставКонтактнойИнформации.Регион)).Количество()>0 И 
	 ЗначенияПолей.НайтиСтроки(Новый Структура("Поле",ПланыВидовХарактеристик.СоставКонтактнойИнформации.Страна)).Количество()>0 И
	 ЗначенияПолей.НайтиСтроки(Новый Структура("Поле",ПланыВидовХарактеристик.СоставКонтактнойИнформации.Индекс)).Количество()>0 Тогда
		Элементы.ФормаВводАдресаПоИндексу.Видимость = Истина;
	КонецЕсли;

//	Представление = Обработки.КонтактнаяИнформация.СформироватьПредставление(Вид.Родитель, СоответствиеПолей, Ложь); 
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьКонтактныеДанные() Экспорт
	
	Поля = Новый Соответствие;
	
	Если Параметры.Поля <> Неопределено И НЕ ПустаяСтрока(Параметры.Поля) Тогда
		Поля = ЗначениеИзСтрокиВнутр(Параметры.Поля);
	КонецЕсли;
	
	ЗаполнитьСтруктуруПолей(Параметры.Вид, Поля);
	
	//Для Каждого Строка Из Поля Цикл НоваяСтрока = ЗначенияПолей.Добавить();
	//	НоваяСтрока.Поле 		= Строка.Ключ;
	//	НоваяСтрока.Значение 	= Строка.Значение;
	//	НоваяСтрока.Сокращение	= НоваяСтрока.Поле.Сокращение;
	//КонецЦикла;
	
	Вид 	=  Параметры.Вид;
	Группа	=  Вид.Родитель;	
	
	//ЗначенияПолей.Загрузить(ПолучитьИзВременногоХранилища(Параметры.Адрес));
	
	
	//Объект	=  Параметры.Объект;
	//Вид 	=  Параметры.Вид;
	//Группа	=  Вид.Родитель;
	//ID 		=  Параметры.ID;
	//
	//Запрос = Новый Запрос("	ВЫБРАТЬ
	//						|   &Объект             Объект,
	//						|   &ID                 ID,
	//						|   &Вид                Вид,
	//						|	Спр.Имя 			Поле,
	//						|	Спр.Имя.Сокращение 	Сокращение,
	//						|	Рег.Значение 		Значение
	//						|ИЗ 
	//						|	Справочник.ВидыКонтактнойИнформации.СоставПолей Спр
	//						|	ЛЕВОЕ СОЕДИНЕНИЕ
	//						|		(  ВЫБРАТЬ
	//						|				Поле,
	//						|				Значение
	//						|			ИЗ
	//						|				РегистрСведений.КонтактнаяИнформация
	//						|			ГДЕ
	//						|				Объект = &Объект И ID = &ID И Вид = &Вид 
	//						|		) Рег
	//						|	ПО
	//						|		Спр.Имя = Рег.Поле
	//						|ГДЕ
	//						|	Спр.Ссылка = &Вид");
	//						
	//Запрос.УстановитьПараметр("Объект", Объект);
	//Запрос.УстановитьПараметр("ID", 	ID);
	//Запрос.УстановитьПараметр("Вид",	Вид);
	//РезультатЗапроса = Запрос.Выполнить();

	//Если НЕ РезультатЗапроса.Пустой() Тогда
	//	ЗначенияПолей.Загрузить(Запрос.Выполнить().Выгрузить());
	//КонецЕсли;
	//
	//Для Каждого Строка Из ЗначенияПолей ЦИкл
	//	Если НЕ ЗначениеЗаполнено(Строка.Значение) Тогда
	//		Строка.Значение = "";
	//	КонецЕсли;
	//КонецЦикла;
	//	
КонецПроцедуры
&НаСервере
Функция СохранитьЗначенияПолей()
	
	СоответствияЗначенийПолей = Новый Соответствие;
	Для Каждого Строка Из ЗначенияПолей Цикл
		СоответствияЗначенийПолей.Вставить(Строка.Поле, Строка.Значение);
	КонецЦикла;
	
	УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Новый Структура("Объект, ID, Вид, Представление, Комментарий",Объект, ID, Вид, Представление, Комментарий), СоответствияЗначенийПолей);
				
	Возврат Истина;
		
КонецФункции
&НаКлиенте
Процедура СохранитьДанные()
	
	ВладелецФормы.КонтактнаяИнформация.НайтиПоИдентификатору(ИдентификаторСтроки).Представление = Представление;
	ВладелецФормы.КонтактнаяИнформация.НайтиПоИдентификатору(ИдентификаторСтроки).Комментарий 	= Комментарий;

//	СохранитьЗначенияПолей();

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если БылоРедактированиеКИ Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ПослеЗакрытияВопроса",ЭтотОбъект),"Сохранить изменения в форме?", РежимДиалогаВопрос.ДаНетОтмена);
		Отказ = Истина;
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	Если		Результат = КодВозвратаДиалога.Да 		Тогда БылоРедактированиеКИ = Ложь; Выбрать(Неопределено);
	ИначеЕсли 	Результат = КодВозвратаДиалога.Нет		Тогда БылоРедактированиеКИ = Ложь; Закрыть();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	БылоРедактированиеКИ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияПолейПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	ТекДанные = Элементы.ЗначенияПолей.ТекущиеДанные;
	
	Если ОтменаРедактирования Тогда ТекДанные.Значение = ""; Представление = ""; Возврат; КонецЕсли;
	
	ТекстПредупреждения = ПроверитьВхождениеСимволов(ТекДанные.Поле,ТекДанные.Значение);
	Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВводТелефонаПоШаблону(Команда)
	ШаблонТелефона = "";
	ПоказатьВводСтроки(Новый ОписаниеОповещения("ШаблонТелефона",ЭтаФорма),ШаблонТелефона,"Телефон в формате Страна(Город)Телефон");
КонецПроцедуры

&НаКлиенте
Процедура ШаблонТелефона(РезультатВыполнения, Параметры) Экспорт
	Если НЕ ЗначениеЗаполнено(РезультатВыполнения) Тогда
		Возврат;
	КонецЕсли;
	
	RegExp=Новый COMОбъект("VBScript.RegExp");
	RegExp.MultiLine=Ложь; 
	RegExp.Global=Истина;
	RegExp.Pattern = "[^0-9()]";
	РезультатВыполнения = RegExp.Replace(РезультатВыполнения, "");
	
	начГород = стрНайти(РезультатВыполнения,"(");
	конГород = стрНайти(РезультатВыполнения,")");
	
	Если начГород < 2 Или конГород < 2 Тогда
		ПоказатьПредупреждение(,"Не найден символ ( или )");
		Возврат;
	КонецЕсли;
	
	Страна = Лев(РезультатВыполнения,начГород-1);
	Город = Сред(РезультатВыполнения,начГород+1,конГород-начГород-1);
	Телефон = Прав(РезультатВыполнения,СтрДлина(РезультатВыполнения)-конГород);
	
	Если Не ЗначениеЗаполнено(Страна) Или Не ЗначениеЗаполнено(Город) Или Не ЗначениеЗаполнено(Телефон) Тогда
		ПоказатьПредупреждение(,"Не удалось распознать страну, город или телефон");
		Возврат;
	КонецЕсли;
	
	ТекСтр = ЗначенияПолей.НайтиСтроки(Новый Структура("Поле",ПредопределенноеЗначение("ПланВидовХарактеристик.СоставКонтактнойИнформации.КодСтраны")));
	ТекСтр[0].Значение = Страна;
	ТекСтр = ЗначенияПолей.НайтиСтроки(Новый Структура("Поле",ПредопределенноеЗначение("ПланВидовХарактеристик.СоставКонтактнойИнформации.КодГорода")));
	ТекСтр[0].Значение = Город;
	ТекСтр = ЗначенияПолей.НайтиСтроки(Новый Структура("Поле",ПредопределенноеЗначение("ПланВидовХарактеристик.СоставКонтактнойИнформации.НомерТелефона")));
	ТекСтр[0].Значение = Телефон;
	
	ПредставлениеБыло = Представление;
	Представление = СформироватьПредставление();
	
	Если ПредставлениеБыло<>Представление Тогда
		БылоРедактированиеКИ = Истина;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ВводАдресаПоИндексу(Команда)
	Индекс = "";
	ПоказатьВводСтроки(Новый ОписаниеОповещения("ВводАдресаПоИндексуОкончание",ЭтаФорма),Индекс,"Индекс");
КонецПроцедуры

&НаКлиенте
Процедура ВводАдресаПоИндексуОкончание(РезультатВыполнения, Параметры) Экспорт
	Если ЗначениеЗаполнено(РезультатВыполнения) Тогда
		АдресПоИндексу = АдресПоИндексуСервер(РезультатВыполнения);
		Если АдресПоИндексу = Ложь Тогда
			ПоказатьПредупреждение(,"Записей по такому индексу не найдено");
		ИначеЕсли АдресПоИндексу = Истина Тогда
			ОткрытьФорму("РегистрСведений.АдресныйКлассификаторИндекс.Форма.ФормаВыбора",Новый Структура("Отбор", Новый Структура("Индекс",РезультатВыполнения)),ЭтаФорма).Открыть();
//УсловияОтбора = Новый Структура;
//УсловияОтбора.Вставить("ФизЛицо", Объект.Ссылка);
//// ИМНС21 - Паспорт гражданина Российской Федерации
//УсловияОтбора.Вставить("ДокументВид", ПредопределенноеЗначение("Справочник.ДокументыУдостоверяющиеЛичность.ИМНС21"));
//ПараметрыФормы = Новый Структура ("Отбор", УсловияОтбора);
//ОткрытьФорму("РегистрСведений.ПаспортныеДанныеФизЛиц.ФормаСписка", ПараметрыФормы);
		Иначе
			ЗаполнитьПоляПоУлице(РезультатВыполнения,АдресПоИндексу);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция АдресПоИндексуСервер(Индекс)
	РегМенеджер = РегистрыСведений.АдресныйКлассификаторИндекс.СоздатьНаборЗаписей();
	РегМенеджер.Отбор.Индекс.Установить(Индекс);
	РегМенеджер.Прочитать();
	Если РегМенеджер.Количество()=1 Тогда
		Возврат РегМенеджер[0].Улица;
	ИначеЕсли РегМенеджер.Количество()>1 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ЗаполнитьПоляПоУлице(Индекс,Улица)
	ТекСтр = ЗначенияПолей.НайтиСтроки(Новый Структура("Поле",ПредопределенноеЗначение("ПланВидовХарактеристик.СоставКонтактнойИнформации.Улица")));
	ТекСтр[0].Значение = Улица;
	ТекСтр[0].ЗначениеВладельца = Улица.Владелец;
	ТекСтр = ЗначенияПолей.НайтиСтроки(Новый Структура("Поле",ПредопределенноеЗначение("ПланВидовХарактеристик.СоставКонтактнойИнформации.Город")));
	ТекСтр[0].Значение = Улица.Владелец;
	ТекСтр[0].ЗначениеВладельца = Улица.Владелец.Владелец;
	ТекСтр = ЗначенияПолей.НайтиСтроки(Новый Структура("Поле",ПредопределенноеЗначение("ПланВидовХарактеристик.СоставКонтактнойИнформации.Регион")));
	ТекСтр[0].Значение = Улица.Владелец.Владелец;
	ТекСтр[0].ЗначениеВладельца = Улица.Владелец.Владелец.Владелец;
	ТекСтр = ЗначенияПолей.НайтиСтроки(Новый Структура("Поле",ПредопределенноеЗначение("ПланВидовХарактеристик.СоставКонтактнойИнформации.Страна")));
	ТекСтр[0].Значение = Улица.Владелец.Владелец.Владелец;
	ТекСтр = ЗначенияПолей.НайтиСтроки(Новый Структура("Поле",ПредопределенноеЗначение("ПланВидовХарактеристик.СоставКонтактнойИнформации.Индекс")));
	ТекСтр[0].Значение = Индекс;
	
	ПредставлениеБыло = Представление;
	Представление = СформироватьПредставление();
	
	Если ПредставлениеБыло<>Представление Тогда
		БылоРедактированиеКИ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	ОбработкаВыбораНаСервере(ВыбранноеЗначение);
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораНаСервере(ВыбранноеЗначение)
	ЗаполнитьПоляПоУлице(ВыбранноеЗначение.Индекс,ВыбранноеЗначение.Улица);
КонецПроцедуры


