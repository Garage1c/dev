
&НаКлиенте
Процедура ВыдатьКарту(Команда)
	Если ПроверитьЗаполнение() Тогда
	Если ЗначениеЗаполнено(Продажа) Тогда
		Если ТипЗнч(Продажа) = Тип("ДокументСсылка.РеализацияТоваров") Тогда
		ВыдатьКартуПоРеализации(Продажа);
		ИначеЕсли ТипЗнч(Продажа) = Тип("ДокументСсылка.ЧекККМ") Тогда
		ВыдатьКартуПоЧеку(Продажа);
	    КонецЕсли;
	КонецЕсли; КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПроверитьШтрихКод(ШтрихКод)
	
	//ОтборШтрихКод = Новый Структура("ШтрихКод");
	//ОтборШтрихКод.ШтрихКод = ШтрихКод;
	//ВыборкаШтрихКод = РегистрыСведений.ШтрихКоды.Выбрать(,,ОтборШтрихКод);          //не индексируется
	//Если ВыборкаШтрихКод.Следующий() Тогда Возврат Ложь КонецЕсли;
	//Возврат Истина;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ШтрихКоды.ШтрихКод
	               |ИЗ
	               |	РегистрСведений.ШтрихКоды КАК ШтрихКоды
	               |ГДЕ
	               |	ШтрихКоды.ШтрихКод = &ШтрихКод";
	Запрос.УстановитьПараметр("ШтрихКод",ШтрихКод);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда Возврат Ложь КонецЕсли;
	Возврат Истина;
КонецФункции

&НаСервере
Процедура ВыдатьКартуПоЧеку(Продажа)
	
	//1. Партнер
	//2. Контрагент
	//3. Контактная информация
	//4. Информационная карта
	Если Не Объект.Доставка и Не ЗначениеЗАполнено(Объект.МестоВыдачиКарты) Тогда
		Сообщить("Заполните место выдачи карты");
		Возврат;
	КонецЕсли;	
	
	врШтрихКод = "2010000" + Объект.ПЦШтрихкода;
	ТипШтрихКода = Перечисления.ТипыШтрихКодов.EAN13;

	Если ПроверитьШтрихКод(врШтрихКод) = Истина Тогда
		
	Попытка
	// НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
	//НовыйКонтрагент.Наименование   = Объект.НаименованиеКонтрагента;
	//НовыйКонтрагент.НаименованиеПолное = Объект.НаименованиеКонтрагента;
	//НовыйКонтрагент.Клиент = Истина;
	РозничныйТипЦен = КэшируемыеФункции.ПолучитьТипЦенРозница(); //Справочники.ТипыЦен.НайтиПоКоду("000000004");//"Розничные"
	//НовыйКонтрагент.ТипЦен = РозничныйТипЦен;
	//НовыйКонтрагент.ОсновнойМенеджер = Объект.ОсновнойМенеджер;
	////НовыйПартнер.ДатаСоздания = ТекущаяДата();
	//НовыйКонтрагент.ОткудаПришел = Объект.ОткудаПришел;
	////НовыйКонтрагент.Родитель = Справочники.Контрагенты.НайтиПоКоду("000011147");//RETAIL
	//НовыйКонтрагент.Записать();
	//
	НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
	НовыйКонтрагент.Наименование = Объект.НаименованиеПартнера;
	НовыйКонтрагент.НаименованиеПолное = Объект.НаименованиеПартнера;
	НовыйКонтрагент.СокрНаименование = Объект.НаименованиеПартнера;
	НовыйКонтрагент.ТипЦен = РозничныйТипЦен;
	//НовыйКонтрагент.Партнер = НовыйПартнер.Ссылка;
	НовыйКонтрагент.Город = Объект.Город;
	НовыйКонтрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;  //ФизЛицо
	ЗаписьОДоговоре = НовыйКонтрагент.Организации.Добавить();
	ЗаписьОДоговоре.Организация = СПравочники.Организации.НайтиПоКоду("000000002");//И.П.Кукушкина
	
	КонтактМобТел = НовыйКонтрагент.КонтактнаяИнформация.Добавить();
	КонтактМобТел.Вид = Справочники.ВидыКонтактнойИнформации.НайтиПоКоду("00014");//мобильный телефон
	КонтактМобТел.Представление = Объект.МобильныйТел;
	
Если ЗначениеЗаполнено(Объект.ЭлПочта) Тогда
	КонтактПочта = НовыйКонтрагент.КонтактнаяИнформация.Добавить();
	КонтактПочта.Вид = Справочники.ВидыКонтактнойИнформации.НайтиПоКоду("00052");//электронная почта
	КонтактПочта.Представление = Объект.ЭлПочта;
КонецЕсли;

	НовыйКонтрагент.Записать();
		 
	НаборПредКонтИнф = РегистрыСведений.ПредставлениеКонтактнойИнформации.СоздатьНаборЗаписей();
   	НаборПредКонтИнф.Отбор.Объект.Установить(НовыйКонтрагент.Ссылка);
	НаборПредКонтИнф.Прочитать();
	НаборПредКонтИнф.Очистить();

	Для Каждого СтрокаТаблицы Из НовыйКонтрагент.КонтактнаяИнформация Цикл
			
			НоваяСтрока = НаборПредКонтИнф.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Объект 	= НовыйКонтрагент.Ссылка;
			
	КонецЦикла;
		
	НаборПредКонтИнф.Записать();
		
	НаборКонтИнф = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
	НаборКонтИнф.Отбор.Объект.Установить(НовыйКонтрагент.Ссылка);	
	НаборКонтИнф.Прочитать();
	НаборКонтИнф.Очистить();
	
	Для Каждого СтрокаТаблицы ИЗ НовыйКонтрагент.КонтактнаяИнформация Цикл
									
				НоваяСтрока = НаборКонтИнф.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				НоваяСтрока.Объект 	= НовыйКонтрагент.Ссылка;
										
	КонецЦикла; 
	
	НаборКонтИнф.Записать();

	// ***
			
	НовыйИнфК = Справочники.ИнформационныеКарты.СоздатьЭлемент();
	//НовыйИнфК.ВладелецКарты = НовыйПартнер.Ссылка;
	НовыйИнфК.Контрагент = НовыйКонтрагент.Ссылка;
	НовыйИнфК.Процент       = Объект.Процент;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ЦеноваяГруппа",Справочники.ЦеновыеГруппы.Основная);
	ЗаписиОПроцентеСкидки = РегистрыСведений.СкидкиПоЦеновымГруппам.СрезПоследних(,Отбор);
	
	НовыйИнфК.УровеньСкидки = ЗаписиОПроцентеСкидки.Найти(НовыйИнфК.Процент,"ПроцентСкидки").УровеньСкидки;
	
	НовыйИнфК.Сумма         = Объект.Сумма;
	//НовыйИнфК.ЭлПочта         = Объект.ЭлПочта;
	НовыйИнфК.ТипКарты      = Перечисления.ТипыИнформационныхКарт.ДисконтнаяКарта; //Дисконтная карта
	НовыйИнфК.Наименование  = "Дисконтная карта " +  Объект.НомерКарты;
	НовыйИнфК.ДатаСоздания  = ТекущаяДата();
	НовыйИнфК.МестоВыдачиКарты = Объект.МестоВыдачиКарты;
	НовыйИнфК.Доставка = Объект.Доставка;
    НовыйИнфК.Записать();

	//
		    	 	
		ЗаписьШтрихкода = РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();
		
		ЗаписьШтрихкода.Объект				= НовыйИнфК.Ссылка;
		ЗаписьШтрихкода.ТипШтрихКода 		= ТипШтрихКода;
		ЗаписьШтрихкода.ШтрихКод     		= врШтрихКод;
		ЗаписьШтрихкода.Записать();
		
	Сообщить("Контрагенту: " + НовыйКонтрагент.Наименование + ", выдана карта: " + НовыйИнфК.Наименование);	
Исключение
	Сообщить(ОписаниеОшибки());
КонецПопытки;
Иначе
    Сообщить("Проверьте штрихкод карты, возможно такая карта уже выдана Контрагенту!");
КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВыдатьКартуПоРеализации(Продажа)
	
	//4. Информационная карта
	Если Не Объект.Доставка и Не ЗначениеЗАполнено(Объект.МестоВыдачиКарты) Тогда
		Сообщить("Заполните место выдачи карты");
		Возврат;
	КонецЕсли;	
	
	врШтрихКод   = "2010000" + Объект.ПЦШтрихкода;
	ТипШтрихКода = Перечисления.ТипыШтрихКодов.EAN13;
	Контрагент      = Продажа.Контрагент;
	
	
	Если ЗначениеЗаполнено(Объект.ЭлПочта) Тогда
		ОбъектКонтрагент=Контрагент.ПолучитьОбъект();
		КонтактПочта = ОбъектКонтрагент.КонтактнаяИнформация.Добавить();
		КонтактПочта.Вид = Справочники.ВидыКонтактнойИнформации.НайтиПоКоду("00052");//электронная почта
		//КонтактПочта.Вид = Справочники.ВидыКонтактнойИнформации.НайтиПоКоду("00033");//электронная почта
		КонтактПочта.Представление = Объект.ЭлПочта;
		КонтактПочта.ID=Новый УникальныйИдентификатор;
		КонтактПочта.Idстроки=Новый УникальныйИдентификатор;
		КонтактПочта.ЗначениеПоУмолчанию=Истина;
		КонтактПочта.Комментарий="";
		
		
		
		Попытка
			ОбъектКонтрагент.Записать();
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
		НаборПредКонтИнф = РегистрыСведений.ПредставлениеКонтактнойИнформации.СоздатьНаборЗаписей();
		НаборПредКонтИнф.Отбор.Объект.Установить(Контрагент.Ссылка);
		НаборПредКонтИнф.Прочитать();
		НаборПредКонтИнф.Очистить();
		
		Для Каждого СтрокаТаблицы Из Контрагент.КонтактнаяИнформация Цикл
			
			НоваяСтрока = НаборПредКонтИнф.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Объект 	= Контрагент.Ссылка;
			
		КонецЦикла;
		
		НаборПредКонтИнф.Записать();
		
		НаборКонтИнф = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
		НаборКонтИнф.Отбор.Объект.Установить(Контрагент.Ссылка);	
		НаборКонтИнф.Прочитать();
		НаборКонтИнф.Очистить();
		
		Для Каждого СтрокаТаблицы ИЗ Контрагент.КонтактнаяИнформация Цикл
			
			НоваяСтрока = НаборКонтИнф.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Объект 	= Контрагент.Ссылка;
			
		КонецЦикла; 
		
		НаборКонтИнф.Записать();
		
		
	КонецЕсли;
	
	Если ПроверитьШтрихКод(врШтрихКод) = Истина Тогда
		
		Попытка
			
			
			// ***
			НовыйИнфК = Справочники.ИнформационныеКарты.СоздатьЭлемент();
			НовыйИнфК.Контрагент = Контрагент.Ссылка;
			НовыйИнфК.Процент       = Объект.Процент;
			
			Отбор = Новый Структура;
			Отбор.Вставить("ЦеноваяГруппа",Справочники.ЦеновыеГруппы.Основная);
			ЗаписиОПроцентеСкидки = РегистрыСведений.СкидкиПоЦеновымГруппам.СрезПоследних(,Отбор);
			
			НовыйИнфК.УровеньСкидки = ЗаписиОПроцентеСкидки.Найти(НовыйИнфК.Процент,"ПроцентСкидки").УровеньСкидки;
			
			НовыйИнфК.Сумма         = Объект.Сумма;
			НовыйИнфК.ТипКарты      = Перечисления.ТипыИнформационныхКарт.ДисконтнаяКарта; //Дисконтная карта
			НовыйИнфК.Наименование  = "Дисконтная карта " +   Объект.НомерКарты;
			НовыйИнфК.ДатаСоздания  = ТекущаяДата();
			НовыйИнфК.МестоВыдачиКарты = Объект.МестоВыдачиКарты;
			НовыйИнфК.Доставка = Объект.Доставка;
			НовыйИнфК.Записать();
			//
			
			ЗаписьШтрихкода = РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();
			
			ЗаписьШтрихкода.Объект				= НовыйИнфК.Ссылка;
			ЗаписьШтрихкода.ТипШтрихКода 		= ТипШтрихКода;
			ЗаписьШтрихкода.ШтрихКод     		= врШтрихКод;
			ЗаписьШтрихкода.Записать();
			
			Сообщить("Контрагенту: " + Контрагент.Наименование + ", выдана карта: " + НовыйИнфК.Наименование);	
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	Иначе
		Сообщить("Проверьте штрихкод карты, возможно такая карта уже выдана Контрагенту!");
	КонецЕсли;
КонецПроцедуры


&НаСервере
Процедура ПоискатьНаСервере()
	// Вставить содержимое обработчика. 
	КонецПроцедуры

&НаКлиенте
Процедура Поискать(Команда)
	ПоискатьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПродажаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
  Если ВыбранноеЗначение = Тип("ДокументСсылка.РеализацияТоваров") Тогда
	СтандартнаяОбработка = Ложь;

	ФормаВыбора = ПолучитьФорму("Документ.РеализацияТоваров.ФормаВыбора",,Элемент);
	
	ЭлементОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Дата");
    ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
    ЭлементОтбора.Использование  = Истина;
    ЭлементОтбора.ПравоеЗначение = НачалоДня(ТекущаяДата());
		
	ФормаВыбора.Открыть();
		
ИначеЕсли ВыбранноеЗначение = Тип("ДокументСсылка.ЧекККМ") Тогда
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = ПолучитьФорму("Документ.ЧекККМ.ФормаВыбора",,Элемент);
	
	ЭлементОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Дата");
    ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
    ЭлементОтбора.Использование  = Истина;
    ЭлементОтбора.ПравоеЗначение = НачалоДня(ТекущаяДата());
	
	ЭлементОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Касса");
    ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
    ЭлементОтбора.Использование  = Истина;
    ЭлементОтбора.ПравоеЗначение = ПолучитьЗначениеЗначениеНастройкиПользователя("ПоУмолчанию_Касса");

		
	ФормаВыбора.Открыть(); КонецЕсли;

   
	Если  ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.РеализацияТоваров") Тогда
		СтандартнаяОбработка = Ложь;
	    Продажа = ВыбранноеЗначение;
		ЗаполнитьФормуПоРеализации(ВыбранноеЗначение); 
	ИначеЕсли  ТипЗнч(ВыбранноеЗначение) =  Тип("ДокументСсылка.ЧекККМ")   Тогда 
		СтандартнаяОбработка = Ложь;
		Продажа = ВыбранноеЗначение;
		ЗаполнитьФормуПоЧеку(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеЗначениеНастройкиПользователя(ИмяНастройки) 	
	// Возвращает значение по умолчанию для текущено пользователя
	
	Запрос = Новый Запрос("ВЫБРАТЬ Значение ИЗ РегистрСведений.ЗначенияНастроекПользователя ГДЕ Пользователь = &Пользователь И Настройка = &Настройка");
	
	Запрос.УстановитьПараметр("Пользователь", 	ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("Настройка", 		ПланыВидовХарактеристик.НастройкиПользователя[ИмяНастройки]);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		// Значения
		
		Возврат Выборка.Значение;
		
	Иначе
		
		// Пустое значения по типу
		
		Возврат ПланыВидовХарактеристик.НастройкиПользователя[ИмяНастройки].ТипЗначения.ПривестиЗначение();
		
	КонецЕсли;
	
КонецФункции


&НаСервере
Процедура ЗаполнитьФормуПоРеализации(Документ)
	
	
	   ПустойОбъект = Обработки.ВыдачаДисконтныхКарт.Создать();
	   ЗаполнитьЗначенияСвойств(Объект,ПустойОбъект);
	   
	   Основание = Документ;
	   //ПартнерСсылка = Основание.Партнер;
	   КонтрагентСсылка = Основание.Контрагент;
	   
	   Объект.НаименованиеПартнера = КонтрагентСсылка.НаименованиеПолное;
	   Элементы.НаименованиеПартнера.ТолькоПросмотр = Истина;
	   
	   Объект.ОткудаПришел         = КонтрагентСсылка.ОткудаПришел;
	   //Элементы.ОткудаПришел.ТолькоПросмотр = Истина;
  	   
	   Объект.ОсновнойМенеджер     = КонтрагентСсылка.ОсновнойМенеджер;
	   Элементы.ОсновнойМенеджер.ТолькоПросмотр = Истина;
	   
	   //Отбор = Новый Структура;
	   //Отбор.Вставить("Объект",КонтрагентСсылка.ПолучитьОбъект());
	   //ЗаписиОКонтактах = РегистрыСведений.ПредставлениеКонтактнойИнформации.Выбрать(Отбор);
	   //Объект.ЭлПочта              = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеКонтактнойИнформацииОбъекта(КонтрагентСсылка, Справочники.ВидыКонтактнойИнформации.НайтиПоКоду("00052"));
	   Объект.ЭлПочта              = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеКонтактнойИнформацииОбъекта(КонтрагентСсылка, Справочники.ВидыКонтактнойИнформации.НайтиПоКоду("00033"));
	   //Элементы.ЭлПочта.ТолькоПросмотр = Истина;
	   	   
	  // Объект.МобильныйТел         = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеКонтактнойИнформацииОбъекта(КонтрагентСсылка, Справочники.ВидыКонтактнойИнформации.НайтиПоКоду("00014"));
	   Объект.МобильныйТел =  ФормированиеПечатныхФорм.ПолучитьТелефонИзКонтактнойИнформации(КонтрагентСсылка);
	   Элементы.МобильныйТел.ТолькоПросмотр = Истина;

	   Объект.Город                = КонтрагентСсылка.Город;
	   Элементы.Город.ТолькоПросмотр = Истина;
	   
	   Объект.Сумма	               = Основание.Сумма;
	   Элементы.Сумма.ТолькоПросмотр = Истина;
	   
	   Объект.МестоВыдачиКарты = ПолучитьЗначениеЗначениеНастройкиПользователя("ПоУмолчанию_Склад")
	   
  //     Если Объект.Сумма < 5000 Тогда
  //  	Объект.Процент = 2;   
  //  	   Иначе
  //     Отбор = Новый Структура;
  //     Отбор.Вставить("ЦеноваяГруппа",Справочники.ЦеновыеГруппы.Основная);
  //     Отбор.Вставить("УровеньСкидки",Основание.Партнер.УровеньСкидки);
  //     ЗаписиОПроцентеСкидки = РегистрыСведений.СкидкиПоЦеновымГруппам.СрезПоследних(,Отбор);
  //     
  //  Если ЗаписиОПроцентеСкидки.Количество() > 0 Тогда
  //  	  Объект.Процент              = ЗаписиОПроцентеСкидки[0].ПроцентСкидки;
  //    КонецЕсли;
  //КонецЕсли; 
  //
  //     Элементы.Процент.ТолькоПросмотр = Истина; 
	  
	  
  КонецПроцедуры
  
&НаСервере
Процедура ЗаполнитьФормуПоЧеку(Документ)
	
	   ПустойОбъект = Обработки.ВыдачаДисконтныхКарт.Создать();
	   ЗаполнитьЗначенияСвойств(Объект,ПустойОбъект);
	   
	   Элементы.НаименованиеПартнера.ТолькоПросмотр = Ложь;
	   //Элементы.ОткудаПришел.ТолькоПросмотр         = Ложь;
	   Элементы.ОсновнойМенеджер.ТолькоПросмотр     = Истина;
	   //Элементы.ЭлПочта.ТолькоПросмотр              = Ложь;
       Элементы.МобильныйТел.ТолькоПросмотр         = Ложь;
       Элементы.Город.ТолькоПросмотр                = Ложь;
       Элементы.Процент.ТолькоПросмотр              = Ложь;
	   Основание = Документ;
	   
	 	Объект.ОткудаПришел = Справочники.ОткудаПришел.РозничныйМагазин;
		Объект.ОсновнойМенеджер = Справочники.Пользователи.СвободныйЛид;
	   
	   Объект.Сумма	                 = Основание.Сумма;
	   Элементы.Сумма.ТолькоПросмотр = Истина;
	   
	   Объект.МестоВыдачиКарты = ПолучитьЗначениеЗначениеНастройкиПользователя("ПоУмолчанию_Склад")
	   
	 	   	
	//Запрос = Новый Запрос("ВЫБРАТЬ
	//                      |	МАКСИМУМ(ЕСТЬNULL(СкдУстан.ПроцентСкидки, 0)) КАК Процент,
	//                      |	Внз.Продажа,
	//                      |	СкдУстан.ЦеноваяГруппа
	//                      |ИЗ
	//                      |	(ВЫБРАТЬ
	//                      |		ЧекККМ.Ссылка КАК Продажа,
	//                      |		ЕСТЬNULL(Прг.Сумма, 0) КАК Порог,
	//                      |		Прг.УровеньСкидки КАК УровеньСкидки
	//                      |	ИЗ
	//                      |		Документ.ЧекККМ КАК ЧекККМ
	//                      |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорогНакопительнойСкидки КАК Прг
	//                      |			ПО ЧекККМ.Сумма >= Прг.Сумма
	//                      |	ГДЕ
	//                      |		ЧекККМ.Ссылка = &ДокПродажа) КАК Внз
	//                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СкидкиПоЦеновымГруппам.СрезПоследних(, ЦеноваяГруппа = &ОсновнаяЦеноваяГруппа) КАК СкдУстан
	//                      |		ПО Внз.УровеньСкидки = СкдУстан.УровеньСкидки
	//                      |
	//                      |СГРУППИРОВАТЬ ПО
	//                      |	СкдУстан.ЦеноваяГруппа,
	//                      |	Внз.Продажа");
	//Запрос.УстановитьПараметр("ОсновнаяЦеноваяГруппа",Справочники.ЦеновыеГруппы.Основная);
	//Запрос.УстановитьПараметр("ДокПродажа",Основание);
	//ЗаписиОПроцентеСкидки = Запрос.Выполнить().Выгрузить();
	////   
	//Если ЗаписиОПроцентеСкидки.Количество() > 0 Тогда
	//	  Объект.Процент              = ЗаписиОПроцентеСкидки[0].Процент;
	//КонецЕсли;
	////  
	// Элементы.Процент.ТолькоПросмотр = Истина; 
	  
	  
КонецПроцедуры

&НаКлиенте
Процедура ПродажаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Продажа) и (ТипЗнч(Продажа) = Тип("ДокументСсылка.РеализацияТоваров") или ТипЗнч(Продажа) = Тип("ДокументСсылка.ЧекККМ")) Тогда
		 Продажа = Неопределено;
	 КонецЕсли;
	 Если НЕ ЗначениеЗаполнено(Продажа) и (ТипЗнч(Продажа) = Тип("ДокументСсылка.РеализацияТоваров") или ТипЗнч(Продажа) = Тип("ДокументСсылка.ЧекККМ")) Тогда
		 
	СтандартнаяОбработка = Ложь;
	   
Если ТипЗнч(Продажа) = Тип("ДокументСсылка.РеализацияТоваров") Тогда
	
	ФормаВыбора = ПолучитьФорму("Документ.РеализацияТоваров.ФормаВыбора",,Элемент);
	
	ЭлементОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Дата");
    ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
    ЭлементОтбора.Использование  = Истина;
    ЭлементОтбора.ПравоеЗначение = НачалоДня(ТекущаяДата());
		
	ФормаВыбора.Открыть();
		
ИначеЕсли ТипЗнч(Продажа) = Тип("ДокументСсылка.ЧекККМ") Тогда
		
	ФормаВыбора = ПолучитьФорму("Документ.ЧекККМ.ФормаВыбора",,Элемент);
	
	ЭлементОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Дата");
    ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
    ЭлементОтбора.Использование  = Истина;
    ЭлементОтбора.ПравоеЗначение = НачалоДня(ТекущаяДата());
	
	ЭлементОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Касса");
    ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
    ЭлементОтбора.Использование  = Истина;
    ЭлементОтбора.ПравоеЗначение = ПолучитьЗначениеЗначениеНастройкиПользователя("ПоУмолчанию_Касса");
		
	ФормаВыбора.Открыть(); КонецЕсли;

КонецЕсли;
	
 КонецПроцедуры

//&НаКлиенте
// Процедура ПриОткрытии(Отказ)
//	 Объект.МестоВыдачиКарты = ПолучитьЗначениеЗначениеНастройкиПользователя("ПоУмолчанию_Склад");
// КонецПроцедуры

&НаКлиенте
 Процедура ДоставкаПриИзменении(Элемент)
	 Если Объект.Доставка Тогда
		Объект.МестоВыдачиКарты = Неопределено; 
	 Иначе
		Объект.МестоВыдачиКарты = ПолучитьЗначениеЗначениеНастройкиПользователя("ПоУмолчанию_Склад"); 
	 КонецЕсли;	 
 КонецПроцедуры

&НаКлиенте
 Процедура МестоВыдачиКартыПриИзменении(Элемент)
	 Если ЗначениеЗаполнено(Объект.МестоВыдачиКарты) Тогда 
		 Объект.Доставка=Ложь;
	 Иначе
		 Объект.Доставка=Истина;
     КонецЕсли;
КонецПроцедуры



