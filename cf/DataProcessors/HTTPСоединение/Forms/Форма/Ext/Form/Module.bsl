&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.Сервер 		= "soap.adenin.ru";
	Объект.Порт			= 80;
	Объект.АдресРесурса	= "/api/users.json";
	Объект.ТекстЗапроса = "api_key=R5yQvf9T6C22d1qdkDPj";
	
	
	
	ОписаниеHTTP = "
|	HTTPСоединение (HTTPConnection)
|Свойства:
|
|Защищенное (IsSecure)
|Пароль (Password)
|Пользователь (User)
|Порт (Port)
|Прокси (Proxy)
|Сервер (Host)
|
|Методы:
|
|Записать (Put)
|ОтправитьДляОбработки (Post)
|Получить (Get)
|Удалить (Delete)
|
|Конструкторы:
|
|По указаному серверу
|
|Описание:
|
|Предназначен для работы с файлами на http-серверах. 
|Позволяет использовать аутентификацию по имени пользователя и паролю или NTLM (Integrated Security) аутентификацию (в версии 1С:Предприятия под Windows). 
|NTLM аутентификация используется по умолчанию для прокси-серверов, поддерживающих, данный способ аутентификации, и не требует дополнительных настроек, т.е. NTLM аутентификация будет использоваться, если в конструкторе объекта HTTPСоединение прокси не задан или задан, но без указания имени пользователя и пароля. Задание в конструкторе объекта HTTPСоединение прокси с указанным именем пользователя и паролем отключает NTLM аутентификацию, для аутентификации в этом случае используется HTTP Basic аутентификация.
|
|Доступность: 
|
|Тонкий клиент, сервер, толстый клиент, внешнее соединение. 
|";

ОписаниеPUT = "
|HTTPСоединение (HTTPConnection)
|Записать (Put)
|Синтаксис:
|
|Записать(<Источник>, <ИмяВыходногоФайла>, <Заголовки>) 
|Параметры:
|
|<Источник> (обязательный)
|
|Тип: Строка. Адрес файла-источника. 
|<ИмяВыходногоФайла> (обязательный)
|
|Тип: Строка. Адрес ресурса на сервере, в который записываются данные из источника. 
|<Заголовки> (необязательный)
|
|Тип: Строка. Указываются заголовки, добавляемые к запросу на сервер. Текстовые пары вида <Заголовок>:<Значение>, разделяемые комбинацией ВК + ПС. 
|Описание:
|
|Записывает файл по указанному адресу.
|
|Доступность: 
|
|Сервер, толстый клиент, внешнее соединение.
|";

ОписаниеPOST = "
|HTTPСоединение (HTTPConnection)
|ОтправитьДляОбработки (Post)
|Синтаксис:
|
|ОтправитьДляОбработки(<Источник>, <АдресРесурса>, <ИмяВыходногоФайла>, <Заголовки>) 
|Параметры:
|
|<Источник> (обязательный)
|
|Тип: Строка. Адрес файла-источника. 
|<АдресРесурса> (обязательный)
|
|Тип: Строка. Адрес ресурса на сервере, в который посылаются данные из источника. 
|<ИмяВыходногоФайла> (обязательный)
|
|Тип: Строка. Имя выходного файла, в который записываются полученные с сервера данные. 
|<Заголовки> (необязательный)
|
|Тип: Строка. Указываются заголовки, добавляемые к запросу на сервер. Текстовые пары вида <Заголовок>:<Значение>, разделяемые комбинацией ВК+ ПС. 
|Описание:
|
|Отправить ресурс на указанный адрес для обработки.
|
|Доступность: 
|
|Сервер, толстый клиент, внешнее соединение. 
|";

ОписаниеGET = "
|HTTPСоединение (HTTPConnection)
|Получить (Get)
|Синтаксис:
|
|Получить(<Источник>, <ИмяВыходногоФайла>, <Заголовки>) 
|Параметры:
|
|<Источник> (обязательный)
|
|Тип: Строка. Адрес ресурса на сервере. 
|<ИмяВыходногоФайла> (обязательный)
|
|Тип: Строка. Имя файла, в который помещаются данные полученного ресурса. 
|<Заголовки> (необязательный)
|
|Тип: Строка. Указываются заголовки, добавляемые к запросу на сервер. Текстовые пары вида <Заголовок>:<Значение>, разделяемые комбинацией ВК + ПС. 
|Описание:
|
|Получает ресурс из указанного адреса.
|
|Доступность: 
|
|Сервер, толстый клиент, внешнее соединение. 
|";

ОписаниеDelete = "
|HTTPСоединение (HTTPConnection)
|Удалить (Delete)
|Синтаксис:
|
|Удалить(<ИмяФайла.>, <Заголовки>) 
|Параметры:
|
|<ИмяФайла.> (обязательный)
|
|Тип: Строка. Адрес удаляемого ресурса. 
|<Заголовки> (необязательный)
|
|Тип: Строка. Указываются заголовки, добавляемые к запросу на сервер. Текстовые пары вида <Заголовок>:<Значение>, разделяемые символами ВК + ПС. 
|Описание:
|
|Удаляет файл на сервере.
|
|Доступность: 
|
|Сервер, толстый клиент, внешнее соединение. 
|";

		
КонецПроцедуры


&НаСервере
Функция ПоложитьТекстСложногоЗапроса(ИмяФайлаОтправки, Boundary, Размер = 0)
	
	ИмяФайлаОтправки = ПолучитьИмяВременногоФайла("in");
	
	//СодержимоеZIP = Base64Строка(Объект.ТекстЗапроса);

	//ИмяФайлаОтправки 	= КаталогВременныхФайлов() + "post.txt";
	ФайлОтправки 		= Новый ЗаписьТекста(ИмяФайлаОтправки, КодировкаТекста.ANSI, Символы.ПС, ЛОЖЬ);

	//Определяем раздел двоичных данных
	ФайлОтправки.ЗаписатьСтроку("--" + Boundary);
	
	//Указываем имя файла для передачи
	ФайлОтправки.ЗаписатьСтроку("Content-Disposition: form-data; name=""data""; filename=""" + ИмяФайлаОтправки + """");
	
	//Указываем тип передаваемых данных.
	//С таким же успехом в Content-Type можно указать application/x-octet-stream
	ФайлОтправки.ЗаписатьСтроку("Content-Type: application/x-zip-compressed" + Символы.ПС + Символы.ПС);
	
	//Записываем кодированные двоичные данные
	//ФайлОтправки.ЗаписатьСтроку(СодержимоеZIP);
	ФайлОтправки.ЗаписатьСтроку(Объект.ТекстЗапроса);
	ФайлОтправки.ЗаписатьСтроку("--" + Boundary);
	
	//Определяем раздел для каких либо других POST-данных, например содержимого полей виртуальной HTML-формы.

	//Соответствует HTML-тэгу input type="submit" name="submit" value="Submit" /
	ФайлОтправки.ЗаписатьСтроку("--" + Boundary);
	ФайлОтправки.ЗаписатьСтроку("Content-disposition: form-data; name=""submit""" + Символы.ПС);
	ФайлОтправки.ЗаписатьСтроку("1");
	ФайлОтправки.ЗаписатьСтроку("--" + Boundary);

	//Соответствует HTML-тэгу
	//input type="text" name="some_field" value="Some text" /
	ФайлОтправки.ЗаписатьСтроку("--" + Boundary);
	ФайлОтправки.ЗаписатьСтроку("Content-disposition: form-data; name=""some_field""" + Символы.ПС);
	ФайлОтправки.ЗаписатьСтроку("Some text");
	ФайлОтправки.ЗаписатьСтроку("--" + Boundary);

	ФайлОтправки.Закрыть();
	
	Возврат Истина;
	
КонецФункции
&НаСервере
Функция ПоложитьТекстЗапроса(ИмяВФайла, Размер = 0)
	
	ИмяВФайла = ПолучитьИмяВременногоФайла("in");
	Текст = Новый ТекстовыйДокумент;
	Текст.УстановитьТекст(Объект.ТекстЗапроса);
	
	Попытка
		Текст.Записать(ИмяВФайла);
	Исключение
		ОбщиеФункции.СообщитьТекст(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
	Файл 	= Новый Файл(ИмяВФайла);
	Размер 	= Файл.Размер();
	
	Возврат Истина;
	
КонецФункции
&НаСервере
Функция ПолучитьТекстОтвета(ИмяФайла)
	
	Текст = Новый ТекстовыйДокумент;
	
	Попытка
		Текст.Прочитать(ИмяФайла);
	Исключение
		ОбщиеФункции.СообщитьТекст(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;

	объект.ТекстОтвета = Текст.ПолучитьТекст();
	
	Возврат Истина;
	
КонецФункции
&НаСервере
Функция СоздатьОбъектHTTP()
	
	Возврат Новый HTTPСоединение(
			Объект.Сервер, 
			Объект.Порт, 
			Объект.ИмяПользователя, 
			Объект.Пароль,,
			Объект.ЗащищенноеСоединение);
	
КонецФункции


Функция ПолучитьЗаголовки()
	
	Если Заголовки.Количество() Тогда
		
		Соотв = Новый Соответствие;
		
		Для Каждого Строка Из Заголовки Цикл
			Соотв.Вставить(Строка.Ключ, Строка.Значение);
		КонецЦикла;
		
		Возврат Соотв;
		
	Иначе
		
		Возврат Объект.Заголовки;
		
	КонецЕсли;
	
КонецФункции
Функция ПолучитьСложныеЗаголовки(Boundary, РазмерФайлаОтправки)
	
	 ЗаголовокHTTP = Новый Соответствие();
	 
    // При необходимости зададим Referer, например таким образом
    СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
    СерверИсточник = НСтр(СтрокаСоединения, "Srvr") + НСтр(СтрокаСоединения, "Ref");
    ЗаголовокHTTP.Вставить("Referer", СерверИсточник);

    //Укажем формат данных Content-Type
    ЗаголовокHTTP.Вставить("Content-Type", "multipart/form-data; boundary=" + Boundary);

    //Укажем длину POST-запроса Content-Length
    ЗаголовокHTTP.Вставить("Content-Length", РазмерФайлаОтправки);
	
	Возврат ЗаголовокHTTP;
	
КонецФункции

&НаСервере
Процедура PUTНасервере()
	
	ИмяВходногоФайла = "";
	Если ПоложитьТекстЗапроса(ИмяВходногоФайла) Тогда
		
		HTTP = СоздатьОбъектHTTP();
		HTTP.PUT(ИмяВходногоФайла, Объект.АдресРесурса, ПолучитьЗаголовки());
			
		Если ПолучитьТекстответа(ИмяВходногоФайла) Тогда
			
				ОбщиеФункции.СообщитьТекст("PUT выполнен");
				
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура PUT(Команда)
	
	PUTНасервере();
	
КонецПроцедуры

&НаСервере
Процедура POSTНаСервере_ст()
	
	ИмяВходногоФайла = "";
	Если ПоложитьТекстЗапроса(ИмяВходногоФайла) Тогда
		
		ИмяВыходногоФайла = ПолучитьИмяВременногоФайла("out");
		
		HTTP = СоздатьОбъектHTTP();;
		HTTP.POST(ИмяВходногоФайла, Объект.АдресРесурса, ИмяВыходногоФайла, ПолучитьЗаголовки());
		
		Если ПолучитьТекстответа(ИмяВыходногоФайла) Тогда
		
			ОбщиеФункции.СообщитьТекст("POST выполнен");
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
&НаСервере
Процедура POSTНаСервере_Раб()
	
	ИмяВходногоФайла = "";
	Если ПоложитьТекстЗапроса(ИмяВходногоФайла) Тогда
	
		//Подготовка переменных
	 	Boundary = СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "");
		    
		//Определяем имя файла ответа от веб-сервера
		ИмяВыходногоФайла = ПолучитьИмяВременногоФайла("out");

		СодержимоеZIP = Base64Строка(Новый ДвоичныеДанные(ИмяВходногоФайла));

		ИмяФайлаОтправки 	= КаталогВременныхФайлов() + "post.txt";
		ФайлОтправки 		= Новый ЗаписьТекста(ИмяФайлаОтправки, КодировкаТекста.ANSI, Символы.ПС, ЛОЖЬ);

    	//Определяем раздел двоичных данных
    	ФайлОтправки.ЗаписатьСтроку("--" + Boundary);
		
		//Указываем имя файла для передачи
    	ФайлОтправки.ЗаписатьСтроку("Content-Disposition: form-data; name=""data""; filename=""" + ИмяВыходногоФайла + """");
		
		//Указываем тип передаваемых данных.
    	//С таким же успехом в Content-Type можно указать application/x-octet-stream
		ФайлОтправки.ЗаписатьСтроку("Content-Type: application/x-zip-compressed" + Символы.ПС + Символы.ПС);
		
    	//Записываем кодированные двоичные данные
    	ФайлОтправки.ЗаписатьСтроку(СодержимоеZIP);
    	ФайлОтправки.ЗаписатьСтроку("--" + Boundary);
		
		//Определяем раздел для каких либо других POST-данных, например содержимого полей виртуальной HTML-формы.

	    //Соответствует HTML-тэгу input type="submit" name="submit" value="Submit" /
	    ФайлОтправки.ЗаписатьСтроку("--" + Boundary);
	    ФайлОтправки.ЗаписатьСтроку("Content-disposition: form-data; name=""submit""" + Символы.ПС);
	    ФайлОтправки.ЗаписатьСтроку("1");
	    ФайлОтправки.ЗаписатьСтроку("--" + Boundary);

	    //Соответствует HTML-тэгу
	    //input type="text" name="some_field" value="Some text" /
	    ФайлОтправки.ЗаписатьСтроку("--" + Boundary);
	    ФайлОтправки.ЗаписатьСтроку("Content-disposition: form-data; name=""some_field""" + Символы.ПС);
	    ФайлОтправки.ЗаписатьСтроку("Some text");
	    ФайлОтправки.ЗаписатьСтроку("--" + Boundary);

	    ФайлОтправки.Закрыть();
	
		
		// Формируем заголовок POST-запроса.
		
		ЗаголовокHTTP = Новый Соответствие();
		
	    //При необходимости зададим Referer, например таким образом
	    СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	    СерверИсточник = НСтр(СтрокаСоединения, "Srvr") + НСтр(СтрокаСоединения, "Ref");
	    ЗаголовокHTTP.Вставить("Referer", СерверИсточник);

	    //Укажем формат данных Content-Type
	    ЗаголовокHTTP.Вставить("Content-Type", "multipart/form-data; boundary=" + Boundary);

	    //Укажем длину POST-запроса Content-Length
	    ФайлОтправки = Новый Файл(ИмяФайлаОтправки);
	    РазмерФайлаОтправки = XMLСтрока(ФайлОтправки.Размер());
	    ЗаголовокHTTP.Вставить("Content-Length", РазмерФайлаОтправки);
		
		ИмяВыходногоФайла = ПолучитьИмяВременногоФайла("out");
		
		HTTP = СоздатьОбъектHTTP();;
		HTTP.POST(ИмяФайлаОтправки, Объект.АдресРесурса, ИмяВыходногоФайла, ЗаголовокHTTP);
		
		Если ПолучитьТекстответа(ИмяВыходногоФайла) Тогда
		
			ОбщиеФункции.СообщитьТекст("POST выполнен");
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
&НаСервере
Процедура POSTНаСервере()
	
	ИмяВходногоФайла 	= "";
	РазмерФайлаОтправки = 0;
	
	//Подготовка переменных
	Boundary = СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "");
	
	Если ПоложитьТекстСложногоЗапроса(ИмяВходногоФайла, Boundary, РазмерФайлаОтправки) Тогда
		
		ИмяВыходногоФайла = ПолучитьИмяВременногоФайла("out");
		
		HTTP = СоздатьОбъектHTTP();;
		HTTP.POST(ИмяВходногоФайла, Объект.АдресРесурса, ИмяВыходногоФайла, ПолучитьСложныеЗаголовки(Boundary, РазмерФайлаОтправки));
		
		Если ПолучитьТекстответа(ИмяВыходногоФайла) Тогда
		
			ОбщиеФункции.СообщитьТекст("POST выполнен");
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

 &НаКлиенте
Процедура POST(Команда)
	
	POSTНаСервере();
	
КонецПроцедуры


&НаСервере
Процедура GETНаСервере()
	
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла("out");
		
	HTTP = СоздатьОбъектHTTP();
	HTTP.GET(Объект.АдресРесурса, ИмяВыходногоФайла, ПолучитьЗаголовки());
		
	Если ПолучитьТекстответа(ИмяВыходногоФайла) Тогда
		
		ОбщиеФункции.СообщитьТекст("GET выполнен");
			
	КонецЕсли;
		
КонецПроцедуры
&НаКлиенте
Процедура GET(Команда)
	
	GETНаСервере();
		
КонецПроцедуры

&НаСервере
Процедура DELETEНаСервере()
	
	HTTP = СоздатьОбъектHTTP();
	HTTP.Delete(Объект.АдресРесурса, ПолучитьЗаголовки());
	
	объект.ТекстОтвета = "";
	
	ОбщиеФункции.СообщитьТекст("Delete выполнен");
	
КонецПроцедуры
&НаКлиенте
Процедура DELETE(Команда)
	
	DELETEНаСервере();
	
КонецПроцедуры

&НаКлиенте 
Процедура СформироватьЗаголовки()
	
	Объект.Заголовки = "";
	
	Для каждого Строка Из Заголовки Цикл
		
		Объект.Заголовки = Объект.Заголовки + ?(Объект.Заголовки = "","",";") + Строка.Ключ + "," + Строка.Значение;
		
	КонецЦикла;

КонецПроцедуры
&НаКлиенте
Процедура Заголовки4ПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	СформироватьЗаголовки();
	
КонецПроцедуры

Функция ПолучитьXMLСтроку(Значение)
	
	Возврат XMLСтрока(Значение);
		
КонецФункции
&НаКлиенте
Процедура РазмерФайла(Команда)
	
	размер = 0;
	
	Если ПоложитьТекстЗапроса("", размер) Тогда
		
		НовСтрока = Заголовки.Добавить();
		НовСтрока.Ключ 		= "Content-Length";
		НовСтрока.Значение 	= ПолучитьXMLСтроку(размер);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослатьКакНаФорумеНаСервере_Рабочий()
	
	 //Подготовка переменных
    Boundary = СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "");

    //Определяем имя файла ответа от веб-сервера
    ИмяФайлаОтвета = КаталогВременныхФайлов() + "answer.tmp";
	
	
	//Подготавливаем двоичные данные. В моём случае это файл архива zip, но может быть что угодно, хоть изображение.
    //Какой-то ранее созданный архив
    ИмяФайлаДанных = КаталогВременныхФайлов() + "data.zip";

	//Вот здесь ВНИМАНИЕ!
	//Только нижеследующим способом в 1С Предприятии можно передать двоичные данные на сервер, в связи с отсутвием в системе средств чтения файлов в обычную строку. Впрочем, двоичные данные лучше закодировать, иначе при приёме на веб-сервере файл может быть повреждён или не принят вовсе, если он будет содержать URL-значащие символы.
	//Декодирование содержимого файла на сервере можно осуществить при помощи функции php base64_decode() или аналогичных для используемого вами серверного ПО.

    //Закодируем содержимое файла по Base64, то есть преобразуем его к URL-неактивному виду.
    СодержимоеZIP = Base64Строка(Новый ДвоичныеДанные(ИмяФайлаДанных));

	//Следует также помнить об ограничениях хостинга и контролировать размер передаваемых данных. Как правило, для php это 2Мб. (см. файл /usr/local/php5/php.ini)
	//; Maximum allowed size for uploaded files.
	//upload_max_filesize = 2M
	//В противном случе, на веб-сервере вы получите пустой POST-запрос.
    //Проверим размер кодированного файла.
	//Если СтрДлина(СодержимоеZIP) > ДопустимыйРазмерФайлаВБайтах Тогда
	//	//Какие-то ваши действия, возможно
	//	Возврат;
	//КонецЕсли;
	//Создаём файл отправки или содержимое POST-запроса.
    ИмяФайлаОтправки = КаталогВременныхФайлов() + "post.txt";
    ФайлОтправки = Новый ЗаписьТекста(ИмяФайлаОтправки, КодировкаТекста.ANSI, Символы.ПС, ЛОЖЬ);

    //Определяем раздел двоичных данных
    ФайлОтправки.ЗаписатьСтроку("--" + Boundary);
    //Указываем имя файла для передачи
    ФайлОтправки.ЗаписатьСтроку("Content-Disposition: form-data; name=""data""; filename=""" + ИмяФайлаДанных + """");
    //Указываем тип передаваемых данных.
    //С таким же успехом в Content-Type можно указать application/x-octet-stream
    ФайлОтправки.ЗаписатьСтроку("Content-Type: application/x-zip-compressed" + Символы.ПС + Символы.ПС);
    //Записываем кодированные двоичные данные
    ФайлОтправки.ЗаписатьСтроку(СодержимоеZIP);
    ФайлОтправки.ЗаписатьСтроку("--" + Boundary);

    //Определяем раздел для каких либо других POST-данных, например содержимого полей виртуальной HTML-формы.

    //Соответствует HTML-тэгу input type="submit" name="submit" value="Submit" /
    ФайлОтправки.ЗаписатьСтроку("--" + Boundary);
    ФайлОтправки.ЗаписатьСтроку("Content-disposition: form-data; name=""submit""" + Символы.ПС);
    ФайлОтправки.ЗаписатьСтроку("1");
    ФайлОтправки.ЗаписатьСтроку("--" + Boundary);

    //Соответствует HTML-тэгу
    //input type="text" name="some_field" value="Some text" /
    ФайлОтправки.ЗаписатьСтроку("--" + Boundary);
    ФайлОтправки.ЗаписатьСтроку("Content-disposition: form-data; name=""some_field""" + Символы.ПС);
    ФайлОтправки.ЗаписатьСтроку("Some text");
    ФайлОтправки.ЗаписатьСтроку("--" + Boundary);

    ФайлОтправки.Закрыть();
	//Формируем заголовок POST-запроса.
    ЗаголовокHTTP = Новый Соответствие();
    //При необходимости зададим Referer, например таким образом
    СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
    СерверИсточник = НСтр(СтрокаСоединения, "Srvr") + НСтр(СтрокаСоединения, "Ref");
    ЗаголовокHTTP.Вставить("Referer", СерверИсточник);

    //Укажем формат данных Content-Type
    ЗаголовокHTTP.Вставить("Content-Type", "multipart/form-data; boundary=" + Boundary);

    //Укажем длину POST-запроса Content-Length
    ФайлОтправки = Новый Файл(ИмяФайлаОтправки);
    РазмерФайлаОтправки = XMLСтрока(ФайлОтправки.Размер());
    ЗаголовокHTTP.Вставить("Content-Length", РазмерФайлаОтправки);
 
	//Инициализируем HTTPСоединение. При необходимости задаём параметры прокси.
    Сервер = Объект.Сервер; //Естественно, следует указать свой адрес.
    Порт = Объект.Порт; //Это общепринятый порт. Возможно, для вашего сервера применяется другой. Конкретное значение уточните у хостера.
    //ИспользоватьПрокси - какая-то логическая переменная, может быть значение флажка на форме или переключатель
	//Если ИспользоватьПрокси Тогда
	//	Прокси = Новый ИнтернетПрокси;
	//	Прокси.НеИспользоватьПроксиДляЛокальныхАдресов = Истина;
	//	Прокси.Пароль = "ПарольПрокси"; // укажите своё значение
	//	Прокси.Пользователь = "ПользовательПрокси"; // укажите своё значение
	//	НТТР = Новый HTTPСоединение(Сервер, Порт, , , Прокси);
	//Иначе
        НТТР = Новый HTTPСоединение(Сервер, Порт);
	//КонецЕсли;
 
	//Собственно, отправка данных серверу.
    АдресСкрипта = Объект.АдресРесурса; //Естественно, следует указать имя своего скрипта.
    Попытка
        НТТР.ОтправитьДляОбработки(ИмяФайлаОтправки, АдресСкрипта, ИмяФайлаОтвета, ЗаголовокHTTP);
    Исключение
        //Пример обработки ошибки соединения.
		ОбщиеФункции.СообщитьТекст(ОписаниеОшибки());
		//#Если Клиент Тогда
		//	Сообщить("Неудачная попытка соединения: " + ОписаниеОшибки());
		//#Иначе
		//	ЗаписьЖурналаРегистрации("HTTPСоединение", УровеньЖурналаРегистрации.Ошибка, , , "Неудачная попытка соединения: " + ОписаниеОшибки());
		//#КонецЕсли
		//Возврат;
    КонецПопытки;

    //Удалим файл отправки POST-запроса. Больше он нам не нужен.
    //УдалитьФайлы(ИмяФайлаОтправки);
 
	//Отправили данные, анализируем ответ сервера.
    ФайлОтвета = Новый Файл(ИмяФайлаОтвета);
    Если ФайлОтвета.Существует() Тогда
        ТекстОтвета = Новый ТекстовыйДокумент();
        ТекстОтвета.Прочитать(ИмяФайлаОтвета);
        Если ТекстОтвета.КоличествоСтрок() > 0 Тогда
            ОтветСервера = ТекстОтвета.ПолучитьТекст();
            ОбщиеФункции.СообщитьТекст(ОтветСервера);
        Иначе
            ОбщиеФункции.СообщитьТекст("Отправка файла на сервер: Получен пустой ответ сервера.");
        КонецЕсли;

        УдалитьФайлы(ИмяФайлаОтвета);
		
    Иначе
        ОбщиеФункции.СообщитьТекст("Отправка файла на сервер: Ответ сервера не получен.");
	КонецЕсли;
 
	
КонецПроцедуры
&НаСервере
Процедура ПослатьКакНаФорумеНаСервере()
	
	 //Подготовка переменных
    //Boundary = "<<Eto rzadelitel>> ага";

    //Определяем имя файла ответа от веб-сервера
    ИмяФайлаОтвета = КаталогВременныхФайлов() + "answer.tmp";
	
	
	//Подготавливаем двоичные данные. В моём случае это файл архива zip, но может быть что угодно, хоть изображение.
    //Какой-то ранее созданный архив
    ИмяФайлаДанных = КаталогВременныхФайлов() + "data.zip";

	//Вот здесь ВНИМАНИЕ!
	//Только нижеследующим способом в 1С Предприятии можно передать двоичные данные на сервер, в связи с отсутвием в системе средств чтения файлов в обычную строку. Впрочем, двоичные данные лучше закодировать, иначе при приёме на веб-сервере файл может быть повреждён или не принят вовсе, если он будет содержать URL-значащие символы.
	//Декодирование содержимого файла на сервере можно осуществить при помощи функции php base64_decode() или аналогичных для используемого вами серверного ПО.

    //Закодируем содержимое файла по Base64, то есть преобразуем его к URL-неактивному виду.
    СодержимоеZIP = Base64Строка(Новый ДвоичныеДанные(ИмяФайлаДанных));

	//Следует также помнить об ограничениях хостинга и контролировать размер передаваемых данных. Как правило, для php это 2Мб. (см. файл /usr/local/php5/php.ini)
	//; Maximum allowed size for uploaded files.
	//upload_max_filesize = 2M
	//В противном случе, на веб-сервере вы получите пустой POST-запрос.
    //Проверим размер кодированного файла.
	//Если СтрДлина(СодержимоеZIP) > ДопустимыйРазмерФайлаВБайтах Тогда
	//	//Какие-то ваши действия, возможно
	//	Возврат;
	//КонецЕсли;
	//Создаём файл отправки или содержимое POST-запроса.
    ИмяФайлаОтправки = КаталогВременныхФайлов() + "post.txt";
    //ФайлОтправки = Новый ЗаписьТекста(ИмяФайлаОтправки, КодировкаТекста.ANSI, Символы.ПС, ЛОЖЬ);

    //Определяем раздел двоичных данных
    //ФайлОтправки.ЗаписатьСтроку("--" + Boundary);
    //Указываем имя файла для передачи
    //ФайлОтправки.ЗаписатьСтроку("Content-Disposition: form-data; name=""data""; filename=""" + ИмяФайлаДанных + """");
    //Указываем тип передаваемых данных.
    //С таким же успехом в Content-Type можно указать application/x-octet-stream
    //ФайлОтправки.ЗаписатьСтроку("Content-Type: application/x-zip-compressed" + Символы.ПС + Символы.ПС);
    //Записываем кодированные двоичные данные
    //ФайлОтправки.ЗаписатьСтроку(СодержимоеZIP);
    //ФайлОтправки.ЗаписатьСтроку("--" + Boundary);

    //Определяем раздел для каких либо других POST-данных, например содержимого полей виртуальной HTML-формы.

    //Соответствует HTML-тэгу input type="submit" name="submit" value="Submit" /
	//ФайлОтправки.ЗаписатьСтроку("--" + Boundary);
	//ФайлОтправки.ЗаписатьСтроку("Content-disposition: form-data; name=""submit""" + Символы.ПС);
	//ФайлОтправки.ЗаписатьСтроку("1");
	//ФайлОтправки.ЗаписатьСтроку("--" + Boundary);

    //Соответствует HTML-тэгу
    //input type="text" name="some_field" value="Some text" /
	//ФайлОтправки.ЗаписатьСтроку("--" + Boundary);
	//ФайлОтправки.ЗаписатьСтроку("Content-disposition: form-data; name=""api_key""" + Символы.ПС);
	//ФайлОтправки.ЗаписатьСтроку("R5yQvf9T6C22d1qdkDPj");
	//ФайлОтправки.ЗаписатьСтроку("--" + Boundary);

	// silber {
	
	//ФайлОтправки.ЗаписатьСтроку(Объект.ТекстЗапроса,"");
	
	ФайлОтправки = Новый ТекстовыйДокумент;
	ФайлОтправки.УстановитьТекст(Объект.ТекстЗапроса);
	
	ФайлОтправки.Записать(ИмяФайлаОтправки);
		
	//ФайлОтправки.ЗаписатьСтроку("--" + Boundary);
	//ФайлОтправки.ЗаписатьСтроку("Content-disposition: form-text; name=""api_key2""" + Символы.ПС);
	//ФайлОтправки.ЗаписатьСтроку("R5yQvf9T6C22d1qdkDPj");
	//ФайлОтправки.ЗаписатьСтроку("--" + Boundary);
	//// } silber
	
	
    //ФайлОтправки.Закрыть();
	//Формируем заголовок POST-запроса.
    ЗаголовокHTTP = Новый Соответствие();
    //При необходимости зададим Referer, например таким образом
    СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
    СерверИсточник = НСтр(СтрокаСоединения, "Srvr") + НСтр(СтрокаСоединения, "Ref");
    ЗаголовокHTTP.Вставить("Referer", СерверИсточник);

    //Укажем формат данных Content-Type
    ЗаголовокHTTP.Вставить("Content-Type", "application/x-www-form-urlencoded");

    //Укажем длину POST-запроса Content-Length
    ФайлОтправки = Новый Файл(ИмяФайлаОтправки);
    РазмерФайлаОтправки = XMLСтрока(ФайлОтправки.Размер());
    ЗаголовокHTTP.Вставить("Content-Length", РазмерФайлаОтправки);
 
	//Инициализируем HTTPСоединение. При необходимости задаём параметры прокси.
    Сервер = Объект.Сервер; //Естественно, следует указать свой адрес.
    Порт = Объект.Порт; //Это общепринятый порт. Возможно, для вашего сервера применяется другой. Конкретное значение уточните у хостера.
    //ИспользоватьПрокси - какая-то логическая переменная, может быть значение флажка на форме или переключатель
	//Если ИспользоватьПрокси Тогда
	//	Прокси = Новый ИнтернетПрокси;
	//	Прокси.НеИспользоватьПроксиДляЛокальныхАдресов = Истина;
	//	Прокси.Пароль = "ПарольПрокси"; // укажите своё значение
	//	Прокси.Пользователь = "ПользовательПрокси"; // укажите своё значение
	//	НТТР = Новый HTTPСоединение(Сервер, Порт, , , Прокси);
	//Иначе
        НТТР = Новый HTTPСоединение(Сервер, Порт);
	//КонецЕсли;
 
	//Собственно, отправка данных серверу.
    АдресСкрипта = Объект.АдресРесурса; //Естественно, следует указать имя своего скрипта.
    Попытка
        НТТР.ОтправитьДляОбработки(ИмяФайлаОтправки, АдресСкрипта, ИмяФайлаОтвета, ЗаголовокHTTP);
    Исключение
        //Пример обработки ошибки соединения.
		ОбщиеФункции.СообщитьТекст(ОписаниеОшибки());
		//#Если Клиент Тогда
		//	Сообщить("Неудачная попытка соединения: " + ОписаниеОшибки());
		//#Иначе
		//	ЗаписьЖурналаРегистрации("HTTPСоединение", УровеньЖурналаРегистрации.Ошибка, , , "Неудачная попытка соединения: " + ОписаниеОшибки());
		//#КонецЕсли
		//Возврат;
    КонецПопытки;

    //Удалим файл отправки POST-запроса. Больше он нам не нужен.
    //УдалитьФайлы(ИмяФайлаОтправки);
 
	//Отправили данные, анализируем ответ сервера.
    ФайлОтвета = Новый Файл(ИмяФайлаОтвета);
    Если ФайлОтвета.Существует() Тогда
        ТекстОтвета = Новый ТекстовыйДокумент();
        ТекстОтвета.Прочитать(ИмяФайлаОтвета);
        Если ТекстОтвета.КоличествоСтрок() > 0 Тогда
            ОтветСервера = ТекстОтвета.ПолучитьТекст();
            ОбщиеФункции.СообщитьТекст(ОтветСервера);
        Иначе
            ОбщиеФункции.СообщитьТекст("Отправка файла на сервер: Получен пустой ответ сервера.");
        КонецЕсли;

        УдалитьФайлы(ИмяФайлаОтвета);
		
    Иначе
        ОбщиеФункции.СообщитьТекст("Отправка файла на сервер: Ответ сервера не получен.");
	КонецЕсли;
 
	
КонецПроцедуры
&НаКлиенте
Процедура ПослатьКакНаФоруме(Команда)
	
	 ПослатьКакНаФорумеНаСервере();
	 
КонецПроцедуры


