

#Область Основные

Функция ИницилизироватьCOMConnectorБухгалтерии(ПараметрыПодключения = Неопределено) Экспорт
	
	Перем База;
	
	// Определимся с подключением
	
	Если ПараметрыПодключения = Неопределено Тогда
		
		ПараметрыПодключения = ИнтеграцияСБухгалтериейСервер.ПолучитьПараметрыПодключенияКБухгалтерииПоУмолчанию();
		
		Если ПустаяСтрока(ПараметрыПодключения) Тогда
			ОбщиеФункции.СообщитьТекст("не заданы параметры подключения к базе УТ 81.
								|Для задания параметров установите константу - ""Параметры подключения к УТ 81"" ");
			Возврат Неопределено; КонецЕсли; КонецЕсли;

	// Проверим кэш
	
	Если глCOMСоединения[ПараметрыПодключения] <> Неопределено Тогда
		Возврат глCOMСоединения[ПараметрыПодключения]; КонецЕсли;
	
	// Иницилизируем COM
	
	Попытка
		База = Новый COMОбъект("V83.COMConnector");
	Исключение
		ОбщиеФункции.СообщитьТекст("Не установлено 1С:Предприятие 8.3. 
						|Не могу инициализировать СОМ соединение для выполнения сервисных функций.");
		Возврат Неопределено; КонецПопытки;
	
	// Подключимся
	
	Попытка
		Connector 	= База.Connect(ПараметрыПодключения);
		Имя 		= Connector.Метаданные().Имя;
	Исключение
		стрОшибки = ОписаниеОшибки();
		ОбщиеФункции.СообщитьТекст("Ошибка при подключении к базе 83
						|" + стрОшибки);
		База = Неопределено;
		Возврат Неопределено; КонецПопытки;
	
	// Запомним кэш
	
	глCOMСоединения.Вставить(ПараметрыПодключения, Connector);
	
	// Вернем
	
	Возврат Connector;
	
КонецФункции 


Функция ПолучитьОбъектВБухгалтерии(СсылкаНаОбъект, Connector, ПеренесенныеОбъекты = Неопределено, Версия = Неопределено)
	
	// Получим тело объекта для клиента
	
	Если ПеренесенныеОбъекты = Неопределено Тогда
		ПеренесенныеОбъекты = Новый Соответствие;
		
	Иначе // Если он уже загружался тогда вернем
		
		ОбъектБух = ПеренесенныеОбъекты[СсылкаНаОбъект];
		Если ОбъектБух <> Неопределено Тогда Возврат ОбъектБух; КонецЕсли; КонецЕсли;
		
	// Вытащим структуру нашего объекта с сервера
		
	СтруктураОбъект = ИнтеграцияСБухгалтериейСервер.ПолучитьСтруктуруОбъектаДляВыгрузки(СсылкаНаОбъект, Истина);
	Если СтруктураОбъект = Неопределено Тогда
		ОбщиеФункции.СообщитьТекст("Не удалось получить структура объекта с сервера: " + СсылкаНаОбъект);
		Возврат Неопределено; КонецЕсли;
	
	// Получим коннектор
	
	//Если Connector = Неопределено Тогда
	//	Connector = ИницилизироватьCOMConnectorБухгалтерии();
	//	Если Connector = Неопределено Тогда Возврат Неопределено; КонецЕсли; КонецЕсли;
	
	// Определим загрузчик и получим объект
	
	ОбъектБух = Неопределено;
	Если СтруктураОбъект.ДополнительныеСвойства.Менеджер = "Справочники" Тогда
		
		Попытка
			ОбъектБух = Вычислить("Получить_Справочник" + СтруктураОбъект.ДополнительныеСвойства.Имя + "(Connector, СсылкаНаОбъект, ПеренесенныеОбъекты)");
		Исключение
			ОбщиеФункции.СообщитьТекст(ОписаниеОшибки());
			Возврат Неопределено; КонецПопытки;
		
	ИначеЕсли СтруктураОбъект.ДополнительныеСвойства.Менеджер = "Документы" Тогда
		
			Попытка
				ОбъектБух = Вычислить("Получить_Документ" + СтруктураОбъект.ДополнительныеСвойства.Имя + "(Connector, СсылкаНаОбъект, ПеренесенныеОбъекты" + ?(Версия = Неопределено, ")", ", Версия)"));
			Исключение
				ОбщиеФункции.СообщитьТекст(ОписаниеОшибки());
				Возврат Неопределено; КонецПопытки;
		
	ИначеЕсли СтруктураОбъект.ДополнительныеСвойства.Менеджер = "Перечисления" Тогда			
		
		СтруктураПеречисления = ИнтеграцияСБухгалтериейСервер.ПолучитьСтруктуруПеречисления(СсылкаНаОбъект);
		
		Попытка
			ОбъектБух = Вычислить("Получить_Перечисление" + СтруктураОбъект.ДополнительныеСвойства.Имя + "(Connector, СтруктураПеречисления.Ключ, СтруктураПеречисления.Индекс)");
		Исключение 
			ОбщиеФункции.СообщитьТекст(ОписаниеОшибки());
			Возврат Неопределено; КонецПопытки;
	
	Иначе
		
		ОбщиеФункции.СообщитьТекст("Не определен обработчик переноса в бухгалтерию для объекта " + СсылкаНаОбъект);
		Возврат Неопределено; КонецЕсли;
	
	// Запомним объект
	
	Если ОбъектБух <> Неопределено Тогда ПеренесенныеОбъекты.Вставить(СсылкаНаОбъект, ОбъектБух); КонецЕсли;
	
	// Вернем
	
	Возврат ОбъектБух;
	
КонецФункции


Функция ВыгрузитьОбъектыВБух(Connector, Ссылки, стрПредставление = "", Версия = Неопределено, ОстанавливатсяПриОшибки = Истина) Экспорт
	
	Ном 				= 0;
	Всего 				= Ссылки.Количество();
	ПеренесенныеОбъекты = Новый Соответствие;
	
	Для Каждого СсылкаНаОбъект Из Ссылки Цикл Ном = Ном + 1; ОбработкаПрерыванияПользователя();
		
		Если ПолучитьОбъектВБухгалтерии(СсылкаНаОбъект, Connector, ПеренесенныеОбъекты, Версия) = Неопределено Тогда
			ОбщиеФункции.СообщитьТекст("Ошибка при переносе " + СсылкаНаОбъект);
			Ошибка = Истина;
			Если ОстанавливатсяПриОшибки Тогда Возврат Ложь; КонецЕсли; КонецЕсли;
		
			Если Всего > 1 Тогда Состояние("Выгрузка документов в " + стрПредставление , Ном / Всего * 100 , СсылкаНаОбъект); КонецЕсли; КонецЦикла;
			
	Если Всего = 1 Тогда
		ПоказатьОповещениеПользователя("Выгружен документ в " + стрПредставление, ПолучитьНавигационнуюСсылку(СсылкаНаОбъект), СсылкаНаОбъект, БиблиотекаКартинок.Сохранить); 
	Иначе
		ПоказатьОповещениеПользователя("Выгружены документы в " + стрПредставление,, "В количестве " + Всего, БиблиотекаКартинок.Сохранить); КонецЕсли;
	
	Возврат Истина;
	
КонецФункции
Функция ВыгрузитьОбъектыВБухгалтерию(Ссылки, ОстанавливатсяПриОшибки = Истина) Экспорт
	
	Connector = ИницилизироватьCOMConnectorБухгалтерии();
	Если Connector = Неопределено Тогда Возврат Ложь; КонецЕсли;
	
	Возврат ВыгрузитьОбъектыВБух(Connector, Ссылки, "бухгалтерию",, ОстанавливатсяПриОшибки);
		
КонецФункции
Функция ВыгрузитьОбъектыВДругуюБухгалтерию(Ссылки, ОстанавливатсяПриОшибки = Истина) Экспорт
	
	Connector = ИницилизироватьCOMConnectorБухгалтерии(ИнтеграцияСБухгалтериейСервер.ПолучитьПараметрыПодключенияКДругойБухгалтерииПоУмолчанию());
	Если Connector = Неопределено Тогда Возврат Ложь; КонецЕсли;
	Версия = 3;
	Возврат ВыгрузитьОбъектыВБух(Connector, Ссылки, "промимпорт", Версия, ОстанавливатсяПриОшибки);
	
КонецФункции
Функция ВыгрузитьОбъектыВТретьюБухгалтерию(Ссылки, ОстанавливатсяПриОшибки = Истина) Экспорт
	
	Connector = ИницилизироватьCOMConnectorБухгалтерии(ИнтеграцияСБухгалтериейСервер.ПолучитьПараметрыПодключенияКТретейБухгалтерииПоУмолчанию());
	Если Connector = Неопределено Тогда Возврат Ложь; КонецЕсли;
	Версия = 3;
	Возврат ВыгрузитьОбъектыВБух(Connector, Ссылки, "интрэйд", Версия, ОстанавливатсяПриОшибки);
	
КонецФункции

Процедура ИзменитьРеквизит(ОбъектБух, ЗначениеТут, ИмяРеквизита, Изменился, Connector = Неопределено)
	
	// Сравним объект
	
	Если Connector <> Неопределено Тогда
	
		Попытка
			Сравнение = Connector.NewObject("СравнениеЗначений");

			Если Сравнение.Сравнить(ОбъектБух[ИмяРеквизита], ЗначениеТут) <> 0 Тогда
					
				Изменился = Истина;
				ОбъектБух[ИмяРеквизита] = ЗначениеТут; КонецЕсли; Исключение КонецПопытки;
			
	// Просто сравним

	Иначе
		
		Попытка	
			Если ОбъектБух[ИмяРеквизита] <> ЗначениеТут Тогда
			
				Изменился = Истина;
				ОбъектБух[ИмяРеквизита] = ЗначениеТут; КонецЕсли; Исключение КонецПопытки; КонецЕсли;
	
КонецПроцедуры
Функция ЗаполнитьОбъектПоСтрокеЗапроса(Connector, ОбъектБух, СтруктураОбъект, ПеренесенныеОбъекты, Изменился)
	
	стрИсключения = "Ссылка, Партнер, Касса, ПометкаУдаления, Проведен, ИмяДокумента";
	
	Для Каждого Элемент Из СтруктураОбъект Цикл
		
		Если Найти(стрИсключения, Элемент.Ключ) Тогда Продолжить Иначе
			
			Значение = Элемент.Значение;
			
		 	Если Значение <> Неопределено Тогда
				
				ТипЗнч = ТипЗнч(Значение);
				
				Если ТипЗнч = Тип("Null") Тогда
					
				ИначеЕсли ТипЗнч = Тип("Массив") Тогда
					
					ТаблицаБух 		= ОбъектБух[Элемент.Ключ];
					ТаблИсточника 	= Значение;
					
					Если ТаблИсточника.Количество() <> ТаблицаБух.Количество() Тогда
						
						// поменялось количество значит загружаем таблицу целиком
						
						ОбъектБух[Элемент.Ключ].Очистить();
						Изменился = Истина;
						
						Для Каждого Строка Из ТаблИсточника Цикл
							Если Не ЗаполнитьОбъектПоСтрокеЗапроса(Connector, ОбъектБух[Элемент.Ключ].Добавить(), Строка, ПеренесенныеОбъекты, Изменился) Тогда
								Возврат Ложь; КонецЕсли; КонецЦикла;
					Иначе
						
						// количество не поменялось значит строки считаются одинаковыми нужно только перепроверить их состав
						
						Инд = -1;
						Для Каждого Строка Из ТаблИсточника Цикл Инд = Инд + 1; 
						
							Если Не ЗаполнитьОбъектПоСтрокеЗапроса(Connector, ОбъектБух[Элемент.Ключ].Получить(Инд), Строка, ПеренесенныеОбъекты, Изменился) Тогда
								Возврат Ложь; КонецЕсли; КонецЦикла; КонецЕсли;
					
				ИначеЕсли 	ТипЗнч = Тип("Число") 	Или
							ТипЗнч = Тип("Строка") 	Или
							ТипЗнч = Тип("Дата") 	Или 
							ТипЗнч = Тип("Булево") 	Тогда
							
					ИзменитьРеквизит(ОбъектБух, Значение, Элемент.Ключ, Изменился, Connector);
							
				ИначеЕсли Не Значение.Пустая() Тогда
					
					Ссылка81 = ПолучитьОбъектВБухгалтерии(Значение, Connector, ПеренесенныеОбъекты);
					Если Ссылка81 = Неопределено Тогда Возврат Ложь; КонецЕсли;
					
					ИзменитьРеквизит(ОбъектБух, Ссылка81, Элемент.Ключ, Изменился, Connector); КонецЕсли; КонецЕсли; КонецЕсли; КонецЦикла;
	
	Возврат Истина;

	
КонецФункции

Функция ПолучитьСправочникБухПоКоду(Connector, СсылкаНаОбъект, МенеджерБух, Код, СоздаватьНовый = Истина, ЭтоГруппа = Ложь)
		
	СсылкаБух = МенеджерБух.НайтиПоКоду(Код);
	
	// Возращаем объект, полученный по коду
	
	Если СсылкаБух <> Неопределено И НЕ СсылкаБух.Пустая() Тогда
		 Возврат СсылкаБух.ПолучитьОбъект(); КонецЕсли;
	 
	// Если по коду невозможно найти элемент в бухгалтерии, создаем новый с таким же гуидом
 
	Если СоздаватьНовый Тогда
		
		ОбъектБух = ?(ЭтоГруппа, МенеджерБух.СоздатьГруппу(), МенеджерБух.СоздатьЭлемент());
		
		СсылкаБух = МенеджерБух.ПолучитьСсылку(Connector.NewObject("UUID", СсылкаНаОбъект.УникальныйИдентификатор()));
		ОбъектБух.УстановитьСсылкуНового(СсылкаБух); КонецЕсли;
	
	Возврат ОбъектБух;
	
КонецФункции
Функция ЗаписатьСправочникБух(СправочникБух, ПометкаУдаления = Ложь)
	
	// Проверим пометку удаления
	
	СправочникБух.ПометкаУдаления 		= ПометкаУдаления;
	СправочникБух.ОбменДанными.Загрузка = Истина;
	
	// Запишем
	
	Попытка
		СправочникБух.Записать();
	Исключение
		ОбщиеФункции.СообщитьТекст(ОписаниеОшибки());
		Возврат Неопределено; КонецПопытки;
	
	Возврат СправочникБух.Ссылка;
	
КонецФункции
Функция ЗаписатьДок(ДокументБух, РежимЗаписи)
	
	Попытка
		ДокументБух.Записать(РежимЗаписи);
	Исключение
		ОбщиеФункции.СообщитьТекст(ОписаниеОшибки());
		Возврат Неопределено; КонецПопытки;
	
	Возврат ДокументБух.Ссылка;
	
КонецФункции
Функция ЗаписатьДокументБух(ДокументБух, ПометкаУдаления, Проведен, Connector)
	
	// Если документ нужно провести, тогда сперва запишем не проведенным,
	// а потом проведенным, чтобы в слкче ошибки можно было открыть документ 
	// и посмотреть почему он не проводится
	
	ДокументБух.ПометкаУдаления = ПометкаУдаления;
	
	Если 	ДокументБух.Проведен И
			Не Проведен Тогда
			
		РежимЗаписи = Connector.РежимЗаписиДокумента.ОтменаПроведения;
		ДокументБух.ОбменДанными.Загрузка = Ложь;
		
		
	Иначе
		
		ДокументБух.ОбменДанными.Загрузка = Истина;
		Если ЗаписатьДок(ДокументБух, Connector.РежимЗаписиДокумента.Запись) = Неопределено Тогда
			Возврат Неопределено; КонецЕсли;
		
		ДокументБух.ОбменДанными.Загрузка = Ложь;
		РежимЗаписи = Connector.РежимЗаписиДокумента.Проведение; КонецЕсли;
	
	Возврат ЗаписатьДок(ДокументБух, РежимЗаписи);
	
КонецФункции

#КонецОбласти

#Область Получение_конкретных_объектов81

Функция ЭтоБухгалтерия3(Connector)
	
	Возврат Connector.Метаданные().Синоним = "Бухгалтерия предприятия, редакция 3.0";
	
КонецФункции

Функция ПолучитьОбъектБухПоГуиду(Connector, СсылкаНаОбъект, МенеджерБух, ЭтоСправочник = Ложь, ЭтоДокумент = Ложь, ЭтоПеречисление = Ложь, СоздаватьНовый = Истина, ЭтоГруппа = Ложь)
	
	СсылкаБух = МенеджерБух.ПолучитьСсылку(Connector.NewObject("UUID", ?(ТипЗнч(СсылкаНаОбъект) = Тип("Строка"), СсылкаНаОбъект, Строка(СсылкаНаОбъект.УникальныйИдентификатор()))));
	Попытка
	ОбъектБух = СсылкаБух.ПолучитьОбъект();
	Исключение
			ОбщиеФункции.СообщитьТекст(ОписаниеОшибки());
			Возврат Неопределено;
	КонецПопытки;
		
		
	
	Если ОбъектБух = Неопределено И СоздаватьНовый Тогда
		
		Если ЭтоСправочник Тогда		ОбъектБух = ?(ЭтоГруппа = Истина, МенеджерБух.СоздатьГруппу(), МенеджерБух.СоздатьЭлемент());
		ИначеЕсли ЭтоДокумент Тогда		ОбъектБух = МенеджерБух.СоздатьДокумент();
		Иначе
			ОбщиеФункции.СообщитьТекст("Не определено получение объекта данного типа в базе БУХ");
			Возврат Неопределено; КонецЕсли;
		
		ОбъектБух.УстановитьСсылкуНового(СсылкаБух); КонецЕсли;
	
	Возврат ОбъектБух;
	
КонецФункции

Процедура ЗаполнитьДоговор81(Договор81, Контрагент81, Организация81, ПараметрыДоговора, Изменился)
	
	Наименование = "Сформированный договор (4)";
	
	ИзменитьРеквизит(Договор81,	Контрагент81, 	"Владелец", 	Изменился);
	ИзменитьРеквизит(Договор81,	Организация81, 	"Организация", 	Изменился);
	
	Если ПустаяСтрока(Договор81.Наименование) Тогда
		Изменился = Истина;
		Договор81.Наименование = Наименование; КонецЕсли;		
	
	// Установим основные параметры договора
				
	Если ПараметрыДоговора <> Неопределено Тогда
		Для КАждого Элемент Из ПараметрыДоговора Цикл Договор81[Элемент.Ключ] = Элемент.Значение; КонецЦикла; КонецЕсли;
	
КонецПроцедуры
Функция ПолучитьДоговор81ИзОрганизации(Connector, ПартнерИлиКонтрагент, КонтрагентКакДоговор = Неопределено, Организация81, ПеренесенныеОбъекты, СоздаватьНовыйЕслиНеНайден = Истина, ПараметрыДоговора = Неопределено, ДопПараметрыДоговора = Неопределено)

	// Если Контрагент81 - неопределено тогда действем по старой схеме
	// ели наоборот то партнер становится контрагентом а контрагент договором
	
	// подготовим параметры
	
	Контрагент81 = Получить_СправочникКонтрагенты(Connector, ПартнерИлиКонтрагент, ПеренесенныеОбъекты);
	Если Контрагент81 = Неопределено Тогда Возврат Неопределено; КонецЕсли;
	
	Изменился = Ложь;
	
	Если КонтрагентКакДоговор = Неопределено Тогда
		Если ПараметрыДоговора = Неопределено Тогда ПараметрыДоговора = Новый Структура; КонецЕсли;
		
		ПараметрыДоговора.Вставить("Организация", 	Организация81);
		ПараметрыДоговора.Вставить("Владелец", 		Контрагент81);
		
		// Зададим условия поиска
		
		стрУсловия = "";
		Для Каждого Элемент Из ПараметрыДоговора Цикл стрУсловия = стрУсловия + ?(стрУсловия = "",""," И ") + Элемент.Ключ + " = &" + Элемент.Ключ; КонецЦикла;
		
		// Выполним запрос 81
		
		Выполнение = COMФункцииДиалогов.ПолучитьВыполнениеЗапроса81(Connector, "ВЫБРАТЬ Ссылка ИЗ Справочник.ДоговорыКонтрагентов ГДЕ " + стрУсловия,,ПараметрыДоговора);
		Если Выполнение = Неопределено Тогда Возврат Неопределено; КонецЕсли;
		
		Выборка = Выполнение.Выбрать();
		Если Выборка.Следующий() Тогда
			
			Договор81 = Выборка.Ссылка.ПолучитьОбъект();
			
		ИначеЕсли Не СоздаватьНовыйЕслиНеНайден Тогда
			
			Возврат Connector.Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			
		Иначе
			
			Договор81 = Connector.Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
			ЗаполнитьДоговор81(Договор81, Контрагент81, Организация81, ПараметрыДоговора, Изменился);
			Договор81.УстановитьНовыйКод(); КонецЕсли;
		
	Иначе //если договор жестко привязан к контрагенту а партнер к контрагенту
		
		Изменился = Истина;
		Договор81 = ПолучитьОбъектБухПоГуиду(Connector, КонтрагентКакДоговор, Connector.Справочники.ДоговорыКонтрагентов, Истина);
		ЗаполнитьДоговор81(Договор81, Контрагент81, Организация81, ПараметрыДоговора, Изменился);
		
		Если Договор81.ЭтоНовый() Тогда Договор81.УстановитьНовыйКод(); КонецЕсли; КонецЕсли;
	
	// Установим необязательные реквизиты договора
			
	Если ДопПараметрыДоговора <> Неопределено Тогда
		Для КАждого Элемент Из ДопПараметрыДоговора Цикл
			Если Договор81[Элемент.Ключ] <> Элемент.Значение Тогда
				
				Договор81[Элемент.Ключ] = Элемент.Значение;
				Изменился = Истина; КонецЕсли; КонецЦикла; КонецЕсли;
	
	Если Изменился Тогда
		
		Договор81Ссылка = ЗаписатьСправочникБух(Договор81, Ложь);
			
		Если Договор81Ссылка = Неопределено Тогда 	Возврат Неопределено;
		Иначе										Возврат Договор81Ссылка; КонецЕсли;
		
	Иначе
		
		Возврат Договор81.Ссылка; КонецЕсли;
	
КонецФункции
Функция ПолучитьСубконтоТовары81(Connector)
	
	Возврат Connector.Справочники.НоменклатурныеГруппы.НайтиПоКоду("000000002");
	
КонецФункции
Функция ПолучитьСубконтоУслуги81(Connector)
	
	Возврат Connector.Справочники.НоменклатурныеГруппы.НайтиПоКоду("Д-0000015");
	
КонецФункции


Функция ПеренестиКонтактнуюИнформациюКонтрагента(Connector, СсылкаБух, КонтрагентСсылка, ПартнерСсылка, ПеренесенныеОбъекты)
	
	СтруктураОбъект = ИнтеграцияСБухгалтериейСервер.ВычислитьОбъектПоЗапросу("
	|ВЫБРАТЬ 
	|	Вид.ИмяПредопределенныхДанных ВидПредопределенный,
	|	ВЫБОР КОГДА Вид.Родитель.Код = """" ТОГДА 1 КОГДА Вид.Родитель.Родитель.Код = """" ТОГДА 2 ИНАЧЕ 0 КОНЕЦ Уровень,
	|	Вид,
	|	ПОДСТРОКА(Представление, 1, 255) Представление,
	|	ПОДСТРОКА(Комментарий, 1, 255) Комментарий,
	|	ЗначениеПоУмолчанию
	|ИЗ
	|	РегистрСведений.ПредставлениеКонтактнойИнформации
	|ГДЕ
	|	Объект = &Партнер И Вид <> ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ПустаяСсылка) И Вид.ВыгружатьВБухгалтерию
	|
	|ОБЪЕДИНИТЬ 
	|
	|ВЫБРАТЬ 
	|	Вид.ИмяПредопределенныхДанных ВидПредопределенный,
	|	ВЫБОР КОГДА Вид.Родитель.Родитель.Код = """" ТОГДА 1 КОГДА Вид.Родитель.Родитель.Родитель.Код = """" ТОГДА 2 ИНАЧЕ 0 КОНЕЦ Уровень,
	|	Вид,
	|	ПОДСТРОКА(Представление, 1, 255) Представление,
	|	ПОДСТРОКА(Комментарий, 1, 255) Комментарий,
	|	ЗначениеПоУмолчанию
	|ИЗ
	|	РегистрСведений.ПредставлениеКонтактнойИнформации
	|ГДЕ
	|	Объект = &Контрагент И Вид <> ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ПустаяСсылка) И Вид.ВыгружатьВБухгалтерию
	|", Новый Структура("Партнер, Контрагент", ПартнерСсылка, КонтрагентСсылка));
	
	Изменился = Ложь;
	
	Версия = Connector.Metadata.Version;
	Если Лев(Версия, 1) <> "3" Тогда // если это не Бух 3.0 тогда грузим КИ
		
	Набор = Connector.РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
	Набор.Отбор.Объект.Установить(СсылкаБух);
		
	Тип = Получить_ПеречислениеТипКонтактнойИнформации(Connector, СтруктураОбъект.Вид, ПеренесенныеОбъекты, СтруктураОбъект.Уровень, СтруктураОбъект.ВидПредопределенный);
	Если Тип = Неопределено Тогда Возврат Истина; КонецЕсли;
							
	Набор.Отбор.Тип.Установить(Тип);
			
	Вид = ПолучитьОбъектВБухгалтерии(СтруктураОбъект.Вид, Connector, ПеренесенныеОбъекты);
	Если Вид = Неопределено Тогда Возврат Истина; КонецЕсли;
			
	Набор.Отбор.Вид.Установить(Вид);
	Набор.Прочитать();
			
	Если НЕ Набор.Количество() Тогда
		
		Набор.Очистить();
				
		Изменился = Истина;
				
		НоваяЗапись = Набор.Добавить();
		НоваяЗапись.Объект = СсылкаБух;
		НоваяЗапись.Тип = Тип;
		НоваяЗапись.Вид = Вид;
		НоваяЗапись.Представление 		= СтруктураОбъект.Представление;
		НоваяЗапись.Комментарий 		= СтруктураОбъект.Комментарий;
		НоваяЗапись.ЗначениеПоУмолчанию = СтруктураОбъект.ЗначениеПоУмолчанию;
			
	Иначе
		Для Каждого Запись Из Набор Цикл
			Если Запись.Представление <> СтруктураОбъект.Представление Тогда
				Запись.Представление = СтруктураОбъект.Представление; 
				Изменился = Истина; КонецЕсли; КонецЦикла; 
	КонецЕсли;
	
	КонецЕсли; // конец модуля работы с КИ
	
	Если Изменился Тогда
		Попытка 
			Набор.Записать();
		Исключение
			ОбщиеФункции.СообщитьТекст(ОписаниеОшибки());
			Возврат Ложь; КонецПопытки; КонецЕсли;
	
	Возврат Истина;
	
КонецФункции
Функция ПеренестиБанковскиеСчетаКонтрагента(Connector, СсылкаБух, СсылкаНаОбъект, ПеренесенныеОбъекты)
		
	СтруктураОбъект = ИнтеграцияСБухгалтериейСервер.ВычислитьОбъектПоЗапросу("
	|ВЫБРАТЬ 
	|	Ссылка,
	|	ПометкаУдаления
	|ИЗ
	|	Справочник.БанковскиеСчета
	|ГДЕ Владелец = &Ссылка", Новый Структура("Ссылка", СсылкаНаОбъект));
	
	Изменился = Ложь;
	
	ОбъектБух = ПеренесенныеОбъекты[СсылкаНаОбъект];
	Если ОбъектБух <> Неопределено Тогда Возврат Истина; КонецЕсли;
			
	ОбъектБух = Получить_СправочникБанковскиеСчета(Connector, СсылкаНаОбъект, ПеренесенныеОбъекты, СсылкаБух);
		
	Если ОбъектБух = Неопределено Тогда Возврат Ложь; КонецЕсли;
			
	ПеренесенныеОбъекты.Вставить(СсылкаНаОбъект, ОбъектБух);
	
	Возврат Истина;
				
КонецФункции


Процедура ПеревестиУслугиИзТоваров(Connector, Товары81, Услуги81, Изменился)
	
	Если Услуги81.Количество() Тогда Услуги81.Очистить(); Изменился = Истина; КонецЕсли;
	
	КолСтрок 	= Товары81.Количество();
	Ном 		= 0;
	Для Ном = 1 По КолСтрок Цикл
		
		ИндСтроки 	= КолСтрок - Ном;
		Строка81 	= Товары81.Получить(ИндСтроки);
		
		Если Строка81.Номенклатура.Услуга Тогда
			
			НовСтрока81 = Услуги81.Добавить();
			НовСтрока81.Номенклатура 	= Строка81.Номенклатура;
			НовСтрока81.Количество 		= Строка81.Количество;
			НовСтрока81.Цена 			= Строка81.Цена;
			НовСтрока81.Сумма 			= Строка81.Сумма;
			НовСтрока81.СтавкаНДС 		= Строка81.СтавкаНДС;
			НовСтрока81.СуммаНДС 		= Строка81.СуммаНДС;
			НовСтрока81.СчетУчетаНДСПоРеализации = Connector.ПланыСчетов.Хозрасчетный.Продажи_НДС;		// 90.03
			НовСтрока81.СчетДоходов 	= Connector.ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД;   			// 90.01.2
			НовСтрока81.СчетРасходов 	= Connector.ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД; // 90.02.1
			НовСтрока81.Субконто 		= ПолучитьСубконтоУслуги81(Connector);
			
			Товары81.Удалить(ИндСтроки); КонецЕсли; КонецЦикла;
	
КонецПроцедуры
Процедура УдалитьУслугиИзТоваров(Connector, Товары81)
	
	КолСтрок 	= Товары81.Количество();
	Ном 		= 0;
	Для Ном = 1 По КолСтрок Цикл
		
		ИндСтроки 	= КолСтрок - Ном;
		Строка81 	= Товары81.Получить(ИндСтроки);
		
		Если Строка81.Номенклатура.Услуга Тогда Товары81.Удалить(ИндСтроки); КонецЕсли; КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Справочники

Функция Получить_СправочникОрганизации(Connector, СсылкаНаОбъект, ПеренесенныеОбъекты, стрОшибки = "")
	
 	ОбъектБух = ПолучитьОбъектБухПоГуиду(Connector, СсылкаНаОбъект, Connector.Справочники.Организации, Истина);
	Если ОбъектБух = Неопределено Тогда Возврат Неопределено; КонецЕсли;
	
	Версия = Connector.Metadata.Version;
		
	СтруктураОбъект = ИнтеграцияСБухгалтериейСервер.ВычислитьОбъектПоЗапросу("
	|ВЫБРАТЬ 
	|	Наименование, 
	|	Код,
	|	ПометкаУдаления
	|ИЗ
	|	Справочник.Организации
	|ГДЕ
	|	Ссылка = &Ссылка
	|", Новый Структура("Ссылка", СсылкаНаОбъект));
	
	Изменился = Ложь;
	
	Если Не ЗаполнитьОбъектПоСтрокеЗапроса(Connector, ОбъектБух, СтруктураОбъект, ПеренесенныеОбъекты, Изменился) Тогда
		Возврат Неопределено; КонецЕсли;
	
	Если Лев(Версия, 1) = "3" Тогда  // если это Бух 3.0 тогда заполним реквизит ЮрФизЛицо
		ИзменитьРеквизит(ОбъектБух, Connector.Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо, "ЮридическоеФизическоеЛицо", Изменился); КонецЕсли;
              
	Если Изменился Тогда	Возврат ЗаписатьСправочникБух(ОбъектБух, СтруктураОбъект.ПометкаУдаления);
	Иначе					Возврат ОбъектБух.Ссылка; КонецЕсли;
	
КонецФункции
Функция Получить_СправочникКонтрагенты(Connector, СсылкаНаОбъект, ПеренесенныеОбъекты, ЭтоГруппа = Ложь)
	
 	ОбъектБух = ПолучитьОбъектБухПоГуиду(Connector, СсылкаНаОбъект, Connector.Справочники.Контрагенты, Истина);
	Если ОбъектБух = Неопределено Тогда Возврат Неопределено; КонецЕсли;
	
	СтруктураОбъект = ИнтеграцияСБухгалтериейСервер.ВычислитьОбъектПоЗапросу("
	|ВЫБРАТЬ 
	|	ПометкаУдаления, 
	|	Наименование, 
	|	Код"  + ?(ЭтоГруппа,"",",
	
	// для элемента
	
	|	Партнер,
	|	ИНН,
	|	КПП,
	|	КодПоОКПО
	|	Комментарий,
	|	НаименованиеПолное
	|
	|") + "
	|
	|ИЗ
	|	Справочник.Контрагенты
	|ГДЕ
	|	Ссылка = &Ссылка
	|", Новый Структура("Ссылка", СсылкаНаОбъект));
	
	Изменился = Ложь;
	
	Если Не ЗаполнитьОбъектПоСтрокеЗапроса(Connector, ОбъектБух, СтруктураОбъект, ПеренесенныеОбъекты, Изменился) Тогда 
		Возврат Неопределено; КонецЕсли;
		
	Если Изменился Тогда	СсылкаБух = ЗаписатьСправочникБух(ОбъектБух, СтруктураОбъект.ПометкаУдаления);
	Иначе					СсылкаБух = ОбъектБух.Ссылка; КонецЕсли;
	
	Если НЕ ПеренестиКонтактнуюИнформациюКонтрагента(Connector, СсылкаБух, СсылкаНаОбъект, СтруктураОбъект.Партнер, ПеренесенныеОбъекты) Тогда
		Возврат Неопределено; КонецЕсли;
		
	Возврат СсылкаБух;
	
КонецФункции
Функция Получить_СправочникПартнеры(Connector, СсылкаНаОбъект, ПеренесенныеОбъекты, ЭтоГруппа = Ложь)
	
	// Партнер возвращается как контрагент
	
 	ОбъектБух = ПолучитьОбъектБухПоГуиду(Connector, СсылкаНаОбъект, Connector.Справочники.Контрагенты, Истина,,,,ЭтоГруппа);
	Если ОбъектБух = Неопределено Тогда Возврат Неопределено; КонецЕсли;
	
	СтруктураОбъект = ИнтеграцияСБухгалтериейСервер.ВычислитьОбъектПоЗапросу("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Наименование, 
	|	ПометкаУдаления ПометкаУдаления,
	|	Код"  + ?(ЭтоГруппа,"",",
	
	// для элемента
	
	|	ИНН,
	|	КПП,
	|	КодПоОКПО,
	|	Комментарий,
	|	НаименованиеПолное
	|") + "
	|
	|ИЗ
	|	Справочник.Контрагенты
	|ГДЕ
	|	Партнер = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПоУмолчанию Убыв
	|", Новый Структура("Ссылка", СсылкаНаОбъект));
	
	Изменился = Ложь;
	Если Не ЗаполнитьОбъектПоСтрокеЗапроса(Connector, ОбъектБух, СтруктураОбъект, ПеренесенныеОбъекты, Изменился) Тогда
		Возврат Неопределено; КонецЕсли;
	
	Если Изменился Тогда	Возврат  ЗаписатьСправочникБух(ОбъектБух, СтруктураОбъект.ПометкаУдаления);
	Иначе					Возврат  ОбъектБух.Ссылка; КонецЕсли;
		
КонецФункции
Функция Получить_СправочникСклады(Connector, СсылкаНаОбъект, ПеренесенныеОбъекты)
	
 	ОбъектБух = ПолучитьОбъектБухПоГуиду(Connector, СсылкаНаОбъект, Connector.Справочники.Склады, Истина);
	Если ОбъектБух = Неопределено Тогда Возврат Неопределено; КонецЕсли;
	
	СтруктураОбъект = ИнтеграцияСБухгалтериейСервер.ВычислитьОбъектПоЗапросу("
	|ВЫБРАТЬ 
	|	ПометкаУдаления,
	|	Наименование, 
	|	Код
	|ИЗ
	|	Справочник.Склады
	|ГДЕ
	|	Ссылка = &Ссылка
	|", Новый Структура("Ссылка", СсылкаНаОбъект));
	
	Изменился = Ложь;
	
	Если Не ЗаполнитьОбъектПоСтрокеЗапроса(Connector, ОбъектБух, СтруктураОбъект, ПеренесенныеОбъекты, Изменился) Тогда
		Возврат Неопределено; КонецЕсли;
		
	Если Изменился Тогда	Возврат ЗаписатьСправочникБух(ОбъектБух, СтруктураОбъект.ПометкаУдаления);
	Иначе					Возврат ОбъектБух.Ссылка; КонецЕсли;
	
КонецФункции
Функция Получить_СправочникФизическиеЛица(Connector, СсылкаНаОбъект, ПеренесенныеОбъекты)
	
 	ОбъектБух = ПолучитьОбъектБухПоГуиду(Connector, СсылкаНаОбъект, Connector.Справочники.ФизическиеЛица, Истина);
	Если ОбъектБух = Неопределено Тогда	Возврат Неопределено; КонецЕсли;
	
	СтруктураОбъект = ИнтеграцияСБухгалтериейСервер.ВычислитьОбъектПоЗапросу("
	|ВЫБРАТЬ 
	|	ПометкаУдаления,
	|	Наименование,
	|	ДатаРождения,
	|	Пол
	|ИЗ
	|	Справочник.ФизическиеЛица
	|ГДЕ
	|	Ссылка = &Ссылка
	|", Новый Структура("Ссылка", СсылкаНаОбъект));
	
	Изменился = Ложь;
	Если Не ЗаполнитьОбъектПоСтрокеЗапроса(Connector, ОбъектБух, СтруктураОбъект, ПеренесенныеОбъекты, Изменился) Тогда
		Возврат Неопределено; КонецЕсли;
		
	Если Изменился Тогда	Возврат ЗаписатьСправочникБух(ОбъектБух, СтруктураОбъект.ПометкаУдаления);
	Иначе					Возврат ОбъектБух.Ссылка;КонецЕсли;
	
КонецФункции

Функция Получить_СправочникТипыЦен(Connector, СсылкаНаОбъект, ПеренесенныеОбъекты)
	
 	ОбъектБух = ПолучитьОбъектБухПоГуиду(Connector, СсылкаНаОбъект, Connector.Справочники.ТипыЦенНоменклатуры, Истина);
	Если ОбъектБух = Неопределено Тогда	Возврат Неопределено; КонецЕсли;
	
	СтруктураОбъект = ИнтеграцияСБухгалтериейСервер.ВычислитьОбъектПоЗапросу("
	|ВЫБРАТЬ 
	|	ПометкаУдаления,
	|	Наименование, 
	|	Код
	|ИЗ
	|	Справочник.ТипыЦен
	|ГДЕ
	|	Ссылка = &Ссылка
	|", Новый Структура("Ссылка", СсылкаНаОбъект));
	
	Изменился = Ложь;
	Если Не ЗаполнитьОбъектПоСтрокеЗапроса(Connector, ОбъектБух, СтруктураОбъект, ПеренесенныеОбъекты, Изменился) Тогда
		Возврат Неопределено; КонецЕсли;
		
	Если Изменился Тогда	Возврат ЗаписатьСправочникБух(ОбъектБух, СтруктураОбъект.ПометкаУдаления);
	Иначе					Возврат ОбъектБух.Ссылка; КонецЕсли;
	
КонецФункции

Функция Получить_СправочникСтраны(Connector, СсылкаНаОбъект, ПеренесенныеОбъекты)
	
	ОбъектБух = ПолучитьОбъектБухПоГуиду(Connector, СсылкаНаОбъект, ?(ЭтоБухгалтерия3(Connector), Connector.Справочники.СтраныМира, Connector.Справочники.КлассификаторСтранМира), Истина);
	Если ОбъектБух = Неопределено Тогда	Возврат Неопределено; КонецЕсли;
	
	СтруктураОбъект = ИнтеграцияСБухгалтериейСервер.ВычислитьОбъектПоЗапросу("
	|ВЫБРАТЬ 
	|	ПометкаУдаления,
	|	Наименование, 
	|	Код
	|ИЗ
	|	Справочник.Страны
	|ГДЕ
	|	Ссылка = &Ссылка
	|", Новый Структура("Ссылка", СсылкаНаОбъект));
	
	Изменился = Ложь;
	Если Не ЗаполнитьОбъектПоСтрокеЗапроса(Connector, ОбъектБух, СтруктураОбъект, ПеренесенныеОбъекты, Изменился) Тогда
		Возврат Неопределено; КонецЕсли;
		
	Если Изменился Тогда	Возврат ЗаписатьСправочникБух(ОбъектБух, СтруктураОбъект.ПометкаУдаления);
	Иначе					Возврат ОбъектБух.Ссылка; КонецЕсли;
	
КонецФункции

Функция Получить_СправочникНомераГТД(Connector, СсылкаНаОбъект, ПеренесенныеОбъекты)
	
 	ОбъектБух = ПолучитьОбъектБухПоГуиду(Connector, СсылкаНаОбъект, Connector.Справочники.НомераГТД, Истина);
	Если ОбъектБух = Неопределено Тогда Возврат Неопределено; КонецЕсли;
	
	СтруктураОбъект = ИнтеграцияСБухгалтериейСервер.ВычислитьОбъектПоЗапросу("
	|ВЫБРАТЬ 
	|	ПометкаУдаления,
	|	Код,
	|	Комментарий
	|ИЗ
	|	Справочник.НомераГТД
	|ГДЕ
	|	Ссылка = &Ссылка
	|", Новый Структура("Ссылка", СсылкаНаОбъект));
	
	Изменился = Ложь;
	
	Если Не ЗаполнитьОбъектПоСтрокеЗапроса(Connector, ОбъектБух, СтруктураОбъект, ПеренесенныеОбъекты, Изменился) Тогда
		Возврат Неопределено; КонецЕсли;
		
	Если Изменился Тогда 	Возврат ЗаписатьСправочникБух(ОбъектБух, СтруктураОбъект.ПометкаУдаления);
	Иначе					Возврат ОбъектБух.Ссылка; КонецЕсли;
	
КонецФункции

Функция Получить_СправочникВалюты(Connector, СсылкаНаОбъект, ПеренесенныеОбъекты)
	
 	ОбъектБух = ПолучитьОбъектБухПоГуиду(Connector, СсылкаНаОбъект, Connector.Справочники.Валюты, Истина);
	Если ОбъектБух = Неопределено Тогда Возврат Неопределено; КонецЕсли;
	
	СтруктураОбъект = ИнтеграцияСБухгалтериейСервер.ВычислитьОбъектПоЗапросу("
	|ВЫБРАТЬ 
	|	ПометкаУдаления,
	|	Наименование, 
	|	Код
	|ИЗ
	|	Справочник.Валюты
	|ГДЕ
	|	Ссылка = &Ссылка
	|", Новый Структура("Ссылка", СсылкаНаОбъект));
	
	Изменился = Ложь;
	Если Не ЗаполнитьОбъектПоСтрокеЗапроса(Connector, ОбъектБух, СтруктураОбъект, ПеренесенныеОбъекты, Изменился) Тогда
		Возврат Неопределено; КонецЕсли;
		
	Если Изменился Тогда 	Возврат ЗаписатьСправочникБух(ОбъектБух, СтруктураОбъект.ПометкаУдаления);
	Иначе					Возврат ОбъектБух.Ссылка; КонецЕсли;
	
КонецФункции
Функция Получить_СправочникСтатьиДвиженияДенежныхСредств(Connector, СсылкаНаОбъект, ПеренесенныеОбъекты)
	
 	ОбъектБух = ПолучитьОбъектБухПоГуиду(Connector, СсылкаНаОбъект, Connector.Справочники.СтатьиДвиженияДенежныхСредств, Истина);
	Если ОбъектБух = Неопределено Тогда Возврат Неопределено; КонецЕсли;
	
	СтруктураОбъект = ИнтеграцияСБухгалтериейСервер.ВычислитьОбъектПоЗапросу("
	|ВЫБРАТЬ 
	|	ПометкаУдаления,
	|	Наименование, 
	|	Код
	|ИЗ
	|	Справочник.СтатьиДвиженияДенежныхСредств
	|ГДЕ
	|	Ссылка = &Ссылка
	|", Новый Структура("Ссылка", СсылкаНаОбъект));
	
	Изменился = Ложь;
	
	Если Не ЗаполнитьОбъектПоСтрокеЗапроса(Connector, ОбъектБух, СтруктураОбъект, ПеренесенныеОбъекты, Изменился) Тогда
		Возврат Неопределено; КонецЕсли;
		
	Если Изменился Тогда 	Возврат ЗаписатьСправочникБух(ОбъектБух, СтруктураОбъект.ПометкаУдаления);
	Иначе					Возврат ОбъектБух.Ссылка; КонецЕсли;
	
КонецФункции

Функция Получить_СправочникНоменклатура(Connector, СсылкаНаОбъект, ПеренесенныеОбъекты, СоздаватьНовый = Истина, ЭтоГруппа = Неопределено) Экспорт
	
	ОбъектБух = ПолучитьОбъектБухПоГуиду(Connector, СсылкаНаОбъект, Connector.Справочники.Номенклатура, Истина,,,СоздаватьНовый, ?(ЭтоГруппа = Неопределено, ИнтеграцияСБухгалтериейСервер.ЭтоГруппа(СсылкаНаОбъект),ЭтоГруппа));
	Если ОбъектБух = Неопределено Тогда Возврат Неопределено; КонецЕсли;
	
	Если ЭтоГруппа = Неопределено Тогда
		ЭтоГруппа = ИнтеграцияСБухгалтериейСервер.ЭтоГруппа(СсылкаНаОбъект); КонецЕсли;
	
	СтруктураОбъект = ИнтеграцияСБухгалтериейСервер.ВычислитьОбъектПоЗапросу("
	|ВЫБРАТЬ 
	|	Родитель, 
	|	Наименование,
	|	ПометкаУдаления,
	//|	НаименованиеПолное," 	+ ?(ЭтоБухгалтерия3(Connector),"","	
	//|	СтранаПроисхождения,	") + "
	|	НаименованиеПолное,
	|	СтранаПроисхождения,
	|   ВЫБОР КОГДА ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК Услуга,
    |	ЕдиницаИзмерения.Код КодЕдИзмерения,
	|	ЕдиницаИзмерения.Наименование НаименованиеЕдИзмерения,
	|	Код,
	|	Артикул,
	|	НомерГТД"  + ?(ЭтоГруппа,"",",
	
	// для элемента
	
	|	СтавкаНДС
	|") + ?(ЭтоГруппа,"",",
	
	|	Вес
	|") + "
	|ИЗ
	|	Справочник.Номенклатура
	|ГДЕ
	|	Ссылка = &Ссылка
	|", Новый Структура("Ссылка", СсылкаНаОбъект));
	
	Изменился 			= Ложь;
	СтруктураОбъект.Код = Лев(СтруктураОбъект.Код, 11);
	
	Если Не ЗаполнитьОбъектПоСтрокеЗапроса(Connector, ОбъектБух, СтруктураОбъект, ПеренесенныеОбъекты, Изменился) Тогда
		Возврат Неопределено; КонецЕсли;
	
	Если НЕ ЭтоГруппа Тогда
	
		ЕдИзмерения81 	= Connector.Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(СтруктураОбъект.КодЕдИзмерения);
		Если ЕдИзмерения81.Пустая() Тогда // Если Пустая тогда создадим новую единицу измерения в бухгалтерии
			
			СпрЕдИзмененияОб = Connector.Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();
			СпрЕдИзмененияОб.Код 			= СтруктураОбъект.КодЕдИзмерения;
			СпрЕдИзмененияОб.Наименование 	= СтруктураОбъект.НаименованиеЕдИзмерения;
			ЕдИзмерения81 = ЗаписатьСправочникБух(СпрЕдИзмененияОб); КонецЕсли;
		
		Сравнение = Connector.NewObject("СравнениеЗначений");
			
		// Попытаемся в 2.0
			
		Попытка
			Если Сравнение.Сравнить(ОбъектБух.БазоваяЕдиницаИзмерения, ЕдИзмерения81) Тогда
					
				Изменился = Истина; ОбъектБух.БазоваяЕдиницаИзмерения = ЕдИзмерения81; КонецЕсли; Исключение 
			
			// Попытаемся в 3.0
					
			Попытка
				Если Сравнение.Сравнить(ОбъектБух.ЕдиницаИзмерения, ЕдИзмерения81) Тогда
					Изменился = Истина; ОбъектБух.ЕдиницаИзмерения = ЕдИзмерения81; КонецЕсли; Исключение КонецПопытки; КонецПопытки; КонецЕсли;	
			
	Если Изменился Тогда 	Возврат ЗаписатьСправочникБух(ОбъектБух, СтруктураОбъект.ПометкаУдаления);
	Иначе					Возврат ОбъектБух.Ссылка; КонецЕсли;
	
КонецФункции

Функция Получить_СправочникБанковскиеСчета(Connector, СсылкаНаОбъект, ПеренесенныеОбъекты,  Владелец = Неопределено)
	
	ОбъектБух = ПолучитьОбъектБухПоГуиду(Connector, СсылкаНаОбъект, Connector.Справочники.БанковскиеСчета, Истина);
	Если ОбъектБух = Неопределено Тогда Возврат Неопределено; КонецЕсли;
	
	СтруктураОбъект = ИнтеграцияСБухгалтериейСервер.ВычислитьОбъектПоЗапросу("
	|ВЫБРАТЬ 
	|	НомерСчета,
	|	Наименование,
	|	ПометкаУдаления,
	|	Банк,
	|	Владелец,
	|	БанкДляРасчетов,
	|	ТекстКорреспондента,
	|	ТекстНазначения,
	|	""Расчетный"" ВидСчета,
	|	ВалютаДенежныхСредств,
	|	НомерИДатаРазрешения,
	|	ДатаОткрытия,
	|	ДатаЗакрытия,
	|	МесяцПрописью,
	|	СуммаБезКопеек
	|ИЗ
	|	Справочник.БанковскиеСчета
	|ГДЕ
	|	Ссылка = &Ссылка
	|", Новый Структура("Ссылка", СсылкаНаОбъект));
	
	Изменился = Ложь;
	Если Не ЗаполнитьОбъектПоСтрокеЗапроса(Connector, ОбъектБух, СтруктураОбъект, ПеренесенныеОбъекты, Изменился) Тогда
		Возврат Неопределено; КонецЕсли;
	
	Если Изменился Тогда	Возврат ЗаписатьСправочникБух(ОбъектБух, СтруктураОбъект.ПометкаУдаления);
	Иначе					Возврат ОбъектБух.Ссылка; КонецЕсли;
	
КонецФункции
Функция Получить_СправочникБанки(Connector, СсылкаНаОбъект, ПеренесенныеОбъекты)
	
	ОбъектБух = ПолучитьОбъектБухПоГуиду(Connector, СсылкаНаОбъект, Connector.Справочники.Банки, Истина);
	Если ОбъектБух = Неопределено Тогда Возврат Неопределено; КонецЕсли;
	
	СтруктураОбъект = ИнтеграцияСБухгалтериейСервер.ВычислитьОбъектПоЗапросу("
	|ВЫБРАТЬ
	|	Код,
	|	Наименование,
	|	ПометкаУдаления,
	|	КоррСчет,
	|	Город, 
	|	Адрес,
	|	Телефоны
	|ИЗ
	|	Справочник.Банки
	|ГДЕ
	|	Ссылка = &Ссылка
	|", Новый Структура("Ссылка", СсылкаНаОбъект));
	
	Изменился = Ложь;
	Если Не ЗаполнитьОбъектПоСтрокеЗапроса(Connector, ОбъектБух, СтруктураОбъект, ПеренесенныеОбъекты, Изменился) Тогда
		Возврат Неопределено; КонецЕсли;
		
	Если Изменился Тогда	Возврат ЗаписатьСправочникБух(ОбъектБух, СтруктураОбъект.ПометкаУдаления);
	Иначе					Возврат ОбъектБух.Ссылка; КонецЕсли;
	
КонецФункции

Функция Получить_СправочникВидыКонтактнойИнформации(Connector, СсылкаНаОбъект, ПеренесенныеОбъекты, Код, ЭтоГруппа = Ложь)
	
	ОбъектБух = ПолучитьОбъектБухПоГуиду(Connector, СсылкаНаОбъект, Connector.Справочники.ВидыКонтактнойИнформации, Истина,,, Ложь);
	Если ОбъектБух = Неопределено Тогда
		
		ОбъектБух = ПолучитьСправочникБухПоКоду(Connector, СсылкаНаОбъект, Connector.Справочники.ВидыКонтактнойИнформации, Код,, ЭтоГруппа);
		Если ОбъектБух = Неопределено Тогда Возврат Неопределено; КонецЕсли; КонецЕсли;
	
	СтруктураОбъект = ИнтеграцияСБухгалтериейСервер.ВычислитьОбъектПоЗапросу("
	|ВЫБРАТЬ
	|	ИмяПредопределенныхДанных,
	|	ПометкаУдаления,
	|	ВЫБОР КОГДА Родитель.Родитель.Код = """" ТОГДА 1 КОГДА Родитель.Родитель.Родитель.Код = """" ТОГДА 2 ИНАЧЕ 0 КОНЕЦ Уровень,
	|	Наименование,
	|	Код
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации
	|ГДЕ
	|	Ссылка = &Ссылка
	|", Новый Структура("Ссылка", СсылкаНаОбъект));
	
	Изменился = Ложь;
	
	Если Не ЗаполнитьОбъектПоСтрокеЗапроса(Connector, ОбъектБух, СтруктураОбъект, ПеренесенныеОбъекты, Изменился) Тогда
		Возврат Неопределено; КонецЕсли;
		
	ИзменитьРеквизит(	ОбъектБух, 
						Получить_ПеречислениеТипКонтактнойИнформации(Connector, СсылкаНаОбъект, ПеренесенныеОбъекты, СтруктураОбъект.Уровень, СтруктураОбъект.ИмяПредопределенныхДанных), 
						"Тип", 
						Изменился, 
						Connector);
		
	Если Изменился Тогда	Возврат ЗаписатьСправочникБух(ОбъектБух, СтруктураОбъект.ПометкаУдаления);
	Иначе					Возврат ОбъектБух.Ссылка; КонецЕсли;

КонецФункции


#КонецОбласти

#Область Перечисления

Функция Получить_ПеречислениеСтавкиНДС(Connector, Ключ, ИндексКлюча)
	
	Если Ключ = "НДС0" Тогда
		
		Возврат Connector.Перечисления.СтавкиНДС.НДС0;
		
	ИначеЕсли Ключ = "БезНДС" Тогда
		
		Возврат Connector.Перечисления.СтавкиНДС.БезНДС;
		
	ИначеЕсли Ключ = "НДС10" Тогда
		
		Возврат Connector.Перечисления.СтавкиНДС.НДС10;
		
	ИначеЕсли Ключ = "НДС10_110" Тогда
		
		Возврат Connector.Перечисления.СтавкиНДС.НДС10_110;
		
	ИначеЕсли Ключ = "НДС18" Тогда
		
		Возврат Connector.Перечисления.СтавкиНДС.НДС18;
		
	ИначеЕсли Ключ = "НДС18_118" Тогда
		
		Возврат Connector.Перечисления.СтавкиНДС.НДС18_118;
		
	ИначеЕсли Ключ = "НДС20" Тогда
		
		Возврат Connector.Перечисления.СтавкиНДС.НДС20;
		
	ИначеЕсли Ключ = "НДС20_120" Тогда
		
		Возврат Connector.Перечисления.СтавкиНДС.НДС20_120;
		
	Иначе
		
		Возврат Connector.Перечисления.СтавкиНДС.ПустаяСсылка(); КонецЕсли;
	
КонецФункции
Функция Получить_ПеречислениеВидыОперацийЧекККМ(Connector, Ключ, ИндексКлюча)
	
	Возврат Ключ;
	
КонецФункции
Функция Получить_ПеречислениеПолФизическихЛиц(Connector, Ключ, ИндексКлюча)
	
	Если Ключ = "Женский" Тогда
		
		Возврат Connector.Перечисления.ПолФизическихЛиц.Женский;
		
	ИначеЕсли Ключ = "Мужской" Тогда
		
		Возврат Connector.Перечисления.ПолФизическихЛиц.Мужской;
		
	Иначе
		
		ОбщиеФункции.СообщитьТекст("не известный пол " + Ключ);
		Возврат Неопределено; КонецЕсли;
	
КонецФункции
Функция Получить_ПеречислениеВидыОперацийКомплектацияНоменклатуры(Connector, Ключ, ИндексКлюча)
	
	Если Ключ = "Комплектация" Тогда
		
		Возврат Connector.Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация;
		
	ИначеЕсли Ключ = "Разукомплектация" Тогда
		
		Возврат Connector.Перечисления.ВидыОперацийКомплектацияНоменклатуры.Разукомплектация;
		
	Иначе
		
		ОбщиеФункции.СообщитьТекст("не вид операции комплектации " + Ключ);
		Возврат Неопределено; КонецЕсли;
	
КонецФункции
Функция Получить_ПеречислениеВидыОперацийПоступлениеДенежныхСредств(Connector, Ключ, ИндексКлюча)
	
	Если Ключ = "ОплатаПоБанковскойКарте" Тогда
		Возврат Connector.Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление;
	ИначеЕсли Ключ = "ПоступлениеОтОператораПлатежнойСистемы" Тогда
		Возврат Connector.Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление;
	Иначе
		Возврат Connector.Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Получить(ИндексКлюча); КонецЕсли;
	
КонецФункции
Функция Получить_ПеречислениеВидыОперацийСписаниеДенежныхСредств(Connector, Ключ, ИндексКлюча)

	Возврат Connector.Перечисления.ВидыОперацийСписаниеДенежныхСредств.Получить(ИндексКлюча);
	
КонецФункции
Функция Получить_ПеречислениеВидыПлатежейВГосБюджет(Connector, Ключ, ИндексКлюча)

	Возврат Connector.Перечисления.ВидыПлатежейВГосБюджет.Получить(ИндексКлюча);
	
КонецФункции

Функция Получить_ПеречислениеТипКонтактнойИнформации(Connector, СсылкаНаОбъект, ПеренесенныеОбъекты, Уровень, ИмяПредопределенныхДанных)
		
	ТипИнформации = СсылкаНаОбъект;
	
	Если Уровень = 1 Тогда		ТипИнформации = СсылкаНаОбъект.Родитель;
	ИначеЕсли Уровень = 2 Тогда	ТипИнформации = СсылкаНаОбъект.Родитель.Родитель;
	Иначе Возврат Неопределено;	КонецЕсли;
	
	ОбъектБух = Неопределено;
	
	Если ПеренесенныеОбъекты <> Неопределено Тогда		
		
		ОбъектБух = ПеренесенныеОбъекты[ТипИнформации];
	
		// Если он уже загружался тогда вернем
		Если ОбъектБух <> Неопределено Тогда Возврат ОбъектБух; КонецЕсли; КонецЕсли;
	
	Если 		ИмяПредопределенныхДанных = "Адрес" Тогда					ОбъектБух = Connector.Перечисления.ТипыКонтактнойИнформации.Адрес;
	ИначеЕсли 	ИмяПредопределенныхДанных = "Телефон" Тогда					ОбъектБух = Connector.Перечисления.ТипыКонтактнойИнформации.Телефон;
	ИначеЕсли 	ИмяПредопределенныхДанных = "АдресЭлектроннойПочты" Тогда 	ОбъектБух = Connector.Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	ИначеЕсли	ИмяПредопределенныхДанных = "ВебСтраница" Тогда 			ОбъектБух = Connector.Перечисления.ТипыКонтактнойИнформации.ВебСтраница; КонецЕсли;		
	
	Если ОбъектБух <> Неопределено Тогда ПеренесенныеОбъекты.Вставить(ТипИнформации, ОбъектБух); КонецЕсли;
	
	Возврат ОбъектБух;
	
КонецФункции
Функция Получить_ПеречислениеВидыОперацийПКО(Connector, Ключ, ИндексКлюча)
	
	Если Ключ = "ОплатаПокупателя" Тогда			Возврат Connector.Перечисления.ВидыОперацийПКО.ОплатаПокупателя;
	ИначеЕсли Ключ = "ВозвратОтПоставщика" Тогда	Возврат Connector.Перечисления.ВидыОперацийПКО.ВозвратОтПоставщика;
	ИначеЕсли Ключ = "ПрочийПриход" Тогда			Возврат Connector.Перечисления.ВидыОперацийПКО.ПрочийПриход;
	Иначе
		ОбщиеФункции.СообщитьТекст("не известная ставка НДС " + Ключ);
		Возврат Неопределено; КонецЕсли;
	
КонецФункции
Функция Получить_ПеречислениеВидыОперацийРКО(Connector, Ключ, ИндексКлюча)

	Если Ключ = "ОплатаПоставщику" Тогда		Возврат Connector.Перечисления.ВидыОперацийРКО.ОплатаПоставщику;
	ИначеЕсли Ключ = "ВозвратПокупателю" Тогда	Возврат Connector.Перечисления.ВидыОперацийРКО.ВозвратПокупателю;
	ИначеЕсли Ключ = "ПрочийРасход" Тогда		Возврат Connector.Перечисления.ВидыОперацийРКО.ПрочийРасход;
	Иначе
		ОбщиеФункции.СообщитьТекст("не известная ставка НДС " + Ключ);
		Возврат Неопределено; КонецЕсли;
	
КонецФункции
Функция Получить_ПеречислениеУровниБюджетов(Connector, Ключ, ИндексКлюча)

	Возврат Connector.Перечисления.УровниБюджетов.Получить(ИндексКлюча);

КонецФункции


#КонецОбласти

#Область Документы

#Область Платежки

Функция Получить_ДокументОплатаЭлектроннымиДеньгами(Connector, СсылкаНаОбъект, ПеренесенныеОбъекты, Версия = Неопределено)
	
	ОбъектБух = ПолучитьОбъектБухПоГуиду(Connector, СсылкаНаОбъект, Connector.Документы.ОперацияБух ,,Истина);
	Если ОбъектБух = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураОбъект = ИнтеграцияСБухгалтериейСервер.ВычислитьОбъектПоЗапросу("ВЫБРАТЬ
             |	ОплатаЭлектроннымиДеньгами.Ссылка,
             |	ОплатаЭлектроннымиДеньгами.Номер,
             |	ОплатаЭлектроннымиДеньгами.ПометкаУдаления,
             |	ОплатаЭлектроннымиДеньгами.Дата,
             |	ОплатаЭлектроннымиДеньгами.Проведен,
             |	ОплатаЭлектроннымиДеньгами.Организация,
             |	ОплатаЭлектроннымиДеньгами.ВидОперации,
             |	ОплатаЭлектроннымиДеньгами.СуммаКомиссии,
             |	ОплатаЭлектроннымиДеньгами.ОператорПлатежнойСистемы,
             |	ОплатаЭлектроннымиДеньгами.Комментарий,
             |	ОплатаЭлектроннымиДеньгами.Контрагент,
             |	ОплатаЭлектроннымиДеньгами.Сумма
             |ИЗ
             |	Документ.ОплатаЭлектроннымиДеньгами КАК ОплатаЭлектроннымиДеньгами
             |ГДЕ
             |	ОплатаЭлектроннымиДеньгами.Ссылка = &Ссылка", Новый Структура("Ссылка", СсылкаНаОбъект));
	
	
	Изменился = Ложь;
	//контроль изменения в данной процедуре не используется, документ записывается в любом случае.
	
	Если Не ЗаполнитьОбъектПоСтрокеЗапроса(Connector, ОбъектБух, СтруктураОбъект, ПеренесенныеОбъекты, Изменился) Тогда
		Возврат Неопределено; 
	КонецЕсли;
	
	СтруктураПеременных = ИнтеграцияСБухгалтериейСервер.ПолучитьСтруктуруПеременных();


	НаборДвиженийБух=ОбъектБух.Движения.Хозрасчетный;
	НаборДвиженийБух.Очистить();
	
	// Оплата от покупателя
	СтрокаОплатаПокупателя = НаборДвиженийБух.Добавить();
	СтрокаОплатаПокупателя.Период=СтруктураОбъект.Дата;
	СтрокаОплатаПокупателя.Организация = ОбъектБух.Организация;
	операторБух=Получить_СправочникКонтрагенты(Connector,СтруктураОбъект.ОператорПлатежнойСистемы,Ложь);
	КонтрагентБух=Получить_СправочникКонтрагенты(Connector,СтруктураОбъект.Контрагент,Ложь);
	
	
	ИзменитьРеквизит(СтрокаОплатаПокупателя, Connector.ПланыСчетов.Хозрасчетный.НайтиПоКоду("57.04") ,		"СчетДт", 	Изменился);	
	СтрокаОплатаПокупателя.СубконтоДт.Контрагенты = ОператорБух; 
	
	ИзменитьРеквизит(СтрокаОплатаПокупателя, Connector.ПланыСчетов.Хозрасчетный.РасчетыСПокупателями ,		"СчетКт", 	Изменился);	
	СтрокаОплатаПокупателя.СубконтоКт.Контрагенты = КонтрагентБух; 
	
	Знак=?(СтруктураОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат"),-1,1);
	ИзменитьРеквизит(СтрокаОплатаПокупателя, Знак*СтруктураОбъект.Сумма ,		"Сумма", 	Изменился);	
	
	// Удержание комиссии
	СтрокаКомиссия = НаборДвиженийБух.Добавить();
	СтрокаКомиссия.Период=СтруктураОбъект.Дата;
	СтрокаКомиссия.Организация = ОбъектБух.Организация;
	
	ИзменитьРеквизит(СтрокаКомиссия, Connector.ПланыСчетов.Хозрасчетный.ПрочиеРасходы ,		"СчетДт", 	Изменился);	
	СтрокаКомиссия.СубконтоДт.ПрочиеДоходыИРасходы = Connector.Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00068"); 
	
	ИзменитьРеквизит(СтрокаКомиссия, Connector.ПланыСчетов.Хозрасчетный.НайтиПоКоду("57.04") ,		"СчетКт", 	Изменился);
	СтрокаКомиссия.СубконтоКт.Контрагенты = ОператорБух; 
	
	ИзменитьРеквизит(СтрокаКомиссия, Знак*СтруктураОбъект.СуммаКомиссии ,		"Сумма", 	Изменился);	
	
	
	НаборДвиженийБух.УстановитьАктивность(СтруктураОбъект.Проведен);
	ОбъектБух.ПометкаУдаления=СтруктураОбъект.ПометкаУдаления;
	

	ОбъектБух.ОбменДанными.Загрузка = Истина;
	ПолученнаяСсылка = ЗаписатьДок(ОбъектБух, Connector.РежимЗаписиДокумента.Запись);

	Возврат ПолученнаяСсылка;

КонецФункции

Функция Получить_ДокументПлатежноеПоручениеВходящее(Connector, СсылкаНаОбъект, ПеренесенныеОбъекты, Версия = Неопределено)
	
	ОбъектБух = ПолучитьОбъектБухПоГуиду(Connector, СсылкаНаОбъект, Connector.Документы.ПоступлениеНаРасчетныйСчет ,,Истина);
	Если ОбъектБух = Неопределено Тогда Возврат Неопределено; КонецЕсли;
	
	СтруктураОбъект = ИнтеграцияСБухгалтериейСервер.ВычислитьОбъектПоЗапросу("
	|ВЫБРАТЬ 
	|	Дата,
	|	Номер,
	|	ПометкаУдаления,
	|	Проведен,
	|	Организация,
	|	ВЫБОР КОГДА Партнер.ЭтоКонтрагентБухгалтерии ТОГДА Партнер ИНАЧЕ Контрагент			КОНЕЦ Контрагент,
	|	ВЫБОР КОГДА Партнер.ЭтоКонтрагентБухгалтерии ТОГДА Контрагент ИНАЧЕ НЕОПРЕДЕЛЕНО 	КОНЕЦ ДоговорКонтрагента,
	|	БанковскийСчетОрганизации 	СчетОрганизации,
	|	БанковскийСчетПартнера 		СчетКонтрагента,
	|	Валюта 						ВалютаДокумента,
	|	Сумма 						СуммаДокумента,
	|	Дата						ДатаВходящегоДокумента,
	|	НомерВходящегоДокумента,
	|	СуммаНДС,
	|	СтавкаНДС,
	|	НазначениеПлатежа,
	|	Комментарий,
	|	КурсЦБНаДатуПриобретенияВалюты		КурсНаДатуПриобретенияРеализацииВалюты,
	|	СуммаВзаиморасчетов,
	|   КурсВзаиморасчетов,
	|	НомерДоговора,
	|	ВидОперации,
	|	СтатьяДДСБух СтатьяДвиженияДенежныхСредств
	//|   СтатьяДвиженияДенежныхСредств
	|ИЗ
	|	Документ.ПлатежноеПоручениеВходящее
	|ГДЕ
	|	Ссылка = &Ссылка
	|", Новый Структура("Ссылка", СсылкаНаОбъект));
	
	Изменился = Ложь;
	
	Если Не ЗаполнитьОбъектПоСтрокеЗапроса(Connector, ОбъектБух, СтруктураОбъект, ПеренесенныеОбъекты, Изменился) Тогда
		Возврат Неопределено; КонецЕсли;
	
	СтруктураПеременных = ИнтеграцияСБухгалтериейСервер.ПолучитьСтруктуруПеременных();
	
	ВидДоговора81 = Неопределено;
	ЗаполнитьПрочееПоСтроке = Истина;
		
	// Добавим строку
			
	Если ОбъектБух.РасшифровкаПлатежа.Количество() <> 1 Тогда
		ОбъектБух.РасшифровкаПлатежа.Очистить();
		Строка81 = ОбъектБух.РасшифровкаПлатежа.Добавить();
	Иначе
		Строка81 = ОбъектБух.РасшифровкаПлатежа.Получить(0); КонецЕсли;
	
	ИзменитьРеквизит(ОбъектБух, Connector.ПланыСчетов.Хозрасчетный.РасчетныеСчета ,	"СчетБанк", Изменился);	// 51
	
	// ОПЛАТА ПОКУПАТЕЛЯ 
			
	Если СтруктураОбъект.ВидОперации = СтруктураПеременных.ВидОперацииОплатаПокупателя  Тогда
			
		ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.РасчетыСПокупателями ,		"СчетУчетаРасчетовСКонтрагентом", 	Изменился);	// 62.01 
		ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным ,	"СчетУчетаРасчетовПоАвансам", 		Изменился);	// 62.02 
			
		ВидДоговора81 = Connector.Перечисления.ВидыДоговоровКонтрагентов.СПокупателем; 	
		ИзменитьРеквизит(Строка81, Connector.Перечисления.СпособыПогашенияЗадолженности.Автоматически ,"СпособПогашенияЗадолженности", Изменился);
 		
   	// ОПЛАТА ПО БАНКОВСКОЙ КАРТЕ (ПРОЧИЕ ПОСТУПЛЕНИЯ)
		
	ИначеЕсли СтруктураОбъект.ВидОперации = СтруктураПеременных.ВидОперацииОплатаПоБанковскойКарте Тогда

		ИзменитьРеквизит(ОбъектБух, Connector.ПланыСчетов.Хозрасчетный.ВыручкаЕНВД ,	"СчетУчетаРасчетовСКонтрагентом", 	Изменился);	// 90.01.2 
		ИзменитьРеквизит(ОбъектБух, ПолучитьСубконтоТовары81(Connector) ,				"СубконтоКт1", 	Изменился); // Товар(пр. ТМЦ)
		ИзменитьРеквизит(ОбъектБух, Connector.Справочники.Номенклатура.ПустаяСсылка(),	"СубконтоКт2", 	Изменился); // типизируем
		ИзменитьРеквизит(ОбъектБух, Истина,	"ДоходыЕНВД_УСН", 		Изменился);
		ИзменитьРеквизит(ОбъектБух, Истина,	"РучнаяНастройка_УСН", 	Изменился);
		ИзменитьРеквизит(ОбъектБух, СтруктураОбъект.СуммаДокумента,	"Графа4_УСН", 	Изменился);
		ИзменитьРеквизит(ОбъектБух, "Прочий приход денежных средств: Оплата покупателей по пластиковым картам.","Содержание_УСН", 	Изменился);

	// ВОЗВРАТ ОТ ПОСТАВЩИКА	
				
	ИначеЕсли СтруктураОбъект.ВидОперации = СтруктураПеременных.ВидОперацииВозвратОтПоставщика Тогда
				
		ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками ,		"СчетУчетаРасчетовСКонтрагентом", 	Изменился);	// 60.01 
		ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным ,	"СчетУчетаРасчетовПоАвансам", 		Изменился);	// 60.02 
			
		ВидДоговора81 = Connector.Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
		ИзменитьРеквизит(Строка81, Connector.Перечисления.СпособыПогашенияЗадолженности.Автоматически ,"СпособПогашенияЗадолженности", Изменился);
	

	// ПРИОБРЕТЕНИЕ ИНОСТРАННОЙ ВАЛЮТЫ

	//ИначеЕсли СтруктураОбъект.ВидОперации = СтруктураПеременных.ВидОперацииПриобретениеИностраннойВалюты Тогда
	//	
	//	ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.ПриобретениеИностраннойВалюты , "СчетУчетаРасчетовСКонтрагентом", Изменился);	// 57.02				
	//	ИзменитьРеквизит(ОбъектБух, Истина, "ОтражатьРазницуВКурсеВСоставеОперационныхРасходов", Изменился);
	//	
	//	
	// Поступление от операторов платежных систем	
				                            
	ИначеЕсли СтруктураОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПоступлениеОтОператораПлатежнойСистемы") Тогда	
	
		ИзменитьРеквизит(ОбъектБух, Connector.ПланыСчетов.Хозрасчетный.НайтиПоКоду("57.04") ,	"СчетУчетаРасчетовСКонтрагентом", 	Изменился);	// Шапка 
		ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.НайтиПоКоду("57.04") ,	"СчетУчетаРасчетовСКонтрагентом", 	Изменился);	// ТЧ Расшифровкаплатежа 
		ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.НайтиПоКоду("57.04") ,	"СчетУчетаРасчетовПоАвансам", 	Изменился);	// ТЧ Расшифровкаплатежа 
		ИзменитьРеквизит(ОбъектБух, ОбъектБух.Контрагент ,	"СубконтоКт1", 	Изменился);	// Шапка
		ИзменитьРеквизит(Строка81, ОбъектБух.Контрагент ,	"СубконтоКт1", 	Изменился);	// ТЧ Расшифровкаплатежа 
		
		ВидДоговора81 = Connector.Перечисления.ВидыДоговоровКонтрагентов.Прочее;
		ИзменитьРеквизит(Строка81, Connector.Перечисления.СпособыПогашенияЗадолженности.Автоматически ,"СпособПогашенияЗадолженности", Изменился);
		
	
	// РАСЧЕТЫ ПО КРЕДИТАМ И ЗАЙМАМ	
			
	ИначеЕсли СтруктураОбъект.ВидОперации = СтруктураПеременных.ВидОперацииРасчетыПоКредитамИЗаймам_Поступление Тогда	
			
		ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.ДолгосрочныеКредиты , "СчетУчетаРасчетовСКонтрагентом", Изменился);	КонецЕсли; // 67.01				
 		
	// Прочее по строке
		
	Если ЗаполнитьПрочееПоСтроке Тогда
		
		СтруктураНДС = ИнтеграцияСБухгалтериейСервер.ПолучитьСтруктуруПеречисления(СтруктураОбъект.СтавкаНДС);
		
		ИзменитьРеквизит(Строка81, 1, 										"КратностьВзаиморасчетов", Изменился);
		ИзменитьРеквизит(Строка81, СтруктураОбъект.КурсВзаиморасчетов,		"КурсВзаиморасчетов", Изменился);
		ИзменитьРеквизит(Строка81, СтруктураОбъект.СуммаВзаиморасчетов,		"СуммаВзаиморасчетов", Изменился);
		ИзменитьРеквизит(Строка81, СтруктураОбъект.СуммаДокумента,			"СуммаПлатежа", Изменился);
		ИзменитьРеквизит(Строка81, СтруктураОбъект.СуммаНДС,				"СуммаНДС", Изменился);
		ИзменитьРеквизит(Строка81, Получить_ПеречислениеСтавкиНДС(Connector, СтруктураНДС.Ключ, СтруктураНДС.Индекс), "СтавкаНДС", Изменился);КонецЕсли;   
		
	// Установим договор
	
	Если ВидДоговора81 <> Неопределено Тогда
		
		// возмем первый попавшийся
				
		ВалютаПоУмолчанию81 = ПолучитьОбъектВБухгалтерии(СтруктураПеременных.ВалютаВзаиморасчетов, Connector,ПеренесенныеОбъекты);
		Если ВалютаПоУмолчанию81 = Неопределено Тогда Возврат Неопределено; КонецЕсли;		 
				
		СтруктураДоговора = Новый Структура("ВалютаВзаиморасчетов, ВидДоговора", ВалютаПоУмолчанию81,ВидДоговора81);
		Договор81 = ПолучитьДоговор81ИзОрганизации(Connector, СтруктураОбъект.Контрагент, СтруктураОбъект.ДоговорКонтрагента, ОбъектБух.Организация, ПеренесенныеОбъекты, Истина, СтруктураДоговора);
		Если Договор81 = Неопределено Тогда	Возврат Неопределено; КонецЕсли;
				
		ИзменитьРеквизит(Строка81, Договор81, "ДоговорКонтрагента", Изменился);
		
	ИначеЕсли ЗначениеЗаполнено(СтруктураОбъект.НомерДоговора) Тогда
		
		ИзменитьРеквизит(Строка81, Connector.Справочники.ДоговорыКонтрагентов.НайтиПоКоду(СтруктураДоговора.НомерДоговора), "ДоговорКонтрагента", Изменился); КонецЕсли;
			
	// Статья движения денежных средств
	
	Статья81 = ПолучитьОбъектВБухгалтерии(СтруктураОбъект.СтатьяДвиженияДенежныхСредств, Connector, ПеренесенныеОбъекты);
	Если Статья81 = Неопределено Тогда Возврат Неопределено; КонецЕсли;	
 	ИзменитьРеквизит(Строка81, Статья81, "СтатьяДвиженияДенежныхСредств", Изменился);

	Если Изменился Тогда	Возврат ЗаписатьДокументБух(ОбъектБух, СтруктураОбъект.ПометкаУдаления, СтруктураОбъект.Проведен, Connector);
	Иначе					Возврат ОбъектБух.Ссылка; КонецЕсли;
	
КонецФункции
Функция Получить_ДокументПлатежноеПоручениеИсходящее(Connector, СсылкаНаОбъект, ПеренесенныеОбъекты, Версия = Неопределено)
	
	ОбъектБух = ПолучитьОбъектБухПоГуиду(Connector, СсылкаНаОбъект, Connector.Документы.СписаниеСРасчетногоСчета ,,Истина);
	Если ОбъектБух = Неопределено Тогда Возврат Неопределено; КонецЕсли;
	
	СтруктураОбъект = ИнтеграцияСБухгалтериейСервер.ВычислитьОбъектПоЗапросу("
	|ВЫБРАТЬ 
	|	Дата,
	|	Номер,
	|	ПометкаУдаления,
	|	Проведен,
	|	Организация,
	|	Организация.УчитыватьНДС УчитыватьНДС,
	|	ВЫБОР КОГДА Партнер.ЭтоКонтрагентБухгалтерии ТОГДА Партнер ИНАЧЕ Контрагент			КОНЕЦ Контрагент,
	|	ВЫБОР КОГДА Партнер.ЭтоКонтрагентБухгалтерии ТОГДА Контрагент ИНАЧЕ НЕОПРЕДЕЛЕНО 	КОНЕЦ ДоговорКонтрагента,
	|	НомерВходящегоДокумента 			НомерВходящегоДокумента,
	|	Дата								ДатаВходящегоДокумента,
	|	БанковскийСчетОрганизации			СчетОрганизации,
	|	БанковскийСчетПартнера 				СчетКонтрагента,
	|	Валюта					 			ВалютаДокумента,
	|	Сумма 								СуммаДокумента,
	|	СуммаНДС,
	|	СтавкаНДС,
	|	ДокументОснование,
	|	НомерВедомости,
	|	НазначениеПлатежа,
	|	ФизЛицо,
	|	НомерДоговора,
	|	ВидОперации,
	|	ВидПлатежаВБюджет,
	|	СтатьяДДСБух 		СтатьяДвиженияДенежныхСредств,
	|	СтатьяДДСБух.Код 	СтатьяДвиженияДенежныхСредствКод,
	//|   СтатьяДвиженияДенежныхСредств,
	|	СтатьяДвиженияДенежныхСредств.Код СтатьяДвиженияДенежныхСредствКодУпр,
	|	УровниБюджетов,
	|	Комментарий
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее
	|ГДЕ
	|	Ссылка = &Ссылка
	|", Новый Структура("Ссылка", СсылкаНаОбъект));
	
	Изменился = Ложь;
	
	Если Не ЗаполнитьОбъектПоСтрокеЗапроса(Connector, ОбъектБух, СтруктураОбъект, ПеренесенныеОбъекты, Изменился) Тогда
		Возврат Неопределено;КонецЕсли;
	
	СтруктураПеременных = ИнтеграцияСБухгалтериейСервер.ПолучитьСтруктуруПеременных();
	
	ИзменитьРеквизит(ОбъектБух, Connector.ПланыСчетов.Хозрасчетный.РасчетныеСчета ,	"СчетБанк",	Изменился);	// 51
		
	// Расшифровка платежа
		
	Если ОбъектБух.РасшифровкаПлатежа.Количество() <> 1 Тогда
		ОбъектБух.РасшифровкаПлатежа.Очистить();
		Строка81 = ОбъектБух.РасшифровкаПлатежа.Добавить();
	Иначе
		Строка81 = ОбъектБух.РасшифровкаПлатежа.Получить(0); КонецЕсли;

	ВидДоговора81 = Неопределено;
	стрСодержание = "";

	// Прочие по строке
	
	СтруктураНДС = ИнтеграцияСБухгалтериейСервер.ПолучитьСтруктуруПеречисления(СтруктураОбъект.СтавкаНДС);
	
	ИзменитьРеквизит(Строка81, 1,"КурсВзаиморасчетов", Изменился);
	ИзменитьРеквизит(Строка81, 1,"КратностьВзаиморасчетов", Изменился);
    ИзменитьРеквизит(Строка81, СтруктураОбъект.СуммаНДС,			"СуммаНДС", Изменился);
	ИзменитьРеквизит(Строка81, СтруктураОбъект.СуммаДокумента,	"СуммаВзаиморасчетов", Изменился);
	ИзменитьРеквизит(Строка81, СтруктураОбъект.СуммаДокумента,	"СуммаПлатежа", Изменился);			
	ИзменитьРеквизит(Строка81, Получить_ПеречислениеСтавкиНДС(Connector, СтруктураНДС.Ключ, СтруктураНДС.Индекс) , 	"СтавкаНДС", Изменился);
		
	ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками ,		"СчетУчетаРасчетовСКонтрагентом", 	Изменился);	// 60.01
	ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным ,	"СчетУчетаРасчетовПоАвансам", 		Изменился);	// 60.02
		
	КодСтатьи = СтруктураОбъект.СтатьяДвиженияДенежныхСредствКод;
	КодСтатьиУпр = СтруктураОбъект.СтатьяДвиженияДенежныхСредствКодУпр;
			
	// ОПЛАТА ПОСТАВЩИКУ
		                   
	Если СтруктураОбъект.ВидОперации = СтруктураПеременных.ВидОперацииОплатаПоставщику Тогда
    	Если НЕ ЗначениеЗаполнено(СтруктураОбъект.НомерДоговора) Тогда
			ВидДоговора81 = Connector.Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком; КонецЕсли;
		ИзменитьРеквизит(Строка81, Connector.Перечисления.СпособыПогашенияЗадолженности.Автоматически , "СпособПогашенияЗадолженности", Изменился);
			
		стрСодержание =  "Списание с р/с: оплата поставщику """ + ПН(ОбъектБух.Контрагент) + """ по договору";
		
		Если КодСтатьиУпр = "000000089" Тогда  // Проезд в командировку
			
			ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчиками , "СчетУчетаРасчетовСКонтрагентом", 	Изменился);	// 76.05
			ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчиками , "СчетУчетаРасчетовПоАвансам", 		Изменился);	// 76.05

		КонецЕсли;
		
	// ВОЗВРАТ ПОКУПАТЕЛЮ
		
	ИначеЕсли СтруктураОбъект.ВидОперации = СтруктураПеременных.ВидОперацииВозвратПокупателю Тогда
			
		ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.РасчетыСПокупателями ,		"СчетУчетаРасчетовСКонтрагентом", 	Изменился);	// 62.01 
		ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным ,	"СчетУчетаРасчетовПоАвансам", 		Изменился);	// 62.02 
			
		ВидДоговора81 = Connector.Перечисления.ВидыДоговоровКонтрагентов.СПокупателем; 
		ИзменитьРеквизит(Строка81, Connector.Перечисления.СпособыПогашенияЗадолженности.Автоматически , "СпособПогашенияЗадолженности", Изменился);
			
		стрСодержание = "Списание с р/с: возврат денежных средств покупателю """ + ПН(ОбъектБух.Контрагент) + """ по договору";
			
	// ПЕРЕЧИСЛЕНИЕ НАЛОГА
			
	ИначеЕсли СтруктураОбъект.ВидОперации = СтруктураПеременных.ВидОперацииПеречислениеНалога Тогда
			
		ИзменитьРеквизит(ОбъектБух, ПолучитьОбъектВБухгалтерии(СтруктураОбъект.ВидПлатежаВБюджет, Connector,ПеренесенныеОбъекты) ,	"СубконтоДт1", Изменился); // Расходы на услуги банков

		Если КодСтатьи = "000000057" Тогда					// Перечисление налога на прибыль
			ИзменитьРеквизит(ОбъектБух,  Connector.ПланыСчетов.Хозрасчетный.РасчетыСБюджетом, "СчетУчетаРасчетовСКонтрагентом", Изменился);		// 68.04.1
				
			Если ЗначениеЗаполнено(СтруктураОбъект.УровниБюджетов) Тогда
				ИзменитьРеквизит(ОбъектБух,  ПолучитьОбъектВБухгалтерии(СтруктураОбъект.УровниБюджетов, Connector,ПеренесенныеОбъекты), "СубконтоДт2", Изменился); КонецЕсли;
				
		ИначеЕсли
			КодСтатьи = "000000042" Тогда					// Перечисление налога (прочее)
			ИзменитьРеквизит(ОбъектБух,  Connector.ПланыСчетов.Хозрасчетный.ПрочиеНалогиИСборы, "СчетУчетаРасчетовСКонтрагентом", Изменился);	// 68.10
		ИначеЕсли
			КодСтатьи = "000000059" Тогда					// Перечисление НДФЛ
			ИзменитьРеквизит(ОбъектБух,  Connector.ПланыСчетов.Хозрасчетный.НДФЛ, "СчетУчетаРасчетовСКонтрагентом", Изменился);		// 68.01
			
			стрСодержание = "Списание с р/с: перечисление НДФЛ работников.";
			
		ИначеЕсли
			КодСтатьи = "000000060" Тогда					// Страховые взносы в ФСС от НС и ПЗ
			ИзменитьРеквизит(ОбъектБух,  Connector.ПланыСчетов.Хозрасчетный.ФСС_НСиПЗ, "СчетУчетаРасчетовСКонтрагентом", Изменился);// 69.11
		ИначеЕсли
			КодСтатьи = "000000061" Тогда					// Страховые взносы в ФСС
			ИзменитьРеквизит(ОбъектБух,  Connector.ПланыСчетов.Хозрасчетный.ФСС, "СчетУчетаРасчетовСКонтрагентом", Изменился);		// 69.01
		ИначеЕсли
			КодСтатьи = "000000062" Тогда					// Страховые взносы в ФФОМС
			ИзменитьРеквизит(ОбъектБух,  Connector.ПланыСчетов.Хозрасчетный.ФФОМС, "СчетУчетаРасчетовСКонтрагентом", Изменился);	// 69.03.1
		ИначеЕсли
			КодСтатьи = "000000063" Тогда					// Накопительная часть пенсии ПФР
			ИзменитьРеквизит(ОбъектБух,  Connector.ПланыСчетов.Хозрасчетный.ПФР_нак, "СчетУчетаРасчетовСКонтрагентом", Изменился);	// 69.02.2
		ИначеЕсли
			КодСтатьи = "000000064" Тогда					// Страховая часть пенсии ПФР
			ИзменитьРеквизит(ОбъектБух,  Connector.ПланыСчетов.Хозрасчетный.ПФР_ОПС, "СчетУчетаРасчетовСКонтрагентом", Изменился);// 69.02.7
		ИначеЕсли
			КодСтатьи = "000000065" Тогда					// Перечисление НДС
			ИзменитьРеквизит(ОбъектБух,  Connector.ПланыСчетов.Хозрасчетный.НДС, "СчетУчетаРасчетовСКонтрагентом", Изменился);		// 68.02
		ИначеЕсли
			КодСтатьи = "000000066" Тогда					// Транспортный налог
			ИзменитьРеквизит(ОбъектБух,  Connector.ПланыСчетов.Хозрасчетный.ТранспортныйНалог, "СчетУчетаРасчетовСКонтрагентом", Изменился);	// 68.07
		ИначеЕсли
			КодСтатьи = "000000067" Тогда					// Налог на имущество
			ИзменитьРеквизит(ОбъектБух,  Connector.ПланыСчетов.Хозрасчетный.НалогНаИмущество, "СчетУчетаРасчетовСКонтрагентом", Изменился);   // 68.08
		ИначеЕсли 
			КодСтатьи = "000000124" Тогда                    // Торговый сбор
			ИзменитьРеквизит(ОбъектБух,  Connector.ПланыСчетов.Хозрасчетный.ТорговыйСбор,	"СчетУчетаРасчетовСКонтрагентом", Изменился); //68.13
		ИначеЕсли 
			КодСтатьи = "000000241" Тогда                    // Земельный налог
			ИзменитьРеквизит(ОбъектБух,  Connector.ПланыСчетов.Хозрасчетный.НайтиПоКоду("68 .14. "), "СчетУчетаРасчетовСКонтрагентом", Изменился); //68.14			
	    КонецЕсли; 
			
		Если ПустаяСтрока(стрСодержание) И ОбъектБух.СчетУчетаРасчетовСКонтрагентом <> Неопределено Тогда
			
			стрСодержание = "Списание с р/с: перечисление налога (" + ОбъектБух.СчетУчетаРасчетовСКонтрагентом.Код + 
			" " + ОбъектБух.СчетУчетаРасчетовСКонтрагентом.Наименование + "). "; КонецЕсли;			

	// ПРОЧЕЕ СПИСАНИЕ
		
	ИначеЕсли СтруктураОбъект.ВидОперации = СтруктураПеременных.ВидОперацииПрочееСписание Тогда
		
		ИзменитьРеквизит(ОбъектБух,  Connector.ПланыСчетов.Хозрасчетный.ПрочиеРасходы,	"СчетУчетаРасчетовСКонтрагентом", Изменился);

		// Счет 91.02
		Если	КодСтатьи = "000000035" ИЛИ					// Расходы на услуги банков
				КодСтатьи = "000000020" Тогда 				// Расчеты по кредитам и займам
				ИзменитьРеквизит(ОбъектБух,  Connector.Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00050"),	"СубконтоДт1", Изменился); // Расходы на услуги банков
				
		ИначеЕсли	 
				КодСтатьи = "000000045" Тогда				// Государственные пошлины
			 	ИзменитьРеквизит(ОбъектБух,  Connector.Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00049"),	"СубконтоДт1", Изменился); // Государственные пошлины
				
		ИначеЕсли
			 	КодСтатьи = "000000038" Тогда				// Прочие расходы денежных средств
				ИзменитьРеквизит(ОбъектБух,  Connector.Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00054"),	"СубконтоДт1", Изменился); //Расходы, не принимаемые в целях налогообложения                     
				
		// Счет 76.41
		
		ИначеЕсли 
				КодСтатьи = "000000053" Тогда              // Удержания из ЗП
				
				ИзменитьРеквизит(ОбъектБух,  Connector.ПланыСчетов.Хозрасчетный.РасчетыПоИсполнительнымДокументамРаботников,	"СчетУчетаРасчетовСКонтрагентом", Изменился);		
				ИзменитьРеквизит(ОбъектБух,  ОбъектБух.Контрагент, "СубконтоДт1", Изменился);
				ИзменитьРеквизит(ОбъектБух,  ОбъектБух.ФизЛицо,	"ФизЛицо", Изменился);

				
		// Счет 76.41	
		ИначеЕсли 
				ЗначениеЗаполнено(СтруктураОбъект.ФизЛицо) Тогда     // Пособие, Единовременное пособие
				
				ИзменитьРеквизит(ОбъектБух,  Connector.ПланыСчетов.Хозрасчетный.РасчетыПоИсполнительнымДокументамРаботников,	"СчетУчетаРасчетовСКонтрагентом", Изменился);
				ИзменитьРеквизит(ОбъектБух,  ОбъектБух.ФизЛицо,	"СубконтоДт1", Изменился);

				
		// Счет 57.02		
		ИначеЕсли
				КодСтатьи = "000000034" Тогда				//Перевод на другой счет организации						
				
				ИзменитьРеквизит(ОбъектБух,  Connector.ПланыСчетов.Хозрасчетный.ПриобретениеИностраннойВалюты,	"СчетУчетаРасчетовСКонтрагентом", Изменился);
				ИзменитьРеквизит(ОбъектБух,  ОбъектБух.Контрагент, "СубконтоДт1", Изменился);
				
				Если НЕ ПустаяСтрока(СтруктураОбъект.НомерДоговора) Тогда
					ИзменитьРеквизит(ОбъектБух,  Connector.Справочники.ДоговорыКонтрагентов.НайтиПоКоду(СтруктураОбъект.НомерДоговора),	"СубконтоДт2", Изменился); КонецЕсли;

		// Счет 68.10		
		ИначеЕсли 
				КодСтатьи = "000000046" Тогда 				// Штрафы за административные правонарушения
				
				ИзменитьРеквизит(ОбъектБух,  Connector.ПланыСчетов.Хозрасчетный.ПрочиеНалогиИСборы,	"СчетУчетаРасчетовСКонтрагентом", Изменился);
				ИзменитьРеквизит(ОбъектБух,  Connector.Перечисления.ВидыПлатежейВГосБюджет.Штраф,	"СубконтоДт1", Изменился); 
				
		КонецЕсли;
	
		стрСодержание = "Прочий расход денежных средств: " + Наименование(ОбъектБух.СтатьяДвиженияДенежныхСредств) + ".";
		
	// ПЕРЕЧИСЛЕНИЕ ЗП
	
	ИначеЕсли СтруктураОбъект.ВидОперации = СтруктураПеременных.ВидОперацииПеречислениеЗП Тогда
		
		ЗаполнитьТаблицуНаВыплатуЗП(Connector, ОбъектБух, СтруктураОбъект.НомерВедомости, СтруктураОбъект.Дата, СтруктураОбъект.СтатьяДвиженияДенежныхСредств, ПеренесенныеОбъекты, Изменился);
		стрСодержание = "Списание с р/с: перечисление заработной платы. ";
		
	// РАСЧЕТ ПО КРЕДИТАМ И ЗАЙМАМ	
		
	ИначеЕсли СтруктураОбъект.ВидОперации = СтруктураПеременных.ВидОперацииРасчетыПоКредитамИЗаймам Тогда
		

		ИзменитьРеквизит(Строка81, Connector.Справочники.ДоговорыКонтрагентов.НайтиПоКоду(СтруктураОбъект.НомерДоговора) ,	"ДоговорКонтрагента", 	Изменился);
		ИзменитьРеквизит(ОбъектБух, Connector.Справочники.ДоговорыКонтрагентов.НайтиПоКоду(СтруктураОбъект.НомерДоговора) ,	"ДоговорКонтрагента", 	Изменился);
		
		// 67.02
		Если КодСтатьи = "000000068" Тогда 					// Выплата процентов по кредитам и займам
			
		 	ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымКредитам ,		"СчетУчетаРасчетовСКонтрагентом", 	Изменился); 
			
		// 67.01	
		ИначеЕсли КодСтатьи = "000000020" Тогда				// Расчеты по кредитам и займам 
			
			ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.ДолгосрочныеКредиты ,					"СчетУчетаРасчетовСКонтрагентом", 	Изменился);
		КонецЕсли;
		
		стрСодержание = "Расчеты по кредитам и займам с """ + ПН(ОбъектБух.Контрагент) + """ по договору";
		
	// ПЕРЕЧИСЛЕНИЕ ПОДОТЧЕТНОМУ ЛИЦУ	
		
	ИначеЕсли СтруктураОбъект.ВидОперации = СтруктураПеременных.ПеречислениеПодотчетномуЛицу Тогда
		
		стрСодержание = "Списание с р/с: перечислено под отчет сотруднику " + Наименование(ОбъектБух.ФизЛицо) + ". ";
		
		Если ЗначениеЗаполнено(СтруктураОбъект.ФизЛицо) Тогда  //71.01
		
			ИзменитьРеквизит(ОбъектБух,  Connector.ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами,	"СчетУчетаРасчетовСКонтрагентом", Изменился);
			ИзменитьРеквизит(ОбъектБух,  ОбъектБух.ФизЛицо,	"ФизЛицо", Изменился); КонецЕсли;		
	КонецЕсли;		
	
	// Установим статью движения денежных средств
		
	Статья81 = ПолучитьОбъектВБухгалтерии(СтруктураОбъект.СтатьяДвиженияДенежныхСредств, Connector, ПеренесенныеОбъекты);
	Если Статья81 = Неопределено Тогда Возврат Неопределено; КонецЕсли;
		
	ИзменитьРеквизит(Строка81, Статья81, "СтатьяДвиженияДенежныхСредств", Изменился);
		
	// Установим договор, возмем первый попавшийся
	Если ВидДоговора81 <> Неопределено Тогда
		
		ВалютаПоУмолчанию81 = ПолучитьОбъектВБухгалтерии(СтруктураПеременных.ВалютаВзаиморасчетов, Connector, ПеренесенныеОбъекты);
		Если ВалютаПоУмолчанию81 = Неопределено Тогда Возврат Неопределено; КонецЕсли;		 
		
		СтруктураДоговора = Новый Структура("ВалютаВзаиморасчетов, ВидДоговора", ВалютаПоУмолчанию81, ВидДоговора81);
		Договор81 = ПолучитьДоговор81ИзОрганизации(Connector, СтруктураОбъект.Контрагент, СтруктураОбъект.ДоговорКонтрагента, ОбъектБух.Организация, ПеренесенныеОбъекты, Истина, СтруктураДоговора);
		Если Договор81 = Неопределено Тогда Возврат Неопределено; КонецЕсли;
		
		ИзменитьРеквизит(Строка81, Договор81, "ДоговорКонтрагента", Изменился);
		
	ИначеЕсли ЗначениеЗаполнено(СтруктураОбъект.НомерДоговора) Тогда
		
		ИзменитьРеквизит(Строка81, Connector.Справочники.ДоговорыКонтрагентов.НайтиПоКоду(СтруктураОбъект.НомерДоговора), "ДоговорКонтрагента", Изменился); КонецЕсли;

	// ОСОБЫЕ СЛУЧАИ
	
	// Для ИП заполняем Графу7, кроме: Платежи по аренде, Услуги по охране, Перечисление налога (прочее)
 	Если НЕ СтруктураОбъект.УчитыватьНДС И КодСтатьи <> "000000033" И КодСтатьи <> "000000052" И КодСтатьи <> "000000042" Тогда
			
		ИзменитьРеквизит(ОбъектБух, Истина,					"РучнаяНастройка_УСН", 	Изменился);
		ИзменитьРеквизит(ОбъектБух, СтруктураОбъект.СуммаДокумента,	"Графа6_УСН", 	Изменился);
		ИзменитьРеквизит(ОбъектБух, СтруктураОбъект.СуммаДокумента,	"Графа7_УСН", 	Изменился);
		ИзменитьРеквизит(ОбъектБух, ?(Прав(стрСодержание, 11) = "по договору", стрСодержание + " """ + Наименование(Строка81.ДоговорКонтрагента) + """.", стрСодержание),	"Содержание_УСН", 	Изменился); КонецЕсли;
	
	Если Изменился Тогда 	Возврат ЗаписатьДокументБух(ОбъектБух, СтруктураОбъект.ПометкаУдаления, СтруктураОбъект.Проведен, Connector);
	Иначе 					Возврат ОбъектБух.Ссылка; КонецЕсли;
	
КонецФункции

Функция ЗаполнитьТаблицуНаВыплатуЗП(Connector, ОбъектБух, Номер, ДатаИнтервала, СтатьяДвиженияДенежныхСредств, ПеренесенныеОбъекты, Изменился)

	Статья81 = ПолучитьОбъектВБухгалтерии(СтатьяДвиженияДенежныхСредств, Connector,ПеренесенныеОбъекты);
	Если Статья81 = Неопределено Тогда Возврат Ложь; КонецЕсли;

	СсылкаНаОбъект81 = Connector.Документы.ЗарплатаКВыплатеОрганизаций.НайтиПоНомеру(Номер, ДатаИнтервала);
	Если СсылкаНаОбъект81 <> Неопределено И НЕ СсылкаНаОбъект81.Пустая() Тогда
		
		ЗапросТекст = "ВЫБРАТЬ ФизЛицо, Сумма ИЗ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата ГДЕ Ссылка = &Ссылка";
		Выполнение 	= COMФункцииДиалогов.ПолучитьВыполнениеЗапроса81(Connector, ЗапросТекст,, Новый Структура("Ссылка", СсылкаНаОбъект81));
		Если Выполнение = Неопределено Тогда Возврат Ложь; КонецЕсли;
			
		ТаблицаБух = ОбъектБух.ПеречислениеЗаработнойПлаты;
		Если ТаблицаБух.Количество() <> 1 Тогда ТаблицаБух.Очистить(); КонецЕсли;
				
		Выборка = Выполнение.Выбрать();
		Пока Выборка.Следующий() Цикл
							
			зпСтрока81 = ТаблицаБух.Добавить();
				
			ИзменитьРеквизит(зпСтрока81, СсылкаНаОбъект81, "Ведомость", Изменился);
			ИзменитьРеквизит(зпСтрока81, Выборка.ФизЛицо, "ФизЛицо", Изменился);
			ИзменитьРеквизит(зпСтрока81, Выборка.Сумма, "СуммаПлатежа", Изменился);
			ИзменитьРеквизит(зпСтрока81, Статья81, "СтатьяДвиженияДенежныхСредств", Изменился); КонецЦикла; КонецЕсли;
	
	Возврат Истина;
	
КонецФункции
Функция ПН(Контрагент) //Полное наименование контрагента
	
	Возврат ?(ЗначениеЗаполнено(Контрагент.НаименованиеПолное), Контрагент.НаименованиеПолное, Контрагент.Наименование); 
	
КонецФункции
Функция Наименование(Ссылка81)
	
	Возврат ?(Ссылка81 <> Неопределено, Ссылка81.Наименование, "");
	
КонецФункции

#КонецОбласти

#Область Приходники

Функция Получить_ДокументЧекККМ(Connector, СсылкаНаОбъект, ПеренесенныеОбъекты)
	
	// Создаем из Чека ПКО, а из Чека на возврат РКО
	
	ОбъектБух = Неопределено;
	СтруктураПеременных = ИнтеграцияСБухгалтериейСервер.ПолучитьСтруктуруПеременных();
	
	Таблица = ИнтеграцияСБухгалтериейСервер.ВычислитьМассивПоЗапросу("
		|ВЫБРАТЬ 
		|	Ссылка.Дата,
		|	Ссылка.Номер,
		|	Ссылка.Проведен Проведен,
		|	Ссылка.ПометкаУдаления ПометкаУдаления,
		|	Ссылка.Касса.Организация			Организация,
		|	Ссылка.Валюта 						ВалютаДокумента,
		//|   Ссылка.СтатьяДДС					СтатьяДвиженияДенежныхСредств,
		|   Ссылка.СтатьяДДСБух					СтатьяДвиженияДенежныхСредств,
		|	Ссылка.Касса 						Касса,
		|	ВЫБОР 
		|		КОГДА Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Продажа) 
		|		ТОГДА Ссылка.Склад						
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) 
		|		КОНЕЦ Контрагент,
		|	ВЫБОР 
		|		КОГДА Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Продажа) ТОГДА ""ПриходныйКассовыйОрдер""
		|		КОГДА Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат) ТОГДА ""РасходныйКассовыйОрдер""
		|		ИНАЧЕ """" 						
		|		КОНЕЦ ИмяДокумента,
		|	СУММА(Сумма) 						СуммаДокумента
		|ИЗ
		|	Документ.ЧекККМ.Оплаты
		|ГДЕ
		|	Ссылка = &Ссылка И ТипОплаты = &Наличка
		|СГРУППИРОВАТЬ ПО Ссылка 
		|ИМЕЮЩИЕ СУММА(Сумма) = Ссылка.Сумма
		|", Новый Структура("Ссылка, Наличка", СсылкаНаОбъект, СтруктураПеременных.ТипОплатыНаличные));
		
		Если Таблица.Количество() И Таблица[0].ИмяДокумента <> "" Тогда
			Возврат Вычислить("Получить_Документ" + Строка(Таблица[0].ИмяДокумента) + "(Connector, СсылкаНаОбъект, ПеренесенныеОбъекты, Таблица)");
			
		Иначе
			ОбщиеФункции.СообщитьТекст("Данные для выгрузки не найдены");
			Возврат Неопределено; КонецЕсли;
	   		
КонецФункции

Функция Получить_ДокументПриходныйКассовыйОрдер(Connector, СсылкаНаОбъект, ПеренесенныеОбъекты, Таблица = Неопределено)
	
	ОбъектБух = ПолучитьОбъектБухПоГуиду(Connector, СсылкаНаОбъект, Connector.Документы.ПриходныйКассовыйОрдер ,,Истина);
	Если ОбъектБух = Неопределено Тогда Возврат Неопределено; КонецЕсли;
	
	РозничнаяВыручка 	= Истина;
	ВидДоговора81 		= Неопределено;
	СтруктураПеременных = ИнтеграцияСБухгалтериейСервер.ПолучитьСтруктуруПеременных();
		
	Если Таблица = Неопределено Тогда РозничнаяВыручка = Ложь;

		Таблица = ИнтеграцияСБухгалтериейСервер.ВычислитьМассивПоЗапросу("
		|ВЫБРАТЬ 
		|	Дата,
		|	Номер,
		|	Организация,
		|	ПометкаУдаления,
		|	Проведен,
		|	Касса,
		|	ВЫБОР КОГДА Партнер.ЭтоКонтрагентБухгалтерии ТОГДА Партнер ИНАЧЕ Контрагент			КОНЕЦ Контрагент,
		|	ВЫБОР КОГДА Партнер.ЭтоКонтрагентБухгалтерии ТОГДА Контрагент ИНАЧЕ НЕОПРЕДЕЛЕНО 	КОНЕЦ ДоговорКонтрагента,
		|	Валюта 				ВалютаДокумента,
		|	Сумма 				СуммаДокумента,
		|   ВидОперации			ВидОперации,
		//|   ВЫБОР КОГДА СтатьяДДС = &Ремонт ТОГДА &ОплатаПокупателя ИНАЧЕ СтатьяДДС КОНЕЦ СтатьяДвиженияДенежныхСредств
		|   ВЫБОР КОГДА СтатьяДДСБух = &Ремонт ТОГДА &ОплатаПокупателя ИНАЧЕ СтатьяДДСБух КОНЕЦ СтатьяДвиженияДенежныхСредств
		|ИЗ
		|	Документ.ПриходныйКассовыйОрдер
		|ГДЕ
		|	Ссылка = &Ссылка
		|", Новый Структура("Ссылка, Ремонт, ОплатаПокупателя", СсылкаНаОбъект, СтруктураПеременных.СтатьяРемонт, СтруктураПеременных.СтатьяОплатаПокупателя)); КонецЕсли;
	
	Изменился = Ложь;
	
	Для Каждого Строка Из Таблица Цикл
		
		Если Не ЗаполнитьОбъектПоСтрокеЗапроса(Connector, ОбъектБух, Строка, ПеренесенныеОбъекты, Изменился) Тогда
			Возврат Неопределено; КонецЕсли;
		
		ИзменитьРеквизит(ОбъектБух, Connector.ПланыСчетов.Хозрасчетный.НайтиПоКоду("50" + ИнтеграцияСБухгалтериейСервер.ПолучитьСубсчетКассы(Строка.Касса)), "СчетКасса", Изменился); // 50.01.03
		
		// Добавим строку
			
		Если ОбъектБух.РасшифровкаПлатежа.Количество() <> 1 Тогда
			ОбъектБух.РасшифровкаПлатежа.Очистить();
			Строка81 = ОбъектБух.РасшифровкаПлатежа.Добавить();
		Иначе
			Строка81 = ОбъектБух.РасшифровкаПлатежа.Получить(0); КонецЕсли;
		
		Если НЕ РозничнаяВыручка Тогда 
			
			СпособыПогашенияЗадолженности = Connector.Перечисления.СпособыПогашенияЗадолженности.Автоматически;
	
			Если Строка.ВидОперации = СтруктураПеременных.ВидОперацииПКО_ОплатаПокупателя Тогда
				ВидДоговора81 = Connector.Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
					
				ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.РасчетыСПокупателями ,		"СчетУчетаРасчетовСКонтрагентом", 	Изменился);	// 62.01 
				ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным ,	"СчетУчетаРасчетовПоАвансам", 		Изменился);	// 62.02 

			ИначеЕсли СсылкаНаОбъект.ВидОперации = СтруктураПеременных.ВидОперацииПКО_ВозвратОтПоставщика Тогда // Возврат денежных средств поставщиком
				ВидДоговора81 = Connector.Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
					
				ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками ,		"СчетУчетаРасчетовСКонтрагентом", 	Изменился);	// 60.01 
				ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным ,	"СчетУчетаРасчетовПоАвансам", 		Изменился);	// 60.02 
			Иначе
				// с любым другим видом операции приходники не преносим
				ОбщиеФункции.СообщитьТекст("Для данного вида операции интеграция с Бухгалтерией не предусмотрена.");
				Возврат Неопределено; КонецЕсли;
		Иначе
			ИзменитьРеквизит(ОбъектБух, Connector.Перечисления.ВидыОперацийПКО.РозничнаяВыручка, "ВидОперации", Изменился); 	
			ИзменитьРеквизит(ОбъектБух, Истина, "ВыручкаСНТТ", Изменился);
			СпособыПогашенияЗадолженности = Неопределено; КонецЕсли;
	                                                                                           
		ИзменитьРеквизит(Строка81, СпособыПогашенияЗадолженности, "СпособПогашенияЗадолженности", Изменился);
				
		ИзменитьРеквизит(Строка81, 1, "КратностьВзаиморасчетов", Изменился);
		ИзменитьРеквизит(Строка81, 1, "КурсВзаиморасчетов", Изменился);
		ИзменитьРеквизит(Строка81, Строка.СуммаДокумента,	"СуммаВзаиморасчетов", Изменился);
		ИзменитьРеквизит(Строка81, 0, "СуммаНДС", Изменился);
		ИзменитьРеквизит(Строка81, Connector.Перечисления.СтавкиНДС.БезНДС, "СтавкаНДС", Изменился);
		ИзменитьРеквизит(Строка81, Строка.СуммаДокумента,	"СуммаПлатежа", Изменился);
	 	
		// Установим договор
		
		Если ВидДоговора81 <> Неопределено Тогда
			
			// возмем первый попавшийся
					
			ВалютаПоУмолчанию81 = ПолучитьОбъектВБухгалтерии(СтруктураПеременных.ВалютаВзаиморасчетов, Connector,ПеренесенныеОбъекты);
			Если ВалютаПоУмолчанию81 = Неопределено Тогда Возврат Неопределено; КонецЕсли;		 
					
			СтруктураДоговора = Новый Структура("ВалютаВзаиморасчетов, ВидДоговора", ВалютаПоУмолчанию81, ВидДоговора81);
			Договор81 = ПолучитьДоговор81ИзОрганизации(Connector, Строка.Контрагент, Строка.ДоговорКонтрагента, ОбъектБух.Организация, ПеренесенныеОбъекты, Истина, СтруктураДоговора,);
			Если Договор81 = Неопределено Тогда Возврат Неопределено; КонецЕсли;
					
			ИзменитьРеквизит(Строка81, Договор81, "ДоговорКонтрагента", Изменился); КонецЕсли;
		
		Статья81 = ПолучитьОбъектВБухгалтерии(Строка.СтатьяДвиженияДенежныхСредств, Connector, ПеренесенныеОбъекты);
		Если Статья81 = Неопределено Тогда Возврат Неопределено; КонецЕсли;	
	 	ИзменитьРеквизит(Строка81, Статья81, "СтатьяДвиженияДенежныхСредств", Изменился); КонецЦикла;

	Если Изменился Тогда	Возврат ЗаписатьДокументБух(ОбъектБух, Строка.ПометкаУдаления, Строка.Проведен, Connector);
	Иначе					Возврат ОбъектБух.Ссылка; КонецЕсли;
	
КонецФункции
Функция Получить_ДокументРасходныйКассовыйОрдер(Connector, СсылкаНаОбъект, ПеренесенныеОбъекты, Таблица = Неопределено)
	
	ОбъектБух = ПолучитьОбъектБухПоГуиду(Connector, СсылкаНаОбъект, Connector.Документы.РасходныйКассовыйОрдер ,,Истина);
	Если ОбъектБух = Неопределено Тогда Возврат Неопределено; КонецЕсли;
	
	ЧекККМ 				= Истина;
	ВидДоговора81 		= Неопределено;
	СтруктураПеременных = ИнтеграцияСБухгалтериейСервер.ПолучитьСтруктуруПеременных();
	
	Если Таблица = Неопределено Тогда ЧекККМ = Ложь;

		Таблица = ИнтеграцияСБухгалтериейСервер.ВычислитьМассивПоЗапросу("
		|ВЫБРАТЬ 
		|	Дата,
		|	Номер,
		|	ПометкаУдаления,
		|	Проведен,
		|	Организация,
		|	Касса,
		|	ВЫБОР КОГДА Партнер.ЭтоКонтрагентБухгалтерии ТОГДА Партнер ИНАЧЕ Контрагент			КОНЕЦ Контрагент,
		|	ВЫБОР КОГДА Партнер.ЭтоКонтрагентБухгалтерии ТОГДА Контрагент ИНАЧЕ НЕОПРЕДЕЛЕНО 	КОНЕЦ ДоговорКонтрагента,
		|	Валюта 				ВалютаДокумента,
		|	Сумма 				СуммаДокумента,
		|	ВидОперации         ВидОперации,
		//|   СтатьяДДС			СтатьяДвиженияДенежныхСредств
		|   СтатьяДДСБух			СтатьяДвиженияДенежныхСредств
		|ИЗ
		|	Документ.РасходныйКассовыйОрдер
		|ГДЕ
		|	Ссылка = &Ссылка
		|", Новый Структура("Ссылка", СсылкаНаОбъект)); КонецЕсли;
	
	Изменился = Ложь;
	
	Для Каждого Строка Из Таблица Цикл
		
		Если Не ЗаполнитьОбъектПоСтрокеЗапроса(Connector, ОбъектБух, Строка, ПеренесенныеОбъекты, Изменился) Тогда
			Возврат Неопределено; КонецЕсли;
		
		ИзменитьРеквизит(ОбъектБух, Connector.ПланыСчетов.Хозрасчетный.НайтиПоКоду("50" + ИнтеграцияСБухгалтериейСервер.ПолучитьСубсчетКассы(Строка.Касса)), "СчетКасса", Изменился);
		Если Строка.Контрагент.Пустая() Тогда
			ИзменитьРеквизит(ОбъектБух, Connector.Справочники.Контрагенты.ПустаяСсылка(), "Контрагент", Изменился); КонецЕсли;
		
		// Добавим строку
			
		Если ОбъектБух.РасшифровкаПлатежа.Количество() <> 1 Тогда
			ОбъектБух.РасшифровкаПлатежа.Очистить();
			Строка81 = ОбъектБух.РасшифровкаПлатежа.Добавить();
		Иначе
			Строка81 = ОбъектБух.РасшифровкаПлатежа.Получить(0); КонецЕсли;
		
		Если НЕ ЧекККМ Тогда 
			
			СпособыПогашенияЗадолженности =  Connector.Перечисления.СпособыПогашенияЗадолженности.Автоматически;

			Если Строка.ВидОперации = СтруктураПеременных.ВидОперацииРКО_ВозвратПокупателю Тогда // Возврат денежных средств покупателю
				ВидДоговора81 = Connector.Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
				
				ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.РасчетыСПокупателями ,		"СчетУчетаРасчетовСКонтрагентом", 	Изменился);	// 62.01 
				ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным ,	"СчетУчетаРасчетовПоАвансам", 		Изменился);	// 62.02 

			ИначеЕсли Строка.ВидОперации = СтруктураПеременных.ВидОперацииРКО_ОплатаПоставщику Тогда
				ВидДоговора81 = Connector.Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
				
				ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками ,		"СчетУчетаРасчетовСКонтрагентом", 	Изменился);	// 60.01 
				ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным ,	"СчетУчетаРасчетовПоАвансам", 		Изменился);	// 60.02 
				
			Иначе
				// все остальное на прочие расходы
				ИзменитьРеквизит(ОбъектБух, Connector.Перечисления.ВидыОперацийРКО.ПрочийРасход, "ВидОперации", Изменился);
				ИзменитьРеквизит(ОбъектБух, Connector.ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажуЕНВД, "СчетУчетаРасчетовСКонтрагентом", Изменился);  //90.07.2
				СпособыПогашенияЗадолженности = Неопределено; КонецЕсли;
		Иначе
			
			// Чеки на возврат как прочие расходы
			ИзменитьРеквизит(ОбъектБух, Connector.Перечисления.ВидыОперацийРКО.ПрочийРасход, "ВидОперации", Изменился);
			
			ИзменитьРеквизит(ОбъектБух, Connector.ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажуЕНВД, "СчетУчетаРасчетовСКонтрагентом", Изменился);  //90.07.2
			СпособыПогашенияЗадолженности = Неопределено; КонецЕсли;
				
		ИзменитьРеквизит(Строка81, СпособыПогашенияЗадолженности, "СпособПогашенияЗадолженности", Изменился);
				
		ИзменитьРеквизит(Строка81, 1, "КратностьВзаиморасчетов", Изменился);
		ИзменитьРеквизит(Строка81, 1, "КурсВзаиморасчетов", Изменился);
		ИзменитьРеквизит(Строка81, Строка.СуммаДокумента,	"СуммаВзаиморасчетов", Изменился);
		ИзменитьРеквизит(Строка81, 0, "СуммаНДС", Изменился);
		ИзменитьРеквизит(Строка81, Connector.Перечисления.СтавкиНДС.БезНДС, "СтавкаНДС", Изменился);
		ИзменитьРеквизит(Строка81, Строка.СуммаДокумента,	"СуммаПлатежа", Изменился);
	 	
		// Установим договор
		
		Если ВидДоговора81 <> Неопределено Тогда
			
			// возмем первый попавшийся
					
			ВалютаПоУмолчанию81 = ПолучитьОбъектВБухгалтерии(СтруктураПеременных.ВалютаВзаиморасчетов, Connector,ПеренесенныеОбъекты);
			Если ВалютаПоУмолчанию81 = Неопределено Тогда Возврат Неопределено; КонецЕсли;		 
					
			СтруктураДоговора = Новый Структура("ВалютаВзаиморасчетов, ВидДоговора", ВалютаПоУмолчанию81, ВидДоговора81);
			Договор81 = ПолучитьДоговор81ИзОрганизации(Connector, Строка.Контрагент, Строка.ДоговорКонтрагента, ОбъектБух.Организация, ПеренесенныеОбъекты, Истина, СтруктураДоговора);
			Если Договор81 = Неопределено Тогда Возврат Неопределено; КонецЕсли;
					
			ИзменитьРеквизит(Строка81, Договор81, "ДоговорКонтрагента", Изменился); КонецЕсли;
		
		Статья81 = ПолучитьОбъектВБухгалтерии(Строка.СтатьяДвиженияДенежныхСредств, Connector,ПеренесенныеОбъекты);
		Если Статья81 = Неопределено Тогда Возврат Неопределено; КонецЕсли;	
		ИзменитьРеквизит(Строка81, Статья81, "СтатьяДвиженияДенежныхСредств", Изменился); КонецЦикла;

	Если Изменился Тогда	Возврат ЗаписатьДокументБух(ОбъектБух, Строка.ПометкаУдаления, Строка.Проведен, Connector);
	Иначе					Возврат ОбъектБух.Ссылка; КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Накладаные

Функция Получить_ДокументКомплектация(Connector, СсылкаНаОбъект, ПеренесенныеОбъекты, стрОшибки = "")
	
	ОбъектБух = ПолучитьОбъектБухПоГуиду(Connector, СсылкаНаОбъект, Connector.Документы.КомплектацияНоменклатуры,,Истина);
	Если ОбъектБух = Неопределено Тогда Возврат Неопределено; КонецЕсли;
	
	СубконтоТовар81 = ПолучитьСубконтоТовары81(Connector);
	
	СтруктураОбъект = ИнтеграцияСБухгалтериейСервер.ВычислитьОбъектПоЗапросу("
	|ВЫБРАТЬ 
	|	ВЫБОР КОГДА ВходящийНомер = """" ТОГДА Номер ИНАЧЕ ВходящийНомер КОНЕЦ Номер, 
	|	Дата,
	|	Проведен,
	|	ПометкаУдаления,
	|	Номенклатура,
	|	Количество,
	|	Операция ВидОперации, 
	|	Организация,
	|	Склад,
	|	Комментарий,
	|	Товары.(
	|		Номенклатура,
	|		Количество,
	|		1 ДоляСтоимости
	|			) КАК Комплектующие
	|ИЗ
	|	Документ.Комплектация
	|ГДЕ
	|	Ссылка = &Ссылка
	|",  Новый Структура("Ссылка", СсылкаНаОбъект));
	
	Изменился 	= Ложь;
	
	Если Не ЗаполнитьОбъектПоСтрокеЗапроса(Connector, ОбъектБух, СтруктураОбъект, ПеренесенныеОбъекты, Изменился) Тогда
		Возврат Неопределено; КонецЕсли;
		
		// Валюты
		
		//ИзменитьРеквизит(ОбъектБух, 1, "КратностьВзаиморасчетов", 	Изменился);
		//ИзменитьРеквизит(ОбъектБух, 1, "КурсВзаиморасчетов", 		Изменился);
	
	// Флаги
														   
	ИзменитьРеквизит(ОбъектБух, Connector.Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять , "НДСвСтоимостиТоваров", 	Изменился);
	//ИзменитьРеквизит(ОбъектБух, Истина , "УчитыватьНДС", 		Изменился);
	//ИзменитьРеквизит(ОбъектБух, Строка.СуммаВключаетНДС , "СуммаВключаетНДС", 	Изменился);
		
	// Счета
		
	ИзменитьРеквизит(ОбъектБух, Connector.ПланыСчетов.Хозрасчетный.ТоварыНаСкладах ,			 	"СчетУчета", 				Изменился);	// 41.01
	ИзменитьРеквизит(ОбъектБух, Connector.ПланыСчетов.Хозрасчетный.Продажи_НДС ,			 	"СчетСписанияНДС", 				Изменился);	// 41.01
		//ИзменитьРеквизит(ОбъектБух, Connector.ПланыСчетов.Хозрасчетный.РасчетыСПокупателями , 			"СчетУчетаРасчетовСКонтрагентом", 	Изменился);	// 62.01
		//ИзменитьРеквизит(ОбъектБух, Connector.ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным , 	"СчетУчетаРасчетовПоАвансам", 		Изменился);	// 62.02
		
	Для Каждого Строка81 Из ОбъектБух.Комплектующие Цикл
			
		ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.ТоварыНаСкладах ,			 	"СчетУчета", 				Изменился);	// 41.01
			//ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД , 				"СчетДоходов", 				Изменился);	// 90.01.2
			//ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД , 	"СчетРасходов", 			Изменился);	// 90.02.1
			//ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.Продажи_НДС , 				"СчетУчетаНДСПоРеализации", Изменился);	// 90.03
			//ИзменитьРеквизит(Строка81, СубконтоТовар81 ,												"Субконто", 				Изменился);	// Товар
	КонецЦикла;
		
	Если Изменился Тогда 	Возврат ЗаписатьДокументБух(ОбъектБух, СтруктураОбъект.ПометкаУдаления, СтруктураОбъект.Проведен, Connector);
	Иначе					Возврат ОбъектБух.Ссылка; КонецЕсли;
	
КонецФункции

Функция Получить_ДокументПоступлениеТоваров(Connector, СсылкаНаОбъект, ПеренесенныеОбъекты)
	
	Перем Колонки;
	
	ОбъектБух = ПолучитьОбъектБухПоГуиду(Connector, СсылкаНаОбъект, Connector.Документы.ПоступлениеТоваровУслуг,,Истина);
	Если ОбъектБух = Неопределено Тогда Возврат Неопределено; КонецЕсли;
	
	СтруктураОбъект = ИнтеграцияСБухгалтериейСервер.ВычислитьОбъектПоЗапросу("
	|ВЫБРАТЬ 
	|	ВЫБОР КОГДА ВходящийНомер = """" ТОГДА Номер ИНАЧЕ ВходящийНомер КОНЕЦ Номер, 
	|	Дата,
	|	Организация,
	|	ВЫБОР КОГДА Партнер.ЭтоКонтрагентБухгалтерии ТОГДА Партнер ИНАЧЕ Контрагент КОНЕЦ Контрагент,
	|	ВЫБОР КОГДА Партнер.ЭтоКонтрагентБухгалтерии ТОГДА Контрагент ИНАЧЕ НЕОПРЕДЕЛЕНО КОНЕЦ ДоговорКонтрагента,
	|	Склад,
	|	ТипЦен,
	|	Валюта 			КАК ВалютаДокумента,
	|	Сумма,
	|	СуммаВключаетНДС,
	|	НомерВходящегоДокумента,
	|	ДатаВходящегоДокумента,
	|	Комментарий,
	|	Проведен,
	|	ПометкаУдаления,
	|	Товары.(
	|		Номенклатура,
	|		Количество,
	|		1 Коэффициент,
	|		Цена,
	|		Сумма,
	|		СтавкаНДС,
	|		СуммаНДС,
	|		НомерГТД,
	|		ВЫБОР КОГДА СтранаПроисхождения <> ЗНАЧЕНИЕ(Справочник.Страны.ПустаяСсылка) И НомерГТД = ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка) 
	|       	ТОГДА ЗНАЧЕНИЕ(Справочник.Страны.ПустаяСсылка)
	|			ИНАЧЕ СтранаПроисхождения 
	|			КОНЕЦ СтранаПроисхождения
	|		) КАК Товары
	|ИЗ
	|	Документ.ПоступлениеТоваров
	|ГДЕ
	|	Ссылка = &Ссылка
	|", Новый Структура("Ссылка", СсылкаНаОбъект));
	
	Если СтруктураОбъект = Неопределено Тогда Возврат Неопределено; КонецЕсли;
	
	Изменился = Ложь;
	
	Если Не ЗаполнитьОбъектПоСтрокеЗапроса(Connector, ОбъектБух, СтруктураОбъект, ПеренесенныеОбъекты, Изменился) Тогда Возврат Неопределено; КонецЕсли;
		
	// Операция
		
	ИзменитьРеквизит(ОбъектБух, Connector.Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия, "ВидОперации", 	Изменился);
		
	// Валюты
		
	ИзменитьРеквизит(ОбъектБух, 1, "КратностьВзаиморасчетов", 	Изменился);
	ИзменитьРеквизит(ОбъектБух, 1, "КурсВзаиморасчетов", 		Изменился);
		
	// Установим договор, возмем первый попавшийся
		
	ВалютаПоУмолчанию81 = ПолучитьОбъектВБухгалтерии(ИнтеграцияСБухгалтериейСервер.ПолучитьВалютуВзаиморасчетовПоУмолчанию(), Connector, ПеренесенныеОбъекты);
	Если ВалютаПоУмолчанию81 = Неопределено Тогда Возврат Неопределено; КонецЕсли;		 
		
	СтруктураДоговора = Новый Структура("ВалютаВзаиморасчетов, ВидДоговора",
											ВалютаПоУмолчанию81,
											Connector.Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
												
	СтруктураДоп = Новый Структура("ТипЦен", ОбъектБух.ТипЦен);
		
	Договор81 = ПолучитьДоговор81ИзОрганизации(Connector, СтруктураОбъект.Контрагент, СтруктураОбъект.ДоговорКонтрагента, ОбъектБух.Организация, ПеренесенныеОбъекты, Истина, СтруктураДоговора, СтруктураДоп);
	Если Договор81 = Неопределено Тогда Возврат Неопределено; КонецЕсли;
		
	ИзменитьРеквизит(ОбъектБух, Договор81, "ДоговорКонтрагента", Изменился);
	
	// Зачет авансов
	
	ИзменитьРеквизит(ОбъектБух, Connector.Перечисления.СпособыЗачетаАвансов.Автоматически , "СпособЗачетаАвансов", Изменился);
	
	// Флаги
	
	ИзменитьРеквизит(ОбъектБух, Истина , "УчитыватьНДС", 		Изменился);
	ИзменитьРеквизит(ОбъектБух, Истина , "СуммаВключаетНДС", 	Изменился);
	
	// Счета
	ИзменитьРеквизит(ОбъектБух, Connector.ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками , 		"СчетУчетаРасчетовСКонтрагентом", 	Изменился);	// 60.01
	ИзменитьРеквизит(ОбъектБух, Connector.ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным , 	"СчетУчетаРасчетовПоАвансам", 		Изменился);	// 60.02
	
	Для Каждого Строка81 Из ОбъектБух.Товары Цикл
		ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.ТоварыНаСкладах ,			 	"СчетУчета", 	Изменился);	// 41.01
		ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ ,		"СчетУчетаНДС", Изменился);	// 19.03
	КонецЦикла;
	
	//ОбъектБух.ОбменДанными.Load = Истина;
	
	Если Изменился Тогда	Возврат ЗаписатьДокументБух(ОбъектБух, СтруктураОбъект.ПометкаУдаления, СтруктураОбъект.Проведен, Connector);
	Иначе					Возврат ОбъектБух.Ссылка; КонецЕсли;
	
КонецФункции
Функция Получить_ДокументРеализацияТоваров(Connector, СсылкаНаОбъект, ПеренесенныеОбъекты, Версия = Неопределено)
	
	ОбъектБух = ПолучитьОбъектБухПоГуиду(Connector, СсылкаНаОбъект, Connector.Документы.РеализацияТоваровУслуг,,Истина);
	Если ОбъектБух = Неопределено Тогда Возврат Неопределено; КонецЕсли;
	
	СтруктураПеременных		= ИнтеграцияСБухгалтериейСервер.ПолучитьСтруктуруПеременных();
	СубконтоТовар81 		= ПолучитьСубконтоТовары81(Connector);
	
	СтруктураОбъект = ИнтеграцияСБухгалтериейСервер.ВычислитьОбъектПоЗапросу("
	|ВЫБРАТЬ 
	|	Ссылка,
	|	ПометкаУдаления,
	|	Проведен,
	|	ВЫБОР КОГДА ВходящийНомер = """" ТОГДА Номер ИНАЧЕ ВходящийНомер КОНЕЦ Номер, 
	|	Дата,
	|	Организация,
	|	Организация.УчитыватьНДС УчитыватьНДС,
	|	ВЫБОР КОГДА Партнер.ЭтоКонтрагентБухгалтерии ТОГДА Партнер ИНАЧЕ Контрагент КОНЕЦ Контрагент,
	|	ВЫБОР КОГДА Партнер.ЭтоКонтрагентБухгалтерии ТОГДА Контрагент ИНАЧЕ НЕОПРЕДЕЛЕНО КОНЕЦ ДоговорКонтрагента,
	|	Склад,
	|	ТипЦен,
	|	Валюта 			КАК ВалютаДокумента,
	|	Сумма СуммаДокумента,
	|	СуммаВключаетНДС,
	|	ВЫБОР КОГДА Заказ Ссылка Документ.ЗаказНаряд ТОГДА
	|		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ	ЭтоРемонт,
	|	ВЫБОР КОГДА Заказ Ссылка Документ.ЗаказНаряд ТОГДА
	|		Заказ.Услуга
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ			Услуга,
	|	Комментарий,
	|	Товары.(
	//|		Партия,
	|		Номенклатура,
	//|		ВЫБОР КОГДА НоменклатураУчет = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) ТОГДА Номенклатура ИНАЧЕ НоменклатураУчет КОНЕЦ Номенклатура,
	|		Количество,
	|		1 Коэффициент,
	|		Цена,
	|		Сумма,
	|		СтавкаНДС,
	|		СуммаНДС
	|			) КАК Товары
	|ИЗ
	|	Документ.РеализацияТоваров
	|ГДЕ
	|	Ссылка = &Ссылка
	|", Новый Структура("Ссылка", СсылкаНаОбъект));
	
	Изменился = Ложь;
	
	Если Не ЗаполнитьОбъектПоСтрокеЗапроса(Connector, ОбъектБух, СтруктураОбъект, ПеренесенныеОбъекты, Изменился) Тогда Возврат Неопределено; КонецЕсли;
		
	// Операция
	ВидОперации = ?(Версия = 3, Connector.Перечисления.ВидыОперацийРеализацияТоваров.Товары, Connector.Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия); 		
	ИзменитьРеквизит(ОбъектБух, ВидОперации, "ВидОперации", Изменился);
	           
	// Валюты
		
	ИзменитьРеквизит(ОбъектБух, 1, "КратностьВзаиморасчетов", 	Изменился);
	ИзменитьРеквизит(ОбъектБух, 1, "КурсВзаиморасчетов", 		Изменился);
		
	// Установим договор, возмем первый попавшийся
		
	ВалютаПоУмолчанию81 = ПолучитьОбъектВБухгалтерии(СтруктураПеременных.ВалютаВзаиморасчетов, Connector,ПеренесенныеОбъекты);
	Если ВалютаПоУмолчанию81 = Неопределено Тогда Возврат Неопределено; КонецЕсли;		 
		
	СтруктураДоговора = Новый Структура("ВалютаВзаиморасчетов, ВидДоговора",
											ВалютаПоУмолчанию81,
											Connector.Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
												
	СтруктураДоп = Новый Структура("ТипЦен", ОбъектБух.ТипЦен);
		
	Договор81 = ПолучитьДоговор81ИзОрганизации(Connector, СтруктураОбъект.Контрагент, СтруктураОбъект.ДоговорКонтрагента, ОбъектБух.Организация, ПеренесенныеОбъекты, Истина, СтруктураДоговора, СтруктураДоп);
	Если Договор81 = Неопределено Тогда Возврат Неопределено; КонецЕсли;
		
	ИзменитьРеквизит(ОбъектБух, Договор81, "ДоговорКонтрагента", Изменился);
		
	// Зачет авансов
		
	ИзменитьРеквизит(ОбъектБух, Connector.Перечисления.СпособыЗачетаАвансов.Автоматически , "СпособЗачетаАвансов", Изменился);
		
	// Флаги
	Если Версия <> 3 Тогда	
	ИзменитьРеквизит(ОбъектБух, Истина , 							"УчитыватьНДС", 		Изменился);
	КонецЕсли;
	ИзменитьРеквизит(ОбъектБух, СтруктураОбъект.СуммаВключаетНДС , 	"СуммаВключаетНДС", 	Изменился);
		
	// Счета
		
	ИзменитьРеквизит(ОбъектБух, Connector.ПланыСчетов.Хозрасчетный.РасчетыСПокупателями , 			"СчетУчетаРасчетовСКонтрагентом", 	Изменился);	// 62.01
	ИзменитьРеквизит(ОбъектБух, Connector.ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным , 	"СчетУчетаРасчетовПоАвансам", 		Изменился);	// 62.02
		
	Если СтруктураОбъект.ЭтоРемонт Тогда
			
		КоличЧасов = 0; СуммаНДС = 0;
		Для Каждого СтрокаТов ИЗ ОбъектБух.Товары Цикл Если СтрокаТов.Номенклатура.Услуга Тогда КоличЧасов = КоличЧасов + СтрокаТов.Количество; КонецЕсли; СуммаНДС = СуммаНДС + СтрокаТов.СуммаНДС; КонецЦикла;
			
		Если НЕ КоличЧасов Тогда
			ОбщиеФункции.СообщитьТекст("Реализация по Заказ-Наряду не содержит Услуги");
			Возврат Неопределено; КонецЕсли;	
			
		Если ОбъектБух.Услуги.Количество() <> 1 Тогда
			ОбъектБух.Услуги.Очистить();
			Строка81 = ОбъектБух.Услуги.Добавить();
		Иначе
			Строка81 = ОбъектБух.Услуги.Получить(0); КонецЕсли;         
			
		Услуга81 = ПолучитьОбъектВБухгалтерии(СтруктураОбъект.Услуга, Connector, ПеренесенныеОбъекты);               
		ИзменитьРеквизит(Строка81, Услуга81, "Номенклатура", Изменился);
		ИзменитьРеквизит(Строка81, КоличЧасов, 	"Количество", Изменился);
		ИзменитьРеквизит(Строка81, СуммаНДС, "СуммаНДС", Изменился); 
		ИзменитьРеквизит(Строка81, СтруктураОбъект.СуммаДокумента,	"Сумма", Изменился);
		ИзменитьРеквизит(Строка81, Формат(СтруктураОбъект.СуммаДокумента / КоличЧасов,"ЧЦ=10; ЧДЦ=2"), "Цена", Изменился);
		ИзменитьРеквизит(Строка81, ?(СтруктураОбъект.УчитыватьНДС, Услуга81.СтавкаНДС, Connector.Перечисления.СтавкиНДС.БезНДС), "СтавкаНДС", Изменился);
		
		ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.Продажи_НДС, "СчетУчетаНДСПоРеализации", Изменился); 		// 90.03
		ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД, "СчетДоходов", Изменился);            		// 90.01.2
		ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД, "СчетРасходов", Изменился); 	// 90.02.1
		ИзменитьРеквизит(Строка81, ПолучитьСубконтоУслуги81(Connector), "Субконто", Изменился);                                 // Выполнение работ по РИ
									
	Иначе	
			
		Для Каждого Строка81 Из ОбъектБух.Товары Цикл
			
			ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.ТоварыНаСкладах ,			 	"СчетУчета", 				Изменился);	// 41.01
			ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД , 				"СчетДоходов", 				Изменился);	// 90.01.2
			//Если Строка.ЭтоРемонт Тогда
			//	ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.ОсновноеПроизводство , 	"СчетРасходов", 			Изменился);	// 20.01
			//	ИзменитьРеквизит(Строка81, ПолучитьСубконтоУслуги81(Connector) ,						"Субконто", 				Изменился);	// Выполнение работ по РИ
			//Иначе
				ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД , 	"СчетРасходов", 			Изменился);	// 90.02.1
				ИзменитьРеквизит(Строка81, СубконтоТовар81 ,												"Субконто", 				Изменился);	// Товар
			//КонецЕсли;
			
			ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.Продажи_НДС , 				"СчетУчетаНДСПоРеализации", Изменился);	// 90.03
		КонецЦикла;
			
		ПеревестиУслугиИзТоваров(Connector, ОбъектБух.Товары, ОбъектБух.Услуги, Изменился);КонецЕсли;
		
	Если СтруктураОбъект.ЭтоРемонт Тогда
			
		УдалитьУслугиИзТоваров(Connector, ОбъектБух.Товары);

		Если ПолучитьДокументТребованиеНакладная(Connector, СтруктураОбъект, ОбъектБух) = Неопределено Тогда
			Возврат Неопределено; КонецЕсли;
			
		ОбъектБух.Товары.Очистить();КонецЕсли;
	
	Если Изменился Тогда // особый случай
		
		Если Не ОбработатьПродажуТулсаИПокупкуИнструмента(СтруктураОбъект, ОбъектБух, СтруктураОбъект.ПометкаУдаления, СтруктураОбъект.Проведен, Connector, ПеренесенныеОбъекты, СтруктураПеременных) Тогда
			Возврат Неопределено; КонецЕсли;
		СсылкаТекущейРеализацииБух = ЗаписатьДокументБух(ОбъектБух, СтруктураОбъект.ПометкаУдаления, СтруктураОбъект.Проведен, Connector);
	Иначе
		СсылкаТекущейРеализацииБух = ОбъектБух.Ссылка;КонецЕсли;
	
	Если СсылкаТекущейРеализацииБух = Неопределено Тогда Возврат Неопределено; КонецЕсли;
	
	ПеренесенныеОбъекты.Вставить(СсылкаНаОбъект, СсылкаТекущейРеализацииБух);
	
	// Перенесем счет фактуру полученную
	
	Если Получить_ДокументСчетФактураВыданныйИзРеализации(Connector, СтруктураОбъект, ПеренесенныеОбъекты, СтруктураПеременных) = Неопределено Тогда
		Возврат Неопределено; КонецЕсли;
	
	
	Возврат СсылкаТекущейРеализацииБух;
	
КонецФункции

Функция ПолучитьРазукомлектациюИзРеализацииПереданныхТоваров(Connector, СсылкаНаОбъект, СтруктураОбъект, ПеренесенныеОбъекты, СтруктураПеременных)
	
	МассивТоваров = ИнтеграцияСБухгалтериейСервер.ПолучитьМассивТоваровДляКомплектаций(СсылкаНаОбъект);
	
	// на каждую замену делаем документ комплектация с товарами, которые продали вместо него
	Для Каждого СтрокаТаблица ИЗ МассивТоваров Цикл
		Если НЕ СтрокаТаблица.НоменклатураЗамена.Пустая() Тогда
		
			НоменклатураЗамена81 = ПолучитьОбъектВБухгалтерии(СтрокаТаблица.НоменклатураЗамена, Connector, ПеренесенныеОбъекты); 
			Если НоменклатураЗамена81 = Неопределено Тогда Продолжить; КонецЕсли;
			
			ДокРазукомплектацияБух = ПолучитьОбъектБухПоГуиду(Connector, СсылкаНаОбъект, Connector.Документы.КомплектацияНоменклатуры,,Истина);
			Если ДокРазукомплектацияБух = Неопределено Тогда Возврат Неопределено; КонецЕсли;
			Изменился 	= Ложь;
			ДокРазукомплектацияБух.Дата = СтруктураОбъект.Дата;
			ДокРазукомплектацияБух.ВидОперации 	= Connector.Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация;
			ДокРазукомплектацияБух.Склад		= ПолучитьОбъектВБухгалтерии(СтруктураОбъект.Склад, Connector, ПеренесенныеОбъекты);
			ДокРазукомплектацияБух.Организация 	= ПолучитьОбъектВБухгалтерии(СтруктураОбъект.Организация, Connector, ПеренесенныеОбъекты);
			ДокРазукомплектацияБух.Номенклатура =  НоменклатураЗамена81;
			ДокРазукомплектацияБух.Количество	=  СтрокаТаблица.Количество;
			
			ИзменитьРеквизит(ДокРазукомплектацияБух, Connector.ПланыСчетов.Хозрасчетный.ТоварыНаСкладах ,	"СчетУчета", 	Изменился);	// 41.01
			ИзменитьРеквизит(ДокРазукомплектацияБух, Connector.ПланыСчетов.Хозрасчетный.Продажи_НДС ,	"СчетСписанияНДС", 	Изменился);
			
			ДокРазукомплектацияБух.НДСвСтоимостиТоваров = Connector.Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
			
			СтрокиКомплектующих = ИнтеграцияСБухгалтериейСервер.ПолучитьМассивКомплектующихДляКомплектации(СсылкаНаОбъект, СтрокаТаблица.НоменклатураЗамена);
			
			Товары81 = ДокРазукомплектацияБух.Комплектующие;
		    Товары81.Очистить();
			
			Для Каждого Строка ИЗ СтрокиКомплектующих Цикл
				
				Номенклатура81 = ПолучитьОбъектВБухгалтерии(Строка.Номенклатура, Connector, ПеренесенныеОбъекты); 

				Если Номенклатура81 <> Неопределено Тогда
					
					НовСтрока = Товары81.Добавить();
					НовСтрока.Номенклатура 	= Номенклатура81;
					НовСтрока.Количество 	= Строка.Количество;
					НовСтрока.СчетУчета 	= Connector.ПланыСчетов.Хозрасчетный.ТоварыНаСкладах; // 41.01

				КонецЕсли;			
			КонецЦикла;
			СсылкаРазукомплектация = ЗаписатьДокументБух(ДокРазукомплектацияБух, СтруктураОбъект.ПометкаУдаления, СтруктураОбъект.Проведен, Connector);
			Если СсылкаРазукомплектация = Неопределено Тогда Возврат Неопределено; КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
		
	Возврат Истина;
	
				
КонецФункции

Функция Получить_ДокументРеализацияПереданныхТоваров(Connector, СсылкаНаОбъект, ПеренесенныеОбъекты)
	
	ОбъектБух = ПолучитьОбъектБухПоГуиду(Connector, СсылкаНаОбъект, Connector.Документы.РеализацияТоваровУслуг,,Истина);
	Если ОбъектБух = Неопределено Тогда Возврат Неопределено; КонецЕсли;
	
	СтруктураПеременных		= ИнтеграцияСБухгалтериейСервер.ПолучитьСтруктуруПеременных();
	СубконтоТовар81 		= ПолучитьСубконтоТовары81(Connector);
	
	СтруктураОбъект = ИнтеграцияСБухгалтериейСервер.ВычислитьОбъектПоЗапросу("
	
	|ВЫБРАТЬ 
	|	Ссылка,
	|	ПометкаУдаления,
	|	Проведен,
	|	ВЫБОР КОГДА ВходящийНомер = """" ТОГДА Номер ИНАЧЕ ВходящийНомер КОНЕЦ Номер, 
	|	Дата,
	|	Организация,
	|	Организация.УчитыватьНДС УчитыватьНДС,
	|	ВЫБОР КОГДА Партнер.ЭтоКонтрагентБухгалтерии ТОГДА Партнер ИНАЧЕ Контрагент КОНЕЦ Контрагент,
	|	ВЫБОР КОГДА Партнер.ЭтоКонтрагентБухгалтерии ТОГДА Контрагент ИНАЧЕ НЕОПРЕДЕЛЕНО КОНЕЦ ДоговорКонтрагента,
	|	Склад,
	|	ТипЦен,
	|	Валюта 			КАК ВалютаДокумента,
	|	Сумма СуммаДокумента,
	|	СуммаВключаетНДС,
	|	ВЫБОР КОГДА Заказ Ссылка Документ.ЗаказНаряд ТОГДА
	|		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ	ЭтоРемонт,
	|	ВЫБОР КОГДА Заказ Ссылка Документ.ЗаказНаряд ТОГДА
	|		Заказ.Услуга
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ			Услуга,
	|	Комментарий,
	|	Товары.(
	|		Номенклатура,
	|		Количество,
	|		1 Коэффициент,
	|		Цена,
	|		Сумма,
	|		СтавкаНДС,
	|		СуммаНДС
	|			) КАК Товары
	|ИЗ
	|	Документ.РеализацияПереданныхТоваров
	|ГДЕ
	|	Ссылка = &Ссылка
	|", Новый Структура("Ссылка", СсылкаНаОбъект));
	
	Изменился = Ложь;
	Если Не ЗаполнитьОбъектПоСтрокеЗапроса(Connector, ОбъектБух, СтруктураОбъект, ПеренесенныеОбъекты, Изменился) Тогда Возврат Неопределено; КонецЕсли;
	ОбъектБух.Товары.Свернуть("Номенклатура, Цена, СтавкаНДС, Коэффициент", "Количество, Сумма, СуммаНДС");	
	// Операция
		
	ИзменитьРеквизит(ОбъектБух, Connector.Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия, "ВидОперации", Изменился);
		
	// Валюты
		
	ИзменитьРеквизит(ОбъектБух, 1, "КратностьВзаиморасчетов", 	Изменился);
	ИзменитьРеквизит(ОбъектБух, 1, "КурсВзаиморасчетов", 		Изменился);
		
	// Установим договор, возмем первый попавшийся
		
	ВалютаПоУмолчанию81 = ПолучитьОбъектВБухгалтерии(СтруктураПеременных.ВалютаВзаиморасчетов, Connector,ПеренесенныеОбъекты);
	Если ВалютаПоУмолчанию81 = Неопределено Тогда Возврат Неопределено; КонецЕсли;		 
		
	СтруктураДоговора = Новый Структура("ВалютаВзаиморасчетов, ВидДоговора",
											ВалютаПоУмолчанию81,
											Connector.Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
												
	СтруктураДоп = Новый Структура("ТипЦен", ОбъектБух.ТипЦен);
		
	Договор81 = ПолучитьДоговор81ИзОрганизации(Connector, СтруктураОбъект.Контрагент, СтруктураОбъект.ДоговорКонтрагента, ОбъектБух.Организация, ПеренесенныеОбъекты, Истина, СтруктураДоговора, СтруктураДоп);
	Если Договор81 = Неопределено Тогда Возврат Неопределено; КонецЕсли;
		
	ИзменитьРеквизит(ОбъектБух, Договор81, "ДоговорКонтрагента", Изменился);
		
	// Зачет авансов
		
	ИзменитьРеквизит(ОбъектБух, Connector.Перечисления.СпособыЗачетаАвансов.Автоматически , "СпособЗачетаАвансов", Изменился);
		
	// Флаги
		
	ИзменитьРеквизит(ОбъектБух, Истина , 							"УчитыватьНДС", 		Изменился);
	ИзменитьРеквизит(ОбъектБух, СтруктураОбъект.СуммаВключаетНДС , 	"СуммаВключаетНДС", 	Изменился);
		
	// Счета
		
	ИзменитьРеквизит(ОбъектБух, Connector.ПланыСчетов.Хозрасчетный.РасчетыСПокупателями , 			"СчетУчетаРасчетовСКонтрагентом", 	Изменился);	// 62.01
	ИзменитьРеквизит(ОбъектБух, Connector.ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным , 	"СчетУчетаРасчетовПоАвансам", 		Изменился);	// 62.02
		
			
	Для Каждого Строка81 Из ОбъектБух.Товары Цикл
			
		ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.ТоварыНаСкладах ,			 	"СчетУчета", 				Изменился);	// 41.01
		ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД , 				"СчетДоходов", 				Изменился);	// 90.01.2
		ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД , 	"СчетРасходов", 			Изменился);	// 90.02.1
		ИзменитьРеквизит(Строка81, СубконтоТовар81 ,												"Субконто", 				Изменился);	// Товар
		
		ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.Продажи_НДС , 				"СчетУчетаНДСПоРеализации", Изменился);	// 90.03
	КонецЦикла;
			
	ПеревестиУслугиИзТоваров(Connector, ОбъектБух.Товары, ОбъектБух.Услуги, Изменился);
			
	Если Изменился Тогда // особый случай
		
		Если Не ОбработатьПродажуТулсаИПокупкуИнструмента(СтруктураОбъект, ОбъектБух, СтруктураОбъект.ПометкаУдаления, СтруктураОбъект.Проведен, Connector, ПеренесенныеОбъекты, СтруктураПеременных) Тогда
			Возврат Неопределено; КонецЕсли;
		СсылкаТекущейРеализацииБух = ЗаписатьДокументБух(ОбъектБух, СтруктураОбъект.ПометкаУдаления, СтруктураОбъект.Проведен, Connector);
	Иначе
		СсылкаТекущейРеализацииБух = ОбъектБух.Ссылка;КонецЕсли;
	
	Если СсылкаТекущейРеализацииБух = Неопределено Тогда Возврат Неопределено; КонецЕсли;
	
	ПеренесенныеОбъекты.Вставить(СсылкаНаОбъект, СсылкаТекущейРеализацииБух);
	
	// Перенесем счет фактуру полученную
	
	Если Получить_ДокументСчетФактураВыданныйИзРеализации(Connector, СтруктураОбъект, ПеренесенныеОбъекты, СтруктураПеременных) = Неопределено Тогда
		Возврат Неопределено; КонецЕсли;
	
	// Перенесем комплектацию если нужно
	Если  ИнтеграцияСБухгалтериейСервер.НужноПеренестиКомплектацию(СсылкаНаОбъект) Тогда 
	
		Если ПолучитьРазукомлектациюИзРеализацииПереданныхТоваров(Connector, СсылкаНаОбъект, СтруктураОбъект, ПеренесенныеОбъекты, СтруктураПеременных) = Неопределено Тогда 
			Возврат Неопределено; КонецЕсли;
		
	КонецЕсли;	
	
	
	Возврат СсылкаТекущейРеализацииБух;
	
КонецФункции

Функция Получить_ДокументВозвратОтПокупателя(Connector, СсылкаНаОбъект, ПеренесенныеОбъекты)
	
	ОбъектБух = ПолучитьОбъектБухПоГуиду(Connector, СсылкаНаОбъект, Connector.Документы.ВозвратТоваровОтПокупателя ,,Истина);
	Если ОбъектБух = Неопределено Тогда Возврат Неопределено; КонецЕсли;
	
	СтруктураОбъект = ИнтеграцияСБухгалтериейСервер.ВычислитьОбъектПоЗапросу("
	|ВЫБРАТЬ 
	|	ПометкаУдаления,
	|	Проведен,
	|	Номер, 
	|	Дата,
	|	Организация,
	|	ВЫБОР КОГДА Партнер.ЭтоКонтрагентБухгалтерии ТОГДА Партнер ИНАЧЕ Контрагент КОНЕЦ Контрагент,
	|	ВЫБОР КОГДА Партнер.ЭтоКонтрагентБухгалтерии ТОГДА Контрагент ИНАЧЕ НЕОПРЕДЕЛЕНО КОНЕЦ ДоговорКонтрагента,
 	|	Склад,
	|	ТипЦен,
	//|	ДокументОтгрузки Сделка,
	|	Валюта 			КАК ВалютаДокумента,
	|	Сумма,
	|	СуммаВключаетНДС,
	|	Комментарий,
	|	Товары.(
	|		Номенклатура,
	|		1 КАК Себестоимость,
	|		Количество,
	|		Цена,
	|		Сумма,
	|		СтавкаНДС,
	|		СуммаНДС
	|			) КАК Товары
	|ИЗ
	|	Документ.ВозвратОтПокупателя
	|ГДЕ
	|	Ссылка = &Ссылка И ОтражатьВБУ
	|", Новый Структура("Ссылка", СсылкаНаОбъект));
	
	Изменился = Ложь;
	
	Если Не ЗаполнитьОбъектПоСтрокеЗапроса(Connector, ОбъектБух, СтруктураОбъект, ПеренесенныеОбъекты, Изменился) Тогда
		Возврат Неопределено; КонецЕсли;
	
	СтруктураПеременных = ИнтеграцияСБухгалтериейСервер.ПолучитьСтруктуруПеременных();
		
	// Операция
		
	ИзменитьРеквизит(ОбъектБух, Connector.Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия, "ВидОперации", 	Изменился);
		
	// Валюты
		
	ИзменитьРеквизит(ОбъектБух, 1, "КратностьВзаиморасчетов", 	Изменился);
	ИзменитьРеквизит(ОбъектБух, 1, "КурсВзаиморасчетов", 		Изменился);
		
	// Установим договор, возмем первый попавшийся
		
	ВалютаПоУмолчанию81 = ПолучитьОбъектВБухгалтерии(СтруктураПеременных.ВалютаВзаиморасчетов, Connector,ПеренесенныеОбъекты);
	Если ВалютаПоУмолчанию81 = Неопределено Тогда Возврат Неопределено; КонецЕсли;		 
	
	СтруктураДоговора = Новый Структура("ВалютаВзаиморасчетов, ВидДоговора",ВалютаПоУмолчанию81, Connector.Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	СтруктураДоп = Новый Структура("ТипЦен", ОбъектБух.ТипЦен);
		
	Договор81 = ПолучитьДоговор81ИзОрганизации(Connector, СтруктураОбъект.Контрагент, СтруктураОбъект.ДоговорКонтрагента, ОбъектБух.Организация, ПеренесенныеОбъекты, Истина, СтруктураДоговора, СтруктураДоп);
	Если Договор81 = Неопределено Тогда Возврат Неопределено; КонецЕсли;
		
	ИзменитьРеквизит(ОбъектБух, Договор81, "ДоговорКонтрагента", Изменился);
		
	// Флаги
		
	ИзменитьРеквизит(ОбъектБух, Истина , "УчитыватьНДС", 		Изменился);
	ИзменитьРеквизит(ОбъектБух, Истина , "СуммаВключаетНДС", 	Изменился);
		
	// Счета
		
	ИзменитьРеквизит(ОбъектБух, Connector.ПланыСчетов.Хозрасчетный.РасчетыСПокупателями , 			"СчетУчетаРасчетовСКонтрагентом", 	Изменился);	// 62.01
	ИзменитьРеквизит(ОбъектБух, Connector.ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным , 	"СчетУчетаРасчетовПоАвансам", 		Изменился);	// 62.02
		
	Для Каждого Строка81 Из ОбъектБух.Товары Цикл
			
		ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.ТоварыНаСкладах ,			 	"СчетУчета", 				Изменился);	// 41.01
		ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД , 				"СчетДоходов", 				Изменился);	// 90.01.2
		ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД , 	"СчетРасходов", 			Изменился);	// 90.02.1
		ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.Продажи_НДС , 				"СчетУчетаНДСПоРеализации", Изменился);	// 90.03
 		КонецЦикла;
	
	Если Изменился Тогда 	Возврат ЗаписатьДокументБух(ОбъектБух, СтруктураОбъект.ПометкаУдаления, СтруктураОбъект.Проведен, Connector);
	Иначе					Возврат ОбъектБух.Ссылка; КонецЕсли;
	
КонецФункции


Функция ОбработатьПродажуТулсаИПокупкуИнструмента(СтруктураТекОбъект, ДокументБух, ПометкаУдаления, Проведен, Connector, ПеренесенныеОбъекты, СтруктураПеременных)
	
	// Если есть реализация и в ней есть товары которые удовлятворяют выбранной номенклатурной группе
	// тогда мы такой товар купим у своей организации с разницой в 5%
	// Поступление будет иметь точно такойже гуид как и реализация
	
	// Проверим чтобы док был не раньше той даты
	
	ДатаНачалаПереноса = '20111001';
	
	Если СтруктураТекОбъект.Дата < ДатаНачалаПереноса Тогда Возврат Истина; КонецЕсли;
	
	НомерБезТрехПервыхСимволов = Прав(ДокументБух.Номер, СтрДлина(ДокументБух.Номер) - 3);
	ПрефиксРеализации 	= "ТР-";
	ПрефиксПоступления 	= "ТП-";
	
	УвеличениеЦеныПроц 		= 5;
	СубконтоТовар81 		= ПолучитьСубконтоТовары81(Connector);
	
	Если СтруктураТекОбъект.Организация = СтруктураПеременных.ОрганизацияТулс Тогда
		
		// Поищем товары на соответствие
	
		ТоварыДляПокупки = ИнтеграцияСБухгалтериейСервер.ВычислитьМассивПоЗапросу("
		|ВЫБРАТЬ 	Док.Номенклатура, Док.Количество, Док.Цена, Док.СтавкаНДС
		|ИЗ			Документ.РеализацияТоваров.Товары Док
		|
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	(ВЫБРАТЬ Номенклатура ИЗ Справочник.НоменклатурныеГруппы.Состав ГДЕ Ссылка = &НоменклатурнаяГруппа)Спр
		|ПО	Док.Номенклатура = Спр.Номенклатура
		|
		|ГДЕ	Док.Ссылка = &Ссылка
		|", Новый Структура("Ссылка, НоменклатурнаяГруппа", 
						СтруктураТекОбъект.Ссылка, СтруктураПеременных.НоменклатурнаяГруппа));
						
		Если Не ТоварыДляПокупки.Количество() Тогда Возврат Истина; КонецЕсли;
		
		// Найдем поступление по данной реализации
		
		ДокПоступлениеБух = ПолучитьОбъектБухПоГуиду(Connector, СтруктураТекОбъект.Ссылка, Connector.Документы.ПоступлениеТоваровУслуг,,Истина);
		Если ДокПоступлениеБух = Неопределено Тогда Возврат Ложь; КонецЕсли;
		
		// Установим новый номер документа
		
		ДокПоступленияБухНовый = ДокПоступлениеБух.ЭтоНовый();
		Если ДокПоступленияБухНовый Тогда ДокПоступлениеБух.Номер = ПрефиксПоступления + НомерБезТрехПервыхСимволов; КонецЕсли;
		
		ДокПоступлениеБух.Товары.Очистить();
		
		ДокПоступлениеБух.ВидОперации		= Connector.Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
		ДокПоступлениеБух.Дата 				= НачалоДня(ДокументБух.Дата) - 86400;
		ДокПоступлениеБух.Организация 		= ПолучитьОбъектВБухгалтерии(СтруктураПеременных.ОрганизацияТулс, Connector, ПеренесенныеОбъекты);
		ДокПоступлениеБух.Контрагент 		= ПолучитьОбъектВБухгалтерии(СтруктураПеременных.КонтрагентИнструмент, Connector, ПеренесенныеОбъекты);
		ДокПоступлениеБух.Склад 			= ДокументБух.Склад;
		ДокПоступлениеБух.ТипЦен 			= ДокументБух.ТипЦен;
		ДокПоступлениеБух.ВалютаДокумента 	= ДокументБух.ВалютаДокумента;
		ДокПоступлениеБух.СуммаВключаетНДС 	= ДокументБух.СуммаВключаетНДС;
		
		ДокПоступлениеБух.СпособЗачетаАвансов 				= Connector.Перечисления.СпособыЗачетаАвансов.Автоматически;
		ДокПоступлениеБух.УчитыватьНДС 						= Истина;
		ДокПоступлениеБух.СчетУчетаРасчетовСКонтрагентом 	= Connector.ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками;
		ДокПоступлениеБух.СчетУчетаРасчетовПоАвансам 		= Connector.ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным ;
		СчетУчета 											= Connector.ПланыСчетов.Хозрасчетный.ТоварыНаСкладах;
		НДСпоПриобретеннымМПЗ 								= Connector.ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ;
		
		ДокПоступлениеБух.Комментарий = ""; // Настя попросила убрать -  "Автоматическое поступление по нашему импорту (от реализации №" + текОбъект.Номер + ")";
		
		// Получим договор и валюту
		
		ВалютаПоУмолчанию81 = ПолучитьОбъектВБухгалтерии(СтруктураПеременных.ВалютаВзаиморасчетов, Connector, ПеренесенныеОбъекты);
		Если ВалютаПоУмолчанию81 = Неопределено Тогда Возврат Ложь; КонецЕсли;		 
		
		СтруктураДоговора 	= Новый Структура("ВалютаВзаиморасчетов, ВидДоговора", ВалютаПоУмолчанию81, Connector.Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		СтруктураДоп 		= Новый Структура("ТипЦен", ДокументБух.ТипЦен);
		Договор81 = ПолучитьДоговор81ИзОрганизации(Connector, СтруктураПеременных.КонтрагентИнструмент,, ДокПоступлениеБух.Организация, ПеренесенныеОбъекты, Истина, СтруктураДоговора, СтруктураДоп);
		Если Договор81 = Неопределено Тогда Возврат Ложь; КонецЕсли;
		
		ДокПоступлениеБух.ДоговорКонтрагента = Договор81;
		
		СоотвНоменклатуры = Новый Соответствие;
		
		// Получим остатки товара в бухгалтерии, чтобы не покупать лишний
		
		МассНоменклатуры81 = Connector.NewObject("Массив");
		Для Каждого СтрокаТовараДляПокупки Из ТоварыДляПокупки Цикл Тов81 = ПолучитьОбъектВБухгалтерии(СтрокаТовараДляПокупки.Номенклатура, Connector, ПеренесенныеОбъекты); МассНоменклатуры81.Добавить(Тов81); СоотвНоменклатуры.Вставить(СтрокаТовараДляПокупки.Номенклатура, Тов81); КонецЦикла;
		
		Выборка81 = COMФункцииДиалогов.ПолучитьВыполнениеЗапроса81(Connector, "
			|ВЫБРАТЬ 	Субконто1 Номенклатура, КоличествоОстатокДт Количество
			|ИЗ			РегистрБухгалтерии.Хозрасчетный.Остатки(
			|								&Дата,
			|								Счет = &Счет41_01, ,
			|								Организация = &Организация И
			|								Субконто1 В(&МассивНоменклатуры))
			|",,
					Новый Структура("Организация, Дата, Счет41_01, МассивНоменклатуры", 
										ДокПоступлениеБух.Организация,
										НачалоДня(ДокПоступлениеБух.Дата) - 1,
										Connector.ПланыСчетов.Хозрасчетный.ТоварыНаСкладах, 
										МассНоменклатуры81));
		Если Выборка81 = Неопределено Тогда Возврат Ложь; КонецЕсли;
		ОстаткиТовара81 = Выборка81.Выгрузить();
		
		// Заполним товарами
		
		Для КАждого СтрокаТовараДляПокупки Из ТоварыДляПокупки Цикл
			
			// Определим сколько уже есть на складе
			Ном81 = СоотвНоменклатуры[СтрокаТовараДляПокупки.Номенклатура];
			Стр81 = ОстаткиТовара81.Найти(Ном81, "Номенклатура");
			Ост81 = ?(Стр81 = Неопределено Или Стр81.Количество < 0, 0, Стр81.Количество);
			Количество = СтрокаТовараДляПокупки.Количество - Ост81;
			Если Количество > 0 Тогда
			
				НовСтрока = ДокПоступлениеБух.Товары.Добавить();
				НовСтрока.Номенклатура  = Ном81;
				НовСтрока.СтавкаНДС  	= ПолучитьОбъектВБухгалтерии(СтрокаТовараДляПокупки.СтавкаНДС, Connector, ПеренесенныеОбъекты);
				НовСтрока.Количество  	= СтрокаТовараДляПокупки.Количество - Ост81;
				НовСтрока.СчетУчета 	= СчетУчета;
				НовСтрока.Цена			= СтрокаТовараДляПокупки.Цена * 100 / (100 + УвеличениеЦеныПроц);
				НовСтрока.СчетУчетаНДС 	= НДСпоПриобретеннымМПЗ;
				
				Connector.ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НовСтрока, ДокПоступлениеБух);
				Connector.ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НовСтрока, ДокПоступлениеБух); КонецЕсли; КонецЦикла;
		
		ТоварыДляПокупки = ДокПоступлениеБух.Товары.Выгрузить();
		
		// Запишем поступление
		
		Если Не ДокПоступленияБухНовый Или ДокПоступлениеБух.Товары.Количество() Тогда
		
			Если ЗаписатьДокументБух(ДокПоступлениеБух, ПометкаУдаления, Проведен, Connector) = Неопределено Тогда
				Возврат Ложь; КонецЕсли; КонецЕсли;
		
		// Определим ГУИД (ЭТО ВАЖНО!) меняем восем символов слева на восем символов справа
		
		колСимволов		= 8;
		СсылкаСтрока 	= Строка(СтруктураТекОбъект.Ссылка.УникальныйИдентификатор());
		НовСсылкаСтрока = Прав(СсылкаСтрока, колСимволов) 
							+ Сред(СсылкаСтрока, колСимволов + 1, 36 - колСимволов * 2)
							+ Лев(СсылкаСтрока, колСимволов);
							
		// Найдем реализацию по данному поступлению
		
		ДокРелизацииБух = ПолучитьОбъектБухПоГуиду(Connector, НовСсылкаСтрока, Connector.Документы.РеализацияТоваровУслуг,,Истина);
		Если ДокРелизацииБух = Неопределено Тогда Возврат Ложь; КонецЕсли;
		
		// Установим новый номер документа
		
		ДокРелизацииБухНовый = ДокРелизацииБух.ЭтоНовый();
		Если ДокРелизацииБухНовый Тогда ДокРелизацииБух.Номер = ПрефиксРеализации + НомерБезТрехПервыхСимволов; КонецЕсли;
		
		ДокРелизацииБух.Товары.Очистить();
		
		ДокРелизацииБух.ВидОперации		= Connector.Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
		ДокРелизацииБух.Дата 			= НачалоДня(ДокументБух.Дата) - 86200;
		
		ДокРелизацииБух.Организация 	= ПолучитьОбъектВБухгалтерии(СтруктураПеременных.ОрганизацияИнструмент, Connector, ПеренесенныеОбъекты);
		ДокРелизацииБух.Контрагент 		= ПолучитьОбъектВБухгалтерии(СтруктураПеременных.КонтрагентТулс, Connector, ПеренесенныеОбъекты);
		
		ДокРелизацииБух.Склад	 			= ДокументБух.Склад;
		ДокРелизацииБух.ТипЦен 				= ДокументБух.ТипЦен;
		ДокРелизацииБух.ВалютаДокумента 	= ДокументБух.ВалютаДокумента;
		ДокРелизацииБух.СуммаВключаетНДС 	= ДокументБух.СуммаВключаетНДС;
		
		ДокРелизацииБух.СпособЗачетаАвансов 			= Connector.Перечисления.СпособыЗачетаАвансов.Автоматически;
		ДокРелизацииБух.УчитыватьНДС 					= Истина;
		ДокРелизацииБух.СчетУчетаРасчетовСКонтрагентом 	= Connector.ПланыСчетов.Хозрасчетный.РасчетыСПокупателями;
		ДокРелизацииБух.СчетУчетаРасчетовПоАвансам	 	= Connector.ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным;
				
		ДокРелизацииБух.Комментарий = ""; // Настя попросила убрать -  "Автоматическое реализация по нашему импорту (от реализации №" + текОбъект.Номер + ")";
		
		СтруктураДоговора = Новый Структура("ВалютаВзаиморасчетов, ВидДоговора", ВалютаПоУмолчанию81, Connector.Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		СтруктураДоп = Новый Структура("ТипЦен", ДокументБух.ТипЦен);
		Договор81 = ПолучитьДоговор81ИзОрганизации(Connector, СтруктураПеременных.КонтрагентТулс,,ДокРелизацииБух.Организация, ПеренесенныеОбъекты, Истина, СтруктураДоговора, СтруктураДоп);
		Если Договор81 = Неопределено Тогда Возврат Ложь; КонецЕсли;
		
		ДокРелизацииБух.ДоговорКонтрагента = Договор81;
		
		// Заполним товарами
		
		//ТоварыДляПокупки.Сбросить();
		//Пока ТоварыДляПокупки.Следующий() Цикл
		Для Каждого СтрокаПостБух Из ТоварыДляПокупки Цикл
			
			НовСтрока = ДокРелизацииБух.Товары.Добавить();
			//НовСтрока.Номенклатура  = ПолучитьОбъектВБухгалтерии(ТоварыДляПокупки.Номенклатура, Connector,,, ПеренесенныеОбъекты, стрОшибки);
			НовСтрока.Номенклатура  = СтрокаПостБух.Номенклатура;
			
			//НовСтрока.СтавкаНДС  	= ПолучитьОбъектВБухгалтерии(ТоварыДляПокупки.СтавкаНДС, Connector,,, ПеренесенныеОбъекты, стрОшибки);
			НовСтрока.СтавкаНДС  	= СтрокаПостБух.СтавкаНДС;
			
			//НовСтрока.Количество  	= ТоварыДляПокупки.Количество;
			НовСтрока.Количество  	= СтрокаПостБух.Количество;
			//НовСтрока.Цена			= ТоварыДляПокупки.Цена * 100 / (100 + УвиличениеЦеныПроц);
			НовСтрока.Цена			= СтрокаПостБух.Цена;
			
			НовСтрока.СчетУчета 	= Connector.ПланыСчетов.Хозрасчетный.ТоварыНаСкладах;
			НовСтрока.СчетДоходов 	= Connector.ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД;
			НовСтрока.СчетРасходов 	= Connector.ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД;
			НовСтрока.СчетУчетаНДСПоРеализации 	= Connector.ПланыСчетов.Хозрасчетный.Продажи_НДС;
			НовСтрока.Субконто 		= СубконтоТовар81;
			
			Connector.ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НовСтрока, ДокРелизацииБух);
			Connector.ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НовСтрока, ДокРелизацииБух); КонецЦикла;
		
		// Запишем реализацию
		
		Если Не ДокРелизацииБухНовый Или ДокРелизацииБух.Товары.Количество() Тогда
			Возврат ЗаписатьДокументБух(ДокРелизацииБух, ПометкаУдаления, Проведен, Connector) <> Неопределено; КонецЕсли; КонецЕсли;	
	
	Возврат Истина;
	
КонецФункции
Функция Получить_ДокументСчетФактураВыданныйИзРеализации(Connector, СтруктураТекОбъект, ПеренесенныеОбъекты, СтруктураПеременных)
	
	// Подготовим объект счет фактуры
	СтруктураОбъект = Новый Структура("Номер, Дата, Ссылка, Организация, Контрагент, ДоговорКонтрагента, ДокументОснование, ВалютаДокумента, Сумма, Комментарий",
			СтруктураТекОбъект.Номер, СтруктураТекОбъект.Дата, СтруктураТекОбъект.Ссылка, СтруктураТекОбъект.Организация, СтруктураТекОбъект.Контрагент, СтруктураТекОбъект.ДоговорКонтрагента, СтруктураТекОбъект.Ссылка, СтруктураТекОбъект.ВалютаДокумента, СтруктураТекОбъект.СуммаДокумента, СтруктураТекОбъект.Комментарий);
			
	ОбъектБух = ПолучитьОбъектБухПоГуиду(Connector, СтруктураОбъект.Ссылка, Connector.Документы.СчетФактураВыданный ,,Истина);
	Если ОбъектБух = Неопределено Тогда Возврат Неопределено; КонецЕсли;
	
	
	Изменился = Ложь;
	
	Если Не ЗаполнитьОбъектПоСтрокеЗапроса(Connector, ОбъектБух, СтруктураОбъект, ПеренесенныеОбъекты, Изменился) Тогда 
		Возврат Неопределено; КонецЕсли;
	
	// Установим договор, возмем первый попавшийся
		
	ВалютаПоУмолчанию81 = ПолучитьОбъектВБухгалтерии(СтруктураПеременных.ВалютаВзаиморасчетов, Connector, ПеренесенныеОбъекты);
	Если ВалютаПоУмолчанию81 = Неопределено Тогда Возврат Ложь; КонецЕсли;		 
		
	СтруктураДоговора = Новый Структура("ВалютаВзаиморасчетов, ВидДоговора", ВалютаПоУмолчанию81, Connector.Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	Договор81 = ПолучитьДоговор81ИзОрганизации(Connector, СтруктураОбъект.Контрагент, СтруктураОбъект.ДоговорКонтрагента, ОбъектБух.Организация, ПеренесенныеОбъекты, Истина, СтруктураДоговора);
	
	ИзменитьРеквизит(ОбъектБух, Договор81, "ДоговорКонтрагента", Изменился);
		
	ИзменитьРеквизит(ОбъектБух, "01", 							"КодВидаОперации", 		Изменился);
	ИзменитьРеквизит(ОбъектБух, Connector.Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию, "ВидСчетаФактуры",Изменился);
				
	Если 	ОбъектБух.ДокументыОснования.Количество() <> 1 Или
			ОбъектБух.ДокументыОснования.Получить(0).ДокументОснование <> ОбъектБух.ДокументОснование Тогда
				
		Изменился = Истина;
		ОбъектБух.ДокументыОснования.Очистить();
		ОбъектБух.ДокументыОснования.Добавить().ДокументОснование = ОбъектБух.ДокументОснование; КонецЕсли;
	
	Если Изменился Тогда
		Возврат ЗаписатьДокументБух(ОбъектБух, СтруктураТекОбъект.ПометкаУдаления, СтруктураТекОбъект.Проведен, Connector);
	Иначе
		Возврат ОбъектБух.Ссылка; КонецЕсли;
	
КонецФункции
Функция ПолучитьДокументТребованиеНакладная(Connector, СтруктураТекОбъект, Реализация81)
	
	ЭтоНоваяНакладная = Ложь;
	
	МенеджерБух = Connector.Документы.ТребованиеНакладная;
	СсылкаБух = МенеджерБух.ПолучитьСсылку(Connector.NewObject("UUID", Строка(СтруктураТекОбъект.Ссылка.УникальныйИдентификатор())));
	ОбъектБух = СсылкаБух.ПолучитьОбъект();
	
	Если ОбъектБух = Неопределено Тогда
		
		ОбъектБух = МенеджерБух.СоздатьДокумент();
		ОбъектБух.УстановитьСсылкуНового(СсылкаБух);
		
		ЭтоНоваяНакладная = Истина; КонецЕсли;
	
	Если ОбъектБух = Неопределено Тогда Возврат Неопределено; КонецЕсли;

	Материалы = ОбъектБух.Материалы;
	
	//если перезаписывается не новый документ и поле себестоимость нулевая (данный товар уже куплен в бухгалтерии), то такой документ в бухгалтерии не меняем

	ТоварнаяНакладнаяЗакрыта = Ложь;

	ОбъектБух.Дата 					= Реализация81.Дата;
	ОбъектБух.Организация	 		= Реализация81.Организация;
	ОбъектБух.Склад		 			= Реализация81.Склад;
	ОбъектБух.Контрагент		 	= Реализация81.Контрагент;
	ОбъектБух.СчетЗатрат 			= Connector.ПланыСчетов.Хозрасчетный.ОсновноеПроизводство; // 20.01
	ОбъектБух.ПодразделениеЗатрат 	= Connector.Справочники.ПодразделенияОрганизаций.НайтиПоКоду("000000010"); // Отдел сервиса 
	ОбъектБух.Субконто1 			= ПолучитьСубконтоУслуги81(Connector);	// Выполнение работ по РИ
	ОбъектБух.Субконто2 			= Connector.Справочники.СтатьиЗатрат.НайтиПоКоду("000000011"); // Материальные расходы
	
	УчетныеПолитики = Connector.РегистрыСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(ОбъектБух.Дата, Connector.NewObject("Structure", "Организация", ОбъектБух.Организация));				 
	Если УчетныеПолитики.Count() Тогда
		УчетнаяПолитика = УчетныеПолитики.get(0);
		Если УчетнаяПолитика.СложныйУчетНДС Тогда
	    ОбъектБух.НДСвСтоимостиТоваров = Connector.Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;  КонецЕсли;
	КонецЕсли;
	//НеИзменять
	//ВключитьВСтоимость
	//ИсключитьИзСтоимости
	
	Материалы.Очистить();
	
	Товары81 = Реализация81.Товары;	
	Для Каждого Строка81 ИЗ Товары81 Цикл
			
		НовСтрока = Материалы.Добавить();
		НовСтрока.Номенклатура	= Строка81.Номенклатура;
		НовСтрока.Количество	= Строка81.Количество;
		НовСтрока.Коэффициент	= Строка81.Коэффициент;
		НовСтрока.Себестоимость = ?(ТоварнаяНакладнаяЗакрыта, 0, Строка81.Цена);         
        НовСтрока.ОтражениеВУСН = Connector.Перечисления.ОтражениеВУСН.Принимаются;
		НовСтрока.Счет			= Connector.ПланыСчетов.Хозрасчетный.ЗапасныеЧасти; КонецЦикла; // 10.05
	
	СсылкаНакладная = ЗаписатьДокументБух(ОбъектБух, СтруктураТекОбъект.ПометкаУдаления, СтруктураТекОбъект.Проведен, Connector);
	Если СсылкаНакладная = Неопределено Тогда Возврат Неопределено; КонецЕсли;
		
	Возврат СсылкаНакладная;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Диалоги

Функция ПолучитьВедомостиНаВыплатуЗП(Connector, Организация81) Экспорт
		
	ЗапросТекст = "ВЫБРАТЬ ПЕРВЫЕ 15
		|	Ссылка,
		|	Номер,
		|	Дата
		//|	Зарплата.(ФизЛицо,
		//|	Сумма)
		|ИЗ
		|	Документ.ЗарплатаКВыплатеОрганизаций
		|ГДЕ
		|	Ссылка.Организация = &Организация
		|УПОРЯДОЧИТЬ ПО Дата Убыв
		|";
		
	Выполнение = COMФункцииДиалогов.ПолучитьВыполнениеЗапроса81(Connector,
			ЗапросТекст,, 
			Новый Структура("Организация", Организация81));
			
	Если Выполнение = Неопределено Тогда Возврат Неопределено;КонецЕсли;
		
	Выборка = Выполнение.Выбрать();
	Если Выборка.Количество() Тогда
		
		СписокВедомостей = Новый СписокЗначений;
		Пока Выборка.Следующий() Цикл СписокВедомостей.Добавить(Выборка.Номер, "№" + Выборка.Номер + " от " + Строка(Выборка.Дата)); КонецЦикла;
		Возврат СписокВедомостей; КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьДоговорыКонтрагента(Connector, Контрагент81) Экспорт
		
	ЗапросТекст = "ВЫБРАТЬ
		|	Код						Номер,
		|	ПРЕДСТАВЛЕНИЕ(Ссылка) 	Представление
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов
		|ГДЕ
		|	Ссылка.Владелец = &Контрагент И НЕ ПометкаУдаления
		|";
	стрОшибки = "";
	Выполнение = COMФункцииДиалогов.ПолучитьВыполнениеЗапроса81(Connector,
			ЗапросТекст,,
			Новый Структура("Контрагент", Контрагент81));
			
	Если Выполнение = Неопределено Тогда Возврат Неопределено; КонецЕсли;
		
	Выборка = Выполнение.Выбрать();
	Если Выборка.Количество() Тогда
		
		СписокКонтрагентов = Новый СписокЗначений;
		
		Пока Выборка.Следующий() Цикл СписокКонтрагентов.Добавить(Выборка.Номер, Выборка.Представление); КонецЦикла;
		
		Возврат СписокКонтрагентов; КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти