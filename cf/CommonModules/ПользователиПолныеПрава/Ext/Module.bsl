////////////////////////////////////////////////////////////////////////////////
// Процедуры, выполнение которых требует привилегированного режима

// Процедура, определяет пользователя, под которым запущен сеанс и пытается
// найти соответсвие ему в справочнике Пользователи. Если соответствие
// не найдено - создается новый элемент. Параметр сеанса ТекущийПользователь
// устанавливается как ссылка на найденный (созданный) элемент справочника.
//
Процедура ОпределитьТекущегоПользователя_Ст(Знач ИмяПараметра, УстановленныеПараметры) Экспорт
	
	//Если ИмяПараметра <> "ТекущийПользователь" Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//ИмяПользователя = ИмяПользователя();
	//ПолноеИмяПользователя = ПолноеИмяПользователя();
	//
	//Если НЕ ПроверитьНеоднозначностьИмениПользователя(ИмяПользователя) Тогда
	//	ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	//							НСтр("ru = 'В информационной базе уже существует пользователь с таким именем: %1 (совпадают первые %2 символов)'"),
	//							ИмяПользователя,
	//							Метаданные.Справочники.Пользователи.ДлинаКода);
	//	ВызватьИсключение ТекстСообщенияОбОшибке;
	//КонецЕсли;
	//
	//Если ПустаяСтрока(ИмяПользователя) Тогда
	//	ИмяПользователя           = "<Не указан>";
	//	ПолноеИмяПользователя     = "<Не указан>";
	//Иначе
	//	Если ПустаяСтрока(ПолноеИмяПользователя) Тогда
	//		ПолноеИмяПользователя = ИмяПользователя;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//ДопустимаяДлинаИмени = Метаданные.Справочники.Пользователи.ДлинаКода;
	//Если СтрДлина(ИмяПользователя) > ДопустимаяДлинаИмени Тогда
	//	ИмяПользователя = Лев(ИмяПользователя, ДопустимаяДлинаИмени);
	//КонецЕсли;
	//
	//Запрос = Новый Запрос("
	//|ВЫБРАТЬ ПЕРВЫЕ 1
	//|	Ссылка КАК Ссылка
	//|ИЗ
	//|	Справочник.Пользователи
	//|ГДЕ
	//|	Код = """ + ИмяПользователя + """");
	//
	//Результат = Запрос.Выполнить();
	//
	//Если Результат.Пустой() Тогда
	//	
	//	СсылкаНового = Справочники.Пользователи.ПолучитьСсылку();
	//	ПараметрыСеанса.ТекущийПользователь = СсылкаНового;
	//	
	//	НовыйПользователь = Справочники.Пользователи.СоздатьЭлемент();
	//	НовыйПользователь.Код          = ИмяПользователя;
	//	НовыйПользователь.Наименование = ПолноеИмяПользователя;
	//	НовыйПользователь.УстановитьСсылкуНового(СсылкаНового);
	//	
	//	Попытка
	//		НовыйПользователь.Записать();
	//	Исключение
	//		ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	//		                                     НСтр("ru = 'Пользователь: %1 не был найден в справочнике пользователей. Возникла ошибка при добавлении пользователя в справочник.
	//		                                                |%2'"),
	//		                                     ИмяПользователя, ОписаниеОшибки() );
	//		ВызватьИсключение ТекстСообщенияОбОшибке;
	//	КонецПопытки;
	//	
	//Иначе
	//	Выборка = Результат.Выбрать();
	//	Выборка.Следующий();
	//	ПараметрыСеанса.ТекущийПользователь = Выборка.Ссылка;
	//КонецЕсли;
	//
	//// silber {
	//Если ТипЗнч(УстановленныеПараметры) <> Тип("Структура") Тогда
	//	УстановленныеПараметры.Вставить(ИмяПараметра, ПараметрыСеанса.ТекущийПользователь);
	//КонецЕсли;
	//// } silber
	//
	////УстановленныеПараметры.Добавить(ИмяПараметра);
	
КонецПроцедуры

// Функция проверяет, что имя пользователя в пределах первых пятидесяти
// символов является уникальным. Пятьдесят символов - длина кода справочника
// Пользователи.
// Параметры:
// ИмяПользователя - строка - проверяемое имя пользователя
// Возвращаемое значение
// Истина - имя уникально
// Ложь   - имя неоднозначно
//
Функция ПроверитьНеоднозначностьИмениПользователя(знач ИмяПользователя)
	
	ТаблицаПользователей = Новый ТаблицаЗначений;
	ТаблицаПользователей.Колонки.Добавить("Имя");
	
	Для Каждого ПользовательИБ Из ПользователиИнформационнойБазы.ПолучитьПользователей() Цикл
		НоваяСтрока = ТаблицаПользователей.Добавить();
		НоваяСтрока.Имя = Лев(ПользовательИБ.Имя, Метаданные.Справочники.Пользователи.ДлинаКода);
	КонецЦикла;
	
	КоличествоСтрокДо = ТаблицаПользователей.Количество();
	
	ТаблицаПользователей.Свернуть("Имя");
	
	Если КоличествоСтрокДо = 0 ИЛИ КоличествоСтрокДо = ТаблицаПользователей.Количество() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ОбновлениеИБУспешно(стрОшибки) Экспорт Возврат ПолныеПрава.ОбновлениеИБУспешно(стрОшибки) КонецФункции
