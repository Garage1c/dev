
Процедура ОповещенияПоПочте() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ Письмо ИЗ РегистрСведений.БуферПочтыДляОтправки ГДЕ ДатаОшибки = &ПустаяДата");
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЗаписьЖурналаРегистрации(
				"Письма.Сканирование писем", 
				УровеньЖурналаРегистрации.Информация,
				Метаданные.Документы.Письмо,
				,
				"Письма для отправки в количестве " + Выборка.Количество() + " шт.");
	
	Пока Выборка.Следующий() Цикл
		
		Рег = РегистрыСведений.БуферПочтыДляОтправки.СоздатьМенеджерЗаписи();
		Рег.Письмо = Выборка.Письмо;
		
		стрОшибки = "";
		Если Документы.Письмо.ПослатьПисьмо_Нов(Выборка.Письмо, стрОшибки) Тогда
			
			ЗаписьЖурналаРегистрации(
				"Письма.Отправление письма", 
				УровеньЖурналаРегистрации.Информация,
				Метаданные.Документы.Письмо,
				Выборка.Письмо,
				"Письмо успешно отправлено");
				
			Рег.Удалить();
				
		Иначе
			
			ЗаписьЖурналаРегистрации(
				"Письма.Отправление письма", 
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Документы.Письмо,
				Выборка.Письмо,
				"Письмо отправить не удалось:
					|" + стрОшибки);
					
			Рег.ДатаОшибки 	= ТекущаяДата();
			Рег.Ошибка 		= стрОшибки;
			Рег.Записать();
				
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//POSTMAN
Процедура PostmanВыполнитьРассылку()Экспорт
//получаем список элементов на уровне пакетов файлов для рассылки
//для каждого пакета проверяем необходимость отправки
//если нужно отправлять, собираем пакет (формируем список отчетов собираем в один excel файл) и отправляем
	МЗ = РегистрыСведений.ЛогPostman.СоздатьМенеджерЗаписи();
	МЗ.Дата = ТекущаяДата();
	МЗ.Описание = "Начало выполнения рассылки";
	МЗ.Записать();
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиPostman.Ссылка
		|ИЗ
		|	Справочник.НастройкиPostman КАК НастройкиPostman
		|ГДЕ
		|	НЕ НастройкиPostman.ПометкаУдаления
		|	И НастройкиPostman.ЭтоГруппа
		|	И НЕ НастройкиPostman.ОтправлятьОчетыСамостоятельно
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НастройкиPostman.Ссылка
		|ИЗ
		|	Справочник.НастройкиPostman КАК НастройкиPostman
		|ГДЕ
		|	НЕ НастройкиPostman.Родитель.ПометкаУдаления
		|	И НЕ НастройкиPostman.ПометкаУдаления
		|	И НастройкиPostman.Родитель.ОтправлятьОчетыСамостоятельно
		|	И НЕ НастройкиPostman.Заблокирован
		|	И НастройкиPostman.Использование
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НастройкиPostman.Ссылка
		|ИЗ
		|	Справочник.НастройкиPostman КАК НастройкиPostman
		|ГДЕ
		|	НЕ НастройкиPostman.ПометкаУдаления
		|	И НастройкиPostman.Родитель = ЗНАЧЕНИЕ(Справочник.НастройкиPostman.ПустаяСсылка)
		|	И НастройкиPostman.Использование
		|	И НЕ НастройкиPostman.Заблокирован";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если 	РезультатЗапроса.Пустой()	 Тогда
		Возврат
	КонецЕсли;
	//ТЗОшибок
	ТЗОшибок = Новый ТаблицаЗначений;
	ТЗОшибок.Колонки.Добавить("Дата");
	ТЗОшибок.Колонки.Добавить("Источник");
	ТЗОшибок.Колонки.Добавить("Описание");
	ТЗОшибок.Колонки.Добавить("ОповеститьАдминистратора");
	//ТЗКорзинаПисем
	ТЗКорзинаПисем = Новый ТаблицаЗначений;
	ТЗКорзинаПисем.Колонки.Добавить("Email");
	ТЗКорзинаПисем.Колонки.Добавить("ПредставлениеВложения");
	ТЗКорзинаПисем.Колонки.Добавить("Вложение");

	
	//Excel
	Excel = Новый COMОбъект("Excel.Application");    
	Excel.Visible = 0;    
	Excel.DisplayAlerts = 0;
	//Свойства Фонового задания
    СтрокаФЗ = PostmanПолучитьСвойстваПоследнегоВыполненногоФоновогоЗадания();

	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Расписание = ЗначениеИзСтрокиВнутр(Выборка.Ссылка.Расписание);
		
		 Если СтрокаФЗ = Неопределено ИЛИ Расписание.ТребуетсяВыполнение(, СтрокаФЗ.Начало, СтрокаФЗ.Конец) Тогда
		    Справочники.НастройкиPostman.СформироватьПакет(Выборка.Ссылка, ТЗОшибок, ТЗКорзинаПисем, Excel);	 
		 КонецЕсли;
		 
	КонецЦикла;
	
	Справочники.НастройкиPostman.ОтправитьКорзинуПисем(ТЗОшибок, ТЗКорзинаПисем);
	
	Если Excel <> Неопределено Тогда
	
		Excel.Quit();
	
	КонецЕсли;
	Если ТЗОшибок.Количество() Тогда
		МассивСтрок = ТЗОшибок.НайтиСтроки(Новый Структура("ОповеститьАдминистратора", Истина));
		//Соберем текст ошибок для отправки
		Текст = "";
		Для каждого Эл Из МассивСтрок Цикл
			Текст = Текст + Эл.Дата +"; " +Эл.Источник +"; "+ Эл.Описание + Символы.ПС;
			
			МЗ = РегистрыСведений.ЛогPostman.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МЗ,Эл);
			МЗ.Записать();
		КонецЦикла;
		
		// Адрес администратора
		
		УчетнаяЗапись = РегистрыСведений.НастройкиPostman.Получить(Новый Структура("Ключ","УчетнаяЗаписьЭлектроннойПочты")).Значение;;
	    АдресАдминистратора = РегистрыСведений.НастройкиPostman.Получить(Новый Структура("Ключ","EmailАдминистратора")).Значение;;
		
		ПараметрыПисьма = Новый Структура;
		ПараметрыПисьма.Вставить("Кому", АдресАдминистратора);
		ПараметрыПисьма.Вставить("Тема", "POSTMAN");
		ПараметрыПисьма.Вставить("Тело", Текст); 
		ЭлектроннаяПочта.ОтправитьПочтовоеСообщение(УчетнаяЗапись, ПараметрыПисьма);
		
	КонецЕсли;
	
	МЗ = РегистрыСведений.ЛогPostman.СоздатьМенеджерЗаписи();
	МЗ.Дата = ТекущаяДата();
	МЗ.Описание = "Окончание выполнения рассылки";
	МЗ.Записать();

КонецПроцедуры

Функция PostmanПолучитьСвойстваПоследнегоВыполненногоФоновогоЗадания()
	РЗ = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.PostmanРассылкаОтчетов);
	Отбор = Новый Структура("ИдентификаторРегламентногоЗадания",Строка(РЗ.УникальныйИдентификатор));
	ТаблицаСвойствФоновыхЗаданий = РегламентныеЗаданияПолныеПрава.ПолучитьТаблицуСвойствФоновыхЗаданий(Отбор);
	ТаблицаСвойствФоновыхЗаданий.Сортировать("Конец Возр");
	
	Если ТаблицаСвойствФоновыхЗаданий.Количество() = 0 Тогда
		Возврат Неопределено
	Иначе
		Возврат ТаблицаСвойствФоновыхЗаданий[ТаблицаСвойствФоновыхЗаданий.Количество()-1];
	КонецЕсли;
	
КонецФункции	


// ФОРМИРОВАНИЕ КАРТЫ ДЛЯ РОБОТОВ

Функция ПолучитьАлиесыТоваров(НачНомер, КОнНомер)
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ 
		|	РАЗЛИЧНЫЕ alies КАК loc, 0 КАК lastmod 
		|ИЗ 
		|	Справочник.Номенклатура 
		|ГДЕ
		|	alies <> """" И
		|	ВыгружатьНаСайт = ИСТИНА И 
		|	ПорядковыйНомер >= " + Формат(НачНомер,"ЧГ=") + " И 
		|	ПорядковыйНомер <= " + Формат(КОнНомер,"ЧГ="));
		
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции
Функция ПолучитьАлиесыСтаей()
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ Ссылка ПОМЕСТИТЬ ГруппыНовостей ИЗ Справочник.ИнтернетСтатьи ГДЕ ЭтоГруппа = Истина И ЭтоНовости = Истина;
		|ВЫБРАТЬ 
		|	РАЗЛИЧНЫЕ Наименование КАК loc, 0 КАК lastmod 
		|ИЗ 
		|	Справочник.ИнтернетСтатьи 
		|ГДЕ
		|	ЭтоГруппа = ЛОЖЬ И
		|	Не Родитель В(ВЫБРАТЬ Ссылка ИЗ ГруппыНовостей) И
		//|	alies <> """" И
		|	ВыгружатьНаСайт = ИСТИНА
		|");
		
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции
Функция ПолучитьАлиесыНовостей()
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ Ссылка ПОМЕСТИТЬ ГруппыНовостей ИЗ Справочник.ИнтернетСтатьи ГДЕ ЭтоГруппа = Истина И ЭтоНовости = Истина;
		|ВЫБРАТЬ 
		|	РАЗЛИЧНЫЕ Наименование КАК loc, 0 КАК lastmod 
		|ИЗ 
		|	Справочник.ИнтернетСтатьи 
		|ГДЕ
		|	ЭтоГруппа = ЛОЖЬ И
		|	Родитель В(ВЫБРАТЬ Ссылка ИЗ ГруппыНовостей) И
		//|	alies <> """" И
		|	ВыгружатьНаСайт = ИСТИНА
		|");
		
	// подготовим таблицу
	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции

Процедура ЗаписатьСтрокуURL(ЗаписьXML, loc, lastmod)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("url");
				
	ЗаписьXML.ЗаписатьНачалоЭлемента("loc");
	ЗаписьXML.ЗаписатьТекст(XMLСтрока(СтрЗаменить(loc," ","")));
	ЗаписьXML.ЗаписатьКонецЭлемента();
				
	ЗаписьXML.ЗаписатьНачалоЭлемента("lastmod");
	ЗаписьXML.ЗаписатьТекст(XMLСтрока(lastmod));
	ЗаписьXML.ЗаписатьКонецЭлемента();
			
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ВыгрузкаФайлаКартыСайтаДляРоботов() Экспорт
	
	НачалоСайта 			= "http://93.153.133.10";
	НачалоТовара 			= "/shop";
	НачалоСтатей			= "/articles";
	НачалоНовостей			= "/news";
	ДатаСайта 				= ТекущаяДата();
	ПространствоИмен		= "http://www.sitemaps.org/schemas/sitemap/0.9";
	ТоварыГрузитьПо			= 100;
	ПрефиксПространстваИмен = "ld";
	
	ИмяФайла 	= Константы.ПутьКФайлуКартыСайтаДляРоботов.Получить();
	ИмяВрФайла	= ПолучитьИмяВременногоФайла("xml");
	
	// Проверим корректность
	
	Если ПустаяСтрока(ИмяФайла) Тогда                                      
		ЗаписьЖурналаРегистрации(
				"HTTP.Отправление карты сайта роботам", 
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				"Не указано имя файла для выгрузки в константе ""ПутьКФайлуКартыСайтаДляРоботов""");
		Возврат;
	КонецЕсли;
	
	// Откроем файл для записи
		
	ЗаписьXML = Новый ЗаписьXML;
	
	Попытка
		ЗаписьXML.ОткрытьФайл(ИмяВрФайла, Новый ПараметрыЗаписиXML("windows-1251", "1.0", Истина, Ложь, Символы.Таб));
	Исключение
		стрОшибки = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации(
				"HTTP.Отправление карты сайта роботам", 
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				"Ошибка при создании файла ""ПутьКФайлуКартыСайтаДляРоботов"" 
				|" + стрОшибки);
		Возврат;
	КонецПопытки;
	
	// Начнемс
	
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("urlset");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен(ПрефиксПространстваИмен, ПространствоИмен);
	
	// СТАТЬИ
	
	Таблица = ПолучитьАлиесыСтаей();
	
	Для Каждого Строка Из Таблица Цикл
		
		ЗаписатьСтрокуURL(ЗаписьXML, НачалоСайта + НачалоСтатей + "/" + Строка.loc, Строка.lastmod)
			
	КонецЦикла;
	
	// НОВОСТИ
	
	Таблица = ПолучитьАлиесыНовостей();
		
	Для Каждого Строка Из Таблица Цикл
			
		ЗаписатьСтрокуURL(ЗаписьXML, НачалоСайта + НачалоНовостей + "/" + Строка.loc, Строка.lastmod)
				
	КонецЦикла;
	
	// ТОВАРЫ
	
	Ном 		= 1;
	КолТоваров 	= Константы.МаксимальныйПорядковыйНомер.Получить();
	
	Пока Ном < КолТоваров Цикл
	
		//ОбработкаПрерыванияПользователя();
		
		Таблица = ПолучитьАлиесыТоваров(Ном, Ном + ТоварыГрузитьПо);
		
		Для Каждого Строка Из Таблица Цикл
			ЗаписатьСтрокуURL(ЗаписьXML, НачалоСайта + НачалоТовара + "/" + НРег(Строка.loc), Строка.lastmod)
		КонецЦикла;
			
		Ном = Ном + ТоварыГрузитьПо;
		
		//Состояние("Выгрузка товаров", ном / КолТоваров * 100, "" + Ном + " из " + КолТоваров);
		
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.Закрыть();
	
	ЗаписьЖурналаРегистрации(
				"HTTP.Отправление карты сайта роботам", 
				УровеньЖурналаРегистрации.Информация,
				,
				,
				"Сформирован файл xml для роботов - " + ИмяВрФайла);
	
	// Переместим его в zip
	
	zip = Новый ЗаписьZipФайла(ИмяФайла);
	zip.Добавить(ИмяВрФайла);
	
	Попытка
		zip.Записать();
	Исключение
		стрОшибки = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации(
				"HTTP.Отправление карты сайта роботам", 
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				"Ошибка при создании архива - " + ИмяФайла + "
				|" + стрОшибки);
		Возврат;
	КонецПопытки;
	
	// Скажем что мама все ок
	
	ЗаписьЖурналаРегистрации(
				"HTTP.Отправление карты сайта роботам", 
				УровеньЖурналаРегистрации.Информация,
				,
				,
				"Сформирован файл zip для роботов - " + ИмяФайла);


	// Уберем за собой грязную посуду
	
	УдалитьФайлы(ИмяВрФайла);


КонецПроцедуры

Процедура ФормированиеСпискаДляРедиректа(ИмяФайла = Неопределено) Экспорт

	//СписокНоменклатуры.Очистить();
	
	// Переменные
	
	Если ИмяФайла = Неопределено Тогда 
		ИмяФайла = "c:\inetpub\wwwroot\redirectURL.csv"; 
	КонецЕсли;
	
	РазделительСтолбцов = ";";
	Кодировка 			= КодировкаТекста.UTF8;
	
	// Подготовим таблицу
	
	метаНом 		= Метаданные.Справочники.Номенклатура;
	ОписаниеСтроки 	= Новый ОписаниеТипов("Строка");
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("alies", ОписаниеСтроки);
	Таблица.Колонки.Добавить("СтарыйURL", ОписаниеСтроки);
	Таблица.Колонки.Добавить("ГУИД", ОписаниеСтроки);
	Таблица.Колонки.Добавить("ГУИДКатегории", ОписаниеСтроки);
	Таблица.Колонки.Добавить("СтарыйIDТовара", ОписаниеСтроки);
	Таблица.Колонки.Добавить("СтарыйIDКатегории", ОписаниеСтроки);
	
	// Считаем файл
	
	ЧтениеТекста = Новый ЧтениеТекста(ИмяФайла, Кодировка);
	Строка = ЧтениеТекста.ПрочитатьСтроку();
	
	Пока Строка <> Неопределено Цикл
		
		стрРазложенная = СтрЗаменить(Строка, РазделительСтолбцов, Символы.ПС);
		
		СтрокаИдКатегории = СтрПолучитьСтроку(стрРазложенная, 6);
		Если Не ПустаяСтрока(СтрокаИдКатегории) Тогда // если нет строки тогда выходит что старый формат и его нужно обновить
		
			НовСтрока = Таблица.Добавить();
			
			НовСтрока.alies 			= СтрПолучитьСтроку(стрРазложенная, 1);
			НовСтрока.СтарыйURL 		= СтрПолучитьСтроку(стрРазложенная, 2);
			НовСтрока.ГУИД 				= СтрПолучитьСтроку(стрРазложенная, 3);
			НовСтрока.ГУИДКатегории 	= СтрПолучитьСтроку(стрРазложенная, 4);

			НовСтрока.СтарыйIDТовара 	= СтрПолучитьСтроку(стрРазложенная, 5);
			НовСтрока.СтарыйIDКатегории = СтрПолучитьСтроку(стрРазложенная, 6);
			
		КонецЕсли;
			
		// Читаем следующию
			
		Строка = ЧтениеТекста.ПрочитатьСтроку();
		
	КонецЦикла;
	
	ЧтениеТекста.Закрыть();
	
	// Проиндексируем
	
	Таблица.Индексы.Добавить("СтарыйURL");
	
	Запрос 	= Новый Запрос("
	|ВЫБРАТЬ 	ВЫБОР КОГДА ЭтоГруппа ТОГДА Ссылка ИНАЧЕ Родитель КОНЕЦ КАК Категория, Ссылка КАК Номенклатура, alies, старыйURL 
	|ИЗ 		Справочник.Номенклатура 
	|ГДЕ 		ВыгружатьНаСайт = ИСТИНА И СтарыйURL <> """"");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЕстьИзменения 	= Ложь;
	Записывать 		= Ложь;
	
	ПОка Выборка.Следующий() Цикл
		
		// Определим какие текущие значения
		
		ГУИД 				= ?(Выборка.Номенклатура.Пустая(),"",XMLСтрока(Выборка.Номенклатура));
		ГУИДКатегории		= ?(Выборка.Категория.Пустая(),"",XMLСтрока(Выборка.Категория));
		СтарыйIDТовара 		= "";
		СтарыйIDКатегории 	= "";
		
		МногоСтрок 	= стрЗаменить(Выборка.СтарыйURL, "&", Символы.ПС);
		КолСтрок 	= СтрЧислоСтрок(МногоСтрок);
		
		Для Ном = 1 По  КолСтрок Цикл
			
			Строка = СтрПолучитьСтроку(МногоСтрок, Ном);
			
			Если Лев(Строка, 11) = "product_id=" Тогда
				СтарыйIDТовара = Сред(Строка, 12);
				Продолжить;
			КонецЕсли;
			
			Если Лев(Строка, 12) = "category_id=" Тогда
				СтарыйIDКатегории = Сред(Строка, 13);
			КонецЕсли;
			
		КонецЦикла;

		СтруктураПоиска = Новый Структура("СтарыйURL", Выборка.старыйURL);
		НайденныеСтроки = Таблица.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() Тогда
			
			НовСтрока = НайденныеСтроки[0];
			
			ЕстьИзменения = Выборка.alies <> НовСтрока.alies Или
							Выборка.СтарыйURL <> НовСтрока.СтарыйURL Или
							ГУИД <> НовСтрока.ГУИД Или
							ГУИДКатегории <> НовСтрока.ГУИДКатегории Или
							СтарыйIDТовара <> НовСтрока.СтарыйIDТовара Или
							СтарыйIDКатегории <> НовСтрока.СтарыйIDКатегории;
			
		Иначе
			
			НовСтрока 		= Таблица.Добавить();
			ЕстьИзменения 	= Истина;
			
		КонецЕсли;
		
		// Проверим изменения
			
		Если ЕстьИзменения Тогда
			
			Записывать = Истина;
			
			ЗаписьЖурналаРегистрации(
					"HTTP.Формирование строки редиректа", 
					УровеньЖурналаРегистрации.Информация,
					метаНом,
					Выборка.Номенклатура,
					"СтарыйURL = " + Выборка.СтарыйURL + "
					|Номер строки = " + (Таблица.Индекс(НовСтрока) + 1));
		
			НовСтрока.alies 			= Выборка.alies;
			НовСтрока.старыйURL 		= Выборка.старыйURL;
			НовСтрока.ГУИД 				= ГУИД;
			НовСтрока.ГУИДКатегории 	= ГУИДКатегории;
			НовСтрока.СтарыйIDТовара 	= СтарыйIDТовара;
			НовСтрока.СтарыйIDКатегории = СтарыйIDКатегории;
			
		КонецЕсли;
			
	КонецЦикла;
	
	// Начнем запись
	
	Если Записывать Тогда
		
		ЗаписьЖурналаРегистрации(
				"HTTP.Формирование файла редиректа", 
				УровеньЖурналаРегистрации.Информация,
				,
				,
				"Имя файла = " + ИмяФайла);
		
		ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла,,,Ложь);
		
		Для Каждого Строка Из Таблица Цикл
			
			Строка = 	Строка.alies + РазделительСтолбцов +
						Строка.СтарыйURL + РазделительСтолбцов +
						Строка.ГУИД + РазделительСтолбцов +
						Строка.ГУИДКатегории + РазделительСтолбцов +
						Строка.СтарыйIDТовара + РазделительСтолбцов +
						Строка.СтарыйIDКатегории;
						
			ЗаписьТекста.ЗаписатьСтроку(Строка);
			
		КонецЦикла;
		
		ЗаписьТекста.Закрыть();					
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РассылкаПользователям() Экспорт
	
	ТемаПисьма = "Оповещение о поступлении товара"; 
	
	Рассылки = РегистрыСведений.РассылкиПользователям;
					
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Рассылки.Номенклатура,
	|	Рассылки.Получатель
	|ИЗ
	|   РегистрНакопления.ТоварыНаСкладах.Остатки(, Склад.ОтгрузкаДилерам = Истина) Ост
	|
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	РегистрСведений.РассылкиПользователям Рассылки
	|ПО
	|	Ост.Номенклатура = Рассылки.Номенклатура
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыВРезерве.Остатки(, Размещение.ОтгрузкаДилерам = Истина) Рез
	|ПО
	|	Ост.Номенклатура = Рез.Номенклатура И Ост.Склад = Рез.Размещение
	|
	|ГДЕ
	|	Ост.КоличествоОстаток - ЕСТЬNULL(Рез.КоличествоОстаток,0) > 0
	|
	|ИТОГИ ПО 
	|	Получатель
	|");
	

	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаПолучатель = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	URLИнтернетМагазин = Константы.ПутьИнтернетМагазин.Получить();
			
	Пока ВыборкаПолучатель.Следующий() Цикл
		
		ТекстПисьмаТело = "<table>";
		
		Получатель = ВыборкаПолучатель.Получатель;
		
		Если ТипЗнч(Получатель) = Тип("СправочникСсылка.ПользователиИнтернет") Тогда
			
			Кому = Получатель.ЭлектроннаяПочта;
			ТекстПисьмаЗаголовок = "Уважаемый(ая) " + Получатель + "!" + "<BR><BR>Интересующий Вас товар:<BR>";	
			
		ИначеЕсли ТипЗнч(Получатель) = Тип("Строка") Тогда
			
			Кому = Получатель;
			ТекстПисьмаЗаголовок = "Уважаемый Гость!<BR><BR>Интересующий Вас товар:<BR>";
			
		КонецЕсли;		
	 
		ВыборкаТовары = ВыборкаПолучатель.Выбрать();               
		 
		Пока ВыборкаТовары.Следующий() Цикл
			
			Товар = ВыборкаТовары.Номенклатура;
			
			ТекущаяРассылка = Рассылки.СоздатьНаборЗаписей();
			ТекущаяРассылка.Отбор.Получатель.Установить(Получатель);
			ТекущаяРассылка.Отбор.Номенклатура.Установить(Товар);
			
			ТекстПисьмаТело = ТекстПисьмаТело + "<tr><td>" + Товар.Артикул + "</td><td><A style=""COLOR: rgb(0,0,204)"" href=" + URLИнтернетМагазин + НРег(Товар.alies) + ">"+ Товар +"</A></td></tr>";
			
			Попытка
				ТекущаяРассылка.Записать();
			Исключение
				ЗаписьЖурналаРегистрации("Данные.Удаление", УровеньЖурналаРегистрации.Ошибка, , , 
				ОписаниеОшибки() + "
				|получатель = " + Кому + "
				|товар = " + Товар);
			КонецПопытки;
 			
		КонецЦикла;
		
	
		ТекстПисьма = ТекстПисьмаЗаголовок + ТекстПисьмаТело + "</table>" + "<BR>поступил на склад компании Garage.<BR><BR>" + КэшируемыеФункции.ПолучитьПодвалПисьма();
		
		ОбщиеФункции.ОповеститьПоПочте(Кому, ТемаПисьма, ТекстПисьма, Ложь, Перечисления.ТипыТекстовЭлектронныхПисем.HTML);
		
	КонецЦикла;
	
	
КонецПроцедуры

// НОВОСТИ

Функция СохранитьИзмененияЦенНаПамять(РозничныйДок, ДатаПроверки = Неопределено)
	
	// РозничныйДок в него вернем документ в котором розничный тип цены
	
	ТипРозница = Константы.ТипЦенРозница.Получить();
	Если ДатаПроверки = Неопределено Тогда ДатаПроверки = ТекущаяДата() КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 
	|	ЦеныЩас.ТипЦен 							ТипЦен,
	|	ЦеныЩас.Номенклатура					Номенклатура, 
	|	ЦеныЩас.Упаковка, 
	|	ЦеныЩас.Цена							ЦенаПосле,
	|	ЦеныЩас.Валюта							ВалютаПосле,
	|	ЦеныВчера.Цена							ЦенаДо,
	|	ЦеныВчера.Валюта						ВалютаДо
	|ИЗ 
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&КонецСегодня) ЦеныЩас
	|
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&КонецВчера) ЦеныВчера
	|ПО 
	|	ЦеныЩас.ТипЦен			= ЦеныВчера.ТипЦен И
	|	ЦеныЩас.Номенклатура 	= ЦеныВчера.Номенклатура И
	|	ЦеныЩас.Упаковка 		= ЦеныВчера.Упаковка И
	|	ЦеныЩас.Цена 			<> ЦеныВчера.Цена
	|
	|УПОРЯДОЧИТЬ ПО ТипЦен, Номенклатура
	|ИТОГИ ПО ТипЦен
	|");
	
	Запрос.УстановитьПараметр("КонецВчера", 	НачалоДня(ДатаПроверки) - 1);
	Запрос.УстановитьПараметр("КонецСегодня", 	КонецДня(ДатаПроверки));
	
	ВыборкаТиповЦен = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Пока ВыборкаТиповЦен.Следующий() Цикл
		
		ИсторияЦен = Документы.ИсторияЦен.СоздатьДокумент();
		ИсторияЦен.Дата 	= ТекущаяДата();
		ИсторияЦен.ТипЦен 	= ВыборкаТиповЦен.ТипЦен;
		
		Выборка = ВыборкаТиповЦен.Выбрать();
		Пока Выборка.Следующий() Цикл ЗаполнитьЗначенияСвойств(ИсторияЦен.Изменения.Добавить(), Выборка) КонецЦикла;
		
		Если Не ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(ИсторияЦен) Тогда Возврат Ложь КонецЕсли; 
		
		Если ИсторияЦен.ТипЦен = ТипРозница Тогда РозничныйДок = ИсторияЦен.Ссылка КонецЕсли; КонецЦикла;

	Возврат Истина;
	
КонецФункции
Процедура СгенерироватьНовостьПоИзмененнымЦенам(ДатаПроверки = Неопределено)
	
	Перем РозничныйДок;
	
	Если СохранитьИзмененияЦенНаПамять(РозничныйДок, ДатаПроверки) Тогда
		Если РозничныйДок <> Неопределено Тогда
		
			КартинкаНетФото 		= "e1cib/data/Справочник.Картинки.Картинка?ref=88490015175303fd11e2b171d9f2fbcd";
			ПутьКМагазу				= Константы.ПутьИнтернетМагазин.Получить();
			ПолучитьСсылкуВкоде 	= "HTMLОбработкаСервер.ПолучитьОбъектПоГуидСтроке(""Документы.ИсторияЦен"",""" + XMLСтрока(РозничныйДок) + """)";
			
			Текст = "<HTML><HEAD>
			|<META content=""text/html; charset=utf-8"" http-equiv=Content-Type>
			|<META name=GENERATOR content=""MSHTML 9.00.8112.16476""></HEAD>
			|<BODY>
			|<table border=""1"" cellspacing=""0"" width=""100%"">
			|<p style=""text-align:right""><a href='V8:ВЫПОЛНИТЬ КОД:ОткрытьФорму(""Документ.ИсторияЦен.Форма.СписокТаблицей"", Новый Структура(""Ключ""," + ПолучитьСсылкуВкоде + "))'>Открыть измененные товары в таблице</a></p>
			|<caption align=""top""><h3>Изменились розничные цены на следующие товары</h3></caption>
			|
			|<tr>
			|<td width=120 align=""center"">картинка</td>
			|<td width=120 align=""center"">артикул</td>
			|<td align=""center"">Товар</td>
			|<td width=80 align=""center"">старая цена</td>
			|<td width=80 align=""center"">новая цена</td>
			|</tr>
			|
			|";
			Для Каждого Строка Из РозничныйДок.Изменения Цикл
				
				Номенклатура = Строка.Номенклатура;
				
				// Вытащим картинку
				
				//Картинка 	= картинки.ПолучитьСсылкуОсновногоИзображения(Строка.Номенклатура);
				//ТэгКартинки = ?(Картинка = Неопределено, КартинкаНетФото, ПолучитьНавигационнуюСсылку(Картинка, "Картинка"));
				ТэгКартинки = Картинки.ПолучитьURLКартинкиВОблаке(Строка.Номенклатура);
				
				// Добавим картинку
				
				Если Номенклатура.ВыгружатьНаСайт Тогда
				
					Текст = Текст + "<tr>
					|<td align=""center""><a href='" + ПутьКМагазу + Номенклатура.alies + "'><img src='" + ТэгКартинки + "' width='100' height='100'></a></td>";
					
				Иначе
					
					Текст = Текст + "<tr>
					|<td align=""center""><img src='" + ТэгКартинки + "' width='100' height='100'></td>"; КонецЕсли;
					
				// Добавим артикул
				
				Текст = Текст + "
				|<td align=""center""> <font size=4>" + Номенклатура.Артикул + "</font><br><b>" + Номенклатура.Производитель + "</b></td>";
				
				// Добавим текст
				
				Текст = Текст + "
				|<td><a href='v8:Выполнить код:ОткрытьФорму(""Справочник.Номенклатура.ФормаСписка"", Новый Структура(""ТекущаяСтрока"", HTMLОбработкаСервер.ПолучитьОбъектПоГуидСтроке(""Справочники.Номенклатура"", """ + Строка(Номенклатура.УникальныйИдентификатор()) + """)));'>" + Номенклатура.Наименование + "</a></td>";
				
				// Добавим цены
				
				Текст = Текст + "
				|<td align=""right""><font color=#DC7773><strike>" + Строка.ЦенаДо + "</strike></font></td>
				|<td align=""right""><strong><font color=#00B000 size=5>" + Строка.ЦенаПосле + "</font></strong></td>";
				
				// Закроем
				
				Текст = Текст + "
				|</tr>"; КонецЦикла;
			
			// Закроем таблицу и страницу
			
			Текст = Текст + "
			|</table>
			|</BODY>
			|</HTML>";
			
			// Создадим документ
			
			Новость = Документы.Новость.СоздатьДокумент();
			Новость.Дата 		= ТекущаяДата();
			Новость.Текст 		= Текст;
			Новость.ЧистыйHTML 	= Истина;
			
			// Запишем документ
			
			ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(Новость, РежимЗаписиДокумента.Проведение); КонецЕсли; КонецЕсли;
	
КонецПроцедуры
Процедура СгенерироватьНовостьПоИзмененнымЦенам_Ст(ДатаПроверки = Неопределено)
	// МодульРегламентныхЗаданий.ГенераторНовостей('20120504')
	//Если ДатаПроверки = Неопределено Тогда ДатаПроверки = ТекущаяДата() КонецЕсли;
	//
	//// Проверим изменились ли цены и какие
	//
	//Запрос = Новый Запрос("
	//|ВЫБРАТЬ 
	//|	ЦеныЩас.Номенклатура, 
	//|	ЦеныЩас.Номенклатура.Производитель		Производитель, 
	//|	ЦеныЩас.Номенклатура.ВыгружатьНаСайт	ВыгружатьНаСайт, 
	//|	ЦеныЩас.Номенклатура.alies				alies, 
	//|	ЦеныЩас.Упаковка, 
	//|	ЦеныЩас.Номенклатура.Артикул 			Артикул,
	//|	ЦеныЩас.Номенклатура.Наименование 		Наименование,
	//|	ЦеныЩас.Цена							ЦенаСтала,
	//|	ЦеныВчера.Цена							ЦенаБыла
	//|ИЗ 
	//|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&КонецСегодня, ТипЦен = &ТипЦенРозница) ЦеныЩас
	//|
	//|ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	//|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&КонецВчера, ТипЦен = &ТипЦенРозница) ЦеныВчера
	//|ПО 
	//|	ЦеныЩас.Номенклатура 	= ЦеныВчера.Номенклатура И
	//|	ЦеныЩас.Упаковка 		= ЦеныВчера.Упаковка И
	//|	ЦеныЩас.Цена 			<> ЦеныВчера.Цена
	//|
	//|УПОРЯДОЧИТЬ ПО Артикул
	//|");
	//
	//Запрос.УстановитьПараметр("ТипЦенРозница", 	Константы.ТипЦенРозница.Получить());
	//Запрос.УстановитьПараметр("КонецВчера", 	НачалоДня(ДатаПроверки) - 1);
	//Запрос.УстановитьПараметр("КонецСегодня", 	КонецДня(ДатаПроверки));
	//
	//Выполнение = Запрос.Выполнить();
	//Если Выполнение.Пустой() Тогда Возврат КонецЕсли;
	//
	//КартинкаНетФото = "e1cib/data/Справочник.Картинки.Картинка?ref=88490015175303fd11e2b171d9f2fbcd";
	//ПутьКМагазу		= Константы.ПутьИнтернетМагазин.Получить();
	//
	//Текст = "<HTML><HEAD>
	//|<META content=""text/html; charset=utf-8"" http-equiv=Content-Type>
	//|<META name=GENERATOR content=""MSHTML 9.00.8112.16476""></HEAD>
	//|<BODY>
	//|<table border=""1"" cellspacing=""0"" width=""100%"">
	//|<caption align=""top""><h3>Изменились розничные цены на следующие товары</h3></caption>
	//|
	//|<tr>
	//|<td width=120 align=""center"">картинка</td>
	//|<td width=120 align=""center"">артикул</td>
	//|<td align=""center"">Товар</td>
	//|<td width=80 align=""center"">старая цена</td>
	//|<td width=80 align=""center"">новая цена</td>
	//|</tr>
	//|
	//|";
	//
	//Выборка = Выполнение.Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	
	//	// Вытащим картинку
	//	
	//	Картинка 	= картинки.ПолучитьСсылкуОсновногоИзображения(Выборка.Номенклатура);
	//	ТэгКартинки = ?(Картинка = Неопределено, КартинкаНетФото, ПолучитьНавигационнуюСсылку(Картинка, "Картинка"));
	//	
	//	// Добавим картинку
	//	
	//	Если Выборка.ВыгружатьНаСайт Тогда
	//	
	//		Текст = Текст + "<tr>
	//		|<td align=""center""><a href='" + ПутьКМагазу + Выборка.alies + "'><img src='" + ТэгКартинки + "' width='100' height='100'></a></td>";
	//		
	//	Иначе
	//		
	//		Текст = Текст + "<tr>
	//		|<td align=""center""><img src='" + ТэгКартинки + "' width='100' height='100'></td>"; КонецЕсли;
	//		
	//	// Добавим артикул
	//	
	//	Текст = Текст + "
	//	|<td align=""center""> <font size=4>" + Выборка.Артикул + "</font><br><b>" + Выборка.Производитель + "</b></td>";
	//	
	//	// Добавим текст
	//	
	//	Текст = Текст + "
	//	|<td><a href='v8:Выполнить код:ОткрытьФорму(""Справочник.Номенклатура.ФормаСписка"", Новый Структура(""ТекущаяСтрока"", HTMLОбработкаСервер.ПолучитьОбъектПоГуидСтроке(""Справочники.Номенклатура"", """ + Строка(Выборка.Номенклатура.УникальныйИдентификатор()) + """)));'>" + Выборка.Наименование + "</a></td>";
	//	
	//	// Добавим цены
	//	
	//	Текст = Текст + "
	//	|<td align=""right""><font color=#DC7773><strike>" + Выборка.ЦенаБыла + "</strike></font></td>
	//	|<td align=""right""><strong><font color=#00B000 size=5>" + Выборка.ЦенаСтала + "</font></strong></td>";
	//	
	//	// Закроем
	//	
	//	Текст = Текст + "
	//	|</tr>"; КонецЦикла;
	//
	//// Закроем таблицу и страницу
	//
	//Текст = Текст + "
	//|</table>
	//|</BODY>
	//|</HTML>";
	//
	//// Создадим документ
	//
	//Новость = Документы.Новость.СоздатьДокумент();
	//Новость.Дата 		= ТекущаяДата();
	//Новость.Текст 		= Текст;
	//Новость.ЧистыйHTML 	= Истина;
	//
	//// Запишем документ
	//
	//ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(Новость, РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры
Процедура ГенераторНовостей() Экспорт
	
	// Сгенерируем измененные цены 
	
	СгенерироватьНовостьПоИзмененнымЦенам()
	//МодульРегламентныхЗаданий.ГенераторНовостей()
КонецПроцедуры

Процедура ОбновлениеИндексаПП() Экспорт
 
 ОбновитьИндекс(НСтр("ru = 'Обновление индекса ППД'"), Ложь, Истина);
 
КонецПроцедуры

Процедура СлияниеИндексаПП() Экспорт
 
 ОбновитьИндекс(НСтр("ru = 'Слияние индекса ППД'"), Истина);
 
КонецПроцедуры


Функция ОперацииРазрешены()
 
 Возврат ПолнотекстовыйПоиск.ПолучитьРежимПолнотекстовогоПоиска() = РежимПолнотекстовогоПоиска.Разрешить;
 
КонецФункции

Процедура ЗаписьЖурнала(УровеньЖурнала = Неопределено, КомментарийСПараметрами = "",
	ИнформацияОбОшибке = Неопределено,
	Параметр1 = Неопределено,
	Параметр2 = Неопределено,
	Параметр3 = Неопределено)
	
	// Определение уровня журнала регистрации на основе типа переданного сообщения об ошибке
	Если ТипЗнч(УровеньЖурнала) <> Тип("УровеньЖурналаРегистрации") Тогда
		Если ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
	 		УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка;
		ИначеЕсли ТипЗнч(ИнформацияОбОшибке) = Тип("Строка") Тогда
			УровеньЖурнала = УровеньЖурналаРегистрации.Предупреждение;
		Иначе
			УровеньЖурнала = УровеньЖурналаРегистрации.Информация; КонецЕсли;
	КонецЕсли;
	
	// Комментарий для журнала регистрации
	ТекстДляЖурнала = КомментарийСПараметрами;
	Если Параметр1 <> Неопределено Тогда
		ТекстДляЖурнала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстДляЖурнала, Параметр1, Параметр2, Параметр3);
	КонецЕсли;
	Если ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
		ТекстДляЖурнала = ТекстДляЖурнала + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	ИначеЕсли ТипЗнч(ИнформацияОбОшибке) = Тип("Строка") Тогда
		ТекстДляЖурнала = ТекстДляЖурнала + Символы.ПС + ИнформацияОбОшибке;
	КонецЕсли;
	ТекстДляЖурнала = СокрЛП(ТекстДляЖурнала);
	
	// Запись в журнал регистрации 
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Полнотекстовое индексирование'", "ru"), УровеньЖурнала, , , ТекстДляЖурнала);
	 
КонецПроцедуры


Процедура ОбновитьИндекс(ПредставлениеПроцедуры, РазрешитьСлияние = Ложь, Порциями = Ложь)
 
 Если ПустаяСтрока(ИмяПользователя()) Тогда
 	УстановитьПривилегированныйРежим(Истина);
 КонецЕсли;
  
 Если НЕ ОперацииРазрешены() Тогда Возврат; КонецЕсли; 
 
 ЗаписьЖурнала(Неопределено, НСтр("ru = 'Запуск процедуры ""%1"".'"), , ПредставлениеПроцедуры);
 
 Попытка
 	ПолнотекстовыйПоиск.ОбновитьИндекс(РазрешитьСлияние, Порциями);
 	ЗаписьЖурнала(Неопределено, НСтр("ru = 'Успешное завершение процедуры ""%1"".'"), , ПредставлениеПроцедуры);
 Исключение
 	ЗаписьЖурнала(Неопределено, НСтр("ru = 'Ошибка выполнения процедуры ""%1"":'"), ИнформацияОбОшибке(), ПредставлениеПроцедуры);
 КонецПопытки;
 
КонецПроцедуры

////Автоматическое снятие резервов
Процедура ОповеститьОПредстоящейОтменеРезерва_Ст_Ант()  Экспорт
	Если НЕ Константы.ВклАвтоматическоеСнятиеРезервов.Получить() Тогда
		ВызватьИсключение "Автоматическое снятие резервов выключено!";
		//Возврат 1;
	КонецЕсли;
	
	КоличествоДнейРезервирования = Константы.СрокРезервированияТовара.Получить();
	ОповещенияеОСнятииРезерваЗа_Дней = Константы.ПредупреждатьОСнятииРезерваЗа.Получить();
	ПериодПроверки = КонецДня(ТекущаяДата()) - 60*60*24*(КоличествоДнейРезервирования - ОповещенияеОСнятииРезерваЗа_Дней);
	//Если данное значение не заданно то поставим по умолчанию один месяц или 30 дней
	СнятьБезПредупреждения  = Константы.СниматьРезервыБезПредупрежденияСтарше.Получить();
	//Если СнятьБезПредупреждения = 0 Тогда
	//	СнятьБезПредупреждения = 30;
	//КонецЕсли;
	/////////////////////////////
	ТемаПисьма = "Предупреждение о истечении срока резервирования товара!";
	ЗаголовокПисьма = "<table width=""100%"" border=""0"" cellspacing=""0"" cellpadding=""0"">
|					   <tr><td align=""center"" valign=""top"">
|				   	   <table width=""800"" cellspacing=""0"" cellpadding=""0"">
|					   <tr><td align=""center"" style=""width:138px;""><a href=""http://garagetools.ru/"" title=""garagetools.ru""><img src=""http://spbmain.dlinkddns.com/orders_pdf/images/mail_logo.png""></img></a></td>
|					   <td align=""center"" style=""width:295px;""></td>
|					   <td align=""right"" style=""width:207px;font-family: Verdana,Geneva,sans-serif;font-size:14px;color:#000000;padding:0 0 0 10px;""></td></tr>
//|					   <tr><td align=""left"" colspan=""3"" style=""width:640px""><img src=""http://spbmain.dlinkddns.com/orders_pdf/images/site2_verstka_0490_07.png"" width=""639"" height=""8""></img></td></tr>
|                      <tr><td colspan=""3"" bgcolor=""#008000"" align=""center"" style=""font-family: Verdana,Geneva,sans-serif;font-size:14px;color:#008000;"">.</td></tr> 
|					   <tr><td align=""left"" colspan=""3"" style=""font-family: Verdana,Geneva,sans-serif;font-size:14px;color:#333333;padding:10px 0;"">Здравствуйте, уважаемый(ая) сотрудник ""Гаража""!</td></tr>
|					   <tr><td align=""left"" colspan=""3"" style=""font-family: Verdana,Geneva,sans-serif;font-size:14px;color:#333333;padding:10px 0;"">Уведомляем Вас о том, что истекает срок резервирования товаров по следующим заказам:</td></tr>
|					   <tr><td align=""left"" colspan=""3"" style=""font-family: Verdana,Geneva,sans-serif;font-size:16px;color:#006644;padding:5px 0;border-bottom:1px solid #000000;""></tr>
|					   <tr><table  width=""800"" cellspacing=""2"" cellpadding=""2"" style=""border:1px solid; font-family: Verdana,Geneva,sans-serif;font-size:14px;color:#000000;padding:0 0 0 0px;"">";

	ПодвалПисьма = "</table></tr></td></tr></table></td></tr></table></body></html>";
	СтрокаВПисьме_1 = "<tr style = ""background-color: #F5F5F5""><TD>%Документ%</TD><TD>%Номер%</td><td>%Дата%</td><td>%Контрагент%</td><td>%Сумма%</td><td>%ДатаСнятияРезерва%</TD></tr>";
	СтрокаВПисьме_2 = "<tr style = ""background-color: #cccccc""><TD>%Документ%</td><td>%Номер%</td><td>%Дата%</td><td>%Контрагент%</td><td>%Сумма%</td><td>%ДатаСнятияРезерва%</TD></tr>";
	/////
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТоварыВРезервеОстатки.ДокументРезерва КАК ДокументРезерва,
	               |	ТоварыВРезервеОстатки.ДокументРезерва.Дата КАК Дата
	               |ПОМЕСТИТЬ ВсеРезервыОстатки
	               |ИЗ
	               |	РегистрНакопления.ТоварыВРезерве.Остатки(&Период, ) КАК ТоварыВРезервеОстатки
	               |ГДЕ
	               |	ТоварыВРезервеОстатки.КоличествоОстаток > 0
	               |	И ТИПЗНАЧЕНИЯ(ТоварыВРезервеОстатки.ДокументРезерва) <> ТИП(Документ.ЗаказНаряд)
	               |	И ТоварыВРезервеОстатки.ДокументРезерва <> НЕОПРЕДЕЛЕНО
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВсеРезервыОстатки.ДокументРезерва,
	               |	МИНИМУМ(ТоварыВРезерве.Период) КАК Дата
	               |ПОМЕСТИТЬ ВсеРезервы
	               |ИЗ
	               |	ВсеРезервыОстатки КАК ВсеРезервыОстатки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВРезерве КАК ТоварыВРезерве
	               |		ПО ВсеРезервыОстатки.ДокументРезерва = ТоварыВРезерве.ДокументРезерва
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВсеРезервыОстатки.ДокументРезерва
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ОтсрочкаСнятияРезервов.Заказ
	               |ПОМЕСТИТЬ Отсрочки
	               |ИЗ
	               |	РегистрСведений.ОтсрочкаСнятияРезервов КАК ОтсрочкаСнятияРезервов
	               |ГДЕ
	               |	ОтсрочкаСнятияРезервов.ДатаСнятияРезерва > &Период
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВсеРезервы.ДокументРезерва,
	               |	ВсеРезервы.Дата,
	               |	ЕСТЬNULL(Отсрочки.Заказ, 0) КАК Заказ
	               |ПОМЕСТИТЬ ВременнаяТаблица
	               |ИЗ
	               |	ВсеРезервы КАК ВсеРезервы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Отсрочки КАК Отсрочки
	               |		ПО ВсеРезервы.ДокументРезерва = Отсрочки.Заказ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВременнаяТаблица.ДокументРезерва,
	               |	ВЫБОР
	               |		КОГДА ТИПЗНАЧЕНИЯ(ВременнаяТаблица.ДокументРезерва) = ТИП(Документ.ВнутреннийЗаказ)
	               |			ТОГДА ЕСТЬNULL(Пользователи.Ссылка, 0)
	               |		ИНАЧЕ ЕСТЬNULL(Контрагенты.ОсновнойМенеджер, 0)
	               |	КОНЕЦ КАК КомуПисьмо
	               |ПОМЕСТИТЬ ОсновныеМенеджеры
	               |ИЗ
	               |	ВременнаяТаблица КАК ВременнаяТаблица
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	               |		ПО ВременнаяТаблица.ДокументРезерва.Контрагент = Контрагенты.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	               |		ПО ВременнаяТаблица.ДокументРезерва.Автор = Пользователи.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВременнаяТаблица.ДокументРезерва,
	               |	ВЫБОР
	               |		КОГДА ДОБАВИТЬКДАТЕ(ВременнаяТаблица.Дата, ДЕНЬ, 10) < КОНЕЦПЕРИОДА(&Период, ДЕНЬ)
	               |			ТОГДА 1
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК СнятьРезервНемедленно,
	               |	ОсновныеМенеджеры.КомуПисьмо.Почта КАК Кому,
	               |	ВременнаяТаблица.Дата КАК Дата
	               |ПОМЕСТИТЬ ОсновнаяТаблица
	               |ИЗ
	               |	ВременнаяТаблица КАК ВременнаяТаблица
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ОсновныеМенеджеры КАК ОсновныеМенеджеры
	               |		ПО ВременнаяТаблица.ДокументРезерва = ОсновныеМенеджеры.ДокументРезерва
	               |ГДЕ
	               |	ВременнаяТаблица.Заказ = 0
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЗаказыПокупателейОстатки.СуммаОстаток,
	               |	ОсновнаяТаблица.ДокументРезерва
	               |ПОМЕСТИТЬ СуммыЗаказовПокупателей
	               |ИЗ
	               |	ОсновнаяТаблица КАК ОсновнаяТаблица
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки КАК ЗаказыПокупателейОстатки
	               |		ПО ОсновнаяТаблица.ДокументРезерва = ЗаказыПокупателейОстатки.ЗаказПокупателя
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ИнтернетЗаказПокупателяОстатки.СуммаОстаток,
	               |	ОсновнаяТаблица.ДокументРезерва
	               |ПОМЕСТИТЬ СуммыИнтернетЗаказовПокупателей
	               |ИЗ
	               |	ОсновнаяТаблица КАК ОсновнаяТаблица
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ИнтернетЗаказПокупателя.Остатки КАК ИнтернетЗаказПокупателяОстатки
	               |		ПО ОсновнаяТаблица.ДокументРезерва = ИнтернетЗаказПокупателяОстатки.ИнтернетЗаказ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВнутренниеЗаказыОстатки.КоличествоОстаток,
	               |	ОсновнаяТаблица.ДокументРезерва
	               |ПОМЕСТИТЬ СуммыВнутреннихЗаказов
	               |ИЗ
	               |	ОсновнаяТаблица КАК ОсновнаяТаблица
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ВнутренниеЗаказы.Остатки КАК ВнутренниеЗаказыОстатки
	               |		ПО ОсновнаяТаблица.ДокументРезерва = ВнутренниеЗаказыОстатки.ВнутреннийЗаказ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ОсновнаяТаблица.ДокументРезерва,
	               |	ОсновнаяТаблица.СнятьРезервНемедленно,
	               |	ОсновнаяТаблица.Кому,
	               |	ОсновнаяТаблица.Дата,
	               |	ЕСТЬNULL(СуммыЗаказовПокупателей.СуммаОстаток, 0) КАК СуммаЗаказаПокупателя,
	               |	ЕСТЬNULL(СуммыИнтернетЗаказовПокупателей.СуммаОстаток, 0) КАК СуммаИнтернетЗаказа,
	               |	ЕСТЬNULL(СуммыВнутреннихзаказов.КоличествоОстаток, 0) КАК КоличествоВнутреннегоЗаказа
	               |ПОМЕСТИТЬ ТаблицаДляОбработки
	               |ИЗ
	               |	ОсновнаяТаблица КАК ОсновнаяТаблица
	               |		ЛЕВОЕ СОЕДИНЕНИЕ СуммыЗаказовПокупателей КАК СуммыЗаказовПокупателей
	               |		ПО ОсновнаяТаблица.ДокументРезерва = СуммыЗаказовПокупателей.ДокументРезерва
	               |		ЛЕВОЕ СОЕДИНЕНИЕ СуммыИнтернетЗаказовПокупателей КАК СуммыИнтернетЗаказовПокупателей
	               |		ПО ОсновнаяТаблица.ДокументРезерва = СуммыИнтернетЗаказовПокупателей.ДокументРезерва
	               |		ЛЕВОЕ СОЕДИНЕНИЕ СуммыВнутреннихЗаказов КАК СуммыВнутреннихзаказов
	               |		ПО ОсновнаяТаблица.ДокументРезерва = СуммыВнутреннихзаказов.ДокументРезерва
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТАблицаДляОбработки.ДокументРезерва КАК ДокументРезерва,
	               |	ЕСТЬNULL(ТАблицаДляОбработки.ДокументРезерва.Контрагент, 0) КАК Контрагент,
	               |	ТАблицаДляОбработки.СнятьРезервНемедленно КАК СнятьРезервНемедленно,
	               |	ТАблицаДляОбработки.Кому КАК Кому,
	               |	ТАблицаДляОбработки.Дата КАК Дата,
	               |	ТАблицаДляОбработки.ДокументРезерва.Номер КАК Номер,
	               |	ВЫБОР
	               |		КОГДА ТАблицаДляОбработки.СуммаЗаказаПокупателя = 0
	               |			ТОГДА ВЫБОР
	               |					КОГДА ТАблицаДляОбработки.СуммаИнтернетЗаказа = 0
	               |						ТОГДА ВЫБОР
	               |								КОГДА ТАблицаДляОбработки.КоличествоВнутреннегоЗаказа = 0
	               |									ТОГДА 0
	               |								ИНАЧЕ ТАблицаДляОбработки.КоличествоВнутреннегоЗаказа
	               |							КОНЕЦ
	               |					ИНАЧЕ ТАблицаДляОбработки.СуммаИнтернетЗаказа
	               |				КОНЕЦ
	               |		ИНАЧЕ ТАблицаДляОбработки.СуммаЗаказаПокупателя
	               |	КОНЕЦ КАК Сумма,
	               |	ВЫБОР
	               |		КОГДА ТИПЗНАЧЕНИЯ(ТАблицаДляОбработки.ДокументРезерва) = ТИП(Документ.ЗаказПокупателя)
	               |			ТОГДА 1
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА ТИПЗНАЧЕНИЯ(ТАблицаДляОбработки.ДокументРезерва) = ТИП(Документ.ВнутреннийЗаказ)
	               |					ТОГДА 2
	               |				ИНАЧЕ 3
	               |			КОНЕЦ
	               |	КОНЕЦ КАК ТипДокумента
	               |ИЗ
	               |	ТаблицаДляОбработки КАК ТАблицаДляОбработки
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТАблицаДляОбработки.Кому,
	               |	ТАблицаДляОбработки.ДокументРезерва,
	               |	ЕСТЬNULL(ТАблицаДляОбработки.ДокументРезерва.Контрагент, 0),
	               |	ТАблицаДляОбработки.СнятьРезервНемедленно,
	               |	ТАблицаДляОбработки.Дата,
	               |	ТАблицаДляОбработки.ДокументРезерва.Номер,
	               |	ВЫБОР
	               |		КОГДА ТАблицаДляОбработки.СуммаЗаказаПокупателя = 0
	               |			ТОГДА ВЫБОР
	               |					КОГДА ТАблицаДляОбработки.СуммаИнтернетЗаказа = 0
	               |						ТОГДА ВЫБОР
	               |								КОГДА ТАблицаДляОбработки.КоличествоВнутреннегоЗаказа = 0
	               |									ТОГДА 0
	               |								ИНАЧЕ ТАблицаДляОбработки.КоличествоВнутреннегоЗаказа
	               |							КОНЕЦ
	               |					ИНАЧЕ ТАблицаДляОбработки.СуммаИнтернетЗаказа
	               |				КОНЕЦ
	               |		ИНАЧЕ ТАблицаДляОбработки.СуммаЗаказаПокупателя
	               |	КОНЕЦ,
	               |	ВЫБОР
	               |		КОГДА ТИПЗНАЧЕНИЯ(ТАблицаДляОбработки.ДокументРезерва) = ТИП(Документ.ЗаказПокупателя)
	               |			ТОГДА 1
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА ТИПЗНАЧЕНИЯ(ТАблицаДляОбработки.ДокументРезерва) = ТИП(Документ.ВнутреннийЗаказ)
	               |					ТОГДА 2
	               |				ИНАЧЕ 3
	               |			КОНЕЦ
	               |	КОНЕЦ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Дата
	               |ИТОГИ ПО
	               |	Кому";
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	ТоварыВРезервеОстатки.ДокументРезерва,
	//               |	ТоварыВРезервеОстатки.ДокументРезерва.Дата КАК Дата
	//               |ПОМЕСТИТЬ ВсеРезервы
	//               |ИЗ
	//               |	РегистрНакопления.ТоварыВРезерве.Остатки КАК ТоварыВРезервеОстатки
	//               |ГДЕ
	//               |	ТоварыВРезервеОстатки.КоличествоОстаток <> 0
	//               |	И ТИПЗНАЧЕНИЯ(ТоварыВРезервеОстатки.ДокументРезерва) <> ТИП(Документ.ЗаказНаряд)
	//               |;
	//               |
	//               |////////////////////////////////////////////////////////////////////////////////
	//               |ВЫБРАТЬ
	//               |	ОтсрочкаСнятияРезервов.Заказ
	//               |ПОМЕСТИТЬ Отсрочки
	//               |ИЗ
	//               |	РегистрСведений.ОтсрочкаСнятияРезервов КАК ОтсрочкаСнятияРезервов
	//               |ГДЕ
	//               |	ОтсрочкаСнятияРезервов.ДатаСнятияРезерва > &Период
	//               |;
	//               |
	//               |////////////////////////////////////////////////////////////////////////////////
	//               |ВЫБРАТЬ
	//               |	ВсеРезервы.ДокументРезерва,
	//               |	ВсеРезервы.Дата,
	//               |	ЕСТЬNULL(Отсрочки.Заказ, 0) КАК Заказ
	//               |ПОМЕСТИТЬ ВременнаяТаблица
	//               |ИЗ
	//               |	ВсеРезервы КАК ВсеРезервы
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ Отсрочки КАК Отсрочки
	//               |		ПО ВсеРезервы.ДокументРезерва = Отсрочки.Заказ
	//               |;
	//               |
	//               |////////////////////////////////////////////////////////////////////////////////
	//               |ВЫБРАТЬ
	//               |	ВременнаяТаблица.ДокументРезерва,
	//               |	ВЫБОР
	//               |		КОГДА ДОБАВИТЬКДАТЕ(ВременнаяТаблица.Дата, ДЕНЬ, 10) < КОНЕЦПЕРИОДА(&Период, ДЕНЬ)
	//               |			ТОГДА 1
	//               |		ИНАЧЕ 0
	//               |	КОНЕЦ КАК СнятьРезервНемедленно,
	//               |	Пользователи.Почта КАК Кому,
	//               |	ВременнаяТаблица.Дата КАК Дата
	//               |ИЗ
	//               |	ВременнаяТаблица КАК ВременнаяТаблица
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	//               |		ПО ВременнаяТаблица.ДокументРезерва.Ответственный = Пользователи.Ссылка
	//               |ГДЕ
	//               |	ВременнаяТаблица.Заказ = 0
	//               |
	//               |СГРУППИРОВАТЬ ПО
	//               |	Пользователи.Почта,
	//               |	ВременнаяТаблица.ДокументРезерва,
	//               |	ВЫБОР
	//               |		КОГДА ДОБАВИТЬКДАТЕ(ВременнаяТаблица.Дата, ДЕНЬ, "+КоличествоДнейРезервирования+") <= КОНЕЦПЕРИОДА(&Период, ДЕНЬ)
	//               |			ТОГДА 1
	//               |		ИНАЧЕ 0
	//               |	КОНЕЦ,
	//               |	ВременнаяТаблица.Дата
	//               |
	//               |УПОРЯДОЧИТЬ ПО
	//               |	Дата
	//               |ИТОГИ ПО
	//               |	Кому";
	Запрос.УстановитьПараметр("ПериодТек", ТекущаяДата());
	Запрос.УстановитьПараметр("Период", ПериодПроверки);
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Список = Новый СписокЗначений;
	Список.Добавить("1","Заказ покупателя");
	Список.Добавить("2", "Внутренний заказ");
	Список.Добавить("3", "Интернет заказ");
		Пока Выборка.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(Выборка.Кому) Тогда
				Продолжить;
			КонецЕсли;
			ТекстПисьма = "";
			Счетчик = 0;
			ВыборкаЗаказ = Выборка.Выбрать();
			Пока ВыборкаЗаказ.Следующий() Цикл
				//ТекстПисьма = ТекстПисьма + "<li>"+Список.НайтиПоЗначению(ВыборкаЗаказ.ТипДокумента).Представление+" номер "+ВыборкаЗаказ.Номер+?(ВыборкаЗаказ.СнятьРезервНемедленно," будет снят сегодня в 23.59.59"," истекает "+Формат(КонецДня(ВыборкаЗаказ.ДокументРезерва.Дата + 60*60*24*КоличествоДнейРезервирования), "ДЛФ = ДД"))+"</li>";
				//Ежели резервам годов много, то снимать их нужно не оглошая об этом крестьянам,
				//дабы не наводить смуты в их головах, чтоб они не впоминали когда это было, и не думали думу: "А надо ли продлять али нет? 
				//Но можно задать срок равный нолю, и тогда оповещены будут все о том что резервы будут сняты когда наступит четырнадцатая луна(задается константой), со дня 
				//установки. "
				Если (СнятьБезПредупреждения <> 0) И (ВыборкаЗаказ.Дата+(60*60*24*СнятьБезПредупреждения) < ТекущаяДата()) Тогда
					Продолжить;
				КонецЕсли;
				////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				Если (Счетчик / 2) - Цел(Счетчик/2) = 0 Тогда
					ВрСтрока = СтрокаВПисьме_1;
				Иначе
					ВрСтрока = СтрокаВПисьме_2;
				КонецЕсли;
				ВрСтрока = СтрЗаменить(ВрСтрока, "%Документ%", ?(Список.НайтиПоЗначению(Строка(ВыборкаЗаказ.ТипДокумента))=Неопределено, "-",Список.НайтиПоЗначению(Строка(ВыборкаЗаказ.ТипДокумента)).Представление));
				ВрСтрока = СтрЗаменить(ВрСтрока, "%Номер%", ВыборкаЗаказ.Номер);
				ВрСтрока = СтрЗаменить(ВрСтрока, "%Дата%", Формат(ВыборкаЗаказ.Дата, "ДЛФ = Д"));
				ВрСтрока = СтрЗаменить(ВрСтрока, "%Контрагент%", ?(ВыборкаЗаказ.Контрагент = 0,"",ВыборкаЗаказ.Контрагент));
				ВрСтрока = СтрЗаменить(ВрСтрока, "%Сумма%", ВыборкаЗаказ.Сумма);
				ВрСтрока = СтрЗаменить(ВрСтрока, "%ДатаСнятияРезерва%", ?(ВыборкаЗаказ.СнятьРезервНемедленно," будет снят сегодня","до "+Формат(КонецДня(ВыборкаЗаказ.ДокументРезерва.Дата + 60*60*24*КоличествоДнейРезервирования), "ДЛФ = ДД")));
				ТекстПисьма = ТекстПисьма + ВрСтрока;
				Счетчик = Счетчик + 1;
			КонецЦикла;
			Письмо = ОбщиеФункции.ОповеститьПоПочте(Выборка.Кому, ТемаПисьма, ЗаголовокПисьма+ТекстПисьма+ПодвалПисьма,Ложь,Перечисления.ТипыТекстовЭлектронныхПисем.HTML);
			//ПисьмоОтладчику = ОбщиеФункции.ОповеститьПоПочте("a-s8730@yandex.ru", ТемаПисьма, ЗаголовокПисьма+ТекстПисьма+ПодвалПисьма,Ложь,Перечисления.ТипыТекстовЭлектронныхПисем.HTML);
		КонецЦикла;			
КонецПроцедуры
Процедура ОповеститьОПредстоящейОтменеРезерва()  Экспорт
	
	Если НЕ Константы.ВклАвтоматическоеСнятиеРезервов.Получить() Тогда ВызватьИсключение "Автоматическое снятие резервов выключено!" КонецЕсли;
	
	КоличествоДнейБезПредупреждения 	= Константы.СниматьРезервыБезПредупрежденияСтарше.Получить();
	КоличествоДнейРезервирования 		= Константы.СрокРезервированияТовара.Получить();
	ОповещенияеОСнятииРезерваЗа_Дней 	= Константы.ПредупреждатьОСнятииРезерваЗа.Получить();
	ПериодПроверки 						= КонецДня(ТекущаяДата()) - 86400 * (КоличествоДнейРезервирования - ОповещенияеОСнятииРезерваЗа_Дней);
	
	ТемаПисьма = "Предупреждение о истечении срока резервирования товара!";
	ЗаголовокПисьма = "<table width=""100%"" border=""0"" cellspacing=""0"" cellpadding=""0"">
|					   <tr><td align=""center"" valign=""top"">
|				   	   <table width=""800"" cellspacing=""0"" cellpadding=""0"">
|					   <tr><td align=""center"" style=""width:138px;""><a href=""http://garagetools.ru/"" title=""garagetools.ru""><img src=""http://spbmain.dlinkddns.com/orders_pdf/images/mail_logo.png""></img></a></td>
|					   <td align=""center"" style=""width:295px;""></td>
|					   <td align=""right"" style=""width:207px;font-family: Verdana,Geneva,sans-serif;font-size:14px;color:#000000;padding:0 0 0 10px;""></td></tr>
//|					   <tr><td align=""left"" colspan=""3"" style=""width:640px""><img src=""http://spbmain.dlinkddns.com/orders_pdf/images/site2_verstka_0490_07.png"" width=""639"" height=""8""></img></td></tr>
|                      <tr><td colspan=""3"" bgcolor=""#008000"" align=""center"" style=""font-family: Verdana,Geneva,sans-serif;font-size:14px;color:#008000;"">.</td></tr> 
|					   <tr><td align=""left"" colspan=""3"" style=""font-family: Verdana,Geneva,sans-serif;font-size:14px;color:#333333;padding:10px 0;"">Здравствуйте, уважаемый(ая) сотрудник ""Гаража""!</td></tr>
|					   <tr><td align=""left"" colspan=""3"" style=""font-family: Verdana,Geneva,sans-serif;font-size:14px;color:#333333;padding:10px 0;"">Уведомляем Вас о том, что истекает срок резервирования товаров по следующим заказам:</td></tr>
|					   <tr><td align=""left"" colspan=""3"" style=""font-family: Verdana,Geneva,sans-serif;font-size:16px;color:#006644;padding:5px 0;border-bottom:1px solid #000000;""></tr>
|					   <tr><table  width=""800"" cellspacing=""2"" cellpadding=""2"" style=""border:1px solid; font-family: Verdana,Geneva,sans-serif;font-size:14px;color:#000000;padding:0 0 0 0px;"">";

	ПодвалПисьма = "</table></tr></td></tr></table></td></tr></table>
	|<p>
	|	Если есть необходимость продлить срок резервирования заказа, вы это можете сделать самостоятельно, для каждого заказа. Для этого нужно открыть заказ и на вкладке ""Дополнительно"" указать срок продления заказа.
	|</p>
	|<p>
	|	Если ничего не делать, тогда резервы снимутся автоматически в указанный срок.
	|</p>
	|<p>
	|	После автоматического снятия резерва, заказ не пропадет, а будут сняты только резервы на товары. Заказ можно будет повторно зарезервировать, даже после автоматического снятия резерва, если товар будет в наличии.
	|</p>
	|<br>
	|<br>
	|<p>
	|	Письмо сформировано автоматически, не нужно отвечать на письмо.
	|</p>
	|</body></html>";
	СтрокаВПисьме_1 = "<tr>											<TD>%Документ%</TD><TD>%Номер%</td><td>%Дата%</td><td>%Контрагент%</td><td align=""right"">%Сумма%</td><td>%ДатаСнятияРезерва%</TD></tr>";
	СтрокаВПисьме_2 = "<tr style = ""background-color: Honeydew"">	<TD>%Документ%</td><td>%Номер%</td><td>%Дата%</td><td>%Контрагент%</td><td align=""right"">%Сумма%</td><td>%ДатаСнятияРезерва%</TD></tr>";
	/////
	Запрос = Новый Запрос( 
	
	// Получим заказы
	
	ПолучитьТекстЗапросаПолученияСпискаЗаказовКСнятиюРезерва() + "
	
	// Получим резервы
	
	|ВЫБРАТЬ
	|	ДокументЗаказ ДокументРезерва,
	|	ДокументЗаказ.Контрагент Контрагент,
	|	ДокументЗаказ.Контрагент.Наименование КонтрагентНаименование,
	|	Почта Кому,
	//|	РАЗНОСТЬДАТ(ЕСТЬNULL(Отпр.ДатаОтправки, Зак.ДатаРезерва), &ПериодТек, ДЕНЬ) ДнейРезерва,
	//|	Зак.ДатаРезерва		ДатаРезерва,
	|	Зак.ДатаСнятияРезерва ДатаСнятияРезерва,
	|
	|	ДокументЗаказ.Дата	Дата,
	|	ДокументЗаказ.Номер Номер,
	|	МАКСИМУМ(ЕСТЬNULL(ЗакПок.СуммаПриход, ИнтЗак.СуммаПриход)) Сумма,
	|	ВЫБОР КОГДА ДокументЗаказ ССЫЛКА Документ.ИнтернетЗаказПокупателя ТОГДА ""Интернет заказ"" ИНАЧЕ ""Заказ"" КОНЕЦ ТипДокумента
	|ИЗ
	|	Заказы Зак
	|
	//|ЛЕВОЕ СОЕДИНЕНИЕ 	РегистрСведений.ОтправленныеПисьмаПоЗаказам.СрезПоследних(, Заказ В(ВЫБРАТЬ ДокументЗаказ ИЗ Заказы)) Отпр
	//|ПО					Зак.ДокументЗаказ = Отпр.Заказ
	//|
	|ЛЕВОЕ СОЕДИНЕНИЕ 	РегистрНакопления.ЗаказыПокупателей.Обороты(,,, ЗаказПокупателя В(ВЫБРАТЬ ДокументЗаказ ИЗ Заказы)) ЗакПок
	|ПО					Зак.ДокументЗаказ = ЗакПок.ЗаказПокупателя
	|ЛЕВОЕ СОЕДИНЕНИЕ 	РегистрНакопления.ИнтернетЗаказПокупателя.Обороты(,,, ИнтернетЗаказ В(ВЫБРАТЬ ДокументЗаказ ИЗ Заказы)) ИнтЗак
	|ПО					Зак.ДокументЗаказ = ИнтЗак.ИнтернетЗаказ
	|
	|ГДЕ
	|
	//|	РАЗНОСТЬДАТ(ЕСТЬNULL(Отпр.ДатаОтправки, Зак.ДатаСнятияРезерва), &ПериодТек, ДЕНЬ) > &ПредупреждатьНеБолееДней И
	|	РАЗНОСТЬДАТ(&ПериодТек, Зак.ДатаСнятияРезерва, ДЕНЬ) <= &ПредупреждатьНеБолееДней И
	|	ЕСТЬNULL(ДокументЗаказ.Контрагент, &ПустойКонтрагент) <> &ПустойКонтрагент И
	|	ЕСТЬNULL(ДокументЗаказ.Контрагент.ОсновнойМенеджер.Почта, """") <> """"
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументЗаказ,
	|	Зак.ДатаСнятияРезерва,
	|	Почта
	//|	РАЗНОСТЬДАТ(ЕСТЬNULL(Отпр.ДатаОтправки, Зак.ДатаСнятияРезерва), &ПериодТек, ДЕНЬ)
	|
	|УПОРЯДОЧИТЬ ПО 	КонтрагентНаименование, ДатаСнятияРезерва
	|ИТОГИ ПО 			Кому");
	
	текДатаНачало = НачалоДня(ТекущаяДата());
	
	Запрос.УстановитьПараметр("Состояния", 					Заказы.ПолучитьСостоянияЗаказовКоторыеУчаствуютВАвтоСнятииРезервов());
	Запрос.УстановитьПараметр("ПериодТек", 					текДатаНачало);
	Запрос.УстановитьПараметр("ПустойСклад", 				Справочники.Склады.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойКонтрагент", 				Справочники.Контрагенты.ПустаяСсылка());
	Запрос.УстановитьПараметр("Период", 					ПериодПроверки);
	Запрос.УстановитьПараметр("ПредупреждатьНеБолееДней", 	ОповещенияеОСнятииРезерваЗа_Дней);
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Пока Выборка.Следующий() Цикл
		
		ТекстПисьма	= "";
		Счетчик 	= 0;
		
		ВыборкаЗаказ = Выборка.Выбрать();
		Пока ВыборкаЗаказ.Следующий() Цикл Счетчик = Счетчик + 1;
			
			ВрСтрока = ?(Счетчик % 2, СтрокаВПисьме_1, СтрокаВПисьме_2);
			
			ВрСтрока = СтрЗаменить(ВрСтрока, "%Документ%", 	ВыборкаЗаказ.ТипДокумента);
			ВрСтрока = СтрЗаменить(ВрСтрока, "%Номер%", 	ВыборкаЗаказ.Номер);
			ВрСтрока = СтрЗаменить(ВрСтрока, "%Дата%", 		Формат(ВыборкаЗаказ.Дата, "ДЛФ = Д"));
			ВрСтрока = СтрЗаменить(ВрСтрока, "%Контрагент%", 	ВыборкаЗаказ.Контрагент);
			ВрСтрока = СтрЗаменить(ВрСтрока, "%Сумма%", 	ВыборкаЗаказ.Сумма);
			//ВрСтрока = СтрЗаменить(ВрСтрока, "%ДатаСнятияРезерва%", "откл. резерв " + Формат(Выборка.ДатаРезерва,  "ДЛФ = ДД"));
			
			//ВрСтрока = СтрЗаменить(ВрСтрока, "%ДатаСнятияРезерва%", ?(ВыборкаЗаказ.ДнейРезерва >= КоличествоДнейБезПредупреждения, "сегодня", "до " + Формат(ВыборкаЗаказ.ДатаРезерва + 86400 * КоличествоДнейРезервирования, "ДЛФ = ДД")));
			
			//ДатаСнятия 	= НачалоДня(ВыборкаЗаказ.ДатаРезерва) + 86400 * КоличествоДнейРезервирования;
			//ВрСтрока 	= СтрЗаменить(ВрСтрока, "%ДатаСнятияРезерва%", 
			//				?(ВыборкаЗаказ.ДнейРезерва >= КоличествоДнейБезПредупреждения, 
			//							"сегодня", 
			//							?(ДатаСнятия < текДата, "истек ", "до ") + Формат(ДатаСнятия, "ДЛФ = ДД")));
			
			ДнейПросрочки 	= НачалоДня(ВыборкаЗаказ.ДатаСнятияРезерва) - текДатаНачало;
			ВрСтрока 		= СтрЗаменить(ВрСтрока, "%ДатаСнятияРезерва%",  ?(ДнейПросрочки = 0, 
										"сегодня", 
										?(ДнейПросрочки < 0, "истек ", "до ") + Формат(ВыборкаЗаказ.ДатаСнятияРезерва, "ДЛФ = ДД")));
										
			ТекстПисьма = ТекстПисьма + ВрСтрока; КонецЦикла;
		
		Письмо = ОбщиеФункции.ОповеститьПоПочте(Выборка.Кому, ТемаПисьма, ЗаголовокПисьма+ТекстПисьма+ПодвалПисьма,Ложь,Перечисления.ТипыТекстовЭлектронныхПисем.HTML);
		
		// Зарегистрируем отправку
		
		ВыборкаЗаказ = Выборка.Выбрать();
		Пока ВыборкаЗаказ.Следующий() Цикл
		
			ЗаписьОтправки = РегистрыСведений.ОтправленныеПисьмаПоЗаказам.СоздатьМенеджерЗаписи();
			ЗаписьОтправки.Период 		= ТекущаяДата();
			ЗаписьОтправки.Заказ 		= ВыборкаЗаказ.ДокументРезерва;
			ЗаписьОтправки.Письмо 		= Письмо;
			ЗаписьОтправки.ДатаОтправки = ТекущаяДата();
			ЗаписьОтправки.Записать(); КонецЦикла; КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьТекстЗапросаПолученияСпискаЗаказовКСнятиюРезерва(ТолькоТоЧтоНужноСнимать = Ложь)
	
	// ТолькоТоЧтоНужноСнимать - если установить то вернет только те заказы которые нужно снимать
	//								если нет то в дополнение заказы по которым предупреждать
		 
	Возврат "
	
	// Список заказов
	
	|ВЫБРАТЬ 	РАЗЛИЧНЫЕ Рез.ДокументРезерва ДокументЗаказ
	|ПОМЕСТИТЬ 	РезервыДляСнятия
	|ИЗ			РегистрНакопления.ТоварыВРезерве.Остатки(&Период, НЕ ДокументРезерва ССЫЛКА Документ.ЗаказНаряд) Рез
	|
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыВРезерве.Остатки( ,НЕ ДокументРезерва ССЫЛКА Документ.ЗаказНаряд) РегСег
	|ПО
	|	Рез.ДокументРезерва = РегСег.ДокументРезерва
	|
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЗаказовТекущее Сос
	|ПО Рез.ДокументРезерва = Сос.Заказ
	|
	|ГДЕ	РегСег.КоличествоОстаток > 0 И
	|		Сос.Состояние В(&Состояния)  
	|;
	
	// Список заказов которым продлили резерв или есть уже собранные или в сборке
	
	//|ВЫБРАТЬ 	РАЗЛИЧНЫЕ Заказ, ДатаСнятияРезерва
	//|ПОМЕСТИТЬ 	ТоЧтоСниматьНеНадо
	//|ИЗ			РегистрСведений.ОтсрочкаСнятияРезервов.СрезПоследних КАК ОтсрочкаСнятияРезервов
	//|ГДЕ	ОтсрочкаСнятияРезервов.ДатаСнятияРезерва > &Период
	//|;
	
	 |ВЫБРАТЬ РАЗЛИЧНЫЕ Заказ, ДатаСнятияРезерва, 0 КАК Остаток
	 |ПОМЕСТИТЬ ТоЧтоСниматьНеНадо
	 |ИЗ        РегистрСведений.ОтсрочкаСнятияРезервов.СрезПоследних КАК ОтсрочкаСнятияРезервов
	 |ГДЕ ОтсрочкаСнятияРезервов.ДатаСнятияРезерва > &Период
	 |
	 |ОБЪЕДИНИТЬ
	 |
	 //|ВЫБРАТЬ РАЗЛИЧНЫЕ Заказ, ДОБАВИТЬКДАТЕ(&ПериодТек, ДЕНЬ, 1) , СобраноОстаток
	 //|ИЗ РегистрНакопления.СборкаЗаказа.Остатки(, Заказ В(ВЫБРАТЬ ДокументЗаказ ИЗ РезервыДляСнятия)) КАК СборкаЗаказаОстатки
	 |ВЫБРАТЬ РАЗЛИЧНЫЕ Заказ, ДОБАВИТЬКДАТЕ(&ПериодТек, ДЕНЬ, 1) , КоличествоОстаток СобраноОстаток
	 |ИЗ РегистрНакопления.ТоварыСобранные.Остатки(, Заказ В(ВЫБРАТЬ ДокументЗаказ ИЗ РезервыДляСнятия)) КАК СборкаЗаказаОстатки
	 |
	 |ОБЪЕДИНИТЬ
	 |
	 //|ВЫБРАТЬ РАЗЛИЧНЫЕ Заказ, ДОБАВИТЬКДАТЕ(&ПериодТек, ДЕНЬ, 1), ВСборкеОстаток
	 //|ИЗ РегистрНакопления.СборкаЗаказа.Остатки(, Заказ В(ВЫБРАТЬ ДокументЗаказ ИЗ РезервыДляСнятия)) КАК СборкаЗаказаОстатки;
	 |ВЫБРАТЬ РАЗЛИЧНЫЕ Заказ, ДОБАВИТЬКДАТЕ(&ПериодТек, ДЕНЬ, 1), КоличествоОстаток ВСборкеОстаток
	 |ИЗ РегистрНакопления.ТоварыВСборке.Остатки(, Заказ В(ВЫБРАТЬ ДокументЗаказ ИЗ РезервыДляСнятия)) КАК СборкаЗаказаОстатки;

	
	
	// Вычислим даты начала резерва
	
	|ВЫБРАТЬ	ДокументРезерва, МАКСИМУМ(Период) ДатаУстановкиРезерва
	|ПОМЕСТИТЬ	НачалоРезервов
	|ИЗ			РегистрНакопления.ТоварыВРезерве
	|ГДЕ		ДокументРезерва В(ВЫБРАТЬ ДокументЗаказ ИЗ РезервыДляСнятия) И
	|			НЕ Регистратор ССЫЛКА Документ.СнятиеРезерва
	|СГРУППИРОВАТЬ ПО ДокументРезерва;
	

	// Список актальных заказов которым снимать резерва
	
	|ВЫБРАТЬ	РезервыДляСнятия.ДокументЗаказ ДокументЗаказ, 
	|			ДатаУстановкиРезерва,
	|			РезервыДляСнятия.ДокументЗаказ.Контрагент.ОсновнойМенеджер.Почта Почта,
	|			ВЫБОР 
	|				КОГДА 	ЕСТЬNULL(ТоЧтоСниматьНеНадо.ДатаСнятияРезерва, ДОБАВИТЬКДАТЕ(ДатаУстановкиРезерва, ДЕНЬ, КонстСрок.Значение)) 
	|						> ДОБАВИТЬКДАТЕ(ДатаУстановкиРезерва, ДЕНЬ, КонстСрок.Значение)
	|				ТОГДА ЕСТЬNULL(ТоЧтоСниматьНеНадо.ДатаСнятияРезерва, ДОБАВИТЬКДАТЕ(ДатаУстановкиРезерва, ДЕНЬ, КонстСрок.Значение))
	|				ИНАЧЕ ДОБАВИТЬКДАТЕ(ДатаУстановкиРезерва, ДЕНЬ, КонстСрок.Значение)
	|			КОНЕЦ ДатаСнятияРезерва
	|
	|ПОМЕСТИТЬ 	ПредвЗаказы
	|ИЗ			РезервыДляСнятия КАК РезервыДляСнятия
	|
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ	НачалоРезервов НачРез
	|ПО						РезервыДляСнятия.ДокументЗаказ = НачРез.ДокументРезерва
	|		
	|ЛЕВОЕ СОЕДИНЕНИЕ 	ТоЧтоСниматьНеНадо КАК ТоЧтоСниматьНеНадо
	|ПО 					РезервыДляСнятия.ДокументЗаказ = ТоЧтоСниматьНеНадо.Заказ
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ	Константа.СрокРезервированияТовара КонстСрок ПО ИСТИНА;
	
	// Подсчет
	
	|ВЫБРАТЬ 	ДокументЗаказ, ДокументЗаказ.СпособРазмещенияБезЗаказа СпособРазмещенияБезЗаказа, ДатаУстановкиРезерва, Почта, ДатаСнятияРезерва,
	|			ВЫБОР КОГДА &Период < ДатаСнятияРезерва ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ НужноСнимать
	|
	|ПОМЕСТИТЬ 	Заказы
	|ИЗ			ПредвЗаказы
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ	Константа.ПредупреждатьОСнятииРезерваЗа КонстПредупр ПО ИСТИНА
	|
	|ГДЕ &ПериодТек >= " + ?(ТолькоТоЧтоНужноСнимать, "ДатаСнятияРезерва","ДОБАВИТЬКДАТЕ(ДатаСнятияРезерва, ДЕНЬ, -КонстПредупр.Значение)") + "
	|;";

КонецФункции

Процедура СнятьРезервы_ст() Экспорт
	//Если НЕ Константы.ВклАвтоматическоеСнятиеРезервов.Получить() Тогда
	//	ВызватьИсключение "Автоматическое снятие резервов выключено!";
	//	//Возврат 1;
	//КонецЕсли;
	//
	//КоличествоДнейРезервирования = Константы.СрокРезервированияТовара.Получить();
	//ПериодПроверки = НачалоДня(ТекущаяДата()) - 60*60*24*КоличествоДнейРезервирования;
	///////
	//Запрос = Новый Запрос;
	////РегистрНакопления.ТоварыВРезерве.ОстаткиИОбороты(, &Период, Запись, , ) КАК ТоварыВРезервеОстаткиИОбороты
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	ТоварыВРезервеОстатки.ДокументРезерва КАК ДокументЗаказ
	//			//   |	ТоварыВРезервеОстатки.Период КАК Период
	//               |ПОМЕСТИТЬ РезервыДляСнятия
	//               |ИЗ
	//			   |	РегистрНакопления.ТоварыВРезерве.Остатки(&Период, ) КАК ТоварыВРезервеОстатки
	//               |ГДЕ
	//               |	ТоварыВРезервеОстатки.КоличествоОстаток > 0
	//               |	И ТИПЗНАЧЕНИЯ(ТоварыВРезервеОстатки.ДокументРезерва) <> ТИП(Документ.ЗаказНаряд)
	//               |	И ТоварыВРезервеОстатки.ДокументРезерва <> НЕОПРЕДЕЛЕНО
	//               |;
	//               |
	//               |////////////////////////////////////////////////////////////////////////////////
	//               |ВЫБРАТЬ
	//               |	ОтсрочкаСнятияРезервов.Заказ
	//               |ПОМЕСТИТЬ ТоЧтоСниматьНеНадо
	//               |ИЗ
	//               |	РегистрСведений.ОтсрочкаСнятияРезервов КАК ОтсрочкаСнятияРезервов
	//               |ГДЕ
	//               |	ОтсрочкаСнятияРезервов.ДатаСнятияРезерва > &Период
	//               |;
	//			   
	//			   |ВЫБРАТЬ РАЗЛИЧНЫЕ ДокументРезерва
	//			   |ПОМЕСТИТЬ 	ЗаказыНаСегодня
	//               |ИЗ			РегистрНакопления.ТоварыВРезерве.Остатки
	//               |ГДЕ			КоличествоОстаток > 0 И
	//			   |			НЕ ДокументРезерва ССЫЛКА Документ.ЗаказНаряд И
	//               |			ДокументРезерва <> НЕОПРЕДЕЛЕНО
	//			   |;
	//			   
	//               |
	//               |////////////////////////////////////////////////////////////////////////////////
	//               |ВЫБРАТЬ
	//               |	РезервыДляСнятия.ДокументЗаказ
	//               |ИЗ
	//               |	РезервыДляСнятия КАК РезервыДляСнятия
	//			   |
	//			   |ВНУТРЕННЕЕ СОЕДИНЕНИЕ	ЗаказыНаСегодня СегЗак
	//			   |ПО						РезервыДляСнятия.ДокументЗаказ = СегЗак.ДокументРезерва
	//               |		
	//			   |ЛЕВОЕ СОЕДИНЕНИЕ 	ТоЧтоСниматьНеНадо КАК ТоЧтоСниматьНеНадо
	//               |ПО 					РезервыДляСнятия.ДокументЗаказ = ТоЧтоСниматьНеНадо.Заказ
	//			   |
	//			   |ГДЕ ТоЧтоСниматьНеНадо.Заказ ЕСТЬ NULL";
	//			   
	//Запрос.УстановитьПараметр("Период", КонецДня(ПериодПроверки));
	//Результат = Запрос.Выполнить().Выгрузить();
	//
	//Если Результат.Количество() Тогда
	//
	//	ДокументСнятияРезерва = Документы.СнятиеРезерва.СоздатьДокумент();
	//	ДокументСнятияРезерва.Заказы.Загрузить(Результат);
	//	ДокументСнятияРезерва.Дата = ТекущаяДата();
	//
	//	стрОшибки = "";
	//	Если Не ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(ДокументСнятияРезерва, РежимЗаписиДокумента.Проведение, стрОшибки) Тогда
	//		ВызватьИсключение стрОшибки; КонецЕсли; КонецЕсли;
	
КонецПроцедуры
Процедура СнятьРезервы_ст2() Экспорт  // отключен 17.11.2015

	Если НЕ Константы.ВклАвтоматическоеСнятиеРезервов.Получить() Тогда ВызватьИсключение "Автоматическое снятие резервов выключено!" КонецЕсли;
	
	//КоличествоДнейРезервирования 	= Константы.СниматьРезервыБезПредупрежденияСтарше.Получить();
	КоличествоДнейРезервирования 	= Константы.СрокРезервированияТовара.Получить();
	ПериодПроверки 					= НачалоДня(ТекущаяДата()) - 86400 * КоличествоДнейРезервирования;
	
	Запрос = Новый Запрос(
	
	// Список заказов у которых резерв на тот период
	
	ПолучитьТекстЗапросаПолученияСпискаЗаказовКСнятиюРезерва(Истина) + "
	
	// Вытащим все данные на текущий момент к списанию
	
	|ВЫБРАТЬ
	|	ЗаказПокупателя Заказ, Номенклатура, Цена, Упаковка, Размещение, ПроцентРучнойСкидки, ПроцентАвтоматическойСкидки, СтавкаНДС, Акция,
	|	КоличествоОстаток Количество, СуммаОстаток Сумма, NULL Заказчик
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(, ЗаказПокупателя В(ВЫБРАТЬ ДокументЗаказ ИЗ Заказы) И Размещение ССЫЛКА Справочник.Склады И Размещение <> &ПустойСклад)
	|ГДЕ
	|	КоличествоОстаток > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИнтернетЗаказ Заказ, Номенклатура, Цена, Упаковка, Размещение, ПроцентРучнойСкидки, ПроцентАвтоматическойСкидки, СтавкаНДС, Акция,
	|	КоличествоОстаток Количество, СуммаОстаток Сумма, NULL
	|ИЗ
	|	РегистрНакопления.ИнтернетЗаказПокупателя.Остатки(, ИнтернетЗаказ В(ВЫБРАТЬ ДокументЗаказ ИЗ Заказы) И Размещение ССЫЛКА Справочник.Склады И Размещение <> &ПустойСклад)
	|ГДЕ
	|	КоличествоОстаток > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВнутреннийЗаказ Заказ, Номенклатура, NULL, Упаковка, Размещение, NULL, NULL, NULL, NULL,
	|	КоличествоОстаток Количество, NULL, Заказчик
	|ИЗ
	|	РегистрНакопления.ВнутренниеЗаказы.Остатки(, ВнутреннийЗаказ В(ВЫБРАТЬ ДокументЗаказ ИЗ Заказы) И Размещение ССЫЛКА Справочник.Склады И Размещение <> &ПустойСклад)
	|ГДЕ
	|	КоличествоОстаток > 0
	|");
	
	текДатаНачало = НачалоДня(ТекущаяДата());

	Запрос.УстановитьПараметр("Состояния", 		Заказы.ПолучитьСостоянияЗаказовКоторыеУчаствуютВАвтоСнятииРезервов());
	Запрос.УстановитьПараметр("Период", 		КонецДня(ПериодПроверки));
	Запрос.УстановитьПараметр("ПустойСклад", 	Справочники.Склады.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПериодТек", 	    текДатаНачало);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Если Таблица.Количество() Тогда
		
		ДокументСнятияРезерва = Документы.СнятиеРезерва.СоздатьДокумент();
		ДокументСнятияРезерва.Товары.Загрузить(Таблица);
		ДокументСнятияРезерва.Дата = ТекущаяДата();
		
		стрОшибки = "";
		Если Не ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(ДокументСнятияРезерва, РежимЗаписиДокумента.Проведение, стрОшибки) Тогда
			ДокументСнятияРезерва.Записать(); // чтобы позырить
			ВызватьИсключение стрОшибки; КонецЕсли; КонецЕсли;
	
КонецПроцедуры
Процедура СнятьРезервы() Экспорт
	
	Если НЕ Константы.ВклАвтоматическоеСнятиеРезервов.Получить() Тогда ВызватьИсключение "Автоматическое снятие резервов выключено!" КонецЕсли;
	
	//КоличествоДнейРезервирования 	= Константы.СниматьРезервыБезПредупрежденияСтарше.Получить();
	КоличествоДнейРезервирования 	= Константы.СрокРезервированияТовара.Получить();
	ПериодПроверки 					= НачалоДня(ТекущаяДата()) - 86400 * КоличествоДнейРезервирования;
	
	Запрос = Новый Запрос(
	
	// Список заказов у которых резерв на тот период
	
	ПолучитьТекстЗапросаПолученияСпискаЗаказовКСнятиюРезерва(Истина) + "
	
	// Вытащим все данные на текущий момент к списанию
	
	//|ВЫБРАТЬ
	//|	ЗаказПокупателя Заказ, Номенклатура, Цена, Упаковка, Размещение, ПроцентРучнойСкидки, ПроцентАвтоматическойСкидки, СтавкаНДС, Акция,
	//|	КоличествоОстаток Количество, СуммаОстаток Сумма, NULL Заказчик
	//|
	//|ИЗ	
	//|	РегистрНакопления.ЗаказыПокупателей.Остатки(, ЗаказПокупателя В(ВЫБРАТЬ ДокументЗаказ ИЗ Заказы ГДЕ НЕ СпособРазмещенияБезЗаказа) И Размещение ССЫЛКА Справочник.Склады И Размещение <> &ПустойСклад)
	//|ГДЕ
	//|	КоличествоОстаток > 0
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	ИнтернетЗаказ Заказ, Номенклатура, Цена, Упаковка, Размещение, ПроцентРучнойСкидки, ПроцентАвтоматическойСкидки, СтавкаНДС, Акция,
	//|	КоличествоОстаток Количество, СуммаОстаток Сумма, NULL
	//|ИЗ
	//|	РегистрНакопления.ИнтернетЗаказПокупателя.Остатки(, ИнтернетЗаказ В(ВЫБРАТЬ ДокументЗаказ ИЗ Заказы ГДЕ НЕ СпособРазмещенияБезЗаказа) И Размещение ССЫЛКА Справочник.Склады И Размещение <> &ПустойСклад)
	//|ГДЕ
	//|	КоличествоОстаток > 0
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Рез.ДокументРезерва Заказ, Рез.Номенклатура Номенклатура, 0 Цена, Неопределено Упаковка, Рез.Размещение Размещение, 0 ПроцентРучнойСкидки, 0 ПроцентАвтоматическойСкидки, Неопределено СтавкаНДС, Неопределено Акция,
	|	Рез.КоличествоОстаток Количество, 0 Сумма, NULL Заказчик
	|ИЗ
	|	РегистрНакопления.ТоварыВРезерве.Остатки(, ДокументРезерва В(ВЫБРАТЬ ДокументЗаказ ИЗ Заказы ГДЕ НЕ ДокументЗаказ ССЫЛКА Документ.ВнутреннийЗаказ И СпособРазмещенияБезЗаказа)) Рез
	|
	|ГДЕ Рез.КоличествоОстаток >0
	|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	ВнутреннийЗаказ Заказ, Номенклатура, NULL, Упаковка, Размещение, NULL, NULL, NULL, NULL,
	//|	КоличествоОстаток Количество, NULL, Заказчик
	//|ИЗ
	//|	РегистрНакопления.ВнутренниеЗаказы.Остатки(, ВнутреннийЗаказ В(ВЫБРАТЬ ДокументЗаказ ИЗ Заказы) И Размещение ССЫЛКА Справочник.Склады И Размещение <> &ПустойСклад)
	//|ГДЕ
	//|	КоличествоОстаток > 0
	|");
	
	текДатаНачало = НачалоДня(ТекущаяДата());

	Запрос.УстановитьПараметр("Состояния", 		Заказы.ПолучитьСостоянияЗаказовКоторыеУчаствуютВАвтоСнятииРезервов());
	Запрос.УстановитьПараметр("Период", 		КонецДня(ПериодПроверки));
	Запрос.УстановитьПараметр("ПустойСклад", 	Справочники.Склады.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПериодТек", 	    текДатаНачало);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Если Таблица.Количество() Тогда
		
		ДокументСнятияРезерва = Документы.СнятиеРезерва.СоздатьДокумент();
		ДокументСнятияРезерва.Товары.Загрузить(Таблица);
		ДокументСнятияРезерва.Дата = ТекущаяДата();
		
		стрОшибки = "";
		Если Не ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(ДокументСнятияРезерва, РежимЗаписиДокумента.Проведение, стрОшибки) Тогда
			ДокументСнятияРезерва.Записать(); // чтобы позырить
			ВызватьИсключение стрОшибки; КонецЕсли; КонецЕсли;
	
КонецПроцедуры

// Задачи

Процедура ОбновлениеСтатусовВчерашнихЗадач() Экспорт
	
	РегистрыСведений.СрезЗадачПоДням.ОбновитьСтатусыВсехЗадач(НачалоДня(ТекущаяДата()) - 86400);
	
КонецПроцедуры


#Область Расчет_Среднего_Остатка

Функция ПолучитьТаблицуОстатковНаДень(НачалоПериода = '00010101', КонецПериода= '00010101')
	
	Товары = Новый ТаблицаЗначений;
	Товары.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	Товары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Товары.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	Товары.Колонки.Добавить("КоличествоСреднее", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,3)));
	Товары.Колонки.Добавить("СреднийРезерв", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,3)));
	Товары.Колонки.Добавить("НачальныйОстаток", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,3)));
	Товары.Колонки.Добавить("КонечныйОстаток", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,3)));
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|	ВЫБРАТЬ
	|    Номенклатура 	КАК Номенклатура,
	|	 Склад  		КАК Склад,
	|    Период 		КАК Дата,
	|	 КоличествоНачальныйОстаток	КАК Количество,
	|	 КоличествоКонечныйОстаток 	КАК КонечныйОстаток
	|ИЗ
	|   РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, День, ДвиженияИГраницыПериода)
	|   ИТОГИ
	|   СУММА(Количество)
	|ПО
	|     Номенклатура, Склад, Дата ПЕРИОДАМИ(ДЕНЬ, &НачалоПериода, &КонецПериода)
	|";
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	
	Результат = Запрос.Выполнить();
	КолДней =(КонецДня(КонецПериода)+1 - НачалоДня(НачалоПериода))/86400; //считаем количество полных дней в периоде
	
	ВыборкаПериод = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Номенклатура"); 
	Пока ВыборкаПериод.Следующий() Цикл 
		
		ВыборкаСклад = ВыборкаПериод.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Склад");
		Пока ВыборкаСклад.Следующий() Цикл Сум = 0; НачальныйОстаток = 0; КонечныйОстаток = 0;
			
			Выборка = ВыборкаСклад.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Дата", "ВСЕ"); Ид = 0;
			Пока Выборка.Следующий() Цикл  Сум = Сум + Выборка.Количество; 
				Если Выборка.Дата = НачалоМесяца(Выборка.Дата) Тогда НачальныйОстаток = Выборка.Количество;
				ИначеЕсли Выборка.Дата = НачалоДня(КонецМесяца(Выборка.Дата)) Тогда КонечныйОстаток = Выборка.КонечныйОстаток; КонецЕсли;
					
				КонецЦикла;  
			
			НовСтрока = Товары.Добавить();	ЗаполнитьЗначенияСвойств(НовСтрока, ВыборкаСклад); 
			НовСтрока.КоличествоСреднее = Сум/КолДней; 
			НовСтрока.Период = НачалоПериода;
			НовСтрока.НачальныйОстаток = НачальныйОстаток;
			НовСтрока.КонечныйОстаток = КонечныйОстаток;
			
		КонецЦикла; КонецЦикла;
		
	// резервы
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = "
	//|	ВЫБРАТЬ
	//|    Номенклатура 	КАК Номенклатура,
	//|	 Размещение  	КАК Склад,
	//|    Период 		КАК Дата,
	//|	 КоличествоНачальныйОстаток	КАК Количество,
	//|	 КоличествоКонечныйОстаток 	КАК КонечныйОстаток
	//|ИЗ
	//|   РегистрНакопления.ТоварыВРезерве.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, День, ДвиженияИГраницыПериода)
	//|   ИТОГИ
	//|   СУММА(Количество)
	//|ПО
	//|     Номенклатура, Склад, Дата ПЕРИОДАМИ(ДЕНЬ, &НачалоПериода, &КонецПериода)
	//|";
	//
	//Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	//Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	//
	//Результат = Запрос.Выполнить();
	//КолДней =(КонецДня(КонецПериода)+1 - НачалоДня(НачалоПериода))/86400; //считаем количество полных дней в периоде
	//
	//ВыборкаПериод = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Номенклатура"); 
	//Пока ВыборкаПериод.Следующий() Цикл 
	//	
	//	ВыборкаСклад = ВыборкаПериод.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Склад");
	//	Пока ВыборкаСклад.Следующий() Цикл Сум = 0; НачальныйОстаток = 0; КонечныйОстаток = 0;
	//		
	//		Выборка = ВыборкаСклад.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Дата", "ВСЕ"); Ид = 0;
	//		Пока Выборка.Следующий() Цикл  Сум = Сум + Выборка.Количество; 
	//			Если Выборка.Дата = НачалоМесяца(Выборка.Дата) Тогда НачальныйОстаток = Выборка.Количество;
	//			ИначеЕсли Выборка.Дата = НачалоДня(КонецМесяца(Выборка.Дата)) Тогда КонечныйОстаток = Выборка.КонечныйОстаток; КонецЕсли;
	//				
	//			КонецЦикла;  
	//		
	//		нСтроки = Товары.НайтиСтроки(Новый Структура("Номенклатура, Склад, Период", ВыборкаСклад.Номенклатура, ВыборкаСклад.Склад, НачалоПериода));
	//		Если нСтроки.Количество() Тогда
	//			НовСтрока = нСтроки[0];
	//		Иначе
	//			НовСтрока = Товары.Добавить();	ЗаполнитьЗначенияСвойств(НовСтрока, ВыборкаСклад); 
	//			НовСтрока.Период = НачалоПериода;

	//		КонецЕсли;
	//		
	//		НовСтрока.СреднийРезерв = Сум/КолДней; 
	//		
	//	КонецЦикла; КонецЦикла;
	//
	//	

	Возврат Товары;
КонецФункции


Функция ПолучитьТаблицуСоСреднимОстаткомЗаМесяц(НачалоПериода = '00010101', КонецПериода= '00010101')
	
	Товары = Новый ТаблицаЗначений;
	Товары.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	Товары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Товары.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	Товары.Колонки.Добавить("КоличествоСреднее", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,3)));
	Товары.Колонки.Добавить("СреднийРезерв", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,3)));
	Товары.Колонки.Добавить("НачальныйОстаток", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,3)));
	Товары.Колонки.Добавить("КонечныйОстаток", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,3)));
	Товары.Колонки.Добавить("ДнейНаОстаткеМеньшеМинимального", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(10,0)));
	
	
	// запрос формирует таблицу с остатками на интервалы дат, в период которых остаток товара не менялся, и рассчитывает по ней средний остаток 
	// таблица для одного товара и склада выглядит примерно таким образом:
	//
	//  | Номенклатура 	| Склад | КоличествоОстаток | НачалоПериода | КонецПериода |  ДнейНаОстатке |
	//	--------------------------------------------------------------------------------------------
	//	| Товар1		| Скад2	|	2шт				| 1.03.2016		| 11.03.2016   |	10 дней		| с 01 марта по 11 марта (10 дней) товара было на складе 2 штуки
	//	| Товар1		| Скад2	|	0шт				| 11.03.2016	| 17.03.2016   |	6  дней		|
	//	| Товар1		| Скад2	|	7шт				| 17.03.2016	| 18.03.2016   |	1  день		|
	//	| Товар1		| Скад2	|	5шт				| 18.03.2016	| 01.04.2016   |	14 дней		|
	//
	//  где 1.03.2016 - начало периода, а 01.04.2016 - конец периода
	//
	// Итого получается (2*10 + 0*6 + 1*7 + 5*14)/31 = 3,13 - средний остаток
	// 31 - количество дней в периоде
	//
	
	Запрос = Новый Запрос;
	Запрос.Текст = " 
			|   ВЫБРАТЬ Номенклатура, Склад, СУММА(ДнейНаОстатке*Остаток)/&КоличествоДней КоличествоСреднее, (СУММА(ДнейНаОстаткеМеньшеМинимального) + &КоличествоДней - СУММА(ДнейНаОстатке)) ДнейНаОстаткеМеньшеМинимального
			|   ПОМЕСТИТЬ ТаблицаСредниеОстатки 
			|	ИЗ (
			|    	ВЫБРАТЬ Таб.Номенклатура, Таб.Склад, Таб.Остаток, Таб.ПериодНач, Таб.ПериодКон, РАЗНОСТЬДАТ(Таб.ПериодНач, Таб.ПериодКон, День) ДнейНаОстатке, ВЫБОР КОГДА Таб.Остаток < ЕСТЬNULL(РегМин.МинимальныйОстаток, 1) ТОГДА РАЗНОСТЬДАТ(Таб.ПериодНач, Таб.ПериодКон, День) ИНАЧЕ 0 КОНЕЦ ДнейНаОстаткеМеньшеМинимального
			|    	ИЗ  
			|			( ВЫБРАТЬ Таб.Номенклатура Номенклатура, Таб.Размещение Склад, Таб.Количество Остаток, Таб.Период ПериодНач,  
			|       		ВЫБОР 
			|        		КОГДА 	МИНИМУМ(Таб1.Период) ЕСТЬ NULL 
			|        		ТОГДА 	&КонецПериода
			|        		ИНАЧЕ	МИНИМУМ(Таб1.Период) 
			|      			КОНЕЦ ПериодКон
			|      	
			|			ИЗ 
			|				(ВЫБРАТЬ Номенклатура, Склад Размещение, Период, КоличествоКонечныйОстаток Количество 
			|				 ИЗ РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, День, ДвиженияИГраницыПериода)
			|				 ) Таб
			|				ЛЕВОЕ СОЕДИНЕНИЕ 
			|	
			|				(ВЫБРАТЬ Номенклатура, Склад Размещение, Период, КоличествоКонечныйОстаток Количество
			|				 ИЗ РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, День, ДвиженияИГраницыПериода)
			|			 	) Таб1 
			|			
			|			ПО Таб.Номенклатура = Таб1.Номенклатура И Таб.Размещение = Таб1.Размещение И Таб.Период < Таб1.Период
			|	 	
			|	 		СГРУППИРОВАТЬ ПО Таб.Номенклатура, Таб.Размещение, Таб.Период, Таб.Количество
			|			) Таб
			|			ЛЕВОЕ СОЕДИНЕНИЕ 
			|				РегистрСведений.МинимальныеОстаткиНаСкладе.СрезПоследних(&НачалоПериода) РегМин
			|				ПО Таб.Номенклатура = РегМин.Товар И Таб.Склад = РегМин.Склад
			|	 	) ТабИтог
			|	 СГРУППИРОВАТЬ ПО Номенклатура, Склад
			|;
			
			// таким же образом рассчитываем средний резерв
			
			|   ВЫБРАТЬ Номенклатура, Склад, СУММА(ДнейНаОстатке*Остаток)/&КоличествоДней КоличествоСреднее
			|   ПОМЕСТИТЬ ТаблицаСредниеРезервы 
			|	ИЗ (
			|    	ВЫБРАТЬ Номенклатура, Склад, Остаток, ПериодНач, ПериодКон, РАЗНОСТЬДАТ(ПериодНач,ПериодКон, День) ДнейНаОстатке
			|    	ИЗ  
			|			( ВЫБРАТЬ Таб.Номенклатура Номенклатура, Таб.Размещение Склад, Таб.Количество Остаток, Таб.Период ПериодНач,  
			|       		ВЫБОР 
			|        		КОГДА 	МИНИМУМ(Таб1.Период) ЕСТЬ NULL 
			|        		ТОГДА 	&КонецПериода
			|        		ИНАЧЕ	МИНИМУМ(Таб1.Период) 
			|      			КОНЕЦ ПериодКон
			|      	
			|			ИЗ 
			|				(ВЫБРАТЬ Номенклатура, Размещение, Период, КоличествоКонечныйОстаток Количество 
			|				 ИЗ РегистрНакопления.ТоварыВРезерве.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, День, ДвиженияИГраницыПериода)
			|				 ) Таб
			|				ЛЕВОЕ СОЕДИНЕНИЕ 
			|	
			|				(ВЫБРАТЬ Номенклатура, Размещение, Период, КоличествоКонечныйОстаток Количество
			|				 ИЗ РегистрНакопления.ТоварыВРезерве.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, День, ДвиженияИГраницыПериода)
			|			 	) Таб1 
			|			
			|			ПО Таб.Номенклатура = Таб1.Номенклатура И Таб.Размещение = Таб1.Размещение И Таб.Период < Таб1.Период
			|	 	
			|	 		СГРУППИРОВАТЬ ПО Таб.Номенклатура, Таб.Размещение, Таб.Период, Таб.Количество
			|			) Таб
			|	 	) ТабИтог
			|	 СГРУППИРОВАТЬ ПО Номенклатура, Склад
			|;
			
			// получаем итоговую таблицу со средним остатком и средним резервом из ранее рассчитанных данных и еще начальный и конечный остаток
			
			|ВЫБРАТЬ             	
			|	&НачалоПериода	 				Период, 
			|	Таб.Номенклатура 				Номенклатура, 
			|	Таб.Склад 						Склад, 
			|	Таб.КоличествоСреднее 			КоличествоСреднее,
			|	Таб.ДнейНаОстаткеМеньшеМинимального				ДнейНаОстаткеМеньшеМинимального,
			|	ЕСТЬNULL(Рез.КоличествоСреднее,0)				СреднийРезерв, 
			|	ЕСТЬNULL(Рег.КоличествоНачальныйОстаток, 0) 	НачальныйОстаток, 
			|	ЕСТЬNULL(Рег.КоличествоКонечныйОстаток, 0) 		КонечныйОстаток
			|ИЗ 
			|	ТаблицаСредниеОстатки Таб 
			|ЛЕВОЕ СОЕДИНЕНИЕ 
			|	ТаблицаСредниеРезервы Рез 
			|	ПО Таб.Номенклатура = Рез.Номенклатура И Таб.Склад = Рез.Склад
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Месяц) Рег
			|	ПО Таб.Номенклатура = Рег.Номенклатура И Таб.Склад = Рег.Склад И Рег.Период = &НачалоПериода 
			|	
			|";
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода+1);
	Запрос.УстановитьПараметр("КоличествоДней", (КонецПериода+1-НачалоПериода)/86400);
	
	//Выборка = Запрос.Выполнить().Выбрать();
	//Рег = РегистрыСведений.СреднийОстаток;
	//Пока Выборка.Следующий() Цикл
	//	Запись = Рег.СоздатьМенеджерЗаписи();	
	//	Запись.Период = Выборка.Период;
	//	Запись.Номенклатура = Выборка.Номенклатура;
	//	Запись.Склад = Выборка.Склад;
	//	Запись.Прочитать();
	//	Если Запись.Выбран() Тогда Запись.КоличествоСреднее2 = Выборка.КоличествоСреднее;
	//	Запись.СреднийРезерв2 = Выборка.СреднийРезерв;
	//	Запись.НачальныйОстаток1 = Выборка.НачальныйОстаток;
	//	Запись.КонечныйОстаток1 = Выборка.КонечныйОстаток;
	//	Запись.Записать(); КонецЕсли;
	//КонецЦикла;	
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура РассчитатьСреднийОстаток(НачалоПериода = '00010101', КонецПериода= '00010101') Экспорт
	
	Если НачалоПериода 	= '00010101' И КонецПериода= '00010101' Тогда
		КонецПериода 	= КонецДня(ТекущаяДата());
		НачалоПериода 	= ДобавитьМесяц(КонецПериода, -1) + 1;
	КонецЕсли;
	
	// разбиваем период на месяца
	Запрос = Новый Запрос("ВЫБРАТЬ НАЧАЛОПЕРИОДА(Дата, МЕСЯЦ) НачалоПериода ИЗ РегистрСведений.РабочиеДни ГДЕ Дата МЕЖДУ &НачалоПериода И &КонецПериода СГРУППИРОВАТЬ ПО НАЧАЛОПЕРИОДА(Дата, МЕСЯЦ)");
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Таблица = ПолучитьТаблицуСоСреднимОстаткомЗаМесяц(Выборка.НачалоПериода, КонецМесяца(Выборка.НачалоПериода));
		//Таблица = ПолучитьТаблицуОстатковНаДень(Выборка.НачалоПериода, КонецМесяца(Выборка.НачалоПериода));

		НаборЗаписей = РегистрыСведений.СреднийОстаток.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(Выборка.НачалоПериода);
		//НаборЗаписей.Прочитать();
		НаборЗаписей.Загрузить(Таблица);
		
		Попытка
			НаборЗаписей.Записать(Истина);
		Исключение
			Ош = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("Не удалось рассчитать средний остаток за текущий месяц", УровеньЖурналаРегистрации.Ошибка, , ,Ош);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры
#КонецОбласти

#Область Расчет_Среднего_Остатка_ВСебестоимости

Функция ПолучитьТаблицуСоСреднимОстаткомВСебестоимостиЗаМесяц(НачалоПериода = '00010101', КонецПериода= '00010101')
	
	Товары = Новый ТаблицаЗначений;
	Товары.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	Товары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Товары.Колонки.Добавить("Поставщик", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	Товары.Колонки.Добавить("СреднийОстаток", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,3)));
	
	// запрос формирует таблицу с остатками на интервалы дат, в период которых остаток товара не менялся, и рассчитывает по ней средний остаток 
	// таблица для одного товара и склада выглядит примерно таким образом:
	//
	//  | Номенклатура 	| Склад | КоличествоОстаток | НачалоПериода | КонецПериода |  ДнейНаОстатке |
	//	--------------------------------------------------------------------------------------------
	//	| Товар1		| Скад2	|	2шт				| 1.03.2016		| 11.03.2016   |	10 дней		| с 01 марта по 11 марта (10 дней) товара было на складе 2 штуки
	//	| Товар1		| Скад2	|	0шт				| 11.03.2016	| 17.03.2016   |	6  дней		|
	//	| Товар1		| Скад2	|	7шт				| 17.03.2016	| 18.03.2016   |	1  день		|
	//	| Товар1		| Скад2	|	5шт				| 18.03.2016	| 01.04.2016   |	14 дней		|
	//
	//  где 1.03.2016 - начало периода, а 01.04.2016 - конец периода
	//
	// Итого получается (2*10 + 0*6 + 1*7 + 5*14)/31 = 3,13 - средний остаток
	// 31 - количество дней в периоде
	//
	
	Запрос = Новый Запрос;
	Запрос.Текст = " 
			|   ВЫБРАТЬ 
			|		&НачалоПериода	КАК Период,
			|		Номенклатура, 
			|		Поставщик, 
			|		СУММА(РАЗНОСТЬДАТ(ПериодНач, ПериодКон, День)*Остаток)/&КоличествоДней КАК СреднийОстаток
			|	ИЗ
			|		( ВЫБРАТЬ Таб.Номенклатура Номенклатура, Таб.Поставщик Поставщик, Таб.Сумма Остаток, Таб.Период ПериодНач,  
			|       	ВЫБОР 
			|       		КОГДА 	МИНИМУМ(Таб1.Период) ЕСТЬ NULL 
			|       		ТОГДА 	&КонецПериода
			|       		ИНАЧЕ	МИНИМУМ(Таб1.Период) 
			|      		КОНЕЦ ПериодКон
			|      	
			|			ИЗ 
			|				(ВЫБРАТЬ Номенклатура, Поставщик, Период, СуммаКонечныйОстаток Сумма 
			|				 ИЗ РегистрНакопления.ПартииТоваров.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, День, ДвиженияИГраницыПериода)
			|				 ) Таб
			|				ЛЕВОЕ СОЕДИНЕНИЕ 
			|	
			|				(ВЫБРАТЬ Номенклатура, ПОставщик, Период, СуммаКонечныйОстаток Сумма
			|				 ИЗ РегистрНакопления.ПартииТоваров.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, День, ДвиженияИГраницыПериода)
			|			 	) Таб1 
			|			
			|			ПО Таб.Номенклатура = Таб1.Номенклатура И Таб.Поставщик = Таб1.Поставщик И Таб.Период < Таб1.Период
			|	 	
			|	 		СГРУППИРОВАТЬ ПО Таб.Номенклатура, Таб.Поставщик, Таб.Период, Таб.Сумма
			|			) ТабИтог
			|	 СГРУППИРОВАТЬ ПО Номенклатура, Поставщик
			|";
			
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода+1);
	Запрос.УстановитьПараметр("КоличествоДней", (КонецПериода+1-НачалоПериода)/86400);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура РассчитатьСреднийОстатокВСебестоимости(НачалоПериода = '00010101', КонецПериода= '00010101') Экспорт
	
	Если НачалоПериода 	= '00010101' И КонецПериода= '00010101' Тогда
		КонецПериода 	= КонецДня(ТекущаяДата());
		НачалоПериода 	= ДобавитьМесяц(КонецПериода, -1) + 1;
	КонецЕсли;
	
	// разбиваем период на месяца
	Запрос = Новый Запрос("ВЫБРАТЬ НАЧАЛОПЕРИОДА(Дата, МЕСЯЦ) НачалоПериода ИЗ РегистрСведений.РабочиеДни ГДЕ Дата МЕЖДУ &НачалоПериода И &КонецПериода СГРУППИРОВАТЬ ПО НАЧАЛОПЕРИОДА(Дата, МЕСЯЦ)");
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Таблица = ПолучитьТаблицуСоСреднимОстаткомВСебестоимостиЗаМесяц(Выборка.НачалоПериода, КонецМесяца(Выборка.НачалоПериода));

		НаборЗаписей = РегистрыСведений.СреднийОстатокВСебестоимости.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(Выборка.НачалоПериода);
		//НаборЗаписей.Прочитать();
		НаборЗаписей.Загрузить(Таблица);
		
		Попытка
			НаборЗаписей.Записать(Истина);
		Исключение
			Ош = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("Не удалось рассчитать средний остаток в себестоимости за текущий месяц", УровеньЖурналаРегистрации.Ошибка, , ,Ош);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры
#КонецОбласти

Процедура ОтправкаПисемПоРассмотрениюЗаявкиНаСогласование() Экспорт
	
	// выбираем все заявки со статусом "Открыт" и кому еще не слали письмо-оповещение о принятии заявки в системе
	
	Запрос = Новый Запрос("ВЫБРАТЬ Пользователь, Номенклатура, Номенклатура.Артикул Артикул 
	|ИЗ РегистрСведений.ЗапросНаСогласованиеТовара 
	|ГДЕ Оповещение = &ПустоеПисьмо И Статус = 1
	|ИТОГИ ПО Пользователь");
	
	Запрос.УстановитьПараметр("ПустоеПисьмо",  	Документы.Письмо.ПустаяСсылка());
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаПолучатель = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	URLИнтернетМагазин = Константы.ПутьИнтернетМагазин.Получить();
			
	Пока ВыборкаПолучатель.Следующий() Цикл
		
		ТекстПисьмаТело = "<table>";
		
		Получатель = ВыборкаПолучатель.Пользователь;
		
		Если ТипЗнч(Получатель) = Тип("СправочникСсылка.ПользователиИнтернет") Тогда
			
			Кому = Получатель.ЭлектроннаяПочта;
			ТекстПисьмаЗаголовок = "Уважаемый(ая) " + Получатель + "!" + "<BR><BR> От Вас поступил запрос на согласование нового инструмента и внесения его в прайс-лист. 
			|В ближайшее время, мы его обработаем и вышлем в адрес коммерческой службы предложение с просьбой согласовать в закупку следующие позиции:<BR>";	
			
		КонецЕсли;		
	 
		ВыборкаТовары = ВыборкаПолучатель.Выбрать();               
		 
		Пока ВыборкаТовары.Следующий() Цикл
			Товар = ВыборкаТовары.Номенклатура;
		
			ТекстПисьмаТело = ТекстПисьмаТело + "<tr><td>" + Товар.Артикул + "</td><td><A style=""COLOR: rgb(0,0,204)"" href='http://" + URLИнтернетМагазин + "/tovar/" + НРег(Товар.alies) + "'>"+ Товар +"</A></td></tr>";
		КонецЦикла;
	
	   	ТемаПисьма = "Заявка на согласование товара поступила в очередь на рассмотрение"; 

		ТекстПисьма = ТекстПисьмаЗаголовок + ТекстПисьмаТело + "</table>" + КэшируемыеФункции.ПолучитьПодвалПисьма();
		
		НачатьТранзакцию();
		
		Письмо = ОбщиеФункции.ОповеститьПоПочте(Кому, ТемаПисьма, ТекстПисьма, Ложь, Перечисления.ТипыТекстовЭлектронныхПисем.HTML);
		
		Если Письмо = Неопределено Тогда
			ЗаписьЖурналаРегистрации("Данные.Запись", УровеньЖурналаРегистрации.Ошибка, , , 
				ОписаниеОшибки() + "
				|получатель = " + Получатель + "
				|товар = " + Товар);
			
			ОтменитьТранзакцию();
			Возврат; 
		КонецЕсли;
		
		ВыборкаТовары.Сбросить(); 
		Пока ВыборкаТовары.Следующий() Цикл
			
			Товар = ВыборкаТовары.Номенклатура;
			
			ТекущийЗапрос = РегистрыСведений.ЗапросНаСогласованиеТовара.СоздатьНаборЗаписей();
			ТекущийЗапрос.Отбор.Пользователь.Установить(Получатель);
			ТекущийЗапрос.Отбор.Номенклатура.Установить(Товар);
			ТекущийЗапрос.Прочитать();
			//ЗаполнитьЗначенияСвойств(ТекущийЗапрос, ВыборкаТовары);
			Для Каждого Строка ИЗ ТекущийЗапрос Цикл
				Если Строка.Оповещение.Пустая() И Строка.Статус = 1 Тогда
					Строка.Оповещение = Письмо; КонецЕсли; КонецЦикла;

			Попытка
				ТекущийЗапрос.Записать();
			Исключение
				ЗаписьЖурналаРегистрации("Данные.Запись", УровеньЖурналаРегистрации.Ошибка, , , 
				ОписаниеОшибки());
				ОтменитьТранзакцию();
				Возврат;
			КонецПопытки;
		
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	КонецЦикла;
КонецПроцедуры

Процедура РасчетФактическихДанныхБюджетирования(ДатаНачала = '00010101', ДатаОкончания = '00010101') Экспорт
	
	Если ДатаНачала = '00010101' И ДатаОкончания= '00010101' Тогда
	
		ДатаНачала = Константы.ДатаЗапретаИзменений.Получить();
		ДатаОкончания = КонецМесяца(ТекущаяДата());
	КонецЕсли;
	
	Если ДатаНачала >= ДатаОкончания Тогда 
		ЗаписьЖурналаРегистрации("Не удалось рассчитать фактические данные бюджетирования", УровеньЖурналаРегистрации.Ошибка, , ,"Некорректные даты");
		Возврат; КонецЕсли;
	
	// разбиваем период на года
	Запрос = Новый Запрос("ВЫБРАТЬ НАЧАЛОПЕРИОДА(Дата, ГОД) НачалоПериода ИЗ РегистрСведений.РабочиеДни ГДЕ Дата МЕЖДУ &НачалоПериода И &КонецПериода СГРУППИРОВАТЬ ПО НАЧАЛОПЕРИОДА(Дата, ГОД)");
	Запрос.УстановитьПараметр("НачалоПериода", 	ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода", 	ДатаОкончания);
	ВыборкаПериод = Запрос.Выполнить().Выбрать();	
	
	// для каждого года формируем документы
	Пока ВыборкаПериод.Следующий() Цикл
		
		ГодНачало = ВыборкаПериод.НачалоПериода;
		ГодКонец = ?(КонецГода(ВыборкаПериод.НачалоПериода) < ДатаОкончания, КонецГода(ВыборкаПериод.НачалоПериода), ДатаОкончания);
		
		Запрос = Новый Запрос("ВЫБРАТЬ Ссылка КАК Отдел ИЗ Справочник.Отделы  ГДЕ НЕ ПометкаУдаления ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ &ПустойОтдел");
		Запрос.УстановитьПараметр("ПустойОтдел", Справочники.Отделы.ПустаяСсылка());
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		// для каждого отдела формируем документы
		Пока Выборка.Следующий() Цикл
			
			// ищем, нет ли за такой же год и отдел документов
			Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка ИЗ Документ.ФактическиеДанныеБюджетирования ГДЕ Дата = &Дата И Отдел = &Отдел И НЕ ПометкаУдаления");
			Запрос.УстановитьПараметр("Дата", 	ГодНачало);
			Запрос.УстановитьПараметр("Отдел", 	Выборка.Отдел);
			
			ВыборкаДок = Запрос.Выполнить().Выбрать();
			Если ВыборкаДок.Следующий() Тогда
				
				НовДок = ВыборкаДок.Ссылка.ПолучитьОбъект();
				Если НовДок = Неопределено Тогда 
					стрОшибки = "Отдел: " + Строка(Выборка.Отдел) + "; Период: " + Строка(ГодНачало) + " - " + Строка(ГодКонец) + ".Не удалось получить объект по ссылке";
					ЗаписьЖурналаРегистрации("Не удалось рассчитать фактические данные бюджетирования", УровеньЖурналаРегистрации.Ошибка, , ,стрОшибки);
					Продолжить;
				КонецЕсли;
				
			Иначе
				НовДок = Документы.ФактическиеДанныеБюджетирования.СоздатьДокумент();
				НовДок.Дата 	= ГодНачало;
				НовДок.Отдел	= Выборка.Отдел;
			КонецЕсли;
			
			// формируем/обновляем данные
			
			НовДок.ДатаНачала	 = ГодНачало;
			НовДок.ДатаОкончания = КонецГода(ГодКонец);
			НовДок.Комментарий 	 = "Автоматический расчет от " + Формат(ТекущаяДата(), "ДЛФ=DT"); 
			
			НовДок.Показатели.Загрузить(Документы.ФактическиеДанныеБюджетирования.ПолучитьФактическиеДанные(ГодНачало, ГодКонец, Выборка.Отдел));
			Если НЕ НовДок.Показатели.Количество() Тогда
				Продолжить;
			КонецЕсли;
			
			стрОшибки = "Отдел: " + Строка(Выборка.Отдел) + "; Период: " + Строка(ГодНачало) + " - " + Строка(ГодКонец);
			Если НЕ ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(НовДок, РежимЗаписиДокумента.Проведение,стрОшибки,Ложь) Тогда
					ЗаписьЖурналаРегистрации("Не удалось рассчитать фактические данные бюджетирования", УровеньЖурналаРегистрации.Ошибка, , ,стрОшибки); 
					Продолжить;
			КонецЕсли;

			
			КонецЦикла;
	КонецЦикла;
КонецПроцедуры

#Область Разнесение_Оплат_по_Инвойсам

Процедура РаспределениеОплатПоставщикуПоИнвойсам() Экспорт
		ТекстЗапроса=
	"  
	//выбираем все неразнесенные по инвойсам Оплаты
	|ВЫБРАТЬ
	|	Период,
	|	Регистратор КАК Оплата,
	|	Контрагент,
	|	ЗаказПоставщику,
	|	Сумма 	СуммаОплаты
	|ПОМЕСТИТЬ НеразнесенныеОплаты
	|ИЗ
	|	РегистрНакопления.ДолгиПоИнвойсам 
	|
	|ГДЕ
	|	ВидДвижения = Значение(ВидДвиженияНакопления.Расход) И Сумма>0 И
	|   НЕ 	ЗаказПоставщику = ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка) И
	| 		Инвойс = ЗНАЧЕНИЕ(Документ.Инвойс.ПустаяСсылка)
	|;
	//выбираем все висящие долги по инвойсам (не пустым)
	| ВЫБРАТЬ 
	|	Контрагент,
	|	ЗаказПоставщику,
	|	Инвойс,
	|	СуммаОстаток СуммаДолг
	|ПОМЕСТИТЬ Долги
	|ИЗ
	|	РегистрНакопления.ДолгиПоИнвойсам.Остатки
	|ГДЕ
	|  	СуммаОстаток>0 И
	|   НЕ ЗаказПоставщику = ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка) И
	| 	НЕ Инвойс = ЗНАЧЕНИЕ(Документ.Инвойс.ПустаяСсылка)
	|;
	
	// выбираем все неразнесенные оплаты на инвойсам по которым висит долг 
	|ВЫБРАТЬ
	|	Период,Оплата,Контрагент,ЗаказПоставщику,Сумма(СуммаОплаты) СуммаОплаты 
	|ИЗ
	|	НеразнесенныеОплаты 
	|ГДЕ ЗаказПоставщику В (ВЫБРАТЬ ЗаказПоставщику ИЗ Долги) 
	|
	|СГРУППИРОВАТЬ ПО Период, Оплата, Контрагент, ЗаказПоставщику 
	|
	|УПОРЯДОЧИТЬ ПО Период 
	|ИТОГИ Сумма(СуммаОплаты) ПО Оплата 
	|;
	// выбираем все долги по инвойсам по которым были неразнесенные оплаты
	|Выбрать  
	|	Контрагент,
	|	ЗаказПоставщику,
	|	Инвойс,
	|	СуммаДолг
	|ИЗ 
	|	Долги 
	|ГДЕ ЗаказПоставщику В (ВЫБРАТЬ ЗаказПоставщику ИЗ НеразнесенныеОплаты)
	|УПОРЯДОЧИТЬ ПО Инвойс.Дата
	|";
	
	Запрос=Новый Запрос;
	Запрос.Текст=ТекстЗапроса;
	РезультатЗапроса= Запрос.ВыполнитьПакет();
	ТаблицаДолги =РезультатЗапроса[3].Выгрузить();
	ТаблицаДолги.Индексы.Добавить("Контрагент, ЗаказПоставщику");	
	
	//ВыборкаПериод = РезультатЗапроса[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//Пока ВыборкаПериод.Следующий() Цикл
		
		НачатьТранзакцию();// запись делаем порциями по месяцам
		БылаОшибка = Ложь;
		
		ВыборкаОплаты=РезультатЗапроса[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); //каждый регистратор проходим один раз
		Пока ВыборкаОплаты.Следующий() Цикл
						
			Если НЕ РазнесениеТЧ(ВыборкаОплаты, ТаблицаДолги) Тогда
				БылаОшибка = Истина;
				Прервать; КонецЕсли;
			
			//Сообщить(ВыборкаОплаты.Оплата);
			
		КонецЦикла;//по регистраторам
		
		Если НЕ БылаОшибка Тогда
			ЗафиксироватьТранзакцию(); КонецЕсли;
		
	//КонецЦикла;//по месяцам	
	

КонецПроцедуры

Функция РазнесениеТЧ(ВыборкаОплаты, ТаблицаДолги)
	
	ОплатаОбъект = ВыборкаОплаты.Оплата.ПолучитьОбъект();
	ТабРасшифровка = ОплатаОбъект.РасшифровкаСуммы;
	
	КоэфПересчета = ОплатаОбъект.СуммаУпр/ОплатаОбъект.Сумма;
	
	Выборка = ВыборкаОплаты.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Отбор = Новый Структура("ЗаказПоставщику, Инвойс", Выборка.ЗаказПоставщику, Документы.Инвойс.ПустаяСсылка());
		СтрРасшифровки = ТабРасшифровка.НайтиСтроки(Отбор);
		
		Если СтрРасшифровки.Количество()=0 Тогда //это исключительная ситуация с которой нужно разбираться
			ЗаписьЖурналаРегистрации("РаспределениеОплатПоИнвойсам", УровеньЖурналаРегистрации.Ошибка, , ОплатаОбъект.Ссылка,"В ТЧ документа не найдены строки попавшие в запрос ("+Выборка.Контрагент+" ; "+Выборка.ЗаказПоставщику+" ; Инвойс=ПустаяСсылка). Документ "+Выборка.Оплата+" не обработан.");
			Продолжить; 
		КонецЕсли;	
		
		//удаляем старые записи
		СуммаРаспределить=0;
		Для Каждого Стр из СтрРасшифровки Цикл
			СуммаРаспределить= СуммаРаспределить + Стр.Сумма;
			ТабРасшифровка.Удалить(Стр);
		КонецЦикла;	
		
		СуммаРаспределить = Выборка.СуммаОплаты;
		
		//создаем новые записи по FIFO
		Отбор=Новый Структура("Контрагент,ЗаказПоставщику", Выборка.Контрагент, Выборка.ЗаказПоставщику);
		СтрДолги = ТаблицаДолги.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаДолга из СтрДолги Цикл
					
			МожноСписать = Мин(СуммаРаспределить, СтрокаДолга.СуммаДолг);
			
			Если МожноСписать<=0 Тогда Продолжить; КонецЕсли;
			
			Нов = ТабРасшифровка.Добавить();
			Нов.ЗаказПоставщику = Выборка.ЗаказПоставщику;
			Нов.Инвойс 		= СтрокаДолга.Инвойс;
			Нов.Сумма 		= МожноСписать;
			Нов.СуммаУпр 	= КоэфПересчета*МожноСписать;
			
			СуммаРаспределить = СуммаРаспределить - МожноСписать;
			
			//актуализируем таблицу 
			СтрокаДолга.СуммаДолг = СтрокаДолга.СуммаДолг - МожноСписать;
						
		КонецЦикла;
		
		//что так и не распределилось - добавлем пустую строку
		Если СуммаРаспределить > 0 тогда
			Нов = ТабРасшифровка.Добавить();
			Нов.ЗаказПоставщику = Выборка.ЗаказПоставщику;
			Нов.Инвойс 	= Документы.Инвойс.ПустаяСсылка();
			Нов.Сумма	= СуммаРаспределить;
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат ЗаписатьИПровестиДокумент(ОплатаОбъект);
	
КонецФункции

Функция ЗаписатьИПровестиДокумент(ДокОбъект)
	
	Ссылка=ДокОбъект.Ссылка;
	
	Попытка
		//запишем документ
		//ДокОбъект.ОбменДанными.Загрузка=Истина;
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		//проведем ускоренным методом
		//Движения = Новый Массив;
		//ИмяДвижения1 = "ДолгиПоИнвойсам";
		//ИмяДвижения2 = "ДолгиПоЗаказамПоставщику";
		//Движения.Добавить(ИмяДвижения1);
		//Движения.Добавить(ИмяДвижения2);
		//
		//ДополнительныеСвойства = Новый Структура; 
		//ДополнительныеСвойства.Вставить("ИменаРегистров",Движения);
		//Документы.ОплатаИмпорт.ИницилизироватьДополнительныеДанныеДокумента(Ссылка, ДополнительныеСвойства); 
		//
		//НовТаблица 		= ДополнительныеСвойства[ИмяДвижения1];
		//НаборЗаписей 	= РегистрыНакопления[ИмяДвижения1].СоздатьНаборЗаписей(); 
		//НаборЗаписей.Отбор.Регистратор.Установить(Ссылка);
		//НаборЗаписей.Загрузить(НовТаблица); 
		//НаборЗаписей.записать();
		//
		//НовТаблица 		= ДополнительныеСвойства[ИмяДвижения2];
		//НаборЗаписей 	= РегистрыНакопления[ИмяДвижения2].СоздатьНаборЗаписей(); 
		//НаборЗаписей.Отбор.Регистратор.Установить(Ссылка);
		//НаборЗаписей.Загрузить(НовТаблица); 
		//НаборЗаписей.записать();
		Возврат Истина;
	Исключение
		
		Ош = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("РаспределениеОплатПоИнвойсам",УровеньЖурналаРегистрации.Ошибка, ,Ссылка,"Не удалось записать и провести документ "+Ссылка+". Документ не обработан. "+Ош);
		Возврат Ложь;
	КонецПопытки;	
	
КонецФункции	

#КонецОбласти

#Область РассчитатьРангКлиента

Процедура РассчитатьРангКлиента() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПродажиОбороты.Контрагент,
	               |	СУММА(ПродажиОбороты.СуммаОборот) КАК СуммаОборот
	               |ПОМЕСТИТЬ ВТ_СуммаРеализацийКонтрагентов
	               |ИЗ
	               |	РегистрНакопления.Продажи.Обороты(&НачалоПериода, &КонецПериода, , ) КАК ПродажиОбороты
	               |ГДЕ
	               |	ПродажиОбороты.ДокументПродажи ССЫЛКА Документ.РеализацияТоваров
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПродажиОбороты.Контрагент
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РангиКлиентов.Группа,
	               |	РангиКлиентов.СуммаОт,
	               |	РангиКлиентов.СуммаДо
	               |ПОМЕСТИТЬ ВТ_РангиКонтрагентов
	               |ИЗ
	               |	Справочник.РангиКлиентов КАК РангиКлиентов
	               |ГДЕ
	               |	НЕ РангиКлиентов.ПометкаУдаления
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СуммаРеализацийКонтрагентов.Контрагент,
	               |	МАКСИМУМ(ВТ_РангиКонтрагентов.Группа) КАК Группа,
	               |	МАКСИМУМ(ВТ_СуммаРеализацийКонтрагентов.СуммаОборот) КАК СуммаОборот
	               |ПОМЕСТИТЬ ВТ_РасчетПоРангам
	               |ИЗ
	               |	ВТ_СуммаРеализацийКонтрагентов КАК ВТ_СуммаРеализацийКонтрагентов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РангиКонтрагентов КАК ВТ_РангиКонтрагентов
	               |		ПО ВТ_СуммаРеализацийКонтрагентов.СуммаОборот > ВТ_РангиКонтрагентов.СуммаОт
	               |			И ВТ_СуммаРеализацийКонтрагентов.СуммаОборот < ВТ_РангиКонтрагентов.СуммаДо
	               |ГДЕ
	               |	НЕ ВТ_РангиКонтрагентов.Группа ЕСТЬ NULL
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_СуммаРеализацийКонтрагентов.Контрагент
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_РасчетПоРангам.Контрагент КАК Контрагент,
	               |	ВТ_РасчетПоРангам.Группа КАК Ранг,
	               |	ТекущийРангКлиентаСрезПоследних.Ранг КАК ТекущийРанг
	               |ИЗ
	               |	ВТ_РасчетПоРангам КАК ВТ_РасчетПоРангам
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущийРангКлиента.СрезПоследних КАК ТекущийРангКлиентаСрезПоследних
	               |		ПО ВТ_РасчетПоРангам.Контрагент = ТекущийРангКлиентаСрезПоследних.Контрагент
	               |ГДЕ
	               |	(ВТ_РасчетПоРангам.Группа <> ТекущийРангКлиентаСрезПоследних.Ранг
	               |			ИЛИ ТекущийРангКлиентаСрезПоследних.Ранг ЕСТЬ NULL)";
	Запрос.УстановитьПараметр("НачалоПериода", ДобавитьМесяц(ТекущаяДата(), -12));
	Запрос.УстановитьПараметр("КонецПериода", ТекущаяДата());
	
	ТекДата = ТекущаяДата();
	
	ТабКлиентыРанги = Запрос.Выполнить().Выгрузить();
	ТабКлиентыРанги.Колонки.Добавить("Период");
	ТабКлиентыРанги.ЗаполнитьЗначения(ТекДата, "Период");
	
	Если ТабКлиентыРанги.Количество() <> 0 Тогда
		
		РегистрТекущийРангКлиента = РегистрыСведений.ТекущийРангКлиента;
		НаборТекущийРангКлиента = РегистрТекущийРангКлиента.СоздатьНаборЗаписей();
		НаборТекущийРангКлиента.Отбор.Период.Установить(ТекДата);
		НаборТекущийРангКлиента.Загрузить(ТабКлиентыРанги);
		НаборТекущийРангКлиента.Записать();
		
	КонецЕсли;
	
КонецПроцедуры	

#КонецОбласти
	