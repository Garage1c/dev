// Когда я начинал это писать, только Бог и я понимали, что я делаю
// Сейчас остался только Бог

Функция МодульПреобразованияJSON(Свойство, Значение, ДополнительныеПараметры, Отказ) Экспорт
	
	Результат 	= Неопределено;
	КэшДанные 	= ДополнительныеПараметры.КэшДанные;
	ЭтотОбъект 	= ДополнительныеПараметры.ЭтотОбъект;
	
	ТекстАлгоритм = ПолучитьТекстАлгоритма(ЭтотОбъект, "АлгоритмПреобразованияJSON");
	Если ПустаяСтрока(ТекстАлгоритм) Тогда Возврат XMLСтрока(Значение) КонецЕсли;
	
	стрОшибки = "";
	Результат = обм_Среда.ВыполнитьФункциюАлгоритм("Результат", ТекстАлгоритм, КэшДанные, Новый Структура("Свойство, Значение, ЭтотОбъект, ДополнительныеПараметры", Свойство, Значение, ЭтотОбъект, ДополнительныеПараметры), стрОшибки);
	Если Результат = Неопределено Тогда
		ВызватьИсключение "Ошибка в модуле преобразования JSON (" + ЭтотОбъект + ") - " + строка(Свойство) + "
																|" + стрОшибки; КонецЕсли;
	ДополнительныеПараметры.КэшДанные = КэшДанные;
	
	Возврат Результат;
	
КонецФункции
Функция ТиповойМодульПреобразования(Свойство, Значение, ДополнительныеПараметры, Отказ) Экспорт
	
	// Определим что это ссылочный тип
	
	Если обм_Среда.ЭтоСсылочныйТип(ТипЗнч(Значение)) И ДополнительныеПараметры.ЭтотОбъект <> Неопределено Тогда
		
		// Поищем его в наборе
		
		Попытка		МетаОбъект = Значение.Метаданные();
		Исключение	ВызватьИсключение "Ошибка получения метаданных объекта тип:" + ТипЗнч(Значение) + " представление: " + Значение; КонецПопытки;
		
		НаборСсылка = ПолучитьНаборПоМетаПути(МетаОбъект.ПолноеИмя(), ДополнительныеПараметры.ЭтотОбъект.Владелец, Ложь);
		Если НаборСсылка <> Неопределено Тогда
			ТекстАлгоритм = ПолучитьТекстАлгоритма(НаборСсылка, "АлгоритмПолученияКлюча");
			Возврат обм_Среда.ВыполнитьФункциюАлгоритм("Ключ", ТекстАлгоритм, ДополнительныеПараметры.КэшДанные, Новый Структура("Значение,ЭтотОбъект", Значение,ДополнительныеПараметры.ЭтотОбъект)); КонецЕсли; КонецЕсли;
		
	Возврат XMLСтрока(Значение);
	
КонецФункции
Функция ПреобразоватьВJSON(СсылкаОбменДанными = Неопределено, Данные, КэшДанные) Экспорт
	
	Запись = Новый ЗаписьJSON();
	Запись.ПроверятьСтруктуру = Ложь;
	Запись.УстановитьСтроку(Новый ПараметрыЗаписиJSON(,"  "));
	
	ДопПараметры 	= Новый Структура("ЭтотОбъект, КэшДанные", СсылкаОбменДанными, КэшДанные);
	Если СсылкаОбменДанными <> Неопределено Тогда
		ТекстАлгоритм = ПолучитьТекстАлгоритма(СсылкаОбменДанными, "АлгоритмПреобразованияJSON"); КонецЕсли;
	
	Если СсылкаОбменДанными = Неопределено Или ПустаяСтрока(ТекстАлгоритм) Тогда
			ЗаписатьJSON(Запись, Данные,,"ТиповойМодульПреобразования", обм_Обмен, ДопПараметры);
	Иначе	ЗаписатьJSON(Запись, Данные,,"МодульПреобразованияJSON", 	обм_Обмен, ДопПараметры); КонецЕсли;
	
	Возврат Запись.Закрыть();
	
КонецФункции
Функция ПреобразоватьИзJSON(СтрокаJSON, стрОшибки = "", ПрочитатьКакСоответствие = Ложь, ПоляДат = "") Экспорт
	
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(СтрокаJSON);
	
	Попытка		Возврат ПрочитатьJSON(Чтение, ПрочитатьКакСоответствие, ПоляДат);
	Исключение	опОшибки = ОписаниеОшибки();
				стрОшибки = "Ошибка чтения JSON: " + опОшибки; КонецПопытки;
	
КонецФункции


Функция ОбработатьПриемДанныхОтHTTPСервиса(Запрос)
	
КонецФункции

#Область Rest

Процедура УстановитьТиповыеHTTPЗаголовки(Запрос, Обмен, КлючНабора)
	
	Запрос.Заголовки.Вставить("exh1-txt", Обмен.Наименование);
	Запрос.Заголовки.Вставить("exh2-txt", КлючНабора);
	
КонецПроцедуры

Функция ПолучитьHTTPСоединение(Обмен) Экспорт
	
	Возврат New HTTPConnection(Обмен.Сервер, Обмен.Порт, Обмен.Пользователь, Обмен.Пароль,,,?(Обмен.ЭтоЗащищенноеСоединение, Новый ЗащищенноеСоединениеOpenSSL, Неопределено));
	
КонецФункции
Функция ПолучитьHTTPЗапрос_Метаданные(Обмен) Экспорт
	
	Запрос = New HTTPRequest(Обмен.ИмяБазы + "/hs/exchange/meta");
	Запрос.Заголовки.Вставить("exh1-txt", Обмен.Наименование);
	
	Возврат Запрос;
	
КонецФункции
Функция ПолучитьHTTPЗапрос_ОтправкаДанных(Набор, стрДанные) Экспорт
	
	Запрос = New HTTPRequest(Набор.Владелец.ИмяБазы + "/hs/exchange/data");
	Запрос.Заголовки.Вставить("exh1-txt", Набор.Владелец.Наименование);
	Запрос.Заголовки.Вставить("exh2-txt", Набор.Наименование);
	
	Запрос.УстановитьТелоИзСтроки(стрДанные);
	
	Возврат Запрос;
	
КонецФункции
Функция ПолучитьHTTPЗапрос_ПолученияНабора(Обмен, КлючНабора) Экспорт
	
	Запрос = New HTTPRequest(Обмен.ИмяБазы + "/hs/exchange/set");
	УстановитьТиповыеHTTPЗаголовки(Запрос, Обмен, КлючНабора);
	
	Возврат Запрос;
	
КонецФункции
Функция ПолучитьHTTPЗапрос_ПолученияОбъекта(Обмен, КлючНабора) Экспорт
	
	Запрос = New HTTPRequest(Обмен.ИмяБазы + "/hs/exchange/object");
	УстановитьТиповыеHTTPЗаголовки(Запрос, Обмен, КлючНабора);
	Возврат Запрос;
	
КонецФункции

Функция ИзменитьНаборПоJSONНабору(Набор, СтруктураJSON, стрОшибки = "") Экспорт
	
	//спрОб = Набор.ПолучитьОбъект();
	спрОб = Набор;
	
	// Преобразуем данные
	
	//Структура = ПреобразоватьИзJSON(стрJSON, стрОшибки);
	//Если Структура = Неопределено Тогда Возврат Ложь КонецЕсли;
	
	// Заполним реквизитами
	
	метаРекв 	= Метаданные.Справочники.обм_НаборыДанных.Реквизиты;
	Изменился 	= Ложь;
	
	Для Каждого Элемент Из СтруктураJSON.Реквизиты Цикл
		
		Если (метаРекв.Найти(Элемент.Ключ) = Неопределено Или обм_Среда.ЭтоПримитивный(метаРекв[Элемент.Ключ].Тип)) И
				спрОб[Элемент.Ключ] <> Элемент.Значение Тогда
				
			спрОб[Элемент.Ключ] = Элемент.Значение;
			Изменился = Истина; КонецЕсли; КонецЦикла;
	
	// Проверим изменились типы или нет
	
	текТипы = спрОб.ОбрабатываемыеТипы.Выгрузить();
	спрОб.ОбрабатываемыеТипы.Очистить();
	
	Для Каждого дрТип Из СтруктураJSON.Типы Цикл
		
		// Посмотрим что добавили из типов
		
		ПустаяСсылка = обм_Среда.ПолучитьПустуюСсылкуПоПолномуПути(дрТип);
		Если текТипы.Найти(ПустаяСсылка, "ПустаяСсылка") = Неопределено Тогда
			Изменился = Истина; КонецЕсли;
		
		спрОб.ОбрабатываемыеТипы.Добавить().ПустаяСсылка = ПустаяСсылка; КонецЦикла;
	
	Если Не Изменился Тогда
		
		// Посмотрим, может что удалили из типов
		
		Для Каждого Строка Из текТипы Цикл
			Если Не спрОб.ОбрабатываемыеТипы.НайтиСтроки(Новый Структура("ПустаяСсылка", Строка.ПустаяСсылка)).Количество() Тогда
				Изменился = Истина;
				Прервать; КонецЕсли; КонецЦикла; КонецЕсли;
	
	// Запишем
	
	Если Изменился Тогда
		Попытка		спрОб.Записать();
		Исключение	стрОшибки = ОписаниеОшибки();
					Возврат Ложь;КонецПопытки; КонецЕсли;
			
	Возврат Истина;
	
КонецФункции
Функция СохранитьНаборВДругойБазе(Обмен, ИдНабора, СтруктураНабора, стрОшибки = "", ЭтоНовый = Ложь) Экспорт
	
	// Получаем соединение

	Соединение = ПолучитьHTTPСоединение(Обмен);
	Если Соединение = Неопределено Тогда Возврат Ложь; КонецЕсли;
		
	// Получим запрос
		
	ЗапросHTTP = New HTTPRequest(Обмен.ИмяБазы + "/hs/exchange/set");
		
	ЗапросHTTP.Заголовки.Вставить("exh1-txt", Обмен.Наименование);
	ЗапросHTTP.Заголовки.Вставить("exh2-txt", ИдНабора);
	
	ЗапросHTTP.УстановитьТелоИзСтроки(ПреобразоватьВJSON(, СтруктураНабора, Новый Соответствие));
	
	// Отправляем
	
	Response = Соединение.ВызватьHTTPМетод(?(ЭтоНовый, "PUT", "PATCH"), ЗапросHTTP);
			
	// Получаем результат
	
	Если Response.StatusCode = 500 Тогда
		
		стрОшибки = "Ошибку вернула другая база при записи набора
						|" + Response.ПолучитьТелоКакСтроку();
		Возврат Ложь;
		
	ИначеЕсли Response.StatusCode <> 200 Тогда
		
		ВызватьИсключение "Ошибка HTTP (" + Response.StatusCode + ") ошибку вернула база обмена при сохранении набора обмена
							|" + Response.ПолучитьТелоКакСтроку(); КонецЕсли;
	Возврат Истина;
		
КонецФункции

//Функция 

#КонецОбласти

#Область Функции_Структуры_конфигуцрации

Функция ПолучитьПредставлениеМетаДанного(ПолноеИмя, Синоним) Экспорт Возврат Лев(ПолноеИмя, 3) + ": " + Синоним КонецФункции

Процедура ДобавитьМета(Мета, Синоним, МетаНабОб)
	
	Дети = Новый Соответствие;
	
	Для Каждого МетаОб Из МетаНабОб Цикл 
		
		Соотв = Новый Соответствие; 
		Соотв.Вставить("Синоним", 		МетаОб.Синоним);
		Соотв.Вставить("Наборы", 		Неопределено);
		Соотв.Вставить("МетаДанные", 	Неопределено);
		Дети.Вставить(МетаОб.ПолноеИмя(), Соотв); КонецЦикла;
	
	Соотв = Новый Соответствие; 
	Соотв.Вставить("Синоним", 	Синоним);
	Соотв.Вставить("Наборы", 	Неопределено);
	Соотв.Вставить("МетаДанные",Дети);
	
	Мета.Вставить(Синоним, Соотв);
	
КонецПроцедуры
Процедура ДобавитьСвязьМетаСНабором(Мета, ПутьКМета, Набор)
	
	// Добавляет связь метаданного к набору
	
	Для Каждого МетаОб Из Мета Цикл
		
		Если МетаОб.Ключ = ПутьКМета Тогда
			
			Наборы = МетаОб.Значение["Наборы"];
			Если Наборы = Неопределено Тогда Наборы = Новый Массив КонецЕсли;
			
			Наборы.Добавить(Набор); 
			МетаОб.Значение.Вставить("Наборы", Наборы); КонецЕсли;
		
		Если МетаОб.Значение["МетаДанные"] <> Неопределено Тогда
			ДобавитьСвязьМетаСНабором(МетаОб.Значение["МетаДанные"], ПутьКМета, Набор) КонецЕсли; КонецЦикла;
	
КонецПроцедуры
Функция ПолучитьСтрРеквизитов(метаОб)
	
	МасДляЗаполнения = Новый Массив; 
	МасДляЗаполнения.Добавить("Ссылка");
	МасДляЗаполнения.Добавить("Наименование");
	
	Для каждого Реквизит Из метаОб.Реквизиты Цикл МасДляЗаполнения.Добавить(Реквизит.Имя) КонецЦикла;
	Возврат МасДляЗаполнения;
	
КонецФункции
Функция ПолучитьСтруктуруКонфигурации(ОбменСсылка, ТолькоЭтаКоллекция = "", ФильтрНабор = Неопределено) Экспорт
	
	Версия = "1";
	
	// Возвращает соответствие в котором:
	// - Версия - строка, версия формата
	// - МетаДанные: соответвие внутри которого:
	//		- Ключ - путь к метаданным
	//		- Значение: - соответствие, с полями:
	//			- Синоним - строка для людей
	//			- Наборы - массив связанных наборов
	//			- МетаДанные - соответвие (в ключе путь к метаданным) если есть дальше куда проваливаться (подчиненные) или неопределено если дальше некуда
	// - Наборы: Массив соответствий наборов где
	//		- Реквизиты: - соответствие, в ключе имя реквизита в значении значение
	//		- МетаДанные - массив путей к связанным метаданным
	// - Алгоритмы: Массив соответствий алгоритмов где
	//		- Реквизиты: - соответствие, в ключе имя реквизита в значении значение
	
	//	ТолькоЭтаКоллекция - если указать то не будет сканировать все а вернет только нужную коллекцию
	//	ФильтрНабор - если указать тогда будет фильтр по набору
	
	
	СоотвВозвр = Новый Соответствие;
	СоотвВозвр.Вставить("Версия", Версия);
	
	НужныМетаданные = ТолькоЭтаКоллекция = "" Или СтрНайти(НРег(ТолькоЭтаКоллекция), "метаданные");
	
	Мета 		= Новый Соответствие;
	Наборы 		= Новый Массив;
	Алгоритмы 	= Новый Массив;
	
#Область Метаданные
	
	Если НужныМетаданные Тогда
	
		ДобавитьМета(Мета, "Справочники", 	Метаданные.Справочники);
		ДобавитьМета(Мета, "Документы", 	Метаданные.Документы);
		ДобавитьМета(Мета, "Перечисления", 	Метаданные.Перечисления);
		ДобавитьМета(Мета, "БизнесПроцессы",Метаданные.БизнесПроцессы);
		ДобавитьМета(Мета, "Задачи", 		Метаданные.Задачи); 
		
		ДобавитьМета(Мета, "ПланыВидовХарактеристик", Метаданные.ПланыВидовХарактеристик); 
		
		СоотвВозвр.Вставить("МетаДанные", Мета); КонецЕсли;
	
#КонецОбласти
	
#Область Наборы
	
	Если ТолькоЭтаКоллекция = "" Или СтрНайти(НРег(ТолькоЭтаКоллекция), "наборы") Тогда
	
		МасДляЗаполнения 	= ПолучитьСтрРеквизитов(Метаданные.Справочники.обм_НаборыДанных);
		МасАлгДляЗаполнения = ПолучитьСтрРеквизитов(Метаданные.Справочники.обм_Алгоритмы);
		
		Запрос = Новый Запрос("	ВЫБРАТЬ " + СтрСоединить(МасДляЗаполнения,",") + ", ОбрабатываемыеТипы.(ПустаяСсылка) ИЗ Справочник.обм_НаборыДанных ГДЕ Владелец = &Владелец И Активно И НЕ ПометкаУдаления
							|" + ?(ФильтрНабор = Неопределено, "", " И Ссылка = &Набор") + ";
							|	ВЫБРАТЬ " + СтрСоединить(МасАлгДляЗаполнения,",") + " ИЗ Справочник.обм_Алгоритмы ГДЕ НЕ ПометкаУдаления;");
							
		Запрос.УстановитьПараметр("Владелец", 	ОбменСсылка);
		Запрос.УстановитьПараметр("Набор", 		ФильтрНабор);
		
		Пакет = Запрос.ВыполнитьПакет();
		Выборка = Пакет[0].Выбрать();
		Пока Выборка.Следующий() Цикл 
			
			ЗначениеНабора = Новый Соответствие;
			
			// Вытащим реквизиты набора
			
			РеквизитыНабора = Новый Соответствие; 
			Для Каждого ИмяРеквизита Из МасДляЗаполнения Цикл РеквизитыНабора.Вставить(ИмяРеквизита, Выборка[ИмяРеквизита]) КонецЦикла;
			ЗначениеНабора.Вставить("Реквизиты", РеквизитыНабора);
			
			// Свяжем с метаданными
			МассТипов = Новый Массив;
			
			ВыборкаТипов = Выборка.ОбрабатываемыеТипы.Выбрать();
			Пока ВыборкаТипов.Следующий() Цикл ПутьКМета = ВыборкаТипов.ПустаяСсылка.Метаданные().ПолноеИмя();
					
				// Связь к метаданным
				Если НужныМетаданные Тогда ДобавитьСвязьМетаСНабором(Мета, ПутьКМета, Выборка.Ссылка); КонецЕсли;
					
				// Связь своя
				МассТипов.Добавить(ПутьКМета); КонецЦикла; 
			
			ЗначениеНабора.Вставить("МетаДанные", МассТипов);
			Наборы.Добавить(ЗначениеНабора);КонецЦикла; 
		
		СоотвВозвр.Вставить("Наборы", Наборы); КонецЕсли;
	
#КонецОбласти
	
#Область Алгоритмы

	Если ТолькоЭтаКоллекция = "" Или СтрНайти(НРег(ТолькоЭтаКоллекция), "алгоритмы") Тогда

		Выборка = Пакет[1].Выбрать();
		Пока Выборка.Следующий() Цикл  
			
			ЗначениеАлгоритма = Новый Соответствие;
			РеквизитыАлгоритма = Новый Соответствие; 
			
			Для Каждого ИмяРеквизита Из МасАлгДляЗаполнения Цикл РеквизитыАлгоритма.Вставить(ИмяРеквизита, Выборка[ИмяРеквизита]) КонецЦикла;
			ЗначениеАлгоритма.Вставить("Реквизиты", РеквизитыАлгоритма);
			
			Алгоритмы.Добавить(ЗначениеАлгоритма); КонецЦикла; 
		
		СоотвВозвр.Вставить("Алгоритмы", Алгоритмы); КонецЕсли;
	
#КонецОбласти
	
	Возврат СоотвВозвр;
	
КонецФункции

Функция ПолучитьМассивОбщихРеквизитовМетаОбъекта(МетаОбъект) Экспорт
	
	Массив = Новый Массив;
	
	Использовать 		= Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать;
	АвтоИспользовать 	= Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Авто;
	
	Для КАждого МетаОбщ Из Метаданные.ОбщиеРеквизиты Цикл
		
		Элемент = МетаОбщ.Состав.Найти(МетаОбъект);
		
		Если 	Элемент <> Неопределено И
				Элемент.Использование = Использовать Или
				(МетаОбщ.АвтоИспользование = Использовать И Элемент.Использование = АвтоИспользовать) Тогда
			
			Массив.Добавить(МетаОбщ); КонецЕсли; КонецЦикла;
	
	Возврат Массив;
	
КонецФункции

#КонецОбласти

#Область Публичные_функции

// ПОЛУЧЕНИЕ ОБЪЕКТОВ

Функция ПолучитьТекстАлгоритма(НаборДанных, ИмяАлгоритма) Экспорт
	
	Возврат ?(НаборДанных[ИмяАлгоритма + "Ссылка"].Пустая(), 
					//?(ПустаяСтрока(НаборДанных[ИмяАлгоритма]), 
							//обм_Среда.ПолучитьТекстАлгоритмаПоУмолчанию(ИмяАлгоритма), 
							НаборДанных[ИмяАлгоритма]//) 
					,НаборДанных[ИмяАлгоритма + "Ссылка"].Алгоритм);
КонецФункции

Функция ПолучитьСоединение(ОбменДанными)
	
	Возврат обм_Кэш.ПолучитьСоединение(ОбменДанными);
	
КонецФункции

Функция ПолучитьСтруктуруДляВыгрузкиОбъекта(Ссылка, ОбменСсылка, КэшДанные) Экспорт 
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка ИЗ Справочник.обм_НаборыДанных.ОбрабатываемыеТипы ГДЕ Ссылка.Владелец = &Обмен И ПустаяСсылка ССЫЛКА " + Ссылка.Метаданные().ПолноеИмя() + " И НЕ Ссылка.ПометкаУдаления");
	Запрос.УстановитьПараметр("Обмен", ОбменСсылка);

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Ссылки = Новый Массив;
		Ссылки.Добавить(Ссылка);
		Возврат ВычислитьСтруктуруПоНаборуДанных(Выборка.Ссылка, Ссылки, КэшДанные)[0]; КонецЕсли;
	
КонецФункции

Процедура _ДобавитьРеквизит(Массив, Реквизит, реквДа, реквНет)
	
	нРеквизит = НРег(Реквизит);
	
	Если 	Не СтрНайти(реквНет, нРеквизит) И
			(ПустаяСтрока(реквДа) ИЛИ СтрНайти(реквДа, нРеквизит)) Тогда

		Массив.Добавить(Реквизит); КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСтрокуВыборкуРеквизитовДляЗапроса(Реквизиты, реквДа, реквНет)
	
	Массив = Новый Массив;
	Для Каждого Реквизит Из Реквизиты Цикл _ДобавитьРеквизит(Массив, Реквизит.Имя, реквДа, реквНет) КонецЦикла;
	
	Возврат СтрСоединить(Массив, ",");
	
КонецФункции
Функция ПолучитьСтрокиВыборкиДляЗапроса(МетаОб, реквДа, реквНет)
	
	// Получим реквизиты
	
	стрРеквизиты = ПолучитьСтрокуВыборкуРеквизитовДляЗапроса(МетаОб.Реквизиты, реквДа, реквНет);
	общРекв = ПолучитьСтрокуВыборкуРеквизитовДляЗапроса(ПолучитьМассивОбщихРеквизитовМетаОбъекта(МетаОб), реквДа, реквНет);
	Если Не ПустаяСтрока(общРекв) Тогда
		стрРеквизиты = стрРеквизиты + ?(стрРеквизиты = "","",",") + общРекв; КонецЕсли;
		
	// Получим табличные части
	
	Для Каждого Таблица Из МетаОб.ТабличныеЧасти Цикл нРеквизит = НРег(Таблица.Имя);
		
		имРеквТаблСТочк = НРег(нРеквизит + ".");
		Если 	Не СтрНайти(реквНет, имРеквТаблСТочк) И
				(ПустаяСтрока(реквДа) ИЛИ СтрНайти(реквДа, имРеквТаблСТочк)) Тогда
		
			СтрРеквизитовТабл = ПолучитьСтрокуВыборкуРеквизитовДляЗапроса(Таблица.Реквизиты, реквДа, реквНет);
			Если Не ПустаяСтрока(СтрРеквизитовТабл) Тогда
				
				стрРеквизиты = стрРеквизиты + ?(ПустаяСтрока(стрРеквизиты), "", ",") + Таблица.Имя + ".(" + СтрРеквизитовТабл + ")"; КонецЕсли; КонецЕсли; КонецЦикла;
	
	Возврат стрРеквизиты;
	
КонецФункции

Функция ВозвратМассивОбъекта(Обмен, Ссылки, масРеквизитов, МетаОб, реквДа, реквНет, КэшДанные, СтруктураЗамен) Экспорт
	
	стрПредопр 	= СтрСоединить(масРеквизитов, ",");
	стрРеквиз	= ПолучитьСтрокиВыборкиДляЗапроса(МетаОб, реквДа, реквНет);
	стрВыбрать	= стрПредопр + ?(ПустаяСтрока(стрПредопр) Или ПустаяСтрока(стрРеквиз), "", ",") + стрРеквиз;
	
	// Выдадим запрос
	
	Запрос = Новый Запрос("ВЫБРАТЬ " + стрВыбрать + " ИЗ " + МетаОб.ПолноеИмя() + " ГДЕ Ссылка В(&Ссылки)");
	Запрос.УстановитьПараметр("Ссылки", Ссылки);
	
	// Заменим все ссылочные объекты типовыми ключами (если есть такие правила)
	
	кешНаборов = Новый Соответствие;
	Возврат ПолучитьМассивОбъектаТиповымиКлючами(Обмен, Запрос.Выполнить().Выгрузить(), кешНаборов, КэшДанные, СтруктураЗамен);
	
КонецФункции
Функция ПолучитьМассивОбъектаТиповымиКлючами(Обмен, Таблица, кешНаборов, КэшДанные, СтруктураЗамен)
	
	Массив = Новый Массив;
	
	Для Каждого Строка Из Таблица Цикл
		
		Структура = Новый Структура;
		
		Для Каждого Колонка Из Таблица.Колонки Цикл
			
			Значение = Строка[Колонка.Имя];
			
			Если Значение <> Неопределено И Значение <> null Тогда
				
				Тип = ТипЗнч(Значение);
				
				Если Тип = Тип("ТаблицаЗначений") Тогда
					
					// Рекурсия
					
					Структура.Вставить(ИмяСУчетомЗамен(Колонка.Имя, СтруктураЗамен), ПолучитьМассивОбъектаТиповымиКлючами(Обмен, Значение, кешНаборов, КэшДанные, СтруктураЗамен));
						
				ИначеЕсли обм_Среда.ЭтоСсылочныйТип(Тип) Тогда
					
					// Определим набор если получится
					
					Набор = кешНаборов[Тип];
					Если Набор = Неопределено Тогда
						Набор = обм_Обмен.ПолучитьНаборПоМетаПути(Метаданные.НайтиПоТипу(Тип).ПолноеИмя(), Обмен, Ложь); 
						кешНаборов.Вставить(Тип, Набор); КонецЕсли;
					
					// Вычислим ключ
					
					Структура.Вставить(ИмяСУчетомЗамен(Колонка.Имя, СтруктураЗамен), ?(Набор = Неопределено, Неопределено, обм_Среда.ПолучитьКлючПоСсылке(Значение, Набор, КэшДанные)));
						
				Иначе // Примитив
					
					Структура.Вставить(ИмяСУчетомЗамен(Колонка.Имя, СтруктураЗамен), Значение);КонецЕсли; КонецЕсли; КонецЦикла; 
		
		Массив.Добавить(Структура); КонецЦикла;
	
	Возврат Массив;
	
КонецФункции
Функция ИмяСУчетомЗамен(текИмя, СтруктураЗамен)
	
	Возврат ?(СтруктураЗамен.Свойство(текИмя), СтруктураЗамен[текИмя], текИмя);
	
КонецФункции

Функция ЗапроситьОбъект(Набор, КлючОбъекта) Экспорт
	
	Соединение = ПолучитьHTTPСоединение(Набор.Владелец);
	Если Соединение = Неопределено Тогда Возврат Ложь КонецЕсли;
	
	// Вытащим объект из другой базы
	
	ЗапросHTTP = ПолучитьHTTPЗапрос_ПолученияОбъекта(Набор.Владелец, Набор.Наименование);
	Если ЗапросHTTP = Неопределено Тогда
		ВызватьИсключение "Ошибка получения запроса объекта HTTP: " + Строка(Набор); КонецЕсли;
	
	// Отправляем
	
	ЗапросHTTP.УстановитьТелоИзСтроки(ПреобразоватьВJSON(Набор, КлючОбъекта, Новый Соответствие));
	Response = Соединение.POST(ЗапросHTTP);

	// Получаем результат
	
	Если Response.StatusCode <> 200 Тогда
		
		ВызватьИсключение "Ошибка HTTP (" + Response.StatusCode + ") ошибку вернула база обмена при получении объекта
							|" + Response.ПолучитьТелоКакСтроку(); КонецЕсли;
						
	стрОшибки = "";
	Струкутра = ПреобразоватьИзJSON(Response.ПолучитьТелоКакСтроку(), стрОшибки,,Набор.ПоляДат);
	Если Струкутра = Неопределено Тогда
		ВызватьИсключение "Ошибка преобразования JSON из объекта (" + Набор + ") " + стрОшибки; КонецЕсли;
						
	Возврат Струкутра;
	
КонецФункции

#КонецОбласти

Функция ПолучитьНаборПоМетаПути(МетаПуть, Обмен, ВызватьИсключениеЕслиНеНайдено = Истина) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ Ссылка, ЭтоОсновной
	|ИЗ 	Справочник.обм_НаборыДанных.ОбрабатываемыеТипы 
	|ГДЕ 	
	|		НЕ Ссылка.ПометкаУдаления И 
	|		Ссылка.Владелец = &ОбменДанными И 
	|		ПустаяСсылка ССЫЛКА " + МетаПуть + " И 
	|		Ссылка.Активно
	|
	|УПОРЯДОЧИТЬ ПО ЭтоОсновной Убыв
	|");
	Запрос.УстановитьПараметр("ОбменДанными", Обмен);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не Выборка.Количество() Тогда
		
		Если ВызватьИсключениеЕслиНеНайдено Тогда
			ВызватьИсключение МетаПуть + " нет набора для данного метаобъекта!"; КонецЕсли;
	Иначе
		
		Выборка.Следующий();
		Возврат Выборка.Ссылка; КонецЕсли;
	
КонецФункции

Функция ВычислитьСтруктуруПоНаборуДанных(ЭтотОбъект, Значения, КэшДанные) Экспорт
	
	ТекстАлгоритм = ПолучитьТекстАлгоритма(ЭтотОбъект, "АлгоритмПолученияДанных");
	Если ПустаяСтрока(ТекстАлгоритм) Тогда
		Данные = Значения;
		
	Иначе
		стрОшибки = "";
		Данные = обм_Среда.ВыполнитьФункциюАлгоритм("Данные", ТекстАлгоритм, КэшДанные, Новый Структура("ЭтотОбъект, Значения", ЭтотОбъект, Значения), стрОшибки);
		Если Данные = Неопределено Тогда
			ВызватьИсключение "Ошибка алгоритма получения данных (" + ЭтотОбъект + ") - " + строка(Значения) + "
		                                        |" + стрОшибки; КонецЕсли; КонецЕсли;
	Возврат Данные;
	
КонецФункции
Функция ОтправитьНаборДанных(ЭтотОбъект, ДанныеJSON, Соединение, КэшДанные) Экспорт
	
	// ЭтотОбъект - справочник ссылка обм_НаборыДанных
	
	ТекстАлгоритм = ПолучитьТекстАлгоритма(ЭтотОбъект, "АлгоритмОтправленияДанных");
	Если ПустаяСтрока(ТекстАлгоритм) Тогда Возврат ОтправитьДанныеПоУмолчанию(ЭтотОбъект, ДанныеJSON, Соединение, КэшДанные) КонецЕсли;
	
	//Результат = Ложь;
	
	//Попытка		Выполнить(ТекстАлгоритм);
	//Исключение	стрОшибки = ОписаниеОшибки();
	//			ВызватьИсключение "Ошибка алгоритма отправления данных (" + ЭтотОбъект + ")
	//												|" + стрОшибки; КонецПопытки;
	
	стрОшибки = "";
	Результат = обм_Среда.ВыполнитьФункциюАлгоритм("Результат", ТекстАлгоритм, КэшДанные, Новый Структура("ЭтотОбъект, ДанныеJSON, Соединение", ЭтотОбъект, ДанныеJSON, Соединение), стрОшибки);
	Если Результат = Неопределено Тогда
		ВызватьИсключение "Ошибка алгоритма отправления данных(" + ЭтотОбъект + ") - " + строка(ДанныеJSON) + "
	                                        |" + стрОшибки; КонецЕсли;
	
	Возврат Результат;
													
КонецФункции
Функция ПринятьНаборДанных(ЭтотОбъект, Данные, КэшДанные, стрОшибки = "") Экспорт
	
	ТекстАлгоритм = ПолучитьТекстАлгоритма(ЭтотОбъект, "АлгоритмПриемаДанных");
	Если ПустаяСтрока(ТекстАлгоритм) Тогда
		ВызватьИсключение "Не указан алгоритм принятия данных (" + ЭтотОбъект + ")"; КонецЕсли;
	
	стрОшибки = "";
	Результат = обм_Среда.ВыполнитьФункциюАлгоритм("Результат", ТекстАлгоритм, КэшДанные, Новый Структура("ЭтотОбъект, Данные", ЭтотОбъект, Данные), стрОшибки);
	Если Результат = Неопределено Тогда
		ВызватьИсключение "Ошибка алгоритма принятия данных (" + ЭтотОбъект + ") - " + строка(Данные) + "
	                                        |" + стрОшибки; КонецЕсли;
	Возврат Результат;
	
КонецФункции

Функция Выгрузить(Ссылки, ОбменДанными, Знач КэшДанные = Неопределено, НаборСсылка = Неопределено) Экспорт
	
	Перем Соединение;
	
	// Вытащим соединение из кэша, если не будет тогда создадим новое
	
	Если КэшДанные = Неопределено Тогда	КэшДанные 	= Новый Соответствие;
	Иначе 								Соединение 	= КэшДанные[обм_Кэш.КлючСоединенияВКеше()]; КонецЕсли;
		
	Если Соединение = Неопределено Тогда
		
		//Соединение = ПолучитьСоединение(ОбменДанными);
		Соединение = ПолучитьHTTPСоединение(ОбменДанными);
		Если 	Соединение = Неопределено Тогда Возврат Ложь;
		Иначе	КэшДанные.Вставить(обм_Кэш.КлючСоединенияВКеше(), Соединение); КонецЕсли; КонецЕсли;
	
	// Определим набор данных
	
	Если НаборСсылка = Неопределено Тогда НаборСсылка = ПолучитьНаборПоМетаПути(Ссылки[0].Метаданные().ПолноеИмя(), ОбменДанными) КонецЕсли;
	Данные = ВычислитьСтруктуруПоНаборуДанных(НаборСсылка, Ссылки, КэшДанные);
			
	// теперь отправим данные
			
	Если Данные = Неопределено Тогда
		Сообщить("Нет данных для выгрузки"); 
		Возврат Ложь;
	Иначе
		ДанныеJSON = ПреобразоватьВJSON(НаборСсылка, Данные, КэшДанные);
		Возврат ОтправитьНаборДанных(НаборСсылка, ДанныеJSON, Соединение, КэшДанные); КонецЕсли;
	
КонецФункции
		
Функция ОтправитьДанныеПоУмолчанию(НаборДанных, ДанныеJSON, Соединение, КэшДанные)
	
	// Получаем запрос

	Если Соединение = Неопределено Тогда
		
		Соединение = ПолучитьHTTPСоединение(НаборДанных.Владелец);
		Если 	Соединение = Неопределено Тогда Возврат Ложь;
		Иначе	КэшДанные.Вставить(обм_Кэш.КлючСоединенияВКеше(), Соединение); КонецЕсли; КонецЕсли;
		
	//ЗапросHTTP = обм_Среда.НовыйHTTPЗапрос(НаборДанных, ДанныеJSON);
	ЗапросHTTP = ПолучитьHTTPЗапрос_ОтправкаДанных(НаборДанных, ДанныеJSON);
	Если ЗапросHTTP = Неопределено Тогда
		ВызватьИсключение "Ошибка получения запроса HTTP: " + Строка(НаборДанных); КонецЕсли;
	
	// Для поиска
	
	//ЗапросHTTP.Заголовки.Вставить("exh1-txt", НаборДанных.Владелец.Наименование);
	//ЗапросHTTP.Заголовки.Вставить("exh2-txt", НаборДанных.Наименование);
	
	// Отправляем
	
	Response = Соединение.POST(ЗапросHTTP);

	// Получаем результат
	
	Если Response.StatusCode <> 200 Тогда
		
		ВызватьИсключение "Ошибка HTTP (" + Response.StatusCode + ") ошибку вернула база обмена
							|" + Response.ПолучитьТелоКакСтроку(); КонецЕсли;
	Возврат Истина;
	
КонецФункции

#Область Подписки

Процедура обм_ПередЗаписьюДокументаПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	
	
КонецПроцедуры

Процедура обм_ПередЗаписьюОбъектаПередЗаписью(Источник, Отказ) Экспорт
	
		
КонецПроцедуры

Процедура обм_ПриЗаписиОбъектаПриЗаписи(Источник, Отказ) Экспорт
	
	// Зарегистрируем что объект изменился
	
	Если Не Источник.ОбменДанными.Загрузка Тогда
	
		Запрос = Новый Запрос("
		
		// Получим в какие наборы входит этот объект
		
		|ВЫБРАТЬ 	РАЗЛИЧНЫЕ Ссылка Набор, Ссылка.Владелец Обмен, &Ссылка Объект
		|ПОМЕСТИТЬ 	Наборы 
		|ИЗ 		Справочник.обм_НаборыДанных.ОбрабатываемыеТипы 
		|ГДЕ 	Ссылка.Владелец.РегистрироватьВБуфере И
		|		Ссылка.РегистрироватьИзменения И 
		|		Ссылка.Активно И 
		|		НЕ Ссылка.ПометкаУдаления И 
		|		ПустаяСсылка ССЫЛКА " + Источник.Метаданные().ПолноеИмя() + ";
		
		// Отсеем наборы которые уже записаны в регистр
		
		|ВЫБРАТЬ 	новНабор.Набор, новНабор.Обмен, новНабор.Объект, &текДата ДатаСоздания
		|ИЗ 		Наборы новНабор
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.обм_Буфер ТекНаб
		|ПО
		|	новНабор.Обмен 	= текНаб.Обмен И
		|	новНабор.Набор 	= текНаб.Набор И
		|	новНабор.Объект = текНаб.Объект
		|
		|ГДЕ текНаб.Обмен ЕСТЬ NULL
		|");
		
		Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
		Запрос.УстановитьПараметр("текДата",ТекущаяДата());
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Запись = РегистрыСведений.обм_Буфер.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			
			Попытка		Запись.Записать();
			Исключение	Сообщить("Ошибка при регистрации объекта для передачи в обменен данных " + ОписаниеОшибки());
						Отказ = Истина; Возврат; КонецПопытки; КонецЦикла; КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Робот

Процедура УдалитьЗапись(Обмен, Набор, Объект)
	
	Запись = РегистрыСведений.обм_Буфер.СоздатьМенеджерЗаписи();
	Запись.Обмен 	= Обмен;
	Запись.Набор 	= Набор;
	Запись.Объект 	= Объект;
	
	Запись.Удалить();
	
КонецПроцедуры
Процедура ЗаписатьОшибку(Обмен, Набор, Объект, НомерПовтора)
	
	Запись = РегистрыСведений.обм_Буфер.СоздатьМенеджерЗаписи();
	
	Запись.Обмен 	= Обмен;
	Запись.Набор 	= Набор;
	Запись.Объект 	= Объект;
	Запись.НомерПовтораПриОшибке = НомерПовтора + 1;
	
	Запись.Записать();
	
КонецПроцедуры
Процедура обм_Обмен(Обмен) Экспорт
	
	// Считаем все объекты которые изменились
	
	КэшДанные 	= Новый Соответствие;
	Запрос 		= Новый Запрос("ВЫБРАТЬ " + ?(Обмен.МаксимумОбъектовВПакете, "ПЕРВЫЕ " + Формат(Обмен.МаксимумОбъектовВПакете, "ЧГ="), "") +  " Объект, Набор, НомерПовтораПриОшибке ИЗ РегистрСведений.обм_Буфер ГДЕ Обмен = &Обмен И НомерПовтораПриОшибке = 0 УПОРЯДОЧИТЬ ПО ДатаСоздания ИТОГИ ПО Набор");
	Запрос.УстановитьПараметр("Обмен", Обмен);
	
	ВыборкаНаборов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Пока ВыборкаНаборов.Следующий() Цикл
		
		// Подготовим массив объектов
		
		Объекты = Новый Массив; Выборка = ВыборкаНаборов.Выбрать();
		Пока Выборка.Следующий() Цикл Объекты.Добавить(Выборка.Объект) КонецЦикла;
		
		// Отправим набор со всей мафией
		
		Если Выгрузить(Объекты, Обмен, КэшДанные, ВыборкаНаборов.Набор) Тогда
			
			// Удалим ребят
			
			Для Каждого Объект Из Объекты Цикл УдалитьЗапись(Обмен, ВыборкаНаборов.Набор, Объект) КонецЦикла;
			
		Иначе // Будем выгружать каждого члена мафии по отдельности 
			
			Выборка = ВыборкаНаборов.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Объекты = Новый Массив;
				Объекты.Добавить(Выборка.Объект);
				Если Выгрузить(Объекты, Обмен, КэшДанные, ВыборкаНаборов.Набор) Тогда
					
					// Отработал родной, на выход ->
					УдалитьЗапись(Обмен, ВыборкаНаборов.Набор, Выборка.Объект);
					
				Иначе
					
					// Увеличим счетчик ошибок
					ЗаписатьОшибку(Обмен, ВыборкаНаборов.Набор, Выборка.Объект, Выборка.НомерПовтораПриОшибке); КонецЕсли; КонецЦикла; КонецЕсли; КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
