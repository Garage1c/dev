
Функция ВыгонялкаНазначена() Экспорт
	
	Возврат ПараметрыСеанса.ВыгонялкаНазначена = ИСТИНА;
	
КонецФункции
Функция ТеперьЗапущенаВыгонялка() Экспорт
	
	ПараметрыСеанса.ВыгонялкаНазначена = Истина;
	
КонецФункции
Функция ТеперьОстановленаВыгонялка() Экспорт
	
	ПараметрыСеанса.ВыгонялкаНазначена = Ложь;
	
КонецФункции

Функция КоличествоНеГотовыКВыходу() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ НомерСеанса ИЗ РегистрСведений.ГотовностьКВыходу ГДЕ НЕ Готов");
	Выполнение = Запрос.Выполнить();
	
	Возврат ?(Выполнение.Пустой(), 0, Выполнение.Выбрать().Количество());
	
КонецФункции
Функция ПолучитьПараметрыВремени() Экспорт
	
	// ТекущийРежим: 	0 - Можно работать
	//					1 - Можно работать, но назначена дата завершения или конфигурация изменена, но еще не настало время начала изгнания
	//					2 - Режим завершения, но не все еще готовы к выходу
	//					3 - Режим завершения, все готовы к выходу
	
	КонфигурацияИзменена 	= КонфигурацияИзменена();
	ВремяЗавершения 		= Константы.ВремяЗавершенияРаботыПользователей.Получить();
	ВремяНачалаНапоминания 	= Константы.ВремяНачалаНапоминанияОЗавершении.Получить();
	текДата					= ТекущаяДата();
	КоличествоНеГотовых		= 0;
	ЗавершениеНеБолееСекунд = 60; // все что больше минуты уже не считается завершением
	
	ТребуетсяПерезагрузка 	= (текДата < ВремяЗавершения И текДата - ВремяЗавершения < ЗавершениеНеБолееСекунд) Или КонфигурацияИзменена;
	ВремяОповещать			= ВремяНачалаНапоминания < текДата И текДата - ВремяЗавершения < ЗавершениеНеБолееСекунд;
	
	ГотовитсяКВыходуНоЕщеНикогоНеВыгоняют = текДата < ВремяЗавершения И текДата - ВремяЗавершения < ЗавершениеНеБолееСекунд И ВремяНачалаНапоминания > текДата;
	
	Если ТребуетсяПерезагрузка И Не ВремяОповещать Тогда
		
		ТекущийРежим = 1;
		
	ИначеЕсли ТребуетсяПерезагрузка И ВремяОповещать Тогда
		
		// Проверим свое соединение, если его нет в базе готовности тогда добавим его
		
		Запись = РегистрыСведений.ГотовностьКВыходу.СоздатьМенеджерЗаписи();
		Запись.НомерСеанса = НомерСеансаИнформационнойБазы();
		Запись.Прочитать();
		                     
		Если Не Запись.Выбран() Тогда
			Запись.НомерСеанса 	= НомерСеансаИнформационнойБазы();
			Запись.Готов 			= Ложь;
			Запись.Записать(); КонецЕсли;
			
		// теперь узнаем скоко не готовых
		
		ТекущийРежим = ?(КоличествоНеГотовыКВыходу(), 2, 3);
		
	Иначе ТекущийРежим = 0; КонецЕсли;
	
	// Теперь у нас есть все данные чтобы передать
			
	Структура = Новый Структура("ТекущийРежим, КоличествоНеГотовых, ПолныеПрава, КонфигурацияИзменена, ВремяНаСервере, ВремяЗавершения, ВремяНачалаНапоминания",
				ТекущийРежим,
				КоличествоНеГотовых,
				РольДоступна("ПолныеПрава"),
				КонфигурацияИзменена,
				ТекущаяДата(),
				ВремяЗавершения,
				ВремяНачалаНапоминания);
	
	Возврат Структура;
	
КонецФункции
Функция ПолучитьПараметрыВремениМассив() Экспорт
	
	параметры = ПолучитьПараметрыВремени();
	
	Массив = Новый Массив;
	Для Каждого Элемент Из Параметры Цикл Массив.Добавить(Элемент.Значение); КонецЦикла;
	
	Возврат	Массив;
	
КонецФункции

Функция ПолучитьПутьКБазеИзСтрокиПодключения()
	
	Подключение = СтрЗаменить(СтрокаСоединенияИнформационнойБазы(), ";", Символы.ПС);
	стрСервер 	= СтрЗаменить(СтрПолучитьСтроку(Подключение, 1), """", Символы.ПС);
	стрБаза 	= СтрЗаменить(СтрПолучитьСтроку(Подключение, 2), """", Символы.ПС);
	
	Возврат СтрПолучитьСтроку(стрСервер, 2) + "\" + СтрПолучитьСтроку(стрБаза, 2);
	
КонецФункции
Процедура ОбновлениеБазыДанныхИзХранилища(КлючРазрешения, Пользователь, Пароль) Экспорт
	
	//ЗапуститьПриложение("1cv8.exe DESIGNER /s" + ПолучитьПутьКБазеИзСтрокиПодключения() + " /nCOMConnector /pqwerty /ConfigurationRepositoryFtcp://garage-server/garage /ConfigurationRepositoryNvesna /ConfigurationRepositoryP123456 /ConfigurationRepositoryUpdateCfg -force /UpdateDBCfg", КаталогПрограммы());
	
	Текст = КаталогПрограммы() + "\1cv8.exe DESIGNER" + 
		" /s" + ПолучитьПутьКБазеИзСтрокиПодключения() + " /n" + Пользователь + " /p" + Пароль +
		//" /ConfigurationRepositoryF tcp://localhost/garage /ConfigurationRepositoryNvesna /ConfigurationRepositoryP123456 /ConfigurationRepositoryUpdateCfg -force" +
		" /UpdateDBCfg -Dynamic- -Server";
		
	ЗаписьЖурналаРегистрации("Обновление",УровеньЖурналаРегистрации.Информация,,,"Запускаем обовлялку:
	|" + Текст);
	
	ЗапуститьПриложение(Текст, КаталогПрограммы());
	
КонецПроцедуры
Процедура ДождатьсяВремениИобновить(КлючРазрешения = "234", Пользователь = "хз", Пароль = "хз") Экспорт
	
	// Процедура ожидает часа X когда запустить обновление пока параметры Истина
	// и как наступает время запускает пакетынй файл
	
	ВремяЗавершения = Константы.ВремяЗавершенияРаботыПользователей.Получить();
	Если ВремяЗавершения > ТекущаяДата() Тогда
	
		Пока ПараметрыСеанса.ВыгонялкаНазначена Цикл
			
			Если ТекущаяДата() > ВремяЗавершения Тогда
				
				ОбновлениеБазыДанныхИзХранилища(КлючРазрешения, Пользователь, Пароль);
				ЗаписьЖурналаРегистрации("Обновление",УровеньЖурналаРегистрации.Информация,,,"Обновление запущено. Выхожу.");
				Прервать; КонецЕсли; КонецЦикла; КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнениеАлгоритма(Задача) Экспорт
	
	Выполнить(Задача.ТекстАлгоритма);
	
КонецПроцедуры
