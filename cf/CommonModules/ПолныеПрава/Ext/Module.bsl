

Функция ОбновлениеИБУспешно(стрОшибки) Экспорт
	
	// Проверяет требуется обновление, обновляет
	
	
	// ----- Привязка пользователей ИБ к справочнику по гуиду ------
	
	ПустойГуид = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 ИСТИНА ИЗ Справочник.Пользователи ГДЕ ПользовательИБ <> &ПустойГуид");
	Запрос.УстановитьПараметр("ПустойГуид", ПустойГуид);
	Если Запрос.Выполнить().Пустой() Тогда
		
		ДлинаКода			= Метаданные.Справочники.Пользователи.ДлинаКода;
		ПользоватиелиИБ 	= ПользователиИнформационнойБазы.ПолучитьПользователей();
		КодыПользователей 	= Новый Массив;
		
		Для Каждого ПользовательИБ Из ПользоватиелиИБ Цикл 
			
			ТекПольз = Справочники.Пользователи.НайтиПоКоду(Лев(ПользовательИБ.Имя + "                                                               ", ДлинаКода));
			Если Не ТекПольз.Пустая() И ТекПольз.ПользовательИБ = ПустойГуид Тогда
				
				ПользОб = ТекПольз.ПолучитьОбъект();
				ПользОб.ПользовательИБ = ПользовательИБ.УникальныйИдентификатор;
				
				Если Не ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(ПользОб,,стрОшибки) Тогда
					Возврат Ложь; КонецЕсли; КонецЕсли; КонецЦикла; КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПровестиДокумент(ДокументОбъект, РежимПроведенияДокумента = Неопределено, стрОшибки = "") Экспорт
	
	Если РежимПроведенияДокумента = Неопределено Тогда
		
		РежимПроведенияДокумента = РежимПроведенияДокумента.Неоперативный;
		
	КонецЕсли;
	
	Попытка
		
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента);
		
	Исключение
		
		стрОшибки = ОписаниеОшибки();
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция ДоступныВсеПартнеры(текПользователь = Неопределено) Экспорт
	
	Если РольДоступна("ПолныеПрава") Или РольДоступна("ПолныеПраваВОбласти") Тогда Возврат Истина КонецЕсли;
	
	// Если в настройках заполнено что доступный пустой контрагент или пустой пользователь (менеджер) значит видит всех пользователей
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ &ТекПользователь Пользователь ПОМЕСТИТЬ текПользователи ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ Ссылка ИЗ Справочник.ГруппыПользователей.Состав ГДЕ Пользователь = &ТекПользователь;
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1 ИСТИНА 
	|ИЗ РегистрСведений.ПравоПросмотраПартнеров 
	|ГДЕ 	Контрагент = &ПустойКонтрагент И 
	|		Пользователь В(ВЫБРАТЬ Пользователь ИЗ текПользователи)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1 ИСТИНА
	|ИЗ РегистрСведений.ПравоПросмотраМенеджеров
	|ГДЕ	(Менеджер = Неопределено ИЛИ Менеджер = &ПустойПользователь Или Менеджер = &ПустаяГруппа) И
	|		Пользователь В(ВЫБРАТЬ Пользователь ИЗ текПользователи)
	|");
	
	Запрос.УстановитьПараметр("ПустойПользователь",	Справочники.Пользователи.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяГруппа", 		Справочники.ГруппыПользователей.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойКонтрагент", 		Справочники.Контрагенты.ПустаяСсылка());
	Запрос.УстановитьПараметр("ТекПользователь", 	?(текПользователь = Неопределено, ПараметрыСеанса.ТекущийПользователь, текПользователь));
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ПолучитьДоступныхМенеджеров(ВидитВсех = Ложь) Экспорт
	
	// Возвращает пользователей у которых разрешена работа с парнерами
	
	// Все у кого назначено через право просмотра менеджеров
	// и в доверенных лицах
	// а также текущий пользователь и пустой пользователь
	// и если разрешена группа, то все пользователи из группы
	
	Запрос = Новый Запрос("
		
	// Определим кто такой текущий пользователь
	
	|ВЫБРАТЬ РАЗЛИЧНЫЕ Ссылка КАК Пользователь, Ссылка.Наименование ПОМЕСТИТЬ текПользователи ИЗ Справочник.ГруппыПользователей.Состав ГДЕ НЕ Ссылка.ПометкаУдаления И Пользователь = &текПользователь
	|ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ &текПользователь, """" ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ Неопределено, """" ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ &ПустойПользователь, """" ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ &ПустаяГруппа, """";
	
	// текущий пользователь	
	|ВЫБРАТЬ Пользователь, Наименование ИЗ текПользователи
	|ОБЪЕДИНИТЬ
	// право просмотра менеджеров
	|ВЫБРАТЬ ЕСТЬNULL(Груп.Пользователь, Прав.Менеджер), ЕСТЬNULL(Груп.Пользователь.Наименование, Менеджер.Наименование) ИЗ РегистрСведений.ПравоПросмотраМенеджеров Прав
	|ЛЕВОЕ СОЕДИНЕНИЕ	Справочник.ГруппыПользователей.Состав Груп
	|ПО 				Груп.Ссылка = Прав.Менеджер
	|ГДЕ Прав.Пользователь В (ВЫБРАТЬ Пользователь ИЗ текПользователи)
	|
	|ОБЪЕДИНИТЬ
	// доверенные лица
	|ВЫБРАТЬ Пользователь, Пользователь.Наименование ИЗ РегистрСведений.ДоверенныеЛицаПользователя ГДЕ ДоверенноеЛицо В (ВЫБРАТЬ Пользователь ИЗ текПользователи)
	|
	|УПОРЯДОЧИТЬ ПО Наименование
	|");
	
	Запрос.УстановитьПараметр("текПользователь", 	ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("ПустойПользователь", Справочники.Пользователи.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяГруппа", 		Справочники.ГруппыПользователей.ПустаяСсылка());
		
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
	
КонецФункции

Функция ПолучитьМенеджеровСДоступомКМоимПартнерам() Экспорт
	
	// Возвращает всех пользователей которые могут управлять парнерами текущего пользователя
	
	Запрос = Новый Запрос("
		
	// Определим кто такой текущий пользователь
	
	|ВЫБРАТЬ РАЗЛИЧНЫЕ Ссылка КАК Пользователь, Ссылка.Наименование Наименование ПОМЕСТИТЬ текПользователи ИЗ Справочник.ГруппыПользователей.Состав ГДЕ НЕ Ссылка.ПометкаУдаления И Пользователь = &текПользователь
	|ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ &текПользователь, """";
	
	// текущий пользователь	
	|ВЫБРАТЬ Пользователь, Наименование ИЗ текПользователи
	|ОБЪЕДИНИТЬ
	// право просмотра менеджеров
	|ВЫБРАТЬ Пользователь, Пользователь.Наименование ИЗ РегистрСведений.ПравоПросмотраМенеджеров ГДЕ Менеджер В (ВЫБРАТЬ Пользователь ИЗ текПользователи)
	|ОБЪЕДИНИТЬ
	// доверенные лица
	|ВЫБРАТЬ ДоверенноеЛицо, ДоверенноеЛицо.Наименование ИЗ РегистрСведений.ДоверенныеЛицаПользователя ГДЕ Пользователь В (ВЫБРАТЬ Пользователь ИЗ текПользователи)
	|
	|УПОРЯДОЧИТЬ ПО Наименование
	|");
	
	Запрос.УстановитьПараметр("текПользователь", 	ПараметрыСеанса.ТекущийПользователь);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
	
КонецФункции

