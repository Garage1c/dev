

//ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ И МОДУЛЯ ОБЪЕКТА

// Обработчик для события формы ПередЗаписьюНаСервере
//
Процедура ПередЗаписьюНаСервере(Форма, Ссылка, Отказ = Ложь) Экспорт
	
	Набор = РегистрыСведений.ПредставлениеКонтактнойИнформации.СоздатьНаборЗаписей();
   	Набор.Отбор.Объект.Установить(Ссылка);
	
	Набор.Загрузить(Форма.КонтактнаяИнформация.Выгрузить());
	
	Попытка
		Набор.Записать();
	Исключение
		ОбщиеФункции.СообщитьТекст("Ошибка при записи контактной информации
							|" + ОписаниеОшибки());
		Отказ = Истина;
	КонецПопытки;		
   
КонецПроцедуры

Процедура ПриСозданииНаСервере(Форма, Ссылка) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ * ИЗ РегистрСведений.ПредставлениеКонтактнойИнформации ГДЕ Объект = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Рез = Запрос.Выполнить();
	Если НЕ Рез.Пустой() Тогда
		Форма.КонтактнаяИнформация.Загрузить(Рез.Выгрузить());	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Ссылка, ПомечаетсяНаУдаление, Отказ) Экспорт
//Процедура ПередЗаписью(Объект, Ссылка, Отказ) Экспорт
	
	//Если НЕ Ссылка.ПометкаУдаления И Объект.ПометкаУдаления Тогда
	
	Если ПомечаетсяНаУдаление Тогда
	
		Отказ = НЕ УдалитьКонтактнуюИнформацияДляОбъекта(Ссылка)
		
	КонецЕсли;	
	
КонецПроцедуры



Функция УдалитьКонтактнуюИнформацияДляОбъекта(Объект) Экспорт
	
	НачатьТранзакцию();
		
		Набор = РегистрыСведений.ПредставлениеКонтактнойИнформации.СоздатьНаборЗаписей();
		Набор.Отбор.Объект.Установить(Объект);
		
		Попытка
			Набор.Записать();
		Исключение
			ОбщиеФункции.СообщитьТекст("Ошибка сохранения данных: " + ОписаниеОшибки());
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецПопытки;
		
		Набор = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
		Набор.Отбор.Объект.Установить(Объект);
		
		Попытка
			Набор.Записать();
		Исключение
			ОбщиеФункции.СообщитьТекст("Ошибка сохранения данных: " + ОписаниеОшибки());
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	Возврат Истина;	
	
КонецФункции

Функция ПеренаправитьКонтактнуюИнформацию(Источник, Приемник, ИмяКлюча, СтруктураОтбора = Неопределено, Менеджер) Экспорт
	
	Если СтруктураОтбора = Неопределено Тогда 
		СтруктураОтбора = Новый Структура;
	КонецЕсли;
	
	НачатьТранзакцию();
	
		// выбираем и чистим
		Набор  = Менеджер.СоздатьНаборЗаписей();
		Набор.Отбор[ИмяКлюча].Установить(Источник);
		Для Каждого Элемент Из СтруктураОтбора Цикл
			Набор.Отбор[Элемент.Ключ].Установить(Элемент.Значение);
		КонецЦикла;
		
		Набор.Прочитать();
		Таблица = Набор.Выгрузить();
		 
		Набор.Очистить();
		
		Попытка
			Набор.Записать();
		Исключение
			Сообщить("Ошибка при записи контактной информации: " + ОписаниеОшибки());
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецПопытки;
		
		Таблица.ЗаполнитьЗначения(Приемник, ИмяКлюча);
		
		// добавляем новую
		Набор = Менеджер.СоздатьНаборЗаписей();
		Набор.Отбор[ИмяКлюча].Установить(Приемник);
		Для Каждого Элемент Из СтруктураОтбора Цикл
			Набор.Отбор[Элемент.Ключ].Установить(Элемент.Значение);
		КонецЦикла;
		
		Набор.Загрузить(Таблица);
		
		Попытка
			Набор.Записать();
		Исключение
			Сообщить("Ошибка при записи контактной информации: " + ОписаниеОшибки());
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	Возврат Истина;
  	
КонецФункции

Функция КопироватьКонтактнуюИнформацию(Источник, Приемник, СтруктураОтбора = Неопределено) Экспорт
	
	Если СтруктураОтбора = Неопределено Тогда 
		СтруктураОтбора = Новый Структура;
	КонецЕсли;
	
	Отменить = Ложь;	
	НачатьТранзакцию();
	
	// КОНТАКТНАЯ ИНФОРМАЦИЯ
	
	// выбираем
	Набор  = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
	Набор.Отбор.Объект.Установить(Источник);
	Для Каждого Элемент Из СтруктураОтбора Цикл
		Набор.Отбор[Элемент.Ключ].Установить(Элемент.Значение);
	КонецЦикла;
	
	Набор.Прочитать();
	Таблица = Набор.Выгрузить();
	
	Если Таблица.Количество() Тогда
		Таблица.ЗаполнитьЗначения(Приемник, "Объект");
		
		// добавляем
		Набор = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
		Набор.Отбор.Объект.Установить(Приемник);
		Для Каждого Элемент Из СтруктураОтбора Цикл
			Набор.Отбор[Элемент.Ключ].Установить(Элемент.Значение);
		КонецЦикла;
		
		Набор.Загрузить(Таблица);
		
		Попытка
			Набор.Записать();
		Исключение
			Сообщить("Ошибка при записи контактной информации: " + ОписаниеОшибки());
			Отменить = Истина;
		КонецПопытки;
		
		Если Отменить Тогда
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	
	// ПРЕДСТВЛЕНИЕ КОНТАКТНОЙ ИНФОРМАЦИИ
	
	// выбираем
	Набор  = РегистрыСведений.ПредставлениеКонтактнойИнформации.СоздатьНаборЗаписей();
	Набор.Отбор.Объект.Установить(Источник);
	Для Каждого Элемент Из СтруктураОтбора Цикл
		Набор.Отбор[Элемент.Ключ].Установить(Элемент.Значение);
	КонецЦикла;
	
	Набор.Прочитать();
	Таблица = Набор.Выгрузить();
	
	Если Таблица.Количество() Тогда
		Таблица.ЗаполнитьЗначения(Приемник, "Объект");
		
		// добавляем
		Набор = РегистрыСведений.ПредставлениеКонтактнойИнформации.СоздатьНаборЗаписей();
		Набор.Отбор.Объект.Установить(Приемник);
		Для Каждого Элемент Из СтруктураОтбора Цикл
			Набор.Отбор[Элемент.Ключ].Установить(Элемент.Значение);
		КонецЦикла;
		
		Набор.Загрузить(Таблица);
		
		Попытка
			Набор.Записать();
		Исключение
			Сообщить("Ошибка при записи контактной информации: " + ОписаниеОшибки());
			Отменить = Истина;
		КонецПопытки;
		
		Если Отменить Тогда
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;	
	
	ЗафиксироватьТранзакцию();
	Возврат Истина;
  	
КонецФункции


// Записывает контактную информацию для набора значений измерений <СтруктураЗначений> и делает запись представления контактной информации
//
Функция ЗаписатьКонтактнуюИнформацию(СтруктураЗначений, СоответствиеЗначенийПолей = Неопределено, ЗначениеПоУмолчанию = Ложь) Экспорт
	
	НачатьТранзакцию();
	
		// записать представление
		Запись = РегистрыСведений.ПредставлениеКонтактнойИнформации.СоздатьМенеджерЗаписи();
		
		ЗаполнитьЗначенияСвойств(Запись, СтруктураЗначений);
		
		Попытка
			Запись.Записать();
		Исключение
			Сообщить("Ошибка при записи контактной информации: " + ОписаниеОшибки());
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецПопытки;
		
		// записать контактную информацию
		Если СоответствиеЗначенийПолей <> Неопределено Тогда
		
			Набор = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
		 	Набор.Отбор.Объект.Установить(СтруктураЗначений.Объект);
			Набор.Отбор.ID.Установить(СтруктураЗначений.ID);
			Набор.Отбор.Вид.Установить(СтруктураЗначений.Вид);
			
			Для Каждого Элемент Из СоответствиеЗначенийПолей Цикл
				Запись = Набор.Добавить();
				ЗаполнитьЗначенияСвойств(Запись, СтруктураЗначений);
				Запись.Поле = Элемент.Ключ;
				Запись.Значение = Элемент.Значение;
			КонецЦикла;
			
			Попытка
				Набор.Записать();
			Исключение
				Сообщить("Ошибка при записи контактной информации: " + ОписаниеОшибки());
				ОтменитьТранзакцию();
				Возврат Ложь;
			КонецПопытки;
			
		КонецЕсли;	
		
	ЗафиксироватьТранзакцию();
	Возврат Истина;
	
КонецФункции

// Удаляет контактную информацию и ее представление для набора значений измерений <Объект>, <Вид>, <ID>
//
Функция УдалитьЗаписьКонтактнойИнформации(Объект, Вид, ID) Экспорт
	
	НачатьТранзакцию();

		// удалить представление
		Набор = РегистрыСведений.ПредставлениеКонтактнойИнформации.СоздатьНаборЗаписей();
		Набор.Отбор.Объект.Установить(Объект);
		Набор.Отбор.Вид.Установить(Вид);
		Набор.Отбор.ID.Установить(ID);
		Попытка
			Набор.Записать();
		Исключение
			ОбщиеФункции.СообщитьТекст("Ошибка при записи контактной информации
								|" + ОписаниеОшибки());
			ОтменитьТранзакцию();					
			Возврат Ложь;
		КонецПопытки;

		// удалить контактную информацию
		Набор = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
		Набор.Отбор.Объект.Установить(Объект);
		Набор.Отбор.Вид.Установить(Вид);
		Набор.Отбор.ID.Установить(ID);
		
		Попытка
			Набор.Записать();
		Исключение
			ОбщиеФункции.СообщитьТекст("Ошибка при записи контактной информации
								|" + ОписаниеОшибки());
			ОтменитьТранзакцию();					
			Возврат Ложь;
		КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	Возврат Истина;
	
КонецФункции// СЛУЖЕБНЫЕ

// КонтактнаяИнформация - набор данных с полями Значение и Поле - ПланВидовХарактеристикСсылка.СоставКонтактнойИнформации
Функция ПолучитьСтроковоеПредставлениеАдресаБезСокращения(КонтактнаяИнформация) Экспорт
	
	Представление = "";
	
	Для Каждого Строка Из КонтактнаяИнформация Цикл
		Если ЗначениеЗаполнено(Строка.Значение) Тогда
			Представление = ?(ЗначениеЗаполнено(Представление), Представление + ", ", "") + Строка.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СокрЛП(Представление);

КонецФункции

Функция ПолучитьСтроковоеПредставлениеАдреса(КонтактнаяИнформация, ИмяПоля = "Поле", ЕстьСокращение = Истина) Экспорт
	
	Представление = "";
	НовКонт = КонтактнаяИнформация.Выгрузить();
	НовКонт.Сортировать("Вес");
	
	Для Каждого Строка Из НовКонт Цикл
		Если ЗначениеЗаполнено(Строка.Значение) Тогда
			БылоЗначение = Строка.Значение;
			Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Строка.Значение)) Тогда
				Если НЕ БылоЗначение.Родитель.Родитель.Пустая() Тогда
					Строка.Значение = БылоЗначение.Родитель.Родитель;
					ЗаполнитьСтроку(Представление,Строка,ЕстьСокращение,ИмяПоля);
				КонецЕсли;
				Если НЕ БылоЗначение.Родитель.Пустая() Тогда
					Строка.Значение = БылоЗначение.Родитель;
					ЗаполнитьСтроку(Представление,Строка,ЕстьСокращение,ИмяПоля);
				КонецЕсли;
				Строка.Значение = БылоЗначение;
			КонецЕсли;				
			ЗаполнитьСтроку(Представление,Строка,ЕстьСокращение,ИмяПоля);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СокрЛП(Представление);

КонецФункции

Процедура ЗаполнитьСтроку(Представление,Строка,ЕстьСокращение,ИмяПоля)
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Строка.Значение)) И Строка.Значение.Метаданные().Реквизиты.Найти("Пропускать")<>Неопределено И Строка.Значение.Пропускать = Истина Тогда
		//Если Строка.Значение.Метаданные().Реквизиты.Найти("Сокращение")<>Неопределено И ЗначениеЗаполнено(Строка.Значение.Сокращение) Тогда
		//	Представление = Представление + " " + Строка.Значение.Сокращение;
		//КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Сокращение = ?(ЕстьСокращение, Строка.Сокращение, Строка[ИмяПоля].Сокращение);
	Сокращение = Сокращение+?(ЗначениеЗаполнено(Сокращение)," ","");
	
	СимволРазделения 	= ?(Строка.ПереводСтроки, Символы.ПС, ", ");
	Представление 		= ?(ЗначениеЗаполнено(Представление), Представление + СимволРазделения, "") + Сокращение + Формат(Строка.Значение,"ЧГ=");
КонецПроцедуры

// Получить значение определенного вида контактной информации у объекта
Функция ПолучитьКонтактнуюИнформацияОбъекта(Ссылка, ВидКонтактнойИнформации) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтактнаяИнформация.Представление
	|ИЗ
	|	Справочник." + Ссылка.Метаданные().Имя + ".КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Ссылка = &Ссылка
	|	И КонтактнаяИнформация.Вид = &Вид";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Вид",    ВидКонтактнойИнформации);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Представление;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

// Получить значение определенного вида представления контактной информации у объекта
Функция ПолучитьПредставлениеКонтактнойИнформацииОбъекта(Ссылка, ВидКонтактнойИнформации) Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПредставлениеКонтактнойИнформации.Представление
	               |ИЗ
	               |	РегистрСведений.ПредставлениеКонтактнойИнформации КАК ПредставлениеКонтактнойИнформации
	               |ГДЕ
	               |	ПредставлениеКонтактнойИнформации.Объект = &Ссылка
	               |	И ПредставлениеКонтактнойИнформации.Вид = &Вид" ;
		
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Вид",    ВидКонтактнойИнформации);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Представление;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции


///////////////////////////////////////////////////////////////////////////////
/////// HTML

Процедура ПолучитьШапку(Текст)
	
	Текст = Текст + "
		|<!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Strict//EN"" ""http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"">
		|<html xmlns=""http://www.w3.org/1999/xhtml"" xml:lang=""ru"">
		|
		|<head>
		|	<meta http-equiv=""Content-Type"" content=""text/html"" />
		|</head>
		|
		|<body>"
	
КонецПроцедуры

Процедура ПолучитьШапкуОсновнойТаблицы(Текст)
	
	Текст = Текст + "
	 		|<table width=""100%"" border=""0"" cellspacing=""0"" cellpadding=""0"">
			|	<tr>
			|		<td align=""center"" valign=""top"">
			|";

КонецПроцедуры	
		
Процедура ЗаполнитьЗаголовок(Текст, Наименование, Расшифровка, Группа)
	
	Если ПустаяСтрока(Группа) Тогда
		Текст = Текст + "
			|<table width=""95%"" cellspacing=""0"" cellpadding=""0"" border=""0"" style=""margin:15px 0 0"">
			|	<tr>
			|			<td align=""left"" style=""font-family:Verdana,Geneva,sans-serif; font-size:16px; color:#000000"">" + Наименование + "
			|			</td>
			|	</tr>
			|</table>
			|";
		Возврат;
	КонецЕсли;	
	
	Текст = Текст + "
		|<table width=""95%"" cellspacing=""0"" cellpadding=""0"" border=""0"" style=""margin:5px 0 0"">
		|	<tr>
		|			<td rowspan=""2"" align=""left"" style=""font-family:Verdana,Geneva,sans-serif; font-size:18px; color:#000000"">" + Наименование + "
		|			</td>
		|			<td align=""right"" style=""padding:0px 0px 5px 0px; font-family:Verdana,Geneva,sans-serif; font-size:14px; color:#000000;border-bottom:1px solid #bbbbbb"">" + Расшифровка + "
		|			</td>
		|	</tr>
		|   <tr>
		|			<td align=""right"" style=""padding:5px 0px 0px 0px; font-family:Verdana,Geneva,sans-serif; font-size:12px; color:#000000"">" + Группа + "
		|			</td>
		|	</tr>
		|</table>
		|";
	
КонецПроцедуры
	
Процедура ЗаполнитьКомментарий(Текст, Комментарий)
	
	Если ЗначениеЗаполнено(Комментарий) Тогда
	
		Текст = Текст + "
			|<table width=""95%"" cellspacing=""0"" cellpadding=""0"" border=""0"" style=""margin:5px 0 0"">
			|	<tr>
			|			<td width=""20%"" align=""left"" valign=""top"" style=""padding:5px 5px;font-family: Verdana,Geneva,sans-serif;font-size:12px;color:#333333""><i><b>Комментарий: </b></i>
			|			</td>
			|			<td width=""80%"" align=""left"" valign=""top"" style=""padding:5px 5px;font-family: Verdana,Geneva,sans-serif;font-size:12px;color:#333333"">" + Комментарий + "
			|			</td>
			|	</tr>	
			|</table>
			|";
			
	КонецЕсли;
	
КонецПроцедуры

// контактная информация
Процедура ПолучитьШапкуИнформации(Текст)
	
	Текст = Текст + "<table width=""95%"" cellspacing=""0"" cellpadding=""0"" border=""0"" style=""margin:20px 0 0"">";

КонецПроцедуры
Процедура ЗаполнитьИнформацию(Текст, Вид, Представление, Выделить = Ложь)	
	
	Текст = Текст + "
		|	<tr>
		|			<td align=""left"" valign=""top"" style=""padding:5px 5px;font-family: Verdana,Geneva,sans-serif;font-size:12px;color:#333333""><i>" + ?(Выделить, "<b>", "") + Вид + ?(Выделить, "</b>", "") + "</i>
		|			</td>
		|			<td align=""left"" valign=""top"" style=""padding:5px 5px;font-family: Verdana,Geneva,sans-serif;font-size:12px;color:#333333"">" + ?(Выделить, "<b>", "") + Представление + ?(Выделить, "</b>", "") + "
		|			</td>
		|	</tr>
		|"; 
	
КонецПроцедуры
Процедура ПолучитьПодвалИнформации(Текст)
	Текст = Текст + "</table>";
КонецПроцедуры

Процедура ПолучитьПодвалОсновнойТаблицы(Текст)
	
	Текст = Текст + "
		|		</td>
		|	</tr>
		|</table>";
	
КонецПроцедуры

Процедура ПолучитьПодвал(Текст)
	
	Текст = Текст + "
		|</body>
		|
		|</html>
		|";
	
КонецПроцедуры

// справочник-вложение
Процедура ПолучитьШапкуКонтактов(Текст)
	
	Текст = Текст + "<table width=""95%"" cellspacing=""0"" cellpadding=""0"" border=""0"" style=""margin:5px 0 0"">";
	
КонецПроцедуры
Процедура ЗаполнитьСтрокуКонтакты(Текст, Имя, ДопИнфа)
	СтрокаИнфы = ДопИнфа;	
	Если ТипЗнч(ДопИнфа) = Тип("Дата") Тогда
		СтрокаИнфы = Формат(ДопИнфа, "ДФ=dd.MM.yyyy");	
	КонецЕсли;	
	
	Текст = Текст + "
		|	<tr>
		|			<td colspan = 2; align=""left"" valign=""top"" style=""padding:20px 5px 10px 5px;font-family: Verdana,Geneva,sans-serif;font-size:12px;color:#333333;border-bottom:1px solid #bbbbbb;""><b>" + Имя + ?(ЗначениеЗаполнено(СтрокаИнфы)," (" + СтрокаИнфы + ")" , "") + "</b>
		|			</td>
		|	</tr>
	    |";
КонецПроцедуры
Процедура ПолучитьПодвалКонтакты(Текст)
	Текст = Текст + "</table>";
КонецПроцедуры

// контактная информация для справочника-вложения

Процедура ПолучитьШапкуТаблицыКонтактов(Текст)
	Текст = Текст + "
		|	<tr>
		|			<td width=""10%"">
		|			</td>	
		|			<td>			
		|					<table width=""100%"" cellspacing=""0"" cellpadding=""0"" border=""0"" style=""margin:10px 0 0"">
	    |";
	
КонецПроцедуры
Процедура ЗаполнитьСтрокуТаблицыКонтакты(Текст, Вид, Представление)
	
	Текст = Текст + "	
		|	<tr>
		|			<td align=""left"" valign=""top"" style=""padding:5px 5px;font-family: Verdana,Geneva,sans-serif;font-size:12px;color:#333333;""><i>" + Вид + "</i>
		|			</td>
		|			<td align=""left"" valign=""top"" style=""padding:5px 5px;font-family: Verdana,Geneva,sans-serif;font-size:12px;color:#333333;"">" + Представление+ "
		|			</td>
		|	</tr>
		|"; 
	
КонецПроцедуры
Процедура ПолучитьПодвалТаблицыКонтакты(Текст)
	Текст = Текст + "
		// закрываем таблицу КИ контактного лица
		|					</table>
		|			</td>
		|	</tr>
	    |";
	
КонецПроцедуры

// карточка
Процедура СформироватьКарточкуКонтактаHTML(Текст, Ссылка, Справочник, Вложение = Неопределено, ПолеГруппа = "", ПолеРасшифровка = "", ПолеКомментарий = "", СписокРеквизитов = Неопределено, ЗаполнятьШапку = Истина, ПоказатьКИ = Истина) Экспорт
	
	Если ЗаполнятьШапку Тогда 
		ПолучитьШапку(Текст);
    	ПолучитьШапкуОсновнойТаблицы(Текст);
	КонецЕсли;
	
	ЕстьВложение = Вложение <> Неопределено;
	
	Если ЕстьВложение Тогда
		СправочникВложение 	= Вложение.СправочникВложение;
		РеквизитСвязи		= Вложение.РеквизитСвязи;	
	 	ДопРеквизитВложения = Вложение.ДопРеквизитВложения;
	КонецЕсли;
	 
	РеквизитыСтрока = "";
	Если СписокРеквизитов <> Неопределено Тогда
		Для Каждого Реквизит Из СписокРеквизитов Цикл
			РеквизитыСтрока = РеквизитыСтрока + ", " + Реквизит.Ключ;
		КонецЦикла;
	КонецЕсли;
            
	Запрос = Новый Запрос("	ВЫБРАТЬ
							|	Наименование,
							|	" + ?(ЗначениеЗаполнено(ПолеРасшифровка), ПолеРасшифровка, """""") + " КАК Шапка,
							|	" + ?(ЗначениеЗаполнено(ПолеГруппа), ПолеГруппа, """""") + " КАК Группа,
							|	" + ?(ЗначениеЗаполнено(ПолеКомментарий), ПолеКомментарий, """""") + " КАК Комментарий
							|	" + РеквизитыСтрока + "
 							|ИЗ
							|	Справочник." + Справочник + "
							|ГДЕ
							|	Ссылка = &Ссылка" + 
							?(ПоказатьКИ, "
							|;
							|ВЫБРАТЬ
							|	Вид,
							|	Представление
							|ИЗ
							|	РегистрСведений.ПредставлениеКонтактнойИнформации
							|ГДЕ
							|	Объект = &Ссылка
							|УПОРЯДОЧИТЬ ПО Вид.Родитель", "") + 
							?(ЕстьВложение, "
							|;
							|ВЫБРАТЬ
							|	Спр.Ссылка,
							|	Рег.Вид,
							|	Рег.Представление
							|ИЗ
							|	Справочник." + СправочникВложение + " Спр
							|	ЛЕВОЕ СОЕДИНЕНИЕ
							|		РегистрСведений.ПредставлениеКонтактнойИнформации Рег
							|	ПО Рег.Объект = Спр.Ссылка
							|ГДЕ " + ?(РеквизитСвязи = "Владелец", "
							|	Спр.Владелец = &Ссылка","
							|	Спр.Ссылка = &СсылкаВложение") + "
							|УПОРЯДОЧИТЬ ПО Рег.Вид.Родитель
							|ИТОГИ ПО Спр.Ссылка", "") + "
							|");
							
	Запрос.УстановитьПараметр("Ссылка", Ссылка);						
	Если ЕстьВложение И РеквизитСвязи <> "Владелец" Тогда
		Запрос.УстановитьПараметр("СсылкаВложение", Ссылка[РеквизитСвязи]);
	КонецЕсли;
	
	Рез = Запрос.ВыполнитьПакет();
	
	// ШАПКА
	Пакет = Рез[0];
	Если Пакет.Пустой() Тогда
		 Возврат;
	КонецЕсли;
	 
	Выборка = Пакет.Выбрать();
	Выборка.Следующий();
	
	ЗаполнитьЗаголовок(Текст, Выборка.Наименование, Выборка.Шапка, Выборка.Группа);
	Комментарий = Выборка.Комментарий;
	
	// ДОП РЕКВИЗИТЫ
	Если СписокРеквизитов <> Неопределено Тогда
	    ПолучитьШапкуИнформации(Текст);
		Для Каждого Реквизит Из СписокРеквизитов Цикл
			Ключ =  Реквизит.Ключ;
			Если ЗначениеЗаполнено(Выборка[Ключ]) Тогда
				ЗаполнитьИнформацию(Текст, Ключ, Выборка[Ключ]);
			КонецЕсли;
		КонецЦикла;
		ПолучитьПодвалИнформации(Текст);
	КонецЕсли;
	
	// КОНТАКТНАЯ ИНФОРМАЦИЯ
	Если ПоказатьКИ Тогда
		Пакет = Рез[1];
		Если НЕ Пакет.Пустой() Тогда
			ПолучитьШапкуИнформации(Текст);
			Выборка = Пакет.Выбрать();		
		
			Пока Выборка.Следующий() Цикл
				ЗаполнитьИнформацию(Текст, Выборка.Вид, Выборка.Представление);
			КонецЦикла;
			
			ПолучитьПодвалИнформации(Текст);
		КонецЕсли;
	КонецЕсли;
	
	// ВЛОЖЕНИЕ
	Если ЕстьВложение Тогда
	
	 	Пакет = Рез[2];
		Если НЕ Пакет.Пустой() Тогда
			ПолучитьШапкуКонтактов(Текст);
			ВыборкаКонтакты = Пакет.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
			
			Пока ВыборкаКонтакты.Следующий() Цикл
			    ЗаполнитьСтрокуКонтакты(Текст, ВыборкаКонтакты.Ссылка.Наименование, ВыборкаКонтакты.Ссылка[ДопРеквизитВложения]);
				
				Выборка = ВыборкаКонтакты.Выбрать();
				Если Выборка.Количество() Тогда
					ПолучитьШапкуТаблицыКонтактов(Текст);
					
					Пока Выборка.Следующий() Цикл
					
						ЗаполнитьСтрокуТаблицыКонтакты(Текст, Выборка.Вид, Выборка.Представление);
					КонецЦикла;
					
					ПолучитьПодвалТаблицыКонтакты(Текст)
				КонецЕсли;
			КонецЦикла;	
	        ПолучитьПодвалКонтакты(Текст);
		КонецЕсли;
		
	КонецЕсли;	
		
	// ПОДВАЛ
	ЗаполнитьКомментарий(Текст, Комментарий);
	
	Если ЗаполнятьШапку Тогда
		ПолучитьПодвалОсновнойТаблицы(Текст);
		ПолучитьПодвал(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьРазделитель(Текст, Заголовок)
	
	Текст = Текст + "
	|<table width=""95%"" cellspacing=""0"" cellpadding=""0"" border=""0"" style=""margin:20px 0 0"">
	|	<thead>
    |			<tr>
    |		        <th style=""padding:5px 5px; background-color:#fff; text-align:center;color:#000000;font-weight:400;line-height:20px;font-family: Verdana,Geneva,sans-serif;font-size:14px;border-bottom:1px solid #bbbbbb;"">" + Заголовок + "</th>
    |           </tr>
    |	</thead>
    |			<tr>
	|				<td align=""center"" valign=""top"">";
	
	
КонецПроцедуры
&НаСервере
Процедура ПолучитьПодвалДополнительнойТаблицы(Текст)
	
	Текст = Текст + "
		|		</td>
		|	</tr>
		|</table>";
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокОрагнизаций(Ссылка)
	
	Список = Новый СписокЗначений;	
	
	Запрос = Новый Запрос("ВЫБРАТЬ Организация, НомерДоговора, ЗначениеПоУмолчанию  ИЗ Справочник.Контрагенты.Организации ГДЕ Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Рез = Запрос.Выполнить();
	
	Если НЕ Рез.Пустой() Тогда
		
		Выборка = Рез.Выбрать();
		Пока Выборка.Следующий() Цикл
			Список.Добавить(Выборка.Организация, Выборка.НомерДоговора, Выборка.ЗначениеПоУмолчанию);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Список;
	
КонецФункции

Функция ПолучитьКарточкуКонтактаHTML(Ссылка, Справочник) Экспорт
	
	Текст = "";
	
	Если Справочник = "Контрагенты" Тогда
											

		ПолучитьШапку(Текст);
	    ПолучитьШапкуОсновнойТаблицы(Текст);

		СформироватьКарточкуКонтактаHTML(Текст, Ссылка, Справочник, 
											Новый Структура ("СправочникВложение, РеквизитСвязи, ДопРеквизитВложения",
														"ФизическиеЛица", "ФизЛицо", "ДатаРождения"),
											"Контрагент", "НаименованиеПолное", "Комментарий", Новый Структура("ЮрФизЛицо, ИНН, КПП, КодПоОКПО"));	

		СписокОрганизаций = ПолучитьСписокОрагнизаций(Ссылка);
		
		Если СписокОрганизаций.Количество() Тогда
			ПолучитьРазделитель(Текст, "Организации");
		КонецЕсли;
		ПолучитьШапкуИнформации(Текст);
		Для Каждого Строка Из СписокОрганизаций Цикл
			ЗаполнитьИнформацию(Текст, Строка.Представление, Строка.Значение, Строка.Пометка);
		КонецЦикла;	
		
		ПолучитьПодвалИнформации(Текст);
 	
		Если СписокОрганизаций.Количество() Тогда
			ПолучитьПодвалДополнительнойТаблицы(Текст);
		КонецЕсли;
		
		ПолучитьПодвалОсновнойТаблицы(Текст);
		ПолучитьПодвал(Текст);
		
	ИначеЕсли Справочник = "КонтактныеЛица" Тогда
		СформироватьКарточкуКонтактаHTML(Текст, Ссылка, Справочник, 
											Новый Структура ("СправочникВложение, РеквизитСвязи, ДопРеквизитВложения",
														"ФизическиеЛица", "ФизЛицо", "ДатаРождения"),
											"Должность", "Владелец", "Комментарий");			
	ИначеЕсли Справочник = "ФизическиеЛица" Тогда
		СформироватьКарточкуКонтактаHTML(Текст, Ссылка, Справочник, ,
											"Родитель", , "Комментарий");		
	КонецЕсли;
										
	Возврат Текст;									
		
КонецФункции

