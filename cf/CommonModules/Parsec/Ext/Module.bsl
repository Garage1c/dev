
Функция ПолучитьмассивКодовОперацииПарсекаВходВыход()
	
	КодыОперацииПарсек = Новый Массив;
	КодыОперацииПарсек.Добавить(118);
	КодыОперацииПарсек.Добавить(113);
	КодыОперацииПарсек.Добавить(64);
	КодыОперацииПарсек.Добавить(65);
	
	Возврат КодыОперацииПарсек;
	
КонецФункции
Функция ПолучитьЗапросСЗагруженнойТаблицейПарсек(ТекстЗапроса, ТаблSQL)
	
	Запрос = Новый Запрос(ТекстЗапроса);
	МенеджерВременныхТаблиц 		= Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц 	= МенеджерВременныхТаблиц;
		
	Запрос.УстановитьПараметр("SQL", ТаблSQL);
	Запрос.Выполнить();

	Возврат Запрос;
	
КонецФункции

Функция ПодключитьКПарсек() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	менеджер = ВнешниеИсточникиДанных.Парсек;
	
	Если менеджер.ПолучитьСостояние() = СостояниеВнешнегоИсточникаДанных.Отключен Тогда
		
		Если ПустаяСтрока(менеджер.ПолучитьОбщиеПараметрыСоединения().СтрокаСоединения) Тогда
			
			Параметры = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
			Параметры.АутентификацияОС 			= Ложь;
			Параметры.АутентификацияСтандартная = Истина;
			Параметры.СтрокаСоединения 			= Константы.СтрокаПодключенияParsec.Получить();
			//Параметры.ИмяПользователя 		
			//Параметры.Пароль					
		
			менеджер.УстановитьОбщиеПараметрыСоединения(Параметры); КонецЕсли;
		
		Попытка
			менеджер.УстановитьСоединение();
		Исключение
			ОбщиеФункции.СообщитьТекст(ОписаниеОшибки());
			УстановитьПривилегированныйРежим(Ложь);
			Возврат Ложь; КонецПопытки;КонецЕсли;
	
	Подключен = ВнешниеИсточникиДанных.Парсек.ПолучитьСостояние() = СостояниеВнешнегоИсточникаДанных.Подключен;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Подключен;
	
КонецФункции
Функция ПолучитьКодПарсекаФизЛица(ФизЛицо, Дата = Неопределено)
	
	Если ПодключитьКПарсек() Тогда
	
		Запрос = Новый Запрос("
		|ВЫБРАТЬ ПЕРВЫЕ 1 	Карта.КодParsec КодПарсек 
		|ИЗ 				РегистрСведений.НазначенияКартФизЛицам.СрезПоследних(" + ?(Дата = Неопределено, "", "&Дата") + ", ФизЛицо = &ФизЛицо)");
		
		Запрос.УстановитьПараметр("ФизЛицо", 	ФизЛицо);
		Запрос.УстановитьПараметр("Дата", 		Дата);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.КодПарсек; КонецЕсли; КонецЕсли;
			//Возврат ПреобразоватьКодПарсека1сКПарсеку(Выборка.КодПарсек); КонецЕсли; КонецЕсли;
	
КонецФункции

Функция ПолучитьТаблицуВходовВыходовЗаДеньПоСотрудникам(День, ФизЛицоИлиФизЛица = Неопределено, ВидитВсех = Ложь) Экспорт
	
	// Возвращает таблицу значений в которой
	// - ФизЛицо
	// - Вход
	// - Выход
	//
	// если указать ФизЛицоИлиФизЛица тогда вернет только по указанным физ лицам
	
	// Получим таблицу за день из парсека
	
	ТаблицаСобытий = ПолучитьСобытия(НачалоДня(День), КонецДня(День));
	Если ТаблицаСобытий <> Неопределено Тогда
		
		Запрос = ПолучитьЗапросСЗагруженнойТаблицейПарсек("ВЫБРАТЬ Табл.ДатаСобытия ДатаСобытия, Табл.ИдКарты ИдКарты ПОМЕСТИТЬ SQL ИЗ &SQL КАК Табл", ТаблицаСобытий);
		
		Таблица = Новый ТаблицаЗначений;
		Таблица.Колонки.Добавить("ФизЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
		Таблица.Колонки.Добавить("Вход", 	Новый ОписаниеТипов("Дата"));
		Таблица.Колонки.Добавить("Выход", 	Новый ОписаниеТипов("Дата"));
		
		Запрос.Текст = "
		|ВЫБРАТЬ 
		|	Назн.ФизЛицо 	ФизЛицо, 
		|	Лог.ДатаСобытия Дата
		|ИЗ
		|	SQL Лог
		|
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	РегистрСведений.НазначенияКартФизЛицам.СрезПоследних(&Дата) Назн
		|ПО
		|	Назн.Карта.КодParsec = Лог.ИдКарты
		|
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(Лог.ДатаСобытия, ДЕНЬ) = &Дата
		|" + ?(ФизЛицоИлиФизЛица = Неопределено,"
		|	" + ?(ВидитВсех,"","
		|	И (Назн.ФизЛицо = &текФизЛицо ИЛИ Назн.ФизЛицо В(ВЫБРАТЬ Кого ИЗ РегистрСведений.ПравоПросмотраПосещений ГДЕ Кто = &текПользователь))") + "
		|","
		|И Назн.ФизЛицо В(&ФизЛицо)") + "
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ ФизЛицо, Период
		|ИЗ РегистрСведений.ЛогParsecРучной Лог	
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(Период, ДЕНЬ) = &Дата
		|" + ?(ФизЛицоИлиФизЛица = Неопределено,"
		|	" + ?(ВидитВсех,"","
		|	И (ФизЛицо = &текФизЛицо ИЛИ ФизЛицо В(ВЫБРАТЬ Кого ИЗ РегистрСведений.ПравоПросмотраПосещений ГДЕ Кто = &текПользователь))") + "
		|","
		|И ФизЛицо В(&ФизЛицо)") + "
		|
		|УПОРЯДОЧИТЬ ПО ФизЛицо, Дата
		|
		|ИТОГИ ПО ФизЛицо
		|";
		
		Если ТипЗнч(ФизЛицоИлиФизЛица) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			Масс = Новый Массив;
			Масс.Добавить(ФизЛицоИлиФизЛица);
			Запрос.УстановитьПараметр("ФизЛицо", Масс);
		Иначе 
			Запрос.УстановитьПараметр("ФизЛицо", ФизЛицоИлиФизЛица); КонецЕсли;
			
		Запрос.УстановитьПараметр("ФизЛицо", 			ФизЛицоИлиФизЛица);
		Запрос.УстановитьПараметр("текФизЛицо", 		ПараметрыСеанса.ТекущийПользователь.ФизЛицо);
		Запрос.УстановитьПараметр("текПользователь", 	ПараметрыСеанса.ТекущийПользователь);
		Запрос.УстановитьПараметр("Дата", 				НачалоДня(День));
		
		ВыборкаСотрудников = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		
		Пока ВыборкаСотрудников.Следующий() Цикл
			
			ЭтоВход = Истина;
			
			Выборка = ВыборкаСотрудников.Выбрать();
			Пока Выборка.Следующий() Цикл
				Если ЭтоВход Тогда
					
					НовСтрока = Таблица.Добавить();
					НовСтрока.ФизЛицо 	= Выборка.ФизЛицо;
					НовСтрока.Вход 		= Выборка.Дата;
					ЭтоВход = Ложь;
				Иначе
					НовСтрока.Выход = Выборка.Дата;
					ЭтоВход = Истина; КонецЕсли; КонецЦикла; КонецЦикла;
		
		Возврат Таблица; КонецЕсли;
	
КонецФункции

Функция ПользовательНаРаботе(Дата = '00010101', ФизЛицо = Неопределено) Экспорт
	
	// Проверяет пользователь на работе или нет на указанную дату
	// по умолчанию это текущий пользователь на текущую дату
	
	Если Дата = '00010101' Тогда Дата = ТекущаяДата(); КонецЕсли;
	Если ФизЛицо = Неопределено Тогда ФизЛицо = ПараметрыСеанса.ТекущийПользователь.ФизЛицо; КонецЕсли;
	
	КодПарсека = ПолучитьКодПарсекаФизЛица(ФизЛицо, Дата);
	
	Если КодПарсека <> Неопределено Тогда
	
		Запрос = Новый Запрос("
		|ВЫБРАТЬ 	TranDateTime Дата
		|ИЗ			ВнешнийИсточникДанных.Парсек.Таблица.ЛогПарсека
		|
		|ГДЕ 	НАЧАЛОПЕРИОДА(TranDateTime, ДЕНЬ) = &ДатаНачалоДень И
		|		TranDateTime <= &Дата И
		|		TranUser ПОДОБНО ""%" + КодПарсека + "%""
		|
		|УПОРЯДОЧИТЬ ПО Дата
		|");
		
		Запрос.УстановитьПараметр("ДатаНачалоДень", НачалоДня(Дата));
		Запрос.УстановитьПараметр("Дата", 			Дата);
		
		КолПиков = Запрос.Выполнить().Выгрузить().Количество();
		Возврат КолПиков / 2 <> Цел(КолПиков / 2); КонецЕсли;
	
	Возврат Ложь;
		
КонецФункции
Функция ПользовательНаРаботеИлиБылВЭтотДень(Дата = '00010101', ФизЛицо = Неопределено) Экспорт
	
	// Проверяет пользователь на работе или нет на указанную дату
	// по умолчанию это текущий пользователь на текущую дату
	
	Если Дата = '00010101' Тогда Дата = ТекущаяДата(); КонецЕсли;
	Если ФизЛицо = Неопределено Тогда ФизЛицо = ПараметрыСеанса.ТекущийПользователь.ФизЛицо; КонецЕсли;
	
	КодПарсека = ПолучитьКодПарсекаФизЛица(ФизЛицо, Дата);
	
	Если КодПарсека <> Неопределено Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ 	ПЕРВЫЕ 1 ИСТИНА
		|ИЗ			ВнешнийИсточникДанных.Парсек.Таблица.ЛогПарсека
		|
		|ГДЕ 	НАЧАЛОПЕРИОДА(TranDateTime, ДЕНЬ) = &ДатаНачалоДень И
		|		TranDateTime <= &Дата И
		|		TranUser ПОДОБНО ""%" + КодПарсека + "%""
		|");
		
		Запрос.УстановитьПараметр("ДатаНачалоДень", НачалоДня(Дата));
		Запрос.УстановитьПараметр("Дата", 			Дата);
		
		Возврат Не Запрос.Выполнить().Пустой(); КонецЕсли;
	
	Возврат Ложь;
		
КонецФункции

// ПРАВА

Функция ПользовательУчаствуетВКонтролеРабочегоВремени(Пользователь = Неопределено) Экспорт
	
	Если Пользователь = Неопределено Тогда Пользователь = ПараметрыСеанса.ТекущийПользователь; КонецЕсли;
		
	Возврат Пользователь.КонтрольВремениПосещений;
	
КонецФункции
Функция ПользовательМожетПросматриватьИнформациюОПосещениях() Экспорт
	
	Возврат РольДоступна("ПолныеПрава") Или РольДоступна("ПолныеПраваВОбласти") Или РольДоступна("ОтображатьИнформациюОПосещенииРабочегоМеста");
	
КонецФункции

Функция ПользователюОграниченПросмотр() Экспорт
	
	Возврат КэшируемыеФункции.ПользователюОграниченПросмотр();
	
КонецФункции

// Работа с SQL

Процедура ПреобразоватьВТаблицеКодПарсекККоду(Табл, ИмяКолонки = "ИдКарты")
	
	// Преобразует код парсека к парсеку удаляя лишнии записи
	
	КолСтрок = Табл.Количество();
	
	Для Ном = 1 По КолСтрок Цикл
			
		Строка = Табл[КолСтрок - Ном];
		нач = СтрНайти(Строка[ИмяКолонки], "$");
			
		Если Не Нач Тогда Табл.Удалить(Строка); Продолжить; КонецЕсли; // если нет ключ $ значит мы не сможем определить код
			
		Строка[ИмяКолонки] = ВРЕГ(Сред(Строка[ИмяКолонки], Нач + 1, СтрНайти(Строка[ИмяКолонки], " ",, нач) - нач - 1)); КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСобытия(ДатаНачала = Неопределено, ДатаОкончания = Неопределено) Экспорт
	
	// Возвращает таблицу в которой
	//	ДатаСобытия 	- дата события
	//	ИдКарты 		- идентификатор карты 8 символов
	
	// Иницилизируем внешний источник данныз
	
	Если ПодключитьКПарсек() Тогда
		
		// Запросим запрос у ADO
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ	TranDateTime ДатаСобытия, TranUser ИдКарты 
		|ИЗ			ВнешнийИсточникДанных.Парсек.Таблица.ЛогПарсека
		|ГДЕ		TranCode В(&Коды)" + ?(ДатаНачала = Неопределено, "", " И TranDateTime >= &ДатаНачала") + ?(ДатаОкончания = Неопределено,""," И TranDateTime <= &ДатаОкончания"));
		
		Запрос.УстановитьПараметр("Коды", 			ПолучитьмассивКодовОперацииПарсекаВходВыход());
		Запрос.УстановитьПараметр("ДатаНачала", 	ДатаНачала);
		Запрос.УстановитьПараметр("ДатаОкончания", 	ДатаОкончания);
		
		Табл = Запрос.Выполнить().Выгрузить();
		ПреобразоватьВТаблицеКодПарсекККоду(Табл);
		Возврат Табл; КонецЕсли;
		
КонецФункции

Функция ПолучитьСобытияСКартами(ДатаНачала = Неопределено) Экспорт
	
	// Возвращает таблицу в которой
	//	Дата 	- дата события
	//	ИдКарты - идентификатор карты 8 символов
	//	Карта 	- информационная карта
	
	Табл = ПолучитьСобытия(ДатаНачала);
	Если Табл = Неопределено Тогда Возврат Неопределено; КонецЕсли;
	
	// Поместим таблицу на сервер
	
	Запрос = ПолучитьЗапросСЗагруженнойТаблицейПарсек("ВЫБРАТЬ Табл.ИдКарты ИдКарты, Табл.ДатаСобытия ДатаСобытия ПОМЕСТИТЬ SQL ИЗ &SQL КАК Табл", Табл);
	
	// Выполним запрос
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	sql.ИдКарты			КАК ИдКарты,
	|	sql.ДатаСобытия		КАК ДатаСобытия,
	|	ЕСТЬNULL(Карты.Ссылка, ЗНАЧЕНИЕ(Справочник.ИнформационныеКарты.ПустаяСсылка)) КАК Карта
	|ИЗ
	|	SQL КАК SQL
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.ИнформационныеКарты Карты
	|ПО
	|	SQL.ИдКарты = Карты.КодParsec
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата
	|";
	
	// Вернем
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьСобытияСКартамиИФизиками(ДатаНачала = Неопределено) Экспорт
	
	// Возвращает таблицу в которой
	//	Дата 	- дата события
	//	ИдКарты - идентификатор карты 8 символов
	//	Карта 	- информационная карта
	//	ФизЛицо - Физ лицо которому принадлежит карта на тот момент времени
	
	Табл = ПолучитьСобытияСКартами(ДатаНачала);
	Если Табл = Неопределено Тогда Возврат Неопределено; КонецЕсли;
	
	Табл.Колонки.Добавить("ФизЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	
	// Запросим таблицу по юзерам
	
	Запрос = Новый Запрос("ВЫБРАТЬ Период, Карта, ФизЛицо ИЗ РегистрСведений.НазначенияКартФизЛицам УПОРЯДОЧИТЬ ПО Период");
	ТаблФизиков = Запрос.Выполнить().Выгрузить();
	ТаблФизиков.Индексы.Добавить("Карта");
	
	// Переберм проходную таблицу
	
	Для Каждого Строка Из Табл Цикл Если Не Строка.Карта.Пустая() Тогда
		
		Строки = ТаблФизиков.НайтиСтроки(Новый Структура("Карта", Строка.Карта)); Юзер = Неопределено;
		Для Каждого СтрокаДаты Из Строки Цикл
			
			Если СтрокаДаты.период > Строка.ДатаСобытия Тогда Прервать; КонецЕсли;
			Юзер = СтрокаДаты.ФизЛицо;
			
		КонецЦикла;
		
		Если Юзер <> Неопределено Тогда Строка.ФизЛицо = Юзер; КонецЕсли;
		
	КонецЕсли; КонецЦикла;
		
	Возврат табл;
	
КонецФункции


// ФОНОВЫЕ ЗАДАНИЯ

Процедура СинхронизацияСParsec() Экспорт
	
	// ОТКЛЮЧАЕМ НАФИГ
	
	//// Сканирует лог парсека с последней даты которая в логе регистра сведений
	//Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 ДатаСобытия ИЗ РегистрСведений.ЛогParsec УПОРЯДОЧИТЬ ПО ДатаСобытия УБЫВ");
	//Выборка = Запрос.Выполнить().Выбрать();
	//ДатаНачала = ?(Выборка.Следующий(), Выборка.ДатаСобытия, '2012-04-01'); // день запуска
	//
	//// Запишем новые события
	//
	//Таблица = ПолучитьСобытия(ДатаНачала);
	//Если Таблица <> Неопределено Тогда
	//	Для Каждого Строка Из Таблица Цикл Запись = РегистрыСведений.ЛогParsec.СоздатьМенеджерЗаписи(); ЗаполнитьЗначенияСвойств(Запись, Строка); Запись.Записать(); КонецЦикла; КонецЕсли;
	
КонецПроцедуры

// ОТЧЕТЫ

Функция ПредстДняНедели(Дата)
	
	День = ДеньНедели(Дата);
	
	Если 		День = 1 Тогда Возврат "Пн"
	ИначеЕсли 	День = 2 Тогда Возврат "Вт"
	ИначеЕсли 	День = 3 Тогда Возврат "Ср"
	ИначеЕсли 	День = 4 Тогда Возврат "Чт"
	ИначеЕсли 	День = 5 Тогда Возврат "Пт"
	ИначеЕсли 	День = 6 Тогда Возврат "Сб"
	ИначеЕсли 	День = 7 Тогда Возврат "Вс" КонецЕсли;
	
КонецФункции

Функция ЭтаКартаПользователяНаТотМомент(КодПарсек, ДатаСобытия, ТабНазначений)
	
	стКод = "";
	Для Каждого Строка Из ТабНазначений Цикл Если Строка.Период > ДатаСобытия Тогда Прервать; КонецЕсли; стКод = Строка.КодПарсек; КонецЦикла;
		
	Возврат Булево(СтрНайти(КодПарсек, стКод));
	
КонецФункции
Функция ПолучитьТабличныйДокументПосещенияСотрудника(ФизЛицо) Экспорт
	
	Таблица = Новый ТабличныйДокумент;
	
	// Получим таблицу из парсека
	
	КодПарсек = ПолучитьКодПарсекаФизЛица(ФизЛицо);
	Если КодПарсек <> Неопределено Тогда
		
		// Получим коды парсек которыми обладал юзер
		
		Запрос = Новый Запрос("ВЫБРАТЬ Карта.КодParsec КодПарсек, Период ИЗ РегистрСведений.НазначенияКартФизЛицам ГДЕ ФизЛицо = &ФизЛицо И НЕ Карта.ПометкаУдаления И Карта.ТипКарты = ЗНАЧЕНИЕ(Перечисление.ТипыИнформационныхКарт.Parsec)");
		Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
		ТабНазначений = Запрос.Выполнить().Выгрузить();
		
		// Запросим историю из парсека
		
		ЗапросSQL = Новый Запрос("
		|ВЫБРАТЬ	TranDateTime ДатаСобытия, TranUser КодПарсек
		|ИЗ			ВнешнийИсточникДанных.Парсек.Таблица.ЛогПарсека
		|ГДЕ		TranCode В(&Коды) И (TranUser ПОДОБНО ""%$" + СтрСоединить(ТабНазначений.ВыгрузитьКолонку("КодПарсек"), "%"" ИЛИ TranUser ПОДОБНО ""%") + "%"")");
		
		ЗапросSQL.УстановитьПараметр("Коды", ПолучитьмассивКодовОперацииПарсекаВходВыход());
		
		// установим привязку карты к пользователю во времени
		
		ТаблПарсек = ЗапросSQL.Выполнить().Выгрузить();
		ПреобразоватьВТаблицеКодПарсекККоду(ТаблПарсек, "КодПарсек");
		КолСтрок = ТаблПарсек.Количество();
		Для Ном = 1 По КолСтрок Цикл Если Не ЭтаКартаПользователяНаТотМомент(ТаблПарсек[КолСтрок - Ном].КодПарсек, ТаблПарсек[КолСтрок - Ном].ДатаСобытия, ТабНазначений) Тогда ТаблПарсек.Удалить(КолСтрок - Ном); КонецЕсли; КонецЦикла;
		
		Запрос = ПолучитьЗапросСЗагруженнойТаблицейПарсек("ВЫБРАТЬ Табл.ДатаСобытия ДатаСобытия ПОМЕСТИТЬ SQL ИЗ &SQL КАК Табл", ТаблПарсек);
		
		// Подготовим макет
		
		Макет = ПолучитьОбщийМакет("ВремяПосещенийСотрудником");
		
		ОбластьНачало 	= Макет.ПолучитьОбласть("Начало");
		ОбластьГод 		= Макет.ПолучитьОбласть("Год");
		ОбластьШапка 	= Макет.ПолучитьОбласть("Шапка");
		ОбластьИтог 	= Макет.ПолучитьОбласть("Итог");
		
		ОбластьРучнойБылВыходнойДень 	= Макет.ПолучитьОбласть("РучнойСтрокаБылВыходнойДень");
		ОбластьРучнойБылРабочийДень 	= Макет.ПолучитьОбласть("РучнойСтрокаБылРабочийДень");
		ОбластьБылВыходнойДень 			= Макет.ПолучитьОбласть("СтрокаБылВыходнойДень");
		ОбластьБылРабочийДень 			= Макет.ПолучитьОбласть("СтрокаБылРабочийДень");
		ОбластьНеБылВыходнойДень 		= Макет.ПолучитьОбласть("СтрокаНеБылВыходнойДень");
		ОбластьНеБылРабочийДень 		= Макет.ПолучитьОбласть("СтрокаНеБылРабочийДень");
		
		ОбластьОбозначения 				= Макет.ПолучитьОбласть("Обозначения");
		
		// Выведем шапку
		
		ОбластьНачало.Параметры.Сотрудник = ФизЛицо;
		Таблица.Вывести(ОбластьНачало);
		
		// Запросим
		
		Запрос.Текст = "
		
		// Основной запрос
		
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(Дни.Дата, ГОД) Год,
		|	НАЧАЛОПЕРИОДА(Дни.Дата, МЕСЯЦ) Месяц,
		|	ЕСТЬNULL(ДатаСобытия, &ПустаяДата) ДатаСобытия,
		|	Дни.Дата День,
		|	Дни.Выходной,
		|	ЕСТЬNULL(ЭтоФиксация, ЛОЖЬ) ЭтоФиксация
		|ИЗ
		|	РегистрСведений.РабочиеДни КАК Дни
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|(
		|	ВЫБРАТЬ
		|		НАЧАЛОПЕРИОДА(Лог.ДатаСобытия, ДЕНЬ) Дата,
		|		Лог.ДатаСобытия,
		|		ЛОЖЬ ЭтоФиксация
		|	ИЗ
		|		SQL КАК Лог
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		НАЧАЛОПЕРИОДА(Период, ДЕНЬ),
		|		Период,
		|		ИСТИНА
		|	ИЗ
		|		РегистрСведений.ЛогParsecРучной
		|	ГДЕ
		|		ФизЛицо = &ФизЛицо
		|) Раб
		|ПО
		|	Дни.Дата = Раб.Дата
		|
		|ГДЕ
		|	Дни.Дата <= &ТекущаяДата
		|
		|УПОРЯДОЧИТЬ ПО
		|	Год Убыв, Месяц Убыв, День Убыв, ДатаСобытия
		|
		|ИТОГИ МАКСИМУМ(Выходной), МАКСИМУМ(ЭтоФиксация) ПО
		|	Год, Месяц, День
		|";
		
		Запрос.УстановитьПараметр("ФизЛицо", 		ФизЛицо);
		Запрос.УстановитьПараметр("ТекущаяДата", 	ТекущаяДата());
		Запрос.УстановитьПараметр("ПустаяДата", 	'00010101');
		
		ВыборкаГодов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		Пока ВыборкаГодов.Следующий() ЦИкл
			
			ТаблицаМесяцев = Новый ТабличныйДокумент;
			ЧасовИтог = 0;
			
			ВыборкаМесяцев = ВыборкаГодов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
			Пока ВыборкаМесяцев.Следующий() Цикл
				
				ТаблицаМесяца 	= Новый ТабличныйДокумент;
				//БылВЭтомМесяце 	= Ложь;
				
				// Выведем шапку месяца
				
				ОбластьШапка.Параметры.Месяц = ПредставлениеПериода(НачалоМесяца(ВыборкаМесяцев.Месяц), КонецМесяца(ВыборкаМесяцев.Месяц));
				ТаблицаМесяца.Вывести(ОбластьШапка);
				
				ВыборкаДней = ВыборкаМесяцев.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией); БылИтог = 0; ЧасовИтог = 0;
				Пока ВыборкаДней.Следующий() Цикл
					
					// Соберем текст посещений
					
					БылаФиксацияВремени = Ложь;
					
					Выборка = ВыборкаДней.Выбрать(); Вход = '20780101'; Выход = '00010101'; текстПосещений = ""; БылНаРаботе = Ложь; Часов = 0;
					Пока Выборка.Следующий() Цикл БылНаРаботе = Выборка.ДатаСобытия <> '00010101';
						
						//БылаФиксацияВремени = БылаФиксацияВремени ИЛИ ЗначениеЗаполнено(Выборка.Регистратор);
						БылаФиксацияВремени = БылаФиксацияВремени ИЛИ Выборка.ЭтоФиксация;
						
						Выход 	= Макс(Выход, Выборка.ДатаСобытия);
						Вход 	= Мин(Вход, Выход);
						
						КонецЦикла;
					
						текстПосещений = Формат(Вход, "ДФ=HH:mm") + ?(Выход = Вход, ""," - " + Формат(Выход, "ДФ=HH:mm"));
						
						//текстПосещений = текстПосещений + ?(текстПосещений = "",""," - ") + Формат(Выборка.ДатаСобытия,"ДФ=HH:mm"); КонецЦикла;
					
					// Подсчитаем количество часов
						
					Если БылНаРаботе Тогда
							Часов = Окр((Выход - Вход) / 3600, 1); ЧасовИтог = ЧасовИтог + Часов; КонецЕсли;
					БылИтог = БылИтог + Число(БылНаРаботе);
						
					// Определим вручную или нет
					
					ДобСлово = ?(БылаФиксацияВремени, "Ручной", "");
					
					// Выведем день
						
					Область = ?(БылНаРаботе, 
									?(ВыборкаДней.Выходной, 
										Вычислить("Область" + ДобСлово + "БылВыходнойДень"), Вычислить("Область" + ДобСлово + "БылРабочийДень")),
									?(ВыборкаДней.Выходной,
										Вычислить("Область" + ДобСлово + "НеБылВыходнойДень"), Вычислить("Область" + ДобСлово + "НеБылРабочийДень")));
				
					Область.Параметры.День 				= Формат(ВыборкаДней.День, "ДФ=dd");
					Область.Параметры.ОтметкиВремени 	= текстПосещений;
					Область.Параметры.Часы				= Часов;
					Область.Параметры.ДеньНедели 		= ПредстДняНедели(ВыборкаДней.День);
					
					ТаблицаМесяца.Вывести(Область); КонецЦикла;
				
				// Выведем подвал месяца
				
				ОбластьИтог.Параметры.Часы 	= ЧасовИтог;
				ОбластьИтог.Параметры.Был 	= БылИтог;
				ТаблицаМесяца.Вывести(ОбластьИтог);
				
				// Добавим месяц к месяцу
				
				Если БылИтог Тогда
					ТаблицаМесяцев.Присоединить(ТаблицаМесяца); КонецЕсли; КонецЦикла;
			
			// Добавим к году месяца
			
			ОбластьГод.Параметры.Год = ВыборкаГодов.Год;
			Таблица.Вывести(ОбластьГод);
			Таблица.Вывести(ТаблицаМесяцев); КонецЦикла;
		
		// Выведеи обозначения
		
		Таблица.Вывести(ОбластьОбозначения);
		
		// Вравним таблицу
		
		Для Ном = 1 по 12 Цикл
			Таблица.Область("C" + Формат(Ном * 4 - 2, "ЧГ=")).ШиринаКолонки = 7; // День
			Таблица.Область("C" + Формат(Ном * 4 - 1, "ЧГ=")).ШиринаКолонки = 13; // время посещения
		КонецЦикла;
		
		Таблица.ОтображатьСетку 	= Ложь;
		Таблица.ОтображатьЗаголовки = Ложь;
		Таблица.ТолькоПросмотр 		= Истина; КонецЕсли;
		
	Возврат Таблица; 
	
КонецФункции
