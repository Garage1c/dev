
Функция ПолучитьСсылкуОсновногоИзображения(ВладелецСправочника, стрОшибки = "") Экспорт
	
	ТипЗн = ТипЗнч(ВладелецСправочника);
	
	Если ТипЗнч(ВладелецСправочника) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		ИмяСправочникаКартинок = "КартинкиНоменклатуры";		
    Иначе				
		стрОшибки = "не определен владелец картинки " + строка(ТипЗн);
		Возврат Неопределено;
		
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 
	|	Ссылка 
	|ИЗ 
	|	Справочник." + ИмяСправочникаКартинок + " 
	|ГДЕ 
	|	Владелец = &Владелец И 
	|	ЭтоПредставлениеОбъекта = Истина И 
	|	ПометкаУдаления = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	Ссылка 
	|ИЗ 
	|	Справочник." + ИмяСправочникаКартинок + " 
	|ГДЕ 
	|	Владелец = &Владелец И 
	|	ПометкаУдаления = ЛОЖЬ
	|
	|");
	
	Запрос.УстановитьПараметр("Владелец", ВладелецСправочника);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Возврат Выборка.Ссылка;
		
	КонецЕсли;
	
	стрОшибки = "не найдена картинка в выборке картинок по владельцу " + строка(ТипЗн);
	Возврат Неопределено;
		
КонецФункции
Функция ПолучитьНавигационнуюСсылкуОсновногоИзображения(ВладелецСправочника, ЭтоАватар = Ложь) Экспорт
	
	СправочникСсылка = ПолучитьСсылкуОсновногоИзображения(ВладелецСправочника);
	Возврат ?(СправочникСсылка = Неопределено, ПоместитьВоВременноеХранилище(БиблиотекаКартинок.НетФото), ПолучитьНавигационнуюСсылкуКартинки(СправочникСсылка, ЭтоАватар));
		
КонецФункции

Функция ПолучитьНавигационнуюСсылкуКартинки(СсылкаКартинка, ЭтоАватар = Ложь) Экспорт
	
	Возврат ПолучитьНавигационнуюСсылку(
			?(СсылкаКартинка.КопияКартинки.Пустая(), 
					СсылкаКартинка, 
					СсылкаКартинка.КопияКартинки), ?(ЭтоАватар, "Аватар", "Картинка"))
	
КонецФункции

Функция Сохранить(Картинка, ВладелецСправочника, ИмяКартинки, ИмяСправочникаКартинок = "КартинкиНоменклатуры", Переписывать = Истина, ЭтоАватар = Ложь, стрОшибки = "") Экспорт
	
	// Картинка					- картинка
	// ИмяСправочникаКартинок  	- имя справочника контейнера картинок
	// ВладелецСправочника		- владелец справочника
	// ИмяКартинки				- имя картинки
	// Переписывать 			- если есть картинка с таким именем тогда, будет перезаписан существующий справочник
	//								если устанволено в ложть и есть такой справочник то выдаст вернет ошибку (ложь)
	// стрОшибки 				- текст в который помещается сообщение об ошибке
	
	// Найдем справочник
	
	Запрос = Новый Запрос("ВЫБРАТЬ Ссылка ИЗ Справочник." + ИмяСправочникаКартинок + " ГДЕ Владелец = &Владелец И Наименование = &Наименование");
	Запрос.УстановитьПараметр("Владелец", 		ВладелецСправочника);
	Запрос.УстановитьПараметр("Наименование", 	ИмяКартинки);
	
	Выполнение = Запрос.Выполнить();
	Если Не Выполнение.Пустой() Тогда
		
		Если Не Переписывать Тогда
			стрОшибки = "Картинка с таким имененм уже существует - " + ИмяКартинки + " !";
			Возврат Ложь;
		КонецЕсли;
		
		Выборка = Выполнение.Выбрать();
		Выборка.Следующий();
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
				
	Иначе
		
		СправочникОбъект 					= Справочники[ИмяСправочникаКартинок].СоздатьЭлемент();
		СправочникОбъект.Владелец 			= ВладелецСправочника;
		СправочникОбъект.Наименование 		= ИмяКартинки;
		СправочникОбъект.ВыгружатьНаСайт 	= Истина;
		
	КонецЕсли;
	
	СправочникОбъект[?(ЭтоАватар, "Аватар", "Картинка")] = Новый ХранилищеЗначения(Картинка);
	
	Попытка
		СправочникОбъект.Записать();
	Исключение
		стрОшибки = ОписаниеОшибки();
		ОбщиеФункции.СообщитьТекст("Ошибка при помещении картинки в базу данных " + ИмяКартинки + "
									|" + стрОшибки);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция ОбновитьКартинкуОсновногоИзображения(Картинка, ВладелецСправочника, ИмяСправочникаПоУмолчанию = "Основная картинка", ЭтоАватар = Ложь, стрОшибки = "") Экспорт
	
	Если ТипЗнч(ВладелецСправочника) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		ИмяСправочникаКартинок = "КартинкиНоменклатуры";
		
	Иначе
		
		стрОшибки = "Не известно в каком справочнике храняться изображения объекта """ + ТипЗнч(ВладелецСправочника) + """";
		Возврат Ложь;
		
	КонецЕсли;

	
	СправочникСсылка = ПолучитьСсылкуОсновногоИзображения(ВладелецСправочника);
	Если СправочникСсылка = Неопределено Тогда
		
		СправочникОбъект = Справочники[ИмяСправочникаКартинок].СоздатьЭлемент();
		СправочникОбъект.Владелец					= ВладелецСправочника;
		СправочникОбъект.Наименование 				= ИмяСправочникаПоУмолчанию;
		СправочникОбъект.ВыгружатьНаСайт			= Истина;
		СправочникОбъект.ЭтоПредставлениеОбъекта 	= Истина;
		
		Попытка
			СправочникОбъект.Записать();
		Исключение
			опОшибки = ОписаниеОшибки();
			стрОшибки = "Ошибка при записи картинки основного изображения
				|" + опОшибки;
			Возврат Ложь;
		КонецПопытки;
		
		СправочникСсылка = СправочникОбъект.Ссылка;
		
	КонецЕсли;
	
	Возврат Обновить(Картинка, СправочникСсылка, ЭтоАватар, стрОшибки);
	
КонецФункции

Функция Обновить(Картинка, СправочникСсылка, ЭтоАватар = Ложь, стрОшибки = "") Экспорт
	
	// Картинка					- картинка
	// СправочникСсылка  		- ссылка справочника контейнера картинок
	// стрОшибки 				- текст в который помещается сообщение об ошибке
	
	СправочникОбъект = СправочникСсылка.ПолучитьОбъект();
	СправочникОбъект[?(ЭтоАватар, "Аватар", "Картинка")] = Новый ХранилищеЗначения(Картинка);
		
	//desh.avdonin {{01.07.2015#
	// Попытка получить уменьшенную копию с помощью ImageMagick
	//Если ЭтоАватар = Ложь Тогда
	//	каталогResize = "C:\resize\";
	//	имяТемпФайла = каталогResize + "temp." + КонвертацияТипов.РасширениеКартинки(Картинка);
	//	
	//	Попытка
	//		Картинка.Записать(имяТемпФайла);
	//		
	//		shell=Новый COMОбъект("WScript.Shell"); 
	//		shell.Run("""" + каталогResize + "script\resize.cmd" + """", 7, -1);
	//		
	//		Аватар = Новый Картинка(имяТемпФайла);
	//		СправочникОбъект.Аватар = Новый ХранилищеЗначения(Аватар);
	//	Исключение
	//		стрОшибки = ОписаниеОшибки();
	//		ОбщиеФункции.СообщитьТекст("Ошибка при получении уменьшенной копии картинки (аватар) " + СправочникСсылка + Символы.ПС + стрОшибки);
	//	КонецПопытки;
	//	
	//	УдалитьФайлы(каталогResize, "temp*.*");
	//КонецЕсли;
	////}}desh.avdonin							
	
	Попытка
		СправочникОбъект.Записать();
	Исключение
		стрОшибки = ОписаниеОшибки();
		ОбщиеФункции.СообщитьТекст("Ошибка при помещении картинки в базу данных " + СправочникСсылка + "
									|" + стрОшибки);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьВариантКартинки(СсылкаКартинка,Аватар = Ложь) Экспорт
	КартинкаЗапись = Неопределено;
	Если СсылкаКартинка.Картинка.Получить()= Неопределено Тогда
		КартинкаЗапись = СсылкаКартинка.Аватар.Получить();
		Аватар=Истина;
	Иначе
		КартинкаЗапись = СсылкаКартинка.Картинка.Получить()
	КонецЕсли;
	
	Если Не СсылкаКартинка.КопияКартинки.Пустая() Тогда
		СсылкаКартинка = СсылкаКартинка.КопияКартинки;
		Если КартинкаЗапись = Неопределено Тогда
			Если СсылкаКартинка.Картинка.Получить()= Неопределено Тогда
				КартинкаЗапись = СсылкаКартинка.Аватар.Получить();
				Аватар=Истина;
			Иначе
				КартинкаЗапись = СсылкаКартинка.Картинка.Получить();
				Аватар=Ложь;
			КонецЕсли;
		КонецЕсли ;
	КонецЕсли;
	Возврат КартинкаЗапись;
КонецФункции

Функция ПолучитьURLКартинкиВОблаке_ПоКартинке(Знач СсылкаКартинка, Аватар = Ложь) Экспорт
	
	Если СсылкаКартинка = Неопределено Тогда
		Возврат ПоместитьВоВременноеХранилище(БиблиотекаКартинок.НетФото);
		
	ИначеЕсли ТипЗнч(СсылкаКартинка) = Тип("СправочникСсылка.КартинкиНоменклатуры") Тогда
		КартинкаЗапись = ПолучитьВариантКартинки(СсылкаКартинка,Аватар);
		//Если СсылкаКартинка.Картинка.Получить()= Неопределено Тогда
		//	КартинкаЗапись = СсылкаКартинка.Аватар.Получить();
		//	Аватар=Истина;
		//Иначе
		//	КартинкаЗапись = СсылкаКартинка.Картинка.Получить()
		//КонецЕсли;
		//
		//Если Не СсылкаКартинка.КопияКартинки.Пустая() Тогда
		//	СсылкаКартинка = СсылкаКартинка.КопияКартинки;
		//	Если КартинкаЗапись = Неопределено Тогда
		//		Если СсылкаКартинка.Картинка.Получить()= Неопределено Тогда
		//			КартинкаЗапись = СсылкаКартинка.Аватар.Получить();
		//			Аватар=Истина;
		//		Иначе
		//			КартинкаЗапись = СсылкаКартинка.Картинка.Получить();
		//			Аватар=Ложь;
		//		КонецЕсли;
		//	КонецЕсли ;
		//КонецЕсли;
		
		Если КартинкаЗапись <>  Неопределено Тогда
			// Расширение аватара и картинки часто нигде не заполнено
			Расширение = КонвертацияТипов.РасширениеКартинки(КартинкаЗапись);

		КонецЕсли;	
					
		//Файл = Новый Файл(КэшируемыеФункции.ПолучитьПутьКОблакуЛокально() + "\products\"+Формат(СсылкаКартинка.Владелец.ПорядковыйНомер, "ЧГ=") + "-" + СсылкаКартинка.Наименование + "-" + ?(Аватар, "s", "b") + "." + СсылкаКартинка["Расширение" + ?(Аватар, "Аватар", "Картинка")]);
		Файл = Новый Файл(КэшируемыеФункции.ПолучитьПутьКОблакуЛокально() + "\products\"+Формат(СсылкаКартинка.Владелец.ПорядковыйНомер, "ЧГ=") + "-" + СсылкаКартинка.Наименование + "-" + ?(Аватар, "s", "b") + "." + Расширение);
		
		ЕСли Не Файл.Существует() И КартинкаЗапись <> Неопределено Тогда
				//Путь=Файл.Путь + Формат(СсылкаКартинка.Владелец.ПорядковыйНомер, "ЧГ=") + "-" + СсылкаКартинка.Наименование + "-" + ?(Аватар, "s", "b") + "." + СсылкаКартинка["Расширение" + ?(Аватар, "Аватар", "Картинка")];
				Путь=Файл.Путь + Формат(СсылкаКартинка.Владелец.ПорядковыйНомер, "ЧГ=") + "-" + СсылкаКартинка.Наименование + "-" + ?(Аватар, "s", "b") + "." + Расширение;
				ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(КартинкаЗапись, Путь);
				//КартинкаЗапись.Записать(Путь);
		КонецЕСли;
			
		//Возврат КэшируемыеФункции.ПолучитьПутьКОблакуHTTP() + "/products/" + Формат(СсылкаКартинка.Владелец.ПорядковыйНомер, "ЧГ=") + "-" + СсылкаКартинка.Наименование + "-" + ?(Аватар, "s", "b") + "." + СсылкаКартинка["Расширение" + ?(Аватар, "Аватар", "Картинка")];
		Возврат КэшируемыеФункции.ПолучитьПутьКОблакуHTTP() + "/products/" + Формат(СсылкаКартинка.Владелец.ПорядковыйНомер, "ЧГ=") + "-" + СсылкаКартинка.Наименование + "-" + ?(Аватар, "s", "b") + "."+ Расширение;
		
	ИначеЕсли ТипЗнч(СсылкаКартинка) = Тип("СправочникСсылка.Картинки") Тогда
		Возврат КэшируемыеФункции.ПолучитьПутьКОблакуHTTP() + "/img/" + Формат(СсылкаКартинка.Код, "ЧГ=") + "." + СсылкаКартинка.Расширение; 
		
	Иначе
		Возврат ""; КонецЕсли;
	
КонецФункции
Функция ПолучитьURLКартинкиВОблаке(СсылкаТовар, Аватар = Ложь) Экспорт
	
	СсылкаКартинки = ПолучитьСсылкуОсновногоИзображения(СсылкаТовар);
	Возврат ПолучитьURLКартинкиВОблаке_ПоКартинке(СсылкаКартинки, Аватар);
	
КонецФункции


// ИНТЕГРАЦИЯ С САЙТОМ

Функция ВыгрузитьКартинуНоменклатурыНаСайт(Номенклатура, КоличествоКартинок = 0, стрОшибки = "", ИмяКаталога = "", Знач ИмяФайлаРеквизита = "", ВыгружатьДополнительныеИзображения = Истина) Экспорт
	
	// Записывает картинку номенклатуры в каталог сайта и возвращает число записанных картинок
	//	Параметры:
	//		КоличествоКартинок  - в нее помещаеться количество выгруженных картинок
	
	КоличествоКартинок = 0;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Наименование КАК ИмяФайла, ЭтоПредставлениеОбъекта, Картинка
	|ИЗ
	|	Справочник.КартинкиНоменклатуры
	|
	|ГДЕ
	//|	Владелец = &Номенклатура И ЭтоПредставлениеОбъекта = ЛОЖЬ
	|	Владелец = &Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИмяФайла
	|
	|");
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Выполнение = Запрос.Выполнить();
	Если Выполнение.Пустой() Тогда
		
		стрОшибки = "нет картинок для номенклатуры " + Номенклатура;
		
	Иначе
		
		Если ИмяКаталога = "" Тогда
			Каталог = Константы.КаталогКартинокДляСайта.Получить();
		КонецЕсли;
		
		// Получим имя файла
		Если ИмяФайлаРеквизита = "" Тогда
			ИмяФайлаРеквизита = Строка(Номенклатура.УникальныйИдентификатор());
		ИначеЕсли ИмяФайлаРеквизита = "ИмяФайла" Тогда
			ИмяФайлаРеквизита = "";
		Иначе
			ИмяФайлаРеквизита = Строка(Номенклатура[ИмяФайлаРеквизита]);
		КонецЕсли;
		
		// Найдем каталог и если его нет то создадим
		
		Если ВыгружатьДополнительныеИзображения Тогда
			
			Файл = Новый Файл(ИмяКаталога + ИмяФайлаРеквизита);
			Если Не Файл.Существует() Тогда
				Попытка
					СоздатьКаталог(Файл.ПолноеИмя);
				Исключение
					текОшибка = ОписаниеОшибки();
					стрОшибки = "Ошибка при создании каталога для записи картинок изображения номенклатуры " + Номенклатура + "
									|" + текОшибка;
					Возврат Ложь;

				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		
		// Закачаем фацлы
		
		ИмяФайлаДляОсновного 	= ИмяКаталога + ИмяФайлаРеквизита;
		ИмяФайлаДругих 			= ИмяКаталога + ИмяФайлаРеквизита + "\";
		
		НомФайла 	= -1;
		Выборка 	= Выполнение.Выбрать();
		Пока Выборка.Следующий() Цикл НомФайла = НомФайла + 1;
			
			Точка 		= Найти(Выборка.ИмяФайла,".");
			Расширение 	= ?(Точка, Сред(Выборка.ИмяФайла, Точка),"");
			
			//ИмяФайла 	= ?(Выборка.ЭтоПредставлениеОбъекта,
			//				ИмяФайлаДляОсновного + Расширение,
			//				ИмяФайлаДругих + Выборка.ИмяФайла);
			
			ИмяФайла 	= ?(НомФайла,
							ИмяФайлаДругих + Выборка.ИмяФайла,
							?(ИмяФайлаРеквизита = "",Выборка.ИмяФайла, ИмяФайлаДляОсновного) + Расширение);
						
			Попытка
				
				Картинка = Выборка.Картинка.Получить();
				
				Если Картинка <> Неопределено Тогда
					Картинка.Записать(ИмяФайла);
				КонецЕсли;
				
			Исключение
				текОшибка = ОписаниеОшибки();
				стрОшибки = "Ошибка при записи картинки изображения номенклатуры в файл " + Номенклатура + "
								|" + текОшибка;
				Возврат Ложь;
			КонецПопытки;
			
			 КоличествоКартинок = КоличествоКартинок + 1;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции
Функция ПоместитьКартинкиВКаталогСайта(КоличествоКартинок = 0, стрОшибки = "") Экспорт
	
	// Записывает все картинки номенклатуры в каталог сайта
	//	Параметры:
	//		КоличествоКартинок  - в нее помещаеться количество выгруженных картинок
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Владелец КАК Номенклатура
	|ИЗ
	|	Справочник.КартинкиНоменклатуры
	|");
	
	КоличествоКартинок = 0;
	
	ВыборкаНоменклатуры = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Пока ВыборкаНоменклатуры.Следующий() Цикл
		
		Выгружено = 0;
		БезОшибок = ВыгрузитьКартинуНоменклатурыНаСайт(ВыборкаНоменклатуры.Номенклатура, Выгружено, стрОшибки);
		
		КоличествоКартинок 	= КоличествоКартинок + Выгружено;
		
		Если Не БезОшибок Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
//	ошибка = "";
//КоличествоКартинок = 0;
//картинки.ПоместитьКартинкиВКаталогСайта(КоличествоКартинок, ошибка);
//ОбщиеФункции.СообщитьТекст("ошибка = " + ошибка  + "
//					| КоличествоКартинок = " + КоличествоКартинок);
	
КонецФункции