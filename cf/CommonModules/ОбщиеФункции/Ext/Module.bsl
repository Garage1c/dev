
&НаСервере
функция ПолучитьЗначениеКонстантыВОбласти(ИмяКонстанты) Экспорт
	
	Возврат Константы[ИмяКонстанты].Получить();
	
КонецФункции


Процедура СообщитьТекст(Текст, Поле = Неопределено, КлючДанныхОбъект = Неопределено) Экспорт

	Сообщение = Новый СообщениеПользователю;
	
	//Сообщение.Поле = ИмяТабличнойЧасти + "[" + Выборка.ИндексСтроки + "]." + ИмяПоляТабличнойЧасти;
	Если Поле <> Неопределено Тогда
		Сообщение.Поле = Поле;
	КонецЕсли;
	
	Сообщение.Текст = Текст;
	
	Если КлючДанныхОбъект <> Неопределено Тогда
		Сообщение.УстановитьДанные(КлючДанныхОбъект);
	КонецЕсли;
		
	Сообщение.Сообщить();
		
КонецПроцедуры
&НаКлиенте
Процедура СообщитьТекстВБраузере(Текст, СвойФормат = Ложь) Экспорт
	
	#Если Не ВебКлиент Тогда
	
	ТекстФайл = Новый ТекстовыйДокумент;
	ТекстФайл.УстановитьТекст("
	|<HTML><HEAD>
	|<META content=""text/html; charset=utf-8"" http-equiv=Content-Type>
	|<META name=GENERATOR content=""MSHTML 9.00.8112.16464""></HEAD>
	|<BODY>" + ?(СвойФормат,"","<h2>") + СтрЗаменить(Текст, Символы.ПС, "<br>") + ?(СвойФормат,"","</h2>") + "</BODY></HTML>");
	
	ПутьКФайлу = ПолучитьИмяВременногоФайла("html");
	ТекстФайл.Записать(ПутьКФайлу);
	
	ЗапуститьПриложение(ПутьКФайлу);
	
	#КонецЕсли
	            
КонецПроцедуры

Функция ПараметрыПрописиНаРусском() Экспорт
	
	Возврат "рубль,рубля,рублей,м,копейка,копейки,копеек,ж,2";
	
КонецФункции

Функция НастройкаПользователя(ИмяНастройки, Пользователь = Неопределено) Экспорт
	
	Возврат НастройкиПользователя.НастройкаПользователя(ИмяНастройки, Пользователь);
	
КонецФункции
&НаСервере
Функция УстановитьНастройкуПользователя(Значение, ИмяНастройки, Пользователь = Неопределено) Экспорт
	
	текПользователь = ?(Пользователь = Неопределено, ПараметрыСеанса.ТекущийПользователь, Пользователь);
	
	Запись = РегистрыСведений.ЗначенияНастроекПользователя.СоздатьМенеджерЗаписи();
	
	Запись.Пользователь = текПользователь;
	Запись.Настройка 	= ПланыВидовХарактеристик.НастройкиПользователя[ИмяНастройки];
	Запись.Значение 	= Значение;
	
	Попытка
		Запись.Записать();
	Исключение
		ОбщиеФункции.СообщитьТекст(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ОповеститьПоПочте(Кому, ТемаПисьма, ТекстПисьма, Отказ, ТипТекста = "", Письмо = Неопределено, Вложения = Неопределено, УчетнаяЗапись = Неопределено,Копия = "") Экспорт   //передадим сюда вложения для письма
	
	// Возвращает ссылку на документ письмо если все удачно
	
	// Письмо - документ объект, если уже есть докумен и не нужно создавать повторно
	
	Если Не ПустаяСтрока(Кому) Тогда
		
		Если Кому <> "" Тогда
			
			// Заполним
			
			Если Письмо = Неопределено Тогда
				Письмо = Документы.Письмо.СоздатьДокумент();
			КонецЕсли;
			
			Письмо.Дата 			= ТекущаяДата();
			Письмо.Тема 			= ТемаПисьма;
			Письмо.Кому 			= Кому;
			Письмо.Текст 			= ТекстПисьма;
			
			Если УчетнаяЗапись = Неопределено Тогда
			УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;	
			КонецЕсли;
			
		    Письмо.УчетнаяЗапись 	= УчетнаяЗапись;
			Письмо.ТипТекста		= ТипТекста;
			
			// добавим копию
			Письмо.Копия = Копия;
			// Добавим вложения
	
		  
		Если НЕ Вложения = Неопределено Тогда
		Для Каждого Вложение ИЗ Вложения Цикл
			НовСтрока = Письмо.Вложения.Добавить();
			НовСтрока.Вложение = Вложение.Данные;
			НовСтрока.ИмяФайла = Вложение.Ключ; КонецЦикла; КонецЕсли;

	

			// Запишем
			
			Попытка
				Письмо.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОбщегоНазначенияКлиентСервер.ПолучитьПредставлениеОписанияОшибки(ИнформацияОбОшибке()));
				Отказ = Истина;
				Возврат Неопределено;
			КонецПопытки;
			
			// Поставим в очередь
			
			Рег = РегистрыСведений.БуферПочтыДляОтправки.СоздатьМенеджерЗаписи();
			Рег.Письмо = Письмо.Ссылка;
			
			Попытка
				Рег.Записать();
			Исключение               
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОбщегоНазначенияКлиентСервер.ПолучитьПредставлениеОписанияОшибки(ИнформацияОбОшибке()));
				Отказ = Истина;
				Возврат Неопределено;
			КонецПопытки;
			
			Возврат Письмо.Ссылка;
			
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Возвращает курс валюты на дату
//
// Параметры:
//  Валюта     - Валюта (элемент справочника "Валюты")
//  ДатаКурса  - Дата, на которую следует получить курс
//
// Возвращаемое значение: 
//  Структура, содержащая:
//   Курс      - курс валюты
//   Кратность - кратность валюты
//
&НаСервере
Функция ПолучитьКурсВалюты(Валюта, ДатаКурса) Экспорт

	Возврат РегистрыСведений.КурсыВалют.ПолучитьПоследнее(?(ЗначениеЗаполнено(ДатаКурса), ДатаКурса, Неопределено), Новый Структура("Валюта", Валюта));
	
КонецФункции
&НаСервере
Функция СконвертироватьЦенуПоВалюте(ЦенаКонвертации, ВалютаНаВходе, ВалютаНаВыходе, Дата = Неопределено) Экспорт

	// Возвращает цену преобразовав ее в нужную валюту
	// Параметры: 
	//	ЦенаКонвертации - цена которую присылают для конвертации
	//	ВалютаНаВходе 	- валюта цены которую присылают для конвертации
	//	ВалютаНаВыходе 	- валюта цены которую вернет функция
	//	Дата			- дата на которую нужно сконвертировать цену (по умолчанию на сегодня)
	// Возвращает:
	//		Сконвертируемую цену в нужной валюте
	
	Если ВалютаНаВходе = ВалютаНаВыходе Тогда Возврат ЦенаКонвертации КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 	
	|	(&Цена * ЕСТЬNULL(ВалВх.Курс, 1) * ЕСТЬNULL(ВалВых.Кратность, 1)) / (ЕСТЬNULL(ВалВых.Курс, 1) * ЕСТЬNULL(ВалВх.Кратность, 1)) КАК Цена
	|ИЗ 
	|	РегистрСведений.КурсыВалют.СрезПоследних(, Валюта = &ВалютаНаВходе) ВалВх
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ 
	|	РегистрСведений.КурсыВалют.СрезПоследних(, Валюта = &ВалютаНаВыходе) ВалВых ПО ИСТИНА");
	
	Запрос.УстановитьПараметр("Цена", 			ЦенаКонвертации);
	Запрос.УстановитьПараметр("ВалютаНаВходе", 	ВалютаНаВходе);
	Запрос.УстановитьПараметр("ВалютаНаВыходе", ВалютаНаВыходе);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат ?(Выборка.Количество(), Выборка.Цена, 0);
	
КонецФункции

Функция ПолучитьНомерБезПрефикса(Знач Номер) Экспорт
	
	Длина = СтрДлина(Номер);
	//Номер = "";
	Номер = СокрЛП(Номер);
	
	Для Ном = 1 По Длина Цикл Если Найти("0123456789", Сред(Номер, Ном,1)) Тогда Прервать; КонецЕсли; КонецЦикла;
	
	Возврат СокрЛП(Сред(Номер, Ном));
	
КонецФункции
Функция ПолучитьНомерБезПрефиксаЛидирующихНулей(Знач Номер) Экспорт
	
	Длина = СтрДлина(Номер);
	//Номер = "";
	Номер = СокрЛП(Номер);
	
	Для Ном = 1 По Длина Цикл Если Найти("0123456789", Сред(Номер, Ном,1)) Тогда Прервать; КонецЕсли; КонецЦикла;
	
	НомерОбъекта = СокрЛП(Сред(Номер, Ном));
	
	Пока Лев(НомерОбъекта, 1)= "0" Цикл	НомерОбъекта = Сред(НомерОбъекта, 2); КонецЦикла;

	Возврат СокрЛП(НомерОбъекта);
	 
КонецФункции
Функция ПолучитьСтрокуБезНулейСлева(СтрокаСНулями) Экспорт
	
	Строка = СокрЛП(СтрокаСНулями);
	
	Пока Лев(Строка, 1) = "0" Цикл   			  // удаление ведущих нулей
		
		Строка = Сред(Строка, 2);
		
	КонецЦикла;
	
	Возврат Строка;
	
КонецФункции


Процедура Подождать(Секунд) Экспорт
	
	стДата = ТекущаяДата();
	Пока ТекущаяДата() - стДата < Секунд Цикл КонецЦикла;
	
КонецПроцедуры

// ОБЛАСТЬ

//&НаСервере
//Функция ПолучитьЗначениеКонстантыВОбласти(ИмяКонстанты, Область = Неопределено) Экспорт
//	
//	// Если заходит без разделения тогда установим область явно иначе вернем по текущей как обычно
//	
//	Если ПользователиИнформационнойБазы.ТекущийПользователь().РазделениеДанных.Количество() Тогда
//		
//		Возврат Константы[ИмяКонстанты].Получить()
//		
//	Иначе
//		
//		Запрос = Новый Запрос("ВЫБРАТЬ Значение ИЗ Константа." + ИмяКонстанты + " ГДЕ Область = &Область");
//		Запрос.УстановитьПараметр("Область", ?(Область = Неопределено, ПараметрыСеанса.ТекущаяОбласть , Область));
//		Выборка = Запрос.Выполнить().Выбрать();
//	
//		Если Выборка.Следующий() Тогда
//			Возврат Выборка.Значение; КонецЕсли; КонецЕсли;
//	
//КонецФункции

// ЗАПИСЬ ОБЪЕКТОВ
&НаСервере
Функция СтартоватьБПИСообщитьЕслиОшибка(БПОбъект, стрОшибки = "", Сообщать = Истина) Экспорт
	
	Если стрОшибки=Неопределено Тогда
		стрОшибки="";
	КонецЕсли;	
	
	Если БПОбъект.ЭтоНовый() И Не ЗаписатьОбъектИСообщитьЕслиОшибка(БПОбъект,, стрОшибки, Сообщать) Тогда
		Возврат Ложь; КонецЕсли;
	
	Попытка	БПОбъект.Старт();
	Исключение
		
		текОшибка 	= ОписаниеОшибки();
		стрОшибки 	= стрОшибки + ?(стрОшибки = "","","   ") + "Ошибка при запуске бизнес процесса " + Строка(БПОбъект) + "
						|" + текОшибка;
		Если Сообщать Тогда СообщитьТекст(стрОшибки) КонецЕсли; 
		Возврат Ложь; КонецПопытки; 
		
	Возврат Истина;
					
КонецФункции
&НаСервере
Функция ВыполнитьЗадачуИСообщитьЕслиОшибка(ЗадачаОбъект, стрОшибки = "", Сообщать = Истина) Экспорт
	
	Если стрОшибки = Неопределено Тогда стрОшибки="" КонецЕсли;	
	
	Если ЗадачаОбъект.ЭтоНовый() И Не ЗаписатьОбъектИСообщитьЕслиОшибка(ЗадачаОбъект,, стрОшибки, Сообщать) Тогда
		Возврат Ложь; КонецЕсли;
	
	Попытка	ЗадачаОбъект.ВыполнитьЗадачу();
	Исключение
		
		текОшибка 	= ОписаниеОшибки();
		стрОшибки 	= стрОшибки + ?(стрОшибки = "","","   ") + "Ошибка при запускевыполнении задачи " + Строка(ЗадачаОбъект) + "
						|" + текОшибка;
		Если Сообщать Тогда СообщитьТекст(стрОшибки) КонецЕсли; 
		Возврат Ложь; КонецПопытки; 
		
	Возврат Истина;
					
КонецФункции

&НаСервере
Функция ЗаписатьОбъектИСообщитьЕслиОшибка(ОбъектЗаписи, Параметр1 = Неопределено, стрОшибки = "", Сообщать = Истина) Экспорт
	
	Если стрОшибки=Неопределено Тогда
		стрОшибки="";
	КонецЕсли;	
	
	Попытка
		
		Если Параметр1 = Неопределено Тогда
			ОбъектЗаписи.Записать();
		Иначе
			ОбъектЗаписи.Записать(Параметр1); КонецЕсли;
		
	Исключение
		
		текОшибка 	= ОписаниеОшибки();
		стрОшибки 	= стрОшибки + ?(стрОшибки = "","","   ") + "Ошибка при записи " + Строка(ОбъектЗаписи) + "
						|" + текОшибка;
						
		Если Сообщать Тогда СообщитьТекст(стрОшибки) КонецЕсли; Возврат Ложь; КонецПопытки; Возврат Истина;
					
КонецФункции
&НаСервере
Функция УдалитьОбъектИСообщитьЕслиОшибка(ОбъектЗаписи) Экспорт

	Попытка
		
		ОбъектЗаписи.Удалить();
		
	Исключение
		
		стрОшибки = ОписаниеОшибки();
		СообщитьТекст("Ошибка при удалении " + Строка(ОбъектЗаписи) + "
						|" + стрОшибки); Возврат Ложь; КонецПопытки; Возврат Истина;
					
КонецФункции

// ФАЙЛЫ

Функция ФайлДоступенДляЗаписи(ИмяФайла) Экспорт
	
	#Если ВебКлиент Тогда
		
		Возврат Ложь;
		
	#Иначе
	
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	
		// Проверяет доступен файл для записи или нет
		
		Попытка ПереместитьФайл(ИмяФайла, ИмяВременногоФайла) Исключение Возврат Ложь КонецПопытки;
		
		// Вернем обратно
		
		ПереместитьФайл(ИмяВременногоФайла, ИмяФайла);
		
		Возврат Истина;
	
	#КонецЕсли
	
КонецФункции
Функция ФайлСуществует(ИмяФайла) Экспорт
	
	Файл = Новый Файл(ИмяФайла);
	Возврат Файл.Существует();
	
КонецФункции