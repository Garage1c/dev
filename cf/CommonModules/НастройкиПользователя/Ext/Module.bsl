
Функция ПолучитьСписокПовторногоВвода(КлючПовторногоВвода) Экспорт
	
	Список = ХранилищеНастроекДанныхФорм.Загрузить("ИсторияВвода", КлючПовторногоВвода);
	Возврат ?(Список = Неопределено, Новый СписокЗначений, Список);
	
КонецФункции

Процедура СохранитьЭлементПовторногоВвода(КлючПовторногоВвода, Значение) Экспорт
	
	СохранятьНеБолее = 10;
	
	Список = ПолучитьСписокПовторногоВвода(КлючПовторногоВвода);
	Элемент = Список.НайтиПоЗначению(Значение);
	Если Элемент <> Неопределено Тогда 
		Список.Удалить(Элемент) КонецЕсли;
	
	Список.Вставить(0, Значение);
	Пока Список.Количество() > СохранятьНеБолее Цикл Список.Удалить(СохранятьНеБолее) КонецЦикла;
	
	ХранилищеНастроекДанныхФорм.Сохранить("ИсторияВвода", КлючПовторногоВвода, Список);
	
КонецПроцедуры

Функция ТекущийПользователь() Экспорт
	
	Возврат ПараметрыСеанса.ТекущийПользователь;
	
КонецФункции

Функция НастройкаПользователя(ИмяНастройки, Пользователь = Неопределено) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 	Значение 
	|ИЗ 		РегистрСведений.ЗначенияНастроекПользователя 
	|ГДЕ 		Пользователь 	= &Пользователь И
	|	 		Настройка 		= &Настройка
	|");
	
	Запрос.УстановитьПараметр("Настройка", 		ПланыВидовХарактеристик.НастройкиПользователя[ИмяНастройки]);
	Запрос.УстановитьПараметр("Пользователь", 	?(Пользователь = Неопределено, ПараметрыСеанса.ТекущийПользователь, Пользователь));
	
	Выполнение = Запрос.Выполнить();
	Если Выполнение.Пустой() Тогда
		
		Возврат Неопределено;
		
	Иначе
		
		Выборка = Выполнение.Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка.Значение;
		
	КонецЕсли;
	
КонецФункции


#Область Профили

Функция ПолучитьПодключаемыеРегистрыНастроекПользователя(СМоиНастройки = Ложь) Экспорт
	
	// Возвращает регистр с которых идет считывание данных
	//	Массив внутри структура: {ИмяРегистра, ИмяПользователь, ИмяЗначение}
	
	ПодклРегистры = "
	
	//	рег сведений			пользователь	значение
	
	|ОтделыПользователя,		Пользователь,	Отдел
	|ДоверенныеЛицаПользователя,Пользователь,	ДоверенноеЛицо
	|ПравоПросмотраКассы, 		Пользователь,	Касса
	|ПравоПросмотраМенеджеров,	Пользователь,	Менеджер
	|ПравоПросмотраПартнеров, 	Пользователь,	Партнер
	|ПравоПросмотраПосещений,	Кто,			Кого	
	|ПравоПросмотраТиповЦен, 	Пользователь,	ТипЦен
	|РолиПользователей,			Пользователь,	Роль
	|СкладыПользователя,		Пользователь,	Склад" + ?(СМоиНастройки, "
	|ЗначенияНастроекПользователя, Пользователь, Значение", "") + "
	|";
	
	Массив = Новый Массив;
	
	КолСтрок = СтрЧислоСтрок(ПодклРегистры);
	Для Ном = 1 По КолСтрок Цикл
		Строка = СтрПолучитьСтроку(ПодклРегистры, Ном);
		Если Не ПустаяСтрока(Строка) Тогда
			
			Данные = СтрРазделить(Строка, ",");
			Массив.Добавить(Новый Структура("ИмяРегистра, ИмяПользователь, ИмяЗначение", 
					СокрЛП(Данные[0]), СокрЛП(Данные[1]), СокрЛП(Данные[2]))); КонецЕсли; КонецЦикла;
	Возврат Массив;
	
КонецФункции

Функция ПолучитьПользователяИБИзПользователя(Пользователь)
	
	Возврат ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Пользователь.ПользовательИБ);
	//Возврат ПользователиИнформационнойБазы.НайтиПоИмени(СокрЛП(Пользователь.Код));
	
КонецФункции

Функция ЗагрузитьНастройкиПоПрофилю(Профиль)
	
	// Прочитаем настройки профиля
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 	
	|	План.Ссылка 				Настройка, 
	|	План.Ссылка.Наименование 	Представление, 
	|	План.ТипЗначения, 
	|	План.ЭтоГруппа, 
	|	План.ЭтоТаблица,
	|	Проф.Значение,
	|	ВЫБОР КОГДА Проф.Настройка ЕСТЬ NULL ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ Заполнено
	|ИЗ
	|	ПланВидовХарактеристик.НастройкиПрофилей План
	
	|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Профили.Настройки Проф
	|ПО					План.Ссылка = Проф.Настройка И
	|					Проф.Ссылка = &Ссылка
	
	|ГДЕ НЕ ПометкаУдаления
	|ИТОГИ ПО Настройка ИЕРАРХИЯ");
	
	Запрос.УстановитьПараметр("Ссылка", Профиль);
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
КонецФункции

Процедура ПроставитьРеквизитыПользователяВСтрокеДерева(Дерево, Пользователь)
	
	ВидЗаписиКонфигуратор = Перечисления.ВидыЗаписейПрофиля.Конфигуратор;
	ВидЗаписиПользователь = Перечисления.ВидыЗаписейПрофиля.Пользователь;
	
	Для Каждого Строка Из Дерево.Строки Цикл
		
		Если Строка.ВидЗаписи = ВидЗаписиПользователь Тогда 
			Строка.Значение = Пользователь[Строка.Путь];
			
		ИначеЕсли Строка.ВидЗаписи = ВидЗаписиКонфигуратор Тогда
			
			Если Строка.Настройка.Путь = "Роли" И Строка.Настройка.ЭтоТаблица И Не Строка.Строки.Количество() Тогда
				
				текПольз = ПолучитьПользователяИБИзПользователя(Пользователь);
				Если текПольз <> Неопределено Тогда
					Для Каждого Роль Из текПольз.Роли Цикл
						НовСтрока = Строка.Строки.Добавить();
						ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
						НовСтрока.Значение = Роль.Имя; КонецЦикла; 
					Продолжить; КонецЕсли;
				
			ИначеЕсли Строка.Настройка.Путь = "ПоказыватьВСпискеВыбора" Тогда
				текПольз = ПолучитьПользователяИБИзПользователя(Пользователь);
				Если текПольз <> Неопределено Тогда
					Строка.Значение = ПользователиИнформационнойБазы.ТекущийПользователь().ПоказыватьВСпискеВыбора; КонецЕсли; КонецЕсли; КонецЕсли;
		
		ПроставитьРеквизитыПользователяВСтрокеДерева(Строка, Пользователь); КонецЦикла;
	
КонецПроцедуры
Функция ЗагрузитьНастройкиПоПользователю(Пользователь)
	
	// Софрмируем добавки по регистрам сведений для запроса
	
	ПодклРегистры = ПолучитьПодключаемыеРегистрыНастроекПользователя();
	стрВыбор = ""; стрСоединение = ""; стрСобк = "";
	Для Каждого ПодРегистр Из ПодклРегистры Цикл
		
		стрВыбор = стрВыбор + "ЕСТЬNULL(" + ПодРегистр.ИмяРегистра + "." + ПодРегистр.ИмяЗначение + ",";
		стрСобк = стрСобк + ")";
		
		стрСоединение = стрСоединение + "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений." + ПодРегистр.ИмяРегистра + " " + ПодРегистр.ИмяРегистра + "
		|ПО
		|	План.Путь 		= """ + ПодРегистр.ИмяРегистра + """ И 
		|	План.ВидЗаписи 	= &ВидЗаписиРегистрНастройки И 
		|" + ПодРегистр.ИмяРегистра + "." + ПодРегистр.ИмяПользователь + " = &Пользователь"; КонецЦикла;
	
	// Прочитаем настройки
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 	
	|	План.Ссылка 				Настройка, 
	|	План.Ссылка.Наименование 	Представление, 
	|	План.ТипЗначения, 
	|	План.ЭтоГруппа, 
	|	План.ЭтоТаблица,
	|	План.ВидЗаписи, 
	|	План.Путь, 
	|" + стрВыбор + "МоиНастр.Значение" + стрСобк + " Значение
	|ИЗ
	|	ПланВидовХарактеристик.НастройкиПрофилей План
	
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ЗначенияНастроекПользователя МоиНастр
	|ПО
	|	План.ВидЗаписи 			= &ВидЗаписиМоиНастройки И
	|	МоиНастр.Пользователь 	= &Пользователь И
	|	План.Путь 				= МоиНастр.Настройка
	
	|" + стрСоединение + "
	
	|ГДЕ НЕ ПометкаУдаления
	|ИТОГИ ПО Настройка ИЕРАРХИЯ
	|");
	
	Запрос.УстановитьПараметр("ВидЗаписиРегистрНастройки", 	Перечисления.ВидыЗаписейПрофиля.РегСведенийПоПользователю);
	Запрос.УстановитьПараметр("ВидЗаписиМоиНастройки", 		Перечисления.ВидыЗаписейПрофиля.МоиНастройки);
	Запрос.УстановитьПараметр("Пользователь", 				Пользователь);
	
	Дерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ПроставитьРеквизитыПользователяВСтрокеДерева(Дерево, Пользователь);
	
	Возврат Дерево;
	
КонецФункции

Процедура ОбработатьТабличныеЧастиВДереве(Дерево)
	
	// Если встречает таблицу тогда строку переносит в конец и удаляет представление чтобы не видно было
	
	Для Каждого Строка Из Дерево.Строки Цикл
		
		Если Строка.ЭтоТаблица = Истина И ЗначениеЗаполнено(Строка.Значение) Тогда
			
			Строка.Представление = "";
			
		Иначе
			ОбработатьТабличныеЧастиВДереве(Строка); КонецЕсли; КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьДеревоНастроекПрофиля(ПрофильИлиПользователь) Экспорт
	
	// Возвращает дерево значений
	
	Если ТипЗнч(ПрофильИлиПользователь) = Тип("СправочникСсылка.Пользователи") Тогда
		Дерево = ЗагрузитьНастройкиПоПользователю(ПрофильИлиПользователь);
		
	ИначеЕсли ТипЗнч(ПрофильИлиПользователь) = Тип("СправочникСсылка.Профили") Тогда
		Дерево = ЗагрузитьНастройкиПоПрофилю(ПрофильИлиПользователь);
		
	Иначе ВызватьИсключение "Не вернный тип профиля для дерева"; КонецЕсли;
	
	// Обработаем строки для красоты
	
	ОбработатьТабличныеЧастиВДереве(Дерево);
	КонвертацияТипов.НижниеОдинаковыеСтрокиДереваЗаменить(Дерево, "Представление");
	
	// Вернем хорошее дерево
	
	Возврат Дерево;
	
КонецФункции

Функция ОчиститьИУстановитьПрофилиПользователей(Пользователи, Профили) Экспорт
	
	// Сначала очищает а затем устанавливает значения из профилей
	
	ПодклРегистры 	= ПолучитьПодключаемыеРегистрыНастроекПользователя();
	Запрос 			= Новый Запрос("ВЫБРАТЬ ВидЗаписи, Путь ИЗ ПланВидовХарактеристик.НастройкиПрофилей ГДЕ НЕ ПометкаУдаления ИТОГИ ПО ВидЗаписи");
	ВыборкаВидов 	= Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	НачатьТранзакцию();
	
	Пока ВыборкаВидов.Следующий() Цикл
	
		// Очистим реквизиты пользователя
	
		Если ВыборкаВидов.ВидЗаписи = Перечисления.ВидыЗаписейПрофиля.Пользователь Тогда
			
			Для Каждого Пользователь ИЗ Пользователи Цикл
				СпрПользователь = Пользователь.ПолучитьОбъект();
				
				Выборка = ВыборкаВидов.Выбрать();
				Пока Выборка.Следующий() Цикл СпрПользователь[Выборка.Путь] = Неопределено КонецЦикла; 
				
				Если Не ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(СпрПользователь) Тогда
					ОтменитьТранзакцию();
					Возврат Ложь; КонецЕсли; КонецЦикла;
				
		// Очистим регистры
		
		ИначеЕсли ВыборкаВидов.ВидЗаписи = Перечисления.ВидыЗаписейПрофиля.РегСведенийПоПользователю Тогда
					
			Для Каждого Пользователь ИЗ Пользователи Цикл
				
				Выборка = ВыборкаВидов.Выбрать();
				Пока Выборка.Следующий() Цикл 
					
					ПодклРегистр = ПолучитьНаборРегистр(Выборка.Путь, ПодклРегистры);
					
					Набор = РегистрыСведений[ПодклРегистр.ИмяРегистра].СоздатьНаборЗаписей();
					Набор.Отбор[ПодклРегистр.ИмяПользователь].Установить(Пользователь);
					
					Если Не ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(Набор) Тогда
						ОтменитьТранзакцию();
						Возврат Ложь; КонецЕсли; КонецЦикла; КонецЦикла;
			
		// очистим мои настройки
			
		ИначеЕсли ВыборкаВидов.ВидЗаписи = Перечисления.ВидыЗаписейПрофиля.МоиНастройки Тогда
		
			Для Каждого Пользователь ИЗ Пользователи Цикл
				
				Набор = РегистрыСведений.ЗначенияНастроекПользователя.СоздатьНаборЗаписей();
				Набор.Отбор.Пользователь.Установить(Пользователь);
				
				Если Не ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(Набор) Тогда
					ОтменитьТранзакцию();
					Возврат Ложь; КонецЕсли; КонецЦикла;
			
		// Очистм конфигуратор
		
		ИначеЕсли ВыборкаВидов.ВидЗаписи = Перечисления.ВидыЗаписейПрофиля.Конфигуратор Тогда
			
			Для Каждого Пользователь ИЗ Пользователи Цикл
				
				ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Пользователь.ПользовательИБ);
				Если ПользовательИБ <> Неопределено Тогда
					
					ПользовательИБ.Роли.Очистить();
					ПользовательИБ.ПоказыватьВСпискеВыбора = Ложь;
					
				Если Не ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(ПользовательИБ) Тогда
					ОтменитьТранзакцию();
					Возврат Ложь; КонецЕсли; КонецЕсли; КонецЦикла; КонецЕсли; КонецЦикла;
	
	// Теперь отправим устанавливать новые значения из профилей
	
	Если УстановитьПрофилиНаПользователей(Пользователи, Профили) Тогда
		ЗафиксироватьТранзакцию();
		Возврат Истина; КонецЕсли;
	
КонецФункции
Функция УстановитьПрофилиНаПользователей(Пользователи, Профили) Экспорт
	
	// Устанавливает на пользователей настройки из профилей
	
	Запрос = Новый Запрос("
	
	// Создаем табличку
	
	|ВЫБРАТЬ 	Ссылка Профиль, Настройка, Значение, Ссылка.Приоритет Приоритет, Настройка.ВидЗаписи ВидЗаписи, Настройка.Путь Путь
	|ПОМЕСТИТЬ	ВсеНастройки
	|ИЗ 		Справочник.Профили.Настройки
	|ГДЕ		Ссылка В(&Профили);
	
	// Вытаскиваем самых жирных
	
	|ВЫБРАТЬ Настройка, МАКСИМУМ(Приоритет) Приоритет ПОМЕСТИТЬ Жирные ИЗ ВсеНастройки СГРУППИРОВАТЬ ПО Настройка;
	
	// Теперь выкидываем всех кроме жирных
	
	|ВЫБРАТЬ Профиль, Таб.Настройка, Значение, ВидЗаписи, Путь
	|ИЗ ВсеНастройки Таб
	|
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Жирные Жир
	|ПО	Таб.Приоритет = Жир.Приоритет И
	|	Таб.Настройка = Жир.Настройка
	|
	|ИТОГИ ПО ВидЗаписи
	|");
	
	Запрос.УстановитьПараметр("Профили", Профили);
	
	ВыборкаВидов 	= Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ПодклРегистры 	= ПолучитьПодключаемыеРегистрыНастроекПользователя();
	
	НачатьТранзакцию();
	
	Для Каждого ПользовательСсылка Из Пользователи Цикл
		
		Наборы			= Новый Структура; // в ключе имя набора в значении набор
		СпрОб 			= ПользовательСсылка.ПолучитьОбъект();
		ПользовательИБ	= ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ПользовательСсылка.ПользовательИБ);
		ИзменилсяСпр	= Ложь;
		ИзменилсяКнф	= Ложь;
		ИзменилсяНабор	= Ложь;
		ИзменилсяМоиНас	= Ложь;
		
		МоиНастройкиНабор = РегистрыСведений.ЗначенияНастроекПользователя.СоздатьНаборЗаписей();
		МоиНастройкиНабор.Отбор.Пользователь.Установить(ПользовательСсылка);
		МоиНастройкиНабор.Прочитать();
		МоиНастройки = МоиНастройкиНабор.Выгрузить();
	
		Пока ВыборкаВидов.Следующий() Цикл
			
			// Считаем
			
			Выборка = ВыборкаВидов.Выбрать();
			
			Если ВыборкаВидов.ВидЗаписи = Перечисления.ВидыЗаписейПрофиля.Пользователь Тогда
				
				// Пользователь справочник
				
				Пока Выборка.Следующий() Цикл
					СравнИУст(СпрОб[Выборка.Путь], Выборка.Значение , ИзменилсяСпр); КонецЦикла;
				
			ИначеЕсли ВыборкаВидов.ВидЗаписи = Перечисления.ВидыЗаписейПрофиля.РегСведенийПоПользователю Тогда
				
				// Регистры сведений связанные с пользователем
				
				Пока Выборка.Следующий() Цикл
		
					Набор 			= Неопределено;
					ПодклРегистр 	= ПолучитьНаборРегистр(Выборка.Путь, ПодклРегистры);
		
					Если Не Наборы.Свойство(ПодклРегистр.ИмяРегистра, Набор) Тогда  // вытащим набор с данными в таблицу
			
						регНабор = РегистрыСведений[ПодклРегистр.ИмяРегистра].СоздатьНаборЗаписей();
						регНабор.Отбор[ПодклРегистр.ИмяПользователь].Установить(ПользовательСсылка); 
						регНабор.Прочитать();
						Набор = регНабор.Выгрузить(); КонецЕсли;
		
					// Добавим если такого нету
					
					Отбор = Новый Структура(ПодклРегистр.ИмяПользователь + ", " + ПодклРегистр.ИмяЗначение, ПользовательСсылка, Выборка.Значение);
					Если Не Набор.НайтиСтроки(Отбор).Количество() Тогда
						ИзменилсяНабор = Истина;
						ЗаполнитьЗначенияСвойств(Набор.Добавить(), Отбор); КонецЕсли;
					
					Наборы.Вставить(ПодклРегистр.ИмяРегистра, Набор); КонецЦикла;
				
			ИначеЕсли ВыборкаВидов.ВидЗаписи = Перечисления.ВидыЗаписейПрофиля.МоиНастройки Тогда
				
				// Мои настройки пользователя
				
				Пока Выборка.Следующий() Цикл 
					
					Отбор = Новый Структура("Пользователь, Настройка", ПользовательСсылка, Выборка.Настройка.Путь);
					Строки = МоиНастройки.НайтиСтроки(Отбор);
					
					Если Строки.Количество() Тогда
						Строка = Строки[0];
					Иначе
						Строка = МоиНастройки.Добавить();
						ЗаполнитьЗначенияСвойств(Строка, Отбор); КонецЕсли;
					
					Если Строка.Значение <> Выборка.Значение Тогда 
						ИзменилсяМоиНас = Истина; 
						Строка.Значение = Выборка.Значение; КонецЕсли; КонецЦикла;
				
			ИначеЕсли ВыборкаВидов.ВидЗаписи = Перечисления.ВидыЗаписейПрофиля.Конфигуратор Тогда
				
				// Пользователь конфигуратора
				
				Если ПользовательИБ <> Неопределено Тогда
					Пока Выборка.Следующий() Цикл
					
						Если Выборка.Путь = "Роли" Тогда 
							Роль = Метаданные.Роли.Найти(Выборка.Значение);
							
							Если Роль <> Неопределено И Не ПользовательИБ.Роли.Содержит(Роль) Тогда
								ИзменилсяКнф = Истина;
								ПользовательИБ.Роли.Добавить(Роль); КонецЕсли;
						Иначе
							СравнИУст(ПользовательИБ[Выборка.Путь], Выборка.Значение , ИзменилсяКнф); КонецЕсли; КонецЦикла; КонецЕсли;
			Иначе
				
				ОтменитьТранзакцию();
				ВызватьИсключение "Забыли дописать вид записи профиля"; КонецЕсли; КонецЦикла; 
		
		// Запишем
		
		Если ИзменилсяСпр И Не ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(СпрОб) Тогда
			ОтменитьТранзакцию();
			Возврат Ложь; КонецЕсли;
		
		Если ИзменилсяКнф И Не ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(ПользовательИБ) Тогда
			ОтменитьТранзакцию();
			Возврат Ложь; КонецЕсли;
		
		Если ИзменилсяНабор Тогда
			Для Каждого Набор Из Наборы Цикл
				
				ПодклРегистр = ПолучитьНаборРегистр(Набор.Ключ, ПодклРегистры);
				регНабор = РегистрыСведений[ПодклРегистр.ИмяРегистра].СоздатьНаборЗаписей();
				регНабор.Загрузить(Набор.Значение);
				регНабор.Отбор[ПодклРегистр.ИмяПользователь].Установить(ПользовательСсылка); 
				
				Если Не ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(регНабор) Тогда
					ОтменитьТранзакцию();
					Возврат Ложь; КонецЕсли; КонецЦикла; КонецЕсли; 
		
		Если ИзменилсяМоиНас Тогда
			МоиНастройкиНабор.Загрузить(МоиНастройки);
			Если Не ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(МоиНастройкиНабор) Тогда
				ОтменитьТранзакцию();
				Возврат Ложь; КонецЕсли; КонецЕсли; КонецЦикла;
		
	ЗафиксироватьТранзакцию();
	Возврат ИСтина;
	
КонецФункции
Процедура ДобавитьВРегистр(Набор, Изменился, Отбор, ДопЗначение = Неопределено)
	
	Если Не Набор.НайтиСтроки(Отбор).Количество() Тогда
						
		Изменился = Истина;
		НовСтрока = Набор.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, Отбор); 
		
		Если ДопЗначение <> Неопределено Тогда 
			НовСтрока.Значение = ДопЗначение КонецЕсли; КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьНаборРегистр(ИмяРегистра, ПодклРегистры) Для Каждого ПодклРегистр Из ПодклРегистры Цикл Если ПодклРегистр.ИмяРегистра = ИмяРегистра Тогда ВОзврат ПодклРегистр; КонецЕсли; КонецЦикла; КонецФункции
Процедура СравнИУст(Знач1, Знач2, Изменился) Если Знач1 <> Знач2 Тогда Знач1 = Знач2; Изменился = Истина; КонецЕсли; КонецПроцедуры


#КонецОбласти
