
#Область Получение_Данных_Базы

Функция ПолучитьНовыйЭкземплярЗначения(Знач Значение)
	
	Возврат Значение;
	
КонецФункции
Функция ПолучитьМассивЗначенийИзТаблицы(Таблица, СтруктураПоиска, ПоляКолонок)
	
	массив = Новый Массив;
	
	Строки = Таблица.НайтиСтроки(СтруктураПоиска);
	Для Каждого Строка Из Строки Цикл НовЭлемент = Новый Структура(ПоляКолонок); ЗаполнитьЗначенияСвойств(НовЭлемент, Строка); массив.Добавить(НовЭлемент); КонецЦикла;

	Возврат массив;
	
КонецФункции

Процедура УстановитьИндексыТаблицам(ИмяПолей, Табл1, Табл2 = Неопределено, Табл3 = Неопределено, Табл4 = Неопределено, Табл5 = Неопределено, Табл6 = Неопределено, Табл7 = Неопределено)
	
	Табл1.Индексы.Добавить(ИмяПолей);
	Если Табл2 <> Неопределено Тогда Табл2.Индексы.Добавить(ИмяПолей) КонецЕсли;
	Если Табл3 <> Неопределено Тогда Табл2.Индексы.Добавить(ИмяПолей) КонецЕсли;
	Если Табл4 <> Неопределено Тогда Табл2.Индексы.Добавить(ИмяПолей) КонецЕсли;
	Если Табл5 <> Неопределено Тогда Табл2.Индексы.Добавить(ИмяПолей) КонецЕсли;
	Если Табл6 <> Неопределено Тогда Табл2.Индексы.Добавить(ИмяПолей) КонецЕсли;
	Если Табл7 <> Неопределено Тогда Табл2.Индексы.Добавить(ИмяПолей) КонецЕсли;
	
КонецПроцедуры
Функция ПолучитьПоляДляСтруктуры(ИмяПоляПоиска, Колонки)
	
	Структура = КонвертацияТипов.ПолучитьПустуюСтруктуруИзКолонокТаблицыЗначений(Колонки); 
	Структура.Удалить(ИмяПоляПоиска);
	Возврат КонвертацияТипов.ПолучитьСтрокуИзМассива(КонвертацияТипов.ПолучитьМассивИзКлючейСтруктуры(Структура));
	
КонецФункции

Функция ПолучитьМассивСвойствПоФорматAPI(ТаблицаСвойств)
	
	новМассив = Новый Массив;
	Для Каждого Строка ИЗ ТаблицаСвойств Цикл новМассив.Добавить(Новый Структура("guid, value", Строка.Свойство, Строка.Значение)); КонецЦикла;
	
	Возврат новМассив;
	
КонецФункции
Функция ПолучитьМассивМенюПоФорматAPI(ТаблицаСвойств)
	
	новМассив = Новый Массив;
	Для Каждого Строка ИЗ ТаблицаСвойств Цикл новМассив.Добавить(Новый Структура("guid, parent_guid, link_title, link_text, sort_weight", Строка.Меню, Строка.Родитель, Строка.Наименование, Строка.Текст, Строка.Вес)) КонецЦикла;
	
	Возврат новМассив;
	
КонецФункции

Функция ПолучитьКартинку(Параметры, стрОшибки = "") Экспорт
	
	Ссылка 		= ?(Параметры.Свойство("Ссылка"), 		Параметры.Ссылка,		Неопределено);
	guid_image 	= ?(Параметры.Свойство("guid_image"), 	Параметры.guid_image, 	Неопределено);
	
	Если ЗначениеЗаполнено(guid_image) Тогда
		Ссылка = HTTP.ПолучитьОбъектПоСсылке(Справочники.КартинкиНоменклатуры, guid_image, стрОшибки);
		Если Ссылка = Неопределено Тогда Возврат "" КонецЕсли;КонецЕсли;
		
	Структура 	= Новый Структура("guid, extension, body, alt, title", XMLСтрока(Ссылка), "", "", Ссылка.Наименование, Ссылка.Наименование);
	Картинка 	= Ссылка.Аватар.Получить();
	
	//desh.avdonin {{27.06.2014#
	Если ЗначениеЗаполнено(Ссылка.КопияКартинки) Тогда
		Картинка = Ссылка.КопияКартинки.Картинка.Получить();
	Иначе
		Картинка = Ссылка.Картинка.Получить();
	КонецЕсли;
	Если Картинка = Неопределено Тогда
		// тогда возможно картинка в аватаре
		Если ЗначениеЗаполнено(Ссылка.КопияКартинки) Тогда
			Картинка = Ссылка.КопияКартинки.Аватар.Получить();
		Иначе
			Картинка = Ссылка.Аватар.Получить();
		КонецЕсли;
	КонецЕсли;
	//}}desh.avdonin
	
	Если Картинка <> Неопределено Тогда
		Структура.extension = НРег(Строка(Картинка.Формат()));
		Структура.body 		= Картинка; КонецЕсли;
		
	Возврат Структура;
	
КонецФункции

Функция ПолучитьКатегории(Параметры, стрОшибки = "") Экспорт
	
	// Возвращает массив категорий, если в массив состоит из 1 элемента тогда возвращается элемент массиа (структура)
	
	// Получим параметры
	
	СсылкаКатегории 		= ?(Параметры.Свойство("Ссылка"), 			Параметры.Ссылка, 			Неопределено);
	guid_category 			= ?(Параметры.Свойство("guid_category"), 	Параметры.guid_category, 	Неопределено);
	БратьДопТаблицыОтсюда 	= ?(Параметры.Свойство("БратьДопТаблицыОтсюда"), Параметры.БратьДопТаблицыОтсюда, Неопределено);
	
	// Получим родителя
	
	Если ЗначениеЗаполнено(guid_category) Тогда
		
		СсылкаРодитель = HTTP.ПолучитьОбъектПоСсылке(Справочники.Номенклатура, guid_category, стрОшибки); Если СсылкаРодитель = Неопределено Тогда Возврат "" КонецЕсли;
		
		Если Не СсылкаРодитель.ЭтоГруппа Тогда
			стрОшибки = "Гуид родительской категории относится к товару.
			|Гуид: " + guid_category + "
			|Товар: " + Строка(СсылкаРодитель); Возврат Неопределено; КонецЕсли; КонецЕсли;
	
	Если СсылкаКатегории = Неопределено Тогда
	
		ДопФильтр = "ЭтоГруппа И НЕ ПометкаУдаления И ДляДилеров";
		ДопФильтр = ДопФильтр + ?(ЗначениеЗаполнено(СсылкаРодитель)," 	И Родитель = &Родитель ", "");
		
	Иначе
		
		ДопФильтр = "Ссылка = &Ссылка" КонецЕсли;

	текстПустышка = "ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка ИЗ Справочник.Номенклатура";
	
	ПутьКСайту = Константы.ПутьИнтернетМагазин.Получить();
	
#Область Текст_запроса
	
	Запрос = Новый Запрос("
	
	// Категории
	
	|ВЫБРАТЬ
	|	Спр.Ссылка				guid,
	|	Спр.Наименование 		title,
	|	Спр.alies				alias,
	|	Спр.Описание_Дилер		description,
	|	Неопределено			image,
	|	Неопределено			parents,
	|	Неопределено			properties,
	|
	|	Родитель
	|ИЗ 		
	|	Справочник.Номенклатура КАК Спр
	|ГДЕ " + ДопФильтр + "
	|;
	
	// Доп свойства
	
	|" + ?(БратьДопТаблицыОтсюда = Неопределено, "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура 	Категория,
	|	Свойство 		guid
	|ИЗ 		
	|	РегистрСведений.ЗначенияДополнительныхРеквизитовНоменклатуры 
	|ГДЕ
	|	Номенклатура В(ВЫБРАТЬ Ссылка ИЗ Справочник.Номенклатура ГДЕ " + ДопФильтр + ")
	|",текстПустышка) + ";
	
	// Доп родители
	
	|ВЫБРАТЬ
	|	Ссылка 					Категория,
	|	Родитель				category_guid
	|ИЗ
	|	Справочник.Номенклатура.ДополнительныеРодители
	|ГДЕ
	|	Ссылка В(ВЫБРАТЬ Ссылка ИЗ Справочник.Номенклатура ГДЕ " + ДопФильтр + ")
	|;
	
	// Картинки
	
	|ВЫБРАТЬ
	|	Ссылка image, Владелец Категория
	|ИЗ
	|	Справочник.КартинкиНоменклатуры
	|ГДЕ
	|	Владелец В(ВЫБРАТЬ Ссылка ИЗ Справочник.Номенклатура ГДЕ " + ДопФильтр + ")
	|");
	
	Если ЗначениеЗаполнено(guid_category) Тогда 
		Запрос.УстановитьПараметр("Родитель", СсылкаРодитель) КонецЕсли;
	
	Если СсылкаКатегории <> Неопределено Тогда
		Запрос.УстановитьПараметр("Ссылка", СсылкаКатегории) КонецЕсли;
	
#КонецОбласти
	
	Пакеты 		= Запрос.ВыполнитьПакет();
	Категории 	= Новый Массив;
	Таблица		= Пакеты[0].Выгрузить(); ПослИнд = Таблица.Количество() - 1;
	Свойства	= Пакеты[1].Выгрузить(); ПоляСвойств = ПолучитьПоляДляСтруктуры("Категория", Свойства.Колонки);
	Родители	= Пакеты[2].Выгрузить(); ПоляРодителей = ПолучитьПоляДляСтруктуры("Категория", Родители.Колонки);
	тКартинки	= Пакеты[3].Выгрузить();
	
	Если БратьДопТаблицыОтсюда = Неопределено Тогда
		УстановитьИндексыТаблицам("Категория", Свойства, 	Родители, 	тКартинки) Иначе
		УстановитьИндексыТаблицам("Категория", 				Родители, 	тКартинки) КонецЕсли;
	
	Для Инд = 0 По ПослИнд Цикл
		
		// Получим категорию
		
		структураКатегория 	= КонвертацияТипов.ПолучитьСтруктуруИзСТрокиТаблицыЗначений(Таблица, Инд);
		Отбор				= Новый Структура("Категория", структураКатегория.guid);
		
		// Добавим родителей
		
		структураКатегория.parents = ПолучитьМассивЗначенийИзТаблицы(Родители, Отбор, ПоляРодителей);
		Если Не Таблица[Инд].Родитель.Пустая() Тогда структураКатегория.parents.Вставить(0, Таблица[Инд].Родитель) КонецЕсли;
		структураКатегория.Удалить("Родитель");
		
		// Добавим свойства
		
		структураКатегория.properties = ?(БратьДопТаблицыОтсюда = Неопределено,
						ПолучитьМассивЗначенийИзТаблицы(Свойства, Отбор, ПоляСвойств),
						ПолучитьМассивСвойствПоФорматAPI(БратьДопТаблицыОтсюда.Свойства)); 
		
		// Добавим картинку
		
		СтрокаКартинки = тКартинки.Найти(структураКатегория.guid, "Категория");
		Если СтрокаКартинки <> Неопределено Тогда
			структураКатегория.image = XMLСтрока(СтрокаКартинки.image) КонецЕсли;
		
		// Запомним
		
		Категории.Добавить(структураКатегория); КонецЦикла;
	
	
	Возврат ?(Категории.Количество() = 1, Категории[0], Категории);
	
КонецФункции
Функция ПолучитьТовары(Параметры, стрОшибки = "") Экспорт
	
	// Возвращает массив товаров, если в параметре указан конкретный товар тогда возвращает структуру полей товара
	
	// Получим параметры
	
	СсылкаТовар 			= ?(Параметры.Свойство("Ссылка"), 				Параметры.Ссылка, Неопределено);
	guid_category 			= ?(Параметры.Свойство("guid_category"), 		Параметры.guid_category, Неопределено);
	Артикул					= ?(Параметры.Свойство("Артикул"), 				Параметры.Артикул, Неопределено);
	НомерНачала 			= ?(Параметры.Свойство("НомерНачала"), 			Параметры.НомерНачала, Неопределено);
	НомерОкончания 			= ?(Параметры.Свойство("НомерОкончания"), 		Параметры.НомерОкончания, Неопределено);
	БратьДопТаблицыОтсюда 	= ?(Параметры.Свойство("БратьДопТаблицыОтсюда"),Параметры.БратьДопТаблицыОтсюда, Неопределено);
	
	// Получим родителя
	
	Если ЗначениеЗаполнено(guid_category) Тогда
		
		СсылкаРодитель = HTTP.ПолучитьОбъектПоСсылке(Справочники.Номенклатура, guid_category, стрОшибки); Если СсылкаРодитель = Неопределено Тогда Возврат "" КонецЕсли;
		
		Если Не СсылкаРодитель.ЭтоГруппа Тогда
			err = "Гуид родительской категории относится к товару.
			|Гуид: " + guid_category + "
			|Товар: " + Строка(СсылкаРодитель); Возврат Неопределено; КонецЕсли; КонецЕсли;

	Если СсылкаТовар = Неопределено Тогда
	
		ДопФильтр = "НЕ ЭтоГруппа И НЕ ПометкаУдаления И ДляДилеров";
		ДопФильтр = ДопФильтр + ?(ЗначениеЗаполнено(СсылкаРодитель)," 	И Родитель = &Родитель ", "");
		ДопФильтр = ДопФильтр + ?(ЗначениеЗаполнено(НомерНачала), " 	И ПорядковыйНомер >= " + Формат(НомерНачала,"ЧГ="), "");
		ДопФильтр = ДопФильтр + ?(ЗначениеЗаполнено(НомерОкончания), " 	И ПорядковыйНомер <= " + Формат(НомерОкончания,"ЧГ="), "");
		
	Иначе
		
		ДопФильтр = "Ссылка = &Ссылка" КонецЕсли;
	
	Если ТипЗнч(Артикул) = Тип("Строка") И Не ПустаяСтрока(Артикул) Тогда ДопФильтр = ДопФильтр + " И Артикул = """ + Артикул + """" КонецЕсли;
	
	текстПустышка = "ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка ИЗ СписокТоваров";
	
#Область Текст_запроса

	Запрос = Новый Запрос("
	
	// Список товаров
	
	|ВЫБРАТЬ 	Ссылка
	|ПОМЕСТИТЬ 	СписокТоваров
	|ИЗ 		Справочник.Номенклатура КАК Спр
	|ГДЕ " + ДопФильтр + "
	|;
	
	//
	
	|ВЫБРАТЬ
	|	Спр.Ссылка				guid,
	|	ПорядковыйНомер			id_number,
	|	Спр.Артикул				sku, 
	|	Спр.Описание_Дилер		description,
	|	Спр.Наименование 		title,
	//|	Спр.alies				alias,
	|	ЕдиницаИзмерения.Наименование in_stock_units,
	|	ДатаОжидания			date_expected,
	|	Неопределено			images,
	|	Неопределено			categories,
	|	Производитель			manufacturer,
	|	Неопределено			price_retail,
	|	Неопределено			price_retail_amount,
	|	Неопределено			price_income,
	|	Неопределено			price_income_amount,
	|	Неопределено			properties,
	|	Вес						weight,
	|	Объем					geometry,
	|
	|	Родитель
	|
	|ИЗ 		
	|	Справочник.Номенклатура КАК Спр
	|
	|ГДЕ " + ДопФильтр + "
	|;
	
	// Доп свойства
	
	|" + ?(БратьДопТаблицыОтсюда = Неопределено, "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура 	Товар,
	|	Свойство 		guid,
	|	Представление(Значение)		value
	|ИЗ 		
	|	РегистрСведений.ЗначенияДополнительныхРеквизитовНоменклатуры 
	|ГДЕ
	|	Номенклатура В(ВЫБРАТЬ Ссылка ИЗ СписокТоваров)
	|", текстПустышка) + "
	|;
	
	// Доп родители
	
	|ВЫБРАТЬ
	|	Ссылка 					Товар,
	|	Родитель				category_guid
	|ИЗ
	|	Справочник.Номенклатура.ДополнительныеРодители
	|ГДЕ
	|	Ссылка В(ВЫБРАТЬ Ссылка ИЗ СписокТоваров)
	|;
	
	// Картинки
	
	|ВЫБРАТЬ
	|	Ссылка image, Владелец Товар
	|ИЗ
	|	Справочник.КартинкиНоменклатуры
	|ГДЕ
	|	Владелец В(ВЫБРАТЬ Ссылка ИЗ СписокТоваров)
	|	И ВыгружатьНаСайт
	|;
	
	// Цены дилер
	
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Цен.Номенклатура Товар,
	|	Цен.ТипЦен price_type_guid,
	|	ВЫБОР КОГДА Цен.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) ТОГДА 1 ИНАЧЕ Цен.Упаковка.Коэффициент КОНЕЦ amount,
	|	Цен.Цена * (ЕСТЬNULL(Вал.Курс, 1) * ЕСТЬNULL(ВалТип.Кратность, 1)) / (ЕСТЬNULL(ВалТип.Курс, 1) * ЕСТЬNULL(Вал.Кратность, 1)) КАК price
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(,  ТипЦен = &ТипЦенДилер И Номенклатура В(ВЫБРАТЬ Ссылка ИЗ СписокТоваров)) Цен
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ 	РегистрСведений.КурсыВалют.СрезПоследних() Вал
	|ПО 				Цен.Валюта = Вал.Валюта
	|ЛЕВОЕ СОЕДИНЕНИЕ	РегистрСведений.КурсыВалют.СрезПоследних(,Валюта = &Валюта) ВалТип ПО ИСТИНА
	|;
	
	// Цены розница
	
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Цен.Номенклатура Товар,
	|	Цен.ТипЦен price_type_guid,
	|	ВЫБОР КОГДА Цен.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) ТОГДА 1 ИНАЧЕ Цен.Упаковка.Коэффициент КОНЕЦ amount,
	|	Цен.Цена * (ЕСТЬNULL(Вал.Курс, 1) * ЕСТЬNULL(ВалТип.Кратность, 1)) / (ЕСТЬNULL(ВалТип.Курс, 1) * ЕСТЬNULL(Вал.Кратность, 1)) КАК price
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(,  ТипЦен = &ТипЦенРозница И Номенклатура В(ВЫБРАТЬ Ссылка ИЗ СписокТоваров)) Цен
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ 	РегистрСведений.КурсыВалют.СрезПоследних() Вал
	|ПО 				Цен.Валюта = Вал.Валюта
	|ЛЕВОЕ СОЕДИНЕНИЕ	РегистрСведений.КурсыВалют.СрезПоследних(,Валюта = &Валюта) ВалТип ПО ИСТИНА
	|");
	
	ТипЦенРозница 	= КэшируемыеФункции.ПолучитьТипЦенРозница();
	ТипЦенДилер		= ?(ПараметрыСеанса.ТекущийПользователь.Контрагент.Пустая(), Справочники.ТипыЦен.ПустаяСсылка(), ПараметрыСеанса.ТекущийПользователь.Контрагент.ТипЦен);
	
	Запрос.УстановитьПараметр("ТипЦенДилер", 	ТипЦенДилер);
	Запрос.УстановитьПараметр("ТипЦенРозница", 	ТипЦенРозница);
	Запрос.УстановитьПараметр("Валюта", 		ТипЦенРозница.Валюта);
	
	Если СсылкаТовар <> Неопределено Тогда 			Запрос.УстановитьПараметр("Ссылка", СсылкаТовар) КонецЕсли;
	Если ЗначениеЗаполнено(СсылкаРодитель) Тогда 	Запрос.УстановитьПараметр("Родитель", СсылкаРодитель) КонецЕсли;
	
#КонецОбласти
	
	Пакеты 		= Запрос.ВыполнитьПакет();
	Товары 		= Новый Массив;
	Таблица		= Пакеты[1].Выгрузить(); ПослИнд = Таблица.Количество() - 1;
	Свойства	= Пакеты[2].Выгрузить(); ПоляСвойств = ПолучитьПоляДляСтруктуры("Товар", Свойства.Колонки);
	Родители	= Пакеты[3].Выгрузить(); ПоляРодителей = ПолучитьПоляДляСтруктуры("Товар", Родители.Колонки);
	тКартинки	= Пакеты[4].Выгрузить(); ПоляКартинок = ПолучитьПоляДляСтруктуры("Товар", тКартинки.Колонки);
	Цены		= Пакеты[5].Выгрузить(); ПоляЦен = ПолучитьПоляДляСтруктуры("Товар", Цены.Колонки);
	ЦеныРозница	= Пакеты[6].Выгрузить(); ПоляЦенРозница = ПолучитьПоляДляСтруктуры("Товар", ЦеныРозница.Колонки);
	
	Если БратьДопТаблицыОтсюда = Неопределено Тогда
			УстановитьИндексыТаблицам("Товар", Свойства, 	Родители, тКартинки, Цены, ЦеныРозница);
	Иначе	УстановитьИндексыТаблицам("Товар", 				Родители, тКартинки, Цены, ЦеныРозница) КонецЕсли;
	
	Для Инд = 0 По ПослИнд Цикл
		
		// Получим категорию
		
		структураТовар 	= КонвертацияТипов.ПолучитьСтруктуруИзСТрокиТаблицыЗначений(Таблица, Инд);
		Отбор			= Новый Структура("Товар", структураТовар.guid);
		
		// Добавим родителей
		
		структураТовар.categories = ПолучитьМассивЗначенийИзТаблицы(Родители, Отбор, ПоляРодителей);
		Если Не Таблица[Инд].Родитель.Пустая() Тогда структураТовар.categories.Вставить(0, Таблица[Инд].Родитель) КонецЕсли;
		структураТовар.Удалить("Родитель");
		
		// Добавим свойства
		
		структураТовар.properties = ?(БратьДопТаблицыОтсюда = Неопределено,
						ПолучитьМассивЗначенийИзТаблицы(Свойства, Отбор, ПоляСвойств),
						ПолучитьМассивСвойствПоФорматAPI(БратьДопТаблицыОтсюда.Свойства)); 
		
		// Добавим картинку
		
		структураТовар.images = ПолучитьМассивЗначенийИзТаблицы(тКартинки, Отбор, ПоляКартинок); 
		
		// Добавим Цены
		
		структураЦены = ПолучитьМассивЗначенийИзТаблицы(Цены, Отбор, ПоляЦен);
		Если структураЦены.Количество() Тогда
			
			// Цену вернем с учетом скидок и акций (переделать мделенное получение)
				структураТовар.price_income = РаботаСНоменклатурой.ПолучитьЦену(структураТовар.guid, ТипЦенДилер, ТипЦенРозница.Валюта,,ПараметрыСеанса.ТекущийПользователь.Контрагент, Истина);
			//структураТовар.price_income = структураЦены[0].price;
			
			структураТовар.price_income_amount = структураЦены[0].amount; КонецЕсли;
		
		// Добавим Цены розницы
		
		структураЦены = ПолучитьМассивЗначенийИзТаблицы(ЦеныРозница, Отбор, ПоляЦенРозница);
		Если структураЦены.Количество() Тогда
			
			// Цену вернем с учетом скидок и акций (переделать мделенное получение)
			//структураТовар.price_retail = структураЦены[0].price;
				структураТовар.price_retail = РаботаСНоменклатурой.ПолучитьЦену(структураТовар.guid, ТипЦенРозница,,,,Истина);
			
			структураТовар.price_retail_amount = структураЦены[0].amount; КонецЕсли;
		
		// Запомним
		
		Товары.Добавить(структураТовар); КонецЦикла;
	
	Возврат ?(Товары.Количество() = 1, Товары[0], Товары);
		
КонецФункции
Функция ПолучитьСвойстваНоменклатуры(Параметры, стрОшибки = "") Экспорт
	
	// Получим параметры
	
	Ссылка 				= ?(Параметры.Свойство("Ссылка"), 				Параметры.Ссылка, 				Неопределено);
	//guid_manafacture 	= ?(Параметры.Свойство("guid_manafacture"), 	Параметры.guid_manafacture, 	Неопределено);
	
	//Если ЗначениеЗаполнено(guid_manafacture) Тогда
	//	Ссылка = HTTP.ПолучитьОбъектПоСсылке(Справочники.Производители, guid_manafacture, стрОшибки); 
	//	Если Ссылка = Неопределено Тогда Возврат "" КонецЕсли;КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Спр.Ссылка				guid,
	|	Спр.Наименование 		name
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыНоменклатуры Спр
	|ГДЕ 
	|	НЕ ПометкаУдаления " + ?(ЗначениеЗаполнено(Ссылка), "
	|	И Ссылка = &Ссылка", "") + "
	|");
	
	Если ЗначениеЗаполнено(Ссылка) Тогда 
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Возврат КонвертацияТипов.ПолучитьСтруктуруИзСТрокиТаблицыЗначений(Запрос.Выполнить().Выгрузить());
		
	Иначе
		Возврат КонвертацияТипов.ПолучитьМассивИзТаблицыЗначений(Запрос.Выполнить().Выгрузить()); КонецЕсли;
	
КонецФункции
Функция ПолучитьПроизводителей(Параметры, стрОшибки = "") Экспорт
	
	// Получим параметры
	
	Ссылка 				= ?(Параметры.Свойство("Ссылка"), 				Параметры.Ссылка, 				Неопределено);
	guid_manafacture 	= ?(Параметры.Свойство("guid_manafacture"), 	Параметры.guid_manafacture, 	Неопределено);
	
	Если ЗначениеЗаполнено(guid_manafacture) Тогда
		Ссылка = HTTP.ПолучитьОбъектПоСсылке(Справочники.Производители, guid_manafacture, стрОшибки); 
		Если Ссылка = Неопределено Тогда Возврат "" КонецЕсли;КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Спр.Ссылка				guid,
	//|	ВЫБОР КОГДА Спр.sorting_weight = 0 ТОГДА ""null"" ИНАЧЕ Спр.sorting_weight КОНЕЦ sorting_weight,
	|	Спр.sorting_weight,
	|	Спр.h1, 
	|	Спр.Наименование 		name,
	|	Спр.Описание 			description,
	|	Спр.meta_keywords,
	|	Спр.meta_description,
	|	Спр.Страна.Наименование	country,
	|	Ранг 					manufacture_rank
	|ИЗ
	|	Справочник.Производители Спр
	|ГДЕ 
	|	НЕ ПометкаУдаления " + ?(ЗначениеЗаполнено(Ссылка), "
	|	И Ссылка = &Ссылка", "") + "
	|");
	
	Если ЗначениеЗаполнено(Ссылка) Тогда 
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Возврат КонвертацияТипов.ПолучитьСтруктуруИзСТрокиТаблицыЗначений(Запрос.Выполнить().Выгрузить());
		
	Иначе
		Возврат КонвертацияТипов.ПолучитьМассивИзТаблицыЗначений(Запрос.Выполнить().Выгрузить()); КонецЕсли;
	
КонецФункции

Функция ПолучитьКоличествоТоваровВВыборке(Параметры, стрОшибки = "") Экспорт
	
	Перем СсылкаРодитель;
	
	guid_category = ?(Параметры.Свойство("guid_category"), Параметры.guid_category, Неопределено);
	
	Если ЗначениеЗаполнено(guid_category) Тогда
		
		СсылкаРодитель = HTTP.ПолучитьОбъектПоСсылке(Справочники.Номенклатура, guid_category, стрОшибки); Если СсылкаРодитель = Неопределено Тогда Возврат "" КонецЕсли;
		
		Если Не СсылкаРодитель.ЭтоГруппа Тогда
			стрОшибки = "Гуид родительской категории относится к товару.
			|Гуид: " + guid_category + "
			|Товар: " + Строка(СсылкаРодитель); Возврат Неопределено; КонецЕсли; КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(Ссылка) КАК Количество,
	|	МИНИМУМ(ПорядковыйНомер) КАК МинимальныйИД,
	|	МАКСИМУМ(ПорядковыйНомер) КАК МаксимальныйИД
	|ИЗ 		
	|	Справочник.Номенклатура
	|ГДЕ 
	|	НЕ ЭтоГруппа И
	|	ДляДилеров
	|" + ?(СсылкаРодитель = Неопределено,"","И Ссылка В ИЕРАРХИИ(&Родитель)") + "
 	|");
	
	Запрос.УстановитьПараметр("Родитель", СсылкаРодитель);
	Выполнение = Запрос.Выполнить();
	Если Выполнение.Пустой() Тогда
		
		Возврат Новый Структура("Min, Max, Count");
		
	Иначе
		
		Выборка = Выполнение.Выбрать();
		Выборка.Следующий();
		Возврат Новый Структура("Min, Max, Count", Выборка.МинимальныйИД, Выборка.МаксимальныйИД, Выборка.Количество); КонецЕсли;
	
КонецФункции

#КонецОбласти