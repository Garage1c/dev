

Функция ПолучитьСуммуНДСВЗапросе(Источник = "", ДобСуффикс = "Приход", Знач ИмяЗаказ = "ЗаказПокупателя", ИмяЗаказБезИсточника = Ложь) Экспорт
	
	Если НЕ ПустаяСтрока(Источник) Тогда Источник = Источник + "." КонецЕсли;
	Если НЕ ПустаяСтрока(ИмяЗаказ) Тогда ИмяЗаказ = ИмяЗаказ + "." КонецЕсли;
		
	Текст = "
	|ВЫБОР 
	|	КОГДА %1СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18) ТОГДА
	|		ВЫБОР КОГДА " + ?(ИмяЗаказБезИсточника, "","%1") + ИмяЗаказ + "СуммаВключаетНДС Тогда
	|			ВЫРАЗИТЬ ((%1Сумма" + ДобСуффикс + " * 18 / 118) КАК ЧИСЛО(15,2)) ИНАЧЕ
	|         	ВЫРАЗИТЬ ((%1Сумма" + ДобСуффикс + " * 18 / 100) КАК ЧИСЛО(15,2)) КОНЕЦ
	|
	|	КОГДА %1СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС19) ТОГДА
	|		ВЫБОР КОГДА " + ?(ИмяЗаказБезИсточника, "","%1") + ИмяЗаказ + "СуммаВключаетНДС Тогда
	|			ВЫРАЗИТЬ ((%1Сумма" + ДобСуффикс + " * 19 / 119) КАК ЧИСЛО(15,2)) ИНАЧЕ
	|         	ВЫРАЗИТЬ ((%1Сумма" + ДобСуффикс + " * 19 / 100) КАК ЧИСЛО(15,2)) КОНЕЦ ИНАЧЕ 0 КОНЕЦ
    |";      
							
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, Источник);
						
КонецФункции

Функция ПолучитьНомерСФ(Организация)
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 НомерСФ, Дата ИЗ Документ.РеализацияТоваров ГДЕ Организация = &Организация УПОРЯДОЧИТЬ ПО Дата Убыв");
	Запрос.УстановитьПараметр("Организация", Организация);
	
	НомерСФ = "";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если НЕ НачалоГода(ТекущаяДата()) - НачалоГода(Выборка.Дата) Тогда 
			НомерСФ = Формат(Число(?(ПустаяСтрока(Выборка.НомерСФ ),0,Выборка.НомерСФ)) + 1, "ЧГ=0");
		Иначе
			НомерСФ = "1";
		КонецЕсли;
	КонецЕсли;
	         
	Возврат НомерСФ;
	
КонецФункции
Функция ПолучитьРеквизитыЗаказаДляЗаполненияШапкиДокумента(Заказ) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 	
	|	Док.Ссылка 									КАК Заказ,
	|	Док.Склад									КАК Склад,
	|	Док.Партнер								 	КАК Партнер,
	//|	ЕстьNULL(Док.Контрагент, КонтроСвязь.Контрагент) КАК Контрагент,
	|	Док.Контрагент								КАК Контрагент,
	|	Док.Валюта									КАК Валюта,
	|	Док.ТипЦен									КАК ТипЦен,
	|	Док.БанковскийСчетОрганизации				КАК БанковскийСчетОрганизации,
	|	Док.БанковскийСчетПартнера					КАК	БанковскийСчетПартнера,
	|	Док.Грузополучатель							КАК Грузополучатель,
	|	Док.Грузоотправитель			            КАК Грузоотправитель,
	|	Док.Организация							    КАК Организация,
	|	Док.СуммаВключаетНДС						КАК СуммаВключаетНДС,
	|	Док.УчитыватьНДС							КАК УчитыватьНДС,
	|	Док.ДисконтнаяКарта							КАК ДисконтнаяКарта,
	|	Док.БанковскийСчетГрузоотправителя              БанковскийСчетГрузоотправителя,
	|	Док.БанковскийСчетГрузополучателя               БанковскийСчетГрузополучателя,
	|	Док.Смена										Смена,
	|	Док.Плательщик									Плательщик,
	|	Док.Отдел										Отдел,
	|	Док.Подразделение								Подразделение,
	|   Док.РасчетСкидкиОтЦены                          РасчетСкидкиОтЦены
	|ИЗ
	|	(
	|		ВЫБРАТЬ СуммаВключаетНДС, УчитыватьНДС, Ссылка, Склад, Партнер, Контрагент, Валюта, ТипЦен, БанковскийСчетОрганизации, БанковскийСчетПартнера, Грузополучатель, Грузоотправитель, Организация, ДисконтнаяКарта, БанковскийСчетГрузоотправителя, БанковскийСчетГрузополучателя, Смена, Плательщик, Отдел, Подразделение, РасчетСкидкиОтЦены
	|		ИЗ 		Документ.ЗаказПокупателя
	|		ГДЕ		Ссылка = &Заказ
	|
	|		ОБЪЕДИНИТЬ ВСЕ
	|
	|		ВЫБРАТЬ СуммаВключаетНДС, УчитыватьНДС, Док.Ссылка, Док.Склад, Док.Партнер, Док.Контрагент, Док.Валюта, Док.ТипЦен, Док.БанковскийСчетОрганизации, Док.БанковскийСчетПартнера, Грузополучатель, Грузоотправитель, Организация, ДисконтнаяКарта, &ПустойБанковскийСчет, &ПустойБанковскийСчет, &ПустаяСмена, Плательщик, Отдел, Подразделение, РасчетСкидкиОтЦены
	|		ИЗ Документ.ИнтернетЗаказПокупателя КАК Док
	|
	|		
	|
	//|		ЛЕВОЕ СОЕДИНЕНИЕ 	РегистрСведений.СвязьПартнераСПользователямиИнтернет КАК ИнетСвязь
	//|		ПО					Док.ПользовательИнтернет = ИнетСвязь.ПользовательИнтернет
	|		ГДЕ	Ссылка = &Заказ
	|
	|	) Док
	|
	//|ЛЕВОЕ СОЕДИНЕНИЕ
	//|	РегистрСведений.СвязьПартнераСКонтрагентом КАК КонтроСвязь
	//|ПО
	//|	Док.Партнер = КонтроСвязь.Партнер
	|
  	|");

	Запрос.УстановитьПараметр("ПустаяДисконтнаяКарта", 	Справочники.ИнформационныеКарты.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойБанковскийСчет", 	Справочники.БанковскиеСчета.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСмена", БизнесПроцессы.ПродажаВРозницу.ПустаяСсылка());
	Запрос.УстановитьПараметр("Заказ", 	Заказ);
	
	Структура = КонвертацияТипов.ПолучитьСтруктуруИзСТрокиТаблицыЗначений(Запрос.Выполнить().Выгрузить());
	Структура.Вставить("НомерСФ", ПолучитьНомерСФ(Структура.Организация));
	
	Возврат Структура;
		
КонецФункции

Функция ЗаказОтработал(Заказ) Экспорт

	// Если есть на остатках заказ значит еще не отгружен
	
	Если ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		
		имяРегистр 	= "ЗаказыПокупателей";
		имяЗаказ		= "ЗаказПокупателя";
		
	ИначеЕсли ТипЗнч(Заказ) = Тип("ДокументСсылка.ИнтернетЗаказПокупателя") Тогда
		
		имяРегистр 	= "ИнтернетЗаказПокупателя";
		имяЗаказ		= "ИнтернетЗаказ";
		
	ИначеЕсли ТипЗнч(Заказ) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
		
		имяРегистр 	= "ВнутренниеЗаказы";
		имяЗаказ		= "ВнутреннийЗаказ";
		
	КонецЕсли;
		
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 " + имяЗаказ + " ИЗ РегистрНакопления." + имяРегистр + ".Остатки(," + имяЗаказ + " = &Заказ)");		
	Запрос.УстановитьПараметр("Заказ", Заказ);
	
	Возврат Запрос.Выполнить().Пустой();

КонецФункции
	
Функция ПолучитьРеализацииПоЗаказу(Заказ) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ Ссылка, ПРЕДСТАВЛЕНИЕ(Ссылка) Представление ИЗ Документ.РеализацияТоваров ГДЕ Заказ В (&Заказ)");
	Запрос.УстановитьПараметр("Заказ", Заказ);
	
	Реализации = Новый СписокЗначений;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Реализации.Добавить(Выборка.Ссылка, Выборка.Представление);
	КонецЦикла;
	
	Возврат Реализации;
	
КонецФункции

Функция ПолучитьСуммуЗаказа(Заказ) Экспорт
	
	ВызватьИсключение "Хопля! поймал где это вызывается, нужно добавить еще в эту функцию получение сумму если у заказа сумма не включаен НДС";
	
	Запрос = Новый Запрос("ВЫБРАТЬ СуммаПриход Сумма ИЗ РегистрНакопления.ЗаказыПокупателей.Обороты(,,, ЗаказПокупателя = &Заказ)
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ СуммаПриход Сумма ИЗ РегистрНакопления.ИнтернетЗаказПокупателя.Обороты(,,, ИнтернетЗаказ = &Заказ)");
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда Возврат Выборка.Сумма; КонецЕсли;

	Возврат 0;
	
КонецФункции

Функция ПолучитьИмяФормы(Ссылка) Экспорт
	
	Возврат "Документ." + Ссылка.Метаданные().Имя + ".ФормаОбъекта";
	
КонецФункции

//РЕКВИЗИТЫ

// Изменения - структура: 
// Ключ - имя реквизита, 
// Заначение - значение реквизита для записи
//
Функция СохранитьИзмененияРеквизитовЗаказа(ЗаказСсылка, Изменения, ИзмененияТЧ = Неопределено) Экспорт
	
	РежимЗаписи = Истина;
	
	УстановитьПривилегированныйРежим(Истина);

	Если Изменения.Свойство("Организация") ИЛИ Изменения.Свойство("Партнер") ИЛИ Изменения.Свойство("Контрагент") ИЛИ Изменения.Свойство("ОтветственноеЛицо") ИЛИ Изменения.Свойство("СуммаВключаетНДС") Тогда
		РежимЗаписи = Ложь; КонецЕсли;
	
	Если ЗаказСсылка <> Неопределено И НЕ ЗаказСсылка.Пустая() Тогда
		Заказ = ЗаказСсылка.ПолучитьОбъект();
		
		Для Каждого Строка ИЗ Изменения Цикл
			Попытка
				Заказ[Строка.Ключ] = Строка.Значение;
			Исключение
				Продолжить;
			КонецПопытки;
		КонецЦикла;	
		
		// перезаписываем ТЧ Товары (по новой методикие) и ТЧ Доставка
		Если ИзмененияТЧ <> Неопределено Тогда
			Для Каждого Строка Из ИзмененияТЧ Цикл
				Таблица = Заказ[Строка.Ключ];
				Таблица.Загрузить(Строка.Значение);
				РежимЗаписи = Ложь;
			КонецЦикла;
		КонецЕсли;
		
		// Если в нем заполнена колонка размещение и он новый тогда очистим ее
		
		Если Не Заказ.Проведен И Заказ.СпособРазмещенияБезЗаказа Тогда
			КонвертацияТипов.ВыполнитьВыражениеВКаждойСтрокеТаблицы(Заказ.Товары, "Строка = Неопределено"); КонецЕсли;
		
		Если Не ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(Заказ, ?(РежимЗаписи, РежимЗаписиДокумента.Запись,РежимЗаписиДокумента.Проведение)) Тогда
			Возврат Ложь; КонецЕсли;
		
		
		//перепроводим корректировки только для документов со старой системой резервирования
		//при новой концепции (когда изменения ТЧ пишутся в заказ) перепроводить смысла нет
		Если Не Заказ.СпособРазмещенияБезЗаказа тогда
			Если НЕ РежимЗаписи Тогда
				
				Запрос = Новый Запрос("
					|ВЫБРАТЬ Ссылка ИЗ Документ.КорректировкаЗаказаПокупателя ГДЕ Заказ = &Заказ
					|ОБЪЕДИНИТЬ ВСЕ
					|ВЫБРАТЬ Ссылка ИЗ Документ.КорректировкаИнтернетЗаказа ГДЕ Заказ = &Заказ
					|");
				Запрос.УстановитьПараметр("Заказ", ЗаказСсылка);
				Выборка = Запрос.Выполнить().Выбрать();
				
				Попытка
					Пока Выборка.Следующий() Цикл
						КорЗаказ = Выборка.Ссылка.ПолучитьОбъект();
						КорЗаказ.Записать(РежимЗаписиДокумента.Проведение);
					КонецЦикла;
				Исключение
					Сообщить("Ошибка сохранения данных: " + ОписаниеОшибки());
					Возврат Ложь;
				КонецПопытки; 
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#область Оплата_заказа

Функция ПроверитьИУстановитьСтатусОплатыЗаказа(Заказ) Экспорт
	
	// Проверим заказ на сколько оплачен в процентном отношении и установим его статус
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ДолгиПоЗаказамОбороты.СуммаПриход Приход,
	                      |	ДолгиПоЗаказамОбороты.СуммаРасход Расход
	                      |ИЗ
	                      |	РегистрНакопления.ДолгиПоЗаказам.Обороты(, , , Заказ = &Заказ) КАК ДолгиПоЗаказамОбороты");
	Запрос.УстановитьПараметр("Заказ", Заказ);
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Запись = РегистрыСведений.ОплатаЗаказов.СоздатьМенеджерЗаписи();
		Запись.Заказ 			= Заказ;
		Запись.ПроцентОплаты 	= ?(Выборка.Приход=0,0,Выборка.Расход / (Выборка.Приход / 100));
		
		Попытка
			
			Запись.Записать();
			
		Исключение
			
			стрОшибки = ОписаниеОшибки();
			ОбщиеФункции.СообщитьТекст("Ошибка при записи состояния оплаты заказа
			|" + стрОшибки);
			Возврат Ложь;
			
		КонецПопытки;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьПроцентОплатыЗаказа(Заказ) Экспорт
	
	Запись = РегистрыСведений.ОплатаЗаказов.СоздатьМенеджерЗаписи();
	Запись.Заказ = Заказ;
	Запись.Прочитать();
	
	Возврат Запись.ПроцентОплаты;
 
КонецФункции

Процедура ЗаполнитьТаблицуДокументаОплаты(ДокументОбъект, ЗаполняемаяСумма = 0, ПервымЗаказ = Неопределено, ПервымОтгрузку = Неопределено) Экспорт
	
	//Процедура не используется
	
	
	//// ПервымЗаказ 		- фильтр по заказу который в первую очередь нужно разносить если есть остаток
	//// ПервымОтгрузку 	- тоже самое только для документа отгрузки
	//
	//ТекстПорядкаДоков = "
	//|" + ?(ПервымОтгрузку = Неопределено,"
	//|	0 ПорядокОтгрузки,","
	//|	ВЫБОР КОГДА ДокументОтгрузки = &ДокументОтгрузки ТОГДА 1 ИНАЧЕ 2 КОНЕЦ КАК ПорядокОтгрузки,
	//|") + "
	//|" + ?(ПервымЗаказ = Неопределено,"
	//|	0 ПорядокЗаказ,","
	//|	ВЫБОР КОГДА Заказ = &Заказ ТОГДА 1 ИНАЧЕ 2 КОНЕЦ КАК ПорядокЗаказ,
	//|") + "
	//|";
	//
	//Запрос = Новый Запрос("
	//|" + ?(ЗаполняемаяСумма,"
	//|ВЫБРАТЬ
	//|	1 Порядок," + ТекстПорядкаДоков + "
	////|	МАКСИМУМ(ЕСТЬNULL(ДокументОтгрузки.Дата, &ТекущаяДата)) Дата,
	//|	МАКСИМУМ(Заказ.Дата) Дата,
	//|	Заказ,                 
	//|	ДокументОтгрузки,
	//|	ВЫБОР КОГДА ДокументОтгрузки <> НЕОПРЕДЕЛЕНО ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ЕстьОтгрузка,
	//|	Сумма(СуммаОстаток) Сумма
	//|ИЗ
	//|	РегистрНакопления.ДолгиПоОтгрузкам.Остатки(" + ?(ДокументОбъект.Проведен, "&Дата","") +",Организация = &Организация И Партнер = &Партнер)
	//|ГДЕ
	//|	СуммаОстаток > 0 И
	//|	СуммаОстаток = &ЗаполняемаяСумма
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	Заказ,
	//|	ДокументОтгрузки,
	//|	ВЫБОР КОГДА ДокументОтгрузки <> НЕОПРЕДЕЛЕНО ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ
	//|                                                                                                                         	
	//|ОБЪЕДИНИТЬ ВСЕ
	//|","") + "
	//|
	//|ВЫБРАТЬ
	//|	2 Порядок," + ТекстПорядкаДоков + "
	////|	МАКСИМУМ(ЕСТЬNULL(ДокументОтгрузки.Дата, &ТекущаяДата)) Дата,
	//|	МАКСИМУМ(Заказ.Дата) Дата,
	//|	Заказ,                 
	//|	ДокументОтгрузки,
	//|	ВЫБОР КОГДА ДокументОтгрузки <> НЕОПРЕДЕЛЕНО ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ ЕстьОтгрузка,
	//|	Сумма(СуммаОстаток) Сумма
	//|ИЗ
	//|	РегистрНакопления.ДолгиПоОтгрузкам.Остатки(" + ?(ДокументОбъект.Проведен, "&Дата","") +",Организация = &Организация И Партнер = &Партнер)
	//|
	//|ГДЕ
	//|	СуммаОстаток > 0
	//|" + ?(ЗаполняемаяСумма,"И СуммаОстаток <> &ЗаполняемаяСумма","") + "
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	Заказ,
	//|	ДокументОтгрузки,
	//|	ВЫБОР КОГДА ДокументОтгрузки <> НЕОПРЕДЕЛЕНО ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ
	//|                                                                                                                         	
	//|УПОРЯДОЧИТЬ ПО
	//|	Порядок, ПорядокОтгрузки, ПорядокЗаказ, ЕстьОтгрузка Убыв
	//|");
	//
	//Запрос.УстановитьПараметр("ЗаполняемаяСумма", 	ЗаполняемаяСумма);
	//Запрос.УстановитьПараметр("Организация", 		ДокументОбъект.Организация);
	//Запрос.УстановитьПараметр("Партнер", 			ДокументОбъект.Партнер);
	////Запрос.УстановитьПараметр("Контрагент", 		ДокументОбъект.Контрагент);
	//Запрос.УстановитьПараметр("Дата", 				ДокументОбъект.Дата);
	//Запрос.УстановитьПараметр("ТекущаяДата",		ТекущаяДата());
	//Запрос.УстановитьПараметр("Заказ", 				ПервымЗаказ);
	//Запрос.УстановитьПараметр("ДокументОтгрузки", 	ПервымОтгрузку);
	//	
	//НужноРазнести = ?(ЗаполняемаяСумма, ЗаполняемаяСумма, 1000000000);
	//ДокументОбъект.РасшифровкаСуммы.Очистить();
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	
	//	Разносим = Мин(Выборка.Сумма, НужноРазнести);
	//	Если Разносим Тогда
	//		
	//		НовСтрока = ДокументОбъект.РасшифровкаСуммы.Добавить();
	//		ЗаполнитьЗначенияСвойств(НовСтрока, Выборка);
	//		НовСтрока.Сумма = Разносим;
	//		
	//		НужноРазнести = НужноРазнести - Разносим;
	//		
	//	КонецЕсли;
	//КонецЦикла;
	//
	//Если НужноРазнести И ЗаполняемаяСумма Тогда
	//	
	//	ДокументОбъект.РасшифровкаСуммы.Добавить().Сумма = НужноРазнести;
	//	
	//КонецЕсли;
	//
	//ДокументОбъект.Сумма = ДокументОбъект.РасшифровкаСуммы.Итог("Сумма");
	
КонецПроцедуры

Процедура РазнестиОплатуАвансовЗаказаПриПроведении(ДвиженияЗаказа, ВыборкаАвансов, Заказ) Экспорт
	
	Если ДвиженияЗаказа.Количество() Тогда
	
		строкаКопия = ДвиженияЗаказа[0];
		Нужно 		= Заказ.Сумма + ?(Заказ.СуммаВключаетНДС, 0, Заказ.Сумма / 100 * КэшируемыеФункции.ПолучитьЧислоТекущейСтавкиНДС());
		
		Пока ВыборкаАвансов.Следующий() Цикл
			
			Списываем = мин(Нужно, ВыборкаАвансов.Сумма);
			Если Списываем Тогда
				
				// закрываем аванс
				
				НовСтрока = ДвиженияЗаказа.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрока, строкаКопия);
				
				НовСтрока.ДокументОтгрузки 	= ВыборкаАвансов.ДокументОтгрузки;
				НовСтрока.Сумма 			= Списываем;
				НовСтрока.Заказ 			= Неопределено;
				
				// показываем оплаченную часть
				
				НовСтрока = ДвиженияЗаказа.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрока, строкаКопия);
				
				НовСтрока.ВидДвижения		= ВидДвиженияНакопления.Расход;
				НовСтрока.ДокументОтгрузки 	= Неопределено;
				НовСтрока.Сумма 			= Списываем;
				НовСтрока.Заказ 			= Заказ;
				
				Нужно = Нужно - Списываем;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Состояния_заказа

Функция УстановитьСостояниеЗаказа(Заказ, Состояние, Дата = Неопределено) Экспорт
	
	Перем ПредПериод;
	
	Если ЗначениеЗаполнено(Заказ) Тогда
		
		// Прочитаем предыдущий период состояния
		
		ПредСостояние = ПолучитьСостояниеЗаказа(Заказ, Дата, ПредПериод);
		
		// Установим новое состояние периода
		
		Запись = РегистрыСведений.СостоянияЗаказов.СоздатьМенеджерЗаписи();
		
		Запись.Автор 			= ПараметрыСеанса.ТекущийПользователь;
		Запись.Заказ 			= Заказ;
		Запись.Период 			= ?(Дата = Неопределено, ТекущаяДата(), Дата);
		Запись.Состояние 		= Состояние;
		Запись.ПредПериод		= ПредПериод;
		Запись.ПредСостояние	= ПредСостояние;
		
		Если Не ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(Запись) Тогда Возврат Ложь КонецЕсли;
		
		// Обновим состояние в журнале заказов
		
		Если Не УстановитьРеквизитЖурнала(Заказ, Новый Структура("Состояние, ДатаПоследнегоСобытия", 
						Состояние, Запись.Период)) Тогда Возврат Ложь КонецЕсли; КонецЕсли;
				
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	// API2  // нужно обновить статус,костыль
	Если ТипЗнч(Заказ) = Тип("ДокументСсылка.ИнтернетЗаказПокупателя") Тогда
	ПараметрыЗаписи = Новый Структура("КомандаHTTP, АдресРесурсаСервера, Очередь, Суффикс, ТелоЗапроса", 
										Перечисления.КомандыHTTP.POST,
										"/api/orders",
										10,
										"update",
										API2.ПолучитьЗаказы(Новый Структура("Ссылка", Заказ)));
	API2.ЗаписатьОбъектВБуферНаИзменениеНаСайте(Заказ, ПараметрыЗаписи,Ложь);
	
	ПараметрыЗаписи = Новый Структура("КомандаHTTP, АдресРесурсаСервера, Очередь, Суффикс, ТелоЗапроса", 
										Перечисления.КомандыHTTP.POST,
										"/api/orders",
										10,
										"update",
										ApiLicota.ПолучитьЗаказы(Новый Структура("Ссылка", Заказ)));
	ApiLicota.ЗаписатьОбъектВБуферНаИзменениеНаСайте(Заказ, ПараметрыЗаписи,Ложь);
	КонецЕсли;
	//////////////////////////////////////////////////////////////////////////////////////////////////////
		
				
				
	Возврат Истина;
	
КонецФункции
Функция ПолучитьСостояниеЗаказаСтрокой_Ст(Заказ, Дата = Неопределено, ПредПериод = Неопределено) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 	ПРЕДСТАВЛЕНИЕ(Состояние) КАК Состояние, Период
	|ИЗ 		РегистрСведений.СостоянияЗаказов.СрезПоследних(" + ?(Дата = Неопределено, "","&Дата") + ",Заказ = &Заказ)
	|");
	
	Запрос.УстановитьПараметр("Заказ",	Заказ);
	Запрос.УстановитьПараметр("Дата", 	Дата);
	
	Выполнение = Запрос.Выполнить();
	Если Выполнение.Пустой() Тогда
		
		ПредПериод = "";
		Возврат "";
		
	Иначе
		
		Выборка = Выполнение.Выбрать();
		Выборка.Следующий();
		
		ПредПериод = Формат(Выборка.Период,"ДЛФ=DDT");
		Возврат Выборка.Состояние;
		
	КонецЕсли;
	
КонецФункции
Функция ПолучитьСостояниеЗаказаСтрокой(Заказ, Дата = Неопределено, ПредПериод = Неопределено) Экспорт
	
	Состояние = ПолучитьСостояниеЗаказа(Заказ, Дата, ПредПериод);
	Возврат ?(Состояние.Пустая(), "",  Строка(Состояние));
	
КонецФункции
Функция ПолучитьСостояниеЗаказа(Заказ, Дата = Неопределено, ПредПериод = Неопределено) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 	Состояние, Период
	|ИЗ 		РегистрСведений.СостоянияЗаказов.СрезПоследних(" + ?(Дата = Неопределено, "","&Дата") + ",Заказ = &Заказ)
	|");
	
	Запрос.УстановитьПараметр("Заказ",	Заказ);
	Запрос.УстановитьПараметр("Дата", 	Дата);
	
	Выполнение = Запрос.Выполнить();
	Если Выполнение.Пустой() Тогда
		
		ПредПериод = '00010101';
		Возврат Перечисления.СостоянияЗаказа.ПустаяСсылка();
		
	Иначе
		
		Выборка = Выполнение.Выбрать();
		Выборка.Следующий();
		ПредПериод = Выборка.Период;
		Возврат Выборка.Состояние;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьМассивСостоянийЗаказовУчаствующихВОчереде() Экспорт
	
	Состояния = Новый Массив;
	
	Состояния.Добавить(Перечисления.СостоянияЗаказа.ВОчередиНаСборку);
	Состояния.Добавить(Перечисления.СостоянияЗаказа.ВОчередиНаСклад);
	Состояния.Добавить(Перечисления.СостоянияЗаказа.ВОчередиНаСкладПовторно);
	Состояния.Добавить(Перечисления.СостоянияЗаказа.ОжидаетПеремещения);
	Состояния.Добавить(Перечисления.СостоянияЗаказа.Перемещается);
	Состояния.Добавить(Перечисления.СостоянияЗаказа.Собирается);
	Состояния.Добавить(Перечисления.СостоянияЗаказа.ВРаботе);
	Состояния.Добавить(Перечисления.СостоянияЗаказа.Открыт);
	
	Возврат Состояния;
	
КонецФункции

Функция ЗаказЧастичноСобран(БПСборкаСсылка, ДатаСостояния = Неопределено) Экспорт
	
	Товары 		= ПолучитьСостояниеТоваров(БПСборкаСсылка, ДатаСостояния);
	КолСобрано 	= Товары.НайтиСтроки(Новый Структура("Состояние", Перечисления.СостояниеСборкиЗаказа.Собрано)).Количество();
	
	//+Андриянов 10.05.2017
	//Как временное решение, если собрано 0, то пусть лучше будет частично собран, чем просто собран
	//Возврат КолСобрано <> 0 И Товары.Количество() <> КолСобрано;
	Возврат Товары.Количество() <> КолСобрано;
	//-Андриянов
	
КонецФункции

Функция ЗаказБылВСборке(БПСборкаСсылка) Экспорт
	
	Товары 		= ПолучитьСостояниеТоваров(БПСборкаСсылка);
	КолСобрано 	= Товары.НайтиСтроки(Новый Структура("Состояние", Перечисления.СостояниеСборкиЗаказа.Собрано)).Количество();
	
	Возврат КолСобрано <> 0 И Товары.Количество() <> КолСобрано;
	
КонецФункции

Функция ЗаказПолностьюСобран(БПСборкаСсылка,Размещение) Экспорт
	Товары 		= ПолучитьСостояниеТоваров(БПСборкаСсылка);
	КолСобрано 	= Товары.НайтиСтроки(Новый Структура("Состояние,Размещение", Перечисления.СостояниеСборкиЗаказа.Собрано,Размещение)).Количество();
	
	Возврат КолСобрано > 0 И Товары.Количество() = КолСобрано;
КонецФункции

Функция УстановитьСостояниеЗаказовПоставщикуПриПроведении(Товары, ИмяЗаказ = "Заказ") Экспорт
	
	масЗаказы = Новый Массив;
	Для Каждого Строка Из Товары Цикл Если ЗначениеЗаполнено(Строка[ИмяЗаказ]) И масЗаказы.Найти(Строка[ИмяЗаказ]) = Неопределено Тогда масЗаказы.Добавить(Строка[ИмяЗаказ]); КонецЕсли; КонецЦикла;
	
	Если 	масЗаказы.Количество() И
			Не Документы.ЗаказПоставщику.УстановитьСостояния(масЗаказы) Тогда
		Возврат Ложь; КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ВсеТоварыОтгружаются(Заказ) Экспорт
	мСостояний = Новый Массив;
	мСостояний.Добавить(Перечисления.СостояниеСборкиЗаказа.Отгружен);
	мСостояний.Добавить(Перечисления.СостояниеСборкиЗаказа.Отправлен);
	мСостояний.Добавить(Перечисления.СостояниеСборкиЗаказа.Доставлен);
	мСостояний.Добавить(Перечисления.СостояниеСборкиЗаказа.Возвращено);
	Товары 		= ПолучитьСостояниеТоваров(Заказ);
	Для Каждого ТекСостояние Из мСостояний Цикл
		Если Товары.НайтиСтроки(Новый Структура("Состояние", ТекСостояние)).Количество() = Товары.Количество() Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции
#КонецОбласти

#Область Состояния_докумета_отгрузки
Функция УстановитьСостояниеДокументаОтгрузки(ДокументОтгрузки,Состояние) Экспорт
	Запись = РегистрыСведений.СостоянияДокументовОтгрузки.СоздатьМенеджерЗаписи();
	Запись.Период 					= ТекущаяДата();
	Запись.ДокументОтгрузки 		= ДокументОтгрузки;
	Запись.Состояние 				= Перечисления.СостоянияЗаказа[Состояние];
	Запись.СостояниеСборкиЗаказа 	= Перечисления.СостояниеСборкиЗаказа[Состояние];
	Если Не ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(Запись) Тогда Возврат Ложь КонецЕсли;
	Возврат Истина;
КонецФункции

Функция ПолучитьСостояниеДокументаОтгрузки(ДокументОтгрузки) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	СостоянияДокументовОтгрузкиСрезПоследних.Состояние
	                      |ИЗ
	                      |	РегистрСведений.СостоянияДокументовОтгрузки.СрезПоследних(, ДокументОтгрузки = &ДокументОтгрузки) КАК СостоянияДокументовОтгрузкиСрезПоследних");
	Запрос.УстановитьПараметр("ДокументОтгрузки",ДокументОтгрузки);
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.Состояние;
	Иначе
		Возврат Перечисления.СостоянияЗаказа.ПустаяСсылка();
	КонецЕсли;
КонецФункции
#КонецОбласти

#Область Размещение

Процедура ИзменитьКоличествоРезерваПоПорядкуСкладов(текСклад, РазмещениеТоваров, ТекДанные) Экспорт
	
	// Изменяет количество в таблице резерва на требуемое количество
	
	Отбор 				= Новый Структура("Размещение", текСклад);
	СпособРазмещения 	= Новый Структура("Склады, ЗаказыПоставщикам, ОчиститьРазмещение", Истина, Ложь, Ложь);
			
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Номенклатура", 		Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТЗ.Колонки.Добавить("Количество", 			Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("КоличествоМинимум", 	Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("КоличествоОтгружено", 	Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("КоличествоСобрано", 	Новый ОписаниеТипов("Число"));
	ЗаполнитьЗначенияСвойств(Тз.Добавить(), ТекДанные);
	
	ТЗРазм = Новый ТаблицаЗначений;
	ТЗРазм.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТЗРазм.Колонки.Добавить("Размещение", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТЗРазм.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ТЗРазм.Колонки.Добавить("КоличествоМинимум", Новый ОписаниеТипов("Число"));
	КонвертацияТипов.ДобавитьТаблицуКДругойТаблице(ТЗРазм, РазмещениеТоваров);
	
	Разм = КонвертацияТипов.ПолучитьТаблицуИзНайденныхСтрокТаблицыЗначений(ТЗРазм, Отбор);
	ПроставитьРазмещениеВТаблицеТоваров(ТЗ, текСклад,,,,СпособРазмещения, Истина, Разм, Истина);
			
	// Теперь заполним результат
			
	КонвертацияТипов.УдалитьСтрокиТЗ(РазмещениеТоваров, Отбор);
	КонвертацияТипов.ДобавитьТаблицуКДругойТаблице(РазмещениеТоваров, Разм);
	
КонецПроцедуры

Функция ПроставитьРазмещениеВТаблицеТоваровПоСкладам(ТоварыТЗ, СкладИлиМассивОчередностиСкладов = Неопределено, Дата = Неопределено, ДокументРезерва = Неопределено, ИмяКолонкиРазмещение = "Размещение", СвойРезервВПриоритете = Истина)
	
	// Проставляет размещение,
	// 	если не везде проставит то вернет ЛОЖЬ
	//	если везде проставит то вернет ИСТИНА
	//
	// СкладИлиМассивОчередностиСкладов - массив складов в которой последовательности 
	//		 нужно резервировать склады, можно указать только склад (тип спр.ссылка) тогда 
	// 		последовательность будет сперва тек склад потом как бог на душу даст
	//
	//	Если есть документ резерва тогда такие записи будут первоочередны а потом уже остальной порядок
	//		Однако, читать дальше
	// 	СвойРезервВПриоритете - если стоит ДокументРезерва то не смотря на очередь вперед 
	//							будет резервироваться на текущем складе резерва

	
	
	ВсеРазмещено 		= Истина;
	ЕстьДокументРезерва = ДокументРезерва <> Неопределено;
	
	// Скопируем таблицу
	
	КопияТоваров = ТоварыТЗ.Скопировать();
	ТоварыТЗ.Очистить();
	
	// Определимся со складами
	
	Склады = Новый ТаблицаЗначений;
	Склады.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	Склады.Колонки.Добавить("Номер", Новый ОписаниеТипов("Число"));
	
	Если 	ТипЗнч(СкладИлиМассивОчередностиСкладов) = Тип("СправочникСсылка.Склады") И
			Не СкладИлиМассивОчередностиСкладов.Пустая() Тогда
			
		НовСтрока = Склады.Добавить();
		НовСтрока.Склад 	= СкладИлиМассивОчередностиСкладов;
		НовСтрока.Номер 	= 1;
		ПорядокПоСкладам 	= Истина;
		
		// Добавим остальные
		
		//Запрос = Новый Запрос("ВЫБРАТь Ссылка Склад ИЗ Справочник.Склады ГДЕ Ссылка <> &Склад И ПометкаУдаления = ЛОЖЬ");
		Запрос = Новый Запрос("ВЫБРАТь Склад ИЗ Справочник.Склады.ПорядокРазмещения ГДЕ Ссылка = &Склад УПОРЯДОЧИТЬ ПО НомерСтроки");
		Запрос.УстановитьПараметр("Склад", СкладИлиМассивОчередностиСкладов);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Ном = 1;
		Пока Выборка.Следующий() Цикл Ном = Ном + 1;
			НовСтрока = Склады.Добавить();
			НовСтрока.Склад 	= Выборка.Склад;
			НовСтрока.Номер 	= Ном;
		КонецЦикла;
		
	ИначеЕсли СкладИлиМассивОчередностиСкладов = Неопределено Тогда
		
		ПорядокПоСкладам = Ложь;
		
	ИначеЕсли ТипЗнч(СкладИлиМассивОчередностиСкладов) = Тип("Массив") Тогда
		
		ПорядокПоСкладам = Истина;
		
		Ном = 0;
		Для Каждого Склад Из СкладИлиМассивОчередностиСкладов Цикл Ном = Ном + 1;
			НовСтрока = Склады.Добавить();
			НовСтрока.Склад = Склад;
			НовСтрока.Номер = Ном;
		КонецЦикла;
		
	Иначе
		
		ОбщиеФункции.СообщитьТекст("Не определен склад для размещения");
		Возврат Ложь;
		
	КонецЕсли;
	
	// Запрос к остаткам
	
	Если ПорядокПоСкладам Тогда
		
		ТекстПриоритета = ?(СвойРезервВПриоритете,
					"ВЫБОР КОГДА текРез.Номенклатура ЕСТЬ NULL ТОГДА ЕСТЬNULL(Скл.Номер, 1000) ИНАЧЕ 0 КОНЕЦ",
					"ЕСТЬNULL(Скл.Номер, 1000)") + " Номер";
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ	ЕСТЬNULL(Скл.Номер,100) Номер, Скл.Склад
		|ПОМЕСТИТЬ	Склады
		|ИЗ			&Склады Скл;
		|
		|ВЫБРАТЬ
		|	Ост.Склад 												Склад,
		|	Ост.Номенклатура 										Номенклатура,
		|" + ?(ЕстьДокументРезерва, ТекстПриоритета + ",
		|		Ост.КоличествоОстаток - ЕСТЬNULL(Рез.Количество, 0) + ЕСТЬNULL(текРез.Количество, 0) Количество
		|","
		|		ЕСТЬNULL(Скл.Номер, 1000)								Номер,
		|		NULL													ДокументРезерва,
		|		Ост.КоличествоОстаток - ЕСТЬNULL(Рез.Количество, 0) 	Количество
		|") + "
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Остатки(" + ?(Дата = Неопределено,"","&Дата") + ",Номенклатура В(&МассивНоменклатуры)) Ост
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	(	ВЫБРАТЬ Размещение Склад, Номенклатура, КоличествоОстаток Количество
		|		ИЗ 		РегистрНакопления.ТоварыВРезерве.Остатки(" + ?(Дата = Неопределено,"","&Дата") + ",Номенклатура В(&МассивНоменклатуры))
		|		ГДЕ 	КоличествоОстаток  > 0
		|	) Рез
		|ПО
		|	Ост.Склад 			= Рез.Склад И
		|	Ост.Номенклатура 	= Рез.Номенклатура
		|" + ?(ЕстьДокументРезерва,"
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	(	ВЫБРАТЬ Размещение Склад, Номенклатура, КоличествоОстаток Количество
		|		ИЗ 		РегистрНакопления.ТоварыВРезерве.Остатки(" + ?(Дата = Неопределено,"","&Дата") + ",ДокументРезерва = &ДокументРезерва И Номенклатура В(&МассивНоменклатуры))
		|		ГДЕ 	КоличествоОстаток  > 0
		|	) текРез
		|ПО
		|	Ост.Склад 			= текРез.Склад И
		|	Ост.Номенклатура 	= текРез.Номенклатура
		|","") + "
		|
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	Склады Скл
		|ПО
		|	Скл.Склад = Ост.Склад
		|
		|ГДЕ
		|" + ?(ЕстьДокументРезерва,"
		|	Ост.КоличествоОстаток - ЕСТЬNULL(Рез.Количество, 0) + ЕСТЬNULL(текРез.Количество, 0) > 0
		|","
		|	Ост.КоличествоОстаток - ЕСТЬNULL(Рез.Количество, 0) > 0
		|") + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура,
		|	Номер
		|");
		
	Иначе
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Ост.Склад 												Склад,
		|	Ост.Номенклатура 										Номенклатура,
		|" + ?(ЕстьДокументРезерва,"
		|		ВЫБОР КОГДА текРез.Номенклатура ЕСТЬ NULL ТОГДА 1 ИНАЧЕ 0 КОНЕЦ Номер,
		|		Ост.КоличествоОстаток - ЕСТЬNULL(Рез.Количество, 0) + ЕСТЬNULL(текРез.Количество, 0) Количество
		|","
		|		0														Номер,
		|		NULL													ДокументРезерва,
		|		Ост.КоличествоОстаток - ЕСТЬNULL(Рез.Количество, 0) 	Количество
		|") + "
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Остатки(" + ?(Дата = Неопределено,"","&Дата") + ",Номенклатура В(&МассивНоменклатуры)) Ост
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	(	ВЫБРАТЬ Размещение Склад, Номенклатура, КоличествоОстаток Количество
		|		ИЗ 		РегистрНакопления.ТоварыВРезерве.Остатки(" + ?(Дата = Неопределено,"","&Дата") + ",Номенклатура В(&МассивНоменклатуры))
		|		ГДЕ 	КоличествоОстаток  > 0
		|	) Рез
		|ПО
		|	Ост.Склад 			= Рез.Склад И
		|	Ост.Номенклатура 	= Рез.Номенклатура
		|
		|" + ?(ЕстьДокументРезерва,"
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	(	ВЫБРАТЬ Размещение Склад, Номенклатура, КоличествоОстаток Количество
		|		ИЗ 		РегистрНакопления.ТоварыВРезерве.Остатки(" + ?(Дата = Неопределено,"","&Дата") + ",ДокументРезерва = &ДокументРезерва И Номенклатура В(&МассивНоменклатуры))
		|		ГДЕ 	КоличествоОстаток  > 0
		|	) текРез
		|ПО
		|	Ост.Склад 			= текРез.Склад И
		|	Ост.Номенклатура 	= текРез.Номенклатура
		|","") + "
        |
		|ГДЕ
		|" + ?(ЕстьДокументРезерва,"
		|	Ост.КоличествоОстаток - ЕСТЬNULL(Рез.Количество, 0) + ЕСТЬNULL(текРез.Количество, 0) > 0
		|","
		|	Ост.КоличествоОстаток - ЕСТЬNULL(Рез.Количество, 0) > 0
		|") + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура,
		|	Номер
		|");
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивНоменклатуры", КопияТоваров.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("Дата", 				Дата);
	Запрос.УстановитьПараметр("ДокументРезерва",	ДокументРезерва);
	Запрос.УстановитьПараметр("Склады", 			Склады);
	
	ТаблицаОстатков = Запрос.Выполнить().Выгрузить();
	
	ОтданныеТовары 	= Новый ТаблицаЗначений;
	ОтданныеТовары.Колонки.Добавить("Склад", 		Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ОтданныеТовары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ОтданныеТовары.Колонки.Добавить("Количество", 	Новый ОписаниеТипов("Число"));
	
	Для Каждого Строка Из КопияТоваров Цикл
		
		Если ЗначениеЗаполнено(Строка.Размещение) Тогда
			
			НовСтрока = ТоварыТЗ.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
			
			// Добавим типа отдали уже
			СтрокиОтданных 	= ОтданныеТовары.НайтиСтроки(Новый Структура("Склад, Номенклатура", Строка[ИмяКолонкиРазмещение], Строка.Номенклатура));
			
			Если СтрокиОтданных.Количество() Тогда
				СтрокиОтданных[0].Количество = СтрокиОтданных[0].Количество + Строка.Количество;
			Иначе
				НовСтрокаОтданного = ОтданныеТовары.Добавить();
				НовСтрокаОтданного.Склад 		= Строка[ИмяКолонкиРазмещение];
				НовСтрокаОтданного.Номенклатура = Строка.Номенклатура;
				НовСтрокаОтданного.Количество 	= Строка.Количество;
			КонецЕсли;
			
		Иначе
		
			НужноРазместить = Строка.Количество;
			Остатки = ТаблицаОстатков.НайтиСтроки(Новый Структура("Номенклатура", Строка.Номенклатура));
			
			Для Каждого СтрокаОстатка Из Остатки Цикл
				
				// Узнаем мож че уже отдали
				
				СтрокиОтданных 	= ОтданныеТовары.НайтиСтроки(Новый Структура("Склад, Номенклатура", СтрокаОстатка.Склад, Строка.Номенклатура));
				УжеОтдавали 	= ?(СтрокиОтданных.Количество(), СтрокиОтданных[0].Количество,0);
				
				// Определим скоко отдадим
				
				МожноОтдать = СтрокаОстатка.Количество;
				Отдаем 		= Мин(МожноОтдать - УжеОтдавали, НужноРазместить);
				
				Если Отдаем Тогда
					
					// Запомним скоко отдали
				
					Если УжеОтдавали Тогда
						СтрокиОтданных[0].Количество = УжеОтдавали + Отдаем;
					Иначе
						НовСтрокаОтданного = ОтданныеТовары.Добавить();
						НовСтрокаОтданного.Склад 		= СтрокаОстатка.Склад;
						НовСтрокаОтданного.Номенклатура = СтрокаОстатка.Номенклатура;
						НовСтрокаОтданного.Количество 	= Отдаем;
					КонецЕсли;
					
					//Заполним итоговую таблицу
					
					НовСтрока = ТоварыТЗ.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
					
					// Заполним че отдаем
					
					НовСтрока.Количество 			= Отдаем;
					НовСтрока[ИмяКолонкиРазмещение] = СтрокаОстатка.Склад;
					
					// Сбросим переменные
					
					Строка.Количество 	= Строка.Количество - Отдаем;
					НужноРазместить 	= НужноРазместить - Отдаем;
					
				КонецЕсли;
				
				Если Не НужноРазместить Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			// Добавим пустую строку если не удалось
			
			Если НужноРазместить Тогда
				
				ВсеРазмещено = Ложь;
				
				НовСтрока = ТоварыТЗ.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
				НовСтрока.Количество = НужноРазместить;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВсеРазмещено;
	
КонецФункции
Функция ПроставитьРазмещениеВТаблицеТоваровПоЗаказамПоставщику_Ст(ТоварыТЗ, Дата = Неопределено, ЗаказПокупателя = Неопределено, ИмяКолонкиРазмещение = "Размещение")
	
	// Проставляет размещение,
	// 	если не везде проставит то вернет ЛОЖЬ
	//	если везде проставит то вернет ИСТИНА
	//
	//	Если есть документ резерва тогда такие записи будут первоочередны а потом уже остальной порядок
	
	
	ВсеРазмещено 		= Истина;
	ЕстьЗаказПокупателя = ЗаказПокупателя <> Неопределено;
	
	// Скопируем таблицу
	
	КопияТоваров = ТоварыТЗ.Скопировать();
	ТоварыТЗ.Очистить();
	
	// Запрос к остаткам
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|" + ?(ЕстьЗаказПокупателя,"
	|	ЕСТЬNULL(текРез.Порядок, 0)
	|","
	|	0
	|") + " КАК Порядок,
	|	Ост.Номенклатура,
	|	Ост.Упаковка,
	|	Ост.ЗаказПоставщику,
	|	Ост.КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.РазмещениеЗаказов.Остатки(" + ?(Дата = Неопределено,"","&Дата") + ",Номенклатура В(&МассивНоменклатуры)) Ост
	|
	|" + ?(ЕстьЗаказПокупателя,"
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(	ВЫБРАТЬ 1 КАК Порядок, Номенклатура, Упаковка, ЗаказПоставщику, КоличествоОстаток Количество
	|		ИЗ 		РегистрНакопления.РазмещениеЗаказов.Остатки(" + ?(Дата = Неопределено,"","&Дата") + ",ЗаказПокупателя = &ЗаказПокупателя И Номенклатура В(&МассивНоменклатуры))
	|		ГДЕ 	КоличествоОстаток  > 0
	|	) текРез
	|ПО
	|	Ост.ЗаказПоставщику = текРез.ЗаказПоставщику И
	|	Ост.Номенклатура 	= текРез.Номенклатура И
	|	Ост.Упаковка 		= текРез.Упаковка
	|","") + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	Порядок
	|");
	
	Запрос.УстановитьПараметр("МассивНоменклатуры", КопияТоваров.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("Дата", 				Дата);
	Запрос.УстановитьПараметр("ЗаказПокупателя",	ЗаказПокупателя);
	
	ТаблицаОстатков = Запрос.Выполнить().Выгрузить();
	
	ОтданныеТовары 	= Новый ТаблицаЗначений;
	ОтданныеТовары.Колонки.Добавить("Упаковка", 	Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	ОтданныеТовары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ОтданныеТовары.Колонки.Добавить("ЗаказПоставщику", Новый ОписаниеТипов("ДокументСсылка.ЗаказПоставщику"));
	ОтданныеТовары.Колонки.Добавить("Количество", 	Новый ОписаниеТипов("Число"));
	
	Для Каждого Строка Из КопияТоваров Цикл
		
		Если ЗначениеЗаполнено(Строка.Размещение) Тогда
			
			// Просто заполняем выходную таблицу тем что есть
			
			НовСтрока = ТоварыТЗ.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
			
		Иначе
			
			НужноРазместить = Строка.Количество;
			Остатки = ТаблицаОстатков.НайтиСтроки(Новый Структура("Номенклатура, Упаковка", 
														Строка.Номенклатура, Строка.Упаковка));
			Для Каждого СтрокаОстатка Из Остатки Цикл
				
				// Узнаем мож че уже отдали
				
				СтрокиОтданных 	= ОтданныеТовары.НайтиСтроки(Новый Структура("Номенклатура, Упаковка, ЗаказПоставщику", 
													Строка.Номенклатура, СтрокаОстатка.ЗаказПоставщику ,СтрокаОстатка.Упаковка));
				УжеОтдавали 	= ?(СтрокиОтданных.Количество(), СтрокиОтданных[0].Количество, 0);
				
				// Определим скоко отдадим
				
				МожноОтдать = СтрокаОстатка.Количество;
				Отдаем 		= Мин(МожноОтдать - УжеОтдавали, НужноРазместить);
				
				Если Отдаем Тогда
					
					// Запомним скоко отдали
				
					Если УжеОтдавали Тогда
						
						СтрокиОтданных[0].Количество = УжеОтдавали + Отдаем;
						
					Иначе
						
						НовСтрокаОтданного = ОтданныеТовары.Добавить();
						НовСтрокаОтданного.Упаковка 	= СтрокаОстатка.Упаковка;
						НовСтрокаОтданного.Номенклатура = СтрокаОстатка.Номенклатура;
						НовСтрокаОтданного.Количество 	= Отдаем;
						
					КонецЕсли;
					
					//Заполним итоговую таблицу
					
					НовСтрока = ТоварыТЗ.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
					
					// Заполним че отдаем
					
					НовСтрока.Количество 			= Отдаем;
					НовСтрока[ИмяКолонкиРазмещение] = СтрокаОстатка.ЗаказПоставщику;
					
					// Сбросим переменные
					
					Строка.Количество 	= Строка.Количество - Отдаем;
					НужноРазместить 	= НужноРазместить - Отдаем;
					
				КонецЕсли;
				
				Если Не НужноРазместить Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
		
			// Добавим пустую строку если не удалось
		
			Если НужноРазместить Тогда
			
				ВсеРазмещено = Ложь;
				
				НовСтрока = ТоварыТЗ.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
				НовСтрока.Количество = НужноРазместить;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВсеРазмещено;
	
КонецФункции
Функция ПроставитьРазмещениеВТаблицеТоваровПоЗаказамПоставщику_Ст2(ТоварыТЗ, Дата = Неопределено, ЗаказПокупателя = Неопределено, ИмяКолонкиРазмещение = "Размещение")
	
	// Проставляет размещение,
	// 	если не везде проставит то вернет ЛОЖЬ
	//	если везде проставит то вернет ИСТИНА
	//
	//	Если есть документ резерва тогда такие записи будут первоочередны а потом уже остальной порядок
	
	
	ВсеРазмещено 		= Истина;
	ЕстьЗаказПокупателя = ЗаказПокупателя <> Неопределено;
	
	// Скопируем таблицу
	
	КопияТоваров = ТоварыТЗ.Скопировать();
	ТоварыТЗ.Очистить();
	
	// Запрос к остаткам
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|" + ?(ЕстьЗаказПокупателя,"
	|	ЕСТЬNULL(текРез.Порядок, 0)
	|","
	|	0
	|") + " КАК Порядок,
	|	Ост.Номенклатура,
	|	Ост.Упаковка,
	|	Ост.ЗаказПоставщику,
	|	Ост.КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(" + ?(Дата = Неопределено,"","&Дата") + ",Номенклатура В(&МассивНоменклатуры)) Ост
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.РазмещениеЗаказов.Остатки(" + ?(Дата = Неопределено,"","&Дата") + ",Номенклатура В(&МассивНоменклатуры)) Рез
	|ПО
	|	Ост.ЗаказПоставщику = текРез.ЗаказПоставщику И
	|	Ост.Номенклатура 	= текРез.Номенклатура И
	|	Ост.Упаковка 		= текРез.Упаковка	
	|
	|" + ?(ЕстьЗаказПокупателя,"
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(	ВЫБРАТЬ 1 КАК Порядок, Номенклатура, Упаковка, ЗаказПоставщику, КоличествоОстаток Количество
	|		ИЗ 		РегистрНакопления.РазмещениеЗаказов.Остатки(" + ?(Дата = Неопределено,"","&Дата") + ",ЗаказПокупателя = &ЗаказПокупателя И Номенклатура В(&МассивНоменклатуры))
	|		ГДЕ 	КоличествоОстаток  > 0
	|	) текРез
	|ПО
	|	Ост.ЗаказПоставщику = текРез.ЗаказПоставщику И
	|	Ост.Номенклатура 	= текРез.Номенклатура И
	|	Ост.Упаковка 		= текРез.Упаковка
	|","") + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	Порядок
	|");
	
	Запрос.УстановитьПараметр("МассивНоменклатуры", КопияТоваров.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("Дата", 				Дата);
	Запрос.УстановитьПараметр("ЗаказПокупателя",	ЗаказПокупателя);
	
	ТаблицаОстатков = Запрос.Выполнить().Выгрузить();
	
	ОтданныеТовары 	= Новый ТаблицаЗначений;
	ОтданныеТовары.Колонки.Добавить("Упаковка", 	Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	ОтданныеТовары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ОтданныеТовары.Колонки.Добавить("ЗаказПоставщику", Новый ОписаниеТипов("ДокументСсылка.ЗаказПоставщику"));
	ОтданныеТовары.Колонки.Добавить("Количество", 	Новый ОписаниеТипов("Число"));
	
	Для Каждого Строка Из КопияТоваров Цикл
		
		Если ЗначениеЗаполнено(Строка.Размещение) Тогда
			
			// Просто заполняем выходную таблицу тем что есть
			
			НовСтрока = ТоварыТЗ.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
			
		Иначе
			
			НужноРазместить = Строка.Количество;
			Остатки = ТаблицаОстатков.НайтиСтроки(Новый Структура("Номенклатура, Упаковка", 
														Строка.Номенклатура, Строка.Упаковка));
			Для Каждого СтрокаОстатка Из Остатки Цикл
				
				// Узнаем мож че уже отдали
				
				СтрокиОтданных 	= ОтданныеТовары.НайтиСтроки(Новый Структура("Номенклатура, Упаковка, ЗаказПоставщику", 
													Строка.Номенклатура, СтрокаОстатка.ЗаказПоставщику ,СтрокаОстатка.Упаковка));
				УжеОтдавали 	= ?(СтрокиОтданных.Количество(), СтрокиОтданных[0].Количество, 0);
				
				// Определим скоко отдадим
				
				МожноОтдать = СтрокаОстатка.Количество;
				Отдаем 		= Мин(МожноОтдать - УжеОтдавали, НужноРазместить);
				
				Если Отдаем Тогда
					
					// Запомним скоко отдали
				
					Если УжеОтдавали Тогда
						
						СтрокиОтданных[0].Количество = УжеОтдавали + Отдаем;
						
					Иначе
						
						НовСтрокаОтданного = ОтданныеТовары.Добавить();
						НовСтрокаОтданного.Упаковка 	= СтрокаОстатка.Упаковка;
						НовСтрокаОтданного.Номенклатура = СтрокаОстатка.Номенклатура;
						НовСтрокаОтданного.Количество 	= Отдаем;
						
					КонецЕсли;
					
					//Заполним итоговую таблицу
					
					НовСтрока = ТоварыТЗ.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
					
					// Заполним че отдаем
					
					НовСтрока.Количество 			= Отдаем;
					НовСтрока[ИмяКолонкиРазмещение] = СтрокаОстатка.ЗаказПоставщику;
					
					// Сбросим переменные
					
					Строка.Количество 	= Строка.Количество - Отдаем;
					НужноРазместить 	= НужноРазместить - Отдаем;
					
				КонецЕсли;
				
				Если Не НужноРазместить Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
		
			// Добавим пустую строку если не удалось
		
			Если НужноРазместить Тогда
			
				ВсеРазмещено = Ложь;
				
				НовСтрока = ТоварыТЗ.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
				НовСтрока.Количество = НужноРазместить;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВсеРазмещено;
	
КонецФункции
Функция ПроставитьРазмещениеВТаблицеТоваровПоЗаказамПоставщику(ТоварыТЗ, Дата = Неопределено, Заказ = Неопределено, ИмяКолонкиРазмещение = "Размещение")
	
	// Проставляет размещение,
	// 	если не везде проставит то вернет ЛОЖЬ
	//	если везде проставит то вернет ИСТИНА
	//
	//	Если есть документ резерва тогда такие записи будут первоочередны а потом уже остальной порядок
	
	
	ЕстьЗаказ = Заказ <> Неопределено;
	
	// Скопируем таблицу
	
	КопияТоваров = ТоварыТЗ.Скопировать();
	ТоварыТЗ.Очистить();
	
	// Запрос к остаткам
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Номенклатура,
	|	МИНИМУМ(Очередь) Очередь
	|ИЗ
	|(
	|	ВЫБРАТЬ
	|		Ост.Номенклатура,
	|		МАКСИМУМ(Ост.Очередь) Очередь
	|	ИЗ 
	|		РегистрНакопления.РазмещениеЗаказов.Остатки(" + ?(Дата = Неопределено,"","&Дата") + ",Номенклатура В(&МассивНоменклатуры)) Ост
	|
	|	СГРУППИРОВАТЬ ПО
	|		Ост.Номенклатура
	|
	|" + ?(ЕстьЗаказ,"
	|
	|	ОБЪЕДИНИТЬ
	|
	|	ВЫБРАТЬ
	|		Ост.Номенклатура,
	|		МАКСИМУМ(Ост.Очередь) Очередь
	|	ИЗ
	|		РегистрНакопления.РазмещениеЗаказов.Остатки(" + ?(Дата = Неопределено,"","&Дата") + ",Заказ = &Заказ И Номенклатура В(&МассивНоменклатуры)) Ост
	|
	|	СГРУППИРОВАТЬ ПО
	|		Ост.Номенклатура
	|","") + "
	|) Запрос
	|
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура	
	|");
	
	Запрос.УстановитьПараметр("МассивНоменклатуры", КопияТоваров.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("Дата", 				Дата);
	Запрос.УстановитьПараметр("Заказ",				Заказ);
	
	ТаблицаОстатков = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Строка Из КопияТоваров Цикл
		
		НовСтрока = ТоварыТЗ.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
		
		Если Не ЗначениеЗаполнено(Строка.Размещение) Тогда
			
			СтрокаОстатка 			= ТаблицаОстатков.Найти(Строка.Номенклатура, "Номенклатура");
			НовСтрока.Размещение 	= ?(СтрокаОстатка = Неопределено, 0, СтрокаОстатка.Очередь) + 1;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции
Процедура ПроставитьРазмещениеВТаблицеТоваров(
				ТоварыТЗ, 
				СкладИлиМассивОчередностиСкладов 	= Неопределено, 
				Дата 								= Неопределено, 
				ДокументРезерва 					= Неопределено, 
				ИмяКолонкиРазмещение 				= "Размещение",
				СпособРазмещения					= Неопределено,
				СвойРезервВПриоритете				= Истина,
				РазмещениеТоваров					= Неопределено,
				ЕстьКоличествоОтгружено				= Ложь) Экспорт
				
	// СпособРазмещения - можно посмотреть какие значения в общей форме "ДиалогРазмещения"
	
	// СвойРезервВПриоритете - если стоит ДокументРезерва то не смотря на очередь вперед 
	//							будет резервироваться на текущем складе резерва
	//
	// РазмещениеТоваров - если заполнено значит размещаем в таблице по новому (отдельно)
	
	ЭтоРазмещениеБезЗаказа = РазмещениеТоваров <> Неопределено;
	
	Если ЭтоРазмещениеБезЗаказа Тогда
		
		// Запомним минимальное количество товара
		
		НачТаблица = ?(ТипЗнч(РазмещениеТоваров) = Тип("ТаблицаЗначений"), РазмещениеТоваров.Скопировать(), РазмещениеТоваров.Выгрузить());
		СвТаблицаРазмещений = НачТаблица.Скопировать();
		КонвертацияТипов.УдалитьСтрокиТЗ(НачТаблица, Новый Структура("КоличествоМинимум", 0));
		
		Если СпособРазмещения.ОчиститьРазмещение Тогда
			
			// Сформируем таблицу по тем товарам которые указаны в основной таблице заказа
		
			КолСтрок = РазмещениеТоваров.Количество(); Инд = КолСтрок; // сперва удалим все строки связанные с товаром
			Для Ном = 1 По КолСтрок Цикл Инд = Инд - 1; Строка = РазмещениеТоваров[Инд]; Если ТоварыТЗ.НайтиСтроки(Новый Структура("Номенклатура", Строка.Номенклатура)).Количество() Тогда РазмещениеТоваров.Удалить(Строка); КонецЕсли; КонецЦикла;
		
			// Затем добавим пустые строки
			Для Каждого Строка Из ТоварыТЗ Цикл НовСтрока = РазмещениеТоваров.Добавить(); ЗаполнитьЗначенияСвойств(НовСтрока, Строка); НовСтрока.КоличествоМинимум = НовСтрока.КоличествоМинимум - Строка.КоличествоОтгружено - Строка.КоличествоСобрано; КонецЦикла;
			
		Иначе	// Подставим размещения в строки
			
			// Добавим те строки которые не упоминаются в размещении
			
			//Для Каждого Строка Из ТоварыТЗ Цикл
			//	
			//	строкиРазмещений = РазмещениеТоваров.НайтиСтроки(Новый Структура("Номенклатура", Строка.Номенклатура));
			//	Добавить = Строка.Количество;
			//	Для Каждого СтрокаРазмещения Из строкиРазмещений Цикл
			//		НовСтрока = РазмещениеТоваров.Добавить(); 
			//		ЗаполнитьЗначенияСвойств(НовСтрока, Строка); 
			//		НовСтрока.Количество 		= СтрокаРазмещения.Количество;
			//		НовСтрока.КоличествоМинимум = Мин(НовСтрока.КоличествоМинимум - Строка.КоличествоОтгружено - Строка.КоличествоСобрано, НовСтрока.Количество); КонецЦикла; КонецЦикла; 
			
			СвТаблицаРазмещений.Свернуть("Номенклатура", "Количество");
			Для Каждого Строка Из ТоварыТЗ Цикл
				СтрокаСвТабл = СвТаблицаРазмещений.Найти(Строка.Номенклатура, "Номенклатура");
				Добавить = ?(СтрокаСвТабл = Неопределено, Строка.Количество, Строка.Количество - СтрокаСвТабл.Количество);
				Если Добавить Тогда
					НовСтрока = РазмещениеТоваров.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
					НовСтрока.Размещение = Неопределено;
					НовСтрока.Количество = Добавить; 
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли;
		
		Таблица = ?(ТипЗнч(РазмещениеТоваров) = Тип("ТаблицаЗначений"), РазмещениеТоваров.Скопировать(), РазмещениеТоваров.Выгрузить());
		
	Иначе
	
		// Очистим
		
		Если 	СпособРазмещения <> Неопределено И
				СпособРазмещения.ОчиститьРазмещение Тогда
				
			ТоварыТЗ.ЗаполнитьЗначения(Неопределено, ИмяКолонкиРазмещение); КонецЕсли; 
		
		Таблица = ТоварыТЗ; КонецЕсли;
	
	// Разместим в резервах
				
	Если  	СпособРазмещения <> Неопределено И
			СпособРазмещения.Склады Тогда
			
		//ПроставитьРазмещениеВТаблицеТоваровПоСкладам(ТоварыТЗ, СкладИлиМассивОчередностиСкладов, Дата, ДокументРезерва, ИмяКолонкиРазмещение, СвойРезервВПриоритете);
		ПроставитьРазмещениеВТаблицеТоваровПоСкладам(Таблица, СкладИлиМассивОчередностиСкладов, Дата, ДокументРезерва, ИмяКолонкиРазмещение, СвойРезервВПриоритете); КонецЕсли;
	
	// Разместим в будущих заказах
	
	Если 	СпособРазмещения <> Неопределено И
			СпособРазмещения.ЗаказыПоставщикам Тогда
			
		ПроставитьРазмещениеВТаблицеТоваровПоЗаказамПоставщику(?(ЭтоРазмещениеБезЗаказа, Таблица ,ТоварыТЗ), Дата, ДокументРезерва, ИмяКолонкиРазмещение);
	
	// Изобразим
	
	Если ЭтоРазмещениеБезЗаказа Тогда
		
		// Добавим минимальное количество товара
		КонвертацияТипов.ДобавитьТаблицуКТаблицеПроссумировавСтроки(Таблица, НачТаблица, "Номенклатура, Размещение", "Количество, КоличествоМинимум");
		
		// Выведем представление
		ПроставитьРазмещение(ТоварыТЗ, Таблица);
		
		//ВозможностьДублейСтрок
		Таблица.Свернуть("Номенклатура,Размещение,Артикул","Количество,КоличествоМинимум");
		
		// Вернем в документ
		РазмещениеТоваров.Загрузить(Таблица); КонецЕсли; КонецЕсли;


	//// Проставим артикул если есть
	//Если 	РазмещениеТоваров <> Неопределено И 
	//		ТоварыТЗ.Колонки.Найти("Артикул") <> Неопределено Тогда
	//	КонвертацияТипов.ВыполнитьВыражениеВКаждойСтрокеТаблицы(РазмещениеТоваров, "Строка.Артикул = Строка.Номенклатура.Артикул") КонецЕсли;
	
КонецПроцедуры

Процедура СгруппироватьТаблицу(Таблица)
	
	 Запрос = Новый Запрос();
	 Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	 Запрос.Текст =
	 "ВЫБРАТЬ
	 |  Таблица.Акция,
	 |	Таблица.Номенклатура,
	 |  Таблица.ВариантРасчета
	 |	Таблица.Количество КАК Количество,
	 |	Таблица.Упаковка,
	 |	Таблица.Размещение,
	 |	Таблица.Отгружено,
	 |	Таблица.Собрано
	 |ПОМЕСТИТЬ ВрТаблица
	 |ИЗ
	 |	&Таблица КАК Таблица
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	ВрТаблица.Номенклатура,
	 |	СУММА(ВрТаблица.Количество) КАК Количество,
	 |	ВрТаблица.Упаковка,
	 |	ВрТаблица.Размещение,
	 |	ВрТаблица.Отгружено,
	 |	ВрТаблица.Собрано
	 |ИЗ
	 |	ВрТаблица КАК ВрТаблица
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	ВрТаблица.Номенклатура,
	 |	ВрТаблица.Упаковка,
	 |	ВрТаблица.Размещение,
	 |	ВрТаблица.Отгружено,
	 |	ВрТаблица.Собрано";
	 Запрос.УстановитьПараметр("Таблица",Таблица);
	 Таблица = Запрос.Выполнить().Выгрузить();
	 
	
КонецПроцедуры

Процедура ПроставитьЗаказыВПорядкеОчереди_ст(ТоварыТЗ, Дата = Неопределено, ИмяОчередь = "Очередь") Экспорт
				
	// Проставляет подарки,
	
	// Скопируем таблицу
	
	КопияТоваров = ТоварыТЗ.Скопировать();
	КопияТоваров.ЗаполнитьЗначения(Неопределено, "Размещение");
	ТоварыТЗ.Очистить();
	
	// Запрос к остаткам
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Заказ,
	|	Номенклатура,
	|	Очередь,
	|	КоличествоОстаток Количество
	|ПОМЕСТИТЬ
	|	ОжидающиеЗаказы
	|ИЗ
	|	РегистрНакопления.РазмещениеЗаказов.Остатки(" + ?(Дата = Неопределено,"","&Дата") + ",Номенклатура В(&МассивНоменклатуры)) Ост
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	Очередь
	|
	|");
		
	Запрос.УстановитьПараметр("МассивНоменклатуры", КопияТоваров.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("Дата", 				Дата);
	
	ТаблицаОстатков = Запрос.Выполнить().Выгрузить();
	
	ОтданныеТовары 	= Новый ТаблицаЗначений;
	ОтданныеТовары.Колонки.Добавить("Заказ");
	ОтданныеТовары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ОтданныеТовары.Колонки.Добавить("Количество", 	Новый ОписаниеТипов("Число"));
	
	Для Каждого Строка Из КопияТоваров Цикл
		
		НужноРазместить = Строка.Количество;
		Остатки = ТаблицаОстатков.НайтиСтроки(Новый Структура("Номенклатура", Строка.Номенклатура));
		
		Для Каждого СтрокаОстатка Из Остатки Цикл
			
			// Узнаем мож че уже отдали
			
			СтрокиОтданных 	= ОтданныеТовары.НайтиСтроки(Новый Структура("Заказ, Номенклатура", СтрокаОстатка.Заказ, Строка.Номенклатура));
			УжеОтдавали 	= ?(СтрокиОтданных.Количество(), СтрокиОтданных[0].Количество,0);
			
			// Определим скоко отдадим
			
			МожноОтдать = СтрокаОстатка.Количество;
			Отдаем 		= Мин(МожноОтдать - УжеОтдавали, НужноРазместить);
			
			Если Отдаем Тогда
				
				// Запомним скоко отдали
			
				Если УжеОтдавали Тогда
					СтрокиОтданных[0].Количество = УжеОтдавали + Отдаем;
				Иначе
					НовСтрокаОтданного = ОтданныеТовары.Добавить();
					НовСтрокаОтданного.Заказ 		= СтрокаОстатка.Заказ;
					НовСтрокаОтданного.Номенклатура = СтрокаОстатка.Номенклатура;
					НовСтрокаОтданного.Количество 	= Отдаем;
				КонецЕсли;
				
				//Заполним итоговую таблицу
				
				НовСтрока = ТоварыТЗ.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
				НовСтрока[ИмяОчередь] = СтрокаОстатка.Очередь;
				
				// Заполним че отдаем
				
				НовСтрока.Количество = Отдаем;
				НовСтрока.Размещение = СтрокаОстатка.Заказ;
				
				// Сбросим переменные
				
				Строка.Количество 	= Строка.Количество - Отдаем;
				НужноРазместить 	= НужноРазместить - Отдаем;
				
			КонецЕсли;
			
			Если Не НужноРазместить Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		// Добавим пустую строку если не удалось
		
		Если НужноРазместить Тогда
			
			ВсеРазмещено = Ложь;
			
			НовСтрока = ТоварыТЗ.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
			НовСтрока.Количество = НужноРазместить;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
Процедура ПроставитьЗаказыВПорядкеОчереди_ст2(ТоварыТЗ, ТаблицаРезервы, Склад = Неопределено, СтруктураКолонокТовары = Неопределено, Дата = Неопределено, ИмяОчередь = "Очередь") Экспорт
				
	// Проставляет подарки,
	
	// Скопируем таблицу
	
	//КопияТоваров = ТоварыТЗ.Скопировать();
	//КопияТоваров.ЗаполнитьЗначения(Неопределено, "Размещение");
	//ТоварыТЗ.Очистить();
	
	// Запрос к остаткам
	
	Запрос = Новый Запрос("
	|
	|ВЫБРАТЬ
	|	Заказ,
	|	Заказ.ЗакупитьНедостающее ЗакупитьНедостающее,
	|	ВЫБОР 	КОГДА Заказ ССЫЛКА Документ.ЗаказПокупателя 		И ВЫРАЗИТЬ(Заказ КАК Документ.ЗаказПокупателя).Склад 			= &Склад ТОГДА 1
	|			КОГДА Заказ ССЫЛКА Документ.ИнтернетЗаказПокупателя И ВЫРАЗИТЬ(Заказ КАК Документ.ИнтернетЗаказПокупателя).Склад 	= &Склад ТОГДА 1
	|           КОГДА Заказ ССЫЛКА Документ.ВнутреннийЗаказ 		И ВЫРАЗИТЬ(Заказ КАК Документ.ВнутреннийЗаказ).Склад			= &Склад ТОГДА 1
	|			ИНАЧЕ 0 КОНЕЦ  ПриоритетПоСкладу,
	|	Номенклатура,
	|	Очередь,
	|	КоличествоОстаток Количество
	|ПОМЕСТИТЬ
	|	ОжидающиеЗаказы
	|ИЗ
	|	РегистрНакопления.РазмещениеЗаказов.Остатки(" + ?(Дата = Неопределено,"","&Дата") + ",Номенклатура В(&МассивНоменклатуры)) Ост
	|;
	|ВЫБРАТЬ
	|	*
	|ИЗ
	|	ОжидающиеЗаказы
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	ЗакупитьНедостающее Убыв,
	|	ПриоритетПоСкладу Убыв,
	|	Очередь
	|;
	|ВЫБРАТЬ
	|	ЗаказПокупателя Заказ,
	|	Номенклатура,
	|	Упаковка,
	|	ЕСТЬNULL(Упаковка.Коэффициент, 1) Коэффициент,
	|	Размещение,
	|	Цена,
	|	Акция,
	|	ПроцентРучнойСкидки,
	|	ПроцентАвтоматическойСкидки,
	|	СтавкаНДС,
	|	Неопределено 		Заказчик,
	|	КоличествоОстаток 	Количество,
	|	СуммаОстаток Сумма
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(" + ?(Дата = Неопределено,"","&Дата") + ",
	|                           ЗаказПокупателя В(ВЫБРАТЬ Заказ ИЗ ОжидающиеЗаказы) И
	|							Номенклатура В(&МассивНоменклатуры))
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИнтернетЗаказ Заказ,
	|	Номенклатура,
	|	Упаковка,
	|	ЕСТЬNULL(Упаковка.Коэффициент, 1) Коэффициент,
	|	Размещение,
	|	Цена,
	|	Акция,
	|	ПроцентРучнойСкидки,
	|	ПроцентАвтоматическойСкидки,
	|	СтавкаНДС,
	|	Неопределено 		Заказчик,
	|	КоличествоОстаток Количество,
	|	СуммаОстаток Сумма
	|ИЗ
	|	РегистрНакопления.ИнтернетЗаказПокупателя.Остатки(" + ?(Дата = Неопределено,"","&Дата") + ",
	|                           ИнтернетЗаказ В(ВЫБРАТЬ Заказ ИЗ ОжидающиеЗаказы) И
	|							Номенклатура В(&МассивНоменклатуры))
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВнутреннийЗаказ Заказ,
	|	Номенклатура,
	|	Упаковка,
	|	ЕСТЬNULL(Упаковка.Коэффициент, 1) Коэффициент,
	|	Размещение,
	|	0 					Цена,
	|	Неопределено 		Акция,
	|	0 					ПроцентРучнойСкидки,
	|	0 					ПроцентАвтоматическойСкидки,
	|	Неопределено		СтавкаНДС,
	|	Заказчик	 		Заказчик,
	|	КоличествоОстаток 	Количество,
	|	0			 		Сумма
	|ИЗ
	|	РегистрНакопления.ВнутренниеЗаказы.Остатки(" + ?(Дата = Неопределено,"","&Дата") + ",
	|                           ВнутреннийЗаказ В(ВЫБРАТЬ Заказ ИЗ ОжидающиеЗаказы) И
	|							Номенклатура В(&МассивНоменклатуры))
	|");
		
	Запрос.УстановитьПараметр("МассивНоменклатуры", ТоварыТЗ.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("Дата", 				Дата);
	Запрос.УстановитьПараметр("Склад",				Склад);
	
	Пакет = Запрос.ВыполнитьПакет();
	ТаблицаОстатков = Пакет[1].Выгрузить();
	ТаблицаЗаказов 	= Пакет[2].Выгрузить();
	
	//ОтданныеТовары 	= Новый ТаблицаЗначений;
	//ОтданныеТовары.Колонки.Добавить("Заказ");
	//ОтданныеТовары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	//ОтданныеТовары.Колонки.Добавить("Количество", 	Новый ОписаниеТипов("Число"));
	
	Для Каждого Строка Из ТоварыТЗ Цикл
		
		НужноРазместить = Строка.Количество*?(Строка.Упаковка.Пустая(), 1, Строка.Упаковка.Коэффициент);
		Остатки = ТаблицаОстатков.НайтиСтроки(Новый Структура("Номенклатура", Строка.Номенклатура));
		
		Для Каждого СтрокаОстатка Из Остатки Цикл
			
			// Узнаем мож че уже отдали
			
			//СтрокиОтданных 	= ОтданныеТовары.НайтиСтроки(Новый Структура("Заказ, Номенклатура", СтрокаОстатка.Заказ, Строка.Номенклатура));
			//УжеОтдавали 	= ?(СтрокиОтданных.Количество(), СтрокиОтданных[0].Количество,0);
			
			// Определим скоко отдадим
			
			//МожноОтдать = СтрокаОстатка.Количество;
			//Отдаем 		= Мин(МожноОтдать - УжеОтдавали, НужноРазместить);
			ОтдаемРазмещения = Мин(СтрокаОстатка.Количество, НужноРазместить);
			
			Если ОтдаемРазмещения Тогда
				
				// Теперь что отдаем разбиваем по реквизитам заказа
				
				СтрокиЗаказа = ТаблицаЗаказов.НайтиСтроки(Новый Структура("Заказ, Номенклатура", СтрокаОстатка.Заказ, СтрокаОстатка.Номенклатура));
				Для Каждого СтрокаЗаказа Из СтрокиЗаказа Цикл
					
					Отдаем = Мин(ОтдаемРазмещения, СтрокаЗаказа.Количество * СтрокаЗаказа.Коэффициент);
					
					Если Отдаем Тогда // если еще отдаем
					
						// Запомним скоко отдали
					
						//Если УжеОтдавали Тогда
						//	СтрокиОтданных[0].Количество = УжеОтдавали + Отдаем;
						//Иначе
							//НовСтрокаОтданного = ОтданныеТовары.Добавить();
							//НовСтрокаОтданного.Заказ 		= СтрокаОстатка.Заказ;
							//НовСтрокаОтданного.Номенклатура = СтрокаОстатка.Номенклатура;
							//НовСтрокаОтданного.Количество 	= Отдаем;
						//КонецЕсли;
						
						//Заполним итоговую таблицу
						
						НовСтрока = ТаблицаРезервы.Добавить();
						ЗаполнитьЗначенияСвойств(НовСтрока, Строка, , "Упаковка");
						НовСтрока[ИмяОчередь] = СтрокаОстатка.Очередь;
						
						// Заполним че отдаем
						
						НовСтрока.Количество = Отдаем;
						НовСтрока.Размещение = СтрокаОстатка.Заказ;
						
						// Заполним данные по заказу
						
						Если СтруктураКолонокТовары.ЕстьЦена 						Тогда	НовСтрока.Цена		= СтрокаЗаказа.Цена; КонецЕсли;
						Если СтруктураКолонокТовары.ЕстьАкция 						Тогда   НовСтрока.Акция		= СтрокаЗаказа.Акция; КонецЕсли;
						Если СтруктураКолонокТовары.ЕстьСтавкаНДС 					Тогда  	НовСтрока.СтавкаНДС	= СтрокаЗаказа.СтавкаНДС; КонецЕсли;
						Если СтруктураКолонокТовары.ЕстьПроцентАвтоматическойСкидки Тогда 	НовСтрока.ПроцентАвтоматическойСкидки 	= СтрокаЗаказа.ПроцентАвтоматическойСкидки; КонецЕсли;
						Если СтруктураКолонокТовары.ЕстьПроцентРучнойСкидки 		Тогда 	НовСтрока.ПроцентРучнойСкидки 			= СтрокаЗаказа.ПроцентРучнойСкидки; КонецЕсли;
						Если СтруктураКолонокТовары.ЕстьСумма Тогда
							НовСтрока.Сумма 	= ?(Отдаем = СтрокаЗаказа.Количество * СтрокаЗаказа.Коэффициент, 
																					СтрокаЗаказа.Сумма, 
																					(Отдаем / СтрокаЗаказа.Коэффициент) * СтрокаЗаказа.Цена); КонецЕсли;
						// Данные для внутренней заявки
						Если СтруктураКолонокТовары.ЕстьЗаказчик Тогда
							НовСтрока.Заказчик 						= СтрокаЗаказа.Заказчик; КонецЕсли;
	
						// Уменьшим остатки по размещению и заказу
						
						СтрокаЗаказа.Количество 	= СтрокаЗаказа.Количество - Отдаем * СтрокаЗаказа.Коэффициент;
						Если СтруктураКолонокТовары.ЕстьСумма Тогда 
							СтрокаЗаказа.Сумма 			= СтрокаЗаказа.Сумма - НовСтрока.Сумма; КонецЕсли;
						СтрокаОстатка.Количество 	= СтрокаОстатка.Количество - Отдаем;
						
						// Сбросим переменные
						
						Строка.Количество 	= Строка.Количество - Отдаем;
						НужноРазместить 	= НужноРазместить - Отдаем;
						ОтдаемРазмещения	= ОтдаемРазмещения - Отдаем;
						
						// Подсчитаем новые суммы
						
						Если СтруктураКолонокТовары <> Неопределено Тогда ФункцииФормДокументов.РассчитатьСуммыСтрокиОтЦены(НовСтрока, СтруктураКолонокТовары, Ложь) КонецЕсли;
							//ФункцииФормДокументов.РассчитатьСуммыТабличныхЧастей(НовСтрока, СтруктураКолонокТовары); КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если Не НужноРазместить Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		// Добавим пустую строку если не удалось
		
		//Если НужноРазместить Тогда
		//	
		//	ВсеРазмещено = Ложь;
		//	
		//	НовСтрока = ТоварыТЗ.Добавить();
		//	ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
		//	НовСтрока.Количество = НужноРазместить;
		//	
		//	Если СтруктураКолонокТовары <> Неопределено Тогда
		//		ФункцииФормДокументов.РассчитатьСуммыТабличныхЧастей(НовСтрока, СтруктураКолонокТовары); КонецЕсли;
		//	
		//КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
Процедура ПроставитьЗаказыВПорядкеОчереди(ТоварыТЗ, ТаблицаРезервы, Склад = Неопределено, СтруктураКолонокТовары = Неопределено, Дата = Неопределено, ИмяОчередь = "Очередь", ЕстьСпособРазмещенияБезЗаказа = ЛОЖЬ) Экспорт
				
	// Проставляет подарки,
	
	// Скопируем таблицу
	
	//КопияТоваров = ТоварыТЗ.Скопировать();
	//КопияТоваров.ЗаполнитьЗначения(Неопределено, "Размещение");
	//ТоварыТЗ.Очистить();
	
	// Запрос к остаткам
	
	// порядок раздачи резерва таков:
	//		-	вначале раздается резерв по заказам, для которых был создан заказ поставщику (предзаказ)
	// 		-	далее, если что-то осталось, раздает тем заказам, которые стоят в очереди с признаком "ЗакупитьНедостающие"
	// 		-	далее, в последнюю очередь, смотрим на склад, отдаем в первую очередь "своим", туда куда физически пришел товар
	//      -	остальные в порядке очереди
	ЗаполнятьРезерзПоПредзаказу = ТаблицаРезервы.Выгрузить().Колонки.Найти("ЗаказПоставщику") <> Неопределено;
	Запрос = Новый Запрос( ?(ЗаполнятьРезерзПоПредзаказу, "
	
	|ВЫБРАТЬ
	|	Размещение 	Заказ,
	|	1 		 	ПриоритетПоПредзаказу,
	//| 	ИСТИНА	 	ЗакупитьНедостающее,
	|	0		 	ПриоритетПоСкладу,
	|	Номенклатура,
	|	Очередь,
	|	ЗаказПоставщику,
	|	КоличествоОстаток	Количество
	|ПОМЕСТИТЬ
	|	ОжидающиеЗаказы
	|	
	|ИЗ
	|  	РегистрНакопления.РазмещениеЗаказовВПути.Остатки(" + ?(Дата = Неопределено,"","&Дата") + ",Номенклатура В(&МассивНоменклатуры) И ЗаказПоставщику В (&МассивЗаказовПоставщику))
	|ОБЪЕДИНИТЬ ВСЕ ", "") + "
	|ВЫБРАТЬ
	|	Заказ,
	|	0 	 ПриоритетПоПредзаказу,
	//|	Заказ.ЗакупитьНедостающее ЗакупитьНедостающее,
	|	ВЫБОР 	КОГДА Заказ ССЫЛКА Документ.ЗаказПокупателя 		И ВЫРАЗИТЬ(Заказ КАК Документ.ЗаказПокупателя).Склад 			= &Склад ТОГДА 1
	|			КОГДА Заказ ССЫЛКА Документ.ИнтернетЗаказПокупателя И ВЫРАЗИТЬ(Заказ КАК Документ.ИнтернетЗаказПокупателя).Склад 	= &Склад ТОГДА 1
	|           КОГДА Заказ ССЫЛКА Документ.ВнутреннийЗаказ 		И ВЫРАЗИТЬ(Заказ КАК Документ.ВнутреннийЗаказ).Склад			= &Склад ТОГДА 1
	|			ИНАЧЕ 0 КОНЕЦ  ПриоритетПоСкладу,
	|	Номенклатура,
	|	Очередь,
	|	Неопределено,
	|	КоличествоОстаток Количество " + ?(ЗаполнятьРезерзПоПредзаказу, "", "
	|ПОМЕСТИТЬ
	|	ОжидающиеЗаказы") + "
	|ИЗ
	|	РегистрНакопления.РазмещениеЗаказов.Остатки(" + ?(Дата = Неопределено,"","&Дата") + ",Номенклатура В(&МассивНоменклатуры) И Заказ.ЗакупитьНедостающее = ИСТИНА) Ост
	|;
	|ВЫБРАТЬ
	|	*
	|ИЗ
	|	ОжидающиеЗаказы
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	ПриоритетПоПредзаказу 	Убыв,
//	|	ЗакупитьНедостающее 	Убыв,
	|	ПриоритетПоСкладу 		Убыв,
	|	Очередь
	|;
	|ВЫБРАТЬ
	|	ЗаказПокупателя 	Заказ,
	|	ЗаказПокупателя.СпособРазмещенияБезЗаказа	 СпособРазмещенияБезЗаказа, 
	|	Номенклатура,
	|	Упаковка,
	|	ЕСТЬNULL(Упаковка.Коэффициент, 1) Коэффициент,
	|	Размещение,
	|	Цена,
	|	Акция,
	|	ПроцентРучнойСкидки,
	|	ПроцентАвтоматическойСкидки,
	|	СтавкаНДС,
	|	Неопределено 		Заказчик,
	|	КоличествоОстаток 	Количество,
	|	СуммаОстаток Сумма
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(" + ?(Дата = Неопределено,"","&Дата") + ",
	|                           ЗаказПокупателя В(ВЫБРАТЬ Заказ ИЗ ОжидающиеЗаказы) И
	|							Номенклатура В(&МассивНоменклатуры))
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИнтернетЗаказ Заказ,
	|	ИнтернетЗаказ.СпособРазмещенияБезЗаказа 	СпособРазмещенияБезЗаказа,
	|	Номенклатура,
	|	Упаковка,
	|	ЕСТЬNULL(Упаковка.Коэффициент, 1) Коэффициент,
	|	Размещение,
	|	Цена,
	|	Акция,
	|	ПроцентРучнойСкидки,
	|	ПроцентАвтоматическойСкидки,
	|	СтавкаНДС,
	|	Неопределено 		Заказчик,
	|	КоличествоОстаток Количество,
	|	СуммаОстаток Сумма
	|ИЗ
	|	РегистрНакопления.ИнтернетЗаказПокупателя.Остатки(" + ?(Дата = Неопределено,"","&Дата") + ",
	|                           ИнтернетЗаказ В(ВЫБРАТЬ Заказ ИЗ ОжидающиеЗаказы) И
	|							Номенклатура В(&МассивНоменклатуры))
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВнутреннийЗаказ Заказ,
	|	ЛОЖЬ			СпособРазмещенияБезЗаказа,
	|	Номенклатура,
	|	Упаковка,
	|	ЕСТЬNULL(Упаковка.Коэффициент, 1) Коэффициент,
	|	Размещение,
	|	0 					Цена,
	|	Неопределено 		Акция,
	|	0 					ПроцентРучнойСкидки,
	|	0 					ПроцентАвтоматическойСкидки,
	|	Неопределено		СтавкаНДС,
	|	Заказчик	 		Заказчик,
	|	КоличествоОстаток 	Количество,
	|	0			 		Сумма
	|ИЗ
	|	РегистрНакопления.ВнутренниеЗаказы.Остатки(" + ?(Дата = Неопределено,"","&Дата") + ",
	|                           ВнутреннийЗаказ В(ВЫБРАТЬ Заказ ИЗ ОжидающиеЗаказы) И
	|							Номенклатура В(&МассивНоменклатуры))
	|");
		
	Запрос.УстановитьПараметр("МассивНоменклатуры", ТоварыТЗ.ВыгрузитьКолонку("Номенклатура"));
	Если ЗаполнятьРезерзПоПредзаказу Тогда
	Запрос.УстановитьПараметр("МассивЗаказовПоставщику", ТоварыТЗ.ВыгрузитьКолонку("Заказ")); КонецЕсли;

	Запрос.УстановитьПараметр("Дата", 				Дата);
	Запрос.УстановитьПараметр("Склад",				Склад);
	//Запрос.УстановитьПараметр("ПустойЗаказПоставщику",	Документы.ЗаказПоставщику.ПустаяСсылка());
	
	Пакет = Запрос.ВыполнитьПакет();
	ТаблицаОстатков = Пакет[1].Выгрузить();
	ТаблицаЗаказов 	= Пакет[2].Выгрузить();
	
	//ОтданныеТовары 	= Новый ТаблицаЗначений;
	//ОтданныеТовары.Колонки.Добавить("Заказ");
	//ОтданныеТовары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	//ОтданныеТовары.Колонки.Добавить("Количество", 	Новый ОписаниеТипов("Число"));
	
	Для Каждого Строка Из ТоварыТЗ Цикл
		
		НужноРазместить = Строка.Количество*?(Строка.Упаковка.Пустая(), 1, Строка.Упаковка.Коэффициент);
		Остатки = ТаблицаОстатков.НайтиСтроки(Новый Структура("Номенклатура", Строка.Номенклатура));
		
		Для Каждого СтрокаОстатка Из Остатки Цикл
			
			// Узнаем мож че уже отдали
			
			//СтрокиОтданных 	= ОтданныеТовары.НайтиСтроки(Новый Структура("Заказ, Номенклатура", СтрокаОстатка.Заказ, Строка.Номенклатура));
			//УжеОтдавали 	= ?(СтрокиОтданных.Количество(), СтрокиОтданных[0].Количество,0);
			
			// Определим скоко отдадим
			
			//МожноОтдать = СтрокаОстатка.Количество;
			//Отдаем 		= Мин(МожноОтдать - УжеОтдавали, НужноРазместить);
			ОтдаемРазмещения = Мин(СтрокаОстатка.Количество, НужноРазместить);
			
			Если ОтдаемРазмещения Тогда
				
				// Теперь что отдаем разбиваем по реквизитам заказа
				
				СтрокиЗаказа = ТаблицаЗаказов.НайтиСтроки(Новый Структура("Заказ, Номенклатура", СтрокаОстатка.Заказ, СтрокаОстатка.Номенклатура));
				Для Каждого СтрокаЗаказа Из СтрокиЗаказа Цикл
					
					Отдаем = Мин(ОтдаемРазмещения, СтрокаЗаказа.Количество * СтрокаЗаказа.Коэффициент);
					
					Если Отдаем Тогда // если еще отдаем
					
						// Запомним скоко отдали
					
						//Если УжеОтдавали Тогда
						//	СтрокиОтданных[0].Количество = УжеОтдавали + Отдаем;
						//Иначе
							//НовСтрокаОтданного = ОтданныеТовары.Добавить();
							//НовСтрокаОтданного.Заказ 		= СтрокаОстатка.Заказ;
							//НовСтрокаОтданного.Номенклатура = СтрокаОстатка.Номенклатура;
							//НовСтрокаОтданного.Количество 	= Отдаем;
						//КонецЕсли;
						
						//Заполним итоговую таблицу
						
						НовСтрока = ТаблицаРезервы.Добавить();
						ЗаполнитьЗначенияСвойств(НовСтрока, Строка, , "Упаковка");
						НовСтрока[ИмяОчередь] = СтрокаОстатка.Очередь;
						Если ЕстьСпособРазмещенияБезЗаказа Тогда
							НовСтрока.СпособРазмещенияБезЗаказа = СтрокаЗаказа.СпособРазмещенияБезЗаказа; КонецЕсли;
						
						// Заполним че отдаем
						
						НовСтрока.Количество = Отдаем;
						НовСтрока.Размещение = СтрокаОстатка.Заказ;
						Если ЗаполнятьРезерзПоПредзаказу Тогда
						НовСтрока.ЗаказПоставщику = СтрокаОстатка.ЗаказПоставщику; КонецЕсли;
						
						// Заполним данные по заказу
						
						Если СтруктураКолонокТовары.ЕстьЦена 						Тогда	НовСтрока.Цена		= СтрокаЗаказа.Цена; КонецЕсли;
						Если СтруктураКолонокТовары.ЕстьАкция 						Тогда   НовСтрока.Акция		= СтрокаЗаказа.Акция; КонецЕсли;
						Если СтруктураКолонокТовары.ЕстьСтавкаНДС 					Тогда  	НовСтрока.СтавкаНДС	= СтрокаЗаказа.СтавкаНДС; КонецЕсли;
						Если СтруктураКолонокТовары.ЕстьПроцентАвтоматическойСкидки Тогда 	НовСтрока.ПроцентАвтоматическойСкидки 	= СтрокаЗаказа.ПроцентАвтоматическойСкидки; КонецЕсли;
						Если СтруктураКолонокТовары.ЕстьПроцентРучнойСкидки 		Тогда 	НовСтрока.ПроцентРучнойСкидки 			= СтрокаЗаказа.ПроцентРучнойСкидки; КонецЕсли;
						Если СтруктураКолонокТовары.ЕстьСумма Тогда
							НовСтрока.Сумма 	= ?(Отдаем = СтрокаЗаказа.Количество * СтрокаЗаказа.Коэффициент, 
																					СтрокаЗаказа.Сумма, 
																					(Отдаем / СтрокаЗаказа.Коэффициент) * СтрокаЗаказа.Цена); КонецЕсли;
						// Данные для внутренней заявки
						Если СтруктураКолонокТовары.ЕстьЗаказчик Тогда
							НовСтрока.Заказчик 						= СтрокаЗаказа.Заказчик; КонецЕсли;
	
						// Уменьшим остатки по размещению и заказу
						
						СтрокаЗаказа.Количество 	= СтрокаЗаказа.Количество - Отдаем * СтрокаЗаказа.Коэффициент;
						Если СтруктураКолонокТовары.ЕстьСумма Тогда 
							СтрокаЗаказа.Сумма 			= СтрокаЗаказа.Сумма - НовСтрока.Сумма; КонецЕсли;
						СтрокаОстатка.Количество 	= СтрокаОстатка.Количество - Отдаем;
						
						// Сбросим переменные
						
						Строка.Количество 	= Строка.Количество - Отдаем;
						НужноРазместить 	= НужноРазместить - Отдаем;
						ОтдаемРазмещения	= ОтдаемРазмещения - Отдаем;
						
						// Подсчитаем новые суммы
						
						Если СтруктураКолонокТовары <> Неопределено Тогда ФункцииФормДокументов.РассчитатьСуммыСтрокиОтЦены(НовСтрока, СтруктураКолонокТовары, Ложь) КонецЕсли;
							//ФункцииФормДокументов.РассчитатьСуммыТабличныхЧастей(НовСтрока, СтруктураКолонокТовары); КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если Не НужноРазместить Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		// Добавим пустую строку если не удалось
		
		//Если НужноРазместить Тогда
		//	
		//	ВсеРазмещено = Ложь;
		//	
		//	НовСтрока = ТоварыТЗ.Добавить();
		//	ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
		//	НовСтрока.Количество = НужноРазместить;
		//	
		//	Если СтруктураКолонокТовары <> Неопределено Тогда
		//		ФункцииФормДокументов.РассчитатьСуммыТабличныхЧастей(НовСтрока, СтруктураКолонокТовары); КонецЕсли;
		//	
		//КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
Процедура ПроставитьЗаказыВПорядкеОчереди_СтError(ТоварыТЗ, ТаблицаРезервы, Склад = Неопределено, СтруктураКолонокТовары = Неопределено, Дата = Неопределено, ИмяОчередь = "Очередь", ЕстьСпособРазмещенияБезЗаказа = Ложь) Экспорт
				
	// Проставляет подарки,
	
	// Скопируем таблицу
	
	// Запрос к остаткам
	
	// порядок раздачи резерва таков:
	//		-	вначале раздается резерв по заказам, для которых был создан заказ поставщику (предзаказ)
	// 		-	далее, если что-то осталось, раздает тем заказам, которые стоят в очереди с признаком "ЗакупитьНедостающие"
	// 		-	далее, в последнюю очередь, смотрим на склад, отдаем в первую очередь "своим", туда куда физически пришел товар
	//      -	остальные в порядке очереди
	
	ЗаполнятьРезерзПоПредзаказу = ТаблицаРезервы.Выгрузить().Колонки.Найти("ЗаказПоставщику") <> Неопределено;
	Запрос = Новый Запрос( ?(ЗаполнятьРезерзПоПредзаказу, "
	
	|ВЫБРАТЬ
	|	Размещение 	Заказ,
	|	1 		 	ПриоритетПоПредзаказу,
	|	0		 	ПриоритетПоСкладу,
	|	Номенклатура,
	|	Очередь,
	|	ЗаказПоставщику,
	|	КоличествоОстаток	Количество
	|ПОМЕСТИТЬ
	|	ОжидающиеЗаказы
	|	
	|ИЗ
	|  	РегистрНакопления.РазмещениеЗаказовВПути.Остатки(" + ?(Дата = Неопределено,"","&Дата") + ",Номенклатура В(&МассивНоменклатуры) И ЗаказПоставщику В (&МассивЗаказовПоставщику))
	|
	|ОБЪЕДИНИТЬ ВСЕ ", "") + "
	|
	|ВЫБРАТЬ
	|	Заказ,
	|	0 	 ПриоритетПоПредзаказу,
	|	ВЫБОР 	КОГДА Заказ ССЫЛКА Документ.ЗаказПокупателя 		И ВЫРАЗИТЬ(Заказ КАК Документ.ЗаказПокупателя).Склад 			= &Склад ТОГДА 1
	|			КОГДА Заказ ССЫЛКА Документ.ИнтернетЗаказПокупателя И ВЫРАЗИТЬ(Заказ КАК Документ.ИнтернетЗаказПокупателя).Склад 	= &Склад ТОГДА 1
	|           КОГДА Заказ ССЫЛКА Документ.ВнутреннийЗаказ 		И ВЫРАЗИТЬ(Заказ КАК Документ.ВнутреннийЗаказ).Склад			= &Склад ТОГДА 1
	|			ИНАЧЕ 0 КОНЕЦ  ПриоритетПоСкладу,
	|	Номенклатура,
	|	Очередь,
	|	Неопределено,
	|	КоличествоОстаток Количество " + ?(ЗаполнятьРезерзПоПредзаказу, "", "
	|ПОМЕСТИТЬ
	|	ОжидающиеЗаказы") + "
	|ИЗ
	|	РегистрНакопления.РазмещениеЗаказов.Остатки(" + ?(Дата = Неопределено,"","&Дата") + ",Номенклатура В(&МассивНоменклатуры) И Заказ.ЗакупитьНедостающее = ИСТИНА) Ост
	|;
	|ВЫБРАТЬ
	|	*
	|ИЗ
	|	ОжидающиеЗаказы
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	ПриоритетПоПредзаказу 	Убыв,
	|	ПриоритетПоСкладу 		Убыв,
	|	Очередь
	|;
	|ВЫБРАТЬ
	|	ЛОЖЬ СпособРазмещенияБезЗаказа,
	|	ЗаказПокупателя Заказ,
	|	Номенклатура,
	|	Упаковка,
	|	ЕСТЬNULL(Упаковка.Коэффициент, 1) Коэффициент,
	|	Размещение,
	|	Цена,
	|	Акция,
	|	ПроцентРучнойСкидки,
	|	ПроцентАвтоматическойСкидки,
	|	СтавкаНДС,
	|	Неопределено 		Заказчик,
	|	КоличествоОстаток 	Количество,
	|	СуммаОстаток Сумма
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(" + ?(Дата = Неопределено,"","&Дата") + ",
	|                           ЗаказПокупателя В(ВЫБРАТЬ Заказ ИЗ ОжидающиеЗаказы) И
	|							Номенклатура В(&МассивНоменклатуры) И
	|							НЕ ЗаказПокупателя.СпособРазмещенияБезЗаказа)
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЛОЖЬ,
	|	ИнтернетЗаказ Заказ,
	|	Номенклатура,
	|	Упаковка,
	|	ЕСТЬNULL(Упаковка.Коэффициент, 1) Коэффициент,
	|	Размещение,
	|	Цена,
	|	Акция,
	|	ПроцентРучнойСкидки,
	|	ПроцентАвтоматическойСкидки,
	|	СтавкаНДС,
	|	Неопределено 		Заказчик,
	|	КоличествоОстаток Количество,
	|	СуммаОстаток Сумма
	|ИЗ
	|	РегистрНакопления.ИнтернетЗаказПокупателя.Остатки(" + ?(Дата = Неопределено,"","&Дата") + ",
	|                           ИнтернетЗаказ В(ВЫБРАТЬ Заказ ИЗ ОжидающиеЗаказы) И
	|							Номенклатура В(&МассивНоменклатуры) И
	|							НЕ ИнтернетЗаказ.СпособРазмещенияБезЗаказа)
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЛОЖЬ,
	|	ВнутреннийЗаказ Заказ,
	|	Номенклатура,
	|	Упаковка,
	|	ЕСТЬNULL(Упаковка.Коэффициент, 1) Коэффициент,
	|	Размещение,
	|	0 					Цена,
	|	Неопределено 		Акция,
	|	0 					ПроцентРучнойСкидки,
	|	0 					ПроцентАвтоматическойСкидки,
	|	Неопределено		СтавкаНДС,
	|	Заказчик	 		Заказчик,
	|	КоличествоОстаток 	Количество,
	|	0			 		Сумма
	|ИЗ
	|	РегистрНакопления.ВнутренниеЗаказы.Остатки(" + ?(Дата = Неопределено,"","&Дата") + ",
	|                           ВнутреннийЗаказ В(ВЫБРАТЬ Заказ ИЗ ОжидающиеЗаказы) И
	|							Номенклатура В(&МассивНоменклатуры))
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИСТИНА,
	|	ДокументРезерва,
	|	Номенклатура,
	|	NULL,
	|	1 Коэффициент,
	|	Размещение,
	|	0 					Цена,
	|	Неопределено 		Акция,
	|	0 					ПроцентРучнойСкидки,
	|	0 					ПроцентАвтоматическойСкидки,
	|	Неопределено		СтавкаНДС,
	|	ДокументРезерва		Заказчик,
	|	КоличествоОстаток 	Количество,
	|	0			 		Сумма
	|ИЗ
	|	РегистрНакопления.ТоварыВРезерве.Остатки(" + ?(Дата = Неопределено,"","&Дата") + ",
	|                           ДокументРезерва В(ВЫБРАТЬ Заказ ИЗ ОжидающиеЗаказы) И
	|							Номенклатура В(&МассивНоменклатуры) И
	|							ДокументРезерва.СпособРазмещенияБезЗаказа)
	|");
		
	Запрос.УстановитьПараметр("МассивНоменклатуры", ТоварыТЗ.ВыгрузитьКолонку("Номенклатура"));
	Если ЗаполнятьРезерзПоПредзаказу Тогда
	Запрос.УстановитьПараметр("МассивЗаказовПоставщику", ТоварыТЗ.ВыгрузитьКолонку("Заказ")); КонецЕсли;

	Запрос.УстановитьПараметр("Дата", 				Дата);
	Запрос.УстановитьПараметр("Склад",				Склад);
	
	Пакет = Запрос.ВыполнитьПакет();
	ТаблицаОстатков = Пакет[1].Выгрузить();
	ТаблицаЗаказов 	= Пакет[2].Выгрузить();
	
	Для Каждого Строка Из ТоварыТЗ Цикл
		
		НужноРазместить = Строка.Количество*?(Строка.Упаковка.Пустая(), 1, Строка.Упаковка.Коэффициент);
		Остатки = ТаблицаОстатков.НайтиСтроки(Новый Структура("Номенклатура", Строка.Номенклатура));
		
		Для Каждого СтрокаОстатка Из Остатки Цикл
			
			ОтдаемРазмещения = Мин(СтрокаОстатка.Количество, НужноРазместить);
			
			Если ОтдаемРазмещения Тогда
				
				// Теперь что отдаем разбиваем по реквизитам заказа
				
				СтрокиЗаказа = ТаблицаЗаказов.НайтиСтроки(Новый Структура("Заказ, Номенклатура", СтрокаОстатка.Заказ, СтрокаОстатка.Номенклатура));
				Для Каждого СтрокаЗаказа Из СтрокиЗаказа Цикл
					
					Отдаем = Мин(ОтдаемРазмещения, СтрокаЗаказа.Количество * СтрокаЗаказа.Коэффициент);
					
					Если Отдаем Тогда // если еще отдаем
					
						//Заполним итоговую таблицу
						
						НовСтрока = ТаблицаРезервы.Добавить();
						ЗаполнитьЗначенияСвойств(НовСтрока, Строка, , "Упаковка");
						НовСтрока[ИмяОчередь] = СтрокаОстатка.Очередь;
						Если ЕстьСпособРазмещенияБезЗаказа Тогда
							НовСтрока.СпособРазмещенияБезЗаказа = СтрокаЗаказа.СпособРазмещенияБезЗаказа; КонецЕсли;
						
						// Заполним че отдаем
						
						НовСтрока.Количество = Отдаем;
						НовСтрока.Размещение = СтрокаОстатка.Заказ;
						Если ЗаполнятьРезерзПоПредзаказу Тогда
						НовСтрока.ЗаказПоставщику = СтрокаОстатка.ЗаказПоставщику; КонецЕсли;
						
						// Заполним данные по заказу
						
						Если СтруктураКолонокТовары.ЕстьЦена 						Тогда	НовСтрока.Цена		= СтрокаЗаказа.Цена; КонецЕсли;
						Если СтруктураКолонокТовары.ЕстьАкция 						Тогда   НовСтрока.Акция		= СтрокаЗаказа.Акция; КонецЕсли;
						Если СтруктураКолонокТовары.ЕстьСтавкаНДС 					Тогда  	НовСтрока.СтавкаНДС	= СтрокаЗаказа.СтавкаНДС; КонецЕсли;
						Если СтруктураКолонокТовары.ЕстьПроцентАвтоматическойСкидки Тогда 	НовСтрока.ПроцентАвтоматическойСкидки 	= СтрокаЗаказа.ПроцентАвтоматическойСкидки; КонецЕсли;
						Если СтруктураКолонокТовары.ЕстьПроцентРучнойСкидки 		Тогда 	НовСтрока.ПроцентРучнойСкидки 			= СтрокаЗаказа.ПроцентРучнойСкидки; КонецЕсли;
						Если СтруктураКолонокТовары.ЕстьСумма Тогда
							НовСтрока.Сумма 	= ?(Отдаем = СтрокаЗаказа.Количество * СтрокаЗаказа.Коэффициент, 
																					СтрокаЗаказа.Сумма, 
																					(Отдаем / СтрокаЗаказа.Коэффициент) * СтрокаЗаказа.Цена); КонецЕсли;
						// Данные для внутренней заявки
						Если СтруктураКолонокТовары.ЕстьЗаказчик Тогда
							НовСтрока.Заказчик 						= СтрокаЗаказа.Заказчик; КонецЕсли;
	
						// Уменьшим остатки по размещению и заказу
						
						СтрокаЗаказа.Количество 	= СтрокаЗаказа.Количество - Отдаем * СтрокаЗаказа.Коэффициент;
						Если СтруктураКолонокТовары.ЕстьСумма Тогда 
							СтрокаЗаказа.Сумма 			= СтрокаЗаказа.Сумма - НовСтрока.Сумма; КонецЕсли;
						СтрокаОстатка.Количество 	= СтрокаОстатка.Количество - Отдаем;
						
						// Сбросим переменные
						
						Строка.Количество 	= Строка.Количество - Отдаем;
						НужноРазместить 	= НужноРазместить - Отдаем;
						ОтдаемРазмещения	= ОтдаемРазмещения - Отдаем;
						
						// Подсчитаем новые суммы
						
						Если 	Не СтрокаЗаказа.СпособРазмещенияБезЗаказа И 
								СтруктураКолонокТовары <> Неопределено Тогда 
							ФункцииФормДокументов.РассчитатьСуммыСтрокиОтЦены(НовСтрока, СтруктураКолонокТовары, Ложь) КонецЕсли; КонецЕсли; КонецЦикла; КонецЕсли;
			
			Если Не НужноРазместить Тогда
				Прервать; КонецЕсли; КонецЦикла; КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьРезревыКСписанию(ТаблицаДокумента, ДокументРезерва) Экспорт
	
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ Таб.Номенклатура, Таб.Размещение, Таб.Количество, Таб.Размещение Очередь 
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ 
	|   &Таблица Таб
	|;
	|
	|ВЫБРАТЬ 
	|	ЕСТЬNULL(Рег.Номенклатура, Таблица.Номенклатура) 					Номенклатура,
	|	ЕСТЬNULL(Рег.Размещение, Таблица.Размещение) 						Размещение,
	|	ЕСТЬNULL(Таблица.Количество, 0)- ЕСТЬNULL(Рег.КоличествоОстаток, 0) Количество
	|Поместить ВТ
	|ИЗ
	|	РегистрНакопления.ТоварыВРезерве.Остатки(,ДокументРезерва = &ДокументРезерва) КАК Рег
	|
	|ПОЛНОЕ СОЕДИНЕНИЕ
	|   ТаблицаДокумента КАК Таблица
	|ПО 
	|
	|	Рег.Номенклатура = Таблица.Номенклатура И 
	|	Рег.Размещение 	 = Таблица.Размещение
	|  
	|ГДЕ
	|   ЕСТЬNULL(Таблица.Размещение, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) ССЫЛКА Справочник.Склады И
	|   ЕСТЬNULL(Рег.КоличествоОстаток, 0) - ЕСТЬNULL(Таблица.Количество, 0) <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	ЕСТЬNULL(Рег.Номенклатура, Таблица.Номенклатура) 					Номенклатура,
	|	ЕСТЬNULL(Рег.Очередь, Таблица.Очередь) 								Размещение,
	|	ЕСТЬNULL(Таблица.Количество, 0)- ЕСТЬNULL(Рег.КоличествоОстаток, 0) Количество
	|ИЗ
	|	РегистрНакопления.РазмещениеЗаказов.Остатки(,Заказ = &ДокументРезерва) КАК Рег
    |
	|ПОЛНОЕ СОЕДИНЕНИЕ
	|   ТаблицаДокумента КАК Таблица
	|ПО 
	|
	|	Рег.Номенклатура = Таблица.Номенклатура И 
	|	Рег.Очередь 	 = Таблица.Очередь
	|ГДЕ
	| 	ТИПЗНАЧЕНИЯ(ЕСТЬNULL(Таблица.Очередь,0)) = ТИП(ЧИСЛО) И
	|  	ЕСТЬNULL(Рег.КоличествоОстаток, 0) - ЕСТЬNULL(Таблица.Количество, 0) <> 0	
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	ЕСТЬNULL(Рег.Номенклатура, Таблица.Номенклатура)					 Номенклатура,
	|	ЕСТЬNULL(Рег.ЗаказПоставщику, Таблица.Размещение)                    Размещение,
	//|	ЕСТЬNULL(Рег.Очередь, Таблица.Очередь) 								 Размещение,
	|	ЕСТЬNULL(Таблица.Количество, 0)- ЕСТЬNULL(Рег.КоличествоОстаток, 0)  Количество
	|ИЗ
	|	РегистрНакопления.РазмещениеЗаказовВПути.Остатки(,Размещение = &ДокументРезерва) КАК Рег
	|
	|ПОЛНОЕ СОЕДИНЕНИЕ
	|   ТаблицаДокумента КАК Таблица
	|ПО 
	|
	|	Рег.Номенклатура 	= Таблица.Номенклатура И 
	|	Рег.ЗаказПоставщику	= Таблица.Размещение  
	|ГДЕ
	|	ЕСТЬNULL(Таблица.Размещение, ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)) ССЫЛКА Документ.ЗаказПоставщику И
	|   ЕСТЬNULL(Рег.КоличествоОстаток, 0) - ЕСТЬNULL(Таблица.Количество, 0) <> 0	
	|;
	|
	|Выбрать 
	|ВТ.Номенклатура,
	|ВТ.Размещение,
	|ВТ.Количество
	|из ВТ"
	
	
	);
	
	Запрос.УстановитьПараметр("Таблица", ТаблицаДокумента);
	Запрос.УстановитьПараметр("ДокументРезерва", ДокументРезерва);
	Запрос.УстановитьПараметр("Заказ", ДокументРезерва);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПроверитьНаПереборВРазмещении(Товары, РазмещениеТоваров) Экспорт
	
	ТоварыБезДублей = Товары.Выгрузить();
	ТоварыБезДублей.Свернуть("Номенклатура", "Количество");
	
	Для Каждого Строка ИЗ ТоварыБезДублей Цикл
		
		КоличествоРезерва = КонвертацияТипов.ПолучитьСуммуКолонкиПоУсловию(РазмещениеТоваров, "Количество", Новый Структура("Номенклатура", Строка.Номенклатура));
		Если КоличествоРезерва > Строка.Количество Тогда
			
			ОбщиеФункции.СообщитьТекст("Нельзя сохранять заказ с товарами, у которых перебор в размещении : " + Строка.Номенклатура);
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

#КонецОбласти

#Область Менеджер_заказов
Процедура ПроставитьНомерГТД(ТаблицаТоваров) Экспорт
	
	Для Каждого Строка Из ТаблицаТоваров Цикл
			Строка.НомерГТД = РаботаСНоменклатурой.ПолучитьНомерГТД(Строка.Номенклатура);
	КонецЦикла;

КонецПроцедуры
Процедура ПроставитьРазмещение_нов(ТаблицаТоваров, ТаблицаРазмещения) Экспорт
	
	//ТипЧисло = Тип("Число");
	//Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл 
	//	
	//	КолСобрано = 0; КолОтгружено = 0;
	//	
	//	СтрокиРазмещений = ТаблицаРазмещения.НайтиСтроки(Новый Структура("Номенклатура", СтрокаТовара.Номенклатура));
	//	Для Каждого Строка Из СтрокиРазмещений Цикл КолСобрано = КолСобрано + СтрокиРазмещений.КоличествоСобрано; КолОтгружено = КолОтгружено + СтрокиРазмещений.КоличествоОтгружено; КонецЦикла;
	//	
	//	СтрокаТовара.КоличествоСобрано 		= КолСобрано;
	//	СтрокаТовара.КоличествоОтгружено 	= КолОтгружено;
	//	СтрокаТовара.КоличествоМинимум 		= КолСобрано + КолОтгружено;
	//	СтрокаТовара.Размещение 			= ДиалогиСПользователем.ПолучитьПредставлениеРазмещения(СтрокаТовара.Количество, СтрокиРазмещений); КонецЦикла;
	
КонецПроцедуры
Процедура ПроставитьРазмещение(ТаблицаТоваров, ТаблицаРазмещения) Экспорт
	
	
	Для Каждого Строка Из ТаблицаТоваров Цикл
		
		//ВозможностьДублейСтрок. Добавлен 5-й параметр
		//Строка.Размещение = ДиалогиСПользователем.ПолучитьПредставлениеРазмещения(Строка.Количество, ТаблицаРазмещения.НайтиСтроки(Новый Структура("Номенклатура", Строка.Номенклатура)),, Строка.КоличествоОтгружено); 
		
		//Круглов временно
		//Строка.Размещение = ДиалогиСПользователем.ПолучитьПредставлениеРазмещения(Строка.Количество, ТаблицаРазмещения.НайтиСтроки(Новый Структура("Номенклатура", Строка.Номенклатура)),, Строка.КоличествоОтгружено, ДиалогиСПользователем.ПолучитьКоличествоСДублями(ТаблицаТоваров, Строка.Номенклатура),Строка.КоличествоОтменено, Строка.КоличествоВПути); 
		Строка.Размещение = ДиалогиСПользователем.ПолучитьПредставлениеРазмещения(Строка.Количество, ТаблицаРазмещения.НайтиСтроки(Новый Структура("Номенклатура", Строка.Номенклатура)),, Строка.КоличествоОтгружено, ДиалогиСПользователем.ПолучитьКоличествоСДублями(ТаблицаТоваров, Строка.Номенклатура),Строка.КоличествоОтменено); 
	КонецЦикла;
	
КонецПроцедуры
Процедура ПроставитьСобраноИОтгружено(Заказ, Товары) Экспорт
	
	//// Устанавливает колонки количестао отгружено и собрано в таблице товаров
	//
	//Запрос = Новый Запрос("
	//|ВЫБРАТЬ 													Номенклатура, 
	//|	СУММА(ЕСТЬNULL(Отгружено, 0)) 							КоличествоОтгружено, 
	//|	СУММА(ЕСТЬNULL(Собрано, 0)) 							КоличествоСобрано,
	//|	СУММА(ЕСТЬNULL(Отгружено, 0) + ЕСТЬNULL(Собрано, 0)) 	КоличествоМинимум
	//|ИЗ
	//|(
	//|	ВЫБРАТЬ Номенклатура, КоличествоОборот Отгружено, NULL Собрано
	//|	ИЗ РегистрНакопления.Продажи.Обороты(,,,Заказ = &Заказ)
	//|
	//|	ОБЪЕДИНИТЬ ВСЕ
	//|
	//|	ВЫБРАТЬ Номенклатура, NULL, СобраноОстаток
	//|	ИЗ РегистрНакопления.СборкаЗаказа.Остатки(,Заказ = &Заказ)
	//|
	//|) Запрос
	//|
	//|СГРУППИРОВАТЬ ПО Номенклатура
	//|");
	//
	//Запрос.УстановитьПараметр("Заказ", Заказ);
	//ТаблОтгрузок = Запрос.Выполнить().Выгрузить();
	//
	//// Проставим
	//
	//Для Каждого Строка Из Товары Цикл
	//	СтрокаОтгрузок = ТаблОтгрузок.Найти(Строка.Номенклатура, "Номенклатура");
	//	Если СтрокаОтгрузок <> Неопределено Тогда ЗаполнитьЗначенияСвойств(Строка, СтрокаОтгрузок); КонецЕсли; КонецЦикла;
	
КонецПроцедуры
Функция ПолучитьТаблицуРазмещения_Ст(Заказ, Параметры = Неопределено) Экспорт
	
	Если Параметры = Неопределено Тогда Параметры = ПолучитьПараметрыДляЗапроса(Заказ) КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ Номенклатура, Размещение, СУММА(Количество) Количество
	|ИЗ
	|(
	|	ВЫБРАТЬ	Номенклатура, Размещение, КоличествоОстаток Количество
	|	ИЗ		РегистрНакопления.ТоварыВРезерве.Остатки(,ДокументРезерва = &Ссылка)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ	Номенклатура, Очередь, КоличествоОстаток Количество
	|	ИЗ		РегистрНакопления.РазмещениеЗаказов.Остатки(,Заказ = &Ссылка)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ	Номенклатура, СкладОтправитель, КоличествоОстаток Количество
	|	ИЗ		РегистрНакопления.ТоварыВПути.Остатки(,Заказчик.Заказ = &Ссылка)
	|
	|) Запрос
	|
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура, Размещение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ	Номенклатура, Размещение, Количество
	|ИЗ			Документ." + Параметры.ИмяДокумента + ".РазмещениеТоваров Тов
	|ГДЕ	Ссылка = &Ссылка И
	|		НЕ Ссылка.Проведен
	|");
	
	Запрос.УстановитьПараметр("Ссылка", Заказ);
	Возврат Запрос.Выполнить().Выгрузить();	
	
КонецФункции
Функция ПолучитьТаблицуРазмещения(Заказ, Параметры = Неопределено) Экспорт
	
	Если Параметры = Неопределено Тогда Параметры = ПолучитьПараметрыДляЗапроса(Заказ) КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ Номенклатура.Артикул Артикул,
	|Номенклатура, 
	|Размещение, 
	//|	СУММА(Количество + ВПути) 				Количество,   //зачем мы добавляем сюда товар в пути??? из за этого создаются кривые корректировки
	|	СУММА(Количество )		 				Количество, 
	|	СУММА(ВПути) 							КоличествоВПути, 
	|	СУММА(Отгружено)			 			КоличествоОтгружено, 
	|	СУММА(Собрано) 							КоличествоСобрано, 
	|	СУММА(Собрано) 							КоличествоМинимум,
	|	СУММА(Количество + Отгружено + ВПути) 	КоличествоВсего,
	|	СУММА(Отменено)						 	КоличествоОтменено
	|ИЗ
	|(
	|	ВЫБРАТЬ	Номенклатура, Размещение, КоличествоОстаток Количество, 0 Отгружено, 0 Собрано, 0 ВПути, 0 Отменено
	|	ИЗ		РегистрНакопления.ТоварыВРезерве.Остатки(,ДокументРезерва = &Ссылка)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ	Номенклатура, Очередь, КоличествоОстаток Количество, 0, 0, 0,0
	|	ИЗ		РегистрНакопления.РазмещениеЗаказов.Остатки(,Заказ = &Ссылка)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ	Номенклатура, ЗаказПоставщику, 0, 0, 0, КоличествоОстаток Количество, 0
	|	ИЗ		РегистрНакопления.РазмещениеЗаказовВПути.Остатки(,Размещение = &Ссылка)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ	Номенклатура, СкладОтправитель, 0, 0, 0, КоличествоОстаток ВПути, 0
	//|	ИЗ		РегистрНакопления.ТоварыВПути.Остатки(,Заказчик.Заказ = &Ссылка)
	|	ИЗ		РегистрНакопления.ТоварыВПути.Остатки(,Заказчик в (выбрать ссылка из бизнесПроцесс.СборкаЗаказа ГДЕ Заказ=&Ссылка))
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ Номенклатура, Склад, 0, Количество, 0, 0, 0
	//|	ИЗ 		РегистрНакопления.Продажи.Обороты(,,,Заказ = &Ссылка)
	|	ИЗ 		(Выбрать Номенклатура,Склад,сумма(Количество) из РегистрНакопления.Продажи ГДЕ Заказ=&Ссылка сгруппировать по Номенклатура,Склад) ВТ
	| 
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	//|	ВЫБРАТЬ Номенклатура, ЕСТЬNULL(СкладЯчейка.Владелец, СкладЯчейка), 0,0, СобраноОстаток, 0, 0
	//|	ИЗ РегистрНакопления.СборкаЗаказа.Остатки(,Заказ = &Ссылка)
	|	ВЫБРАТЬ Номенклатура, Склад, 0,0, КоличествоОстаток, 0, 0
	|	ИЗ РегистрНакопления.ТоварыСобранные.Остатки(,Заказ = &Ссылка)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ Номенклатура, Неопределено, 0 , 0, 0, 0, -Количество
	|	ИЗ РегистрНакопления.ЗаказыПокупателей
	|   ГДЕ ЗаказПокупателя = &Ссылка
	|   И ВидДвижения = Значение(ВидДвиженияНакопления.Приход)
	|   И Количество < 0
	|
	|) Запрос
	|
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура, Размещение 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ	Номенклатура.Артикул, Номенклатура,Размещение,
	| Сумма(Количество),
	|   0, 0, 0, 0,
	| Сумма(Количество),0
	|ИЗ			Документ." + Параметры.ИмяДокумента + ".РазмещениеТоваров Тов
	|ГДЕ	Ссылка = &Ссылка И
	|		НЕ Ссылка.Проведен
	|СГРУППИРОВАТЬ ПО                  //ВозможностьДублейСтрок. Добавлена группировка для возможности дублей
	|	Номенклатура, Размещение 
	|");
	
	Запрос.УстановитьПараметр("Ссылка", Заказ);
	Возврат Запрос.Выполнить().Выгрузить();	
	
КонецФункции
Процедура ЗаполнитьТаблицыРазмещений(Заказ, ТаблицаТоваров, ТаблицаРазмещения, Параметры = Неопределено) Экспорт
	
	// Получим таблицу
	
	текРазмещения = ПолучитьТаблицуРазмещения(Заказ, Параметры);
	
	КонвертацияТипов.ВыполнитьВыражениеВКаждойСтрокеТаблицы(текРазмещения,"Строка.Количество = Строка.Количество + Строка.КоличествоВПути");
	
	// Загрузим размещения
	
	ТаблицаРазмещения.Загрузить(текРазмещения);
	
	
	// Загрузим товары
	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		КолСобрано = 0; КолОтгружено = 0; КолОтменено=0; КолВПути = 0;
		
		СтрокиРазмещений = текРазмещения.НайтиСтроки(Новый Структура("Номенклатура", СтрокаТовара.Номенклатура));
		Для Каждого Строка Из СтрокиРазмещений Цикл КолВПути = КолВПути + Строка.КоличествоВПути; КолСобрано = КолСобрано + Строка.КоличествоСобрано; КолОтгружено = КолОтгружено + Строка.КоличествоОтгружено; КолОтменено=КолОтменено + Строка.КоличествоОтменено  КонецЦикла;
		
		СтрокаТовара.КоличествоСобрано 		= КолСобрано;
		
		//Круглов Временно
		//СтрокаТовара.КоличествоВПути 		= КолВПути;
		
		СтрокаТовара.КоличествоОтгружено 	= КолОтгружено;
		СтрокаТовара.КоличествоМинимум 		= КолСобрано + КолОтгружено;
		СтрокаТовара.КоличествоОтменено		= КолОтменено;
		//СтрокаТовара.Собрано				= Булево(КолСобрано);
		СтрокаТовара.Отгружено				= Булево(КолОтгружено);
		//СтрокаТовара.Размещение 			= ДиалогиСПользователем.ПолучитьПредставлениеРазмещения(СтрокаТовара.Количество - СтрокаТовара.КоличествоОтгружено, СтрокиРазмещений,, СтрокаТовара.КоличествоОтгружено); КонецЦикла;
		//СтрокаТовара.Размещение 			= ДиалогиСПользователем.ПолучитьПредставлениеРазмещения(СтрокаТовара.Количество, СтрокиРазмещений,, СтрокаТовара.КоличествоОтгружено); КонецЦикла;
		
		//ВозможностьДублейСтрок. добавлен 5-й параметр
		СтрокаТовара.Размещение 			= ДиалогиСПользователем.ПолучитьПредставлениеРазмещения(СтрокаТовара.Количество, СтрокиРазмещений,, СтрокаТовара.КоличествоОтгружено,ДиалогиСПользователем.ПолучитьКоличествоСДублями(ТаблицаТоваров, СтрокаТовара.Номенклатура), СтрокаТовара.КоличествоОтменено, КолВПути); КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьТоварыПоСтатусу(СсылкаПроцесса, ДатаСостояния = Неопределено, Статус, УчитыватьБПРодитель = Истина, ПоказатьОжидающие = Ложь) Экспорт
	
	Товары = ПолучитьСостояниеТоваров(СсылкаПроцесса, ДатаСостояния, УчитыватьБПРодитель, ПоказатьОжидающие);
	Строки = Товары.НайтиСтроки(Новый Структура("Состояние", Статус));
	
	ТаблицаВозврата = Товары.СкопироватьКолонки();
	
	Для Каждого Строка Из Строки Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаВозврата.Добавить(), Строка);
	КонецЦикла;
	
	Возврат ТаблицаВозврата;

КонецФункции

Процедура ПересчитатьСуммыТоваровСНесколькимиПозициями(Товары, СоставПолей)
	
	// Процедура пересчитывает товары которые встречаются несколькми позициями
	// за общуюю сумму берется суммы в первой позиции и размазываются по всем товаром с разными позициями
	//
	// Чтобы значть что товар с несколькми позицими должны быть колонка "КоличествоПозиций"
	//
	// СоставПолей -  строка, где через запятую перечисляются суммовые колонки для разбивания
	
	Для Каждого Строка Из Товары Цикл
		Если Строка.КоличествоПозиций > 1 Тогда
			
			СтруктураПолей = Новый Структура(СоставПолей);
			ЗаполнитьЗначенияСвойств(СтруктураПолей, Строка);
			Строка.Количество = Строка.Количество / Строка.КоличествоПозиций;
			
			КонвертацияТипов.РаздатьКопейкиНуждающимся_Колонкам(Товары.НайтиСтроки(Новый Структура("Номенклатура", Строка.Номенклатура)), СтруктураПолей); КонецЕсли; КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьТаблицуТоваровСтарымСпособом(СсылкаПроцесс, СсылкаЗадача = Неопределено, ЕстьСуммы = Истина) Экспорт
	
	Параметры = ПолучитьПараметрыДляЗапроса(СсылкаПроцесс.Заказ);
	
	// Определим дату считывания
		
	ОперативнаяДата = 
				СсылкаЗадача <> Неопределено И
				СсылкаЗадача.Выполнена;
	ЕстьДоставка = параметры.ИмяЗаказа = "ИнтернетЗаказ";
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	//|	Запр.НомерСтроки,
	|	НомСтрок.Позиция НомерСтроки,
	|	Запр.Собрано,
	|	Запр.Отгружено,
	|	Запр.Номенклатура,
	|	Запр.Упаковка,
	|	Запр.Размещение,
	|	Запр.Номенклатура.Вес 		Вес,
	|	Запр.Номенклатура.Объем 	Объем,
	|	СУММА(Запр.Количество) 		КАК Количество" + ?(ЕстьСуммы,",
	|	Запр.Цена,
	|	Запр.Акция,	
	|	Выбор когда
	|	Акции.ВариантРасчета = Значение(Перечисление.ВариантРасчетаЦеныПоАкции.СкидкаПоАкции)
	|	Тогда 1
	|	Когда
	|	Акции.ВариантРасчета = Значение(Перечисление.ВариантРасчетаЦеныПоАкции.СкидкиСуммируются)
	|	Тогда 2
	|	Иначе
	|	0
	|	Конец
	|	КАК ВариантРасчета,	
	//|	ВЫБОР 
	//|		КОГДА Запр.ВариантРасчета = ЗНАЧЕНИЕ(Перечисление.ВариантРасчетаЦеныПоАкции.СкидкаПоАкции) ТОГДА 1
	//|		КОГДА Запр.ВариантРасчета = ЗНАЧЕНИЕ(Перечисление.ВариантРасчетаЦеныПоАкции.СкидкиСуммируются) ТОГДА 2
	//|		ИНАЧЕ 0 КОНЕЦ ВариантРасчета,
	|	Запр.ПроцентРучнойСкидки,
	|	Запр.ПроцентАвтоматическойСкидки,
	|	Запр.СтавкаНДС,
	|	СУММА(Запр.СуммаРучнойСкидки),
	|	СУММА(Запр.СуммаАвтоматическойСкидки),
	|	СУММА(Запр.Сумма + Запр.СуммаРучнойСкидки + Запр.СуммаАвтоматическойСкидки) СуммаБезСкидки,
	|	СУММА(Запр.СуммаНДС),
	|	СУММА(Запр.Сумма)				КАК Сумма,
	|	СУММА(Запр.Сумма)		 		Всего" + ?(ЕстьДоставка, ", 
	|	СУММА(ЕСТЬNULL(Дост.Доставка,0))				Доставка,
	|	ЕСТЬNULL(Дост.ЦенаПоУмолчанию, Запр.Цена)		ЦенаПоУмолчанию", "") + "
	|","") + "
	|ИЗ
	|(
	|ВЫБРАТЬ
	|	0		НомерСтроки,
	|	ЛОЖЬ Собрано,
	|	ЛОЖЬ Отгружено,
	|	РегЗак.Номенклатура,
	|	РегЗак.Упаковка,
	|	РегЗак.Размещение,
	|	РегЗак.КоличествоОстаток 	Количество" + ?(ЕстьСуммы,",
	|	РегЗак.Цена,
	|	РегЗак.Акция,	
	//|	РегЗак.Акция.ВариантРасчета ВариантРасчета,
	|	РегЗак.ПроцентРучнойСкидки,
	|	РегЗак.ПроцентАвтоматическойСкидки,
	|	РегЗак.Цена * РегЗак.КоличествоОстаток * РегЗак.ПроцентРучнойСкидки * 0.01 				СуммаРучнойСкидки,
	|	РегЗак.Цена * РегЗак.КоличествоОстаток  * РегЗак.ПроцентАвтоматическойСкидки * 0.01 	СуммаАвтоматическойСкидки,
	|	РегЗак.СтавкаНДС,
	|" + ПолучитьСуммуНДСВЗапросе("РегЗак","Остаток", Параметры.ИмяЗаказа) + " СуммаНДС,
	|	РегЗак.СуммаОстаток 					Сумма
	|","") + "
	|ИЗ
	|	РегистрНакопления." + Параметры.ИмяРегистра + ".Остатки(" + ?(ОперативнаяДата, "&ДатаВыполнения","") + "," + Параметры.ИмяЗаказа + " = &Заказ) РегЗак
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	РегЗак.Номенклатура,
	|	РегЗак.Упаковка,
	|	РегЗак.Размещение,
	|	РегЗак.КоличествоРасход 	Количество" + ?(ЕстьСуммы,",
	|	РегЗак.Цена,
	|	РегЗак.Акция,
	//|	РегЗак.Акция.ВариантРасчета ВариантРасчета,
	|	РегЗак.ПроцентРучнойСкидки,
	|	РегЗак.ПроцентАвтоматическойСкидки,
	|	РегЗак.Цена * РегЗак.КоличествоРасход * РегЗак.ПроцентРучнойСкидки * 0.01 			СуммаРучнойСкидки,
	|	РегЗак.Цена * РегЗак.КоличествоРасход * РегЗак.ПроцентАвтоматическойСкидки * 0.01 	СуммаАвтоматическойСкидки,
	|	РегЗак.СтавкаНДС,
	|" + ПолучитьСуммуНДСВЗапросе("РегЗак","Расход", Параметры.ИмяЗаказа) + " СуммаНДС,
	|	РегЗак.СуммаРасход			Сумма
	|","") + "
	|ИЗ
	|	РегистрНакопления." + Параметры.ИмяРегистра + ".ОстаткиИОбороты(," + ?(ОперативнаяДата, "&ДатаВыполнения","") + ",РЕГИСТРАТОР,," + Параметры.ИмяЗаказа + " = &Заказ) РегЗак
	|ГДЕ
	|	РегЗак.Регистратор ССЫЛКА Документ." + ?(ЕстьСуммы, ?(СсылкаПроцесс.Заказ.Склад.ПередачаТовараМВЗ ИЛИ НЕ СсылкаПроцесс.Заказ.МВЗ.Пустая() ИЛИ СсылкаПроцесс.Заказ.ПередачаТовара, "ПередачаТовара", "РеализацияТоваров"),"ПриемТоваров") + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Тов.НомерСтроки,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	Тов.Номенклатура,
	|	Тов.Упаковка,
	|	Тов.Размещение,
	|	Тов.Количество 			КАК Количество" + ?(ЕстьСуммы,",
	|	Тов.Цена,
	|	Тов.Акция,
	//|	Тов.Акция.ВариантРасчета ВариантРасчета,
	|	Тов.ПроцентРучнойСкидки,
	|	Тов.ПроцентАвтоматическойСкидки,
	|	Тов.СуммаРучнойСкидки,
	|	Тов.СуммаАвтоматическойСкидки,
	|	Тов.СтавкаНДС,
	|	Тов.СуммаНДС,
	|	Тов.Сумма				КАК Сумма
	|","") + "
	|ИЗ
	|	Документ." + Параметры.ИмяДокумента + ".Товары Тов
	|ГДЕ           
	|	Тов.Ссылка = &Заказ И
	|	Тов.Ссылка.Проведен = Ложь
	|) Запр
	|" + ?(ЕстьДоставка,"
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|	(ВЫБРАТЬ * ИЗ Документ.ИнтернетЗаказПокупателя.Доставка ГДЕ Ссылка = &Заказ) Дост 
	|	ПО Дост.Номенклатура = Запр.Номенклатура И Дост.Упаковка = Запр.Упаковка И Дост.Размещение  = Запр.Размещение И Дост.Цена = Запр.Цена И
	|		Дост.ПроцентРучнойСкидки = Запр.ПроцентРучнойСкидки И Дост.ПроцентАвтоматическойСкидки = Запр.ПроцентАвтоматическойСкидки", "") + "
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(ВЫБРАТЬ Номенклатура, Позиция ИЗ РегистрСведений.ПорядокСтрокНоменклатуры ГДЕ Объект = &Заказ) НомСтрок
	|ПО	
	|	Запр.Номенклатура = НомСтрок.Номенклатура
	|" + ?(ЕстьСуммы,",
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Документ.Акция КАК Акции
	|ПО	
	|	Запр.Акция = Акции.Ссылка
	|
	|","") + "
	|ГДЕ
	|	Количество <> 0
	|
	|СГРУППИРОВАТЬ ПО
	//|	Запр.НомерСтроки,
	|	НомСтрок.Позиция,
	|	Запр.Собрано,
	|	Запр.Отгружено,
	|	Запр.Номенклатура,
	|	Запр.Упаковка,
	//|	Запр.ВариантРасчета,
	|	Запр.Номенклатура.Вес,
	|	Запр.Номенклатура.Объем,
	|	Запр.Размещение" + ?(ЕстьСуммы,",
	|	Запр.Цена,
	|	Запр.Акция,
	|	Акции.ВариантРасчета,
	|	Запр.ПроцентРучнойСкидки,
	|	Запр.ПроцентАвтоматическойСкидки,
	|	Запр.СтавкаНДС" + ?(ЕстьДоставка, ", 
	|	ЕСТЬNULL(Дост.ЦенаПоУмолчанию, Запр.Цена)", "") + "
	|","") + "
	|УПОРЯДОЧИТЬ ПО НомСтрок.Позиция
	|;
	|ВЫБРАТЬ
	|	Номенклатура,
	|	Упаковка,
	|	ВЫБОР КОГДА СкладЯчейка ССЫЛКА Справочник.Ячейки ТОГДА СкладЯчейка.Владелец ИНАЧЕ СкладЯчейка КОНЕЦ Размещение,
	|	СобраноОстаток Количество
	|ИЗ
	|	РегистрНакопления.СборкаЗаказа.Остатки(,Заказ = &Заказ)");
	
	Заказ = СсылкаПроцесс.Заказ;
	
	Запрос.УстановитьПараметр("СсылкаБП", 			СсылкаПроцесс);
	Запрос.УстановитьПараметр("ПустаяРеализация", 	Документы.РеализацияТоваров.ПустаяСсылка());
	Запрос.УстановитьПараметр("Заказ", 				Заказ);
		
	Если ОперативнаяДата Тогда
		Запрос.УстановитьПараметр("ДатаВыполнения", СсылкаЗадача.ДатаВыполнения);
	КонецЕсли;
	
	Пакет = Запрос.ВыполнитьПакет();
	
	Товары				= Пакет[0].Выгрузить();
	СобранныеТовары 	= Пакет[1].Выгрузить();
	
	// Разнесем по отгруженным
	
	КонвертацияТипов.ПроставитьФлагВТаблицеПотаблицеСравнения(
				Товары, 
				СобранныеТовары, 
				"Собрано", "Номенклатура,Упаковка,Размещение",,
				"ТипЗнч(Строка.Размещение) <> Тип(""Число"")");
	
	// Перечитаем суммы в колонках
	
	Если ТипЗнч(Заказ) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
		ТипЦен = Неопределено; Валюта = Неопределено; Контрагент = Неопределено; Партнер = Неопределено; ЕстьАкция = Ложь; ЕстьЦенаПоАкции = Ложь;
	Иначе
		ТипЦен = Заказ.ТипЦен; Валюта = Заказ.Валюта; Контрагент = Заказ.Контрагент; Партнер = Заказ.Партнер; ЕстьАкция = Истина; ЕстьЦенаПоАкции = Истина;
	КонецЕсли;
	
	Если ЕстьСуммы Тогда
		СтруктураКолонокТовары = Новый Структура("ЕстьПроцентРучнойСкидки, ЕстьПроцентАвтоматическойСкидки, ТипЦен, Валюта, Партнер, Контрагент, ЕстьАкция, ЕстьЦенаПоАкции, ЕстьУпаковка, ЕстьКоличество, ЕстьЦена, ЕстьСуммаБезСкидки, ЕстьСумма, ЕстьСуммаАвтоматическойСкидки, ЕстьСуммаРучнойСкидки, ЕстьСтавкаНДС, ЕстьСуммаНДС, СуммаВключаетНДС, ЕстьВсего, ЕстьДоставка, ЕстьАкция",
												Истина, Истина, ТипЦен, Валюта, Партнер, Контрагент, ЕстьАкция, ЕстьЦенаПоАкции, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, СсылкаПроцесс.Заказ.СуммаВключаетНДС, Ложь, ЕстьДоставка, Истина);
	Иначе
		СтруктураКолонокТовары = Новый Структура("ЕстьПроцентРучнойСкидки, ЕстьПроцентАвтоматическойСкидки, ТипЦен, Валюта, Партнер,Контрагент, ЕстьАкция, ЕстьЦенаПоАкции, ЕстьУпаковка, ЕстьКоличество, ЕстьЦена, ЕстьСуммаБезСкидки, ЕстьСумма, ЕстьСуммаАвтоматическойСкидки, ЕстьСуммаРучнойСкидки, ЕстьСтавкаНДС, ЕстьСуммаНДС, СуммаВключаетНДС, ЕстьВсего, ЕстьДоставка, ЕстьАкция",
												Ложь, Ложь, ТипЦен, Валюта, Партнер, Контрагент, ЕстьАкция, ЕстьЦенаПоАкции, Истина, Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь);
	КонецЕсли;
	
	
	ФункцииФормДокументов.РассчитатьСуммыТабличныхЧастейВоВсехСтроках(Товары, СтруктураКолонокТовары, Ложь);
	
	// Отсортируем
	
	Товары.Сортировать("НомерСтроки, Номенклатура, Упаковка");
	
	Возврат Товары;
	
КонецФункции


Функция ПолучитьТаблицуТоваров(СсылкаПроцесс, СсылкаЗадача = Неопределено, ЕстьСуммы = Истина, Параметры = Неопределено) Экспорт
	
	// Пошлем по старинке если это старый заказ
	
	Заказ = СсылкаПроцесс.Заказ;
	Если Не Заказ.СпособРазмещенияБезЗаказа Тогда
		Возврат ПолучитьТаблицуТоваровСтарымСпособом(СсылкаПроцесс, СсылкаЗадача, ЕстьСуммы); КонецЕсли;
	
	// Иницилизируем параметры
	
	Если Параметры = Неопределено Тогда Параметры = ПолучитьПараметрыДляЗапроса(Заказ) КонецЕсли;
	ОперативнаяДата = СсылкаЗадача <> Неопределено И СсылкаЗадача.Выполнена; // Определим дату считывания
	ЕстьДоставка 	= параметры.ИмяЗаказа = "ИнтернетЗаказ";
	
#Область Запрос

	//Запрос = Новый Запрос("
	//|ВЫБРАТЬ
	////|	Запр.НомерСтроки,
	//|	НомСтрок.Позиция НомерСтроки,
	//|	Запр.Номенклатура,
	//|	Запр.Упаковка,
	//|	Запр.Номенклатура.Вес 		Вес,
	//|	Запр.Номенклатура.Объем 	Объем,
	//|	Запр.Цена,
	//|	КОЛИЧЕСТВО(Запр.Номенклатура) КоличествоПозиций,
	//|	СУММА(Запр.Количество) 		КАК Количество
	////|	СУММА(ВЫБОР КОГДА ЕСТЬNULL(НомСтрок.Количество, 0) = 0 ТОГДА Запр.Количество ИНАЧЕ НомСтрок.Количество КОНЕЦ) Количество
	//|" + ?(ЕстьСуммы,",
	//|	Запр.Акция,	
	//|	Выбор когда
	//|	Акции.ВариантРасчета = Значение(Перечисление.ВариантРасчетаЦеныПоАкции.СкидкаПоАкции)
	//|	Тогда 1
	//|	Когда
	//|	Акции.ВариантРасчета = Значение(Перечисление.ВариантРасчетаЦеныПоАкции.СкидкиСуммируются)
	//|	Тогда 2
	//|	Иначе
	//|	0
	//|	Конец
	//|	КАК ВариантРасчета,	
	//|	Запр.ПроцентРучнойСкидки,
	//|	Запр.ПроцентАвтоматическойСкидки,
	//|	Запр.СтавкаНДС,
	//|	СУММА(Запр.СуммаРучнойСкидки),
	//|	СУММА(Запр.СуммаАвтоматическойСкидки),
	//|	СУММА(Запр.Сумма + Запр.СуммаРучнойСкидки + Запр.СуммаАвтоматическойСкидки) СуммаБезСкидки,
	//|	СУММА(Запр.СуммаНДС),
	//|	СУММА(Запр.Сумма)								Сумма,
	//|	СУММА(Запр.Сумма)		 						Всего" + ?(ЕстьДоставка, ", 
	//|	СУММА(ЕСТЬNULL(Дост.Доставка,0))				Доставка,
	//|	ЕСТЬNULL(Дост.ЦенаПоУмолчанию, Запр.Цена)		ЦенаПоУмолчанию", "") + "
	//|","") + "
	//|ИЗ
	//|(
	//|ВЫБРАТЬ
	//|	0		НомерСтроки,
	//|	РегЗак.Номенклатура,
	//|	РегЗак.Упаковка,
	//|	РегЗак.Цена,
	//|	РегЗак.КоличествоОстаток 	Количество" + ?(ЕстьСуммы,",
	//|	РегЗак.Акция,	
	//|	РегЗак.ПроцентРучнойСкидки,
	//|	РегЗак.ПроцентАвтоматическойСкидки,
	//|	РегЗак.Цена * РегЗак.КоличествоОстаток * РегЗак.ПроцентРучнойСкидки * 0.01 				СуммаРучнойСкидки,
	//|	РегЗак.Цена * РегЗак.КоличествоОстаток  * РегЗак.ПроцентАвтоматическойСкидки * 0.01 	СуммаАвтоматическойСкидки,
	//|	РегЗак.СтавкаНДС,
	//|" + ПолучитьСуммуНДСВЗапросе("РегЗак","Остаток", Параметры.ИмяЗаказа) + " СуммаНДС,
	//|	РегЗак.СуммаОстаток 					Сумма
	//|","") + "
	//|ИЗ
	//|	РегистрНакопления." + Параметры.ИмяРегистра + ".Остатки(" + ?(ОперативнаяДата, "&ДатаВыполнения","") + "," + Параметры.ИмяЗаказа + " = &Заказ) РегЗак
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	0,
	//|	РегЗак.Номенклатура,
	//|	РегЗак.Упаковка,
	//|	РегЗак.Цена,
	//|	РегЗак.КоличествоРасход 	Количество" + ?(ЕстьСуммы,",
	//|	РегЗак.Акция,
	//|	РегЗак.ПроцентРучнойСкидки,
	//|	РегЗак.ПроцентАвтоматическойСкидки,
	//|	РегЗак.Цена * РегЗак.КоличествоРасход * РегЗак.ПроцентРучнойСкидки * 0.01 			СуммаРучнойСкидки,
	//|	РегЗак.Цена * РегЗак.КоличествоРасход * РегЗак.ПроцентАвтоматическойСкидки * 0.01 	СуммаАвтоматическойСкидки,
	//|	РегЗак.СтавкаНДС,
	//|" + ПолучитьСуммуНДСВЗапросе("РегЗак","Расход", Параметры.ИмяЗаказа) + " СуммаНДС,
	//|	РегЗак.СуммаРасход			Сумма
	//|","") + "
	//|ИЗ
	//|	РегистрНакопления." + Параметры.ИмяРегистра + ".ОстаткиИОбороты(," + ?(ОперативнаяДата, "&ДатаВыполнения","") + ",РЕГИСТРАТОР,," + Параметры.ИмяЗаказа + " = &Заказ) РегЗак
	//|ГДЕ
	//|	РегЗак.Регистратор ССЫЛКА Документ." + ?(ЕстьСуммы, ?(СсылкаПроцесс.Заказ.Склад.ПередачаТовараМВЗ ИЛИ НЕ СсылкаПроцесс.Заказ.МВЗ.Пустая() ИЛИ СсылкаПроцесс.Заказ.ПередачаТовара, "ПередачаТовара", "РеализацияТоваров"),"ПриемТоваров") + "
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	Тов.НомерСтроки,
	//|	Тов.Номенклатура,
	//|	Тов.Упаковка,
	//|	Тов.Цена,
	//|	Тов.Количество 			КАК Количество" + ?(ЕстьСуммы,",
	//|	Тов.Акция,
	//|	Тов.ПроцентРучнойСкидки,
	//|	Тов.ПроцентАвтоматическойСкидки,
	//|	Тов.СуммаРучнойСкидки,
	//|	Тов.СуммаАвтоматическойСкидки,
	//|	Тов.СтавкаНДС,
	//|	Тов.СуммаНДС,
	//|	Тов.Сумма				КАК Сумма
	//|","") + "
	//|ИЗ
	//|	Документ." + Параметры.ИмяДокумента + ".Товары Тов
	//|ГДЕ           
	//|	Тов.Ссылка = &Заказ И
	//|	Тов.Ссылка.Проведен = Ложь
	//|) Запр
	//|" + ?(ЕстьДоставка,"
	//|	ЛЕВОЕ СОЕДИНЕНИЕ
	//|	(	ВЫБРАТЬ * 
	//|		ИЗ 		Документ.ИнтернетЗаказПокупателя.Доставка ГДЕ Ссылка = &Заказ) Дост 
	//|		ПО 	Дост.Номенклатура 					= Запр.Номенклатура И 
	//|			Дост.Упаковка 						= Запр.Упаковка И Дост.Цена = Запр.Цена И
	//|			Дост.ПроцентРучнойСкидки 			= Запр.ПроцентРучнойСкидки И 
	//|			Дост.ПроцентАвтоматическойСкидки 	= Запр.ПроцентАвтоматическойСкидки", "") + "
	//|
	//|ЛЕВОЕ СОЕДИНЕНИЕ
	//|	РегистрСведений.ПорядокСтрокНоменклатуры НомСтрок
	////|	(ВЫБРАТЬ Номенклатура, Позиция ИЗ РегистрСведений.ПорядокСтрокНоменклатуры ГДЕ Объект = &Заказ) НомСтрок
	//|
	//|ПО	
	//|	НомСтрок.Объект = &Заказ И
	//|	Запр.Номенклатура = НомСтрок.Номенклатура
	//|" + ?(ЕстьСуммы,",
	//|ЛЕВОЕ СОЕДИНЕНИЕ
	//|	Документ.Акция КАК Акции
	//|ПО	
	//|	Запр.Акция = Акции.Ссылка
	//|","") + "
	//|
	//|ГДЕ Запр.Количество <> 0
	//|
	//|СГРУППИРОВАТЬ ПО
	////|	Запр.НомерСтроки,
	//|	НомСтрок.Позиция,
	//|	Запр.Номенклатура,
	//|	Запр.Упаковка,
	//|	Запр.Номенклатура.Вес,
	//|	Запр.Номенклатура.Объем,
	//|	Запр.Цена,
	//|	Запр.Акция,
	//|   Акции.ВариантРасчета,
	//|	Запр.ПроцентРучнойСкидки,
	//|	Запр.ПроцентАвтоматическойСкидки,
	//|	Запр.СтавкаНДС" + ?(ЕстьДоставка, ", 
	//|	ЕСТЬNULL(Дост.ЦенаПоУмолчанию, Запр.Цена)", "") + "
	//|ИМЕЮЩИЕ СУММА(Запр.Количество) <> 0
	//|
	//|УПОРЯДОЧИТЬ ПО НомСтрок.Позиция");
	
	
	
	//ВозможностьДублейСтрок. Теперь читаем из табличной части документа
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Запр.НомерСтроки,
	|	Запр.Номенклатура,
	|	Запр.НоменклатураУчет,
	|	Запр.Упаковка,
	|	Запр.Номенклатура.Вес 		Вес,
	|	Запр.Номенклатура.Объем 	Объем,
	|	Запр.Цена,
	|	Запр.Номенклатура 		КоличествоПозиций,
	|	Запр.Количество 		КАК Количество
	|" + ?(ЕстьСуммы,",
	|	Запр.Акция,	
	|	Выбор когда
	|	Акции.ВариантРасчета = Значение(Перечисление.ВариантРасчетаЦеныПоАкции.СкидкаПоАкции)
	|	Тогда 1
	|	Когда
	|	Акции.ВариантРасчета = Значение(Перечисление.ВариантРасчетаЦеныПоАкции.СкидкиСуммируются)
	|	Тогда 2
	|	Иначе
	|	0
	|	Конец
	|	КАК ВариантРасчета,	
	|	Запр.ПроцентРучнойСкидки,
	|	Запр.ПроцентАвтоматическойСкидки,
	|	Запр.СтавкаНДС,
	|	Запр.СуммаРучнойСкидки,
	|	Запр.СуммаАвтоматическойСкидки,
	|	Запр.Сумма + Запр.СуммаРучнойСкидки + Запр.СуммаАвтоматическойСкидки   КАК СуммаБезСкидки,
	|	Запр.СуммаНДС,
	|	Запр.Сумма								Сумма,
	|	Запр.Сумма		 						Всего
	|","") + "
	|"+ ?(ЕстьДоставка, ", 
	|	(ЕСТЬNULL(Дост.Доставка,0))				Доставка,
	|	ЕСТЬNULL(Дост.ЦенаПоУмолчанию, Запр.Цена)		ЦенаПоУмолчанию", "") + "
	|ИЗ
	|	Документ." + Параметры.ИмяДокумента + ".Товары Запр
	|" + ?(ЕстьДоставка,"
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|	(	ВЫБРАТЬ * 
	|		ИЗ 		Документ.ИнтернетЗаказПокупателя.Доставка ГДЕ Ссылка = &Заказ) Дост 
	|		ПО 	Дост.Номенклатура 					= Запр.Номенклатура И 
	|			Дост.Упаковка 						= Запр.Упаковка И Дост.Цена = Запр.Цена И
    |			Дост.ПроцентРучнойСкидки 			= Запр.ПроцентРучнойСкидки И 
	|			Дост.ПроцентАвтоматическойСкидки 	= Запр.ПроцентАвтоматическойСкидки", "") + "
	|
	|" + ?(ЕстьСуммы,",
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Документ.Акция КАК Акции
	|ПО	
	|	Запр.Акция = Акции.Ссылка
	|","") + "
	|
	|ГДЕ Запр.Ссылка = &Заказ
	|
	|УПОРЯДОЧИТЬ ПО Запр.НомерСтроки");
	
	
	
	Заказ = СсылкаПроцесс.Заказ;
	
	Запрос.УстановитьПараметр("СсылкаБП", 			СсылкаПроцесс);
	Запрос.УстановитьПараметр("ПустаяРеализация", 	Документы.РеализацияТоваров.ПустаяСсылка());
	Запрос.УстановитьПараметр("Заказ", 				Заказ);
	Если ОперативнаяДата Тогда Запрос.УстановитьПараметр("ДатаВыполнения", СсылкаЗадача.ДатаВыполнения); КонецЕсли;
	
#КонецОбласти
	
	Товары = Запрос.Выполнить().Выгрузить();
	
		// Проверим есть ли в выгрузке товары которые идут несколькими позициями
		
		//Если ЕстьСуммы И Товары.НайтиСтроки(Новый Структура("КоличествоПозиций", 1)).Количество() < Товары.Количество() Тогда
		//	ПересчитатьСуммыТоваровСНесколькимиПозициями(Товары, "Сумма,Всего,СуммаБезСкидки" + ?(ЕстьДоставка, ",Доставка", "")); КонецЕсли;

	// Перечитаем суммы в колонках
	
	ЕстьКасса =  НЕ Параметры.ИмяЗаказа = "ИнтернетЗаказ";
	
	Касса = ?(ЕстьКасса, Заказ.Касса, Неопределено);
	
	Если ЕстьСуммы Тогда
	
		Если ТипЗнч(Заказ) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
			ТипЦен = Неопределено; Валюта = Неопределено; Контрагент = Неопределено; Партнер = Неопределено; ЕстьАкция = Ложь; ЕстьЦенаПоАкции = Ложь;
			
		Иначе	
			ТипЦен = Заказ.ТипЦен; Валюта = Заказ.Валюта; Контрагент = Заказ.Контрагент; Партнер = Заказ.Партнер; ЕстьАкция = Истина; ЕстьЦенаПоАкции = Истина; КонецЕсли;
		
		СтруктураКолонокТовары = 
			Новый Структура("ЕстьПроцентРучнойСкидки, ЕстьПроцентАвтоматическойСкидки, ТипЦен, Валюта, Контрагент, Партнер, ЕстьАкция, ЕстьЦенаПоАкции, ЕстьУпаковка, ЕстьКоличество, ЕстьЦена, ЕстьСуммаБезСкидки, ЕстьСумма, ЕстьСуммаАвтоматическойСкидки, ЕстьСуммаРучнойСкидки, ЕстьСтавкаНДС, ЕстьСуммаНДС, СуммаВключаетНДС, ЕстьВсего, ЕстьДоставка, ЕстьАкция, ЕстьЦенаДо, Касса, РасчетСкидкиОтЦены",
					Истина, Истина, ТипЦен, Валюта, Контрагент, Партнер, ЕстьАкция, ЕстьЦенаПоАкции, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Заказ.СуммаВключаетНДС, Истина, ЕстьДоставка, Истина, ЕстьДоставка, Касса, Заказ.РасчетСкидкиОтЦены);
					
		 ФункцииФормДокументов.РассчитатьСуммыТабличныхЧастейВоВсехСтроках(Товары, СтруктураКолонокТовары, Ложь); 
		 
	 КонецЕсли;
	
	// Отсортируем
	
	Товары.Сортировать("НомерСтроки, Номенклатура, Упаковка");
	
	// Вернем
	Возврат Товары;
	
КонецФункции


Функция ПолучитьТаблицуТоваров_Ст(СсылкаПроцесс, СсылкаЗадача = Неопределено, ЕстьСуммы = Истина, РасшифровкаПоРазмещению = Ложь, РасшифровкаПоСборке = Ложь) Экспорт
	
//	// Пошлем по старинке если это старый заказ
//	
//	Заказ = СсылкаПроцесс.Заказ;
//	Если Заказ.СпособРазмещенияБезЗаказа Тогда
//		Возврат ПолучитьТаблицуТоваровСтарымСпособом(СсылкаПроцесс, СсылкаЗадача, ЕстьСуммы); КонецЕсли;
//	
//	// Иницилизируем параметры
//	
//	Параметры 		= ПолучитьПараметрыДляЗапроса(Заказ);
//	ОперативнаяДата = СсылкаЗадача <> Неопределено И СсылкаЗадача.Выполнена; // Определим дату считывания
//	ЕстьДоставка 	= параметры.ИмяЗаказа = "ИнтернетЗаказ";
//	
//#Область Запрос

//	Инд = 0; ЗапросТабл = Новый Структура;
//	
//	Запрос = Новый Запрос("
//	|ВЫБРАТЬ
//	|	Запр.НомерСтроки,
//	|	Запр.Собрано,
//	|	Запр.Отгружено,
//	|	Запр.Номенклатура,
//	|	Запр.Упаковка,
//	|" + ?(РасшифровкаПоРазмещению,""""" КАК Размещение","") + "
//	|	Запр.Номенклатура.Вес 		Вес,
//	|	Запр.Номенклатура.Объем 	Объем,
//	|	СУММА(Запр.Количество) 		КАК Количество" + ?(ЕстьСуммы,",
//	|	Запр.Цена,
//	|	Запр.Акция,	
//	|	Запр.ПроцентРучнойСкидки,
//	|	Запр.ПроцентАвтоматическойСкидки,
//	|	Запр.СтавкаНДС,
//	|	СУММА(Запр.СуммаРучнойСкидки),
//	|	СУММА(Запр.СуммаАвтоматическойСкидки),
//	|	СУММА(Запр.Сумма + Запр.СуммаРучнойСкидки + Запр.СуммаАвтоматическойСкидки) СуммаБезСкидки,
//	|	СУММА(Запр.СуммаНДС),
//	|	СУММА(Запр.Сумма)				КАК Сумма,
//	|	СУММА(Запр.Сумма)		 		Всего" + ?(ЕстьДоставка, ", 
//	|	СУММА(ЕСТЬNULL(Дост.Доставка,0))				Доставка,
//	|	ЕСТЬNULL(Дост.ЦенаПоУмолчанию, Запр.Цена)		ЦенаПоУмолчанию", "") + "
//	|","") + "
//	|ИЗ
//	|(
//	|ВЫБРАТЬ
//	|	0		НомерСтроки,
//	|	ЛОЖЬ Собрано,
//	|	ЛОЖЬ Отгружено,
//	|	РегЗак.Номенклатура,
//	|	РегЗак.Упаковка,
//	|" + ?(РасшифровкаПоРазмещению,""""" КАК Размещение","") + "
//	|	РегЗак.КоличествоОстаток 	Количество" + ?(ЕстьСуммы,",
//	|	РегЗак.Цена,
//	|	РегЗак.Акция,	
//	|	РегЗак.ПроцентРучнойСкидки,
//	|	РегЗак.ПроцентАвтоматическойСкидки,
//	|	РегЗак.Цена * РегЗак.КоличествоОстаток * РегЗак.ПроцентРучнойСкидки * 0.01 				СуммаРучнойСкидки,
//	|	РегЗак.Цена * РегЗак.КоличествоОстаток  * РегЗак.ПроцентАвтоматическойСкидки * 0.01 	СуммаАвтоматическойСкидки,
//	|	РегЗак.СтавкаНДС,
//	|" + ПолучитьСуммуНДСВЗапросе("РегЗак","Остаток", Параметры.ИмяЗаказа) + " СуммаНДС,
//	|	РегЗак.СуммаОстаток 					Сумма
//	|","") + "
//	|ИЗ
//	|	РегистрНакопления." + Параметры.ИмяРегистра + ".Остатки(" + ?(ОперативнаяДата, "&ДатаВыполнения","") + "," + Параметры.ИмяЗаказа + " = &Заказ) РегЗак
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ
//	|	0,
//	|	ЛОЖЬ,
//	|	ИСТИНА,
//	|	РегЗак.Номенклатура,
//	|	РегЗак.Упаковка,
//	|" + ?(РасшифровкаПоРазмещению,""""" КАК Размещение","") + "
//	|	РегЗак.КоличествоРасход 	Количество" + ?(ЕстьСуммы,",
//	|	РегЗак.Цена,
//	|	РегЗак.Акция,
//	|	РегЗак.ПроцентРучнойСкидки,
//	|	РегЗак.ПроцентАвтоматическойСкидки,
//	|	РегЗак.Цена * РегЗак.КоличествоРасход * РегЗак.ПроцентРучнойСкидки * 0.01 			СуммаРучнойСкидки,
//	|	РегЗак.Цена * РегЗак.КоличествоРасход * РегЗак.ПроцентАвтоматическойСкидки * 0.01 	СуммаАвтоматическойСкидки,
//	|	РегЗак.СтавкаНДС,
//	|" + ПолучитьСуммуНДСВЗапросе("РегЗак","Расход", Параметры.ИмяЗаказа) + " СуммаНДС,
//	|	РегЗак.СуммаРасход			Сумма
//	|","") + "
//	|ИЗ
//	|	РегистрНакопления." + Параметры.ИмяРегистра + ".ОстаткиИОбороты(," + ?(ОперативнаяДата, "&ДатаВыполнения","") + ",РЕГИСТРАТОР,," + Параметры.ИмяЗаказа + " = &Заказ) РегЗак
//	|ГДЕ
//	|	РегЗак.Регистратор ССЫЛКА Документ." + ?(ЕстьСуммы, ?(СсылкаПроцесс.Заказ.Склад.ПередачаТовараМВЗ ИЛИ НЕ СсылкаПроцесс.Заказ.МВЗ.Пустая() ИЛИ СсылкаПроцесс.Заказ.ПередачаТовара, "ПередачаТовара", "РеализацияТоваров"),"ПриемТоваров") + "
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ
//	|	Тов.НомерСтроки,
//	|	ЛОЖЬ,
//	|	ЛОЖЬ,
//	|	Тов.Номенклатура,
//	|	Тов.Упаковка,
//	|" + ?(РасшифровкаПоРазмещению,""""" КАК Размещение","") + "
//	|	Тов.Количество 			КАК Количество" + ?(ЕстьСуммы,",
//	|	Тов.Цена,
//	|	Тов.Акция,
//	|	Тов.ПроцентРучнойСкидки,
//	|	Тов.ПроцентАвтоматическойСкидки,
//	|	Тов.СуммаРучнойСкидки,
//	|	Тов.СуммаАвтоматическойСкидки,
//	|	Тов.СтавкаНДС,
//	|	Тов.СуммаНДС,
//	|	Тов.Сумма				КАК Сумма
//	|","") + "
//	|ИЗ
//	|	Документ." + Параметры.ИмяДокумента + ".Товары Тов
//	|ГДЕ           
//	|	Тов.Ссылка = &Заказ И
//	|	Тов.Ссылка.Проведен = Ложь
//	|) Запр
//	|" + ?(ЕстьДоставка,"
//	|	ЛЕВОЕ СОЕДИНЕНИЕ
//	|	(ВЫБРАТЬ * ИЗ Документ.ИнтернетЗаказПокупателя.Доставка ГДЕ Ссылка = &Заказ) Дост 
//	|	ПО Дост.Номенклатура = Запр.Номенклатура И Дост.Упаковка = Запр.Упаковка И Дост.Размещение  = Запр.Размещение И Дост.Цена = Запр.Цена И
//    |		Дост.ПроцентРучнойСкидки = Запр.ПроцентРучнойСкидки И Дост.ПроцентАвтоматическойСкидки = Запр.ПроцентАвтоматическойСкидки", "") + "
//	|ГДЕ
//	|	Количество <> 0
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	Запр.НомерСтроки,
//	|	Запр.Собрано,
//	|	Запр.Отгружено,
//	|	Запр.Номенклатура,
//	|	Запр.Упаковка,
//	|	Запр.Номенклатура.Вес,
//	|	Запр.Номенклатура.Объем,
//	|	Запр.Размещение" + ?(ЕстьСуммы,",
//	|	Запр.Цена,
//	|	Запр.Акция,
//	|	Запр.ПроцентРучнойСкидки,
//	|	Запр.ПроцентАвтоматическойСкидки,
//	|	Запр.СтавкаНДС" + ?(ЕстьДоставка, ", 
//	|	ЕСТЬNULL(Дост.ЦенаПоУмолчанию, Запр.Цена)", "") + "
//	|","") + "
//	|;");
//	
//	// СБОРКА
//	
//	Если РасшифровкаПоСборке Тогда
//	
//		ЗапросТабл.Вставить("Сборка", Инд); Инд = Инд + 1;
//		Запрос.Текст = Запрос.Текст + "
//		|ВЫБРАТЬ
//		|	Номенклатура,
//		|	Упаковка,
//		|	ВЫБОР КОГДА СкладЯчейка ССЫЛКА Справочник.Ячейки ТОГДА СкладЯчейка.Владелец ИНАЧЕ СкладЯчейка КОНЕЦ Размещение,
//		|	СобраноОстаток Количество
//		|ИЗ
//		|	РегистрНакопления.СборкаЗаказа.Остатки(,Заказ = &Заказ)
//		|;"; КонецЕсли;
//	
//	// РАЗМЕЩЕНИЕ
//	
//	Если РасшифровкаПоРазмещению Тогда
//		
//		ЗапросТабл.Вставить("Размещение", Инд); Инд = Инд + 1;
//		Запрос.Текст = Запрос.Текст + "
//		|ВЫБРАТЬ 
//		|	Размещение,
//		|	Номенклатура,
//		|	КоличествоОстаток Количество
//		|ИЗ
//		|	РегистрНакопления.ТоварыВРезерве.Остатки(,ДокументРезерва = &Заказ)
//		|;"; КонецЕсли;
//	
//	Заказ = СсылкаПроцесс.Заказ;
//	
//	Запрос.УстановитьПараметр("СсылкаБП", 			СсылкаПроцесс);
//	Запрос.УстановитьПараметр("ПустаяРеализация", 	Документы.РеализацияТоваров.ПустаяСсылка());
//	Запрос.УстановитьПараметр("Заказ", 				Заказ);
//	Если ОперативнаяДата Тогда Запрос.УстановитьПараметр("ДатаВыполнения", СсылкаЗадача.ДатаВыполнения); КонецЕсли;
//	
//	Пакет = Запрос.ВыполнитьПакет();
//	
//#КонецОбласти
//	
//	Товары = Пакет[0].Выгрузить();
//	Если РасшифровкаПоСборке Тогда 		СобранныеТовары = Пакет[ЗапросТабл.Сборка].Выгрузить() КонецЕсли;
//	Если РасшифровкаПоРазмещению Тогда 	 КонецЕсли;
//	
//	// Заполним размещение
//	Если РасшифровкаПоРазмещению Тогда
//		
//		ТипЧисло 		= Тип("Число");
//		ТоварыВрезерве	= Пакет[ЗапросТабл.Размещение].Выгрузить();
//		ТоварыВрезерве.Индексы.Добавить("Номенклатура");
//		
//		Для Каждого Строка ИЗ Товары Цикл
//			СтрокиРазм = Товары.НайтиСтроки(Новый Структура("Номенклатура", Строка.Номенклатура));
//			стр = ""; ЕстьОчередь = Ложь;
//			Для Каждого СТрокаРазм Из СтрокиРазм Цикл стр = стр + ?(стр = "","",";"); Если ТипЗнч(СтрокаРазм) = ТипЧисло Тогда ЕстьОчередь = Истина Иначе стр = стр + Строка(СТрокаРазм.Размещение) + ":" + СТрокаРазм.Количество; КонецЕсли; КонецЦикла;
//			Если ЕстьОчередь Тогда стр = стр + ?(стр = "","",";") + "в очереди:" + СтрокиРазм.Количество; КонецЕсли; 
//			
//			Строка.Размещение = стр; КонецЦикла; КонецЕсли;
//	
//	//// Разнесем по отгруженным
//	//
//	//КонвертацияТипов.ПроставитьФлагВТаблицеПотаблицеСравнения(
//	//			Товары, 
//	//			СобранныеТовары, 
//	//			"Собрано", "Номенклатура,Упаковка,Размещение",,
//	//			"ТипЗнч(Строка.Размещение) <> Тип(""Число"")");
//	
//	// Перечитаем суммы в колонках
//	
//	Если ЕстьСуммы Тогда
//	
//		Если ТипЗнч(Заказ) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
//				ТипЦен = Неопределено; Валюта = Неопределено; Партнер = Неопределено; ЕстьАкция = Ложь; ЕстьЦенаПоАкции = Ложь;
//		Иначе	ТипЦен = Заказ.ТипЦен; Валюта = Заказ.Валюта; Партнер = Заказ.Партнер; ЕстьАкция = Истина; ЕстьЦенаПоАкции = Истина; КонецЕсли;
//		
//		СтруктураКолонокТовары = ?(ЕстьСуммы,
//			Новый Структура("ЕстьПроцентРучнойСкидки, ЕстьПроцентАвтоматическойСкидки, ТипЦен, Валюта, Партнер, ЕстьАкция, ЕстьЦенаПоАкции, ЕстьУпаковка, ЕстьКоличество, ЕстьЦена, ЕстьСуммаБезСкидки, ЕстьСумма, ЕстьСуммаАвтоматическойСкидки, ЕстьСуммаРучнойСкидки, ЕстьСтавкаНДС, ЕстьСуммаНДС, СуммаВключаетНДС, ЕстьВсего, ЕстьДоставка, ЕстьАкция",
//					Истина, Истина, ТипЦен, Валюта, Партнер, ЕстьАкция, ЕстьЦенаПоАкции, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, СсылкаПроцесс.Заказ.СуммаВключаетНДС, Ложь, ЕстьДоставка, Истина),
//			Новый Структура("ЕстьПроцентРучнойСкидки, ЕстьПроцентАвтоматическойСкидки, ЕстьУпаковка, ЕстьКоличество, ЕстьЦена, ЕстьСуммаБезСкидки, ЕстьСумма, ЕстьСуммаАвтоматическойСкидки, ЕстьСуммаРучнойСкидки, ЕстьСтавкаНДС, ЕстьСуммаНДС, СуммаВключаетНДС, ЕстьВсего, ЕстьДоставка, ЕстьАкция",
//					Ложь, Ложь, ТипЦен, Валюта, Партнер, ЕстьАкция, ЕстьЦенаПоАкции, Истина, Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь));
//					
//		 ФункцииФормДокументов.РассчитатьСуммыТабличныхЧастейВоВсехСтроках(Товары, СтруктураКолонокТовары, Ложь); КонецЕсли;
//	
//	// Отсортируем
//	Товары.Сортировать("НомерСтроки, Номенклатура, Упаковка");
//	
//	// Вернем
//	Возврат Товары;
//	
КонецФункции
Функция ПолучитьТаблицуТоваровВнутр(СсылкаПроцесс, СсылкаЗадача = Неопределено) Экспорт
	
	// Определим дату считывания
		
	ОперативнаяДата = 
				СсылкаЗадача <> Неопределено И
				СсылкаЗадача.Выполнена;
		
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Собрано,
	|	Отгружено,
	|	Номенклатура,
	|	Упаковка,
	|	Размещение,
	|	СУММА(Количество) 			КАК Количество
	|ИЗ
	|(
	|ВЫБРАТЬ
	|	ЛОЖЬ Собрано,
	|	ЛОЖЬ Отгружено,
	|	РегЗак.Номенклатура,
	|	РегЗак.Упаковка,
	|	РегЗак.Размещение,
	|	РегЗак.КоличествоОстаток 	Количество
	|ИЗ
	|	РегистрНакопления.ВнутренниеЗаказы.Остатки(" + ?(ОперативнаяДата, "&ДатаВыполнения","") + ", ВнутреннийЗаказ = &Заказ) РегЗак
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	РегЗак.Номенклатура,
	|	РегЗак.Упаковка,
	|	РегЗак.Размещение,
	|	РегЗак.КоличествоРасход 	Количество
	|ИЗ
	|	РегистрНакопления.ВнутренниеЗаказы.ОстаткиИОбороты(," + ?(ОперативнаяДата, "&ДатаВыполнения","") + ",РЕГИСТРАТОР,, ВнутреннийЗаказ = &Заказ) РегЗак
	|ГДЕ
	|	Регистратор ССЫЛКА Документ.ПриемТоваров ИЛИ Регистратор ССЫЛКА Документ.ПеремещениеТоваров
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	Номенклатура,
	|	Упаковка,
	|	Размещение,
	|	Количество 			КАК Количество
	|ИЗ
	|	Документ.ВнутреннийЗаказ.Товары
	|ГДЕ           
	|	Ссылка = &Заказ И
	|	Ссылка.Проведен = Ложь
	|) Запр
	|
	|ГДЕ
	|	Количество <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	Собрано,
	|	Отгружено,
	|	Номенклатура,
	|	Упаковка,
	|	Размещение
	|;
	|ВЫБРАТЬ
	|	Номенклатура,
	|	Упаковка,
	|	СобраноОстаток Количество
	|ИЗ
	|	РегистрНакопления.СборкаЗаказа.Остатки(,Заказ = &Заказ)
	|");
		
	Запрос.УстановитьПараметр("СсылкаБП", 			СсылкаПроцесс);
	Запрос.УстановитьПараметр("ПустаяРеализация", 	Документы.РеализацияТоваров.ПустаяСсылка());
	Запрос.УстановитьПараметр("Заказ", 				СсылкаПроцесс.Заказ);
		
	Если ОперативнаяДата Тогда
		Запрос.УстановитьПараметр("ДатаВыполнения", СсылкаЗадача.ДатаВыполнения);
	КонецЕсли;
	
	Пакет = Запрос.ВыполнитьПакет();
	
	Товары				= Пакет[0].Выгрузить();
	ОтгруженныеТовары 	= Пакет[1].Выгрузить();
	
	// Разнесем по отгруженным
	
	КонвертацияТипов.ПроставитьФлагВТаблицеПотаблицеСравнения(
				Товары, 
				ОтгруженныеТовары, 
				"Собрано", "Номенклатура,Упаковка",,
				"ТипЗнч(Строка.Размещение) <> Тип(""Число"")");
	
	// Перечитаем суммы в колонках
	
	//СтруктураКолонокТовары = Новый Структура("ЕстьКоличество, ЕстьЦена, ЕстьСуммаБезСкидки, ЕстьСумма, ЕстьСуммаАвтоматическойСкидки, ЕстьСуммаРучнойСкидки, ЕстьСтавкаНДС, ЕстьСуммаНДС, СуммаВключаетНДС, ЕстьВсего",
	//											Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, СсылкаПроцесс.Заказ.СуммаВключаетНДС, Ложь);
	//											
	//ФункцииФормДокументов.РассчитатьСуммыТабличныхЧастейВоВсехСтроках(Товары, СтруктураКолонокТовары);
	
	// Отсортируем
	
	Товары.Сортировать("Номенклатура, Упаковка");
	
	Возврат Товары;
	
КонецФункции

Функция ПолучитьТаблицуТоваровПоЗаказу(СсылкаЗаказ, ЕстьСуммы = Истина, ДатаПроверки = Неопределено, БезДублей=Ложь) Экспорт
								
	ОперативнаяДата = ДатаПроверки = Неопределено;
	Параметры 		= ПолучитьПараметрыДляЗапроса(СсылкаЗаказ);
	ЭтоВнутренний	= ТипЗнч(СсылкаЗаказ) = Тип("ДокументСсылка.ВнутреннийЗаказ");
	
	// Определим дату считывания
		
	//Запрос = Новый Запрос("
	//|ВЫБРАТЬ Номенклатура, Позиция ПОМЕСТИТЬ ПорядокСтрок ИЗ РегистрСведений.ПорядокСтрокНоменклатуры ГДЕ Объект = &Заказ;
	//|ВЫБРАТЬ
	//|	ЕСТЬNULL(НомСтрок.Позиция, 0) НомерСтроки,
	//|	Запр.Номенклатура,
	//|	Упаковка,
	//|	Размещение,
	//|	Запр.Номенклатура.Вес 	Вес,
	//|	Запр.Номенклатура.Объем 	Объем,
	//|	" + ?(ЭтоВнутренний, "","Цена,") + "
	//|	СУММА(Количество) 			КАК Количество" + ?(ЕстьСуммы,",
	//|	Акция,
	//|	ПроцентРучнойСкидки,
	//|	ПроцентАвтоматическойСкидки,
	//|	СтавкаНДС,
	//| " + ?(Параметры.ИмяРегистра = "ИнтернетЗаказПокупателя", "
	//|	СУММА(Доставка), ", "") + "
	//|	СУММА(СуммаРучнойСкидки),
	//|	СУММА(СуммаАвтоматическойСкидки),
	//|	СУММА(Сумма + СуммаРучнойСкидки + СуммаАвтоматическойСкидки) СуммаБезСкидки,
	//|	СУММА(СуммаНДС),
	//|	СУММА(Сумма)				КАК Сумма,
	//|	СУММА(Сумма)		 		Всего
	//|","") + "
	//|ИЗ
	//
	//|(
	//|ВЫБРАТЬ
	//|	РегЗак.Номенклатура,
	//|	РегЗак.Упаковка,
	//|	РегЗак.Размещение,
	//|	" + ?(ЭтоВнутренний, "","РегЗак.Цена,") + "
	//|	РегЗак.КоличествоПриход 	Количество" + ?(ЕстьСуммы,",
	//|	РегЗак.Акция,
	//|	РегЗак.ПроцентРучнойСкидки,
	//|	РегЗак.ПроцентАвтоматическойСкидки,
	//| " + ?(Параметры.ИмяРегистра = "ИнтернетЗаказПокупателя", "
	//|	 ЕСТЬNULL(Док.Доставка, 0) КАК Доставка,
	//|", "") + "
	//|	РегЗак.Цена * РегЗак.КоличествоПриход * РегЗак.ПроцентРучнойСкидки * 0.01 			СуммаРучнойСкидки,
	//|	РегЗак.Цена * РегЗак.КоличествоПриход * РегЗак.ПроцентАвтоматическойСкидки * 0.01 	СуммаАвтоматическойСкидки,
	//|	РегЗак.СтавкаНДС,
	//|" + ПолучитьСуммуНДСВЗапросе("РегЗак","Приход", Параметры.ИмяЗаказа) + " СуммаНДС,
	//|	РегЗак.СуммаПриход			Сумма
	//|","") + "
	//|ИЗ
	//|	РегистрНакопления." + Параметры.ИмяРегистра + ".ОстаткиИОбороты(," + ?(ОперативнаяДата, "&ДатаВыполнения","") + ",РЕГИСТРАТОР,," + Параметры.ИмяЗаказа + " = &Заказ) РегЗак
	//|   " + ?(Параметры.ИмяРегистра = "ИнтернетЗаказПокупателя" И ЕстьСуммы, "ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИнтернетЗаказПокупателя.Доставка Док
	//|			ПО РегЗак.ИнтернетЗаказ = Док.Ссылка И РегЗак.Номенклатура = Док.Номенклатура И РегЗак.Упаковка = Док.Упаковка ", "") + "
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	Тов.Номенклатура,
	//|	Тов.Упаковка,
	//|	Тов.Размещение,
	//|	" + ?(ЭтоВнутренний, "","Тов.Цена,") + "
	//|	Тов.Количество 			КАК Количество" + ?(ЕстьСуммы,",
	//|	Тов.Акция,
	//|	Тов.ПроцентРучнойСкидки,
	//|	Тов.ПроцентАвтоматическойСкидки,
	//| " + ?(Параметры.ИмяРегистра = "ИнтернетЗаказПокупателя", "
	//|	ЕСТЬNULL(Док.Доставка, 0) Доставка,
	//|", "") + "
	//|	Тов.СуммаРучнойСкидки,
	//|	Тов.СуммаАвтоматическойСкидки,
	//|	Тов.СтавкаНДС,
	//|	Тов.СуммаНДС,
	//|	Тов.Сумма				КАК Сумма
	//|","") + "
	//|ИЗ
	//|	Документ." + Параметры.ИмяДокумента + ".Товары Тов	
	//|   " + ?(Параметры.ИмяРегистра = "ИнтернетЗаказПокупателя" И ЕстьСуммы, "ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИнтернетЗаказПокупателя.Доставка Док
	//|			ПО Тов.Ссылка = Док.Ссылка И Тов.Номенклатура = Док.Номенклатура И Тов.Упаковка = Док.Упаковка ", "") + "
	//|ГДЕ           
	//|	Тов.Ссылка = &Заказ И
	//|	Тов.Ссылка.Проведен = Ложь
	//|) Запр
	//|ЛЕВОЕ СОЕДИНЕНИЕ
	//|	ПорядокСтрок НомСтрок
	//|ПО	
	//|	Запр.Номенклатура = НомСтрок.Номенклатура
	//|ГДЕ
	//|	Количество <> 0
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	НомСтрок.Позиция,
	//|	Запр.Номенклатура,
	//|	Упаковка,
	//|	" + ?(ЭтоВнутренний, "","Цена,") + "
	//|	Размещение" + ?(ЕстьСуммы,",
	//|	Акция,	
	//|	ПроцентРучнойСкидки,
	//|	ПроцентАвтоматическойСкидки,
	//|	СтавкаНДС
	//|","") + "
	//|ИМЕЮЩИЕ СУММА(Количество) <> 0
	//|УПОРЯДОЧИТЬ ПО ЕСТЬNULL(НомСтрок.Позиция, ЛОЖЬ)
	//|");
	
	
	
	
	//ВозможностьДублейСтрок. 
	//Проверяем частичную отгрузку - в этом случае возможности дублей строк нет.
	
	//
	//Запрос = Новый Запрос("Выбрать Сумма(Количество) Заказано из Документ." + Параметры.ИмяДокумента + ".Товары ГДЕ Ссылка=&Заказ; 
	//					  |Выбрать КоличествоОстаток Собрано из РегистрНакопления.ТоварыСобранные.Остатки(,Заказ=&Заказ)");						
	//						
	//Запрос.УстановитьПараметр("Заказ", СсылкаЗаказ);
	//Мас=Запрос.ВыполнитьПакет();
	//ТЗ = Мас[0].Выгрузить();
	//Заказано = ?(ТЗ.Количество()>0,ТЗ[0].Заказано,0);
	//ТЗ = Мас[1].Выгрузить();
	//Собрано = ?(ТЗ.Количество()>0,ТЗ[0].Собрано,0);
	//
	//Если Собрано>0 и Собрано<Заказано Тогда 
	//	ЭтоЧастичнаяОтгрузка = Истина;
	//Иначе
	//	ЭтоЧастичнаяОтгрузка = Ложь;
	//КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заказ", СсылкаЗаказ);
	Запрос.Текст = "
	|Выбрать Номенклатура, Сумма(Заказано), Сумма(Собрано)
	|из
	|(
	|Выбрать Номенклатура, Количество Заказано, 0 Собрано из Документ." + Параметры.ИмяДокумента + ".Товары ГДЕ Ссылка.Проведен и Ссылка = &Заказ
	|
	|Объединить все
	|
	|Выбрать Номенклатура, Количество Заказано, 0 Собрано из Документ.КорректировкаВнутреннегоЗаказа.Товары ГДЕ Ссылка.Проведен и Ссылка.Заказ = &Заказ
	|
	|Объединить все
	|
	|Выбрать Номенклатура, 0, КоличествоОстаток Собрано из РегистрНакопления.ТоварыСобранные.Остатки(,Заказ=&Заказ)
	|) ВТ
	|Сгруппировать по Номенклатура
	|Имеющие Сумма(Заказано) > Сумма(Собрано) и Сумма(Собрано)>0;
	|";
	
	Рез = Запрос.Выполнить();
	Если Не Рез.Пустой() Тогда
		ЭтоЧастичнаяОтгрузка = Истина;
	Иначе
		ЭтоЧастичнаяОтгрузка = Ложь;
	КонецЕсли;	
	
	
	
	Если ЭтоЧастичнаяОтгрузка  Тогда 
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Тов.Номенклатура.Артикул КАК Артикул,
		|	Тов.Номенклатура,
		|	Тов.НоменклатураУчет,
		|	Тов.Упаковка,
		|	Тов.Размещение,
		|	Тов.Номенклатура.Вес 	 КАК Вес,
		|	Тов.Номенклатура.Объем 	 КАК Объем,
		|	" + ?(ЭтоВнутренний, "","Тов.Цена,") + "
		|	СУММА(Тов.Количество) 			КАК Количество" + ?(ЕстьСуммы,",
		|	Тов.Акция,
		|	Тов.ПроцентРучнойСкидки,
		|	Тов.ПроцентАвтоматическойСкидки,
		| " + ?(Параметры.ИмяРегистра = "ИнтернетЗаказПокупателя", "
		|	СУММА(ЕСТЬNULL(Док.Доставка, 0)) Доставка,
		|", "") + "
		|	СУММА(Тов.СуммаРучнойСкидки) СуммаРучнойСкидки,
		|	СУММА(Тов.СуммаАвтоматическойСкидки) СуммаАвтоматическойСкидки,
		|	Тов.СтавкаНДС,
		|	СУММА(Тов.СуммаНДС) СуммаНДС,
		|	СУММА(Сумма + СуммаРучнойСкидки + СуммаАвтоматическойСкидки) СуммаБезСкидки,
		|	СУММА(Тов.Сумма)				КАК Сумма,
		|	СУММА(Тов.Сумма)				КАК Всего
		|","") + "
		|ИЗ
		|	Документ." + Параметры.ИмяДокумента + ".Товары Тов	
		|   " + ?(Параметры.ИмяРегистра = "ИнтернетЗаказПокупателя" И ЕстьСуммы, "ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИнтернетЗаказПокупателя.Доставка Док
		|			ПО Тов.Ссылка = Док.Ссылка И Тов.Номенклатура = Док.Номенклатура И Тов.Упаковка = Док.Упаковка ", "") + "
		|ГДЕ           
		|	Тов.Ссылка = &Заказ
		|
		|СГРУППИРОВАТЬ ПО
		|	Тов.Номенклатура,
		|	Тов.НоменклатураУчет,
		|	Тов.Упаковка,
		|	" + ?(ЭтоВнутренний, "","Тов.Цена,") + "
		|	Тов.Размещение" + ?(ЕстьСуммы,",
		|	Тов.Акция,	
		|	Тов.ПроцентРучнойСкидки,
		|	Тов.ПроцентАвтоматическойСкидки,
		|	Тов.СтавкаНДС
		|","") + "
		|
		|");
		
	ИначеЕсли БезДублей Тогда //без цен и скидок
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Тов.Номенклатура.Артикул КАК Артикул,
		|	Тов.Номенклатура,
		|	Тов.НоменклатураУчет,
		|	Тов.Упаковка,
		|	Тов.Размещение,
		|	Тов.Номенклатура.Вес 	 КАК Вес,
		|	Тов.Номенклатура.Объем 	 КАК Объем,
		//|	" + ?(ЭтоВнутренний, "","Тов.Цена,") + "
		|	СУММА(Тов.Количество) 			КАК Количество" + ?(ЕстьСуммы,",
		|	Тов.Акция,
		//|	Тов.ПроцентРучнойСкидки,
		//|	Тов.ПроцентАвтоматическойСкидки,
		| " + ?(Параметры.ИмяРегистра = "ИнтернетЗаказПокупателя", "
		|	СУММА(ЕСТЬNULL(Док.Доставка, 0)) Доставка,
		|", "") + "
		|	СУММА(Тов.СуммаРучнойСкидки) СуммаРучнойСкидки,
		|	СУММА(Тов.СуммаАвтоматическойСкидки) СуммаАвтоматическойСкидки,
		|	Тов.СтавкаНДС,
		|	СУММА(Тов.СуммаНДС) СуммаНДС,
		|	СУММА(Сумма + СуммаРучнойСкидки + СуммаАвтоматическойСкидки) СуммаБезСкидки,
		|	СУММА(Тов.Сумма)				КАК Сумма,
		|	СУММА(Тов.Сумма)				КАК Всего
		|","") + "
		|ИЗ
		|	Документ." + Параметры.ИмяДокумента + ".Товары Тов	
		|   " + ?(Параметры.ИмяРегистра = "ИнтернетЗаказПокупателя" И ЕстьСуммы, "ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИнтернетЗаказПокупателя.Доставка Док
		|			ПО Тов.Ссылка = Док.Ссылка И Тов.Номенклатура = Док.Номенклатура И Тов.Упаковка = Док.Упаковка ", "") + "
		|ГДЕ           
		|	Тов.Ссылка = &Заказ
		|
		|СГРУППИРОВАТЬ ПО
		|	Тов.Номенклатура,
		|	Тов.НоменклатураУчет,
		|	Тов.Упаковка,
		//|	" + ?(ЭтоВнутренний, "","Тов.Цена,") + "
		|	Тов.Размещение" + ?(ЕстьСуммы,",
		|	Тов.Акция,	
		//|	Тов.ПроцентРучнойСкидки,
		//|	Тов.ПроцентАвтоматическойСкидки,
		|	Тов.СтавкаНДС
		|","") + "
		|
		|");
		
	Иначе
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Тов.НомерСтроки,
		|	Тов.Номенклатура.Артикул 	КАК Артикул,
		|	Тов.Номенклатура,
		|	Тов.НоменклатураУчет,
		|	Тов.Упаковка,
		|	Тов.Размещение,
		|	Тов.Номенклатура.Вес 		КАК Вес,
		|	Тов.Номенклатура.Объем 		КАК	Объем,
		|	" + ?(ЭтоВнутренний, "","Тов.Цена,") + "
		|	Тов.Количество 			КАК Количество" + ?(ЕстьСуммы,",
		|	Тов.Акция,
		|	Тов.ПроцентРучнойСкидки,
		|	Тов.ПроцентАвтоматическойСкидки,
		| " + ?(Параметры.ИмяРегистра = "ИнтернетЗаказПокупателя", "
		|	ЕСТЬNULL(Док.Доставка, 0) Доставка,
		|", "") + "
		|	Тов.СуммаРучнойСкидки,
		|	Тов.СуммаАвтоматическойСкидки,
		|	Тов.СтавкаНДС,
		|	Тов.СуммаНДС,
		|	Сумма + СуммаРучнойСкидки + СуммаАвтоматическойСкидки СуммаБезСкидки,
		|	Тов.Сумма				КАК Сумма,
		|	Тов.Сумма				КАК Всего
		|","") + "
		|ИЗ
		|	Документ." + Параметры.ИмяДокумента + ".Товары Тов	
		|   " + ?(Параметры.ИмяРегистра = "ИнтернетЗаказПокупателя" И ЕстьСуммы, "ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИнтернетЗаказПокупателя.Доставка Док
		|			ПО Тов.Ссылка = Док.Ссылка И Тов.Номенклатура = Док.Номенклатура И Тов.Упаковка = Док.Упаковка ", "") + "
		|ГДЕ           
		|	Тов.Ссылка = &Заказ
		|
		|УПОРЯДОЧИТЬ ПО Тов.НомерСтроки
		|");
	КонецЕсли;
	//ВозможностьДублейСтрок
	
	
	
	Запрос.УстановитьПараметр("ПустаяРеализация", 	Документы.РеализацияТоваров.ПустаяСсылка());
	Запрос.УстановитьПараметр("Заказ", 				СсылкаЗаказ);
		
	Если ОперативнаяДата Тогда
		Запрос.УстановитьПараметр("ДатаВыполнения", ДатаПроверки); 
	КонецЕсли;
	
	ТЗ=Запрос.Выполнить().Выгрузить();
		
	Возврат ТЗ;
	
КонецФункции

Функция ПолучитьТаблицуТоваровПоЗаказу_ИзРег(СсылкаЗаказ, ЕстьСуммы = Истина, ДатаПроверки = Неопределено, БезДублей=Ложь) Экспорт
								
	ОперативнаяДата = ДатаПроверки = Неопределено;
	Параметры 		= ПолучитьПараметрыДляЗапроса(СсылкаЗаказ);
	ЭтоВнутренний	= ТипЗнч(СсылкаЗаказ) = Тип("ДокументСсылка.ВнутреннийЗаказ");
	
	// Определим дату считывания
		
	Запрос = Новый Запрос("
	|ВЫБРАТЬ Номенклатура, Позиция ПОМЕСТИТЬ ПорядокСтрок ИЗ РегистрСведений.ПорядокСтрокНоменклатуры ГДЕ Объект = &Заказ;
	|ВЫБРАТЬ
	|	ЕСТЬNULL(НомСтрок.Позиция, 0) НомерСтроки,
	|	Запр.Номенклатура,
	|	Упаковка,
	|	Размещение,
	|	Запр.Номенклатура.Вес 	Вес,
	|	Запр.Номенклатура.Объем 	Объем,
	|	" + ?(ЭтоВнутренний, "","Цена,") + "
	|	СУММА(Количество) 			КАК Количество" + ?(ЕстьСуммы,",
	|	Акция,
	|	ПроцентРучнойСкидки,
	|	ПроцентАвтоматическойСкидки,
	|	СтавкаНДС,
	| " + ?(Параметры.ИмяРегистра = "ИнтернетЗаказПокупателя", "
	|	СУММА(Доставка), ", "") + "
	|	СУММА(СуммаРучнойСкидки),
	|	СУММА(СуммаАвтоматическойСкидки),
	|	СУММА(Сумма + СуммаРучнойСкидки + СуммаАвтоматическойСкидки) СуммаБезСкидки,
	|	СУММА(СуммаНДС),
	|	СУММА(Сумма)				КАК Сумма,
	|	СУММА(Сумма)		 		Всего
	|","") + "
	|ИЗ
	
	|(
	|ВЫБРАТЬ
	|	РегЗак.Номенклатура,
	|	РегЗак.Упаковка,
	|	РегЗак.Размещение,
	|	" + ?(ЭтоВнутренний, "","РегЗак.Цена,") + "
	|	РегЗак.КоличествоПриход 	Количество" + ?(ЕстьСуммы,",
	|	РегЗак.Акция,
	|	РегЗак.ПроцентРучнойСкидки,
	|	РегЗак.ПроцентАвтоматическойСкидки,
	| " + ?(Параметры.ИмяРегистра = "ИнтернетЗаказПокупателя", "
	|	 ЕСТЬNULL(Док.Доставка, 0) КАК Доставка,
	|", "") + "
	|	РегЗак.Цена * РегЗак.КоличествоПриход * РегЗак.ПроцентРучнойСкидки * 0.01 			СуммаРучнойСкидки,
	|	РегЗак.Цена * РегЗак.КоличествоПриход * РегЗак.ПроцентАвтоматическойСкидки * 0.01 	СуммаАвтоматическойСкидки,
	|	РегЗак.СтавкаНДС,
	|" + ПолучитьСуммуНДСВЗапросе("РегЗак","Приход", Параметры.ИмяЗаказа) + " СуммаНДС,
	|	РегЗак.СуммаПриход			Сумма
	|","") + "
	|ИЗ
	|	РегистрНакопления." + Параметры.ИмяРегистра + ".ОстаткиИОбороты(," + ?(ОперативнаяДата, "&ДатаВыполнения","") + ",РЕГИСТРАТОР,," + Параметры.ИмяЗаказа + " = &Заказ) РегЗак
	|   " + ?(Параметры.ИмяРегистра = "ИнтернетЗаказПокупателя" И ЕстьСуммы, "ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИнтернетЗаказПокупателя.Доставка Док
	|			ПО РегЗак.ИнтернетЗаказ = Док.Ссылка И РегЗак.Номенклатура = Док.Номенклатура И РегЗак.Упаковка = Док.Упаковка ", "") + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Тов.Номенклатура,
	|	Тов.Упаковка,
	|	Тов.Размещение,
	|	" + ?(ЭтоВнутренний, "","Тов.Цена,") + "
	|	Тов.Количество 			КАК Количество" + ?(ЕстьСуммы,",
	|	Тов.Акция,
	|	Тов.ПроцентРучнойСкидки,
	|	Тов.ПроцентАвтоматическойСкидки,
	| " + ?(Параметры.ИмяРегистра = "ИнтернетЗаказПокупателя", "
	|	ЕСТЬNULL(Док.Доставка, 0) Доставка,
	|", "") + "
	|	Тов.СуммаРучнойСкидки,
	|	Тов.СуммаАвтоматическойСкидки,
	|	Тов.СтавкаНДС,
	|	Тов.СуммаНДС,
	|	Тов.Сумма				КАК Сумма
	|","") + "
	|ИЗ
	|	Документ." + Параметры.ИмяДокумента + ".Товары Тов	
	|   " + ?(Параметры.ИмяРегистра = "ИнтернетЗаказПокупателя" И ЕстьСуммы, "ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИнтернетЗаказПокупателя.Доставка Док
	|			ПО Тов.Ссылка = Док.Ссылка И Тов.Номенклатура = Док.Номенклатура И Тов.Упаковка = Док.Упаковка ", "") + "
	|ГДЕ           
	|	Тов.Ссылка = &Заказ И
	|	Тов.Ссылка.Проведен = Ложь
	|) Запр
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	ПорядокСтрок НомСтрок
	|ПО	
	|	Запр.Номенклатура = НомСтрок.Номенклатура
	|ГДЕ
	|	Количество <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	НомСтрок.Позиция,
	|	Запр.Номенклатура,
	|	Упаковка,
	|	" + ?(ЭтоВнутренний, "","Цена,") + "
	|	Размещение" + ?(ЕстьСуммы,",
	|	Акция,	
	|	ПроцентРучнойСкидки,
	|	ПроцентАвтоматическойСкидки,
	|	СтавкаНДС
	|","") + "
	|ИМЕЮЩИЕ СУММА(Количество) <> 0
	|УПОРЯДОЧИТЬ ПО ЕСТЬNULL(НомСтрок.Позиция, ЛОЖЬ)
	|");
	
	
	Запрос.УстановитьПараметр("ПустаяРеализация", 	Документы.РеализацияТоваров.ПустаяСсылка());
	Запрос.УстановитьПараметр("Заказ", 				СсылкаЗаказ);
		
	Если ОперативнаяДата Тогда
		Запрос.УстановитьПараметр("ДатаВыполнения", ДатаПроверки); 
	КонецЕсли;
	
	ТЗ=Запрос.Выполнить().Выгрузить();
		
	Возврат ТЗ;
	
КонецФункции


Функция ПолучитьТаблицуТоваровПоЗаказу_Ст(СсылкаЗаказ, ЕстьСуммы = Истина, ДатаПроверки = Неопределено) Экспорт
								
	//ОперативнаяДата = ДатаПроверки = Неопределено;
	//Параметры 		= ПолучитьПараметрыДляЗапроса(СсылкаЗаказ);
	//							
	//// Определим дату считывания
	//	
	//Запрос = Новый Запрос("
	//|ВЫБРАТЬ
	//|	Номенклатура,
	//|	Упаковка,
	//|	Размещение,
	//|	Номенклатура.Вес 	Вес,
	//|	Номенклатура.Объем 	Объем,
	//|	СУММА(Количество) 			КАК Количество" + ?(ЕстьСуммы,",
	//|	Цена,
	//|	Акция,
	//|	ПроцентРучнойСкидки,
	//|	ПроцентАвтоматическойСкидки,
	//|	СтавкаНДС,
	//|	СУММА(СуммаРучнойСкидки),
	//|	СУММА(СуммаАвтоматическойСкидки),
	//|	СУММА(Сумма + СуммаРучнойСкидки + СуммаАвтоматическойСкидки) СуммаБезСкидки,
	//|	СУММА(СуммаНДС),
	//|	СУММА(Сумма)				КАК Сумма,
	//|	СУММА(Сумма)		 		Всего
	//|","") + "
	//|ИЗ
	//
	//|(
	//|ВЫБРАТЬ
	//|	РегЗак.Номенклатура,
	//|	РегЗак.Упаковка,
	//|	РегЗак.Размещение,
	//|	РегЗак.КоличествоОстаток 	Количество" + ?(ЕстьСуммы,",
	//|	РегЗак.Цена,
	//|	РегЗак.Акция,
	//|	РегЗак.ПроцентРучнойСкидки,
	//|	РегЗак.ПроцентАвтоматическойСкидки,
	//|	РегЗак.Цена * РегЗак.КоличествоОстаток * РегЗак.ПроцентРучнойСкидки * 0.01 				СуммаРучнойСкидки,
	//|	РегЗак.Цена * РегЗак.КоличествоОстаток  * РегЗак.ПроцентАвтоматическойСкидки * 0.01 	СуммаАвтоматическойСкидки,
	//|	РегЗак.СтавкаНДС,
	//|" + ПолучитьСуммуНДСВЗапросе("РегЗак","Остаток", Параметры.ИмяЗаказа) + " СуммаНДС,
	//|	РегЗак.СуммаОстаток 		Сумма
	//|","") + "
	//|ИЗ
	//|	РегистрНакопления." + Параметры.ИмяРегистра + ".Остатки(" + ?(ОперативнаяДата, "&ДатаВыполнения","") + "," + Параметры.ИмяЗаказа + " = &Заказ) РегЗак
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	РегЗак.Номенклатура,
	//|	РегЗак.Упаковка,
	//|	РегЗак.Размещение,
	//|	РегЗак.КоличествоРасход 	Количество" + ?(ЕстьСуммы,",
	//|	РегЗак.Цена,
	//|	РегЗак.Акция,
	//|	РегЗак.ПроцентРучнойСкидки,
	//|	РегЗак.ПроцентАвтоматическойСкидки,
	//|	РегЗак.Цена * РегЗак.КоличествоРасход * РегЗак.ПроцентРучнойСкидки * 0.01 			СуммаРучнойСкидки,
	//|	РегЗак.Цена * РегЗак.КоличествоРасход * РегЗак.ПроцентАвтоматическойСкидки * 0.01 	СуммаАвтоматическойСкидки,
	//|	РегЗак.СтавкаНДС,
	//|" + ПолучитьСуммуНДСВЗапросе("РегЗак","Расход", Параметры.ИмяЗаказа) + " СуммаНДС,
	//|	РегЗак.СуммаРасход			Сумма
	//|","") + "
	//|ИЗ
	//|	РегистрНакопления." + Параметры.ИмяРегистра + ".ОстаткиИОбороты(," + ?(ОперативнаяДата, "&ДатаВыполнения","") + ",РЕГИСТРАТОР,," + Параметры.ИмяЗаказа + " = &Заказ) РегЗак
	//|ГДЕ
	//|	Регистратор ССЫЛКА Документ." + ?(ЕстьСуммы, ?(СсылкаЗаказ.Склад.ПередачаТовараМВЗ ИЛИ НЕ СсылкаЗаказ.МВЗ.Пустая() ИЛИ СсылкаЗаказ.ПередачаТовара, "ПередачаТовара", "РеализацияТоваров"),"ПриемТоваров") + "
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	Номенклатура,
	//|	Упаковка,
	//|	Размещение,
	//|	Количество 			КАК Количество" + ?(ЕстьСуммы,",
	//|	Цена,
	//|	Акция,
	//|	ПроцентРучнойСкидки,
	//|	ПроцентАвтоматическойСкидки,
	//|	СуммаРучнойСкидки,
	//|	СуммаАвтоматическойСкидки,
	//|	СтавкаНДС,
	//|	СуммаНДС,
	//|	Сумма				КАК Сумма
	//|","") + "
	//|ИЗ
	//|	Документ." + Параметры.ИмяДокумента + ".Товары
	//|ГДЕ           
	//|	Ссылка = &Заказ И
	//|	Ссылка.Проведен = Ложь
	//|) Запр
	//|ГДЕ
	//|	Количество <> 0
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	Номенклатура,
	//|	Упаковка,
	//|	Номенклатура.Вес,
	//|	Номенклатура.Объем,
	//|	Размещение" + ?(ЕстьСуммы,",
	//|	Цена,
	//|	Акция,	
	//|	ПроцентРучнойСкидки,
	//|	ПроцентАвтоматическойСкидки,
	//|	СтавкаНДС
	//|","") + "
	//|");
	//	
	//Запрос.УстановитьПараметр("ПустаяРеализация", 	Документы.РеализацияТоваров.ПустаяСсылка());
	//Запрос.УстановитьПараметр("Заказ", 				СсылкаЗаказ);
	//	
	//Если ОперативнаяДата Тогда
	//	Запрос.УстановитьПараметр("ДатаВыполнения", ДатаПроверки); КонецЕсли;
	//
	//Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции
Функция ПолучитьТаблицуТоваровПоЗаказуСРаставленнымРазмещениемБезСумм(СсылкаЗаказ, ПараметрыЗаказа = Неопределено) Экспорт
	
	// Возвращает одной таблицей, таблицу заказа с проставленным размещением
	
	ТаблицаЗаказ 		= ПолучитьТаблицуТоваровПоЗаказу(СсылкаЗаказ, Ложь,, Истина);  //ВозможностьДублейСтрок. 4-й параметр - признак "без дублей".
	
	ТаблицаРазмещения	= ПолучитьТаблицуРазмещения(СсылкаЗаказ, ПараметрыЗаказа);
	
	НовТабл = ТаблицаЗаказ.СкопироватьКолонки();
	Для Каждого Строка Из ТаблицаЗаказ Цикл
		
		СтрокиРазмещений = ТаблицаРазмещения.НайтиСтроки(Новый Структура("Номенклатура", Строка.Номенклатура));
		Кол = 0;
		Для Каждого СтрокаРазмещений Из СтрокиРазмещений Цикл 
			Кол = Кол + СтрокаРазмещений.КоличествоВсего; // СтрокаРазмещений.Количество;
			
			НовСтрока = НовТабл.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
			
			НовСтрока.Количество = СтрокаРазмещений.КоличествоВсего; 
			
			НовСтрока.Размещение = СтрокаРазмещений.Размещение; 
		КонецЦикла;
		
		НеРазмещено = Строка.Количество - Кол;
		Если НеРазмещено>0 Тогда
			
			НовСтрока = НовТабл.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
			НовСтрока.Количество = НеРазмещено;
			НовСтрока.Размещение = Неопределено; 
		КонецЕсли; 
	КонецЦикла;
	
	Возврат НовТабл;
	
КонецФункции
Функция ПолучитьТаблицуТоваровПоЗаказуСРаставленнымСостоянием(СсылкаПроцесса, Заказ, параметрыЗаказа = Неопределено, ЕстьСуммы = Ложь) Экспорт
	
	// Возвращает таблицу заказ с проставленным состоянием товаров
	
	ТаблицаЗаказ 		= ПолучитьТаблицуТоваровПоЗаказу(Заказ, ЕстьСуммы);
	Товары 				= ПолучитьСостояниеТоваров(СсылкаПроцесса);
	
	Если Товары.Колонки.Найти("НоменклатураУчет") <> Неопределено Тогда // silber Это мой костыль условие который разрешает костыль Ильи
		Товары.Свернуть("Номенклатура,НоменклатураУчет,Маршрут,Вес,Объем,Размещение,Состояние,Упаковка","Количество"); //в случае сборки из разных ячеек таблица приходит с несколькими строками - это мешает работе с дублями.		
	КонецЕсли;
		
	НовТабл				= ТаблицаЗаказ.СкопироватьКолонки();
	ИмяДокумента = Заказ.Метаданные().Имя;
	
	Если ЕстьСуммы Тогда
		СтруктураКолонок= ФункцииФормДокументов.ПолучитьСтруктуруКолонокТоварыПоОбъекту(Заказ,, ?(ИмяДокумента = "ИнтернетЗаказПокупателя", "Доставка", "")); КонецЕсли;
	
	НовТабл.Колонки.Добавить("Состояние", Новый ОписаниеТипов("ПеречислениеСсылка.СостояниеСборкиЗаказа"));
	
	// Создадим таблицу со статусами
	
	Для Каждого Строка Из ТаблицаЗаказ Цикл
		
		СтрокиТоваров 		= Товары.НайтиСтроки(Новый Структура("Номенклатура", Строка.Номенклатура));
		НовСтрокиТоваров 	= ТаблицаЗаказ.СкопироватьКолонки();
		
		Для Каждого СтрокаТовара Из СтрокиТоваров Цикл
			
			НовСтрока = НовТабл.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
			
			
			//ВозможностьДублейСтрок
			//В случае полной отгрузки ТаблицаЗаказ приходит с дублями, а Товары без дублей (все в статусе Собрано) 
			//В случае частичной отгрузки ТаблицаЗаказ приходит без дублей, а Товары с дублями (разные статусы). 
			
			//НовСтрока.Количество = СтрокаТовара.Количество;  
			НовСтрока.Количество = Мин(СтрокаТовара.Количество,Строка.Количество); 
			

			НовСтрока.Состояние = СтрокаТовара.Состояние;
			
			Если ЕстьСуммы Тогда
				ФункцииФормДокументов.РассчитатьСуммыСтрокиОтЦены(НовСтрока, СтруктураКолонок, Ложь);
			КонецЕсли; 
			ЗаполнитьЗначенияСвойств(НовСтрокиТоваров.Добавить(), СтрокаТовара);
		КонецЦикла; 
		
		// Теперь раздадим копейки
		
		Если ЕстьСуммы И НовСтрокиТоваров.Количество() > 1 Тогда
			
			СтруктураСвертки = ПолучитьСтруктуруКолонокТоваровПоСтроке(СтруктураКолонок, "Сумма, СуммаРучнойСкидки, СуммаНДС, СуммаАвтоматическойСкидки, СуммаБезСкидки, Всего");
			ЗаполнитьЗначенияСвойств(СтруктураСвертки, Строка);
			
			КонвертацияТипов.РаздатьКопейкиНуждающимся_Колонкам(НовСтрокиТоваров, СтруктураСвертки); 
		КонецЕсли; 
	КонецЦикла;
	
	Возврат НовТабл;
	
КонецФункции
Функция ПолучитьСтруктуруКолонокТоваровПоСтроке(СтруктураКолонок, ТрСтроки)
	
	// Смотрит какие поля есть в структуре и создает структуру с этими ключами
	
	Структура = Новый Структура;
	
	Строки = КонвертацияТипов.ПолучитьМассивИзСтроки(ТрСтроки);
	Для Каждого Строка Из Строки Цикл Если СтруктураКолонок["Есть" + Строка] Тогда Структура.Вставить(Строка, 0) КонецЕсли; КонецЦикла;
	
	Возврат Структура;
	
КонецФункции

Функция ПолучитьПараметрыДляЗапроса(СсылкаЗаказ) Экспорт
	
	Имя = СсылкаЗаказ.Метаданные().Имя;
	
	Если Имя = "ЗаказПокупателя" Тогда
		
		ИмяПроцесса 	= "ЗаявкаПокупателя";
		ИмяЗаказа 		= "ЗаказПокупателя";
		ИмяРегистра		= "ЗаказыПокупателей";
		
	ИначеЕсли Имя = "ИнтернетЗаказПокупателя" Тогда
		
		ИмяПроцесса = "ИнтернетЗаявка";
		ИмяЗаказа 	= "ИнтернетЗаказ";
		ИмяРегистра	= "ИнтернетЗаказПокупателя";
		
	ИначеЕсли Имя = "ВнутреннийЗаказ" Тогда
		
		ИмяПроцесса = "ВнутренняяЗаявка";
		ИмяЗаказа 	= "ВнутреннийЗаказ";
		ИмяРегистра	= "ВнутренниеЗаказы";
		
	ИначеЕсли Имя = "ЗаказНаряд" Тогда
		
		ИмяПроцесса = "РемонтИнструмента";
		ИмяЗаказа 	= "ЗаказНаряд"; 
		ИмяРегистра	= "РемонтИнструмента";КонецЕсли;
	
	Возврат Новый Структура("ИмяДокумента, ИмяПроцесса, ИмяРегистра, ИмяЗаказа",
							Имя, ИмяПроцесса, ИмяРегистра, ИмяЗаказа);
	
КонецФункции

#КонецОбласти

#Область Сборка_заказа

Функция СформироватьТаблицуВозвратаРезультат(СтруктураКолонокТовары, СтрокаСверткиГруппы, СтрокаСверткиПоказатели, Заказ = Неопределено, РасчетСумм = Истина, ЕстьДоставка = Ложь)
	
	ТабРезультат = Новый ТаблицаЗначений;
	ТабРезультат.Колонки.Добавить("Номенклатура", 					Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТабРезультат.Колонки.Добавить("Упаковка", 						Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	ТабРезультат.Колонки.Добавить("Сборщик", 						Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТабРезультат.Колонки.Добавить("СкладЯчейка");                                               
	ТабРезультат.Колонки.Добавить("Склад", 							Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТабРезультат.Колонки.Добавить("Маршрут", 						Новый ОписаниеТипов("СправочникСсылка.Маршруты"));
	//ТабРезультат.Колонки.Добавить("Размещение",			 		Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТабРезультат.Колонки.Добавить("СкладЗаказчик",					Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТабРезультат.Колонки.Добавить("Ячейка", 						Новый ОписаниеТипов("СправочникСсылка.Ячейки"));
	ТабРезультат.Колонки.Добавить("Состояние", 						Новый ОписаниеТипов("ПеречислениеСсылка.СостояниеСборкиЗаказа"));
	ТабРезультат.Колонки.Добавить("ВнутреннийЗаказ",			 	Новый ОписаниеТипов("ДокументСсылка.ВнутреннийЗаказ"));
	ТабРезультат.Колонки.Добавить("Акция",			 				Новый ОписаниеТипов("ДокументСсылка.Акция"));
	ТабРезультат.Колонки.Добавить("Количество", 					Новый ОписаниеТипов("Число"));
	ТабРезультат.Колонки.Добавить("ПроцентРучнойСкидки", 			Новый ОписаниеТипов("Число"));
	ТабРезультат.Колонки.Добавить("ПроцентАвтоматическойСкидки",	Новый ОписаниеТипов("Число"));
	ТабРезультат.Колонки.Добавить("СуммаРучнойСкидки", 				Новый ОписаниеТипов("Число"));
	ТабРезультат.Колонки.Добавить("СуммаАвтоматическойСкидки", 		Новый ОписаниеТипов("Число"));
	ТабРезультат.Колонки.Добавить("Цена",			 				Новый ОписаниеТипов("Число"));
	ТабРезультат.Колонки.Добавить("Сумма", 							Новый ОписаниеТипов("Число"));
	ТабРезультат.Колонки.Добавить("СуммаБезСкидки",				 	Новый ОписаниеТипов("Число"));
	ТабРезультат.Колонки.Добавить("СуммаНДС",			 			Новый ОписаниеТипов("Число"));
	ТабРезультат.Колонки.Добавить("СтавкаНДС", 						Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	ТабРезультат.Колонки.Добавить("Всего",			 				Новый ОписаниеТипов("Число"));
	ТабРезультат.Колонки.Добавить("Резерв", 						Новый ОписаниеТипов("Булево"));
	ТабРезультат.Колонки.Добавить("Ожидание", 						Новый ОписаниеТипов("Булево"));
	ТабРезультат.Колонки.Добавить("ДокументРезерва");
	
	Если РасчетСумм И ЗначениеЗаполнено(Заказ) Тогда
		ТипЦен = Заказ.ТипЦен; Валюта = Заказ.Валюта; Контрагент = Заказ.Контрагент; Партнер = Заказ.Партнер;
	Иначе
		ТипЦен = Неопределено; Валюта = Неопределено; Контрагент = Неопределено; Партнер = Неопределено; 
	КонецЕсли;
	
	СтруктураКолонокТовары = Новый Структура("ЕстьПроцентРучнойСкидки, ЕстьПроцентАвтоматическойСкидки, ТипЦен, Валюта, Контрагент, Партнер, ЕстьАкция, ЕстьЦенаПоАкции, ЕстьУпаковка, ЕстьКоличество, ЕстьЦена, ЕстьСуммаБезСкидки, ЕстьСумма, ЕстьСуммаАвтоматическойСкидки, ЕстьСуммаРучнойСкидки, ЕстьСтавкаНДС, ЕстьСуммаНДС, СуммаВключаетНДС, ЕстьВсего, ЕстьДоставка, ЕстьАкция",
												РасчетСумм, РасчетСумм, ТипЦен, Валюта, Контрагент, Партнер, РасчетСумм, РасчетСумм, Истина, Истина, РасчетСумм, РасчетСумм, РасчетСумм, РасчетСумм, РасчетСумм, РасчетСумм, РасчетСумм, ?(Заказ = Неопределено, РасчетСумм, Заказ.СуммаВключаетНДС), РасчетСумм, ЕстьДоставка, РасчетСумм);
												
	СтрокаСверткиГруппы 	= "Номенклатура, Упаковка, Сборщик, СкладЯчейка, Склад, Маршрут, СкладЗаказчик, Ячейка, Состояние, ВнутреннийЗаказ, ПроцентРучнойСкидки, ПроцентАвтоматическойСкидки, Цена, СтавкаНДС, Резерв, ДокументРезерва, Ожидание, Акция";
	СтрокаСверткиПоказатели = "Количество, СуммаРучнойСкидки, СуммаАвтоматическойСкидки, Сумма, СуммаБезСкидки, СуммаНДС, Всего";
	
	Возврат ТабРезультат;
	
КонецФункции
Функция СформироватьТаблицуВозвратаРезультатБезСумм()
	
	ТабРезультат = Новый ТаблицаЗначений;
	ТабРезультат.Колонки.Добавить("Номенклатура", 					Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТабРезультат.Колонки.Добавить("Упаковка", 						Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	ТабРезультат.Колонки.Добавить("Сборщик", 						Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТабРезультат.Колонки.Добавить("СкладЯчейка");                                               
	ТабРезультат.Колонки.Добавить("Склад", 							Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТабРезультат.Колонки.Добавить("Маршрут", 						Новый ОписаниеТипов("СправочникСсылка.Маршруты"));
	ТабРезультат.Колонки.Добавить("СкладЗаказчик",					Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТабРезультат.Колонки.Добавить("Ячейка", 						Новый ОписаниеТипов("СправочникСсылка.Ячейки"));
	ТабРезультат.Колонки.Добавить("Состояние", 						Новый ОписаниеТипов("ПеречислениеСсылка.СостояниеСборкиЗаказа"));
	ТабРезультат.Колонки.Добавить("ВнутреннийЗаказ",			 	Новый ОписаниеТипов("ДокументСсылка.ВнутреннийЗаказ"));
	ТабРезультат.Колонки.Добавить("Акция",			 				Новый ОписаниеТипов("ДокументСсылка.Акция"));
	ТабРезультат.Колонки.Добавить("Количество", 					Новый ОписаниеТипов("Число"));
	ТабРезультат.Колонки.Добавить("Резерв", 						Новый ОписаниеТипов("Булево"));
	ТабРезультат.Колонки.Добавить("Ожидание", 						Новый ОписаниеТипов("Булево"));
	ТабРезультат.Колонки.Добавить("ДокументРезерва");
	
	Возврат ТабРезультат;
	
КонецФункции

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Функция ПолучитьСостояниеТоваровПоСтатусу(СсылкаПроцесса, ДатаСостояния = Неопределено, Статус, УчитыватьБПРодитель = Истина, ПоказатьОжидающие = Ложь) Экспорт
	
	Товары = ПолучитьСостояниеТоваров(СсылкаПроцесса, ДатаСостояния, УчитыватьБПРодитель, ПоказатьОжидающие);
	Строки = Товары.НайтиСтроки(Новый Структура("Состояние", Статус));
	
	ТаблицаВозврата = Товары.СкопироватьКолонки();
	
	Для Каждого Строка Из Строки Цикл ЗаполнитьЗначенияСвойств(ТаблицаВозврата.Добавить(), Строка); КонецЦикла;
	
	Возврат ТаблицаВозврата;

КонецФункции

Функция МожноПрименитьОленя(Заказ) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТь ПЕРВЫЕ 1 Ячейка ИЗ РегистрНакопления.РезервыВЯчейках.Остатки(,&Заказ = СборочныйЛист.Заказ) 
	|ОБЪЕДИНИТЬ ВСЕ 
	|ВЫБРАТЬ ПЕРВЫЕ 1 Склад ИЗ РегистрНакопления.ТоварыСобранные.Остатки(,&Заказ = СборочныйЛист.Заказ)");
	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Ячейка = Неопределено;
	
КонецФункции

#КонецОбласти

#Область Очередь_заказа

Функция ЧислоЗаказовПрописьюБезКопеек(Кол)

	Результат = ЧислоПрописью(
					Кол, 
					"Л = ru_RU; НП = Истина", 
					"заказ, заказа, заказов, м,,,,,0");
					
	Возврат Строка(Кол) + " " + Сред(Результат, Найти(Результат, "заказ"));
			
КонецФункции			

Функция ИнформацияОбОчереди(Заказ) Экспорт
	
	// Возвращает структуру в которой
	// ТекстОчередь1Строка 	- информация об очереди в 1 строку
	// ТекстОчередь 		- информация об очереди в несколько строк
	// ЗаказВРаботе 		- происходит процесс формирования / сборок заказа (до покупателя)
	// ПланируемаяДатаОтгрузки
	// ДатаФактическойОтгрузки
	// Ответственный
	// ДатаИзменения
	// ОчередьСборки
	
	// Сформируем информацию по очереди
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ВесВОчереде ПОМЕСТИТЬ Очередь ИЗ РегистрСведений.ОчередьСборкиЗаказов ГДЕ Заказ = &Заказ;
	|
	|ВЫБРАТЬ
	|	Рег.ПланируемаяДатаОтгрузки,
	|	Рег.ДатаФактическойОтгрузки,
	|	Рег.Ответственный,
	|	Рег.ДатаИзменения,
	|	Спр.Ссылка ОчередьСборки
	|ИЗ
	|	РегистрСведений.ОчередьСборкиЗаказов Рег
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.ПредставлениеОчередиСборкиЗаказа Спр
	|ПО
	|	Рег.ВесВОчереде = Спр.Код
	|
	|ГДЕ
	|	Рег.Заказ = &Заказ
	|;
	|ВЫБРАТЬ
	|	Один,
	|	МАКСИМУМ(КолЗаказовВсего) 		КолЗаказовВсего,
	|	МАКСИМУМ(КолЗаказовВТекОчереди) КолЗаказовВТекОчереди,
	|	МАКСИМУМ(КолЗаказовВпереди) 	КолЗаказовВпереди
	|ИЗ
	|(
	|	ВЫБРАТЬ
	|		1						Один,
	|		0 						КолЗаказовВсего,
	|		0				 		КолЗаказовВТекОчереди,
	|		Количество(Оч.Заказ) 	КолЗаказовВпереди
	|	ИЗ	РегистрСведений.ОчередьСборкиЗаказов Оч
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.СостоянияЗаказовТекущее Сос
	|	ПО
	|		Сос.Заказ = Оч.Заказ
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Очередь ТекОч
	|	ПО Оч.ВесВОчереде <= ТекОч.ВесВОчереде
	|
	|	ГДЕ	Сос.Состояние В(&СостояниеРабочегоЗаказа)
	|
	|	ОБЪЕДИНИТЬ 
	|
	|	ВЫБРАТЬ
	|		1,
	|		0,
	|		Количество(Оч.Заказ),
	|		0
	|	ИЗ	РегистрСведений.ОчередьСборкиЗаказов Оч
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.СостоянияЗаказовТекущее Сос
	|	ПО
	|		Сос.Заказ = Оч.Заказ
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Очередь ТекОч
	|	ПО Оч.ВесВОчереде = ТекОч.ВесВОчереде
	|
	|	ГДЕ	Сос.Состояние В(&СостояниеРабочегоЗаказа)
	|
	|	ОБЪЕДИНИТЬ 
	|
	|	ВЫБРАТЬ
	|		1,
	|		Количество(Оч.Заказ),
	|		0,
	|		0
	|	ИЗ	РегистрСведений.ОчередьСборкиЗаказов Оч
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.СостоянияЗаказовТекущее Сос
	|	ПО
	|		Сос.Заказ = Оч.Заказ
	|
	|	ГДЕ	Оч.ВесВОчереде <> 0 И
	|		Сос.Состояние В(&СостояниеРабочегоЗаказа)
	|
	|) Запрос
	|
	|СГРУППИРОВАТЬ ПО
	|	Один
	|");
	
	Запрос.УстановитьПараметр("СостояниеРабочегоЗаказа", 	ПолучитьМассивСостоянийЗаказовУчаствующихВОчереде());
	Запрос.УстановитьПараметр("Заказ", 						Заказ);
	Выполнение = Запрос.ВыполнитьПакет();
	
	СостоянияЗаказа = ПолучитьМассивСостоянийЗаказовУчаствующихВОчереде();
	Структура = КонвертацияТипов.ПолучитьСтруктуруИзСТрокиТаблицыЗначений(Выполнение[1].Выгрузить());
	Структура.Вставить("ЗаказВРаботе", СостоянияЗаказа.Найти(ПолучитьСостояниеЗаказа(Заказ)) <> Неопределено);
	
	Структура.Вставить("ТекстОчередь1Строка", 	"");
	Структура.Вставить("ТекстОчередь", 			"");
	
	Если Выполнение[2].Пустой() Тогда
		
		
	Иначе
		
		Выборка = Выполнение[2].Выбрать();
		Выборка.Следующий();
		
		Если Выборка.КолЗаказовВсего И Структура.ЗаказВРаботе Тогда
		
			Если Не Выборка.КолЗаказовВпереди Тогда
				
				Текст = "Заказ первый в очереди";
				
			Иначе
				
				Текст = "В очереди находится " + ЧислоЗаказовПрописьюБезКопеек(Выборка.КолЗаказовВпереди);
				
				Если Выборка.КолЗаказовВТекОчереди Тогда
					Текст = Текст + "
					|из них " + Выборка.КолЗаказовВТекОчереди + " в текущей """ + Структура.ОчередьСборки + """";
				КонецЕсли;
			КонецЕсли;
			
			Текст = Текст + "
			|-----------------   -----------------   -----------------
			|общее количество ожидающих сборки " + Выборка.КолЗаказовВсего;
			
			Структура.Вставить("ТекстОчередь1Строка", 	"в очереди """ + Структура.ОчередьСборки + """ " + Выборка.КолЗаказовВТекОчереди + " из " + Выборка.КолЗаказовВпереди + ?(Структура.ПланируемаяДатаОтгрузки = '00010101', "", " план:" + Формат(Структура.ПланируемаяДатаОтгрузки, "ДЛФ=DD")));
			Структура.Вставить("ТекстОчередь", 			Текст); КонецЕсли; КонецЕсли;
	
	Возврат Структура;
	
КонецФункции


#КонецОбласти

#Область БизнесПроцесс

&НаСервере
Функция ПолучитьПроцесс(Заказ, ИмяПроцесса = "") Экспорт
	
	Параметры = ПолучитьПараметрыДляЗапроса(Заказ);
	ИмяПроцесса = Параметры.ИмяПроцесса;
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка ИЗ БизнесПроцесс." + ИмяПроцесса + " ГДЕ " + ?(Параметры.ИмяЗаказа = "ЗаказНаряд", Параметры.ИмяЗаказа, "Заказ") + " = &Заказ");
	Запрос.УстановитьПараметр("Заказ", Заказ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда Возврат Выборка.Ссылка КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Долги_по_отгрузкам


Функция ПерезаполнитьДолги(Таблица, ДокументОплаты = Неопределено, Заказ = Неопределено, ДокументОтгрузки = Неопределено)  Экспорт
	
	Для Каждого Выборка Из Таблица Цикл
		
		Если Выборка.Заказ <> Заказ Тогда
		КонецЕсли;
		
		Если Выборка.ДокументОтгрузки <> ДокументОтгрузки И Выборка.ДокументОтгрузки <> Неопределено Тогда
			
			ДокументОбъект = Выборка.ДокументОтгрузки.ПолучитьОбъект();
			ДокументОбъект.ПлатежныеДокументы.Загрузить(Документы.РеализацияТоваров.ЗаполнитьПлатежныеДокументы(Выборка.ДокументОтгрузки));
			
			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				Возврат Ложь;
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции


#КонецОбласти

#Область Доступ

Функция ПользователюРазрешеноРаботатьСЗаказом(ЗаказСсылка) Экспорт
	
	// Если супер главный то может
	
	Если КэшируемыеФункции.ЭтоПолныеПрава() Или РольДоступна("ВыполнятьЛюбуюЗадачу") Тогда Возврат Истина КонецЕсли;
	
	// Если его то пусть редактирует
	
	Если 	ЗаказСсылка.Ответственный = ПараметрыСеанса.ТекущийПользователь Или
			ЗаказСсылка.Автор = ПараметрыСеанса.ТекущийПользователь Или
			ЗаказСсылка.Контрагент.ОсновнойМенеджер = ПараметрыСеанса.ТекущийПользователь Тогда Возврат Истина КонецЕсли;
		
	// Тогда если токо ему доверили
		
	Запрос = Новый Запрос("ВЫБРАТЬ ИСТИНА ИЗ РегистрСведений.ДоверенныеЛицаПользователя ГДЕ ДоверенноеЛицо = &ДоверенноеЛицо И (Пользователь = &Пользователь ИЛИ Пользователь = &Автор)");
	
	Запрос.УстановитьПараметр("ДоверенноеЛицо", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("Пользователь", 	ЗаказСсылка.Ответственный);
	Запрос.УстановитьПараметр("Автор", 			ЗаказСсылка.Автор);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

#КонецОбласти

#Область Печать

Функция ПолучитьПараметрыДляТабличногоДокумента(Ссылки, СтрНомера) Экспорт
	
	// Ссылки 		- массив внутри ссылки на заказы или БП заказов
	// СтрНомера 	- в нее будет свормированы номера всех заказов которые были обработаны
	
	Массив = Новый Массив;
	
	МетаБП = Метаданные.БизнесПроцессы;
	
	Для Каждого Ссылка Из Ссылки Цикл 
		
		СсылкаДок = ?(МетаБП.Содержит(Ссылка.Метаданные()), Ссылка.Заказ, Ссылка);
		Структура = Новый Структура("Заказ, Контрагент, Партнер", СсылкаДок, СсылкаДок.Контрагент, СсылкаДок.Партнер); 
		СтрНомера = СтрНомера + ?(СтрНомера = "","","_") + СсылкаДок.Номер;
		
		Если СсылкаДок.Метаданные().Реквизиты.Найти("ПользовательИнтернет") <> Неопределено Тогда // Почту берем из пользователя интернет
			Структура.Вставить("Почта", СсылкаДок.ПользовательИнтернет.ЭлектроннаяПочта); КонецЕсли;
	
		Массив.Добавить(Структура); КонецЦикла;

	Возврат Массив;
	
КонецФункции

#КонецОбласти

	
Функция ТоварыРазрешеныКПередаче(Ссылка, ИмяДокумента = "ЗаказПокупателя", стрОшибки = "", ПолеКонтрагент = "", Контрагент = Неопределено, ДатаСреза = Неопределено) Экспорт
	
		Запрос = Новый Запрос("
		|ВЫБРАТЬ " + 
		?(ИмяДокумента = "ЗаказПокупателя" ИЛИ ИмяДокумента = "ИнтернетЗаказПокупателя", "
		|	ВЫБОР КОГДА НоменклатураУчет = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) ТОГДА Номенклатура ИНАЧЕ НоменклатураУчет КОНЕЦ Номенклатура", "Номенклатура") + "
		|ПОМЕСТИТЬ ТоварыДокумента
		|ИЗ 
		|	Документ." + ИмяДокумента + ".Товары 
		|ГДЕ 
		|	Ссылка = &Ссылка  
		|СГРУППИРОВАТЬ ПО " +
		?(ИмяДокумента = "ЗаказПокупателя" ИЛИ ИмяДокумента = "ИнтернетЗаказПокупателя", "
		|	ВЫБОР КОГДА НоменклатураУчет = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) ТОГДА Номенклатура ИНАЧЕ НоменклатураУчет КОНЕЦ" , "Номенклатура") + "
		|" + ?(ИмяДокумента = "КорректировкаЗаказаПокупателя" ИЛИ ИмяДокумента = "КорректировкаИнтернетЗаказа" ИЛИ ИмяДокумента = "КорректировкаВнутреннегоЗаказа", "
		|ИМЕЮЩИЕ СУММА(Количество) > 0 ", "") + "
		|;
		|ВЫБРАТЬ
		|	Док.Номенклатура Номенклатура
		|ИЗ
		|	ТоварыДокумента Док
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		(ВЫБРАТЬ Номенклатура ИЗ РегистрСведений.ТоварыДляПередачи.СрезПоследних(&ДатаСреза, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ ТоварыДокумента) И Контрагент = &Контрагент) ГДЕ Использовать = ИСТИНА) Рег
		|ПО Док.Номенклатура = Рег.Номенклатура
		|	
		|ГДЕ  Рег.Номенклатура ЕСТЬ NULL");
		
		Запрос.УстановитьПараметр("ДатаСреза", 	?(ДатаСреза = Неопределено, Ссылка.Дата, ДатаСреза));
		Запрос.УстановитьПараметр("Ссылка",		Ссылка);
		Контрагент=?(ИмяДокумента = "ВнутреннийЗаказ", ?(ТипЗнч(ссылка.Заказчик)=Тип("СправочникСсылка.Склады"),ссылка.Заказчик.Контрагент, Контрагент),Контрагент);
		Запрос.УстановитьПараметр("Контрагент",	?(Контрагент = Неопределено, Ссылка.Контрагент, Контрагент));
		Выборка = Запрос.Выполнить().Выбрать();		
		Если Выборка.Следующий() Тогда
			стрОшибки = "Товар """ + Выборка.Номенклатура + " не входит в список доступных товаров для заказа";
			Возврат Ложь;	
		КонецЕсли;	
		
		Возврат Истина;
КонецФункции


Функция ПроверитьНаСоответствиеАссортимента(Товары, Контрагент) Экспорт
	
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		Запрос = Новый Запрос("	ВЫБРАТЬ
								|	*
								|ПОМЕСТИТЬ
								|	ТаблицаТоваров
								|ИЗ
								|	&ТаблицаТоваров Таб
								|");
								
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ТаблицаТоваров", Товары);
		Запрос.Выполнить();
		
		Запрос.Текст = "
		
		
		|ВЫБРАТЬ
		|	Тов.*,
		|	ВЫБОР КОГДА Рег.Номенклатура ЕСТЬ NULL Тогда Истина ИНАЧЕ Ложь Конец ТоварНеСогласован
		|ИЗ 
		|	ТаблицаТоваров Тов
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.ТоварыДляПередачи Рег
		|	ПО 
		|		Тов.Номенклатура =  Рег.Номенклатура
		|ГДЕ ЕСТЬNULL(Рег.Контрагент, &Контрагент) = &Контрагент	
		|";
						
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		
		Возврат Запрос.Выполнить().Выгрузить();
	   
КонецФункции


#Область Журнал

Процедура ПередЗаписьюЗаказаПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	// потом переделаешь :)
	Источник.ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
КонецПроцедуры
Процедура ПриЗаписиЗаказаПриЗаписи(Источник, Отказ) Экспорт
	
	Если Не Источник.ОбменДанными.Загрузка Тогда
	
		// если заказ оплачен Контрагента и Организацию менять нельзя
		Если Источник.ДополнительныеСвойства.Свойство("ИзмененныеРеквизиты") Тогда
			
			Изменения = Источник.ДополнительныеСвойства.ИзмененныеРеквизиты;
			
			Если Изменения.Свойство("Контрагент") ИЛИ Изменения.Свойство("Партнер") ИЛИ Изменения.Свойство("Орагнизация") Тогда
				
				Если ЗаказОплачен(Источник.Ссылка) Тогда
					Отказ = Истина;
		            ОбщиеФункции.СообщитьТекст("Невозможно применить изменения значимых реквизитов т.к. заказ уже оплачен: 
					|Обратитесь в бухгалтерию" );
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		
		// проверим на разрешение  попадания позиций в заказ

		Ссылка = Источник.Ссылка;
		
		Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.КорректировкаЗаказаПокупателя") ИЛИ ТипЗнч(Ссылка) = Тип("ДокументСсылка.КорректировкаИнтернетЗаказа")  Тогда
				Склад = Ссылка.Заказ.Склад; МВЗ = Ссылка.Заказ.МВЗ; Партнер = Ссылка.Заказ.Партнер; Контрагент = ссылка.Заказ.Контрагент
		Иначе   Склад = Ссылка.Склад;       МВЗ = Ссылка.МВЗ;		Партнер = Ссылка.Партнер; Контрагент =ссылка.Контрагент
		КонецЕсли;
		
		Если Склад.ПередачаТовараМВЗ ИЛИ НЕ МВЗ.Пустая() Тогда
			стрОшибки = "";
			Если НЕ ТоварыРазрешеныКПередаче(Ссылка, Источник.Метаданные().Имя, стрОшибки,, Контрагент) Тогда
				Отказ = Истина;
				ОбщиеФункции.СообщитьТекст(стрОшибки);
				Возврат;
			КонецЕсли;
			
			Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЗаказПокупателя") ИЛИ ТипЗнч(Ссылка) = Тип("ДокументСсылка.ИнтернетЗаказПокупателя") Тогда 
			Если НЕ ЗаменаТовараРазрешена(Ссылка, Источник.Метаданные().Имя, стрОшибки, Контрагент) Тогда
				Отказ = Истина;
				ОбщиеФункции.СообщитьТекст(стрОшибки);
				Возврат;
			КонецЕсли; КонецЕсли;
			
		КонецЕсли;
		
		// поскольку при обработке УдаленияПроведения движения еще не очищены (принудительно их очистить тоже как то не вышло...)
		// делаем то что нам нужно ПриЗаписи, а не ПриУдаленииПроведения, для этого проверяем РежимЗаписи, сохраненный в обработке ПередЗаписью
		// Обновим статусы заказа для рабочего журнала
		Если Источник.ДополнительныеСвойства.Свойство("РежимЗаписи") И Источник.ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
			Если Не ОбновитьРеквизитыЖурнала(Источник[?(Источник.Метаданные().Реквизиты.Найти("Заказ") = Неопределено, "Ссылка", "Заказ")]) Тогда 
				Отказ = Истина КонецЕсли;КонецЕсли; КонецЕсли;
	
КонецПроцедуры


Функция ЗаменаТовараРазрешена(Ссылка, ИмяМетаданных, стрОшибки, Контрагент)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ Номенклатура, НоменклатураУчет ПОМЕСТИТЬ Товары ИЗ Документ." + ИмяМетаданных + ".Товары ГДЕ Ссылка = &Ссылка И НоменклатураУчет <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|;
	|ВЫБРАТЬ Тов.Номенклатура Номенклатура ИЗ Товары Тов
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.НоменклатураЗамены.СрезПоследних(, Контрагент = &Контрагент) Рег
	|		ПО Тов.НоменклатураУчет = Рег.Номенклатура И Тов.Номенклатура = Рег.НоменклатураЗамена
	|ГДЕ Рег.НоменклатураЗамена ЕСТЬ NULL");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Выборка = Запрос.Выполнить().Выбрать();		
	Если Выборка.Следующий() Тогда
		стрОшибки = "Товар """ + Выборка.Номенклатура + " не входит в список доступных товаров для замены";
		Возврат Ложь;	
	КонецЕсли;	
		
	Возврат Истина;

КонецФункции


Функция ПроходитПоЛимиту(Инициатор, Дата, Сумма, стрОшибки = "") Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	СуммаОстаток ЛимитОстаток
	|ИЗ
	|	РегистрНакопления.Лимиты.Остатки(&Дата, Инициатор = &Инициатор)
	|ГДЕ  СуммаОстаток < &Сумма
	|");
	
	Запрос.УстановитьПараметр("Инициатор", 	Инициатор);
	Запрос.УстановитьПараметр("Дата", 		Дата);
	Запрос.УстановитьПараметр("Сумма", 		Сумма);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		стрОшибки = "Лимит для данного инициатора привышен, доступный лимит: " + Выборка.ЛимитОстаток;
		Возврат Ложь;	
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ОбработкаПроведенияЗаказаОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	
	Заказ = Источник.Ссылка; 
	Если ТипЗнч(Заказ) = Тип("ДокументСсылка.КорректировкаЗаказаПокупателя") ИЛИ ТипЗнч(Заказ) = Тип("ДокументСсылка.КорректировкаИнтернетЗаказа")  Тогда
		Заказ = Заказ.Заказ;
	КонецЕсли;
	
	Если ТипЗнч(Заказ) = Тип("ДокументСсылка.ИнтернетЗаказПокупателя") и Заказ.Склад.ПередачаТовараМВЗ Тогда
		//Если Заказ.Склад.ПередачаТовараМВЗ Тогда
			стрОшибки = "";
		// проверми не привешен ли лимит для партнера
		ОтказПоЛимиту = Ложь;
		Если НЕ ПроходитПоЛимиту(Заказ.ОтветственноеЛицо, Заказ.Дата, Заказ.Товары.Итог("Сумма"), стрОшибки) Тогда  //можно проверять по Заказ.ПользовательИнтернет.ФизЛицо, но считаю по смыслу лучше 
			Отказ = Истина;
			ОтказПоЛимиту = Истина;
			ОбщиеФункции.СообщитьТекст(стрОшибки);
			Возврат;
		КонецЕсли;
	//КонецЕсли;
	КонецЕсли;
	// Обновим статусы заказа для рабочего журнала
	Если Не ОбновитьРеквизитыЖурнала(Источник[?(Источник.Метаданные().Реквизиты.Найти("Заказ") = Неопределено, "Ссылка", "Заказ")]) Тогда 
		Отказ = Истина КонецЕсли;
КонецПроцедуры

Функция УстановитьРеквизитЖурнала(Заказ, Реквизиты) Экспорт
	
	ЗаписьЖурнала = РегистрыСведений.ЗаказыЖурнал.СоздатьМенеджерЗаписи();
	ЗаписьЖурнала.Заказ = Заказ;
	ЗаписьЖурнала.Прочитать();
	
	Для Каждого Элемент Из Реквизиты Цикл ЗаписьЖурнала[Элемент.Ключ] = Элемент.Значение КонецЦикла;
	
	Возврат ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(ЗаписьЖурнала);
	
КонецФункции
Функция ОбновитьРеквизитыЖурнала(Ссылка) Экспорт
	
	ИмяРегистраЗаказов 	= "ЗаказыПокупателей";
	ИзмерениеРгистра	= "ЗаказПокупателя";
	
	Тип = ТипЗнч(Ссылка);
	Если Тип = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		
		СуммаИзДока = "Док.Ссылка.Сумма";
		ИмяДока = "ЗаказПокупателя";
		
	ИначеЕсли Тип = Тип("ДокументСсылка.ИнтернетЗаказПокупателя") Тогда
		
		СуммаИзДока = "Док.Ссылка.Сумма";
		ИмяДока = "ИнтернетЗаказПокупателя";
		
		ИмяРегистраЗаказов 	= "ИнтернетЗаказПокупателя";
		ИзмерениеРгистра	= "ИнтернетЗаказ";
		
	ИначеЕсли Тип = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
		
		СуммаИзДока = "0";
		ИмяДока = "ВнутреннийЗаказ";
		
	ИначеЕсли Тип = Тип("ДокументСсылка.ЗаказНаряд") Тогда
		
		СуммаИзДока = "0";
		ИмяДока = "ЗаказНаряд";
		
	Иначе ОбщиеФункции.СообщитьТекст("Не известный тип документа!"); Возврат Ложь; КонецЕсли;
	
	метаДок = Ссылка.Метаданные();
	
	Запись = РегистрыСведений.ЗаказыЖурнал.СоздатьМенеджерЗаписи();
	Запись.Заказ = Ссылка;
	Запись.Прочитать();
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1 
	|	Док.Ссылка 										Заказ,
	|	Док.Номер 										Номер,
	|	ЕСТЬNULL(ЗакДолг.СуммаПриход, ЕСТЬNULL(Зак.СуммаПриход, " + СуммаИзДока + ")) 	Сумма,	
	|" + ?(ИмяДока = "ВнутреннийЗаказ", "0 КАК ПроцентОплаты, ", "
	|	выбор когда док.Сумма=0 тогда 0 иначе Выразить(100*опл.Сумма/Док.Сумма как Число(10,2))  Конец ПроцентОплаты, ") + "
	|	Транспорт.ТранспортноеСредство				ТранспортноеСредство,
	|	Сос.Состояние								Состояние,
	|	Сос.ДатаСобытия								ДатаПоследнегоСобытия,
	|	Срочность.ДатаСборки						ДатаСборки,
	|	Отгрузка.ВесЗаказаОборот 					ВесЗаказа,
	|	Отгрузка.ВесПодготовленоОборот 				ВесПодготовлено,
	|	Отгрузка.ВесОтгруженоОборот 				ВесОтгружено
	|ИЗ	
	|	Документ." + ИмяДока + " Док
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ	РегистрСведений.СостоянияЗаказовТекущее Сос
	|ПО					Док.Ссылка = Сос.Заказ
	|	
	|ЛЕВОЕ СОЕДИНЕНИЕ	РегистрСведений.ОчередьСборкиПриПередачеЛогисту Срочность
	|ПО					Док.Ссылка = Срочность.Заказ
	|
	
	|ЛЕВОЕ СОЕДИНЕНИЕ	(Выбрать Заказ,Сумма(Сумма) Сумма из РегистрНакопления.ДолгиПоОтгрузкам  ГДЕ ВидДвижения=Значение(ВидДвиженияНакопления.Расход) и Заказ=&ссылка сгруппировать по заказ) Опл
	|ПО					Док.Ссылка = Опл.Заказ
	
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ	РегистрНакопления.ОтгруженныеЗаказы.Обороты(,,,Заказ = &Ссылка) Отгрузка
	|ПО					ИСТИНА
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ	РегистрНакопления." + ИмяРегистраЗаказов + ".Обороты() Зак
	|ПО					Док.Ссылка = Зак." + ИзмерениеРгистра + " И НЕ Зак." + ИзмерениеРгистра + ".СпособРазмещенияБезЗаказа 
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|					РегистрНакопления.ДолгиПоЗаказам.Обороты() ЗакДолг
	|ПО					Док.Ссылка = ЗакДолг.Заказ И ЗакДолг.Заказ.СпособРазмещенияБезЗаказа
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка.ТранспортноеСредство ИЗ 
	|									Документ.НарядНаЗагрузку.ТабЗаказов
	|					ГДЕ 	Заказ = &Ссылка И 
	|							НЕ Ссылка.ПометкаУдаления И 
	|							НЕ Ссылка.Проведен
	|					) Транспорт
	|ПО ИСТИНА
	|
	|ГДЕ Док.Ссылка = &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Если Таблица.Количество() Тогда
		
		Изменилось = Ложь;
		Для Каждого Колонка Из Таблица.Колонки Цикл Если Таблица[0][Колонка.Имя] <> Запись[Колонка.Имя] Тогда Изменилось = Истина; Прервать; КонецЕсли; КонецЦикла;
		
		Если Изменилось Тогда 
			ЗаполнитьЗначенияСвойств(Запись, Таблица[0]); 
			Возврат ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(Запись); КонецЕсли; КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

Функция ЗаказОплачен(Ссылка, Параметры = Неопределено, СуммаКОтгрузке = 0) Экспорт
	
	//Запрос = Новый Запрос("ВЫБРАТЬ Заказ, ДокументОплаты, СуммаОборот ИЗ РегистрНакопления.Оплаты.Обороты(,,, Заказ = &Ссылка)");
	Запрос = Новый Запрос("ВЫБРАТЬ Регистратор ДокументОплаты, Сумма(Сумма) СуммаОплаты ИЗ РегистрНакопления.ДолгиПоОтгрузкам ГДЕ Заказ=&Ссылка и ВидДвижения=Значение(ВидДвиженияНакопления.Расход) Сгруппировать по Регистратор");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	ТЗ=Запрос.Выполнить().Выгрузить();
	СуммаОплаты=ТЗ.Итог("СуммаОплаты");
	Для Каждого Стр из ТЗ Цикл
		Если Параметры <> Неопределено Тогда 
			Параметры.Добавить(Новый Структура("ДокументОплаты, Сумма", Стр.ДокументОплаты, Стр.СуммаОплаты)); 
		КонецЕсли;
	КонецЦикла;
	
	Если СуммаКОтгрузке > 0 Тогда
		Возврат СуммаОплаты >= СуммаКОтгрузке;
	Иначе
		Возврат Булево(ТЗ.Количество());
	КонецЕсли;
		
КонецФункции

#Область Внешняя_запись

Функция ПолучитьПутьКСчету(ПутьКонтанты, НомерЗаказа, Слэш = "\") Экспорт
	
	//Возврат ПутьКонтанты + ?(Прав(ПутьКонтанты,1) = Слэш, "", Слэш) + НомерЗаказа + ".xls";
	Возврат ПутьКонтанты + ?(Прав(ПутьКонтанты,1) = Слэш, "", Слэш) + НомерЗаказа + ".pdf";
	
КонецФункции

Функция ПолучитьСсылкуHTMLНаСчетPDF(ЗаказСсылка) Экспорт
	
	// Возвращает путь к печатному счеты из интернета
	// если вернет пустую строку значит такой ссылки нет
	
	// Проверим что константы установлены
	
	ПутьНаДиске = Константы.КаталогДляВыгружаемыхСчетов.Получить();
	ПутьВИнете 	= Константы.ПутьHTMLКСчетамPDF.Получить();
	
	Если ПустаяСтрока(ПутьНаДиске) Или ПустаяСтрока(ПутьВИнете) Тогда Возврат "" КонецЕсли;
	
	// Проверим что такой заказ есть на диске
	
	НомерЗаказа = ЗаказСсылка.Номер;
	Файл 		= Новый Файл(ПолучитьПутьКСчету(ПутьНаДиске, НомерЗаказа));
	
	Если Не Файл.Существует() Тогда Возврат "" КонецЕсли;
	
	// Вернем путь HTML
	
	Возврат ПолучитьПутьКСчету(ПутьВИнете, НомерЗаказа, "/");
	
КонецФункции

Функция СохранитьСчетНаДискСервераВPDF(ЗаказСсылка, стрОшибки = "") Экспорт
	
	// Получим путь и проверим заказ
	
	Каталог = Константы.КаталогДляВыгружаемыхСчетов.Получить();
	Если ЗаказСсылка.Пустая() Тогда
		стрОшибки = "Пустой заказ";
		Возврат Ложь; 
		
	ИначеЕсли ПустаяСтрока(Каталог) Тогда
		стрОшибки = "Не указан каталог выгрузки счетов";
		Возврат Ложь;КонецЕсли;
	
	// Распечатаем
	
	ТабДок = Новый ТабличныйДокумент;
	
ИмяДопИмениОбластей = "";	
Если ЗначениеЗаполнено(ЗаказСсылка.Организация) Тогда
	Если НЕ Найти(ЗаказСсылка.Организация.Наименование,"инструмент") = 0 Тогда
	ИмяДопИмениОбластей = "Инструмент"
ИначеЕсли НЕ Найти(ЗаказСсылка.Организация.Наименование,"тулс") = 0   Тогда
	ИмяДопИмениОбластей = "Тулс"
ИначеЕсли  НЕ Найти(ЗаказСсылка.Организация.Наименование,"Кукушкина") = 0  Тогда
	ИмяДопИмениОбластей = "Кукушкина"
КонецЕсли;КонецЕсли;

	Документы[ЗаказСсылка.Метаданные().Имя].Печать_СчетЗаказ(ТабДок, ЗаказСсылка, "Счет",ИмяДопИмениОбластей);
	
	// Запишем
	
	Попытка
		//ТабДок.Записать(ПолучитьПутьКСчету(Каталог, ЗаказСсылка.Номер), ТипФайлаТабличногоДокумента.XLS);
		ТабДок.Записать(ПолучитьПутьКСчету(Каталог, ЗаказСсылка.Номер), ТипФайлаТабличногоДокумента.PDF);
	Исключение
		стрОшибки = ОписаниеОшибки();
		Возврат Ложь; КонецПопытки;
	
	Возврат Истина;
	
КонецФункции
Функция СохранитьКвитанциюНаДискСервераВPDF(ЗаказСсылка, стрОшибки = "") Экспорт
	
	// Получим путь и проверим заказ
	
	Каталог = Константы.КаталогДляВыгружаемыхСчетов.Получить();
	Если ЗаказСсылка.Пустая() Тогда
		стрОшибки = "Пустой заказ";
		Возврат Ложь; 
		
	ИначеЕсли ПустаяСтрока(Каталог) Тогда
		стрОшибки = "Не указан каталог выгрузки счетов";
		Возврат Ложь;КонецЕсли;
	
	// Распечатаем
	
	ТабДок = Новый ТабличныйДокумент;
	Документы[ЗаказСсылка.Метаданные().Имя].Печать_Квитанция(ТабДок, ЗаказСсылка, "Квитанция");
	
	// Запишем
	
	Попытка
		//ТабДок.Записать(ПолучитьПутьКСчету(Каталог, ЗаказСсылка.Номер), ТипФайлаТабличногоДокумента.XLS);
		ТабДок.Записать(ПолучитьПутьКСчету(Каталог, ЗаказСсылка.Номер), ТипФайлаТабличногоДокумента.PDF);
	Исключение
		стрОшибки = ОписаниеОшибки();
		Возврат Ложь; КонецПопытки;
	
	Возврат Истина;
	
КонецФункции


#КонецОбласти

#Область Акции
Функция ПолучитьВариантРасчетаЦеныПоАкции(Акция) Экспорт

	Если Акция = Неопределено ИЛИ Акция.Пустая() Тогда Возврат 0; КонецЕсли;
	
	Возврат КэшируемыеФункции.ПолучитьЧислоВариантаРасчета(Акция.ВариантРасчета);
	
КонецФункции	
#КонецОбласти

Функция ПолучитьСостоянияЗаказовКоторыеУчаствуютВАвтоСнятииРезервов() Экспорт
	
	Состояния = Новый Массив;
	Состояния.Добавить(Перечисления.СостоянияЗаказа.ВРаботе);
	Состояния.Добавить(Перечисления.СостоянияЗаказа.ОжиданиеОплаты);
	Состояния.Добавить(Перечисления.СостоянияЗаказа.ОжиданиеОтвета);
	Состояния.Добавить(Перечисления.СостоянияЗаказа.ОжиданиеПодтверждения);
	Состояния.Добавить(Перечисления.СостоянияЗаказа.Отгружен);
	Состояния.Добавить(Перечисления.СостоянияЗаказа.Открыт);
	Состояния.Добавить(Перечисления.СостоянияЗаказа.Отменен);
	Состояния.Добавить(Перечисления.СостоянияЗаказа.Черновик);
	Состояния.Добавить(Перечисления.СостоянияЗаказа.Обработан);
	
	Возврат Состояния;
	
КонецФункции


Функция НеоптимальныеРазмещения(Товары,Склад) Экспорт
	
	//если есть товар, размещенный в очереди или в резерве на других складах или в заказе поставщику
	//и при этом имеется свободный остаток на этом складе (имеется в виду склад документа плюс примыкающие склады)
	//тогда считаем размещение неоптимальным	
	
	Запрос=Новый Запрос;
	Запрос.Текст=
	"Выбрать &Склад Склад
	|Поместить Склады
	|Объединить все
	|Выбрать Склад из Справочник.Склады.СкладыБыстрогоПеремещения ГДЕ Ссылка=&Склад
	|;
	|
	|Выбрать
	|Товары.Номенклатура,
	|Товары.Размещение,
	|Товары.Количество
	|Поместить Товары
	|из 
	|&Товары Товары
	|
	|;
	|
	|Выбрать
	|Номенклатура,
	|Размещение,
	|Количество
	|
	|Поместить ТоварыОтобранные
	|из 
	|Товары
	|
	|ГДЕ ТИПЗНАЧЕНИЯ(Размещение) = ТИП(Документ.ЗаказПоставщику)
	|ИЛИ ТИПЗНАЧЕНИЯ(Размещение) = ТИП(Число)
	|ИЛИ (ТИПЗНАЧЕНИЯ(Размещение) = ТИП(Справочник.Склады) И Размещение НЕ в (Выбрать Склад из Склады))
	|;
	|
	|выбрать
	|Представление(ТоварыОтобранные.Номенклатура) НоменклатураПредставление,
	|Представление(ТоварыОтобранные.Размещение) РазмещениеПредставление,
	|ТоварыОтобранные.Размещение,
	|ТоварыОтобранные.Количество,
	|ост.КоличествоОстаток-естьnull(Рез.КоличествоОстаток,0) СвободныйОстаток
	|
	|из 
	|ТоварыОтобранные
	|
	|внутреннее соединение
	|РегистрНакопления.ТоварыНаСкладах.Остатки(,Номенклатура в (выбрать номенклатура из ТоварыОтобранные) и Склад в (Выбрать Склад из Склады)) Ост
	|
	|по ТоварыОтобранные.Номенклатура=Ост.Номенклатура
	|
	|Левое соединение
	|
	|регистрНакопления.ТоварыВРезерве.Остатки(,Номенклатура в (выбрать номенклатура из ТоварыОтобранные) и Размещение в (Выбрать Склад из Склады)) Рез
	|по ТоварыОтобранные.Номенклатура=Рез.Номенклатура
	|
	|ГДЕ ост.КоличествоОстаток-естьnull(Рез.КоличествоОстаток,0)>0
	|"
	;
	
	Запрос.УстановитьПараметр("Товары",Товары);
	Запрос.УстановитьПараметр("Склад",Склад);
	
	МС=Новый Массив;
	Рез=Запрос.Выполнить();
	Если Не Рез.Пустой() Тогда
		ТЗ=Рез.Выгрузить();
		Для Каждого Стр из ТЗ Цикл
			ТипРазмещения = ?(ТипЗнч(Стр.Размещение)=Тип("Число"),"очередь","");
			МС.Добавить("Неоптимальное размещение : "+Стр.НоменклатураПредставление+", размещено в "+ТипРазмещения+" ("+Стр.РазмещениеПредставление+"): "+Стр.Количество+", свободндый остаток на складе заказа и примыкающих складах: "+Стр.СвободныйОстаток);
		КонецЦикла;	
	КонецЕсли;	
	
	Возврат МС;
	
КонецФункции




#Область ОпасныеФункции
//ВНИМАНИЕ!
//прикосновение к этим функциям чревато, падением всей системы!


//МЕГАЗАПРОС
//Версия J
//
//2,3 и 4 параметры оставлены только для совместимости
Функция ПолучитьСостояниеТоваров(СсылкаПроцессаИлиЗаказ, ДатаСостояния = Неопределено, УчитыватьБПРодитель = Истина, ПоказатьОжидающие = Истина) Экспорт
	
	Если ТипЗнч(СсылкаПроцессаИлиЗаказ) = Тип("БизнесПроцессСсылка.ПеремещениеТоваров") Тогда 	Заказ = СсылкаПроцессаИлиЗаказ.Заказчик.Заказ
	ИначеЕсли Метаданные.Документы.Содержит(СсылкаПроцессаИлиЗаказ.Метаданные()) Тогда			Заказ = СсылкаПроцессаИлиЗаказ;
	Иначе																						Заказ = СсылкаПроцессаИлиЗаказ.Заказ; КонецЕсли;
	
	СкладПолучатель = ?(ТипЗнч(Заказ) = Тип("ДокументСсылка.ВнутреннийЗаказ"), Заказ.Заказчик, Заказ.Склад);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заказ",Заказ);
	Запрос.УстановитьПараметр("СкладПолучатель",СкладПолучатель);
	
    ТекстЗапроса = "
	
	|	ВЫБРАТЬ
	|		Зак.Номенклатура,
	|		Зак.Упаковка,
	|		Зак.СкладОтправитель Размещение,
	|		Выбор когда Зак.КоличествоОстаток < Собрано.КоличествоОстаток Тогда Зак.КоличествоОстаток Иначе Собрано.КоличествоОстаток Конец   Количество,
	|		Выбор когда Зак.КоличествоОстаток < Собрано.КоличествоОстаток Тогда Зак.КоличествоОстаток Иначе Собрано.КоличествоОстаток Конец   КоличествоВычитаемоеИзРезерва,
	|		Значение(Перечисление.СостояниесборкиЗаказа.ОжидаетПеремещения) Состояние
	|
	|	Поместить Состояния
	|ИЗ
	|		РегистрНакопления.ЗаказыНаПеремещения.Остатки(,Заказ = &Заказ) Зак 
	|
	|	Внутреннее соединение
	|		РегистрНакопления.ТоварыСобранные.Остатки(,Заказ = &Заказ) КАК Собрано
	|	По Зак.Номенклатура = Собрано.Номенклатура  и Зак.СкладОтправитель = Собрано.Склад
	|
	|ОБЪЕДИНИТЬ ВСЕ
	
		//перемещается
	|	ВЫБРАТЬ
	|		Номенклатура,
	|		Упаковка,
	|		СкладОтправитель Размещение,
	|		КоличествоОстаток Количество,
	|		0,
	|		Значение(Перечисление.СостояниесборкиЗаказа.Перемещается) Состояние
	|	ИЗ
	|		РегистрНакопления.ТоварыВПути.Остатки(,Заказчик В(выбрать ссылка из бизнесПроцесс.СборкаЗаказа ГДЕ Заказ = &Заказ))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	
	// silber { грязные лапы 04.05.17 упаковки делайте сами
	
	// собирается из ячеек
	|	ВЫБРАТЬ
	|		Номенклатура,
	|		null,
	|		Ячейка.Владелец Размещение,
	|		Сумма(КоличествоОстаток),
	|		Сумма(КоличествоОстаток),
	|		Значение(Перечисление.СостояниесборкиЗаказа.СобираетсяИзЯчеек) Состояние
	|	ИЗ
	|		РегистрНакопления.РезервыВЯчейках.Остатки(,СборочныйЛист в (выбрать ссылка из Документ.СборочныйЛист ГДЕ Заказ = &Заказ))
	|	Сгруппировать по Номенклатура, Ячейка.Владелец
	|
	|ОБЪЕДИНИТЬ ВСЕ
	
	// собирается
	|
	|	ВЫБРАТЬ
	|		Сбор.Номенклатура,
	|		Сбор.Упаковка,
	|		Сбор.Склад Размещение,
	|		Сбор.КоличествоОстаток - ЕСТЬNULL(Рез.Количество, 0),
	|		Сбор.КоличествоОстаток - ЕСТЬNULL(Рез.Количество, 0),
	|		Значение(Перечисление.СостояниесборкиЗаказа.Собирается) Состояние
	|	ИЗ
	|		РегистрНакопления.ТоварыВСборке.Остатки(,Заказ = &Заказ) Сбор
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		(	ВЫБРАТЬ Номенклатура, Ячейка.Владелец Склад, Сумма(КоличествоОстаток) Количество ИЗ 
	|			РегистрНакопления.РезервыВЯчейках.Остатки(,СборочныйЛист в (выбрать ссылка из Документ.СборочныйЛист ГДЕ Заказ = &Заказ))
	|			Сгруппировать по Номенклатура, Ячейка.Владелец) Рез
	|	ПО
	|		Сбор.Номенклатура = Рез.Номенклатура И
	|		Сбор.Склад = Рез.Склад
	|
	|	ГДЕ Сбор.КоличествоОстаток - ЕСТЬNULL(Рез.Количество, 0) <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	
	// ниже было до лап
	
	//	//собирается
	//|	ВЫБРАТЬ
	//|		Номенклатура,
	//|		Упаковка,
	//|		Склад Размещение,
	//|		КоличествоОстаток Количество,
	//|		КоличествоОстаток ,
	//|		Значение(Перечисление.СостояниесборкиЗаказа.Собирается) Состояние
	//|	ИЗ
	//|		РегистрНакопления.ТоварыВСборке.Остатки(,Заказ = &Заказ)
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	
	// } silber
	
		//собрано               //Учитываем только на складе-получателе
	|	ВЫБРАТЬ
	|		Номенклатура,
	|		Упаковка,
	|		Склад Размещение,
	|		КоличествоОстаток Количество,
	|		КоличествоОстаток ,
	|		Значение(Перечисление.СостояниесборкиЗаказа.Собрано) Состояние
	|	ИЗ
	|		РегистрНакопления.ТоварыСобранные.Остатки(,Заказ = &Заказ И Склад=&СкладПолучатель)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	
		//отмена сборки
	|	ВЫБРАТЬ
	|		Номенклатура,
	|		Упаковка,
	|		Выбор Когда СкладЯчейка Ссылка Справочник.Склады Тогда СкладЯчейка Иначе СкладЯчейка.Владелец Конец Размещение,
	|		СобраноОстаток Количество,
	|       СобраноОстаток,
	|		Значение(Перечисление.СостояниесборкиЗаказа.ОтменаСборки) Состояние
	|	ИЗ
	|		РегистрНакопления.ОтменаСборкиЗаказа.Остатки(,Заказ = &Заказ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	
		//отгружено ДЛЯ РЕАЛИЗАЦИИ (группируем вместе с возвратом, таким образом получаем отгруженное но не возвращенное количество)
	//+Андриянов 23.05.2017 БЫЛО
	//|	ВЫБРАТЬ
	//|		Номенклатура,
	//|		Упаковка,
	//|		Значение(Справочник.Склады.ПустаяСсылка) Размещение,
	//|		Сумма(Количество),
	//|       0,
	//|		Значение(Перечисление.СостояниесборкиЗаказа.Отгружен) Состояние
	//|	ИЗ
	//|		РегистрНакопления.Продажи
	//|	ГДЕ Заказ=&Заказ
	//|	Сгруппировать по Номенклатура, Упаковка
	//|	Имеющие Сумма(Количество)>0		
	//СТАЛО
	//Меняем состояние на состояние реализации по регистратору, если же нет такого, то значит Отгружен
	|	ВЫБРАТЬ
	|		Продажи.Номенклатура,
	|		Продажи.Упаковка,
	|		Значение(Справочник.Склады.ПустаяСсылка) Размещение,
	|		Сумма(Продажи.Количество),
	|       0,
	|		ЕСТЬNULL(СостоянияДокументовОтгрузки.СостояниеСборкиЗаказа,Значение(Перечисление.СостояниесборкиЗаказа.Отгружен)) Состояние
	|	ИЗ
	|		РегистрНакопления.Продажи КАК Продажи
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовОтгрузки.СрезПоследних КАК СостоянияДокументовОтгрузки
	|				ПО СостоянияДокументовОтгрузки.ДокументОтгрузки = Продажи.Регистратор
	|	ГДЕ Заказ=&Заказ
	|	Сгруппировать по Номенклатура, Упаковка, ЕСТЬNULL(СостоянияДокументовОтгрузки.СостояниеСборкиЗаказа,Значение(Перечисление.СостояниесборкиЗаказа.Отгружен))
	|	Имеющие Сумма(Количество)>0		
	//-Андриянов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	
		//отгружено ДЛЯ ВНУТРЕННЕГО ЗАКАЗА
	|	ВЫБРАТЬ
	|		Номенклатура,
	|		Упаковка,
	|		Значение(Справочник.Склады.ПустаяСсылка) Размещение,
	|		Сумма(Количество),
	|       0,
	|		Значение(Перечисление.СостояниесборкиЗаказа.Отгружен) Состояние
	|	ИЗ
	|		РегистрНакопления.ВнутренниеЗаказы 
	|	ГДЕ ВнутреннийЗаказ = &Заказ
	|	и ВидДвижения = Значение(ВидДвиженияНакопления.Расход)
	|	Сгруппировать по Номенклатура, Упаковка
	|	Имеющие Сумма(Количество)>0		
	|
	|ОБЪЕДИНИТЬ ВСЕ
	
		//ожидание поступления
	|	ВЫБРАТЬ
	|		Номенклатура,
	|		Упаковка,
	|		Значение(Справочник.Склады.ПустаяСсылка),
	|		КоличествоОстаток Количество,
	|       0,
	|		Значение(Перечисление.СостояниесборкиЗаказа.ОжидаетПоступления) Состояние
	|	ИЗ
	|		РегистрНакопления.РазмещениеЗаказов.Остатки(,Заказ = &Заказ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
		
		//возвращено
	|	ВЫБРАТЬ
	|		Номенклатура,
	|		Упаковка,
	|		Склад Размещение,
	|		-Сумма(Количество) Количество,
	|       0,
	|		Значение(Перечисление.СостояниесборкиЗаказа.Возвращено) Состояние
	|	ИЗ
	|		РегистрНакопления.Продажи
	|	ГДЕ Заказ=&Заказ
	| 	и Количество<0
	| Сгруппировать по Номенклатура, Упаковка, Склад
	|
	|;
	
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	//Товары без состояния НО В РЕЗЕРВЕ: Это Резервы - внутренние заказы - сборки - отмены сборок 
	//эти 3 вычитаемых мы учли в ресурсе КоличествоВычитаемоеИзРезерва
	|   ВЫБРАТЬ Номенклатура,Размещение, Сумма(КоличествоВычитаемоеИзРезерва) 
	|		Поместить СостоянияВычитаемыеИзРезерва
	|	из Состояния ГДЕ КоличествоВычитаемоеИзРезерва>0
	|		Сгруппировать по Номенклатура,Размещение
	|;	
	
	|	ВЫБРАТЬ
	|		Резервы.Номенклатура Номенклатура,
	|		Значение(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) Упаковка,
	|		Резервы.Размещение Размещение,
	|		Резервы.КоличествоОстаток-естьnull(Состояния.КоличествоВычитаемоеИзРезерва,0) Количество
	|Поместить РезервыБезСостояния	
	|	ИЗ
	|		РегистрНакопления.ТоварыВРезерве.Остатки(,ДокументРезерва = &Заказ) Резервы
	|  левое соединение
	|         СостоянияВычитаемыеИзРезерва КАК Состояния
	|		по Резервы.Номенклатура=Состояния.Номенклатура и Резервы.Размещение=Состояния.Размещение
	|ГДЕ Резервы.КоличествоОстаток-естьnull(Состояния.КоличествоВычитаемоеИзРезерва,0)>0
	|;
	
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	//Таблица документа 
	
	|           Выбрать Номенклатура,Упаковка,Сумма(Количество)
	|			Поместить ТабДок
	|			из
	|			(
	|			ВЫБРАТЬ
	|				Номенклатура,Упаковка,Количество 
	|			ИЗ
	|				Документ.ЗаказПокупателя.Товары
	|			ГДЕ Ссылка = &Заказ
	//костылёг для внутренних заказов. Когда же мы их сделаем по-человечески?
	|			Объединить все
	|
	|			ВЫБРАТЬ
	|				Номенклатура, Упаковка, Количество 
	|			ИЗ
	|				Документ.КорректировкаВнутреннегоЗаказа.Товары
	|			ГДЕ Ссылка.Заказ = &Заказ и Ссылка.Проведен
	//костылёг для внутренних заказов
	|			) Доки
	|
	| 			Сгруппировать по Номенклатура, Упаковка
	|;
	
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	//Товары без состояния и без резервов: Это таблица документа - Таблица состояний - Резервы без состояния 
	
	|	ВЫБРАТЬ
	|		ТабДок.Номенклатура Номенклатура,
	|		ТабДок.Упаковка Упаковка,
	|		Значение(Справочник.Склады.ПустаяСсылка) Размещение,
	|		ТабДок.Количество - естьnull(СостоянияГрп.Количество,0) - естьnull(РезервыБезСостояния.Количество,0) КАК Количество
	|	Поместить БезРезервовБезСостояния
	|	ИЗ
	|		ТабДок КАК ТабДок
	|
	|   Левое соединение
	|	(
	|		Выбрать Номенклатура, Сумма(Количество)
	|			из Состояния
	|		Сгруппировать по Номенклатура
	|	) КАК СостоянияГрп
	|
	|по ТабДок.Номенклатура = СостоянияГрп.Номенклатура 
	|
	|Левое соединение
	|    (
	|	Выбрать Номенклатура, Сумма(Количество)
	|	из РезервыБезСостояния
	|	сгруппировать по Номенклатура
	|	) КАК РезервыБезСостояния
	|
	|По ТабДок.Номенклатура = РезервыБезСостояния.Номенклатура
	|
	|ГДЕ ТабДок.Количество - естьnull(СостоянияГрп.Количество,0) - естьnull(РезервыБезСостояния.Количество,0)>0
	|;
	
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	//Итоговая таблица 
	//объединяем с таблицей состояний и Резервами без состояния
	//и получаем результирующую таблицу
	
	|	ВЫБРАТЬ
	|		Номенклатура.артикул артикул,
	|		Номенклатура.Вес Вес,
	|		Количество,
	|		Значение(Справочник.Маршруты.ПустаяСсылка) Маршрут,
	|		Номенклатура Номенклатура,
	|		Неопределено НоменклатураУчет,
	|		Номенклатура.Объем Объем,
	|		Размещение,
	|		Состояние,
	|		Упаковка
	|	из
	|	(
	|	ВЫБРАТЬ
	|		Номенклатура,
	|		Упаковка,
	|		Размещение,
	|		Количество,
	|		Состояние
	|	ИЗ
	|		Состояния
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Номенклатура,
	|		Упаковка,
	|		Размещение,
	|		Количество,
	|		Значение(Перечисление.СостояниесборкиЗаказа.НеСобрано) Состояние
	|	ИЗ
	|		РезервыБезСостояния
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Номенклатура,
	|		Упаковка,
	|		Размещение,
	|		Количество,
	|		Значение(Перечисление.СостояниесборкиЗаказа.НеСобрано) Состояние
	|	ИЗ
	|    БезРезервовБезСостояния 
	|	
	|) КАК ВТ
	|
	|Упорядочить по Номенклатура,Размещение
	|
	|";
	
	//замены
	ИмяДок=Заказ.Метаданные().Имя;
	ТекстЗапроса=СтрЗаменить(ТекстЗапроса,"Документ.ЗаказПокупателя","Документ."+ИмяДок);
	
	Запрос.Текст=ТекстЗапроса;
	
	ТабРезультат=Запрос.Выполнить().Выгрузить();

	Возврат ТабРезультат;
	
КонецФункции


Процедура ЗаполнитьМаршрутыВТаблицеСостояний(СсылкаПроцесс,ТабСост) Экспорт

	Если ТипЗнч(СсылкаПроцесс) = Тип("БизнесПроцессСсылка.ПеремещениеТоваров") Тогда
		Заказ = СсылкаПроцесс.Заказчик.Заказ
	Иначе	
		Заказ = СсылкаПроцесс.Заказ;
	КонецЕсли;

	ИмяДок=Заказ.Метаданные().Имя;
	Если ИмяДок = "ВнутреннийЗаказ" Тогда
		Если ТипЗнч(Заказ.Заказчик) = Тип("СправочникСсылка.Склады") Тогда
			СкладПолучатель = Заказ.Заказчик;
		Иначе
			СкладПолучатель = Заказ.Заказчик.Склад //Сборка
		КонецЕсли;	
	Иначе//заказ покупателя интернетзаказ
		СкладПолучатель = Заказ.Склад;
	КонецЕсли;	


	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СкладПолучатель",СкладПолучатель);
	
	Запрос.Текст="
	//отбираем получателей
	|выбрать ссылка 
	|Поместить МаршрутыПоПолучателю
	|из справочник.Маршруты.СкладыЗаказчики ГДЕ Склад = &СкладПолучатель И Ссылка.Активный
	|;
	//отбираем отправителей по получателям
	|выбрать ссылка,склад 
	|из справочник.Маршруты.СкладыОтправители ГДЕ Ссылка в (выбрать ссылка из МаршрутыПоПолучателю) и Ссылка.Активный
	|";
	
	Маршруты = Запрос.Выполнить().Выгрузить();
	
	//nested loops
	Для Каждого Стр из ТабСост Цикл
		Отбор=Новый Структура("Склад",Стр.Размещение);
		ММ = Маршруты.НайтиСтроки(Отбор);
		Если ММ.Количество() Тогда
			Стр.Маршрут = ММ[0].Ссылка;     //берем первый попавшийся маршрут подходящий под условие
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

Функция ПолучитьТаблицуСобранныхТоваров(Заказ, Склад = Неопределено, Дата = Неопределено) Экспорт
	
	// Возвращает таблицу собранных товаров для заполнения таблицы в реализации товаров
	
	Запрос = Новый Запрос(СтрШаблон("
	|ВЫБРАТЬ 	Склад, СборочныйЛист, Номенклатура, Упаковка, КоличествоОстаток Количество
	|ИЗ 		РегистрНакопления.ТоварыСобранные.Остатки(%1,%2)
	|ГДЕ 		Заказ = &Заказ", 
		?(Дата = Неопределено, "","&Дата"), 
		?(Склад = Неопределено, "", "Склад = &Склад")));
	
	Запрос.УстановитьПараметр("Заказ", 	Заказ);
	Запрос.УстановитьПараметр("Склад", 	Склад);
	Запрос.УстановитьПараметр("Дата", 	Дата);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции


#КонецОбласти




#Область ЗоопаркЧудоФункций

//Сюда вы можете добавлять обезвреженных (то есть более не используемые в системе) функций-монстров и просто чудиков, логика работы которых невыразима литературным русским языком

Функция ПолучитьСостояниеТоваров_ст(СсылкаПроцесса, ДатаСостояния = Неопределено, УчитыватьБПРодитель = Истина, ПоказатьОжидающие = Истина) Экспорт
	
	Перем СкладЗаказчик; //, СтруктураКолонокТовары;
	
	Заказ = СсылкаПроцесса.Заказ;
	
	// ЭТО ПО СТАРОМУ
	
	Если Не Заказ.СпособРазмещенияБезЗаказа Тогда 
		Возврат ПолучитьСостояниеТоваров_СЗаказом(СсылкаПроцесса, ДатаСостояния, УчитыватьБПРодитель, ПоказатьОжидающие); КонецЕсли;
	
	// А ДАЛЬШЕ ПО НОВОМУ
	
	//ТекстДаты = ?(ДатаСостояния = Неопределено, "", "&ДатаПросмотра");
	
	
	ТекстДаты =  "";    //ПО ИДЕЕ остатки на дату документа нафиг не нужны, так что убираем! Если чо - вернуть!
	
	
	
	// Подготовим запрос
	
#Область Запрос
	
	ЭтоВнутренний 	= ТипЗнч(Заказ) = Тип("ДокументСсылка.ВнутреннийЗаказ");
	Запрос 			= Новый Запрос("
	
	
	|	ВЫБРАТЬ
	|		Номенклатура,
	|		Упаковка,
	|		Ячейка,
	|		СкладРезерв,
	|		СкладПолучатель,
	|		СкладЗаказчик,
	|		Маршрут,
	|		Сборщик,
	|		ДокументРезерва,
	|		ОчередьОжиданияПоступления,
	|		Ожидание,
	|		Сумма(Собрано),
	|		Сумма(ВСборке),
	|		Сумма(НеСобрано),
	|		Сумма(НеВСборке),
	|		Сумма(ОжиданиеПоступления),
	|		Сумма(ОжиданиеПеремещения),
	|		Сумма(Перемещается),
	|		Сумма(Отгружено),
	|		Сумма(ОтгруженоСумма),
	|		Сумма(Возвращено)
	|
	|из
	|(
	
	// Таблица по сборке
	
	|	ВЫБРАТЬ
	|		Номенклатура,
	|		Упаковка,
	|		ВЫБОР КОГДА СкладЯчейка ССЫЛКА Справочник.Ячейки ТОГДА СкладЯчейка ИНАЧЕ NULL КОНЕЦ 				Ячейка,
	|		ВЫБОР КОГДА СкладЯчейка ССЫЛКА Справочник.Ячейки ТОГДА СкладЯчейка.Владелец ИНАЧЕ СкладЯчейка КОНЕЦ	СкладРезерв,
	|		NULL																								СкладПолучатель,
	|		Заказ.Заказчик																						СкладЗаказчик,
	|		NULL																								Маршрут,
	|		Сборщик 																							Сборщик,
	|		NULL																								ДокументРезерва,
	|		NULL																								ОчередьОжиданияПоступления,
	|		ЛОЖЬ																								Ожидание,
	|		СобраноОстаток 																						Собрано,
	|		ВСборкеОстаток 																						ВСборке,
	|		0																									НеСобрано,
	|		0																									НеВСборке,
	|		0																									ОжиданиеПоступления,
	|		0																									ОжиданиеПеремещения,
	|		0																									Перемещается,
	|		0																									Отгружено,
	|		0																									ОтгруженоСумма,
	|		0																									Возвращено
	|	ИЗ
	|		РегистрНакопления.СборкаЗаказа.Остатки(" + ТекстДаты + ", Заказ = &Заказ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	
	// Таблица по отмене собранного
	
	|	ВЫБРАТЬ
	|		Номенклатура,
	|		Упаковка,
	|		ВЫБОР КОГДА СкладЯчейка ССЫЛКА Справочник.Ячейки ТОГДА СкладЯчейка ИНАЧЕ NULL КОНЕЦ 				Ячейка,
	|		ВЫБОР КОГДА СкладЯчейка ССЫЛКА Справочник.Ячейки ТОГДА СкладЯчейка.Владелец ИНАЧЕ СкладЯчейка КОНЕЦ	СкладРезерв,
	|		NULL																								СкладПолучатель,
	|		Заказ.Заказчик																						СкладЗаказчик,
	|		NULL																								Маршрут,
	|		Сборщик 																							Сборщик,
	|		NULL																								ДокументРезерва,
	|		NULL																								ОчередьОжиданияПоступления,
	|		ЛОЖЬ																								Ожидание,
	|		0,
	|		0,
	|		СобраноОстаток,
	|		ВСборкеОстаток,
	|		0																									ОжиданиеПоступления,
	|		0																									ОжиданиеПеремещения,
	|		0																									Перемещается,
	|		0																									Отгружено,
	|		0																									ОтгруженоСумма,
	|		0																									Возвращено
	|	ИЗ
	|		РегистрНакопления.ОтменаСборкиЗаказа.Остатки(" + ТекстДаты + ", Заказ = &Заказ) КАК Сбор
	|
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Таблица по реализации
	
	|" + ?(ЭтоВнутренний, "
	|
	|	ВЫБРАТЬ
	|		Номенклатура,
	|		Упаковка,
	|		NULL 				Ячейка,
	|		Склад 				СкладРезерв,
	|		NULL 				СкладПолучатель,
	
	|		NULL 				СкладЗаказчик,
	
	|		NULL				Маршрут,
	|		NULL 				Сборщик,
	|		NULL				ДокументРезерва,
	|		NULL				ОчередьОжиданияПоступления,
	|		ЛОЖЬ				Ожидание,
	|		0					Собрано,
	|		0					ВСборке,
	|		0					НеСобрано,
	|		0					НеВСборке,
	|		0					ОжиданиеПоступления,
	|		0					ОжиданиеПеремещения,
	|		0					Перемещается,
	|		КоличествоОборот 	Отгружено,
	|		0					ОтгруженоСумма,
	|		0					Возвращено
	|	ИЗ
	|		РегистрНакопления.ДвижениеТовара.Обороты(,,, Заказ = &Заказ И Склад = &СкладЗаказчик)
	|	ГДЕ
	|		КоличествоОборот <> 0
	|","
	|
	|
	|	ВЫБРАТЬ
	|		Номенклатура,
	|		Упаковка,
	|		NULL 				Ячейка,
	|		Склад 				СкладРезерв,
	|		NULL 				СкладПолучатель,
	|		NULL 				СкладЗаказчик,
	|		NULL				Маршрут,
	|		NULL 				Сборщик,
	|		NULL				ДокументРезерва,
	|		NULL				ОчередьОжиданияПоступления,
	|		ЛОЖЬ				Ожидание,
	|		0					Собрано,
	|		0					ВСборке,
	|		0					НеСобрано,
	|		0					НеВСборке,
	|		0					ОжиданиеПоступления,
	|		0					ОжиданиеПеремещения,
	|		0					Перемещается,
	|		Выбор когда Количество>0 Тогда  Количество Иначе 0 Конец	Отгружено,
	|	    Выбор когда Количество>0 Тогда  Сумма Иначе 0 Конец		ОтгруженоСумма,
	|		Выбор когда Количество<0 Тогда - Количество Иначе 0 Конец	Возвращено
	|	ИЗ
	|		РегистрНакопления.Продажи
	|	ГДЕ
	|       Заказ = &Заказ	
	|    ") + "
	
		
	|ОБЪЕДИНИТЬ ВСЕ
	
	// Таблица по ожидающим перемещениям
	
	|	ВЫБРАТЬ
	|		Номенклатура,
	|		Упаковка,
	|		NULL 				Ячейка,
	|		ВнутреннийЗаказ.Склад 																				СкладРезерв,
	|		ВЫБОР КОГДА Заказчик ССЫЛКА Справочник.Склады ТОГДА Заказчик ИНАЧЕ Заказчик.Заказ.Склад КОНЕЦ 		СкладПолучатель,
	|		ВЫБОР КОГДА Заказчик ССЫЛКА Справочник.Склады ТОГДА Заказчик ИНАЧЕ ЕСТЬNULL(Заказчик.Заказ.Заказчик, Заказчик.Заказ.Склад) КОНЕЦ СкладЗаказчик,
	|		ВнутреннийЗаказ.Маршрут 					Маршрут,
	|		NULL 										Сборщик,
	|		ВнутреннийЗаказ.Заказчик.Заказ 				ДокументРезерва,
	|		NULL										ОчередьОжиданияПоступления,
	|		ЛОЖЬ										Ожидание,
	|		0								Собрано,
	|		0								ВСборке,
	|		0								НеСобрано,
	|		0								НеВСборке,
	|		0								ОжиданиеПоступления,
	|		Зак.КоличествоОстаток			ОжиданиеПеремещения,
	|		0								Перемещается,
	|		0							 	Отгружено,
	|	    0						 		ОтгруженоСумма,
	|		0								Возвращено
	|	ИЗ
	|		РегистрНакопления.ВнутренниеЗаказы.Остатки(" + ТекстДаты + ", " + ?(УчитыватьБПРодитель," Заказчик В(выбрать ссылка из бизнесПроцесс.СборкаЗаказа ГДЕ ссылка в (&СписокБП))"," Заказчик = &СсылкаБП ") + ") Зак
	|
	|
	|ОБЪЕДИНИТЬ ВСЕ
	
	// Таблица по перемещениям
	
	|	ВЫБРАТЬ
	|		Номенклатура,
	|		Упаковка,
	|		NULL 					Ячейка,
	|		СкладОтправитель		СкладРезерв,
	|		СкладПолучатель			СкладПолучатель,
	|		ВЫБОР КОГДА Заказчик.Заказ ССЫЛКА Документ.ВнутреннийЗаказ ТОГДА Заказчик.Заказ.Заказчик ИНАЧЕ Заказчик.Склад КОНЕЦ СкладЗаказчик,
	|		Маршрут 				Маршрут,
	|		NULL					Сборщик,
	|		Заказчик.Заказ 			ДокументРезерва,
	|		NULL					ОчередьОжиданияПоступления,
	|		ЛОЖЬ					Ожидание,
	|		0								Собрано,
	|		0								ВСборке,
	|		0								НеСобрано,
	|		0								НеВСборке,
	|		0								ОжиданиеПоступления,
	|		0								ОжиданиеПеремещения,
	|		КоличествоОстаток				Перемещается,
	|		0							 	Отгружено,
	|	    0						 		ОтгруженоСумма,
	|		0								Возвращено
	|	ИЗ 	
	|		РегистрНакопления.ТоварыВПути.Остатки(" + ТекстДаты + ", " + ?(УчитыватьБПРодитель," Заказчик В(&СписокБП)"," Заказчик = &СсылкаБП ") + ")
	|	ГДЕ
	|		КоличествоОстаток <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	
	// Ожидание поступления
	
	|	ВЫБРАТЬ
	|		Номенклатура,
	|		Упаковка,
	|		NULL 			Ячейка,
	|		NULL			СкладРезерв,
	|		NULL			СкладПолучатель,
	|		NULL			СкладЗаказчик,
	|		NULL 			Маршрут,
	|		NULL			Сборщик,
	|		NULL		 	ДокументРезерва,
	|		Очередь			ОчередьОжиданияПоступления,
	|		ИСТИНА			Ожидание,
	|		0					Собрано,
	|		0					ВСборке,
	|		0					НеСобрано,
	|		0					НеВСборке,
	|		КоличествоОстаток	ОжиданиеПоступления,
	|		0					ОжиданиеПеремещения,
	|		0					Перемещается,
	|		0					Отгружено,
	|	    0					ОтгруженоСумма,
	|		0					Возвращено
	|	ИЗ 	
	|		РегистрНакопления.РазмещениеЗаказов.Остатки(" + ТекстДаты + ", Заказ = &Заказ)
	|	ГДЕ
	|		КоличествоОстаток <> 0
	|
	|) ВТ
	
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура,
	|		Упаковка,
	|		Ячейка,
	|		СкладРезерв,
	|		СкладПолучатель, 
	|		СкладЗаказчик,
	|		Маршрут,
	|		Сборщик,
	|		ДокументРезерва,
	|		ОчередьОжиданияПоступления,
	|		Ожидание
	|");
	
	Если УчитыватьБПРодитель Тогда
		Родители = Новый Массив;
		ПолучитьРодителяБПСборка(СсылкаПроцесса, Родители);
		Родители.Добавить(ссылкаПроцесса);
		Запрос.УстановитьПараметр("СписокБП", Родители); 
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаПросмотра", 			ДатаСостояния);
	Запрос.УстановитьПараметр("СсылкаБП", 				СсылкаПроцесса);
	Запрос.УстановитьПараметр("Заказ", 					Заказ);
	
	Если ЭтоВнутренний Тогда Запрос.УстановитьПараметр("СкладЗаказчик", Заказ.Заказчик) КонецЕсли;
	
	#КонецОбласти
	
#Область Иницилизация

	// Получим результат
	
	ТаблицаЗаказ 		= ПолучитьТаблицуТоваровПоЗаказуСРаставленнымРазмещениемБезСумм(Заказ);
	//ТаблицаЗаказ 		= ПолучитьТаблицуТоваровПоЗаказу(Заказ);
	ТабСостоянияТоваров	= Запрос.Выполнить().Выгрузить();
	
	// Закешируем
	
	ТабСостоянияТоваров.Индексы.Добавить("Номенклатура,Упаковка");
	
	// Подготовим таблицу возврата
	
	ТиЗнчЗаказа = ТипЗнч(Заказ);
	
	//ТабРезультат = СформироватьТаблицуВозвратаРезультатБезСумм();
	ТабРезультат = ТаблицаЗаказ.СкопироватьКолонки();
	ТабРезультат.Колонки.Добавить("Состояние", 	Новый ОписаниеТипов("ПеречислениеСсылка.СостояниеСборкиЗаказа"));
	ТабРезультат.Колонки.Добавить("Маршрут", 	Новый ОписаниеТипов("СправочникСсылка.Маршруты"));
	
	Если ТиЗнчЗаказа = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда 
		СкладЗаказчик = Заказ.Заказчик
	Иначе 
		//СтруктураКолонокТовары = ФункцииФормДокументов.ПолучитьСтруктуруКолонокТоварыПоОбъекту(Заказ); 
	КонецЕсли;
				
#КонецОбласти
	
#Область Расчет_итогов_запроса

	// Расчитаем статусы и заполним таблицу результат
	
	Для Каждого СтрокаЗаказа Из ТаблицаЗаказ Цикл
		
		// Подготоим таблицу итогов
		
		Отбор 		= Новый Структура("Номенклатура, Упаковка", СтрокаЗаказа.Номенклатура, СтрокаЗаказа.Упаковка);
		ТабИтогов 	= КонвертацияТипов.ПолучитьТаблицуИзНайденныхСтрокТаблицыЗначений(ТабСостоянияТоваров, Отбор);
		ТабИтогов.Свернуть("Номенклатура, Упаковка", "Собрано, ВСборке, НеСобрано, НеВСборке, ОжиданиеПоступления, ОжиданиеПеремещения, Перемещается, Отгружено, ОтгруженоСумма, Возвращено");
		
		СтрокиИтога = ТабИтогов.НайтиСтроки(Отбор);
		
		Если СтрокиИтога.Количество() Тогда СтрокаИтог = СтрокиИтога[0];
		
			// Определеим статус
			
			БылВозврат = Ложь;
			~НачалаРасчета: 
			Если СтрокаЗаказа.Количество > 0 Тогда
				
				Если Не БылВозврат И СтрокаИтог.Возвращено > 0 Тогда // когда возврат тогда порядок строк иной
					
					ОтборВозврата 	= Новый Структура("Номенклатура, Упаковка, СкладРезерв", СтрокаЗаказа.Номенклатура, СтрокаЗаказа.Упаковка, СтрокаЗаказа.Размещение);
					БылВозврат 		= Истина;
					ДобавитьСтрокуЗаказа(Перечисления.СостояниеСборкиЗаказа.Возвращено,,ОтборВозврата,"Возвращено", Отбор, ТабРезультат, СтрокаЗаказа, СтрокаИтог, ТабСостоянияТоваров);
					Перейти ~НачалаРасчета;
						
					//ИначеЕсли 	СтрокаИтог.Перемещается > 0 И 		// сколько перемещается
					//			ДобавитьСтрокуЗаказа2("Перемещается", Перечисления.СостояниеСборкиЗаказа.Перемещается, СтрокаЗаказа, СтрокаИтог, ТабРезультат, ТабСостоянияТоваров) Тогда 
					//	Перейти ~НачалаРасчета;
					//	
					//ИначеЕсли 	СтрокаИтог.ОжиданиеПеремещения > 0 И 	// сколько ожидает перемещения
					//			ДобавитьСтрокуЗаказа2("ОжиданиеПеремещения", Перечисления.СостояниеСборкиЗаказа.ОжидаетПеремещения, СтрокаЗаказа, СтрокаИтог, ТабРезультат, ТабСостоянияТоваров) Тогда 
					//	Перейти ~НачалаРасчета;
					//	
					//ИначеЕсли 	СтрокаИтог.Отгружено > 0 И 				// сколько отгрузили
					//			ДобавитьСтрокуЗаказа2("Отгружено", Перечисления.СостояниеСборкиЗаказа.Отгружен, СтрокаЗаказа, СтрокаИтог, ТабРезультат, ТабСостоянияТоваров) Тогда 
					//	Перейти ~НачалаРасчета; КонецЕсли;
					
				ИначеЕсли Не БылВозврат И СтрокаИтог.Отгружено > 0 И 				// сколько отгрузили
					ДобавитьСтрокуЗаказа2("Отгружено", Перечисления.СостояниеСборкиЗаказа.Отгружен, СтрокаЗаказа, СтрокаИтог, ТабРезультат, ТабСостоянияТоваров) Тогда Перейти ~НачалаРасчета;
					
				ИначеЕсли СтрокаИтог.ОжиданиеПоступления > 0 И // сколько ожидает поступления
					ДобавитьСтрокуЗаказа( Перечисления.СостояниеСборкиЗаказа.ОжидаетПоступления,,,"ОжиданиеПоступления", Отбор, ТабРезультат, СтрокаЗаказа, СтрокаИтог, ТабСостоянияТоваров) Тогда Перейти ~НачалаРасчета;
							
				ИначеЕсли СтрокаИтог.Перемещается > 0 И 		// сколько перемещается
					ДобавитьСтрокуЗаказа2("Перемещается", Перечисления.СостояниеСборкиЗаказа.Перемещается, СтрокаЗаказа, СтрокаИтог, ТабРезультат, ТабСостоянияТоваров) Тогда Перейти ~НачалаРасчета;
					
				ИначеЕсли СтрокаИтог.ОжиданиеПеремещения > 0 И 	// сколько ожидает перемещения
					ДобавитьСтрокуЗаказа2("ОжиданиеПеремещения", Перечисления.СостояниеСборкиЗаказа.ОжидаетПеремещения, СтрокаЗаказа, СтрокаИтог, ТабРезультат, ТабСостоянияТоваров) Тогда Перейти ~НачалаРасчета;
					
				ИначеЕсли СтрокаИтог.НеВСборке > 0 И 			// сколько отменили в сборке
					ДобавитьСтрокуЗаказа2("НеВСборке", Перечисления.СостояниеСборкиЗаказа.ОтменаСборки, СтрокаЗаказа, СтрокаИтог, ТабРезультат, ТабСостоянияТоваров) Тогда Перейти ~НачалаРасчета;
					
				ИначеЕсли СтрокаИтог.НеСобрано > 0 И 			// сколько отменили собранного
					ДобавитьСтрокуЗаказа2("НеСобрано", Перечисления.СостояниеСборкиЗаказа.ОтменаСборки, СтрокаЗаказа, СтрокаИтог, ТабРезультат, ТабСостоянияТоваров) Тогда Перейти ~НачалаРасчета;
					
				ИначеЕсли СтрокаИтог.ВСборке > 0 И 				// сколько в сборке
					ДобавитьСтрокуЗаказа2("ВСборке", Перечисления.СостояниеСборкиЗаказа.Собирается, СтрокаЗаказа, СтрокаИтог, ТабРезультат, ТабСостоянияТоваров) Тогда Перейти ~НачалаРасчета;
					
				ИначеЕсли СтрокаИтог.Собрано > 0 И 				// сколько собрано
					ДобавитьСтрокуЗаказа2("Собрано", Перечисления.СостояниеСборкиЗаказа.Собрано, СтрокаЗаказа, СтрокаИтог, ТабРезультат, ТабСостоянияТоваров) Тогда Перейти ~НачалаРасчета;
					
				ИначеЕсли БылВозврат И СтрокаЗаказа.Количество > 0 Тогда // если после возврата еще чтото осталось то пройдем еще раз
					БылВозврат = Ложь;
					СтрокаИтог.Возвращено = 0;
					Перейти ~НачалаРасчета;
				
				Иначе
					
					НовСтрока = ТабРезультат.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтрока, СтрокаЗаказа);
					НовСтрока.Состояние 	= Перечисления.СостояниеСборкиЗаказа.НеСобрано; КонецЕсли; КонецЕсли;
				
		Иначе // нет ни каких итогов по данному заказу, значит заполняем все как заказано
				
			НовСтрока = ТабРезультат.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, СтрокаЗаказа);
			НовСтрока.Состояние 	= Перечисления.СостояниеСборкиЗаказа.НеСобрано; КонецЕсли; КонецЦикла;
	
	#КонецОбласти
	
#Область Маршруты
	
	// Проставим маршруты где не заполнено
	
	ТабСклады = ТаблицаЗаказ.Скопировать();
	ТабСклады.Свернуть("Размещение");
	
	ПустыеМаршруты = ТабРезультат.НайтиСтроки(Новый Структура("Маршрут", Справочники.Маршруты.ПустаяСсылка()));
	
	Если ПустыеМаршруты.Количество() Тогда
		
		ТабМаршруты = КэшируемыеФункции.ПолучитьТаблицуМаршрутов();
	
		Для Каждого Строка Из ПустыеМаршруты Цикл 
			
			//стрМаршрута = ТабМаршруты.НайтиСтроки(Новый Структура("СкладОтправитель, СкладПолучатель", Строка.СкладЯчейка, Строка.СкладЗаказчик));
			стрМаршрута = ТабМаршруты.НайтиСтроки(Новый Структура("СкладОтправитель, СкладПолучатель", Строка.Размещение, Заказ.Склад));
			Если Не стрМаршрута.Количество() Тогда 
				стрМаршрута = ТабМаршруты.НайтиСтроки(Новый Структура("СкладТранзит, СкладПолучатель", Строка.Размещение, Заказ.Склад)) КонецЕсли;
				//стрМаршрута = ТабМаршруты.НайтиСтроки(Новый Структура("СкладТранзит, СкладПолучатель", Строка.СкладЯчейка, Строка.СкладЗаказчик)) КонецЕсли;
			
			Для Каждого СтрокаМаршрута Из стрМаршрута Цикл
				
				Если ТабСклады.Найти(СтрокаМаршрута.СкладТранзит, "Размещение") <> Неопределено Тогда
					Строка.Маршрут = СтрокаМаршрута.Маршрут; КонецЕсли; КонецЦикла; КонецЦикла; КонецЕсли;
	
#КонецОбласти
	//07.12.15 теперь новый порядок, как выставил менеджер ТабРезультат.Сортировать("Номенклатура");	
	Возврат ТабРезультат;
	
КонецФункции

Функция ДобавитьСтрокуЗаказа(Статус, СоответвияКолонок = Неопределено, ОтборТаблицы = Неопределено, ИмяИтога, Отбор, ТабРезультат, СтрокаЗаказа, СтрокаИтог, ТабСостоянияТоваров, СтруктураКолонокТовары = Неопределено)
	
	// Возвращает ИСТИНА если было чтото добавлено и ЛОЖЬ если ничего не добавилось
	
	Добавлено = Ложь;
	
	// Создадим структуру поиска детельных строк
	
	Если ОтборТаблицы = Неопределено Тогда ОтборТаблицы = Отбор;
	Иначе КонвертацияТипов.ДобавитьВСтруктуруСтруктуру(ОтборТаблицы, Отбор); КонецЕсли;
	СтрокиДетальныхИтогов = ТабСостоянияТоваров.НайтиСтроки(ОтборТаблицы);
	
	Для Каждого СтрокаДетальногоИтога Из СтрокиДетальныхИтогов Цикл 
		
		Количество = Мин(СтрокаДетальногоИтога[ИмяИтога], СтрокаЗаказа.Количество);
		
		Если Количество > 0 Тогда Добавлено = Истина;
		
			// Заполняем детальными значениями
			
			НовСтрока = ТабРезультат.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, СтрокаЗаказа);
			ЗаполнитьЗначенияСвойств(НовСтрока, СтрокаДетальногоИтога);
			Если СоответвияКолонок <> Неопределено Тогда 
				Для Каждого Элемент Из СоответвияКолонок Цикл
					
					Если Сред(Элемент.Значение, 1, 1) = "?" Тогда
						
						// Если в названии колонки стоит вопрос то и первая колонка пустая то берем из второй колонки
						// Пример: ? ПерваяКолонка, ВтораяКолонка
					
						позЗапятая 		= Найти(Элемент.Значение, ",");
						НовоеЗначение 	= СтрокаДетальногоИтога[СокрЛП(Сред(Элемент.Значение, 2, позЗапятая - 2))];
						Если Не ЗначениеЗаполнено(НовоеЗначение) Тогда НовоеЗначение = СтрокаДетальногоИтога[СокрЛП(Сред(Элемент.Значение, позЗапятая + 1))]; КонецЕсли;
							
					Иначе НовоеЗначение = СтрокаДетальногоИтога[Элемент.Значение]; КонецЕсли;
						
					НовСтрока[Элемент.Ключ] = НовоеЗначение; КонецЦикла; КонецЕсли;
			
			// Вычитаем и запоминаем
			
			НовСтрока.Количество 			= Количество;
			СтрокаИтог[ИмяИтога] 			= СтрокаИтог[ИмяИтога] - Количество; 
			СтрокаДетальногоИтога[ИмяИтога] = СтрокаДетальногоИтога[ИмяИтога] - Количество;
			СтрокаЗаказа.Количество			= СтрокаЗаказа.Количество - Количество;
			НовСтрока.Состояние				= Статус; 
			
			Если СтруктураКолонокТовары <> Неопределено Тогда
				ФункцииФормДокументов.РассчитатьСуммыСтрокиОтЦены(НовСтрока, СтруктураКолонокТовары, Ложь);
				ФункцииФормДокументов.РассчитатьСуммыСтрокиОтЦены(СтрокаЗаказа, СтруктураКолонокТовары, Ложь); КонецЕсли;
			
			//ФункцииФормДокументов.РассчитатьСуммыТабличныхЧастей(НовСтрока, СтруктураКолонокТовары);
			//ФункцииФормДокументов.РассчитатьСуммыТабличныхЧастей(СтрокаЗаказа, СтруктураКолонокТовары);
			
		КонецЕсли; КонецЦикла;
		
	Возврат Добавлено;
		
КонецФункции
Функция ДобавитьСтрокуЗаказа2(ИмяКолонки, Статус, СтрокаЗаказа, СтрокаИтог, ТабРезультат, ТабСостоянияТоваров, СтруктураКолонокТовары = Неопределено)
	
	// Возвращает ИСТИНА если было чтото добавлено и ЛОЖЬ если ничего не добавилось
	
	Добавлено = Ложь;
	
	Для Каждого Строка Из ТабСостоянияТоваров Цикл
		Если Не СтрокаЗаказа.Количество Тогда Прервать; КонецЕсли;
		Если Строка[ИмяКолонки] > 0 И СтрокаЗаказа.Размещение = Строка.СкладРезерв И СтрокаЗаказа.Номенклатура = Строка.Номенклатура Тогда Добавлено = Истина;
			
			// Заполняем детальными значениями
			
			НовСтрока = ТабРезультат.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, СтрокаЗаказа);
			ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
			
			НовСтрока.Количество 	= Мин(Строка[ИмяКолонки], СтрокаЗаказа.Количество);
			НовСтрока.Состояние		= Статус; 
			СтрокаЗаказа.Количество	= СтрокаЗаказа.Количество - НовСтрока.Количество;
			СтрокаИтог[ИмяКолонки] 	= СтрокаИтог[ИмяКолонки] - НовСтрока.Количество; КонецЕсли; КонецЦикла;
	
	Возврат Добавлено;
		
КонецФункции


Функция ПолучитьСостояниеТоваров_СЗаказом(СсылкаПроцесса, ДатаСостояния = Неопределено, УчитыватьБПРодитель = Истина, ПоказатьОжидающие = Истина) Экспорт
	
	Перем СкладЗаказчик;
	
	// ПоказатьОжидающие - в таблице появятся позиции с колонкой Ожидающие
	
	ТекстДаты = ?(ДатаСостояния = Неопределено, "", "&ДатаПросмотра");
	
	// Подготовим запрос
	
#Область Запрос
	
	Заказ 			= СсылкаПроцесса.Заказ;
	ЭтоВнутренний 	= ТипЗнч(Заказ) = Тип("ДокументСсылка.ВнутреннийЗаказ");
	Запрос 			= Новый Запрос("
	
		
	// Таблица по сборке
	
	|	ВЫБРАТЬ
	|		Номенклатура,
	|		Упаковка,
	|		ВЫБОР КОГДА СкладЯчейка ССЫЛКА Справочник.Ячейки ТОГДА СкладЯчейка ИНАЧЕ NULL КОНЕЦ 				Ячейка,
	|		ВЫБОР КОГДА СкладЯчейка ССЫЛКА Справочник.Ячейки ТОГДА СкладЯчейка.Владелец ИНАЧЕ СкладЯчейка КОНЕЦ	СкладРезерв,
	|		NULL																								СкладПолучатель,
	|		Заказ.Заказчик																						СкладЗаказчик,
	|		NULL																								Маршрут,
	|		Сборщик 																							Сборщик,
	|		NULL																								ДокументРезерва,
	|		NULL																								ОчередьОжиданияПоступления,
	|		ЛОЖЬ																								Ожидание,
	|		СУММА(СобраноОстаток) 																				Собрано,
	|		СУММА(ВСборкеОстаток) 																				ВСборке,
	|		0																									НеСобрано,
	|		0																									НеВСборке,
	|		0																									ОжиданиеПоступления,
	|		0																									ОжиданиеПеремещения,
	|		0																									Перемещается,
	|		0																									Отгружено,
	|		0																									ОтгруженоСумма
	|	ИЗ
	|		РегистрНакопления.СборкаЗаказа.Остатки(" + ТекстДаты + ", Заказ = &Заказ)
	|
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура,
	|		Упаковка,
	|		ВЫБОР КОГДА СкладЯчейка ССЫЛКА Справочник.Ячейки ТОГДА СкладЯчейка ИНАЧЕ NULL КОНЕЦ,
	|		ВЫБОР КОГДА СкладЯчейка ССЫЛКА Справочник.Ячейки ТОГДА СкладЯчейка.Владелец ИНАЧЕ СкладЯчейка КОНЕЦ,
	|		Заказ,
	|		Сборщик
	|
	|ОБЪЕДИНИТЬ ВСЕ
	
	// Таблица по отмене собранного
	
	|	ВЫБРАТЬ
	|		Номенклатура,
	|		Упаковка,
	|		ВЫБОР КОГДА СкладЯчейка ССЫЛКА Справочник.Ячейки ТОГДА СкладЯчейка ИНАЧЕ NULL КОНЕЦ 				Ячейка,
	|		ВЫБОР КОГДА СкладЯчейка ССЫЛКА Справочник.Ячейки ТОГДА СкладЯчейка.Владелец ИНАЧЕ СкладЯчейка КОНЕЦ	СкладРезерв,
	|		NULL																								СкладПолучатель,
	|		Заказ.Заказчик																						СкладЗаказчик,
	|		NULL																								Маршрут,
	|		Сборщик 																							Сборщик,
	|		NULL																								ДокументРезерва,
	|		NULL																								ОчередьОжиданияПоступления,
	|		ЛОЖЬ																								Ожидание,
	|		0,
	|		0,
	|		СУММА(СобраноОстаток),
	|		СУММА(ВСборкеОстаток),
	|		0																									ОжиданиеПоступления,
	|		0																									ОжиданиеПеремещения,
	|		0																									Перемещается,
	|		0																									Отгружено,
	|		0																									ОтгруженоСумма
	|	ИЗ
	|		РегистрНакопления.ОтменаСборкиЗаказа.Остатки(" + ТекстДаты + ", Заказ = &Заказ) КАК Сбор
	|
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура,
	|		Упаковка,
	|		ВЫБОР КОГДА СкладЯчейка ССЫЛКА Справочник.Ячейки ТОГДА СкладЯчейка ИНАЧЕ NULL КОНЕЦ,
	|		ВЫБОР КОГДА СкладЯчейка ССЫЛКА Справочник.Ячейки ТОГДА СкладЯчейка.Владелец ИНАЧЕ СкладЯчейка КОНЕЦ,
	|		Заказ,
	|		Сборщик
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Таблица по реализации
	
	|" + ?(ЭтоВнутренний, "
	|
	|	ВЫБРАТЬ
	|		Номенклатура,
	|		Упаковка,
	|		NULL 				Ячейка,
	|		Склад 				СкладРезерв,
	|		NULL 				СкладПолучатель,
	
	//|		ВЫБОР КОГДА ДокументРезерва.Заказчик ССЫЛКА Справочник.Склады ТОГДА ДокументРезерва.Заказчик ИНАЧЕ ДокументРезерва.Заказчик.Заказ.Склад КОНЕЦ СкладЗаказчик,
	|		NULL 				СкладЗаказчик,
	
	|		NULL				Маршрут,
	|		NULL 				Сборщик,
	|		NULL				ДокументРезерва,
	|		NULL				ОчередьОжиданияПоступления,
	|		ЛОЖЬ				Ожидание,
	|		0					Собрано,
	|		0					ВСборке,
	|		0					НеСобрано,
	|		0					НеВСборке,
	|		0					ОжиданиеПоступления,
	|		0					ОжиданиеПеремещения,
	|		0					Перемещается,
	|		КоличествоОборот 	Отгружено,
	|		0					ОтгруженоСумма
	|	ИЗ
	|		РегистрНакопления.ДвижениеТовара.Обороты(,,, Заказ = &Заказ И Склад = &СкладЗаказчик)
	|	ГДЕ
	|		КоличествоОборот <> 0
	|","
	|
	|	ВЫБРАТЬ
	|		Номенклатура,
	|		Упаковка,
	|		NULL 				Ячейка,
	|		Склад 				СкладРезерв,
	|		NULL 				СкладПолучатель,
	|		NULL 				СкладЗаказчик,
	|		NULL				Маршрут,
	|		NULL 				Сборщик,
	|		NULL				ДокументРезерва,
	|		NULL				ОчередьОжиданияПоступления,
	|		ЛОЖЬ				Ожидание,
	|		0					Собрано,
	|		0					ВСборке,
	|		0					НеСобрано,
	|		0					НеВСборке,
	|		0					ОжиданиеПоступления,
	|		0					ОжиданиеПеремещения,
	|		0					Перемещается,
	|		КоличествоОборот 	Отгружено,
	|	    СуммаОборот 		ОтгруженоСумма
	|	ИЗ
	|		РегистрНакопления.Продажи.Обороты(,,РЕГИСТРАТОР, Заказ = &Заказ)
	|	ГДЕ
	|		КоличествоОборот <> 0 и НЕ Регистратор ССЫЛКА Документ.ВозвратПереданныхТоваров и НЕ Регистратор ССЫЛКА Документ.ВозвратОтПокупателя ") + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	
	// Таблица по ожидающим перемещениям
	
	|	ВЫБРАТЬ
	|		Номенклатура,
	|		Упаковка,
	|		NULL 				Ячейка,
	|		ВнутреннийЗаказ.Склад 																				СкладРезерв,
	|		ВЫБОР КОГДА Заказчик ССЫЛКА Справочник.Склады ТОГДА Заказчик ИНАЧЕ Заказчик.Заказ.Склад КОНЕЦ 		СкладПолучатель,
	|		ВЫБОР КОГДА Заказчик ССЫЛКА Справочник.Склады ТОГДА Заказчик ИНАЧЕ ЕСТЬNULL(Заказчик.Заказ.Заказчик, Заказчик.Заказ.Склад) КОНЕЦ СкладЗаказчик,
	//|		ВЫБОР КОГДА Заказчик ССЫЛКА Справочник.Склады ТОГДА Заказчик ИНАЧЕ Заказчик.Заказ.Склад КОНЕЦ 		СкладЗаказчик,
	|		ВнутреннийЗаказ.Маршрут 					Маршрут,
	|		NULL 										Сборщик,
	|		ВнутреннийЗаказ.Заказчик.Заказ 				ДокументРезерва,
	|		NULL										ОчередьОжиданияПоступления,
	|		ЛОЖЬ										Ожидание,
	|		0								Собрано,
	|		0								ВСборке,
	|		0								НеСобрано,
	|		0								НеВСборке,
	|		0								ОжиданиеПоступления,
	|		СУММА(Зак.КоличествоОстаток)	ОжиданиеПеремещения,
	|		0								Перемещается,
	|		0							 	Отгружено,
	|	    0						 		ОтгруженоСумма
	|	ИЗ
	|		РегистрНакопления.ВнутренниеЗаказы.Остатки(" + ТекстДаты + ", " + ?(УчитыватьБПРодитель," Заказчик  В(&СписокБП)"," Заказчик = &СсылкаБП ") + ") Зак
	|
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура,
	|		Упаковка,
	|		ВнутреннийЗаказ,
	|		ВЫБОР КОГДА Размещение ССЫЛКА Справочник.Склады ТОГДА Размещение ИНАЧЕ ВнутреннийЗаказ.Склад КОНЕЦ,
	|		ВЫБОР КОГДА Заказчик ССЫЛКА Справочник.Склады ТОГДА Заказчик ИНАЧЕ Заказчик.Заказ.Склад КОНЕЦ, 
	|		ВЫБОР КОГДА Заказчик ССЫЛКА Справочник.Склады ТОГДА Заказчик ИНАЧЕ ЕСТЬNULL(Заказчик.Заказ.Заказчик, Заказчик.Заказ.Склад) КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	
	// Таблица по перемещениям
	
	|	ВЫБРАТЬ
	|		Номенклатура,
	|		Упаковка,
	|		NULL 					Ячейка,
	|		СкладОтправитель		СкладРезерв,
	|		СкладПолучатель			СкладПолучатель,
	|		ВЫБОР КОГДА Заказчик.Заказ ССЫЛКА Документ.ВнутреннийЗаказ ТОГДА Заказчик.Заказ.Заказчик ИНАЧЕ Заказчик.Склад КОНЕЦ СкладЗаказчик,
	|		Маршрут 				Маршрут,
	|		NULL					Сборщик,
	|		Заказчик.Заказ 			ДокументРезерва,
	|		NULL					ОчередьОжиданияПоступления,
	|		ЛОЖЬ					Ожидание,
	|		0								Собрано,
	|		0								ВСборке,
	|		0								НеСобрано,
	|		0								НеВСборке,
	|		0								ОжиданиеПоступления,
	|		0								ОжиданиеПеремещения,
	|		КоличествоОстаток				Перемещается,
	|		0							 	Отгружено,
	|	    0						 		ОтгруженоСумма
	|	ИЗ 	
	|		РегистрНакопления.ТоварыВПути.Остатки(" + ТекстДаты + ", " + ?(УчитыватьБПРодитель," Заказчик В(&СписокБП)"," Заказчик = &СсылкаБП ") + ")
	|	ГДЕ
	|		КоличествоОстаток <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	
	// Ожидание поступления
	
	|	ВЫБРАТЬ
	|		Номенклатура,
	|		Упаковка,
	|		NULL 			Ячейка,
	|		NULL			СкладРезерв,
	|		NULL			СкладПолучатель,
	|		NULL			СкладЗаказчик,
	|		NULL 			Маршрут,
	|		NULL			Сборщик,
	|		NULL		 	ДокументРезерва,
	|		Очередь			ОчередьОжиданияПоступления,
	|		ИСТИНА			Ожидание,
	|		0					Собрано,
	|		0					ВСборке,
	|		0					НеСобрано,
	|		0					НеВСборке,
	|		КоличествоОстаток	ОжиданиеПоступления,
	|		0					ОжиданиеПеремещения,
	|		0					Перемещается,
	|		0					Отгружено,
	|	    0					ОтгруженоСумма
	|	ИЗ 	
	|		РегистрНакопления.РазмещениеЗаказов.Остатки(" + ТекстДаты + ", Заказ = &Заказ)
	|	ГДЕ
	|		КоличествоОстаток <> 0

	|");
	
	Если УчитыватьБПРодитель Тогда
		Родители = Новый Массив;
		ПолучитьРодителяБПСборка(СсылкаПроцесса, Родители);
		Родители.Добавить(ссылкаПроцесса);
		Запрос.УстановитьПараметр("СписокБП", Родители); 
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаПросмотра", 			ДатаСостояния);
	Запрос.УстановитьПараметр("ДатаНачалаБП", 			СсылкаПроцесса.Дата);
	Запрос.УстановитьПараметр("СсылкаБП", 				СсылкаПроцесса);
	Запрос.УстановитьПараметр("Заказ", 					Заказ);
	
	Если ЭтоВнутренний Тогда Запрос.УстановитьПараметр("СкладЗаказчик", Заказ.Заказчик) КонецЕсли;
	
	#КонецОбласти
	
#Область Иницилизация

	// Получим результат
	
	ТаблицаЗаказ 		= Заказы.ПолучитьТаблицуТоваровПоЗаказу_ИзРег(Заказ, ТипЗнч(Заказ) <> Тип("ДокументСсылка.ВнутреннийЗаказ"));
	ТабСостоянияТоваров	= Запрос.Выполнить().Выгрузить();
	
	// Закешируем
	
	ТабСостоянияТоваров.Индексы.Добавить("Номенклатура, Упаковка");
	
	// Подготовим таблицу возврата
	
	СтруктураКолонокТовары 	= Неопределено;
	СтрокаСверткиГруппы		= "";
	СтрокаСверткиПоказатели = "";
	ТиЗнчЗаказа				= ТипЗнч(Заказ);
	
	ТабРезультат = ?(ТиЗнчЗаказа = Тип("ДокументСсылка.ЗаказПокупателя") ИЛИ ТиЗнчЗаказа = Тип("ДокументСсылка.ИнтернетЗаказПокупателя"),
				СформироватьТаблицуВозвратаРезультат(СтруктураКолонокТовары, СтрокаСверткиГруппы, СтрокаСверткиПоказатели, СсылкаПроцесса.Заказ),
				СформироватьТаблицуВозвратаРезультат(СтруктураКолонокТовары, СтрокаСверткиГруппы, СтрокаСверткиПоказатели,,ТиЗнчЗаказа <> Тип("ДокументСсылка.ВнутреннийЗаказ")));
				
	Если ТиЗнчЗаказа = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда СкладЗаказчик = Заказ.Заказчик КонецЕсли;
				
#КонецОбласти
	
#Область Расчет_итогов_запроса

	// Расчитаем статусы и заполним таблицу результат
	
	Для Каждого СтрокаЗаказа Из ТаблицаЗаказ Цикл
		
		// Подготоим таблицу итогов
		
		Отбор 		= Новый Структура("Номенклатура, Упаковка", СтрокаЗаказа.Номенклатура, СтрокаЗаказа.Упаковка);
		ТабИтогов 	= КонвертацияТипов.ПолучитьТаблицуИзНайденныхСтрокТаблицыЗначений(ТабСостоянияТоваров, Отбор);
		ТабИтогов.Свернуть("Номенклатура, Упаковка", "Собрано, ВСборке, НеСобрано, НеВСборке, ОжиданиеПоступления, ОжиданиеПеремещения, Перемещается, Отгружено, ОтгруженоСумма");
		
		СтрокиИтога = ТабИтогов.НайтиСтроки(Отбор);
		
		Если СтрокиИтога.Количество() Тогда СтрокаИтог = СтрокиИтога[0];
		
			// Определеим статус
			
			~НачалаРасчета: 
			Если СтрокаЗаказа.Количество > 0 Тогда
			
				Если СтрокаИтог.Отгружено > 0 И
					
					// сколько отгрузили
					
					ДобавитьСтрокуЗаказа(
							Перечисления.СостояниеСборкиЗаказа.Отгружен,
							Новый Структура("Склад, СкладЯчейка", "СкладРезерв", "СкладРезерв"),
							//Новый Структура("СкладРезерв", СтрокаЗаказа.Размещение),
							Новый Структура("СкладРезерв", ?(СкладЗаказчик = Неопределено, СтрокаЗаказа.Размещение, СкладЗаказчик)),
							"Отгружено", Отбор, ТабРезультат, СтрокаЗаказа, СтрокаИтог, ТабСостоянияТоваров, СтруктураКолонокТовары) Тогда Перейти ~НачалаРасчета;
					
				ИначеЕсли СтрокаИтог.ОжиданиеПоступления > 0 И
					
					// сколько ожидает поступления
					
					ДобавитьСтрокуЗаказа(
							Перечисления.СостояниеСборкиЗаказа.ОжидаетПоступления,,,
							"ОжиданиеПоступления", Отбор, ТабРезультат, СтрокаЗаказа, СтрокаИтог, ТабСостоянияТоваров, СтруктураКолонокТовары) Тогда Перейти ~НачалаРасчета;
							
				ИначеЕсли СтрокаИтог.Перемещается > 0 И
					
					// сколько перемещается
					
					ДобавитьСтрокуЗаказа(
							Перечисления.СостояниеСборкиЗаказа.Перемещается,
							Новый Структура("Склад, СкладЯчейка", "СкладПолучатель", "СкладРезерв"), 
							Новый Структура("СкладРезерв", СтрокаЗаказа.Размещение), 
							"Перемещается", Отбор, ТабРезультат, СтрокаЗаказа, СтрокаИтог, ТабСостоянияТоваров, СтруктураКолонокТовары) Тогда Перейти ~НачалаРасчета;
					
				ИначеЕсли СтрокаИтог.ОжиданиеПеремещения > 0 И
					
					// сколько ожидает перемещения
					
					ДобавитьСтрокуЗаказа(
							Перечисления.СостояниеСборкиЗаказа.ОжидаетПеремещения, 
							Новый Структура("Склад, СкладЯчейка", "СкладПолучатель", "СкладРезерв"),
							Новый Структура("СкладРезерв", СтрокаЗаказа.Размещение), 
							"ОжиданиеПеремещения", Отбор, ТабРезультат, СтрокаЗаказа, СтрокаИтог, ТабСостоянияТоваров, СтруктураКолонокТовары) Тогда Перейти ~НачалаРасчета;
							
				ИначеЕсли СтрокаИтог.НеВСборке > 0 И
					
					// сколько отменили в сборке
					
					ДобавитьСтрокуЗаказа(
							Перечисления.СостояниеСборкиЗаказа.ОтменаСборки, 
							Новый Структура("Склад, СкладЯчейка", "СкладРезерв", "?Ячейка,СкладРезерв"), 
							Новый Структура("СкладРезерв", СтрокаЗаказа.Размещение),
							"НеВСборке", Отбор, ТабРезультат, СтрокаЗаказа, СтрокаИтог, ТабСостоянияТоваров, СтруктураКолонокТовары) Тогда Перейти ~НачалаРасчета;
					
				ИначеЕсли СтрокаИтог.НеСобрано > 0 И
					
					// сколько отменили собранного
					
					ДобавитьСтрокуЗаказа(
							Перечисления.СостояниеСборкиЗаказа.ОтменаСборки, 
							Новый Структура("Склад, СкладЯчейка", "СкладРезерв", "?Ячейка,СкладРезерв"),
							Новый Структура("СкладРезерв", СтрокаЗаказа.Размещение),
							"НеСобрано", Отбор, ТабРезультат, СтрокаЗаказа, СтрокаИтог, ТабСостоянияТоваров, СтруктураКолонокТовары) Тогда Перейти ~НачалаРасчета;
					
				ИначеЕсли СтрокаИтог.ВСборке > 0 И
					
					// сколько в сборке
					
					ДобавитьСтрокуЗаказа(
							Перечисления.СостояниеСборкиЗаказа.Собирается, 
							Новый Структура("Склад, СкладЯчейка", "СкладРезерв", "?Ячейка,СкладРезерв"), 
							Новый Структура("СкладРезерв", СтрокаЗаказа.Размещение),
							"ВСборке", Отбор, ТабРезультат, СтрокаЗаказа, СтрокаИтог, ТабСостоянияТоваров, СтруктураКолонокТовары) Тогда Перейти ~НачалаРасчета;
							
				ИначеЕсли СтрокаИтог.Собрано > 0 И
					
					// сколько собрано
					
					ДобавитьСтрокуЗаказа(
							Перечисления.СостояниеСборкиЗаказа.Собрано, 
							Новый Структура("Склад, СкладЯчейка", "СкладРезерв", "?Ячейка,СкладРезерв"),
							Новый Структура("СкладРезерв", СтрокаЗаказа.Размещение),
							"Собрано", Отбор, ТабРезультат, СтрокаЗаказа, СтрокаИтог, ТабСостоянияТоваров, СтруктураКолонокТовары) Тогда Перейти ~НачалаРасчета;
					
				
				Иначе
					
					НовСтрока = ТабРезультат.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтрока, СтрокаЗаказа);
					НовСтрока.СкладЯчейка 	= СтрокаЗаказа.Размещение;
					НовСтрока.Состояние 	= Перечисления.СостояниеСборкиЗаказа.НеСобрано; КонецЕсли; КонецЕсли;
				
		Иначе // нет ни каких итогов по данному заказу, значит заполняем все как заказано
				
			НовСтрока = ТабРезультат.Добавить();
			
			ЗаполнитьЗначенияСвойств(НовСтрока, СтрокаЗаказа);
			НовСтрока.СкладЯчейка 	= СтрокаЗаказа.Размещение;
			НовСтрока.Склад			= Заказ.Склад;
			НовСтрока.СкладЗаказчик	= ?(ТипЗнч(Заказ) = Тип("ДокументСсылка.ВнутреннийЗаказ"), Заказ.Заказчик, Заказ.Склад);
			НовСтрока.Состояние 	= Перечисления.СостояниеСборкиЗаказа.НеСобрано;
			
			Если ЗначениеЗаполнено(СтрокаЗаказа.Размещение) Тогда
				
				НовСтрока.Резерв 			= Истина;
				НовСтрока.ДокументРезерва 	= Заказ; КонецЕсли; КонецЕсли; КонецЦикла;
	
	#КонецОбласти
	
#Область Маршруты
	
	// Проставим маршруты где не заполнено
	
	ТабСклады = ТаблицаЗаказ.Скопировать();
	ТабСклады.Свернуть("Размещение");
	
	ПустыеМаршруты = ТабРезультат.НайтиСтроки(Новый Структура("Маршрут", Справочники.Маршруты.ПустаяСсылка()));
	
	Если ПустыеМаршруты.Количество() Тогда
		
		ТабМаршруты = КэшируемыеФункции.ПолучитьТаблицуМаршрутов();
	
		Для Каждого Строка Из ПустыеМаршруты Цикл 
			
			стрМаршрута = ТабМаршруты.НайтиСтроки(Новый Структура("СкладОтправитель, СкладПолучатель", Строка.СкладЯчейка, Строка.СкладЗаказчик));
			Если Не стрМаршрута.Количество() Тогда стрМаршрута = ТабМаршруты.НайтиСтроки(Новый Структура("СкладТранзит, СкладПолучатель", Строка.СкладЯчейка, Строка.СкладЗаказчик)) КонецЕсли;
			
			Для Каждого СтрокаМаршрута Из стрМаршрута Цикл
				
				Если ТабСклады.Найти(СтрокаМаршрута.СкладТранзит, "Размещение") <> Неопределено Тогда
					Строка.Маршрут = СтрокаМаршрута.Маршрут; КонецЕсли; КонецЦикла; КонецЦикла; КонецЕсли;
	
#КонецОбласти
	//07.12.15 теперь новый порядок, как выставил менеджер ТабРезультат.Сортировать("Номенклатура");	
	Возврат ТабРезультат;
	
КонецФункции

Процедура ПолучитьРодителяБПСборка(СборкаБП, Родители) Экспорт
	
	//Если Не СборкаБП.ВедущаяЗадача.Пустая() Тогда
	Если ЗначениеЗаполнено(СборкаБП.ВедущаяЗадача) Тогда
		
		БПРодитель = СборкаБП.ВедущаяЗадача.БизнесПроцесс;
		
		Если Родители.Найти(БПРодитель) = Неопределено Тогда 
			Родители.Добавить(БПРодитель) 
		КонецЕсли;
		
		Если ТипЗнч(БПРодитель) = Тип("БизнесПроцессСсылка.СборкаЗаказа") Тогда 
			ПолучитьРодителяБПСборка(БПРодитель, Родители) 
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

