
Функция СостояниеВыполнено() Экспорт Возврат "Выполнено"; КонецФункции
Функция СостояниеОшибка() Экспорт Возврат "Ошибка"; КонецФункции

#Область Долги_Контрагентов



Функция ИнформацияОДолгеПартнера(Контрагент,ДатаКонтроля=Неопределено)
	
	ДатаКонтроля=?(ДатаКонтроля=Неопределено,ТекущаяДата(),ДатаКонтроля);
	
	//ТекстОтгрузкаЗапрещена = ?(Константы.ЗапретитьПросроченнуюОтгрузку.Получить(),
	//					Новый ФорматированнаяСтрока("отгрузка запрещена",,WebЦвета.Красный),
	//					Новый ФорматированнаяСтрока("отгрузка не желательна",,WebЦвета.ТемноКрасный)); 
	
	Отбор=Новый Структура("Контрагент",Контрагент);
	СтрОткрытьОтчетПоКонтрагенту = "ЗначениеВСтроке:" + СокрЛП(СтрЗаменить(ЗначениеВСтрокуВнутр(Новый Структура("Действие, Форма, Параметры",
														"Открыть", "Отчет.ЗадолженностьПоОтгрузкамПоСрокам.Форма.ФормаОтчета", Новый Структура("СформироватьПриОткрытии,Отбор", Истина, Отбор))), Символы.ПС, ""));
	
	// Если не заполнено то сразу вернем
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Новый Структура("Инф1, Инф2, Инф3, Документ, Дата, Сумма", Новый ФорматированнаяСтрока("Контрагент не выбран"),,,,,);
	КонецЕсли;
	
		
														
	Запрос = Новый Запрос("
	|Выбрать 
	|СуммаОстаток
	|из РегистрНакопления.ДолгиПоОтгрузкам.Остатки(&ДатаКонтроля,Контрагент = &Контрагент)
	|");
	
	
	Запрос.УстановитьПараметр("Контрагент",Контрагент);
	ДатаКонтроля=?(ДатаКонтроля=Неопределено,ТекущаяДата(),ДатаКонтроля);
	Запрос.УстановитьПараметр("ДатаКонтроля",КонецДня(ДатаКонтроля));
	
	Рез=Запрос.Выполнить();
	Если НЕ Рез.Пустой() Тогда
		Выборка = Рез.Выбрать();
		Выборка.Следующий();
		ОбщаяЗадолженность = Выборка.СуммаОстаток;		
		Если ОбщаяЗадолженность>0 тогда
			Инф1 = Новый ФорматированнаяСтрока("долг клиента: "+ОбщаяЗадолженность,,WebЦвета.ТемноЗеленый,,СтрОткрытьОтчетПоКонтрагенту);
		ИначеЕсли ОбщаяЗадолженность<0 тогда
			Инф1 = Новый ФорматированнаяСтрока("наш долг: "+(-ОбщаяЗадолженность),,WebЦвета.ТемноЗеленый,,СтрОткрытьОтчетПоКонтрагенту);
		Иначе
			Инф1 = Новый ФорматированнаяСтрока("никто никому не должен",,,,);
		КонецЕсли;	
		Инф2 = ""; 
		
	Иначе
		Инф1 = Новый ФорматированнаяСтрока("никто никому не должен",,,,);
		Инф2="";
	КонецЕсли;	
	
	Возврат Новый Структура("Инф1, Инф2, Инф3, Документ, Дата, Сумма",Инф1, ,,,,);
	
	
	
КонецФункции

Функция ИнформацияОДолгеКонтрагента(Контрагент,ДатаКонтроля=Неопределено)
	
	ДатаКонтроля=?(ДатаКонтроля=Неопределено,ТекущаяДата(),ДатаКонтроля);
	
	//ТекстОтгрузкаЗапрещена = ?(Константы.ЗапретитьПросроченнуюОтгрузку.Получить(),
	//					Новый ФорматированнаяСтрока("отгрузка запрещена",,WebЦвета.Красный),
	//					Новый ФорматированнаяСтрока("отгрузка не желательна",,WebЦвета.ТемноКрасный)); 
	
	Отбор=Новый Структура("Контрагент",Контрагент);
	СтрОткрытьОтчетПоКонтрагенту = "ЗначениеВСтроке:" + СокрЛП(СтрЗаменить(ЗначениеВСтрокуВнутр(Новый Структура("Действие, Форма, Параметры",
														"Открыть", "Отчет.ЗадолженностьПоОтгрузкамПоСрокам.Форма.ФормаОтчета", Новый Структура("СформироватьПриОткрытии,Отбор", Истина, Отбор))), Символы.ПС, ""));
	
	// Если не заполнено то сразу вернем
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Новый Структура("Инф1, Инф2, Инф3, Документ, Дата, Сумма", Новый ФорматированнаяСтрока("Контрагент не выбран"),,,,,);
	КонецЕсли;
	
		
														
	Запрос = Новый Запрос("
	|Выбрать 
	|СуммаОстаток
	|из РегистрНакопления.Взаиморасчеты.Остатки(&ДатаКонтроля,Контрагент = &Контрагент)
	|");
	
	
	Запрос.УстановитьПараметр("Контрагент",Контрагент);
	ДатаКонтроля=?(ДатаКонтроля=Неопределено,ТекущаяДата(),ДатаКонтроля);
	Запрос.УстановитьПараметр("ДатаКонтроля",КонецДня(ДатаКонтроля));
	
	Рез=Запрос.Выполнить();
	Если НЕ Рез.Пустой() Тогда
		Выборка = Рез.Выбрать();
		Выборка.Следующий();
		ОбщаяЗадолженность = Выборка.СуммаОстаток;		
		Если ОбщаяЗадолженность>0 тогда
			Инф1 = Новый ФорматированнаяСтрока("долг контрагента: "+ОбщаяЗадолженность,,WebЦвета.ТемноЗеленый,,СтрОткрытьОтчетПоКонтрагенту);
		ИначеЕсли ОбщаяЗадолженность<0 тогда
			Инф1 = Новый ФорматированнаяСтрока("наш долг: "+(-ОбщаяЗадолженность),,WebЦвета.ТемноЗеленый,,СтрОткрытьОтчетПоКонтрагенту);
		Иначе
			Инф1 = Новый ФорматированнаяСтрока("никто никому не должен",,,,);
		КонецЕсли;	
		Инф2 = ""; 
		
	Иначе
		Инф1 = Новый ФорматированнаяСтрока("никто никому не должен",,,,);
		Инф2="";
	КонецЕсли;	
	
	Возврат Новый Структура("Инф1, Инф2, Инф3, Документ, Дата, Сумма",Инф1, ,,,,);
		
КонецФункции


Функция СобратьИнформациюОДолгеВФоне(Контрагент, УникИдентификаторФормы, ФормаОтношений = Неопределено) Экспорт
	
	Возврат ЗапуститьПоток(
					"Результат = ИнформацияОДолгеПартнера(Параметры.Контрагент)", 
					УникИдентификаторФормы, 
					Новый Структура("Контрагент", Контрагент));
КонецФункции


Функция СобратьИнформациюОДолге(Контрагент) Экспорт
	
	Возврат ИнформацияОДолгеКонтрагента(Контрагент);
	
КонецФункции


#КонецОбласти

#Область АвтоСнятие_резерва

Функция ИнформацияОАвтоСнятияРезерва(Заказ) Экспорт
	
	 КолДнейРезерва = Константы.СрокРезервированияТовара.Получить();
	
	// Соберем пользователей
	
	ПользователиУправляющиеРезервом = Новый Массив;
	ПользователиУправляющиеРезервом.Добавить(Заказ.Автор);
	ПользователиУправляющиеРезервом.Добавить(Заказ.Ответственный);
	ПользователиУправляющиеРезервом.Добавить(Заказ.Контрагент.ОсновнойМенеджер);
	
	Запрос = Новый Запрос("
	
	// Получим пользователей которым можно менять резерв в заказе
	
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ДоверенноеЛицо ИЗ РегистрСведений.ДоверенныеЛицаПользователя ГДЕ Пользователь В (&Пользователи);
	
	// Получим дату снятия резерва в заказе
	
	|ВЫБРАТЬ МАКСИМУМ(ЕСТЬNULL(ДОБАВИТЬКДАТЕ(Отср.ДатаСнятияРезерва, ДЕНЬ, -" + Формат(КолДнейРезерва, "ЧГ=") + "), Рез.Период)) ДатаРезерва ИЗ РегистрНакопления.ТоварыВРезерве Рез
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ 	РегистрСведений.ОтсрочкаСнятияРезервов.СрезПоследних(,Заказ = &Заказ) Отср
	|ПО					Рез.ДокументРезерва = Отср.Заказ
	|
	|ГДЕ ДокументРезерва = &Заказ И НЕ Регистратор ССЫЛКА Документ.СнятиеРезерва;
	
	// Проверим есть ли на сегодня резервы у заказа
	
	|ВЫБРАТЬ ПЕРВЫЕ 1 ДокументРезерва ИЗ РегистрНакопления.ТоварыВРезерве.Остатки(,ДокументРезерва = &Заказ)
	|");
	
	Запрос.УстановитьПараметр("Заказ",			Заказ);
	Запрос.УстановитьПараметр("Пользователи", 	ПользователиУправляющиеРезервом);
	
	Пакет = Запрос.ВыполнитьПакет();
	
	// Подготовим
	
	КонвертацияТипов.ДобавитьМассивВКонецМассива(ПользователиУправляющиеРезервом, Пакет[0].Выгрузить().ВыгрузитьКолонку("ДоверенноеЛицо"), Истина);
	
	ДатаРезерва = '00010101'; Выборка = Пакет[1].Выбрать();
	Если Выборка.Следующий() Тогда ДатаРезерва = Выборка.ДатаРезерва КонецЕсли;
	Если Не ЗначениеЗаполнено(ДатаРезерва) Тогда ДатаРезерва = '00010101' КонецЕсли;
	
	СтатусЗаказаПозволяет 				= Заказы.ПолучитьСостоянияЗаказовКоторыеУчаствуютВАвтоСнятииРезервов().Найти(Заказы.ПолучитьСостояниеЗаказа(Заказ)) <> Неопределено;
	ЕстьРезервНаСегодня 				= Не Пакет[2].Пустой();
	МожетУчаствоватьВАвтоснятииРезерв 	= СтатусЗаказаПозволяет И (ПользователиУправляющиеРезервом.Найти(ПараметрыСеанса.ТекущийПользователь) <> Неопределено Или РольДоступна("ПолныеПрава") Или РольДоступна("ПолныеПраваВОбласти"));
	РезервДо 							= НачалоДня(ДатаРезерва) + 86400 * КолДнейРезерва;
	
	// Отправим
	
	Возврат Новый Структура("РазрешенныеПользователи, ПоследнийДеньРезерва, ДатаУстановкиРезерва, ВозможноПродление, ЕстьРезервНаСегодня, СтатусЗаказаПозволяет", 
					ПользователиУправляющиеРезервом, 
					РезервДо, 
					ДатаРезерва,
					НачалоДня(РезервДо) - 86400 * Константы.ПредупреждатьОСнятииРезерваЗа.Получить() <= НачалоДня(ТекущаяДата())
							И МожетУчаствоватьВАвтоснятииРезерв И ЕстьРезервНаСегодня,
					ЕстьРезервНаСегодня,
					СтатусЗаказаПозволяет);
КонецФункции

Функция ПолучитьИнформациюОВозможностиАвтоснятияРезерваТекПользователя(Заказ, УникИдентификаторФормы) Экспорт
	
	Возврат ЗапуститьПоток(
					"Результат = ИнформацияОАвтоСнятияРезерва(Параметры.Заказ)", 
					УникИдентификаторФормы, 
					Новый Структура("Заказ", Заказ));
КонецФункции


#КонецОбласти

#Область Новости

Функция ПолучитьТекстHTMLНовости_Ст(ПоказатьВсеНовости, НовостиНеБолее, текНомСтраницы = 1, УникальныйИдентификаторФормы, Пользователь = Неопределено)
	
	//Текст 			= "";
	//Запрос 			= Новый Запрос("
	//|ВЫБРАТЬ РАЗРЕШЕННЫЕ ЕСТЬNULL(Отк.Отказ, ЛОЖЬ) Отказ, Ссылка, Текст, ЧистыйHTML, Автор, Дата, Вложения.(Ключ, Картинка) Вложения 
	//|ИЗ 		Документ.Новость Нов
	//|
	//|ЛЕВОЕ СОЕДИНЕНИЕ
	//|	РегистрСведений.ОтказанныеНовости.СрезПоследних(,Пользователь = &ТекущийПользователь) Отк
	//|ПО
	//|	Нов.Ссылка 	= Отк.Новость И
	//|	Отк.Отказ 	= Истина
	//|
	//|ГДЕ Проведен " + ?(ПоказатьВсеНовости, "", "И Отк.Новость ЕСТЬ NULL") + "
	//|УПОРЯДОЧИТЬ  ПО Дата Убыв
	//|");
	//
	//Запрос.УстановитьПараметр("ТекущийПользователь", ?(Пользователь.Пустая(), ПараметрыСеанса.ТекущийПользователь, Пользователь));
	//
	//Выборка 			= Запрос.Выполнить().Выбрать();
	//НовостейНет 		= Истина;
	//ГуидПользователя	= XMLСтрока(?(Не ЗначениеЗаполнено(Пользователь), ПараметрыСеанса.ТекущийПользователь, XMLСтрока(Пользователь)));
	//
	//КолНовостей = Выборка.Количество();
	//Страниц 	= ?(НовостиНеБолее, Цел(КолНовостей / НовостиНеБолее) + ?(Цел(КолНовостей / НовостиНеБолее) <> КолНовостей / НовостиНеБолее, 1, 0), 0);
	//Если текНомСтраницы > Страниц Тогда текНомСтраницы = Страниц КонецЕсли;
	//
	//Инд = -1;
	//Пока Выборка.Следующий() Цикл НовостейНет = Ложь; Инд = Инд + 1;
	//	Если Не НовостиНеБолее ИЛИ текНомСтраницы = Цел(Инд / НовостиНеБолее) + 1 Тогда
	//	
	//		Текст = Текст + "
	//		
	//		
	//		|<div class=""polosa"">
	//		|<font size=""2"" color=""white"">" + Формат(Выборка.Дата, "ДЛФ=DD") + "
	//		|<font size=""2"" color=""CCFFFF"">" + Выборка.Автор + "</font></font>
	//		
	//		|<div style=""float:right; position: relative; top: -5px;"">" + ?(Выборка.Отказ, "
	//		|<p align=""center""><input class='button' type=""button"" class=""knopka"" title=""Отображать новость при открытии новостей"" name=""v8:Кнопка:Показывать новость:" + XMLСтрока(Выборка.Ссылка) + ":" + ГуидПользователя + """ value=""не просмотрено"">
	//		|","
	//		|<p align=""center""><input class='button' type=""button"" class=""knopka"" title=""Если нет желания увидеть эту новость еще раз, то нажимай"" name=""v8:Кнопка:Отключить новость:" + XMLСтрока(Выборка.Ссылка) + ":" + ГуидПользователя + """ value=""просмотрено"">
	//		|") + "
	//		|</div>
	//		|</div>
	//		|<br>
	//		|";

	//		НовТекст = СтрЗаменить(КонвертацияТипов.ПолучитьТекстHTMLВнутри_Body(Выборка.Текст), "overflow:hidden;", ""); // чтобы скролинг не исчезал
	//		
	//		
	//		Если Не Выборка.ЧистыйHTML Тогда // Форматированный документ
	//			
	//			// Вытащим картинки во временный каталог
	//			
	//			ВыборкаВложений = Выборка.Вложения.Выбрать(); 
	//			Пока ВыборкаВложений.Следующий() Цикл
	//				Данные = ВыборкаВложений.Картинка.Получить();
	//				Если ТипЗнч(Данные) = Тип("ДвоичныеДанные") Тогда
	//					Адрес 		= ПоместитьВоВременноеХранилище(Новый Картинка(Данные), УникальныйИдентификаторФормы); 
	//					НовТекст 	= СтрЗаменить(НовТекст, "'" + ВыборкаВложений.Ключ + "'", "'" + Адрес + "'"); КонецЕсли; КонецЦикла; КонецЕсли;
	//		
	//		// Добавим в общий текст html
	//		
	//		Текст = Текст + НовТекст; КонецЕсли; КонецЦикла;
	//
	//Текст = "<HTML><HEAD>
	//	|<META content=""text/html; charset=utf-8"" http-equiv=Content-Type>
	//	|<META name=GENERATOR content=""MSHTML 9.00.8112.16455"">
	//	// Указываем явное совмещение с 9 эксплоером
	//	//|<meta http-equiv=""X-UA-Compatible"" content=""IE=11"">
	//	|<style type=""text/css"">
	//	|body{
	//	|scrollbar-3dlight-color: #99FFCC;
	//	|scrollbar-arrow-color: #ffffff;
	//	|scrollbar-base-color: #3399CC;
	//	|scrollbar-darkshadow-color: #336666;
	//	|scrollbar-face-color: #33CC99;
	//	|scrollbar-highlight-color: #99FF99;
	//	|scrollbar-shadow-color: #003300;
	//	|scrollbar-track-color: #336633;
	//	|}
	//	|.newtable{
	//	|	border-collapse:collapse;
	//	|}
	//	|.newth {
	//	|	padding:10px;
	//	|	border-bottom:1px solid black;
	//	|	border-top:1px solid black;
	//	|}
	//	|.newtd {
	//	|	padding:10px;
	//	|	border-bottom:1px solid #cccccc;
	//	|}
	//	|.newgray {
	//	|	background-color:#F5F5F5;
	//	|}  
	//	|.product_avatar
	//	|	{
	//	|		filter: 
	//	|			progid:DXImageTransform.Microsoft.Shadow(color=#aaaaaa,direction=0,strength=1), 
	//	|			progid:DXImageTransform.Microsoft.Shadow(color=#aaaaaa,direction=45,strength=2), 
	//	|			progid:DXImageTransform.Microsoft.Shadow(color=#aaaaaa,direction=90,strength=8), 
	//	|			progid:DXImageTransform.Microsoft.Shadow(color=#aaaaaa,direction=135,strength=3), 
	//	|			progid:DXImageTransform.Microsoft.Shadow(color=#aaaaaa,direction=225,strength=3));
	//	|	}
	//	|.button {
	//	|   border: 1px solid #0a3c59;
	//	|   background: #519c3e;
	//	|   background: -webkit-gradient(linear, left top, left bottom, from(#dbe8d8), to(#519c3e));
	//	|   background: -webkit-linear-gradient(top, #dbe8d8, #519c3e);
	//	|   background: -moz-linear-gradient(top, #dbe8d8, #519c3e);
	//	|   background: -ms-linear-gradient(top, #dbe8d8, #519c3e);
	//	|   background: -o-linear-gradient(top, #dbe8d8, #519c3e);
	//	|   background-image: -ms-linear-gradient(top, #dbe8d8 0%, #519c3e 100%);
	//	|   padding: 2px 1px;
	//	|   -webkit-border-radius: 1px;
	//	|   -moz-border-radius: 1px;
	//	|   border-radius: 1px;
	//	|   -webkit-box-shadow: rgba(255,255,255,0.4) 0 1px 0, inset rgba(255,255,255,0.4) 0 1px 0;
	//	|   -moz-box-shadow: rgba(255,255,255,0.4) 0 1px 0, inset rgba(255,255,255,0.4) 0 1px 0;
	//	|   box-shadow: rgba(255,255,255,0.4) 0 1px 0, inset rgba(255,255,255,0.4) 0 1px 0;
	//	|   text-shadow: #7ea4bd 0 1px 0;
	//	|   color: #081c29;
	//	|   font-size: 12px;
	//	|   font-family: helvetica, serif;
	//	|   text-decoration: none;
	//	|   vertical-align: middle;
	//	|   }
	//	|.button:hover {
	//	|   border: 1px solid #0a3c59;
	//	|   text-shadow: #1e4158 0 1px 0;
	//	|   background: #34f018;
	//	|   background: -webkit-gradient(linear, left top, left bottom, from(#6cab6d), to(#34f018));
	//	|   background: -webkit-linear-gradient(top, #6cab6d, #34f018);
	//	|   background: -moz-linear-gradient(top, #6cab6d, #34f018);
	//	|   background: -ms-linear-gradient(top, #6cab6d, #34f018);
	//	|   background: -o-linear-gradient(top, #6cab6d, #34f018);
	//	|   background-image: -ms-linear-gradient(top, #6cab6d 0%, #34f018 100%);
	//	|   color: #f51b59;
	//	|   }
	//	|.button:active {
	//	|   text-shadow: #1e4158 0 1px 0;
	//	|   border: 1px solid #0a3c59;
	//	|   background: #65a9d7;
	//	|   background: -webkit-gradient(linear, left top, left bottom, from(#3e779d), to(#34f018));
	//	|   background: -webkit-linear-gradient(top, #3e779d, #65a9d7);
	//	|   background: -moz-linear-gradient(top, #3e779d, #65a9d7);
	//	|   background: -ms-linear-gradient(top, #3e779d, #65a9d7);
	//	|   background: -o-linear-gradient(top, #3e779d, #65a9d7);
	//	|   background-image: -ms-linear-gradient(top, #3e779d 0%, #65a9d7 100%);
	//	|   color: #fff;
	//	|	}
	//	|.polosa {
	//	|	height: 20px;
	// 	|	background: green;
	//    |		filter:
	//	|			progid:DXImageTransform.Microsoft.Shadow(color='#042b47', Direction=45, Strength=6)
	//	|			progid:DXImageTransform.Microsoft.Shadow(color='#042b47', Direction=135, Strength=6)
	//	|			progid:DXImageTransform.Microsoft.Shadow(color='#042b47', Direction=225, Strength=6)
	//	|			progid:DXImageTransform.Microsoft.Shadow(color='#042b47', Direction=315, Strength=6);
	//	|	position: relative;
	//	|	top: -12px;
	//	|	left: -12px;
	//	|	zoom: 1;
	//	|	}
	//	|</style>
	//	|</HEAD>
	//	|<BODY>
	//	|" + Текст + "
	//	|</BODY></HTML>";
	//	
	//
	//Возврат Новый Структура("текНомСтраницы, ТекстHTML, НовостейНет", текНомСтраницы, Текст, НовостейНет);
		
КонецФункции
Функция ПолучитьТекстHTMLНовости(ПоказатьВсеНовости, текНомНовости = 0, УникальныйИдентификаторФормы, Пользователь = Неопределено) Экспорт
	
	ТекстФильтр = "
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ОтказанныеНовости.СрезПоследних(,Пользователь = &ТекущийПользователь) Отк
	|ПО
	|	Нов.Ссылка 	= Отк.Новость И
	|	Отк.Отказ 	= Истина
	|
	|ГДЕ Проведен " + ?(ПоказатьВсеНовости, "", "И Отк.Новость ЕСТЬ NULL");
	
	Если текНомНовости = 0 Тогда
		
		// Если новость не определена тогда покажем самую последнюю
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1 ПорядковыйНомер
		|ИЗ 		Документ.Новость Нов " + ТекстФильтр + " И ПорядковыйНомер <> 0
		|УПОРЯДОЧИТЬ ПО ПорядковыйНомер УБЫВ");
		
		Запрос.УстановитьПараметр("ТекущийПользователь", ?(Пользователь.Пустая(), ПараметрыСеанса.ТекущийПользователь, Пользователь));
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			текНомНовости = Выборка.ПорядковыйНомер; КонецЕсли; КонецЕсли;
	
	НовостейНет 		= Истина;
	ЕстьПредНовость		= 0;
	ЕстьСлНовость		= 0;
	ГуидПользователя	= XMLСтрока(?(Не ЗначениеЗаполнено(Пользователь), ПараметрыСеанса.ТекущийПользователь, XMLСтрока(Пользователь)));
	Текст 				= "";
	Запрос 				= Новый Запрос("
	
	// Текущая и следующая новость
	
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2 ЕСТЬNULL(Отк.Отказ, ЛОЖЬ) Отказ, ПорядковыйНомер, Ссылка, Текст, ЧистыйHTML, Автор, Дата, Вложения.(Ключ, Картинка) Вложения 
	|ИЗ 		Документ.Новость Нов " + ТекстФильтр + " И ПорядковыйНомер >= &текНомНовости
	|УПОРЯДОЧИТЬ  ПО ПорядковыйНомер;
	
	// Предыдущая новость
	
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1 ПорядковыйНомер ИЗ Документ.Новость Нов" + ТекстФильтр + " И ПорядковыйНомер < &текНомНовости
	|УПОРЯДОЧИТЬ  ПО ПорядковыйНомер Убыв;
	|");
	
	Запрос.УстановитьПараметр("ТекущийПользователь", 	?(Пользователь.Пустая(), ПараметрыСеанса.ТекущийПользователь, Пользователь));
	Запрос.УстановитьПараметр("текНомНовости", 			текНомНовости);
	
	Пакет = Запрос.ВыполнитьПакет();
	Выборка 		= Пакет[0].Выбрать();
	
	ВыборкПред 		= Пакет[1].Выбрать();
	ЕстьПредНовость = 0;
	Если ВыборкПред.Следующий() Тогда ЕстьПредНовость = ВыборкПред.ПорядковыйНомер КонецЕсли;
	
	Если Выборка.Следующий() Тогда 
		
		НовостейНет 	= Ложь;
		текНомНовости 	= Выборка.ПорядковыйНомер;
		Текст 			= Текст + "
			
		|<div class=""polosa"">
		|<font size=""2"" color=""white"">" + Формат(Выборка.Дата, "ДЛФ=DD") + "
		|<font size=""2"" color=""CCFFFF"">" + Выборка.Автор + "</font></font>
			
		|<div style=""float:right; position: relative; top: -5px;"">" + ?(Выборка.Отказ, "
		|<p align=""center""><input class='button' type=""button"" class=""knopka"" title=""Отображать новость при открытии новостей"" name=""v8:Кнопка:Показывать новость:" + XMLСтрока(Выборка.Ссылка) + ":" + ГуидПользователя + """ value=""не просмотрено"">
		|","
		|<p align=""center""><input class='button' type=""button"" class=""knopka"" title=""Если нет желания увидеть эту новость еще раз, то нажимай"" name=""v8:Кнопка:Отключить новость:" + XMLСтрока(Выборка.Ссылка) + ":" + ГуидПользователя + """ value=""просмотрено"">
		|") + "
		|</div>
		|</div>
		|<br>";

		НовТекст = СтрЗаменить(КонвертацияТипов.ПолучитьТекстHTMLВнутри_Body(Выборка.Текст), "overflow:hidden;", ""); // чтобы скролинг не исчезал
			
		Если Не Выборка.ЧистыйHTML Тогда // Форматированный документ
				
			// Вытащим картинки во временный каталог
				
			ВыборкаВложений = Выборка.Вложения.Выбрать(); 
			Пока ВыборкаВложений.Следующий() Цикл
				Данные = ВыборкаВложений.Картинка.Получить();
				Если ТипЗнч(Данные) = Тип("ДвоичныеДанные") Тогда
					Адрес 		= ПоместитьВоВременноеХранилище(Новый Картинка(Данные), УникальныйИдентификаторФормы); 
					НовТекст 	= СтрЗаменить(НовТекст, "'" + ВыборкаВложений.Ключ + "'", "'" + Адрес + "'"); КонецЕсли; КонецЦикла; КонецЕсли;
		
		// Проверим есть еще новость или нет
		
		Если Выборка.Следующий() Тогда ЕстьСлНовость = Выборка.ПорядковыйНомер; КонецЕсли;
		
		// Добавим в общий текст html
			
		Текст = Текст + НовТекст;

		Текст = "<HTML><HEAD>
		|<META content=""text/html; charset=utf-8"" http-equiv=Content-Type>
		|<META name=GENERATOR content=""MSHTML 9.00.8112.16455"">
		// Указываем явное совмещение с 9 эксплоером
		//|<meta http-equiv=""X-UA-Compatible"" content=""IE=11"">
		|<style type=""text/css"">
		|body{
		|scrollbar-3dlight-color: #99FFCC;
		|scrollbar-arrow-color: #ffffff;
		|scrollbar-base-color: #3399CC;
		|scrollbar-darkshadow-color: #336666;
		|scrollbar-face-color: #33CC99;
		|scrollbar-highlight-color: #99FF99;
		|scrollbar-shadow-color: #003300;
		|scrollbar-track-color: #336633;
		|}
		|.newtable{
		|	border-collapse:collapse;
		|}
		|.newth {
		|	padding:10px;
		|	border-bottom:1px solid black;
		|	border-top:1px solid black;
		|}
		|.newtd {
		|	padding:10px;
		|	border-bottom:1px solid #cccccc;
		|}
		|.newgray {
		|	background-color:#F5F5F5;
		|}  
		|.product_avatar
		|	{
		|		filter: 
		|			progid:DXImageTransform.Microsoft.Shadow(color=#aaaaaa,direction=0,strength=1), 
		|			progid:DXImageTransform.Microsoft.Shadow(color=#aaaaaa,direction=45,strength=2), 
		|			progid:DXImageTransform.Microsoft.Shadow(color=#aaaaaa,direction=90,strength=8), 
		|			progid:DXImageTransform.Microsoft.Shadow(color=#aaaaaa,direction=135,strength=3), 
		|			progid:DXImageTransform.Microsoft.Shadow(color=#aaaaaa,direction=225,strength=3));
		|	}
		|.button {
		|   border: 1px solid #0a3c59;
		|   background: #519c3e;
		|   background: -webkit-gradient(linear, left top, left bottom, from(#dbe8d8), to(#519c3e));
		|   background: -webkit-linear-gradient(top, #dbe8d8, #519c3e);
		|   background: -moz-linear-gradient(top, #dbe8d8, #519c3e);
		|   background: -ms-linear-gradient(top, #dbe8d8, #519c3e);
		|   background: -o-linear-gradient(top, #dbe8d8, #519c3e);
		|   background-image: -ms-linear-gradient(top, #dbe8d8 0%, #519c3e 100%);
		|   padding: 2px 1px;
		|   -webkit-border-radius: 1px;
		|   -moz-border-radius: 1px;
		|   border-radius: 1px;
		|   -webkit-box-shadow: rgba(255,255,255,0.4) 0 1px 0, inset rgba(255,255,255,0.4) 0 1px 0;
		|   -moz-box-shadow: rgba(255,255,255,0.4) 0 1px 0, inset rgba(255,255,255,0.4) 0 1px 0;
		|   box-shadow: rgba(255,255,255,0.4) 0 1px 0, inset rgba(255,255,255,0.4) 0 1px 0;
		|   text-shadow: #7ea4bd 0 1px 0;
		|   color: #081c29;
		|   font-size: 12px;
		|   font-family: helvetica, serif;
		|   text-decoration: none;
		|   vertical-align: middle;
		|   }
		|.button:hover {
		|   border: 1px solid #0a3c59;
		|   text-shadow: #1e4158 0 1px 0;
		|   background: #34f018;
		|   background: -webkit-gradient(linear, left top, left bottom, from(#6cab6d), to(#34f018));
		|   background: -webkit-linear-gradient(top, #6cab6d, #34f018);
		|   background: -moz-linear-gradient(top, #6cab6d, #34f018);
		|   background: -ms-linear-gradient(top, #6cab6d, #34f018);
		|   background: -o-linear-gradient(top, #6cab6d, #34f018);
		|   background-image: -ms-linear-gradient(top, #6cab6d 0%, #34f018 100%);
		|   color: #f51b59;
		|   }
		|.button:active {
		|   text-shadow: #1e4158 0 1px 0;
		|   border: 1px solid #0a3c59;
		|   background: #65a9d7;
		|   background: -webkit-gradient(linear, left top, left bottom, from(#3e779d), to(#34f018));
		|   background: -webkit-linear-gradient(top, #3e779d, #65a9d7);
		|   background: -moz-linear-gradient(top, #3e779d, #65a9d7);
		|   background: -ms-linear-gradient(top, #3e779d, #65a9d7);
		|   background: -o-linear-gradient(top, #3e779d, #65a9d7);
		|   background-image: -ms-linear-gradient(top, #3e779d 0%, #65a9d7 100%);
		|   color: #fff;
		|	}
		|.polosa {
		|	height: 20px;
 		|	background: green;
        |		filter:
		|			progid:DXImageTransform.Microsoft.Shadow(color='#042b47', Direction=45, Strength=6)
		|			progid:DXImageTransform.Microsoft.Shadow(color='#042b47', Direction=135, Strength=6)
		|			progid:DXImageTransform.Microsoft.Shadow(color='#042b47', Direction=225, Strength=6)
		|			progid:DXImageTransform.Microsoft.Shadow(color='#042b47', Direction=315, Strength=6);
		|	position: relative;
		|	top: -12px;
		|	left: -12px;
		|	zoom: 1;
		|	}
		|</style>
		|</HEAD>
		|<BODY>
		|" + Текст + "
		|</BODY></HTML>"; КонецЕсли;
		
	
	Если НовостейНет Тогда текНомНовости = 0 КонецЕсли;
	
	Возврат Новый Структура("текНомНовости, ТекстHTML, НовостейНет, ЕстьПредНовость, ЕстьСлНовость", текНомНовости, Текст, НовостейНет, ЕстьПредНовость, ЕстьСлНовость);
		
КонецФункции

Функция ПолучитьНовость_Ст(ПоказатьВсеНовости, НовостиНеБолее, текНомСтраницы, Страниц, УникИдентификаторФормы, Пользователь) Экспорт
	
	//Возврат ЗапуститьПоток(
	//				"Результат = ПолучитьТекстHTMLНовости(Параметры.ПоказатьВсеНовости, Параметры.НовостиНеБолее, Параметры.текНомСтраницы, Параметры.УникальныйИдентификаторФормы, Параметры.Пользователь);
	//				|текНомСтраницы = Параметры.текНомСтраницы;", 
	//				УникИдентификаторФормы, 
	//				Новый Структура("ПоказатьВсеНовости, НовостиНеБолее, текНомСтраницы, УникальныйИдентификаторФормы, Пользователь",
	//						ПоказатьВсеНовости, НовостиНеБолее, текНомСтраницы, УникИдентификаторФормы, Пользователь));
	
КонецФункции
Функция ПолучитьНовость(ПоказатьВсеНовости, текНомНовости, УникИдентификаторФормы, Пользователь) Экспорт
	
	Возврат ЗапуститьПоток(
					"Результат = ПолучитьТекстHTMLНовости(Параметры.ПоказатьВсеНовости, Параметры.текНомНовости, Параметры.УникальныйИдентификаторФормы, Параметры.Пользователь)", 
					УникИдентификаторФормы, 
					Новый Структура("ПоказатьВсеНовости, текНомНовости, УникальныйИдентификаторФормы, Пользователь",
							ПоказатьВсеНовости, текНомНовости, УникИдентификаторФормы, Пользователь));
КонецФункции

#КонецОбласти

Функция ПровестиДокументыПоВыбраннымДвижениям(Парам, ИменаДвижений)
	
	ДокСсылки = Парам.массивДокументов;
	РазмерТранзакции = Парам.РазмерТранзакции;
	
	// ИменаДвижений - через строку имена наборов движений
	
	Движения = КонвертацияТипов.ПолучитьМассивИзСтроки(ИменаДвижений);
	
	текРазмерТранзакции=0;
	НачатьТранзакцию();
	Для Каждого Ссылка ИЗ ДокСсылки Цикл 
		
		ДополнительныеСвойства = Новый Структура; 
		ДополнительныеСвойства.Вставить("ИменаРегистров",Движения);
		
		//получаем движения документа в ДополнительныеСвойства
		Документы[Ссылка.Метаданные().Имя].ИницилизироватьДополнительныеДанныеДокумента(Ссылка, ДополнительныеСвойства); 
		
		УспехПоДокументу=Истина;
		
		Для Каждого ИмяДвижения ИЗ Движения Цикл
			
			Если ДополнительныеСвойства.Свойство(ИмяДвижения) Тогда
				
				НовТаблица 		= ДополнительныеСвойства[ИмяДвижения];
				НаборЗаписей 	= РегистрыНакопления[ИмяДвижения].СоздатьНаборЗаписей(); 
				НаборЗаписей.Отбор.Регистратор.Установить(Ссылка);
				
				НаборЗаписей.Загрузить(НовТаблица); 
				стрОшибки = "";
				Если ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(НаборЗаписей,,стрОшибки,Ложь) Тогда
					текРазмерТранзакции=текРазмерТранзакции+1;
				Иначе	
					ОтменитьТранзакцию();
					УспехПоДокументу=Ложь;
					
					
					ЗаписьЖурналаРегистрации("ОшибкаПроведенияВПотоке",УровеньЖурналаРегистрации.Ошибка,Ссылка.Метаданные(),Ссылка,"Ошибка записи набора записей "+ИмяДвижения+". По причине : "+стрОшибки);
					текРазмерТранзакции=0;
					НачатьТранзакцию();
				КонецЕсли; 
			Иначе
				//если требуемая таблица не передана, то ничего не делаем, оставляем движения как есть
			КонецЕсли;
		КонецЦикла;
		
		Если УспехПоДокументу Тогда
			Лог=Справочники.ОтладкаЛог.СоздатьЭлемент();
			Лог.ДокументЛог = Ссылка;
			Лог.Комментарий = "Проведен "+ТекущаяДата();
			Лог.Записать();
		КонецЕсли;
		
		Если текРазмерТранзакции>=РазмерТранзакции Тогда
			ЗафиксироватьТранзакцию();
			текРазмерТранзакции=0;
			НачатьТранзакцию();
		КонецЕсли	
		
	КонецЦикла;
	
	Если ТранзакцияАктивна() Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;	
		
	Возврат Истина;

КонецФункции


Функция ЗапуститьПоискПакетаДляПечати(Параметры, глПараметрыПакетнойПечати, УникИдентификаторФормы) Экспорт
	
	Возврат ЗапуститьПоток(
					"Результат = ПечатьНаСервере.ПолучитьПодходящийПакет(Параметры)", 
					УникИдентификаторФормы, 
					Новый Структура("Параметры", Параметры));
КонецФункции

#Область Ядро

Процедура ВыполнитьКодВФоне(КодВыполнения, Адрес, Параметры = Неопределено) Экспорт
	
	// Это паралельное фоновое задание
	
	Перем Результат, стрОшибки;
	
	Попытка
		Выполнить(КодВыполнения);
		ПоместитьВоВременноеХранилище(Новый Структура("Состояние, Результат, стрОшибки", СостояниеВыполнено(), Результат, стрОшибки), Адрес);
	Исключение
		стрОшибки = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("Выполнение кода в фоновом режиме", УровеньЖурналаРегистрации.Ошибка, , , стрОшибки);
		ПоместитьВоВременноеХранилище(Новый Структура("Состояние, Результат, стрОшибки", СостояниеОшибка(), Неопределено, стрОшибки), Адрес); 
	КонецПопытки;
	
КонецПроцедуры

Функция ЗапуститьПоток(КодВыполнения, УникИдентификаторФормы, Параметры = Неопределено) Экспорт
	
	// Запускает поток
	// Возвращает адрес в хранилище в котором будет находится результат выполнения после выполнения
	
	Адрес = ПоместитьВоВременноеХранилище(Неопределено, УникИдентификаторФормы);
	
	
	текПараметры = Новый Массив;
	текПараметры.Добавить(КодВыполнения);
	текПараметры.Добавить(Адрес);
	текПараметры.Добавить(Параметры);
	
	ФоновыеЗадания.Выполнить("Поток.ВыполнитьКодВФоне", текПараметры, Строка(Новый УникальныйИдентификатор), "Паралельное задание для асинхроности");
	
	Возврат Адрес;
	
КонецФункции

#КонецОбласти