
Функция ПолучитьПервуюСтраницу(ТабДок) Экспорт
	
	// Добрые люди!
	// Доделайте эту процедуру кому не жалко
	// Пожайлусто!
	
	
	// Возвращает табличный документ только первую страницу
	
	//ТабДок.ОбластьПечати = ТабДок.Область("R1:R50");
	//Возврат ТабДок;
	//
	//КопияДок = Новый ТабличныйДокумент;
	//КопияДок.Вывести(ТабДок);
	//
	//ТабДок.Очистить();
	//
	//Для Ном = 1 ПО КопияДок.ВысотаТаблицы Цикл
	//	
	//	СтрокаТаблицы = Новый ТабличныйДокумент;
	//	СтрокаТаблицы.ВставитьОбласть(КопияДок.Область("R" + Формат(Ном, "ЧГ=")), СтрокаТаблицы.Область("R1"));
	//	
	//	Если ТабДок.ПроверитьВывод(СтрокаТаблицы) Тогда
	//			ТабДок.Вывести(СтрокаТаблицы);
	//	Иначе	Прервать; КонецЕсли; КонецЦикла;
	//	
	//Возврат ТабДок;
		
КонецФункции

#Область Коммерческое_предложение

Функция ПерваяИнфаКонтактнойИнформации(Ссылка, Вид)
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 Представление ИЗ РегистрСведений.ПредставлениеКонтактнойИнформации ГДЕ Объект = &Ссылка И Вид В ИЕРАРХИИ(&Вид) УПОРЯДОЧИТЬ ПО ЗначениеПоУмолчанию УБЫВ");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Вид", 	Вид);
		
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда Возврат Выборка.Представление КонецЕсли;
	
КонецФункции

Функция ПолучитьИнфуПоОтветвенному(Ответственный)
	
	Структура 	= Новый Структура;
	ФизЛицо 	= Ответственный.ФизЛицо;
	
	Если Не ФизЛицо.Пустая() Тогда
	
		// Вытащим телефон
		
		Телефон = ПерваяИнфаКонтактнойИнформации(ФизЛицо, Справочники.ВидыКонтактнойИнформации.Телефон);
		Если Телефон <> Неопределено Тогда Структура.Вставить("Телефон", Телефон) КонецЕсли;
		
		// Вытащим почту
		
		Почта = ПерваяИнфаКонтактнойИнформации(ФизЛицо, Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочты);
		Если Почта <> Неопределено Тогда Структура.Вставить("Почта", Почта) КонецЕсли; КонецЕсли;
	
	Возврат Структура;
	
КонецФункции
Функция ПолучитьТекстовыеДанныеПоЮрЛицу(СсылкаОрганизация, Полный)
	
	Если ТипЗнч(СсылкаОрганизация) = Тип("СправочникСсылка.Организации") Тогда
		Реквизиты = Справочники.Организации.ПолучитьРеквизитыОрганизации(СсылкаОрганизация);
	ИначеЕсли ТипЗнч(СсылкаОрганизация) = Тип("СправочникСсылка.Грузополучатели") Тогда
		Реквизиты = Справочники.Грузополучатели.ПолучитьРеквизитыГрузополучателя(СсылкаОрганизация);
	Иначе
		Реквизиты = Справочники.Контрагенты.ПолучитьРеквизитыКонтрагента(СсылкаОрганизация) КонецЕсли;
	
	Телефон = ПерваяИнфаКонтактнойИнформации(СсылкаОрганизация, Справочники.ВидыКонтактнойИнформации.Телефон);
	Адрес 	= ПерваяИнфаКонтактнойИнформации(СсылкаОрганизация, Справочники.ВидыКонтактнойИнформации.АдресФактический);
	
	Если Телефон = Неопределено И ТипЗнч(СсылкаОрганизация) = Тип("СправочникСсылка.Контрагенты") Тогда
		Телефон = ПерваяИнфаКонтактнойИнформации(СсылкаОрганизация.Партнер, Справочники.ВидыКонтактнойИнформации.Телефон) КонецЕсли;
	Если Адрес = Неопределено И ТипЗнч(СсылкаОрганизация) = Тип("СправочникСсылка.Контрагенты") Тогда
		Адрес = ПерваяИнфаКонтактнойИнформации(СсылкаОрганизация.Партнер, Справочники.ВидыКонтактнойИнформации.АдресФактический) КонецЕсли;
	
	Возврат Реквизиты.Представление + ", ИНН " + Реквизиты.ИНН + ", КПП " + Реквизиты.КПП + ?(Полный, ", " + Адрес, "") + ", Телефон " + Телефон;
	
КонецФункции

Функция ПолучитьДанныеДляЗаказаВКоммПредложении(СсылкаИлиМассивЗаказ) Экспорт
	
	Запрос = Новый Запрос("
	
	// Шапка
	
	|ВЫБРАТЬ 	Номер, Дата, Контрагент.СокрНаименование как Контрагент, Ответственный, СуммаВключаетНДС, Валюта, Организация, ПечатьСНаличием, ЕСТЬNULL(Контрагент.НеВыводьКолонкуСкидкаВПечатнойФорме, ЛОЖЬ) НеВыводьКолонкуСкидкаВПечатнойФорме,
	|			ВЫБОР КОГДА СуммаВключаетНДС ТОГДА ""Цена с НДС"" ИНАЧЕ ""Цена без НДС"" КОНЕЦ ЦенаЗаголовок
	|ИЗ			Документ.КоммерческоеПредложение
	|ГДЕ		Ссылка  В(&Ссылка)
	|;
	
	// Таблица
	
	|ВЫБРАТЬ	
	|	Ссылка, 
	|	НомерСтроки, 
	|	Всего, 
	|	ВЫБОР КОГДА Ссылка.СуммаВключаетНДС ТОГДА Сумма - СуммаНДС ИНАЧЕ Сумма КОНЕЦ СуммаБезНДС, 
	|	Док.Номенклатура, 
	|	ЕСТЬNULL(Номенклатура.ЕдиницаИзмерения, ""шт"")  ЕдиницаИзмерения,
	|	НоменклатураКартинки,
	|	ВЫБОР 
	|		КОГДА Производитель = ЗНАЧЕНИЕ(Справочник.Производители.ПустаяСсылка) 
	|		ТОГДА ЕСТЬNULL(Номенклатура.Производитель, НоменклатураКартинки.Производитель)
	|		ИНАЧЕ Производитель 
	|	КОНЕЦ Производитель,	
	|	СуммаРучнойСкидки + СуммаАвтоматическойСкидки Скидка,
	|	Наличие,
	|	Цена, 
	|	Артикул,
	|	Количество, 
	|	Сумма, 
	|	СуммаНДС,
	|	Всего
	|
	|ПОМЕСТИТЬ 	ТаблицаТоваров
	|ИЗ			Документ.КоммерческоеПредложение.Товары Док
	|ГДЕ 		Ссылка В(&Ссылка);
	
	// Таблица с наличием
	
	|ВЫБРАТЬ 	НомерСтроки, Артикул, Док.Номенклатура, ЕдиницаИзмерения, НоменклатураКартинки, Производитель, Цена, Количество, Сумма, СуммаНДС, СуммаБезНДС, Скидка, Всего,
	|	ВЫБОР КОГДА Док.Наличие = """" ТОГДА
	|		ВЫБОР КОГДА ЕСТЬNULL(Остаток, 0) - ЕСТЬNULL(Резерв, 0) >= Количество
	|			ТОГДА ""В наличии"" 
	|			ИНАЧЕ ЕСТЬNULL(Пост.ДатаПоступления, """") КОНЕЦ
	|		ИНАЧЕ Наличие КОНЕЦ Наличие
	|ИЗ ТаблицаТоваров Док
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	( 	ВЫБРАТЬ Номенклатура, МИНИМУМ(Инвойс.ДатаПоступления) ДатаПоступления
	|		ИЗ 		РегистрНакопления.ТоварыПоставщиковВПути.Остатки(, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ ТаблицаТоваров))
	|				СГРУППИРОВАТЬ ПО Номенклатура ) Пост
	|ПО Док.Номенклатура = Пост.Номенклатура
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(ВЫБРАТЬ Номенклатура, КоличествоОстаток Остаток ИЗ РегистрНакопления.ТоварыНаСкладах.Остатки(, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ ТаблицаТоваров))) Ост
	|ПО Док.Номенклатура = Ост.Номенклатура
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(ВЫБРАТЬ Номенклатура, КоличествоОстаток Резерв ИЗ РегистрНакопления.ТоварыВРезерве.Остатки(, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ ТаблицаТоваров))) Рез
	|ПО Док.Номенклатура = Рез.Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО НомерСтроки
	|");
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаИлиМассивЗаказ);
	Пакет = Запрос.ВыполнитьПакет();
	
	Возврат Новый Структура("Шапка, Товары", КонвертацияТипов.ПолучитьСтруктуруИзСТрокиТаблицыЗначений(Пакет[0].Выгрузить()), Пакет[2].Выгрузить());
	
КонецФункции
Функция ПолучитьДанныеДляЗаказаВЗаказе(СсылкаИлиМассивЗаказ) Экспорт
	
	Запрос = Новый Запрос("
	
	// Шапка
	
	|ВЫБРАТЬ 	Номер, Дата, Организация, Грузоотправитель, Партнер, Ответственный, СуммаВключаетНДС, Валюта, ЕСТЬNULL(Контрагент.НеВыводьКолонкуСкидкаВПечатнойФорме, ЛОЖЬ) НеВыводьКолонкуСкидкаВПечатнойФорме
	|ИЗ			Документ.ЗаказПокупателя
	|ГДЕ		Ссылка  В(&Ссылка)
	|ОБЪЕДИНИТЬ
	|ВЫБРАТЬ 	Номер, Дата, Организация, Грузоотправитель, Партнер, Ответственный, СуммаВключаетНДС, Валюта,  ЕСТЬNULL(Контрагент.НеВыводьКолонкуСкидкаВПечатнойФорме, ЛОЖЬ) НеВыводьКолонкуСкидкаВПечатнойФорме
	|ИЗ			Документ.ИнтернетЗаказПокупателя
	|ГДЕ		Ссылка В(&Ссылка)
	|;
	
	// Таблица
	|ВЫБРАТЬ 	ЗаказПокупателя Заказ, 0 НомерСтроки, 0 Всего, 0 СуммаБезНДС, Номенклатура, Номенклатура.Производитель Производитель, Цена, Номенклатура.Артикул Артикул,ВЫБОР КОГДА Упаковка = ЗНАЧЕНИЕ (Справочник.УпаковкиНоменклатуры.ПустаяСсылка) ТОГДА ПРЕДСТАВЛЕНИЕ(Номенклатура.ЕдиницаИзмерения) ИНАЧЕ ПРЕДСТАВЛЕНИЕ(Упаковка) КОНЕЦ ЕдиницаИзмерения, КоличествоПриход Количество, СуммаПриход Сумма, " + Заказы.ПолучитьСуммуНДСВЗапросе() + " СуммаНДС, ВЫРАЗИТЬ((Цена * КоличествоПриход * ПроцентРучнойСкидки * 0.01 + Цена * КоличествоПриход * ПроцентАвтоматическойСкидки * 0.01) КАК ЧИСЛО(15,2)) Скидка
	|ПОМЕСТИТЬ 	ТаблицаТовары
	|ИЗ 		РегистрНакопления.ЗаказыПокупателей.ОстаткиИОбороты(,,,,ЗаказПокупателя  В(&Ссылка) И НЕ ЗаказПокупателя.СпособРазмещенияБезЗаказа)
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ	Ссылка, НомерСтроки, 0 Всего, 0 СуммаБезНДС, Номенклатура, Номенклатура.Производитель Производитель, Цена, Номенклатура.Артикул Артикул,ВЫБОР КОГДА Упаковка = ЗНАЧЕНИЕ (Справочник.УпаковкиНоменклатуры.ПустаяСсылка) ТОГДА ПРЕДСТАВЛЕНИЕ(Номенклатура.ЕдиницаИзмерения) ИНАЧЕ ПРЕДСТАВЛЕНИЕ(Упаковка) КОНЕЦ ЕдиницаИзмерения, Количество, Сумма, " + Заказы.ПолучитьСуммуНДСВЗапросе(,"","Ссылка") + " СуммаНДС, ВЫРАЗИТЬ((Цена * Количество * ПроцентРучнойСкидки * 0.01 + Цена * Количество * ПроцентАвтоматическойСкидки * 0.01) КАК ЧИСЛО(15,2)) Скидка
	|ИЗ 		Документ.ЗаказПокупателя.Товары ГДЕ Ссылка  В(&Ссылка) И (НЕ Ссылка.Проведен ИЛИ Ссылка.СпособРазмещенияБезЗаказа)
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ 	ИнтернетЗаказ, 0 НомерСтроки, 0 Всего, 0 СуммаБезНДС, Номенклатура, Номенклатура.Производитель Производитель, Цена, Номенклатура.Артикул Артикул,ВЫБОР КОГДА Упаковка = ЗНАЧЕНИЕ (Справочник.УпаковкиНоменклатуры.ПустаяСсылка) ТОГДА ПРЕДСТАВЛЕНИЕ(Номенклатура.ЕдиницаИзмерения) ИНАЧЕ ПРЕДСТАВЛЕНИЕ(Упаковка) КОНЕЦ ЕдиницаИзмерения, КоличествоПриход Количество, СуммаПриход Сумма, " + Заказы.ПолучитьСуммуНДСВЗапросе(,,"ИнтернетЗаказ") + " СуммаНДС, ВЫРАЗИТЬ((Цена * КоличествоПриход * ПроцентРучнойСкидки * 0.01 + Цена * КоличествоПриход * ПроцентАвтоматическойСкидки * 0.01) КАК ЧИСЛО(15,2)) Скидка
	|ИЗ 		РегистрНакопления.ИнтернетЗаказПокупателя.ОстаткиИОбороты(,,,,ИнтернетЗаказ  В(&Ссылка) И НЕ ИнтернетЗаказ.СпособРазмещенияБезЗаказа)
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ	Ссылка, НомерСтроки, 0 Всего, 0 СуммаБезНДС, Номенклатура, Номенклатура.Производитель Производитель, Цена, Номенклатура.Артикул Артикул,ВЫБОР КОГДА Упаковка = ЗНАЧЕНИЕ (Справочник.УпаковкиНоменклатуры.ПустаяСсылка) ТОГДА ПРЕДСТАВЛЕНИЕ(Номенклатура.ЕдиницаИзмерения) ИНАЧЕ ПРЕДСТАВЛЕНИЕ(Упаковка) КОНЕЦ ЕдиницаИзмерения, Количество, Сумма, " + Заказы.ПолучитьСуммуНДСВЗапросе(,"","Ссылка") + " СуммаНДС, ВЫРАЗИТЬ((Цена * Количество * ПроцентРучнойСкидки * 0.01 + Цена * Количество * ПроцентАвтоматическойСкидки * 0.01) КАК ЧИСЛО(15,2)) Скидка
	|ИЗ 		Документ.ИнтернетЗаказПокупателя.Товары ГДЕ Ссылка  В(&Ссылка) И (НЕ Ссылка.Проведен ИЛИ Ссылка.СпособРазмещенияБезЗаказа)
	|;
	|ВЫБРАТЬ ВЫБОР КОГДА  Тов.НомерСтроки = 0 ТОГДА ЕСТЬNULL(НомСтрок.Позиция, Тов.НомерСтроки) ИНАЧЕ  Тов.НомерСтроки КОНЕЦ НомерСтроки,
	|	Заказ, Всего, СуммаБезНДС, Тов.Номенклатура, Производитель, Цена, Артикул, ЕдиницаИзмерения, Количество, Сумма, СуммаНДС, Скидка	
	|ИЗ ТаблицаТовары Тов
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(ВЫБРАТЬ Объект, Номенклатура, Позиция ИЗ РегистрСведений.ПорядокСтрокНоменклатуры ГДЕ Объект В(&Ссылка)) НомСтрок
	|ПО	
	|	Тов.Номенклатура = НомСтрок.Номенклатура И
	|	Тов.Заказ = НомСтрок.Объект
	|УПОРЯДОЧИТЬ ПО Заказ, НомерСтроки, Тов.Номенклатура.Наименование
	|");
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаИлиМассивЗаказ);
	Пакет = Запрос.ВыполнитьПакет();
	
	Возврат Новый Структура("Шапка, Товары", КонвертацияТипов.ПолучитьСтруктуруИзСТрокиТаблицыЗначений(Пакет[0].Выгрузить()), Пакет[2].Выгрузить());
	
КонецФункции

Процедура ЗаполнитьТабличныйДокумент_КомерческоеПредложение_Ст(ТабличныйДокумент, ДанныеДляПечати, ИмяМакета) Экспорт
	
	//// Иницилизация переменных
	//
	//СтруктураШапки  = ДанныеДляПечати.Шапка;
	//Таблица 		= ДанныеДляПечати.Товары;
	//
	//СтруктураПодвала = Новый Структура("Сумма, СуммаНДС, Скидка, Итого, СуммаБезНДС",
	//					Таблица.Итог("Сумма") , Таблица.Итог("СуммаНДС"), Таблица.Итог("Скидка"), Таблица.Итог("Сумма") + ?(СтруктураШапки.СуммаВключаетНДС, 0, Таблица.Итог("СуммаНДС")), Таблица.Итог("Сумма") - ?(СтруктураШапки.СуммаВключаетНДС, Таблица.Итог("СуммаНДС"), 0));
	//КонвертацияТипов.ВыполнитьВыражениеВКаждойСтрокеТаблицы(Таблица, "
	//|Строка.НомерСтроки = Инд + 1; 
	//|Строка.Всего = Строка.Сумма" + ?(СтруктураШапки.СуммаВключаетНДС,""," + Строка.СуммаНДС"));
	//
	//// Подготовим переменные
	//
	//ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	//Макет = Документы.ЗаказПокупателя.ПолучитьМакет(ИмяМакета);
	//
	//ОбластьВКолонтитул 	= Макет.ПолучитьОбласть("ВерхнийКолонтитул");
	//ОбластьУсловия 		= Макет.ПолучитьОбласть("Условия");
	//ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	//ОбластьСтрока 		= Макет.ПолучитьОбласть("Строка");
	//ОбластьПустаяСтрока	= Макет.ПолучитьОбласть("ПустаяСтрока");
	//ОбластьШапка 		= Макет.ПолучитьОбласть("Шапка");
	//ОбластьПодвал		= Макет.ПолучитьОбласть("ПодвалТаблицы");
	//ОбластьСтрокаПодвал	= Макет.ПолучитьОбласть("ПустаяСтрока");
	//ОбластьПодпись		= Макет.ПолучитьОбласть("Подпись");
	//
	//Сумма 		= 0;
	//НомСтраницы = 1;
	//ПозНаЛисте	= 0;
	//
	//ОбластьШапка.Параметры.Заполнить(СтруктураШапки); 
	//ОбластьПодвал.Параметры.Заполнить(СтруктураПодвала);
	//
	//// Пдоготви набор областей
	//
	//ОбластиВерхНовойСтраницы = Новый Массив; ОбластиВерхНовойСтраницы.Добавить(ОбластьВКолонтитул); ОбластиВерхНовойСтраницы.Добавить(ОбластьШапкаТаблицы);
	//ОбластиНизПоследнейСтраницыДляПроверки = Новый Массив; ОбластиНизПоследнейСтраницыДляПроверки.Добавить(ОбластьПодвал); ОбластиНизПоследнейСтраницыДляПроверки.Добавить(ОбластьПодпись); ОбластиНизПоследнейСтраницыДляПроверки.Добавить(ОбластьУсловия);
	//ОбластиНизПоследнейСтраницыДляВывода = Новый Массив; ОбластиНизПоследнейСтраницыДляВывода.Добавить(ОбластьПодвал); ОбластиНизПоследнейСтраницыДляВывода.Добавить(ОбластьПодпись);
	//ОбластиНизСтраницыЕслиНеВойдет = Новый Массив;
	//ОбластьМеждуПодписьюИУсловиями = Новый Массив; ОбластьМеждуПодписьюИУсловиями.Добавить(ОбластьУсловия);
	//
	//// Выведем колонтитул
	//
	//ТабличныйДокумент.Вывести(ОбластьВКолонтитул);
	//
	//// Выведем шапку
	//
	//ТабличныйДокумент.Вывести(ОбластьШапка);
	//ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
	//
	//// Выведем строки
	//Для Каждого Строка Из Таблица Цикл 
	//	ОбластьСтрока.Параметры.Заполнить(Строка);
	//	ВывестиСтроку(НомСтраницы, ПозНаЛисте, ТабличныйДокумент, ОбластьСтрока, ОбластиВерхНовойСтраницы, ОбластиНизПоследнейСтраницыДляПроверки, ОбластиНизСтраницыЕслиНеВойдет, ОбластьПустаяСтрока, Картинки.ПолучитьСсылкуОсновногоИзображения(Строка.Номенклатура), 3); КонецЦикла;
	//
	//// Если последнее не войдет тогда сделаем его как промежную страницу и окончание выведем в конце
	//Если Не ТабличныйДокумент.ПроверитьВывод(ОбластиНизПоследнейСтраницыДляПроверки) Тогда
	//	ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	//	ВывестиОбласти(ТабличныйДокумент, ОбластиНизСтраницыЕслиНеВойдет); КонецЕсли;
	//	
	//// Выведем подвал
	//ВывестиОбласти(ТабличныйДокумент, ОбластиНизПоследнейСтраницыДляВывода);
	//ДобитьПустымиСтрокамиДоКонцаСтраницы(ТабличныйДокумент, ОбластьПустаяСтрока, ОбластьМеждуПодписьюИУсловиями);
	//
	////ДобитьНемецкимиСтрокамиЧтобыКолонтитулОказалсяВнизу(ТабличныйДокумент, ОбластьПустаяСтрока, ОбластьПодвал, ОбластьНКолонтитул);
	//
	//ТабличныйДокумент.НижнийКолонтитул.ТекстСлева = "Исполнитель: ООО ""Гараж-инструмент"", ИНН 7816438930, КПП 781601001, 192236, г. Санкт-Петербург, ул. Софийская, д.14, лит. А, тел.: 8 (812) 458-46-64";
	//ТабличныйДокумент.НижнийКолонтитул.ТекстСправа = "Страница [&НомерСтраницы] Из [&СтраницВсего]";
	//ТабличныйДокумент.НижнийКолонтитул.Шрифт = Новый Шрифт("Arial", 8);
	//ТабличныйДокумент.НижнийКолонтитул.Выводить = Истина;
	
КонецПроцедуры
Процедура ЗаполнитьТабличныйДокумент_КомерческоеПредложение(ТабличныйДокумент, ДанныеДляПечати, ПараметрПечати, ЦенаОтСуммы = Ложь, СоСкидками = Истина) Экспорт
	
	// Иницилизация переменных
	
	Макет 			= Документы.ЗаказПокупателя.ПолучитьМакет(ПараметрПечати.ИмяМакета);
	СтруктураШапки  = ДанныеДляПечати.Шапка;
	Таблица 		= ДанныеДляПечати.Товары;
	ЕстьСкидка 		= Булево(Таблица.Итог("Скидка"));
	ПечатьСНаличием	= СтруктураШапки.Свойство("ПечатьСНаличием") И СтруктураШапки.ПечатьСНаличием И Макет.Области.Найти("СтрокаНаличие") <> Неопределено;
	
	КонвертацияТипов.ВыполнитьВыражениеВКаждойСтрокеТаблицы(Таблица, "
	|Строка.НомерСтроки = Инд + 1; 
	|Если Не Строка.Всего Тогда Строка.Всего = Строка.Сумма" + ?(СтруктураШапки.СуммаВключаетНДС,""," + Строка.СуммаНДС") + " КонецЕсли;
	|Строка.СуммаБезНДС = Строка.Сумма" + ?(СтруктураШапки.СуммаВключаетНДС," - Строка.СуммаНДС", ""));
	
	СтруктураПодвала = Новый Структура("ТекстИтогоБезНДС, ВсегоНаименований, СуммаПрописью, Сумма, СуммаНДС, Скидка, Итого, СуммаБезНДС",
						"Итого без НДС" + ?(ЕстьСкидка, " (с учетом скидки)", ""),
						"Всего наименований " + Таблица.Количество() + ", на сумму " + Таблица.Итог("Всего") + " " + СтруктураШапки.Валюта,
						РаботаСКурсамиВалют.СформироватьСуммуПрописью(Таблица.Итог("Всего"), СтруктураШапки.Валюта, Истина),
						Таблица.Итог("Сумма") , Таблица.Итог("СуммаНДС"), Таблица.Итог("Скидка"), Таблица.Итог("Всего"), Таблица.Итог("СуммаБезНДС"));
						
	// Подготовим переменные
	
	ТабличныйДокумент.ОриентацияСтраницы = ПараметрПечати.ОриентацияСтраницы;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	ДобСуффикс = ?(ЕстьСкидка И СоСкидками И НЕ СтруктураШапки.НеВыводьКолонкуСкидкаВПечатнойФорме, "Скидка", "");
	
	ОбластьВКолонтитул 	= Макет.ПолучитьОбласть("ВерхнийКолонтитул");
	ОбластьВКолонтитул2	= Макет.ПолучитьОбласть("ВерхнийКолонтитул2");
	Если ПараметрПечати.СтрокаУсловиеПоставки Тогда ОбластьУсловия = Макет.ПолучитьОбласть("Условия") КонецЕсли;
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы" 	+ ?(ПечатьСНаличием, "Наличие", "") + ?(ПараметрПечати.СкидкаВТаблице, ДобСуффикс, ""));
	ОбластьСтрока 		= Макет.ПолучитьОбласть("Строка" 		+ ?(ПечатьСНаличием, "Наличие", "") + ?(ПараметрПечати.СкидкаВТаблице, ДобСуффикс, ""));
	ОбластьПустаяСтрока	= Макет.ПолучитьОбласть("ПустаяСтрока");
	ОбластьШапка 		= Макет.ПолучитьОбласть("Шапка");
	ОбластьПодвал		= Макет.ПолучитьОбласть("ПодвалТаблицы" + ?(ПараметрПечати.СкидкаВТаблице, ДобСуффикс, ""));
	ОбластьПодпись		= Макет.ПолучитьОбласть("Подпись");
	
	ОбластьШапкаТаблицы.Параметры.Заполнить(СтруктураШапки);
	ОбластьШапка.Параметры.Заполнить(СтруктураШапки); 
	ОбластьПодвал.Параметры.Заполнить(СтруктураПодвала);
	
	// Пдоготви набор областей
	
	ОбластиПоследнейСтраницы = Новый Массив; ОбластиПоследнейСтраницы.Добавить(ОбластьПодвал); ОбластиПоследнейСтраницы.Добавить(ОбластьПодпись);
	Если ПараметрПечати.СтрокаУсловиеПоставки Тогда ОбластьМеждуПодписьюИУсловиями = Новый Массив; ОбластьМеждуПодписьюИУсловиями.Добавить(ОбластьУсловия) КонецЕсли;
	
	// Рассчитаем и заполним параметры
	
	КолСтрок = Таблица.Количество();
	
	// Расчитаем текстовые переменные
	
	СтруктураОтветвенного = ПолучитьИнфуПоОтветвенному(СтруктураШапки.Ответственный);
	СтруктураШапки.Вставить("КонтактОтветвенного", "тел.: " + ?(СтруктураОтветвенного.Свойство("Телефон"), СтруктураОтветвенного.Телефон, "8 (812) 620-80-07") + 
		?(СтруктураОтветвенного.Свойство("Почта"), "; e-mail: " + СтруктураОтветвенного.Почта, ""));
		
	ТекстДляКолонтитула = ПолучитьТекстовыеДанныеПоЮрЛицу(?(СтруктураШапки.Свойство("Грузоотправитель") И ЗначениеЗаполнено(СтруктураШапки.Грузоотправитель), СтруктураШапки.Грузоотправитель, СтруктураШапки.Организация), ПараметрПечати.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт);
	
	// Выведем колонтитул
	
	ДатаСтрокой = Формат(СтруктураШапки.Дата, "ДЛФ=DD");
	ОбластьВКолонтитул.Параметры.Заполнить(СтруктураШапки);
	ОбластьВКолонтитул.Параметры.Дата = ДатаСтрокой;
	
	ОбластьВКолонтитул2.Параметры.Заполнить(СтруктураШапки);
	ОбластьВКолонтитул2.Параметры.Дата = ДатаСтрокой;
	
	ОбластьПодпись.Параметры.Заполнить(СтруктураШапки);
	
	// Считаем информацию об ответвенном
		
	ТабличныйДокумент.Вывести(ОбластьВКолонтитул);
	
	// Выведем шапку
	
	ТабличныйДокумент.Вывести(ОбластьШапка);
	ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
	
	ЕстьНомКартинки = Таблица.Колонки.Найти("НоменклатураКартинки") <> Неопределено;
	
	// Выведем строки
	
	текСтраница = 1; ПозНаЛисте = 0;
	счетчикСтрок=0;
	Для Каждого Строка Из Таблица Цикл ПозНаЛисте = ПозНаЛисте + 1;
		
		СчетчикСтрок=СчетчикСтрок+1;
		
		ОбластьСтрока.Параметры.Заполнить(Строка);
		Если ЦенаОтСуммы Тогда
			 ОбластьСтрока.Параметры.Цена = Окр(Строка.Сумма/Строка.Количество, 2); КонецЕсли;
		 
		// Картинка
		
		СсылкаКартинки = Картинки.ПолучитьСсылкуОсновногоИзображения(?(ЕстьНомКартинки И Не Строка.НоменклатураКартинки.Пустая(), Строка.НоменклатураКартинки, Строка.Номенклатура));
		
		Если СсылкаКартинки <> Неопределено Тогда
			Карт = ?(СсылкаКартинки.КопияКартинки.Пустая(), ?(СсылкаКартинки.Аватар.Получить()=Неопределено, СсылкаКартинки.Картинка.Получить(), СсылкаКартинки.Аватар.Получить()), СсылкаКартинки.КопияКартинки.Аватар.Получить());
			//Карт = ?(СсылкаКартинки.КопияКартинки.Пустая(), СсылкаКартинки.Аватар.Получить(), СсылкаКартинки.КопияКартинки.Аватар.Получить());
			
			
			Если ТипЗнч(Карт) = Тип("Картинка") Тогда
				Попытка
					ФорматКарт = Карт.Формат();
					Если  ФорматКарт = ФорматКартинки.JPEG или
					  ФорматКарт = ФорматКартинки.PNG Тогда
						ОбластьСтрока.Область("R1C2").Картинка = Карт;
					КонецЕсли;	
				Исключение
					ОбщиеФункции.СообщитьТекст("У вас плохая картинка в строке "+СчетчикСтрок);
				КонецПопытки;
			КонецЕсли;
		Иначе 
			ОбластьСтрока.Область("R1C2").Картинка = Неопределено;
		КонецЕсли;
		
		// Вывод
		
		ТабличныйДокумент.Вывести(ОбластьСтрока); 
		Если 	(текСтраница = 1 И Строка.НомерСтроки = ПараметрПечати.НаПервомНеБолее) Или 
				(Строка.НомерСтроки > 1 И Строка.НомерСтроки = ПараметрПечати.НаВторомНеБолее * (текСтраница - 1) + ПараметрПечати.НаПервомНеБолее) Тогда 
			текСтраница = текСтраница + 1;
			ПозНаЛисте 	= 0;
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабличныйДокумент.Вывести(ОбластьВКолонтитул2); 
			Если Строка.НомерСтроки <> КолСтрок Тогда
				ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы); КонецЕсли; КонецЕсли; КонецЦикла;
		
	Если ПозНаЛисте > ПараметрПечати.ВКонцеНеБолее Или (ПараметрПечати._1ЛистТолькоКогдаДо < КолСтрок И КолСтрок <= ПараметрПечати.НаПервомНеБолее) Тогда ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц(); КонецЕсли;
		
	// Выведем подвал
	
	ВывестиОбласти(ТабличныйДокумент, ОбластиПоследнейСтраницы);
	Если ПараметрПечати.СтрокаУсловиеПоставки Тогда
		ДобитьПустымиСтрокамиДоКонцаСтраницы(ТабличныйДокумент, ОбластьПустаяСтрока, ОбластьМеждуПодписьюИУсловиями); КонецЕсли;
	
	// Нижний колонтитул
	
	ТабличныйДокумент.НижнийКолонтитул.ТекстСлева = "Исполнитель: " + ТекстДляКолонтитула;
	ТабличныйДокумент.НижнийКолонтитул.ТекстСправа = "Страница [&НомерСтраницы] Из [&СтраницВсего]";
	ТабличныйДокумент.НижнийКолонтитул.Шрифт = Новый Шрифт("Arial", 8);
	ТабличныйДокумент.НижнийКолонтитул.Выводить = Истина;
	
	// Печать и подпись
	
	Если ПустаяСтрока(СтруктураШапки.Организация.ИмяКартинкиПечати) Тогда
		
		ТабличныйДокумент.Рисунки.Удалить(ТабличныйДокумент.Рисунки.ПодписьОВ);
		ТабличныйДокумент.Рисунки.Удалить(ТабличныйДокумент.Рисунки.Печать);
		
	Иначе
		
		ИмяПечати = СтруктураШапки.Организация.ИмяКартинкиПечати;
		
		Если ВРег(ИмяПечати) <> Врег("ПечатьТулс") Тогда ТабличныйДокумент.Рисунки.Печать.Картинка = БиблиотекаКартинок[ИмяПечати] КонецЕсли;
		
		ТабличныйДокумент.Рисунки.ПодписьОВ.Ширина = 30;
		ТабличныйДокумент.Рисунки.ПодписьОВ.Высота = 20;
	
		ТабличныйДокумент.Рисунки.Печать.Ширина = 42;
		ТабличныйДокумент.Рисунки.Печать.Высота = 42; КонецЕсли;
	
КонецПроцедуры

Функция ВывестиСтрокуИПроверитьВывод(ТабличныйДокумент, Область)
	
	Если ТабличныйДокумент.ПроверитьВывод(Область) Тогда
		ТабличныйДокумент.Вывести(Область);
		Возврат Истина;
	Иначе
		Возврат Ложь КонецЕсли;
	
КонецФункции
Процедура ВывестиСтроку_Ст(НомСтраницы, ПозНаЛисте, ТабличныйДокумент, ОбластьШапка1, ОбластьШапкаТаблицы, ОбластьСтрока, ОбластьСтрокаПодвал, ОбластьПодвал, ОбластьВКолонтитул, ОбластьНКолонтитул, СсылкаКартинки)
	
	//ПроверятьСвыше = 2; // с какой строки проверяем вывод и попадание в лист (для оптимизации)
	//
	//// Проверим войдет ли с подвалом и колонтитулом если вывести эту строку
	//
	//Если ПозНаЛисте > ПроверятьСвыше Тогда
	//
	//	ТабличныйДокументКопия = Новый ТабличныйДокумент;
	//	ТабличныйДокументКопия.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	//	ТабличныйДокументКопия.Вывести(ТабличныйДокумент);
	//	
	//	Если НЕ	(	ВывестиСтрокуИПроверитьВывод(ТабличныйДокументКопия, ОбластьСтрока) И
	//				ВывестиСтрокуИПроверитьВывод(ТабличныйДокументКопия, ОбластьПодвал) 
	//				//ВывестиСтрокуИПроверитьВывод(ТабличныйДокументКопия, ОбластьНКолонтитул)
	//		) Тогда
	//			
	//		НомСтраницы = НомСтраницы + 1; ПозНаЛисте = 0; // Строка не влазиет выведем новую
	//		
	//		//ОбластьСтрокаПодвал.Параметры.Продолжение = "weiter auf Seite " + НомСтраницы;
	//		
	//		// Завершим предыдущую страницу
	//	
	//		ТабличныйДокумент.Вывести(ОбластьСтрокаПодвал);
	//		//ТабличныйДокумент.Вывести(ОбластьНКолонтитул);
	//		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	//		
	//		// Выведем новую
	//		
	//		ТабличныйДокумент.Вывести(ОбластьВКолонтитул);
	//		ТабличныйДокумент.Вывести(ОбластьШапка1);
	//		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);  КонецЕсли;  КонецЕсли;
	//
	//ПозНаЛисте = ПозНаЛисте + 1;
	//Если СсылкаКартинки <> Неопределено Тогда ОбластьСтрока.Область("R1C2").Картинка = ?(СсылкаКартинки.КопияКартинки.Пустая(), СсылкаКартинки.Аватар.Получить(), СсылкаКартинки.КопияКартинки.Аватар.Получить())  КонецЕсли;
	//ТабличныйДокумент.Вывести(ОбластьСтрока);
	
КонецПроцедуры
Процедура ВывестиСтроку(НомСтраницы, ПозНаЛисте, ТабличныйДокумент, ОбластьСтрока, ОбластиВерхНовойСтраницы, ОбластиНизПоследнейСтраницы, ОбластиНизСтраницыЕслиНеВойдет, ОбластьПустаяСтрока, СсылкаКартинки, ПроверятьСвыше = 3)
	
	// Проверим войдет ли с подвалом и колонтитулом если вывести эту строку
	
	Если ПозНаЛисте > ПроверятьСвыше Тогда
	
		ТабличныйДокументКопия = Новый ТабличныйДокумент;
		ТабличныйДокументКопия.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		ТабличныйДокументКопия.Вывести(ТабличныйДокумент);
		
		Влезло = Истина;
		Для Каждого Область Из ОбластиНизПоследнейСтраницы Цикл 
			Если ВывестиСтрокуИПроверитьВывод(ТабличныйДокументКопия, ОбластьСтрока) Тогда
				Влезло = Ложь;
				Прервать; КонецЕсли; КонецЦикла;
		
		Если Не Влезло Тогда
				
			НомСтраницы = НомСтраницы + 1; ПозНаЛисте = 0; // Строка не влазиет выведем новую
			ДобитьПустымиСтрокамиДоКонцаСтраницы(ТабличныйДокумент, ОбластьПустаяСтрока, ОбластиНизСтраницыЕслиНеВойдет);
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
			// Выведем новую
			
			ВывестиОбласти(ТабличныйДокумент, ОбластиВерхНовойСтраницы); КонецЕсли;  КонецЕсли;
	
	ПозНаЛисте = ПозНаЛисте + 1;
	Если СсылкаКартинки <> Неопределено Тогда ОбластьСтрока.Область("R1C2").Картинка = ?(СсылкаКартинки.КопияКартинки.Пустая(), СсылкаКартинки.Аватар.Получить(), СсылкаКартинки.КопияКартинки.Аватар.Получить())  КонецЕсли;
	ТабличныйДокумент.Вывести(ОбластьСтрока);
	
КонецПроцедуры

Процедура ДобитьПустымиСтрокамиДоКонцаСтраницы(ТабличныйДокумент, ОбластьПустаяСтрока, ОбластиНиз) Экспорт
	
	// Проверим войдет ли с подвалом и колонтитулом если вывести эту строку
	
	ОбластиПроверки = Новый Массив;
	ОбластиПроверки.Добавить(ОбластьПустаяСтрока);
	КонвертацияТипов.ДобавитьМассивВКонецМассива(ОбластиПроверки, ОбластиНиз);
	
	Пока Истина Цикл
		
		Если ТабличныйДокумент.ПроверитьВывод(ОбластиПроверки) Тогда 
			ТабличныйДокумент.Вывести(ОбластьПустаяСтрока);
			
		Иначе 
			ВывестиОбласти(ТабличныйДокумент, ОбластиНиз);
			Прервать;  КонецЕсли;  КонецЦикла;
	
КонецПроцедуры


Процедура ВывестиОбласти(ТабличныйДокумент, Области)
	
	Для Каждого Область Из Области Цикл ТабличныйДокумент.Вывести(Область) КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Немецкий

Функция ПолучитьНомерПоНемецкимПравилам(Номер, Дата, Префикс)
	
	// Вернем чтобы было не больше 10 символов
	
	Начало = Префикс + ?(Префикс = "","","-") + Формат(Дата, "ДФ=yy");
	Возврат Начало + Прав(КонвертацияТипов.ПолучитьТолькоЦифры(Номер), 10 - СтрДлина(Начало));
	
КонецФункции

Процедура ДобитьНемецкимиСтрокамиЧтобыКолонтитулОказалсяВнизу(ТабличныйДокумент, ОбластьПустаяСтрока, ОбластьПодвал, ОбластьНКолонтитул) Экспорт
	
	// Проверим войдет ли с подвалом и колонтитулом если вывести эту строку
	МассивОбластей = Новый Массив;
	МассивОбластей.Добавить(ОбластьНКолонтитул);
	Пока Истина Цикл
	
		ТабличныйДокументКопия = Новый ТабличныйДокумент;
		ТабличныйДокументКопия.Вывести(ТабличныйДокумент);
	
		ТабличныйДокументКопия.Вывести(ОбластьПустаяСтрока);
		//ТабличныйДокументКопия.Вывести(ОбластьПодвал);
	
		Если ТабличныйДокументКопия.ПроверитьВывод(МассивОбластей) Тогда 
			
			ТабличныйДокумент.Вывести(ОбластьПустаяСтрока);
			
		Иначе // Строка не влазиет
		
			// Завершим предыдущую страницу
		
			//ТабличныйДокумент.Вывести(ОбластьПодвал);
			ТабличныйДокумент.Вывести(ОбластьНКолонтитул); 
			Прервать; 
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры
Процедура ВывестиНемецкуюСтроку(НомСтраницы, ПозНаЛисте, ТабличныйДокумент, ОбластьШапка1, ОбластьШапкаТаблицы, ОбластьСтрока, ОбластьСтрокаПодвал, ОбластьПодвал, ОбластьПодвал1,ОбластьВКолонтитул, ОбластьНКолонтитул)
	
	ПроверятьСвыше = 7; // с какой строки проверяем вывод и попадание в лист (для оптимизации)
	
	// Проверим войдет ли с подвалом и колонтитулом если вывести эту строку
	
	Если ПозНаЛисте > ПроверятьСвыше Тогда
		ТабличныйДокументКопия = Новый ТабличныйДокумент;
		ТабличныйДокументКопия.Вывести(ТабличныйДокумент);
	
		ТабличныйДокументКопия.Вывести(ОбластьСтрока);
		ТабличныйДокументКопия.Вывести(ОбластьПодвал);
		ТабличныйДокументКопия.Вывести(ОбластьПодвал1);
		
		Если Не ТабличныйДокументКопия.ПроверитьВывод(ОбластьНКолонтитул) Тогда НомСтраницы = НомСтраницы + 1; ПозНаЛисте = 0; // Строка не влазиет выведем новую
			
			ОбластьСтрокаПодвал.Параметры.Продолжение = "weiter auf Seite " + НомСтраницы;
			
			// Завершим предыдущую страницу
		
			ТабличныйДокумент.Вывести(ОбластьСтрокаПодвал);
			ТабличныйДокумент.Вывести(ОбластьНКолонтитул);
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
			// Выведем новую
			
			ТабличныйДокумент.Вывести(ОбластьВКолонтитул);
			ТабличныйДокумент.Вывести(ОбластьШапка1);
			ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы); 
		КонецЕсли; 
	КонецЕсли;
	
	ПозНаЛисте = ПозНаЛисте + 1;
	ТабличныйДокумент.Вывести(ОбластьСтрока);
КонецПроцедуры
Процедура ЗаполнитьТабличныйДокументНаНемецком(ТабличныйДокумент, СтруктураШапки, СтруктураПодвала, ТаблицаТоваров, СвоиОбласти = Неопределено, Префикс = "")
	
	Если СвоиОбласти = Неопределено Тогда СвоиОбласти = Новый Структура КонецЕсли;
	
	// Подготовим переменные
	
	ОбщМакет = ПолучитьОбщийМакет("ОбщиеПоляНемецкихФорм");
	
	ОбластьВКолонтитул 		= ?(Не СвоиОбласти.Свойство("ВерхнийКолонтитул"), ОбщМакет.ПолучитьОбласть("ВерхнийКолонтитул"), 	СвоиОбласти.ВерхнийКолонтитул);
	ОбластьНКолонтитул 		= ?(Не СвоиОбласти.Свойство("НижнийКолонтитул"), 	ОбщМакет.ПолучитьОбласть("НижнийКолонтитул"), 	СвоиОбласти.НижнийКолонтитул);
	ОбластьПустаяСтрока		= ?(Не СвоиОбласти.Свойство("ПустаяСтрока"), 		ОбщМакет.ПолучитьОбласть("ПустаяСтрока"), 		СвоиОбласти.ПустаяСтрока);
	
	ОбластьШапка1 		= ?(Не СвоиОбласти.Свойство("Шапка1"), 		ОбщМакет.ПолучитьОбласть("Шапка1"), 		СвоиОбласти.Шапка1);
	ОбластьШапка2 		= ?(Не СвоиОбласти.Свойство("Шапка2"), 		ОбщМакет.ПолучитьОбласть("Шапка2"), 		СвоиОбласти.Шапка2);
	
	//ОбластьШапкаТаблицы = ?(Не СвоиОбласти.Свойство("ШапкаТаблицы"),	ОбщМакет.ПолучитьОбласть("ШапкаТаблицы"), 	СвоиОбласти.ШапкаТаблицы);
	ОбластьШапкаТаблицы = ?(Не СвоиОбласти.Свойство("ШапкаТаблицыБезСкидок"),	ОбщМакет.ПолучитьОбласть("ШапкаТаблицыБезСкидок"), 	СвоиОбласти.ШапкаТаблицы);
	///
	ОбластьСтрока		= ?(Не СвоиОбласти.Свойство("СтрокаБезСкидок"), ОбщМакет.ПолучитьОбласть("СтрокаБезСкидок"), СвоиОбласти.СтрокаБезСкидок);
	ОбластьСтрока_с     = ?(Не СвоиОбласти.Свойство("СтрокаБезСкидок_с"), ОбщМакет.ПолучитьОбласть("СтрокаБезСкидок_с"), СвоиОбласти.СтрокаБезСкидок_с);
	
	//ОбластьСтрока 		= ?(Не СвоиОбласти.Свойство("Строка"), 		ОбщМакет.ПолучитьОбласть("Строка"), 		СвоиОбласти.Строка);
	//ОбластьСтрока_с		= ?(Не СвоиОбласти.Свойство("Строка_с"),     ОбщМакет.ПолучитьОбласть("Строка_с"),       СвоиОбласти.Строка_с);
	ОбластьСтрокаПодвал = ?(Не СвоиОбласти.Свойство("СтрокаПодвал"),	ОбщМакет.ПолучитьОбласть("СтрокаПодвал"), 	СвоиОбласти.СтрокаПодвал);
	ОбластьПодвал 		= ?(Не СвоиОбласти.Свойство("Подвал"), 		ОбщМакет.ПолучитьОбласть("Подвал"), 		СвоиОбласти.Подвал);
	ОбластьПодвал1		= ?(Не СвоиОбласти.Свойство("Подвал1"),		ОбщМакет.ПолучитьОбласть("Подвал1"),			СвоиОбласти.Подвал1);
	
	Сумма 		= 0;
	НомСтраницы = 1;
	ПозНаЛисте	= 0;
	
	ОбластьШапка1.Параметры.Заполнить(СтруктураШапки); ОбластьШапка1.Параметры.Номер = ПолучитьНомерПоНемецкимПравилам(СтруктураШапки.Номер, СтруктураШапки.Дата, Префикс);
	ОбластьШапка2.Параметры.Заполнить(СтруктураШапки);
	ОбластьПодвал.Параметры.Заполнить(СтруктураПодвала);
	
	// Выведем колонтитул
	
	ТабличныйДокумент.Вывести(ОбластьВКолонтитул);
	
	// Выведем шапку
	
	ТабличныйДокумент.Вывести(ОбластьШапка1);
	ТабличныйДокумент.Вывести(ОбластьШапка2);
	
	ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
	
	// Выведем строки
	Для Каждого Строка Из ТаблицаТоваров Цикл
		Если (ПозНаЛисте / 2) - Цел(ПозНаЛисте / 2) = 0 Тогда
			ОбластьСтрока.Параметры.Заполнить(Строка); 
			ВывестиНемецкуюСтроку(НомСтраницы, ПозНаЛисте, ТабличныйДокумент, ОбластьШапка1, ОбластьШапкаТаблицы, ОбластьСтрока, ОбластьСтрокаПодвал, ОбластьПодвал, ОбластьПодвал1, ОбластьВКолонтитул, ОбластьНКолонтитул); 
		Иначе
			ОбластьСтрока_с.Параметры.Заполнить(Строка);
			ВывестиНемецкуюСтроку(НомСтраницы, ПозНаЛисте, ТабличныйДокумент, ОбластьШапка1, ОбластьШапкаТаблицы, ОбластьСтрока_с, ОбластьСтрокаПодвал, ОбластьПодвал, ОбластьПодвал1, ОбластьВКолонтитул, ОбластьНКолонтитул);
		КонецЕсли;
	КонецЦикла;
	
	
	// Выведем подвал
	
	ТабличныйДокумент.Вывести(ОбластьПодвал);
	ТабличныйДокумент.Вывести(ОбластьПодвал1);
	ДобитьНемецкимиСтрокамиЧтобыКолонтитулОказалсяВнизу(ТабличныйДокумент, ОбластьПустаяСтрока, ОбластьПодвал, ОбластьНКолонтитул);
	
	// Пронумеруем строки
	
	Если НомСтраницы > 1 Тогда                             
		ТабличныйДокумент.ВерхнийКолонтитул.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
		ТабличныйДокумент.ВерхнийКолонтитул.ТекстСправа = "Seite [&НомерСтраницы] von [&СтраницВсего]";
		ТабличныйДокумент.ВерхнийКолонтитул.Выводить  = Истина; 
	КонецЕсли;
	
КонецПроцедуры
///
//////под новую печатную форму (Антон)\\\\\\\\\\\\
Процедура ЗаполнитьТабличныйДокументНаНемецком_Нов(ТабличныйДокумент, СтруктураШапки, СтруктураПодвала, ТаблицаТоваров, СвоиОбласти = Неопределено, Префикс = "")
	
	Если СвоиОбласти = Неопределено Тогда СвоиОбласти = Новый Структура; КонецЕсли;	
	// Подготовим переменные
	ОбщМакет = ПолучитьОбщийМакет("ОбщиеПоляНемецкихФорм");
	
	ОбластьВКолонтитул 		= ?(НЕ СвоиОбласти.Свойство("ВерхнийКолонтитул"), ОбщМакет.ПолучитьОбласть("ВерхнийКолонтитул"), СвоиОбласти.ВерхнийКолонтитул);
	ОбластьНКолонтитул 		= ?(НЕ СвоиОбласти.Свойство("НижнийКолонтитул"), ОбщМакет.ПолучитьОбласть("НижнийКолонтитул"), СвоиОбласти.НижнийКолонтитул);
	ОбластьПустаяСтрока		= ?(НЕ СвоиОбласти.Свойство("ПустаяСтрока"), ОбщМакет.ПолучитьОбласть("ПустаяСтрока"), СвоиОбласти.ПустаяСтрока); //Зачеееееем!!!
	
	ОбластьШапка 		= СвоиОбласти.Шапка;
	///
	ОбластьШапкаТаблицы = СвоиОбласти.ШапкаТаблицы;
	ОбластьСтрока_1		= СвоиОбласти.Строка_1;
	ОбластьСтрока_2     = СвоиОбласти.Строка_2;
	ОбластьПодвалСтроки = СвоиОбласти.ПодвалСтроки;
	ОбластьПодвалТаблицы = СвоиОбласти.ПодвалТаблицы;
	ОбластьНадписьВПодвале = СвоиОбласти.НадписьВПодвале;
	
	Сумма 		= 0;
	НомСтраницы = 1;
	ПозНаЛисте	= 0;
	
	ОбластьШапка.Параметры.Заполнить(СтруктураШапки); 
	ОбластьШапка.Параметры.Номер = ПолучитьНомерПоНемецкимПравилам(СтруктураШапки.Номер, СтруктураШапки.Дата, Префикс);
	ОбластьПодвалТаблицы.Параметры.Заполнить(СтруктураПодвала);
	
	// Выведем колонтитул	
	ТабличныйДокумент.Вывести(ОбластьВКолонтитул);
	
	// Выведем шапку	
	ТабличныйДокумент.Вывести(ОбластьШапка);	
	ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
	
	// Выведем строки
	Для Каждого Строка Из ТаблицаТоваров Цикл
		Если (ПозНаЛисте / 2) - Цел(ПозНаЛисте / 2) = 0 Тогда
			ОбластьСтрока_1.Параметры.Заполнить(Строка);
			//ОбластьСтрока_1.Параметры.СуммаБезСкидки = Строка.Цена * Строка.Количество;
			ВывестиНемецкуюСтроку(НомСтраницы, ПозНаЛисте, ТабличныйДокумент, ОбластьШапка, ОбластьШапкаТаблицы, ОбластьСтрока_1, ОбластьПодвалСтроки, ОбластьПодвалТаблицы, ОбластьНадписьВПодвале, ОбластьВКолонтитул, ОбластьНКолонтитул); 
		Иначе
			ОбластьСтрока_2.Параметры.Заполнить(Строка);
			//ОбластьСтрока_2.Параметры.СуммаБезСкидки = Строка.Цена * Строка.Количество;
			ВывестиНемецкуюСтроку(НомСтраницы, ПозНаЛисте, ТабличныйДокумент, ОбластьШапка, ОбластьШапкаТаблицы, ОбластьСтрока_2, ОбластьПодвалСтроки, ОбластьПодвалТаблицы, ОбластьНадписьВПодвале, ОбластьВКолонтитул, ОбластьНКолонтитул);
		КонецЕсли;
	КонецЦикла;
	
	
	// Выведем подвал
	
	ТабличныйДокумент.Вывести(ОбластьПодвалТаблицы);
	ТабличныйДокумент.Вывести(ОбластьНадписьВПодвале);
	ДобитьНемецкимиСтрокамиЧтобыКолонтитулОказалсяВнизу(ТабличныйДокумент, ОбластьПустаяСтрока, ОбластьПодвалТаблицы, ОбластьНКолонтитул);
	
	// Пронумеруем строки
	
	Если НомСтраницы > 1 Тогда                             
		ТабличныйДокумент.ВерхнийКолонтитул.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
		ТабличныйДокумент.ВерхнийКолонтитул.ТекстСправа = "Seite [&НомерСтраницы] von [&СтраницВсего]";
		ТабличныйДокумент.ВерхнийКолонтитул.Выводить  = Истина; 
	КонецЕсли;
	
КонецПроцедуры
///


Функция ПолучитьДанныеДляНемецкогоЗаказаВЗаказе(СсылкаЗаказ) Экспорт
	
	Запрос = Новый Запрос("
	
	// Переменные для вычисления куда доставлять
	
	|ВЫБРАТЬ 	Грузоотправитель 
	|ПОМЕСТИТЬ 	ТаблицаДоставки 
	|ИЗ(
	|		ВЫБРАТЬ Грузоотправитель ИЗ Документ.ЗаказПокупателя ГДЕ Ссылка = &Ссылка И Грузоотправитель <> Неопределено И Грузоотправитель.Код <> """"
	|		ОБЪЕДИНИТЬ
	|		ВЫБРАТЬ Партнер ИЗ Документ.ЗаказПокупателя ГДЕ Ссылка = &Ссылка) Запрос;
	
	// Шапка
	
	|ВЫБРАТЬ 
	|	Номер, Дата, 
	|	КонтактноеЛицо, НомерЗаказаКлиента, ДатаЗаказаКлиента, ДатаАктуальности, ДатаПоставки,
	|	Партнер,
	|	Партнер.НомерКлиента 		НомерКлиента,
	|	Партнер.ИНН 				ИНН,
	|	КонтактноеЛицо,
	|	КонтактноеЛицо.ФизЛицо.Пол 	Пол,
	|	НомерЗапросаКлиента,
	|	ДатаЗапросаКлиента,
	|	ДатаАктуальности 			ДатаОкончания,
	|	ВариантДоставки,
	|	ВариантОплаты,
	|	Ответственный,
	|	СуммаДоставки,
	|	СуммаУпаковки,
	|	СрокПоставки,
	|	СпособДоставки
	|ИЗ
	|	Документ.ЗаказПокупателя
	|ГДЕ
	|	Ссылка = &Ссылка;
	
	// Адрес доставки
	
	//|ВЫБРАТЬ ПЕРВЫЕ 1 Представление Адрес
	//|ИЗ 	РегистрСведений.ПредставлениеКонтактнойИнформации
	//|ГДЕ	Объект В(ВЫБРАТЬ Грузоотправитель ИЗ ТаблицаДоставки) И Вид В ИЕРАРХИИ(&ВидыАдресовФизический) И НЕ Объект.ПометкаУдаления; 
	
	|ВЫБРАТЬ 
	|	Объект,
	|	Вид,
	|	Поле,
	|	Значение
	|ИЗ 	РегистрСведений.КонтактнаяИнформация
	|ГДЕ	Объект В(ВЫБРАТЬ Грузоотправитель ИЗ ТаблицаДоставки) И Вид = &ВидыАдресовФизический; 

	// Таблица
	
	|ВЫБРАТЬ 	0 НомерСтроки, Номенклатура, Цена, Номенклатура.Артикул Артикул, КоличествоПриход Количество, СуммаПриход Сумма, " + Заказы.ПолучитьСуммуНДСВЗапросе() + " СуммаНДС, ПроцентРучнойСкидки + ПроцентАвтоматическойСкидки Скидка, ВЫРАЗИТЬ((Цена*КоличествоПриход)/100*(ПроцентРучнойСкидки + ПроцентАвтоматическойСкидки) КАК ЧИСЛО(10, 2)) СуммаСкидки, Цена*КоличествоПриход СуммаБезСкидки
	|ИЗ 		РегистрНакопления.ЗаказыПокупателей.ОстаткиИОбороты(,,,,ЗаказПокупателя = &Ссылка)
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ	0 НомерСтроки, Номенклатура, Цена, Номенклатура.Артикул Артикул, Количество, Сумма, " + Заказы.ПолучитьСуммуНДСВЗапросе(,"","Ссылка") + " СуммаНДС, ПроцентРучнойСкидки + ПроцентАвтоматическойСкидки Скидка, ВЫРАЗИТЬ((Цена*Количество)/100*(ПроцентРучнойСкидки + ПроцентАвтоматическойСкидки) КАК ЧИСЛО(10, 2)) СуммаСкидки, Цена*Количество СуммаБезСкидки
	|ИЗ 		Документ.ЗаказПокупателя.Товары ГДЕ Ссылка = &Ссылка И НЕ Ссылка.Проведен");
	////////АДРЕС \\\\\\\
	//|ВЫБРАТЬ Объект, Вид, Поле, Значение
	//|ИЗ
	//|	РегистрСведений.КонтактнаяИнформация
	//|ГДЕ 
	// |	Вид = &ВидыАдресовФизический И Объект В(ВЫБРАТЬ Грузоотправитель ИЗ ТаблицаДоставки)
	//|");
	
	Запрос.УстановитьПараметр("Ссылка", 					СсылкаЗаказ);
	Запрос.УстановитьПараметр("ВидыАдресовФизический", 		Справочники.ВидыКонтактнойИнформации.НайтиПоКоду("000000015"));	
	Пакет = Запрос.ВыполнитьПакет();
	
	Возврат Новый Структура("Шапка, Грузоотправитель, Адрес, Товары",
								КонвертацияТипов.ПолучитьСтруктуруИзСТрокиТаблицыЗначений(Пакет[1].Выгрузить()),
								КонвертацияТипов.ПолучитьСтруктуруИзСТрокиТаблицыЗначений(Пакет[2].Выгрузить()),
								Пакет[2].Выгрузить(),
								Пакет[3].Выгрузить());
КонецФункции
Функция ПолучитьДанныеДляНемецкогоЗаказаВЧеке(СсылкаЧек) Экспорт
	
	Запрос = Новый Запрос("
	
	// Переменные для вычисления куда доставлять
	
	|ВЫБРАТЬ 	Партнер Грузоотправитель 
	|ПОМЕСТИТЬ 	ТаблицаДоставки 
	|ИЗ Документ.ЧекККМ ГДЕ Ссылка = &Ссылка;
	
	// Шапка
	
	|ВЫБРАТЬ 
	|	Номер, Дата, 
	|	"""" КонтактноеЛицо, """" НомерЗаказаКлиента, Дата ДатаЗаказаКлиента, Дата ДатаАктуальности, Дата ДатаПоставки,
	|	Партнер,
	|	Партнер.НомерКлиента 		НомерКлиента,
	|	Партнер.ИНН 				ИНН,
	|	"""" Пол,
	|	"""" НомерЗапросаКлиента,
	|	"""" ДатаЗапросаКлиента,
	|	"""" ДатаОкончания,
	|	"""" ВариантДоставки,
	|	"""" ВариантОплаты,
	|	Ответственный,
	|	0 СуммаДоставки,
	|	0 СуммаУпаковки,
	|	"""" СрокПоставки,
	|	"""" СпособДоставки
	|ИЗ
	|	Документ.ЧекККМ
	|ГДЕ
	|	Ссылка = &Ссылка;
	
	// Адрес доставки
	
	|ВЫБРАТЬ 
	|	Объект,
	|	Вид,
	|	Поле,
	|	Значение
	|ИЗ 	РегистрСведений.КонтактнаяИнформация
	|ГДЕ	Объект В(ВЫБРАТЬ Грузоотправитель ИЗ ТаблицаДоставки) И Вид = &ВидыАдресовФизический;

	// Таблица
	                                                                                                                                                                                                                        //СуммаРучнойСкидки + СуммаАвтоматическойСкидки //так было
	|ВЫБРАТЬ	НомерСтроки, Номенклатура, Цена, Номенклатура.Артикул Артикул, Количество, Сумма, " + Заказы.ПолучитьСуммуНДСВЗапросе(,"","Ссылка") + " СуммаНДС, ПроцентРучнойСкидки + ПроцентАвтоматическойСкидки Скидка, ВЫРАЗИТЬ((Цена*Количество)/100*(ПроцентРучнойСкидки + ПроцентАвтоматическойСкидки) КАК ЧИСЛО(10, 2)) СуммаСкидки, Цена * Количество СуммаБезСкидки
	|ИЗ 		Документ.ЧекККМ.Товары ГДЕ Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", 					СсылкаЧек);
	Запрос.УстановитьПараметр("ВидыАдресовФизический", 		Справочники.ВидыКонтактнойИнформации.НайтиПоКоду("000000015"));	
	Пакет = Запрос.ВыполнитьПакет();
	
	Возврат Новый Структура("Шапка, Грузоотправитель, Адрес, Товары",
								КонвертацияТипов.ПолучитьСтруктуруИзСТрокиТаблицыЗначений(Пакет[1].Выгрузить()),
								КонвертацияТипов.ПолучитьСтруктуруИзСТрокиТаблицыЗначений(Пакет[2].Выгрузить()),
								Пакет[2].Выгрузить(),
								Пакет[3].Выгрузить());
КонецФункции


Процедура Печатать_СчетЗаказНаНемецком(ТабДок, ДанныеДляПечати, СвоиОбласти, Префикс = "") Экспорт
	
	СтруктураШапки 				= ДанныеДляПечати.Шапка;
	СтруктураГрузоотправителя 	= ДанныеДляПечати.Грузоотправитель;
	Таблица						= ДанныеДляПечати.Товары;
	
	АдресДетальный				= ДанныеДляПечати.Адрес;
	
	СтруктураАдреса = Новый Структура;
	Для Каждого СтрТаб  Из АдресДетальный Цикл СтруктураАдреса.Вставить(СтрТаб.Поле, Стртаб.Значение) КонецЦикла;
	
	// Подготовим вычисляемые поля
	СтруктураШапки.Вставить("ОбращениеККлиенту", "Sehr " +  ?(Не ЗначениеЗаполнено(СтруктураШапки.Пол) Или СтруктураШапки.Пол.Пустая(), "Frau/Herr", ?(СтруктураШапки.Пол = Перечисления.ПолФизическихЛиц.Женский, "geehrte Frau", "geehrter Herr")) + " " + СтруктураШапки.КонтактноеЛицо);
	
	СтруктураШапки.Вставить("Почта", 				ПараметрыСеанса.ТекущийПользователь.Почта);	
	СтруктураШапки.Вставить("Компания", 			СтруктураШапки.Партнер);
	СтруктураШапки.Вставить("УлицаДом", 			СокрЛП(?(СтруктураАдреса.Свойство("Улица"), СтруктураАдреса.Улица, "") + " " + ?(СтруктураАдреса.Свойство("Дом"), СтруктураАдреса.Дом, "")));
	СтруктураШапки.Вставить("ИндексГород", 			СокрЛП(?(СтруктураАдреса.Свойство("Индекс"), СтруктураАдреса.Индекс,"") + " " + ?(СтруктураАдреса.Свойство("Город"), СтруктураАдреса.Город, "")));
	///ТелОрганизаци = ФормированиеПечатныхФорм.ПолучитьТелефонИзКонтактнойИнформации(организация);
	СтруктураШапки.Вставить("ТелефонОрг", "+ 45 (0) 451 80 70 60 40");
	//СтруктураШапки.Вставить("АдресДоставки", СтруктураАдреса);
	МассивСкидок = Таблица.ВыгрузитьКолонку("Скидка");
	СтруктураПодвала = Новый Структура("Сумма, СуммаНДС, СуммаУпаковки, СуммаДоставки, Итого_, СуммаОбщ, СуммаСкидки, ПроцентСкидки, СуммаИтого, Итого",                                                                                                                                     //Таблица.Итог("СуммаСкидки")
						Таблица.Итог("Сумма") , Таблица.Итог("СуммаНДС"), СтруктураШапки.СуммаУпаковки, СтруктураШапки.СуммаДоставки, Таблица.Итог("Сумма") + СтруктураШапки.СуммаУпаковки + СтруктураШапки.СуммаДоставки + Таблица.Итог("СуммаНДС"),Таблица.Итог("СуммаБезСкидки"), Таблица.Итог("СуммаБезСкидки")/100*МассивСкидок[0], МассивСкидок[0], Таблица.Итог("СуммаБезСкидки") - (Таблица.Итог("СуммаБезСкидки")/100*МассивСкидок[0]), (Таблица.Итог("СуммаБезСкидки") - (Таблица.Итог("СуммаБезСкидки")/100*МассивСкидок[0]))+Таблица.Итог("СуммаНДС"));
						
	КонвертацияТипов.ВыполнитьВыражениеВКаждойСтрокеТаблицы(Таблица, "Строка.НомерСтроки = Инд + 1");
						
	// Выведем результат в табличный документ
	
	//ЗаполнитьТабличныйДокументНаНемецком(ТабДок, СтруктураШапки, СтруктураПодвала, Таблица, СвоиОбласти, Префикс);
	ЗаполнитьТабличныйДокументНаНемецком_Нов(ТабДок, СтруктураШапки, СтруктураПодвала, Таблица, СвоиОбласти,Префикс);
КонецПроцедуры

Функция ПолучитьДанныеДляНемецкойНакладнойИзРеализации(СсылкаРеализация) Экспорт
	
	Запрос = Новый Запрос("
	
	// Переменные для вычисления куда доставлять
	
	|ВЫБРАТЬ 	Грузоотправитель 
	|ПОМЕСТИТЬ 	ТаблицаДоставки 
	|ИЗ(
	|		ВЫБРАТЬ Грузоотправитель ИЗ Документ.РеализацияТоваров ГДЕ Ссылка = &Ссылка И Грузоотправитель <> Неопределено И Грузоотправитель.Код <> """"
	|		ОБЪЕДИНИТЬ
	|		ВЫБРАТЬ Партнер ИЗ Документ.РеализацияТоваров ГДЕ Ссылка = &Ссылка) Запрос;
	
	// Шапка
	
	|ВЫБРАТЬ 
	|	Номер, Дата, 
	|	Заказ.НомерЗаказаКлиента, Заказ.ДатаЗаказаКлиента ДатаЗаказаКлиента, Заказ.ДатаПоставки ДатаПоставки, Заказ.СрокПоставки КАК СрокПоставки,
	|	Партнер,
	|	Партнер.НомерКлиента 		НомерКлиента,
	|	Партнер.ИНН 				ИНН,
	|	Заказ.КонтактноеЛицо		КонтактноеЛицо,
	|	Заказ.КонтактноеЛицо.ФизЛицо.Пол 	Пол,
	|	Заказ.НомерЗапросаКлиента	НомерЗапросаКлиента,
	|	Заказ.ДатаЗапросаКлиента	ДатаЗапросаКлиента,
	|	Заказ.ВариантДоставки		ВариантДоставки,
	|	Заказ.ВариантОплаты			ВариантОплаты,
	|	Ответственный,
	|	Заказ.СуммаДоставки			СуммаДоставки,
	|	Заказ.СуммаУпаковки			СуммаУпаковки,
	|	Заказ.СпособДоставки		СпособДоставки
	|ИЗ
	|	Документ.РеализацияТоваров
	|ГДЕ
	|	Ссылка = &Ссылка;
	
	// Адрес доставки
	
	//|ВЫБРАТЬ ПЕРВЫЕ 1 Представление Адрес
	//|ИЗ 	РегистрСведений.ПредставлениеКонтактнойИнформации
	//|ГДЕ	Объект В(ВЫБРАТЬ Грузоотправитель ИЗ ТаблицаДоставки) И Вид В ИЕРАРХИИ(&ВидыАдресовФизический) И НЕ Объект.ПометкаУдаления;
	////
	|ВЫБРАТЬ 
	|	Объект,
	|	Вид,
	|	Поле,
	|	Значение
	|ИЗ 	РегистрСведений.КонтактнаяИнформация
	|ГДЕ	Объект В(ВЫБРАТЬ Грузоотправитель ИЗ ТаблицаДоставки) И Вид = &ВидыАдресовФизический; 

	// Таблица
	
	|ВЫБРАТЬ	0 НомерСтроки, Номенклатура, Цена, Номенклатура.Артикул Артикул, Количество, Сумма, " + Заказы.ПолучитьСуммуНДСВЗапросе(,"","Ссылка") + " СуммаНДС, ПроцентРучнойСкидки + ПроцентАвтоматическойСкидки Скидка,
	|			Номенклатура.Вес * ВЫБОР КОГДА Упаковка = &ПустаяУпаковка ТОГДА 1 ИНАЧЕ Упаковка.Коэффициент КОНЕЦ  				ВесШтуки,
	|			Номенклатура.Вес * Количество * ВЫБОР КОГДА Упаковка = &ПустаяУпаковка ТОГДА 1 ИНАЧЕ Упаковка.Коэффициент КОНЕЦ		ВесСумма,
	|			Цена * Количество СуммаБезСкидки,
	//|			СуммаРучнойСкидки + СуммаАвтоматическойСкидки СуммаСкидки
	|			ВЫРАЗИТЬ((Цена * Количество)/100*(ПроцентРучнойСкидки + ПроцентАвтоматическойСкидки) КАК ЧИСЛО(10, 2)) КАК СуммаСкидки
	|ИЗ 		Документ.РеализацияТоваров.Товары ГДЕ Ссылка = &Ссылка И Ссылка.Проведен
	|");
	
	Запрос.УстановитьПараметр("Ссылка", 				СсылкаРеализация);
	Запрос.УстановитьПараметр("ПустаяУпаковка", 		Справочники.УпаковкиНоменклатуры.ПустаяСсылка());
	Запрос.УстановитьПараметр("ВидыАдресовФизический", 	Справочники.ВидыКонтактнойИнформации.НайтиПоКоду("000000015"));
	
	Пакет = Запрос.ВыполнитьПакет();
	Возврат Новый Структура("Шапка, Грузоотправитель, Адрес, Товары",
								КонвертацияТипов.ПолучитьСтруктуруИзСТрокиТаблицыЗначений(Пакет[1].Выгрузить()),
								КонвертацияТипов.ПолучитьСтруктуруИзСТрокиТаблицыЗначений(Пакет[2].Выгрузить()),
								Пакет[2].Выгрузить(),
								Пакет[3].Выгрузить());
КонецФункции
Функция ПолучитьДанныеДляНемецкойНакладнойИзЧека(СсылкаЧек) Экспорт
	
	Запрос = Новый Запрос("
	
	// Переменные для вычисления куда доставлять
	
	|ВЫБРАТЬ 	Партнер Грузоотправитель 
	|ПОМЕСТИТЬ 	ТаблицаДоставки 
	|ИЗ Документ.ЧекККМ ГДЕ Ссылка = &Ссылка;
	
	// Шапка
	
	|ВЫБРАТЬ 
	|	Номер, Дата, 
	|	"""" НомерЗаказаКлиента, """" ДатаЗаказаКлиента, Дата ДатаПоставки, """" КАК СрокПоставки,
	|	Партнер,
	|	Партнер.НомерКлиента 		НомерКлиента,
	|	Партнер.ИНН 				ИНН,
	|	""""		КонтактноеЛицо,
	|	"""" 	Пол,
	|	""""	НомерЗапросаКлиента,
	|	"""" ДатаЗапросаКлиента,
	|	""""				ВариантДоставки,
	|	""""				ВариантОплаты,
	|	Ответственный,
	|	0					СуммаДоставки,
	|	0					СуммаУпаковки,
	|	""""				СпособДоставки
	|ИЗ
	|	Документ.ЧекККМ
	|ГДЕ
	|	Ссылка = &Ссылка;
	
	// Адрес доставки
	
	//|ВЫБРАТЬ ПЕРВЫЕ 1 Представление Адрес
	//|ИЗ 	РегистрСведений.ПредставлениеКонтактнойИнформации
	//|ГДЕ	Объект В(ВЫБРАТЬ Грузоотправитель ИЗ ТаблицаДоставки) И Вид В ИЕРАРХИИ(&ВидыАдресовФизический) И НЕ Объект.ПометкаУдаления;
	////
	|ВЫБРАТЬ 
	|	Объект,
	|	Вид,
	|	Поле,
	|	Значение
	|ИЗ 	РегистрСведений.КонтактнаяИнформация
	|ГДЕ	Объект В(ВЫБРАТЬ Грузоотправитель ИЗ ТаблицаДоставки) И Вид = &ВидыАдресовФизический; 

	// Таблица
	
	|ВЫБРАТЬ	0 НомерСтроки, Номенклатура, Цена, Номенклатура.Артикул Артикул, Количество, Сумма, " + Заказы.ПолучитьСуммуНДСВЗапросе(,"","Ссылка") + " СуммаНДС, ПроцентРучнойСкидки + ПроцентАвтоматическойСкидки Скидка,
	|			Номенклатура.Вес * ВЫБОР КОГДА Упаковка = &ПустаяУпаковка ТОГДА 1 ИНАЧЕ Упаковка.Коэффициент КОНЕЦ  				ВесШтуки,
	|			Номенклатура.Вес * Количество * ВЫБОР КОГДА Упаковка = &ПустаяУпаковка ТОГДА 1 ИНАЧЕ Упаковка.Коэффициент КОНЕЦ		ВесСумма,
	|			Цена * Количество СуммаБезСкидки,
	//|			СуммаАвтоматическойСкидки + СуммаРучнойСкидки СуммаСкидки
	|			ВЫРАЗИТЬ((Цена * Количество)/100*(ПроцентРучнойСкидки + ПроцентАвтоматическойСкидки) КАК ЧИСЛО(10, 2)) КАК СуммаСкидки
	|ИЗ 		Документ.ЧекККМ.Товары ГДЕ Ссылка = &Ссылка И Ссылка.Проведен
	|");
	
	Запрос.УстановитьПараметр("Ссылка", 				СсылкаЧек);
	Запрос.УстановитьПараметр("ПустаяУпаковка", 		Справочники.УпаковкиНоменклатуры.ПустаяСсылка());
	Запрос.УстановитьПараметр("ВидыАдресовФизический", 	Справочники.ВидыКонтактнойИнформации.НайтиПоКоду("000000015"));
	
	Пакет = Запрос.ВыполнитьПакет();
	Возврат Новый Структура("Шапка, Грузоотправитель, Адрес, Товары",
								КонвертацияТипов.ПолучитьСтруктуруИзСТрокиТаблицыЗначений(Пакет[1].Выгрузить()),
								КонвертацияТипов.ПолучитьСтруктуруИзСТрокиТаблицыЗначений(Пакет[2].Выгрузить()),
								Пакет[2].Выгрузить(),
								Пакет[3].Выгрузить());
КонецФункции
Процедура Печатать_НакладнойНаНемецком(ТабДок, ДанныеДляПечати, СвоиОбласти, Префикс = "") Экспорт
	
	СтруктураШапки 				= ДанныеДляПечати.Шапка;
	СтруктураГрузоотправителя 	= ДанныеДляПечати.Грузоотправитель;
	АдресДетальный 				= ДанныеДляПечати.Адрес;
	Таблица 					= ДанныеДляПечати.Товары;
	МассивСкидок = Таблица.ВыгрузитьКолонку("Скидка");
	СтруктураАдреса = Новый Структура;
	Для Каждого СтрТаб  Из АдресДетальный Цикл СтруктураАдреса.Вставить(СтрТаб.Поле, Стртаб.Значение) КонецЦикла;
	
	СтруктураШапки.Вставить("ОбращениеККлиенту", "Sehr " +  ?(Не ЗначениеЗаполнено(СтруктураШапки.Пол) Или СтруктураШапки.Пол.Пустая(), "Frau/Herr", ?(СтруктураШапки.Пол = Перечисления.ПолФизическихЛиц.Женский, "geehrte Frau", "geehrter Herr")) + " " + СтруктураШапки.КонтактноеЛицо);
	СтруктураШапки.Вставить("Компания", СтруктураШапки.Партнер);
	СтруктураШапки.Вставить("УлицаДом", 			СокрЛП(?(СтруктураАдреса.Свойство("Улица"), СтруктураАдреса.Улица, "") + " " + ?(СтруктураАдреса.Свойство("Дом"), СтруктураАдреса.Дом, "")));
	СтруктураШапки.Вставить("ИндексГород", 			СокрЛП(?(СтруктураАдреса.Свойство("Индекс"), СтруктураАдреса.Индекс,"") + " " + ?(СтруктураАдреса.Свойство("Город"), СтруктураАдреса.Город, "")));
	/////////
	СтруктураШапки.Вставить("ТелефонОрг", "(0) 451 80 70 60 40");
	// Подготовим вычисляемые поля
	СтруктураШапки.Вставить("Почта", ПараметрыСеанса.ТекущийПользователь.Почта);
	СтруктураШапки.Вставить("ОбращениеККлиенту", "Sehr " +  ?(Не ЗначениеЗаполнено(СтруктураШапки.Пол) Или СтруктураШапки.Пол.Пустая(), "geehrte/geehrter Frau/Herr", ?(СтруктураШапки.Пол = Перечисления.ПолФизическихЛиц.Женский, "geehrte Frau", "geehrter Herr")) + " " + СтруктураШапки.КонтактноеЛицо);
	//СтруктураШапки.Вставить("АдресДоставки", СтруктураГрузоотправителя.Адрес);
	СтруктураШапки.Вставить("НомерТранспортнойНакладной", ПолучитьНомерПоНемецкимПравилам(СтруктураШапки.Номер, СтруктураШапки.Дата, "L"));
	СтруктураПодвала = Новый Структура("Вес, Количество, Сумма, СуммаНДС, СуммаУпаковки, СуммаДоставки, Итого_, СуммаОбщ, СуммаСкидки, СуммаИтого, ПроцентСкидки, Итого",                            //                                                                                                                                                //Таблица.Итог("СуммаСкидки")
						Таблица.Итог("ВесСумма") , Таблица.Итог("Количество"), Таблица.Итог("Сумма") , Таблица.Итог("СуммаНДС"), СтруктураШапки.СуммаУпаковки, СтруктураШапки.СуммаДоставки, Таблица.Итог("Сумма") + СтруктураШапки.СуммаУпаковки + СтруктураШапки.СуммаДоставки + Таблица.Итог("СуммаНДС"), Таблица.Итог("СуммаБезСкидки"), Таблица.Итог("СуммаБезСкидки")/100*МассивСкидок[0], Таблица.Итог("СуммаБезСкидки") - (Таблица.Итог("СуммаБезСкидки")/100*МассивСкидок[0]), МассивСкидок[0], (Таблица.Итог("СуммаБезСкидки") - (Таблица.Итог("СуммаБезСкидки")/100*МассивСкидок[0]))+Таблица.Итог("СуммаНДС"));
						
	КонвертацияТипов.ВыполнитьВыражениеВКаждойСтрокеТаблицы(Таблица, "Строка.НомерСтроки = Инд + 1");
						
	// Выведем результат в табличный документ
	
	//ЗаполнитьТабличныйДокументНаНемецком(ТабДок, СтруктураШапки, СтруктураПодвала, Таблица, СвоиОбласти, Префикс);
	ЗаполнитьТабличныйДокументНаНемецком_Нов(ТабДок, СтруктураШапки, СтруктураПодвала, Таблица, СвоиОбласти, Префикс);

	
КонецПроцедуры

#КонецОбласти

#Область Спецификация

Процедура ЗаполнитьТабличныйДокумент_Спецификация(ТабличныйДокумент, ДанныеДляПечати, ПараметрПечати) Экспорт
	
	// Иницилизация переменных
	
	СтруктураШапки  = ДанныеДляПечати.Шапка;
	Таблица 		= ДанныеДляПечати.Товары;
	ЕстьСкидка 		= Булево(Таблица.Итог("Скидка"));    //
    Отбор = Новый Структура("Организация, ОтветственноеЛицо",СтруктураШапки.Организация, Перечисления.ОтветственныеЛицаОрганизации.Руководитель);	
	РуководительОрганизации = РегистрыСведений.ОтветственныеЛицаОрганизации.ПолучитьПоследнее(,Отбор);
	СтруктураШапки.Вставить("РуководительОрганизации",ФормированиеПечатныхФорм.ФамилияИнициалыФизЛица(РуководительОрганизации.ФизическоеЛицо));

	
	КонвертацияТипов.ВыполнитьВыражениеВКаждойСтрокеТаблицы(Таблица, "
	|Строка.НомерСтроки = Инд + 1;
	|Строка.Всего 		= Строка.Сумма" + ?(СтруктураШапки.СуммаВключаетНДС,""," + Строка.СуммаНДС") + ";
	|Строка.Цена        = (Строка.Сумма" + ?(СтруктураШапки.СуммаВключаетНДС,"- Строка.СуммаНДС","") + ")/Строка.Количество ;
	|Строка.СуммаБезНДС = Строка.Сумма" + ?(СтруктураШапки.СуммаВключаетНДС," - Строка.СуммаНДС", ""));
	
	СтруктураПодвала         = Новый Структура("ИтогоСуммаНДС, ИтогоСуммаСНДС, ИтогоБезНДС",
						 			 Таблица.Итог("СуммаНДС"), Таблица.Итог("Всего"), Таблица.Итог("СуммаБезНДС"));
									 
	СтруктураУсловияПоставки = Новый Структура("ТекстИтогоСНДС",
						 			"Всего к оплате:  "  + НРег(РаботаСКурсамиВалют.СформироватьСуммуПрописью(Таблица.Итог("Всего"), СтруктураШапки.Валюта, Истина))+", в т.ч. НДС "+НРег(РаботаСКурсамиВалют.СформироватьСуммуПрописью(Таблица.Итог("СуммаНДС"), СтруктураШапки.Валюта, Истина)));

		// Подготовим переменные
	
	ТабличныйДокумент.ОриентацияСтраницы = ПараметрПечати.ОриентацияСтраницы;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	Макет = Документы.ЗаказПокупателя.ПолучитьМакет(ПараметрПечати.ИмяМакета);
	
	ДобСуффикс = ?(ЕстьСкидка, "Скидка", "");
	
	ОбластьУсловия      = Макет.ПолучитьОбласть("УсловияПоставки");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы" 	);
	ОбластьСтрока 		= Макет.ПолучитьОбласть("Строка" 		);
	ОбластьПустаяСтрока	= Макет.ПолучитьОбласть("ПустаяСтрока");
	ОбластьШапка 		= Макет.ПолучитьОбласть("Шапка");
	ОбластьПодвал		= Макет.ПолучитьОбласть("ПодвалТаблицы" );
	ОбластьПодпись		= Макет.ПолучитьОбласть("Подпись");
	
	ОбластьШапка.Параметры.Заполнить(СтруктураШапки); 
	ОбластьПодвал.Параметры.Заполнить(СтруктураПодвала);
	
	КолСтрок = Таблица.Количество();
	// Выведем колонтитул
	
	ДатаСтрокой = Формат(СтруктураШапки.Дата, "ДЛФ=DD");
	ОбластьПодпись.Параметры.Заполнить(СтруктураШапки);
	
	// Выведем шапку
	
	ТабличныйДокумент.Вывести(ОбластьШапка);
	ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
	
	// Выведем строки
	
	текСтраница = 1; ПозНаЛисте = 0;
	Для Каждого Строка Из Таблица Цикл 
		ПозНаЛисте = ПозНаЛисте + 1;
		
		ОбластьСтрока.Параметры.Заполнить(Строка);
				
		ТабличныйДокумент.Вывести(ОбластьСтрока); 
	КонецЦикла;
			
	// Выведем подвал  
	ТабличныйДокумент.Вывести(ОбластьПодвал);
	ОбластьУсловия.Параметры.Заполнить(СтруктураУсловияПоставки);
	ТабличныйДокумент.Вывести(ОбластьУсловия);
	ТабличныйДокумент.Вывести(ОбластьПодпись);
	
КонецПроцедуры
#КонецОбласти


#Область Пакетная_печать

Функция ПолучитьПараметрыПакетаПоУмолчанию(ВыбПакет)
	
КонецФункции

Функция ПолучитьМестоПакетнойПечатиПоСтр(стрМесто) Экспорт
	
	Возврат Перечисления.МестаВозникновенияУсловий[стрМесто];
	
КонецФункции

Функция ПолучитьПараметрыПакетнойПечатиПользователя() Экспорт
	
	СпособПечати = ОбщиеФункции.НастройкаПользователя("СпособПечати");
	Если СпособПечати = Неопределено Тогда СпособПечати = "НеПечатать" КонецЕсли;
		
	Возврат Новый Структура("СпособПечати",  СпособПечати);
	
КонецФункции

Функция ПолучитьПредставленияСпособовПечати() Экспорт
	
	Соотв = Новый Соответствие;
	Соотв.Вставить("Не использовать пакетную печать", 			"НеПечатать");
	Соотв.Вставить("Использовать способ указанный в пакете", 	"ПоУмолчанию");
	Соотв.Вставить("Выводить сразу на принтер", 				"НаПринтер");
	Соотв.Вставить("Открывать для предварительного просмотра", 	"ПредПросмотр");
	
	Возврат Соотв;
	
КонецФункции

Функция СохранитьНастройкиПакетнойПечати(Настройки) Экспорт
	
	Ошибка = Ложь;
	
	Для Каждого Элемент Из Настройки Цикл 
		//ПараметрыСеанса.ПараметрыПакетнойПечати[Элемент.Ключ] = Элемент.Значение;
		Если Не ОбщиеФункции.УстановитьНастройкуПользователя(Элемент.Значение, Элемент.Ключ) Тогда
			Ошибка = Истина;
			Прервать; КонецЕсли; КонецЦикла;
	
	Возврат Не Ошибка;
	
КонецФункции

Функция ПолучитьПодходящийПакет(Параметры) Экспорт
	
	// Меделнная процедура поиска пакета
	// зато динамическая
	// и выполнять ее нужно только в фоне из-за ее тормознутости
	
	// Возвращает первый пакет удовлетворяющий условиям
	
	СхемаКомпоновкиДанных = Справочники.ПакетыПечатныхДокументов.ПолучитьМакет("МакетНастроек");
	
	Запрос = Новый Запрос("ВЫБРАТЬ Ссылка Пакет, Ссылка.НастройкаКомпоновки НастройкаКомпоновки ИЗ Справочник.ПакетыПечатныхДокументов.Места ГДЕ Место = &Место И Не Ссылка.ПометкаУдаления");
	Запрос.УстановитьПараметр("Место", Параметры.Параметры.Место);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НастройкиСпр = Выборка.НастройкаКомпоновки.Получить();
		Если НастройкиСпр <> Неопределено Тогда
			
			КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
			КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
			
			// Зададим параметры
			Для Каждого Элемент Из Параметры.Параметры.ПараметрыДляЗапроса Цикл КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(Элемент.Ключ, Элемент.Значение); КонецЦикла;
			
			// Зададим отборы
			КонвертацияТипов.ЗаполнитьЭлементыОтбораКомпоновкиДанных(НастройкиСпр.Элементы, КомпоновщикНастроек.Настройки.Отбор.Элементы);
		
			КомпоновщикМакета 	= Новый КомпоновщикМакетаКомпоновкиДанных;
			МакетКомпоновки 	= КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки, , ,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
			
			ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
			ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
			
			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
			Табл = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
			
			Если Табл.Количество() Тогда Возврат Выборка.Пакет; КонецЕсли; КонецЕсли; КонецЦикла;
	
КонецФункции

Функция ПолучитьКопиюТабличногоДокумента(ТабДок)
	
	НовыйДок = Новый ТабличныйДокумент;
	ЗаполнитьЗначенияСвойств(НовыйДок, ТабДок);
	
	Для Ном = 1 По ТабДок.ВысотаТаблицы Цикл
		
		СтрокаТаблицы = Новый ТабличныйДокумент;
		СтрокаТаблицы.ВставитьОбласть(ТабДок.Область("R" + Формат(Ном, "ЧГ=")), СтрокаТаблицы.Область("R1"));
		
		НовыйДок.Вывести(СтрокаТаблицы); КонецЦикла;
	
	Возврат НовыйДок;
	
КонецФункции
Функция ВыполнитьАлгоритмПакетаИПолучитьТаблДокумент(Алгоритм, Заказ = Неопределено, Реализация = Неопределено)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Выполнить(Алгоритм);
	
	Возврат ТабличныйДокумент;
	
КонецФункции
Функция ПолучитьТабличныеДокументыДляПечати(Параметры) Экспорт
	
	// Возвращает массив печатных форм или пакет печати если в параметрах указано что на принтер выводить сразу
	// внутри массива структура - ПечатнаяФорма, ТабличныйДокумент
	
	//СразуПечатать 	= Параметры.СпособПечати = "НаПринтер";
	//ВозврОбъект 	= ?(СразуПечатать, Новый ПакетОтображаемыхДокументов, Новый Массив);
	Массив 			= Новый Массив;
	Запрос 			= Новый Запрос("ВЫБРАТЬ ПечатнаяФорма, ЧислоКопий, ПечатнаяФорма.Алгоритм Алгоритм ИЗ Справочник.ПакетыПечатныхДокументов.Состав ГДЕ Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", Параметры.Пакет);
	Выбокра = Запрос.Выполнить().Выбрать();
	Пока Выбокра.Следующий() Цикл
		
		ТабДок = ВыполнитьАлгоритмПакетаИПолучитьТаблДокумент(Выбокра.Алгоритм, Параметры.ДанныеДляПечати.Заказ, Параметры.ДанныеДляПечати.Реализация);
		Если ТипЗнч(ТабДок) <> Тип("ТабличныйДокумент") Тогда
			ВызватьИсключение "Алгоритм не вернул табличный документ " + Выбокра.ПечатнаяФорма; КонецЕсли;
		
		//Если СразуПечатать Тогда
		//	ВозврОбъект.
		//Иначе
		//	Массив.Добавить(Новый Структура("ПечатнаяФорма, ТабличныйДокумент", Выбокра.ПечатнаяФорма, ТабДок)); КонецЕсли;
		
		Массив.Добавить(Новый Структура("ПечатнаяФорма, ТабличныйДокумент, ЧислоКопий", Выбокра.ПечатнаяФорма, ТабДок, Выбокра.ЧислоКопий)); 
		
		//Если Выбокра.ЧислоКопий > 1 Тогда 
		//				
		//	ТабДок.ПовтроятьПриПечатиСтроки();
		//	
		//	//КопияДок = ПолучитьКопиюТабличногоДокумента(ТабДок);
		//	//Для Ном = 2 По Выбокра.ЧислоКопий Цикл ТабДок.ВывестиГоризонтальныйРазделительСтраниц(); ТабДок.Вывести(КопияДок); КонецЦикла;
		//	Массив.Добавить(Новый Структура("ПечатнаяФорма, ТабличныйДокумент", Выбокра.ПечатнаяФорма, ТабДок)); 
		//Иначе
		//	Массив.Добавить(Новый Структура("ПечатнаяФорма, ТабличныйДокумент", Выбокра.ПечатнаяФорма, ТабДок)); КонецЕсли; 
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции

#КонецОбласти

#Область СборочныйЛист
Функция ПолучитьСборочныйЛист(БизнесПроцесс,ВыводитьПомеченные = Ложь, Сортировка = "Ячейка", VIPКонтрагент = Ложь) Экспорт
	//+Андриянов 11.05.2017 - добавляем изменение статуса при печати сборочника
	//Если текущий статус в очереди на склад, то ставим состояние Собирается
	ТекущийСтатус = Заказы.ПолучитьСостояниеЗаказа(БизнесПроцесс.Заказ);
	Если ТекущийСтатус = Перечисления.СостоянияЗаказа.ВОчередиНаСклад
	 Или ТекущийСтатус = Перечисления.СостоянияЗаказа.ВОчередиНаСкладПовторно
	 Или ТекущийСтатус = Перечисления.СостоянияЗаказа.ВОчередиНаСборку Тогда
		Заказы.УстановитьСостояниеЗаказа(БизнесПроцесс.Заказ, Перечисления.СостоянияЗаказа.Собирается);
	КонецЕсли;
	//-Андриянов
	
	Склад = БизнесПроцесс.СборочныйЛист.Склад;
	
	ТабДокумент 	= Новый ТабличныйДокумент;
	Макет 			= ПолучитьОбщийМакет("СборочныйЛист");

	ОбластьШапка 			= Макет.ПолучитьОбласть("Шапка");
	ОбластьКомментарий		= Макет.ПолучитьОбласть("Комментарий");
	ОбластьЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ОбластьИтого 			= Макет.ПолучитьОбласть("Итого");
	ОбластьСтрока 			= Макет.ПолучитьОбласть("Строка");
	
	// Шапка
	
	Если ТипЗнч(БизнесПроцесс.Заказ) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
		
		ОбластьШапка.Параметры.ПредставлениеКонтрагента = БизнесПроцесс.Заказ.Заказчик;
		
	Иначе
		
		Представление = ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(БизнесПроцесс.Заказ.Контрагент, ТекущаяДата()), "ПолноеНаименование,ЮридическийАдрес",,Символы.ПС);
		Если ПустаяСтрока(Представление) Тогда
			Представление = ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(БизнесПроцесс.Заказ.Партнер, ТекущаяДата()), "ПолноеНаименование,ЮридическийАдрес",,Символы.ПС);
		КонецЕсли;
		ОбластьШапка.Параметры.ПредставлениеКонтрагента = Представление;
		
	КонецЕсли;
		
	ОбластьШапка.Параметры.Номер 			= БизнесПроцесс.Заказ.Номер;
	ОбластьШапка.Параметры.Дата 			= БизнесПроцесс.Заказ.Дата;
	ОбластьШапка.Параметры.СинонимДокумента = "Сборочный лист";
	ОбластьШапка.Параметры.Склад			= Склад;
	
	// Установим штрих код
	
	//мШтрихКоды = ШтрихКоды.ПолучитьШтрихКодыОбъекта(Заказ); Если мШтрихКоды.Количество() Тогда
	//	ШтрихКоды.УстановитьШтрихКодВМакете(ОбластьШапка, мШтрихКоды[мШтрихКоды.ВГраница()]);КонецЕсли;
	
	//Попытка
	//	ОбластьЗаголовокТаблицы.Параметры.ТипЦен 	= Строка(БизнесПроцесс.Заказ.ТипЦен);
	//	ОбластьЗаголовокТаблицы.Параметры.Цена 		= "Цена, " + Строка(БизнесПроцесс.Заказ.Валюта);
	//Исключение
	//	ОбластьЗаголовокТаблицы.Параметры.ТипЦен 	= "";
	//	ОбластьЗаголовокТаблицы.Параметры.Цена 		= "Цена";
	//КонецПопытки;
	
	ТабДокумент.Вывести(ОбластьШапка);
	
	
	// Контролер
	
	Контролер = БизнесПроцесс.СборочныйЛист.Контролер;
	Если VIPКонтрагент Тогда
		ОбластьКонтролер 							= Макет.ПолучитьОбласть("Контролер");
		Если ЗначениеЗаполнено(Контролер) Тогда
			ОбластьКонтролер.Параметры.Контролер 		= Контролер;
		Иначе 
			ОбластьКонтролер.Параметры.Контролер 		= "";
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьКонтролер);
	КонецЕсли;	
	
	
	// Сформируем комментарий
	
	Комменты = БизнесПроцессы.СборкаЗаказа.ПолучитьМассивКомментариев(БизнесПроцесс);
	Для Каждого Коммент Из Комменты Цикл
		ОбластьКомментарий.Параметры.Заполнить(Коммент);
		Если Коммент.Исполнитель.Пустая() Тогда
			ОбластьКомментарий.Параметры.Исполнитель = Коммент.Заголовок; //"Последний комментарий:";
		Иначе
			ОбластьКомментарий.Параметры.Исполнитель = Строка(Коммент.Исполнитель) + " (" + Формат(Коммент.ДатаВыполнения,"ДЛФ=DDT") + "):";
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьКомментарий);
	КонецЦикла;
	
	
	//Определим наличие товара на других складах и выведем, если такой есть
	ТабТов = Заказы.ПолучитьСостояниеТоваров(БизнесПроцесс);
	Если ТабТов.Количество() Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ ТабТов.Размещение Размещение,ТабТов.Состояние Состояние, ТабТов.Номенклатура Номенклатура Поместить втТабТов Из &ТабТов ТабТов; ВЫБРАТЬ ТабТов.Размещение Склад,ТабТов.Состояние Состояние,Количество(Различные ТабТов.Номенклатура) Количество Из втТабТов ТабТов ГДЕ НЕ ТабТов.Размещение В (&ТекСклад) Сгруппировать По ТабТов.Размещение,ТабТов.Состояние Упорядочить По ТабТов.Размещение");
		Запрос.УстановитьПараметр("ТабТов",ТабТов);
		мСклад = Новый Массив; мСклад.Добавить(Склад); мСклад.Добавить(Справочники.Склады.ПустаяСсылка());
		Запрос.УстановитьПараметр("ТекСклад",мСклад);
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Количество() Тогда
			ОбластьДругойСкладШапка  = Макет.ПолучитьОбласть("ДругойСкладШапка");
			ОбластьДругойСкладСтрока = Макет.ПолучитьОбласть("ДругойСкладСтрока");
			ТабДокумент.Вывести(ОбластьДругойСкладШапка);
			Пока Результат.Следующий() Цикл
				ОбластьДругойСкладСтрока.Параметры.Заполнить(Результат);
				ТабДокумент.Вывести(ОбластьДругойСкладСтрока);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	
	ТабДокумент.Вывести(ОбластьЗаголовокТаблицы);
	
	
	// Отсортируем чтобы бегали быстрее	
	ТаблВывода = БизнесПроцесс.СборочныйЛист.Товары.Выгрузить();
	//Если Склад.Ячеестый Тогда
	//	ТаблВывода.Сортировать(Сортировка);
	//КонецЕсли;

	/////////CUSTOM SHOP СОРТИРОВКА ДЛЯ АНДРЕИЧА////////////////////////////////////////////////                                                                                            
	                                                  
	//нет размещения - 1                                                                        
	//магазин софийский - 2                                                                     
	//магазин Пискаревский - 3                                                                  
	//сервис - 4                                                                                
	//склад 2 - 5                                                                               
	//Новый склад - 6                                                                           
	//все остальное - 7
	//ТаблВывода.Колонки.Добавить("Сортировка");
	//ТаблВывода.Колонки.Добавить("СортировкаПоУмолчанию", Новый ОписаниеТипов("Строка"));

	//СортировкаПоСкладам = Новый СписокЗначений;
	/////магазины
	//СортировкаПоСкладам.Добавить(Справочники.Склады.НайтиПоКоду("СОФ"), "2");                   
	//СортировкаПоСкладам.Добавить(Справочники.Склады.НайтиПоКоду("ПСК"), "3");
	//СортировкаПоСкладам.Добавить(Справочники.Склады.НайтиПоКоду("ММ1"), "4");
	/////сервис
	//СортировкаПоСкладам.Добавить(Справочники.Склады.НайтиПоКоду("СРВ"), "5");                   
	/////склад 2
	//СортировкаПоСкладам.Добавить(Справочники.Склады.НайтиПоКоду("СК2"), "1");                   
	/////
	//СортировкаПоСкладам.Добавить(Справочники.Склады.НайтиПоКоду("СКЛ"), "7");                   
	                                                                                            
	//Для Каждого Строка Из ТаблВывода Цикл                                                                                    
	//	Если ЗначениеЗаполнено(Строка.Ячейка) Тогда                                                              
	//		тмп = СортировкаПоСкладам.НайтиПоЗначению(Строка.СкладЯчейка);                                             
	//	    Строка.Сортировка = ?(тмп = Неопределено, 8, Число(тмп.Представление));             
	//	Иначе                                                                                   
	//		Строка.Сортировка = 9;
	//		Строка.СортировкаПоУмолчанию = Строка.Ячейка.Сортировка;
	//	КонецЕсли;		                                                                        
	//КонецЦикла;
	//ТаблВывода.Сортировать("Сортировка ВОЗР, СортировкаПоУмолчанию, " + Сортировка);
	//////////////////////////////////////////////////////////////////////////////////////////////
	
	Если ВыводитьПомеченные Тогда
		СтрокиВывода = ТаблВывода.СкопироватьКолонки();
		Для Каждого Строка ИЗ ТаблВывода Цикл Если Строка.Количество Тогда ЗаполнитьЗначенияСвойств(СтрокиВывода.Добавить(), Строка) КонецЕсли; КонецЦикла;
	Иначе
		СтрокиВывода = ТаблВывода;
	КонецЕсли;
	// Выводим в таблицу
	
	Ном = 0;
	ПустаяУпаковка = Справочники.УпаковкиНоменклатуры.ПустаяСсылка();
	Для каждого Строка Из СтрокиВывода Цикл Ном = Ном + 1;
		
		СтрокаСЯчейками = "";
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 6 ТоварыВЯчейкахОстатки.Ячейка, ТоварыВЯчейкахОстатки.КоличествоОстаток - ЕСТЬNULL(РезервыВЯчейкахОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток ИЗ РегистрНакопления.ТоварыВЯчейках.Остатки(, Номенклатура = &Номенклатура) КАК ТоварыВЯчейкахОстатки ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РезервыВЯчейках.Остатки(, Номенклатура = &Номенклатура) КАК РезервыВЯчейкахОстатки ПО ТоварыВЯчейкахОстатки.Номенклатура = РезервыВЯчейкахОстатки.Номенклатура И ТоварыВЯчейкахОстатки.Ячейка = РезервыВЯчейкахОстатки.Ячейка
		                      |ГДЕ НЕ ТоварыВЯчейкахОстатки.Ячейка.Ссылка ЕСТЬ NULL И ТоварыВЯчейкахОстатки.Ячейка.Владелец = &Склад И ТоварыВЯчейкахОстатки.КоличествоОстаток - ЕСТЬNULL(РезервыВЯчейкахОстатки.КоличествоОстаток, 0) > 0 УПОРЯДОЧИТЬ ПО КоличествоОстаток");
		Запрос.УстановитьПараметр("Номенклатура", Строка.Номенклатура);
		Запрос.УстановитьПараметр("Склад", Склад);
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Количество() Тогда
			Пока Результат.Следующий() Цикл
			СтрокаСЯчейками = СтрокаСЯчейками + Строка(Результат.Ячейка.Наименование) + " - " + Строка(Результат.КоличествоОстаток) + Символы.ПС;
			КонецЦикла;	
		КонецЕсли;

		ОбластьСтрока.Параметры.Заполнить(Строка);
		ОбластьСтрока.Параметры.Номер 			= Ном;
		ОбластьСтрока.Параметры.Артикул 		= Строка.Номенклатура.Артикул;
		ОбластьСтрока.Параметры.ЯчейкиСОстатком = СтрокаСЯчейками;
		
		ОбластьСтрока.Параметры.ЕдиницаИзмерения = ?(Строка.Упаковка  = ПустаяУпаковка, Строка.Номенклатура.ЕдиницаИзмерения, Строка.Упаковка);
		ОбластьСтрока.Параметры.Ячейка = Строка.Ячейка;

		Если Строка.Ячейка.Пустая() Тогда 
			ОбластьСтрока.Параметры.Ячейка = Склад; КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьСтрока); КонецЦикла; 
	
	ОбластьИтого.Параметры.ДатаФормирования = Формат(ТекущаяДата(),"ДЛФ=DDT");
	ТабДокумент.Вывести(ОбластьИтого);
	
	// Настрим просмотры
	
	ТабДокумент.ТолькоПросмотр 	= Истина;
	ТабДокумент.ОтображатьСетку = Ложь;
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	Возврат ТабДокумент;
	
КонецФункции
#КонецОбласти

#Область ИсторияПечати
Процедура ЗаписатьИсториюПечати(Заказ,ТипПечатаемогоДокумента,Документ=Неопределено) Экспорт
	Рег = РегистрыСведений.ИсторияПечатиПоЗаказам.СоздатьМенеджерЗаписи();
	Рег.Период = ТекущаяДата();
	Рег.Заказ = Заказ;
	Если ЗначениеЗаполнено(Документ) Тогда Рег.Документ = Документ; КонецЕсли;
	Рег.ТипПечатаемогоДокумента = ТипПечатаемогоДокумента;
	Рег.Пользователь = ПараметрыСеанса.ТекущийПользователь;
	ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(Рег);
КонецПроцедуры

Функция ПолучитьПоследнююПечать(Заказ,ТипыДокументов,Документ=Неопределено) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ИсторияПечатиПоЗаказамСрезПоследних.Период,
	                      |	ИсторияПечатиПоЗаказамСрезПоследних.Пользователь,
	                      |	ИсторияПечатиПоЗаказамСрезПоследних.Документ
	                      |ИЗ
	                      |	РегистрСведений.ИсторияПечатиПоЗаказам.СрезПоследних(
	                      |			,
	                      |			Заказ = &Заказ
	                      |				И ТипПечатаемогоДокумента В(&ТипыДокументов) И (&ВсеДокументы Или Документ=&Документ)) КАК ИсторияПечатиПоЗаказамСрезПоследних");
	Запрос.УстановитьПараметр("Документ",Документ);
	Запрос.УстановитьПараметр("ВсеДокументы",?(Документ=Неопределено,Истина,Ложь));
	Запрос.УстановитьПараметр("Заказ",Заказ);
	Запрос.УстановитьПараметр("ТипыДокументов",ТипыДокументов);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Новый Структура("Период,Пользователь,Документ",Выборка.Период,Выборка.Пользователь,Выборка.Документ);
	КонецЕсли;
КонецФункции
#КонецОбласти

