
// ПРАВНЫЕ

Процедура УстановитьОтказ(Отказ)
	
	//Если Не РольДоступна("ПолныеПрава") И Не Врег(ИмяКомпьютера()) = Врег("silber") Тогда
	//Если Не РольДоступна("ПолныеПрава") Тогда
	
	Если 	Не ПараметрыСеанса.КонтрольОстатковВСеансеОтключен И
			Константы.КонтрольОстатков.Получить() Тогда
	
		Отказ = Истина; КонецЕсли;
		
//	КонецЕсли;
	
КонецПроцедуры

// ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ ДОКУМЕНТОВ

Функция ПолучитьСтандарнтыйЗаголовокПриПроведенииДокумента(Ссылка) Экспорт
	
	Возврат "Проведение документа " + Ссылка;
	
КонецФункции
Функция ПолучитьСтандарнтыйЗаголовокПриОтменеПроведенияДокумента(Ссылка) Экспорт
	
	Возврат "Отмена проведения документа " + Ссылка;
	
КонецФункции

Функция ПолучитьПараметрыЗапросаКонтроляПроведения(Ссылка) Экспорт
	
	Возврат Новый Структура("Ссылка", Ссылка);
	
КонецФункции
Функция ПолучитьТекстЗапросаКонтроляПроведения(ИмяДокумента) Экспорт
	
	Возврат "
	|ВЫБРАТЬ
	|	Номенклатура,
	|	МАКСИМУМ(НомерСтроки) 	КАК НомерСтроки,
	|	СУММА(Количество) 		КАК Количество
	|ИЗ
	|	Документ." + ИмяДокумента + ".Товары
	|ГДЕ
	|	Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура
	|";
	
КонецФункции

// АЛГОРИТМЫ

Функция РазмазатьТаблицуВТаблицеПоМинимальнымРесурсам(ТаблицаОснования, ТаблицаМинимума, КолонкиПоиска, РесурсыМинимума) Экспорт
	
	// Создает новую таблицу основаную на результатах слияния двух таблиц
	// Структура колонок у таблицы такаяже как и у таблицыОснования
	//	ТаблицаОснования 	- Таблица 1
	//	ТаблицаМинимума 	- Таблица 2
	//	КолонкиПоиска 		- Колонки по которым синхронизируются строки таблиц
	//	РесурсыМинимума		- Колонки по которым будет осуществлятся списания
	//
	// При списании в случае когда ресурс заканчивается то предыдущии строки с такимже ключем поиска пропускаются
	// соединение аналогично соединению ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	// при соединении используется записи основной таблицы
	// у второй таблицы записи группируются
	
	НовТаблица 			= ТаблицаОснования.СкопироватьКолонки();
	МассивРесурсов 		= КонвертацияТипов.ПолучитьМассивИзСтроки(РесурсыМинимума);
	МассивПоиска 		= КонвертацияТипов.ПолучитьМассивИзСтроки(КолонкиПоиска);
	
	ОтработанныеРесурсы = ТаблицаМинимума.Скопировать();
	ОтработанныеРесурсы.Свернуть(КолонкиПоиска, РесурсыМинимума);
	
	// Создадим таблицу памяти
	
	//Для Каждого КолонкаПоиска Из КолонкиПоиска Цикл
	//	ОтработанныеРесурсы.Колонки.Добавить(КолонкаПоиска);
	//КонецЦикла;
	//Для Каждого Ресурс Из МассивРесурсов Цикл
	//	ОтработанныеРесурсы.Колонки.Добавить(Ресурс, Новый ОписаниеТипов("Число"));
	//КонецЦикла;
	//ОтработанныеРесурсы.Колонки.Добавить("ОбщееКоличествоВсехРесурсов", Новый ОписаниеТипов("Число"));
	
	Для Каждого Строка Из ТаблицаОснования Цикл
		
		// Сформируем структуру поиска
		
		СтруктураПоиска = Новый Структура;
		Для Каждого КолонкаПоиска Из МассивПоиска Цикл
			СтруктураПоиска.Вставить(КолонкаПоиска, Строка[КолонкаПоиска]);
		КонецЦикла;
		
		//// Сперва проверим в памяти
		//
		СтрокиПамяти = ОтработанныеРесурсы.НайтиСтроки(СтруктураПоиска);
		Если Не СтрокиПамяти.Количество() Тогда Продолжить;
		//	
		//	СтрокиМинимума = ТаблицаМинимума.НайтиСтроки(СтруктураПоиска);
		//	Если Не СтрокиМинимума.Количество() Тогда
		//		Продолжить;
		//	КонецЕсли;
		//	
		//	// Тогда вытащим из таблицы минимума в память
		//	
		//	РесурсыПамяти = Новый Структура(РесурсыМинимума + ", ОбщееКоличествоВсехРесурсов");
		//	Для Каждого СтрокаМинимума Из СтрокиМинимума Цикл
		//		
		//		Для Каждого Ресурс Из МассивРесурсов Цикл
		//			Вставляем = СтрокаМинимума[Ресурс];
		//			РесурсыПамяти.Вставить(Ресурс, РесурсыПамяти[Ресурс] + Вставляем);
		//			РесурсыПамяти.Вставить("ОбщееКоличествоВсехРесурсов", РесурсыПамяти.ОбщееКоличествоВсехРесурсов + Вставляем);
		//		КонецЦикла;
		//		
		//	КонецЦикла;
		//		
		//	// Теперь создадим строку памяти			
		//	
		//	НовСтрокаПамяти = ОтработанныеРесурсы.Добавить();
		//	ЗаполнитьЗначенияСвойств(НовСтрокаПамяти, СтруктураПоиска);
		//	ЗаполнитьЗначенияСвойств(НовСтрокаПамяти, РесурсыПамяти);
		//	
		//	СтрокаПамяти = НовСтрокаПамяти;
		//	
		Иначе
			
			СтрокаПамяти = СтрокиПамяти[0];
			
		КонецЕсли;
		
		// Теперь у нас есть просуммированные ресурся второй таблицы и мы можем точно знать минимум
		
		// Проверим если хоть один ресурс не ноль тогда создадим строку
		// и спишем количество из памяти
		
		//Если СтрокаПамяти.ОбщееКоличествоВсехРесурсов Тогда
			
			РесурсыТаблицы 	= Новый Структура(РесурсыМинимума);
			//ОбщееКоличество = 0;
			ЧтотоВставили 	= Ложь;
			
			Для Каждого Ресурс Из МассивРесурсов Цикл
					
				Вставляем = Мин(Строка[Ресурс], СтрокаПамяти[Ресурс]);
				Если Вставляем Тогда
					
					ЧтотоВставили = Истина;
					
					// Добавим в новую строку 
					
					РесурсыТаблицы.Вставить(Ресурс, Вставляем);
					//ОбщееКоличество = ОбщееКоличество + Вставляем;
					
					// Вычеркнем из памяти то что отработало
					
					СтрокаПамяти[Ресурс] = СтрокаПамяти[Ресурс] - Вставляем;
					//СтрокаПамяти.ОбщееКоличествоВсехРесурсов = СтрокаПамяти.ОбщееКоличествоВсехРесурсов - Вставляем;
					
				Иначе
					
					// Обнулим, чтобы в дальнейшем правильно встало
					
					РесурсыТаблицы.Вставить(Ресурс, 0);
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ЧтотоВставили Тогда
			
				НовСтрока = НовТаблица.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
				ЗаполнитьЗначенияСвойств(НовСтрока, РесурсыТаблицы);
				
			КонецЕсли;
			
		//КонецЕсли;
	КонецЦикла;
	
	Возврат НовТаблица;
	
КонецФункции

// КОНТРОЛЬ

Процедура ПроверитьПоВсемРегистрам(ДокументОбъект, Отказ, Заголовок) Экспорт
	
	МетаДок = ДокументОбъект.Метаданные();
	
	Для Каждого Движение Из МетаДок.Движения Цикл
		
		Если Движение.Имя = "ТоварыНаСкладах" Тогда
			
			ДокРезерва = Неопределено;
			Если МетаДок.Имя = "ЗаказНаряд" Тогда
				ДокРезерва = ДокументОбъект.Ссылка;
			//ИначеЕсли МетаДок.Имя = "ПриемТоваров" Тогда
			//	ДокРезерва = ДокументОбъект.Заказ;
			ИначеЕсли МетаДок.Имя = "РеализацияТоваров" Тогда
				ДокРезерва = ДокументОбъект.Заказ; КонецЕсли;
			
			ПроверитьТоварыНаСкладах(ДокументОбъект, ДокументОбъект.ПолучитьСкладСписания(), Отказ, Заголовок, ДокРезерва);
			
		//ИначеЕсли Движение.Имя 	= "ПартииТоваров" Тогда 		ПроверитьПартииТоваров(ДокументОбъект, ДокументОбъект.ПолучитьСкладСписания(), Отказ, Заголовок);
		ИначеЕсли Движение.Имя 	= "ТоварыВЯчейках" Тогда 			ПроверитьТоварыВЯчейках(ДокументОбъект, ДокументОбъект.ПолучитьСкладСписания(), Отказ, Заголовок);
		ИначеЕсли Движение.Имя 	= "ТоварыВПути" Тогда 				ПроверитьТоварыВПути(ДокументОбъект, ДокументОбъект.СкладОтправитель, ДокументОбъект.СкладПолучатель, ДокументОбъект.Процесс.Заказчик, Отказ, Заголовок);
		ИначеЕсли Движение.Имя 	= "ПотериТоваровВПути" Тогда 		ПроверитьПотериВПути(ДокументОбъект, Отказ, Заголовок);
		ИначеЕсли Движение.Имя 	= "ТоварыНаТаможне" Тогда 			ПроверитьТоварыНаТаможне(ДокументОбъект, ДокументОбъект.ПолучитьСкладСписания(), Отказ, Заголовок);
			
			
		//ИначеЕсли Движение.Имя 	= "СборкаЗаказа" Тогда 			ПроверитьСборкуЗаказа(ДокументОбъект, Отказ, Заголовок, ?(МетаДок.Реквизиты.Найти("Заказ") = Неопределено, Неопределено, ДокументОбъект.Заказ));
		ИначеЕсли Движение.Имя 	= "ПередачаТоваров" Тогда 			ПроверитьПередачаТовара(ДокументОбъект, Отказ, Заголовок);
			
		//ИначеЕсли Движение.Имя 	= "ИнтернетЗаказПокупателя" Тогда 	ПроверитьТоварыВИнтернетЗаказе(ДокументОбъект, Отказ, Заголовок, ?(МетаДок.Имя = "РеализацияТоваров" Или МетаДок.Имя = "СнятиеРезерва", Ложь, Истина));
		ИначеЕсли Движение.Имя 	= "ИнтернетЗаказПокупателя" Тогда 	ПроверитьТоварыВИнтернетЗаказе(ДокументОбъект, Отказ, Заголовок);
		ИначеЕсли Движение.Имя 	= "ВнутренниеЗаказы" Тогда 			ПроверитьВнутреннииЗаказы(ДокументОбъект, Отказ, Заголовок);
		ИначеЕсли Движение.Имя 	= "ЗаказыПоставщикам" Тогда 		ПроверитьЗаказыПоставщикам(ДокументОбъект, Отказ, Заголовок);
		ИначеЕсли Движение.Имя 	= "ТоварыПоставщиковВПути" Тогда 	ПроверитьТоварыПоставщиковВПути(ДокументОбъект, Отказ, Заголовок);
		ИначеЕсли Движение.Имя 	= "РазмещениеЗаказов" Тогда 		ПроверитьРазмещениеЗаказов(ДокументОбъект, Отказ, Заголовок);
		ИначеЕсли Движение.Имя 	= "РазмещениеЗаказовВПути" Тогда 	ПроверитьРазмещениеЗаказовВПути(ДокументОбъект, Отказ, Заголовок);
			
		ИначеЕсли Движение.Имя 	= "ДенежныеСредства" Тогда 			ПроверитьДенежныеСредства(ДокументОбъект, ДокументОбъект.ПолучитьКассуСписания(), Отказ, Заголовок);
			
		//ИначеЕсли Движение.Имя 	= "ОплатыПоБанковскимКартам"  Тогда ПроверитьПодтверждениеОплатПоБК(ДокументОбъект.Ссылка, Отказ, Заголовок);
		ИначеЕсли Движение.Имя 	= "ТоварыМОЛ" И МетаДок.Имя = "ВозвратОтМОЛ" Тогда 			ПроверитьТоварыМОЛ(ДокументОбъект, ДокументОбъект.МОЛ, Отказ, Заголовок);	
		ИначеЕсли Движение.Имя 	= "ТоварыВРезерве" Тогда 			
			
			Если 	МетаДок.Имя = "СборочныйЛист" Или 
				МетаДок.Имя = "КорректировкаЗаказаПокупателя" Или 
				МетаДок.Имя = "КорректировкаИнтернетЗаказа" Или 
				МетаДок.Имя = "КорректировкаВнутреннегоЗаказа" Или 
				МетаДок.Имя = "РеализацияТоваров" Тогда 
				ПроверитьТоварыВРезерве(ДокументОбъект,, Отказ, Заголовок, ДокументОбъект.Заказ);
				
				ПроверитьТоварыВРезервеМинусСобрано(ДокументОбъект, ДокументОбъект.Заказ, Отказ, Заголовок);
				
			ИначеЕсли 	МетаДок.Имя = "ЗаказПокупателя" Или
				МетаДок.Имя = "ИнтернетЗаказПокупателя" Или
				МетаДок.Имя = "ВнутреннийЗаказ" Тогда
				
				ПроверитьТоварыВРезерве(ДокументОбъект, ДокументОбъект.ПолучитьСкладСписания(), Отказ, Заголовок, ДокументОбъект.Ссылка);
				
				ПроверитьТоварыВРезервеМинусСобрано(ДокументОбъект, ДокументОбъект.Ссылка, Отказ, Заголовок);
				
			ИначеЕсли 	МетаДок.Имя = "ОтгрузкаТоваров" Тогда
				ПроверитьТоварыВРезерве(ДокументОбъект, ДокументОбъект.ПолучитьСкладСписания(), Отказ, Заголовок, БизнесПроцессы.ПеремещениеТоваров.ПолучитьЗаказ(ДокументОбъект.Процесс));
			Иначе
				ПроверитьТоварыВРезерве(ДокументОбъект, ДокументОбъект.ПолучитьСкладСписания(), Отказ, Заголовок); 
			КонецЕсли; 
			
			
		КонецЕсли; 
	КонецЦикла;
			
			//ИначеЕсли Движение.Имя 	= "Лимиты" Тогда 					ПроверитьЛимиты(ДокументОбъект, , Отказ, Заголовок);
		
	
	
КонецПроцедуры

Процедура ОбработатьСообщениеОНедостачеТовара(
									Выполнение,
									ТекстНачала,
									Отказ,
									ДокументОбъект	 	= Неопределено, 
									ИмяТабличнойЧасти 	= "Товары",
									ВыводитьПутьКОшибке = Истина,
									Склад 				= Неопределено,
									ЕстьЯчейки			= Ложь)
									
	Отказ = Истина; // если это крутой юзер то ему можно какнить сделать и обход отказа (подумать)
									
	// Подготовимся к ругани
	
	Сообщение = Новый СообщениеПользователю();
	
	Если ДокументОбъект <> Неопределено Тогда
		Сообщение.КлючДанных = ДокументОбъект.Ссылка;
	КонецЕсли;
	
	// Получим Товары
	
	Если ВыводитьПутьКОшибке Тогда
		
		таблицаТоваров = ДокументОбъект[ИмяТабличнойЧасти];
		
	КонецЕсли;
	
	Текст = "";
	Сообщение.Текст = ТекстНачала + " " + ?(Склад = Неопределено, "на складе","по складу """ + Склад + """");
	Сообщение.Сообщить();
	
	// Начнем ругаться
	
	Выборка = Выполнение.Выбрать();
	Пока Выборка.Следующий() Цикл
		//с Текст + "
		Сообщение.Текст = Строка(Выборка.Номенклатура) 
							+ ": " + ?(ЕстьЯчейки И ЗначениеЗаполнено(Выборка.Ячейка), 
											"ячейка("  + Выборка.Ячейка + ") ",
											"") 
							//+ "нехватает " + выборка.Свободный + "(ед.) требуется " + выборка.Остаток * -1 + "(ед.)"
							+ "нехватает " + выборка.Свободный + "(ед.)"
							+ ?(Выборка.Остаток < 0,
											"",
											" (из-за резерва " + Выборка.Свободный + ")");
									
		Если ВыводитьПутьКОшибке Тогда
			
			СтрокиГдеЕстьТовар = таблицаТоваров.НайтиСтроки(Новый Структура("Номенклатура", Выборка.Номенклатура));
			Если СтрокиГдеЕстьТовар.Количество() Тогда
				
				Сообщение.Поле = ИмяТабличнойЧасти + "[" + Формат(СтрокиГдеЕстьТовар[СтрокиГдеЕстьТовар.Количество() - 1].НомерСтроки - 1,"ЧГ=") + "].Номенклатура";
				Сообщение.УстановитьДанные(ДокументОбъект);
				
			КонецЕсли;
		КонецЕсли;
		
		#Если ВнещнееСоединение Тогда
			
			Выполнить("ВызватьИсключение " + Текст);
			
		#Иначе
			
			//Сообщение.Текст = ТекстНачала + " " + ?(Склад = Неопределено, "на складе","по складу """ + Склад + """") + Текст;
			Сообщение.Сообщить();
			
		#КонецЕсли
		
	КонецЦикла;
	
	// Вернем что ничего у нас не вышло
	
	
КонецПроцедуры

Процедура ОбработатьСообщениеОбОтрицательномОстаткеПоЗаказчику(
									Выполнение,
									ТекстНачала,
									Отказ				= Истина,
									ДокументОбъект	 	= Неопределено, 
									ИмяТабличнойЧасти 	= "Товары",
									ВыводитьПутьКОшибке = Истина)
	
	// Подготовимся к ругани
	
	//Сообщение = Новый СообщениеПользователю();
	//
	//Если ДокументОбъект <> Неопределено Тогда
	//	Сообщение.КлючДанных = ДокументОбъект.Ссылка;
	//КонецЕсли;
	
	// Получим Товары
	
	Если ВыводитьПутьКОшибке Тогда
		
		ТаблицаТоваров = ДокументОбъект[ИмяТабличнойЧасти];
		
	КонецЕсли;
	
	//Текст = "";
	//Сообщение.Текст = ТекстНачала;
	//Сообщение.Сообщить();
	//
	// Начнем ругаться
	
	
	
	Выборка = Выполнение.Выбрать();
	Пока Выборка.Следующий() Цикл
		Сообщение = Новый СообщениеПользователю();
		Текст = "";
		
		Текст = Текст + "
			|" + Выборка.Номенклатура + ": " + Выборка.Остаток +
			?(Выборка.Остаток < 0, ""," (по заказчику " + Выборка.Заказчик + ")");
									
		Если ВыводитьПутьКОшибке Тогда
			
			СтрокиГдеЕстьТовар = ТаблицаТоваров.НайтиСтроки(Новый Структура("Номенклатура", Выборка.Номенклатура));
			Если СтрокиГдеЕстьТовар.Количество() Тогда
				
				
				НомерСтроки = ТаблицаТоваров.Индекс(СтрокиГдеЕстьТовар[0]);
				Сообщение.Поле = ИмяТабличнойЧасти + "[" + НомерСтроки + "].Номенклатура";
				Сообщение.УстановитьДанные(ТаблицаТоваров);
				
			КонецЕсли;
		КонецЕсли;
		
		#Если ВнещнееСоединение Тогда
			
			Выполнить("ВызватьИсключение " + Текст);
			
		#Иначе
		    Сообщение.Текст = Текст;
			Сообщение.Сообщить();
			
		#КонецЕсли
		
	КонецЦикла;
	
	// Вернем что ничего у нас не вышло
	
КонецПроцедуры
Процедура ОбработатьСообщениеОбОтрицательномОстаткеПоЗаказу(
									Выполнение,
									ТекстНачала,
									Отказ				= Истина,
									ДокументОбъект	 	= Неопределено, 
									ИмяТабличнойЧасти 	= "Товары",
									ВыводитьПутьКОшибке = Истина)
	
	// Подготовимся к ругани
	
	//Сообщение = Новый СообщениеПользователю();
	//
	//Если ДокументОбъект <> Неопределено Тогда
	//	Сообщение.КлючДанных = ДокументОбъект.Ссылка;
	//КонецЕсли;
	
	// Получим Товары
	
	Отказ = Истина;
	
	Если ВыводитьПутьКОшибке Тогда
		
		ТаблицаТоваров = ДокументОбъект[ИмяТабличнойЧасти];
		
	КонецЕсли;
	
	//Текст = "";
	//Сообщение.Текст = ТекстНачала;
	//Сообщение.Сообщить();
	//
	// Начнем ругаться
	
	
	
	Выборка = Выполнение.Выбрать();
	Пока Выборка.Следующий() Цикл
		Сообщение = Новый СообщениеПользователю();
		
		Текст = ТекстНачала + "
			|" + Выборка.Номенклатура + ": " + Выборка.Остаток +
			?(Выборка.Остаток < 0, ""," (по заказу " + Выборка.Заказ + ")");
									
		Если ВыводитьПутьКОшибке Тогда
			
			СтрокиГдеЕстьТовар = ТаблицаТоваров.НайтиСтроки(Новый Структура("Номенклатура", Выборка.Номенклатура));
			Если СтрокиГдеЕстьТовар.Количество() Тогда
				
				
				НомерСтроки = ТаблицаТоваров.Индекс(СтрокиГдеЕстьТовар[0]);
				Сообщение.Поле = "Объект." + ИмяТабличнойЧасти + "[" + НомерСтроки + "].Номенклатура";
				Сообщение.УстановитьДанные(ТаблицаТоваров);
				
			КонецЕсли;
		КонецЕсли;
		
		#Если ВнещнееСоединение Тогда
			
			Выполнить("ВызватьИсключение " + Текст);
			
		#Иначе
		    Сообщение.Текст = Текст;
			Сообщение.Сообщить();
			
		#КонецЕсли
		
	КонецЦикла;
	
	// Вернем что ничего у нас не вышло
	
КонецПроцедуры
Процедура ОбработатьСообщениеОбОтрицательномОстаткеНаТаможне(
									Выполнение,
									ТекстНачала,
									Отказ				= Истина,
									ДокументОбъект	 	= Неопределено, 
									ИмяТабличнойЧасти 	= "Товары",
									ВыводитьПутьКОшибке = Истина)
	
	// Получим Товары
	
	Отказ = Истина;
	
	Если ВыводитьПутьКОшибке Тогда
		
		ТаблицаТоваров = ДокументОбъект[ИмяТабличнойЧасти];
		
	КонецЕсли;
	
	// Начнем ругаться
	
	Выборка = Выполнение.Выбрать();
	Пока Выборка.Следующий() Цикл
		Сообщение = Новый СообщениеПользователю();
		
		Текст = ТекстНачала + "
			|" + Выборка.Номенклатура + ": " + Выборка.Остаток +
			?(Выборка.Остаток < 0, ""," (по партии: " + Выборка.Партия + ")");
									
		Если ВыводитьПутьКОшибке Тогда
			
			СтрокиГдеЕстьТовар = ТаблицаТоваров.НайтиСтроки(Новый Структура("Номенклатура", Выборка.Номенклатура));
			Если СтрокиГдеЕстьТовар.Количество() Тогда
				
				
				НомерСтроки = ТаблицаТоваров.Индекс(СтрокиГдеЕстьТовар[0]);
				Сообщение.Поле = "Объект." + ИмяТабличнойЧасти + "[" + НомерСтроки + "].Номенклатура";
				Сообщение.УстановитьДанные(ТаблицаТоваров);
				
			КонецЕсли;
		КонецЕсли;
		
		#Если ВнещнееСоединение Тогда
			
			Выполнить("ВызватьИсключение " + Текст);
			
		#Иначе
		    Сообщение.Текст = Текст;
			Сообщение.Сообщить();
			
		#КонецЕсли
		
	КонецЦикла;
	
	// Вернем что ничего у нас не вышло
	
КонецПроцедуры

Процедура ПроверитьТоварыВЯчейках(ДокументОбъект, Склад, Отказ, Заголовок = "") Экспорт
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.РеализацияТоваров") Тогда
		ТекстТоваров = ДокументОбъект.ПолучитьТекстЗапросаПолученияСпискаТоваровВЯчейках();
	Иначе
		ТекстТоваров = ДокументОбъект.ПолучитьТекстЗапросаПолученияСпискаТоваров();
	КонецЕсли;
	
	параметрыСистемы = Неопределено;
	Если не ДокументОбъект.ДополнительныеСвойства.Свойство("ПараметрыСистемы", параметрыСистемы) Тогда
		параметрыСистемы = КэшируемыеФункции.ПолучитьСтруктуруПараметровсистемы();
	КонецЕсли;
	
	ВыполнитьОтказ = параметрыСистемы.КонтрольОстатков  И Не ПараметрыСеанса.КонтрольОстатковВСеансеОтключен;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|Выбрать Ссылка ПОМЕСТИТЬ Ячейки из Справочник.Ячейки ГДЕ Владелец = &Склад
	|;
	|Выбрать Номенклатура, Ячейка, Сумма(Количество)
	|из
	|(
	|
	|ВЫБРАТЬ 	Номенклатура, Ячейка, КоличествоОстаток КАК Количество
	|ИЗ 		РегистрНакопления.ТоварыВЯчейках.Остатки(, Ячейка в (Выбрать ссылка из Ячейки) И Номенклатура В(" + ТекстТоваров + ") И Ячейка <> &ЯчейкаНеНайдено)
	|
	|Объединить все
	|
	|ВЫБРАТЬ 	Номенклатура, Ячейка, -КоличествоОстаток  
	|ИЗ 		РегистрНакопления.РезервыВЯчейках.Остатки(, Ячейка в (Выбрать ссылка из Ячейки) И Номенклатура В(" + ТекстТоваров + ") И Ячейка <> &ЯчейкаНеНайдено)
	|) как ВТ
	|
	|Сгруппировать по Номенклатура, Ячейка
	|Имеющие Сумма(Количество) < 0
	|
	|";

	Запрос.УстановитьПараметр("Склад", 			Склад);
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("ТипУслуга", 		Перечисления.ТипыНоменклатуры.Услуга);
	Запрос.УстановитьПараметр("ПустаяЯчейка", 	Справочники.Ячейки.ПустаяСсылка());
	Запрос.УстановитьПараметр("ЯчейкаНеНайдено", 	Склад.ЯчейкаНеНайдено);
	
	Выполнение = Запрос.Выполнить();
	Если Не Выполнение.Пустой() Тогда
		
		Если ВыполнитьОтказ Тогда Отказ = Истина КонецЕсли;
		
		Выборка = Выполнение.Выбрать();
		Пока Выборка.Следующий() Цикл

		 	ОбщиеФункции.СообщитьТекст("Не достаточно товара с учетом резерва в ячейке (" + Выборка.Ячейка + ") " + Выборка.Номенклатура + ": " + Выборка.Количество);
			
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры

Процедура ПроверитьТоварыВПути(ДокументОбъект, СкладОтправитель = Неопределено, СкладПолучатель = Неопределено, Заказчик = Неопределено, Отказ, Заголовок = "") Экспорт
	
	параметрыСистемы = Неопределено;
	Если не ДокументОбъект.ДополнительныеСвойства.Свойство("ПараметрыСистемы", параметрыСистемы) Тогда
		параметрыСистемы = КэшируемыеФункции.ПолучитьСтруктуруПараметровсистемы();
	КонецЕсли;
	
	ВыполнитьОтказ = параметрыСистемы.КонтрольОстатков  И Не ПараметрыСеанса.КонтрольОстатковВСеансеОтключен;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 	Номенклатура, СУММА(-КоличествоОстаток) КАК Количество, СУММА(КоличествоОстаток) Свободный, СУММА(-КоличествоОстаток) Остаток
	|ИЗ 		РегистрНакопления.ТоварыВпути.Остатки(, ИСТИНА "
			+ ?(ЗначениеЗаполнено(Заказчик), " И Заказчик 	= &Заказчик ","")
			+ ?(СкладОтправитель <> Неопределено, " И СкладОтправитель 	= &СкладОтправитель ","")
			+ ?(СкладПолучатель <> Неопределено, " И СкладПолучатель 	= &СкладПолучатель ","") +
			")
	|ГДЕ		КоличествоОстаток < 0
	|
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура
	|ИМЕЮЩИЕ  СУММА(КоличествоОстаток) < 0
	|
	|");

	Запрос.УстановитьПараметр("СкладОтправитель", 	СкладОтправитель);
	Запрос.УстановитьПараметр("СкладПолучатель", 	СкладПолучатель);
	Запрос.УстановитьПараметр("Заказчик", 			Заказчик);
	
	Выполнение = Запрос.Выполнить();
	Если Не Выполнение.Пустой() Тогда

		Если ВыполнитьОтказ Тогда Отказ = Истина КонецЕсли;
		
		Выборка = Выполнение.Выбрать();
		Пока Выборка.Следующий() Цикл
			ОбщиеФункции.СообщитьТекст("Не достаточно товара в пути " + Выборка.Номенклатура + ": " + Выборка.Количество); КонецЦикла;
		
		//ОбработатьСообщениеОНедостачеТовара(
		//			Выполнение, 
		//			"Не достаточно товара в пути ", 
		//			?(ДокументОбъект.ДополнительныеСвойства.параметрыСистемы.КонтрольОстатков И Не ПараметрыСеанса.КонтрольОстатковВСеансеОтключен, Отказ, Ложь), 
		//			ДокументОбъект);
			
	КонецЕсли;
		
КонецПроцедуры


Процедура ПроверитьПотериВПути(ДокументОбъект, Отказ, Заголовок = "") Экспорт
	
	Если ДокументОбъект.Метаданные().Имя <> "СписаниеПотерьВПути" Тогда
		Возврат;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст="Выбрать * из регистрНакопления.ПотериТоваровВПути.Остатки(,Заказ в (&Заказы)) ГДЕ КоличествоОстаток < 0";
	Запрос.УстановитьПараметр("Заказы", ДокументОбъект.Товары.Выгрузить().ВыгрузитьКолонку("Заказ"));
	
	Рез = Запрос.Выполнить();
	Если Не Рез.Пустой() Тогда
		
		ОбщиеФункции.СообщитьТекст("Не достаточно потерянного в пути товара :");
					
		Выборка = Рез.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ОбщиеФункции.СообщитьТекст(Строка(Выборка.Номенклатура) + " ; "+ Выборка.Заказ+" ; Недостача :" + Выборка.КоличествоОстаток);
		КонецЦикла;	
		
		Отказ = Истина;
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ПроверитьТоварыНаТаможне(ДокументОбъект, Склад = Неопределено, Отказ, Заголовок = "") Экспорт
	
	// Иницилизация переменных
	
	параметрыСистемы = Неопределено;
	Если не ДокументОбъект.ДополнительныеСвойства.Свойство("ПараметрыСистемы", параметрыСистемы) Тогда
		параметрыСистемы = КэшируемыеФункции.ПолучитьСтруктуруПараметровсистемы();
	КонецЕсли;
	
	ВыполнитьОтказ = параметрыСистемы.КонтрольОстатков И Не ПараметрыСеанса.КонтрольОстатковВСеансеОтключен;
	
	// Запрос
	
	ТекстСписка = ДокументОбъект.ПолучитьТекстЗапросаПолученияСпискаТоваров();
	
	Запрос = Новый Запрос("
	
	// Остатки с резервом
	
	|ВЫБРАТЬ 	Партия, Склад, Номенклатура, Упаковка, КоличествоУпрОстаток Остаток
	|ИЗ 		РегистрНакопления.ТоварыНаТаможне.Остатки(,
	|										Номенклатура В(" + ТекстСписка + ")
	|		" + ?(Склад <> Неопределено, "	И Склад = &Склад","") + ")
	|ГДЕ  		КоличествоУпрОстаток<0");
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("Склад", 			Склад);
	Запрос.УстановитьПараметр("ПустойСклад",	Справочники.Склады.ПустаяСсылка());
	
	Выполнение = Запрос.Выполнить();
	Если Не Выполнение.Пустой() Тогда
		
		ОбработатьСообщениеОбОтрицательномОстаткеНаТаможне( Выполнение,
			"Не достаточно товара на таможенном складе ",  ?(ВыполнитьОтказ, Отказ, Ложь), ДокументОбъект,,Истина) КонецЕсли;
	
КонецПроцедуры
Процедура ПроверитьТоварыНаСкладах(ДокументОбъект, Склад = Неопределено, Отказ, Заголовок = "", ДокументРезерва = Неопределено) Экспорт
	
	// ДокументРезерва - при подсчете резерва если указан документ резерва то такие остатки резерва игнорируются
	
	// Если склад ячеестый  тогда будем контролировать только ячейки
	// т.к. у ячеестого товара есть ячейки (зона приемки) при нахождении товара на которых считается что товара на складе нет
	// при этом это не касается резерва, из-за этого может оказаться отрицательное количество свободного остатка (товар - резерв)
	// поэтому контроль для таких складов можно осуществлять только на уровне ячеек
	
	// Иницилизация переменных
	
	параметрыСистемы = Неопределено;
	Если не ДокументОбъект.ДополнительныеСвойства.Свойство("ПараметрыСистемы", параметрыСистемы) Тогда
		параметрыСистемы = КэшируемыеФункции.ПолучитьСтруктуруПараметровсистемы();
	КонецЕсли;
	
	ВыполнитьОтказ = параметрыСистемы.КонтрольОстатков И Не ПараметрыСеанса.КонтрольОстатковВСеансеОтключен;
	
	// Запрос
	
	ТекстСписка = ДокументОбъект.ПолучитьТекстЗапросаПолученияСпискаТоваров();
	//Запрос = ?(Склад = Неопределено ИЛИ НЕ Склад.Ячеестый,  
	//			ПолучитьЗапросПроверкиОстатковПоТоварамНаСкладе(ТекстСписка, Склад, ДокументРезерва),
	//			ПолучитьЗапросПроверкиОстатковПоТоварамВЯчейках(ТекстСписка, Склад, ДокументРезерва));
	Запрос = ПолучитьЗапросПроверкиОстатковПоТоварамНаСкладе(ТекстСписка, Склад, ДокументРезерва);
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("Склад", 			Склад);
	Запрос.УстановитьПараметр("ДокументРезерва",ДокументРезерва);
	Запрос.УстановитьПараметр("ТипУслуга",		Перечисления.ТипыНоменклатуры.Услуга);
	Запрос.УстановитьПараметр("ПустойСклад",	Справочники.Склады.ПустаяСсылка());
	
	Выполнение = Запрос.Выполнить();
	Если Не Выполнение.Пустой() Тогда
		
		ОбработатьСообщениеОНедостачеТовара(
			Выполнение, 
			"Не достаточно товара с учетом резерва ", 
			?(ВыполнитьОтказ, Отказ, Ложь), 
		ДокументОбъект,,,,Истина); КонецЕсли;
	
КонецПроцедуры
Функция ПолучитьЗапросПроверкиОстатковПоТоварамНаСкладе(ТекстСписка, Склад = Неопределено, ДокументРезерва = Неопределено) Экспорт
	
	Запрос = Новый Запрос("
	
	// Остатки с резервом
	
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Ост.Склад, 		Рез.Размещение)										Склад,
	|	ЕСТЬNULL(Ост.Номенклатура, 	Рез.Номенклатура)									Номенклатура,
	|	NULL																			Ячейка,
	|	СУММА(-ЕСТЬNULL(Ост.КоличествоОстаток,0)) 										Остаток,
	|	СУММА(-ЕСТЬNULL(Ост.КоличествоОстаток,0) + ЕСТЬNULL(Рез.КоличествоОстаток, 0)) 	Свободный
	|
	|ИЗ 		РегистрНакопления.ТоварыНаСкладах.Остатки(,
	|										Номенклатура.ТипНоменклатуры <> &ТипУслуга И
	|										Номенклатура В(" + ТекстСписка + ")
	|		" + ?(Склад <> Неопределено, "	И Склад = &Склад","") + ") КАК Ост
	|
	|ПОЛНОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыВРезерве.Остатки(,
	|													Номенклатура.ТипНоменклатуры <> &ТипУслуга И
	|													Номенклатура В(" + ТекстСписка + ")
	|		" + ?(Склад <> Неопределено, "				И Размещение = &Склад", "") + "
	|		" + ?(ДокументРезерва <> Неопределено, "	И ДокументРезерва <> &ДокументРезерва","") + "
	|	) КАК Рез
	|ПО
	|	Ост.Номенклатура 	= Рез.Номенклатура И
	|	Ост.Склад			= Рез.Размещение
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(Ост.Склад, 		Рез.Размещение),
	|	ЕСТЬNULL(Ост.Номенклатура, 	Рез.Номенклатура)
	|
	|ИМЕЮЩИЕ  
	|	СУММА(ЕСТЬNULL(Ост.КоличествоОстаток,0)) < 0 ИЛИ                  				  // Остаток ушел в минус
	|	СУММА(ЕСТЬNULL(Ост.КоличествоОстаток,0) - ЕСТЬNULL(Рез.КоличествоОстаток, 0)) < 0 // своболный остаток ушел в минус
	|
	|");
	
	Возврат Запрос;
	
КонецФункции
Функция ПолучитьЗапросПроверкиОстатковПоТоварамВЯчейках(ТекстСписка, Склад = Неопределено, ДокументРезерва = Неопределено) Экспорт
	
	// Если ячейка потеряшка у склада не заполнена то всем писец
	Если Склад <> Неопределено И Склад.ЯчейкаНеНайдено.Пустая() Тогда
		ВызватьИсключение "На складе " + Склад + " не заполнена ячейка для хранения потеренного товара"; КонецЕсли;
	
	Запрос = Новый Запрос("
	
	// Остатки с резервом
	
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ЕСТЬNULL(Ост.Склад, Рез.Размещение), Собр.Склад)						Склад,
	|	ЕСТЬNULL(ЕСТЬNULL(Ост.Номенклатура, Рез.Номенклатура), Собр.Номенклатура)		Номенклатура,
	|	NULL																			Ячейка,
	|	СУММА(-ЕСТЬNULL(Ост.Количество,0) - ЕСТЬNULL(Собр.КоличествоОстаток, 0)) 										Остаток,
	|	СУММА(-ЕСТЬNULL(Ост.Количество,0) - ЕСТЬNULL(Собр.КоличествоОстаток, 0) + ЕСТЬNULL(Рез.КоличествоОстаток, 0)) 	Свободный
	|
	|ИЗ (	ВЫБРАТЬ Ячейка.Владелец Склад, Номенклатура, СУММА(КоличествоОстаток) Количество
	|		ИЗ 		РегистрНакопления.ТоварыВЯчейках.Остатки(,
	|										Номенклатура.ТипНоменклатуры <> &ТипУслуга И
	|										Номенклатура В(" + ТекстСписка + ")
	|		" + ?(Склад <> Неопределено, "	И Ячейка.Владелец = &Склад","") + ")
	|
	|		СГРУППИРОВАТЬ ПО Ячейка.Владелец, Номенклатура 
	|	) КАК Ост
	|
	|ПОЛНОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыВРезерве.Остатки(,
	|													Номенклатура.ТипНоменклатуры <> &ТипУслуга И
	|													Номенклатура В(" + ТекстСписка + ")
	|		" + ?(Склад <> Неопределено, "				И Размещение = &Склад","И ЕСТЬNULL(Размещение, &ПустойСклад) <> &ПустойСклад") + "   
	|		" + ?(ДокументРезерва <> Неопределено, "	И ДокументРезерва <> &ДокументРезерва","") + "
	|	) КАК Рез
	|ПО
	|	Ост.Номенклатура 	= Рез.Номенклатура И
	|	Ост.Склад			= Рез.Размещение
	|
	|ПОЛНОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыСобранные.Остатки(,
	|													Номенклатура.ТипНоменклатуры <> &ТипУслуга И
	|													Номенклатура В(" + ТекстСписка + ")
	|		" + ?(Склад <> Неопределено, "				И Склад = &Склад","И ЕСТЬNULL(Склад, &ПустойСклад) <> &ПустойСклад") + "   
	|		" + ?(ДокументРезерва <> Неопределено, "	И Заказ <> &ДокументРезерва","") + "
	|	) КАК Собр
	|ПО
	|	Ост.Номенклатура 	= Собр.Номенклатура И
	|	Ост.Склад			= Собр.Склад
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(ЕСТЬNULL(Ост.Склад, Рез.Размещение), Собр.Склад),
	|	ЕСТЬNULL(ЕСТЬNULL(Ост.Номенклатура, Рез.Номенклатура), Собр.Номенклатура)
	|
	|ИМЕЮЩИЕ  
	|	СУММА(ЕСТЬNULL(Ост.Количество,0) + ЕСТЬNULL(Собр.КоличествоОстаток, 0)) < 0 ИЛИ                  				// Остаток ушел в минус
	|	СУММА(ЕСТЬNULL(Ост.Количество,0) + ЕСТЬNULL(Собр.КоличествоОстаток, 0) - ЕСТЬNULL(Рез.КоличествоОстаток, 0)) < 0 // своболный остаток ушел в минус
	|");
	
	Возврат Запрос;
	
КонецФункции


//Процедура ПроверитьПартииТоваров(ДокументОбъект, Склад = Неопределено, Отказ, Заголовок = "") Экспорт
//	
//	// Иницилизация переменных
//	
//	параметрыСистемы = Неопределено;
//	Если не ДокументОбъект.ДополнительныеСвойства.Свойство("ПараметрыСистемы", параметрыСистемы) Тогда
//		параметрыСистемы = КэшируемыеФункции.ПолучитьСтруктуруПараметровсистемы();
//	КонецЕсли;
//	
//	ВыполнитьОтказ = параметрыСистемы.КонтрольПартийТоваров И Не ПараметрыСеанса.КонтрольОстатковВСеансеОтключен;
//	
//	// Запрос
//	
//	ТекстСписка = ДокументОбъект.ПолучитьТекстЗапросаПолученияСпискаТоваров();
//	
//	Запрос = Новый Запрос("
//	|ВЫБРАТЬ 	Партия, Склад, Номенклатура.Наименование Номенклатура, 
//	|			КоличествоОстаток КАК Количество,
//	|			СуммаОстаток Сумма
//	|ИЗ 		РегистрНакопления.ПартииТоваров.Остатки(, 
//	|										Номенклатура В(" + ТекстСписка + ")
//	|" + ?(Склад <> Неопределено, " 		И Склад = &Склад ","") + ")
//	|ГДЕ НЕ (КоличествоОстаток >= 0 И СуммаОстаток >= 0)
//	//|СГРУППИРОВАТЬ ПО	Партия, Склад, Номенклатура
//	//|ИМЕЮЩИЕ  			СУММА(КоличествоОстаток) < 0 ИЛИ СУММА(СуммаОстаток) < 0
//	|");
//	
//	Запрос.УстановитьПараметр("ДокументСсылка", ДокументОбъект.Ссылка);
//	Запрос.УстановитьПараметр("Склад", 			Склад);
//	
//	Выполнение = Запрос.Выполнить();
//	Если Не Выполнение.Пустой() Тогда
//		
//		Если ВыполнитьОтказ Тогда Отказ = Истина; КонецЕсли;
//		Сообщение = Новый СообщениеПользователю();
//	
//		Если ДокументОбъект <> Неопределено Тогда Сообщение.КлючДанных = ДокументОбъект.Ссылка КонецЕсли;
//		
//		Текст = "";
//		Сообщение.Текст = "Не достаточно партии товара(ов). После проведения будет:";
//		#Если Не ВнешнееСоединение Тогда
//			Сообщение.Сообщить(); 
//		#КонецЕсли
//		
//		Выборка = Выполнение.Выбрать();
//		Пока Выборка.Следующий() Цикл
//			
//			Сообщение.Текст = Выборка.Номенклатура + "; Партия: " + Выборка.Партия + "; Склад: " + Выборка.Склад + "
//				|Количество: " + Выборка.Количество + "; сумма: " + Выборка.Сумма;
//			
//			#Если ВнешнееСоединение Тогда
//				Если ВыполнитьОтказ Тогда Выполнить("ВызватьИсключение " + Текст) КонецЕсли;
//			#Иначе
//				Сообщение.Сообщить(); 
//			#КонецЕсли
//		КонецЦикла; КонецЕсли;
//	
//КонецПроцедуры
Процедура ПроверитьТоварыВИнтернетЗаказе(ДокументОбъект, Отказ, Заголовок = "", ПроверятьТоварами = Ложь) Экспорт
	
	//ВОЗВРАТ; // пока лень исправлять
	
	Перем ТекстФильтрПоЗаказу;
	
	// Иницилизация переменных
	
	ПараметрыСистемы = Неопределено;
	Если не ДокументОбъект.ДополнительныеСвойства.Свойство("ПараметрыСистемы", ПараметрыСистемы) Тогда
		ПараметрыСистемы = КэшируемыеФункции.ПолучитьСтруктуруПараметровсистемы();
	КонецЕсли;
	
	ВыполнитьОтказ = параметрыСистемы.КонтрольОстатков И Не ПараметрыСеанса.КонтрольОстатковВСеансеОтключен;
	
	Попытка ТекстФильтрПоЗаказу = ДокументОбъект.ПолучитьТекстЗапросаПолученияСпискаЗаказов();
	Исключение КонецПопытки;
	
	// Запрос
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Заказ.ИнтернетЗаказ,
	|	Заказ.Номенклатура,
	|	СУММА(-Заказ.КоличествоОстаток) КАК Остаток
	|ИЗ 
	|	РегистрНакопления.ИнтернетЗаказПокупателя.Остатки(,
	|" + ?(ПроверятьТоварами Или ТекстФильтрПоЗаказу = Неопределено,"
	|										Номенклатура В(" + ДокументОбъект.ПолучитьТекстЗапросаПолученияСпискаТоваров() + ")","
	|										ИнтернетЗаказ В(" + ТекстФильтрПоЗаказу + ")") + "
	|	) КАК Заказ
	|
	|СГРУППИРОВАТЬ ПО
	|	 Заказ.ИнтернетЗаказ, Заказ.Номенклатура
	|
	|ИМЕЮЩИЕ  
	|	СУММА(Заказ.КоличествоОстаток) < 0                     // Остаток ушел в минус
	|");
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументОбъект.Ссылка);
	
	Выполнение = Запрос.Выполнить();
	Если Не Выполнение.Пустой() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Количество реализуемого товара превышает количество товара по интернет-заказу", ДокументОбъект) КонецЕсли;
	
КонецПроцедуры
Процедура ПроверитьТоварыСобранные(ДокументОбъект, Отказ, Заголовок = "", Заказ = Неопределено) Экспорт
	
	// Иницилизация переменных
	
	параметрыСистемы = Неопределено;
	Если не ДокументОбъект.ДополнительныеСвойства.Свойство("ПараметрыСистемы", параметрыСистемы) Тогда
		параметрыСистемы = КэшируемыеФункции.ПолучитьСтруктуруПараметровсистемы();
	КонецЕсли;
	
	ВыполнитьОтказ = параметрыСистемы.КонтрольОстатков И Не ПараметрыСеанса.КонтрольОстатковВСеансеОтключен;
	
	// Запрос
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 	Заказ, Склад, СборочныйЛист, Номенклатура, Упаковка, -КоличествоОстаток Количество
	|ИЗ 		РегистрНакопления.ТоварыСобранные.Остатки(,
	|										Номенклатура В(" + ДокументОбъект.ПолучитьТекстЗапросаПолученияСпискаТоваров() + ")
	|" + ?(Заказ = Неопределено, "","И Заказ = &Заказ") + "
	|													)
	|ГДЕ КоличествоОстаток < 0
	|");

	Запрос.УстановитьПараметр("ДокументСсылка", 	ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("Заказ", 				Заказ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл Если ВыполнитьОтказ Тогда Отказ = Истина; КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрШаблон("Не достаточно собранного товара %1шт. 
				|[Склад] %2 [Номенклатура] %3 [Упаковка] %4
				|[Заказ] %5
				|[Сборочный лист] %6",
		Выборка.Количество, Выборка.Склад, Выборка.Упаковка, Выборка.Заказ, Выборка.СборочныйЛист), ДокументОбъект); КонецЦикла;
		
КонецПроцедуры

Процедура ПроверитьСборкуЗаказа(ДокументОбъект, Отказ, Заголовок = "", Заказ = Неопределено) Экспорт
	
	// Иницилизация переменных
	
	параметрыСистемы = Неопределено;
	Если не ДокументОбъект.ДополнительныеСвойства.Свойство("ПараметрыСистемы", параметрыСистемы) Тогда
		параметрыСистемы = КэшируемыеФункции.ПолучитьСтруктуруПараметровсистемы();
	КонецЕсли;
	
	ВыполнитьОтказ = параметрыСистемы.КонтрольОстатков  И Не ПараметрыСеанса.КонтрольОстатковВСеансеОтключен;
	
	// Запрос
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 	Номенклатура, КоличествоОстаток
	|ИЗ 		РегистрНакопления.ТоварыВСборке.Остатки(,
	|										Номенклатура В(" + ДокументОбъект.ПолучитьТекстЗапросаПолученияСпискаТоваров() + ")
	|" + ?(Заказ = Неопределено, "","И Заказ = &Заказ") + "
	|													)
	|ГДЕ		КоличествоОстаток < 0 
	|");

	
	Запрос.УстановитьПараметр("ДокументСсылка", 	ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("Заказ", 				Заказ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		Если ВыполнитьОтказ Тогда
			Отказ = Истина;
		КонецЕсли;
		
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		"Товара собрали больше чем надо " + Выборка.Номенклатура + " - собрано на " + Выборка.КоличествоОстаток + " ед. больше", 
		ДокументОбъект);
		
			
	КонецЦикла;
		
КонецПроцедуры
Процедура ПроверитьОтменуСборкиЗаказа(ДокументОбъект, Отказ, Заголовок = "", Заказ = Неопределено) Экспорт
	
	// Иницилизация переменных
	
	параметрыСистемы = Неопределено;
	Если не ДокументОбъект.ДополнительныеСвойства.Свойство("ПараметрыСистемы", параметрыСистемы) Тогда
		параметрыСистемы = КэшируемыеФункции.ПолучитьСтруктуруПараметровсистемы();
	КонецЕсли;
	
	ВыполнитьОтказ = параметрыСистемы.КонтрольОстатков  И Не ПараметрыСеанса.КонтрольОстатковВСеансеОтключен;
	
	// Запрос
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 	Номенклатура, Сборщик, Упаковка, -ВСборкеОстаток КАК ВСборке, -СобраноОстаток КАК Собрано
	|ИЗ 		РегистрНакопления.ОтменаСборкиЗаказа.Остатки(,
	|										Номенклатура В(" + ДокументОбъект.ПолучитьТекстЗапросаПолученияСпискаТоваров() + ")
	|" + ?(Заказ = Неопределено, "","И Заказ = &Заказ") + "
	|													)
	|ГДЕ		ВСборкеОстаток < 0 ИЛИ СобраноОстаток < 0
	|");

	Запрос.УстановитьПараметр("ДокументСсылка", 	ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("Заказ", 				Заказ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		Если ВыполнитьОтказ Тогда
			Отказ = Истина;
		КонецЕсли;
		
		Если Выборка.ВСборке Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Товара отменено из сборки больше чем надо " + Выборка.Номенклатура + " - отменили отправленого в сборку на " + Выборка.ВСборке + " ед. больше", 
				ДокументОбъект);
		Иначе
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Товара отменено из собранного больше чем надо " + Выборка.Номенклатура + " - отменили собраного на " + Выборка.Собрано + " ед. больше", 
				ДокументОбъект);
				
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры
Процедура ПроверитьВнутреннииЗаказы(ДокументОбъект, Отказ, Заголовок = "") Экспорт
	
	// Иницилизация переменных
	
	ПараметрыСистемы = Неопределено;
	Если не ДокументОбъект.ДополнительныеСвойства.Свойство("ПараметрыСистемы", ПараметрыСистемы) Тогда
		ПараметрыСистемы = КэшируемыеФункции.ПолучитьСтруктуруПараметровсистемы();
	КонецЕсли;
	
	ВыполнитьОтказ = параметрыСистемы.КонтрольОстатков  И Не ПараметрыСеанса.КонтрольОстатковВСеансеОтключен;;
	
	// Запрос
	
	ТекстСписка = ДокументОбъект.ПолучитьТекстЗапросаПолученияСпискаТоваров();
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Рег.Заказчик,
	|	Рег.Номенклатура,
	|	СУММА(-Рег.КоличествоОстаток) КАК Остаток
	|ИЗ 
	|	РегистрНакопления.ВнутренниеЗаказы.Остатки(,ВнутреннийЗаказ = &ДокументСсылка И Номенклатура В(" + ТекстСписка + ")) КАК Рег
	|
	|СГРУППИРОВАТЬ ПО
	|	 Рег.Заказчик, Рег.Номенклатура
	|
	|ИМЕЮЩИЕ  
	|	СУММА(Рег.КоличествоОстаток) < 0                   // Остаток ушел в минус
	|");
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументОбъект.Ссылка);
	
	ТекстНачала = "Товара заказанного по внутреннему заказу меньше чем доставлено";
	
	Выполнение = Запрос.Выполнить();
	Если Не Выполнение.Пустой() Тогда
		
		ОбработатьСообщениеОбОтрицательномОстаткеПоЗаказчику(
									Выполнение,
									ТекстНачала,
									Отказ,
									ДокументОбъект, 
									"Товары");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаказыПоставщикам(ДокументОбъект, Отказ, Заголовок = "") Экспорт
	
	// Иницилизация переменных
	
	ПараметрыСистемы = Неопределено;
	Если не ДокументОбъект.ДополнительныеСвойства.Свойство("ПараметрыСистемы", ПараметрыСистемы) Тогда
		ПараметрыСистемы = КэшируемыеФункции.ПолучитьСтруктуруПараметровсистемы();
	КонецЕсли;
	
	ВыполнитьОтказ = параметрыСистемы.КонтрольОстатков И Не ПараметрыСеанса.КонтрольОстатковВСеансеОтключен;;
	
	// Запрос
	
	ТекстСписка = ДокументОбъект.ПолучитьТекстЗапросаПолученияСпискаТоваров();
	
	//Запрос = Новый Запрос("
	//|ВЫБРАТЬ
	//|	ЗаказПоставщику Заказ,
	//|	Номенклатура,
	//|	Упаковка,
	//|	СтавкаНДС,
	//|	Цена,
	//|	СУММА(-КоличествоОстаток) КАК Остаток
	//|ИЗ 
	//|	РегистрНакопления.ЗаказыПоставщикам.Остатки(,Номенклатура В(" + ТекстСписка + "))
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	 ЗаказПоставщику, Номенклатура, Упаковка, СтавкаНДС, Цена
	//|
	//|ИМЕЮЩИЕ  
	//|	СУММА(КоличествоОстаток) < 0                   // Остаток ушел в минус
	//|");
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЗаказыПоставщикамОстатки.ЗаказПоставщику КАК Заказ,
	                      |	ЗаказыПоставщикамОстатки.Номенклатура,
	                      |	ЗаказыПоставщикамОстатки.Упаковка,
	                      |	ЗаказыПоставщикамОстатки.СтавкаНДС,
	                      |	ЗаказыПоставщикамОстатки.Цена,
	                      |	ЗаказыПоставщикамОстатки.КоличествоОстаток КАК Остаток
	                      |ИЗ
	                      |	РегистрНакопления.ЗаказыПоставщикам.Остатки(,Номенклатура В(" + ТекстСписка + ")) КАК ЗаказыПоставщикамОстатки
	                      |ГДЕ
	                      |	ЗаказыПоставщикамОстатки.КоличествоОстаток < 0");
	
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументОбъект.Ссылка);
	
	ТекстНачала = "Отрицательный остаток по заказам поставщику";
	
	Выполнение = Запрос.Выполнить();
	Если Не Выполнение.Пустой() Тогда
		
		ОбработатьСообщениеОбОтрицательномОстаткеПоЗаказу(
									Выполнение,
									ТекстНачала,
									?(ВыполнитьОтказ, Отказ, Ложь),
									ДокументОбъект, 
									"Товары");
		
	КонецЕсли;
	
	
КонецПроцедуры
Процедура ПроверитьТоварыПоставщиковВПути(ДокументОбъект, Отказ, Заголовок = "") Экспорт
	
	// Иницилизация переменных
	
	ПараметрыСистемы = Неопределено;
	Если не ДокументОбъект.ДополнительныеСвойства.Свойство("ПараметрыСистемы", ПараметрыСистемы) Тогда
		ПараметрыСистемы = КэшируемыеФункции.ПолучитьСтруктуруПараметровсистемы();
	КонецЕсли;
	
	ВыполнитьОтказ = параметрыСистемы.КонтрольОстатков И Не ПараметрыСеанса.КонтрольОстатковВСеансеОтключен;;
	
	// Запрос
	
	ТекстСписка = ДокументОбъект.ПолучитьТекстЗапросаПолученияСпискаТоваров();
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Инвойс,
	|	ЗаказПоставщику Заказ,
	|	Номенклатура,
	|	Упаковка,
	|	СтавкаНДС,
	|	Цена,
	|	СУММА(-КоличествоОстаток) КАК Остаток
	|ИЗ 
	|	РегистрНакопления.ТоварыПоставщиковВПути.Остатки(,Номенклатура В(" + ТекстСписка + "))
	|
	|СГРУППИРОВАТЬ ПО
	|	 Инвойс, ЗаказПоставщику, Номенклатура, Упаковка, СтавкаНДС, Цена
	|
	|ИМЕЮЩИЕ  
	|	СУММА(КоличествоОстаток) < 0                   // Остаток ушел в минус
	|");
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументОбъект.Ссылка);
	
	ТекстНачала = "Не достаточно товара поставщика в пути";
	
	Выполнение = Запрос.Выполнить();
	Если Не Выполнение.Пустой() Тогда
		
		ОбработатьСообщениеОбОтрицательномОстаткеПоЗаказу(
									Выполнение,
									ТекстНачала,
									?(ВыполнитьОтказ, Отказ, Ложь),
									ДокументОбъект, 
									"Товары");
		
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ПроверитьРазмещениеЗаказов(ДокументОбъект, Отказ, Заголовок = "") Экспорт
	
	// Иницилизация переменных
	
	ПараметрыСистемы = Неопределено;
	Если не ДокументОбъект.ДополнительныеСвойства.Свойство("ПараметрыСистемы", ПараметрыСистемы) Тогда
		ПараметрыСистемы = КэшируемыеФункции.ПолучитьСтруктуруПараметровсистемы();
	КонецЕсли;
	
	ВыполнитьОтказ = параметрыСистемы.КонтрольОстатков И Не ПараметрыСеанса.КонтрольОстатковВСеансеОтключен;
	
	// Запрос
	
	ТекстСписка = ДокументОбъект.ПолучитьТекстЗапросаПолученияСпискаТоваров();
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Рег.Заказ Заказ,
	|	Рег.Номенклатура 	Номенклатура,
	|	Рег.Очередь 		Очередь,
	|	СУММА(-Рег.КоличествоОстаток) КАК Остаток
	|ИЗ 
	|	РегистрНакопления.РазмещениеЗаказов.Остатки(,
	|										Номенклатура В(" + ТекстСписка + ")) КАК Рег
	|
	|СГРУППИРОВАТЬ ПО
	|	 Рег.Заказ, Рег.Номенклатура, Рег.Очередь
	|
	|ИМЕЮЩИЕ  
	|	СУММА(Рег.КоличествоОстаток) < 0                   // Остаток ушел в минус
	|");
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументОбъект.Ссылка);
	
	ТекстНачала = "Очередь на товар Количество товара в инвойсе превышает количество товара в заказах поставщикам";
	
	Выполнение = Запрос.Выполнить();
	Если Не Выполнение.Пустой() Тогда
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если ВыполнитьОтказ Тогда
				Отказ = Истина;
			КонецЕсли;
			
			Текст =
				"Не обнаружена очередь размещения на товар
				|Заказ - " + Выборка.Заказ + " очередь " + Выборка.Очередь + "
				|Номенклатура - " + Выборка.Номенклатура + "
				|в количестве " + Выборка.Остаток;
			
			#Если ВнещнееСоединение Тогда
			
				Выполнить("ВызватьИсключение " + Текст);
			
			#Иначе
				
				ОбщиеФункции.СообщитьТекст(Текст);
			
			#КонецЕсли
			
		КонецЦикла;
	КонецЕсли;
	
	
КонецПроцедуры
Процедура ПроверитьРазмещениеЗаказовВПути(ДокументОбъект, Отказ, Заголовок = "") Экспорт
	
	// Иницилизация переменных
	
	ПараметрыСистемы = Неопределено;
	Если не ДокументОбъект.ДополнительныеСвойства.Свойство("ПараметрыСистемы", ПараметрыСистемы) Тогда
		ПараметрыСистемы = КэшируемыеФункции.ПолучитьСтруктуруПараметровсистемы();
	КонецЕсли;
	
	ВыполнитьОтказ = параметрыСистемы.КонтрольОстатков И Не ПараметрыСеанса.КонтрольОстатковВСеансеОтключен;
	
	// Запрос
	
	ТекстСписка = ДокументОбъект.ПолучитьТекстЗапросаПолученияСпискаТоваров();
	
	//Запрос = Новый Запрос("
	//|ВЫБРАТЬ
	//|	Рег.Размещение 		Размещение,
	//|	Рег.Номенклатура 	Номенклатура,
	//|	Рег.ЗаказПоставщику	ЗаказПоставщику,
	//|	Рег.Очередь 		Очередь,
	//|	СУММА(-Рег.КоличествоОстаток) КАК Остаток
	//|ИЗ 
	//|	РегистрНакопления.РазмещениеЗаказовВПути.Остатки(,
	//|										Номенклатура В(" + ТекстСписка + ")) КАК Рег
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	 Рег.Размещение, Рег.Номенклатура, Рег.ЗаказПоставщику, Рег.Очередь
	//|
	//|ИМЕЮЩИЕ  
	//|	СУММА(Рег.КоличествоОстаток) < 0                   // Остаток ушел в минус
	//|");
	
	
	//
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЗаказыПоставщикамОстатки.ЗаказПоставщику,
	                      |	ЗаказыПоставщикамОстатки.Номенклатура,
	                      |	ЗаказыПоставщикамОстатки.КоличествоОстаток КАК ЗаказОстаток,
	                      |	0 КАК ВПутиОстаток
	                      |ПОМЕСТИТЬ ЗаказыОстатки
	                      |ИЗ
	                      |	РегистрНакопления.ЗаказыПоставщикам.Остатки(,Номенклатура В(" + ТекстСписка + ")) КАК ЗаказыПоставщикамОстатки
	                      |
	                      |ОБЪЕДИНИТЬ
	                      |
	                      |ВЫБРАТЬ
	                      |	ТоварыПоставщиковВПутиОстатки.ЗаказПоставщику,
	                      |	ТоварыПоставщиковВПутиОстатки.Номенклатура,
	                      |	0,
	                      |	ТоварыПоставщиковВПутиОстатки.КоличествоОстаток
	                      |ИЗ
	                      |	РегистрНакопления.ТоварыПоставщиковВПути.Остатки(,Номенклатура В(" + ТекстСписка + ")) КАК ТоварыПоставщиковВПутиОстатки
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	Рег.Номенклатура КАК Номенклатура,
	                      |	Рег.ЗаказПоставщику КАК ЗаказПоставщику,
	                      |	Рег.КоличествоОстаток КАК РазмещениеОстаток,
	                      |	естьnull(ЗаказыОстатки.ЗаказОстаток,0) КАК ЗаказОстаток,
	                      |	естьnull(ЗаказыОстатки.ВПутиОстаток,0) КАК ВПутиОстаток
	                      |ИЗ
	                      |	РегистрНакопления.РазмещениеЗаказовВПути.Остатки(,Номенклатура В(" + ТекстСписка + ")) КАК Рег
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ЗаказыОстатки КАК ЗаказыОстатки
	                      |		ПО Рег.Номенклатура = ЗаказыОстатки.Номенклатура
	                      |			И Рег.ЗаказПоставщику = ЗаказыОстатки.ЗаказПоставщику
	                      |ГДЕ
	                      |	(естьnull(ЗаказыОстатки.ЗаказОстаток,0)+естьnull(ЗаказыОстатки.ВПутиОстаток,0)-Рег.КоличествоОстаток)<0");
	
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументОбъект.Ссылка);
	
	Выполнение = Запрос.Выполнить();
	Если Не Выполнение.Пустой() Тогда
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если ВыполнитьОтказ Тогда
				Отказ = Истина;
			КонецЕсли;
			
			Если ТипЗнч(ДокументОбъект)= Тип("ДокументОбъект.ПоступлениеТоваров") Тогда
				Текст = "Поступающий товар находится в резерве. Необходимо раздать его.	
					|Номенклатура : " + Выборка.Номенклатура + "
					|Необходимо раздать: " + (-Выборка.ЗаказОстаток - Выборка.ВПутиОстаток + Выборка.РазмещениеОстаток);
			Иначе
				Текст = "Недостаточно свободного товара для размещения в заказе поставщику 	
					|Заказ поставщику : " + Выборка.ЗаказПоставщику + "
					|Номенклатура : " + Выборка.Номенклатура + "
					|Остаток заказа поставщику: " + Выборка.ЗаказОстаток+ "
					|Остаток товара в пути: " + Выборка.ВПутиОстаток+ "
					|Попытка разместить: " + Выборка.РазмещениеОстаток+ "
					|Недостача: " + (-Выборка.ЗаказОстаток - Выборка.ВПутиОстаток + Выборка.РазмещениеОстаток);
			КонецЕсли;
			
			
			#Если ВнещнееСоединение Тогда
			
				Выполнить("ВызватьИсключение " + Текст);
			
			#Иначе
				
				ОбщиеФункции.СообщитьТекст(Текст);
			
			#КонецЕсли
			
		КонецЦикла;
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ПроверитьДенежныеСредства(ДокументОбъект, Касса = Неопределено, Отказ, Заголовок = "") Экспорт
	
	// Касса - неопределено или массив касс или касса/банксч
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 	Касса, СУММА(-СуммаОстаток) КАК Сумма
	|ИЗ 		РегистрНакопления.ДенежныеСредства.Остатки(, ИСТИНА
	|" + ?(Касса <> Неопределено, ?(ТипЗнч(Касса) = Тип("Массив"), " И Касса В(&Касса) ", " И Касса = &Касса "),"") + "
	|														)
	|ГДЕ
	|	СуммаОстаток < 0
	|
	|СГРУППИРОВАТЬ ПО
	|	Касса
	|ИМЕЮЩИЕ  СУММА(СуммаОстаток) < 0
	|
	|");

	Запрос.УстановитьПараметр("Касса", 	Касса);
	
	Выборка = Запрос.Выполнить().Выбрать();
	ПОка Выборка.Следующий() Цикл
			
		Отказ = Истина;
		ОбщиеФункции.СообщитьТекст("Не достаточно средств в кассе """ + Выборка.Касса + """ - " + Выборка.Сумма);
			
	КонецЦикла;;
		
КонецПроцедуры

Процедура ПроверитьПодтверждениеОплатПоБК(ДокументОплаты, Отказ, Заголовок = "") Экспорт
	
	ВыполнитьОтказ = Не ПараметрыСеанса.КонтрольОстатковВСеансеОтключен;
	
	Запрос = Новый Запрос("
		| ВЫБРАТЬ
		|	ДокументОплаты,
		|	-СуммаОстаток КАК Остаток
		|ИЗ 
		|	РегистрНакопления.ОплатыПоБанковскимКартам.Остатки(, ДокументОплаты = &ДокументОплаты)
		|ГДЕ СуммаОстаток < 0
	 	|");
	
	Запрос.УстановитьПараметр("ДокументОплаты", ДокументОплаты);

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ВыполнитьОтказ Тогда Отказ = Истина КонецЕсли;
		ОбщиеФункции.СообщитьТекст("Банковская операция не может быть потдверждена. Отрицательный остаток """ + Выборка.ДокументОплаты + """ - " + Выборка.Остаток); КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьТоварыВРезерве(ДокументОбъект, Размещение = Неопределено, Отказ, Заголовок = "", ДокументРезерва = Неопределено) Экспорт
	
	// Иницилизация переменных
	
	параметрыСистемы = Неопределено;
	Если не ДокументОбъект.ДополнительныеСвойства.Свойство("ПараметрыСистемы", параметрыСистемы) Тогда
		параметрыСистемы = КэшируемыеФункции.ПолучитьСтруктуруПараметровсистемы();
	КонецЕсли;
	
	ВыполнитьОтказ = параметрыСистемы.КонтрольОстатков И Не ПараметрыСеанса.КонтрольОстатковВСеансеОтключен;
	
	// Запрос
	
	//Запрос = Новый Запрос("
	//|ВЫБРАТЬ 	Номенклатура, Размещение, СУММА(-КоличествоОстаток) КАК Количество, СУММА(-КоличествоОстаток) КАК Остаток, СУММА(-КоличествоОстаток) КАК Свободный
	//|ИЗ 		РегистрНакопления.ТоварыВРезерве.Остатки(,
	//|													Номенклатура.ТипНоменклатуры <> &ТипУслуга И
	//|													Номенклатура В(" + ДокументОбъект.ПолучитьТекстЗапросаПолученияСпискаРезервируемыхТоваров() + ")
	//|		" + ?(Размещение <> Неопределено, "			И Размещение = &Размещение","") + " 
	//|		" + ?(ДокументРезерва <> Неопределено, "	И ДокументРезерва = &ДокументРезерва","") + "
	//|	)
	//|ГДЕ		КоличествоОстаток < 0
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	Номенклатура, Размещение
	//|
	//|ИМЕЮЩИЕ  СУММА(КоличествоОстаток) < 0
	//|
	//|");
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 	Номенклатура, Размещение, ДокументРезерва, КоличествоОстаток КАК Количество, КоличествоОстаток КАК Остаток, КоличествоОстаток КАК Свободный
	|ИЗ 		РегистрНакопления.ТоварыВРезерве.Остатки(,
	|													Номенклатура.ТипНоменклатуры <> &ТипУслуга И
	|													Номенклатура В(" + ДокументОбъект.ПолучитьТекстЗапросаПолученияСпискаРезервируемыхТоваров() + ")
	|		" + ?(Размещение <> Неопределено, "			И Размещение = &Размещение","") + " 
	|		" + ?(ДокументРезерва <> Неопределено, "	И ДокументРезерва = &ДокументРезерва","") + "
	|	)
	|ГДЕ		КоличествоОстаток < 0
	|
	|");

	Запрос.УстановитьПараметр("ДокументСсылка", ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("Размещение", 	Размещение);
	Запрос.УстановитьПараметр("ДокументРезерва",ДокументРезерва);
	Запрос.УстановитьПараметр("ТипУслуга", 		Перечисления.ТипыНоменклатуры.Услуга);
	
	Запрос.УстановитьПараметр("ПустойСклад", 	Справочники.Склады.ПустаяСсылка());
	
	Выполнение = Запрос.Выполнить();
	Если Не Выполнение.Пустой() Тогда

		ОбработатьСообщениеОНедостачеТовара(
					Выполнение, 
					"Нет резерва товара ",
					?(ВыполнитьОтказ, Отказ, Ложь), 
					ДокументОбъект);
			
	КонецЕсли;
		
КонецПроцедуры


Процедура ПроверитьТоварыВРезервеМинусСобрано(ДокументОбъект, ДокументРезерва, Отказ, Заголовок = "" ) Экспорт
	
	
	параметрыСистемы = Неопределено;
	Если не ДокументОбъект.ДополнительныеСвойства.Свойство("ПараметрыСистемы", параметрыСистемы) Тогда
		параметрыСистемы = КэшируемыеФункции.ПолучитьСтруктуруПараметровсистемы();
	КонецЕсли;
	
	ВыполнитьОтказ = параметрыСистемы.КонтрольОстатков И Не ПараметрыСеанса.КонтрольОстатковВСеансеОтключен;
	
	
	Запрос = Новый Запрос("
	|Выбрать Номенклатура, Склад, Сумма(Количество),  Сумма(Количество) КАК Остаток,  Сумма(Количество) КАК Свободный
	|из
	|(
	|ВЫБРАТЬ 	Номенклатура, Размещение Склад, КоличествоОстаток КАК Количество
	|ИЗ 		РегистрНакопления.ТоварыВРезерве.Остатки(,Номенклатура В(" + ДокументОбъект.ПолучитьТекстЗапросаПолученияСпискаРезервируемыхТоваров() + ")
	|													И ДокументРезерва = &ДокументРезерва)
	|
	|Объединить все
	|
	|ВЫБРАТЬ 	Номенклатура, Склад, -КоличествоОстаток 
	|ИЗ 		РегистрНакопления.ТоварыСобранные.Остатки(,Номенклатура В(" + ДокументОбъект.ПолучитьТекстЗапросаПолученияСпискаРезервируемыхТоваров() + ")
	|													И Заказ = &ДокументРезерва)
	|)  ВТ
	|
	|сгруппировать по Номенклатура, Склад
	|
	|Имеющие		Сумма(Количество) < 0
	|
	|");

	Запрос.УстановитьПараметр("ДокументРезерва",ДокументРезерва);
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("ТипУслуга", 		Перечисления.ТипыНоменклатуры.Услуга);
	
	Запрос.УстановитьПараметр("ПустойСклад", 	Справочники.Склады.ПустаяСсылка());
	
	Выполнение = Запрос.Выполнить();
	Если Не Выполнение.Пустой() Тогда

		ОбработатьСообщениеОНедостачеТовара(
					Выполнение, 
					"Собрано по заказу больше чем есть в резерве ",
					?(ВыполнитьОтказ, Отказ, Ложь), 
					ДокументОбъект);
			
	КонецЕсли;
		
КонецПроцедуры



Процедура ПроверитьТоварыВРезерве_др(ДокументОбъект, Склад = Неопределено, Отказ, Заголовок = "") Экспорт
	
	// Иницилизация переменных
	
	параметрыСистемы = Неопределено;
	Если не ДокументОбъект.ДополнительныеСвойства.Свойство("ПараметрыСистемы", параметрыСистемы) Тогда
		параметрыСистемы = КэшируемыеФункции.ПолучитьСтруктуруПараметровсистемы();
	КонецЕсли;
	
	ВыполнитьОтказ = параметрыСистемы.КонтрольОстатков И Не ПараметрыСеанса.КонтрольОстатковВСеансеОтключен;
	
	// Запрос
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 	Док.Номенклатура, СУММА(-КоличествоОстаток) КАК Количество
	|ИЗ 		РегистрНакопления.ТоварыВРезерве.Остатки(,
	|										Номенклатура В(" + ДокументОбъект.ПолучитьТекстЗапросаПолученияСпискаТоваров() + ")
	|		" + ?(Склад <> Неопределено, "	И Склад = &Склад","") + ") КАК Рег
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	" + ДокументОбъект.ПолучитьТекстЗапросаПолученияТаблицыРезервируемыхТоваров() + " КАК Док
	|ПО
	|	Док.Номенклатура 	= Рег.Номенклатура И
	|	Док.Размещение 		= Рег.Размещение
	|
	|ГДЕ
	|	КоличествоОстаток < 0
	|
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура
	|
	|ИМЕЮЩИЕ  СУММА(КоличествоОстаток) < 0
	|
	|");

	Запрос.УстановитьПараметр("ДокументСсылка", ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("Склад", 			Склад);
	Запрос.УстановитьПараметр("ПустойСклад",	Справочники.Склады.ПустаяСсылка());
	
	Выполнение = Запрос.Выполнить();
	Если Не Выполнение.Пустой() Тогда

		ОбработатьСообщениеОНедостачеТовара(
					Выполнение, 
					"Не достаточно товара ", 
					?(ВыполнитьОтказ, Отказ, Ложь), 
					ДокументОбъект);
			
	КонецЕсли;
		
КонецПроцедуры
Процедура ПроверитьПередачаТовара(ДокументОбъект, Отказ, Заголовок = "") Экспорт
	
	// Иницилизация переменных
	
	ПараметрыСистемы = Неопределено;
	Если не ДокументОбъект.ДополнительныеСвойства.Свойство("ПараметрыСистемы", ПараметрыСистемы) Тогда
		ПараметрыСистемы = КэшируемыеФункции.ПолучитьСтруктуруПараметровсистемы();
	КонецЕсли;
	
	ВыполнитьОтказ = параметрыСистемы.КонтрольОстатков И Не ПараметрыСеанса.КонтрольОстатковВСеансеОтключен;;
	
	// Запрос
	
	ТекстСписка = ДокументОбъект.ПолучитьТекстЗапросаПолученияСпискаТоваров();
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДокументПередачи,
	|	Контрагент,
	|	Номенклатура,
	|	Инициатор,
	|	Размещение,			
	|	Упаковка,
	|	СтавкаНДС,
	|	-КоличествоОстаток КАК Остаток
	|
	|ИЗ 
	|	РегистрНакопления.ПередачаТоваров.Остатки(,Номенклатура В(" + ТекстСписка + "))
	|
	|ГДЕ 
	|	КоличествоОстаток < 0                   // Остаток ушел в минус
	|");
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументОбъект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И ВыполнитьОтказ Тогда
		
			Отказ = Истина;
			ОбщиеФункции.СообщитьТекст("Отрицательный остаток при передаче товара: """  + Выборка.Номенклатура + " - """ + Выборка.Остаток);
	

	КонецЕсли;
	
	
КонецПроцедуры
Процедура ПроверитьТоварыМОЛ(ДокументОбъект, МОЛ = Неопределено, Отказ, Заголовок = "") Экспорт
	
	// Иницилизация переменных
	
	ПараметрыСистемы = Неопределено;
	Если не ДокументОбъект.ДополнительныеСвойства.Свойство("ПараметрыСистемы", ПараметрыСистемы) Тогда
		ПараметрыСистемы = КэшируемыеФункции.ПолучитьСтруктуруПараметровсистемы();
	КонецЕсли;
	
	ВыполнитьОтказ = параметрыСистемы.КонтрольОстатков И Не ПараметрыСеанса.КонтрольОстатковВСеансеОтключен;;
	
	// Запрос
	
	ТекстСписка = ДокументОбъект.ПолучитьТекстЗапросаПолученияСпискаТоваров();
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Номенклатура,
	|	-КоличествоОстаток КАК Остаток
	|
	|ИЗ 
	|	РегистрНакопления.ТоварыМОЛ.Остатки(,Номенклатура В(" + ТекстСписка + ") " + ?(МОЛ = Неопределено,""," И МОЛ = &МОЛ") + ")
	|
	|ГДЕ 
	|	КоличествоОстаток < 0                   // Остаток ушел в минус
	|");
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("МОЛ", МОЛ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И ВыполнитьОтказ Тогда
		
			Отказ = Истина;
			ОбщиеФункции.СообщитьТекст("Отрицательный остаток при передаче товара: """  + Выборка.Номенклатура + " - """ + Выборка.Остаток);
	

	КонецЕсли;
	
	
КонецПроцедуры


Функция ПроверитьЛимиты(ДокументОбъект, Инициатор, Отказ, Заголовок = "") Экспорт
	
	// Иницилизация переменных
	
	ПараметрыСистемы = Неопределено;
	Если не ДокументОбъект.ДополнительныеСвойства.Свойство("ПараметрыСистемы", ПараметрыСистемы) Тогда
		ПараметрыСистемы = КэшируемыеФункции.ПолучитьСтруктуруПараметровсистемы();
	КонецЕсли;
	
	ВыполнитьОтказ = параметрыСистемы.КонтрольОстатков И Не ПараметрыСеанса.КонтрольОстатковВСеансеОтключен;;
	
	Если ТипЗнч(Инициатор) = Тип("Массив") Тогда
		физМассив = Инициатор;
	Иначе
		физМассив = Новый Массив;
		физМассив.Добавить(Инициатор); КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Инициатор,
	|	- СуммаОстаток Остаток
	|ИЗ
	|	РегистрНакопления.Лимиты.Остатки(, Инициатор В (&Инициатор))
	|ГДЕ  СуммаОстаток < 0
	|");
	
	Запрос.УстановитьПараметр("Инициатор", 	физМассив);

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И ВыполнитьОтказ Тогда
		Отказ = Истина;
		ОбщиеФункции.СообщитьТекст("Лимит для """ + Выборка.Инициатор +  """ превышен");	
	КонецЕсли;
	
КонецФункции


Процедура ОбработатьНеДостающийТоварВДокументе(ИменаКонтролируемыхРегистров, Отказ, Документ, ДополнительныеПараметры = Неопределено, КлючДанныхОбъект = Неопределено) Экспорт
	
	//ИменаРегистров 	= КонвертацияТипов.ПолучитьМассивИзСтроки(ИменаКонтрлируемыхРегистров);
	//
	//Запрос 			= Новый Запрос;
	//ТекстЗапроса 	= "";
	//
	//ЕстьСклад = ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("Склад");
	//
	//Для Каждого ИмяРегистра Из ИменаРегистров Цикл
	//	
	//	ТекстЗапроса = ТекстЗапроса + ?(ТекстЗапроса = "","","
	//											|ОБЪЕДИНИТЬ ВСЕ");
	//											
	//	Если ВРЕГ(ИмяРегистра) = "ТОВАРЫНАСКЛАДАХ" Тогда
	//		
	//		Если ЕстьСклад Тогда
	//			Запрос.УстановитьПараметр("Склад", ДополнительныеПараметры.Склад);
	//		КонецЕсли;
	//		
	//		ТекстЗапроса = ТекстЗапроса + "
	//		|ВЫБРАТЬ 	"""  + ИмяРегистра + """ КАК имяРегистра, Номенклатура, СУММА(-КоличествОстаток)
	//		|ИЗ 		РегистрНакопления.ТоварыНаСкладах(," + ?(ЕстьСклад, "Склад = &Склад","") + ")
	//		|ГДЕ		КоличествоОстаток < 0
	//		|СГРУППИРОВАТЬ ПО
	//		|	Номенклатура
	//		|";
	//		
	//	КонецЕсли;
	//КонецЦикла;
	//
	////ТекстЗапроса = ТекстЗапроса + "
	////|ВЫБРАТЬ
	////|	*
	////|ИЗ
	////|(" + ТекстЗапроса + ")
	////|ИТОГИ ПО
	////|	ИмяРегистра
	//
	//Запрос.ВыполнитьПакет();
	
КонецПроцедуры
	
Функция ВыполнитьКонтрольОстатков(
			ТекстИсточникОстатков,
			ТекстЗапросаИсточникаТоваров, 
			ПараметрыЗапроса, 
			ТекстСообщенияОшибки,
			РежимПроведения, 
			МоментВремени 			= '00010101', 
			ТекстЗаголовок 			= "", 
			КлючДанныхОбъект 		= Неопределено, 
			ИмяТабличнойЧасти 		= Неопределено, 
			ИмяПоляТабличнойЧасти 	= "")
	
	БратьПрошлое = РежимПроведения = РежимПроведенияДокумента.Неоперативный;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура
	|ПОМЕСТИТЬ
	|	СписокНоменклатуры
	|ИЗ
	|(" + ТекстЗапросаИсточникаТоваров + ") КАК Источник;
	|	
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|" + ?(ИмяТабличнойЧасти = Неопределено,"","	МАКСИМУМ(Товары.НомерСтроки - 1) КАК ИндексСтроки, ") + "
	|" + ?(БратьПрошлое, "(СУММА(ЕСТЬNULL(ОстМоментПроведения.КоличествоОстаток, 0)) - СУММА(Товары.Количество)) * -1 КАК НедостатокМоментПроведения, ","") + "
	|(СУММА(ЕСТЬNULL(ОстТекМомент.КоличествоОстаток, 0)) - СУММА(Товары.Количество)) * -1 КАК НедостатокТекМомент
	|ИЗ
	|(" + ТекстЗапросаИсточникаТоваров + ") КАК Товары
	|
	|" + ?(БратьПрошлое,"
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|" + СтрЗаменить(ТекстИсточникОстатков,"<<МоментВремени>>", "&МоментВремени") + " КАК ОстМоментПроведения
	|ПО
	|	ОстМоментПроведения.Вариант = Товары.Вариант
	|","") + "
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|" + СтрЗаменить(ТекстИсточникОстатков,"<<МоментВремени>>", "") + " КАК ОстТекМомент
	|ПО
	|	ОстТекМомент.Вариант = Товары.Вариант
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура
	|ИМЕЮЩИЕ
	|" + ?(БратьПрошлое,"	СУММА(ЕСТЬNULL(ОстМоментПроведения.КоличествоОстаток, 0)) - СУММА(Товары.Количество) < 0 Или ","") + "
	|	СУММА(ЕСТЬNULL(ОстТекМомент.КоличествоОстаток, 0)) - СУММА(Товары.Количество) < 0
	|");
	
	// Установим параметры
	
	Если МоментВремени <> '00010101' Тогда
		Запрос.УстановитьПараметр("МоментВремени", МоментВремени);
	КонецЕсли;
	
	Для КАждого Элемент Из ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
	
	// Проверим результат
	
	Выполнение = Запрос.Выполнить();
	Если Выполнение.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Подготовимся к ругани
	
	Сообщение = Новый СообщениеПользователю();
	
	Если КлючДанныхОбъект <> Неопределено Тогда
		Сообщение.КлючДанных = КлючДанныхОбъект.Ссылка;
	КонецЕсли;
	
	Если ТекстЗаголовок <> "" Тогда
		Сообщение.Текст = ТекстЗаголовок;
		Сообщение.Сообщить();
	КонецЕсли;
	
	ВыводитьПутьКОшибке = 
			ИмяТабличнойЧасти 		<> Неопределено И 
			ИмяПоляТабличнойЧасти 	<> "";
			
	// Начнем ругаться
			
	Выборка = Выполнение.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Текст = ТекстСообщенияОшибки + "
			//|" + РаботаСНоменклатурой.ПредставлениеВарианта(Выборка.Вариант) + " - ";
			|" + Строка(Выборка.Вариант) + " - ";
		
		Если БратьПрошлое И Выборка.НедостатокМоментПроведения <> 0 Тогда
			Текст = Текст + Выборка.НедостатокМоментПроведения;
		Иначе
			Текст = Текст + Выборка.НедостатокТекМомент;
		КонецЕсли;
		
		Сообщение.Текст = Текст + " шт.";;
		
		Если ВыводитьПутьКОшибке Тогда
			Сообщение.Поле = ИмяТабличнойЧасти + "[" + Выборка.ИндексСтроки + "]." + ИмяПоляТабличнойЧасти;
			Сообщение.УстановитьДанные(КлючДанныхОбъект);
		КонецЕсли;
		
		Сообщение.Сообщить();
		
	КонецЦикла;
	
	// Вернем что ничего у нас не вышло
	
	Возврат Ложь;
	
КонецФункции

Функция КонтрольОстатковТовара(
			Склад,
			ТекстЗапросаИсточникаТоваров, 
			ПараметрыЗапроса, 
			РежимПроведения, 
			МоментВремени 			= '00010101', 
			ТекстЗаголовок 			= "", 
			КлючДанныхОбъект 		= Неопределено, 
			ИмяТабличнойЧасти 		= Неопределено, 
			ИмяПоляТабличнойЧасти 	= "") Экспорт
	
	// Проверяет остатки товара
	// 	в случае нехватки выдает сообщение об ошибки
	//	и возрващает ЛОЖЬ
	//	если все нормально то возвращает ИСТИНА
	//
	// Склад						- склад с которого списываем
	// ТекстЗапросаИсточникаТоваров - Текст запроса, результат обязательно должно быть сгруппирован по варианту
	//									колонки запроса
	//										- Вариант
	//										- Количество
	//										- НомерСтроки - где находится вариант (брать по макмимуму чтобы избежать задвоенний)
	//	ПараметрыЗапроса 		- структура, перечислены параметры для запроса
	//	МоментВремени 			- момент времени докумиента списания, есть смысл если режим проведени не оперативный
	//	РежимПроведения 		- если режим проведения оперативный, тогда проверка будет только на конец текущего дня
	//								иначе проверка будет на момент проведения и на конец текущего дня
	//	ТекстЗаголовок 			- заголовок сообщения при ошибке
	//	КлючДанныхОбъект		- ключ данных тип (объект) для сообщения об ошибке
	//	ИмяТабличнойЧасти 		- имя табличной части при ошибке на которую нужно будет ссылаться
	//	ИмяПоляТабличнойЧасти 	- имя поля табличной части при ошибке на которую нужно будет ссылаться
	
	ПараметрыЗапроса.Вставить("Склад", 	Склад);
	
	Возврат ВыполнитьКонтрольОстатков(
					"РегистрНакопления.ТоварыНаСкладах.Остатки(<<МоментВремени>>, 
					|										Склад = &Склад И
					|										Вариант В(
					|													ВЫБРАТЬ 
					|														Таблица.Вариант 
					|													ИЗ 
					|														СписокВариантов КАК Таблица
					|													)
					|											)",
					ТекстЗапросаИсточникаТоваров, 
					ПараметрыЗапроса, 
					"Нехватает товара на складе",
					РежимПроведения, 
					МоментВремени, 
					ТекстЗаголовок, 
					КлючДанныхОбъект, 
					ИмяТабличнойЧасти, 
					ИмяПоляТабличнойЧасти);

	
КонецФункции
Функция КонтрольОстатковТовараВПути(
			СкладОтправитель,
			СкладПолучатель,
			ТекстЗапросаИсточникаТоваров, 
			ПараметрыЗапроса, 
			РежимПроведения, 
			МоментВремени 			= '00010101', 
			ТекстЗаголовок 			= "", 
			КлючДанныхОбъект 		= Неопределено, 
			ИмяТабличнойЧасти 		= Неопределено, 
			ИмяПоляТабличнойЧасти 	= "") Экспорт
	
	// Проверяет остатки товара
	// 	в случае нехватки выдает сообщение об ошибки
	//	и возрващает ЛОЖЬ
	//	если все нормально то возвращает ИСТИНА
	//
	// СкладОтправитель				- склад с которого отправляем 
	// СкладПолучатель				- склад для которого предназначен товар
	// ТекстЗапросаИсточникаТоваров - Текст запроса, результат обязательно должно быть сгруппирован по варианту
	//									колонки запроса
	//										- Вариант
	//										- Количество
	//										- НомерСтроки - где находится вариант (брать по макмимуму чтобы избежать задвоенний)
	//	ПараметрыЗапроса 		- структура, перечислены параметры для запроса
	//	МоментВремени 			- момент времени докумиента списания, есть смысл если режим проведени не оперативный
	//	РежимПроведения 		- если режим проведения оперативный, тогда проверка будет только на конец текущего дня
	//								иначе проверка будет на момент проведения и на конец текущего дня
	//	ТекстЗаголовок 			- заголовок сообщения при ошибке
	//	КлючДанныхОбъект		- ключ данных тип (объект) для сообщения об ошибке
	//	ИмяТабличнойЧасти 		- имя табличной части при ошибке на которую нужно будет ссылаться
	//	ИмяПоляТабличнойЧасти 	- имя поля табличной части при ошибке на которую нужно будет ссылаться
	
	ПараметрыЗапроса.Вставить("СкладОтправитель", 	СкладОтправитель);
	ПараметрыЗапроса.Вставить("СкладПолучатель", 	СкладПолучатель);
	
	Возврат ВыполнитьКонтрольОстатков(
					"РегистрНакопления.ТоварыВПути.Остатки(<<МоментВремени>>, 
					|										СкладОтправитель = &СкладОтправитель И
					|										СкладПолучатель = &СкладПолучатель И 
					|										Вариант В(
					|													ВЫБРАТЬ 
					|														Таблица.Вариант 
					|													ИЗ 
					|														СписокВариантов КАК Таблица
					|													)
					|											)",
					ТекстЗапросаИсточникаТоваров, 
					ПараметрыЗапроса, 
					"Нехватает товара в пути",
					РежимПроведения, 
					МоментВремени, 
					ТекстЗаголовок, 
					КлючДанныхОбъект, 
					ИмяТабличнойЧасти, 
					ИмяПоляТабличнойЧасти);
		
КонецФункции

Функция ОтрицательныйОстаток(пОстатки, пПараметрыДвижения)
	//avdonin {{21.09.2010#
	//
	// Входные данные:
	//  пОстатки: ТаблицаЗначений, содержит текущие остатки по складам и номенклатурам
	//		Поля: {Склад, Номенклатура, КоличествоОстаток}
	//		Индексы: {Склад, Номенклатура}
	//  пПараметрыДвижения: Любой тип со следующими подчиненными элементами
	//		Поля: {Склад, Номенклатура, Количество}
	
	строкиОстатков = пОстатки.НайтиСтроки(Новый Структура("Номенклатура, Склад", пПараметрыДвижения.Номенклатура, пПараметрыДвижения.Склад));
	Если строкиОстатков.Количество() = 0 Тогда
		новаяСтрокаОстатков = пОстатки.Добавить();
		ЗаполнитьЗначенияСвойств(новаяСтрокаОстатков, пПараметрыДвижения);
		
		новаяСтрокаОстатков.КоличествоОстаток = пПараметрыДвижения.Количество;
		Возврат новаяСтрокаОстатков.КоличествоОстаток;
	Иначе
		некаяСтрокаОстатков = строкиОстатков[0]; // в этой таблице может быть только одна такая строка
		некаяСтрокаОстатков.КоличествоОстаток = некаяСтрокаОстатков.КоличествоОстаток + пПараметрыДвижения.Количество;
		Возврат некаяСтрокаОстатков.КоличествоОстаток;
	КонецЕсли;
	//}}avdonin
КонецФункции // ПолучитьСтрокуОстатков()

Функция ОбработатьСообщениеООтрицательномОстатке(пДокументСсылка, пПараметрыДвижения, пОстаток)
	//avdonin {{21.09.2010#
	//
	
	Сообщение = Новый СообщениеПользователю();
	
	Если ЗначениеЗаполнено(пДокументСсылка) Тогда
		Сообщение.КлючДанных = пДокументСсылка;
	КонецЕсли;
	
	// Получим Товары
	
	Текст = "Отрицательный остаток по документу " + пДокументСсылка + 
			" :: Склад:" + пПараметрыДвижения.Склад + 
			" :: Номенклатура: " + пПараметрыДвижения.Номенклатура + 
			" :: Остаток:" + пОстаток;
	
	Сообщение.Текст = Текст;
	
	// Начнем ругаться
	
	#Если ВнещнееСоединение Тогда
			
		Выполнить("ВызватьИсключение " + Текст);
			
	#Иначе
		
		Сообщение.Сообщить();
			
	#КонецЕсли
		
	//}}avdonin
КонецФункции // ОбработатьСообщениеООтрицательномОстатке()

Процедура ПроверитьТоварыНаСкладахНЕОперативно(ДокументОбъект, Отказ, Заголовок = "", ОтменаПроведения = Ложь) Экспорт
	// Процедура выполняет неоперативный контроль остатка
	
	//avdonin {{12.09.2010#
	//
	
	// Входные данные:
	// ДокументОбъект - для момента времени требуется
	// движения по номенклатуре и складу :: Количество
	// - могут быть отрицательные, если делается отмена проведения
	
	// 1. Получаем остатки на момент времени документа
	//    
	
	// silber {
	
	ВОЗВРАТ; // Ваня прости, чето последовательность 8.3 не жрет
	
	параметрыСистемы = Неопределено;
	Если не ДокументОбъект.ДополнительныеСвойства.Свойство("ПараметрыСистемы", параметрыСистемы) Тогда
		параметрыСистемы = КэшируемыеФункции.ПолучитьСтруктуруПараметровсистемы();
	КонецЕсли;
	
	ВыполнитьОтказ = параметрыСистемы.КонтрольОстатков И Не ПараметрыСеанса.КонтрольОстатковВСеансеОтключен;
	
	// } silber
	
	моментВремениДокумента = ДокументОбъект.МоментВремени();
	лТоварыНаСкладах = ДокументОбъект.ДополнительныеСвойства.ТоварыНаСкладах;
	
	лСписокНоменклатуры = лТоварыНаСкладах.ВыгрузитьКолонку("Номенклатура");
	лСписокСкладов = лТоварыНаСкладах.ВыгрузитьКолонку("Склад");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Склад,
	|	Номенклатура,
	|	КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(&МоментВремени, 
	|		  Номенклатура 	В (&СписокНоменклатуры)
	|		И Склад 		В (&СписокСкладов)
	|		И Номенклатура.ТипНоменклатуры <> &ТипУслуга
	|	) КАК Остатки
	|";
	
	Запрос.УстановитьПараметр("МоментВремени"		, моментВремениДокумента);
	Запрос.УстановитьПараметр("СписокНоменклатуры"	, лСписокНоменклатуры);
	Запрос.УстановитьПараметр("СписокСкладов"		, лСписокСкладов);
	Запрос.УстановитьПараметр("ТипУслуга"			, Перечисления.ТипыНоменклатуры.Услуга);
	
	Остатки = Запрос.Выполнить().Выгрузить();
	Остатки.Индексы.Добавить("Склад, Номенклатура");
	
	Если НЕ ОтменаПроведения Тогда
		// при отмене проведения движений по документу нету. не делаем проверок текущего документа
		Для каждого лДвижение Из лТоварыНаСкладах Цикл
			// Проверим текущее движение на отрицательное движение
			лПараметры = Новый Структура("Склад, Номенклатура, Количество", лДвижение.Склад, лДвижение.Номенклатура, ?(лДвижение.ВидДвижения = ВидДвиженияНакопления.Расход, -1, 1) * лДвижение.Количество);
			
			ТекущийОстаток = ОтрицательныйОстаток(Остатки, лПараметры);
			Если ТекущийОстаток < 0 Тогда
				// текущее движение сделало отрицательный остаток
				ОбработатьСообщениеООтрицательномОстатке(ДокументОбъект.Ссылка, лДвижение, ТекущийОстаток);
				Если ВыполнитьОтказ Тогда
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// 2. Делаем запрос к последовательности и оборотам
	// 3. Делаем перебор данных последовательности и ищем отрицательные остатки
	//    - по нахождении выходим с ошибкой
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Склад,
	|	Номенклатура,
	|	Регистратор,
	|	МоментВремени
	|ПОМЕСТИТЬ ПоследовательностьДокументов
	|ИЗ
	|	Последовательность.ОстаткиТоваров КАК ОстаткиТоваров
	|ГДЕ
	|	МоментВремени > &МоментВремени
	|	И Номенклатура 	В(&СписокНоменклатуры)
	|	И Склад 		В(&СписокСкладов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Последовательность.Склад,
	|	Последовательность.Номенклатура,
	|	Последовательность.Регистратор,
	|	Последовательность.МоментВремени,
	//|	Обороты.КоличествоОборот,0 КАК Количество
	// silber {
	|	ЕСТЬNULL(Обороты.КоличествоОборот,0) КАК Количество
	// } silber
	|ИЗ
	|	ПоследовательностьДокументов КАК Последовательность
	|ЛЕВОЕ СОЕДИНЕНИЕ 
	|	РегистрНакопления.ТоварыНаСкладах.Обороты(, , Регистратор, 
	|		  Номенклатура 	В (&СписокНоменклатуры)
	|		И Склад 		В (&СписокСкладов)
	|	) КАК Обороты
	|ПО 
	|	  Последовательность.Склад 			= Обороты.Склад
	|	И Последовательность.Номенклатура 	= Обороты.Номенклатура
	|	И Последовательность.Регистратор 	= Обороты.Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Последовательность.МоментВремени";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТекущийОстаток = ОтрицательныйОстаток(Остатки, Выборка);
		Если ТекущийОстаток < 0 Тогда
			// текущее движение сделало отрицательный остаток
			ОбработатьСообщениеООтрицательномОстатке(Выборка.Регистратор, Выборка, ТекущийОстаток);
			Если ВыполнитьОтказ Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	//}}avdonin
КонецПроцедуры

// КОНТРОЛЬ С ПРОВЕДЕНИЕМ

Функция ВыполнитьКонтрольОстатковИПолучитьТаблицуСписания(
			ТекстИсточникОстатков,
			ТекстЗапросаИсточника,
			ТекстИзмеренийИсточника,
			ИзмеренияРегистраДляСписания = "",
			ПараметрыЗапроса, 
			ТекстСообщенияОшибки,
			ИмяРегистраНакопления,
			МоментВремени 				= '00010101', 
			ТекстЗаголовок	 			= "", 
			КлючДанныхОбъект	 		= Неопределено, 
			ИмяТабличнойЧасти 			= Неопределено, 
			ИмяПоляТабличнойЧасти 		= "",
			ИмяКонтролируемогоРесурса	= "Количество") Экспорт
	
	// Проверяет остатки товара
	// если все нормиально то возвращает таблицу значений для проведения
	// если не все нормально то выводит мат и возвращет неопределено
	
	
	Если МоментВремени = '00010101' Тогда
		
		МоментВремени = ТекущаяДата();
		
	КонецЕсли;
	
	Если ИзмеренияРегистраДляСписания = "" Тогда
		
		Возврат ВыполнитьКонтрольОстатков(
					ТекстИсточникОстатков,
					ТекстЗапросаИсточника, 
					ПараметрыЗапроса, 
					ТекстСообщенияОшибки,
					РежимПроведенияДокумента.Неоперативный, 
					МоментВремени, 
					ТекстЗаголовок, 
					КлючДанныхОбъект, 
					ИмяТабличнойЧасти, 
					ИмяПоляТабличнойЧасти);
					
	Иначе
		
		Ошибка = Ложь;
		
		// Подготовимся к ругани
	
		Сообщение = Новый СообщениеПользователю();
		
		Если КлючДанныхОбъект <> Неопределено Тогда
			Сообщение.КлючДанных = КлючДанныхОбъект.Ссылка;
		КонецЕсли;
		
		ВыводитьПутьКОшибке = 
			ИмяТабличнойЧасти 		<> Неопределено И 
			ИмяПоляТабличнойЧасти 	<> "";
	    	
		// Определим измерения
		
		Измерения 		= КонвертацияТипов.ПолучитьМассивИзСтроки(ИзмеренияРегистраДляСписания);
		ТекстИзмерений 	= "";
		Для Каждого Измерение Из Измерения Цикл
			ТекстИзмерений = ТекстИзмерений + ?(ТекстИзмерений = "","",", ") + Измерение;
		КонецЦикла;
		
		Запрос = Новый Запрос("
		
		// Список для фильтров
		
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|" + ТекстИзмерений + "
		|ПОМЕСТИТЬ
		|	СписокИзмерений
		|ИЗ
		|(" + ТекстЗапросаИсточника + ") КАК Источник;
		
		// Таблица потребностей
		
		|ВЫБРАТЬ
		|" + ТекстИзмеренийИсточника + ",
		|" + ?(ИмяТабличнойЧасти = Неопределено,"","	МАКСИМУМ(НомерСтроки - 1) КАК ИндексСтроки, ") + "
		|	СУММА(" + ИмяКонтролируемогоРесурса + ") КАК Требуется
		|ИЗ
		|(" + ТекстЗапросаИсточника + ") КАК Потребность
		|СГРУППИРОВАТЬ ПО
		|" + ТекстИзмеренийИсточника + "
		|;
        
		// Таблица остатков
		
		|ВЫБРАТЬ
		|" + ИзмеренияРегистраДляСписания + ",
		|" + ИмяКонтролируемогоРесурса + "Остаток КАК Остаток
		|ИЗ
		|" + ТекстИсточникОстатков + " КАК ТекущиеОстатки
		|;
		|");
	
		// Установим параметры
		
		Запрос.УстановитьПараметр("МоментВремени", МоментВремени);
		
		Для КАждого Элемент Из ПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(Элемент.Ключ, Элемент.Значение);
		КонецЦикла;
		
		// Выполним запросы
		
		Выборки = Запрос.ВыполнитьПакет();
		
		ВыборкаПотребностей = Выборки[1];
		ВыборкаОстатков 	= Выборки[2];
		                                                                                               
		// Подготовим временную таблицу для записи в нее отработанных остатков
		
		МетаИзмерения = Метаданные.РегистрыНакопления[ИмяРегистраНакопления].Измерения;
		
		Отбор 				= Новый Структура;
		ТаблицаКСписанию 	= Новый ТаблицаЗначений;
		
		Для Каждого Измерение Из Измерения Цикл
			
			МетаИзмерение = МетаИзмерения[Измерение];
			ТаблицаКСписанию.Колонки.Добавить(Измерение, МетаИзмерение.Тип);
			
			Отбор.Вставить(Измерение);
			
		КонецЦикла;
		
		ТаблицаКСписанию.Колонки.Добавить(ИмяКонтролируемогоРесурса, Новый ОписаниеТипов("Число"));
		
		// Поищим недостачу
		
		ВыборкаПотребностей.Выбрать();
		Пока ВыборкаПотребностей.Следующий() Цикл
			
			Требуется = ВыборкаПотребностей.Требуется;
			ЗаполнитьЗначенияСвойств(Отбор, ВыборкаПотребностей);
			
			ВыборкаОстатков.Выбрать();
			
			Пока ВыборкаОстатков.НайтиСледующий(Отбор) Цикл
				
				Списываем = Мин(Требуется,  ВыборкаОстатков[ИмяКонтролируемогоРесурса]);
				
				Если Списываем Тогда
					
					НовСтрока = ТаблицаКСписанию.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтрока, Отбор);
					НовСтрока[ИмяКонтролируемогоРесурса] = Списываем;
					
				КонецЕсли;
			КонецЦикла;
			
			// Если не хватило
			
			Если Требуется Тогда
				
				Если Не Ошибка Тогда
					Ошибка = Истина;
					Сообщение.Текст = ТекстЗаголовок;
					Сообщение.Сообщить();
				КонецЕсли;
				
				Текст = ТекстСообщенияОшибки + "
					//|" + РаботаСНоменклатурой.ПредставлениеВарианта(ВыборкаПотребностей.Вариант) + " - ";
					|" + Строка(ВыборкаПотребностей.Вариант) + " - ";
				
				Текст = Текст + ВыборкаПотребностей.НедостатокМоментПроведения;
				Сообщение.Текст = Текст + " шт.";;
				
				Если ВыводитьПутьКОшибке Тогда
					Сообщение.Поле = ИмяТабличнойЧасти + "[" + ВыборкаПотребностей.ИндексСтроки + "]." + ИмяПоляТабличнойЧасти;
					Сообщение.УстановитьДанные(КлючДанныхОбъект);
				КонецЕсли;
				
				Сообщение.Сообщить();
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Вернем таблицу списания
	
	Возврат ?(Ошибка, Неопределено, ТаблицаКСписанию);
			
	
КонецФункции

Процедура ПриЗаписиЗапретРедактированияПриЗаписи(Источник, Отказ) Экспорт
	
	//Если Не(
	//	
	//	РольДоступна("ПолныеПрава") Или 
	//	РольДоступна("РаботатьСЗаказНарядом") Или
	//	РольДоступна("УправлятьЗаказНарядом") Или
	//	РольДоступна("УчастиеВРазработкеСистемы")
	//		
	//		) Тогда
	//	
	////	Отказ = Истина;
	//	ОбщиеФункции.СообщитьТекст("База находится в режиме чтения!
	//						|для работы используйте 8.1 ");
	//	
	//КонецЕсли;
	
КонецПроцедуры
