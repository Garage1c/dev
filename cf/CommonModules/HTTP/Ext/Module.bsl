
Функция СформироватьAliesИзНаименования(Наименование) Экспорт
	
	ДоступныеСимволы = "_1234567890ABCDEIFGHIJKLMNOPQRSTUVWXYZАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯЁ";	
	
	Наименование_ = СтрЗаменить(Наименование, " ", "_");
	НаименованиеВРег =  ВРег(Наименование_);
	ДлинаНаим = СтрДлина(Наименование);
	alies = "";
	Для ном = 1 По ДлинаНаим Цикл
		
		Если Найти(ДоступныеСимволы, Сред(НаименованиеВРег, ном, 1)) Тогда
			alies = alies + Сред(Наименование_, ном, 1);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат alies;
	
КонецФункции
Функция СформироватьAliesИзНаименования2(Наименование) Экспорт
	
	ДоступныеСимволы 	= "-_1234567890ABCDEIFGHIJKLMNOPQRSTUVWXYZАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯЁ";
	СимволыНаТире 		= ".,=;/\- ";
	
	НаименованиеВРег 	= ВРег(СокрЛП(Наименование));
	ДлинаНаим 			= СтрДлина(СокрЛП(Наименование));
	
	СтрAlies = "";
	
	Для ном = 1 По ДлинаНаим Цикл текСимволВрег = Сред(НаименованиеВРег, ном, 1); текСимвол = Сред(Наименование, ном, 1); Если Найти(ДоступныеСимволы, текСимволВрег) Тогда СтрAlies = СтрAlies + текСимвол; ИначеЕсли Найти(СимволыНаТире, текСимволВрег) Тогда СтрAlies = СтрAlies + "-"; КонецЕсли;КонецЦикла;
	
	// { Удалить - временная мера
	
	СтрAlies = СтрЗаменить(СтрAlies, "--", "-");
	СтрAlies = СтрЗаменить(СтрAlies, "--", "-");
	СтрAlies = СтрЗаменить(СтрAlies, "--", "-");
	СтрAlies = СтрЗаменить(СтрAlies, "--", "-");
	
	Если Прав(СтрAlies,1) = "-" Тогда СтрAlies = Лев(СтрAlies, СтрДлина(СтрAlies) - 1) КонецЕсли;
	Если Прав(СтрAlies,1) = "-" Тогда СтрAlies = Лев(СтрAlies, СтрДлина(СтрAlies) - 1) КонецЕсли;
	Если Прав(СтрAlies,1) = "-" Тогда СтрAlies = Лев(СтрAlies, СтрДлина(СтрAlies) - 1) КонецЕсли;
	
	// }
	
	Возврат СтрAlies;
	
КонецФункции

Функция ПодобратьНовыйAlies(alies, Ссылка, ЭтоНовый, ИмяAlies = "alies", ВидОбъекта = "Справочник")
	
	// Функция подбирает взамен существующего alies новый,
	// текйщий alies не проверяется начинается проверка сразу со следующего
	// возвращается alies в формате alies + ближайший номер
	
	//alies = СокрЛП(Объект[ИмяAlies]);
	
	// Определим цифры справа
	СимволовЧисел = КонвертацияТипов.ПолучитьКоличествоСимволовЧислаСправа(alies);
	
	// Выделем слово без чисел
	СловоБезЧисел = Лев(alies, стрДлина(alies) - СимволовЧисел); 
	
	//Определим с какого чила будем считать
	ТекЧисло = ?(СимволовЧисел, Число(Прав(alies, СимволовЧисел)), 0);
	
	// Определим запрос
	Запрос = Новый Запрос("
		|ВЫБРАТЬ " + ИмяAlies + " 
		|ИЗ " + ВидОбъекта + "." + Ссылка.Метаданные().Имя + "
		|ГДЕ " + ИмяAlies + " = &alies" + ?(ЭтоНовый,""," 
		|И &Ссылка <> Ссылка"));
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	// Начнем перебор (надеюсь не бесконечный)
	
	Пока Истина Цикл ТекЧисло = ТекЧисло + 1;
		
		Новalies = СловоБезЧисел + ТекЧисло;
		
		Запрос.УстановитьПараметр("alies", Новalies);
		Если Запрос.Выполнить().Пустой() Тогда
			Прервать; // Нашли!
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Новalies;
	
КонецФункции
Функция ПроверитьИПолучитьНовыйAlies(Ссылка, ЭтоНовый, alies, ИмяAlies = "alies", ВидОбъекта = "Справочник") Экспорт
	
	Если не ПустаяСтрока(alies) Тогда
		
		//alies = СокрЛП(Объект[ИмяAlies]);
		
		// Уберем лишнии пробелы
		Если Найти(alies, " ") Тогда
			alies = СтрЗаменить(alies," ","_");
			//Объект[ИмяAlies] = alies; 
		КонецЕсли;
		
		
		Запрос = Новый Запрос("ВЫБРАТЬ Ссылка ИЗ " + ВидОбъекта + "." + Ссылка.Метаданные().Имя + " ГДЕ " + ИмяAlies + " = &alies" +
					?(ЭтоНовый,""," И &Ссылка <> Ссылка"));
					
		Запрос.УстановитьПараметр("alies", 	alies);
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			// Если никак то запишем ошибку в журнал и измеим alies
			
			стalies 			= alies;
			//Объект[ИмяAlies] 	= ПодобратьНовыйAlies(Объект, ИмяAlies);
			alies = ПодобратьНовыйAlies(alies, Ссылка, ЭтоНовый, ИмяAlies, ВидОбъекта);
			
			ЗаписьЖурналаРегистрации(
							"Сайт.Формирование alies`а", 
							УровеньЖурналаРегистрации.Ошибка,
							Ссылка.Метаданные(),
							Ссылка,
							"Ошибка при записи alies (" + стalies + ") такой уже существует
							|подобран новый alies - " + Alies);
		КонецЕсли;
	КонецЕсли;
	
	Возврат alies;
	
КонецФункции

Функция ПолучитьТипЦенПользователяИнтернет(ИнтернетПользователь) Экспорт
	
	Если НЕ ИнтернетПользователь.ТипЦен.Пустая() Тогда
		
		Возврат ИнтернетПользователь.ТипЦен;
		
	Иначе	
		
		Возврат Справочники.ТипыЦен.НайтиПоКоду("000000004"); // если тип цен не задан, возвращается Розничный
		
	КонецЕсли;

КонецФункции

Функция ПолучитьОбъектПоСсылке(Менеджер, стрУникальныйИдентификатор, стрОшибки = "") Экспорт
	
	Если стрУникальныйИдентификатор = "00000000-0000-0000-0000-000000000000" Тогда Возврат Неопределено КонецЕсли;
	
	Попытка
		Ссылка = Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(стрУникальныйИдентификатор));
	Исключение
		стрОшибки = "ошибка получения объекта по уникальному идентификатору (" + Менеджер + "
						|GUID = " + стрУникальныйИдентификатор + ")";
		Возврат Неопределено;
	КонецПопытки;
		
	Если Ссылка.ПолучитьОбъект() = Неопределено Тогда
			
		стрОшибки = "Не найден объект менеджера " + Строка(Менеджер) + " по GUID """ + стрУникальныйИдентификатор + """";
		Возврат Неопределено;
			
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции
Функция ПолучитьОдинИзОбъектовПоСсылке(Менеджеры, стрУникальныйИдентификатор, стрОшибки = "") Экспорт
	
	НеНайден 		= Истина;
	ТекстМенеджеров = "";
	
	Для Каждого Менеджер Из Менеджеры Цикл
	
		Попытка
			Ссылка = Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(стрУникальныйИдентификатор));
		Исключение
			ТекстМенеджеров = ТекстМенеджеров + ?(ТекстМенеджеров = "","",", ") + Строка(Менеджер);
			Продолжить;
		КонецПопытки;
		
		Если Ссылка.ПолучитьОбъект() = Неопределено Тогда
			ТекстМенеджеров = ТекстМенеджеров + ?(ТекстМенеджеров = "","",", ") + Строка(Менеджер);
			Продолжить;
		КонецЕсли;
		
		НеНайден = Ложь;
		Прервать;
		
	КонецЦикла;
	
	Если НеНайден Тогда
		стрОшибки = "Не найден объект менеджера по уникальному идентификатору (" + ТекстМенеджеров + "
							|GUID = " + стрУникальныйИдентификатор + ")";
		Возврат Неопределено;
	КонецЕсли;
		
	Возврат Ссылка;
	
КонецФункции


Функция UTFвANSI_херня(СтрокаКОИ8) Экспорт
	
	КОИ8="&#9577;&#9500;&#9554;&#9574;&#9532;&#9580;&#9567;&#9608;&#9612;&#9484;&#9562;&#9600;&#9566;&#9496;&#9579;&#9524;&#9576;&#9573;&#9575;&#9568;&#9472;&#9555;&#9604;&#9572;&#9616;&#9561;&#9552;&#9556;&#9560;&#9578;&#9516;&#9492;гъуїыхюч&#8730;¤·ш ц&#8729;ўсЁЄяьфЎ№ё&#9632;єэщЇ°тр&#9474;";

	АНСИ = "ЙЦУКЕНГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮЁйцукенгшщзхъфывапролджэячсмитьбюё";
	
	СтрокаАНСИ = "";
	
	Для к=1 по СтрДлина(СтрокаКОИ8) Цикл
		СтрокаАНСИ=СтрокаАНСИ+Сред(АНСИ,Найти(КОИ8,Сред(СтрокаКОИ8,к,1)),1);
	КонецЦикла;

	Возврат СтрокаАНСИ

КонецФункции
Функция UTFвANSI_Ст2(СтрокаКОИ8) Экспорт
	
	Попытка
		ScrCtrl = Новый COMОбъект("MSScriptControl.ScriptControl");
	Исключение
		Возврат СтрокаКОИ8;
	КонецПопытки;
	
	ScrCtrl.Language = "JScript";
	
	Попытка
		Сообщение = ScrCtrl.eval("var uri='" + СтрокаКОИ8 + "'; decodeURI(uri);");
	Исключение
		Сообщение = СтрокаКОИ8;
	КонецПопытки;
	
	Возврат Сообщение;

КонецФункции

Функция UTFвANSI(СтрокаUTF) Экспорт
	
	СоответсвиеUTFкANSI = КэшируемыеФункции.ПолучитьСоответсвиеUTFкANSI();
	
	текПозиция 	= 1;
	СтрокаANSI 	= "";
	ДлинаСтроки = СтрДлина(СтрокаUTF);
	ЕстьЗамена 	= Ложь;
	
	Пока текПозиция <= ДлинаСтроки Цикл
	
		Символ = Сред(СтрокаUTF, текПозиция, 2);
		
		Если Символ = "\u" Тогда
			
			текПозиция 	= текПозиция + 2;
			
			ЗамененныйСимвол = СоответсвиеUTFкANSI.Получить(ВРег(Сред(СтрокаUTF, текПозиция, 4)));
			Если ЗамененныйСимвол <> Неопределено Тогда
				
				Символ 		= ЗамененныйСимвол;
				текПозиция 	= текПозиция + 4;
				
				ЕстьЗамена = Истина;
				
			КонецЕсли;
		Иначе
			
			Символ 		= Сред(СтрокаUTF, текПозиция, 1);
			текПозиция 	= текПозиция + 1;
			
		КонецЕсли;
		
		СтрокаANSI = СтрокаANSI + Символ;
		
	КонецЦикла;
	
	Если ЕстьЗамена Тогда
		
		ЗаписьЖурналаРегистрации(
			"UTFвANSI.Преобразование текста", 
			УровеньЖурналаРегистрации.Информация,
			,
			,
			"строка UTF:
			|" + СтрокаUTF + "
			|
			|Строка ANSI:
			|" + СтрокаANSI);
		
	КонецЕсли;

	Возврат СтрокаANSI;
	
КонецФункции
	


Функция ПолучитьGUIDПользователяИнтернетИзКонтрагента(СсылкаКонтрагент) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ  РАЗРЕШЕННЫЕ ссылка ПользовательИнтернет ИЗ Справочник.ПользователиИнтернет ГДЕ Контрагент = &Контрагент");
	Запрос.УстановитьПараметр("Контрагент", СсылкаКонтрагент);
	
	Выполнение = Запрос.Выполнить();
	Если Выполнение.Пустой() Тогда
		
		Возврат "";
		
	Иначе
		
		Выборка = Выполнение.Выбрать();
		Выборка.Следующий();
		Возврат XMLСтрока(Выборка.ПользовательИнтернет);
		
	КонецЕсли;
	
КонецФункции


Функция ПолучитьКлючСайта()
	
	Возврат "R5yQvf9T6C22d1qdkDPj";
	
КонецФункции
                     
Функция POST_раб(ТекстЗапроса, РесурсНаСервере, ОтветСервера = "") Экспорт
	
	Сервер = Константы.ИмяСервераСайта.Получить();
	Если ПустаяСтрока(Сервер) Тогда
		ОбщиеФункции.СообщитьТекст("Не задан сервер сайта");
		Возврат Ложь;
	КонецЕсли;
	
	//Определяем имя файла ответа от веб-сервера
    ИмяФайлаОтвета 		= ПолучитьИмяВременногоФайла("out");
	ИмяФайлаОтправки 	= ПолучитьИмяВременногоФайла("in");
	
	ФайлОтправки = Новый ТекстовыйДокумент;
	ФайлОтправки.УстановитьТекст(XMLСтрока("A1=B2&api_key=R5yQvf9T6C22d1qdkDPj&" + ТекстЗапроса));
	
	
	ФайлОтправки.Записать(ИмяФайлаОтправки);
		
	//Формируем заголовок POST-запроса.
	
	ЗаголовокHTTP = Новый Соответствие();
    //При необходимости зададим Referer, например таким образом
    СтрокаСоединения 	= СтрокаСоединенияИнформационнойБазы();
    СерверИсточник 		= НСтр(СтрокаСоединения, "Srvr") + НСтр(СтрокаСоединения, "Ref");
	
	ЗаголовокHTTP.Вставить("Referer", СерверИсточник);

    //Укажем формат данных Content-Type
    ЗаголовокHTTP.Вставить("Content-Type", "application/x-www-form-urlencoded");

    //Укажем длину POST-запроса Content-Length
    ФайлОтправки 			= Новый Файл(ИмяФайлаОтправки);
    РазмерФайлаОтправки 	= XMLСтрока(ФайлОтправки.Размер());
	
	ЗаголовокHTTP.Вставить("Content-Length", РазмерФайлаОтправки);
 
	Сервер 	= Константы.ИмяСервераСайта.Получить(); //Естественно, следует указать свой адрес.
    Порт 	= 80; 							//Это общепринятый порт. Возможно, для вашего сервера применяется другой. Конкретное значение уточните у хостера.
	
	Попытка
		НТТР = Новый HTTPСоединение(Сервер, Порт);
	Исключение
		ОбщиеФункции.СообщитьТекст("Ошибка инициализации HTTPСоединение - " + ОписаниеОшибки());
		Возврат Ложь;		
	КонецПопытки;
 
	Попытка
        НТТР.ОтправитьДляОбработки(ИмяФайлаОтправки, РесурсНаСервере, ИмяФайлаОтвета, ЗаголовокHTTP);
    Исключение
        ОбщиеФункции.СообщитьТекст("Ошибка POST запроса - " + ОписаниеОшибки());
    КонецПопытки;

    //Удалим файл отправки POST-запроса. Больше он нам не нужен.
	
	Попытка
		УдалитьФайлы(ИмяФайлаОтправки);
	Исключение
	КонецПопытки;
 
	//Отправили данные, анализируем ответ сервера.
    ФайлОтвета = Новый Файл(ИмяФайлаОтвета);
	Если ФайлОтвета.Существует() Тогда
		
		ТекстОтвета = Новый ТекстовыйДокумент();
        ТекстОтвета.Прочитать(ИмяФайлаОтвета);
		
        Если ТекстОтвета.КоличествоСтрок() > 0 Тогда
			
			ОтветСервера = ТекстОтвета.ПолучитьТекст();
            ОбщиеФункции.СообщитьТекст(ОтветСервера);
			
		Иначе
			
            ОбщиеФункции.СообщитьТекст("Отправка файла на сервер: Получен пустой ответ сервера.");
			
        КонецЕсли;

		Попытка
        	УдалитьФайлы(ИмяФайлаОтвета);
		Исключение
		КонецПопытки;
		
    Иначе
		
		ОбщиеФункции.СообщитьТекст("Отправка файла на сервер: Ответ сервера не получен.");
		
	КонецЕсли;
	
	Возврат Истина;
 		
КонецФункции
Функция POST(ТекстЗапроса, РесурсНаСервере, ОтветСервера = "", стрОшибки = "") Экспорт
	
	Сервер = Константы.ИмяСервераСайта.Получить();
	Если ПустаяСтрока(Сервер) Тогда
		стрОшибки = "Не задан сервер сайта";
		ОбщиеФункции.СообщитьТекст(стрОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	//Определяем имя файла ответа от веб-сервера
    ИмяФайлаОтвета 		= ПолучитьИмяВременногоФайла("out");
	ИмяФайлаОтправки 	= ПолучитьИмяВременногоФайла("in");
	
	ФайлОтправки = Новый ЗаписьТекста(ИмяФайлаОтправки, КодировкаТекста.UTF8);
	ФайлОтправки.Записать(XMLСтрока("A1=B2&api_key=R5yQvf9T6C22d1qdkDPj" + ТекстЗапроса));
	
	ФайлОтправки.Закрыть();
		
	//Формируем заголовок POST-запроса.
	
	ЗаголовокHTTP = Новый Соответствие();
    //При необходимости зададим Referer, например таким образом
    СтрокаСоединения 	= СтрокаСоединенияИнформационнойБазы();
    СерверИсточник 		= НСтр(СтрокаСоединения, "Srvr") + НСтр(СтрокаСоединения, "Ref");
	
	ЗаголовокHTTP.Вставить("Referer", СерверИсточник);

    //Укажем формат данных Content-Type
    ЗаголовокHTTP.Вставить("Content-Type", "application/x-www-form-urlencoded");

    //Укажем длину POST-запроса Content-Length
    ФайлОтправки 			= Новый Файл(ИмяФайлаОтправки);
    РазмерФайлаОтправки 	= XMLСтрока(ФайлОтправки.Размер());
	
	ЗаголовокHTTP.Вставить("Content-Length", РазмерФайлаОтправки);
 
	Сервер 	= Константы.ИмяСервераСайта.Получить(); //Естественно, следует указать свой адрес.
    Порт 	= 80; 							//Это общепринятый порт. Возможно, для вашего сервера применяется другой. Конкретное значение уточните у хостера.
	
	Попытка
		НТТР = Новый HTTPСоединение(Сервер, Порт);
	Исключение
		
		опОшибки = ОписаниеОшибки();
		стрОшибки = "Ошибка инициализации HTTPСоединение - " + опОшибки;
		ОбщиеФункции.СообщитьТекст(опОшибки);
		
		ЗаписьЖурналаРегистрации(
				"Отправление POST сайту", 
				УровеньЖурналаРегистрации.Ошибка,,,
				"Вызван метод: НТТР = Новый HTTPСоединение(Сервер, Порт);
				|Параметры: сервер - " + Сервер + ", порт - " + Порт + "
				|Ошибка: " + опОшибки);
				
		Возврат Ложь;		
		
	КонецПопытки;
 
	Попытка
        НТТР.ОтправитьДляОбработки(ИмяФайлаОтправки, РесурсНаСервере, ИмяФайлаОтвета, ЗаголовокHTTP);
    Исключение
		
		опОшибки = ОписаниеОшибки();
		ОбщиеФункции.СообщитьТекст("Ошибка POST запроса - " + опОшибки);
		
		ЗаписьЖурналаРегистрации(
				"Отправление POST сайту", 
				УровеньЖурналаРегистрации.Ошибка,,,
				"Вызван метод: НТТР.ОтправитьДляОбработки(ИмяФайлаОтправки, РесурсНаСервере, ИмяФайлаОтвета, ЗаголовокHTTP);
				|Параметры: ИмяФайлаОтправки - " + ИмяФайлаОтправки + "
				|Параметры: РесурсНаСервере - " + РесурсНаСервере + "
				|Параметры: ИмяФайлаОтвета - " + ИмяФайлаОтвета + "
				|Параметры: ЗаголовокHTTP - " + ЗаголовокHTTP.Получить("Content-Type") + ", " + ЗаголовокHTTP.Получить("Content-Length") + ", " +ЗаголовокHTTP.Получить("Referer") + "
				|Ошибка: " + опОшибки);
		                                   
    КонецПопытки;

    //Удалим файл отправки POST-запроса. Больше он нам не нужен.
	
	//Попытка
	//	УдалитьФайлы(ИмяФайлаОтправки);
	//Исключение
	//КонецПопытки;
 
	//Отправили данные, анализируем ответ сервера.
    ФайлОтвета = Новый Файл(ИмяФайлаОтвета);
	Если ФайлОтвета.Существует() Тогда
		
		ТекстОтвета = Новый ТекстовыйДокумент();
        ТекстОтвета.Прочитать(ИмяФайлаОтвета);
		
        Если ТекстОтвета.КоличествоСтрок() > 0 Тогда
			
			ОтветСервера = ТекстОтвета.ПолучитьТекст();
            ОбщиеФункции.СообщитьТекст(ОтветСервера);
			
		Иначе
			
			стрОшибки = "Отправка файла на сервер: Получен пустой ответ сервера.";
            ОбщиеФункции.СообщитьТекст(стрОшибки);
			
        КонецЕсли;

		Попытка
        	УдалитьФайлы(ИмяФайлаОтвета);
		Исключение
		КонецПопытки;
		
    Иначе
		
		стрОшибки = "Отправка файла на сервер: Ответ сервера не получен.";
		ОбщиеФункции.СообщитьТекст(стрОшибки);
		
	КонецЕсли;
	
	Возврат Истина;
 		
КонецФункции
Функция GET(РесурсНаСервере, ОтветСервера = "", стрОшибки = "") Экспорт
	
	Сервер = Константы.ИмяСервераСайта.Получить();
	Если ПустаяСтрока(Сервер) Тогда
		стрОшибки = "Не задан сервер сайта";
		ОбщиеФункции.СообщитьТекст(стрОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	//Определяем имя файла ответа от веб-сервера
    ИмяФайлаОтвета 		= ПолучитьИмяВременногоФайла("out");

	//Формируем заголовок GET-запроса.
	
	ЗаголовокHTTP = Новый Соответствие();
    //При необходимости зададим Referer, например таким образом
    СтрокаСоединения 	= СтрокаСоединенияИнформационнойБазы();
    СерверИсточник 		= НСтр(СтрокаСоединения, "Srvr") + НСтр(СтрокаСоединения, "Ref");
	
	ЗаголовокHTTP.Вставить("Referer", СерверИсточник);

    //Укажем формат данных Content-Type
    ЗаголовокHTTP.Вставить("Content-Type", "application/x-www-form-urlencoded");

    Сервер 	= Константы.ИмяСервераСайта.Получить(); //Естественно, следует указать свой адрес.
    Порт 	= 80; 									//Это общепринятый порт. Возможно, для вашего сервера применяется другой. Конкретное значение уточните у хостера.
	
	Попытка
		НТТР = Новый HTTPСоединение(Сервер, Порт);
	Исключение
		опОшибки = ОписаниеОшибки();
		стрОшибки = "Ошибка инициализации HTTPСоединение - " + опОшибки;
		ОбщиеФункции.СообщитьТекст(опОшибки);
		Возврат Ложь;		
	КонецПопытки;
 
	Попытка
        НТТР.Получить(РесурсНаСервере, ИмяФайлаОтвета, ЗаголовокHTTP);
    Исключение
        ОбщиеФункции.СообщитьТекст("Ошибка GET запроса - " + ОписаниеОшибки());
    КонецПопытки;

    //Удалим файл отправки POST-запроса. Больше он нам не нужен.
	
	//Отправили данные, анализируем ответ сервера.
    ФайлОтвета = Новый Файл(ИмяФайлаОтвета);
	Если ФайлОтвета.Существует() Тогда
		
		ТекстОтвета = Новый ТекстовыйДокумент();
        ТекстОтвета.Прочитать(ИмяФайлаОтвета);
		
        Если ТекстОтвета.КоличествоСтрок() > 0 Тогда
			
			ОтветСервера = ТекстОтвета.ПолучитьТекст();
            ОбщиеФункции.СообщитьТекст(ОтветСервера);
			
		Иначе
			
			стрОшибки = "Получение файла на сервере: Получен пустой ответ сервера.";
            ОбщиеФункции.СообщитьТекст(стрОшибки);
			
        КонецЕсли;

		Попытка
        	УдалитьФайлы(ИмяФайлаОтвета);
		Исключение
		КонецПопытки;
		
    Иначе
		
		стрОшибки = "Получение файла на сервере: Ответ сервера не получен.";
		ОбщиеФункции.СообщитьТекст(стрОшибки);
		
	КонецЕсли;
	
	Возврат Истина;
 		
КонецФункции
Функция PUT(ТекстЗапроса, РесурсНаСервере) Экспорт
	
	Сервер = Константы.ИмяСервераСайта.Получить();
	Если ПустаяСтрока(Сервер) Тогда
		ОбщиеФункции.СообщитьТекст("Не задан сервер сайта");
		Возврат Ложь;
	КонецЕсли;
	
	//Определяем имя файла ответа от веб-сервера
    ИмяФайлаОтправки 	= ПолучитьИмяВременногоФайла("in");
	
	ФайлОтправки = Новый ТекстовыйДокумент;
	ФайлОтправки.УстановитьТекст("api_key=R5yQvf9T6C22d1qdkDPj," + Символы.ПС + ТекстЗапроса);
	
	ФайлОтправки.Записать(ИмяФайлаОтправки);
		
	//Формируем заголовок POST-запроса.
	
	ЗаголовокHTTP = Новый Соответствие();
    //При необходимости зададим Referer, например таким образом
    СтрокаСоединения 	= СтрокаСоединенияИнформационнойБазы();
    СерверИсточник 		= НСтр(СтрокаСоединения, "Srvr") + НСтр(СтрокаСоединения, "Ref");
    ЗаголовокHTTP.Вставить("Referer", СерверИсточник);

    //Укажем формат данных Content-Type
    ЗаголовокHTTP.Вставить("Content-Type", "application/x-www-form-urlencoded");

    //Укажем длину POST-запроса Content-Length
    ФайлОтправки 			= Новый Файл(ИмяФайлаОтправки);
    РазмерФайлаОтправки 	= XMLСтрока(ФайлОтправки.Размер());
	
	ЗаголовокHTTP.Вставить("Content-Length", РазмерФайлаОтправки);
 
	Сервер 	= Константы.ИмяСервераСайта.Получить(); //Естественно, следует указать свой адрес.
    Порт 	= 80; 							//Это общепринятый порт. Возможно, для вашего сервера применяется другой. Конкретное значение уточните у хостера.
	
	Попытка
		НТТР = Новый HTTPСоединение(Сервер, Порт);
	Исключение
		ОбщиеФункции.СообщитьТекст("Ошибка инициализации HTTPСоединение - " + ОписаниеОшибки());
		Возврат Ложь;		
	КонецПопытки;
 
	Попытка
        НТТР.Записать(ИмяФайлаОтправки, РесурсНаСервере, ЗаголовокHTTP);
    Исключение
        ОбщиеФункции.СообщитьТекст("Ошибка PUT запроса - " + ОписаниеОшибки());
		Возврат Ложь;
    КонецПопытки;

    //Удалим файл отправки POST-запроса. Больше он нам не нужен.
	
	Попытка
		УдалитьФайлы(ИмяФайлаОтправки);
	Исключение
	КонецПопытки;
 
	Возврат Истина;
 		
КонецФункции

Функция ПолучитьНазваниеEvent(КомандаHTTP)
	
	Если КомандаHTTP = Перечисления.КомандыHTTP.POST Тогда
		
		Возврат "create";
		
	ИначеЕсли КомандаHTTP = Перечисления.КомандыHTTP.DELETE Тогда
		
		Возврат "delete";
		
	Иначе
		
		Возврат "update";
		
	КонецЕсли;
	
КонецФункции

Функция ДатьЗаданиеНаИзменениеСайту(СсылкаНаОбъект, Команда, АдресРесурса, ТелоЗапроса = "", ЭтоТригер = Ложь) Экспорт
	
	ВОЗВРАТ ИСТИНА; // Отключаем
	
	Запись = РегистрыСведений.БуферКомандДляСайта.СоздатьМенеджерЗаписи();
	
	Запись.Объект 				= СсылкаНаОбъект;
	Запись.КомандаHTTP 			= Команда;
	Запись.АдресРесурсаСервера 	= АдресРесурса;
	Запись.ТелоЗапроса			= ТелоЗапроса;
	Запись.ЭтоТригер			= ЭтоТригер;
	
	Попытка
		
		Запись.Записать();
		
	Исключение
		
		ОбщиеФункции.СообщитьТекст("Ошибка при записи команды сайту - " + ОписаниеОшибки());
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьСтруктуруHTTP_метода(Команда = "", АдресРесурса, ДобавлятьГуидВАдрес = Ложь, ТелоЗапроса = "", ДобавитьТелоЗапросаОбъекта = "", ЭтоТригер = Ложь) Экспорт
	
	Возврат Новый Структура("Команда, АдресРесурса, ДобавлятьГуидВАдрес, ТелоЗапроса, ДобавитьТелоЗапросаОбъекта, ЭтоТригер", 
					Команда, АдресРесурса, ДобавлятьГуидВАдрес, ТелоЗапроса, ДобавитьТелоЗапросаОбъекта, ЭтоТригер);
	
КонецФункции


// Отправление запросов сайту кучей

Функция ВыполнитьКомандуОчередиСайту(ВыборкаКоманд)
	
	ТекстГуидов				= "";
	ОтветСервера 			= "";
	МаксимумГуидовВОчереди 	= 50;
	КолОбъектов 			= 0;
	Ошибки 					= Ложь;
	
	// Обработаем очередь в 1с
	
	Пока ВыборкаКоманд.Следующий() Цикл
		
		Выборка = ВыборкаКоманд.Выбрать();
		Пока Выборка.Следующий() Цикл КолОбъектов = КолОбъектов + 1;
		
			// Удалим записи
			
			Запись = РегистрыСведений.БуферКомандДляСайта.СоздатьМенеджерЗаписи();
			Запись.Объект = Выборка.Объект;
			
			Попытка
				Запись.Удалить();
			Исключение
				опОшибки = ОписаниеОшибки();
				ЗаписьЖурналаРегистрации("HTTP.Ошибка удаления объекта из очереди сайту",
										УровеньЖурналаРегистрации.Ошибка,
										Выборка.Объект.Метаданные(),
										Выборка.Объект,
										"Запрос на сайт для данного объекта отправлен не будет.
										|Команда = " + строка(Выборка.КомандаHTTP) + "
										|" + опОшибки);
				Ошибки = Истина;
				Продолжить;
			КонецПопытки;
		
			// Сформируем строку
		
			ТекстГуидов = ТекстГуидов + "&guids[]=" + XMLСтрока(Выборка.Объект);
			
		КонецЦикла;
	
		// Обработаем очередь на сайте
		
		стрОшибки = "";
		Если POST(ТекстГуидов + "&_method=" + Строка(ВыборкаКоманд.КомандаHTTP),
						ВыборкаКоманд.АдресРесурсаСервера, 
						ОтветСервера,
						стрОшибки) Тогда
						
			ЗаписьЖурналаРегистрации(
				"HTTP.Отправление POST сайту", 
				УровеньЖурналаРегистрации.Информация, 
				,
				Выборка.Объект,
				"Количество объектов: " + КолОбъектов + "
				|Комманда: " + строка(ВыборкаКоманд.КомандаHTTP) + "
				|Ответ сервера:
				| " + ОтветСервера);
				
		Иначе
				
			Ошибки = Истина;
			ЗаписьЖурналаРегистрации(
				"HTTP.при отправление POST сайту произошли ошибки", 
				УровеньЖурналаРегистрации.Ошибка, 
				,
				Выборка.Объект,
				"описание ошибки:
				| " + стрОшибки);
				
		КонецЕсли;
	КонецЦикла;
					
	Возврат не Ошибки;
	
КонецФункции
Процедура ОтправленияЗапросовСайту_много() Экспорт
	
	Менеджер = РегистрыСведений.БуферКомандДляСайта;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Объект,
	|	КомандаHTTP,
	|	АдресРесурсаСервера
	|ИЗ
	|	РегистрСведений.БуферКомандДляСайта
	|ИТОГИ ПО
	|	АдресРесурсаСервера, КомандаHTTP
	|");
	
	ВыборкаРесурсов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Пока ВыборкаРесурсов.Следующий() Цикл
		
		Выборка = ВыборкаРесурсов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		
		Если Не ВыполнитьКомандуОчередиСайту(Выборка) Тогда
		
			//ЗаписьЖурналаРегистрации("HTTP.Ошибка выполнения очереди сайту",
			//								УровеньЖурналаРегистрации.Ошибка,,,
			//								Ошибка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Отправление запросов сайту по одному

Функция ВыполнитьКомандуСайту(Выборка, guids = "", Ошибка = "", ОтветСервера = "")
	
	ОтветСервера = "";
	guid = ?(guids = "", XMLСтрока(Выборка.Объект), guids);
			
	Если Выборка.ВидОбъекта = "Номенклатура" Тогда
	//ЕСЛИ ИСТИНА ТОГДА
	
		PostТекст = "&guids[]=" + guid + "&_method=" + Строка(Выборка.КомандаHTTP) + Выборка.ТелоЗапроса;
	
		
		Если POST(PostТекст, Выборка.АдресРесурсаСервера, ОтветСервера) Тогда
					
			ЗаписьЖурналаРегистрации(
				"Отправление POST сайту", 
				УровеньЖурналаРегистрации.Информация, 
				,
				Выборка.Объект,
				"POST:
				|" + PostТекст + "
				|
				|Adres: " + Выборка.АдресРесурсаСервера + "
				|
				|Ответ сервера:
				|" + ОтветСервера);
				
			Возврат Истина;
			
		Иначе
			
			Возврат Ложь;
			
		КонецЕсли;
		
	ИначеЕсли  Выборка.ВидОбъекта = "Обычный"  Тогда
		
		Если Выборка.ЭтоТригер Тогда
			
			Текст = "&guids[]=" + guid + "&event=" + ПолучитьНазваниеEvent(Выборка.КомандаHTTP);
			
			//Если POST(Текст,
			//		Выборка.АдресРесурсаСервера + Текст, 
			//		ОтветСервера) Тогда
			
			стрОшибки = "";
			
			РесурсНаСервере = Выборка.АдресРесурсаСервера + "?api_key=R5yQvf9T6C22d1qdkDPj&" + Текст;
			
			Если GET(
					РесурсНаСервере, 
					ОтветСервера,
					стрОшибки) Тогда
			
			
			
				ЗаписьЖурналаРегистрации(
					"HTTP.Отправление GET сайту", 
					УровеньЖурналаРегистрации.Информация, 
					,
					Выборка.Объект,
					"Отправлен url:
					|" + РесурсНаСервере + "
					|
					|Ответ сервера:
					|" + ОтветСервера);
					
				Возврат Истина;
			
			Иначе
				
				Возврат Ложь;
				
			КонецЕсли;

		Иначе
			
			POSTТекст = "&_method=" + Строка(Выборка.КомандаHTTP) + Выборка.ТелоЗапроса;
				 
			//Если POST("&_method=" + Строка(Выборка.КомандаHTTP) + ?(ПустаяСтрока(Выборка.ТелоЗапроса),"",Выборка.ТелоЗапроса), 
			Если POST(	POSTТекст,
						Выборка.АдресРесурсаСервера, 
						ОтветСервера) Тогда
				
				ЗаписьЖурналаРегистрации(
					"Отправление POST сайту", 
					УровеньЖурналаРегистрации.Информация, 
					,
					Выборка.Объект,
					"POST:
					|" + POSTТекст + "
					|
					|Adres: " + Выборка.АдресРесурсаСервера + "
					|
					|Ответ сервера:
					|" + ОтветСервера);
					
				Возврат Истина;
				
			Иначе
				
				Возврат Ложь;
				
			КонецЕсли;
		КонецЕсли;
 	Иначе
		
		Ошибка = "Нет обработчика для отработки вида объекта """ + Выборка.ВидОбъекта + """";
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции
Процедура ОтправленияЗапросовСайту_ПоОдному() Экспорт
	
	Менеджер = РегистрыСведений.БуферКомандДляСайта;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ  РАЗРЕШЕННЫЕ * ИЗ (
	|ВЫБРАТЬ
	|	Объект,
	|	КомандаHTTP,
	|	АдресРесурсаСервера,
	|	ТелоЗапроса,
	|	ЭтоТригер,
 	|	ВЫБОР 
	|		КОГДА Объект Ссылка Справочник.Номенклатура	ТОГДА ""Номенклатура""
	|		ИНАЧЕ ""Обычный""
	|	КОНЕЦ КАК ВидОбъекта
	|ИЗ
	|	РегистрСведений.БуферКомандДляСайта
	|) КАК Запрос
	|
	|ГДЕ
	|	ВидОбъекта <> ""Неизвестный""
	|");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// Проверим доступность, вдруг он еще захвачен
		Попытка
			Объект = Выборка.Объект.ПолучитьОбъект();
		Исключение
			Продолжить;
		КонецПопытки;
		
		Ошибка	= "";
		Запись 	= Менеджер.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		
		Если ВыполнитьКомандуСайту(Выборка,, Ошибка) Тогда
			
			Попытка
				Запись.Удалить();
			Исключение
				ВызватьИсключение "Ошибка при удалении записи регистра буфера для сайта " + ОписаниеОшибки();
			КонецПопытки;
			
		Иначе
			
			Запись.ЕстьОшибка 	= Истина;
			Запись.Ошибка 		= Ошибка;
			
			Попытка
				Запись.Записать();
			Исключение
				ВызватьИсключение "Ошибка при записи ошибки в регистр буфера для сайта " + ОписаниеОшибки();
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
Процедура ОтправленияЗапросовСайту_ПоТоварам() Экспорт
	
	Менеджер = РегистрыСведений.БуферКомандДляСайта;
	
	Метод = "/api/products.json";
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ  РАЗРЕШЕННЫЕ * 
	|ИЗ 
	|(
	|	ВЫБРАТЬ
	|		Объект,
	|		КомандаHTTP,
	|		АдресРесурсаСервера,
	|		"""" КАК ТелоЗапроса,
	|		ЭтоТригер,
 	|		""Номенклатура"" КАК ВидОбъекта
	|	ИЗ
	|		РегистрСведений.БуферКомандДляСайта
	|	ГДЕ
	|		ЭтоТригер = ЛОЖЬ И
	|		АдресРесурсаСервера = """ + Метод + """
	|
	|) КАК Запрос
	|
	|ИТОГИ 
	|	МАКСИМУМ(ТелоЗапроса),
	|	МАКСИМУМ(Объект),
	|	МАКСИМУМ(АдресРесурсаСервера),
	|	МАКСИМУМ(ВидОбъекта)
	|ПО
	|	КомандаHTTP
	|");
	
	ВыборкаКоманд = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Пока ВыборкаКоманд.Следующий() Цикл
		
		// Насобираем гуиды
		
		ТекстГуидов = "";
		
		ВыборкаНоменклатуры = ВыборкаКоманд.Выбрать();
		Пока ВыборкаНоменклатуры.Следующий() Цикл
			
			СсылкаНоменклатуры = ВыборкаНоменклатуры.Объект;
			
			// Проверим доступность, вдруг он еще захвачен
			Попытка
				Объект = СсылкаНоменклатуры.ПолучитьОбъект();
			Исключение
				Продолжить;
			КонецПопытки;

			ТекстГуидов = ТекстГуидов + ?(ТекстГуидов = "","",",") + XMLСтрока(СсылкаНоменклатуры);
			
			Ошибка	= "";
			Запись 	= Менеджер.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, ВыборкаНоменклатуры);
			
			Попытка
				Запись.Удалить();
			Исключение
				ВызватьИсключение "Ошибка при удалении записи регистра буфера для сайта " + ОписаниеОшибки();
			КонецПопытки;
			
		КонецЦикла;
		
		ВыполнитьКомандуСайту(ВыборкаКоманд, ТекстГуидов, Ошибка);
		
	КонецЦикла;
	
КонецПроцедуры
Процедура ОтправленияЗапросовСайту() Экспорт
	
	// Для товаров отдельно
	
	//ОтправленияЗапросовСайту_ПоТоварам();
	
	// Для остальных по одному
	
	ОтправленияЗапросовСайту_ПоОдному();
	
КонецПроцедуры


// ЗАКАЗ

Функция ПолучитьИнтернетЗаказПараметрамиHTML(СсылкаЗаказ) Экспорт
	
	//СсылкаЗаказ = Заказ.Ссылка;
	
	Запрос = Новый Запрос("	
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИнтернетЗаказ.Дата							КАК order_date,
	|	ИнтернетЗаказ.Номер							КАК number_1c,
	
	|	ИнтернетЗаказ.Сумма			 				КАК total,
	
	|	ИнтернетЗаказ.ВариантДоставки				КАК variant_delivery,
	|	ИнтернетЗаказ.ПользовательИнтернет.Имя                          КАК falsename,
	|	ИнтернетЗаказ.ПользовательИнтернет.Фамилия						КАК surname,
	|	ИнтернетЗаказ.ПользовательИнтернет.Отчество						КАК patronymic,
	|	ИнтернетЗаказ.Склад							КАК warehouse_guid,
	|	ИнтернетЗаказ.ОбщийВес						КАК weight,
	|	ИнтернетЗаказ.Комментарий					КАК comment,
	|	ИнтернетЗаказ.СуммаДоставки					КАК cost_of_delivery,
	|	""""										КАК state,
	|	""""										КАК state_1c,
	|	""""										КАК kind_state_1c,
	|	ИнтернетЗаказ.АдресДоставки					КАК shipping_address,
	|	ИнтернетЗаказ.ДоставкаДоДвери				КАК to_door,
	|	ИнтернетЗаказ.КомментарийКДоставке			КАК comment_delivery,
	|	ИнтернетЗаказ.ПользовательИнтернет.ЭлектроннаяПочта				КАК email,
	|	ИнтернетЗаказ.ПользовательИнтернет.КонтактныйТелефон			КАК contact_phone,
	|	ИнтернетЗаказ.МаксимальныйСрокДоставки		КАК term_delivery,
	|	ИнтернетЗаказ.ЭтоЧерновик 					КАК draft,
	|	ИнтернетЗаказ.Комиссионные					КАК commission_paying,

	|	Цена 						КАК price,
	|	КоличествоОстаток 			КАК quantity,
	|	Номенклатура 				КАК product_guid,
	|	Номенклатура.Представление 	КАК product_desc,
	|	Номенклатура.Представление 	КАК name,
	|	Номенклатура.Артикул 		КАК article,
	|	Номенклатура.Код 			КАК code,
	|	Номенклатура.Производитель 	КАК manufacturer_guid,
	|	Номенклатура.Производитель.Представление КАК manufacturer,
	|	СуммаОстаток 				КАК summa
	|
	|ИЗ
	|	РегистрНакопления.ИнтернетЗаказПокупателя.Остатки(, ИнтернетЗаказ = &ЭтотЗаказ)
	|ИТОГИ 
	|	МАКСИМУМ(ИнтернетЗаказ.Дата)							КАК order_date,
	|	МАКСИМУМ(ИнтернетЗаказ.Номер)							КАК number_1c,
	
	//|	МАКСИМУМ(ИнтернетЗаказ.Сумма) 							КАК total,
	|	МАКСИМУМ(ИнтернетЗаказ.ВариантДоставки)					КАК variant_delivery,
	|	МАКСИМУМ(ИнтернетЗаказ.ПользовательИнтернет.Имя)                            КАК name,
	|	МАКСИМУМ(ИнтернетЗаказ.ПользовательИнтернет.Фамилия)						КАК surname,
	|	МАКСИМУМ(ИнтернетЗаказ.ПользовательИнтернет.Отчество)						КАК patronymic,
	|	МАКСИМУМ(ИнтернетЗаказ.Склад)							КАК warehouse_guid,
	|	МАКСИМУМ(ИнтернетЗаказ.ОбщийВес)						КАК weight,
	|	МАКСИМУМ(ИнтернетЗаказ.Комментарий)						КАК comment,
	|	МАКСИМУМ(ИнтернетЗаказ.СуммаДоставки)					КАК cost_of_delivery,
	|	МАКСИМУМ(ИнтернетЗаказ.АдресДоставки)					КАК shipping_address,
	|	МАКСИМУМ(ИнтернетЗаказ.ДоставкаДоДвери)					КАК to_door,
	|	МАКСИМУМ(ИнтернетЗаказ.КомментарийКДоставке)			КАК comment_delivery,
	|	МАКСИМУМ(ИнтернетЗаказ.ПользовательИнтернет.ЭлектроннаяПочта)				КАК email,
	|	МАКСИМУМ(ИнтернетЗаказ.ПользовательИнтернет.КонтактныйТелефон)				КАК contact_phone,
	|	МАКСИМУМ(ИнтернетЗаказ.МаксимальныйСрокДоставки)		КАК term_delivery,
	|	МАКСИМУМ(ИнтернетЗаказ.ЭтоЧерновик) 					КАК draft,
	|	МАКСИМУМ(ИнтернетЗаказ.Комиссионные)					КАК commission_paying
	|ПО 
	|	ИнтернетЗаказ");
	
	ЗаписьЖурналаРегистрации("POST.Получение параметров заказа HTTP", УровеньЖурналаРегистрации.Информация, Метаданные.Документы.ИнтернетЗаказПокупателя, СсылкаЗаказ, СсылкаЗаказ);
	
	Запрос.УстановитьПараметр("ЭтотЗаказ", СсылкаЗаказ);
	
	Текст 	= "";
	Дерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Если Дерево.Строки.Количество() Тогда
		                                   
		Структура = КонвертацияТипов.ПолучитьСтруктуруИзСТрокиДереваЗначений(Дерево);
		
		//Структура.warehouse_guid 	= ?(Структура.warehouse_guid.Пустая(),"", Строка(Структура.warehouse_guid.УникальныйИдентификатор()));
		//Структура.guid				= Строка(СсылкаЗаказ.УникальныйИдентификатор());
		Структура.state_1c			= ПолучитьТекстСтатусаЗаказа(СсылкаЗаказ);
		Структура.kind_state_1c		= ПолучитьТипЗаказа(СсылкаЗаказ);
		//Структура.shipping_address	= ?(Структура.shipping_address.Пустая(),"", Строка(Структура.shipping_address.УникальныйИдентификатор()));
		//Структура.order_date		= Формат(Структура.order_date,"ДФ=dd.MM.yyyy ЧЧ:мм:сс");
		
		Структура.state = ПолучитьСтатусЗаказа(СсылкаЗаказ);
		
		Структура.Удалить("falsename");
		
		Для Каждого Элемент Из Структура Цикл
			
			//Если ТипЗнч(Элемент.Значение) <> Тип("ТаблицаЗначений") Тогда
			Если ТипЗнч(Элемент.Значение) <> Тип("NULL") Тогда	
				
				ДобавитьПростойТекстHTML(Текст, Элемент.Ключ, XMLСтрока(Элемент.Значение), "order");
				
			КонецЕсли;
			
		КонецЦикла;
		
		СтокаТаблица 	= Дерево.Строки[0];
		Инд 		= -1;
		
		//Резерв = Новый ТаблицаЗначений;
		//	
		//ЕстьРезерв = Заказ.ДополнительныеСвойства.Свойство("ТаблицаРезерв", Резерв);
		
		
		Для Каждого Строка Из СтокаТаблица.Строки Цикл Инд = Инд + 1;
			
			//СтруктураСтрок = Новый Структура("id, price, quantity, product_guid, product_desc, article, code, manufacturer_guid, manufacturer, summa");
			СтруктураСтрок = Новый Структура("price, quantity, product_guid, product_desc, article, code, manufacturer_guid, manufacturer, summa");
			
			//ДобавочноеСлово = "order[line_items_attributes][" + Формат(Инд, "ЧН=0; ЧГ=") + "]";
			ДобавочноеСлово = "order[line_items_attributes][]";
			
			//ДобавитьПростойТекстHTML(Текст, "id", 			Строка.id, ДобавочноеСлово);
			ДобавитьПростойТекстHTML(Текст, "price", 			XMLСтрока(Строка.price), ДобавочноеСлово);
			ДобавитьПростойТекстHTML(Текст, "quantity", 		XMLСтрока(Строка.quantity), ДобавочноеСлово);
			ДобавитьПростойТекстHTML(Текст, "product_guid", 	XMLСтрока(Строка.product_guid), ДобавочноеСлово);
			ДобавитьПростойТекстHTML(Текст, "product_desc", 	XMLСтрока(Строка.product_desc), ДобавочноеСлово);
			ДобавитьПростойТекстHTML(Текст, "name", 			СокрЛП(Строка.name), ДобавочноеСлово);
			ДобавитьПростойТекстHTML(Текст, "article", 			СокрЛП(Строка.article), ДобавочноеСлово);
			ДобавитьПростойТекстHTML(Текст, "code", 			СокрЛП(Строка.code), ДобавочноеСлово);
			ДобавитьПростойТекстHTML(Текст, "manufacturer_guid",XMLСтрока(Строка.manufacturer_guid), ДобавочноеСлово);
			ДобавитьПростойТекстHTML(Текст, "manufacturer", 	СокрЛП(Строка.manufacturer), ДобавочноеСлово);
			ДобавитьПростойТекстHTML(Текст, "summa", 			XMLСтрока(Строка.summa), ДобавочноеСлово);
			
			//Если ЕстьРезерв Тогда
			//	НайденнаяСтрока = Резерв.НайтиСтроки(Новый Структура("product", XMLСтрока(Строка.product_guid)));
			//	
			//	Если НайденнаяСтрока.Количество() > 0 Тогда
			//		
			//		ДобавитьПростойТекстHTML(Текст, "reserve", НайденнаяСтрока[0].reserve, ДобавочноеСлово);
			//		ДобавитьПростойТекстHTML(Текст, "count_reserve", НайденнаяСтрока[0].count, ДобавочноеСлово);
			//
			//	КонецЕсли;
			//КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции


Процедура ДобавитьПростойТекстHTML(Текст, Ключ, Знач Значение, ДобавочноеСлово = "order", ВКвадратныхСкобках = Истина)
	
	Если ТипЗнч(Значение) = Тип("Число") Тогда
		
		Значение = XMLСтрока(Значение);
		
	ИначеЕсли Не ЗначениеЗаполнено(Значение) Тогда
		
		Значение = """""";
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда
		
		Значение = Формат(Значение, "ДФ=dd.MM.yyyy ЧЧ:мм:сс");
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Картинка") Тогда
		
		Значение = Значение.Получить();
		
	КонецЕсли;

	Текст = Текст + 
			"&" + 
			ДобавочноеСлово +
			?(ВКвадратныхСкобках,"[","") +
			Ключ + 
			?(ВКвадратныхСкобках,"]","") +
			"=" + 
			XMLСтрока(Значение);
	
КонецПроцедуры

Функция ПолучитьСтатусЗаказа(СсылкаЗаказ)
	
	МенСостояний 	= Перечисления.СостоянияЗаказа;
	Состояние 		= Заказы.ПолучитьСостояниеЗаказа(СсылкаЗаказ);
	
	Если Состояние = МенСостояний.ОжиданиеПодтверждения Тогда
		
		Возврат "confirmed";
		
	ИначеЕсли 	Состояние = МенСостояний.Открыт Или
				Состояние = МенСостояний.Отменен Или
				Состояние = МенСостояний.Черновик Или
				Состояние.Пустая() Тогда
		
		Возврат "approved";
		
	Иначе
		
		Возврат "complete";
		
	КонецЕсли;
		
КонецФункции
Функция ПолучитьТекстСтатусаЗаказа(ЗаказСсылка, НовыйЗаказ = Ложь) Экспорт	
	
	Возврат Заказы.ПолучитьСостояниеЗаказаСтрокой(ЗаказСсылка);
	
	//Если НовыйЗаказ Тогда
	//	Индекс = Перечисления.СтатусыИнтерентЗаявки.Индекс(Перечисления.СтатусыИнтерентЗаявки.Открыт);
	//	Результат = Метаданные.Перечисления.СтатусыИнтерентЗаявки.ЗначенияПеречисления[Индекс].Синоним;
	//Иначе		
	//
	//Запрос = Новый Запрос("	ВЫБРАТЬ
	//						|	БП.Статус Статус
	//						|ИЗ
	//						|	БизнесПроцесс.ИнтернетЗаявка БП
	//						|
	//						|ЛЕВОЕ СОЕДИНЕНИЕ 
	//						|	 Документ.ИнтернетЗаказПокупателя Заказ
	//						|ПО
	//						|	БП.Заказ = БП.Заказ.Ссылка
	//						|
	//						|ГДЕ
	//						|	БП.Заказ.Ссылка = &ЭтотЗаказ
	//						|");
	//
	//Запрос.УстановитьПараметр("ЭтотЗаказ", ЗаказСсылка);
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//Если НЕ РезультатЗапроса.Пустой() Тогда
	//	
	//	Выборка = РезультатЗапроса.Выбрать();
	//	Выборка.Следующий();                        
	//	
	//	Индекс = Перечисления.СтатусыИнтерентЗаявки.Индекс(Выборка.Статус);
	//	Результат = Метаданные.Перечисления.СтатусыИнтерентЗаявки.ЗначенияПеречисления[Индекс].Синоним;
	//
	//КонецЕсли;
	//
	//КонецЕсли;
	//
	//Возврат Результат;
		
КонецФункции
Функция ПолучитьТипЗаказа(ЗаказСсылка, НовыйЗаказ = Ложь) Экспорт
	
	СтатусЗаказа = Заказы.ПолучитьСостояниеЗаказа(ЗаказСсылка);
	
	Если 	ЗаказСсылка.ЭтоЧерновик Или
			СтатусЗаказа = Перечисления.СостоянияЗаказа.Черновик Тогда
		
		Возврат ТипЗаказа_Черновик();
	
	ИначеЕсли 	СтатусЗаказа = Перечисления.СостоянияЗаказа.Отгружен Или
				СтатусЗаказа = Перечисления.СостоянияЗаказа.Открыт Или
				СтатусЗаказа = Перечисления.СостоянияЗаказа.Отменен Или
				СтатусЗаказа = Перечисления.СостоянияЗаказа.Собран Тогда
		
		Возврат ТипЗаказа_Отгруженные();
		
	Иначе                                                                                                                  
		
		Возврат ТипЗаказа_Текущие();
		
	КонецЕсли;
		
КонецФункции

Функция ТипЗаказа_Черновик() Экспорт
	
	Возврат "Черновики";
	
КонецФункции
Функция ТипЗаказа_Текущие() Экспорт
	
	Возврат "Текущие заказы";
	
КонецФункции
Функция ТипЗаказа_Отгруженные() Экспорт
	
	Возврат "Отгруженные";
	
КонецФункции

Функция ПолучитьВидОплатыПоКОдуОплаты(стрКодаОплаты)
	
	Результат = "";
	
	КодОплаты = ВРег(стрКодаОплаты);
	
	Запрос = Новый Запрос("	ВЫБРАТЬ
							|   ВидОплаты.Ссылка
							|ИЗ
							|	Справочник.ВидОплатыИнтернетЗаказа ВидОплаты
							|ГДЕ
							|   ВидОплаты.kind_payment_code = """ + стрКодаОплаты + """");
							
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();	
		//Индекс = Перечисления.СтатусыИнтерентЗаявки.Индекс(Выборка.Ссылка);
		//Результат = Метаданные.Перечисления.СтатусыИнтерентЗаявки.ЗначенияПеречисления[Индекс].Имя;
		Результат = Выборка.Ссылка; 
	 КонецЕсли;
	
	Возврат Результат;
	
	//Если КодОплаты = Врег("transfer_to_individuals") Тогда
	//	
	//	Возврат "Вид оплаты: Банковский перевод для физических лиц";
	//	
	//ИначеЕсли КодОплаты = Врег("transfer_to_legal_entities") Тогда
	//	
	//	Возврат "Вид оплаты: Банковский перевод для юридических лиц";
	//	
	//ИначеЕсли КодОплаты = Врег("cash") Тогда
	//	
	//	Возврат "Вид оплаты: Оплата в магазине";
	//	
	//ИначеЕсли КодОплаты = Врег("cod") Тогда
	//
	//	Возврат "Вид оплаты: Наложенный платеж";
	//	
	//ИначеЕсли КодОплаты = Врег("cash_on_delivery") Тогда
	//
	//	Возврат "Вид оплаты: Оплата при вручении";
	//	
	//ИначеЕсли КодОплаты = Врег("emoney") Тогда
	//
	//	Возврат "Вид оплаты: WebMoney";
	//	
	//Иначе
	//	
	//	Возврат "вид оплаты не определен";
	//	
	//КонецЕсли;
	
КонецФункции

Функция СформироватьСтрокуЗаказа_ст(Заказ, Товар, КоличествоТовара, Цена, ТоварыНаСайт)//, Резерв)
	//ДЛЯ ИЗМЕНЕНИЯ
	//  РегистрСведений.ПорядковыйНомерДоговора
	Запрос = Новый Запрос(" ВЫБРАТЬ РАЗРЕШЕННЫЕ
							|	Рег.Номенклатура,
							|	Скл.Склад,
							|	&КоличествоВЗаказе 							Количество,
							|	Рег.КоличествоОстаток 						Остаток,
							|	Рег.КоличествоОстаток - &КоличествоВЗаказе 	ОстатокФакт, 
							|	Скл.Приоритет,
							|	ВЫБОР КОГДА (Рег.КоличествоОстаток - &КоличествоВЗаказе >= 0)
							|	ТОГДА
							|		Истина
							|	ИНАЧЕ 
							|		Ложь
							|	КОНЕЦ 										МожноСписать			
							|ИЗ
							|	РегистрНакопления.ТоварыНаСкладах.Остатки(, Номенклатура = &ВыбТовар) Рег
							|							
							|	ЛЕВОЕ СОЕДИНЕНИЕ
							|	
							|	(	ВЫБРАТЬ
							|			Польз.Ссылка 			Пользователь,
							|			Склад.Ссылка 			Склад,
							|			ВЫБОР КОГДА Польз.Дилер 
							|			ТОГДА 
							|				Склад.ПриоритетСкладаДилер 
							|			ИНАЧЕ
							|			    Склад.ПриоритетСкладаРозничныйПокупатель
							|			КОНЕЦ 					Приоритет
							|		ИЗ
							|			Справочник.ПользователиИнтернет Польз
							|			ЛЕВОЕ СОЕДИНЕНИЕ 
							|				Справочник.Склады Склад 
							|				ПО (Польз.Дилер = Склад.ОтгрузкаДилерам И Польз.Дилер = ИСТИНА) ИЛИ (НЕ Польз.Дилер = Склад.ОтгрузкаРозничнымКлиентам И Польз.Дилер = ЛОЖЬ)		
							|		 ГДЕ Польз.Ссылка = &ВыбПольз
							|	) Скл
							|	
							|	ПО Рег.Склад = Скл.Склад
							|	
							|УПОРЯДОЧИТЬ ПО МожноСписать Убыв, Приоритет Убыв, ОстатокФакт Убыв  
							|ИТОГИ МАКСИМУМ(Количество), СУММА(Остаток) ПО Рег.Номенклатура");
							
	Запрос.УстановитьПараметр("ВыбПольз", Заказ.ПользовательИнтернет);
	Запрос.УстановитьПараметр("ВыбТовар", Товар);
	Запрос.УстановитьПараметр("КоличествоВЗаказе", КоличествоТовара);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		
		Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		Пока Выборка.Следующий() Цикл
			
			ВыборкаСклады = Выборка.Выбрать();
			ВыборкаСклады.Следующий();
			Треб = Выборка.Количество;
			Если Выборка.Остаток - Выборка.Количество >= 0 Тогда
					
				Если ВыборкаСклады.МожноСписать Тогда           // если со склада обладающего высшим приоритетом и наличием товара можно списать искомое количество товара - делаем это!
					НоваяСтрока = Заказ.Товары.Добавить();
					
					НоваяСтрока.Номенклатура 	= ВыборкаСклады.Номенклатура;
				   	НоваяСтрока.Размещение	 	= ВыборкаСклады.Склад;
					НоваяСтрока.Количество		= ВыборкаСклады.Количество;
					НоваяСтрока.Цена            = Цена;
					НоваяСтрока.Сумма           = НоваяСтрока.Цена * НоваяСтрока.Количество;
				
				Иначе
					Пока Треб <> 0 Цикл                       // если одним складом не обойтись, раскидываем размещение по разным складам
						
						НоваяСтрока = Заказ.Товары.Добавить();

						НоваяСтрока.Номенклатура = ВыборкаСклады.Номенклатура;
					   	НоваяСтрока.Размещение	 = ВыборкаСклады.Склад;
						НоваяСтрока.Цена         = Цена;

						Если Треб - ВыборкаСклады.Остаток > 0 Тогда
							НоваяСтрока.Количество	 = ВыборкаСклады.Остаток;
							ВыборкаСклады.Следующий();
						Иначе
							НоваяСтрока.Количество	 = Треб;
						КонецЕсли;
						
						НоваяСтрока.Сумма        = НоваяСтрока.Цена * НоваяСтрока.Количество;
				
						Треб = Треб - НоваяСтрока.Количество;
					
					КонецЦикла
						
				КонецЕсли;
					
				ТоварСтруктура = Новый Структура("product, count, reserve", Выборка.Номенклатура.УникальныйИдентификатор(), Выборка.Количество,  Истина);
				ТоварыНаСайт.Добавить(ТоварСтруктура);
				
				//ЗаполнитьЗначенияСвойств(Резерв.Добавить(), ТоварСтруктура);
				
			Иначе
				
				// когда в заказе товара больше чем на всех складах
				
				НоваяСтрока = Заказ.Товары.Добавить();

				НоваяСтрока.Номенклатура 	= ВыборкаСклады.Номенклатура;
				НоваяСтрока.Размещение	 	= Справочники.Склады.ПустаяСсылка();
				НоваяСтрока.Количество		= ВыборкаСклады.Количество;           // в заказе оставляем количество товара в заказе, размещение не указываем
				НоваяСтрока.Цена            = Цена;
				НоваяСтрока.Сумма           = НоваяСтрока.Цена * НоваяСтрока.Количество;
	
				ТоварСтруктура = Новый Структура("product, count, reserve", Выборка.Номенклатура.УникальныйИдентификатор(), Выборка.Остаток, Ложь);				
	            ТоварыНаСайт.Добавить(ТоварСтруктура);
				
				//ЗаполнитьЗначенияСвойств(Резерв.Добавить(), ТоварСтруктура);
				
			КонецЕсли;
			
		КонецЦикла;
		
 	
	КонецЕсли; 
	
КонецФункции

Функция СформироватьРезерв_ст(Заказ, ТипЦен, Размещен = Истина)
	
	//ТипТоварыНаСайт	 = ФабрикаXDTO.Тип("http://www.garagetools.ru", "Reserve");
	//ТипСтрокаРезерва = ФабрикаXDTO.Тип("http://www.garagetools.ru", "Line_reserve");
	//
	//ТоварыНаСайт = ФабрикаXDTO.Создать(ТипТоварыНаСайт); 
	//
	////// silber { безразбору все типа есть, Ання разберется потом )))
	////
	ТоварыНаСайт = Новый Массив;
	////
	//Для Каждого Строка Из Заказ.Товары Цикл
	//
	//	//СтрокаРезерва = ФабрикаXDTO.Создать(ТипСтрокаРезерва);
	//	//СтрокаРезерва.product 	= XMLСтрока(Строка.Номенклатура);
	//	//СтрокаРезерва.count 	= Строка.Количество;
	//	//СтрокаРезерва.reserve 	= Истина;
	//	//
	//	//ТоварыНаСайт.line_reserve.Добавить(СтрокаРезерва);
	//	
	//	ТоварыНаСайт.Добавить(Новый Структура("product, count, reserve",
	//										XMLСтрока(Строка.Номенклатура), Строка.Количество, Истина));
	//	
	//КонецЦикла;
	//
	//ВОЗВРАТ Json.JSON(ТоварыНаСайт);
	//
	//// } silber
	
	Заказ.Товары.Очистить();
	
	ВалютаИнтернетПродаж	=  Справочники.ТипыЦен.НайтиПоКоду("000000004").Валюта;	
	
	//Запрос = Новый Запрос("	ВЫБРАТЬ
	//	|	Рег.Номенклатура,
	//	|	Таб.Количество,
	//	|	Рег.КоличествоОстаток - ЕСТЬNULL(Рез.КоличествоОстаток,0)					Остаток,
	//	|	Таб.Приоритет,
	//	|	Таб.Склад,
	//	|	Рег.КоличествоОстаток - ЕСТЬNULL(Рез.КоличествоОстаток,0) - Таб.Количество 	ОстатокФакт, 
	//	|	ВЫБОР КОГДА (Рег.КоличествоОстаток - ЕСТЬNULL(Рез.КоличествоОстаток,0) - Таб.Количество >= 0)
	//	|		ТОГДА Истина
	//	|		ИНАЧЕ Ложь
	//	|	КОНЕЦ 										МожноСписать		
	//	|ИЗ
	//	|	(
	//	|		ВЫБРАТЬ
	//	|			Скл.Склад,
	//	|			Скл.Приоритет,
	//	|			Док.Номенклатура,
	//	|			Док.Количество	
	//	|	    ИЗ
	//	|			Документ.ИнтернетЗаказПокупателя.Товары Док
	//	|				ЛЕВОЕ СОЕДИНЕНИЕ
	//	|						(	ВЫБРАТЬ
	//	|									Польз.Ссылка Польз,
	//	|									Склад.Ссылка Склад,
	//	|									ВЫБОР КОГДА Польз.Дилер 
	//	|									ТОГДА 
	//	|										Склад.ПриоритетСкладаДилер 
	//	|									ИНАЧЕ
	//	|									    Склад.ПриоритетСкладаРозничныйПокупатель
	//	|									КОНЕЦ 					Приоритет
	//	|	            
	//	|							ИЗ
	//	|									Справочник.ПользователиИнтернет Польз
	//	|									ЛЕВОЕ СОЕДИНЕНИЕ 
	//	|										Справочник.Склады Склад 
	//	|								ПО (Польз.Дилер = Склад.ОтгрузкаДилерам И Польз.Дилер = ИСТИНА) ИЛИ (НЕ Польз.Дилер = Склад.ОтгрузкаРозничнымКлиентам И Польз.Дилер = ЛОЖЬ)		
	//	|										 ) Скл
	//	|										 
	//	|				ПО Док.Ссылка.ПользовательИнтернет = Скл.Польз
	//	|			ГДЕ Док.Ссылка = &Ссылка
	//	|	) Таб
	//	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	//	|		РегистрНакопления.ТоварыНаСкладах.Остатки() Рег
	//	|		ПО Таб.Номенклатура = Рег.Номенклатура И Таб.Склад = Рег.Склад
	//	|	ЛЕВОЕ СОЕДИНЕНИЕ
	//	|		  РегистрНакопления.ТоварыВРезерве.Остатки() Рез
	//	|		  ПО Таб.Номенклатура = Рез.Номенклатура И Таб.Склад = Рез.Размещение
	//	|
	//	|ДЛЯ ИЗМЕНЕНИЯ РегистрНакопления.ТоварыВРезерве.Остатки, РегистрНакопления.ТоварыНаСкладах.Остатки 		
	//	|УПОРЯДОЧИТЬ ПО МожноСписать Убыв, Приоритет Убыв, ОстатокФакт Убыв
	//	|ИТОГИ 
	//	|	МАКСИМУМ(Количество), 
	//	|	СУММА(Остаток)
	//	|ПО Рег.Номенклатура
	//	|
	//	|");
	//				
	//Запрос.УстановитьПараметр("Ссылка", Заказ.Ссылка);
	//
	//РезультатЗапроса = Запрос.Выполнить();
	
	Запрос = Новый Запрос("	ВЫБРАТЬ
							|	Таб.Номенклатура,
							|	Таб.Склад,
							|	Таб.Приоритет,
							|	Таб.Количество,
							|	ЕСТЬNULL(Ост.КоличествоОстаток,0) - ЕСТЬNULL(Рез.КоличествоОстаток,0)					Остаток,
							|	ВЫБОР КОГДА 
							|		(ЕСТЬNULL(Ост.КоличествоОстаток,0) - ЕСТЬNULL(Рез.КоличествоОстаток,0) - Таб.Количество >= 0)
							|	ТОГДА Истина
							|	ИНАЧЕ Ложь
					 		|	КОНЕЦ 					МожноСписать		
							|ИЗ
							|	(
							|	 	ВЫБРАТЬ
							|			Раз.Склад,
							|			Раз.Приоритет,
							|			Док.Номенклатура,
							|			Док.Количество	
							|		 ИЗ
							|			Документ.ИнтернетЗаказПокупателя.Товары Док
							|			ЛЕВОЕ СОЕДИНЕНИЕ
							|				(ВЫБРАТЬ
							|					Спр.Ссылка					ПользовательИнтернет,
							|					Скл.Ссылка					Склад,
							|					ВЫБОР КОГДА Спр.Дилер 
							|					ТОГДА Скл.ПриоритетСкладаДилер 
							|					ИНАЧЕ Скл.ПриоритетСкладаРозничныйПокупатель
							|					КОНЕЦ 						Приоритет
							|				ИЗ
							|					Справочник.ПользователиИнтернет Спр
							|					ЛЕВОЕ СОЕДИНЕНИЕ 
							|						Справочник.Склады Скл 
							|					ПО (Спр.Дилер = Скл.ОтгрузкаДилерам И Спр.Дилер = ИСТИНА) ИЛИ (НЕ Спр.Дилер = Скл.ОтгрузкаРозничнымКлиентам И Спр.Дилер = ЛОЖЬ)		
							|				ГДЕ  Спр.Ссылка = &ПользовательИнтернет
							|				) Раз
							|			ПО ИСТИНА
							|		ГДЕ Док.Ссылка = &ИнтернетЗаказ
							|	
							|	) Таб
							|	ЛЕВОЕ СОЕДИНЕНИЕ
							|		РегистрНакопления.ТоварыНаСкладах.Остатки() Ост
							|	ПО Таб.Номенклатура = Ост.Номенклатура И Таб.Склад = Ост.Склад
							|	ЛЕВОЕ СОЕДИНЕНИЕ
							|		РегистрНакопления.ТоварыВРезерве.Остатки() Рез
							|	ПО Таб.Номенклатура = Рез.Номенклатура И Таб.Склад = Рез.Размещение
							//|ДЛЯ ИЗМЕНЕНИЯ РегистрНакопления.ТоварыВРезерве.Остатки, РегистрНакопления.ТоварыНаСкладах.Остатки
							|УПОРЯДОЧИТЬ ПО МожноСписать Убыв, Приоритет Убыв, Остаток Убыв
							|ИТОГИ 
							|	МАКСИМУМ(Количество), 
							|	СУММА(Остаток)
							|ПО Таб.Номенклатура");		
		
	
	Запрос.УстановитьПараметр("ПользовательИнтернет", Заказ.ПользовательИнтернет);
	Запрос.УстановитьПараметр("ИнтернетЗаказ", Заказ.Ссылка);

	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		
		Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		Пока Выборка.Следующий() Цикл
			
			Номенклатура	= Выборка.Номенклатура;
			Количество		= Выборка.Количество;
			
			Цена = РаботаСНоменклатурой.ПолучитьЦену(Номенклатура, ТипЦен, ВалютаИнтернетПродаж);
			
			Если Выборка.Остаток - Количество >= 0 Тогда  // если суммарный остаток товара на складах позволяет произвести списание
				
				ВыборкаСклады = Выборка.Выбрать();
				ВыборкаСклады.Следующий();
				
				Если ВыборкаСклады.МожноСписать Тогда           	// если со склада обладающего высшим приоритетом и наличием товара можно списать искомое количество товара - делаем это!
					НоваяСтрока = Заказ.Товары.Добавить();
					
					НоваяСтрока.Номенклатура 	= Номенклатура;
				   	НоваяСтрока.Размещение	 	= ВыборкаСклады.Склад;
					НоваяСтрока.Количество		= Количество;
					НоваяСтрока.Цена            = Цена;
					НоваяСтрока.Сумма           = Цена * Количество;
					НоваяСтрока.СтавкаНДС       = Перечисления.СтавкиНДС.НДС18;
					НоваяСтрока.СуммаНДС		= НоваяСтрока.Сумма / 100 * 18;
				
				Иначе                      							// если одним складом не обойтись, раскидываем размещение по разным складам
					
					Треб = Выборка.Количество;
							
					Пока Треб > 0 Цикл                       
						  Если ВыборкаСклады.Остаток > 0 Тогда
							НоваяСтрока = Заказ.Товары.Добавить();

							НоваяСтрока.Номенклатура = Номенклатура;
						   	НоваяСтрока.Размещение	 = ВыборкаСклады.Склад;
							НоваяСтрока.Цена         = Цена;

							Если Треб - ВыборкаСклады.Остаток > 0 Тогда
								НоваяСтрока.Количество	 = ВыборкаСклады.Остаток;
								ВыборкаСклады.Следующий();
							Иначе
								НоваяСтрока.Количество	 = Треб;
							КонецЕсли;
							
							НоваяСтрока.Сумма        = Цена * НоваяСтрока.Количество;
							
							НоваяСтрока.СтавкаНДС       = Перечисления.СтавкиНДС.НДС18;
							НоваяСтрока.СуммаНДС		= НоваяСтрока.Сумма / 100 * 18;
					
							Треб = Треб - НоваяСтрока.Количество;
						Иначе
							ВыборкаСклады.Следующий();
						КонецЕсли;
					КонецЦикла
						
				КонецЕсли;
				
				//СтрокаРезерва = ФабрикаXDTO.Создать(ТипСтрокаРезерва);
				//СтрокаРезерва.product 	= XMLСтрока(Выборка.Номенклатура);
				//СтрокаРезерва.count 	= Выборка.Количество;
				//СтрокаРезерва.reserve 	= Истина;
				//
				//ТоварыНаСайт.line_reserve.Добавить(СтрокаРезерва);
				
				ТоварыНаСайт.Добавить(Новый Структура("product, count, reserve", 
										XMLСтрока(Выборка.Номенклатура), 
										Выборка.Количество,  
										Истина));
			Иначе
				
				// когда в заказе товара больше чем на всех складах
				
				Размещен = Ложь;
				
				НоваяСтрока = Заказ.Товары.Добавить();

				НоваяСтрока.Номенклатура 	= Номенклатура;
				НоваяСтрока.Размещение	 	= Справочники.Склады.ПустаяСсылка();
				НоваяСтрока.Количество		= Количество;           		// в заказе оставляем количество товара в заказе, размещение не указываем
				НоваяСтрока.Цена            = Цена;
				НоваяСтрока.Сумма           = Цена * Количество;
				
				НоваяСтрока.СтавкаНДС       = Перечисления.СтавкиНДС.НДС18;
				НоваяСтрока.СуммаНДС		= НоваяСтрока.Сумма / 100 * 18;
				
				//СтрокаРезерва = ФабрикаXDTO.Создать(ТипСтрокаРезерва);
				//СтрокаРезерва.product 	= XMLСтрока(Выборка.Номенклатура);
				//СтрокаРезерва.count 	= ?(Выборка.Остаток >= 0, Выборка.Остаток, 0); // конечно остаток не может быть отрицательным, но на всякий случай...
				//СтрокаРезерва.reserve 	= Ложь;
				//
				//ТоварыНаСайт.line_reserve.Добавить(СтрокаРезерва);
				
				ТоварыНаСайт.Добавить(Новый Структура("product, count, reserve", 
										XMLСтрока(Выборка.Номенклатура), 
										?(Выборка.Остаток >= 0, Выборка.Остаток, 0),
										Ложь));
				
				//ТоварСтруктура = Новый Структура("product, count, reserve", Выборка.Номенклатура.УникальныйИдентификатор(), Выборка.Остаток, Ложь);				
				//ТоварыНаСайт.Добавить(ТоварСтруктура);
				//
				//ЗаполнитьЗначенияСвойств(Резерв.Добавить(), ТоварСтруктура);
				
			КонецЕсли;
			
		КонецЦикла;
	Иначе
    	Размещен = Ложь;
	КонецЕсли; 
		
	Возврат Json.JSON(ТоварыНаСайт);
	
КонецФункции
Функция СформироватьРезерв(Заказ, ТипЦен, Размещен = Истина)
	
	ТоварыНаСайт = Новый Массив;
	Заказ.Товары.Очистить();
	
	ВалютаИнтернетПродаж = Константы.ВалютаУправленческогоУчета.Получить();	
	
	
	//Круглов 12.02.16
	//Остатки блокируем только на основном складе
	//Резервы блокируем по всем складам
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ТоварыНаСкладах");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = Заказ.Товары;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ТоварыВРезерве");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = Заказ.Товары;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
	
	Блокировка.Заблокировать();
	//Круглов 12.02.16
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Таб.Номенклатура,
	|	Таб.Склад,
	|	Таб.Приоритет,
	|	Таб.Количество,
	|	Таб.Цена,
	|	Таб.Акция,
	|	Таб.ПроцентАвтоматическойСкидки,
	|	Таб.СтавкаНДС,
	|	ЕСТЬNULL(Ост.КоличествоОстаток,0) - ЕСТЬNULL(Рез.КоличествоОстаток,0) Остаток,
	|	ВЫБОР КОГДА 
	|		(ЕСТЬNULL(Ост.КоличествоОстаток,0) - ЕСТЬNULL(Рез.КоличествоОстаток,0) - Таб.Количество >= 0)
	|	ТОГДА Истина
	|	ИНАЧЕ Ложь
	|	КОНЕЦ МожноСписать
	|ИЗ
	|	(
	|	 	ВЫБРАТЬ
	|			Раз.Склад,
	|			Раз.Приоритет + ВЫБОР КОГДА РегРег.регион ЕСТЬ NULL ТОГДА 0 ИНАЧЕ 10 КОНЕЦ Приоритет,
	|			Док.Номенклатура,
	|			Док.Количество,
	|			Док.Цена,
	|			Док.Акция,
	|			Док.ПроцентАвтоматическойСкидки,
	|			Док.СтавкаНДС,
	|			Док.Ссылка.АдресДоставки.Регион Региондок,
	|			РегРег.Регион	
	|		 ИЗ
	|			Документ.ИнтернетЗаказПокупателя.Товары Док
	|			
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			(ВЫБРАТЬ
	|				Спр.Ссылка					ПользовательИнтернет,
	|				Скл.Ссылка					Склад,
	|				Спр.Дилер					Дилер,
	|				Скл.РозницаДляВсех 			РазрешеноРознице,
	|				ВЫБОР КОГДА Спр.Дилер 
	|				ТОГДА Скл.ПриоритетСкладаДилер 
	|				ИНАЧЕ Скл.ПриоритетСкладаРозничныйПокупатель
	|				КОНЕЦ 						Приоритет
	|			ИЗ
	|				Справочник.ПользователиИнтернет Спр
	|					
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады Скл 
	|			ПО 
					// Если дилер то только со складов дилеров
	|				(Спр.Дилер И Скл.ОтгрузкаДилерам)
	|				ИЛИ 
	|				(НЕ Спр.Дилер И Скл.ОтгрузкаРозничнымКлиентам)		
	|			ГДЕ  
	|				Спр.Ссылка = &ПользовательИнтернет
	|				) Раз
	|				
	|			ПО ИСТИНА
	|				
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.ПривязкаИнтернетРегионовКСкладам РегРег
	|		ПО
	|			Док.Ссылка.АдресДоставки.Регион = РегРег.Регион И
	|			Раз.Склад = РегРег.Склад
	|			
	|		ГДЕ 
	|			Док.Ссылка = &ИнтернетЗаказ
					// Если розница тогда только со своего решиона или 
					// если регион не определен то от всех складов которые в питере

	|			И (
	|				ЕСТЬNULL(Раз.Дилер, ИСТИНА) ИЛИ  
	|				ВЫБОР КОГДА РегРег.Склад ЕСТЬ NULL 
	|					ТОГДА Раз.РазрешеноРознице
	|					ИНАЧЕ РегРег.Склад = Раз.Склад КОНЕЦ
	|				)
	|	) Таб
	|	
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки() Ост
	|ПО Таб.Номенклатура = Ост.Номенклатура И Таб.Склад = Ост.Склад
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыВРезерве.Остатки() Рез
	|ПО 
	|	Таб.Номенклатура = Рез.Номенклатура И Таб.Склад = Рез.Размещение
	|
	//|ДЛЯ ИЗМЕНЕНИЯ 
	//|	РегистрНакопления.ТоварыВРезерве.Остатки, РегистрНакопления.ТоварыНаСкладах.Остатки
	|
	|УПОРЯДОЧИТЬ ПО 
	|	МожноСписать Убыв, Приоритет Убыв, Остаток Убыв
	|
	|ИТОГИ 
	|	МАКСИМУМ(Количество), 
	|	СУММА(Остаток)
	|ПО
	|	Таб.Номенклатура
	|");
		
	Запрос.УстановитьПараметр("ПользовательИнтернет", Заказ.ПользовательИнтернет);
	Запрос.УстановитьПараметр("ИнтернетЗаказ", Заказ.Ссылка);

	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		
		Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		Пока Выборка.Следующий() Цикл
			
			Количество		= Выборка.Количество;
			
			Если Выборка.Остаток - Количество >= 0 Тогда  // если суммарный остаток товара на складах позволяет произвести списание
				
				ВыборкаСклады = Выборка.Выбрать();
				ВыборкаСклады.Следующий();
				
				Если ВыборкаСклады.МожноСписать Тогда           	// если со склада обладающего высшим приоритетом и наличием товара можно списать искомое количество товара - делаем это!
					НоваяСтрока = Заказ.Товары.Добавить();
					
					НоваяСтрока.Номенклатура 	= Выборка.Номенклатура;
				   	НоваяСтрока.Размещение	 	= ВыборкаСклады.Склад;
					НоваяСтрока.Количество		= Количество;
					НоваяСтрока.Цена            = ВыборкаСклады.Цена;
					НоваяСтрока.Акция			= ВыборкаСклады.Акция;
					НоваяСтрока.СтавкаНДС		= ВыборкаСклады.СтавкаНДС;
					НоваяСтрока.ПроцентАвтоматическойСкидки = ВыборкаСклады.ПроцентАвтоматическойСкидки; 
					
					// пересчитаем строку
					
					НоваяСтрока.СуммаБезСкидки = НоваяСтрока.Цена * НоваяСтрока.Количество;
					НоваяСтрока.СуммаАвтоматическойСкидки = НоваяСтрока.СуммаБезСкидки * НоваяСтрока.ПроцентАвтоматическойСкидки / 100;
					НоваяСтрока.Сумма	 =	НоваяСтрока.СуммаБезСкидки - НоваяСтрока.СуммаАвтоматическойСкидки;

					СтавкаНДС = КэшируемыеФункции.ПолучитьЧислоСтавкиНДС(НоваяСтрока.СтавкаНДС);
					НоваяСтрока.СуммаНДС	= СтавкаНДС * НоваяСтрока.Сумма / (СтавкаНДС + 100);
				
				Иначе                      							// если одним складом не обойтись, раскидываем размещение по разным складам
					
					Треб = Выборка.Количество;
							
					Пока Треб > 0 Цикл                       
						  Если ВыборкаСклады.Остаток > 0 Тогда
							НоваяСтрока = Заказ.Товары.Добавить();

							НоваяСтрока.Номенклатура 	= Выборка.Номенклатура;
						   	НоваяСтрока.Размещение	 	= ВыборкаСклады.Склад;
							НоваяСтрока.Цена            = ВыборкаСклады.Цена;
							НоваяСтрока.Акция			= ВыборкаСклады.Акция;
							НоваяСтрока.СтавкаНДС		= ВыборкаСклады.СтавкаНДС;
							НоваяСтрока.ПроцентАвтоматическойСкидки = ВыборкаСклады.ПроцентАвтоматическойСкидки; 

							Если Треб - ВыборкаСклады.Остаток > 0 Тогда
								НоваяСтрока.Количество	 = ВыборкаСклады.Остаток;
								ВыборкаСклады.Следующий();
							Иначе
								НоваяСтрока.Количество	 = Треб;КонецЕсли;
							
							// пересчитаем строку
							
							НоваяСтрока.СуммаБезСкидки = НоваяСтрока.Цена * НоваяСтрока.Количество;
							НоваяСтрока.СуммаАвтоматическойСкидки = НоваяСтрока.СуммаБезСкидки * НоваяСтрока.ПроцентАвтоматическойСкидки / 100;
							НоваяСтрока.Сумма	 =	НоваяСтрока.СуммаБезСкидки - НоваяСтрока.СуммаАвтоматическойСкидки;

							СтавкаНДС = КэшируемыеФункции.ПолучитьЧислоСтавкиНДС(НоваяСтрока.СтавкаНДС);
							НоваяСтрока.СуммаНДС	= СтавкаНДС * НоваяСтрока.Сумма / (СтавкаНДС + 100);

							Треб = Треб - НоваяСтрока.Количество;
						Иначе
							ВыборкаСклады.Следующий(); КонецЕсли; КонецЦикла; КонецЕсли;
				
				ТоварыНаСайт.Добавить(Новый Структура("product, count, reserve", 
										XMLСтрока(Выборка.Номенклатура), 
										Выборка.Количество,  
										Истина));
			Иначе
				
				// когда в заказе товара больше чем на всех складах
				
				Размещен = Ложь;
				
				НоваяСтрока = Заказ.Товары.Добавить();
				
				// в заказе оставляем количество товара в заказе, размещение не указываем
  		
				НоваяСтрока.Номенклатура 	= Выборка.Номенклатура;
				НоваяСтрока.Размещение	 	= Справочники.Склады.ПустаяСсылка();
				НоваяСтрока.Количество		= Количество;
				НоваяСтрока.Цена            = ВыборкаСклады.Цена;
				НоваяСтрока.Акция			= ВыборкаСклады.Акция;
				НоваяСтрока.СтавкаНДС		= ВыборкаСклады.СтавкаНДС;
				НоваяСтрока.ПроцентАвтоматическойСкидки = ВыборкаСклады.ПроцентАвтоматическойСкидки; 

				// пересчитаем строку
				
				НоваяСтрока.СуммаБезСкидки = НоваяСтрока.Цена * НоваяСтрока.Количество;
				НоваяСтрока.СуммаАвтоматическойСкидки = НоваяСтрока.СуммаБезСкидки * НоваяСтрока.ПроцентАвтоматическойСкидки / 100;
				НоваяСтрока.Сумма	 =	НоваяСтрока.СуммаБезСкидки - НоваяСтрока.СуммаАвтоматическойСкидки;

				СтавкаНДС = КэшируемыеФункции.ПолучитьЧислоСтавкиНДС(НоваяСтрока.СтавкаНДС);
				НоваяСтрока.СуммаНДС	= СтавкаНДС * НоваяСтрока.Сумма / (СтавкаНДС + 100);

				
				ТоварыНаСайт.Добавить(Новый Структура("product, count, reserve", 
										XMLСтрока(Выборка.Номенклатура), 
										?(Выборка.Остаток >= 0, Выборка.Остаток, 0),
										Ложь));КонецЕсли;КонецЦикла;
								
	Иначе
		Размещен = Ложь; КонецЕсли; 
		
	Возврат Json.JSON(ТоварыНаСайт);
	
КонецФункции

Функция ПолучитьБизнесПроцесс(ИнтернетЗаказ, стрОшибки = "") Экспорт
	
	Запрос = Новый Запрос("	ВЫБРАТЬ РАЗРЕШЕННЫЕ
							|	Ссылка 
							|ИЗ 
							|	БизнесПроцесс.ИнтернетЗаявка
							|ГДЕ 
							|	Заказ = &Заказ И 
							|	Не Завершен И Не ПометкаУдаления
							|");
							
	Запрос.УстановитьПараметр("Заказ", ИнтернетЗаказ.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка.Ссылка;
		
	Иначе
		
		стрОшибки = " Не существует ни одного бизнес-процесса для интернет-заказа " + ИнтернетЗаказ.Ссылка;
		Возврат Неопределено;
		
	КонецЕсли;

КонецФункции

Функция СформироватьОбновитьЗаказ(user = Неопределено, order, number = "", type_order = "", status = "", error = "", products = "", ЗаказОбъект = Неопределено) Экспорт
	
	ЗаписьЖурналаРегистрации("HTTP.Сайт создал новый заказ", УровеньЖурналаРегистрации.Информация, , , 
			"user = " + user + "
			|order = " + order);
			
	ЕстьЗаказ = ЗаказОбъект <> Неопределено;
	
	СсылкаИнтернетПользователь = ?(ЕстьЗаказ, ЗаказОбъект.ПользовательИнтернет, ПолучитьОбъектПоСсылке(Справочники.ПользователиИнтернет, user, error));
	Если СсылкаИнтернетПользователь = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	ТипЦен = ПолучитьТипЦенПользователяИнтернет(СсылкаИнтернетПользователь);
	
	// Рискнем преобразовать русские буквы
	
	order = HTTP.UTFвANSI(order);
	
	// Форматнем структуру заказа
	
	ЗаказJson = Json.UnJSON_silber(order, error);
	Если ЗаказJson = Неопределено Тогда
		
		ЗаписьЖурналаРегистрации("HTTP.Сайт создал новый заказ", УровеньЖурналаРегистрации.Ошибка, , , error);
		Возврат "";
		
	КонецЕсли;
	
	// Создадим заказ
	
	Если Не ЕстьЗаказ Тогда
		
		Заказ 				= Документы.ИнтернетЗаказПокупателя.СоздатьДокумент();
		ОрганизацияЗаказа 	= Константы.ОрганизацияДляИнтернетЗаказов.Получить();
		
		// Заполним реквизиты у которых вначале стоит "Интрнет"
		
		РеквЗак = ОрганизацияЗаказа.Метаданные().Реквизиты;
		Для Каждого Реквизит Из РеквЗак Цикл
			Если Лев(Реквизит.Имя, 14) = "ИнтернетЗаказ_" Тогда
				Имя = Сред(Реквизит.Имя,15);
				Заказ[Имя] = ОрганизацияЗаказа[Реквизит.Имя];
			КонецЕсли;
		КонецЦикла;
		
		ВалютаИнтернетПродаж = Константы.ВалютаУправленческогоУчета.Получить();
		
		Заказ.Дата					= ТекущаяДата();
		Заказ.ТипЦен 				= ТипЦен;
		Заказ.Валюта				= ВалютаИнтернетПродаж;
		Заказ.Организация			= Константы.ОрганизацияДляИнтернетЗаказов.Получить();
		Заказ.ПользовательИнтернет 	= СсылкаИнтернетПользователь;
		Заказ.УчитыватьНДС	 		= Ложь;
		Заказ.СуммаВключаетНДС	 	= Истина;
		
		Если Не СсылкаИнтернетПользователь.Контрагент.Пустая() Тогда
			
			Заказ.Контрагент = СсылкаИнтернетПользователь.Контрагент;
			ФункцииФормДокументов.КонтрагентПриИзменении(Заказ);
			
		КонецЕсли;
		
	Иначе
		
		Заказ = ЗаказОбъект;
		Заказ.Товары.Очистить();
		
		БизнесПроцесс = ПолучитьБизнесПроцесс(Заказ.Ссылка, error);
		Если БизнесПроцесс = Неопределено Тогда
			ЗаписьЖурналаРегистрации("HTTP.Сайт создал новый заказ", УровеньЖурналаРегистрации.Ошибка, , , error);
			Возврат "";
		КонецЕсли;
			
	КонецЕсли;
	
	// Поищем адрес доставки
	
	shipping_address = Неопределено;
	Если 	ЗаказJson.Свойство("shipping_address", 		shipping_address) Или
			ЗаказJson.Свойство("shipping_address_id", 	shipping_address) Тогда
		
		Если не ПустаяСтрока(shipping_address) Тогда
		
			СсылкаАдресДоставки = ПолучитьОбъектПоСсылке(Справочники.АдресаДоставкиИнтернет, shipping_address, error);
			Если СсылкаАдресДоставки = Неопределено Тогда ЗаписьЖурналаРегистрации("HTTP.Сайт создал новый заказ", УровеньЖурналаРегистрации.Ошибка, , , error);Возврат "";КонецЕсли;
			
			Заказ.АдресДоставки  = СсылкаАдресДоставки;КонецЕсли; КонецЕсли;

	// Поищем склад
	
	Заказ.Склад = Константы.СкладИнтернетЗаказа.Получить();
	
		//warehouse_guid = Неопределено;
		//Если ЗаказJson.Свойство("warehouse_guid", 	warehouse_guid) Тогда
		//	
		//	Если не ПустаяСтрока(warehouse_guid) Тогда
		//	
		//		СсылкаСклад = ПолучитьОбъектПоСсылке(Справочники.Склады, warehouse_guid, error);
		//		Если СсылкаСклад = Неопределено Тогда
		//			ЗаписьЖурналаРегистрации("HTTP.Сайт создал новый заказ", УровеньЖурналаРегистрации.Ошибка, , , error);
		//		 	Возврат "";
		//		КонецЕсли;
		//		
		//		Заказ.Склад  = СсылкаСклад;
		//		
		//	КонецЕсли;
		//	
		//Иначе

		//	
		//КонецЕсли;
	
	// Заполним шапку
	
	utКомментарий 			= "";
	utКомментарийКДоставке 	= "";
	стрКодаОплаты			= "";
	
	ЗаказJson.Свойство("cost_of_delivery", 	Заказ.СуммаДоставки);
	ЗаказJson.Свойство("to_door", 			Заказ.ДоставкаДоДвери); 
	ЗаказJson.Свойство("term_delivery",		Заказ.МаксимальныйСрокДоставки);
	Если ЗаказJson.Свойство("id") Тогда Заказ.id = Формат(Заказ.id, "ЧГ=") КонецЕсли;
	ЗаказJson.Свойство("variant_delivery",	Заказ.ВариантДоставки);
		
	ЗаказJson.Свойство("comment", 			utКомментарий);
 	ЗаказJson.Свойство("comment_delivery",	utКомментарийКДоставке);
	ЗаказJson.Свойство("kind_payment_code",	стрКодаОплаты);
	
	ВидОплаты = ПолучитьВидОплатыПоКОдуОплаты(стрКодаОплаты);
	
	Заказ.ВидОплаты				= ВидОплаты;
	Заказ.Комментарий 			= СокрЛП(?(ЗначениеЗаполнено(utКомментарий), Строка(utКомментарий), "") + " Вид оплаты: " + ВидОплаты);
	Заказ.КомментарийКДоставке 	= utКомментарийКДоставке;
	
	//ЗаписьЖурналаРегистрации("HTTP.Сайт создал новый заказ", УровеньЖурналаРегистрации.Информация, , , "Временный лог:
	//|utКомментарий = " + utКомментарий + "
	//|
	//|utКомментарийКДоставке = " + utКомментарийКДоставке + "
	//|
	//|Заказ.Комментарий = " + Заказ.Комментарий + " 
	//|
	//|Заказ.КомментарийКДоставке = " + Заказ.КомментарийКДоставке);

	
	// Заполним Табличную часть заказ
	
	СтрокиТоваровJson = Неопределено;
	Если Не ЗаказJson.Свойство("line_items", СтрокиТоваровJson) Тогда
		
		error = "Ошибка, не обнаружена таблица товаров, свойство ""line_items""";
		ЗаписьЖурналаРегистрации("HTTP.Сайт создал новый заказ", УровеньЖурналаРегистрации.Ошибка, , , error);
		Возврат "";
		
	КонецЕсли;
	
	Ном = 0;
	Для Каждого СтруктураСтроки Из СтрокиТоваровJson Цикл Ном = Ном + 1;
		
		// Получим товар
		
		product_guid = Неопределено;
		Если Не СтруктураСтроки.Свойство("product_guid", product_guid) Тогда
			
			error = "Ошибка, не обнаружен товар в строке №" + Ном + ", свойство ""product_guid""";
			ЗаписьЖурналаРегистрации("HTTP.Сайт создал новый заказ", УровеньЖурналаРегистрации.Ошибка, , , error);
			Возврат "";
			
		КонецЕсли;
		
		СсылкаНоменклатура = ПолучитьОбъектПоСсылке(Справочники.Номенклатура, product_guid, error);
		Если СсылкаНоменклатура = Неопределено Тогда
			
			ЗаписьЖурналаРегистрации("HTTP.Сайт создал новый заказ", УровеньЖурналаРегистрации.Ошибка, , , error);
			Возврат "";
			
		КонецЕсли;
		
		КоличествоТовара = 0;
		СтруктураСтроки.Свойство("quantity", КоличествоТовара);

		НовСтрока = Заказ.Товары.Добавить();
		НовСтрока.Номенклатура 	= СсылкаНоменклатура;
		Акция = Неопределено;
		НовСтрока.Цена 			= РаботаСНоменклатурой.ПолучитьЦену(СсылкаНоменклатура, ТипЦен, ВалютаИнтернетПродаж,, Заказ.Контрагент, Истина, Акция);
		Если Акция <> Неопределено Тогда
			НовСтрока.Акция = Акция; КонецЕсли;
		
		НовСтрока.Количество	= КоличествоТовара;
		
		НовСтрока.СтавкаНДС		= ?(Заказ.УчитыватьНДС, Перечисления.СтавкиНДС.НДС18, Перечисления.СтавкиНДС.БезНДС);
		НовСтрока.ПроцентАвтоматическойСкидки = РаботаСНоменклатурой.ПолучитьПроцентАвтоматическойСкидки(НовСтрока.Номенклатура, Заказ.Контрагент, Заказ.ДисконтнаяКарта, НовСтрока.Акция);
		
		// пересчитаем строку
		
		НовСтрока.СуммаБезСкидки = НовСтрока.Цена * НовСтрока.Количество;
		НовСтрока.СуммаАвтоматическойСкидки = НовСтрока.СуммаБезСкидки * НовСтрока.ПроцентАвтоматическойСкидки / 100;
		НовСтрока.Сумма	 =	НовСтрока.СуммаБезСкидки - НовСтрока.СуммаАвтоматическойСкидки;

		СтавкаНДС = КэшируемыеФункции.ПолучитьЧислоСтавкиНДС(НовСтрока.СтавкаНДС);
		НовСтрока.СуммаНДС	= СтавкаНДС * НовСтрока.Сумма / (СтавкаНДС + 100);
							
	КонецЦикла;
		
	// Запишем заказ
	
	Заказ.ДополнительныеСвойства.Вставить("Обновление", Ложь); // сайт не пинать
	Заказ.УстановитьНовыйНомер();
	Заказ.ОбменДанными.Загрузка = Истина;
 	Попытка
		Заказ.Записать();
	Исключение
		стрОшибки = ОписаниеОшибки();
		error = "Ошибка при записи интернет заказа
		|" + стрОшибки;
		ЗаписьЖурналаРегистрации("HTTP.Сайт создал новый заказ", УровеньЖурналаРегистрации.Ошибка, , , error);
		Возврат "";
	КонецПопытки;
	
	Заказ.ОбменДанными.Загрузка = Ложь;
	Размещен = Истина;

	ЗаписьЖурналаРегистрации("HTTP.Сайт создал новый заказ", УровеньЖурналаРегистрации.Информация, , , "Временный лог: Начало транзакции");	
	НачатьТранзакцию();
	
	// запрос резерва
 
	ТоварыНаСайт = СформироватьРезерв(Заказ, ТипЦен, Размещен);
		
	// проведение заказа
	Если Размещен Тогда	

		Попытка
			Заказ.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			error = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("HTTP.Сайт создал новый заказ", УровеньЖурналаРегистрации.Ошибка, , , error);

			ОтменитьТранзакцию();
			Перейти ~КонэцТранзакции;
		КонецПопытки;
		
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	ЗаписьЖурналаРегистрации("HTTP.Сайт создал новый заказ", УровеньЖурналаРегистрации.Информация, , , "Временный лог: транзакция зафиксирована");	
	
	~КонэцТранзакции:
	
	// страт бизнес-процесса

	Если НЕ ЕстьЗаказ Тогда
		
		БизнесПроцесс 				= БизнесПроцессы.ИнтернетЗаявка.СоздатьБизнесПроцесс();
		БизнесПроцесс.Дата 			= ТекущаяДата();
		БизнесПроцесс.Заказ = Заказ.Ссылка;
		//БизнесПроцесс.Статус 		= Перечисления.СтатусыИнтерентЗаявки.Открыт;
		
		БизнесПроцесс.ДополнительныеСвойства.Вставить("Обновление", Ложь);

		Попытка
			БизнесПроцесс.Записать();
	    	БизнесПроцесс.Старт();
		Исключение
			error = "Ошибка старта бизнес-процесса: " + ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("HTTP.Сайт создал новый заказ", УровеньЖурналаРегистрации.Ошибка, , , error);
		КонецПопытки;
	Иначе
				
		Если ФункцииБизнесПроцессов.СтоитНаТочкеМаршрута(БизнесПроцесс, БизнесПроцессы.ИнтернетЗаявка.ТочкиМаршрута.ОжиданиеОтвета) Тогда
			Задача = ФункцииБизнесПроцессов.ТекущаяЗадача(БизнесПроцесс);
			ЗадачаОбъект = Задача.ПолучитьОбъект();
			Попытка
				ЗадачаОбъект.ВыполнитьЗадачу();
			Исключение
				error = "Ошибка при выполнении задачи: " + ОписаниеОшибки();
				ЗаписьЖурналаРегистрации("HTTP.Сайт создал новый заказ", УровеньЖурналаРегистрации.Ошибка, , , error);
				Возврат "";
			КонецПопытки;

		КонецЕсли;	
	КонецЕсли;	
		
	// Установим возвращаемые параметры
		
	products = ТоварыНаСайт;
	
	ЗаписьЖурналаРегистрации("HTTP.Сайт создал новый заказ", УровеньЖурналаРегистрации.Информация, , , "Резерв: " + products);
	
	type_order 	= HTTP.ПолучитьТипЗаказа(Заказ.Ссылка, НЕ ЕстьЗаказ);
	status		= HTTP.ПолучитьТекстСтатусаЗаказа(Заказ.Ссылка, НЕ ЕстьЗаказ);
	number 		= Заказ.Номер;
	ГуидЗаказа 	= XMLСтрока(Заказ.Ссылка);
	
	ЗаписьЖурналаРегистрации("HTTP.Сайт создал новый заказ", УровеньЖурналаРегистрации.Информация, , , "Возврат Гуид: " + ГуидЗаказа);
	
	Возврат ГуидЗаказа;
	
КонецФункции

// РЕГИСТР НАКОПЛЕНИЯ
Процедура ЗаписатьВсюНоменклатуруДляПередачиНаСайтИзНабора_ФоновымЗаданием(НаборЗаписей) Экспорт
	
	Если НаборЗаписей.Количество()=0 Тогда
		Возврат;
	КонецЕсли;	
	массивНоменклатуры = Новый Массив;
	Для каждого лЗапись Из НаборЗаписей Цикл
		массивНоменклатуры.Добавить(лЗапись.Номенклатура);
	КонецЦикла;
	
	
	ПараметрыФоновогоЗадания = Новый Массив;
	ПараметрыФоновогоЗадания.Добавить(массивНоменклатуры);
	ФоновыеЗадания.Выполнить("API2.ЗаписатьНаборТоваровВБуфер",
				ПараметрыФоновогоЗадания, Новый УникальныйИдентификатор, 
				"Регистрация номенклатуры документа для отправки на сайт");
	
КонецПроцедуры	

Функция ЗаписатьВсюНоменклатуруДляПередачиНаСайтИзНабора(НаборЗаписей) Экспорт

	// В наборе обязательна колонка "Номенклатура"
	
	API2.ЗаписатьНаборТоваровВБуфер(НаборЗаписей);
	
	Возврат Истина; // Отключаем запись в буфер API 1
	
	// Выгрузим таблицу на sql
			
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Табл.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ
	|	ТаблицаТовара
	|ИЗ
	|	&ТаблицаТовара КАК Табл
	|");
		
	МенеджерВременныхТаблиц 		= Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц 	= МенеджерВременныхТаблиц;
		
	Запрос.УстановитьПараметр("ТаблицаТовара", НаборЗаписей.Выгрузить());
	Запрос.Выполнить();
		
	// Пусть sql там объединяет как хочет
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(Рег.Объект, Док.Номенклатура) 						КАК Объект,
	|	ЕСТЬNULL(Рег.КомандаHTTP, &КомадаPOST) 						КАК КомандаHTTP,
	|	ЕСТЬNULL(Рег.АдресРесурсаСервера, ""/api/products.json"") 	КАК АдресРесурсаСервера,
	|	ЕСТЬNULL(Рег.ТелоЗапроса, """")								КАК ТелоЗапроса,
	|	ЕСТЬNULL(Рег.ЕстьОшибка, ЛОЖЬ)								КАК ЕстьОшибка,
	|	ЕСТЬNULL(Рег.ЭтоТригер, ЛОЖЬ)								КАК ЭтоТригер,
	|	ЕСТЬNULL(Рег.Ошибка, """")									КАК Ошибка
	|ИЗ
	|	РегистрСведений.БуферКомандДляСайта КАК Рег
	|
	|ПОЛНОЕ СОЕДИНЕНИЕ
	|	ТаблицаТовара КАК Док
	|ПО
	|	Рег.Объект = Док.Номенклатура
	|
	//|ДЛЯ ИЗМЕНЕНИЯ
	|";
	
	Запрос.УстановитьПараметр("КомадаPOST", Перечисления.КомандыHTTP.POST);
	ТаблицаНабора = Запрос.Выполнить().Выгрузить();
		
	// Загрузим результат в регистр
	
	Если ТаблицаНабора.Количество() Тогда
		
		НаборБуфера = РегистрыСведений.БуферКомандДляСайта.СоздатьНаборЗаписей();
		НаборБуфера.Загрузить(ТаблицаНабора);
		
		Попытка
			НаборБуфера.Записать();
		Исключение
			
			ОбщиеФункции.СообщитьТекст("Ошибка при записи информации об изменении количества для сайта - " + ОписаниеОшибки());
			Возврат Ложь;
		
		КонецПопытки;
	КонецЕсли;
		
	Возврат Истина;

КонецФункции

// ЛЮБОЙ ОБЪЕКТ

Функция ПолучитьЛюбойОбъектПараметрамиHTML(Ссылка) Экспорт
	
	Возврат "&guids[]=" + XMLСтрока(Ссылка);
	
КонецФункции

// ОТЗЫВЫ

Функция ПолучитьОтзывОТовареПараметрамиHTML(ОтзывСсылка) Экспорт

 Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Ссылка			КАК guid,
	|	Пользователь 	КАК user,
	|	Владелец 		КАК product,
	|	Сообщение 		КАК comment,
	|	Оценка 			КАК evaluation
	|ИЗ
	|	Справочник.ОтзывыОТоваре
	|
	|ГДЕ
	|	Ссылка = &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", ОтзывСсылка);
	
	Текст 	= "";
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Если Таблица.Количество() Тогда
		
		Структура = КонвертацияТипов.ПолучитьСтруктуруИзСТрокиТаблицыЗначений(Таблица);
		
		Для Каждого Элемент Из Структура Цикл
			
			ДобавитьПростойТекстHTML(Текст, Элемент.Ключ, Элемент.Значение, "", Ложь);
				
		КонецЦикла;
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

// КОММЕНТАРИИ

Функция ПолучитьКомментарийПараметрамиHTML(КомментарийСсылка) Экспорт
	
	Запрос = Новый Запрос(" ВЫБРАТЬ РАЗРЕШЕННЫЕ
							|	Ссылка			guids,
							|	Владелец 		article,
							|	Пользователь 	user,
							|	Оценка 			evaluation,
							|	Сообщение		comment
							|ИЗ
							|	Справочник.Комментарии
							|ГДЕ
							|	Ссылка = &Ссылка
							|");
	Запрос.УстановитьПараметр("Ссылка", КомментарийСсылка);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Если Таблица.Количество() Тогда
		
		Текст 	= "";
		
		Структура = КонвертацияТипов.ПолучитьСтруктуруИзСтрокиТаблицыЗначений(Таблица);
		Для Каждого Элемент Из Структура Цикл
			
			ДобавитьПростойТекстHTML(Текст, Элемент.Ключ, Элемент.Значение, "", ложь);
				
		КонецЦикла;
	КонецЕсли;
	
	Возврат Текст;

КонецФункции

// ИНТЕРНЕТ ПОЛЬЗОВАТЕЛЬ

Функция ПолучитьИнтернетПользователяПараметрамиHTML(СсылкаПользователь) Экспорт
	
	//name, surname, patronymic, email, contact_phone, phone, fax, legal_status, state, payer, consignee, payer_and_consignee_agree,
	//address, bank_name, inn, kpp, okpo, bik, current_account,  correspondent_account, director, accountant
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Польз.Имя 				КАК name,
	|	Польз.Фамилия 			КАК surname,
	|	Польз.Отчество 			КАК patronymic,
	|	Польз.ДеньРождения 		КАК birthday,
	|	Польз.ЭлектроннаяПочта 	КАК email,
	|	Польз.КонтактныйТелефон КАК contact_phone,
	|	Польз.Телефон 			КАК phone,
	|	Польз.Факс 				КАК fax,
	|	Склад.Ссылка			КАК склад,
	|	ВЫБОР КОГДА ЮрФизЛицо = &ЮрЛицоРез ИЛИ ЮрФизЛицо = &ЮрЛицоНеРез ТОГДА 1 ИНАЧЕ 0 КОНЕЦ КАК legal_status
	|ИЗ
	|	Справочник.ПользователиИнтернет Польз
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		Справочник.Склады Склад 
	|	ПО (Польз.Дилер = Склад.ОтгрузкаДилерам И Польз.Дилер = ИСТИНА) ИЛИ (НЕ Польз.Дилер = Склад.ОтгрузкаРозничнымКлиентам И Польз.Дилер = ЛОЖЬ)	
	|ГДЕ
	|	Польз.Ссылка = &Ссылка
	|ИТОГИ ПО Польз.Ссылка");
	
	Запрос.УстановитьПараметр("ЮрЛицоРез", 		Перечисления.ЮрФизЛицо.ЮрЛицо);
	Запрос.УстановитьПараметр("ЮрЛицоНеРез", 	Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент);
	Запрос.УстановитьПараметр("Ссылка", 		СсылкаПользователь);
	
	Текст 	= "";
	Дерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Если Дерево.Строки.Количество() Тогда
		
		//уберем, пока не надо

		//Структура = КонвертацияТипов.ПолучитьСтруктуруИзСТрокиДереваЗначений(Дерево);
		
				
		//Для Каждого Элемент Из Структура Цикл
		//	Если ТипЗнч(Элемент.Значение) <> Тип("NULL") Тогда	
		//		
		//		ДобавитьПростойТекстHTML(Текст, Элемент.Ключ, Элемент.Значение, "", Ложь);
		//		
		//	КонецЕсли;
		//КонецЦикла;
			
		СтрокаТаблица 	= Дерево.Строки[0];
		Текст = Текст + "&user[warehouses]=";
		Для Каждого Строка Из СтрокаТаблица.Строки Цикл
			 
			 Текст = Текст + XMLСтрока(Строка.Склад) + ",";
	
		КонецЦикла;

		Текст = Лев(Текст, СтрДлина(Текст)-1);
		
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

// СТАТЬИ

Функция ПолучитьСтатьюПараметрамиHTML(СсылкаСтатья) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Ссылка				КАК guid,
	|	Код 				КАК code_1c,
	|	Наименование 		КАК title,
	|	ВЫБОР КОГДА alies = """" ТОГДА Наименование ИНАЧЕ alies КОНЕЦ КАК alies,
	|	Наименование 		КАК permalink,
	|	Родитель			КАК parent_id,
	|	Родитель			КАК rubric_id,
	|	ДатаСтатьи			КАК date_item,
	|	КраткоеСодержание 	КАК short_text,
	|	ТекстСтатьи 		КАК long_text,
	|	ЕСТЬNULL(Родитель.ЭтоНовости, ЛОЖЬ)	КАК this_news
	|ИЗ
	|	Справочник.ИнтернетСтатьи
	|ГДЕ
	|	Ссылка = &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаСтатья);
	
	Текст 	= "";
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Если Таблица.Количество() Тогда
		
		Структура = КонвертацияТипов.ПолучитьСтруктуруИзСТрокиТаблицыЗначений(Таблица);
		Структура.alies 	= СтрЗаменить(Структура.alies," ","");
		Структура.permalink = СтрЗаменить(Структура.permalink," ","");
		
		Для Каждого Элемент Из Структура Цикл
			
			ДобавитьПростойТекстHTML(Текст, Элемент.Ключ, Элемент.Значение, "", ложь);
				
		КонецЦикла;
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

// НОВОСТИ

Функция ПолучитьНовостьПараметрамиHTML(СсылкаСтатья) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Ссылка				КАК guid,
	|	Родитель			КАК rubric_id,
	|	Наименование 		КАК title,
	|	ВЫБОР КОГДА alies = """" ТОГДА Наименование ИНАЧЕ alies КОНЕЦ КАК alies,
	|	КраткоеСодержание 	КАК permalink,
	|	ДатаСтатьи			КАК date_item,
	|	КраткоеСодержание 	КАК short_text,
	|	ТекстСтатьи 		КАК long_text
	//|	Картинка 			КАК image
	|ИЗ
	|	Справочник.ИнтернетСтатьи
	|ГДЕ
	|	Ссылка = &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаСтатья);
	
	Текст 	= "";
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Если Таблица.Количество() Тогда
		
		Структура = КонвертацияТипов.ПолучитьСтруктуруИзСТрокиТаблицыЗначений(Таблица);
		Структура.alies = СтрЗаменить(Структура.alies," ","");
		
		Для Каждого Элемент Из Структура Цикл
			
			ДобавитьПростойТекстHTML(Текст, Элемент.Ключ, Элемент.Значение, "", ложь);
				
		КонецЦикла;
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

// ВЗАИМОРАСЧЕТЫ

Функция ПолучитьДокументВзаиморасчетовПараметрамиHTML(СсылкаДокумент) Экспорт
	//
	//ПоступлениеТоваров") Или
	//			ТипОбъекта = Тип("ДокументОбъект.РеализацияТоваров") Или
	//			ТипОбъекта = Тип("ДокументОбъект.ЧекККМ") Или
	//			ТипОбъекта = Тип("ДокументОбъект.ОплатаЭлектроннымиДеньгами"
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ * ИЗ
	|(
	|	ВЫБРАТЬ
	|		Ссылка				КАК guid,
	|		Контрагент 			КАК user,
	|		Контрагент 			КАК Контрагент,
	|		Дата 				КАК doc_date,
	|		""Поступление товара №"" + Номер 	КАК doc_name,
	//|		Сумма		 		КАК in_doc,
	|		СуммаДокумента 		КАК in_doc,
	|		0 					КАК out_doc
	|	ИЗ
	|		Документ.ПоступлениеТоваров
	|	ГДЕ
	|		Ссылка = &Ссылка
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Ссылка,
	|		Контрагент,
	|		Контрагент 	,
	|		Дата,
	|		""Реализация товара №"" + Номер,
	|		0,
	//|		Сумма
	|		СуммаДокумента
	|	ИЗ
	|		Документ.РеализацияТоваров
	|	ГДЕ
	|		Ссылка = &Ссылка
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Ссылка,
	|		&ПустойПользователь,
	|		Контрагент 	,
	|		Дата,
	|		""Розничный чек №"" + Номер,
	|		0,
	//|		Сумма
	|		СуммаДокумента
	|	ИЗ
	|		Документ.ЧекККМ
	|	ГДЕ
	|		Ссылка = &Ссылка
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Ссылка,
	|		&ПустойПользователь,
	|		Контрагент 		,
	|		Дата,
	|		""Розничный чек №"" + Номер,
	//|		Сумма,
	|		СуммаДокумента,
	|		0
	|	ИЗ
	|		Документ.ОплатаЭлектроннымиДеньгами
	|	ГДЕ
	|		Ссылка = &Ссылка
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Ссылка,
	|		Контрагент,
	|		Контрагент 	,
	|		Дата,
	|		""Возврат товара №"" + Номер,
	|		0,
	//|		Сумма
	|		СуммаДокумента
	|	ИЗ
	|		Документ.ВозвратОтПокупателя
	|	ГДЕ
	|		Ссылка = &Ссылка
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Ссылка,
	|		Контрагент,
	|		Контрагент 	,
	|		Дата,
	|		""Возврат товара поставщику №"" + Номер,
	//|		Сумма,
	|		СуммаДокумента,
	|		0
	|		
	|	ИЗ
	|		Документ.ВозвратПоставщику
	|	ГДЕ
	|		Ссылка = &Ссылка
	|
    |	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Ссылка,
	|		Контрагент,
	|		Контрагент 	,
	|		Дата,
	|		""Заказ на ремонт №"" + Номер,
	|		0,
	//|		Сумма
	|		СуммаДокумента
	|	ИЗ
	|		Документ.ЗаказНаряд
	|	ГДЕ
	|		Ссылка = &Ссылка
	|
    |	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Ссылка,
	|		Контрагент,
	|		Контрагент 	,
	|		Дата,
	|		""Платежное поручение №"" + Номер,
	//|		Сумма,
	|		СуммаДокумента,
	|		0
	|	ИЗ
	|		Документ.ПлатежноеПоручениеВходящее
	|	ГДЕ
	|		Ссылка = &Ссылка
	|) КАК Запрос
	|
	|	Упорядочить ПО doc_date
	|");
	
	Запрос.УстановитьПараметр("ПустойПользователь", Справочники.Пользователи.ПустаяСсылка());
	Запрос.УстановитьПараметр("Ссылка", 			СсылкаДокумент);
	
	Текст 	= "";
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Если Таблица.Количество() Тогда
		
		Структура 		= КонвертацияТипов.ПолучитьСтруктуруИзСТрокиТаблицыЗначений(Таблица);
		Структура.user 	= ПолучитьGUIDПользователяИнтернетИзКонтрагента(Структура.Контрагент);
		
		Для Каждого Элемент Из Структура Цикл
			
			ДобавитьПростойТекстHTML(Текст, Элемент.Ключ, Элемент.Значение, "billing");
				
		КонецЦикла;
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

// ЗАКАЗ НАРЯДЫ

Функция ПолучитьЗаказНарядПараметрамиHTML(СсылкаДокумент) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Док.Ссылка					КАК guid,
	|	Док.Контрагент 				КАК user,
	|	Док.Контрагент 				КАК Контрагент,
	|	Док.Номер 					КАК number,
	|	Док.Дата 					КАК doc_date,
	|	""Статус в разработке"" КАК status,
	|	Док.Сумма		 			КАК total,
	|	Док.Комментарий 			КАК comment
	|ИЗ
	|	Документ.ЗаказНаряд КАК Док
	|
	|ГДЕ
	|	Ссылка = &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаДокумент);
	
	Текст 	= "";
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Если Таблица.Количество() Тогда
		
		Структура = КонвертацияТипов.ПолучитьСтруктуруИзСТрокиТаблицыЗначений(Таблица);
		Структура.user = ПолучитьGUIDПользователяИнтернетИзКонтрагента(Структура.Контрагент);
		
		Для Каждого Элемент Из Структура Цикл
			
			ДобавитьПростойТекстHTML(Текст, Элемент.Ключ, Элемент.Значение, "order_service");
				
		КонецЦикла;
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции
Функция ПолучитьТипЗаказа_2(ЗаказСсылка, НовыйЗаказ = Ложь) Экспорт
	
	СтатусЗаказа = Заказы.ПолучитьСостояниеЗаказа(ЗаказСсылка);
	
	Если ЗаказСсылка.ЭтоЧерновик Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат НомерСтатусаЗаказа(СтатусЗаказа);
КонецФункции
Функция НомерСтатусаЗаказа(статусЗаказа) Экспорт 
	Если 		СтатусЗаказа = Перечисления.СостоянияЗаказа.Черновик Тогда
		Возврат 0;
	ИначеЕсли 	СтатусЗаказа = Перечисления.СостоянияЗаказа.Открыт Тогда
		Возврат 1;
	ИначеЕсли 	СтатусЗаказа = Перечисления.СостоянияЗаказа.ОжиданиеОплаты Тогда
		Возврат 2;
	ИначеЕсли 		СтатусЗаказа = Перечисления.СостоянияЗаказа.Отгружен
				ИЛИ СтатусЗаказа = Перечисления.СостоянияЗаказа.ОтгруженЧастично
				ИЛИ СтатусЗаказа = Перечисления.СостоянияЗаказа.Отправлен
				ИЛИ СтатусЗаказа = Перечисления.СостоянияЗаказа.ОтправленЧастично
				ИЛИ СтатусЗаказа = Перечисления.СостоянияЗаказа.Доставлен
				ИЛИ СтатусЗаказа = Перечисления.СостоянияЗаказа.ДоставленЧастично Тогда
		Возврат 5;
	ИначеЕсли 	СтатусЗаказа = Перечисления.СостоянияЗаказа.ОжиданиеПодтверждения 
			ИЛИ СтатусЗаказа = Перечисления.СостоянияЗаказа.ОжиданиеОтвета Тогда
		Возврат 8;
	ИначеЕсли 	СтатусЗаказа = Перечисления.СостоянияЗаказа.Собран Тогда
		Возврат 4;
	ИначеЕсли 	СтатусЗаказа = Перечисления.СостоянияЗаказа.Отменен Тогда
		Возврат 11;
	ИначеЕсли 	СтатусЗаказа = Перечисления.СостоянияЗаказа.ОтклоненПоТехническимПричинам Тогда
		Возврат 14;
	Иначе                                                                                                                  
		Возврат 3;
	КонецЕсли;
КонецФункции // НомерСтатусаЗаказа()

