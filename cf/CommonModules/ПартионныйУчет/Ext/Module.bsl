

Процедура ВосстановлениеПартий() Экспорт
	
	Запрос = Новый Запрос("Выбрать Минимум(ДатаАктуальности) Из РегистрСведений.АктуальностьПартионногоУчета");
	Рез=Запрос.Выполнить();
	Если Не Рез.Пустой() Тогда
		ДатаНачала=Рез.Выгрузить()[0].ДатаАктуальности;
	Иначе
		ЗаписьЖурналаРегистрации("ПартионныйУчет",УровеньЖурналаРегистрации.Информация,,,"Партионный учет не требует расчета. Процедура отменена." ,);
		Возврат;
	КонецЕсли;	
		
	ДатаОкончания = ТекущаяДата();
	
	РассчитатьПартии(ДатаНачала,ДатаОкончания,"РегламентноеЗадание.ВосстановлениеПартийНоменклатуры",Ложь);
	
КонецПроцедуры



Процедура РассчитатьПартии(ДатаНачала,ДатаКон,ИмяФормы="Обработка.ПроведениеПоПартиям.Форма.Форма",ОтключитьИтоги=Истина) Экспорт
	
	//Концепция:
	//
	//Обработка расходных документов производится по ФИФО, остальные по индивидуальному алгоритму.
	//Документы обрабатываются в цикле по дням. В пределах дня сортировка сначала по приоритету, затем по времени.
	
	//Обработка может выполняться параллельно с работой пользователей. В случае, если во время работы обработки пользователь перепроведет документ задним числом, эти изменения будут зафиксированы и при слующем запуске запуске
	//учтены.
	
	//Описание приоритетов:
	//1-Поступления, РасчетСебестоимости (не зависящие от других данных документы).
	//2-Оприходования (себестоимость берется из поступлений)
	//3-возврат поставщику (проводится по ФИФО с приоритетом возвращаемой партии. Проводим в первую очередь, чтобы другие документы не списали эту партию по ФИФО.)
	//4-Реализии, Возвраты от покупателей, возврат поставщику, Перемещения, Комплектации и т.д. То есть документы, последовательность проведения которых может влиять друг на друга.
	//5-Списания

	
	
	//инициализация переменных
	ТекДата=НачалоДня(ДатаНачала);
	ДатаОкончания=КонецДня(ДатаКон);
	ВременнаяМеткаНачала=ТекущаяДата();
	НаборЗаписей 	= РегистрыНакопления.ПартииТоваров.СоздатьНаборЗаписей(); 
	НаборЗаписейСебестоимость 	= РегистрыНакопления.СебестоимостьНоменклатуры.СоздатьНаборЗаписей(); 
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала",ТекДата);
	Запрос.УстановитьПараметр("ДатаОкончания",ДатаОкончания);
	ЕстьОшибкаВПроцессеРаботы=Ложь;
	ДатаПоследнегоКорректногоДокумента=ТекДата;
	ДатаИзмененияЗаказНарядов=Константы.ДатаИзмененияЗаказНарядов.Получить();

	
	//сразу очищаем записи за расчетный период, тем самым давая возможность появлению новых. 
	//то есть если пользователь изменит какой либо документ во время работы обработки - это отразится в регистре и при следующем запуске будет учтено
	Запрос.Текст="Выбрать GUID из РегистрСведений.АктуальностьПартионногоУчета ГДЕ ДатаАктуальности Между &ДатаНачала и &ДатаОкончания";
	Рез=Запрос.Выполнить();
	Если Не Рез.Пустой() Тогда
		Выборка=Рез.Выбрать();
		Пока Выборка.Следующий() Цикл
			Мен=РегистрыСведений.АктуальностьПартионногоУчета.СоздатьМенеджерЗаписи();
			Мен.GUID=Выборка.GUID;
			Мен.Удалить();
		КонецЦикла;	
	КонецЕсли;	
	
	//создаем специальную метку на дату начала. Эту запись удаляем в конец процедуры. В случае, если процедура не отработает, то при следующем запуске она будет запущена с даты этой записи
	Мен=РегистрыСведений.АктуальностьПартионногоУчета.СоздатьМенеджерЗаписи();
	Мен.GUID="procedure mark";
	Мен.ДатаАктуальности=ТекДата;
	Мен.Записать(Истина);
	
	
	//рассчитываем общее количество обрабатываемых документов за период 
	Запрос.Текст="
	|Выбрать ссылка,Дата из документ.возвратОтПокупателя 
	|ГДЕ Ссылка.Дата Между &ДатаНачала и &ДатаОкончания и Ссылка.Проведен
	|объединить все
	|Выбрать ссылка,Дата  из документ.ВозвратПереданныхТоваров
	|ГДЕ Ссылка.Дата Между &ДатаНачала и &ДатаОкончания и Ссылка.Проведен
	|объединить все
	|Выбрать ссылка,Дата из документ.ВозвратПоставщику
	|ГДЕ Ссылка.Дата Между &ДатаНачала и &ДатаОкончания и Ссылка.Проведен
	|объединить все
	|Выбрать ссылка,Дата из документ.Комплектация
	|ГДЕ Ссылка.Дата Между &ДатаНачала и &ДатаОкончания и Ссылка.Проведен
	|объединить все
	|Выбрать ссылка,Дата из документ.ОприходованиеТоваров
	|ГДЕ Ссылка.Дата Между &ДатаНачала и &ДатаОкончания и Ссылка.Проведен
	|объединить все
	|Выбрать ссылка,Дата из документ.ПередачаТовара
	|ГДЕ Ссылка.Дата Между &ДатаНачала и &ДатаОкончания и Ссылка.Проведен
	|объединить все
	|Выбрать ссылка,Дата  из документ.реализацияТоваров
	|ГДЕ Ссылка.Дата Между &ДатаНачала и &ДатаОкончания и Ссылка.Проведен
	|объединить все
	|Выбрать ссылка,Дата  из документ.СписаниеТоваров
	|ГДЕ Ссылка.Дата Между &ДатаНачала и &ДатаОкончания и Ссылка.Проведен
	|объединить все
	|Выбрать ссылка,Дата  из документ.ЧекККМ
	|ГДЕ Ссылка.Дата Между &ДатаНачала и &ДатаОкончания и Ссылка.Проведен
	|объединить все
	|Выбрать ссылка,Дата  из документ.ЗаказНаряд
	|ГДЕ Ссылка.Дата Между &ДатаНачала и &ДатаОкончания и Ссылка.Проведен
	|Упорядочить по Дата Убыв
	|"
	;
	Выборка = Запрос.Выполнить().Выбрать();
	ВсегоДок=Выборка.Количество();
	Если ВсегоДок=0 Тогда
		ЗаписьЖурналаРегистрации("ПартионныйУчет",УровеньЖурналаРегистрации.Информация,,,"За период "+ТекДата+" - "+ДатаОкончания+" отсутствуют документы для расчета. Процедура отменена." ,);
		Возврат;
	КонецЕсли;	
	
	
	Если РегистрыНакопления.ПартииТоваров.ПолучитьИспользованиеИтогов()=Ложь Тогда //итоги могли оказаться выключенными в результате прошлых неудач
		РегистрыСведений.ПрогрессБар.УстановитьЗначение(ИмяФормы,0,-1,100,"Расчет итогов регистра");
		РегистрыНакопления.ПартииТоваров.УстановитьИспользованиеИтогов(Истина);
		РегистрыНакопления.СебестоимостьНоменклатуры.УстановитьИспользованиеИтогов(Истина);
	КонецЕсли;	
	
	
	РегистрыСведений.ПрогрессБар.УстановитьЗначение(ИмяФормы,0,-1,100,"Получение остатков партий");
	Запрос.Текст="
	//получаем список партий на начало периода
	//по статистике в ТабПартий получается около 80000 записей. Если делать фильтр по номенклатуре за месяц, то выборка сократится до 60000 записей, то есть большого смысла фильтровать нет. 
	//Если делать фильтр за день - то 20000 записей, но оптимизировать проведение одного дня тоже нет смысла - оно и так быстрое.
	|Выбрать Номенклатура, Партия, ДатаПартии, Поставщик, КоличествоОстаток, СуммаОстаток 
	|из
	|РегистрНакопления.ПартииТоваров.Остатки(&ДатаНачала)
	|Упорядочить по Номенклатура, ДатаПартии"
	;
	ТабПартий=Запрос.Выполнить().Выгрузить();
	//Делаем 2 индекса, так как Таблица значений не умеет использовать часть индекса, ей нужно чтобы состав индекса точно соответствовал отбору.
	ТабПартий.Индексы.Добавить("Номенклатура");  //для поиска при списании
	ТабПартий.Индексы.Добавить("Номенклатура,Партия"); //для поиска при оприходовании. 
		
	
	
	РегистрыСведений.ПрогрессБар.УстановитьЗначение(ИмяФормы,0,-1,100,"Получение цен для оприходований, разукомплектаций, возвратов от покупателей");
	//получаем цену последнего поступления для каждого оприходования разукомплектации возврата
	Запрос.Текст="
	//выбираем всю  номенклатуру которой может понадобиться цена оприходования с ссылками на документы
	|Выбрать Ссылка, Ссылка.Дата Дата,Номенклатура 
	|Поместить Товары 
	|из документ.ОприходованиеТоваров.Товары
	|ГДЕ Ссылка.Дата Между &ДатаНачала и &ДатаОкончания и Ссылка.Проведен
	|
	|Объединить все
	|
	|Выбрать Ссылка, Ссылка.Дата Дата,Номенклатура 
	|из документ.Комплектация.Товары
	|ГДЕ Ссылка.Дата Между &ДатаНачала и &ДатаОкончания и Ссылка.Проведен И Ссылка.Операция = Значение(Перечисление.ВидыоперацийКомплектацияНоменклатуры.РазуКомплектация)
	|
	|Объединить все
	|
	|Выбрать Ссылка, Ссылка.Дата Дата,Номенклатура 
	|из документ.ВозвратОтПокупателя.Товары
	|ГДЕ Ссылка.Дата Между &ДатаНачала и &ДатаОкончания и Ссылка.Проведен 
	|
	|Объединить все
	|
	|Выбрать Ссылка, Ссылка.Дата Дата,Номенклатура 
	|из документ.ВозвратПереданныхТоваров.Товары
	|ГДЕ Ссылка.Дата Между &ДатаНачала и &ДатаОкончания и Ссылка.Проведен 
	|
	|Объединить все
	|
	|Выбрать Ссылка, Ссылка.Дата Дата,Номенклатура 
	|из документ.ЧекККМ.Товары
	|ГДЕ Ссылка.Дата Между &ДатаНачала и &ДатаОкончания и Ссылка.Проведен И Ссылка.ВидОперации = Значение(Перечисление.ВидыОперацийЧекККМ.Возврат) 
	|;
	|
	//выбираем все поступления по нужной номенклатуре
	//здесь будет сканирование всей таблицы партий, по другому пока никак
	|Выбрать Номенклатура, ДатаПартии, Выбор Когда Количество=0 Тогда 0 Иначе Сумма/Количество Конец КАК Цена 
	|Поместить ВсеЦены
	|из
	|РегистрНакопления.ПартииТоваров
	|ГДЕ Период<&ДатаОкончания и ВидДвижения=Значение(ВидДвиженияНакопления.Приход) и (Регистратор Ссылка Документ.ПоступлениеТоваров или Регистратор Ссылка Документ.РедактированиеРегистра) и Номенклатура в (Выбрать Номенклатура из Товары)
	|;
	|
	//соединяем в 2 приема, чтобы получить партию с максимальной датой для каждой ссылки
	|Выбрать Товары.Ссылка,Товары.Номенклатура, Максимум(ВсеЦены.ДатаПартии) ПериодСоед
	|Поместить ТоварыСоед
	|из Товары
	|Левое соединение
	|ВсеЦены по Товары.Номенклатура=ВсеЦены.Номенклатура и Товары.Дата>=ВсеЦены.ДатаПартии
	|Сгруппировать по Товары.Ссылка,Товары.Номенклатура
	|;
	|Выбрать ТоварыСоед.Ссылка,ТоварыСоед.Номенклатура,естьnull(ВсеЦены.Цена,0) Цена
	|из ТоварыСоед
	|Левое соединение
	|ВсеЦены по ТоварыСоед.Номенклатура=ВсеЦены.Номенклатура и ТоварыСоед.ПериодСоед=ВсеЦены.ДатаПартии
	|Упорядочить По ТоварыСоед.Номенклатура,ТоварыСоед.Ссылка"
	;
	ЦеныОприходований=Запрос.Выполнить().Выгрузить(); 
	ЦеныОприходований.Индексы.Добавить("Номенклатура,Ссылка");	
	
	
	
	Если ОтключитьИтоги Тогда
		РегистрыСведений.ПрогрессБар.УстановитьЗначение(ИмяФормы,0,-1,100,"Отключение итогов регистра");
		РегистрыНакопления.ПартииТоваров.УстановитьИспользованиеИтогов(Ложь);
		РегистрыНакопления.СебестоимостьНоменклатуры.УстановитьИспользованиеИтогов(Ложь);
	КонецЕсли;
		
		
	//данные для прогрес-бар
	Счетчик=0;
	ПредСчетчик=0;
	//
	
	РегистрыСведений.ПрогрессБар.УстановитьЗначение(ИмяФормы,0,-1,100,"Проведение по партиям "+" ( "+ВсегоДок+" документов)");
	
	//Цикл по дням 
	Пока ТекДата<ДатаОкончания Цикл
		
		
		Запрос.УстановитьПараметр("ДатаНачала",ТекДата);
		Запрос.УстановитьПараметр("ДатаОкончания",КонецДня(ТекДата));
		Запрос.Текст="
				
		|Выбрать ссылка,Ссылка.Дата Дата, 
		|2 Приоритет, ""ОприходованиеТоваров"" ИмяДокумента, 0 ДопРекв, 0 ДопРекв1, Номенклатура, Количество, 0 Сумма,СуммаПартии   из документ.ОприходованиеТоваров.Товары
		|ГДЕ Ссылка.Дата Между &ДатаНачала и &ДатаОкончания и Ссылка.Проведен И НЕ Номенклатура.ТипНоменклатуры=Значение(Перечисление.ТипыНоменклатуры.Услуга)
		|объединить все
		
		|Выбрать ссылка,Ссылка.Дата Дата,
		|3 Приоритет, ""ВозвратПоставщику"" ИмяДокумента, Ссылка.ДокументПоступления ДопРекв, 0 ДопРекв1, Номенклатура, Количество, 0 Сумма, 0 СуммаПартии  из документ.ВозвратПоставщику.Товары 
		|ГДЕ Ссылка.Дата Между &ДатаНачала и &ДатаОкончания и Ссылка.Проведен И НЕ Номенклатура.ТипНоменклатуры=Значение(Перечисление.ТипыНоменклатуры.Услуга)
		|объединить все
		
		|Выбрать ссылка,Ссылка.Дата Дата, 
		|4 Приоритет, ""ВозвратПереданныхТоваров"" ИмяДокумента, Ссылка.Основание ДопРекв, 0 ДопРекв1, Номенклатура,
		|ЕстьNull(Количество*Упаковка.Коэффициент,Количество) Количество, 
		|0 Сумма ,СуммаПартии   из документ.ВозвратПереданныхТоваров.Товары
		|ГДЕ Ссылка.Дата Между &ДатаНачала и &ДатаОкончания и Ссылка.Проведен И НЕ Номенклатура.ТипНоменклатуры=Значение(Перечисление.ТипыНоменклатуры.Услуга)
		|объединить все
		
		|Выбрать ссылка,Ссылка.Дата Дата, 
		|4 Приоритет, ""Комплектация"" ИмяДокумента, Ссылка.Номенклатура ДопРекв, Ссылка.Количество ДопРекв1, Номенклатура, Количество, 0 Сумма, 0 СуммаПартии  из документ.Комплектация.Товары
		|ГДЕ Ссылка.Дата Между &ДатаНачала и &ДатаОкончания и Ссылка.Проведен И Ссылка.Операция = Значение(Перечисление.ВидыоперацийКомплектацияНоменклатуры.Комплектация) И НЕ Номенклатура.ТипНоменклатуры=Значение(Перечисление.ТипыНоменклатуры.Услуга)
		|объединить все
		
		|Выбрать ссылка,Ссылка.Дата Дата,
		|4 Приоритет, ""РазуКомплектация"" ИмяДокумента, Ссылка.Номенклатура ДопРекв, Ссылка.Количество ДопРекв1, Номенклатура, Количество, 0 Сумма, СуммаПартии   из документ.Комплектация.Товары
		|ГДЕ Ссылка.Дата Между &ДатаНачала и &ДатаОкончания и Ссылка.Проведен И Ссылка.Операция = Значение(Перечисление.ВидыоперацийКомплектацияНоменклатуры.РазуКомплектация) И НЕ Номенклатура.ТипНоменклатуры=Значение(Перечисление.ТипыНоменклатуры.Услуга)
		|объединить все
		
		|Выбрать ссылка,Ссылка.Дата Дата,
		|4 Приоритет, ""ВозвратОтПокупателя"" ИмяДокумента, Ссылка.ДокументОтгрузки ДопРекв, 0 ДопРекв1, Номенклатура, 
		|ЕстьNull(Количество*Упаковка.Коэффициент,Количество) Количество, 
		|0 Сумма, СуммаПартии  из документ.возвратОтПокупателя.Товары 
		|ГДЕ Ссылка.Дата Между &ДатаНачала и &ДатаОкончания и Ссылка.Проведен И НЕ Номенклатура.ТипНоменклатуры=Значение(Перечисление.ТипыНоменклатуры.Услуга)
		|объединить все
		
		|Выбрать ссылка,Ссылка.Дата Дата, 
		|4 Приоритет, ""ПередачаТовара"" ИмяДокумента, 0 ДопРекв, 0 ДопРекв1, Номенклатура, 
		|ЕстьNull(Количество*Упаковка.Коэффициент,Количество) Количество, 
		|0 Сумма, 0 СуммаПартии  из документ.ПередачаТовара.Товары
		|ГДЕ Ссылка.Дата Между &ДатаНачала и &ДатаОкончания и Ссылка.Проведен И НЕ Номенклатура.ТипНоменклатуры=Значение(Перечисление.ТипыНоменклатуры.Услуга)
		|объединить все
		
		|Выбрать ссылка,Ссылка.Дата Дата,
		|4 Приоритет, ""РеализацияТоваров"" ИмяДокумента, 0 ДопРекв, 0 ДопРекв1, Номенклатура,
		|ЕстьNull(Количество*Упаковка.Коэффициент,Количество) Количество, 
		|0 Сумма, 0 СуммаПартии из документ.реализацияТоваров.Товары
		|ГДЕ Ссылка.Дата Между &ДатаНачала и &ДатаОкончания и Ссылка.Проведен И НЕ Номенклатура.ТипНоменклатуры=Значение(Перечисление.ТипыНоменклатуры.Услуга)
		|объединить все
		
		|Выбрать ссылка,Ссылка.Дата Дата, 
		|4 Приоритет, ""ЧекККМПродажа"" ИмяДокумента, 0 ДопРекв, 0 ДопРекв1, Номенклатура,
		|ЕстьNull(Количество*Упаковка.Коэффициент,Количество) Количество, 
		|0 Сумма, 0 СуммаПартии  из документ.ЧекККМ.Товары
		|ГДЕ Ссылка.Дата Между &ДатаНачала и &ДатаОкончания и Ссылка.Проведен и Ссылка.ВидОперации = Значение(Перечисление.ВидыОперацийЧекККМ.Продажа) И НЕ Номенклатура.ТипНоменклатуры=Значение(Перечисление.ТипыНоменклатуры.Услуга)
		|объединить все
		
		|Выбрать ссылка,Ссылка.Дата Дата,
		|4 Приоритет, ""ЧекККМВозврат"" ИмяДокумента, Ссылка.Основание ДопРекв, 0 ДопРекв1, Номенклатура, 
		|ЕстьNull(Количество*Упаковка.Коэффициент,Количество) Количество, 
		|0 Сумма, СуммаПартии   из документ.ЧекККМ.Товары
		|ГДЕ Ссылка.Дата Между &ДатаНачала и &ДатаОкончания и Ссылка.Проведен и Ссылка.ВидОперации = Значение(Перечисление.ВидыОперацийЧекККМ.Возврат) И НЕ Номенклатура.ТипНоменклатуры=Значение(Перечисление.ТипыНоменклатуры.Услуга)
		|объединить все
				
		|Выбрать ссылка,Ссылка.Дата Дата,
		|5 Приоритет, ""СписаниеТоваров"" ИмяДокумента,  0 ДопРекв, 0 ДопРекв1, Номенклатура,
		|ЕстьNull(Количество*Упаковка.Коэффициент,Количество) Количество, 
		|0 Сумма, 0 СуммаПартии  из документ.СписаниеТоваров.Товары
		|ГДЕ Ссылка.Дата Между &ДатаНачала и &ДатаОкончания и Ссылка.Проведен И НЕ Номенклатура.ТипНоменклатуры=Значение(Перечисление.ТипыНоменклатуры.Услуга)
		|объединить все
		
		|Выбрать ссылка,Ссылка.Дата Дата,
		|5 Приоритет, ""ЗаказНаряд"" ИмяДокумента,  0 ДопРекв, 0 ДопРекв1, Номенклатура, Количество, 0 Сумма, 0 СуммаПартии  из документ.ЗаказНаряд.Запчасти Зап
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	(	ВЫБРАТЬ НомерСтроки - 1 ИндексСтрокиНоменклатуры, Гарантия, Ссылка ДокСсылка
		|		ИЗ Документ.ЗаказНаряд.Товары
		|		ГДЕ Ссылка.Дата Между &ДатаНачала и &ДатаОкончания и Ссылка.Проведен И НЕ Номенклатура.ТипНоменклатуры=Значение(Перечисление.ТипыНоменклатуры.Услуга) и Гарантия И НЕ Ссылка.Отменен ) Тов
		|ПО
		|	Зап.ИндексСтрокиНоменклатуры = Тов.ИндексСтрокиНоменклатуры и Зап.Ссылка = Тов.ДокСсылка
		|ГДЕ Ссылка.Дата Между &ДатаНачала и &ДатаОкончания и Ссылка.Проведен И НЕ Номенклатура.ТипНоменклатуры=Значение(Перечисление.ТипыНоменклатуры.Услуга)
		
		|
		|Упорядочить по Приоритет,Дата
		|Итоги Максимум(Приоритет), Максимум(ИмяДокумента), Максимум(ДопРекв), Максимум(ДопРекв1), Максимум(Дата) по Ссылка
		|
		|;
		//Получаем поступления за день
		|Выбрать Номенклатура, Партия, ДатаПартии, Поставщик, Сумма(Количество) , Сумма(Сумма) 
		|
		|из
		|(
		|Выбрать Номенклатура, Партия, ДатаПартии, Поставщик, Количество , Сумма  
		|из 
		|РегистрНакопления.ПартииТоваров 
		|ГДЕ Период Между &ДатаНачала и &ДатаОкончания и Регистратор Ссылка Документ.ПоступлениеТоваров
		|
		|Объединить все
		|
		|Выбрать Номенклатура, Партия, ДатаПартии, Поставщик, Количество , Сумма  
		|из 
		|РегистрНакопления.ПартииТоваров 
		|ГДЕ Период Между &ДатаНачала и &ДатаОкончания и Регистратор Ссылка Документ.РасчетСебестоимости
		|
		|Объединить все
		|
		|Выбрать Номенклатура, Партия, ДатаПартии, Поставщик, Выбор Когда ВидДвижения=Значение(ВидДвиженияНакопления.Приход) Тогда Количество Иначе - Количество Конец Количество , Сумма  
		|из 
		|РегистрНакопления.ПартииТоваров 
		|ГДЕ Период Между &ДатаНачала и &ДатаОкончания и Регистратор Ссылка Документ.РедактированиеРегистра
		|) как ВТ
		|Сгруппировать по Номенклатура, Партия, ДатаПартии, Поставщик
		|Упорядочить по Номенклатура, ДатаПартии
		|;"
		;
		
		мРез=Запрос.ВыполнитьПакет();
		ВыборкаДок=мРез[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Поступления=мРез[1].Выгрузить();
		
		
		//добавляем поступления к ТабПартий 
		Для Каждого Стр из Поступления Цикл
			АктуализироватьТаблицуПартийПриход(ТабПартий,Стр);
		КонецЦикла;	
		
		НачатьТранзакцию();
		
		Состояние="Проведение по партиям "+Формат(ТекДата,"ДФ=dd.MM.yyyy")+" ( "+ВсегоДок+" документов)";
		
		//последовательно обходим таблицу документов (упорядоченных по приоритету и дате) 
		Пока ВыборкаДок.Следующий() Цикл
			
			
			Если ВыборкаДок.ИмяДокумента="РеализацияТоваров" 
			или ВыборкаДок.ИмяДокумента="ЧекККМПродажа" 
			или ВыборкаДок.ИмяДокумента="ПередачаТовара" 
			или ВыборкаДок.ИмяДокумента="ВозвратОтПокупателя" 
			или ВыборкаДок.ИмяДокумента="ЧекККМВозврат" 
			или ВыборкаДок.ИмяДокумента="ВозвратПереданныхТоваров" Тогда
				ПроведениеПоРегиструСебестоимость=Истина;
			Иначе
				ПроведениеПоРегиструСебестоимость=Ложь;
			КонецЕсли;
			
			
			НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаДок.Ссылка);
			НаборЗаписей.Очистить();
			Если ПроведениеПоРегиструСебестоимость Тогда
				НаборЗаписейСебестоимость.Отбор.Регистратор.Установить(ВыборкаДок.Ссылка);
				НаборЗаписейСебестоимость.Очистить();
			КонецЕсли;
		
			
			Если ВыборкаДок.ИмяДокумента="ОприходованиеТоваров" Тогда
				ПолучитьПартииОприходование(ВыборкаДок,ТабПартий,НаборЗаписей,ЦеныОприходований);
			ИначеЕсли ВыборкаДок.ИмяДокумента="Комплектация" Тогда
				ПолучитьПартииКомплектация(ВыборкаДок,ТабПартий,НаборЗаписей);
			ИначеЕсли ВыборкаДок.ИмяДокумента="РазуКомплектация" Тогда
				ПолучитьПартииРазуКомплектация(ВыборкаДок,ТабПартий,НаборЗаписей,ЦеныОприходований);
			ИначеЕсли ВыборкаДок.ИмяДокумента="ВозвратПоставщику" Тогда
				ПолучитьПартииВозвратПоставщику(ВыборкаДок,ТабПартий,НаборЗаписей);
			ИначеЕсли ВыборкаДок.ИмяДокумента="ВозвратОтПокупателя" 
			или ВыборкаДок.ИмяДокумента="ЧекККМВозврат" 
			или ВыборкаДок.ИмяДокумента="ВозвратПереданныхТоваров" Тогда
				ПолучитьПартииВозвратОтПокупателя(ВыборкаДок,ТабПартий,НаборЗаписей,ЦеныОприходований,НаборЗаписейСебестоимость,ПроведениеПоРегиструСебестоимость); //+
			ИначеЕсли ВыборкаДок.ИмяДокумента="ЗаказНаряд" Тогда
				ПолучитьПартииЗаказНаряд(ВыборкаДок,ТабПартий,НаборЗаписей,ДатаИзмененияЗаказНарядов);
			Иначе
				СписатьПартииФИФО(ВыборкаДок,ТабПартий,НаборЗаписей,,НаборЗаписейСебестоимость,ПроведениеПоРегиструСебестоимость);
			КонецЕсли;	
			
			
			Попытка
				НаборЗаписей.Записать(Истина);  //Пробовал предварительно очищать все движения, затем записывать в режиме Ложь (без замещения) - ускорения не обнаружил
				Если ПроведениеПоРегиструСебестоимость Тогда
					НаборЗаписейСебестоимость.Записать(Истина);
				КонецЕсли;	
				
			Исключение
								
				ЗаписьЖурналаРегистрации("ПартионныйУчет",УровеньЖурналаРегистрации.Ошибка,,ВыборкаДок.Ссылка,ОписаниеОшибки(),);
				ЕстьОшибкаВПроцессеРаботы=Истина;
				
			КонецПопытки;
			
			Счетчик=Счетчик+1;
			
			Если Не ЕстьОшибкаВПроцессеРаботы Тогда
				ДатаПоследнегоКорректногоДокумента=ВыборкаДок.Дата;
			КонецЕсли;	
			
		КонецЦикла;//по документам	
		
		ЗафиксироватьТранзакцию();
		
		
		
		ТекДата=ТекДата+86400;
		
		//данные для прогрес-бар
		РегистрыСведений.ПрогрессБар.УстановитьЗначение(ИмяФормы,Счетчик,ПредСчетчик,ВсегоДок,Состояние);
		ПредСчетчик=Счетчик;		
		
	КонецЦикла;//по дням	
	
	
	Если ОтключитьИтоги Тогда
		РегистрыСведений.ПрогрессБар.УстановитьЗначение(ИмяФормы,0,-1,100,"Расчет итогов регистра");
		РегистрыНакопления.ПартииТоваров.УстановитьИспользованиеИтогов(Истина);
		РегистрыНакопления.СебестоимостьНоменклатуры.УстановитьИспользованиеИтогов(Истина);
	КонецЕсли;
	
	
	//в случае успешного выполнения - удяляем спец метку
	Если Не ЕстьОшибкаВПроцессеРаботы Тогда
		Мен=РегистрыСведений.АктуальностьПартионногоУчета.СоздатьМенеджерЗаписи();
		Мен.GUID="procedure mark";
		Мен.Удалить();
	Иначе  // либо ставим на последний корректно проведенный документ
		Мен=РегистрыСведений.АктуальностьПартионногоУчета.СоздатьМенеджерЗаписи();
		Мен.GUID="procedure mark";
		Мен.ДатаАктуальности = ДатаПоследнегоКорректногоДокумента;
		Мен.Записать(Истина);
	КонецЕсли;
	
	
	ВремяВыполнения=ТекущаяДата()-ВременнаяМеткаНачала;
	Скорость=?(ВремяВыполнения=0,0,Окр(ВсегоДок/ВремяВыполнения,0));
	ТекстСообщения="Формирование партий за период "+Формат(ДатаНачала,"ДФ=dd.MM.yyyy")+" - "+Формат(ДатаКон,"ДФ=dd.MM.yyyy")+" заверешено со средней скоростью "+Скорость+" док/сек. Обработано "+ВсегоДок+" за "+ВремяВыполнения+" с.";
	РегистрыСведений.ПрогрессБар.УстановитьПризнакЗавершения(ИмяФормы,ТекстСообщения);
	
	ЗаписьЖурналаРегистрации("ПартионныйУчет",УровеньЖурналаРегистрации.Информация,,,ТекстСообщения ,);

КонецПроцедуры	



#Область ИндивидуальныеПроцедуры

Процедура ПолучитьПартииВозвратПоставщику(ВыборкаДок,ТабПартий,НаборЗаписей)
	
	//списываем партии с приоритетом по документу-поступлению
	//фактически, эта партия может быть уже списана - тогда будет обычное ФИФО
	СписатьПартииФИФО(ВыборкаДок,ТабПартий,НаборЗаписей,ВыборкаДок.ДопРекв);
	
КонецПроцедуры

Процедура ПолучитьПартииОприходование(ВыборкаДок,ТабПартий,НаборЗаписей,ЦеныОприходований)
	
	ОприходоватьНеизвестныеПартии(ВыборкаДок,ТабПартий,НаборЗаписей,ЦеныОприходований);
	
КонецПроцедуры

Процедура ПолучитьПартииКомплектация(ВыборкаДок,ТабПартий,НаборЗаписей)
	
	//сначала обычное списание ФИФО
	СписатьПартииФИФО(ВыборкаДок,ТабПартий,НаборЗаписей);
	
	СписанныеСтроки=НаборЗаписей.Выгрузить();
	ОбщаяСебестоимость = Списанныестроки.Итог("Сумма");
	
	//приходуем одну партию с такой же себестоимостью	
	НовСтр=НаборЗаписей.Добавить();
	НовСтр.ВидДвижения = ВидДвиженияНакопления.Приход;
	НовСтр.Период=выборкаДок.Дата;
	НовСтр.Номенклатура = ВыборкаДок.ДопРекв;
	//НовСтр.Склад = ВыборкаДок.Склад;
	НовСтр.Партия = ВыборкаДок.Ссылка;
	НовСтр.ДатаПартии = ВыборкаДок.Дата;
	НовСтр.Количество = ВыборкаДок.ДопРекв1;
	НовСтр.Сумма = ОбщаяСебестоимость;
	
	АктуализироватьТаблицуПартийПриход(ТабПартий,НовСтр);
		
КонецПроцедуры

Процедура ПолучитьПартииРазуКомплектация(ВыборкаДок,ТабПартий,НаборЗаписей,ЦеныОприходований)
	//ДопРекв - Номенклатура
	//ДопРекв1 - Количество
	
	#Область списаниеФИФО
	//Отбор=Новый Структура("Номенклатура,Склад",ВыборкаДок.ДопРекв,ВыборкаДок.Склад);
	Отбор=Новый Структура("Номенклатура",ВыборкаДок.ДопРекв);
	ПартииСтроки = табПартий.НайтиСтроки(Отбор);
	
	СписаннаяСебестоимость=0;
	ОсталосьСписать = ВыборкаДок.ДопРекв1;
	Для Каждого Партия из ПартииСтроки Цикл  //партии отсортированы по ДатаПартии
		Списываем = Мин(ОсталосьСписать,Партия.КоличествоОстаток);
		Если Списываем<=0 Тогда Продолжить; КонецЕсли;
		
		НовСтр=НаборЗаписей.Добавить();
		НовСтр.ВидДвижения = ВидДвиженияНакопления.Расход;
		НовСтр.Период = ВыборкаДок.Дата;
		//НовСтр.Склад = ВыборкаДок.Склад;
		Новстр.Номенклатура=ВыборкаДок.ДопРекв;
		Новстр.Партия=Партия.Партия;
		Новстр.ДатаПартии=Партия.ДатаПартии; 
		Новстр.Поставщик = Партия.Поставщик; // belova 20.02.2017
		НовСтр.Количество=Списываем;
		НовСтр.Сумма = ?(Партия.КоличествоОстаток=Списываем,Партия.СуммаОстаток, Партия.СуммаОстаток*Списываем/Партия.КоличествоОстаток);
		
		ОсталосьСписать = ОсталосьСписать-Списываем;
		
		АктуализироватьТаблицуПартийРасход(Партия,НовСтр);
		
		СписаннаяСебестоимость=СписаннаяСебестоимость+НовСтр.Сумма;
		
	КонецЦикла;
	
	//если партий с положительным остатком нет, а количество так и не списано
	Если ОсталосьСписать>0 Тогда
		НовСтр=НаборЗаписей.Добавить();
		НовСтр.ВидДвижения = ВидДвиженияНакопления.Расход;
		НовСтр.Период = ВыборкаДок.Дата;
		//НовСтр.Склад = ВыборкаДок.Склад;
		Новстр.Номенклатура=ВыборкаДок.ДопРекв;
		Новстр.Партия=Неопределено;
		Новстр.ДатаПартии=Дата(1,1,1);
		НовСтр.Количество=ОсталосьСписать;
		НовСтр.Сумма = 0;
		
		//актуализация таблицы партий в данном случае не нужна, так как строки с нулевым и отрицательным количеством одинаково ингорируются в расчетах.
		
	КонецЕсли;	
	
	#КонецОбласти
	
	#Область Оприходование	
	
	мКоэф=Новый Массив;
	СумКоэф=0;
	ВыборкаТов=ВыборкаДок.Выбрать();
	Пока ВыборкаТов.Следующий() Цикл
		Отбор=Новый Структура("Номенклатура,Ссылка",ВыборкаТов.Номенклатура,ВыборкаДок.Ссылка);
		Цены = ЦеныОприходований.НайтиСтроки(Отбор);
		НайденнаяЦена=?(Цены.Количество()>0,Цены[0].Цена,0);
		Если НайденнаяЦена=0 Тогда //если товар не поступал ранее берем цену из ТЧ документа Оприходование
			НайденнаяЦена=?(ВыборкаТов.Количество=0,0,ВыборкаТов.СуммаПартии/ВыборкаТов.Количество); 
		КонецЕсли;	
		Коэф=НайденнаяЦена*ВыборкаТов.Количество;
		мКоэф.Добавить(Коэф);
		СумКоэф=СумКоэф+Коэф;
	КонецЦикла;	
	Если мКоэф.Количество()=1 Тогда //если одна комплектующая, то коэф 1
		мКоэф[0]=1;
	КонецЕсли;	
	СумКоэф=?(СумКоэф=0,1,СумКоэф);
	
	
	ВыборкаТов.Сбросить();
	Счетчик=0;
	Пока ВыборкаТов.Следующий() Цикл
		
		НовСтр=НаборЗаписей.Добавить();
		НовСтр.ВидДвижения = ВидДвиженияНакопления.Приход;
		НовСтр.Период=выборкаДок.Дата;
		НовСтр.Номенклатура = ВыборкаТов.Номенклатура;
		//НовСтр.Склад = ВыборкаДок.Склад;
		НовСтр.Партия = ВыборкаДок.Ссылка;
		НовСтр.ДатаПартии = ВыборкаДок.Дата;
		НовСтр.Количество = ВыборкаТов.Количество;
		
		коэф=мКоэф[Счетчик];
		НовСтр.Сумма = СписаннаяСебестоимость*Коэф/СумКоэф;
		Если НовСтр.Сумма=0 Тогда
			НовСтр.ОписаниеОшибки = Перечисления.ВидыОшибокПартионногоУчета.ОприходованиеНовойНоменклатуры;
		КонецЕсли;	
		
		АктуализироватьТаблицуПартийПриход(ТабПартий,НовСтр);
		
		Счетчик=Счетчик+1;
	КонецЦикла;
	
	#КонецОбласти	
КонецПроцедуры

Процедура ПолучитьПартииВозвратОтПокупателя(ВыборкаДок,ТабПартий,НаборЗаписей,ЦеныОприходований,НаборЗаписейСебестоимость,ПроведениеПоРегиструСебестоимость)
	
	Если ЗначениеЗаполнено(ВыборкаДок.ДопРекв) Тогда
		ОприходоватьСписанныеПартииФИФО(ВыборкаДок,ТабПартий,НаборЗаписей,ЦеныОприходований,НаборЗаписейСебестоимость)
	Иначе
		ОприходоватьНеизвестныеПартии(ВыборкаДок,ТабПартий,НаборЗаписей,ЦеныОприходований,НаборЗаписейСебестоимость,ПроведениеПоРегиструСебестоимость);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПолучитьПартииЗаказНаряд(ВыборкаДок,ТабПартий,НаборЗаписей,ДатаИзмененияЗаказНарядов)
	
	Если ВыборкаДок.Дата>=ДатаИзмененияЗаказНарядов Тогда
		СписатьПартииФИФО(ВыборкаДок,ТабПартий,НаборЗаписей,ВыборкаДок.ДопРекв);
	Иначе
		//пишем пустой набор чтобы перетереть предыдущие некорректные записи
	КонецЕсли;	
	
КонецПроцедуры


#КонецОбласти


#Область ОбщиеПроцедуры

Процедура СписатьПартииФИФО(ВыборкаДок,ТабПартий,НаборЗаписей,ПриоритетнаяПартия="",НаборЗаписейСебестоимость=Неопределено,ПроведениеПоРегиструСебестоимость=Ложь)
	
	//обходим номенклатуру документа
	выборкаТов=выборкаДок.Выбрать();
	Пока ВыборкаТов.Следующий() Цикл
		Отбор=Новый Структура("Номенклатура",ВыборкаТов.Номенклатура);
		массивСтрок = табПартий.НайтиСтроки(Отбор);
		
		//метод НайтиСтроки возвращает строки в порядке "как ему захочется" - так что сортируем вручную.
		//если быть точнее, то порядок строк в массиве определяется порядок их добавления в таблицу значений (не зависит от индекса строки)
		ПартииСтроки=Новый ТаблицаЗначений;
		ПартииСтроки.Колонки.Добавить("СтрокаТЗ");
		ПартииСтроки.Колонки.Добавить("ДатаПартии");
		Для Каждого Стр Из массивСтрок Цикл
			НовСтр=ПартииСтроки.Добавить();
			НовСтр.СтрокаТЗ=Стр;
			Новстр.ДатаПартии=Стр.ДатаПартии;
		КонецЦикла;	
		ПартииСтроки.Сортировать("ДатаПартии");
			
		
		Если ЗначениеЗаполнено(ПриоритетнаяПартия) Тогда
			Смещение=0;
			Для Каждого стр Из ПартииСтроки Цикл
				Если Стр.СтрокаТЗ.Партия = ПриоритетнаяПартия Тогда 
					Если Смещение<>0 Тогда
						ПартииСтроки.Сдвинуть(стр,Смещение);
					КонецЕсли;	
					Прервать;
				КонецЕсли;	
				Смещение=Смещение-1;
			КонецЦикла;	
			
		КонецЕсли;	
		
		ОсталосьСписать = ВыборкаТов.Количество;
		//Себестоимость=0;
		Для Каждого Стр из ПартииСтроки Цикл 
			Партия=Стр.СтрокаТЗ;
						
			Списываем = Мин(ОсталосьСписать,Партия.КоличествоОстаток);
			Если Списываем<=0 Тогда Продолжить; КонецЕсли;
			
			СуммаПартии = ?(Партия.КоличествоОстаток=Списываем,Партия.СуммаОстаток, Партия.СуммаОстаток*Списываем/Партия.КоличествоОстаток);
			
			НовСтр=НаборЗаписей.Добавить();
			НовСтр.ВидДвижения = ВидДвиженияНакопления.Расход;
			НовСтр.Период = ВыборкаТов.Дата;
			Новстр.Номенклатура=ВыборкаТов.Номенклатура;
			Новстр.Партия=Партия.Партия;
			Новстр.ДатаПартии=Партия.ДатаПартии;
			Новстр.Поставщик = Партия.Поставщик; // belova 20.02.17
			НовСтр.Количество=Списываем;
			НовСтр.Сумма = СуммаПартии;
			//Себестоимость = Себестоимость + НовСтр.Сумма;
			
			Если НовСтр.Сумма=0 Тогда
				НовСтр.ОписаниеОшибки=Перечисления.ВидыОшибокПартионногоУчета.СледствиеПредыдущейОшибки;
			КонецЕсли;	
			
			ОсталосьСписать = ОсталосьСписать-Списываем;
			
			//актуализируем таблицу партий
			АктуализироватьТаблицуПартийРасход(Партия,НовСтр);
			
			//регистр Себестоимость  //добавила belova 20.02.17
			Если ПроведениеПоРегиструСебестоимость тогда
				НовСтр=НаборЗаписейСебестоимость.Добавить();
				НовСтр.Период = ВыборкаТов.Дата;
				Новстр.Номенклатура=ВыборкаТов.Номенклатура;
				НовСтр.ДокументПродажи=выборкаТов.Ссылка;
				Новстр.Партия=Партия.Партия;
				Новстр.Поставщик = Партия.Поставщик;
				НовСтр.Количество = Списываем;
				НовСтр.Себестоимость = СуммаПартии;
				НовСтр.СебестоимостьЗаЕдиницу = ?(Списываем=0,0,СуммаПартии/Списываем);
			КонецЕсли;
			
		КонецЦикла;
		
		//если партий с положительным остатком нет, а количество так и не списано
		Если ОсталосьСписать>0 Тогда
			НовСтр=НаборЗаписей.Добавить();
			НовСтр.ВидДвижения = ВидДвиженияНакопления.Расход;
			НовСтр.Период = ВыборкаТов.Дата;
			//НовСтр.Склад = ВыборкаТов.Склад;
			Новстр.Номенклатура=ВыборкаТов.Номенклатура;
			Новстр.Партия=Неопределено;
			Новстр.ДатаПартии=Дата(1,1,1);
			НовСтр.Количество=ОсталосьСписать;
			НовСтр.Сумма = 0;
			НовСтр.ОписаниеОшибки=Перечисления.ВидыОшибокПартионногоУчета.ОтсутствиеНоменклатуры;
			
			//актуализация таблицы партий в данном случае не нужна, так как строки с нулевым и отрицательным количеством одинаково ингорируются в расчетах.
			
			//регистр Себестоимость  //добавила belova 20.02.17
			Если ПроведениеПоРегиструСебестоимость тогда
				НовСтр=НаборЗаписейСебестоимость.Добавить();
				НовСтр.Период = ВыборкаТов.Дата;
				Новстр.Номенклатура=ВыборкаТов.Номенклатура;
				НовСтр.ДокументПродажи=выборкаТов.Ссылка;
				Новстр.Партия=Неопределено;
				НовСтр.Количество = ОсталосьСписать;
				НовСтр.Себестоимость = 0;
				НовСтр.СебестоимостьЗаЕдиницу = 0;
			КонецЕсли;
			
		КонецЕсли;	
		
		//регистр Себестоимость // так было до belova 20.02.17
		//Если ПроведениеПоРегиструСебестоимость тогда
		//	НовСтр=НаборЗаписейСебестоимость.Добавить();
		//	НовСтр.Период = ВыборкаТов.Дата;
		//	Новстр.Номенклатура=ВыборкаТов.Номенклатура;
		//	НовСтр.ДокументПродажи=выборкаТов.Ссылка;
		//	НовСтр.Количество = ВыборкаТов.Количество;
		//	НовСтр.Себестоимость = Себестоимость;
		//	НовСтр.СебестоимостьЗаЕдиницу = ?(ВыборкаТов.Количество=0,0,Себестоимость/ВыборкаТов.Количество);
		//КонецЕсли;
		
	КонецЦикла;//по номенклатуре	
	
КонецПроцедуры

Процедура ОприходоватьСписанныеПартииФИФО(ВыборкаДок,ТабПартий,НаборЗаписей,ЦеныОприходований,НаборЗаписейСебестоимость)
	
	Запрос=Новый Запрос("Выбрать Номенклатура,Партия,ДатаПартии, Поставщик, Количество КоличествоОстаток,Сумма СуммаОстаток из РегистрНакопления.ПартииТоваров ГДЕ Регистратор=&ДокументОтгрузки И Период<&ДатаВозврата");
	Запрос.УстановитьПараметр("ДокументОтгрузки",ВыборкаДок.ДопРекв);
	Запрос.УстановитьПараметр("ДатаВозврата",ВыборкаДок.Дата);
	СписанныеПартии = Запрос.Выполнить().Выгрузить();
	
	//приходуем по ФИФО
	выборкаТов=выборкаДок.Выбрать();
	Пока ВыборкаТов.Следующий() Цикл
		Отбор=Новый Структура("Номенклатура",ВыборкаТов.Номенклатура);
		ПартииСтроки = СписанныеПартии.НайтиСтроки(Отбор);
		
		ОсталосьСписать = ВыборкаТов.Количество;
		//Себестоимость=0;
		Для Каждого Партия из ПартииСтроки Цикл  //партии отсортированы по ДатаПартии
			Списываем = Мин(ОсталосьСписать,Партия.КоличествоОстаток);
			Если Списываем<=0 Тогда Продолжить; КонецЕсли;
			
			СуммаПартии = ?(Партия.КоличествоОстаток=Списываем,Партия.СуммаОстаток, Партия.СуммаОстаток*Списываем/Партия.КоличествоОстаток);

			НовСтр=НаборЗаписей.Добавить();
			НовСтр.ВидДвижения = ВидДвиженияНакопления.Приход;
			НовСтр.Период = ВыборкаТов.Дата;
			//НовСтр.Склад = ВыборкаТов.Склад;
			Новстр.Номенклатура=ВыборкаТов.Номенклатура;
			Новстр.Партия=Партия.Партия;
			Новстр.ДатаПартии=Партия.ДатаПартии;
			Новстр.Поставщик = Партия.Поставщик; // belova 20.02.17
			НовСтр.Количество=Списываем;
			НовСтр.Сумма = СуммаПартии;
			//Себестоимость=Себестоимость+НовСтр.Сумма;
			
			Если НовСтр.Сумма=0 Тогда
				НовСтр.ОписаниеОшибки=Перечисления.ВидыОшибокПартионногоУчета.СледствиеПредыдущейОшибки;
			КонецЕсли;	
			
			ОсталосьСписать = ОсталосьСписать-Списываем;
			
			//актуализируем таблицу списанных партий
			АктуализироватьТаблицуПартийРасход(Партия,НовСтр);
			
			//актуализация основной таблицы
			АктуализироватьТаблицуПартийПриход(ТабПартий,НовСтр);
						
			//регистр Себестоимость //добавила belova 20.02.17
			НовСтр=НаборЗаписейСебестоимость.Добавить();
			НовСтр.Период = ВыборкаТов.Дата;
			Новстр.Номенклатура=ВыборкаТов.Номенклатура;
			НовСтр.ДокументПродажи=выборкаДок.ДопРекв;
			Новстр.Партия=Партия.Партия;
			Новстр.Поставщик = Партия.Поставщик;
			НовСтр.Количество = -Списываем;
			НовСтр.Себестоимость = -СуммаПартии;
			НовСтр.СебестоимостьЗаЕдиницу = ?(Списываем=0,0,СуммаПартии/Списываем);
				
		КонецЦикла;
		
		//если списанных партий нет, а количество так и не оприходовано - это явно говорит об ошибке учета. Оприходуем как неизвестную партию.
		Если ОсталосьСписать>0 Тогда
				
			Отбор=Новый Структура("Номенклатура,Ссылка",ВыборкаТов.Номенклатура,ВыборкаДок.Ссылка);
			Цены = ЦеныОприходований.НайтиСтроки(Отбор);
			НайденнаяЦена=?(Цены.Количество()>0,Цены[0].Цена,0);
			Если НайденнаяЦена=0 Тогда //если товар не поступал ранее берем цену из ТЧ документа 
				НайденнаяЦена=?(ВыборкаТов.Количество=0,0,ВыборкаТов.СуммаПартии/ВыборкаТов.Количество); 
			КонецЕсли;	
			
			СуммаПартии = ОсталосьСписать*НайденнаяЦена;
			
			НовСтр=НаборЗаписей.Добавить();
			НовСтр.ВидДвижения = ВидДвиженияНакопления.Приход;
			НовСтр.Период = ВыборкаТов.Дата;
			//НовСтр.Склад = ВыборкаТов.Склад;
			Новстр.Номенклатура=ВыборкаТов.Номенклатура;
			Новстр.Партия=ВыборкаДок.Ссылка;
			Новстр.ДатаПартии=ВыборкаДок.Дата;
			НовСтр.Количество=ОсталосьСписать;
			НовСтр.Сумма = СуммаПартии;
			//Себестоимость=Себестоимость+НовСтр.Сумма;
			
			НовСтр.ОписаниеОшибки = Перечисления.ВидыОшибокПартионногоУчета.ВозвратОтПокупателяНеизвестногоТовара;
			
			//актуализация основной таблицы
			АктуализироватьТаблицуПартийПриход(ТабПартий,НовСтр);
			
			//регистр Себестоимость //добавила belova 20.02.17
			НовСтр=НаборЗаписейСебестоимость.Добавить();
			НовСтр.Период = ВыборкаТов.Дата;
			Новстр.Номенклатура=ВыборкаТов.Номенклатура;
			НовСтр.ДокументПродажи=выборкаДок.ДопРекв;
			Новстр.Партия=выборкаДок.Ссылка;
			НовСтр.Количество = -ОсталосьСписать;
			НовСтр.Себестоимость = -СуммаПартии;
			НовСтр.СебестоимостьЗаЕдиницу = ?(ОсталосьСписать=0,0,СуммаПартии/ОсталосьСписать);;
			
		КонецЕсли;	
		
		////регистр Себестоимость
		//НовСтр=НаборЗаписейСебестоимость.Добавить();
		//НовСтр.Период = ВыборкаТов.Дата;
		//Новстр.Номенклатура=ВыборкаТов.Номенклатура;
		//НовСтр.ДокументПродажи=выборкаДок.ДопРекв;
		//НовСтр.Количество = -ВыборкаТов.Количество;
		//НовСтр.Себестоимость = -Себестоимость;
		//НовСтр.СебестоимостьЗаЕдиницу = ?(ВыборкаТов.Количество=0,0,Себестоимость/ВыборкаТов.Количество);
		
	КонецЦикла;//по номенклатуре	
	
	
КонецПроцедуры	

Процедура ОприходоватьНеизвестныеПартии(ВыборкаДок,ТабПартий,НаборЗаписей,ЦеныОприходований,НаборЗаписейСебестоимость=Неопределено, ПроведениеПоРегиструСебестоимость=Ложь)
	
	выборкаТов=выборкаДок.Выбрать();
	Пока ВыборкаТов.Следующий() Цикл
		
		Отбор=Новый Структура("Номенклатура,Ссылка",ВыборкаТов.Номенклатура,ВыборкаДок.Ссылка);
		Цены = ЦеныОприходований.НайтиСтроки(Отбор);
		НайденнаяЦена=?(Цены.Количество()>0,Цены[0].Цена,0);
		Если НайденнаяЦена=0 Тогда //если товар не поступал ранее берем цену из ТЧ документа 
			НайденнаяЦена=?(ВыборкаТов.Количество=0,0,ВыборкаТов.Сумма/ВыборкаТов.Количество); 
		КонецЕсли;	
		
		НовСтр=НаборЗаписей.Добавить();
		НовСтр.ВидДвижения = ВидДвиженияНакопления.Приход;
		НовСтр.Период = ВыборкаТов.Дата;
		//НовСтр.Склад = ВыборкаТов.Склад;
		Новстр.Номенклатура=ВыборкаТов.Номенклатура;
		Новстр.Партия=ВыборкаДок.Ссылка;
		Новстр.ДатаПартии=ВыборкаТов.Дата;
		НовСтр.Количество=ВыборкаТов.Количество;
		НовСтр.Сумма = ВыборкаТов.Количество*НайденнаяЦена;
		Если НовСтр.Сумма=0 Тогда
			НовСтр.ОписаниеОшибки = Перечисления.ВидыОшибокПартионногоУчета.ОприходованиеНовойНоменклатуры;
		КонецЕсли;	
		
		АктуализироватьТаблицуПартийПриход(ТабПартий,НовСтр);
		
		//регистр Себестоимость
		Если ПроведениеПоРегиструСебестоимость тогда
			Себестоимость = НовСтр.Сумма;
			
			НовСтр=НаборЗаписейСебестоимость.Добавить();
			НовСтр.Период = ВыборкаТов.Дата;
			Новстр.Номенклатура=ВыборкаТов.Номенклатура;
			НовСтр.ДокументПродажи=выборкаДок.ДопРекв;
			Новстр.Партия=ВыборкаДок.Ссылка; // belova 20.02.17
			НовСтр.Количество = -ВыборкаТов.Количество;
			НовСтр.Себестоимость = -Себестоимость;
			НовСтр.СебестоимостьЗаЕдиницу = ?(ВыборкаТов.Количество=0,0,Себестоимость/ВыборкаТов.Количество);
		КонецЕсли;
		
	КонецЦикла;//по номенклатуре	
	
КонецПроцедуры

Процедура АктуализироватьТаблицуПартийПриход(ТабПартий,НовСтр)
	
	//Отбор=Новый Структура("Номенклатура,Склад,Партия",Новстр.Номенклатура,Новстр.Склад,НовСтр.Партия);
	Отбор=Новый Структура("Номенклатура,Партия",Новстр.Номенклатура,НовСтр.Партия);
	Партии = табПартий.НайтиСтроки(Отбор);
	Если Партии.Количество()=0 Тогда
		
		//не удавшаяся попытка осознанного позиционирования строки - при поиске он все равно сортирует как ему хочется.
		
		////определяем позицию куда вставить новую партию
		//Отбор=Новый Структура("Номенклатура",Новстр.Номенклатура);
		//Партии = табПартий.НайтиСтроки(Отбор);
		//ИндексСтроки=0;
		//Если Партии.Количество()<>0 Тогда
		//	Для Каждого Партия Из Партии Цикл
		//		Если  НовСтр.ДатаПартии < Партия.ДатаПартии  Тогда
		//			ИндексСтроки=ТабПартий.Индекс(Партия);
		//			Прервать;
		//		КонецЕсли;	
		//	КонецЦикла;
		//КонецЕсли;
		//
		//Если ИндексСтроки=0 Тогда
		//	НовСтрТабПартий=ТабПартий.Добавить();  
		//Иначе
		//	НовСтрТабПартий=ТабПартий.Вставить(ИндексСтроки);  
		//КонецЕсли;
		
		НовСтрТабПартий=ТабПартий.Добавить();  
		ЗаполнитьЗначенияСвойств(НовСтрТабПартий,НовСтр);
		НовСтрТабПартий.КоличествоОстаток=НовСтр.Количество;
		НовСтрТабПартий.СуммаОстаток=НовСтр.Сумма;
	Иначе	
		//в табПартий должна быть одна строка по данному отбору
		Партия=Партии[0];
		Партия.КоличествоОстаток=Партия.КоличествоОстаток+НовСтр.Количество;
		Партия.СуммаОстаток=Партия.СуммаОстаток+НовСтр.Сумма;
	КонецЕсли;	
	
КонецПроцедуры	

Процедура АктуализироватьТаблицуПартийРасход(Партия,НовСтр)
	
	Партия.КоличествоОстаток = Партия.КоличествоОстаток - НовСтр.Количество;
	Партия.СуммаОстаток = Партия.СуммаОстаток - НовСтр.Сумма;
	
КонецПроцедуры	


#КонецОбласти


#Область ПодпискиНаСобытия

Процедура ПартионныйУчетОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	УстановитьДатуАктуальности(Источник.Ссылка);
КонецПроцедуры

Процедура ПартионныйУчетОтменаПроведения(Источник, Отказ) Экспорт
	УстановитьДатуАктуальности(Источник.Ссылка);
КонецПроцедуры

Процедура УстановитьДатуАктуальности(Ссылка)
	
	ИмяДок = ССылка.Метаданные().Имя;
		
	Запрос=Новый Запрос("Выбрать Дата из Документ."+ИмяДок+" ГДЕ Ссылка =&Ссылка");
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Рез=Запрос.Выполнить();
	Выборка=Рез.Выбрать();
	Выборка.Следующий();
	
	Мен=РегистрыСведений.АктуальностьПартионногоУчета.СоздатьМенеджерЗаписи();
	Мен.GUID=Ссылка.УникальныйИдентификатор();
	Мен.ДатаАктуальности=Выборка.Дата;
	Мен.Записать(Истина);
	
КонецПроцедуры	

#КонецОбласти



//Процедура ПолучитьПартииРасчетСебестоимости(ВыборкаДок,ТабПартий,НаборЗаписей)
//	
//	//ДопРекв - Инвойс
//	//ДопРекв1 - Дата инвойса
//	//Сумма - ТаможенныйПлатеж 
//	
//	//суть документа - отражение доп. расходов на партию
//	//партией считается инвойс
//	
//	
//	выборкаТов=выборкаДок.Выбрать();
//	Пока ВыборкаТов.Следующий() Цикл
//		
//		НовСтр=НаборЗаписей.Добавить();
//		НовСтр.ВидДвижения = ВидДвиженияНакопления.Приход;
//		НовСтр.Период = ВыборкаТов.Дата;
//		//НовСтр.Склад = ВыборкаДок.Склад;
//		Новстр.Номенклатура=ВыборкаТов.Номенклатура;
//		Новстр.Партия=ВыборкаДок.ДопРекв;
//		Новстр.ДатаПартии=ВыборкаДок.ДопРекв1;
//		НовСтр.Количество=0;
//		НовСтр.Сумма = ВыборкаТов.Сумма;
//		Если Не ЗначениеЗаполнено(НовСтр.Партия) Тогда
//			НовСтр.ОписаниеОшибки = Перечисления.ВидыОшибокПартионногоУчета.НеУказанИнвойс;
//		КонецЕсли;	
//		
//		АктуализироватьТаблицуПартийПриход(ТабПартий,НовСтр);
//		
//	КонецЦикла;//по номенклатуре	
//	
//КонецПроцедуры

//Процедура ПолучитьПартииУслугиСтороннейОрганизации(ВыборкаДок,ТабПартий,НаборЗаписей)
//	//приходуем на склад получатель сумму доп расходов, минуя партии в пути
//	//можно было приходовать на ПартииВПути, но анализировать себестоимость удобнее по регистру Партии, чтобы из него сразу можно было попасть в регистратор
//	
//	//ДопРекв - способ распределния
//	//ДопРекв1 - сумма к распределению
//	//Номенклатура - документ ОтгрузкаТоваров
//	
//	
//	МассивРегистраторов = Новый Массив; 
//	выборкаОтгрузки=выборкаДок.Выбрать();
//	Пока выборкаОтгрузки.Следующий() Цикл
//		МассивРегистраторов.Добавить(выборкаОтгрузки.Номенклатура);
//	КонецЦикла;
//	
//	//Запрос=Новый Запрос("Выбрать Номенклатура,Партия,ДатаПартии,0 Количество,Сумма СуммаБаза,Номенклатура.Вес*Количество ВесПартии, Выразить(Регистратор КАК Документ.ОтгрузкаТоваров).СкладПолучатель Склад из регистрНакопления.ПартииТоваров ГДЕ Регистратор в (&Массиврегистраторов)");
//	Запрос=Новый Запрос("Выбрать Номенклатура,Партия,ДатаПартии,0 Количество,Сумма СуммаБаза,Номенклатура.Вес*Количество ВесПартии из регистрНакопления.ПартииТоваров ГДЕ Регистратор в (&Массиврегистраторов)");
//	Запрос.УстановитьПараметр("МассивРегистраторов",МассивРегистраторов);
//	ТабДвиж=Запрос.Выполнить().Выгрузить();
//	ТабДвиж.Колонки.Добавить("Сумма");
//	ОбщаяСумма=ТабДвиж.Итог("СуммаБаза");
//	ОбщийВес=ТабДвиж.Итог("ВесПартии");
//	Для Каждого Движ из табДвиж Цикл
//		Если ВыборкаДок.ДопРекв=Перечисления.СпособыРаспределенияРасходовНаНоменклатуру.ПоВесу Тогда
//			Движ.Сумма=ВыборкаДок.ДопРекв1*Движ.ВесПартии/ОбщийВес;
//		Иначе
//			Движ.Сумма=ВыборкаДок.ДопРекв1*Движ.СуммаБаза/ОбщаяСумма;
//		КонецЕсли;	
//		
//		НовСтр=НаборЗаписей.Добавить();
//		ЗаполнитьЗначенияСвойств(Новстр,Движ);
//		НовСтр.ВидДвижения = ВидДвиженияНакопления.Приход;
//		НовСтр.Период = ВыборкаДок.Дата;
//		
//		АктуализироватьТаблицуПартийПриход(ТабПартий,НовСтр);
//		
//	КонецЦикла;	
//	
//КонецПроцедуры


//Процедура ПолучитьПартииОтгрузкаТоваров(ВыборкаДок,ТабПартий,ТабПартийВПути,НаборЗаписей,НаборЗаписейВПути)
//	
//	//сначала обычное списание ФИФО
//	СписатьПартииФИФО(ВыборкаДок,ТабПартий,НаборЗаписей);
//	
//	//затем приходуем те же самые партии на ПартииВПути.
//	СписанныеСтроки=НаборЗаписей.Выгрузить();
//	Для Каждого Стр из СписанныеСтроки Цикл
//		
//		НовСтр=НаборЗаписейВПути.Добавить();
//		ЗаполнитьЗначенияСвойств(НовСтр,стр);
//		
//		НовСтр.ВидДвижения = ВидДвиженияНакопления.Приход;
//		//НовСтр.Склад = ВыборкаДок.ДопРекв; //это ссылка на БП Перемещение
//		НовСтр.Перемещение = ВыборкаДок.ДопРекв; //это ссылка на БП Перемещение
//		
//		АктуализироватьТаблицуПартийПриход(ТабПартийВПути,НовСтр);
//		
//	КонецЦикла;//по номенклатуре	
//	
//КонецПроцедуры

//Процедура ПолучитьПартииПриемТоваров(ВыборкаДок,ТабПартий,ТабПартийВПути,НаборЗаписей,НаборЗаписейВПути)
//	
//	//приходуем партии по ФИФО из остатка партий в Пути 
//	выборкаТов=выборкаДок.Выбрать();
//	Пока ВыборкаТов.Следующий() Цикл
//		//Отбор=Новый Структура("Номенклатура,Склад",ВыборкаТов.Номенклатура,ВыборкаДок.ДопРекв);//ссылка на БП Перемещ
//		//Отбор=Новый Структура("Номенклатура,Склад",ВыборкаТов.Номенклатура,ВыборкаДок.ДопРекв);//ссылка на БП Перемещ
//		Отбор=Новый Структура("Номенклатура,Перемещение",ВыборкаТов.Номенклатура,ВыборкаДок.ДопРекв);//ссылка на БП Перемещ
//		Отбор=Новый Структура("Номенклатура,Перемещение",ВыборкаТов.Номенклатура,ВыборкаДок.ДопРекв);//ссылка на БП Перемещ
//		ПартииСтроки = ТабПартийВПути.НайтиСтроки(Отбор);
//				
//		ОсталосьСписать = ВыборкаТов.Количество;
//		Для Каждого Партия из ПартииСтроки Цикл  //партии отсортированы по ДатаПартии
//			Списываем = Мин(ОсталосьСписать,Партия.КоличествоОстаток);
//			Если Списываем<=0 Тогда Продолжить; КонецЕсли;
//			
//			//списываем партии в пути
//			НовСтрВПути=НаборЗаписейВПути.Добавить();
//			НовСтрВПути.ВидДвижения = ВидДвиженияНакопления.Расход;
//			НовСтрВПути.Период = ВыборкаТов.Дата;
//			//НовСтрВПути.Склад = ВыборкаДок.ДопРекв;//это ссылка на БП Перемещение
//			НовСтрВПути.Перемещение = ВыборкаДок.ДопРекв;//это ссылка на БП Перемещение
//			НовСтрВПути.Номенклатура=ВыборкаТов.Номенклатура;
//			НовСтрВПути.Партия=Партия.Партия;
//			НовСтрВПути.ДатаПартии=Партия.ДатаПартии;
//			НовСтрВПути.Количество=Списываем;
//			НовСтрВПути.Сумма = ?(Партия.КоличествоОстаток=Списываем,Партия.СуммаОстаток, Партия.СуммаОстаток*Списываем/Партия.КоличествоОстаток);
//			
//			АктуализироватьТаблицуПартийРасход(Партия,НовСтрВПути);
//			
//			//здесь, по идее, нужно добавлять доп. расходы на перемещение
//			
//			//и приходуем на обычный склад
//			НовСтр=НаборЗаписей.Добавить();
//			ЗаполнитьЗначенияСвойств(НовСтр,НовСтрВПути);
//			НовСтр.ВидДвижения = ВидДвиженияНакопления.Приход;
//			//НовСтр.Склад=ВыборкаТов.Склад;
//			
//			АктуализироватьТаблицуПартийПриход(ТабПартий,НовСтр);
//			
//			ОсталосьСписать = ОсталосьСписать-Списываем;
//		КонецЦикла;
//		
//		//если партий в пути с положительным остатком нет, а количество так и не списано
//		Если ОсталосьСписать>0 Тогда
//			НовСтрВПути=НаборЗаписейВПути.Добавить();
//			НовСтрВПути.ВидДвижения = ВидДвиженияНакопления.Расход;
//			НовСтрВПути.Период = ВыборкаТов.Дата;
//			//НовСтрВПути.Склад = ВыборкаДок.ДопРекв;
//			НовСтрВПути.Перемещение = ВыборкаДок.ДопРекв;
//			НовСтрВПути.Номенклатура=ВыборкаТов.Номенклатура;
//			НовСтрВПути.Партия=Неопределено;
//			НовСтрВПути.ДатаПартии=Дата(1,1,1);
//			НовСтрВПути.Количество=ОсталосьСписать;
//			НовСтрВПути.Сумма = 0;
//			
//			//актуализация таблицы партий в пути не нужна
//			
//			//и приходуем на обычный склад
//			НовСтр=НаборЗаписей.Добавить();
//			ЗаполнитьЗначенияСвойств(НовСтр,НовСтрВПути);
//			НовСтр.ВидДвижения = ВидДвиженияНакопления.Приход;
//			//НовСтр.Склад=ВыборкаТов.Склад;
//			
//			АктуализироватьТаблицуПартийПриход(ТабПартий,НовСтр);
//			
//		КонецЕсли;	
//		
//	КонецЦикла;//по номенклатуре	
//	
//КонецПроцедуры

//Процедура ПолучитьПартииПеремещение(ВыборкаДок,ТабПартий,НаборЗаписей)
//	
//	//сначала обычное списание ФИФО
//	СписатьПартииФИФО(ВыборкаДок,ТабПартий,НаборЗаписей);
//	
//	//затем приходуем те же самые партии
//	СписанныеСтроки=НаборЗаписей.Выгрузить();
//	Для Каждого Стр из СписанныеСтроки Цикл
//		
//		НовСтр=НаборЗаписей.Добавить();
//		ЗаполнитьЗначенияСвойств(НовСтр,стр);
//		
//		НовСтр.ВидДвижения = ВидДвиженияНакопления.Приход;
//		//НовСтр.Склад = ВыборкаДок.ДопРекв; //в нем содержится склад-получатель
//		
//		//здесь, по идее, нужно добавлять доп. расходы на перемещение
//		
//		АктуализироватьТаблицуПартийПриход(ТабПартий,НовСтр);
//		
//	КонецЦикла;//по номенклатуре	
//	
//КонецПроцедуры

