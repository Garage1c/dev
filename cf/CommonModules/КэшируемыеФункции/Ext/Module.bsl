
Функция ТектЗапросаПолученияПараметровСистемы() Экспорт
	
	Возврат "
	|ВЫБРАТЬ
	|	КонтрольОстатков, КонтрольПартийТоваров, ДолгиПоОтгрузкамУчитываютАвансы
	|ИЗ
	|	Константы 
	|";
	
	//Возврат "
	//|ВЫБРАТЬ КонтрольОстатков, ДолгиПоОтгрузкамУчитываютАвансы
	//|ИЗ (
	//|	ВЫБРАТЬ 	Значение КонтрольОстатков, NULL ДолгиПоОтгрузкамУчитываютАвансы
	//|	ИЗ 		Константа.КонтрольОстатков
	//|	ГДЕ 		Область = &Область
	//|
	//|	ОБЪЕДИНИТЬ
	//|
	//|	ВЫБРАТЬ 	NULL, Значение
	//|	ИЗ 		Константа.КонтрольОстатков
	//|	ГДЕ 		Область = &Область
	//|) ЗапросКонстант
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	КонтрольОстатков, ДолгиПоОтгрузкамУчитываютАвансы
	//|";
	
КонецФункции

Функция ПолучитьСтруктуруПараметровсистемы() Экспорт
	
	Если ПараметрыСеанса.КонтрольОстатковВСеансеОтключен Тогда
		Возврат Новый Структура("КонтрольОстатков, КонтрольПартийТоваров, ДолгиПоОтгрузкамУчитываютАвансы", Ложь, Ложь, Константы.ДолгиПоОтгрузкамУчитываютАвансы.Получить());
		
	Иначе
		Запрос = Новый Запрос(ТектЗапросаПолученияПараметровСистемы());
		Возврат КонвертацияТипов.ПолучитьСтруктуруИзСТрокиТаблицыЗначений(Запрос.Выполнить().Выгрузить()); КонецЕсли;
	
КонецФункции

Функция ПолучитьИменаКолонокПоискаВКорзине() Экспорт
	
	Имена 	= Новый Массив;
	МетаИзм = Метаданные.РегистрыСведений.Корзина.Измерения;
	
	Для Каждого Измерение Из МетаИзм Цикл
		
		Имя = Измерение.Имя;
		
		Если 	Имя <> "Пользователь" И
				Имя <> "ИмяКомпа" Тогда
				
			Имена.Добавить(Измерение.Имя);
				
		КонецЕсли;
	КонецЦикла;
	
	Возврат Имена;
	
КонецФункции
Функция ПолучитьИменаСуммовыхКолонокВКорзине() Экспорт
	
	Имена 	= Новый Массив;
	МетаРес = Метаданные.РегистрыСведений.Корзина.Ресурсы;
	
	Для Каждого Ресурс Из МетаРес Цикл
		
		Имена.Добавить(Ресурс.Имя);
				
	КонецЦикла;
	
	Возврат Имена;
	
КонецФункции

Функция ПолучитьТекстЗаголовкаПриложения() Экспорт
	
	ТекСклад = ПараметрыСеанса.ТекущийСклад;
	Возврат "Garage: " + //ПараметрыСеанса.ТекущийПользователь + 
					?(ЗначениеЗаполнено(ТекСклад),
							" / " + ТекСклад,
							"") + //" {" + ПараметрыСеанса.ТекущаяОбласть + "} " +  ПараметрыСеанса.ТекущаяПозицияОбласти +
					" (" + СтрокаСоединенияИнформационнойБазы() + ")";
	
КонецФункции


// ФУНКЦИИ HTML

Функция ПолучитьСоответсвиеUTFкANSI_Ст()
	
	Соответствие = Новый Соответствие();
	
	Соответствие.Вставить("0410", "А");
	Соответствие.Вставить("0430", "а");
	Соответствие.Вставить("0411", "Б");
	Соответствие.Вставить("0431", "б");
	Соответствие.Вставить("0412", "В");
	Соответствие.Вставить("0432", "в");
	Соответствие.Вставить("0413", "Г");
	Соответствие.Вставить("0433", "г");
	Соответствие.Вставить("0490", "Ґ");
	Соответствие.Вставить("0491", "ґ");
    Соответствие.Вставить("0414", "Д");
	Соответствие.Вставить("0434", "д");
	Соответствие.Вставить("0415", "Е");
	Соответствие.Вставить("0435", "е");
	Соответствие.Вставить("0401", "Ё");
	Соответствие.Вставить("0451", "ё");
	Соответствие.Вставить("0404", "Є");
	Соответствие.Вставить("0454", "є");
	Соответствие.Вставить("0416", "Ж");
	Соответствие.Вставить("0436", "ж");
	Соответствие.Вставить("0417", "З");
	Соответствие.Вставить("0437", "з");
	Соответствие.Вставить("0418", "И");
	Соответствие.Вставить("0438", "и");
	Соответствие.Вставить("0406", "I");
	Соответствие.Вставить("0456", "i");
	Соответствие.Вставить("0419", "Й");
	Соответствие.Вставить("0439", "й");
	Соответствие.Вставить("041a", "К");
	Соответствие.Вставить("043a", "к");
	Соответствие.Вставить("041b", "Л");
	Соответствие.Вставить("043b", "л");
	Соответствие.Вставить("041c", "М");
	Соответствие.Вставить("043c", "м");
	Соответствие.Вставить("041d", "Н");
	Соответствие.Вставить("043d", "н");
	Соответствие.Вставить("041e", "О");
	Соответствие.Вставить("043e", "о");
	Соответствие.Вставить("041f", "П");
	Соответствие.Вставить("043f", "п");
	Соответствие.Вставить("0420", "Р");
	Соответствие.Вставить("0440", "р");
	Соответствие.Вставить("0421", "С");
	Соответствие.Вставить("0441", "с");
	Соответствие.Вставить("0422", "Т");
	Соответствие.Вставить("0442", "т");
	Соответствие.Вставить("0423", "У");
	Соответствие.Вставить("0443", "у");
	Соответствие.Вставить("0424", "Ф");
	Соответствие.Вставить("0444", "ф");
	Соответствие.Вставить("0425", "Х");
	Соответствие.Вставить("0445", "х");
	Соответствие.Вставить("0426", "Ц");
	Соответствие.Вставить("0446", "ц");
	Соответствие.Вставить("0427", "Ч");
	Соответствие.Вставить("0447", "ч");
	Соответствие.Вставить("0428", "Ш");
	Соответствие.Вставить("0448", "ш");
	Соответствие.Вставить("0429", "Щ");
	Соответствие.Вставить("0449", "щ");
	Соответствие.Вставить("042a", "ъ");
	Соответствие.Вставить("044a", "ъ");
	Соответствие.Вставить("042b", "Ы");
	Соответствие.Вставить("044b", "ы");
	Соответствие.Вставить("042c", "Ь");
	Соответствие.Вставить("044c", "ь");
	Соответствие.Вставить("042d", "Э");
	Соответствие.Вставить("044d", "э");
	Соответствие.Вставить("042e", "Ю");
	Соответствие.Вставить("044e", "ю");
	Соответствие.Вставить("042f", "Я");
	Соответствие.Вставить("044f", "я");
	Соответствие.Вставить("20",	"'");
	
	Возврат Соответствие;
	
КонецФункции

Функция ПолучитьСоответсвиеUTFкANSI() Экспорт
	
	Соответствие = Новый Соответствие;
	
	Соответствие.Вставить("0401","Ё");//	d0 81	CYRILLIC CAPITAL LETTER IO
	Соответствие.Вставить("0451","ё");//	d1 91	CYRILLIC SMALL LETTER IO
	
    Соответствие.Вставить("0410","А");//	d0 90	CYRILLIC CAPITAL LETTER A
    Соответствие.Вставить("0411","Б");//	d0 91	CYRILLIC CAPITAL LETTER BE
    Соответствие.Вставить("0412","В");//	d0 92	CYRILLIC CAPITAL LETTER VE
    Соответствие.Вставить("0413","Г");//	d0 93	CYRILLIC CAPITAL LETTER GHE
    Соответствие.Вставить("0414","Д");//	d0 94	CYRILLIC CAPITAL LETTER DE
    Соответствие.Вставить("0415","Е");//	d0 95	CYRILLIC CAPITAL LETTER IE
    Соответствие.Вставить("0416","Ж");//	d0 96	CYRILLIC CAPITAL LETTER ZHE
    Соответствие.Вставить("0417","З");//	d0 97	CYRILLIC CAPITAL LETTER ZE
    Соответствие.Вставить("0418","И");//	d0 98	CYRILLIC CAPITAL LETTER I
    Соответствие.Вставить("0419","Й");//	d0 99	CYRILLIC CAPITAL LETTER SHORT I
    Соответствие.Вставить("041A","К");//	d0 9a	CYRILLIC CAPITAL LETTER KA
    Соответствие.Вставить("041B","Л");//	d0 9b	CYRILLIC CAPITAL LETTER EL
    Соответствие.Вставить("041C","М");//	d0 9c	CYRILLIC CAPITAL LETTER EM
    Соответствие.Вставить("041D","Н");//	d0 9d	CYRILLIC CAPITAL LETTER EN
    Соответствие.Вставить("041E","О");//	d0 9e	CYRILLIC CAPITAL LETTER O
    Соответствие.Вставить("041F","П");//	d0 9f	CYRILLIC CAPITAL LETTER PE
    Соответствие.Вставить("0420","Р");//	d0 a0	CYRILLIC CAPITAL LETTER ER
    Соответствие.Вставить("0421","С");//	d0 a1	CYRILLIC CAPITAL LETTER ES
    Соответствие.Вставить("0422","Т");//	d0 a2	CYRILLIC CAPITAL LETTER TE
    Соответствие.Вставить("0423","У");//	d0 a3	CYRILLIC CAPITAL LETTER U
    Соответствие.Вставить("0424","Ф");//	d0 a4	CYRILLIC CAPITAL LETTER EF
    Соответствие.Вставить("0425","Х");//	d0 a5	CYRILLIC CAPITAL LETTER HA
    Соответствие.Вставить("0426","Ц");//	d0 a6	CYRILLIC CAPITAL LETTER TSE
    Соответствие.Вставить("0427","Ч");//	d0 a7	CYRILLIC CAPITAL LETTER CHE
    Соответствие.Вставить("0428","Ш");//	d0 a8	CYRILLIC CAPITAL LETTER SHA
    Соответствие.Вставить("0429","Щ");//	d0 a9	CYRILLIC CAPITAL LETTER SHCHA
    Соответствие.Вставить("042A","Ъ");//	d0 aa	CYRILLIC CAPITAL LETTER HARD SIGN
    Соответствие.Вставить("042B","Ы");//	d0 ab	CYRILLIC CAPITAL LETTER YERU
    Соответствие.Вставить("042C","Ь");//	d0 ac	CYRILLIC CAPITAL LETTER SOFT SIGN
    Соответствие.Вставить("042D","Э");//	d0 ad	CYRILLIC CAPITAL LETTER E
    Соответствие.Вставить("042E","Ю");//	d0 ae	CYRILLIC CAPITAL LETTER YU
    Соответствие.Вставить("042F","Я");//	d0 af	CYRILLIC CAPITAL LETTER YA
    Соответствие.Вставить("0430","а");//	d0 b0	CYRILLIC SMALL LETTER A
    Соответствие.Вставить("0431","б");//	d0 b1	CYRILLIC SMALL LETTER BE
    Соответствие.Вставить("0432","в");//	d0 b2	CYRILLIC SMALL LETTER VE
    Соответствие.Вставить("0433","г");//	d0 b3	CYRILLIC SMALL LETTER GHE
    Соответствие.Вставить("0434","д");//	d0 b4	CYRILLIC SMALL LETTER DE
    Соответствие.Вставить("0435","е");//	d0 b5	CYRILLIC SMALL LETTER IE
    Соответствие.Вставить("0436","ж");//	d0 b6	CYRILLIC SMALL LETTER ZHE
    Соответствие.Вставить("0437","з");//	d0 b7	CYRILLIC SMALL LETTER ZE
    Соответствие.Вставить("0438","и");//	d0 b8	CYRILLIC SMALL LETTER I
    Соответствие.Вставить("0439","й");//	d0 b9	CYRILLIC SMALL LETTER SHORT I
    Соответствие.Вставить("043A","к");//	d0 ba	CYRILLIC SMALL LETTER KA
    Соответствие.Вставить("043B","л");//	d0 bb	CYRILLIC SMALL LETTER EL
    Соответствие.Вставить("043C","м");//	d0 bc	CYRILLIC SMALL LETTER EM
    Соответствие.Вставить("043D","н");//	d0 bd	CYRILLIC SMALL LETTER EN
    Соответствие.Вставить("043E","о");//	d0 be	CYRILLIC SMALL LETTER O
    Соответствие.Вставить("043F","п");//	d0 bf	CYRILLIC SMALL LETTER PE
    Соответствие.Вставить("0440","р");//	d1 80	CYRILLIC SMALL LETTER ER
    Соответствие.Вставить("0441","с");//	d1 81	CYRILLIC SMALL LETTER ES
    Соответствие.Вставить("0442","т");//	d1 82	CYRILLIC SMALL LETTER TE
    Соответствие.Вставить("0443","у");//	d1 83	CYRILLIC SMALL LETTER U
    Соответствие.Вставить("0444","ф");//	d1 84	CYRILLIC SMALL LETTER EF
    Соответствие.Вставить("0445","х");//	d1 85	CYRILLIC SMALL LETTER HA
    Соответствие.Вставить("0446","ц");//	d1 86	CYRILLIC SMALL LETTER TSE
    Соответствие.Вставить("0447","ч");//	d1 87	CYRILLIC SMALL LETTER CHE
    Соответствие.Вставить("0448","ш");//	d1 88	CYRILLIC SMALL LETTER SHA
    Соответствие.Вставить("0449","щ");//	d1 89	CYRILLIC SMALL LETTER SHCHA
    Соответствие.Вставить("044A","ъ");//	d1 8a	CYRILLIC SMALL LETTER HARD SIGN
    Соответствие.Вставить("044B","ы");//	d1 8b	CYRILLIC SMALL LETTER YERU
    Соответствие.Вставить("044C","ь");//	d1 8c	CYRILLIC SMALL LETTER SOFT SIGN
    Соответствие.Вставить("044D","э");//	d1 8d	CYRILLIC SMALL LETTER E
    Соответствие.Вставить("044E","ю");//	d1 8e	CYRILLIC SMALL LETTER YU
    Соответствие.Вставить("044F","я");//	d1 8f	CYRILLIC SMALL LETTER YA

	Возврат Соответствие;
	
КонецФункции
Функция ПолучитьНастройкиВложений(ИмяСправочника) Экспорт
	
	Возврат КонвертацияТипов.ПолучитьСтруктуруИзСправочника(Справочники.НастройкиПутейДляВложений[ИмяСправочника]);
	
КонецФункции

// НОМЕНКЛАТУРА

Функция ПолучитьМассивСайтовНоменклатуры() Экспорт
	
	Массив = Новый Массив;
	Для Каждого МетаСпр Из Метаданные.Справочники Цикл Имя = Врег(МетаСпр.Имя); Если СтрНайти(Имя, "НОМЕНКЛАТУРАСАЙТ") = 1 И СтрДлина(Имя) > 16 Тогда Массив.Добавить(Сред(Имя, 17)) КонецЕсли; КонецЦикла;
	
	Возврат Массив;
	
КонецФункции

Функция ПолучитьПартнеровСЗаменойНоменклатуры() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ Различные Контрагент ИЗ РегистрСведений.НоменклатураЗамены.СрезПоследних(&текДата) ГДЕ Использование = ИСТИНА");
	Запрос.УстановитьПараметр("текДата", ТекущаяДата());
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции
// ОБЩИЕ ФУНКЦИИ

Функция ЕстьРеквизитОбъекта(Объект, ИмяРеквизита) Экспорт
	
	Возврат Объект.Метаданные().Реквизиты.Найти(ИмяРеквизита) <> Неопределено;
	
КонецФункции

Функция ПолучитьМетаОбъектИзСтроки(стрМетаОбъекта) Экспорт
	
	Возврат Метаданные.НайтиПоПолномуИмени(стрМетаОбъекта);
	
КонецФункции

Функция ПолучитьЧислоТекущейСтавкиНДС() Экспорт
	
	Возврат ?(ПолучитьФункциональнуюОпцию("НемецкийУчет"),
				ПолучитьЧислоСтавкиНДС(Перечисления.СтавкиНДС.НДС19),
				ПолучитьЧислоСтавкиНДС(Перечисления.СтавкиНДС.НДС18));
	
КонецФункции
Функция ПолучитьЧислоСтавкиНДС(СтавкаНДС) Экспорт
	
	Возврат Перечисления.СтавкиНДС.ПолучитьЧислоСтавкиНДС(СтавкаНДС);
	
КонецФункции
Функция ТипЦенВключаетНДС(ТипЦен) Экспорт
	
	Если ТипЦен <> Неопределено Тогда Возврат ТипЦен.ЦенаВключаетНДС Иначе Возврат Истина; КонецЕсли;
	
КонецФункции

Функция ЭтоСтавкаБезНДС(СтавкаНДС) Экспорт
	
	Возврат СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	
КонецФункции

Функция ПолучитьЦенаВключаетНДС(ТипЦены) Экспорт
	
	Возврат Справочники.ТипыЦен.ЦенаВключаетНДС(ТипЦены);
	
КонецФункции
Функция ПолучитьТочностьОкругления(Ссылка) Экспорт
	Возврат Ссылка.ТочностьОкругления;
КонецФункции

Функция ПолучитьСокращеноеПредставлениеПользователя(СсылкаПользователя) Экспорт
	
	СтрокаПользователь = Строка(СсылкаПользователя);
	
	Возврат Лев(СтрокаПользователь, Найти(СтрокаПользователь," "));
	
КонецФункции
Функция Склонять(ФИО, Пол, Падеж) экспорт
	
	// из инета
	
	//Склоняет фамилию_имя_отчетсво в дательный или родительный падеж
	// 	ФИО - строка Фимилия_Имя_Отчетсво 
	//	Пол - "М" или "Ж"; Падеж - "Р" (кого?) или "Д" (кому?)

	
	///Упорядочивание алфавита
    
    L = Новый Массив(33);
    
    L[1]="Б";
    L[2]="В";
    L[3]="Г";
    L[4]="Д";
    L[5]="Ж";
    L[6]="З";
    L[7]="К";
    L[8]="Л";
    L[9]="М";
    L[10]="Н";
    L[11]="П";
    L[12]="Р";
    L[13]="С";
    L[14]="Т";
    L[15]="Ф";
    L[16]="Х";
    L[17]="Ц";
    L[18]="Ч";
    L[19]="Ш";
    L[20]="Щ";
    //Гласные
    L[21]="А";
    L[22]="Е";
    L[23]="И";
    L[24]="Й";
    L[25]="О";
    L[26]="У";
    L[27]="Ы";
    L[28]="Э";
    L[29]="Ю";
    L[30]="Я";
    //Знаки
    L[31]="Ь";
    L[32]="Ъ";
    /////////Выделение Фамилия, Имя, Отчество
    Пол=СокрЛП(Строка(Пол));
    Пол=Врег(Пол);
    Если (Пол<>"М") И (Пол<>"Ж") Тогда
        //Предупреждение ("Неверно задан пол: М или Ж");
        Возврат " ";
    КонецЕсли;
    Падеж=СокрЛП(Строка(Падеж));
    Падеж=Врег(Падеж);
    Если (Падеж<>"Р") И (Падеж<>"Д") Тогда
        //Предупреждение ("Неверно задан падеж: Р или Д");
        Возврат " ";
    КонецЕсли;
    ПолноеИмя=Строка(ФИО);
    
    ПолноеИмя=СокрЛП(ПолноеИмя);
    
    ПозицияПервогоПробела = Найти(ПолноеИмя, " ");
    
    Фамилия = Лев(ПолноеИмя, ПозицияПервогоПробела);
    Фамилия=СокрЛП(Фамилия);
    ИмяОтчество = Сред(ПолноеИмя, ПозицияПервогоПробела+1);
    ИмяОтчество = СокрЛП(ИмяОтчество);
    ПозицияТочки=Найти(ИмяОтчество,".");
    Если ПозицияТочки>0 Тогда //если введены инициалы
        Имя=Сред(ИмяОтчество,1,ПозицияТочки);
        Отчество=Сред(ИмяОтчество,ПозицияТочки+1);
        Отчество=СокрЛ(Отчество);
    Иначе;
        ПозицияВторогоПробела = Найти(ИмяОтчество, " ");
        Имя = Сред(ИмяОтчество,1, ПозицияВторогоПробела-1);
        Имя=СокрЛП(Имя);
        Отчество = Сред(ИмяОтчество, ПозицияВторогоПробела+1);
        Отчество = СокрЛП(Отчество);
    КонецЕсли;
    //////////Склонение фамилии
    
    Фам1=ВРЕГ(Фамилия);
    
    Последняя=Прав(Фам1,1);
    ДвеПоследних=Прав(Фам1,2);
    ТриПоследних=Прав(Фам1,3);
    
    Флаг=0;
    Для i=1 По 32 Цикл
        Если L[i]=Последняя Тогда
            Прервать;
        КонецЕсли;
    КонецЦикла;
    Если i<=20 Тогда
        ТипБуквы=1;//согласная
    ИНАЧЕ;
        ТипБуквы=2;//гласная
    КонецЕсли;
    //////////////// Исключения ////////////////////
    Если СтрДлина(Фамилия)<=2 Тогда
        Родительный=Фамилия;//фамилии типа Ге, Че
        Дательный=Фамилия;
        Перейти ~выход;
    КонецЕсли;
    
    Если (ДвеПоследних="ИХ") ИЛИ  (ДвеПоследних="ЫХ") Тогда
        Родительный=Фамилия;//сибирские фамилии
        Дательный=Фамилия;
        Перейти ~выход;
    КонецЕсли;
    
    Если Последняя="О" Тогда
        Родительный=Фамилия;//украинские фамилии
        Дательный=Фамилия;
        Перейти ~выход;
    КонецЕсли;
    
    Если ДвеПоследних="УА" Тогда
        Родительный=Фамилия;//фамилии типа Стуруа
        Дательный=Фамилия;
        Перейти ~выход;
    КонецЕсли;
    
    Если ДвеПоследних="ИА" Тогда
        Родительный=Фамилия;//фамилии типа Туташхиа
        Дательный=Фамилия;
        Перейти ~выход;
    КонецЕсли;
    
    Если (ДвеПоследних="ЖА") И (Пол="Ж") Тогда
        Родительный=Фамилия;// женские фамилии типа Ганжа
        Дательный=Фамилия;
        Перейти ~выход;
    КонецЕсли;
    
    Если ТриПоследних="ДЗЕ" Тогда
        Родительный=Фамилия;//грузинские фамилии типа Гогадзе
        Дательный=Фамилия;
        Перейти ~выход;
    КонецЕсли;
    
    Если ТриПоследних="ИЛИ" Тогда
        Родительный=Фамилия;//грузинские фамилии типа Габошвили
        Дательный=Фамилия;
        Перейти ~выход;
    КонецЕсли;
    
    Если (ДвеПоследних="ОЙ") И (Пол="М") И (СтрДлина(Фамилия)=3) Тогда
        Родительный=Сред(Фамилия,1,СтрДлина(Фамилия)-1)+"я";//фам. типа Цой
        Дательный=Сред(Фамилия,1,СтрДлина(Фамилия)-1)+"ю";
        Перейти ~выход;
    КонецЕсли;
    
    Если (ДвеПоследних="ОЙ") И (Пол="Ж") И (СтрДлина(Фамилия)=3) Тогда
        Родительный=Фамилия; //фам. типа Цой
        Дательный=Фамилия;
        Перейти ~выход;
    КонецЕсли;
    ///////////////////////////////////////////////////////////////////////
    Если (Пол="М") И (ТипБуквы=1) Тогда //мужскую склоняем
        Родительный=Фамилия+"а";
        Дательный=Фамилия+"у";
        Флаг=1;
    КонецЕсли;
    
    Если (Пол="М") И (ДвеПоследних="ДЬ") Тогда //специально для губернатора
        Родительный=Сред(Фамилия,1,СтрДлина(Фамилия)-1)+"я";//Лебедя
        Дательный=Сред(Фамилия,1,СтрДлина(Фамилия)-1)+"ю";
        Флаг=1;
    КонецЕсли;
    
    Если (Пол="Ж") И (ТипБуквы=1) Тогда //женскую не склоняем
        Родительный=Фамилия;
        Дательный=Фамилия;
        Флаг=1;
    КонецЕсли;
    
    Если (Пол="Ж") И (Последняя="А") Тогда
        Родительный=Сред(Фамилия,1,СтрДлина(Фамилия)-1)+"у";
        Дательный=  Сред(Фамилия,1,СтрДлина(Фамилия)-1)+"ой";
        Флаг=1;
    КонецЕсли;
    
    Если (Пол="М") И (Последняя="А") Тогда //фам. типа Соткилава
        Родительный=Сред(Фамилия,1,СтрДлина(Фамилия)-1)+"у";
        Дательный=  Сред(Фамилия,1,СтрДлина(Фамилия)-1)+"е";
        Флаг=1;
    КонецЕсли;
    Если (ДвеПоследних="ОЙ") И (Пол="М") И (СтрДлина(Фамилия)>3) Тогда
        Родительный=Сред(Фамилия,1,СтрДлина(Фамилия)-1)+"го";
        Дательный=Сред(Фамилия,1,СтрДлина(Фамилия)-1)+"му";
        Флаг=1;
    КонецЕсли;
    
    Если (ДвеПоследних="АЯ") И (Пол="Ж") И (СтрДлина(Фамилия)>3) Тогда
        Родительный=Сред(Фамилия,1,СтрДлина(Фамилия)-2)+"ую";
        Дательный=Сред(Фамилия,1,СтрДлина(Фамилия)-2)+"ой";
        Флаг=1;
    КонецЕсли;
    Если Флаг=0 Тогда  //если не сработало ни одно условие
        Родительный=Фамилия;
        Дательный=Фамилия;
    КонецЕсли;
    
    ~выход: //////////////склонение имени////////
    Если ПозицияТочки>0 Тогда
        РодительныйИмя=Имя;
        ДательныйИмя=Имя;
        РодительныйОтчество=Отчество;
        ДательныйОтчество=Отчество;
        Перейти ~выход1;
    КонецЕсли;
    Имя1=ВРЕГ(Имя);
    Последняя=Прав(Имя1,1);
    ДвеПоследних=Прав(Имя1,2);
    ТриПоследних=Прав(Имя1,3);
    Флаг=0;
    
    Для i=1 По 32 Цикл
        Если L[i]=Последняя Тогда
            Прервать;
        КонецЕсли;
    КонецЦикла;
    Если i<=20 Тогда
        ТипБуквы=1;//согласная
    ИНАЧЕ;
        ТипБуквы=2;//гласная
    КонецЕсли;
    Если (Пол="М") И (ТипБуквы=1) Тогда ///Иван, Петр и т.д.
        РодительныйИмя=Имя+"а";
        ДательныйИмя  =Имя+"у";
        Флаг=1;
    КонецЕсли;
    Если (Пол="М") И (Последняя="Й") Тогда ///Сергей, Дмитрий и т.д.
        РодительныйИмя=Сред(Имя,1,СтрДлина(Имя)-1)+"я";
        ДательныйИмя  =Сред(Имя,1,СтрДлина(Имя)-1)+"ю";
        Флаг=1;
    КонецЕсли;
    Если (Пол="М") И (Последняя="А") Тогда ///Фома
        РодительныйИмя=Сред(Имя,1,СтрДлина(Имя)-1)+"у";
        ДательныйИмя  =Сред(Имя,1,СтрДлина(Имя)-1)+"е";
        Флаг=1;
    КонецЕсли;
    Если (Пол="М") И (Последняя="Я") Тогда ///Илья
        РодительныйИмя=Сред(Имя,1,СтрДлина(Имя)-1)+"ю";
        ДательныйИмя  =Сред(Имя,1,СтрДлина(Имя)-1)+"е";
        Флаг=1;
    КонецЕсли;
    Если (Пол="М") И (Последняя="Ь") Тогда ///Игорь
        РодительныйИмя=Сред(Имя,1,СтрДлина(Имя)-1)+"я";
        ДательныйИмя  =Сред(Имя,1,СтрДлина(Имя)-1)+"ю";
        Флаг=1;
    КонецЕсли;
    Если (Пол="Ж") И (Последняя="А") Тогда ///Татьяна, Людмила и т.д.
        РодительныйИмя=Сред(Имя,1,СтрДлина(Имя)-1)+"у";
        ДательныйИмя  =Сред(Имя,1,СтрДлина(Имя)-1)+"е"; 
        Флаг=1;
    КонецЕсли;
    Если (Пол="Ж") И (Последняя="Я") Тогда ///Зоя, Наталья и т.д.
        РодительныйИмя=Сред(Имя,1,СтрДлина(Имя)-1)+"ю";
        ДательныйИмя  =Сред(Имя,1,СтрДлина(Имя)-1)+"е";
        Флаг=1;
    КонецЕсли;
    Если (Пол="Ж") И (ДвеПоследних="ИЯ") Тогда ///Наталия,Виктория и т.д.
        РодительныйИмя=Сред(Имя,1,СтрДлина(Имя)-1)+"ю";
        ДательныйИмя  =Сред(Имя,1,СтрДлина(Имя)-1)+"и";
        Флаг=1;
    КонецЕсли;
    Если Флаг=0 Тогда
        РодительныйИмя=Имя;
        ДательныйИмя  =Имя;
    КонецЕсли;
    
    /////////склонение отчества///////
    Если (Пол="М") Тогда
        РодительныйОтчество=Отчество+"а";
        ДательныйОтчество  =Отчество+"у";
    КонецЕсли;
    Если (Пол="Ж") Тогда
        РодительныйОтчество=Сред(Отчество,1,СтрДлина(Отчество)-1)+"у";
        ДательныйОтчество  =Сред(Отчество,1,СтрДлина(Отчество)-1)+"е";
    КонецЕсли;
    ~выход1: /////////////////////
    Если Падеж="Д" Тогда
        ФИОВозврат=Дательный+" "+ДательныйИмя+" "+ДательныйОтчество;
    Иначе;
        ФИОВозврат=Родительный+" "+РодительныйИмя+" "+РодительныйОтчество;
    КонецЕсли;
	
	Возврат ФИОВозврат;
	
КонецФункции

Функция ПолучитьРеквизитыДокумента(Имя) экспорт
	
	Возврат ФункцииФормДокументов.ПолучитьРеквизитыДокумента(Документы[Имя].ПустаяСсылка());	
	
КонецФункции

Функция ПолучитьЗначениеЗначениеНастройкиПользователя(ИмяНастройки) Экспорт
	
	// Возвращает значение по умолчанию для текущено пользователя
	
	Запрос = Новый Запрос("ВЫБРАТЬ Значение ИЗ РегистрСведений.ЗначенияНастроекПользователя ГДЕ Пользователь = &Пользователь И Настройка = &Настройка");
	
	Запрос.УстановитьПараметр("Пользователь", 	ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("Настройка", 		ПланыВидовХарактеристик.НастройкиПользователя[ИмяНастройки]);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		// Значения
		
		Возврат Выборка.Значение;
		
	Иначе
		
		// Пустое значения по типу
		
		Возврат ПланыВидовХарактеристик.НастройкиПользователя[ИмяНастройки].ТипЗначения.ПривестиЗначение();
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьЧислоВариантаРасчета(Ссылка) Экспорт
	
	Возврат Перечисления.ВариантРасчетаЦеныПоАкции.ПолучитьЧислоВариантаРасчета(Ссылка);
	
КонецФункции
// COM ФУНКЦИИ

// Функция создает СОМ соединение к базе 8.1 по параметру
//
// Параметры
//  <ПараметрыПодключения>  – <Структура> – 
//               	СтрокаСоединения
//					Пользователь    
//					Пароль          
//
// Возвращаемое значение:
//   COMОбъект   – объект подключенной базы
//
Функция ИницилизироватьCOMConnector81(ПараметрыПодключения = Неопределено, стрОшибки = "") Экспорт // инициализация базы 8.1
	
	Перем База;
	
	Если ПараметрыПодключения = Неопределено Тогда
		
		ПараметрыПодключения = COMServer.ПолучитьПараметрыПодключенияК81ПоУмолчанию();
		
		Если ПустаяСтрока(ПараметрыПодключения) Тогда
			стрОшибки = "не заданы параметры подключения к базе УТ 81.
								|Для задания параметров установите константу - ""Параметры подключения к УТ 81"" ";
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;

	Попытка
		База = Новый COMОбъект("V81.COMConnector");
		
	Исключение
		
		опОшибки = ОписаниеОшибки();
		стрОшибки = "Не установлено 1С:Предприятие 8.1. 
						|Не могу инициализировать СОМ соединение для выполнения сервисных функций.
						|" + опОшибки;
		Возврат Неопределено;
		
	КонецПопытки;
	
	Попытка

		Connector 	= База.Connect(ПараметрыПодключения);
		Имя 		= Connector.Метаданные().Имя;
	Исключение

		стрОшибки = ОписаниеОшибки();
		стрОшибки = "Ошибка при подключении к базе 81
						|" + стрОшибки;
		База = Неопределено;
		Возврат Неопределено;

	КонецПопытки;
	
	Возврат Connector;
	
КонецФункции 
Функция ИницилизироватьCOMConnectorБухгалтерии(ПараметрыПодключения = Неопределено, стрОшибки = "") Экспорт // инициализация базы 8.2
	
	//Перем База;
	//
	//Если ПараметрыПодключения = Неопределено Тогда
	//	
	//	ПараметрыПодключения = ИнтеграцияСБухгалтерией.ПолучитьПараметрыПодключенияКБухгалтерииПоУмолчанию();
	//	
	//	Если ПустаяСтрока(ПараметрыПодключения) Тогда
	//		стрОшибки = "не заданы параметры подключения к базе УТ 81.
	//							|Для задания параметров установите константу - ""Параметры подключения к УТ 81"" ";
	//		Возврат Неопределено;
	//	КонецЕсли;
	//КонецЕсли;

	//Попытка
	//	
	//	База = Новый COMОбъект("V83.COMConnector");
	//	
	//Исключение
	//	
	//	стрОшибки = "Не установлено 1С:Предприятие 8.3. 
	//					|Не могу инициализировать СОМ соединение для выполнения сервисных функций.";
	//	Возврат Неопределено;
	//	
	//КонецПопытки;
	//
	//Попытка

	//	Connector 	= База.Connect(ПараметрыПодключения);
	//	Имя 		= Connector.Метаданные().Имя;
	//Исключение

	//	стрОшибки = ОписаниеОшибки();
	//	стрОшибки = "Ошибка при подключении к базе 83
	//					|" + стрОшибки;
	//	База = Неопределено;
	//	Возврат Неопределено;

	//КонецПопытки;
	//
	//Возврат Connector;
	
КонецФункции 
Функция ИницилизироватьCOMConnectorДругойБухгалтерии(ПараметрыПодключения = Неопределено, стрОшибки = "") Экспорт // инициализация базы 8.2
	
	//Перем База;
	//
	//Если ПараметрыПодключения = Неопределено Тогда
	//	
	//	ПараметрыПодключения = ИнтеграцияСБухгалтерией.ПолучитьПараметрыПодключенияКДругойБухгалтерииПоУмолчанию();
	//	
	//	Если ПустаяСтрока(ПараметрыПодключения) Тогда
	//		стрОшибки = "не заданы параметры подключения к базе УТ 81.
	//							|Для задания параметров установите константу - ""Параметры подключения к УТ 81"" ";
	//		Возврат Неопределено;
	//	КонецЕсли;
	//КонецЕсли;

	//Попытка
	//	
	//	База = Новый COMОбъект("V83.COMConnector");
	//	
	//Исключение
	//	
	//	стрОшибки = "Не установлено 1С:Предприятие 8.2. 
	//					|Не могу инициализировать СОМ соединение для выполнения сервисных функций.";
	//	Возврат Неопределено;
	//	
	//КонецПопытки;
	//
	//Попытка

	//	Connector 	= База.Connect(ПараметрыПодключения);
	//	Имя 		= Connector.Метаданные().Имя;
	//Исключение

	//	стрОшибки = ОписаниеОшибки();
	//	стрОшибки = "Ошибка при подключении к базе 82
	//					|" + стрОшибки;
	//	База = Неопределено;
	//	Возврат Неопределено;

	//КонецПопытки;
	//
	//Возврат Connector;
	
КонецФункции 

Функция ИницилизироватьConntctor_83(СтрПодключения, СтрОшибки = "") Экспорт
	
	Попытка
		База = Новый COMОбъект("V83.COMConnector");
	Исключение
		опОшибки = ОписаниеОшибки();
		стрОшибки = "Не установлено 1С:Предприятие 8.3. 
						|Не могу инициализировать СОМ соединение для выполнения сервисных функций.
						|" + опОшибки;
		Возврат Неопределено; КонецПопытки;
	
	Попытка
		Connector 	= База.Connect(СтрПодключения);
		Имя 		= Connector.Метаданные().Имя;
	Исключение
		стрОшибки = ОписаниеОшибки();
		стрОшибки = "Ошибка при подключении к базе 83
						|" + стрОшибки;
		База = Неопределено;
		Возврат Неопределено; КонецПопытки;
	
	Возврат Connector;
	
КонецФункции

Функция ВернутьДополненнуюСтруктуруПараметров(Параметры)
	
	спрСсылка = Параметры.Ссылка;
	РеквизитыКЗагрузке 		= "";
	ПропускаемыеРеквизиты 	= "";
	
	Для Каждого Строка Из спрСсылка.РеквизитыКЗагрузке Цикл
		
		РеквизитыКЗагрузке = РеквизитыКЗагрузке + ?(РеквизитыКЗагрузке = "","",",") + Строка.ИмяИсточника;
		
	КонецЦикла;
	
	Для Каждого Строка Из спрСсылка.ПропускаемыеРеквизиты Цикл
		
		ПропускаемыеРеквизиты = ПропускаемыеРеквизиты + ?(ПропускаемыеРеквизиты = "","",",") + Строка.Имя;
		
	КонецЦикла;
	
	Параметры.Вставить("РеквизитыКЗагрузке", 	Параметры.Ссылка.РеквизитыКЗагрузке.Выгрузить());
	Параметры.Вставить("ПропускаемыеРеквизиты",	Параметры.Ссылка.ПропускаемыеРеквизиты.Выгрузить());
	
	Возврат Параметры;
	
КонецФункции
Функция ПолучитьПравилаСопостовленияУТ81Поимени81(ИмяИсточника, стрОшибки = "") Экспорт
	
	// Источник 	- 81
	// Примемник 	- 82
	
	Запрос = Новый Запрос("ВЫБРАТЬ * ИЗ Справочник.ПравилаОбмена ГДЕ ПометкаУдаления = Ложь И ИмяИсточника = """ + ИмяИсточника + """");
	Выполнение = Запрос.Выполнить();
	Если Выполнение.Пустой() Тогда
		
		стрОшибки = "не найдено правило сопоставления по имени источника """ + ИмяИсточника + """";
		Возврат Неопределено;
		
	Иначе
		
		Таблица = Выполнение.Выгрузить();
		Если Таблица.Количество() > 1 Тогда
			
			стрОшибки = "Есть несколько правил обмена по имени источника """ + ИмяИсточника + """ не понятно - какой нужно использовать";
			Возврат Неопределено;
			
		КонецЕсли;
		
		Возврат ВернутьДополненнуюСтруктуруПараметров(КонвертацияТипов.ПолучитьСтруктуруИзСТрокиТаблицыЗначений(Таблица));
		
	КонецЕсли;

КонецФункции
Функция ПолучитьВсеПравилаСопостовленияУТ81Поимени81(ИмяИсточника, стрОшибки = "") Экспорт
	
	// Источник 	- 81
	// Примемник 	- 82
	
	Правила = Новый Массив;
	
	Запрос = Новый Запрос("ВЫБРАТЬ * ИЗ Справочник.ПравилаОбмена ГДЕ ПометкаУдаления = Ложь И ИмяИсточника = """ + ИмяИсточника + """");
	Выполнение = Запрос.Выполнить();
	Если Выполнение.Пустой() Тогда
		
		стрОшибки = "не найдено правило сопоставления по имени источника """ + ИмяИсточника + """";
		
	Иначе
		
		
		
		Таблица = Выполнение.Выгрузить();
		Инд 	= -1;
		Для Каждого Строка Из Таблица Цикл Инд = Инд + 1;
			
			Правила.Добавить(ВернутьДополненнуюСтруктуруПараметров(КонвертацияТипов.ПолучитьСтруктуруИзСТрокиТаблицыЗначений(Таблица, Инд)));
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Правила;

КонецФункции
Функция ПолучитьПравилаСопостовленияУТ81Поимени82(ИмяПриемника, стрОшибки = "") Экспорт
	
	// Источник 	- 81
	// Примемник 	- 82
	
	Запрос = Новый Запрос("ВЫБРАТЬ * ИЗ Справочник.ПравилаОбмена ГДЕ ПометкаУдаления = Ложь И ИмяПриемника = """ + ИмяПриемника + """");
	Выполнение = Запрос.Выполнить();
	Если Выполнение.Пустой() Тогда
		
		стрОшибки = "не найдено правило сопоставления по имени приемника """ + ИмяПриемника + """";
		Возврат Неопределено;
		
	Иначе
		
		Таблица = Выполнение.Выгрузить();
		Если Таблица.Количество() > 1 Тогда
			
			стрОшибки = "Есть несколько правил обмена по имени приемника """ + ИмяПриемника + """ не понятно - какой нужно использовать";
			Возврат Неопределено;
			
		КонецЕсли;
		
		Возврат ВернутьДополненнуюСтруктуруПараметров(КонвертацияТипов.ПолучитьСтруктуруИзСТрокиТаблицыЗначений(Таблица));
		
	КонецЕсли;

КонецФункции
Функция ПолучитьПравилаСопостовленияУТ81_отключить(ПравилоОбменассылка, стрОшибки = "") Экспорт
	
	// Источник 	- 81
	// Примемник 	- 82
	
	Запрос = Новый Запрос("ВЫБРАТЬ * ИЗ Справочник.ПравилаОбмена ГДЕ ПометкаУдаления = Ложь И Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", ПравилоОбменассылка);
	Выполнение = Запрос.Выполнить();
	Если Выполнение.Пустой() Тогда
		
		стрОшибки = "не найдено правило сопоставления """ + ПравилоОбменассылка + """";
		Возврат Неопределено;
		
	Иначе
		
		Таблица = Выполнение.Выгрузить();
		Если Таблица.Количество() > 1 Тогда
			
			стрОшибки = "Есть несколько правил обмена """ + ПравилоОбменассылка + """ не понятно - какой нужно использовать";
			Возврат Неопределено;
			
		КонецЕсли;
		
		Возврат ВернутьДополненнуюСтруктуруПараметров(КонвертацияТипов.ПолучитьСтруктуруИзСТрокиТаблицыЗначений(Таблица));
		
	КонецЕсли;
	
КонецФункции
Функция ПолучитьПравилаСопостовленияУТ81(ПравилоОбменассылка, стрОшибки = "") Экспорт
	
	Возврат КонвертацияТипов.ПолучитьСтруктуруИзСправочника(ПравилоОбменассылка, стрОшибки);
	
КонецФункции

Функция стрПримитивныйТип(ИмяТипа) Экспорт
	
	врИмя = ВРЕГ(СокрЛП(имяТипа));
	
	Возврат 	врИмя = "ТЕКСТ" Или
				врИмя = "СТРОКА" Или
				врИмя = "СТРОКА(0)" Или
				врИмя = "ЧИСЛО" Или
				врИмя = "БУЛЕВО" Или
				врИмя = "ДАТА" Или
				врИмя = "ДАТАВРЕМЯ";
				
КонецФункции
Функция ПолучитьОписаниеТипаОбъектаИзСтрокиТипа(стрИмяТипа) Экспорт
	
	врСтрИмяТипа = ВРЕГ(стрИмяТипа);
	
	Если стрПримитивныйТип(врСтрИмяТипа) Тогда
		
		Если 	врСтрИмяТипа = "ТЕКСТ" Или
				врСтрИмяТипа = "СТРОКА" Тогда
			опТипов = Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(255));
		Иначе
			опТипов = Новый ОписаниеТипов(врСтрИмяТипа);
		КонецЕсли;
		
		Возврат опТипов;
		
	Иначе
		
		Попытка
			менеджерОбъекта = Вычислить(врСтрИмяТипа);
			Тип = Тип(менеджерОбъекта.ПустаяСсылка());
		Исключение
			Возврат Неопределено;
		КонецПопытки;
		
		Массив = Новый Массив;
		Массив.Добавить(Тип);
		Возврат Новый ОписаниеТипов(Массив);
		
    КонецЕсли;
	
КонецФункции

// ADO функции

Функция ОпределитьТекстУсловияОтбораПостроке(стрВидСравнения) Экспорт
	
	врстрВидСравнения = ВРЕГ(стрВидСравнения);
	
	Если врстрВидСравнения = "РАВНО" Тогда
		
		Возврат "=";
		
	ИначеЕсли врстрВидСравнения = "НЕРАВНО" Тогда
		
		Возврат "<>";
		
	ИначеЕсли врстрВидСравнения = "БОЛЬШЕ" Тогда
		
		Возврат ">";
		
	ИначеЕсли врстрВидСравнения = "МЕНЬШЕ" Тогда
		
		Возврат "<";
		
	Иначе
		
		Возврат "=";
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСтрокуПодключенияADOПоУмолчанию()
	
	Возврат "DRIVER={MySQL ODBC 5.1 Driver};SERVER=test.licota.ru;Port=3306;DATABASE=db_2;UID=dbu_3;PASSWORD=DKlnk110;OPTION=3;STMT=SET CHARACTER SET cp1251";
	
КонецФункции

Функция ИницилизироватьADO(СтрокаПодключения = "", стрОшибки = "") Экспорт
	
	Если СтрокаПодключения = "" Тогда
		СтрокаПодключения = ПолучитьСтрокуПодключенияADOПоУмолчанию();
	КонецЕсли;
	
	//Catalog 	= Новый COMОбъект("ADOX.Catalog");
	Соединение 	= Новый COMОбъект("ADODB.Connection");

	Попытка
		
		//Catalog.ActiveConnection = СтрокаПодключения;
		Соединение.Open(СтрокаПодключения);
			
	Исключение
			
		опОш = ОписаниеОшибки();
		глПротокол = Неопределено;
		стрОшибки = "Ошибка создания ADO соединения
				|" + опОш;
		Возврат Неопределено;
			
	КонецПопытки;
	
	Возврат Соединение;
	
КонецФункции

// ФУНКЦИИ ПРАВ

Функция ПравоРедактированияЦеныВДокументе() Экспорт
	
	Возврат ПараметрыСеанса.ТекущийПользователь.РедактированиеЦеныВДокументе;
	
КонецФункции

Функция ЭтоПолныеПрава() Экспорт
	
	Возврат РольДоступна("ПолныеПрава") Или РольДоступна("ПолныеПраваВОбласти");
	
КонецФункции

Функция ПолучитьМоиСклады(Пользователь = Неопределено) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ Склад ИЗ РегистрСведений.СкладыПользователя ГДЕ Пользователь = &ТекПользователь");	
	Запрос.УстановитьПараметр("ТекПользователь", Пользователь);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Склад");
	
КонецФункции

Функция ПользователюРазрешенаБыстраяПродажа() Экспорт
	
	Возврат РольДоступна("ПолныеПрава") Или РольДоступна("ПолныеПраваВОбласти") Или РольДоступна("БыстраяПродажаЗаказа");
	
КонецФункции

Функция РольДоступнаПользователю(Роль) Экспорт
	
	Возврат РольДоступна(Роль) ИЛИ РольДоступна("ПолныеПрава") ИЛИ РольДоступна("ПолныеПраваВОбласти");
	
КонецФункции

Функция ЧеловекПользуетсяМультиЯзыками() Экспорт
	
	Возврат РольДоступна("Translation");
	
КонецФункции

// ЯЗЫКИ

Функция ПолучитьСоставОбъектовСЯзыком() Экспорт
	
	Использование 	= Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать;
	Состав 			= Новый Соответствие;
	
	Для Каждого МетаОбъект Из Метаданные.ОбщиеРеквизиты.Язык.Состав ЦИкл Если МетаОбъект.Использование = Использование Тогда Состав.Вставить(МетаОбъект.Метаданные, Истина) КонецЕсли; КонецЦикла;
	
	Возврат Состав;
	
КонецФункции

// СБОРКА

Функция ПолучитьТаблицуМаршрутов_Ст() Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Отпр.Склад 		СкладОтправитель,
	|	Получ.Склад 	СкладПолучатель,
	|	Отпр.Ссылка	Маршрут
	|ИЗ
	|	(	ВЫБРАТЬ	Склад, Ссылка
	|		ИЗ 		Справочник.Маршруты.СкладыОтправители
	|		ОБЪЕДИНИТЬ
	|		ВЫБРАТЬ	Склад, Ссылка
	|		ИЗ 		Справочник.Маршруты.ТранзитныеСклады
	|	)Отпр
	|
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	Справочник.Маршруты.СкладыЗаказчики Получ
	|ПО
	|	Отпр.Ссылка = Получ.Ссылка
	|");

	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции
Функция ПолучитьТаблицуМаршрутов() Экспорт
	
	// Тупая функция, можно одним запросом знаю, но времени нету, нужно срочно, кому не лень ПЕРЕДЕЛАЙТЕ!
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Ссылка Маршрут,
	|	СкладыОтправители.(Склад) Отправители,
	|	ТранзитныеСклады.(Склад) Транзиты,
	|	СкладыЗаказчики.(Склад) Получатели
	|ИЗ
	|	Справочник.Маршруты
	|");
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Маршрут", 			Новый ОписаниеТипов("СправочникСсылка.Маршруты"));
	Таблица.Колонки.Добавить("СкладОтправитель", 	Новый ОписаниеТипов("СправочникСсылка.Склады"));
	Таблица.Колонки.Добавить("СкладПолучатель", 	Новый ОписаниеТипов("СправочникСсылка.Склады"));
	Таблица.Колонки.Добавить("СкладТранзит", 		Новый ОписаниеТипов("СправочникСсылка.Склады"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ВыборкаОтправителей = Выборка.Отправители.Выбрать();
		Пока ВыборкаОтправителей.Следующий() Цикл
			
			ВыборкаТранзитов = Выборка.Транзиты.Выбрать();
			Пока ВыборкаТранзитов.Следующий() Цикл
				
				ВыборкаПолучателей = Выборка.Получатели.Выбрать();
				Пока ВыборкаПолучателей.Следующий() Цикл
					
					НовСтрока = Таблица.Добавить();
					НовСтрока.Маршрут 			= Выборка.Маршрут;
					НовСтрока.СкладОтправитель 	= ВыборкаОтправителей.Склад;
					НовСтрока.СкладТранзит 		= ВыборкаТранзитов.Склад;
					НовСтрока.СкладПолучатель 	= ВыборкаПолучателей.Склад; КонецЦикла; КонецЦикла; КонецЦикла; КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции

// ОТПРАВКА ПИСЕМ

Функция ПолучитьПодвалПисьма() Экспорт
	
	Возврат "<HR><P> Мы всегда к Вашим услугам и ждем Ваших заказов!<BR>
			|С наилучшими пожеланиями,<BR>
			|Администрация Интернет-магазина <A style=""COLOR: rgb(0,0,204)"" href=""http://garagetools.ru/"">garagetools.ru</A></P>";
			
КонецФункции
		
// КОНТАКТНАЯ ИНФОРМАЦИЯ

Функция ПолучитьСоответствиеПолейАдреса() Экспорт
	
	СоответствиеАдреса = Новый Соответствие;
	СоответствиеАдреса.Вставить("Поле1", ПредопределенноеЗначение("ПланВидовХарактеристик.СоставКонтактнойИнформации.Индекс")); 
	СоответствиеАдреса.Вставить("Поле2", ПредопределенноеЗначение("ПланВидовХарактеристик.СоставКонтактнойИнформации.Регион")); 
	СоответствиеАдреса.Вставить("Поле3", ПредопределенноеЗначение("ПланВидовХарактеристик.СоставКонтактнойИнформации.Район")); 
	СоответствиеАдреса.Вставить("Поле4", ПредопределенноеЗначение("ПланВидовХарактеристик.СоставКонтактнойИнформации.Город")); 
	СоответствиеАдреса.Вставить("Поле5", ПредопределенноеЗначение("ПланВидовХарактеристик.СоставКонтактнойИнформации.НаселенныйПункт")); 
	СоответствиеАдреса.Вставить("Поле6", ПредопределенноеЗначение("ПланВидовХарактеристик.СоставКонтактнойИнформации.Улица")); 
	СоответствиеАдреса.Вставить("Поле7", ПредопределенноеЗначение("ПланВидовХарактеристик.СоставКонтактнойИнформации.Дом")); 
	СоответствиеАдреса.Вставить("Поле8", ПредопределенноеЗначение("ПланВидовХарактеристик.СоставКонтактнойИнформации.Корпус")); 
	СоответствиеАдреса.Вставить("Поле9", ПредопределенноеЗначение("ПланВидовХарактеристик.СоставКонтактнойИнформации.Квартира"));
	
	Возврат СоответствиеАдреса;
	
КонецФункции

Функция ПолучитьСоответствиеПолейТелефона() Экспорт
	
	СоответствиеТелефоны = Новый Соответствие;
	СоответствиеТелефоны.Вставить("Поле1", ПредопределенноеЗначение("ПланВидовХарактеристик.СоставКонтактнойИнформации.КодСтраны")); 
	СоответствиеТелефоны.Вставить("Поле2", ПредопределенноеЗначение("ПланВидовХарактеристик.СоставКонтактнойИнформации.КодГорода")); 
	СоответствиеТелефоны.Вставить("Поле3", ПредопределенноеЗначение("ПланВидовХарактеристик.СоставКонтактнойИнформации.НомерТелефона")); 
	СоответствиеТелефоны.Вставить("Поле4", ПредопределенноеЗначение("ПланВидовХарактеристик.СоставКонтактнойИнформации.Внутренний")); 
	
	Возврат СоответствиеТелефоны;
	
КонецФункции

Функция ВалютаУправленческогоУчета() Экспорт
	Возврат Константы.ВалютаУправленческогоУчета.Получить();
КонецФункции

Функция НачалоВеденияСФПоОбособленнымПодразделениям() Экспорт
	Возврат Константы.НачалоВеденияСФПоОбособленнымПодразделениям.Получить(); 
КонецФункции


// ФУНКЦИИ ПЕЧАТИ

Функция КоличествоМиллиметровВПикселе() Экспорт
	
	Возврат Обработки.ПечатьЦенников.ПолучитьМакет("Эталон").Рисунки.Квадрат100Пикселей.Высота / 100;
	
КонецФункции

// PARSEC

Функция ПользователюОграниченПросмотр() Экспорт
	
	Если РольДоступна("ПолныеПрава") Или РольДоступна("ПолныеПраваВОбласти") Тогда
		
		Возврат Ложь;
		
	Иначе
		
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 ИСТИНА Может ИЗ РегистрСведений.ПравоПросмотраПосещений ГДЕ Кто = &текПользователь И Кого = &ПустоеФизЛицо");
		Запрос.УстановитьПараметр("ПустоеФизЛицо", 		Справочники.ФизическиеЛица.ПустаяСсылка());
		Запрос.УстановитьПараметр("текПользователь", 	ПараметрыСеанса.ТекущийПользователь);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Не Выборка.Может; КонецЕсли; КонецЕсли;
		
	
	//Если РольДоступна("ОтображатьИнформациюОПосещенииРабочегоМеста") Тогда
	//	
	//	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 ИСТИНА ИЗ РегистрСведений.ПравоПросмотраПосещений ГДЕ Кто = &текПользователь");
	//	Запрос.УстановитьПараметр("текПользователь", ПараметрыСеанса.ТекущийПользователь);
	//	
	//	Возврат Не Запрос.Выполнить().Пустой(); КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// СТАТЬИ ДДС

Функция ПолучитьСтатьюОплатаПокупателя() Экспорт
	
	Возврат Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателя
	
КонецФункции
Функция ПолучитьСтатьюВозвратПокупателю() Экспорт
	Возврат Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("000000014");
КонецФункции
Функция ПолучитьСтатьюОплатаПоставщику() Экспорт
	Возврат Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("000000043");
КонецФункции
Функция ПолучитьСтатьюВозвратПоставщика() Экспорт
	Возврат Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("000000044");
КонецФункции

Функция ПолучитьСтатьюПоступлениеОтОператораПлатежнойСистемы() Экспорт
	Возврат Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("000000125");
КонецФункции

// ЦЕНЫ

Функция ПолучитьТипЦенРозница() Экспорт
	
	Возврат Константы.ТипЦенРозница.Получить();
	//Возврат Справочники.ТипыЦен.ПолучитьСсылку(Новый УникальныйИдентификатор("a2896017-fe5f-11dc-a014-001731520b3d"));
	
КонецФункции

//ВАЛЮТЫ

Функция ПолучитьВалюты() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Валюты.Ссылка КАК Валюта
		|ИЗ
		|	Справочник.Валюты КАК Валюты
		|ГДЕ
		|	Валюты.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Валюты.Наименование";
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Возврат РезультатЗапроса;
	
КонецФункции

// API

Функция ПолучитьПутьИнтернетМагазинLicota() Экспорт
	
	Возврат Константы.ПутьИнтернетМагазинLicota.Получить();
	
КонецФункции

Функция ПолучитьКлючСайтаЛикота() Экспорт
	
	Возврат Константы.КлючСайтаЛикота.Получить();
	
КонецФункции

Функция ПолучитьЦентральныйСкладМагазина() Экспорт
	
	Возврат Константы.ЦентральныйСкладИнтернетМагазина.Получить();
	
КонецФункции

// ОБЛАКО

Функция ПолучитьПутьКОблакуЛокально() Экспорт
	
	Возврат Константы.ПутьКОблаку.Получить();
	
КонецФункции

Функция ПолучитьПутьКОблакуHTTP() Экспорт
	
	Возврат Константы.ПутьHTTPКОблаку.Получить();
	
КонецФункции

// ИНТЕГРАЦИЯ
Функция ПолучитьИмяСервераТретьейБухгалтерии() Экспорт
	Возврат Константы.ИмяСервераТретьейБухгалтерии.Получить();
КонецФункции

// КОНСТАНТЫ
Функция ПолучитьДедлайнНаОтправкуВСборку() Экспорт
	
	Возврат Новый Структура("Начало, Окончание", Константы.ДедлайнНаОтправкуЗаказаВСборкуНачало.Получить(), Константы.ДедлайнНаОтправкуЗаказаВСборкуОкончание.Получить());
	
КонецФункции