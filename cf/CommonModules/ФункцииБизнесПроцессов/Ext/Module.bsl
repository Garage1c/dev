Функция ПолучитьИмяФормы(Ссылка) Экспорт
	
	Возврат "БизнесПроцесс." + Ссылка.Метаданные().Имя + ".ФормаОбъекта";
	
КонецФункции

Функция ПолучитьЗаголовокБП(СсылкаБП) Экспорт
	
	Возврат БизнесПроцессы[СсылкаБП.Метаданные().Имя].ПолучитьЗаголовокБП(СсылкаБП);
	
КонецФункции

Функция ПредставлениеЗадачиПоЗаказу(Задача, Заказ) Экспорт
	
	НомерЗаказа   = СокрЛП(Заказ.Номер);
	Пока Лев(НомерЗаказа, 1)="0" Цикл   			  // удаление ведущих нулей
		НомерЗаказа = Сред(НомерЗаказа, 2);
	КонецЦикла;

	Если ТипЗнч(Заказ) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
		
		Возврат Задача.Наименование + " внутренний № "  + НомерЗаказа + "  (" + Заказ.Склад + "->" + Заказ.Заказчик + ")";
		
	Иначе
		
		Возврат Задача.Наименование + " № "  + НомерЗаказа + " (" + Формат(Заказ.Сумма, "Ч15.2,") + ") " + ?(ТипЗнч(Заказ) = Тип("ДокументСсылка.ИнтернетЗаказПокупателя"), ?(ЗначениеЗаполнено(Заказ.ПользовательИнтернет), Заказ.ПользовательИнтернет, Заказ.Партнер), ?(Заказ.ОтветственноеЛицо.Пустая(), Заказ.Партнер, Заказ.ОтветственноеЛицо));
		
	КонецЕсли;
	
КонецФункции

// КОММЕНТАРИИ

Функция ПолучитьМассивКомментариев(СсылкаПроцесс) Экспорт
	
	Параметры = Новый Структура("Заказ, РеализацияТоваров");
	ЗаполнитьЗначенияСвойств(Параметры, СсылкаПроцесс);
	
	Запрос = Новый Запрос("
	|
	|ВЫБРАТЬ
	|	Комментарий, Заголовок, ДатаВыполнения, Исполнитель
	|ИЗ
	|(
	|	ВЫБРАТЬ
	|		Комментарий, Наименование Заголовок, ДатаВыполнения, Исполнитель
	|	ИЗ
	|		Задача.ЗадачаПользователю
	|	ГДЕ
	|		БизнесПроцесс = &Ссылка	
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Комментарий, Наименование Заголовок, ДатаВыполнения, Исполнитель
	|	ИЗ
	|		Задача.ЗадачаПользователю
	|	ГДЕ
	|		БизнесПроцесс в (ВЫБРАТЬ Ссылка ИЗ   БизнесПроцесс.ЗаявкаПокупателя   ГДЕ Заказ = &Заказ)	
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Комментарий, Наименование Заголовок, ДатаВыполнения, Исполнитель
	|	ИЗ
	|		Задача.ЗадачаПользователю
	|	ГДЕ
	|		БизнесПроцесс в (ВЫБРАТЬ Ссылка ИЗ   БизнесПроцесс.ИнтернетЗаявка   ГДЕ Заказ = &Заказ)	
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Комментарий, Наименование Заголовок, ДатаВыполнения, Исполнитель
	|	ИЗ
	|		Задача.ЗадачаПользователю
	|	ГДЕ
	|		БизнесПроцесс в (ВЫБРАТЬ Ссылка ИЗ   БизнесПроцесс.ПеремещениеТоваров   ГДЕ Заказ = &Заказ)	
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Комментарий, ""Заказ покупателя"", Дата, Ответственный
	|	ИЗ
	|		Документ.ЗаказПокупателя
	|	ГДЕ
	|		Ссылка = &Заказ
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		КомментарийКДоставке, ""Комментарий к доставке"", Дата, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|	ИЗ
	|		Документ.ИнтернетЗаказПокупателя
	|	ГДЕ
	|		Ссылка = &Заказ
    |
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Комментарий, ""Внутренний заказ"", Дата, Ответственный
	|	ИЗ
	|		Документ.ВнутреннийЗаказ
	|	ГДЕ
	|		Ссылка = &Заказ
    |
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Комментарий, ""Реализация товаров"", Дата, Ответственный
	|	ИЗ
	|		Документ.РеализацияТоваров
	|	ГДЕ
	|		Ссылка = &Реализация
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Комментарий, ""Сборка заказа"", Дата, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|	ИЗ
	|		БизнесПроцесс.СборкаЗаказа
	|	ГДЕ
	|		Ссылка = &Ссылка
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Комментарий, ""Заявка покупателя"", Дата, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|	ИЗ
	|		БизнесПроцесс.ЗаявкаПокупателя
	|	ГДЕ
	|		Заказ = &Заказ
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Комментарий, ""Интернет заявка"", Дата, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|	ИЗ
	|		БизнесПроцесс.ИнтернетЗаявка
	|	ГДЕ
	|		Заказ = &Заказ
	|) Запрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаВыполнения
	|");
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаПроцесс);
	Запрос.УстановитьПараметр("Заказ", 	Параметры.Заказ);
	Запрос.УстановитьПараметр("Реализация", Параметры.РеализацияТоваров);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Массив = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		Если Не ПустаяСтрока(Выборка.Комментарий) Тогда
		
			Массив.Добавить(Новый Структура("Комментарий, Заголовок, ДатаВыполнения, Исполнитель",
									Выборка.Комментарий, Выборка.Заголовок, Выборка.ДатаВыполнения, Выборка.Исполнитель)); КонецЕсли; КонецЦикла;
	Возврат Массив;
	
КонецФункции

Процедура ЗаписатьКомментарийВРегистр(Заказ,Комментарий) Экспорт
	НовРег = РегистрыСведений.КомментарииПоЗаказам.СоздатьМенеджерЗаписи();
	НовРег.Заказ = Заказ;
	НовРег.Комментарий = Комментарий;
	НовРег.Период = ТекущаяДата();
	НовРег.Записать();
КонецПроцедуры

Функция ПолучитьКомментарийЗаказа(Заказ) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	КомментарииПоЗаказамСрезПоследних.Комментарий
	                      |ИЗ
	                      |	РегистрСведений.КомментарииПоЗаказам.СрезПоследних(, Заказ = &Заказ) КАК КомментарииПоЗаказамСрезПоследних");
	Запрос.УстановитьПараметр("Заказ",Заказ);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат "";
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Комментарий;
	КонецЕсли;
КонецФункции

// СБОРКА

Функция ЗаполнитьСборочныйЛистЗадачи(ЗадачаОбъект, ПараметрыЗаполнения) Экспорт
	
	// Записывает параметры сборочного листа из переданных данных
	// если сборочного листа нет у бизнес процесса тогда создается новый документ и присваивается к бизнес процессу
	// бизнес процесс при этом записывается
	// если сборочный лист есть у бизнес процесса есть тогда параметры документа переписываются
	// Возвращает Истина если запись удачная
	
	ДокОбъект = ?(ЗадачаОбъект.БизнесПроцесс.СборочныйЛист.Пустая(), Документы.СборочныйЛист.СоздатьДокумент(), ЗадачаОбъект.БизнесПроцесс.СборочныйЛист.ПолучитьОбъект());
	ДокОбъект.Заполнить(ПараметрыЗаполнения);
	
	Если Не ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(ДокОбъект) Тогда
		Возврат Ложь; КонецЕсли;
	
	Если ЗадачаОбъект.БизнесПроцесс.СборочныйЛист <> ДокОбъект.Ссылка Тогда
		
		БПОбъект = ЗадачаОбъект.БизнесПроцесс.ПолучитьОбъект();
		БПОбъект.СборочныйЛист = ДокОбъект.Ссылка;
		
		Если Не ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(БПОбъект) Тогда
			Возврат Ложь; КонецЕсли; КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

Функция ПолучитьНовыйБПСборкиТоваров(Заказ, Склад = Неопределено) Экспорт

	НовПроцесс = БизнесПроцессы.СборкаТовара.СоздатьБизнесПроцесс();
	НовПроцесс.Дата		= ТекущаяДата();
	НовПроцесс.Заказ 	= Заказ;
	НовПроцесс.Склад	= ?(Склад = Неопределено, Заказ.Склад, Склад);
	
	Возврат НовПроцесс;
	
КонецФункции

// МЕСТОНАХОЖДЕНИЕ

Функция СтоитНаТочкеМаршрута(БизнесПроцесс, ТочкаМаршрута, ИмяПроцесса = "") Экспорт
	
	Если ТипЗнч(ТочкаМаршрута) = Тип("Строка") Тогда
		ТочкаМаршрута = Вычислить("БизнесПроцессы." + ИмяПроцесса + ".ТочкиМаршрута." + ТочкаМаршрута);
	КонецЕсли;
	
	Точки = ТекущииТочкиМаршрутаБП(БизнесПроцесс);
	Возврат Точки.Найти(ТочкаМаршрута) <> Неопределено;
	
КонецФункции
Функция ТекущииТочкиМаршрутаБП(БизнесПроцесс) Экспорт
	
	// Возвращает массив текущих точек БП

	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТочкаМаршрута
	|ИЗ
	|	Задача.ЗадачаПользователю
	|ГДЕ
	|	БизнесПроцесс = &БизнесПроцесс И
	|	Не Выполнена И
	|	Не ПометкаУдаления
	|");
	
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ТочкаМаршрута");
	
КонецФункции

Функция ТекущиеЗадачи(БизнесПроцесс, ИгнорироватьВедущиеЗадачи = Истина) Экспорт
	
	// Возвращает массив текущих задач БП
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Ссылка
	|ИЗ
	|	Задача.ЗадачаПользователю
	|ГДЕ
	|	БизнесПроцесс = &БизнесПроцесс И
	|	Не Выполнена И
	|	Не ПометкаУдаления" + ?(ИгнорироватьВедущиеЗадачи," И
	|	Ссылка  НЕ В(
	|		ВЫБРАТЬ ВедущаяЗадача ИЗ БизнесПроцесс.СборкаЗаказа ГДЕ НЕ ВедущаяЗадача.Выполнена И Не ВедущаяЗадача.ПометкаУдаления И ВедущаяЗадача.БизнесПроцесс = &БизнесПроцесс ОБЪЕДИНИТЬ
	|		ВЫБРАТЬ ВедущаяЗадача ИЗ БизнесПроцесс.ПеремещениеТоваров ГДЕ НЕ ВедущаяЗадача.Выполнена И Не ВедущаяЗадача.ПометкаУдаления И ВедущаяЗадача.БизнесПроцесс = &БизнесПроцесс
	|				)
	|","") + "
	|");
	
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции
Функция ТекущаяЗадача(БизнесПроцесс, ТочкаМаршрута = Неопределено) Экспорт
	
	// Возвращает первую текущую задачу
	
	МассивЗадач = ТекущиеЗадачи(БизнесПроцесс, Ложь);
	Если МассивЗадач.Количество() Тогда
		
		Если ТочкаМаршрута = Неопределено Тогда
		
			Возврат МассивЗадач[0];
			
		Иначе
			
			Для Каждого текЗадача Из МассивЗадач Цикл Если ТочкаМаршрута = текЗадача.ТочкаМаршрута Тогда Возврат текЗадача;КонецЕсли;КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции
Функция ПолучитьПодчиненныйБПЗадачи(ВедущаяЗадача, ИмяПроцесса) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Ссылка
	|ИЗ
	|	БизнесПроцесс." + ИмяПроцесса + "
	|ГДЕ
	|	ВедущаяЗадача = &Задача
	|");
	
	Запрос.УстановитьПараметр("Задача", ВедущаяЗадача);
	
	Выполнение = Запрос.Выполнить();
	Если Выполнение.Пустой() Тогда
		
		Возврат БизнесПроцессы[ИмяПроцесса].ПустаяСсылка();
		
	Иначе
		
		Выборка = Выполнение.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
		
	КонецЕсли;
	
КонецФункции
         
// УПРАВЛЕНИЕ

Процедура ЗаполнитьДанныеЗадачи(Объект, Форма) Экспорт
	
	Менеджер = БизнесПроцессы[Объект.БизнесПроцесс.Метаданные().Имя];
	
	// Заполним таблицу и шапку
	
	Менеджер.ЗаполнитьФормуЗадачиПоБП(Форма, Объект.БизнесПроцесс, Объект.Ссылка);
	
	// Запоним комментарии
	
	Если Форма.Элементы.Найти("ПредыдущийКомментарий") <> Неопределено Тогда
		
		//Комментарий = БизнесПроцессы.РемонтИнструмента.ПолучитьТекстКомментариевHTML(Объект.БизнесПроцесс);
		Комментарий = ПолучитьТекстКомментариевHTML(Объект.БизнесПроцесс);
		
		Если ПустаяСтрока(Комментарий) Тогда
			
			Форма.Элементы.ПредыдущийКомментарий.Видимость = Ложь;
			
		Иначе
			
			Форма.ПредыдущийКомментарий = Комментарий;
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры
Процедура ЗаполнитьДанные(Форма, ПроцессСсылка, ЗадачаСсылка = Неопределено) Экспорт
	
	Менеджер = БизнесПроцессы[ПроцессСсылка.Метаданные().Имя];
	
	// Заполним таблицу и шапку
	
	Менеджер.ЗаполнитьФормуПоБП(Форма, ПроцессСсылка, ЗадачаСсылка);
	
	
	//// Запоним комментарии
	//
	//Если Форма.Элементы.Найти("ПредыдущийКомментарий") <> Неопределено Тогда
	//	
	//	Комментарий = ПолучитьТекстКомментариевHTML(ПроцессСсылка);
	//	
	//	Если ПустаяСтрока(Комментарий) Тогда
	//		Форма.Элементы.ПредыдущийКомментарий.Видимость = Ложь;
	//	Иначе
	//		Форма.ПредыдущийКомментарий = Комментарий;
	//	КонецЕсли;
	//	
	//КонецЕсли;
	//	
КонецПроцедуры


// ПРАВА

Функция ФормированиеЗаказаРазрешеноКВыполнению(текПользователь, Пользователь, Заказ, Роль = Неопределено, ДоверенныеЛица = Неопределено) Экспорт
	
	// Если это полные права тогда выполнять задачу можно
	
	Если КэшируемыеФункции.ЭтоПолныеПрава() ИЛИ РольДоступна("ВыполнятьЛюбуюЗадачу") Тогда Возврат Истина; КонецЕсли;
	
	// Если это МенеджерОКС тогда выполнять задачу можно
	
	текРоли = ПараметрыСеанса.ТекущиеРоли;
	ОтделыКС = ПараметрыСеанса.ОтделыКлиентскогоСервиса;
	
	Если текРоли.Найти(Справочники.Роли.МенеджерОКС) <> Неопределено И ОтделыКС.Найти(Заказ.Отдел) <> Неопределено Тогда Возврат Истина; КонецЕсли;
	
	// Если это пользователь, который явлеяется доверенным лицом основного менеджера апртнера - то ему можно выполнять задачу
	
	Если ДоверенныеЛица = Неопределено Тогда   
		
			 ДоверенныеЛица =  ПолучитьДоверенныхЛицПользователя(Заказ.Контрагент.ОсновнойМенеджер); КонецЕсли;
	 
	
	Если 	текПользователь <> Пользователь И ДоверенныеЛица.Найти(текПользователь) = Неопределено И                                                      
			Заказ.Автор <> текПользователь И
			Заказ.Контрагент.ОсновнойМенеджер <> текПользователь И 
			//НЕ КэшируемыеФункции.ЭтоПолныеПрава() И //чтобы полные права видели кнопки
			Пользователь <> Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор("9e97c9f1-7b4c-11e1-86be-0015175303fd"))
	Тогда
			
		Возврат Ложь;
		
	КонецЕсли;
	
	Если Роль <> Неопределено И НЕ Роль.Пустая() Тогда
		
		текРоли = ПараметрыСеанса.ТекущиеРоли;
		Если текРоли.Найти(Роль) = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции
// Функция возвращает список довернных лиц для выбранного пользователя
// если параметр "Польватель1" заполнен - возвращает список довернных лиц для Пользователя и Пользователя1
Функция ПолучитьДоверенныхЛицПользователя(Пользователь, Пользователь1 = Неопределено)
	
	ДоверенныеЛица = Новый Массив;
	
	//найдем доверенных лиц
	Запрос = Новый Запрос("ВЫБРАТЬ ДоверенноеЛицо ИЗ РегистрСведений.ДоверенныеЛицаПользователя ГДЕ Пользователь = &Пользователь 
		|" + ?(Пользователь1 <> Неопределено, " ИЛИ Пользователь = &Пользователь1", "") + "
		|");
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Если Пользователь1 <> Неопределено Тогда
		Запрос.УстановитьПараметр("Пользователь1", Пользователь1);
	КонецЕсли;
	
	Рез = Запрос.Выполнить();
	Если НЕ Рез.Пустой() Тогда
		ДоверенныеЛица = Рез.Выгрузить().ВыгрузитьКолонку("ДоверенноеЛицо");
	КонецЕсли;
	
	Возврат ДоверенныеЛица;
	
КонецФункции

Функция ПолучитьЗаказИзБП(БП)
	
	Возврат ?(НРег(БП.Метаданные().Имя) = "ремонтинструмента", БП.ЗаказНаряд, БП.Заказ);
	
КонецФункции
Функция РазрешенаЗадачаКВыполнению(Задача) Экспорт
	
	текПользователь = ПараметрыСеанса.ТекущийПользователь;
	
	
	ФормированиеЗаказа = 	Задача.ТочкаМаршрута = БизнесПроцессы.ЗаявкаПокупателя.ТочкиМаршрута.ФормированиеЗаказа ИЛИ
							Задача.ТочкаМаршрута = БизнесПроцессы.ИнтернетЗаявка.ТочкиМаршрута.ОжиданиеОплаты ИЛИ
							Задача.ТочкаМаршрута = БизнесПроцессы.ИнтернетЗаявка.ТочкиМаршрута.ПодтверждениеЗаказа ИЛИ
							Задача.ТочкаМаршрута = БизнесПроцессы.ИнтернетЗаявка.ТочкиМаршрута.ПодтверждениеЗаказаНаложенныйПлатеж ИЛИ
							Задача.ТочкаМаршрута = БизнесПроцессы.ИнтернетЗаявка.ТочкиМаршрута.ОбработатьЗаказ;
	// Проверим по пользователю
	
	Если Не Задача.Пользователь.Пустая() Тогда
		
		Заказ = ПолучитьЗаказИзБП(Задача.БизнесПроцесс);
		
		ДоверенныеЛица = Новый Массив;
		ДоверенныеЛица = ПолучитьДоверенныхЛицПользователя(?(ФормированиеЗаказа, Заказ.Контрагент.ОсновнойМенеджер, Заказ.Автор));
				
		Если ФормированиеЗаказа Тогда
			
			Если НЕ ФормированиеЗаказаРазрешеноКВыполнению(текПользователь, Задача.Пользователь, Заказ, , ДоверенныеЛица) Тогда
				Возврат Ложь; КонецЕсли;
			
		Иначе
			
			Если 	текПользователь <> Задача.Пользователь И ДоверенныеЛица.Найти(текПользователь) = Неопределено И
					Задача.Пользователь <> Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор("9e97c9f1-7b4c-11e1-86be-0015175303fd")) и 
					НЕ КэшируемыеФункции.ЭтоПолныеПрава()   //чтобы полные права видели кнопки

					Тогда
					
				Возврат Ложь;
				
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ФормированиеЗаказа Тогда  // получается что, если задача формирования заказа и роль менеджер, то основной менеджер контрагента может делать с этими заявками что хочет (адресация задачи не важна)
		Заказ = ПолучитьЗаказИзБП(Задача.БизнесПроцесс);

		текРоли = ПараметрыСеанса.ТекущиеРоли;
		Если текРоли.Найти(Справочники.Роли.Менеджер) <> Неопределено И Заказ.Контрагент.ОсновнойМенеджер = текПользователь Тогда Возврат Истина; КонецЕсли;
		
		// Если это МенеджерОКС тогда выполнять задачу можно
		ОтделыКС = ПараметрыСеанса.ОтделыКлиентскогоСервиса;
		
		Если текРоли.Найти(Справочники.Роли.МенеджерОКС) <> Неопределено И ОтделыКС.Найти(Заказ.Отдел) <> Неопределено Тогда Возврат Истина; КонецЕсли;
		
	КонецЕсли;
		
	// Проверим по ролям
	
	Если Не Задача.Роль.Пустая() Тогда
	
		текРоли = ПараметрыСеанса.ТекущиеРоли;
		Если текРоли.Найти(Задача.Роль) = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверим по складу
	
	Если Не Задача.Склад.Пустая() Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ ПЕРВЫЕ 1 ИСТИНА 
		|ИЗ 		РегистрСведений.СкладыПользователя 
		|ГДЕ 		Пользователь 	= &Пользователь И
		|	 		Склад 			= &Склад
		|");
		
		Запрос.УстановитьПараметр("Пользователь", 	текПользователь);
		Запрос.УстановитьПараметр("Склад", 			Задача.Склад);
		
		Возврат Не Запрос.Выполнить().Пустой();
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// ПОДПИСКИ НА СОБЫТИЯ

Процедура ПриЗаписиБППриЗаписи(Источник, Отказ) Экспорт
	
	// Установим пометку удаления у задачи точно такие же как у БП
	
	ПометкаУдаления = Источник.ПометкаУдаления;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ	Ссылка
	|ИЗ			Задача.ЗадачаПользователю
	|ГДЕ		БизнесПроцесс 	= &БизнесПроцесс И
	|			ПометкаУдаления <> &ПометкаУдаления
	|");
	
	Запрос.УстановитьПараметр("БизнесПроцесс", 		Источник.Ссылка);
	Запрос.УстановитьПараметр("ПометкаУдаления", 	ПометкаУдаления);
	
	Выборка = Запрос.Выполнить().Выбрать();                           
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			Выборка.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(ПометкаУдаления);
		Исключение
			стрОшибки 	= ОписаниеОшибки();
			Отказ 		= Истина;
			ОбщиеФункции.СообщитьТекст("Ошибка при синхронизации пометки уделения задач с бизнес процессами
							|" + ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры
Процедура ПриЗаписиБП_ИнтернетЗаявка(Источник, Отказ) Экспорт
	
	//Если Источник.Статус <> Перечисления.СтатусыИнтерентЗаявки.Открыт Тогда
	
	ПинатьСайт = Истина;
	Если Источник.ДополнительныеСвойства.Свойство("Обновление") Тогда
		ПинатьСайт = Источник.ДополнительныеСвойства.Обновление;
	КонецЕсли;
	                  
	Если НЕ ПинатьСайт Тогда
		Возврат;
	КонецЕсли;

	///////////////////////////////
	// API2
	ПараметрыЗаписи = Новый Структура("КомандаHTTP, АдресРесурсаСервера, Очередь, Суффикс, ТелоЗапроса", 
										Перечисления.КомандыHTTP.POST,
										"/api/orders",
										10,
										"update",
										API2.ПолучитьЗаказы(Новый Структура("Ссылка", Источник.Заказ)));
	API2.ЗаписатьОбъектВБуферНаИзменениеНаСайте(Источник.Заказ, ПараметрыЗаписи, Отказ);
	
	ПараметрыЗаписи = Новый Структура("КомандаHTTP, АдресРесурсаСервера, Очередь, Суффикс, ТелоЗапроса", 
										Перечисления.КомандыHTTP.POST,
										"/api/orders",
										10,
										"update",
										ApiLicota.ПолучитьЗаказы(Новый Структура("Ссылка", Источник.Заказ)));
	ApiLicota.ЗаписатьОбъектВБуферНаИзменениеНаСайте(Источник.Заказ, ПараметрыЗаписи, Отказ);
	
	//////////////////////////////////////
	
	//HTTP_метод = HTTP.ПолучитьСтруктуруHTTP_метода(,"/api/orders", Истина);
	//HTTP_метод.ДобавитьТелоЗапросаОбъекта = "ПолучитьИнтернетЗаказПараметрамиHTML";

	//СтрокаАдреса = HTTP_метод.АдресРесурса + ?(HTTP_метод.ДобавлятьГуидВАдрес, "/" + Строка(Источник.Заказ.УникальныйИдентификатор()),"");
	//СтрокаАдреса = СтрокаАдреса + ?(HTTP_метод.ЭтоТригер, ?(Прав(СтрокаАдреса,1) = "/", "","/") + "trigger","") + ".json";	
	//
	//
	//HTTP.ДатьЗаданиеНаИзменениеСайту(Источник.Заказ, Перечисления.КомандыHTTP.PUT, СтрокаАдреса, Вычислить("HTTP." + HTTP_метод.ДобавитьТелоЗапросаОбъекта + "(Источник.Заказ)"), HTTP_метод.ЭтоТригер);
	
КонецПроцедуры
 
// Неисправности

Функция ПолучитьСписокНеисправностейПоТексту(Текст) Экспорт
	
	// Сперва найдем так и если есть то пускай будет одно
	
	Ссылка = Справочники.Неисправности.НайтиПоНаименованию(Текст);
	Если Не Ссылка.Пустая() Тогда
		
		Возврат Ссылка;
		
	КонецЕсли;
	
	Список = Новый СписокЗначений;
	
	// Потом найдем побольше
	
	Запрос = Новый Запрос("ВЫБРАТЬ Ссылка, Наименование ИЗ Справочник.Неисправности ГДЕ Наименование ПОДОБНО """ + СокрЛП(Текст) + "%""");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Список.Добавить(Выборка.Ссылка, Выборка.Наименование);
		
	КонецЦикла;
	
	Возврат Список;
	
КонецФункции
Функция СоздатьНеисправность(Текст) Экспорт
	
	НовыйСправочник = Справочники.Неисправности.СоздатьЭлемент();
	НовыйСправочник.Наименование = Текст;
	
	Попытка
		НовыйСправочник.Записать();
	Исключение
		стрОшибки = ОписаниеОшибки();
		ОбщиеФункции.СообщитьТекст("Ошибка при создании нового справочника неисправности
										|" + стрОшибки);
		Возврат Неопределено
	КонецПопытки;
	
	Возврат НовыйСправочник.Ссылка;
	
КонецФункции

// ОБЩИЕ

Функция Завершен(Ссылка) Экспорт
	Возврат Ссылка.Стартован И Ссылка.Завершен;	
КонецФункции
Функция Стартован(Ссылка) Экспорт
	Возврат Ссылка.Стартован И НЕ Ссылка.Завершен;	
КонецФункции

Функция ЗадачаВыполнена(Ссылка) Экспорт
	Возврат Ссылка.Выполнена;	
КонецФункции

Функция ЗакрытьПроцесс(СсылкаПроцесс, стрОшибки = "") Экспорт
	
	// Закрывает процесс, при этом схема не действует, 
	// просто присваевается что задача завершена а заказ закрыт
	
	// Закроем задачи
	
	текЗадачи = ТекущиеЗадачи(СсылкаПроцесс, Ложь);
	Для Каждого текЗадача Из текЗадачи ЦИкл
		
		текЗадачаОбъект = текЗадача.ПолучитьОбъект();
		текЗадачаОбъект.Выполнена = Истина;
		
		Попытка
			текЗадачаОбъект.Записать();
		Исключение
			стрОшибки = ОписаниеОшибки();
			стрОшибки = "Ошибка при записи задачи
							|" + стрОшибки;
			Возврат Ложь;
		КонецПопытки;
		
	КонецЦикла;
	
	// Заркоем процесс
	
	ПроцессОбъект = СсылкаПроцесс.ПолучитьОбъект();
	ПроцессОбъект.Завершен = Истина;
	
	Попытка
		ПроцессОбъект.Записать();
	Исключение
		стрОшибки = ОписаниеОшибки();
		стрОшибки = "Ошибка при записи процесса
						|" + стрОшибки;
		Возврат Ложь;
	КонецПопытки;
	
	ВОзврат Истина;
	
КонецФункции

// КОММЕНТАРИИ

Функция ПолучитьТекстКомментариевHTML(Ссылка, ТекущаяДата = Неопределено) Экспорт
	
	// Возвращает текст html с комментариями по бизнес процессу
	//
	// Ссылка 		- ссылка на бизнес процесс
	// ТекущаяДата	- дата на которую хотят плучить комментарий, 
	// 					самая ближайшая задача с такой датой будет выделена особо
	
	Текст = 
	"<HTML><HEAD>
	|<META content=""text/html; charset=utf-8"" http-equiv=Content-Type>
	|<META name=GENERATOR content=""MSHTML 8.00.7600.16588""></HEAD>
	|<body bgcolor=""#FCFAEB"">";
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ Комментарий, Наименование, ДатаВыполнения, Исполнитель
	|ИЗ Задача.ЗадачаПользователю
	|ГДЕ БизнесПроцесс = &Ссылка
	|УПОРЯДОЧИТЬ ПО Ссылка УБЫВ
	|");
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Выполнение = Запрос.Выполнить();
	
	Если Выполнение.Пустой() Тогда
		Возврат "";
	КонецЕсли;
	
	Выборка = Выполнение.Выбрать();
	
	КолЗаписей 	= Выборка.Количество();
	Ном 		= 0;
	Пустой 		= Истина;
	
	Пока Выборка.Следующий() Цикл Ном = Ном + 1;
		
		Если пустаяСтрока(Выборка.Комментарий) Тогда
			КолЗаписей = КолЗаписей - 1;
			Продолжить;
		КонецЕсли;
		
		Если Ном = КолЗаписей Тогда
			
			ОбзацНачало = "<P><STRONG>";
			ОбзацКонец = "</STRONG></P>";
			
		Иначе
			
			ОбзацНачало = "<P>";
			ОбзацКонец = "</P>";
			
		КонецЕсли;
		
		Пустой = Ложь;
		
		Текст = Текст +
		
		"<font class=""Apple-style-span"" color=""#808080""><i><span class=""Apple-style-span"" style=""font-size: x-small;"">"
		+ Формат(Выборка.ДатаВыполнения,"ДЛФ=DT") + 
		"</span></i></font><i><span class=""Apple-style-span"" style=""font-size: x-small;"">"
		+ " " + КэшируемыеФункции.ПолучитьСокращеноеПредставлениеПользователя(Выборка.Исполнитель) +
		"<font class=""Apple-style-span"" color=""#CC99FF"">"
		+ " (" + Выборка.наименование + ")" + 
		"</font></span></i></p>
		
		|" + ОбзацНачало + Выборка.Комментарий + ОбзацКонец;
		
	КонецЦикла;
	
	Возврат ?(Пустой, "", Текст);
	
КонецФункции
Функция ПолучитьТекстКомментариевHTMLСФормойВвода(Ссылка, Комментарий, ТекущаяДата = Неопределено) Экспорт
	
	// Возвращает текст html с комментариями по бизнес процессу
	//
	// Ссылка 		- ссылка на бизнес процесс
	// ТекущаяДата	- дата на которую хотят плучить комментарий, 
	// 					самая ближайшая задача с такой датой будет выделена особо
	
	Текст = 
	"<HTML><HEAD>
	|<META content=""text/html; charset=utf-8"" http-equiv=Content-Type>
	|<META name=GENERATOR content=""MSHTML 8.00.7600.16588""></HEAD>
	|<body bgcolor=""#FCFAEB"">";
	
	Запрос = Новый Запрос("
	|ВЫБРАТь Комментарий, Наименование, ДатаВыполнения, Исполнитель
	|ИЗ Задача.ЗадачаПользователю
	|ГДЕ БизнесПроцесс = &Ссылка
	|УПОРЯДОЧИТЬ ПО Ссылка УБЫВ
	|");
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Выполнение = Запрос.Выполнить();
	
	Если Выполнение.Пустой() Тогда
		Перейти ~КонЭц;
	КонецЕсли;
	
	Выборка = Выполнение.Выбрать();
	
	КолЗаписей 	= Выборка.Количество();
	Ном 		= 0;
	Пустой 		= Истина;
	
	Пока Выборка.Следующий() Цикл Ном = Ном + 1;
		
		Если пустаяСтрока(Выборка.Комментарий) Тогда
			КолЗаписей = КолЗаписей - 1;
			Продолжить;
		КонецЕсли;
		
		Если Ном = КолЗаписей Тогда
			
			ОбзацНачало = "<P><STRONG>";
			ОбзацКонец = "</STRONG></P>";
			
		Иначе
			
			ОбзацНачало = "<P>";
			ОбзацКонец = "</P>";
			
		КонецЕсли;
		
		Пустой = Ложь;
		
		Текст = Текст +
		
		"<font class=""Apple-style-span"" color=""#808080""><i><span class=""Apple-style-span"" style=""font-size: x-small;"">"
		+ Формат(Выборка.ДатаВыполнения,"ДЛФ=DT") + 
		"</span></i></font><i><span class=""Apple-style-span"" style=""font-size: x-small;"">"
		+ " " + КэшируемыеФункции.ПолучитьСокращеноеПредставлениеПользователя(Выборка.Исполнитель) +
		"<font class=""Apple-style-span"" color=""#CC99FF"">"
		+ " (" + Выборка.наименование + ")" + 
		"</font></span></i></p>
		
		|" + ОбзацНачало + Выборка.Комментарий + ОбзацКонец;
		
	КонецЦикла;
	
	~КонЭц:
	Возврат Текст + 
	//"<textarea id="comment" name="commentForm" rows="20" cols="75"> 
	"<textarea id=""comment"" name=""commentForm"" rows=""5"" cols=""75"">" + Комментарий + "</textarea>";
	
КонецФункции

Функция ПолучитьТекстОтобранныхКомментариевHTML(МассивКомментариев, текКомментарий)
	
	// Возвращает текст html с комментариями по бизнес процессу
	//
	// МассивКомментариев - массив структур в которой
	// 		- ДатаВыполнения
	// 		- Исполнитель
	// 		- Заголовок
	// 		- Текст
	
	Текст = 
	"<HTML><HEAD>
	|<META content=""text/html; charset=utf-8"" http-equiv=Content-Type>
	|<META name=GENERATOR content=""MSHTML 8.00.7600.16588""></HEAD>
	|<body bgcolor=""#FCFAEB"">";
	
	Ном 		= 0;
	КолЗаписей 	= МассивКомментариев.Количество();
	
	Для Каждого Комментарий Из МассивКомментариев Цикл Ном = Ном + 1;
		
		Если Ном = КолЗаписей Тогда
			
			ОбзацНачало = "<P><STRONG>";
			ОбзацКонец = "</STRONG></P>";
			
		Иначе
			
			ОбзацНачало = "<P>";
			ОбзацКонец = "</P>";
			
		КонецЕсли;
		
		Пустой = Ложь;
		
		Текст = Текст +
		
		"<font class=""Apple-style-span"" color=""#808080""><i><span class=""Apple-style-span"" style=""font-size: x-small;"">"
		+ Формат(Комментарий.ДатаВыполнения,"ДЛФ=DT") + 
		"</span></i></font><i><span class=""Apple-style-span"" style=""font-size: x-small;"">"
		+ " " + КэшируемыеФункции.ПолучитьСокращеноеПредставлениеПользователя(Комментарий.Исполнитель) +
		"<font class=""Apple-style-span"" color=""#CC99FF"">"
		+ " (" + Комментарий.Заголовок + ")" + 
		"</font></span></i></p>
		
		|" + ОбзацНачало + Комментарий.Комментарий + ОбзацКонец;
		
	КонецЦикла;
	
	~КонЭц:
	Возврат Текст;
	
КонецФункции
Функция ПолучитьТекстОтобранныхКомментариевHTMLСФормойВвода(МассивКомментариев, текКомментарий) Экспорт
	
	// Возвращает текст html с комментариями по бизнес процессу
	//
	// МассивКомментариев - массив структур в которой
	// 		- ДатаВыполнения
	// 		- Исполнитель
	// 		- Заголовок
	// 		- Текст                               
	
	Возврат 
		ПолучитьТекстОтобранныхКомментариевHTML(МассивКомментариев, текКомментарий) + 
		"<form name=""commentForm""><p>Ваш комментарий: <br><textarea id = ""comment"" name=""commentText"" cols=""50"" rows=""10"" style=""border:1px solid #B3AC86; resize: both; width: 540px"">" + текКомментарий + "</textarea></p></form>";
КонецФункции
Функция ПолучитьТекстОтобранныхКомментариевHTMLБезФормыВвода(МассивКомментариев, текКомментарий) Экспорт
	
	// Возвращает текст html с комментариями по бизнес процессу
	//
	// МассивКомментариев - массив структур в которой
	// 		- ДатаВыполнения
	// 		- Исполнитель
	// 		- Заголовок
	// 		- Текст
	
	Возврат ПолучитьТекстОтобранныхКомментариевHTML(МассивКомментариев, текКомментарий); //+ "<br>" + текКомментарий;
	
КонецФункции


Функция ДобавитьПолеФормы(Элементы, Имя, ПутьКДанным, Родитель, ВидПоляФормы, Заголовок = Неопределено, ОбработчикПриНажатии = "", ТолькоПросмотр = Ложь)
      
	НовоеПоле = Элементы.Добавить(Имя, Тип("ПолеФормы"), Родитель);
	НовоеПоле.Вид = ВидПоляФормы;
	НовоеПоле.ПутьКДанным = ПутьКДанным;
	НовоеПоле.Заголовок = ?(ЗначениеЗаполнено(Заголовок), Заголовок, "");
	НовоеПоле.ТолькоПросмотр = ТолькоПросмотр;
	НовоеПоле.ПоложениеЗаголовка = ?(ЗначениеЗаполнено(Заголовок), ПоложениеЗаголовкаЭлементаФормы.Авто, ПоложениеЗаголовкаЭлементаФормы.Нет);
  
	Если ЗначениеЗаполнено(ОбработчикПриНажатии) Тогда
		НовоеПоле.УстановитьДействие("ПриНажатии", ОбработчикПриНажатии);
	КонецЕсли;
	
	Возврат НовоеПоле;
	
КонецФункции

Процедура ДобавитьРаботуСКомментариями(Форма) Экспорт
	
	// Реквизиты
	
	ТипСтрока 	= Новый ОписаниеТипов("Строка");
	РеквизитыКомментария = Новый Массив;
	РеквизитыКомментария.Добавить(Новый РеквизитФормы("ПоследнийКомментарий", ТипСтрока));
	
	Форма.ИзменитьРеквизиты(РеквизитыКомментария);

	НоваяКоманда = Форма.Команды.Добавить("КомандаПоказатьКомментарий");
	НоваяКоманда.Действие		= "КомандаПоказатьКомментарий";
    НоваяКоманда.Подсказка		= "Показать, скрыть комментарий";
	НоваяКоманда.Картинка		= БиблиотекаКартинок.Комментарий;
	НоваяКоманда.Отображение	= ОтображениеКнопки.Картинка;
	
	// Элементы
	
	Группа = Форма.Элементы.ГруппаКомментарий;
	Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;

  	Кнопка = Форма.Элементы.Добавить("КомандаПоказатьКомментарий", Тип("КнопкаФормы"), Группа);
	Кнопка.Заголовок 	= "";
	Кнопка.ИмяКоманды 	= "КомандаПоказатьКомментарий";
	Кнопка.Ширина = 3;
	Кнопка.Высота = 1;
	
	Поле = ДобавитьПолеФормы(Форма.Элементы, "ПоследнийКомментарий", "ПоследнийКомментарий", Группа, ВидПоляФормы.ПолеНадписи);
	Поле.АвтоМаксимальнаяШирина = Ложь;
		
КонецПроцедуры

//Функция ПолучитьМассивКомментариев(Ссылка) Экспорт
//	
//	Возврат БизнесПроцессы[Ссылка.Метаданные().Имя].ПолучитьМассивКомментариев(Ссылка);
//	
//КонецФункции
