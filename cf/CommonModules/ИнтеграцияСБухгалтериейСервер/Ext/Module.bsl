
#Область Получение_конкретных_значений

Функция ПолучитьСтруктуруПеременных() Экспорт
	
	Структура = Новый Структура;
	
	Структура.Вставить("ОрганизацияТулс", 		Справочники.Организации.НайтиПоКоду("000000004"));
	Структура.Вставить("ОрганизацияИнструмент", Справочники.Организации.НайтиПоКоду("000000003"));
	Структура.Вставить("КонтрагентИнструмент", 	Справочники.Контрагенты.НайтиПоКоду("000010907"));
	Структура.Вставить("КонтрагентТулс", 		Справочники.Контрагенты.НайтиПоКоду("000015139"));
	Структура.Вставить("НоменклатурнаяГруппа", 	Справочники.НоменклатурныеГруппы.НайтиПоКоду("000000001"));
	Структура.Вставить("ВалютаВзаиморасчетов", 	Справочники.Валюты.НайтиПоКоду("643"));
	Структура.Вставить("ТипОплатыНаличные", 	Перечисления.ТипОплаты.Наличные);
	Структура.Вставить("СтатьяРемонт",			Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("000000019"));
	Структура.Вставить("СтатьяОплатаПокупателя",Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателя);
	
	Структура.Вставить("ВидОперацииОплатаПоставщику", 			Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику);
	Структура.Вставить("ВидОперацииВозвратПокупателю", 			Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю);
	Структура.Вставить("ВидОперацииПеречислениеНалога", 		Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога);
	Структура.Вставить("ВидОперацииПрочееСписание", 			Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание);
	Структура.Вставить("ВидОперацииПеречислениеЗП", 			Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП);
	Структура.Вставить("ВидОперацииРасчетыПоКредитамИЗаймам", 	Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам);
	Структура.Вставить("ВидОперацииПеречислениеПодотчетномуЛицу",Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПодотчетномуЛицу);
	
	Структура.Вставить("ВидОперацииОплатаПокупателя", 				Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя);
	Структура.Вставить("ВидОперацииОплатаПоБанковскойКарте", 		Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПоБанковскойКарте);
	Структура.Вставить("ВидОперацииВозвратОтПоставщика", 			Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика);
	//Структура.Вставить("ВидОперацииПриобретениеИностраннойВалюты", 	Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты);
	Структура.Вставить("ВидОперацииРасчетыПоКредитамИЗаймам_Поступление", 	Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам);
	
	Структура.Вставить("ВидОперацииПКО_ОплатаПокупателя", 		Перечисления.ВидыОперацийПКО.ОплатаПокупателя);
	Структура.Вставить("ВидОперацииПКО_ВозвратОтПоставщика", 	Перечисления.ВидыОперацийПКО.ВозвратОтПоставщика);
	
	Структура.Вставить("ВидОперацииРКО_ВозвратПокупателю", 		Перечисления.ВидыОперацийРКО.ВозвратПокупателю);
	Структура.Вставить("ВидОперацииРКО_ОплатаПоставщику", 	Перечисления.ВидыОперацийРКО.ОплатаПоставщику);
	
	Структура.Вставить("ПеречислениеПодотчетномуЛицу", 	Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПодотчетномуЛицу);
	
	
	Возврат Структура;
	
КонецФункции

#КонецОбласти

Функция ЭтоГруппа(СсылкаСправочник) Экспорт
	
	Возврат СсылкаСправочник.ЭтоГруппа;
	
КонецФункции


Функция ОпределитьМенеджерОбъекта(МетОб)
	
	Если Метаданные.Справочники.Содержит(МетОб) Тогда
		
		Возврат "Справочники";
		
	ИначеЕсли Метаданные.Документы.Содержит(МетОб) Тогда
		
		Возврат "Документы";
	
	ИначеЕсли Метаданные.Перечисления.Содержит(МетОб) Тогда
		
		Возврат "Перечисления"; КонецЕсли;
	
КонецФункции

Функция ПолучитьСтруктуруПеречисления(СсылкаПеречисление) Экспорт
	
	Если СсылкаПеречисление.Пустая() Тогда Возврат Новый Структура("Ключ, Индекс", "", -1) КонецЕсли;
	
	МетаПереч 	= СсылкаПеречисление.Метаданные();
	Инд 		= Перечисления[МетаПереч.Имя].Индекс(СсылкаПеречисление);
	Ключ 		= Метаданные.Перечисления[МетаПереч.Имя].ЗначенияПеречисления.Получить(Инд).Имя;
	
	Возврат Новый Структура("Ключ, Индекс", Ключ, Инд);
	
КонецФункции

Функция ПолучитьСтруктуруОбъектаДляВыгрузки(Ссылка, ТолькоОсновные = Ложь) Экспорт
	
	МетОб = Ссылка.Метаданные();
	
	// Возвращает структуру объекта, чтобы была возможность прочитать на клиенте
	
	Структура = ?(ТолькоОсновные, Новый Структура("Ссылка", Ссылка), КонвертацияТипов.ПолучитьСтруктуруИзОбъекта(Ссылка, МетОб));
	
	// Добавим описание объекта
	
	Структура.Вставить("ДополнительныеСвойства", 
			Новый Структура("Менеджер, Имя", 		
						ОпределитьМенеджерОбъекта(МетОб), 
						МетОб.Имя));
	Возврат Структура;
	
КонецФункции

Функция ВыполнитьЗапрос(ТекстЗапроса, Параметры = Неопределено)
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Если Параметры <> Неопределено Тогда
		Для Каждого Элемент Из Параметры Цикл Запрос.УстановитьПараметр(Элемент.Ключ, Элемент.Значение) КонецЦикла; КонецЕсли;
		
	Попытка
		Возврат Запрос.Выполнить();
	Исключение
		стрОшибки = ОписаниеОшибки();
		ОбщиеФункции.СообщитьТекст("Ошибка выполнения запроса:
								|" + стрОшибки); 
		ВызватьИсключение; КонецПопытки;
	
КонецФункции
Функция ВычислитьМассивПоЗапросу(ТекстЗапроса, Параметры = Неопределено) Экспорт
	
	Возврат КонвертацияТипов.ПолучитьМассивИзТаблицыЗначений(ВыполнитьЗапрос(ТекстЗапроса, Параметры).Выгрузить());
	
КонецФункции
Функция ВычислитьОбъектПоЗапросу(ТекстЗапроса, Параметры = Неопределено) Экспорт
	
	Возврат КонвертацияТипов.ПолучитьСтруктуруИзСТрокиТаблицыЗначений(ВыполнитьЗапрос(ТекстЗапроса, Параметры).Выгрузить());
	
КонецФункции



Функция ЭтоБухгалтерия3(Connector)
	
	Возврат Лев(Connector.Метаданные().Версия, 2) = "3.";
	
КонецФункции

// ПАРАМЕТРЫ

Функция ПолучитьПараметрыПодключенияКБухгалтерииПоУмолчанию() Экспорт
	
	Возврат Константы.ПараметрыПодключенияКБухгалтерии.Получить();
	
КонецФункции
Функция ПолучитьПараметрыПодключенияКДругойБухгалтерииПоУмолчанию() Экспорт
	
	//Возврат "File=""E:\base\Промимпорт"";Usr=""Администратор"";Pwd=""123456"";";
	Возврат Константы.ПараметрыПодключенияКДругойБухгалтерии.Получить();
	
КонецФункции
Функция ПолучитьПараметрыПодключенияКТретейБухгалтерииПоУмолчанию() Экспорт
	
	Возврат Константы.ПараметрыПодключенияКТретейБухгалтерии.Получить();
	
КонецФункции

// ПЕРЕНОС

Функция ПолучитьОбъектВБухгалтерииИзБухгалтерии(ГУИД, Имя, ЭтоСправочник = Ложь, ЭтоДокумент = Ложь, стрОшибки = "") Экспорт
	
	// Получим коннектор
	
	Connector = КэшируемыеФункции.ИницилизироватьCOMConnectorБухгалтерии(,стрОшибки);
	Если Connector = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Менеджер = Неопределено;
	
	Если ЭтоСправочник Тогда
		Менеджер = Справочники[Имя];
	КонецЕсли;
	
	Если ЭтоДокумент Тогда
		Менеджер = Документы[Имя];
	КонецЕсли;
	
	Если Менеджер = Неопределено Тогда
		стрОшибки = "Не определено получение объекта данного типа в базе УТ";
		Возврат Неопределено;
	КонецЕсли;
	
	СсылкаНаОбъект = Менеджер.ПолучитьСсылку(Connector.NewObject("UUID", ГУИД));
	Объект = СсылкаНаОбъект.ПолучитьОбъект();
	
	Если Объект = Неопределено Тогда
		
		стрОшибки = "Объект в УТ не найден. Синхронизация информации по данному объекту не выполнена.";
		Возврат Неопределено;
		
	КонецЕсли;
		
	Возврат ПолучитьОбъектВБухгалтерии(СсылкаНаОбъект,Connector,,,, стрОшибки);
	
КонецФункции
			
Функция ПолучитьОбъектВБухгалтерии(
				СсылкаНаОбъект, 
				Connector 			= Неопределено, 
				ТипОбъекта 			= Неопределено, 
				МетаОб 				= Неопределено, 
				ПеренесенныеОбъекты = Неопределено, 
				стрОшибки 			= "") Экспорт
				
	// Возвращшает ссылку на сслку объекта в бхгалтерии
	//	
	
	// Определим кто это
	
	Если ПеренесенныеОбъекты = Неопределено Тогда
		
		ПеренесенныеОбъекты = Новый Соответствие;
		
	Иначе
		
		ОбъектБух = ПеренесенныеОбъекты[СсылкаНаОбъект];
		
		// Если он уже загружался тогда вернем
		Если ОбъектБух <> Неопределено Тогда
			Возврат ОбъектБух;
		КонецЕсли;
		
	КонецЕсли;
	
	// Получим коннектор
	
	Если Connector = Неопределено Тогда
		Connector = КэшируемыеФункции.ИницилизироватьCOMConnectorБухгалтерии(,стрОшибки);
		//Connector = КэшируемыеФункцииКлиент.ИницилизироватьCOMConnectorБухгалтерии(,стрОшибки);
		Если Connector = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	// Получим метаобъект
	
	Если МетаОб = Неопределено Тогда
		МетаОб = СсылкаНаОбъект.Метаданные();
	КонецЕсли;
	
	// получим тип
	
	Если ТипОбъекта = Неопределено Тогда
		ТипОбъекта = ТипЗнч(СсылкаНаОбъект);
	КонецЕсли;
	
	// Определим загрузчик
	
	ОбъектБух = Неопределено;
	Если Метаданные.Справочники.Содержит(МетаОб) Тогда
		
		Попытка
			ОбъектБух = Вычислить("Получить_Справочник" + МетаОб.Имя + "(Connector, СсылкаНаОбъект, ПеренесенныеОбъекты, стрОшибки)");
		Исключение
			
			опОшибки = ОписаниеОшибки();
			
			Если ПустаяСтрока(опОшибки) Тогда
				стрОшибки = "Не определен обработчик переноса справочника в бухгалтерию для объекта " + СсылкаНаОбъект + " по типу " + ТипОбъекта;
			Иначе
				стрОшибки = СокрЛП(стрОшибки + " " + опОшибки);
			КонецЕсли;
			
			Возврат Неопределено;
			
		КонецПопытки;
		
	ИначеЕсли Метаданные.Документы.Содержит(МетаОб) Тогда
		
		//Если МетаОб.Имя = "ПлатежноеПоручениеВходящее" Тогда
		//	Возврат Получить_ДокументПлатежноеПоручениеИсходящее(Connector, СсылкаНаОбъект, ПеренесенныеОбъекты, стрОшибки);
		//Иначе
			
			Попытка
				ОбъектБух = Вычислить("Получить_Документ" + МетаОб.Имя + "(Connector, СсылкаНаОбъект, ПеренесенныеОбъекты, стрОшибки)");
			Исключение
				
				опОшибки = ОписаниеОшибки();
				
				Если ПустаяСтрока(опОшибки) Тогда
					стрОшибки = "Не определен обработчик переноса документа в бухгалтерию для объекта " + СсылкаНаОбъект + " по типу " + ТипОбъекта;
				Иначе
					стрОшибки = СокрЛП(стрОшибки + " " + опОшибки);
				КонецЕсли;
				
				Возврат Неопределено;
				
			КонецПопытки;
		//КонецЕсли;
		
	ИначеЕсли Метаданные.Перечисления.Содержит(МетаОб) Тогда			
			
		Попытка
			ОбъектБух = Вычислить("Получить_Перечисление" + МетаОб.Имя + "(Connector, СсылкаНаОбъект, стрОшибки)");
		Исключение
			
			опОшибки = ОписаниеОшибки();
			
			Если ПустаяСтрока(опОшибки) Тогда
				стрОшибки = "Не определен обработчик переноса документа в бухгалтерию для объекта " + СсылкаНаОбъект + " по типу " + ТипОбъекта;
			Иначе
				стрОшибки = СокрЛП(стрОшибки + " " + опОшибки);
			КонецЕсли;
			
			Возврат Неопределено;
			
		КонецПопытки;
	
	Иначе
		
		стрОшибки = "Не определен обработчик переноса в бухгалтерию для объекта " + СсылкаНаОбъект + " по типу " + ТипОбъекта;
		Возврат Неопределено;
		
	КонецЕсли;
	
	Если ОбъектБух <> Неопределено Тогда
		ПеренесенныеОбъекты.Вставить(СсылкаНаОбъект, ОбъектБух);
	КонецЕсли;
	
	Возврат ОбъектБух;
	
КонецФункции
Функция ПолучитьОбъектБухПоГуиду(Connector, СсылкаНаОбъект, МенеджерБух, ЭтоСправочник = Ложь, ЭтоДокумент = Ложь, ЭтоПеречисление = Ложь, стрОшибки = "", СоздаватьНовый = Истина)
	
	СсылкаБух = МенеджерБух.ПолучитьСсылку(Connector.NewObject("UUID", XMLСтрока(СсылкаНаОбъект)));
	ОбъектБух = СсылкаБух.ПолучитьОбъект();
	
	Если ОбъектБух = Неопределено И СоздаватьНовый Тогда
		
		Если ЭтоСправочник Тогда		ОбъектБух = ?(СсылкаНаОбъект.ЭтоГруппа, МенеджерБух.СоздатьГруппу(), МенеджерБух.СоздатьЭлемент());
		ИначеЕсли ЭтоДокумент Тогда		ОбъектБух = МенеджерБух.СоздатьДокумент();
		Иначе
			стрОшибки = "Не определено получение объекта данного типа в базе БУХ";
			Возврат Неопределено; КонецЕсли;
		
		ОбъектБух.УстановитьСсылкуНового(СсылкаБух); КонецЕсли;
	
	Возврат ОбъектБух;
	
КонецФункции
Функция ПолучитьСправочникБухПоКоду(Connector, СсылкаНаОбъект, МенеджерБух, Код = "", стрОшибки = "", СоздаватьНовый = Истина)
		
	СсылкаБух = МенеджерБух.НайтиПоКоду(Код);
	
	// Возращаем объект, полученный по коду
	
	Если СсылкаБух <> Неопределено И НЕ СсылкаБух.Пустая() Тогда
		 Возврат СсылкаБух.ПолучитьОбъект(); КонецЕсли;
	 
	// Если по коду невозможно найти элемент в бухгалтерии, создаем новый с таким же гуидом
 
	Если СоздаватьНовый Тогда
		
		ОбъектБух = ?(СсылкаНаОбъект.ЭтоГруппа, МенеджерБух.СоздатьГруппу(), МенеджерБух.СоздатьЭлемент());
		
		СсылкаБух = МенеджерБух.ПолучитьСсылку(Connector.NewObject("UUID", XMLСтрока(СсылкаНаОбъект)));
		ОбъектБух.УстановитьСсылкуНового(СсылкаБух);
		
	КонецЕсли;
	
	Возврат ОбъектБух;
	
КонецФункции

Функция ЗаписатьСправочникБух(СправочникБух, ПометкаУдаления, СтрОшибки = "")
	
	// Проверим пометку удаления
	
	СправочникБух.ПометкаУдаления 		= ПометкаУдаления;
	СправочникБух.ОбменДанными.Загрузка = Истина;
	
	// Запишем
	
	Попытка
		СправочникБух.Записать();
	Исключение
		СтрОшибки = ОписаниеОшибки();
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат СправочникБух.Ссылка;
	
КонецФункции
Функция ЗаписатьДокументБух(ДокументБух, ПометкаУдаления, Проведен, Connector, СтрОшибки = "")
	
	ДокументБух.ПометкаУдаления = ПометкаУдаления;
	
	Если 	ДокументБух.Проведен И
			Не Проведен Тогда
			
		РежимЗаписи = Connector.РежимЗаписиДокумента.ОтменаПроведения;
		Загрузка = Ложь;
		
	//ИначеЕсли 	Не ДокументБух.Проведен И
	//			Проведен Тогда
	
	Иначе
	
		РежимЗаписи = Connector.РежимЗаписиДокумента.Проведение;
		Загрузка = Ложь;
		
	//Иначе
	//		
	//	РежимЗаписи = Connector.РежимЗаписиДокумента.Запись;
	//	Загрузка = Истина;
		
	КонецЕсли;
	
	//// Проверим на уникальность
	//
	//МетаДок = ДокументБух.Метаданные();
	//Номер	= ДокументБух.Номер;
	//
	//Запрос = Connector.NewObject("Запрос","
	//|ВЫБРАТЬ ИСТИНА ИЗ Документ." + МетаДок.Имя + "
	//|ГДЕ 	Номер = """ + Номер + """ И
	//|		НАЧАЛОПЕРИОДА(Дата, ГОД) = &Дата
	//|");
	//
	//Запрос.УстановитьПараметр("Дата", НачалоГода(ДокументБух.Дата));
	//
	//Если Не Запрос.Выполнить().Пустой() Тогда
	//	ДокументБух.УстановитьНовыйНомер("Err");
	//	ОбщиеФункции.СообщитьТекст("Обнаружен не уникальный номер документа
	//	|" + МетаДок.Синоним + " № " + Номер + "
	//	|Установлен новый номер: " + ДокументБух.Номер);
	//КонецЕсли;
	
	Попытка
		ДокументБух.ОбменДанными.Загрузка = Загрузка;
		ДокументБух.Записать(РежимЗаписи);
	Исключение
		СтрОшибки = ОписаниеОшибки();
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ДокументБух.Ссылка;
	
КонецФункции

Процедура ИзменитьРеквизит(ОбъектБух, ЗначениеТут, ИмяРеквизита, Изменился, Connector = Неопределено)
		
	Если Connector <> Неопределено Тогда
		
		Попытка
			Сравнение = Connector.NewObject("СравнениеЗначений");

			Если Сравнение.Сравнить(ОбъектБух[ИмяРеквизита], ЗначениеТут) Тогда
				
				Изменился = Истина;
				ОбъектБух[ИмяРеквизита] = ЗначениеТут;
				
            КонецЕсли;
		Исключение
		
		КонецПопытки;

	Иначе	
		Попытка	
			Если ОбъектБух[ИмяРеквизита] <> ЗначениеТут Тогда
				
				Изменился = Истина;
				ОбъектБух[ИмяРеквизита] = ЗначениеТут;
				
			КонецЕсли;
			
		Исключение
		
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполнитьОбъектПоСтрокеЗапроса(Connector, ОбъектБух, СтрокаЗапроса, КолонкиЗапроса, ПеренесенныеОбъекты, Изменился, стрОшибки = "")
	
	Для Каждого Колонка Из КолонкиЗапроса Цикл
		
		Имя	= Колонка.Имя;
		Если Имя = "Ссылка" Тогда Продолжить Иначе
			
			Значение = СтрокаЗапроса[Имя];
		 	Если Значение <> Неопределено Тогда
				
				ТипЗнч = ТипЗнч(Значение);
				
				Если ТипЗнч = Тип("Null") Тогда
					
				ИначеЕсли ТипЗнч = Тип("ТаблицаЗначений") Тогда
					
					ТаблицаБух 		= ОбъектБух[Имя];
					КолонкиТаблицы	= Значение.Колонки;
					
					// нужно свернуть таблицу перед использованием, так как есть поля которых нет в приемнике 
					// из за этого строки могут не попадать и дублироваться при поиске
					
					//стрКолонкиИзмерения = "";
					//стрКолонкиРесурсы 	= "";
					//ТипЧисло 			= Тип("Число");
					//
					//Для Каждого Колонка Из КолонкиТаблицы Цикл
					//	
					//	// Исключения
					//	
					//	Если 	ВРЕГ(Колонка.Имя) = ВРЕГ("Цена") Или
					//			ВРЕГ(Колонка.Имя) = ВРЕГ("Коэффициент") Или
					//			ВРЕГ(Колонка.Имя) = ВРЕГ("ПроцентРучнойСкидки") Тогда
					//		
					//		стрКолонкиИзмерения = стрКолонкиИзмерения + ?(стрКолонкиИзмерения = "","",",") + Колонка.Имя;
					//		
					//	Иначе
					//		
					//		Если Колонка.ТипЗначения.СодержитТип(ТипЧисло) Тогда
					//			
					//			стрКолонкиРесурсы = стрКолонкиРесурсы + ?(стрКолонкиРесурсы = "","",",") + Колонка.Имя;
					//		Иначе
					//			стрКолонкиИзмерения = стрКолонкиИзмерения + ?(стрКолонкиИзмерения = "","",",") + Колонка.Имя;
					//		КонецЕсли;
					//	КонецЕсли;
					//	
					//КонецЦикла;
					//
					//ТаблИсточника = Значение.Скопировать();
					ТаблИсточника = Значение;
					//ТаблИсточника.Свернуть(стрКолонкиИзмерения, стрКолонкиРесурсы);
					
					Если ТаблИсточника.Количество() <> ТаблицаБух.Количество() Тогда
						
						// поменялось количество значит загружаем таблицу целиком
						
						ОбъектБух[Имя].Очистить();
						Изменился = Истина;
						
						Для Каждого Строка Из ТаблИсточника Цикл
							Если Не ЗаполнитьОбъектПоСтрокеЗапроса(Connector, ОбъектБух[Имя].Добавить(), Строка, КолонкиТаблицы, ПеренесенныеОбъекты, Изменился, стрОшибки) Тогда
								Возврат Ложь;
							КонецЕсли;
						КонецЦикла;
						
					Иначе
						
						// количество не поменялось значит строки считаются одинаковыми нужно только перепроверить их состав
						
						Инд = -1;
						Для Каждого Строка Из ТаблИсточника Цикл Инд = Инд + 1; 
						
							Если Не ЗаполнитьОбъектПоСтрокеЗапроса(Connector, ОбъектБух[Имя].Получить(Инд), Строка, КолонкиТаблицы, ПеренесенныеОбъекты, Изменился, стрОшибки) Тогда
								Возврат Ложь;
							КонецЕсли;
						
						КонецЦикла;
					КонецЕсли;
					
				ИначеЕсли 	ТипЗнч = Тип("Число") 	Или
							ТипЗнч = Тип("Строка") 	Или
							ТипЗнч = Тип("Дата") 	Или 
							ТипЗнч = Тип("Булево") 	Тогда
							
					ИзменитьРеквизит(ОбъектБух, Значение, Имя, Изменился);
							
				ИначеЕсли Не Значение.Пустая() Тогда
					
					Ссылка81 = ПолучитьОбъектВБухгалтерии(Значение, Connector, ТипЗнч,, ПеренесенныеОбъекты, стрОшибки);
					Если Ссылка81 = Неопределено Тогда
						Возврат Ложь;
					КонецЕсли;		                              //.УникальныйИдентификатор()
					
					ИзменитьРеквизит(ОбъектБух, Ссылка81, Имя, Изменился, Connector);
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;			
	КонецЦикла;
	
	Возврат Истина;
		 	
КонецФункции

// ЧАСТНЫЕ СЛУЧАИ

// Справочники

Функция Получить_СправочникОрганизации(Connector, СсылкаНаОбъект, ПеренесенныеОбъекты, стрОшибки = "")
	
 	ОбъектБух = ПолучитьОбъектБухПоГуиду(Connector, СсылкаНаОбъект, Connector.Справочники.Организации, Истина,,,стрОшибки);
	Если ОбъектБух = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 
	|	Наименование, 
	|	Код
	|ИЗ
	|	Справочник.Организации
	|ГДЕ
	|	Ссылка = &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	
	Таблица 	= Запрос.Выполнить().Выгрузить();
	Колонки 	= Таблица.Колонки;
	Изменился 	= Ложь;
	
	Для Каждого Строка Из Таблица Цикл
		
		Если Не ЗаполнитьОбъектПоСтрокеЗапроса(Connector, ОбъектБух, Строка, Колонки, ПеренесенныеОбъекты, Изменился, стрОшибки) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЦикла;
		
	Если Изменился Тогда
		Возврат ЗаписатьСправочникБух(ОбъектБух, СсылкаНаОбъект.ПометкаУдаления, стрОшибки);
	Иначе
		Возврат ОбъектБух.Ссылка;
	КонецЕсли;
	
КонецФункции
Функция Получить_СправочникКонтрагенты(Connector, СсылкаНаОбъект, ПеренесенныеОбъекты, стрОшибки = "")
	
 	ОбъектБух = ПолучитьОбъектБухПоГуиду(Connector, СсылкаНаОбъект, Connector.Справочники.Контрагенты, Истина,,,стрОшибки);
	Если ОбъектБух = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 
	|	Наименование, 
	|	Код"  + ?(СсылкаНаОбъект.ЭтоГруппа,"",",
	
	// для элемента
	
	|	ИНН,
	|	КПП,
	|	КодПоОКПО
	|	Комментарий,
	|	НаименованиеПолное") + "
	|ИЗ
	|	Справочник.Контрагенты
	|ГДЕ
	|	Ссылка = &Ссылка
	|");

	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	
	Таблица 	= Запрос.Выполнить().Выгрузить();
	Колонки 	= Таблица.Колонки;
	Изменился 	= Ложь;
	
	Для Каждого Строка Из Таблица Цикл
		
		Если Не ЗаполнитьОбъектПоСтрокеЗапроса(Connector, ОбъектБух, Строка, Колонки, ПеренесенныеОбъекты, Изменился, стрОшибки) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Изменился Тогда
		СсылкаБух =  ЗаписатьСправочникБух(ОбъектБух, СсылкаНаОбъект.ПометкаУдаления, стрОшибки);
	Иначе
		СсылкаБух =  ОбъектБух.Ссылка;
	КонецЕсли;
	
	Если НЕ ПеренестиКонтактнуюИнформациюКонтрагента(Connector, СсылкаБух, СсылкаНаОбъект, ПеренесенныеОбъекты, стрОшибки = "") Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	Возврат СсылкаБух;
	
КонецФункции
Функция Получить_СправочникПартнеры(Connector, СсылкаНаОбъект, ПеренесенныеОбъекты, стрОшибки = "")
	
	// Партнер возвращается как контрагент
	
 	ОбъектБух = ПолучитьОбъектБухПоГуиду(Connector, СсылкаНаОбъект, Connector.Справочники.Контрагенты, Истина,,,стрОшибки);
	Если ОбъектБух = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Наименование , 
	|	Код"  + ?(СсылкаНаОбъект.ЭтоГруппа,"",",
	
	// для элемента
	
	|	ИНН,
	|	КПП,
	|	КодПоОКПО,
	|	Комментарий,
	|	НаименованиеПолное
	|") + "
	|
	|ИЗ
	|	Справочник.Контрагенты
	|ГДЕ
	|	Партнер = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПоУмолчанию Убыв
	|");

	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	
	Таблица 	= Запрос.Выполнить().Выгрузить();
	Колонки 	= Таблица.Колонки;
	Изменился 	= Ложь;
	
	Для Каждого Строка Из Таблица Цикл
		
		Если Не ЗаполнитьОбъектПоСтрокеЗапроса(Connector, ОбъектБух, Строка, Колонки, ПеренесенныеОбъекты, Изменился, стрОшибки) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Изменился Тогда
		Возврат  ЗаписатьСправочникБух(ОбъектБух, СсылкаНаОбъект.ПометкаУдаления, стрОшибки);
	Иначе
		Возврат  ОбъектБух.Ссылка;
	КонецЕсли;
		
КонецФункции

Функция Получить_СправочникСклады(Connector, СсылкаНаОбъект, ПеренесенныеОбъекты, стрОшибки = "")
	
 	ОбъектБух = ПолучитьОбъектБухПоГуиду(Connector, СсылкаНаОбъект, Connector.Справочники.Склады, Истина,,,стрОшибки);
	Если ОбъектБух = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 
	|	Наименование, 
	|	Код
	|ИЗ
	|	Справочник.Склады
	|ГДЕ
	|	Ссылка = &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	
	Таблица 	= Запрос.Выполнить().Выгрузить();
	Колонки 	= Таблица.Колонки;
	Изменился 	= Ложь;
	
	Для Каждого Строка Из Таблица Цикл
		
		Если Не ЗаполнитьОбъектПоСтрокеЗапроса(Connector, ОбъектБух, Строка, Колонки, ПеренесенныеОбъекты, Изменился, стрОшибки) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЦикла;
		
	Если Изменился Тогда
		Возврат ЗаписатьСправочникБух(ОбъектБух, СсылкаНаОбъект.ПометкаУдаления, стрОшибки);
	Иначе
		Возврат ОбъектБух.Ссылка;
	КонецЕсли;
	
КонецФункции
Функция Получить_СправочникФизическиеЛица(Connector, СсылкаНаОбъект, ПеренесенныеОбъекты, стрОшибки = "")
	
 	ОбъектБух = ПолучитьОбъектБухПоГуиду(Connector, СсылкаНаОбъект, Connector.Справочники.ФизическиеЛица, Истина,,,стрОшибки);
	Если ОбъектБух = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 
	|	Наименование,
	|	ДатаРождения,
	|	Пол
	|ИЗ
	|	Справочник.ФизическиеЛица
	|ГДЕ
	|	Ссылка = &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	
	Таблица 	= Запрос.Выполнить().Выгрузить();
	Колонки 	= Таблица.Колонки;
	Изменился 	= Ложь;
	
	Для Каждого Строка Из Таблица Цикл
		
		Если Не ЗаполнитьОбъектПоСтрокеЗапроса(Connector, ОбъектБух, Строка, Колонки, ПеренесенныеОбъекты, Изменился, стрОшибки) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЦикла;
		
	Если Изменился Тогда
		Возврат ЗаписатьСправочникБух(ОбъектБух, СсылкаНаОбъект.ПометкаУдаления, стрОшибки);
	Иначе
		Возврат ОбъектБух.Ссылка;
	КонецЕсли;
	
КонецФункции

Функция Получить_СправочникТипыЦен(Connector, СсылкаНаОбъект, ПеренесенныеОбъекты, стрОшибки = "")
	
 	ОбъектБух = ПолучитьОбъектБухПоГуиду(Connector, СсылкаНаОбъект, Connector.Справочники.ТипыЦенНоменклатуры, Истина,,,стрОшибки);
	Если ОбъектБух = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 
	|	Наименование, 
	|	Код
	|ИЗ
	|	Справочник.ТипыЦен
	|ГДЕ
	|	Ссылка = &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	
	Таблица 	= Запрос.Выполнить().Выгрузить();
	Колонки 	= Таблица.Колонки;
	Изменился 	= Ложь;
	
	Для Каждого Строка Из Таблица Цикл
		
		Если Не ЗаполнитьОбъектПоСтрокеЗапроса(Connector, ОбъектБух, Строка, Колонки, ПеренесенныеОбъекты, Изменился, стрОшибки) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЦикла;
		
	Если Изменился Тогда
		Возврат ЗаписатьСправочникБух(ОбъектБух, СсылкаНаОбъект.ПометкаУдаления, стрОшибки);
	Иначе
		Возврат ОбъектБух.Ссылка;
	КонецЕсли;
	
КонецФункции

Функция Получить_СправочникСтраны(Connector, СсылкаНаОбъект, ПеренесенныеОбъекты, стрОшибки = "")
	
	ОбъектБух = ПолучитьОбъектБухПоГуиду(Connector, СсылкаНаОбъект, Connector.Справочники.КлассификаторСтранМира, Истина,,,стрОшибки);
	Если ОбъектБух = Неопределено Тогда
			Возврат Неопределено; КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 
	|	Наименование, 
	|	Код
	|ИЗ
	|	Справочник.Страны
	|ГДЕ
	|	Ссылка = &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	
	Таблица 	= Запрос.Выполнить().Выгрузить();
	Колонки 	= Таблица.Колонки;
	Изменился 	= Ложь;
	
	Для Каждого Строка Из Таблица Цикл
		
		Если Не ЗаполнитьОбъектПоСтрокеЗапроса(Connector, ОбъектБух, Строка, Колонки, ПеренесенныеОбъекты, Изменился, стрОшибки) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЦикла;
		
	Если Изменился Тогда
		Возврат ЗаписатьСправочникБух(ОбъектБух, СсылкаНаОбъект.ПометкаУдаления, стрОшибки);
	Иначе
		Возврат ОбъектБух.Ссылка;
	КонецЕсли;
	
КонецФункции

Функция Получить_СправочникНомераГТД(Connector, СсылкаНаОбъект, ПеренесенныеОбъекты, стрОшибки = "")
	
 	ОбъектБух = ПолучитьОбъектБухПоГуиду(Connector, СсылкаНаОбъект, Connector.Справочники.НомераГТД, Истина,,,стрОшибки);
	Если ОбъектБух = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 
	|	Код,
	|	Комментарий
	|ИЗ
	|	Справочник.НомераГТД
	|ГДЕ
	|	Ссылка = &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	
	Таблица 	= Запрос.Выполнить().Выгрузить();
	Колонки 	= Таблица.Колонки;
	Изменился 	= Ложь;
	
	Для Каждого Строка Из Таблица Цикл
		
		Если Не ЗаполнитьОбъектПоСтрокеЗапроса(Connector, ОбъектБух, Строка, Колонки, ПеренесенныеОбъекты, Изменился, стрОшибки) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЦикла;
		
	Если Изменился Тогда
		Возврат ЗаписатьСправочникБух(ОбъектБух, СсылкаНаОбъект.ПометкаУдаления, стрОшибки);
	Иначе
		Возврат ОбъектБух.Ссылка;
	КонецЕсли;
	
КонецФункции

Функция Получить_СправочникВалюты(Connector, СсылкаНаОбъект, ПеренесенныеОбъекты, стрОшибки = "")
	
 	ОбъектБух = ПолучитьОбъектБухПоГуиду(Connector, СсылкаНаОбъект, Connector.Справочники.Валюты, Истина,,,стрОшибки);
	Если ОбъектБух = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 
	|	Наименование, 
	|	Код
	|ИЗ
	|	Справочник.Валюты
	|ГДЕ
	|	Ссылка = &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	
	Таблица 	= Запрос.Выполнить().Выгрузить();
	Колонки 	= Таблица.Колонки;
	Изменился 	= Ложь;
	
	Для Каждого Строка Из Таблица Цикл
		
		Если Не ЗаполнитьОбъектПоСтрокеЗапроса(Connector, ОбъектБух, Строка, Колонки, ПеренесенныеОбъекты, Изменился, стрОшибки) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЦикла;
		
	Если Изменился Тогда
		Возврат ЗаписатьСправочникБух(ОбъектБух, СсылкаНаОбъект.ПометкаУдаления, стрОшибки);
	Иначе
		Возврат ОбъектБух.Ссылка;
	КонецЕсли;
	
КонецФункции
Функция Получить_СправочникСтатьиДвиженияДенежныхСредств(Connector, СсылкаНаОбъект, ПеренесенныеОбъекты, стрОшибки = "")
	
 	ОбъектБух = ПолучитьОбъектБухПоГуиду(Connector, СсылкаНаОбъект, Connector.Справочники.СтатьиДвиженияДенежныхСредств, Истина,,,стрОшибки);
	Если ОбъектБух = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 
	|	Наименование, 
	|	Код
	|ИЗ
	|	Справочник.СтатьиДвиженияДенежныхСредств
	|ГДЕ
	|	Ссылка = &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	
	Таблица 	= Запрос.Выполнить().Выгрузить();
	Колонки 	= Таблица.Колонки;
	Изменился 	= Ложь;
	
	Для Каждого Строка Из Таблица Цикл
		
		Если Не ЗаполнитьОбъектПоСтрокеЗапроса(Connector, ОбъектБух, Строка, Колонки, ПеренесенныеОбъекты, Изменился, стрОшибки) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЦикла;
		
	Если Изменился Тогда
		Возврат ЗаписатьСправочникБух(ОбъектБух, СсылкаНаОбъект.ПометкаУдаления, стрОшибки);
	Иначе
		Возврат ОбъектБух.Ссылка;
	КонецЕсли;
	
КонецФункции

Функция Получить_СправочникНоменклатура(Connector, СсылкаНаОбъект, ПеренесенныеОбъекты, стрОшибки = "", СоздаватьНовый = Истина) Экспорт
	
	ОбъектБух = ПолучитьОбъектБухПоГуиду(Connector, СсылкаНаОбъект, Connector.Справочники.Номенклатура, Истина,,,стрОшибки, СоздаватьНовый);
	Если ОбъектБух = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 
	|	Родитель, 
	|	Наименование,
	|	НаименованиеПолное," 	+ ?(ЭтоБухгалтерия3(Connector),"","	
	|	СтранаПроисхождения,	") + "
	|	Код,
	|	Артикул,
	|	НомерГТД"  + ?(СсылкаНаОбъект.ЭтоГруппа,"",",
	
	// для элемента
	
	|	СтавкаНДС
	|") + ?(СсылкаНаОбъект.ЭтоГруппа,"",",
	
	|	Вес
	|") + "
	|ИЗ
	|	Справочник.Номенклатура
	|ГДЕ
	|	Ссылка = &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	
	Таблица 	= Запрос.Выполнить().Выгрузить();
	Колонки 	= Таблица.Колонки;
	Изменился 	= Ложь;
	
	Для Каждого Строка Из Таблица Цикл
		
		Строка.Код = Лев(Строка.Код, 11);
		
		Если Не ЗаполнитьОбъектПоСтрокеЗапроса(Connector, ОбъектБух, Строка, Колонки, ПеренесенныеОбъекты, Изменился, стрОшибки) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если НЕ СсылкаНаОбъект.ЭтоГруппа Тогда
			                                                                                 
			ЕдИзмерения81 	= Connector.Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(СсылкаНаОбъект.ЕдиницаИзмерения.Код);
			Сравнение 		= Connector.NewObject("СравнениеЗначений");
			
			// Попытаемся в 2.0
			
			Попытка
				Если Сравнение.Сравнить(ОбъектБух.БазоваяЕдиницаИзмерения, ЕдИзмерения81) Тогда
					
					Изменился = Истина; ОбъектБух.БазоваяЕдиницаИзмерения = ЕдИзмерения81; КонецЕсли; Исключение 
			
				// Попытаемся в 3.0
				
				Попытка
					Если Сравнение.Сравнить(ОбъектБух.ЕдиницаИзмерения, ЕдИзмерения81) Тогда
						
						Изменился = Истина; ОбъектБух.ЕдиницаИзмерения = ЕдИзмерения81; КонецЕсли; Исключение КонецПопытки; КонецПопытки;
			
		КонецЕсли;	
			
	КонецЦикла;
		
	Если Изменился Тогда
		Возврат ЗаписатьСправочникБух(ОбъектБух, СсылкаНаОбъект.ПометкаУдаления, стрОшибки);
	Иначе
		Возврат ОбъектБух.Ссылка;
	КонецЕсли;
	
КонецФункции

Функция Получить_СправочникБанковскиеСчета(Connector, СсылкаНаОбъект, ПеренесенныеОбъекты, стрОшибки = "", Владелец = Неопределено)
	
	ОбъектБух = ПолучитьОбъектБухПоГуиду(Connector, СсылкаНаОбъект, Connector.Справочники.БанковскиеСчета, Истина,,,стрОшибки);
	Если ОбъектБух = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 
	|	НомерСчета,
	|	Наименование,
	|	Банк,
	|	Владелец,
	|	БанкДляРасчетов,
	|	ТекстКорреспондента,
	|	ТекстНазначения,
	|	""Расчетный"" ВидСчета,
	|	ВалютаДенежныхСредств,
	|	НомерИДатаРазрешения,
	|	ДатаОткрытия,
	|	ДатаЗакрытия,
	|	МесяцПрописью,
	|	СуммаБезКопеек
	|ИЗ
	|	Справочник.БанковскиеСчета
	|ГДЕ
	|	Ссылка = &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	
	Таблица 	= Запрос.Выполнить().Выгрузить();
	Колонки 	= Таблица.Колонки;
	Изменился 	= Ложь;
	
	Для Каждого Строка Из Таблица Цикл
		
		Если Не ЗаполнитьОбъектПоСтрокеЗапроса(Connector, ОбъектБух, Строка, Колонки, ПеренесенныеОбъекты, Изменился, стрОшибки) Тогда
			Возврат Неопределено;
		КонецЕсли;
			
	КонецЦикла;
		
	Если Изменился Тогда
		Возврат ЗаписатьСправочникБух(ОбъектБух, СсылкаНаОбъект.ПометкаУдаления, стрОшибки);
	Иначе
		Возврат ОбъектБух.Ссылка;
	КонецЕсли;
	
КонецФункции
Функция Получить_СправочникБанки(Connector, СсылкаНаОбъект, ПеренесенныеОбъекты, стрОшибки = "")
	
	ОбъектБух = ПолучитьОбъектБухПоГуиду(Connector, СсылкаНаОбъект, Connector.Справочники.Банки, Истина,,,стрОшибки);
	Если ОбъектБух = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Код,
	|	Наименование,
	|	КоррСчет,
	|	Город, 
	|	Адрес,
	|	Телефоны
	|ИЗ
	|	Справочник.Банки
	|ГДЕ
	|	Ссылка = &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	
	Таблица 	= Запрос.Выполнить().Выгрузить();
	Колонки 	= Таблица.Колонки;
	Изменился 	= Ложь;
	
	Для Каждого Строка Из Таблица Цикл
		
		Если Не ЗаполнитьОбъектПоСтрокеЗапроса(Connector, ОбъектБух, Строка, Колонки, ПеренесенныеОбъекты, Изменился, стрОшибки) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЦикла;
		
	Если Изменился Тогда
		Возврат ЗаписатьСправочникБух(ОбъектБух, СсылкаНаОбъект.ПометкаУдаления, стрОшибки);
	Иначе
		Возврат ОбъектБух.Ссылка;
	КонецЕсли;
	
КонецФункции

Функция Получить_СправочникВидыКонтактнойИнформации(Connector, СсылкаНаОбъект, ПеренесенныеОбъекты, стрОшибки = "", Код = "")
	
	ОбъектБух = ПолучитьОбъектБухПоГуиду(Connector, СсылкаНаОбъект, Connector.Справочники.ВидыКонтактнойИнформации, Истина,,,стрОшибки, Ложь);
	Если ОбъектБух = Неопределено Тогда
		
		ОбъектБух = ПолучитьСправочникБухПоКоду(Connector, СсылкаНаОбъект, Connector.Справочники.ВидыКонтактнойИнформации, ?(Код = "",  СсылкаНаОбъект.Код, Код) ,стрОшибки);
		Если ОбъектБух = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;

	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Наименование,
	|	Код
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации
	|ГДЕ
	|	Ссылка = &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	
	Таблица 	= Запрос.Выполнить().Выгрузить();
	Колонки 	= Таблица.Колонки;
	Изменился 	= Ложь;
	
	Для Каждого Строка Из Таблица Цикл
		
		Если Не ЗаполнитьОбъектПоСтрокеЗапроса(Connector, ОбъектБух, Строка, Колонки, ПеренесенныеОбъекты, Изменился, стрОшибки) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ИзменитьРеквизит(ОбъектБух, Получить_ПеречислениеТипКонтактнойИнформации(Connector, СсылкаНаОбъект, стрОшибки, ПеренесенныеОбъекты), "Тип", Изменился);
		
	КонецЦикла;
		
	Если Изменился Тогда
		Возврат ЗаписатьСправочникБух(ОбъектБух, СсылкаНаОбъект.ПометкаУдаления, стрОшибки);
	Иначе
		Возврат ОбъектБух.Ссылка;
	КонецЕсли;

КонецФункции

// Документы

Функция Получить_ДокументКомплектация(Connector, СсылкаНаОбъект, ПеренесенныеОбъекты, стрОшибки = "")
	
	ОбъектБух = ПолучитьОбъектБухПоГуиду(Connector, СсылкаНаОбъект, Connector.Документы.КомплектацияНоменклатуры,,Истина,,стрОшибки);
	Если ОбъектБух = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СубконтоТовар81 = ПолучитьСубконтоТовары81(Connector);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 
	|	ВЫБОР КОГДА ВходящийНомер = """" ТОГДА Номер ИНАЧЕ ВходящийНомер КОНЕЦ Номер, 
	|	Дата,
	|	Номенклатура,
	|	Количество,
	|	Операция ВидОперации, 
	|	Организация,
	|	Склад,
	|	Комментарий,
	|	Товары.(
	|		Номенклатура,
	|		Количество,
	|		1 ДоляСтоимости
	|			) КАК Комплектующие
	|ИЗ
	|	Документ.Комплектация
	|ГДЕ
	|	Ссылка = &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	
	Таблица 	= Запрос.Выполнить().Выгрузить();
	Колонки 	= Таблица.Колонки;
	Изменился 	= Ложь;
	
	Для Каждого Строка Из Таблица Цикл
		
		Если Не ЗаполнитьОбъектПоСтрокеЗапроса(Connector, ОбъектБух, Строка, Колонки, ПеренесенныеОбъекты, Изменился, стрОшибки) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		// Валюты
		
		//ИзменитьРеквизит(ОбъектБух, 1, "КратностьВзаиморасчетов", 	Изменился);
		//ИзменитьРеквизит(ОбъектБух, 1, "КурсВзаиморасчетов", 		Изменился);
		
		// Флаги
														   
		ИзменитьРеквизит(ОбъектБух, Connector.Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять , "НДСвСтоимостиТоваров", 	Изменился);
		//ИзменитьРеквизит(ОбъектБух, Истина , "УчитыватьНДС", 		Изменился);
		//ИзменитьРеквизит(ОбъектБух, Строка.СуммаВключаетНДС , "СуммаВключаетНДС", 	Изменился);
		
		// Счета
		
		ИзменитьРеквизит(ОбъектБух, Connector.ПланыСчетов.Хозрасчетный.ТоварыНаСкладах ,			 	"СчетУчета", 				Изменился);	// 41.01
		ИзменитьРеквизит(ОбъектБух, Connector.ПланыСчетов.Хозрасчетный.Продажи_НДС ,			 	"СчетСписанияНДС", 				Изменился);	// 41.01
		//ИзменитьРеквизит(ОбъектБух, Connector.ПланыСчетов.Хозрасчетный.РасчетыСПокупателями , 			"СчетУчетаРасчетовСКонтрагентом", 	Изменился);	// 62.01
		//ИзменитьРеквизит(ОбъектБух, Connector.ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным , 	"СчетУчетаРасчетовПоАвансам", 		Изменился);	// 62.02
		
		Для Каждого Строка81 Из ОбъектБух.Комплектующие Цикл
			
			ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.ТоварыНаСкладах ,			 	"СчетУчета", 				Изменился);	// 41.01
			//ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД , 				"СчетДоходов", 				Изменился);	// 90.01.2
			//ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД , 	"СчетРасходов", 			Изменился);	// 90.02.1
			//ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.Продажи_НДС , 				"СчетУчетаНДСПоРеализации", Изменился);	// 90.03
			//ИзменитьРеквизит(Строка81, СубконтоТовар81 ,												"Субконто", 				Изменился);	// Товар
			
		КонецЦикла;
		
	КонецЦикла;
		
	Если Изменился Тогда
		Возврат ЗаписатьДокументБух(ОбъектБух, СсылкаНаОбъект.ПометкаУдаления, СсылкаНаОбъект.Проведен, Connector, стрОшибки);
	Иначе
		Возврат ОбъектБух.Ссылка;
	КонецЕсли;
	
КонецФункции

Функция Получить_ДокументРеализацияТоваров(Connector, СсылкаНаОбъект, ПеренесенныеОбъекты, стрОшибки = "")
	
	ОбъектБух = ПолучитьОбъектБухПоГуиду(Connector, СсылкаНаОбъект, Connector.Документы.РеализацияТоваровУслуг,,Истина,,стрОшибки);
	Если ОбъектБух = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СубконтоТовар81 = ПолучитьСубконтоТовары81(Connector);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 
	|	Ссылка,
	|	ВЫБОР КОГДА ВходящийНомер = """" ТОГДА Номер ИНАЧЕ ВходящийНомер КОНЕЦ Номер, 
	|	Дата,
	|	Организация,
	|	ВЫБОР КОГДА Партнер.ЭтоКонтрагентБухгалтерии ТОГДА Партнер ИНАЧЕ Контрагент КОНЕЦ Контрагент,
	|	ВЫБОР КОГДА Партнер.ЭтоКонтрагентБухгалтерии ТОГДА Контрагент ИНАЧЕ НЕОПРЕДЕЛЕНО КОНЕЦ ДоговорКонтрагента,
	|	Склад,
	|	ТипЦен,
	|	Валюта 			КАК ВалютаДокумента,
	|	Сумма СуммаДокумента,
	|	СуммаВключаетНДС,
	|	ВЫБОР КОГДА Заказ Ссылка Документ.ЗаказНаряд ТОГДА
	|		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ	ЭтоРемонт,
	|	ВЫБОР КОГДА Заказ Ссылка Документ.ЗаказНаряд ТОГДА
	|		Заказ.Услуга
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ			Услуга,
	|	Комментарий,
	|	Товары.(
	|		Номенклатура,
	|		Количество,
	|		1 Коэффициент,
	|		Цена,
	|		Сумма,
	|		СтавкаНДС,
	|		СуммаНДС
	|			) КАК Товары
	|ИЗ
	|	Документ.РеализацияТоваров
	|ГДЕ
	|	Ссылка = &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	
	Таблица 	= Запрос.Выполнить().Выгрузить();
	Колонки 	= Таблица.Колонки;
	Изменился 	= Ложь;
	
	Для Каждого Строка Из Таблица Цикл
		
		Если Не ЗаполнитьОбъектПоСтрокеЗапроса(Connector, ОбъектБух, Строка, Колонки, ПеренесенныеОбъекты, Изменился, стрОшибки) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		// Операция
		
		ИзменитьРеквизит(ОбъектБух, Connector.Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия, "ВидОперации", 	Изменился);
		
		// Валюты
		
		ИзменитьРеквизит(ОбъектБух, 1, "КратностьВзаиморасчетов", 	Изменился);
		ИзменитьРеквизит(ОбъектБух, 1, "КурсВзаиморасчетов", 		Изменился);
		
		// Установим договор, возмем первый попавшийся
		
		ВалютаПоУмолчанию81 = ПолучитьОбъектВБухгалтерии(ПолучитьВалютуВзаиморасчетовПоУмолчанию(), Connector,,, ПеренесенныеОбъекты, стрОшибки);
		Если ВалютаПоУмолчанию81 = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;		 
		
		СтруктураДоговора = Новый Структура("ВалютаВзаиморасчетов, ВидДоговора",
												ВалютаПоУмолчанию81,
												Connector.Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
												
		СтруктураДоп = Новый Структура("ТипЦен", ОбъектБух.ТипЦен);
		
		Договор81 = ПолучитьДоговор81ИзОрганизации(Connector, Строка.Контрагент, Строка.ДоговорКонтрагента, ОбъектБух.Организация, ПеренесенныеОбъекты, Истина, СтруктураДоговора, СтруктураДоп, стрОшибки);
		Если Договор81 = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ИзменитьРеквизит(ОбъектБух, Договор81, "ДоговорКонтрагента", Изменился);
		
		// Зачет авансов
		
		ИзменитьРеквизит(ОбъектБух, Connector.Перечисления.СпособыЗачетаАвансов.Автоматически , "СпособЗачетаАвансов", Изменился);
		
		// Флаги
		
		ИзменитьРеквизит(ОбъектБух, Истина , "УчитыватьНДС", 		Изменился);
		ИзменитьРеквизит(ОбъектБух, Строка.СуммаВключаетНДС , "СуммаВключаетНДС", 	Изменился);
		
		// Счета
		
		ИзменитьРеквизит(ОбъектБух, Connector.ПланыСчетов.Хозрасчетный.РасчетыСПокупателями , 			"СчетУчетаРасчетовСКонтрагентом", 	Изменился);	// 62.01
		ИзменитьРеквизит(ОбъектБух, Connector.ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным , 	"СчетУчетаРасчетовПоАвансам", 		Изменился);	// 62.02
		
		Если Строка.ЭтоРемонт Тогда
			
			КоличЧасов = 0;
			СуммаНДС = 0;
			Для Каждого СтрокаТов ИЗ ОбъектБух.Товары Цикл
				
				Если СтрокаТов.Номенклатура.Услуга Тогда
					КоличЧасов = КоличЧасов + СтрокаТов.Количество;
				КонецЕсли;
				СуммаНДС = СуммаНДС + СтрокаТов.СуммаНДС;
			КонецЦикла;
			
						
			Если НЕ КоличЧасов Тогда
				стрОшибки = " Реализация по Заказ-Наряду не содержит Услуги";
				Возврат Неопределено;
			КонецЕсли;	
			
			Если ОбъектБух.Услуги.Количество() <> 1 Тогда
				ОбъектБух.Услуги.Очистить();
				Строка81 = ОбъектБух.Услуги.Добавить();
			Иначе
				Строка81 = ОбъектБух.Услуги.Получить(0);
			КонецЕсли;         
			
			Услуга81 = ПолучитьОбъектВБухгалтерии(Строка.Услуга, Connector,,, ПеренесенныеОбъекты, стрОшибки);               
			ИзменитьРеквизит(Строка81, Услуга81, "Номенклатура", Изменился);
			ИзменитьРеквизит(Строка81, КоличЧасов, 	"Количество", Изменился);
			ИзменитьРеквизит(Строка81, СуммаНДС, "СуммаНДС", Изменился); 
			ИзменитьРеквизит(Строка81, Строка.СуммаДокумента,	"Сумма", Изменился);
			ИзменитьРеквизит(Строка81, Формат(Строка.СуммаДокумента/КоличЧасов,"ЧЦ=10; ЧДЦ=2"), "Цена", Изменился);
			ИзменитьРеквизит(Строка81, ?(Строка.Организация.УчитыватьНДС, Услуга81.СтавкаНДС, Connector.Перечисления.СтавкиНДС.БезНДС), "СтавкаНДС", Изменился);
			
			ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.Продажи_НДС, "СчетУчетаНДСПоРеализации", Изменился); 		// 90.03
			ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД, "СчетДоходов", Изменился);            		// 90.01.2
			ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД, "СчетРасходов", Изменился); 	// 90.02.1
			ИзменитьРеквизит(Строка81, ПолучитьСубконтоУслуги81(Connector), "Субконто", Изменился);                                 // Выполнение работ по РИ
									
		Иначе	
			
			Для Каждого Строка81 Из ОбъектБух.Товары Цикл
			
				ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.ТоварыНаСкладах ,			 	"СчетУчета", 				Изменился);	// 41.01
				ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД , 				"СчетДоходов", 				Изменился);	// 90.01.2
				//Если Строка.ЭтоРемонт Тогда
				//	ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.ОсновноеПроизводство , 	"СчетРасходов", 			Изменился);	// 20.01
				//	ИзменитьРеквизит(Строка81, ПолучитьСубконтоУслуги81(Connector) ,						"Субконто", 				Изменился);	// Выполнение работ по РИ
				//Иначе
					ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД , 	"СчетРасходов", 			Изменился);	// 90.02.1
					ИзменитьРеквизит(Строка81, СубконтоТовар81 ,												"Субконто", 				Изменился);	// Товар
				//КонецЕсли;
				
				ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.Продажи_НДС , 				"СчетУчетаНДСПоРеализации", Изменился);	// 90.03
			
			КонецЦикла;
			
			ПеревестиУслугиИзТоваров(Connector, ОбъектБух.Товары, ОбъектБух.Услуги, Изменился);
		КонецЕсли;
		
		Если Строка.ЭтоРемонт Тогда
			
			УдалитьУслугиИзТоваров(Connector, ОбъектБух.Товары);

			Если ПолучитьДокументТребованиеНакладная(Connector, СсылкаНаОбъект, ОбъектБух, стрОшибки) = Неопределено Тогда
				Возврат Неопределено;
			КонецЕсли;
			
			ОбъектБух.Товары.Очистить();
			
        КонецЕсли;

	
	КонецЦикла;
	
	Если Изменился Тогда
		
		// особый случай
		
		Если Не ОбработатьПродажуТулсаИПокупкуИнструмента(Строка, ОбъектБух, СсылкаНаОбъект.ПометкаУдаления, СсылкаНаОбъект.Проведен, Connector, ПеренесенныеОбъекты, стрОшибки) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		СсылкаТекущейРеализацииБух = ЗаписатьДокументБух(ОбъектБух, СсылкаНаОбъект.ПометкаУдаления, СсылкаНаОбъект.Проведен, Connector, стрОшибки);
		
	Иначе
		
		СсылкаТекущейРеализацииБух = ОбъектБух.Ссылка;
		
	КонецЕсли;
	
	Если СсылкаТекущейРеализацииБух = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПеренесенныеОбъекты.Вставить(СсылкаНаОбъект, СсылкаТекущейРеализацииБух);
	
	// Перенесем счет фактуру полученную
	
	Если Получить_ДокументСчетФактураВыданныйИзРеализации(Connector, СсылкаНаОбъект, ПеренесенныеОбъекты, стрОшибки) = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	
		
	// Перенесем возврат, если есть
	//Запрос = Новый Запрос("ВЫБРАТЬ Ссылка ИЗ Документ.ВозвратОтПокупателя ГДЕ ДокументОтгрузки = &Реализация");
	//Запрос.УстановитьПараметр("Реализация", СсылкаНаОбъект);
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//
	//Пока Выборка.Следующий() Цикл
	//	
	//	СсылкаТекущегоВозврата = Выборка.Ссылка;
	//	Если СсылкаТекущегоВозврата.ОтражатьВБУ Тогда 
	//	
	//		Если Получить_ДокументВозвратОтПокупателя(Connector, СсылкаТекущегоВозврата, ПеренесенныеОбъекты, стрОшибки) = Неопределено Тогда
	//			Возврат Неопределено;
	//		КонецЕсли;
	//	КонецЕсли;
	//	
	//КонецЦикла;
	
	Возврат СсылкаТекущейРеализацииБух;
	
КонецФункции

Функция Получить_ДокументПоступлениеТоваров(Connector, СсылкаНаОбъект, ПеренесенныеОбъекты, стрОшибки = "")
	
	ОбъектБух = ПолучитьОбъектБухПоГуиду(Connector, СсылкаНаОбъект, Connector.Документы.ПоступлениеТоваровУслуг,,Истина,,стрОшибки);
	Если ОбъектБух = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 
	|	ВЫБОР КОГДА ВходящийНомер = """" ТОГДА Номер ИНАЧЕ ВходящийНомер КОНЕЦ Номер, 
	|	Дата,
	|	Организация,
	|	ВЫБОР КОГДА Партнер.ЭтоКонтрагентБухгалтерии ТОГДА Партнер ИНАЧЕ Контрагент КОНЕЦ Контрагент,
	|	ВЫБОР КОГДА Партнер.ЭтоКонтрагентБухгалтерии ТОГДА Контрагент ИНАЧЕ НЕОПРЕДЕЛЕНО КОНЕЦ ДоговорКонтрагента,
	|	Склад,
	|	ТипЦен,
	|	Валюта 			КАК ВалютаДокумента,
	|	Сумма,
	|	СуммаВключаетНДС,
	|	НомерВходящегоДокумента,
	|	ДатаВходящегоДокумента,
	|	Комментарий,
	|	Товары.(
	|		Номенклатура,
	|		Количество,
	|		1 Коэффициент,
	|		Цена,
	|		Сумма,
	|		СтавкаНДС,
	|		СуммаНДС,
	|		НомерГТД,
	|		ВЫБОР КОГДА СтранаПроисхождения <> &ПустаяСтрана И НомерГТД = &ПустойНомерГТД 
	|       	ТОГДА &ПустаяСтрана
	|			ИНАЧЕ СтранаПроисхождения 
	|			КОНЕЦ СтранаПроисхождения
	|		) КАК Товары
	|ИЗ
	|	Документ.ПоступлениеТоваров
	|ГДЕ
	|	Ссылка = &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	Запрос.УстановитьПараметр("ПустаяСтрана", Справочники.Страны.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойНомерГТД", Справочники.НомераГТД.ПустаяСсылка());
	
	Таблица 	= Запрос.Выполнить().Выгрузить();
	Колонки 	= Таблица.Колонки;
	Изменился 	= Ложь;
	
	Для Каждого Строка Из Таблица Цикл
		
		Если Не ЗаполнитьОбъектПоСтрокеЗапроса(Connector, ОбъектБух, Строка, Колонки, ПеренесенныеОбъекты, Изменился, стрОшибки) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		// Операция
		
		ИзменитьРеквизит(ОбъектБух, Connector.Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия, "ВидОперации", 	Изменился);
		
		// Валюты
		
		ИзменитьРеквизит(ОбъектБух, 1, "КратностьВзаиморасчетов", 	Изменился);
		ИзменитьРеквизит(ОбъектБух, 1, "КурсВзаиморасчетов", 		Изменился);
		
		// Установим договор, возмем первый попавшийся
		
		ВалютаПоУмолчанию81 = ПолучитьОбъектВБухгалтерии(ПолучитьВалютуВзаиморасчетовПоУмолчанию(), Connector,,, ПеренесенныеОбъекты, стрОшибки);
		Если ВалютаПоУмолчанию81 = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;		 
		
		СтруктураДоговора = Новый Структура("ВалютаВзаиморасчетов, ВидДоговора",
												ВалютаПоУмолчанию81,
												Connector.Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
												
		СтруктураДоп = Новый Структура("ТипЦен", ОбъектБух.ТипЦен);
		
		Договор81 = ПолучитьДоговор81ИзОрганизации(Connector, Строка.Контрагент, Строка.ДоговорКонтрагента, ОбъектБух.Организация, ПеренесенныеОбъекты, Истина, СтруктураДоговора, СтруктураДоп, стрОшибки);
		Если Договор81 = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ИзменитьРеквизит(ОбъектБух, Договор81, "ДоговорКонтрагента", Изменился);
		
		// Зачет авансов
		
		ИзменитьРеквизит(ОбъектБух, Connector.Перечисления.СпособыЗачетаАвансов.Автоматически , "СпособЗачетаАвансов", Изменился);
		
		// Флаги
		
		ИзменитьРеквизит(ОбъектБух, Истина , "УчитыватьНДС", 		Изменился);
		ИзменитьРеквизит(ОбъектБух, Истина , "СуммаВключаетНДС", 	Изменился);
		
		// Счета
		
		ИзменитьРеквизит(ОбъектБух, Connector.ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками , 		"СчетУчетаРасчетовСКонтрагентом", 	Изменился);	// 60.01
		ИзменитьРеквизит(ОбъектБух, Connector.ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным , 	"СчетУчетаРасчетовПоАвансам", 		Изменился);	// 60.02
		
		Для Каждого Строка81 Из ОбъектБух.Товары Цикл
		
			ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.ТоварыНаСкладах ,			 	"СчетУчета", 	Изменился);	// 41.01
			ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ ,		"СчетУчетаНДС", Изменился);	// 19.03
			
		КонецЦикла;
	КонецЦикла;
	
	//ОбъектБух.ОбменДанными.Load = Истина;
	
	Если Изменился Тогда
		Возврат ЗаписатьДокументБух(ОбъектБух, СсылкаНаОбъект.ПометкаУдаления, СсылкаНаОбъект.Проведен, Connector, стрОшибки);
	Иначе
		Возврат ОбъектБух.Ссылка;
	КонецЕсли;
	
КонецФункции
Функция Получить_ДокументВозвратОтПокупателя(Connector, СсылкаНаОбъект, ПеренесенныеОбъекты, стрОшибки = "")
	
	//Если Не СсылкаНаОбъект.ОтражатьВБУ Тогда // Если возврат не отражается в БУ, правим реализацию, и перегружаем ее заново
	//	
	//	ДокументОтгрузки = СсылкаНаОбъект.ДокументОтгрузки; 
	//	
	//	Если ДокументОтгрузки <> Неопределено И ДокументОтгрузки.ПолучитьОбъект() <> Неопределено Тогда
	//		Если Получить_ДокументВозвратОтПокупателя(Connector, ДокументОтгрузки, ПеренесенныеОбъекты, стрОшибки) Тогда
	//			Возврат Неопределено;
	//		КонецЕсли;
	//	Иначе
	//		стрОшибки = "Не удалось получить значение документа отргузки";
	//	КонецЕсли
	//			
	//	КонецЕсли;
	//КонецЕсли;
	
	ОбъектБух = ПолучитьОбъектБухПоГуиду(Connector, СсылкаНаОбъект, Connector.Документы.ВозвратТоваровОтПокупателя ,,Истина,,стрОшибки);
	Если ОбъектБух = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 
	|	Номер, 
	|	Дата,
	|	Организация,
	|	ВЫБОР КОГДА Партнер.ЭтоКонтрагентБухгалтерии ТОГДА Партнер ИНАЧЕ Контрагент КОНЕЦ Контрагент,
	|	ВЫБОР КОГДА Партнер.ЭтоКонтрагентБухгалтерии ТОГДА Контрагент ИНАЧЕ НЕОПРЕДЕЛЕНО КОНЕЦ ДоговорКонтрагента,
 	|	Склад,
	|	ТипЦен,
	|	Валюта 			 ВалютаДокумента,
	|	Сумма,
	|	СуммаВключаетНДС,
	|	Комментарий,
	|	Товары.(
	|		Номенклатура,
	|		1 КАК Себестоимость,
	|		Количество,
	|		Цена,
	|		Сумма,
	|		СтавкаНДС,
	|		СуммаНДС
	|			) КАК Товары
	|ИЗ
	|	Документ.ВозвратОтПокупателя
	|ГДЕ
	|	Ссылка = &Ссылка И ОтражатьВБУ
	|");
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	
	Таблица 	= Запрос.Выполнить().Выгрузить();
	Колонки 	= Таблица.Колонки;
	Изменился 	= Ложь;
	
	Для Каждого Строка Из Таблица Цикл
		
		Если Не ЗаполнитьОбъектПоСтрокеЗапроса(Connector, ОбъектБух, Строка, Колонки, ПеренесенныеОбъекты, Изменился, стрОшибки) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		// Операция
		
		ИзменитьРеквизит(ОбъектБух, Connector.Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия, "ВидОперации", 	Изменился);
		
		// Валюты
		
		ИзменитьРеквизит(ОбъектБух, 1, "КратностьВзаиморасчетов", 	Изменился);
		ИзменитьРеквизит(ОбъектБух, 1, "КурсВзаиморасчетов", 		Изменился);
		
		// Установим договор, возмем первый попавшийся
		
		ВалютаПоУмолчанию81 = ПолучитьОбъектВБухгалтерии(ПолучитьВалютуВзаиморасчетовПоУмолчанию(), Connector,,, ПеренесенныеОбъекты, стрОшибки);
		Если ВалютаПоУмолчанию81 = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;		 
		
		СтруктураДоговора = Новый Структура("ВалютаВзаиморасчетов, ВидДоговора",
												ВалютаПоУмолчанию81,
												Connector.Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
												
		СтруктураДоп = Новый Структура("ТипЦен", ОбъектБух.ТипЦен);
		
		Договор81 = ПолучитьДоговор81ИзОрганизации(Connector, Строка.Контрагент, Строка.ДоговорКонтрагента, ОбъектБух.Организация, ПеренесенныеОбъекты, Истина, СтруктураДоговора, СтруктураДоп, стрОшибки);
		Если Договор81 = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ИзменитьРеквизит(ОбъектБух, Договор81, "ДоговорКонтрагента", Изменился);
		
		// Флаги
		
		ИзменитьРеквизит(ОбъектБух, Истина , "УчитыватьНДС", 		Изменился);
		ИзменитьРеквизит(ОбъектБух, Истина , "СуммаВключаетНДС", 	Изменился);
		
		// Счета
		
		ИзменитьРеквизит(ОбъектБух, Connector.ПланыСчетов.Хозрасчетный.РасчетыСПокупателями , 			"СчетУчетаРасчетовСКонтрагентом", 	Изменился);	// 62.01
		ИзменитьРеквизит(ОбъектБух, Connector.ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным , 	"СчетУчетаРасчетовПоАвансам", 		Изменился);	// 62.02
		
		Для Каждого Строка81 Из ОбъектБух.Товары Цикл
			
			ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.ТоварыНаСкладах ,			 	"СчетУчета", 				Изменился);	// 41.01
			ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД , 				"СчетДоходов", 				Изменился);	// 90.01.2
			ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД , 	"СчетРасходов", 			Изменился);	// 90.02.1
			ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.Продажи_НДС , 				"СчетУчетаНДСПоРеализации", Изменился);	// 90.03
 
		КонецЦикла;
	КонецЦикла;
	
	Если Изменился Тогда
		Возврат ЗаписатьДокументБух(ОбъектБух, СсылкаНаОбъект.ПометкаУдаления, СсылкаНаОбъект.Проведен, Connector, стрОшибки);
	Иначе
		Возврат ОбъектБух.Ссылка;
	КонецЕсли;
	
КонецФункции
Функция Получить_ДокументВозвратПоставщику(Connector, СсылкаНаОбъект, ПеренесенныеОбъекты, стрОшибки = "")
	
	ОбъектБух = ПолучитьОбъектБухПоГуиду(Connector, СсылкаНаОбъект, Connector.Документы.ВозвратТоваровПоставщику ,,Истина,,стрОшибки);
	Если ОбъектБух = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 
	|	ВЫБОР КОГДА ВходящийНомер = """" ТОГДА Номер ИНАЧЕ ВходящийНомер КОНЕЦ Номер, 
	|	Дата,
	|	Организация,
	|	ВЫБОР КОГДА Партнер.ЭтоКонтрагентБухгалтерии ТОГДА Партнер ИНАЧЕ Контрагент КОНЕЦ Контрагент,
	|	ВЫБОР КОГДА Партнер.ЭтоКонтрагентБухгалтерии ТОГДА Контрагент ИНАЧЕ НЕОПРЕДЕЛЕНО КОНЕЦ ДоговорКонтрагента,
 	|	Склад,
	|	ТипЦен,
	|	Валюта 			КАК ВалютаДокумента,
	|	Сумма,
	|	СуммаВключаетНДС,
	|	Комментарий,
	|	УчитыватьНДС,
	|	ПоставщикуВыставляетсяСчетФактураНаВозврат,
	|	Товары.(
	|		Номенклатура,
	|		1 КАК Коэффициент,
	|		Количество,
	|		Цена,
	|		Сумма,
	|		СтавкаНДС,
	|		СуммаНДС
	|			) КАК Товары
	|ИЗ
	|	Документ.ВозвратПоставщику
	|ГДЕ
	|	Ссылка = &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	
	Таблица 	= Запрос.Выполнить().Выгрузить();
	Колонки 	= Таблица.Колонки;
	Изменился 	= Ложь;
	
	Для Каждого Строка Из Таблица Цикл
		
		Если Не ЗаполнитьОбъектПоСтрокеЗапроса(Connector, ОбъектБух, Строка, Колонки, ПеренесенныеОбъекты, Изменился, стрОшибки) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		// Операция
		
		ИзменитьРеквизит(ОбъектБух, Connector.Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия, "ВидОперации", 	Изменился);
		
		// Валюты
		
		ИзменитьРеквизит(ОбъектБух, 1, "КратностьВзаиморасчетов", 	Изменился);
		ИзменитьРеквизит(ОбъектБух, 1, "КурсВзаиморасчетов", 		Изменился);
		
		// Установим договор, возмем первый попавшийся
		
		ВалютаПоУмолчанию81 = ПолучитьОбъектВБухгалтерии(ПолучитьВалютуВзаиморасчетовПоУмолчанию(), Connector,,, ПеренесенныеОбъекты, стрОшибки);
		Если ВалютаПоУмолчанию81 = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;		 
		
		СтруктураДоговора = Новый Структура("ВалютаВзаиморасчетов, ВидДоговора",
												ВалютаПоУмолчанию81,
												Connector.Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
												
		СтруктураДоп = Новый Структура("ТипЦен", ОбъектБух.ТипЦен);
		
		Договор81 = ПолучитьДоговор81ИзОрганизации(Connector, Строка.Контрагент, Строка.ДоговорКонтрагента, ОбъектБух.Организация, ПеренесенныеОбъекты, Истина, СтруктураДоговора, СтруктураДоп, стрОшибки);
		Если Договор81 = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ИзменитьРеквизит(ОбъектБух, Договор81, "ДоговорКонтрагента", Изменился);
		
		// Счета
		
		ИзменитьРеквизит(ОбъектБух, Connector.Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00017") ,	"СтатьяДоходовИРасходов", 	Изменился);
		ИзменитьРеквизит(ОбъектБух, Connector.ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД , 					"СчетУчетаДоходов", 	Изменился);	// 90.01.1
		ИзменитьРеквизит(ОбъектБух, Connector.ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД ,		"СчетУчетаРасходов", 	Изменился);	// 90.02.1 // поменяла на 90.02.1
		
		ИзменитьРеквизит(ОбъектБух, Connector.ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками , 			"СчетУчетаРасчетовСКонтрагентом", 	Изменился);	// 62.01 // поменяла на 60.01
		ИзменитьРеквизит(ОбъектБух, Connector.ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным , 		"СчетУчетаРасчетовПоПретензиям", 	Изменился);	// 62.02 // поменяла на 60.02
		
		Для Каждого Строка81 Из ОбъектБух.Товары Цикл
		
			ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.ПрочиеМатериалы ,			 	"СчетУчета", 	Изменился);	// 10.06
			ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ ,		"СчетУчетаНДС", Изменился);	// 19.03
 
		КонецЦикла;
	КонецЦикла;
	
	Если Изменился Тогда
		Возврат ЗаписатьДокументБух(ОбъектБух, СсылкаНаОбъект.ПометкаУдаления, СсылкаНаОбъект.Проведен, Connector, стрОшибки);
	Иначе
		Возврат ОбъектБух.Ссылка;
	КонецЕсли;
	
КонецФункции

Функция Получить_ДокументСчетФактураВыданный(Connector, СсылкаНаОбъект, ПеренесенныеОбъекты, стрОшибки = "")
	
	ОбъектБух = ПолучитьОбъектБухПоГуиду(Connector, СсылкаНаОбъект, Connector.Документы.СчетФактураВыданный ,,Истина,,стрОшибки);
	Если ОбъектБух = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 
	|	Номер		Номер, 
	|	Дата,
	|	Организация Организация,
	|	ВЫБОР КОГДА Партнер.ЭтоКонтрагентБухгалтерии ТОГДА Партнер ИНАЧЕ Контрагент КОНЕЦ Контрагент,
	|	ВЫБОР КОГДА Партнер.ЭтоКонтрагентБухгалтерии ТОГДА Контрагент ИНАЧЕ НЕОПРЕДЕЛЕНО КОНЕЦ ДоговорКонтрагента,
	|	Ссылка		ДокументОснование,
	|	Валюта 		ВалютаДокумента,
	|	Сумма,
	|	Комментарий
	|ИЗ
	|	Документ.РеализацияТоваров
	|ГДЕ
	|	Ссылка = &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	
	Таблица 	= Запрос.Выполнить().Выгрузить();
	Колонки 	= Таблица.Колонки;
	Изменился 	= Ложь;
	
	Для Каждого Строка Из Таблица Цикл
		
		Если Не ЗаполнитьОбъектПоСтрокеЗапроса(Connector, ОбъектБух, Строка, Колонки, ПеренесенныеОбъекты, Изменился, стрОшибки) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		// Установим договор, возмем первый попавшийся
		
		ВалютаПоУмолчанию81 = ПолучитьОбъектВБухгалтерии(ПолучитьВалютуВзаиморасчетовПоУмолчанию(), Connector,,, ПеренесенныеОбъекты, стрОшибки);
		Если ВалютаПоУмолчанию81 = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;		 
		
		СтруктураДоговора = Новый Структура("ВалютаВзаиморасчетов, ВидДоговора",
												ВалютаПоУмолчанию81,
												Connector.Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		
		Договор81 = ПолучитьДоговор81ИзОрганизации(Connector, Строка.Контрагент, Строка.ДоговорКонтрагента, ОбъектБух.Организация, ПеренесенныеОбъекты, Истина, СтруктураДоговора, ,стрОшибки);
		//Если Договор81 = Неопределено Тогда
		//	Возврат Неопределено;
		//КонецЕсли;
		//
		ИзменитьРеквизит(ОбъектБух, Договор81, "ДоговорКонтрагента", Изменился);
		
		// На аванс
		
		//Если СсылкаНаОбъект.СуммаАванса > 0 Тогда
		//	
		//	ИзменитьРеквизит(ОбъектБух, Connector.Перечисления.ВидСчетаФактурыВыставленного.НаАванс, "ВидСчетаФактуры", Изменился);
		//	ИзменитьРеквизит(ОбъектБух, Истина, 						"Выставлен", 			Изменился);
		//	ИзменитьРеквизит(ОбъектБух, НачалоДня(СсылкаНаОбъект.Дата), "ДатаВыставления", 		Изменился);
		//	ИзменитьРеквизит(ОбъектБух, 1, 								"КодСпособаВыставления", Изменился);
		//	ИзменитьРеквизит(ОбъектБух, "02", 							"КодВидаОперации", 		Изменился);
		//	
		//		
		//Иначе
			
			ИзменитьРеквизит(ОбъектБух, "01", 							"КодВидаОперации", 		Изменился);
			ИзменитьРеквизит(ОбъектБух, Connector.Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию, "ВидСчетаФактуры", Изменился);
				
		//КонецЕсли;
				
		// Установим табличнцю часть основания
		
		Если 	ОбъектБух.ДокументыОснования.Количество() <> 1 Или
				ОбъектБух.ДокументыОснования.Получить(0).ДокументОснование <> ОбъектБух.ДокументОснование Тогда
				
			Изменился = Истина;
			ОбъектБух.ДокументыОснования.Очистить();
			ОбъектБух.ДокументыОснования.Добавить().ДокументОснование = ОбъектБух.ДокументОснование;
				
		КонецЕсли;
	КонецЦикла;
	
	//ОбъектБух.ОбменДанными.Load = Истина;
	
	Если Изменился Тогда
		Возврат ЗаписатьДокументБух(ОбъектБух, СсылкаНаОбъект.ПометкаУдаления, СсылкаНаОбъект.Проведен, Connector, стрОшибки);
	Иначе
		Возврат ОбъектБух.Ссылка;
	КонецЕсли;
	
КонецФункции

Функция Получить_ДокументСчетФактураПолученный(Connector, СсылкаНаОбъект, ПеренесенныеОбъекты, стрОшибки = "")
	
	ОбъектБух = ПолучитьОбъектБухПоГуиду(Connector, СсылкаНаОбъект, Connector.Документы.СчетФактураПолученный ,,Истина,,стрОшибки);
	Если ОбъектБух = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 
	|	ВЫБОР КОГДА ВходящийНомер = """" ТОГДА Номер ИНАЧЕ ВходящийНомер КОНЕЦ Номер, 
	|	Дата,
	|	ДокументОснование.Организация,
	|	ВЫБОР КОГДА ДокументОснование.Партнер.ЭтоКонтрагентБухгалтерии ТОГДА ДокументОснование.Партнер ИНАЧЕ ДокументОснование.Контрагент КОНЕЦ Контрагент,
	|	ВЫБОР КОГДА ДокументОснование.Партнер.ЭтоКонтрагентБухгалтерии ТОГДА ДокументОснование.Контрагент ИНАЧЕ НЕОПРЕДЕЛЕНО КОНЕЦ ДоговорКонтрагента,
 	|	НомерВходящегоДокумента,
	|	ДатаВходящегоДокумента,
	|	ДокументОснование,
	|	ДокументОснование.Валюта ВалютаДокумента,
	|	Сумма,
	|	Комментарий
	|ИЗ
	|	Документ.СчетФактураПолученный
	|ГДЕ
	|	Ссылка = &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	
	Таблица 	= Запрос.Выполнить().Выгрузить();
	Колонки 	= Таблица.Колонки;
	Изменился 	= Ложь;
	
	Для Каждого Строка Из Таблица Цикл
		
		Если Не ЗаполнитьОбъектПоСтрокеЗапроса(Connector, ОбъектБух, Строка, Колонки, ПеренесенныеОбъекты, Изменился, стрОшибки) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		// Установим договор, возмем первый попавшийся
		
		ВалютаПоУмолчанию81 = ПолучитьОбъектВБухгалтерии(ПолучитьВалютуВзаиморасчетовПоУмолчанию(), Connector,,, ПеренесенныеОбъекты, стрОшибки);
		Если ВалютаПоУмолчанию81 = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;		 
		
		СтруктураДоговора = Новый Структура("ВалютаВзаиморасчетов, ВидДоговора",
												ВалютаПоУмолчанию81,
												Connector.Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		
		Договор81 = ПолучитьДоговор81ИзОрганизации(Connector, Строка.Контрагент, Строка.ДоговорКонтрагента, ОбъектБух.Организация, ПеренесенныеОбъекты, Истина, СтруктураДоговора, ,стрОшибки);
		Если Договор81 = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ИзменитьРеквизит(ОбъектБух, Договор81, "ДоговорКонтрагента", Изменился);
		
		// Установим табличнцю часть основания
		
		Если 	ОбъектБух.ДокументыОснования.Количество() <> 1 Или
				ОбъектБух.ДокументыОснования.Получить(0).ДокументОснование <> ОбъектБух.ДокументОснование Тогда
				
			Изменился = Истина;
			ОбъектБух.ДокументыОснования.Очистить();
			ОбъектБух.ДокументыОснования.Добавить().ДокументОснование = ОбъектБух.ДокументОснование;
				
		КонецЕсли;
	КонецЦикла;
	
	//ОбъектБух.ОбменДанными.Load = Истина;
	
	Если Изменился Тогда
		Возврат ЗаписатьДокументБух(ОбъектБух, СсылкаНаОбъект.ПометкаУдаления, СсылкаНаОбъект.Проведен, Connector, стрОшибки);
	Иначе
		Возврат ОбъектБух.Ссылка;
	КонецЕсли;
	
КонецФункции

Функция Получить_ДокументПлатежноеПоручениеИсходящее(Connector, СсылкаНаОбъект, ПеренесенныеОбъекты, стрОшибки = "")
	
	ОбъектБух = ПолучитьОбъектБухПоГуиду(Connector, СсылкаНаОбъект, Connector.Документы.СписаниеСРасчетногоСчета ,,Истина,,стрОшибки);
	Если ОбъектБух = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 
	|	Дата,
	|	Номер,
	|	Организация,
	|	ВЫБОР КОГДА Партнер.ЭтоКонтрагентБухгалтерии ТОГДА Партнер ИНАЧЕ Контрагент			КОНЕЦ Контрагент,
	|	ВЫБОР КОГДА Партнер.ЭтоКонтрагентБухгалтерии ТОГДА Контрагент ИНАЧЕ НЕОПРЕДЕЛЕНО 	КОНЕЦ ДоговорКонтрагента,
	|	НомерВходящегоДокумента				НомерВходящегоДокумента,
	|	Дата								ДатаВходящегоДокумента,
	|	БанковскийСчетОрганизации			СчетОрганизации,
	|	БанковскийСчетПартнера 				СчетКонтрагента,
	|	Валюта					 			ВалютаДокумента,
	|	Сумма 								СуммаДокумента,
	|	СуммаНДС,
	|	СтавкаНДС,
	|	ДокументОснование,
	|	НомерВедомости,
	|	НазначениеПлатежа,
	|	ФизЛицо,
	|	НомерДоговора,
	|	ВидОперации,
	|	ВидПлатежаВБюджет,
	//|   СтатьяДвиженияДенежныхСредств,
	|   СтатьяДДСБух	СтатьяДвиженияДенежныхСредств,
	|	УровниБюджетов,
	|	Комментарий
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее
	|ГДЕ
	|	Ссылка = &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	
	Таблица 	= Запрос.Выполнить().Выгрузить();
	Колонки 	= Таблица.Колонки;
	Изменился 	= Ложь;
	
	Для Каждого Строка Из Таблица Цикл
		
		Если Не ЗаполнитьОбъектПоСтрокеЗапроса(Connector, ОбъектБух, Строка, Колонки, ПеренесенныеОбъекты, Изменился, стрОшибки) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ИзменитьРеквизит(ОбъектБух, Connector.ПланыСчетов.Хозрасчетный.РасчетныеСчета ,	"СчетБанк",	Изменился);	// 51
		
		// Расшифровка платежа
		
		Если ОбъектБух.РасшифровкаПлатежа.Количество() <> 1 Тогда
			ОбъектБух.РасшифровкаПлатежа.Очистить();
			Строка81 = ОбъектБух.РасшифровкаПлатежа.Добавить();
		Иначе
			Строка81 = ОбъектБух.РасшифровкаПлатежа.Получить(0);
		КонецЕсли;

		ВидДоговора81 = Неопределено;
		стрСодержание = "";

		// Прочие по строке
		
		ИзменитьРеквизит(Строка81, 1,"КурсВзаиморасчетов", Изменился);
		ИзменитьРеквизит(Строка81, 1,"КратностьВзаиморасчетов", Изменился);
        ИзменитьРеквизит(Строка81, Строка.СуммаНДС,			"СуммаНДС", Изменился);
		ИзменитьРеквизит(Строка81, Строка.СуммаДокумента,	"СуммаВзаиморасчетов", Изменился);
		ИзменитьРеквизит(Строка81, Строка.СуммаДокумента,	"СуммаПлатежа", Изменился);			
		ИзменитьРеквизит(Строка81, Получить_ПеречислениеСтавкиНДС(Connector, Строка.СтавкаНДС) , 	"СтавкаНДС", Изменился);
		
		ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками ,		"СчетУчетаРасчетовСКонтрагентом", 	Изменился);	// 60.01
		ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным ,	"СчетУчетаРасчетовПоАвансам", 		Изменился);	// 60.02
		
		КодСтатьи = Строка.СтатьяДвиженияДенежныхСредств.Код;
				
		// ОПЛАТА ПОСТАВЩИКУ
		
		Если СсылкаНаОбъект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику Тогда
            Если НЕ ЗначениеЗаполнено(Строка.НомерДоговора) Тогда
				ВидДоговора81 = Connector.Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
			КонецЕсли;
			ИзменитьРеквизит(Строка81, Connector.Перечисления.СпособыПогашенияЗадолженности.Автоматически , "СпособПогашенияЗадолженности", Изменился);
			
			стрСодержание =  "Списание с р/с: оплата поставщику """ + ПН(ОбъектБух.Контрагент) + """ по договору";
			
		// ВОЗВРАТ ПОКУПАТЕЛЮ
		
		ИначеЕсли 	СсылкаНаОбъект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю Тогда
			
			ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.РасчетыСПокупателями ,		"СчетУчетаРасчетовСКонтрагентом", 	Изменился);	// 62.01 
			ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным ,	"СчетУчетаРасчетовПоАвансам", 		Изменился);	// 62.02 
			
			ВидДоговора81 = Connector.Перечисления.ВидыДоговоровКонтрагентов.СПокупателем; 
			ИзменитьРеквизит(Строка81, Connector.Перечисления.СпособыПогашенияЗадолженности.Автоматически , "СпособПогашенияЗадолженности", Изменился);
			
			стрСодержание = "Списание с р/с: возврат денежных средств покупателю """ + ПН(ОбъектБух.Контрагент) + """ по договору";
			
		// ПЕРЕЧИСЛЕНИЕ НАЛОГА	
			
		ИначеЕсли 	СсылкаНаОбъект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
			
			ИзменитьРеквизит(ОбъектБух, ПолучитьОбъектВБухгалтерии(Строка.ВидПлатежаВБюджет, Connector,,, ПеренесенныеОбъекты, стрОшибки) ,	"СубконтоДт1", Изменился); // Расходы на услуги банков

			Если КодСтатьи = "000000057" Тогда					// Перечисление налога на прибыль
				ИзменитьРеквизит(ОбъектБух,  Connector.ПланыСчетов.Хозрасчетный.РасчетыСБюджетом, "СчетУчетаРасчетовСКонтрагентом", Изменился);		// 68.04.1
				
				Если ЗначениеЗаполнено(Строка.УровниБюджетов) Тогда
					ИзменитьРеквизит(ОбъектБух,  ПолучитьОбъектВБухгалтерии(Строка.УровниБюджетов, Connector,,, ПеренесенныеОбъекты, стрОшибки), "СубконтоДт2", Изменился);
				КонецЕсли;
				
			ИначеЕсли
				КодСтатьи = "000000042" Тогда					// Перечисление налога (прочее)
				ИзменитьРеквизит(ОбъектБух,  Connector.ПланыСчетов.Хозрасчетный.ПрочиеНалогиИСборы, "СчетУчетаРасчетовСКонтрагентом", Изменился);	// 68.10
			ИначеЕсли
				КодСтатьи = "000000059" Тогда					// Перечисление НДФЛ
				ИзменитьРеквизит(ОбъектБух,  Connector.ПланыСчетов.Хозрасчетный.НДФЛ, "СчетУчетаРасчетовСКонтрагентом", Изменился);		// 68.01
				
				стрСодержание = "Списание с р/с: перечисление НДФЛ работников.";
				
			ИначеЕсли
				КодСтатьи = "000000060" Тогда					// Страховые взносы в ФСС от НС и ПЗ
				ИзменитьРеквизит(ОбъектБух,  Connector.ПланыСчетов.Хозрасчетный.ФСС_НСиПЗ, "СчетУчетаРасчетовСКонтрагентом", Изменился);// 69.11
			ИначеЕсли
				КодСтатьи = "000000061" Тогда					// Страховые взносы в ФСС
				ИзменитьРеквизит(ОбъектБух,  Connector.ПланыСчетов.Хозрасчетный.ФСС, "СчетУчетаРасчетовСКонтрагентом", Изменился);		// 69.01
			ИначеЕсли
				КодСтатьи = "000000062" Тогда					// Страховые взносы в ФФОМС
				ИзменитьРеквизит(ОбъектБух,  Connector.ПланыСчетов.Хозрасчетный.ФФОМС, "СчетУчетаРасчетовСКонтрагентом", Изменился);	// 69.03.1
			ИначеЕсли
				КодСтатьи = "000000063" Тогда					// Накопительная часть пенсии ПФР
				ИзменитьРеквизит(ОбъектБух,  Connector.ПланыСчетов.Хозрасчетный.ПФР_нак, "СчетУчетаРасчетовСКонтрагентом", Изменился);	// 69.02.2
			ИначеЕсли
				КодСтатьи = "000000064" Тогда					// Страховая часть пенсии ПФР
				ИзменитьРеквизит(ОбъектБух,  Connector.ПланыСчетов.Хозрасчетный.ПФР_страх, "СчетУчетаРасчетовСКонтрагентом", Изменился);// 69.02.1
			ИначеЕсли
				КодСтатьи = "000000065" Тогда					// Перечисление НДС
				ИзменитьРеквизит(ОбъектБух,  Connector.ПланыСчетов.Хозрасчетный.НДС, "СчетУчетаРасчетовСКонтрагентом", Изменился);		// 68.02
			ИначеЕсли
				КодСтатьи = "000000066" Тогда					// Транспортный налог
				ИзменитьРеквизит(ОбъектБух,  Connector.ПланыСчетов.Хозрасчетный.ТранспортныйНалог, "СчетУчетаРасчетовСКонтрагентом", Изменился);	// 68.07
			ИначеЕсли
				КодСтатьи = "000000067" Тогда					// Налог на имущество
				ИзменитьРеквизит(ОбъектБух,  Connector.ПланыСчетов.Хозрасчетный.НалогНаИмущество, "СчетУчетаРасчетовСКонтрагентом", Изменился);		// 68.08
				
			КонецЕсли;
			
			Если ПустаяСтрока(стрСодержание) И ОбъектБух.СчетУчетаРасчетовСКонтрагентом <> Неопределено Тогда
			
				стрСодержание = "Списание с р/с: перечисление налога (" + ОбъектБух.СчетУчетаРасчетовСКонтрагентом.Код + 
				" " + ОбъектБух.СчетУчетаРасчетовСКонтрагентом.Наименование + "). "; КонецЕсли;			

			
		// ПРОЧЕЕ СПИСАНИЕ
			
		ИначеЕсли 	СсылкаНаОбъект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание Тогда
			
			ИзменитьРеквизит(ОбъектБух,  Connector.ПланыСчетов.Хозрасчетный.ПрочиеРасходы,	"СчетУчетаРасчетовСКонтрагентом", Изменился);

			// Счет 91.02
			Если	КодСтатьи = "000000035" ИЛИ					// Расходы на услуги банков
					КодСтатьи = "000000020" Тогда 				// Расчеты по кредитам и займам
					ИзменитьРеквизит(ОбъектБух,  Connector.Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00050"),	"СубконтоДт1", Изменился); // Расходы на услуги банков
					
			ИначеЕсли	 
					КодСтатьи = "000000045" Тогда				// Государственные пошлины
				 	ИзменитьРеквизит(ОбъектБух,  Connector.Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00049"),	"СубконтоДт1", Изменился); // Государственные пошлины
					
			ИначеЕсли
				 	КодСтатьи = "000000038" Тогда				// Прочие расходы денежных средств
					ИзменитьРеквизит(ОбъектБух,  Connector.Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00054"),	"СубконтоДт1", Изменился); //Расходы, не принимаемые в целях налогообложения                     
					
			// Счет 70		
			ИначеЕсли 
					ЗначениеЗаполнено(Строка.ФизЛицо) Тогда     // Удержания из ЗП, Пособие, Единовременное пособие
					
					ИзменитьРеквизит(ОбъектБух,  Connector.ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда,	"СчетУчетаРасчетовСКонтрагентом", Изменился);
					ИзменитьРеквизит(ОбъектБух,  ОбъектБух.ФизЛицо,	"СубконтоДт1", Изменился);
					
			// Счет 57.02		
			ИначеЕсли
					КодСтатьи = "000000034" Тогда				//Перевод на другой счет организации						
					
					ИзменитьРеквизит(ОбъектБух,  Connector.ПланыСчетов.Хозрасчетный.ПриобретениеИностраннойВалюты,	"СчетУчетаРасчетовСКонтрагентом", Изменился);
					ИзменитьРеквизит(ОбъектБух,  ОбъектБух.Контрагент, "СубконтоДт1", Изменился);
					
					Если НЕ ПустаяСтрока(Строка.НомерДоговора) Тогда
						ИзменитьРеквизит(ОбъектБух,  Connector.Справочники.ДоговорыКонтрагентов.НайтиПоКоду(Строка.НомерДоговора),	"СубконтоДт2", Изменился);
					КонецЕсли;

			// Счет 68.10		
			ИначеЕсли 
					КодСтатьи = "000000046" Тогда 				// Штрафы за административные правонарушения
					
					ИзменитьРеквизит(ОбъектБух,  Connector.ПланыСчетов.Хозрасчетный.ПрочиеНалогиИСборы,	"СчетУчетаРасчетовСКонтрагентом", Изменился);
					ИзменитьРеквизит(ОбъектБух,  Connector.Перечисления.ВидыПлатежейВГосБюджет.Штраф,	"СубконтоДт1", Изменился);
		
			КонецЕсли;
		
			стрСодержание = "Прочий расход денежных средств: " + Наименование(ОбъектБух.СтатьяДвиженияДенежныхСредств) + ".";
			
		// ПЕРЕЧИСЛЕНИЕ ЗП
		
		ИначеЕсли 	СсылкаНаОбъект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП Тогда
			
			ЗаполнитьТаблицуНаВыплатуЗП(Connector, ОбъектБух, Строка.НомерВедомости, Строка.Дата, Строка.СтатьяДвиженияДенежныхСредств, ПеренесенныеОбъекты, Изменился, стрОшибки);
			
			стрСодержание = "Списание с р/с: перечисление заработной платы. ";
			
		// РАСЧЕТ ПО КРЕДИТАМ И ЗАЙМАМ	
			
		ИначеЕсли 	СсылкаНаОбъект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам Тогда
			

			ИзменитьРеквизит(Строка81, Connector.Справочники.ДоговорыКонтрагентов.НайтиПоКоду(Строка.НомерДоговора) ,	"ДоговорКонтрагента", 	Изменился);
			ИзменитьРеквизит(ОбъектБух, Connector.Справочники.ДоговорыКонтрагентов.НайтиПоКоду(Строка.НомерДоговора) ,	"ДоговорКонтрагента", 	Изменился);
			
			// 67.02
			Если КодСтатьи = "000000068" Тогда 					// Выплата процентов по кредитам и займам
				
			 	ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымКредитам ,		"СчетУчетаРасчетовСКонтрагентом", 	Изменился); 
				
			// 67.01	
			ИначеЕсли КодСтатьи = "000000020" Тогда				// Расчеты по кредитам и займам 
				
				ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.ДолгосрочныеКредиты ,		"СчетУчетаРасчетовСКонтрагентом", 	Изменился);
			КонецЕсли;
			
			стрСодержание = "Расчеты по кредитам и займам с """ + ПН(ОбъектБух.Контрагент) + """ по договору";
			
		ИначеЕсли	СсылкаНаОбъект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПодотчетномуЛицу Тогда
			
			стрСодержание = "Списание с р/с: перечислено под отчет сотруднику " + Наименование(ОбъектБух.ФизЛицо) + ". ";
			
		КонецЕсли;		
		
		// Установим статью движения денежных средств
			
		Статья81 = ПолучитьОбъектВБухгалтерии(Строка.СтатьяДвиженияДенежныхСредств, Connector,,, ПеренесенныеОбъекты, стрОшибки);
		Если Статья81 = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
			
		ИзменитьРеквизит(Строка81, Статья81, "СтатьяДвиженияДенежныхСредств", Изменился);
			
		// Установим договор, возмем первый попавшийся
		Если ВидДоговора81 <> Неопределено Тогда
			
			ВалютаПоУмолчанию81 = ПолучитьОбъектВБухгалтерии(ПолучитьВалютуВзаиморасчетовПоУмолчанию(), Connector,,, ПеренесенныеОбъекты, стрОшибки);
			Если ВалютаПоУмолчанию81 = Неопределено Тогда
				Возврат Неопределено;
			КонецЕсли;		 
			
			СтруктураДоговора = Новый Структура("ВалютаВзаиморасчетов, ВидДоговора",
													ВалютаПоУмолчанию81,
													ВидДоговора81);
			
			Договор81 = ПолучитьДоговор81ИзОрганизации(Connector, Строка.Контрагент, Строка.ДоговорКонтрагента, ОбъектБух.Организация, ПеренесенныеОбъекты, Истина, СтруктураДоговора, ,стрОшибки);
			Если Договор81 = Неопределено Тогда
				Возврат Неопределено;
			КонецЕсли;
			
			ИзменитьРеквизит(Строка81, Договор81, "ДоговорКонтрагента", Изменился);
		ИначеЕсли  ЗначениеЗаполнено(Строка.НомерДоговора) Тогда
			
			ИзменитьРеквизит(Строка81, Connector.Справочники.ДоговорыКонтрагентов.НайтиПоКоду(Строка.НомерДоговора), "ДоговорКонтрагента", Изменился);
		КонецЕсли;

		// ОСОБЫЕ СЛУЧАИ
		
		// Для ИП заполняем Графу7, кроме: Платежи по аренде, Услуги по охране, Перечисление налога (прочее)
 		Если НЕ Строка.Организация.УчитыватьНДС И КодСтатьи <> "000000033" И КодСтатьи <> "000000052" И КодСтатьи <> "000000042" Тогда
				
				ИзменитьРеквизит(ОбъектБух, Истина,	"РучнаяНастройка_УСН", 	Изменился);
				ИзменитьРеквизит(ОбъектБух, Строка.СуммаДокумента,	"Графа6_УСН", 	Изменился);
				ИзменитьРеквизит(ОбъектБух, Строка.СуммаДокумента,	"Графа7_УСН", 	Изменился);
				ИзменитьРеквизит(ОбъектБух, ?(Прав(стрСодержание, 11) = "по договору", стрСодержание + " """ + Наименование(Строка81.ДоговорКонтрагента) + """.", стрСодержание),	"Содержание_УСН", 	Изменился);
		
		КонецЕсли;
		
	КонецЦикла;
	
	Если Изменился Тогда
		Возврат ЗаписатьДокументБух(ОбъектБух, СсылкаНаОбъект.ПометкаУдаления, СсылкаНаОбъект.Проведен, Connector, стрОшибки);
	Иначе
		Возврат ОбъектБух.Ссылка;
	КонецЕсли;
	
КонецФункции
Функция Получить_ДокументПлатежноеПоручениеВходящее(Connector, СсылкаНаОбъект, ПеренесенныеОбъекты, стрОшибки = "")
	
	ОбъектБух = ПолучитьОбъектБухПоГуиду(Connector, СсылкаНаОбъект, Connector.Документы.ПоступлениеНаРасчетныйСчет ,,Истина,,стрОшибки);
	Если ОбъектБух = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 
	|	Дата,
	|	Номер,
	|	Организация,
	|	ВЫБОР КОГДА Партнер.ЭтоКонтрагентБухгалтерии ТОГДА Партнер ИНАЧЕ Контрагент			КОНЕЦ Контрагент,
	|	ВЫБОР КОГДА Партнер.ЭтоКонтрагентБухгалтерии ТОГДА Контрагент ИНАЧЕ НЕОПРЕДЕЛЕНО 	КОНЕЦ ДоговорКонтрагента,
	|	БанковскийСчетОрганизации 	СчетОрганизации,
	|	БанковскийСчетПартнера 		СчетКонтрагента,
	|	Валюта 						ВалютаДокумента,
	|	Сумма 						СуммаДокумента,
	|	Дата						ДатаВходящегоДокумента,
	|	НомерВходящегоДокумента,
	|	СуммаНДС,
	|	СтавкаНДС,
	|	НазначениеПлатежа,
	|	Комментарий,
	|	КурсЦБНаДатуПриобретенияВалюты		КурсНаДатуПриобретенияРеализацииВалюты,
	|	СуммаВзаиморасчетов,
	|   КурсВзаиморасчетов,
	|	НомерДоговора,
	|	ВидОперации,
	//|   СтатьяДвиженияДенежныхСредств
	|	СтатьяДДСБух СтатьяДвиженияДенежныхСредств
	|ИЗ
	|	Документ.ПлатежноеПоручениеВходящее
	|ГДЕ
	|	Ссылка = &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	
	Таблица 	= Запрос.Выполнить().Выгрузить();
	Колонки 	= Таблица.Колонки;
	Изменился 	= Ложь;
	
	Для Каждого Строка Из Таблица Цикл
		
		Если Не ЗаполнитьОбъектПоСтрокеЗапроса(Connector, ОбъектБух, Строка, Колонки, ПеренесенныеОбъекты, Изменился, стрОшибки) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ВидДоговора81 = Неопределено;
		ЗаполнитьПрочееПоСтроке = Истина;
		
		// Добавим строку
			
		Если ОбъектБух.РасшифровкаПлатежа.Количество() <> 1 Тогда
			ОбъектБух.РасшифровкаПлатежа.Очистить();
			Строка81 = ОбъектБух.РасшифровкаПлатежа.Добавить();
		Иначе
			Строка81 = ОбъектБух.РасшифровкаПлатежа.Получить(0);
		КонецЕсли;
	
		ИзменитьРеквизит(ОбъектБух, Connector.ПланыСчетов.Хозрасчетный.РасчетныеСчета ,	"СчетБанк", Изменился);	// 51
	
		// ОПЛАТА ПОКУПАТЕЛЯ 
			
		Если СсылкаНаОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя Тогда
			
			ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.РасчетыСПокупателями ,		"СчетУчетаРасчетовСКонтрагентом", 	Изменился);	// 62.01 
			ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным ,	"СчетУчетаРасчетовПоАвансам", 		Изменился);	// 62.02 
				
			ВидДоговора81 = Connector.Перечисления.ВидыДоговоровКонтрагентов.СПокупателем; 	
			ИзменитьРеквизит(Строка81, Connector.Перечисления.СпособыПогашенияЗадолженности.Автоматически ,"СпособПогашенияЗадолженности", Изменился);
 		
   		// ОПЛАТА ПО БАНКОВСКОЙ КАРТЕ (ПРОЧИЕ ПОСТУПЛЕНИЯ)
		
		ИначеЕсли 
			СсылкаНаОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПоБанковскойКарте Тогда

			ИзменитьРеквизит(ОбъектБух, Connector.ПланыСчетов.Хозрасчетный.ВыручкаЕНВД ,	"СчетУчетаРасчетовСКонтрагентом", 	Изменился);	// 90.01.2 
			ИзменитьРеквизит(ОбъектБух, ПолучитьСубконтоТовары81(Connector) ,				"СубконтоКт1", 	Изменился); // Товар(пр. ТМЦ)
			ИзменитьРеквизит(ОбъектБух, Connector.Справочники.Номенклатура.ПустаяСсылка(),	"СубконтоКт2", 	Изменился); // типизируем
			ИзменитьРеквизит(ОбъектБух, Истина,	"ДоходыЕНВД_УСН", 		Изменился);
			ИзменитьРеквизит(ОбъектБух, Истина,	"РучнаяНастройка_УСН", 	Изменился);
			ИзменитьРеквизит(ОбъектБух, Строка.СуммаДокумента,	"Графа4_УСН", 	Изменился);
			ИзменитьРеквизит(ОбъектБух, "Прочий приход денежных средств: Оплата покупателей по пластиковым картам.","Содержание_УСН", 	Изменился);

			//ЗаполнитьПрочееПоСтроке = Ложь;
			
			
		// ВОЗВРАТ ОТ ПОСТАВЩИКА	
				
		ИначеЕсли
			СсылкаНаОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика Тогда
				
			ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками ,		"СчетУчетаРасчетовСКонтрагентом", 	Изменился);	// 60.01 
			ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным ,	"СчетУчетаРасчетовПоАвансам", 		Изменился);	// 60.02 
				
			ВидДоговора81 = Connector.Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
			ИзменитьРеквизит(Строка81, Connector.Перечисления.СпособыПогашенияЗадолженности.Автоматически ,"СпособПогашенияЗадолженности", Изменился);
	

		// ПРИОБРЕТЕНИЕ ИНОСТРАННОЙ ВАЛЮТЫ

		//ИначеЕсли 
		//	СсылкаНаОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
		//
		//	ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.ПриобретениеИностраннойВалюты , "СчетУчетаРасчетовСКонтрагентом", Изменился);	// 57.02				
		//	ИзменитьРеквизит(ОбъектБух, Истина, "ОтражатьРазницуВКурсеВСоставеОперационныхРасходов", Изменился);
		//	
		// РАСЧЕТЫ ПО КРЕДИТАМ И ЗАЙМАМ	
			
		ИначеЕсли 
			СсылкаНаОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам Тогда	
			
			ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.ДолгосрочныеКредиты , "СчетУчетаРасчетовСКонтрагентом", Изменился);	// 67.01				
			
		КонецЕсли;
 		
		// Прочее по строке
		
		Если ЗаполнитьПрочееПоСтроке Тогда
				
			ИзменитьРеквизит(Строка81, 1, "КратностьВзаиморасчетов", Изменился);
			ИзменитьРеквизит(Строка81, Строка.КурсВзаиморасчетов,	"КурсВзаиморасчетов", Изменился);
			ИзменитьРеквизит(Строка81, Строка.СуммаВзаиморасчетов,	"СуммаВзаиморасчетов", Изменился);
			ИзменитьРеквизит(Строка81, Строка.СуммаДокумента,	"СуммаПлатежа", Изменился);
			ИзменитьРеквизит(Строка81, Строка.СуммаНДС,			"СуммаНДС", Изменился);
			ИзменитьРеквизит(Строка81, Получить_ПеречислениеСтавкиНДС(Connector, Строка.СтавкаНДС),"СтавкаНДС", Изменился);
		КонецЕсли;   
		
		// Установим договор
		
		Если ВидДоговора81 <> Неопределено Тогда
			
			// возмем первый попавшийся
					
			ВалютаПоУмолчанию81 = ПолучитьОбъектВБухгалтерии(ПолучитьВалютуВзаиморасчетовПоУмолчанию(), Connector,,, ПеренесенныеОбъекты, стрОшибки);
			Если ВалютаПоУмолчанию81 = Неопределено Тогда
				Возврат Неопределено;
			КонецЕсли;		 
					
			СтруктураДоговора = Новый Структура("ВалютаВзаиморасчетов, ВидДоговора",
													ВалютаПоУмолчанию81,
													ВидДоговора81);
					
			Договор81 = ПолучитьДоговор81ИзОрганизации(Connector, Строка.Контрагент, Строка.ДоговорКонтрагента, ОбъектБух.Организация, ПеренесенныеОбъекты, Истина, СтруктураДоговора, ,стрОшибки);
			Если Договор81 = Неопределено Тогда
				Возврат Неопределено;
			КонецЕсли;
					
			ИзменитьРеквизит(Строка81, Договор81, "ДоговорКонтрагента", Изменился);
		ИначеЕсли  ЗначениеЗаполнено(Строка.НомерДоговора) Тогда
			
			ИзменитьРеквизит(Строка81, Connector.Справочники.ДоговорыКонтрагентов.НайтиПоКоду(Строка.НомерДоговора), "ДоговорКонтрагента", Изменился);
		КонецЕсли;
				
		// Статья движения денежных средств
		
		Статья81 = ПолучитьОбъектВБухгалтерии(Строка.СтатьяДвиженияДенежныхСредств, Connector,,, ПеренесенныеОбъекты, стрОшибки);
		Если Статья81 = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;	
	 	ИзменитьРеквизит(Строка81, Статья81, "СтатьяДвиженияДенежныхСредств", Изменился);
		 
	КонецЦикла;

	Если Изменился Тогда
		Возврат ЗаписатьДокументБух(ОбъектБух, СсылкаНаОбъект.ПометкаУдаления, СсылкаНаОбъект.Проведен, Connector, стрОшибки);
	Иначе
		Возврат ОбъектБух.Ссылка;
	КонецЕсли;
	
КонецФункции

Функция Получить_ДокументЧекККМ(Connector, СсылкаНаОбъект, ПеренесенныеОбъекты, стрОшибки = "")
	
	// Создаем из Чека ПКО, а из Чека на возврат РКО
	
	ОбъектБух = Неопределено;
	Запрос = Новый Запрос("
		|ВЫБРАТЬ 
		|	Ссылка.Дата,
		|	Ссылка.Номер,
		|	Ссылка.Касса.Организация			Организация,
		|	Ссылка.Валюта 						ВалютаДокумента,
		//|   Ссылка.СтатьяДДС					СтатьяДвиженияДенежныхСредств,
		|	Ссылка.СтатьяДДСБух					СтатьяДвиженияДенежныхСредств,
		|	ВЫБОР 
		|		КОГДА Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Продажа) 
		|		ТОГДА Ссылка.Склад						
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) 
		|		КОНЕЦ Контрагент,
		|	ВЫБОР 
		|		КОГДА Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Продажа) ТОГДА ""ПриходныйКассовыйОрдер""
		|		КОГДА Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат) ТОГДА ""РасходныйКассовыйОрдер""
		|		ИНАЧЕ """" 						
		|		КОНЕЦ ИмяДокумента,
		|	СУММА(Сумма) 						СуммаДокумента
		|ИЗ
		|	Документ.ЧекККМ.Оплаты
		|ГДЕ
		|	Ссылка = &Ссылка И ТипОплаты = &Наличка
		|СГРУППИРОВАТЬ ПО Ссылка 
		|ИМЕЮЩИЕ СУММА(Сумма) = Ссылка.Сумма
		|");
		
		Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
		Запрос.УстановитьПараметр("Наличка", Перечисления.ТипОплаты.Наличные);
		
		Таблица = Запрос.Выполнить().Выгрузить();
	    Если Таблица.Количество() И Таблица[0].ИмяДокумента <> "" Тогда
			
			Возврат Вычислить("Получить_Документ" + Строка(Таблица[0].ИмяДокумента) + "(Connector, СсылкаНаОбъект, ПеренесенныеОбъекты, стрОшибки, Таблица)");
		Иначе
			СтрОшибки = "Данные для выгрузки не найдены";
			Возврат Неопределено;
		КонецЕсли;
	   		
КонецФункции

Функция Получить_ДокументПриходныйКассовыйОрдер(Connector, СсылкаНаОбъект, ПеренесенныеОбъекты, стрОшибки = "", Таблица = Неопределено)
	
	ОбъектБух = ПолучитьОбъектБухПоГуиду(Connector, СсылкаНаОбъект, Connector.Документы.ПриходныйКассовыйОрдер ,,Истина,,стрОшибки);
	Если ОбъектБух = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РазничнаяВыручка = Истина;
	ВидДоговора81 = Неопределено;
		
	Если Таблица = Неопределено Тогда  РазничнаяВыручка = Ложь;

		Запрос = Новый Запрос("
		|ВЫБРАТЬ 
		|	Дата,
		|	Номер,
		|	Организация,
		|	ВЫБОР КОГДА Партнер.ЭтоКонтрагентБухгалтерии ТОГДА Партнер ИНАЧЕ Контрагент			КОНЕЦ Контрагент,
		|	ВЫБОР КОГДА Партнер.ЭтоКонтрагентБухгалтерии ТОГДА Контрагент ИНАЧЕ НЕОПРЕДЕЛЕНО 	КОНЕЦ ДоговорКонтрагента,
		|	Валюта 				ВалютаДокумента,
		|	Сумма 				СуммаДокумента,
		|   ВидОперации			ВидОперации,
		//|   ВЫБОР КОГДА СтатьяДДС = &Ремонт ТОГДА &ОплатаПокупателя ИНАЧЕ СтатьяДДС КОНЕЦ СтатьяДвиженияДенежныхСредств
		|   ВЫБОР КОГДА СтатьяДДСБух = &Ремонт ТОГДА &ОплатаПокупателя ИНАЧЕ СтатьяДДСБух КОНЕЦ СтатьяДвиженияДенежныхСредств
		|ИЗ
		|	Документ.ПриходныйКассовыйОрдер
		|ГДЕ
		|	Ссылка = &Ссылка
		|");
		
		Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
		Запрос.УстановитьПараметр("Ремонт", Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("000000019"));
		Запрос.УстановитьПараметр("ОплатаПокупателя", Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("000000021"));

		Таблица 	= Запрос.Выполнить().Выгрузить(); 			
		
	КонецЕсли;
	
	Колонки 	= Таблица.Колонки;
	Изменился 	= Ложь;
	
	Для Каждого Строка Из Таблица Цикл
		
		Если Не ЗаполнитьОбъектПоСтрокеЗапроса(Connector, ОбъектБух, Строка, Колонки, ПеренесенныеОбъекты, Изменился, стрОшибки) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ИзменитьРеквизит(ОбъектБух, Connector.ПланыСчетов.Хозрасчетный.НайтиПоКоду("50" + ПолучитьСубсчетКассы(СсылкаНаОбъект.Касса)), "СчетКасса", Изменился); // 50.01.03
		
		// Добавим строку
			
		Если ОбъектБух.РасшифровкаПлатежа.Количество() <> 1 Тогда
			ОбъектБух.РасшифровкаПлатежа.Очистить();
			Строка81 = ОбъектБух.РасшифровкаПлатежа.Добавить();
		Иначе
			Строка81 = ОбъектБух.РасшифровкаПлатежа.Получить(0);
		КонецЕсли;
		
		Если НЕ РазничнаяВыручка Тогда 
			
			СпособыПогашенияЗадолженности =  Connector.Перечисления.СпособыПогашенияЗадолженности.Автоматически;
	
			Если СсылкаНаОбъект.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя Тогда
				ВидДоговора81 = Connector.Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
					
				ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.РасчетыСПокупателями ,		"СчетУчетаРасчетовСКонтрагентом", 	Изменился);	// 62.01 
				ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным ,	"СчетУчетаРасчетовПоАвансам", 		Изменился);	// 62.02 

			ИначеЕсли 
				СсылкаНаОбъект.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПоставщика Тогда // Возврат денежных средств поставщиком
				ВидДоговора81 = Connector.Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
					
				ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками ,		"СчетУчетаРасчетовСКонтрагентом", 	Изменился);	// 60.01 
				ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным ,	"СчетУчетаРасчетовПоАвансам", 		Изменился);	// 60.02 
			Иначе
				// с любым другим видом операции приходники не преносим
				стрОшибки = "Для данного вида операции интеграция с Бухгалтерией не предусмотрена.";
				Возврат Неопределено;
			КонецЕсли;
		Иначе
			ИзменитьРеквизит(ОбъектБух, Connector.Перечисления.ВидыОперацийПКО.РозничнаяВыручка, "ВидОперации", Изменился); 	
			ИзменитьРеквизит(ОбъектБух, Истина, "ВыручкаСНТТ", Изменился);
			СпособыПогашенияЗадолженности = Неопределено;	
		КонецЕсли;
	                                                                                           
		ИзменитьРеквизит(Строка81, СпособыПогашенияЗадолженности, "СпособПогашенияЗадолженности", Изменился);
				
		ИзменитьРеквизит(Строка81, 1, "КратностьВзаиморасчетов", Изменился);
		ИзменитьРеквизит(Строка81, 1, "КурсВзаиморасчетов", Изменился);
		ИзменитьРеквизит(Строка81, Строка.СуммаДокумента,	"СуммаВзаиморасчетов", Изменился);
		ИзменитьРеквизит(Строка81, 0, "СуммаНДС", Изменился);
		ИзменитьРеквизит(Строка81, Connector.Перечисления.СтавкиНДС.БезНДС, "СтавкаНДС", Изменился);
		ИзменитьРеквизит(Строка81, Строка.СуммаДокумента,	"СуммаПлатежа", Изменился);
	 	
		// Установим договор
		
		Если ВидДоговора81 <> Неопределено Тогда
			
			// возмем первый попавшийся
					
			ВалютаПоУмолчанию81 = ПолучитьОбъектВБухгалтерии(ПолучитьВалютуВзаиморасчетовПоУмолчанию(), Connector,,, ПеренесенныеОбъекты, стрОшибки);
			Если ВалютаПоУмолчанию81 = Неопределено Тогда
				Возврат Неопределено;
			КонецЕсли;		 
					
			СтруктураДоговора = Новый Структура("ВалютаВзаиморасчетов, ВидДоговора",
													ВалютаПоУмолчанию81,
													ВидДоговора81);
					
			Договор81 = ПолучитьДоговор81ИзОрганизации(Connector, Строка.Контрагент, Строка.ДоговорКонтрагента, ОбъектБух.Организация, ПеренесенныеОбъекты, Истина, СтруктураДоговора, ,стрОшибки);
			Если Договор81 = Неопределено Тогда
				Возврат Неопределено;
			КонецЕсли;
					
			ИзменитьРеквизит(Строка81, Договор81, "ДоговорКонтрагента", Изменился);
		КонецЕсли;
		
		Статья81 = ПолучитьОбъектВБухгалтерии(Строка.СтатьяДвиженияДенежныхСредств, Connector,,, ПеренесенныеОбъекты, стрОшибки);
		Если Статья81 = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;	
	 	ИзменитьРеквизит(Строка81, Статья81, "СтатьяДвиженияДенежныхСредств", Изменился);
		
	КонецЦикла;

	Если Изменился Тогда
		Возврат ЗаписатьДокументБух(ОбъектБух, СсылкаНаОбъект.ПометкаУдаления, СсылкаНаОбъект.Проведен, Connector, стрОшибки);
	Иначе
		Возврат ОбъектБух.Ссылка;
	КонецЕсли;
	
КонецФункции
Функция Получить_ДокументРасходныйКассовыйОрдер(Connector, СсылкаНаОбъект, ПеренесенныеОбъекты, стрОшибки = "", Таблица = Неопределено)
	
	ОбъектБух = ПолучитьОбъектБухПоГуиду(Connector, СсылкаНаОбъект, Connector.Документы.РасходныйКассовыйОрдер ,,Истина,,стрОшибки);
	Если ОбъектБух = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЧекККМ = Истина;
	ВидДоговора81 = Неопределено;
	
	Если Таблица = Неопределено Тогда ЧекККМ = Ложь;

		Запрос = Новый Запрос("
		|ВЫБРАТЬ 
		|	Дата,
		|	Номер,
		|	Организация,
		|	ВЫБОР КОГДА Партнер.ЭтоКонтрагентБухгалтерии ТОГДА Партнер ИНАЧЕ Контрагент			КОНЕЦ Контрагент,
		|	ВЫБОР КОГДА Партнер.ЭтоКонтрагентБухгалтерии ТОГДА Контрагент ИНАЧЕ НЕОПРЕДЕЛЕНО 	КОНЕЦ ДоговорКонтрагента,
		|	Валюта 				ВалютаДокумента,
		|	Сумма 				СуммаДокумента,
		|	ВидОперации         ВидОперации,
		//|   СтатьяДДС			СтатьяДвиженияДенежныхСредств
		|   СтатьяДДСБух			СтатьяДвиженияДенежныхСредств
		
		|ИЗ
		|	Документ.РасходныйКассовыйОрдер
		|ГДЕ
		|	Ссылка = &Ссылка
		|");
		
		Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
		Таблица 	= Запрос.Выполнить().Выгрузить(); 		
	КонецЕсли;
	
	Колонки 	= Таблица.Колонки;
	Изменился 	= Ложь;
	
	Для Каждого Строка Из Таблица Цикл
		
		Если Не ЗаполнитьОбъектПоСтрокеЗапроса(Connector, ОбъектБух, Строка, Колонки, ПеренесенныеОбъекты, Изменился, стрОшибки) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ИзменитьРеквизит(ОбъектБух, Connector.ПланыСчетов.Хозрасчетный.НайтиПоКоду("50" + ПолучитьСубсчетКассы(СсылкаНаОбъект.Касса)), "СчетКасса", Изменился);
		Если Строка.Контрагент.Пустая() Тогда
			ИзменитьРеквизит(ОбъектБух, Connector.Справочники.Контрагенты.ПустаяСсылка(), "Контрагент", Изменился);
		КонецЕсли;
		
		// Добавим строку
			
		Если ОбъектБух.РасшифровкаПлатежа.Количество() <> 1 Тогда
			ОбъектБух.РасшифровкаПлатежа.Очистить();
			Строка81 = ОбъектБух.РасшифровкаПлатежа.Добавить();
		Иначе
			Строка81 = ОбъектБух.РасшифровкаПлатежа.Получить(0);
		КонецЕсли;
		
		Если НЕ ЧекККМ Тогда 
			
			СпособыПогашенияЗадолженности =  Connector.Перечисления.СпособыПогашенияЗадолженности.Автоматически;

			Если СсылкаНаОбъект.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПокупателю Тогда // Возврат денежных средств покупателю
				ВидДоговора81 = Connector.Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
				
				ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.РасчетыСПокупателями ,		"СчетУчетаРасчетовСКонтрагентом", 	Изменился);	// 62.01 
				ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным ,	"СчетУчетаРасчетовПоАвансам", 		Изменился);	// 62.02 

			ИначеЕсли
				СсылкаНаОбъект.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику Тогда
				ВидДоговора81 = Connector.Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
				
				ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками ,		"СчетУчетаРасчетовСКонтрагентом", 	Изменился);	// 60.01 
				ИзменитьРеквизит(Строка81, Connector.ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным ,	"СчетУчетаРасчетовПоАвансам", 		Изменился);	// 60.02 
			Иначе
				// все остальное на прочие расходы
				ИзменитьРеквизит(ОбъектБух, Connector.Перечисления.ВидыОперацийРКО.ПрочийРасход, "ВидОперации", Изменился);
				ИзменитьРеквизит(ОбъектБух, Connector.ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажуЕНВД, "СчетУчетаРасчетовСКонтрагентом", Изменился);  //90.07.2
				СпособыПогашенияЗадолженности = Неопределено;
			КонецЕсли;
		Иначе
			// Чеки на возврат как прочие расходы
			ИзменитьРеквизит(ОбъектБух, Connector.Перечисления.ВидыОперацийРКО.ПрочийРасход, "ВидОперации", Изменился);			
			
			ИзменитьРеквизит(ОбъектБух, Connector.ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажуЕНВД, "СчетУчетаРасчетовСКонтрагентом", Изменился);  //90.07.2
			СпособыПогашенияЗадолженности = Неопределено;
	
		КонецЕсли;
				
		ИзменитьРеквизит(Строка81, СпособыПогашенияЗадолженности, "СпособПогашенияЗадолженности", Изменился);
				
		ИзменитьРеквизит(Строка81, 1, "КратностьВзаиморасчетов", Изменился);
		ИзменитьРеквизит(Строка81, 1, "КурсВзаиморасчетов", Изменился);
		ИзменитьРеквизит(Строка81, Строка.СуммаДокумента,	"СуммаВзаиморасчетов", Изменился);
		ИзменитьРеквизит(Строка81, 0, "СуммаНДС", Изменился);
		ИзменитьРеквизит(Строка81, Connector.Перечисления.СтавкиНДС.БезНДС, "СтавкаНДС", Изменился);
		ИзменитьРеквизит(Строка81, Строка.СуммаДокумента,	"СуммаПлатежа", Изменился);
	 	
		// Установим договор
		
		Если ВидДоговора81 <> Неопределено Тогда
			
			// возмем первый попавшийся
					
			ВалютаПоУмолчанию81 = ПолучитьОбъектВБухгалтерии(ПолучитьВалютуВзаиморасчетовПоУмолчанию(), Connector,,, ПеренесенныеОбъекты, стрОшибки);
			Если ВалютаПоУмолчанию81 = Неопределено Тогда
				Возврат Неопределено;
			КонецЕсли;		 
					
			СтруктураДоговора = Новый Структура("ВалютаВзаиморасчетов, ВидДоговора",
													ВалютаПоУмолчанию81,
													ВидДоговора81);
					
			Договор81 = ПолучитьДоговор81ИзОрганизации(Connector, Строка.Контрагент, Строка.ДоговорКонтрагента, ОбъектБух.Организация, ПеренесенныеОбъекты, Истина, СтруктураДоговора, ,стрОшибки);
			Если Договор81 = Неопределено Тогда
				Возврат Неопределено;
			КонецЕсли;
					
			ИзменитьРеквизит(Строка81, Договор81, "ДоговорКонтрагента", Изменился);
		КонецЕсли;
		
		Статья81 = ПолучитьОбъектВБухгалтерии(Строка.СтатьяДвиженияДенежныхСредств, Connector,,, ПеренесенныеОбъекты, стрОшибки);
		Если Статья81 = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;	
	 	ИзменитьРеквизит(Строка81, Статья81, "СтатьяДвиженияДенежныхСредств", Изменился);
		
	КонецЦикла;

	Если Изменился Тогда
		Возврат ЗаписатьДокументБух(ОбъектБух, СсылкаНаОбъект.ПометкаУдаления, СсылкаНаОбъект.Проведен, Connector, стрОшибки);
	Иначе
		Возврат ОбъектБух.Ссылка;
	КонецЕсли;
	
КонецФункции

// Перечисления

Функция Получить_ПеречислениеСтавкиНДС(Connector, СсылкаНаОбъект, стрОшибки = "")
	
	Если СсылкаНаОбъект = Перечисления.СтавкиНДС.НДС0 Тогда
		
		Возврат Connector.Перечисления.СтавкиНДС.НДС0;
		
	ИначеЕсли СсылкаНаОбъект = Перечисления.СтавкиНДС.БезНДС Тогда
		
		Возврат Connector.Перечисления.СтавкиНДС.БезНДС;
		
	ИначеЕсли СсылкаНаОбъект = Перечисления.СтавкиНДС.НДС10 Тогда
		
		Возврат Connector.Перечисления.СтавкиНДС.НДС10;
		
	ИначеЕсли СсылкаНаОбъект = Перечисления.СтавкиНДС.НДС10_110 Тогда
		
		Возврат Connector.Перечисления.СтавкиНДС.НДС10_110;
		
	ИначеЕсли СсылкаНаОбъект = Перечисления.СтавкиНДС.НДС18 Тогда
		
		Возврат Connector.Перечисления.СтавкиНДС.НДС18;
		
	ИначеЕсли СсылкаНаОбъект = Перечисления.СтавкиНДС.НДС18_118 Тогда
		
		Возврат Connector.Перечисления.СтавкиНДС.НДС18_118;
		
	ИначеЕсли СсылкаНаОбъект = Перечисления.СтавкиНДС.НДС20 Тогда
		
		Возврат Connector.Перечисления.СтавкиНДС.НДС20;
		
	ИначеЕсли СсылкаНаОбъект = Перечисления.СтавкиНДС.НДС20_120 Тогда
		
		Возврат Connector.Перечисления.СтавкиНДС.НДС20_120;
		
	Иначе
		
		стрОшибки = "не известная ставка НДС " + СсылкаНаОбъект;
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции
Функция Получить_ПеречислениеПолФизическихЛиц(Connector, СсылкаНаОбъект, стрОшибки = "")
	
	Если СсылкаНаОбъект = Перечисления.ПолФизическихЛиц.Женский Тогда
		
		Возврат Connector.Перечисления.ПолФизическихЛиц.Женский;
		
	ИначеЕсли СсылкаНаОбъект = Перечисления.ПолФизическихЛиц.Мужской Тогда
		
		Возврат Connector.Перечисления.ПолФизическихЛиц.Мужской;
		
	Иначе
		
		стрОшибки = "не известный пол " + СсылкаНаОбъект;
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции
Функция Получить_ПеречислениеВидыОперацийКомплектацияНоменклатуры(Connector, СсылкаНаОбъект, стрОшибки = "")
	
	Если СсылкаНаОбъект = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация Тогда
		
		Возврат Connector.Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация;
		
	ИначеЕсли СсылкаНаОбъект = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Разукомплектация Тогда
		
		Возврат Connector.Перечисления.ВидыОперацийКомплектацияНоменклатуры.Разукомплектация;
		
	Иначе
		
		стрОшибки = "не вид операции комплектации " + СсылкаНаОбъект;
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции
Функция Получить_ПеречислениеВидыОперацийПоступлениеДенежныхСредств(Connector, СсылкаНаОбъект, стрОшибки = "")
	
	Если СсылкаНаОбъект = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПоБанковскойКарте Тогда
		Возврат Connector.Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление;
	Иначе
		Возврат Connector.Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Получить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Индекс(СсылкаНаОбъект));
	КонецЕсли;
	
КонецФункции
Функция Получить_ПеречислениеВидыОперацийСписаниеДенежныхСредств(Connector, СсылкаНаОбъект, стрОшибки = "")

	Возврат Connector.Перечисления.ВидыОперацийСписаниеДенежныхСредств.Получить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.Индекс(СсылкаНаОбъект));
	
КонецФункции
Функция Получить_ПеречислениеВидыПлатежейВГосБюджет(Connector, СсылкаНаОбъект, стрОшибки = "")

	Возврат Connector.Перечисления.ВидыПлатежейВГосБюджет.Получить(Перечисления.ВидыПлатежейВГосБюджет.Индекс(СсылкаНаОбъект));
	
КонецФункции

Функция Получить_ПеречислениеТипКонтактнойИнформации(Connector, СсылкаНаОбъект, стрОшибки = "", ПеренесенныеОбъекты = Неопределено)
		
	ТипИнформации = СсылкаНаОбъект;
	
	Если СсылкаНаОбъект.Уровень() = 1 Тогда
		ТипИнформации = СсылкаНаОбъект.Родитель;
	ИначеЕсли СсылкаНаОбъект.Уровень() = 2 Тогда
		ТипИнформации = СсылкаНаОбъект.Родитель.Родитель;
	Иначе Возврат Неопределено;	КонецЕсли;
	
	
	ОбъектБух = Неопределено;
	
	Если ПеренесенныеОбъекты <> Неопределено Тогда		
		
		ОбъектБух = ПеренесенныеОбъекты[ТипИнформации];
	
		// Если он уже загружался тогда вернем
		Если ОбъектБух <> Неопределено Тогда
			Возврат ОбъектБух;
		КонецЕсли; КонецЕсли;
	
	Если ТипИнформации = Справочники.ВидыКонтактнойИнформации.Адрес Тогда
		ОбъектБух = Connector.Перечисления.ТипыКонтактнойИнформации.Адрес;
	ИначеЕсли
		ТипИнформации = Справочники.ВидыКонтактнойИнформации.Телефон Тогда
		ОбъектБух = Connector.Перечисления.ТипыКонтактнойИнформации.Телефон;
	ИначеЕсли 
		ТипИнформации = Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		ОбъектБух = Connector.Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	ИначеЕсли
		ТипИнформации = Справочники.ВидыКонтактнойИнформации.ВебСтраница Тогда
		ОбъектБух = Connector.Перечисления.ТипыКонтактнойИнформации.ВебСтраница;
	КонецЕсли;		
	
	Если ОбъектБух <> Неопределено Тогда
		ПеренесенныеОбъекты.Вставить(ТипИнформации, ОбъектБух);
	КонецЕсли;
	
	Возврат ОбъектБух;
	
КонецФункции
Функция Получить_ПеречислениеВидыОперацийПКО(Connector, СсылкаНаОбъект, стрОшибки = "")
	
	Если СсылкаНаОбъект = Перечисления.ВидыОперацийПКО.ОплатаПокупателя Тогда
		Возврат Connector.Перечисления.ВидыОперацийПКО.ОплатаПокупателя;
		
	ИначеЕсли 
		СсылкаНаОбъект = Перечисления.ВидыОперацийПКО.ВозвратОтПоставщика Тогда
		Возврат Connector.Перечисления.ВидыОперацийПКО.ВозвратОтПоставщика;
		
	ИначеЕсли 
		СсылкаНаОбъект = Перечисления.ВидыОперацийПКО.ПрочийПриход Тогда
		Возврат Connector.Перечисления.ВидыОперацийПКО.ПрочийПриход;
				
	Иначе
		стрОшибки = "не известная ставка НДС " + СсылкаНаОбъект;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции
Функция Получить_ПеречислениеВидыОперацийРКО(Connector, СсылкаНаОбъект, стрОшибки = "")

	Если СсылкаНаОбъект = Перечисления.ВидыОперацийРКО.ОплатаПоставщику Тогда
		Возврат Connector.Перечисления.ВидыОперацийРКО.ОплатаПоставщику;
		
	ИначеЕсли 
		СсылкаНаОбъект = Перечисления.ВидыОперацийРКО.ВозвратПокупателю Тогда
		Возврат Connector.Перечисления.ВидыОперацийРКО.ВозвратПокупателю;
		
	ИначеЕсли 
		СсылкаНаОбъект = Перечисления.ВидыОперацийРКО.ПрочийРасход Тогда
		Возврат Connector.Перечисления.ВидыОперацийРКО.ПрочийРасход;
				
	Иначе
		стрОшибки = "не известная ставка НДС " + СсылкаНаОбъект;
		Возврат Неопределено;
	КонецЕсли;
КонецФункции
Функция Получить_ПеречислениеУровниБюджетов(Connector, СсылкаНаОбъект, стрОшибки = "")

	Возврат Connector.Перечисления.УровниБюджетов.Получить(Перечисления.УровниБюджетов.Индекс(СсылкаНаОбъект));

КонецФункции



       
// ОСОБЫЕ СЛУЧИ

Процедура ПеревестиУслугиИзТоваров(Connector, Товары81, Услуги81, Изменился)
	
	Если Услуги81.Количество() Тогда
		Услуги81.Очистить();
		Изменился = Истина;
	КонецЕсли;
	
	КолСтрок 	= Товары81.Количество();
	Ном 		= 0;
	Для Ном = 1 По КолСтрок Цикл
		
		ИндСтроки 	= КолСтрок - Ном;
		Строка81 	= Товары81.Получить(ИндСтроки);
		
		Если Строка81.Номенклатура.Услуга Тогда
			
			НовСтрока81 = Услуги81.Добавить();
			НовСтрока81.Номенклатура 	= Строка81.Номенклатура;
			НовСтрока81.Количество 		= Строка81.Количество;
			НовСтрока81.Цена 			= Строка81.Цена;
			НовСтрока81.Сумма 			= Строка81.Сумма;
			НовСтрока81.СтавкаНДС 		= Строка81.СтавкаНДС;
			НовСтрока81.СуммаНДС 		= Строка81.СуммаНДС;
			НовСтрока81.СчетУчетаНДСПоРеализации = Connector.ПланыСчетов.Хозрасчетный.Продажи_НДС;		// 90.03
			НовСтрока81.СчетДоходов 	= Connector.ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД;   			// 90.01.2
			НовСтрока81.СчетРасходов 	= Connector.ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД; // 90.02.1
			НовСтрока81.Субконто 		= ПолучитьСубконтоУслуги81(Connector);
			
			Товары81.Удалить(ИндСтроки);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьУслугиИзТоваров(Connector, Товары81)
	
	КолСтрок 	= Товары81.Количество();
	Ном 		= 0;
	Для Ном = 1 По КолСтрок Цикл
		
		ИндСтроки 	= КолСтрок - Ном;
		Строка81 	= Товары81.Получить(ИндСтроки);
		
		Если Строка81.Номенклатура.Услуга Тогда
			
			Товары81.Удалить(ИндСтроки);
	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры



Процедура ЗаполнитьДоговор81(Договор81, Контрагент81, Организация81, ПараметрыДоговора, Изменился)
	
	Наименование = "Сформированный договор (3)";
	
	ИзменитьРеквизит(Договор81,	Контрагент81, "Владелец", Изменился);
	ИзменитьРеквизит(Договор81,	Организация81, "Организация", Изменился);
	
	Если ПустаяСтрока(Договор81.Наименование) Тогда
		Изменился = Истина;
		Договор81.Наименование = Наименование;
	КонецЕсли;		
	
	// Установим основные параметры договора
				
	Если ПараметрыДоговора <> Неопределено Тогда
		Для КАждого Элемент Из ПараметрыДоговора Цикл
			
			Договор81[Элемент.Ключ] = Элемент.Значение;
				
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры
Функция ПолучитьДоговор81ИзОрганизации(Connector, ПартнерИлиКонтрагент, КонтрагентКакДоговор = Неопределено, Организация81, ПеренесенныеОбъекты, СоздаватьНовыйЕслиНеНайден = Истина, ПараметрыДоговора = Неопределено, ДопПараметрыДоговора = Неопределено, СтрОшибки = "")

	// Если Контрагент81 - неопределено тогда действем по старой схеме
	// ели наоборот то партнер становится контрагентом а контрагент договором
	
	// подготовим параметры
	
	Контрагент81 = Получить_СправочникКонтрагенты(Connector, ПартнерИлиКонтрагент, ПеренесенныеОбъекты);
	Если Контрагент81 = Неопределено Тогда
		Возврат Неопределено; КонецЕсли;
	
	Изменился = Ложь;
	
	Если КонтрагентКакДоговор = Неопределено Тогда
	
		Если ПараметрыДоговора = Неопределено Тогда ПараметрыДоговора = Новый Структура; КонецЕсли;
		ПараметрыДоговора.Вставить("Организация", 	Организация81);
		ПараметрыДоговора.Вставить("Владелец", 		Контрагент81);
		
		// Зададим условия поиска
		
		стрУсловия = "";
		Для Каждого Элемент Из ПараметрыДоговора Цикл стрУсловия = стрУсловия + ?(стрУсловия = "",""," И ") + Элемент.Ключ + " = &" + Элемент.Ключ; КонецЦикла;
		
		// Выполним запрос 81
		
		Выполнение = COMServer.ПолучитьВыполнениеЗапроса81(Connector, "ВЫБРАТЬ Ссылка ИЗ Справочник.ДоговорыКонтрагентов ГДЕ " + стрУсловия,,ПараметрыДоговора);
		Если Выполнение = Неопределено Тогда Возврат Неопределено; КонецЕсли;
		
		Выборка = Выполнение.Выбрать();
		Если Выборка.Следующий() Тогда					Договор81 = Выборка.Ссылка.ПолучитьОбъект();
		ИначеЕсли Не СоздаватьНовыйЕслиНеНайден Тогда	Возврат Connector.Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		Иначе
			
			Договор81 = Connector.Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
			ЗаполнитьДоговор81(Договор81, Контрагент81, Организация81, ПараметрыДоговора, Изменился);
			Договор81.УстановитьНовыйКод(); КонецЕсли;
		
	Иначе //если договор жестко привязан к контрагенту а партнер к контрагенту
		
		Изменился = Истина;
		Договор81 = ПолучитьОбъектБухПоГуиду(Connector, КонтрагентКакДоговор, Connector.Справочники.ДоговорыКонтрагентов, Истина,,,стрОшибки);
		ЗаполнитьДоговор81(Договор81, Контрагент81, Организация81, ПараметрыДоговора, Изменился);
		
		Если Договор81.ЭтоНовый() Тогда
			Договор81.УстановитьНовыйКод();
		КонецЕсли;
		
	КонецЕсли;
	
	// Установим необязательные реквизиты договора
			
	Если ДопПараметрыДоговора <> Неопределено Тогда
		Для КАждого Элемент Из ДопПараметрыДоговора Цикл
			Если Договор81[Элемент.Ключ] <> Элемент.Значение Тогда
				
				Договор81[Элемент.Ключ] = Элемент.Значение;
				Изменился = Истина;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Изменился Тогда
		
		Договор81Ссылка = ЗаписатьСправочникБух(Договор81, Ложь, СтрОшибки);
			
		Если Договор81Ссылка = Неопределено  Тогда
			Возврат Неопределено;
		Иначе
			Возврат Договор81Ссылка
		КонецЕсли;
		
	Иначе
		
		Возврат Договор81.Ссылка;
		
	КонецЕсли;
	
КонецФункции
Функция ПолучитьСубконтоТовары81(Connector)
	
	Возврат Connector.Справочники.НоменклатурныеГруппы.НайтиПоКоду("000000002");
	
КонецФункции
Функция ПолучитьСубконтоУслуги81(Connector)
	
	Возврат Connector.Справочники.НоменклатурныеГруппы.НайтиПоКоду("Д-0000015");
	
КонецФункции
Функция ПолучитьВалютуВзаиморасчетовПоУмолчанию() Экспорт
	
	Возврат Справочники.Валюты.НайтиПоКоду("643");
	
КонецФункции

Функция ПолучитьДокументТребованиеНакладная(Connector, СсылкаНаОбъект, Реализация81, стрОшибки)
	
	ЭтоНоваяНакладная = Ложь;
	
	МенеджерБух = Connector.Документы.ТребованиеНакладная;
	СсылкаБух = МенеджерБух.ПолучитьСсылку(Connector.NewObject("UUID", XMLСтрока(СсылкаНаОбъект)));
	ОбъектБух = СсылкаБух.ПолучитьОбъект();
	
	Если ОбъектБух = Неопределено Тогда
		
		ОбъектБух = МенеджерБух.СоздатьДокумент();
		ОбъектБух.УстановитьСсылкуНового(СсылкаБух);
		
		ЭтоНоваяНакладная = Истина;
		
	КонецЕсли;
	
	Если ОбъектБух = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Материалы = ОбъектБух.Материалы;
	
	//если перезаписывается не новый документ и поле себестоимость нулевая (данный товар уже куплен в бухгалтерии), то такой документ в бухгалтерии не меняем

	ТоварнаяНакладнаяЗакрыта = Ложь; //НЕ ЭтоНоваяНакладная И НЕ Материалы.Итог("Себестоимость");

	ОбъектБух.Дата = Реализация81.Дата;
	ОбъектБух.Организация = Реализация81.Организация;
	ОбъектБух.Склад = Реализация81.Склад;
	ОбъектБух.Контрагент = Реализация81.Контрагент;
	ОбъектБух.СчетЗатрат = Connector.ПланыСчетов.Хозрасчетный.ОсновноеПроизводство; // 20.01
	ОбъектБух.ПодразделениеЗатрат = Connector.Справочники.ПодразделенияОрганизаций.НайтиПоКоду("000000010"); // Отдел сервиса 
	ОбъектБух.Субконто1 = ПолучитьСубконтоУслуги81(Connector);	// Выполнение работ по РИ
	ОбъектБух.Субконто2 = Connector.Справочники.СтатьиЗатрат.НайтиПоКоду("000000011"); // Материальные расходы
	
	Материалы.Очистить();
	
	Товары81 = Реализация81.Товары;	
	Для Каждого Строка81 ИЗ Товары81 Цикл
			
		НовСтрока = Материалы.Добавить();
		НовСтрока.Номенклатура	= Строка81.Номенклатура;
		НовСтрока.Количество	= Строка81.Количество;
		НовСтрока.Коэффициент	= Строка81.Коэффициент;
		НовСтрока.Себестоимость = ?(ТоварнаяНакладнаяЗакрыта, 0, Строка81.Цена);         
        НовСтрока.ОтражениеВУСН = Connector.Перечисления.ОтражениеВУСН.Принимаются;
		НовСтрока.Счет			= Connector.ПланыСчетов.Хозрасчетный.ЗапасныеЧасти;  // 10.05
	КонецЦикла;
	
	СсылкаНакладная = ЗаписатьДокументБух(ОбъектБух, СсылкаНаОбъект.ПометкаУдаления, СсылкаНаОбъект.Проведен, Connector, стрОшибки);
		
	Если СсылкаНакладная = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	Возврат СсылкаНакладная;
	
КонецФункции

Функция ПолучитьВедомостиНаВыплатуЗП(Connector, Организация81) Экспорт
		
	ЗапросТекст = "ВЫБРАТЬ ПЕРВЫЕ 15
		|	Ссылка,
		|	Номер,
		|	ПРЕДСТАВЛЕНИЕ(Ссылка) Представление
		//|	Зарплата.(ФизЛицо,
		//|	Сумма)
		|ИЗ
		|	Документ.ЗарплатаКВыплатеОрганизаций
		|ГДЕ
		|	Ссылка.Организация = &Организация
		|УПОРЯДОЧИТЬ ПО Дата Убыв
		|";
	стрОшибки = "";
	Выполнение = COMServer.ПолучитьВыполнениеЗапроса81(
			ЗапросТекст,, 
			Новый Структура("Организация", Организация81),
			стрОшибки,
			Connector);
			
	Если Выполнение = Неопределено Тогда
		Возврат Неопределено;		
	КонецЕсли;
		
	Выборка = Выполнение.Выбрать();
	Если Выборка.Количество() Тогда
		СписокВедомостей = Новый СписокЗначений;
		
		Пока Выборка.Следующий() Цикл
			СписокВедомостей.Добавить(Выборка.Номер, Выборка.Представление);		
		КонецЦикла;
		
		Возврат СписокВедомостей;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьДоговорыКонтрагента(Connector, Контрагент81) Экспорт
		
	ЗапросТекст = "ВЫБРАТЬ
		|	Код						Номер,
		|	ПРЕДСТАВЛЕНИЕ(Ссылка) 	Представление
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов
		|ГДЕ
		|	Ссылка.Владелец = &Контрагент И НЕ ПометкаУдаления
		|";
	стрОшибки = "";
	Выполнение = COMServer.ПолучитьВыполнениеЗапроса81(
			ЗапросТекст,, 
			Новый Структура("Контрагент", Контрагент81),
			стрОшибки,
			Connector);
			
	Если Выполнение = Неопределено Тогда
		Возврат Неопределено;		
	КонецЕсли;
		
	Выборка = Выполнение.Выбрать();
	Если Выборка.Количество() Тогда
		СписокКонтрагентов = Новый СписокЗначений;
		
		Пока Выборка.Следующий() Цикл
			СписокКонтрагентов.Добавить(Выборка.Номер, Выборка.Представление);		
		КонецЦикла;
		
		Возврат СписокКонтрагентов;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьВедомостьНаВыплатуЗППоНомеру(Connector, Номер, ДатаИнтервала) Экспорт
		
	Возврат Connector.Документы.ЗарплатаКВыплатеОрганизаций.НайтиПоНомеру(Номер, ДатаИнтервала);
	
КонецФункции

Функция ЗаполнитьТаблицуНаВыплатуЗП(Connector, ОбъектБух, Номер, ДатаИнтервала, СтатьяДвиженияДенежныхСредств, ПеренесенныеОбъекты, Изменился, стрОшибки)

	Статья81 = ПолучитьОбъектВБухгалтерии(СтатьяДвиженияДенежныхСредств, Connector,,, ПеренесенныеОбъекты, стрОшибки);
	Если Статья81 = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	СсылкаНаОбъект = Connector.Документы.ЗарплатаКВыплатеОрганизаций.НайтиПоНомеру(Номер, ДатаИнтервала);
	Если СсылкаНаОбъект <> Неопределено И НЕ СсылкаНаОбъект.Пустая() Тогда
		
		ЗапросТекст = "ВЫБРАТЬ
			|	ФизЛицо,
			|	Сумма
			|ИЗ
			|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата
			|ГДЕ
			|	Ссылка = &Ссылка
			|";
		стрОшибки = "";
		Выполнение = COMServer.ПолучитьВыполнениеЗапроса81(
				ЗапросТекст,, 
				Новый Структура("Ссылка", СсылкаНаОбъект),
				стрОшибки,
				Connector);
				
		Если Выполнение = Неопределено Тогда
			Возврат Ложь;		
		КонецЕсли;
		
		ТаблицаБух = ОбъектБух.ПеречислениеЗаработнойПлаты;
		Если ТаблицаБух.Количество() <> 1 Тогда
			ТаблицаБух.Очистить();
		КонецЕсли;
			
		Выборка = Выполнение.Выбрать();
		Пока Выборка.Следующий() Цикл
						
			зпСтрока81 = ТаблицаБух.Добавить();
			
			ИзменитьРеквизит(зпСтрока81, СсылкаНаОбъект, "Ведомость", Изменился);
			ИзменитьРеквизит(зпСтрока81, Выборка.ФизЛицо, "ФизЛицо", Изменился);
			ИзменитьРеквизит(зпСтрока81, Выборка.Сумма, "СуммаПлатежа", Изменился);
			ИзменитьРеквизит(зпСтрока81, Статья81, "СтатьяДвиженияДенежныхСредств", Изменился);
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПН(Контрагент) //Полное наименование контрагента
	
	Возврат ?(ЗначениеЗаполнено(Контрагент.НаименованиеПолное), Контрагент.НаименованиеПолное, Контрагент.Наименование); 
	
КонецФункции

Функция Наименование(Ссылка)
	
	Если Ссылка <> Неопределено Тогда
		Возврат Ссылка.Наименование; КонецЕсли;
	
	Возврат "";
	
КонецФункции
Функция ПолучитьСубсчетКассы(Ссылка) Экспорт

	Если Ссылка = Справочники.Кассы.НайтиПоКоду("000000010") Тогда //Пискаревский
		Возврат ".01.1";
	ИначеЕсли
		Ссылка = Справочники.Кассы.НайтиПоКоду("000000009") Тогда //Софийская
		Возврат ".01.2"
	ИначеЕсли 
		Ссылка = Справочники.Кассы.НайтиПоКоду("000000015") Тогда //Москва
		Возврат ".01.3"
	КонецЕсли;
	
	Возврат "";
КонецФункции
// Счет фактуры из реализаций

Функция Получить_ДокументСчетФактураВыданныйИзРеализации(Connector, СсылкаНаОбъект, ПеренесенныеОбъекты, стрОшибки = "")
	
	ОбъектБух = ПолучитьОбъектБухПоГуиду(Connector, СсылкаНаОбъект, Connector.Документы.СчетФактураВыданный ,,Истина,,стрОшибки);
	Если ОбъектБух = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 
	|	Номер		Номер, 
	|	Дата,
	|	Организация Организация,
	|	ВЫБОР КОГДА Партнер.ЭтоКонтрагентБухгалтерии ТОГДА Партнер ИНАЧЕ Контрагент КОНЕЦ Контрагент,
	|	ВЫБОР КОГДА Партнер.ЭтоКонтрагентБухгалтерии ТОГДА Контрагент ИНАЧЕ НЕОПРЕДЕЛЕНО КОНЕЦ ДоговорКонтрагента,
	|	Ссылка		ДокументОснование,
	|	Валюта 		ВалютаДокумента,
	|	Сумма,
	|	Комментарий
	|ИЗ
	|	Документ.РеализацияТоваров
	|ГДЕ
	|	Ссылка = &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	
	Таблица 	= Запрос.Выполнить().Выгрузить();
	Колонки 	= Таблица.Колонки;
	Изменился 	= Ложь;
	
	Для Каждого Строка Из Таблица Цикл
		
		Если Не ЗаполнитьОбъектПоСтрокеЗапроса(Connector, ОбъектБух, Строка, Колонки, ПеренесенныеОбъекты, Изменился, стрОшибки) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		// Установим договор, возмем первый попавшийся
		
		ВалютаПоУмолчанию81 = ПолучитьОбъектВБухгалтерии(ПолучитьВалютуВзаиморасчетовПоУмолчанию(), Connector,,, ПеренесенныеОбъекты, стрОшибки);
		Если ВалютаПоУмолчанию81 = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;		 
		
		СтруктураДоговора = Новый Структура("ВалютаВзаиморасчетов, ВидДоговора",
												ВалютаПоУмолчанию81,
												Connector.Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		
		Договор81 = ПолучитьДоговор81ИзОрганизации(Connector, Строка.Контрагент, Строка.ДоговорКонтрагента, ОбъектБух.Организация, ПеренесенныеОбъекты, Истина, СтруктураДоговора, ,стрОшибки);
		//Если Договор81 = Неопределено Тогда
		//	Возврат Неопределено;
		//КонецЕсли;
		//
		ИзменитьРеквизит(ОбъектБух, Договор81, "ДоговорКонтрагента", Изменился);
		
		// На аванс
		
		//Если СсылкаНаОбъект.СуммаАванса > 0 Тогда
		//	
		//	ИзменитьРеквизит(ОбъектБух, Connector.Перечисления.ВидСчетаФактурыВыставленного.НаАванс, "ВидСчетаФактуры", Изменился);
		//	ИзменитьРеквизит(ОбъектБух, Истина, 						"Выставлен", 			Изменился);
		//	ИзменитьРеквизит(ОбъектБух, НачалоДня(СсылкаНаОбъект.Дата), "ДатаВыставления", 		Изменился);
		//	ИзменитьРеквизит(ОбъектБух, 1, 								"КодСпособаВыставления", Изменился);
		//	ИзменитьРеквизит(ОбъектБух, "02", 							"КодВидаОперации", 		Изменился);
		//	
		//Иначе // не на аванс
			
			ИзменитьРеквизит(ОбъектБух, "01", 							"КодВидаОперации", 		Изменился);
			ИзменитьРеквизит(ОбъектБух, Connector.Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию, "ВидСчетаФактуры",Изменился);
				
		//КонецЕсли;
				
		// Установим табличнцю часть основания
		
		Если 	ОбъектБух.ДокументыОснования.Количество() <> 1 Или
				ОбъектБух.ДокументыОснования.Получить(0).ДокументОснование <> ОбъектБух.ДокументОснование Тогда
				
			Изменился = Истина;
			ОбъектБух.ДокументыОснования.Очистить();
			ОбъектБух.ДокументыОснования.Добавить().ДокументОснование = ОбъектБух.ДокументОснование;
				
		КонецЕсли;
	КонецЦикла;
	
	//ОбъектБух.ОбменДанными.Load = Истина;
	
	Если Изменился Тогда
		Возврат ЗаписатьДокументБух(ОбъектБух, СсылкаНаОбъект.ПометкаУдаления, СсылкаНаОбъект.Проведен, Connector, стрОшибки);
	Иначе
		Возврат ОбъектБух.Ссылка;
	КонецЕсли;
	
КонецФункции
// Комплектация для реализации
Функция НужноПеренестиКомплектацию(СсылкаНаОбъект) Экспорт
	
	ПустыеСтроки = СсылкаНаОбъект.Товары.НайтиСтроки(Новый Структура("НоменклатураЗамена", Справочники.Номенклатура.ПустаяСсылка())); 
	Если ПустыеСтроки.Количество() <> СсылкаНаОбъект.Товары.Количество() Тогда // если есть заполненная номенклатура учет 
	    Возврат Истина; КонецЕсли;
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьМассивТоваровДляКомплектаций(СтруктураОбъект) Экспорт
                          
	Таблица = СтруктураОбъект.Товары.Выгрузить(,"НоменклатураЗамена, Количество");
	Таблица.Свернуть("НоменклатураЗамена", "Количество");
	Возврат КонвертацияТипов.ПолучитьМассивИзТаблицыЗначений(Таблица);
КонецФункции

Функция ПолучитьМассивКомплектующихДляКомплектации(СтруктураОбъект, НоменклатураЗамена) Экспорт
	
	Возврат КонвертацияТипов.ПолучитьМассивИзТаблицыЗначений(СтруктураОбъект.Товары.Выгрузить(), Новый Структура("НоменклатураЗамена", НоменклатураЗамена));
		
КонецФункции

// ПОКУПАЕМ У Инструмента ЕСЛИ ПРОДАЕТ Тулс

Функция ОбработатьПродажуТулсаИПокупкуИнструмента(текОбъект, ДокументБух, ПометкаУдаления, Проведен, Connector, ПеренесенныеОбъекты, стрОшибки = "")
	
	// Если есть реализация и в ней есть товары которые удовлятворяют выбранной номенклатурной группе
	// тогда мы такой товар купим у своей организации с разницой в 5%
	// Поступление будет иметь точно такойже гуид как и реализация
	
	// Проверим чтобы док был не раньше той даты
	
	ДатаНачалаПереноса = '20111001';
	
	Если текОбъект.Дата < ДатаНачалаПереноса Тогда
		Возврат Истина;
	КонецЕсли;
	
	НомерБезТрехПервыхСимволов = Прав(ДокументБух.Номер, СтрДлина(ДокументБух.Номер) - 3);
	ПрефиксРеализации 	= "ТР-";
	ПрефиксПоступления 	= "ТП-";
	
	УвиличениеЦеныПроц 		= 5;
	ОрганизацияТулс 		= Справочники.Организации.НайтиПоКоду("000000004");
	ОрганизацияИнструмент 	= Справочники.Организации.НайтиПоКоду("000000003");
	КонтрагентИнструмент	= Справочники.Контрагенты.НайтиПоКоду("000010907");
	КонтрагентТулс			= Справочники.Контрагенты.НайтиПоКоду("000015139");
	НоменклатурнаяГруппа	= Справочники.НоменклатурныеГруппы.НайтиПоКоду("000000001");
	СубконтоТовар81 		= ПолучитьСубконтоТовары81(Connector);
	
	Если текОбъект.Организация = ОрганизацияТулс Тогда
		
		// Поищем товары на соответствие
	
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Док.Номенклатура,
		|	Док.Количество,
		|	Док.Цена,
		|	Док.СтавкаНДС
		|ИЗ
		|	Документ.РеализацияТоваров.Товары Док
		|
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	(	ВЫБРАТЬ Номенклатура
		|		ИЗ		Справочник.НоменклатурныеГруппы.Состав 
		|		ГДЕ		Ссылка = &НоменклатурнаяГруппа
		|	)Спр
		|ПО
		|	Док.Номенклатура = Спр.Номенклатура
		|
		|ГДЕ
		|	Док.Ссылка = &Ссылка
		|");
		
		Запрос.УстановитьПараметр("Ссылка", текОбъект.Ссылка);
		Запрос.УстановитьПараметр("НоменклатурнаяГруппа", НоменклатурнаяГруппа);
		
		ТоварыДляПокупки = Запрос.Выполнить().Выбрать();
		Если Не ТоварыДляПокупки.Количество() Тогда
			Возврат Истина;
		КонецЕсли;
		
		// Найдем поступление по данной реализации
		
		ДокПоступлениеБух = ПолучитьОбъектБухПоГуиду(Connector, текОбъект.Ссылка, Connector.Документы.ПоступлениеТоваровУслуг,,Истина,,стрОшибки);
		Если ДокПоступлениеБух = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		// Установим новый номер документа
		
		ДокПоступленияБухНовый = ДокПоступлениеБух.ЭтоНовый();
		Если ДокПоступленияБухНовый Тогда
			ДокПоступлениеБух.Номер = ПрефиксПоступления + НомерБезТрехПервыхСимволов;
		КонецЕсли;
		
		ДокПоступлениеБух.Товары.Очистить();
		
		ДокПоступлениеБух.ВидОперации		= Connector.Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
		ДокПоступлениеБух.Дата 				= НачалоДня(ДокументБух.Дата) - 86400;
		ДокПоступлениеБух.Организация 		= ПолучитьОбъектВБухгалтерии(ОрганизацияТулс, Connector,,, ПеренесенныеОбъекты, стрОшибки);
		ДокПоступлениеБух.Контрагент 		= ПолучитьОбъектВБухгалтерии(КонтрагентИнструмент, Connector,,, ПеренесенныеОбъекты, стрОшибки);
		ДокПоступлениеБух.Склад 			= ДокументБух.Склад;
		ДокПоступлениеБух.ТипЦен 			= ДокументБух.ТипЦен;
		ДокПоступлениеБух.ВалютаДокумента 	= ДокументБух.ВалютаДокумента;
		ДокПоступлениеБух.СуммаВключаетНДС 	= ДокументБух.СуммаВключаетНДС;
		
		ДокПоступлениеБух.СпособЗачетаАвансов 				= Connector.Перечисления.СпособыЗачетаАвансов.Автоматически;
		ДокПоступлениеБух.УчитыватьНДС 						= Истина;
		ДокПоступлениеБух.СчетУчетаРасчетовСКонтрагентом 	= Connector.ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками;
		ДокПоступлениеБух.СчетУчетаРасчетовПоАвансам 		= Connector.ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным ;
		СчетУчета 											= Connector.ПланыСчетов.Хозрасчетный.ТоварыНаСкладах;
		НДСпоПриобретеннымМПЗ 								= Connector.ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ;
		
		ДокПоступлениеБух.Комментарий = ""; // Настя попросила убрать -  "Автоматическое поступление по нашему импорту (от реализации №" + текОбъект.Номер + ")";
		
		// Получим договор и валюту
		
		ВалютаПоУмолчанию81 = ПолучитьОбъектВБухгалтерии(ПолучитьВалютуВзаиморасчетовПоУмолчанию(), Connector,,, ПеренесенныеОбъекты, стрОшибки);
		Если ВалютаПоУмолчанию81 = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;		 
		
		СтруктураДоговора = Новый Структура("ВалютаВзаиморасчетов, ВидДоговора",
													ВалютаПоУмолчанию81,
													Connector.Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
													
		СтруктураДоп = Новый Структура("ТипЦен", ДокументБух.ТипЦен);
		
		Договор81 = ПолучитьДоговор81ИзОрганизации(Connector, КонтрагентИнструмент,, ДокПоступлениеБух.Организация, ПеренесенныеОбъекты, Истина, СтруктураДоговора, СтруктураДоп, стрОшибки);
		
		Если Договор81 = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ДокПоступлениеБух.ДоговорКонтрагента = Договор81;
		
		СоотвНоменклатуры = Новый Соответствие;
		
		// Получим остатки товара в бухгалтерии, чтобы не покупать лишний
		
		МассНоменклатуры81 = Connector.NewObject("Массив");
		
		Пока ТоварыДляПокупки.Следующий() Цикл
			Тов81 = ПолучитьОбъектВБухгалтерии(ТоварыДляПокупки.Номенклатура, Connector,,, ПеренесенныеОбъекты, стрОшибки);
			МассНоменклатуры81.Добавить(Тов81);
			СоотвНоменклатуры.Вставить(ТоварыДляПокупки.Номенклатура, Тов81);
		КонецЦикла;
		
		Выборка81 = COMServer.ПолучитьВыполнениеЗапроса81("
			|ВЫБРАТЬ 	Субконто1 Номенклатура, КоличествоОстатокДт Количество
			|ИЗ			РегистрБухгалтерии.Хозрасчетный.Остатки(
			|								&Дата,
			|								Счет = &Счет41_01, ,
			|								Организация = &Организация И
			|								Субконто1 В(&МассивНоменклатуры))
			|",,
					Новый Структура("Организация, Дата, Счет41_01, МассивНоменклатуры", 
										ДокПоступлениеБух.Организация,
										НачалоДня(ДокПоступлениеБух.Дата) - 1,
										Connector.ПланыСчетов.Хозрасчетный.ТоварыНаСкладах, 
										МассНоменклатуры81),
					стрОшибки,
					Connector);
			
		Если Выборка81 = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ОстаткиТовара81 = Выборка81.Выгрузить();
		
		// Заполним товарами
		
		ТоварыДляПокупки.Сбросить();
		Пока ТоварыДляПокупки.Следующий() Цикл
			
			// Определим сколько уже есть на складе
			Ном81 = СоотвНоменклатуры[ТоварыДляПокупки.Номенклатура];
			Стр81 = ОстаткиТовара81.Найти(Ном81, "Номенклатура");
			Ост81 = ?(Стр81 = Неопределено Или Стр81.Количество < 0, 0, Стр81.Количество);
			Количество = ТоварыДляПокупки.Количество - Ост81;
			Если Количество > 0 Тогда
			
				НовСтрока = ДокПоступлениеБух.Товары.Добавить();
				НовСтрока.Номенклатура  = Ном81;
				НовСтрока.СтавкаНДС  	= ПолучитьОбъектВБухгалтерии(ТоварыДляПокупки.СтавкаНДС, Connector,,, ПеренесенныеОбъекты, стрОшибки);
				НовСтрока.Количество  	= ТоварыДляПокупки.Количество - Ост81;
				НовСтрока.СчетУчета 	= СчетУчета;
				НовСтрока.Цена			= ТоварыДляПокупки.Цена * 100 / (100 + УвиличениеЦеныПроц);
				НовСтрока.СчетУчетаНДС 	= НДСпоПриобретеннымМПЗ;
				
				Connector.ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НовСтрока, ДокПоступлениеБух);
				Connector.ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НовСтрока, ДокПоступлениеБух);
				
			КонецЕсли;
		КонецЦикла;
		
		ТоварыДляПокупки = ДокПоступлениеБух.Товары.Выгрузить();
		
		// Запишем поступление
		
		Если Не ДокПоступленияБухНовый Или ДокПоступлениеБух.Товары.Количество() Тогда
		
			Если ЗаписатьДокументБух(ДокПоступлениеБух, ПометкаУдаления, Проведен, Connector, стрОшибки) = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		// Определим ГУИД (ЭТО ВАЖНО!) меняем восем символов слева на восем символов справа
		
		колСимволов		= 8;
		СсылкаСтрока 	= XMLСтрока(текОбъект.Ссылка);
		НовСсылкаСтрока = Прав(СсылкаСтрока, колСимволов) 
							+ Сред(СсылкаСтрока, колСимволов + 1, 36 - колСимволов * 2)
							+ Лев(СсылкаСтрока, колСимволов);
							
		// Найдем реализацию по данному поступлению
		
		ДокРелизацииБух = ПолучитьОбъектБухПоГуиду(Connector, НовСсылкаСтрока, Connector.Документы.РеализацияТоваровУслуг,,Истина,,стрОшибки);
		Если ДокРелизацииБух = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		// Установим новый номер документа
		
		ДокРелизацииБухНовый = ДокРелизацииБух.ЭтоНовый();
		Если ДокРелизацииБухНовый Тогда
			ДокРелизацииБух.Номер = ПрефиксРеализации + НомерБезТрехПервыхСимволов;
		КонецЕсли;
		
		ДокРелизацииБух.Товары.Очистить();
		
		ДокРелизацииБух.ВидОперации		= Connector.Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
		ДокРелизацииБух.Дата 			= НачалоДня(ДокументБух.Дата) - 86200;
		
		ДокРелизацииБух.Организация 	= ПолучитьОбъектВБухгалтерии(ОрганизацияИнструмент, Connector,,, ПеренесенныеОбъекты, стрОшибки);
		ДокРелизацииБух.Контрагент 	= ПолучитьОбъектВБухгалтерии(КонтрагентТулс, Connector,,, ПеренесенныеОбъекты, стрОшибки);
		
		ДокРелизацииБух.Склад	 			= ДокументБух.Склад;
		ДокРелизацииБух.ТипЦен 				= ДокументБух.ТипЦен;
		ДокРелизацииБух.ВалютаДокумента 	= ДокументБух.ВалютаДокумента;
		ДокРелизацииБух.СуммаВключаетНДС 	= ДокументБух.СуммаВключаетНДС;
		
		ДокРелизацииБух.СпособЗачетаАвансов 			= Connector.Перечисления.СпособыЗачетаАвансов.Автоматически;
		ДокРелизацииБух.УчитыватьНДС 					= Истина;
		ДокРелизацииБух.СчетУчетаРасчетовСКонтрагентом 	= Connector.ПланыСчетов.Хозрасчетный.РасчетыСПокупателями;
		ДокРелизацииБух.СчетУчетаРасчетовПоАвансам	 	= Connector.ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным;
				
		ДокРелизацииБух.Комментарий = ""; // Настя попросила убрать -  "Автоматическое реализация по нашему импорту (от реализации №" + текОбъект.Номер + ")";
		
		СтруктураДоговора = Новый Структура("ВалютаВзаиморасчетов, ВидДоговора",
													ВалютаПоУмолчанию81,
													Connector.Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
													
		СтруктураДоп = Новый Структура("ТипЦен", ДокументБух.ТипЦен);
		
		Договор81 = ПолучитьДоговор81ИзОрганизации(Connector, КонтрагентТулс,, ДокРелизацииБух.Организация, ПеренесенныеОбъекты, Истина, СтруктураДоговора, СтруктураДоп, стрОшибки);
		Если Договор81 = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ДокРелизацииБух.ДоговорКонтрагента = Договор81;
		
		// Заполним товарами
		
		//ТоварыДляПокупки.Сбросить();
		//Пока ТоварыДляПокупки.Следующий() Цикл
		Для Каждого СтрокаПостБух Из ТоварыДляПокупки Цикл
			
			НовСтрока = ДокРелизацииБух.Товары.Добавить();
			//НовСтрока.Номенклатура  = ПолучитьОбъектВБухгалтерии(ТоварыДляПокупки.Номенклатура, Connector,,, ПеренесенныеОбъекты, стрОшибки);
			НовСтрока.Номенклатура  = СтрокаПостБух.Номенклатура;
			
			//НовСтрока.СтавкаНДС  	= ПолучитьОбъектВБухгалтерии(ТоварыДляПокупки.СтавкаНДС, Connector,,, ПеренесенныеОбъекты, стрОшибки);
			НовСтрока.СтавкаНДС  	= СтрокаПостБух.СтавкаНДС;
			
			//НовСтрока.Количество  	= ТоварыДляПокупки.Количество;
			НовСтрока.Количество  	= СтрокаПостБух.Количество;
			//НовСтрока.Цена			= ТоварыДляПокупки.Цена * 100 / (100 + УвиличениеЦеныПроц);
			НовСтрока.Цена			= СтрокаПостБух.Цена;
			
			НовСтрока.СчетУчета 	= Connector.ПланыСчетов.Хозрасчетный.ТоварыНаСкладах;
			НовСтрока.СчетДоходов 	= Connector.ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД;
			НовСтрока.СчетРасходов 	= Connector.ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД;
			НовСтрока.СчетУчетаНДСПоРеализации 	= Connector.ПланыСчетов.Хозрасчетный.Продажи_НДС;
			НовСтрока.Субконто 		= СубконтоТовар81;
			
			Connector.ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НовСтрока, ДокРелизацииБух);
			Connector.ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НовСтрока, ДокРелизацииБух);
			
		КонецЦикла;
		
		// Запишем реализацию
		
		Если Не ДокРелизацииБухНовый Или ДокРелизацииБух.Товары.Количество() Тогда
		
			Возврат ЗаписатьДокументБух(ДокРелизацииБух, ПометкаУдаления, Проведен, Connector, стрОшибки) <> Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат Истина;
	
КонецФункции


Функция ПеренестиКонтактнуюИнформациюКонтрагента(Connector, СсылкаБух, СсылкаНаОбъект, ПеренесенныеОбъекты, стрОшибки = "")
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 
	|	Вид,
	|	ПОДСТРОКА(Представление, 1, 255) Представление,
	|	ПОДСТРОКА(Комментарий, 1, 255) Комментарий,
	|	ЗначениеПоУмолчанию
	|
	|ИЗ
	|	РегистрСведений.ПредставлениеКонтактнойИнформации
	|ГДЕ
	|	Объект = &Партнер И Вид <> ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ПустаяСсылка) И Вид.ВыгружатьВБухгалтерию
	|
	|ОБЪЕДИНИТЬ 
	|
	|ВЫБРАТЬ 
	|	Вид,
	|	ПОДСТРОКА(Представление, 1, 255) Представление,
	|	ПОДСТРОКА(Комментарий, 1, 255) Комментарий,
	|	ЗначениеПоУмолчанию
	|
	|ИЗ
	|	РегистрСведений.ПредставлениеКонтактнойИнформации
	|ГДЕ
	|	Объект = &Контрагент И Вид <> ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ПустаяСсылка) И Вид.ВыгружатьВБухгалтерию
	|");
	
	Запрос.УстановитьПараметр("Партнер", СсылкаНаОбъект.Партнер);
	Запрос.УстановитьПараметр("Контрагент", СсылкаНаОбъект);

	
	Выборка = Запрос.Выполнить().Выбрать();
 	Изменился = Ложь;
	
	Пока Выборка.Следующий() Цикл
			Набор = Connector.РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
			Набор.Отбор.Объект.Установить(СсылкаБух);
		
			Тип = Получить_ПеречислениеТипКонтактнойИнформации(Connector, Выборка.Вид, стрОшибки, ПеренесенныеОбъекты);
			Если Тип = Неопределено Тогда
				Продолжить; КонецЕсли;
							
			Набор.Отбор.Тип.Установить(Тип);
			
			Вид = ПолучитьОбъектВБухгалтерии(Выборка.Вид, Connector,,, ПеренесенныеОбъекты, стрОшибки);
			Если Вид = Неопределено Тогда
				Продолжить; КонецЕсли;
			
			Набор.Отбор.Вид.Установить(Вид);
				
			Набор.Прочитать();
			
			Если НЕ Набор.Количество() Тогда
				
				Набор.Очистить();
				
				Изменился = Истина;
				
				НоваяЗапись = Набор.Добавить();
				НоваяЗапись.Объект = СсылкаБух;
				НоваяЗапись.Тип = Тип;
				НоваяЗапись.Вид = Вид;
				НоваяЗапись.Представление = Выборка.Представление;
				НоваяЗапись.Комментарий = Выборка.Комментарий;
				НоваяЗапись.ЗначениеПоУмолчанию = Выборка.ЗначениеПоУмолчанию;
			
			Иначе
				Для Каждого Запись Из Набор Цикл
					Если Запись.Представление <> Выборка.Представление Тогда
						Запись.Представление = Выборка.Представление; 
						Изменился = Истина; КонецЕсли; КонецЦикла;
				
			КонецЕсли;
			
			Если Изменился Тогда
				Попытка 
					Набор.Записать();
			    Исключение
					СтрОшибки = ОписаниеОшибки();
					Возврат Ложь;
				КонецПопытки; КонецЕсли;
				
						
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ПеренестиБанковскиеСчетаКонтрагента(Connector, СсылкаБух, СсылкаНаОбъект, ПеренесенныеОбъекты, стрОшибки = "")
		
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 
	|	Ссылка,
	|	ПометкаУдаления
	|ИЗ
	|	Справочник.БанковскиеСчета
	|ГДЕ Владелец = &Ссылка");

	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	
	Выборка = Запрос.Выполнить().Выбрать();
 	Изменился = Ложь;

	Пока Выборка.Следующий() Цикл
		
		Если ПеренесенныеОбъекты <> Неопределено Тогда		
	
			ОбъектБух = ПеренесенныеОбъекты[Выборка.Ссылка];
	
			// Если банковский счет уже загружался тогда идем дальше
			Если ОбъектБух <> Неопределено Тогда
				Продолжить;
			КонецЕсли; 
		КонецЕсли;
			
		ОбъектБух = Получить_СправочникБанковскиеСчета(Connector, Выборка.Ссылка, ПеренесенныеОбъекты, стрОшибки, СсылкаБух);
		
		Если ОбъектБух = Неопределено Тогда
			Возврат Ложь; КонецЕсли;
			
		ПеренесенныеОбъекты.Вставить(Выборка.Ссылка, ОбъектБух);	КонецЦикла;
	
	Возврат Истина;
				
КонецФункции
