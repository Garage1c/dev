// Получает основную организацию для Партнера или Контрагента
Функция ПолучитьОрганизациюПоУмолчанию(Ссылка) Экспорт
	
	ЭтоПартнер = ТипЗнч(Ссылка) = Тип("СправочникСсылка.Партнеры");
	
	Запрос = Новый Запрос(?(ЭтоПартнер,"
		|ВЫБРАТЬ ПЕРВЫЕ 1 
		|	Ссылка 
		|ПОМЕСТИТЬ ТабКонтрагенты 
		|ИЗ 
		|	Справочник.Контрагенты 
		|ГДЕ 
		|	Партнер = &Партнер 
		|УПОРЯДОЧИТЬ ПО 
		|	ЗначениеПоУмолчанию Убыв
		|;", "") + "	
		|ВЫБРАТЬ ПЕРВЫЕ 1 
		|	Организация 
		|ИЗ 
		|	Спарвочник.Контрагенты.Организации 
		|ГДЕ 
		|	Ссылка " + ?(ЭтоПартнер, "В (ВЫРАТЬ * ИЗ ТабКонтрагенты)", "= &Контрагент") + "
		|УПОРЯДОЧИТЬ ПО 
		|	ЗначениеПоУмолчанию Убыв");
		
	Запрос.УстановитьПараметр("Контрагент", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Организация;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Получает адреса доставки для пользователя инетрнет
Функция ПолучитьАдресаДоставкиИнтернет(Ссылка) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПочтовыйИндекс, Регион, Город, НаселенныйПункт, Адрес, Комментарий ИЗ Справочник.АдресаДоставкиИнтернет ГДЕ Владелец = &Пользователь");
	Запрос.УстановитьПараметр("Пользователь", Ссылка);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

//Функция КлиентуРазрешенаОтгрузка(Контрагент, Организация, СуммаДолга = 0, Дата = Неопределено) Экспорт
//	
//	// Определяет разрешена отгрузка контрагенту или нет (из-за долгов)
//	// СуммаДолга - сюда возвращается сумма долга клиента, 
//	//				если сумма отрицательная, значит мы ему должны
//	
//	Запрос = Новый Запрос("
//	
//	// Проверим включен ли контроль
//	
//	|ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ Константа.ЗапретитьПросроченнуюОтгрузку ГДЕ Значение;
//	
//	// Вытащим из справочника чтобы через точку не лезть
//	
//	|ВЫБРАТЬ Партнер.ДнейОтсрочки ДнейОтсрочки ИЗ Справочник.Контрагенты ГДЕ Ссылка = &Контрагент;
//	
//	// Посмотрим что за птица такая
//	
//	|ВЫБРАТЬ Дата, Сумма
//	|ИЗ РегистрСведений.ДолгиКонтрагентов.СрезПоследних(,Организация = &Организация И Контрагент = &Контрагент И ФормаОтношений = &ОтношениеКлиент)
//	|;
//	
//	// Определим когда образовался долг
//	
//	|ВЫБРАТЬ ПЕРВЫЕ 1 Рег.Период ПериодДолга
//	|ИЗ РегистрСведений.ДолгиКонтрагентов Рег
//	|
//	|ЛЕВОЕ СОЕДИНЕНИЕ
//	|(
//	|	ВЫБРАТЬ ПЕРВЫЕ 1 Период
//	|	ИЗ 	РегистрСведений.ДолгиКонтрагентов
//	|	ГДЕ	ФормаОтношений 	= &ОтношениеКлиент И
//	|		Организация 	= &Организация И
//	|		Контрагент 		= &Контрагент И
//	|		Сумма <= 0
//	|	УПОРЯДОЧИТЬ ПО Период УБЫВ
//	|
//	|) ГдеНетДолга ПО ИСТИНА
//	|
//	|ГДЕ
//	|	ФормаОтношений 	= &ОтношениеКлиент И
//	|	Организация 	= &Организация И
//	|	Контрагент 		= &Контрагент И
//	|	Рег.Период > ЕСТЬNULL(ГдеНетДолга.Период, &ПустойПериод) И
//	|	Сумма > 0
//	|
//	|УПОРЯДОЧИТЬ ПО
//	|	Рег.Период
//	|");
//	
//	Запрос.УстановитьПараметр("ОтношениеКлиент", 	Перечисления.ФормаОтношений.Клиент);
//	Запрос.УстановитьПараметр("Организация", 		Организация);
//	Запрос.УстановитьПараметр("Контрагент", 		Контрагент);
//	Запрос.УстановитьПараметр("ПустойПериод", 		'00010101');
//	
//	Пакет = Запрос.ВыполнитьПакет();
//	Если Пакет[0].Пустой() Тогда
//		Возврат Истина 
//	КонецЕсли; // Не установлена константа
//	
//	ВыборкаДней = Пакет[1].Выбрать(); 
//	ВыборкаДней.Следующий(); 
//	ДнейОтсрочки = ВыборкаДней.ДнейОтсрочки;
//	Выборка 	= Пакет[2].Выбрать();
//	
//	Если Выборка.Следующий() Тогда 
//		
//		СуммаДолга = Выборка.Сумма;
//		
//		// Если есть записи в регистр значит ктото комуто должен
//		
//		ВыборкаНеДолг = Пакет[3].Выбрать();
//		
//		Если ВыборкаНеДолг.Следующий() Тогда
//			ОсталосьДней 	= ((НачалоДня(ВыборкаНеДолг.ПериодДолга) + ДнейОтсрочки * 86400) - НачалоДня(ТекущаяДата())) / 86400; 
//		Иначе	
//			ОсталосьДней 	= ДнейОтсрочки; 
//		КонецЕсли;
//		
//		Если СуммаДолга = 0 Тогда 		// никто ни кому не должен
//			Возврат ?(ДнейОтсрочки, Истина, Ложь);
//			
//		ИначеЕсли СуммаДолга > 0 Тогда 	// он нам должен
//			Возврат ?(ДнейОтсрочки, ОсталосьДней > 0, Ложь);
//			
//		Иначе 							// мы ему должны
//			Возврат Истина; 
//		КонецЕсли;
//	Иначе
//		
//		// Если нет записи то он новенький и ему можно если у него есть отсрочка
//		
//		Возврат ?(ДнейОтсрочки, Истина, Ложь);
//	КонецЕсли;
//	
//КонецФункции


Функция ПартнеруРазрешенаОтгрузка(Контрагент,ДатаКонтроля = Неопределено) Экспорт
	//если есть хоть один просроченный долг - то отгрузка запрещена. В остальных случаях - разрешена.
	
	Запрос = Новый Запрос("
	
	|Выбрать 
	|ДокументОтгрузки,
	|РАЗНОСТЬДАТ(ДОБАВИТЬКДАТЕ(ДокументОтгрузки.Дата, ДЕНЬ, Контрагент.ДнейОтсрочки), &ДатаКонтроля, ДЕНЬ) КАК ДнейПросрочено,
	|СуммаОстаток
	|из РегистрНакопления.ДолгиПоОтгрузкам.Остатки(&ДатаКонтроля,Контрагент = &Контрагент)
	|Левое соединение
	|Константа.ЗапретитьПросроченнуюОтгрузку Конст
	|по истина
	|
	|ГДЕ Конст.Значение=Истина и СуммаОстаток>0 и РАЗНОСТЬДАТ(ДОБАВИТЬКДАТЕ(ДокументОтгрузки.Дата, ДЕНЬ, Контрагент.ДнейОтсрочки), &ДатаКонтроля, ДЕНЬ)>0 
	|
	|");
	
	
	Запрос.УстановитьПараметр("Контрагент",Контрагент);
	ДатаКонтроля=?(ДатаКонтроля=Неопределено,ТекущаяДата(),ДатаКонтроля);
	Запрос.УстановитьПараметр("ДатаКонтроля",конецДня(ДатаКонтроля));
	
	Рез=Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;	
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруИзСтроки(стр) Экспорт
	
	Возврат ЗначениеИзСтрокиВнутр(стр);
	
КонецФункции
