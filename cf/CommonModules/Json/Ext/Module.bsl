
Функция JSON(Значение) Экспорт
      Разделитель="";
      
      ТипЗн=ТипЗнч(Значение);

      Если ТипЗн=Тип("Строка") Тогда
            Стр=""""+Маскировать(Значение)+""""

      ИначеЕсли ТипЗн=Тип("Число") ИЛИ ТипЗнч(Значение)=Тип("Булево") Тогда
            Стр=XMLСтрока(Значение)

      ИначеЕсли ТипЗн=Тип("Дата") Тогда
            Стр=""""+?(ЗначениеЗаполнено(Значение),XMLСтрока(Значение),"")+""""

      ИначеЕсли ТипЗн=Тип("Структура") Тогда
            Стр="{";
            Для Каждого Параметр Из Значение Цикл
                  Стр=Стр+Разделитель+Символы.ПС+""""+Параметр.Ключ+""":"+JSON(Параметр.Значение);
                  Разделитель=","
            КонецЦикла;
            Стр=Стр+Символы.ПС+"}";

      ИначеЕсли ТипЗн=Тип("Массив") Тогда
            Стр="[";
            Для Каждого Элемент Из Значение Цикл
                  Стр=Стр+Разделитель+Символы.ПС+JSON(Элемент);
                  Разделитель=","
            КонецЦикла;
            Стр=Стр+Символы.ПС+"]";

      ИначеЕсли ТипЗн=Тип("ТаблицаЗначений") Тогда
            Колонки=Значение.Колонки;
            Массив=Новый Массив;
            Для Каждого СтрокаТЗ Из Значение Цикл
                  Структура=Новый Структура;
                  Для Каждого Колонка Из Колонки Цикл
                        Структура.Вставить(Колонка.Имя,СтрокаТЗ[Колонка.Имя])
                  КонецЦикла;
                  Массив.Добавить(Структура);
            КонецЦикла;
            Стр=JSON(Массив)

      ИначеЕсли Значение=Неопределено Тогда
            Стр="null"

      Иначе
            Стр=""""+Маскировать(Значение)+""""
      КонецЕсли;

      Возврат Стр
КонецФункции

Функция Маскировать(Знач Стр) Экспорт
      Стр=СтрЗаменить(Стр,Символы.ПС,"\n");
      Стр=СтрЗаменить(Стр,Символы.ВК,"\r");
      Стр=СтрЗаменить(Стр,"""","\""");
      Стр=СтрЗаменить(Стр,"'","\'");
      Возврат Стр
  КонецФункции
  
 // ПАРСЕР


Функция Парсер(пСтрока)
   Возврат Новый Структура("Строка,Длина,Указатель,Символ",пСтрока,СтрДлина(пСтрока),0,"");
КонецФункции

Функция ПрочитатьСимвол(пПарсер,пКоличество=1)
   пПарсер.Символ = "";
   Если пПарсер.Указатель >= пПарсер.Длина Тогда
       Возврат Ложь;
   КонецЕсли;
   пПарсер.Символ = Сред(пПарсер.Строка,пПарсер.Указатель+1,пКоличество);
   пПарсер.Указатель = пПарсер.Указатель + пКоличество;
   Возврат Истина;
КонецФункции

Функция ПрочитатьОбъект(пПарсер)
   
   лОбъект = Новый Структура;
   
   Для К = 1 По 1 Цикл
       Пока Истина Цикл
           Если не ПропуститьРазделители(пПарсер) Тогда
               ВызватьИсключение "Ошибка разбора";
           КонецЕсли;
           Если не ТестСимвол(пПарсер,"""") Тогда
               ВызватьИсключение "Ошибка разбора";
           КонецЕсли;
           ПрочитатьСимвол(пПарсер);
           лКлюч = ПрочитатьСтроку(пПарсер);
           Если не ПропуститьРазделители(пПарсер) Тогда
               ВызватьИсключение "Ошибка разбора";
           КонецЕсли;
           Если не ТестСимвол(пПарсер,":") Тогда
               ВызватьИсключение "Ошибка разбора";
           КонецЕсли;
           ПрочитатьСимвол(пПарсер);
           лЗначение = ПрочитатьЗначение(пПарсер);
           лОбъект.Вставить(лКлюч,лЗначение);
           Если не ПропуститьРазделители(пПарсер) Тогда
               ВызватьИсключение "Ошибка разбора";
           КонецЕсли;
           Если ТестСимвол(пПарсер,",") Тогда
               ПрочитатьСимвол(пПарсер);
               Продолжить;
           КонецЕсли;
           Если ТестСимвол(пПарсер,"}") Тогда
               Прервать;
           КонецЕсли;
           ВызватьИсключение "Ошибка разбора";
       КонецЦикла;
       
   КонецЦикла;
   
   Возврат лОбъект;
   
КонецФункции

Функция ПрочитатьМассив(пПарсер)
   
   лМассив = Новый Массив;
   
   Для К = 1 По 1 Цикл
       Пока Истина Цикл
           лЗначение = ПрочитатьЗначение(пПарсер);
           лМассив.Добавить(лЗначение);
           Если не ПропуститьРазделители(пПарсер) Тогда
               ВызватьИсключение "Ошибка разбора";
		   КонецЕсли;
		   	// silber {
			пПарсер.Указатель = пПарсер.Указатель + 1;
			// }silber
		   Если ТестСимвол(пПарсер,",") Тогда
			   // silber {
			   //пПарсер.Указатель = пПарсер.Указатель + 1;
			   // }silber
               Продолжить;
           КонецЕсли;
		   Если ТестСимвол(пПарсер,"]") Тогда
			   // silber {
			   //пПарсер.Указатель = пПарсер.Указатель + 1;
			   // }silber
               Прервать;
           КонецЕсли;
           ВызватьИсключение "Ошибка разбора";
       КонецЦикла;
   КонецЦикла;
   
   Возврат лМассив;
   
КонецФункции

Функция ПрочитатьЗначение(пПарсер)
   
   Если не ПропуститьРазделители(пПарсер) Тогда;
       ВызватьИсключение "Ошибка разбора";
   КонецЕсли;
   
   Если ТестСимвол(пПарсер,"{") Тогда
       ПрочитатьСимвол(пПарсер);
       Возврат ПрочитатьОбъект(пПарсер);
   КонецЕсли;
   
   Если ТестСимвол(пПарсер,"[") Тогда
       ПрочитатьСимвол(пПарсер);
       Возврат ПрочитатьМассив(пПарсер);
   КонецЕсли;
   
   Если ТестСимвол(пПарсер,"""") Тогда
       ПрочитатьСимвол(пПарсер);
       Возврат ПрочитатьСтроку(пПарсер);
   КонецЕсли;
   
   Если ТестСимвол(пПарсер,"1234567890+-.eE",2) Тогда
       Возврат ПрочитатьЧисло(пПарсер);
   КонецЕсли;
   
   Если ТестСимвол(пПарсер,"true",1) Тогда
       ПрочитатьСимвол(пПарсер,4);
       Возврат Истина;
   КонецЕсли;
   
   Если ТестСимвол(пПарсер,"false",1) Тогда
       ПрочитатьСимвол(пПарсер,5);
       Возврат Ложь;
   КонецЕсли;
   
   Если ТестСимвол(пПарсер,"null",1) Тогда
       ПрочитатьСимвол(пПарсер,4);
       Возврат Неопределено;
   КонецЕсли;
   
   ВызватьИсключение "Ошибка разбора";
   
КонецФункции

Функция ПрочитатьСтроку(пПарсер)
   лСтр = "";
   Пока пПарсер.Символ <> """" Цикл
       лСтр = лСтр + пПарсер.Символ;
       Если пПарсер.Символ = "\" Тогда
           Если не ПрочитатьСимвол(пПарсер) Тогда
               Прервать;
           КонецЕсли;
           Если пПарсер.Символ = "n" Тогда
               лСтр = лСтр + Символы.ПС;
           ИначеЕсли пПарсер.Символ = "r" Тогда
               лСтр = лСтр + Символы.ВК;
           ИначеЕсли пПарсер.Символ = """" Тогда
               лСтр = лСтр + """";
           ИначеЕсли пПарсер.Символ = "'" Тогда
               лСтр = лСтр + "'";
           Иначе
           КонецЕсли;
       КонецЕсли;
       Если не ПрочитатьСимвол(пПарсер) Тогда
           Прервать;
       КонецЕсли;
   КонецЦикла;
   ПрочитатьСимвол(пПарсер);
   Возврат лСтр;
КонецФункции

Функция ПрочитатьЧисло(пПарсер)
   лЦифрыСтр = "+-1234567890.eE";
   лЧислоСтр = "0";
   Пока Найти(лЦифрыСтр,пПарсер.Символ) > 0 Цикл
       Если не ПрочитатьСимвол(пПарсер) Тогда
           Прервать;
       КонецЕсли;
       лЧислоСтр = лЧислоСтр + пПарсер.Символ;
   КонецЦикла;
   Возврат Число(лЧислоСтр);
КонецФункции

Функция ПропуститьРазделители(пПарсер)
   лРазделителиСтр = " " + Символы.ВК + Символы.ВТаб + Символы.НПП + Символы.ПС + Символы.ПФ + Символы.Таб;
   Пока Найти(лРазделителиСтр,пПарсер.Символ) > 0 Цикл
       Если не ПрочитатьСимвол(пПарсер) Тогда
           Возврат Ложь;
       КонецЕсли;
   КонецЦикла;
   Возврат Истина;
КонецФункции

Функция ТестСимвол(пПарсер,пСимвол,пРежим=1)
   // проверяет, начинается ли строка с указанной подстроки 
   // Режим:
   // 0 - без учета регистра
   // 1 - с учетом регистра
   // 2 - входжение первого символа в подстроку
   Если пРежим = 0 Тогда
       лДлина = СтрДлина(пСимвол);
       лНачалоСтроки = Сред(пПарсер.Строка,пПарсер.Указатель,лДлина);
       Возврат (ВРег(лНачалоСтроки) = ВРег(пСимвол));
   ИначеЕсли пРежим = 1 Тогда
       лДлина = СтрДлина(пСимвол);
       лНачалоСтроки = Сред(пПарсер.Строка,пПарсер.Указатель,лДлина);
       Возврат (лНачалоСтроки = пСимвол);
   ИначеЕсли пРежим = 2 Тогда
       лНачалоСтроки = Сред(пПарсер.Строка,пПарсер.Указатель,1);
       Возврат (Найти(пСимвол,лНачалоСтроки) > 0);
   КонецЕсли;
КонецФункции

Функция UnJSON(пСтрока, пЗаменитьКавычки = Ложь, стрОшибки = "") Экспорт
   
   лСтрока = пСтрока;
   Если пЗаменитьКавычки Тогда
       лСтрока = СтрЗаменить(пСтрока,"'","""");
   КонецЕсли;
   
   Попытка
       лПарсер = Парсер(лСтрока);
       ПрочитатьСимвол(лПарсер);
       лЗначение = ПрочитатьЗначение(лПарсер);
   Исключение
	   стрОшибки = ОписаниеОшибки();
       Возврат Неопределено;
   КонецПопытки;
   
   Возврат лЗначение;
   
КонецФункции

Процедура Тест() Экспорт
   
   Структура = Новый Структура("sIP,sDefaultGateway,nNode,nRing",1,2,3);
   Структура.Вставить("Error",Новый Структура("Code,Description",0,"OK"));
   лСтр = JSON(Структура);
   Сообщить("============================================");
   Сообщить(лСтр);
   Сообщить("============================================");
   Структура = UnJSON(лСтр);
   Сообщить(Структура);
   Сообщить(ЗначениеВСтрокуВнутр(Структура));
   
КонецПроцедуры



// МОЙ Мегапарсер

Функция ПолучитьСледующийСимволJson(Строка, Позиция, ПропускатьПробелыИтД = Истина)
	
	Позиция = Позиция + 1;
	Символ 	= Сред(Строка, Позиция, 1);
	
	Если Символ = "" Тогда // все кончилось
		Возврат "";
	КонецЕсли;
	
	Если ПропускатьПробелыИтД И
			(	ПустаяСтрока(Символ) Или 
				Символ = Символы.ПС Или 
				Символ = Символы.ВК Или 
				Символ = Символы.ВК Или 
				Символ = Символы.ВТаб Или 
				Символ = Символы.НПП Или 
				Символ = Символы.ПФ
			) Тогда
			
		Возврат ПолучитьСледующийСимволJson(Строка, Позиция);
		
	КонецЕсли;
	
	Возврат Символ;
	
КонецФункции

Функция СимволПохожНаОднихИзНих(Символ, Они)
	
	// переведем все в один регистр
	
	ОниБольшие 		= ВРЕГ(Они);
	СимволБольшой 	= ВРЕГ(Символ);
	
	Возврат Булево(Найти(ОниБольшие, СимволБольшой));
	
КонецФункции

Функция ПолучитьМассивJson(Строка, Позиция)
	
	Массив = Новый Массив;
	
	Пока Истина Цикл
		
		// Получим элемент
		Массив.Добавить(ПолучитьЗначениеJson(Строка, Позиция));
		
		// Проверим закончит може или не
		
		Символ = ПолучитьСледующийСимволJson(Строка, Позиция);
		
		Если Символ = "]" Тогда
			
			Возврат Массив; // все закончилось
			
		ИначеЕсли Символ = "," Тогда // следующий элемент массива
			
			Продолжить;
			
		ИначеЕсли пустаяСтрока(Символ) Тогда
			
			ВызватьИсключение "Ошибка разбора, внезапно закончился массив, позиция " + Позиция;
			
		Иначе
			
			ВызватьИсключение "Ошибка разбора, нет окончания или перечисления элементов массива, позиция " + Позиция;
			
		КонецЕсли;
	КонецЦикла;
	
КонецФункции
Функция ПолучитьСтрокуJson(Строка, Позиция)
	
	Текст	= "";
	Символ 	= ПолучитьСледующийСимволJson(Строка, Позиция);
		
	
	Пока Символ <> """" Цикл
	   
		Текст = Текст + Символ;
	   
		Если Символ = "\" Тогда
			
			Символ 	= ПолучитьСледующийСимволJson(Строка, Позиция);
			Если пустаяСтрока(Символ) Тогда
				Прервать;
			КонецЕсли;
			
			Если Символ = "n" Тогда
				Текст = Текст + Символы.ПС;
			ИначеЕсли Символ = "r" Тогда
				Текст = Текст + Символы.ВК;
			ИначеЕсли Символ = """" Тогда
				Текст = Текст + """";
			ИначеЕсли Символ = "'" Тогда
				Текст = Текст + "'";
			КонецЕсли;
			
		КонецЕсли;
		
		Символ 	= ПолучитьСледующийСимволJson(Строка, Позиция, Ложь);
		Если Символ = "" Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Текст;
   	
КонецФункции
Функция ПолучитьЧислоJson(Строка, Позиция)
	
	ЦифрыСтр 	= "+-1234567890.eE";
   	ЧислоСтр 	= "0";
	Символ 		= ПолучитьСледующийСимволJson(Строка, Позиция);
	
	Пока 	Не ПустаяСтрока(Символ) И 
			Найти(ЦифрыСтр, Символ) Цикл
		
		ЧислоСтр 	= ЧислоСтр + Символ;
		Символ 		= ПолучитьСледующийСимволJson(Строка, Позиция);
		
	КонецЦикла;
	
	Позиция = Позиция - 1; // отъедим назад а то потом никто не смогет прочитать следуюзий цифра, т.к. перепрыгнет на одну
	
	Возврат Число(ЧислоСтр);
   
КонецФункции


Функция ПолучитьЗначениеJson(Строка, Позиция = 0)
	
	Символ = ПолучитьСледующийСимволJson(Строка, Позиция);
	
	Если Символ = "{" Тогда
    	Возврат ПолучитьОбъектJson(Строка, Позиция);
   	КонецЕсли;
	
	Если Символ = "[" И Сред(Строка, Позиция + 1, 1) = "]" Тогда
		
		Позиция = Позиция + 1;
		
		// Пустой массив
		Возврат Новый Массив;
		
	ИначеЕсли Символ = "[" Тогда
		
		Возврат ПолучитьМассивJson(Строка, Позиция);
		
	ИначеЕсли Символ = """" Тогда
   
		Возврат ПолучитьСтрокуJson(Строка, Позиция);
		
	ИначеЕсли СимволПохожНаОднихИзНих(Символ, "1234567890+-.eE") Тогда
		
		Позиция = Позиция - 1;
       	Возврат ПолучитьЧислоJson(Строка, Позиция);
	   
	ИначеЕсли ВРЕГ(Сред(Строка, Позиция, 4)) = "TRUE" Тогда
		
		Позиция = Позиция + 3;
		Возврат Истина;
		
	ИначеЕсли ВРЕГ(Сред(Строка, Позиция, 5)) = "FALSE" Тогда
		
		Позиция = Позиция + 4;
		Возврат Ложь;
		
	ИначеЕсли ВРЕГ(Сред(Строка, Позиция, 4)) = "NULL" Тогда
		
		Позиция = Позиция + 3;
		Возврат Неопределено;

	Иначе
		
		ВызватьИсключение "Ошибка разбора, при чтения значения не ясен тип значения, позиция " + Позиция;
		
	КонецЕсли;
	
КонецФункции
Функция ПолучитьОбъектJson(Строка, Позиция)
	
	Объект 				= Новый Структура;
	ИмяОбъекта 			= "";
	ЧтениеИмениОбъекта 	= Ложь;
	
	Пока Истина Цикл
		
		Символ = ПолучитьСледующийСимволJson(Строка, Позиция);
		
		Если Символ = """" Тогда
			
			Если Не ЧтениеИмениОбъекта Тогда
				
				ЧтениеИмениОбъекта = Истина;
				
			Иначе // закончилось чтение имени объекта, дальше идет значение
				
				ЧтениеИмениОбъекта = Ложь;
				
			КонецЕсли;
				
		ИначеЕсли Символ = "}" И Не ЧтениеИмениОбъекта Тогда
			
			Возврат Объект; // все закончилось
			
		ИначеЕсли Символ = ":" И Не ЧтениеИмениОбъекта Тогда // название закончилось
			
			Если ИмяОбъекта = "" Тогда
				ИмяОбъекта = "Структура";
			КонецЕсли;
			
			Объект.Вставить(ИмяОбъекта, ПолучитьЗначениеJson(Строка, Позиция));
			
		ИначеЕсли Символ = ","  И Не ЧтениеИмениОбъекта Тогда // следующий объект
			
			ИмяОбъекта = ""; // сброс
			
		ИначеЕсли Символ = "" Тогда
			
			Если ЧтениеИмениОбъекта Тогда
				ВызватьИсключение "Ошибка разбора, внезапно закончилось имя объекта " + ИмяОбъекта + " позиция " + Позиция;
			Иначе
				ВызватьИсключение "Ошибка разбора, внезапно закончился объект " + ИмяОбъекта + " позиция " + Позиция;
			КонецЕсли;
			
		ИначеЕсли ЧтениеИмениОбъекта Тогда
			
			ИмяОбъекта 	= ИмяОбъекта + Символ;
			
		Иначе
			
			ВызватьИсключение "Ошибка чтения объекта " + ИмяОбъекта + " позиция " + Позиция;
			
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Функция UnJSON_silber(Строка, стрОшибки = "") Экспорт
	
	Если ПустаяСтрока(Строка) Тогда
		
		Возврат Новый Структура;
		
	КонецЕсли;
	
	Попытка
		
		Возврат ПолучитьЗначениеJson(Строка)
		
	Исключение
		
		стрОшибки = ОписаниеОшибки();
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции
