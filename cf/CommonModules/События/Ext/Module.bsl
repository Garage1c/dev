
Функция ПолучитьЗаписиСобытийСсылки(Ссылка) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ * ИЗ РегистрСведений.ПодпискиНаОповещение ГДЕ Ссылка = &Ссылка И Подписчик = &Пользователь");
	Запрос.УстановитьПараметр("Пользователь", 	ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("Ссылка", 		Ссылка);
	Возврат КонвертацияТипов.ПолучитьМассивИзТаблицыЗначений(Запрос.Выполнить().Выгрузить());
	
КонецФункции

Процедура ОбновитьТекстПодпискиНаФорме(Форма, Ссылка) Экспорт
	
	Записи = ПолучитьЗаписиСобытийСсылки(Ссылка);
	Кол = Записи.Количество();
	
	Декорация = Форма.Элементы.ПодпискаТекст;
	Декорация.Видимость = Истина;
	
	Если Кол = 1 Тогда // покажем название файла
	
		Декорация.Заголовок = ПолучитьОписаниеПодписки(Записи[0],,,Ложь,,Ложь);
		Декорация.Подсказка = "Показать подписку";
	
	ИначеЕсли Кол > 1 Тогда
		
		Декорация.Заголовок	= "подписан (" + Кол + ")";
		Декорация.Подсказка = "Несколько подписок";
		
	Иначе
		Декорация.Видимость = Ложь КонецЕсли;
	
КонецПроцедуры

Процедура ИницилизироватьСобытияОбъектаНаФорме(Форма, Ссылка) Экспорт
	
	//Если Не РольДоступна("ПолныеПрава") Тогда Возврат КонецЕсли;
	
	ГруппаЭлементов = Форма.Элементы.ГруппаПодписок;
	
	// нарисуем самалетик
	
	Декорация = Форма.Элементы.Добавить("ДекорацияСамалетик", Тип("ДекорацияФормы"), ГруппаЭлементов);
	Декорация.Вид 				= ВидДекорацииФормы.Картинка;
	Декорация.Гиперссылка	 	= Истина;
	Декорация.Картинка 			= БиблиотекаКартинок.СистемаОповещений;
	Декорация.Подсказка 		= "Подписка на оповещении при возникновении событий";
	
	Декорация.УстановитьДействие("Нажатие", "УправлениеПодпискойОповещений");
	
	// Добавим элемент подписки
	
	Декорация = Форма.Элементы.Добавить("ПодпискаТекст", Тип("ДекорацияФормы"), ГруппаЭлементов);
	Декорация.Вид 				= ВидДекорацииФормы.Надпись;
	Декорация.Гиперссылка	 	= Истина;
	
	Декорация.УстановитьДействие("Нажатие", "ТекстПодпискиНажатие"); 
	
	// Обновим текст и видимость элемента
	
	ОбновитьТекстПодпискиНаФорме(Форма, Ссылка);
	
КонецПроцедуры

Функция стрСпособыИзСпособа(Способ, СтрДо = "", Вкл = Истина) Экспорт
	
	// Возвращает строку для записи способов // втыкает 1 в 00000000
	
	Если СтрДо = "" Тогда
		Длина = Метаданные.РегистрыСведений.ПодпискиНаОповещение.Ресурсы.Способы.Тип.КвалификаторыСтроки.Длина;
		СтрДо = "";
		Для Ном = 1 По Длина Цикл СтрДо = СтрДо + "0" КонецЦикла; КонецЕсли;
		
	Поз = Способ.Код;
	Возврат Лев(СтрДо, Поз - 1) + ?(Вкл, "1", "0") + Сред(СтрДо, Поз + 1);
	
КонецФункции

#Область Программные_настройки_оповещений // редактировать текущие и новые тут:

Функция ЗаписатьПодписку(Ссылка, Событие, ПозПолучателя, ВидДействия)
	
	Запись = РегистрыСведений.ПодпискиНаОповещение.СоздатьМенеджерЗаписи();
	Запись.Событие 		= Событие;
	Запись.Ссылка 		= Ссылка;
	Запись.Подписчик 	= ПараметрыСеанса.ТекущийПользователь;
	Запись.Прочитать();
			
	Запись.Событие 		= Событие;
	Запись.Ссылка 		= Ссылка;
	Запись.Подписчик 	= ПараметрыСеанса.ТекущийПользователь;
	Запись.ДатаПодписки = ТекущаяДата();
	Запись.Активно 		= Истина;
	Запись.Способы 		= стрСпособыИзСпособа(Справочники.СпособыСообщений[Сред(ВидДействия, ПозПолучателя)], Запись.Способы);
	
	Возврат ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(Запись);
	
КонецФункции

Функция ОбработкаВыбораОповещенияНаОбъекте(ВидДействия, Ссылка = Неопределено) Экспорт
	
	// Для внутреннего будет суффикс для того чтобы знать откуда начинать действие
	ДобПоз = 0;
	Если СтрНачинаетсяС(ВидДействия, "ВнутреннийЗаказ") Тогда
		ВидДействия = СтрЗаменить(ВидДействия, "ВнутреннийЗаказ", "Заказ");
		ДобПоз 		= 10; КонецЕсли;
	
	Если СтрНачинаетсяС(ВидДействия, "ЗаказОтгрузка") Тогда
		
		Если СтрЗаканчиваетсяНа(ВидДействия, "Msg") Или СтрЗаканчиваетсяНа(ВидДействия, "Mail") Или СтрЗаканчиваетсяНа(ВидДействия, "Tgr") Тогда
			Возврат ЗаписатьПодписку(Ссылка,Справочники.События.ОтгруженЗаказКлиенту, 14 + ДобПоз, ВидДействия) КонецЕсли; 
		
	ИначеЕсли СтрНачинаетсяС(ВидДействия, "ЗаказОплата") Тогда
		
		Если СтрЗаканчиваетсяНа(ВидДействия, "Msg") Или СтрЗаканчиваетсяНа(ВидДействия, "Mail") Или СтрЗаканчиваетсяНа(ВидДействия, "Tgr") Тогда
			Возврат ЗаписатьПодписку(Ссылка, Справочники.События.ЗаказОплачен, 12 + ДобПоз, ВидДействия); КонецЕсли; 
		
	ИначеЕсли СтрНачинаетсяС(ВидДействия, "ЗаказРезерв") Тогда
		
		Если СтрЗаканчиваетсяНа(ВидДействия, "Msg") Или СтрЗаканчиваетсяНа(ВидДействия, "Mail") Или СтрЗаканчиваетсяНа(ВидДействия, "Tgr") Тогда
			Возврат ЗаписатьПодписку(Ссылка, Справочники.События.РаздачаРезерва, 19 + ДобПоз, ВидДействия); КонецЕсли;  КонецЕсли;
	
	ОбщиеФункции.СообщитьТекст("Чтото не доделано в коде... я не знаю что мне делать");
	Возврат Ложь; // Нет обработчика или ошибка
	
КонецФункции
Функция ПолучитьСписокСобытийДляОбъекта(ВидОбъекта) Экспорт
	
	Список = Новый СписокЗначений;
	
	Если СтрЗаканчиваетсяНа(ВидОбъекта, "Заказ") Тогда
		
		ЕстьПочта 	= ЗначениеЗаполнено(ПараметрыСеанса.ТекущийПользователь.Почта);
		ЕстьТелега 	= ЗначениеЗаполнено(ПараметрыСеанса.ТекущийПользователь.idДиалогаТелеграм);
		
								Список.Добавить("ЗаказРезервРаздачаMsg",	"Раздача резерва -> сообщить в 1с");
		Если ЕстьПочта Тогда 	Список.Добавить("ЗаказРезервРаздачаMail",	"Раздача резерва -> прислать письмо"); КонецЕсли;
		Если ЕстьТелега Тогда 	Список.Добавить("ЗаказРезервРаздачаTgr",	"Раздача резерва -> сообщить боту в телеграме"); КонецЕсли;
		
		Если ВидОбъекта <> "ВнутреннийЗаказ" Тогда
									Список.Добавить("ЗаказОплатаMsg", 			"Оплата заказа -> сообщить в 1с");
			Если ЕстьПочта Тогда 	Список.Добавить("ЗаказОплатаMail", 			"Оплата заказа -> прислать письмо"); КонецЕсли;
			Если ЕстьТелега Тогда 	Список.Добавить("ЗаказОплатаTgr", 			"Оплата заказа -> сообщить боту в телеграме"); КонецЕсли; КонецЕсли;
		
								Список.Добавить("ЗаказОтгрузкаMsg", 		"Отгрузка заказа -> сообщить в 1с");
		Если ЕстьПочта Тогда 	Список.Добавить("ЗаказОтгрузкаMail", 		"Отгрузка заказа -> прислать письмо"); КонецЕсли;
		Если ЕстьТелега Тогда 	Список.Добавить("ЗаказОтгрузкаTgr", 		"Отгрузка заказа -> сообщить боту в телеграме"); КонецЕсли; КонецЕсли;
	
	Возврат Список;
	
КонецФункции

Функция ПолучитьОписаниеПодписки(Запись, ПоказыватьСобытие = Истина, ПоказыватьСообщения = Истина, ПоказыватьСсылку = Истина, ПоказыватьМесто = Истина, ПоказыватьДату = Истина) Экспорт
	
	// Возвращает текстовое представление записи подписки для пользователя
	
	стр = ?(ПоказыватьСобытие, "[" + Запись.Событие + "]", "");
	
	// Через что оповещать
	
	Запрос = Новый Запрос("ВЫБРАТЬ Код, ИмяПредопределенныхДанных Имя ИЗ Справочник.СпособыСообщений");
	ТаблСобщ 		= Запрос.Выполнить().Выгрузить();
	стрДлина 		= стрДлина(Запись.Способы);
	СпособыСообщ 	= Новый Массив;
	
	Для Ном = 1 По стрДлина Цикл
		Если Сред(Запись.Способы, Ном, 1) = "1" Тогда
			СпособыСообщ.Добавить(ТаблСобщ.Найти(Ном, "Код").Имя); КонецЕсли; КонецЦикла;
	
	стр = стр + ?(ПоказыватьСообщения, " =>" + СтрСоединить(СпособыСообщ, ";") + ".", "");
	
	// Основная ссылка
	
	Если ПоказыватьСсылку Тогда
		
		Если ЗначениеЗаполнено(Запись.Ссылка) Тогда стр = стр + " " + Запись.Ссылка КонецЕсли;
	
		// Частные случаи
		
		Если Запись.Событие = Справочники.События.ОтгруженЗаказКлиенту Тогда
			
			Если Не ЗначениеЗаполнено(Запись.Ссылка) Тогда
				стр = стр + " Все заказы"; КонецЕсли;
			
		ИначеЕсли Запись.Событие = Справочники.События.НазначенОсновнойМенеджер Тогда
			
			стр = СтрЗаменить(стр, " " + Запись.Ссылка, ""); // удалм предыдыщую запись
			
			Если Лев(Запись.Настройки, 2) = "00" Тогда Возврат "Не корректно настроено оповещении о назначении основного менеджера"; КонецЕсли;
			Если ПустаяСтрока(Запись.Настройки) Тогда
				стр = стр + " любые изменения основного менеджера";
			Иначе
				
				Список = ПолучитьПользователейИзСтроки(Запись.Настройки, Ложь);
				Стр = стр + СтрШаблон(" %1 %2 %3",
								?(Лев(Запись.Настройки, 1) = "1", "назначения", ""),
								?(Лев(Запись.Настройки, 2) = "11", "или", ""),
								?(Сред(Запись.Настройки, 2, 1) = "1", "снятия", ""));
								
				Если Список.Количество() Тогда
					Стр = Стр + " а также для: " + СтрСоединить(Список, "; "); КонецЕсли; КонецЕсли; КонецЕсли; КонецЕсли;
	// Где
		
	Если ПоказыватьМесто И ЗначениеЗаполнено(Запись.Место) Тогда стр = стр + " (" + Запись.Место + ")" КонецЕсли;
	
	// Когда
	
	стр = стр + ?(ПоказыватьДату, " Начинать с " + Формат(Запись.ДатаПодписки, "ДЛФ=DDT"), "");
	
	Возврат Стр;
	
КонецФункции


#КонецОбласти

#Область Мгновенные_сообщения

Функция УдалитьСообщение(guid) Экспорт
	
	Запись = РегистрыСведений.МгновенныеСообщения.СоздатьМенеджерЗаписи();
	Запись.guid 		= guid;
	Запись.Пользователь = ПараметрыСеанса.ТекущийПользователь;
	
	Возврат ОбщиеФункции.УдалитьОбъектИСообщитьЕслиОшибка(Запись);
	
КонецФункции
Функция ПолучитьСообщение() Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 	Соб.guid, Соб.Событие, Соб.ДатаСобытия, Соб.Название, Соб.КраткоеОписание, Соб.Место, Соб.Пользователь, Соб.Ссылка, Соб.Инициатор
	|ИЗ 		РегистрСведений.События Соб
	|
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ	РегистрСведений.МгновенныеСообщения Тек
	|ПО						Тек.guid 			= Соб.guid И
	|						Тек.Пользователь 	= &Пользователь
	|УПОРЯДОЧИТЬ ПО ДатаСобытия");

	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	
	Выполнение = Запрос.Выполнить();
	Если Не Выполнение.Пустой() Тогда Возврат КонвертацияТипов.ПолучитьСтруктуруИзСТрокиТаблицыЗначений(Выполнение.Выгрузить()) КонецЕсли;
	
КонецФункции
Функция ПолучитьКоличествоТекущихСообщений() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ КОЛИЧЕСТВО(guid) Кол ИЗ РегистрСведений.МгновенныеСообщения ГДЕ Пользователь = &Пользователь");
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	
	Выполнение = Запрос.Выполнить();
	Если Выполнение.Пустой() Тогда
		Возврат 0;
	Иначе
		Выборка = Выполнение.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Кол; КонецЕсли;
		
КонецФункции

#КонецОбласти

Процедура ОтправкаСообщений() Экспорт   // this is robot
	
	Запрос = Новый Запрос;
	Запрос.Текст= " 
	|ВЫБРАТЬ Условия.Способ Способ, Соб.Событие, Соб.guid, Соб.ДатаСобытия, Соб.Название, Соб.КраткоеОписание, Соб.Описание, Соб.Место, Соб.Пользователь, Подписчик, Соб.Параметры, Настройки
	|	ИЗ
	|РегистрСведений.События КАК Соб
	|	
	|внутреннее соединение
	|	
	|(
	|выбрать 
	|	Подп.Подписчик КАК Подписчик,
	|	Подп.Настройки КАК Настройки,
	|	Спос.Ссылка КАК Способ,
	|	Подп.Событие КАК Событие,
	|	Подп.Ссылка КАК Ссылка,
	|	Подп.ДатаПодписки КАК ДатаПодписки
	|из
	|	РегистрСведений.ПодпискиНаОповещение КАК Подп
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СпособыСообщений КАК Спос
	|		ПО (ПОДСТРОКА(Подп.Способы, Спос.Код, 1) = ""1"")
	|ГДЕ
	|	Подп.Активно
	|) Условия	
	|	
	|ПО 
	|Условия.Событие = Соб.Событие 
	|И (Условия.Ссылка = НЕОПРЕДЕЛЕНО или Условия.Ссылка = Соб.Ссылка)
	|И Условия.ДатаПодписки <= Соб.ДатаСобытия
	|";
	
	//Запрос = Новый Запрос("
	//|ВЫБРАТЬ 	Спос.Ссылка Способ, Соб.Событие, Соб.guid, Соб.ДатаСобытия, Соб.Название, Соб.КраткоеОписание, Соб.Описание, Соб.Место, Соб.Пользователь, Подписчик, Соб.Параметры, Настройки
	//|ИЗ 		РегистрСведений.ПодпискиНаОповещение Подп 
	//|
	//|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	//|	РегистрСведений.События Соб
	//|ПО
	//|	Подп.Событие = Соб.Событие И
	//|	ВЫБОР КОГДА Подп.Ссылка = НЕОПРЕДЕЛЕНО ТОГДА ИСТИНА ИНАЧЕ Подп.Ссылка = Соб.Ссылка КОНЕЦ И
	//|	Подп.ДатаПодписки <= Соб.ДатаСобытия
	//|
	//|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	//|	Справочник.СпособыСообщений Спос
	//|ПО
	//|	ПОДСТРОКА(Подп.Способы, Спос.Код, 1) = ""1""
	//|
	//|ЛЕВОЕ СОЕДИНЕНИЕ 	РегистрСведений.ОтправленныеСобытия Отпр
	//|ПО 				Соб.guid 		= Отпр.guid И
	//|					Подп.Подписчик 	= Отпр.Пользователь И
	//|					ПОДСТРОКА(Подп.Способы, Отпр.Способ.Код, 1) = ""1""
	//|
	//|ГДЕ Подп.Активно И Отпр.guid ЕСТЬ NULL");
	
	//Запрос.УстановитьПараметр("МгновСообщение", Справочники.СпособыСообщений.МгновенныеСообщения);
	Запрос.УстановитьПараметр("Пользователь", 	ПараметрыСеанса.ТекущийПользователь);
	
	Выполнение = Запрос.Выполнить();
	Если Не Выполнение.Пустой() Тогда
		
		СобытиеСменаОснМенеджера = Справочники.События.НазначенОсновнойМенеджер;
		
		СпособПочта			= Справочники.СпособыСообщений.Mail;
		СпособМгновенный 	= Справочники.СпособыСообщений.Msg;
		СпособТелега		= Справочники.СпособыСообщений.Tgr;
		Выборка 			= Выполнение.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
#Область Хитрые_фильтры
			
			// Отфильтруем записи по параметрам
			
			//Андриянов 07.04.2017 добавляем причину неотправки, в случае если сообщение не отправляем
			ПричинаНеотправки = "";
			
			Если Выборка.Событие = СобытиеСменаОснМенеджера И Не ПустаяСтрока(Выборка.Настройки) Тогда
				
				//Андриянов 07.04.2017 - почему-то иногда это не параметры, а просто строка и тогда ошибка
				//Делаем всё это в попытке и если ошибка, то пишем какая
				Попытка
					Параметры = ЗначениеИзСтрокиВнутр(Выборка.Параметры);
				
					// Соберем пользователей из строки которых будем проверять
					
					ПровПользователи = ПолучитьПользователейИзСтроки(Выборка.Настройки,,Выборка.Подписчик);
					
					// Проверим
					
					ПроверитьНового		= Лев(Выборка.Настройки, 1) = "1";
					ПроверитьСтарого 	= Сред(Выборка.Настройки, 2, 1) = "1";
					
					Попадаем = Ложь;
					Для Каждого текПользователь Из ПровПользователи Цикл
						
						Если 	(ПроверитьНового И Параметры.НовыйМенеджер = текПользователь) Или 
								(ПроверитьСтарого И Параметры.СтарыйМенеджер = текПользователь) Тогда
							Попадаем = Истина; Прервать; КонецЕсли; КонецЦикла;
					
					Если Не Попадаем Тогда
						ПричинаНеотправки = "Не попало в отправку по хитрому фильтру";
						//Продолжить; 
					КонецЕсли; 
				Исключение
					ПричинаНеотправки = ОписаниеОшибки();
				КонецПопытки;
			КонецЕсли;
#КонецОбласти			

#область Запись
			НачатьТранзакцию();
			//Если до этого была ошибка, то ничего не отправляем
			Если ЗначениеЗаполнено(ПричинаНеотправки) Тогда
				
			ИначеЕсли Выборка.Способ = СпособМгновенный Тогда
		
				// Добавим в массив по адресу сообщений новые сообщения
				
				Запись = РегистрыСведений.МгновенныеСообщения.СоздатьМенеджерЗаписи();
				Запись.guid 		= Выборка.guid;
				Запись.Пользователь = Выборка.Подписчик;
				Запись.Записать();
				
			ИначеЕсли Выборка.Способ = СпособПочта И Не ПустаяСтрока(Выборка.Подписчик.Почта) Тогда
				
				// Отправим письмо
				
				ТекстПисьма = "В базе 1С произошло событие:
				|
				|" + ?(ПустаяСтрока(Выборка.Описание), Выборка.КраткоеОписание, Выборка.Описание) + "
				|
				|Письмо послано автоматически. Не нужно отвечать на это письмо.";
				
				Отказ = Ложь;
				ОбщиеФункции.ОповеститьПоПочте(Выборка.Подписчик.Почта, "[GarageEvent]: " + Выборка.КраткоеОписание, ТекстПисьма, Отказ);
				Если Отказ Тогда ОтменитьТранзакцию(); Продолжить; КонецЕсли;
				
			ИначеЕсли Выборка.Способ = СпособТелега И Не ПустаяСтрока(Выборка.Подписчик.idДиалогаТелеграм) Тогда
				
				// Отправим в телеграм
				
				BotKot.СообщитьКоту(Выборка.Подписчик.idДиалогаТелеграм, Выборка.КраткоеОписание);
				
			Иначе
				ПричинаНеотправки = "Неизвестный способ доставки";
	 				//ОтменитьТранзакцию();
					//Продолжить;
			КонецЕсли; // Не известный способ не отправляем
								
			// Теперь запишем что сообщили чтобы не сообщать повторно
			
			//Запись = РегистрыСведений.ОтправленныеСобытия.СоздатьМенеджерЗаписи();
			//Запись.Пользователь 		= Выборка.Подписчик;
			//Запись.guid 				= Выборка.guid;
			//Запись.Способ 				= Выборка.Способ;
			//Запись.Событие 				= Выборка.Событие;
			//Запись.ПричинаНеотправки 	= ПричинаНеотправки;
			//Запись.Записать();
			
			
			Запись = РегистрыСведений.События.СоздатьМенеджерЗаписи();
			Запись.guid = Выборка.guid;
			Запись.Удалить();
			
			
			ЗафиксироватьТранзакцию(); КонецЦикла; КонецЕсли;
	
	#КонецОбласти

КонецПроцедуры

Процедура ЗарегистрироватьСобытие(ИмяСобытия, ДопПараметры = Неопределено, Контекст = Неопределено) Экспорт
	
	// Регистрирует произошедшее событие
	// ДрПараметры - стуктура параметров как в записи регистра События
	//					если значением параметра будет структура или массив тогда такое превращается в строковое представление 1с
	
	// ПОТОМ СДЕЛАТЬ В ПОТОКЕ (ФОНЕ) !!!!
	
	Запись = РегистрыСведений.События.СоздатьМенеджерЗаписи();
	Запись.Событие 		= Справочники.События[ИмяСобытия];
	Запись.guid			= Новый УникальныйИдентификатор;
	Запись.ДатаСобытия 	= ТекущаяДата();
	Запись.Пользователь = ПараметрыСеанса.ТекущийПользователь;
	
	Если ДопПараметры <> Неопределено Тогда
		
		ТипСтруктура 	= Тип("Структура");
		ТипМассив 		= Тип("Массив");
		
		// Вытащим параметры
		
		МетаРес = Метаданные.РегистрыСведений.События.Ресурсы;
		Для Каждого Ресурс Из МетаРес Цикл
			Если ДопПараметры.Свойство(Ресурс.Имя) Тогда
				
				Значение	= ДопПараметры[Ресурс.Имя];
				Тип			= ТипЗнч(Значение);
				
				Если Тип = ТипСтруктура Или Тип = ТипМассив Тогда
						Запись[Ресурс.Имя] = ЗначениеВСтрокуВнутр(Значение);
				Иначе	Запись[Ресурс.Имя] = Значение; КонецЕсли; КонецЕсли; КонецЦикла; КонецЕсли;
				
	// Вызовим дополнительное заполнение события
	
	Справочники.События.ЗаполнитьПараметрыСобытияПриВозникновении(Запись.Событие, ДопПараметры, Контекст);
					
	// Запишем
				
	ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(Запись);
	
КонецПроцедуры

Функция ПолучитьПользователейИзСтроки(Строка, ДобавитьТекущего = Ложь, ДопПользователь = Неопределено) Экспорт
	
	ПровПользователи = Новый Массив;
	Если ДобавитьТекущего Тогда ПровПользователи.Добавить(ПараметрыСеанса.ТекущийПользователь) КонецЕсли;
	Если ДопПользователь <> Неопределено Тогда ПровПользователи.Добавить(ДопПользователь) КонецЕсли;
	
	Длина = стрДлина(Строка);
	Для Ном = 1 По (Длина - 2) / 36 Цикл
					
		Пользователь = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(Строка, Ном * 36 - 33, 36)));
		Если ПровПользователи.найти(Пользователь) = Неопределено Тогда
			ПровПользователи.Добавить(Пользователь); КонецЕсли; КонецЦикла;

	Возврат ПровПользователи;
	
КонецФункции