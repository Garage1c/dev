////////////////////////////////////////////////////////////////////////////////
// Общие процедуры и функции 

// Выполнить экспортную процедуру без параметров по имени.
//
// Параметры
//  ИмяЭкспортнойПроцедуры – Строка    – имя экспортной процедуры в формате 
//										 <имя объекта>.<имя процедуры>, где <имя объекта> - это
// 										 общий модуль или модуль менеджера объекта.
//
// Пример:
//  ВыполнитьБезопасно("МойОбщийМодуль.МояПроцедура"); 
//
Процедура ВыполнитьБезопасно(Знач ИмяЭкспортнойПроцедуры) Экспорт
	
	// Проверка предусловий на формат ИмяЭкспортнойПроцедуры.
	ЧастиИмени = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяЭкспортнойПроцедуры, ".");
	Если ЧастиИмени.Количество() <> 2 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Неправильный формат параметра ИмяЭкспортнойПроцедуры (%1)'"),
			ИмяЭкспортнойПроцедуры);
	КонецЕсли;

	ИмяОбъекта = ЧастиИмени[0];
	Если (Метаданные.ОбщиеМодули.Найти(ИмяОбъекта) = Неопределено)
 		И (Метаданные.Обработки.Найти(ИмяОбъекта) = Неопределено) 
 		И (Метаданные.Документы.Найти(ИмяОбъекта) = Неопределено) 
 		И (Метаданные.Справочники.Найти(ИмяОбъекта) = Неопределено)
 		И (Метаданные.Обработки.Найти(ИмяОбъекта) = Неопределено) Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Неправильный формат параметра ИмяЭкспортнойПроцедуры (%1)'"),
			ИмяЭкспортнойПроцедуры);
	КонецЕсли;

	Выполнить ИмяЭкспортнойПроцедуры + "();";
	
КонецПроцедуры

// Возвращает выборку со значениями реквизитов переданной ссылки
//
Функция ПолучитьЗначенияРеквизитов(Ссылка, ИменаРеквизитов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	" + ИменаРеквизитов + "
		|ИЗ
		|	" + Ссылка.Метаданные().ПолноеИмя() + " КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Результат = Новый Структура(ИменаРеквизитов);
	ЗаполнитьЗначенияСвойств(Результат, Выборка);
	
	Возврат Результат;
	
КонецФункции

// Получить значение одного реквизита по ссылке.
// Например, для элемента справочника нужно получить наименование,
// в этом случае в качестве ИмяРеквизита нужно передать "Наименование".
//
Функция ПолучитьЗначениеРеквизита(Ссылка, ИмяРеквизита) Экспорт
	
	Результат = ПолучитьЗначенияРеквизитов(Ссылка, ИмяРеквизита);
	Возврат Результат[ИмяРеквизита];
	
КонецФункции

// Дополняет таблицу значений-приемник данными из таблицы значений-источник
//
// Параметры:
//  ТаблицаИсточник - Таблица значений - таблица из которой будут браться строки для заполнения
//  ТаблицаПриемник - Таблица значений - таблица в которую будут добавлены строки из таблицы-источника
//  
Процедура ДополнитьТаблицу(ТаблицаИсточник, ТаблицаПриемник) Экспорт
	
	Для Каждого СтрокаТаблицыИсточник ИЗ ТаблицаИсточник Цикл
		
		ЗаполнитьЗначенияСвойств(ТаблицаПриемник.Добавить(), СтрокаТаблицыИсточник);
		
	КонецЦикла;
	
КонецПроцедуры

// Объединяет две таблицы значений по условию "И".
// Возвращает таблицу значений, полученную в результате объединения двух таблиц по условию "И".
//
// Параметры:
//  Таблица1         - ТаблицаЗначений - первая таблица значений для объединения
//  Таблица2         - ТаблицаЗначений - вторая таблица значений для объединения
//  ПоляТаблицы      - Строка - поля таблицы, перечисленные через запятую, по которым будут выполнятся объединение
//  ИмяПоляИтератора - Строка - имя служебной колонки таблицы значений.
//                              Это имя должно быть уникально во множестве имен колонок первой и второй таблиц.
//                              Переменная ПоляТаблицы не должна содержать этого имени. Значение по умолчанию "ИтераторПоляТаблицы"
// 
// Возвращаемое значение:
//  ТаблицаЗначений -  таблица значений, полученная в результате объединения двух таблиц по условию "И"
//
Функция ОбъединитьТаблицыПоУсловиюИ(Знач Таблица1, Знач Таблица2, Знач ПоляТаблицы, ИмяПоляИтератора = "ИтераторПоляТаблицы") Экспорт
	
	Таблица1.Свернуть(ПоляТаблицы);
	Таблица2.Свернуть(ПоляТаблицы);
	
	ДобавитьИтераторТаблице(Таблица1, +1, ИмяПоляИтератора);
	ДобавитьИтераторТаблице(Таблица2, -1, ИмяПоляИтератора);
	
	ТаблицаРезультат = Таблица1.Скопировать();
	
	ДополнитьТаблицу(Таблица2, ТаблицаРезультат);
	
	ТаблицаРезультат.Свернуть(ПоляТаблицы, ИмяПоляИтератора);
	
	ТаблицаРезультат = ТаблицаРезультат.Скопировать(Новый Структура(ИмяПоляИтератора, 0));
	
	ТаблицаРезультат.Колонки.Удалить(ИмяПоляИтератора);
	
	Возврат ТаблицаРезультат;
	
КонецФункции

// Добавляет колонку в таблицу значений. Заполняет колонку переданным значением
//
// Параметры:
//  Таблица           - ТаблицаЗначений - таблица значений для добавления колонки
//  ЗначениеИтератора - Произвольный - значение, которым будет заполнено новое поле таблицы
//  ИмяПоляИтератора  - Строка - имя добавляемого поля
// 
Процедура ДобавитьИтераторТаблице(Таблица, ЗначениеИтератора, ИмяПоляИтератора)
	
	Таблица.Колонки.Добавить(ИмяПоляИтератора);
	
	Таблица.ЗаполнитьЗначения(ЗначениеИтератора, ИмяПоляИтератора);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции

// Возвращает имя COM-класса для работы с 1С:Предприятием 8 через COM-соединение.
//
Функция ИмяCOMСоединителя() Экспорт
	
	СистемнаяИнфо = Новый СистемнаяИнформация;
	ПодстрокиВерсии = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		СистемнаяИнфо.ВерсияПриложения, ".");
	Возврат "v" + ПодстрокиВерсии[0] + ПодстрокиВерсии[1] + ".COMConnector";
	
КонецФункции	

// Функция ИнформационнаяБазаФайловая определяет режим эксплуатации
// информационной базы файловый (Истина) или Серверный (Ложь).
//  При проверке используется СтрокаСоединенияИнформационнойБазы, которую
// можно указать явно.
//
// Параметры:
//  СтрокаСоединенияИнформационнойБазы - Строка - параметр используется, если
//                 нужно проверить строку соединения не текущей информационной базы.
//
// Возвращаемое значение:
//  Булево.
//
Функция ИнформационнаяБазаФайловая(Знач СтрокаСоединенияИнформационнойБазы = "") Экспорт
			
	Если ПустаяСтрока(СтрокаСоединенияИнформационнойБазы) Тогда
		СтрокаСоединенияИнформационнойБазы =  СтрокаСоединенияИнформационнойБазы();
	КонецЕсли;
	Возврат Найти(Врег(СтрокаСоединенияИнформационнойБазы), "FILE=") = 1;
	
КонецФункции // ИнформационнаяБазаФайловая()

// Проверяет, что документу разрешено проведение
//
Функция ДокументПроводится(знач ИмяДокумента) Экспорт
	
	ИмяДокументаМассив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяДокумента, ".");
	
	Если ИмяДокументаМассив.Количество() > 1 Тогда
		ИмяДокумента = ИмяДокументаМассив[1];
	КонецЕсли;
	
	Если Метаданные.Документы[ИмяДокумента].Проведение = 
	        Метаданные.СвойстваОбъектов.Проведение.Разрешить Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Получить представление информационной базы для отображения пользователю.
//
// Возвращаемое значение:
//   Строка      - Представление информационной базы
//
// Пример возвращаемого результата:
// - для ИБ в файлом режиме: \\FileServer\1c_ib\
// - для ИБ в серверном режиме: ServerName:1111 / information_base_name
//
Функция ПолучитьПредставлениеИнформационнойБазы() Экспорт
	
	СтрокаСоединенияСБД = СтрокаСоединенияИнформационнойБазы();
	
	ЭтоФайловаяИБ = ИнформационнаяБазаФайловая(СтрокаСоединенияСБД);
	
	Если ЭтоФайловаяИБ Тогда
		ПутьКБД = Сред(СтрокаСоединенияСБД, 6, СтрДлина(СтрокаСоединенияСБД) - 6);
		ФайловаяБД = Истина;
	Иначе
		// надо к имени сервера прибавить имя пути информационной базы
		ПозицияПоиска = Найти(Врег(СтрокаСоединенияСБД), "SRVR=");
		
		Если ПозицияПоиска <> 1 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ПозицияТочкиСЗапятой = Найти(СтрокаСоединенияСБД, ";");
		НачальнаяПозицияКопирования = 6 + 1;
		КонечнаяПозицияКопирования = ПозицияТочкиСЗапятой - 2; 
		
		ИмяСервера = Сред(СтрокаСоединенияСБД, НачальнаяПозицияКопирования, КонечнаяПозицияКопирования - НачальнаяПозицияКопирования + 1);
		
		СтрокаСоединенияСБД = Сред(СтрокаСоединенияСБД, ПозицияТочкиСЗапятой + 1);
		
		// позиция имени сервера
		ПозицияПоиска = Найти(Врег(СтрокаСоединенияСБД), "REF=");
		
		Если ПозицияПоиска <> 1 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		НачальнаяПозицияКопирования = 6;
		ПозицияТочкиСЗапятой = Найти(СтрокаСоединенияСБД, ";");
		КонечнаяПозицияКопирования = ПозицияТочкиСЗапятой - 2; 
		
		ИмяИБНаСервере = Сред(СтрокаСоединенияСБД, НачальнаяПозицияКопирования, КонечнаяПозицияКопирования - НачальнаяПозицияКопирования + 1);
		
		ПутьКБД = ИмяСервера + "/ " + ИмяИБНаСервере;
		ФайловаяБД = Ложь;
		
	КонецЕсли;
	
	Возврат ПутьКБД;
	
КонецФункции

// Проверить, что описание типа состоит из единственного типа значения и 
// совпадает с нужным типом.
//
// Возвращаемое значение:
//   Булево      - Совпадает или нет
//
Функция ОписаниеТипаСостоитИзТипа(ОписаниеТипа, ТипЗначения) Экспорт
	
	Если ОписаниеТипа.Типы().Количество() = 1 Тогда
		Если ОписаниеТипа.Типы().Получить(0) = ТипЗначения Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

// Проверка того, что значение имеет ссылочный тип данных
Функция ЗначениеСсылочногоТипа(Значение) Экспорт
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПланыСчетов.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если БизнесПроцессы.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если БизнесПроцессы.ТипВсеСсылкиТочекМаршрутаБизнесПроцессов().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Задачи.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПланыОбмена.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает вид объекта по переданной ссылке - строку "Справочник", "Документ" и т.д.
// Не обрабатываются точки маршрутов бизнес-процессов.
Функция ВидОбъектаПоСсылке(Ссылка) Экспорт
	ТипСсылки = ТипЗнч(Ссылка);
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат "Справочник";

	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат "Документ";

	ИначеЕсли БизнесПроцессы.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат "БизнесПроцесс";

	ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат "ПланВидовХарактеристик";

	ИначеЕсли ПланыСчетов.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат "ПланСчетов";

	ИначеЕсли ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат "ПланВидовРасчета";

	ИначеЕсли Задачи.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат "Задача";

	ИначеЕсли ПланыОбмена.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат "ПланОбмена";

	ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат "Перечисление";

	Иначе
		Возврат "";

	КонецЕсли;
	
КонецФункции

// Возвращает менеджер объекта по переданной ссылке.
// Не обрабатываются точки маршрутов бизнес-процессов.
Функция МенеджерОбъектаПоСсылке(Ссылка) Экспорт
	
	ИмяОбъекта = Ссылка.Метаданные().Имя;
	ТипСсылки = ТипЗнч(Ссылка);
	
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат Справочники[ИмяОбъекта];
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат Документы[ИмяОбъекта];
	ИначеЕсли БизнесПроцессы.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат БизнесПроцессы[ИмяОбъекта];
	ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат ПланыВидовХарактеристик[ИмяОбъекта];
	ИначеЕсли ПланыСчетов.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат ПланыСчетов[ИмяОбъекта];
	ИначеЕсли ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат ПланыВидовРасчета[ИмяОбъекта];
	ИначеЕсли Задачи.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат Задачи[ИмяОбъекта];
	ИначеЕсли ПланыОбмена.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат ПланыОбмена[ИмяОбъекта];
	ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат Перечисления[ИмяОбъекта];
	Иначе
		Возврат НеОпределено;
	КонецЕсли;
	
КонецФункции

// Функция считывает xml переданный строкой в таблицу значений
// колонки таблицы значений формируются на основе описания в XML.
//
Функция ПрочитатьXMLВТаблицу(ТекстXML) Экспорт
	
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(ТекстXML);
	
	// Прочитаем первый узел и проверим его
	Если Не Чтение.Прочитать() Тогда
		ВызватьИсключение("Пустой XML");
	ИначеЕсли Чтение.Имя <> "Items" Тогда
		ВызватьИсключение("Ошибка в структуре XML");
	КонецЕсли;
	
	// Получим описание таблицы и создадим ее
	ИмяТаблицы = Чтение.ПолучитьАтрибут("Description");
	ИменаКолонок = СтрЗаменить(Чтение.ПолучитьАтрибут("Columns"), ",", Символы.ПС);
	Колонок = СтрЧислоСтрок(ИменаКолонок);
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	Для Сч = 1 По Колонок Цикл
		ТаблицаЗначений.Колонки.Добавить(СтрПолучитьСтроку(ИменаКолонок, Сч), Новый ОписаниеТипов("Строка"));
	КонецЦикла;
	
	// Заполним значения в таблице
	Пока Чтение.Прочитать() Цикл
		
		Если Чтение.ТипУзла <> ТипУзлаXML.НачалоЭлемента Тогда
			Продолжить;
		ИначеЕсли Чтение.Имя <> "Item" Тогда
			ВызватьИсключение("Ошибка в структуре XML");
		КонецЕсли;
		
		новСтр = ТаблицаЗначений.Добавить();
		Для Сч = 1 По Колонок Цикл
			ИмяКолонки = СтрПолучитьСтроку(ИменаКолонок, Сч);
			новСтр[Сч-1] = Чтение.ПолучитьАтрибут(ИмяКолонки);
		КонецЦикла;
		
	КонецЦикла;
	
	// Заполним результат
	Результат = Новый Структура;
	Результат.Вставить("ИмяТаблицы", ИмяТаблицы);
	Результат.Вставить("Данные", ТаблицаЗначений);
	
	Возврат Результат;
	
КонецФункции

// Получает двоичные данные из временного хранилища и сохраняет
// файл на сервере. Данные во временном хранилище удаляются.
//
Функция СохранитьФайлНаСервере(знач АдресВоВременномХранилище, знач ИмяФайла = Неопределено) Экспорт
	
	Если ИмяФайла = Неопределено Тогда
		ИмяФайла = ПолучитьИмяВременногоФайла();
	КонецЕсли;
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	ДвоичныеДанные.Записать(ИмяФайла);
	
	УдалитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	Возврат ИмяФайла;
	
КонецФункции

// Вызывается в серверном контексте и удаляет временные файлы на сервере 1С:Предприятие.
//
Процедура УдалитьФайлыНаСервере1СПредприятие(Путь) Экспорт
	
	УдалитьФайлы(Путь);
	
КонецПроцедуры

// Проверяет, что тип переданного объекта - СправочникСсылка
//
// Возвращаемое значение
// Булево : Истина - ссылка на справочник
//
Функция ПроверитьСсылкаНаСправочник(Ссылка) Экспорт
	
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Ссылка)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции


// Проверка того, что значение имеет ссылочный тип данных
// Если Тип Неопределено - вернется Ложь
Функция ТочноЗначениеСсылочногоТипа(Значение) Экспорт
	
	Если ТипЗнч(Значение) = Тип("Неопределено") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПланыСчетов.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если БизнесПроцессы.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если БизнесПроцессы.ТипВсеСсылкиТочекМаршрутаБизнесПроцессов().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Задачи.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПланыОбмена.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции


Функция ОчиститьТаблицуОтПустыхСсылок(Таблица, Колонки = Неопределено) Экспорт
	
	КолонкиТаблицы = ?(Колонки = Неопределено, Таблица.Колонки, Колонки);
	
	НайденыПустыеСсылки = Ложь;
	
	Для Каждого Колонка ИЗ КолонкиТаблицы Цикл
		
		ИмяКолонки = Колонка.Имя;
		
		Для Каждого Строка ИЗ Таблица Цикл 
			Если ТочноЗначениеСсылочногоТипа(Строка[ИмяКолонки]) И Строка[ИмяКолонки].Пустая() Тогда
				
				Строка[ИмяКолонки] = Неопределено;	НайденыПустыеСсылки = Истина; КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
		
	Возврат НайденыПустыеСсылки;
	
КонецФункции

// silber {

Функция ПоказатьНовостиПриОткрытии() Экспорт
	
	//Возврат Константы.ПоказыватьНовостиПриЗапуске.Получить();
	Возврат Константы.ПоказыватьНовостиПриЗапуске.Получить();
	
КонецФункции

// } silber


// возвращает пользовательские настройки для данного отчета с установленными параметрами
Функция ПолучитьПользовательскиеНастройкиСКД(ИмяОтчета, СтруктураПараметров) Экспорт
	Настройки = Отчеты[ИмяОтчета].Создать().КомпоновщикНастроек.ПользовательскиеНастройки;
	
	//придется делать цикл в цикле
	Для Каждого Парам из СтруктураПараметров Цикл
		
		Для Каждого Элемент Из Настройки.Элементы Цикл
			Если ТипЗнч(Элемент) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
				Если Строка(Элемент.Параметр) = парам.Ключ Тогда
					Элемент.Значение = Парам.Значение;
					Элемент.Использование = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Настройки;
	
КонецФункции


//+БПО

// Возвращает структуру, содержащую значения реквизитов прочитанные из информационной базы
// по ссылке на объект.
// 
//  Если доступа к одному из реквизитов нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Функция не предназначена для получения значений реквизитов пустых ссылок.
//
// Параметры:
//  Ссылка    - ЛюбаяСсылка - объект, значения реквизитов которого необходимо получить.
//
//  Реквизиты - Строка - имена реквизитов, перечисленные через запятую, в формате
//              требований к свойствам структуры.
//              Например, "Код, Наименование, Родитель".
//            - Структура, ФиксированнаяСтруктура - в качестве ключа передается
//              псевдоним поля для возвращаемой структуры с результатом, а в качестве
//              значения (опционально) фактическое имя поля в таблице.
//              Если значение не определено, то имя поля берется из ключа.
//            - Массив, ФиксированныйМассив - имена реквизитов в формате требований
//              к свойствам структуры.
//
// Возвращаемое значение:
//  Структура - содержит имена (ключи) и значения затребованных реквизитов.
//              Если строка затребованных реквизитов пуста, то возвращается пустая структура.
//              Если в качестве объекта передана пустая ссылка, то все реквизиты вернутся со значением Неопределено.
//
Функция ЗначенияРеквизитовОбъекта(Ссылка, Знач Реквизиты) Экспорт
	
	Если ТипЗнч(Реквизиты) = Тип("Строка") Тогда
		Если ПустаяСтрока(Реквизиты) Тогда
			Возврат Новый Структура;
		КонецЕсли;
		Реквизиты = СтрРазделить(Реквизиты, ",", Ложь);
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура;
	Если ТипЗнч(Реквизиты) = Тип("Структура") Или ТипЗнч(Реквизиты) = Тип("ФиксированнаяСтруктура") Тогда
		СтруктураРеквизитов = Реквизиты;
	ИначеЕсли ТипЗнч(Реквизиты) = Тип("Массив") Или ТипЗнч(Реквизиты) = Тип("ФиксированныйМассив") Тогда
		Для Каждого Реквизит Из Реквизиты Цикл
			СтруктураРеквизитов.Вставить(СтрЗаменить(Реквизит, ".", ""), Реквизит);
		КонецЦикла;
	Иначе
		//ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Неверный тип второго параметра Реквизиты: %1'"), Строка(ТипЗнч(Реквизиты)));
	КонецЕсли;
	
	ТекстПолей = "";
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		ИмяПоля   = ?(ЗначениеЗаполнено(КлючИЗначение.Значение),
		              СокрЛП(КлючИЗначение.Значение),
		              СокрЛП(КлючИЗначение.Ключ));
		
		Псевдоним = СокрЛП(КлючИЗначение.Ключ);
		
		ТекстПолей  = ТекстПолей + ?(ПустаяСтрока(ТекстПолей), "", ",") + "
		|	" + ИмяПоля + " КАК " + Псевдоним;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|" + ТекстПолей + "
	|ИЗ
	|	" + Ссылка.Метаданные().ПолноеИмя() + " КАК ПсевдонимЗаданнойТаблицы
	|ГДЕ
	|	ПсевдонимЗаданнойТаблицы.Ссылка = &Ссылка
	|";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Результат = Новый Структура;
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		Результат.Вставить(КлючИЗначение.Ключ);
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(Результат, Выборка);
	
	Возврат Результат;
	
КонецФункции

// Возвращает значение реквизита, прочитанного из информационной базы по ссылке на объект.
// 
//  Если доступа к реквизиту нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
//
// Функция не предназначена для получения значений реквизитов пустых ссылок.
// 
// Параметры:
//  Ссылка       - ссылка на объект, - элемент справочника, документ, ...
//  ИмяРеквизита - Строка, например, "Код".
// 
// Возвращаемое значение:
//  Произвольный    - зависит от типа значения прочитанного реквизита.
// 
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита) Экспорт
	
	Результат = ЗначенияРеквизитовОбъекта(Ссылка, ИмяРеквизита);
	Возврат Результат[СтрЗаменить(ИмяРеквизита, ".", "")];
	
КонецФункции 

// Возвращает значения реквизитов, прочитанные из информационной базы
// для нескольких объектов.
// 
//  Если доступа к одному из реквизитов нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
//
// Функция не предназначена для получения значений реквизитов пустых ссылок.
// 
// Параметры:
//  МассивСсылок - массив ссылок на объекты одного типа.
//				ВАЖНО! значения массива должны быть ссылками на 
//				объекты одного типа!
//  ИменаРеквизитов - Строка, имена реквизитов перечисленные через запятую,
//				в формате требований к свойствам структуры.
//				Например, "Код, Наименование, Родитель".
// 
// Возвращаемое значение:
//  Соответствие - где ключ - ссылка на объект, а Значение - структура, которая 
//		   		содержит список свойств, как список имен в строке.
//				ИменаРеквизитов, со значениям реквизитов, прочитанными из информационной базы.
// 
Функция ЗначенияРеквизитовОбъектов(МассивСсылок, ИменаРеквизитов) Экспорт
	
	ЗначенияРеквизитов = Новый Соответствие;
	Если МассивСсылок.Количество() = 0 Тогда
		Возврат ЗначенияРеквизитов;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Ссылка КАК Ссылка, " + ИменаРеквизитов + "
		|ИЗ
		|	" + МассивСсылок[0].Метаданные().ПолноеИмя() + " КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В (&МассивСсылок)";
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат = Новый Структура(ИменаРеквизитов);
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
		ЗначенияРеквизитов[Выборка.Ссылка] = Результат;
	КонецЦикла;
	
	Возврат ЗначенияРеквизитов;
	
КонецФункции

// Возвращает значения реквизита, прочитанного из информационной базы для нескольких объектов.
// 
//  Если доступа к реквизиту нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Функция не предназначена для получения значений реквизитов пустых ссылок.
//
// Параметры:
//  МассивСсылок - массив ссылок на объекты одного типа.
//				ВАЖНО! значения массива должны быть ссылками на 
//				объекты одного типа!
//  ИмяРеквизита - Строка, например, "Код".
// 
// Возвращаемое значение:
//  Соответствие - Ключ - ссылка на объект, Значение - значение прочитанного реквизита.
// 
Функция ЗначениеРеквизитаОбъектов(МассивСсылок, ИмяРеквизита) Экспорт
	
	ЗначенияРеквизитов = ЗначенияРеквизитовОбъектов(МассивСсылок, ИмяРеквизита);
	Для Каждого Элемент Из ЗначенияРеквизитов Цикл
		ЗначенияРеквизитов[Элемент.Ключ] = Элемент.Значение[ИмяРеквизита];
	КонецЦикла;
		
	Возврат ЗначенияРеквизитов;
	
КонецФункции

Процедура УстановитьРеквизитПроведеноПоККТ(Объект) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	ТекОбъект = Объект.ПолучитьОбъект();
	ТекОбъект.ОбменДанными.Загрузка = Истина;
	ТекОбъект.ПроведеноПоККТ = Истина;
	ТекОбъект.Записать();
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

Функция ККТПолучитьСтавкуНДС(СтавкаНДС,Ошибка) Экспорт
//0 - НДС 0% 
//10 - НДС 10% 
//18 - НДС 18% 
//Неопределенно - БЕЗ НДС 
	Если СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
		Возврат Неопределено;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
		Возврат 0;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС10 ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда
		Возврат 10;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС18 ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда
		Возврат 18;
	Иначе
		Возврат -1;
		Ошибка = "Невозможно напечатать на фискальнике налоговую ставку "+СтавкаНДС;
	КонецЕсли;
КонецФункции

Функция ПолучитьКодСистемыНалогообложения(Касса,Ошибка) Экспорт
	Если Касса.Организация.ВидСистемыНалогообложения.Пустая() Тогда
		Ошибка = "Незаполнен вид системы налогообложения в организации";
		Возврат Неопределено;
	ИначеЕсли Касса.Организация.ВидСистемыНалогообложения = Перечисления.ВидыСистемНалогообложения.Общая Тогда
		Возврат 0;
	ИначеЕсли Касса.Организация.ВидСистемыНалогообложения = Перечисления.ВидыСистемНалогообложения.УпрощеннаяДоход Тогда
		Возврат 1;
	ИначеЕсли Касса.Организация.ВидСистемыНалогообложения = Перечисления.ВидыСистемНалогообложения.УпрощеннаяДоходМинусРасход Тогда
		Возврат 2;
	ИначеЕсли Касса.Организация.ВидСистемыНалогообложения = Перечисления.ВидыСистемНалогообложения.ЕдиныйНалогНаВмененныйДоход Тогда
		Возврат 3;
	ИначеЕсли Касса.Организация.ВидСистемыНалогообложения = Перечисления.ВидыСистемНалогообложения.ЕдиныйСельскохозяйственныйНалог Тогда
		Возврат 4;
	ИначеЕсли Касса.Организация.ВидСистемыНалогообложения = Перечисления.ВидыСистемНалогообложения.ПатентнаяСистемаНалогообложения Тогда
		Возврат 5;
	Иначе
		Ошибка = "Неизвестный вид системы налогообложения "+Касса.Организация.ВидСистемыНалообложения;
	КонецЕсли;
КонецФункции

Функция НужноПробитиеПоКассе(Касса) Экспорт
	Возврат Касса.ПродажаПоККТ;
КонецФункции

Процедура УстановитьРеквизитыЧекаПослеПроведения(Объект,НомерСменыККТ,НомерЧекаККТ) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	ТекОбъект = Объект.ПолучитьОбъект();
	ТекОбъект.ОбменДанными.Загрузка = Истина;
	ТекОбъект.НомерСменыККТ = НомерСменыККТ;
	ТекОбъект.НомерЧекаККТ = НомерЧекаККТ;
	ТекОбъект.ПроведеноПоККТ = Истина;
	ТекОбъект.Записать();
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

Функция НужнаИнкассация(Касса) Экспорт
	Возврат Касса.ИнкассацияПоККТ;
КонецФункции

Функция ККТЗаполнитьНоменклатуру(Документ,ОбщиеПараметры,Ошибка) Экспорт
	СуммаПоДокументам = 0;
	
	Для Каждого ТекСтрока Из Документ.РасшифровкаСуммы Цикл
		Если ЗначениеЗаполнено(ТекСтрока.ДокументОтгрузки) Тогда
			ОбрабатываемыйДокумент = ТекСтрока.ДокументОтгрузки;
		Иначе
			ОбрабатываемыйДокумент = ТекСтрока.Заказ;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбрабатываемыйДокумент) Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ТекТовар Из ОбрабатываемыйДокумент.Товары Цикл
			СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека(); 
			СтрокаПозицииЧека.Наименование = ТекТовар.Номенклатура.Артикул+" "+ТекТовар.Номенклатура;
			СтрокаПозицииЧека.Количество = ТекТовар.Количество;
			СтрокаПозицииЧека.Цена = ТекТовар.Цена;
			СтрокаПозицииЧека.Сумма = ТекТовар.Сумма;
			СтрокаПозицииЧека.НомерСекции = ?(Документ.Касса.НомерСекцииККТ>0,Документ.Касса.НомерСекцииККТ,1);
			ТекСтавкаНДС = ОбщегоНазначения.ККТПолучитьСтавкуНДС(ТекТовар.СтавкаНДС,Ошибка);
			Если ТекСтавкаНДС = -1 Тогда
				Возврат Неопределено;
			КонецЕсли;
			СтрокаПозицииЧека.СтавкаНДС = ТекСтавкаНДС;
			ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
			
			СуммаПоДокументам = СуммаПоДокументам + ТекТовар.Сумма;
		КонецЦикла;
	КонецЦикла;
	Возврат СуммаПоДокументам;
КонецФункции
//-БПО

