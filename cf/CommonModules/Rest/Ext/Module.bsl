Процедура ЛогЗапроса(Запрос, ТелоЭтоФайл = Ложь, Менеджер = Неопределено) Экспорт
	
	Если Константы.ВестиЛогЗапросовRest.Получить() Тогда
		
		Если Менеджер = Неопределено Тогда Менеджер = РегистрыСведений.ЛогЗапросовRest КонецЕсли;
	
		Результат = ">> " + Запрос.HTTPМетод + " -> " + Запрос.ОтносительныйURL + Символы.ПС;
		Результат = Результат + Запрос.БазовыйURL + Символы.ПС;
		Результат = Результат + "Заголовки:" + Символы.ПС;
			
		Для каждого Параметр Из Запрос.Заголовки Цикл Результат = Результат + Параметр.Ключ + ":" + Параметр.Значение + Символы.ПС; КонецЦикла;
		Результат = Результат + "Параметры URL:" + Символы.ПС;
		Для каждого Параметр Из Запрос.ПараметрыURL Цикл Результат = Результат + Параметр.Ключ + ":" + Параметр.Значение + Символы.ПС; КонецЦикла;
		Результат = Результат + "Параметры запроса:" + Символы.ПС;
		Для каждого Параметр Из Запрос.ПараметрыЗапроса Цикл Результат = Результат + Параметр.Ключ + ":" + Параметр.Значение + Символы.ПС; КонецЦикла;
			
		Результат = Результат + "Тело запроса:" + Символы.ПС + ?(ТелоЭтоФайл, " тело это файл не логируется ", Запрос.ПолучитьТелоКакСтроку());
			
		Запись = Менеджер.СоздатьМенеджерЗаписи();
		Запись.ИДзапроса = Новый УникальныйИдентификатор;
		Запись.Дата 		= ТекущаяДата(); 
		Запись.СокрТекст 	= Результат;
		Запись.Текст 		= Результат;
		Запись.Записать(); КонецЕсли;
	
КонецПроцедуры
Процедура ЛогОтвета(Ответ, ТелоЭтоФайл = Ложь, Менеджер = Неопределено) Экспорт
	
	Если Константы.ВестиЛогЗапросовRest.Получить() Тогда
		
		Если Менеджер = Неопределено Тогда Менеджер = РегистрыСведений.ЛогЗапросовRest КонецЕсли;
	
		Результат = "<< " + Ответ.КодСостояния + " " + Ответ.Причина + Символы.ПС;
		Результат = Результат + "Заголовки:" + Символы.ПС;
		Для каждого Параметр Из Ответ.Заголовки Цикл Результат = Результат + Параметр.Ключ + ":" + Параметр.Значение + Символы.ПС; КонецЦикла;
		
		Результат = Результат + "Тело ответа:" + Символы.ПС + ?(ТелоЭтоФайл, " тело это файл не логируется ", Ответ.ПолучитьТелоКакСтроку());
		
		Запись = Менеджер.СоздатьМенеджерЗаписи();
		Запись.ИДзапроса = Новый УникальныйИдентификатор;
		Запись.Дата 		= ТекущаяДата(); 
		Запись.СокрТекст 	= Результат;
		Запись.Текст 		= Результат;
		Запись.Записать(); КонецЕсли;
	
КонецПроцедуры


Функция ПолучитьСтруктуруИзТелаЗапроса(Ответ, Запрос, ТелоЗапроса = "" )
	
	стрОшибки 			= "";
	СтруктураЗапроса 	= w1_Json.UnJSON(ТелоЗапроса(Запрос, ТелоЗапроса), стрОшибки);
	
	Если СтруктураЗапроса = Неопределено Тогда
		ВернутьОтветСОбработкойОшибки(Ответ,, "json is no correct: " + стрОшибки);		
		Возврат Неопределено; КонецЕсли;

	Возврат СтруктураЗапроса;
	
КонецФункции
Функция ПолучитьОбъектПоПараметруURL(Запрос, Ответ, ПараметрURL, Менеджер, Сайт = Неопределено)
	
	// Если Сайт = неопределено, значит не проверяем объект на принадлежность к сайту !
	
	Гуид 	= Запрос.ПараметрыURL[ПараметрURL];
	стрОшибки = "";
	Ссылка 	= HTTP.ПолучитьОбъектПоСсылке(Менеджер, Гуид, стрОшибки); 
	
	Если Ссылка = Неопределено Тогда 
		
		Ответ.КодСостояния = 404;
		Ответ.Причина = ПараметрURL + " not found";
		ЗавернутьОтветВJson(Ответ, "404", стрОшибки);

	ИначеЕсли Сайт <> Неопределено И Ссылка.СайтИсточник <> Сайт Тогда
		
		// Проверим чтобы сайт в объекте соответвовал объекту в url
		
		Ответ.КодСостояния 	= 404;
		Ответ.Причина 		= ПараметрURL + " relates to another site"; //(" + Строка(Сайт) + ")";
		ЗавернутьОтветВJson(Ответ, "404", "Объект относится к другому сайту: " +  Строка(Сайт));
		
	Иначе // тут все ок
		
		Возврат Ссылка; КонецЕсли;
		
КонецФункции
Функция ПолучитьСайт(Запрос, Ответ)
	
	// Определяет по запросу имя сайта с которым работать
	
	Сайты 		= КэшируемыеФункции.ПолучитьМассивСайтовНоменклатуры();
	малСайты 	= Новый Массив;
	Для Каждого Сайт Из Сайты Цикл малСайты.Добавить(НРег(Сайт)) КонецЦикла;
	
	ИмяСайта = Запрос.ПараметрыURL["site"];
	Если ИмяСайта = Неопределено Тогда
		
		Ответ.КодСостояния = 404;
		Ответ.Причина = "site empty: /site/<<?>>/metod";
		ЗавернутьОтветВJson(Ответ, "404", "site empty: /site/<<?>>/metod");

	ИначеЕсли малСайты.Найти(НРег(ИмяСайта)) = Неопределено Тогда
		
		Ответ.КодСостояния = 404;
		Ответ.Причина = "site not found: " + ИмяСайта;
		ЗавернутьОтветВJson(Ответ, "404", "site not found: " + ИмяСайта);

	Иначе
		
		// Найдм в перечислении сайт
		
		Возврат Перечисления.Сайты[ИмяСайта]; КонецЕсли;
	
	
КонецФункции

Функция Иницилизировать(Запрос, Ответ, Сайт)
	
	Ответ = Новый HTTPСервисОтвет(200);
	
	// Получим имя сайта
	
	Сайт = ПолучитьСайт(Запрос, Ответ);
	Возврат Сайт <> Неопределено;
	
КонецФункции

Функция ТелоЗапроса(Запрос, ТелоЗапроса)
	
	Возврат ?(ТелоЗапроса <> "" Или ТипЗнч(Запрос) = Тип("Структура"), ТелоЗапроса, Запрос.ПолучитьТелоКакСтроку());
	
КонецФункции

Функция ЗавернутьОтветВJson(Ответ, code, message)
	
	Ответ.УстановитьТелоИзСтроки(w1_Json.JSON(Новый Структура("error", Новый Структура("code, message", code, message))));
	
КонецФункции

Функция ВернутьОтветомМассивИлиСтруктуру(Массив, Ответ, стрИмяМетода)
	
	Если Массив.Количество() > 1 Тогда	
		Ответ.УстановитьТелоИзСтроки(w1_Json.JSON(Массив, Истина));
		
	ИначеЕсли Массив.Количество() = 0 Тогда	
		Ответ.УстановитьТелоИзСтроки(w1_Json.JSON(Массив[0], Истина));
		
	Иначе 
		ВернутьОтветСОбработкойОшибки(Ответ,, "unknown error from metod """ + стрИмяМетода + """"); КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции
Функция ВернутьОтветСОбработкойОшибки(Ответ, стрОтвет = "", стрОшибки = "")
	
	Если стрОшибки <> "" Тогда
		
		Ответ.КодСостояния		= 500;
		Ответ.Причина 			= "error inside";
		ЗавернутьОтветВJson(Ответ, "500", стрОшибки);
		
	Иначе
		
		Если ТипЗнч(стрОтвет) <> Тип("Строка") Тогда
				Ответ.УстановитьТелоИзСтроки(w1_Json.JSON(стрОтвет, Истина));
		Иначе	Ответ.УстановитьТелоИзСтроки(стрОтвет); КонецЕсли; КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Функция ВернутьТиповойGET(ИмяМетода, Запрос)
	
	Перем Ответ, Сайт;
	Если Не Иницилизировать(Запрос, Ответ, Сайт) Тогда Возврат Ответ КонецЕсли;
	
	стрОшибки = "";
	
	// Вычислим есть или нет гуид
	
	guid = Запрос.ПараметрыURL.Получить("guid");
	
	
	// Получим типовой ответ
	
	стрОтвет = Вычислить("API2." + ИмяМетода + ?(guid = Неопределено,
		"(Новый Структура(""Сайт"", Сайт), стрОшибки)",
		"(Новый Структура(""Сайт, guids"", Сайт, guid), стрОшибки)"));
		
	Возврат ВернутьОтветСОбработкойОшибки(Ответ, стрОтвет, стрОшибки);
	
КонецФункции

Функция ИсторияОбъектовПолучить(Запрос, ТелоЗапроса = "") Экспорт
	
	Ответ = Новый HTTPСервисОтвет(200);
	
	// Получим имя сайта
	
	Сайт = ПолучитьСайт(Запрос, Ответ);
	Если Сайт = Неопределено Тогда Возврат Ответ КонецЕсли;
	
	// Запросим
	
	ЗапросКБазе = Новый Запрос("
	
	// Реквизиты
	
	|ВЫБРАТЬ 	Период time, Реквизит field,
	//|			ВЫБОР КОГДА РеквизитТаблицы = """" ТОГДА Реквизит ИНАЧЕ РеквизитТаблицы КОНЕЦ field,
	|			ВЫБОР КОГДА РеквизитТаблицы = """" ТОГДА 0 ИНАЧЕ 1 КОНЕЦ count,
	|			Представление(Объект) object,
	|			Ответственный.Наименование user, ПОДСТРОКА(ЗначениеПредставление, 1, 255) valueNow, ПОДСТРОКА(ЗначениеПредставлениеДо, 1, 255) valueBefore
	|ПОМЕСТИТЬ Table
	|ИЗ  РегистрСведений.ИсторияОбъектов
	|ГДЕ Период >= &ДатаНач;
	
	|SELECT time, object, field, user, 
	|		МАКСИМУМ(valueNow) valueNow, МАКСИМУМ(valueBefore) valueBefore, СУММА(count) count
	|FROM Table
	|GROUP BY time, object, field, user
	|ИТОГИ МАКСИМУМ(user) ПО time, user, object, field
	|");
	
	ЗапросКБазе.УстановитьПараметр("ДатаНач", ТекущаяДата() - Запрос.ПараметрыURL["last_sec"]);
	
	Лог = Новый Массив;
	
	ВыборкаСекунд = ЗапросКБазе.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Пока ВыборкаСекунд.Следующий() Цикл
		
		Юзеры = Новый Массив;
		
		ВыборкаПользователя = ВыборкаСекунд.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		Пока ВыборкаПользователя.Следующий() Цикл
		
			Объекты = Новый Массив;
			
			ВыборкаОбъектов = ВыборкаПользователя.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
			Пока ВыборкаОбъектов.Следующий() Цикл
				
				Реквизиты = Новый Массив;
				
				ВыборкаРеквизитов =  ВыборкаОбъектов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
				Пока ВыборкаРеквизитов.Следующий() Цикл
					
					//ЗначенияРеквизитов = Новый Массив;
					ЗначенияРеквизитов = Новый Структура("valueNow, valueBefore, count");
					
					Выборка = ВыборкаРеквизитов.Выбрать();
					Пока Выборка.Следующий() Цикл
						ЗаполнитьЗначенияСвойств(ЗначенияРеквизитов, Выборка);
						//ЗначенияРеквизитов.Добавить(Новый Структура("valueNow, valueBefore, count", 
						//					Выборка.valueNow, Выборка.valueBefore, Выборка.count)); 
					КонецЦикла;
							
					Реквизиты.Добавить(Новый Структура("field, values", ВыборкаРеквизитов.field, ЗначенияРеквизитов)); КонецЦикла;
				Объекты.Добавить(Новый Структура("object, fields", ВыборкаОбъектов.object, Реквизиты)); КонецЦикла;
			Юзеры.Добавить(Новый Структура("user, objects", ВыборкаПользователя.user, Объекты)); КонецЦикла;
		Лог.Добавить(Новый Структура("time, users", ВыборкаСекунд.time, Юзеры)); КонецЦикла;
	
	//Пакет 		= Запрос.ВыполнитьПакет();
	//Товары 		= КонвертацияТипов.ПолучитьМассивИзТаблицыЗначений(Пакет[1].Выгрузить());
	//тКартинки 	= Пакет[2].Выгрузить();
	//
	//Для Каждого стрТовар Из Товары Цикл
	//	
	//	МассКарт = КонвертацияТипов.ПолучитьМассивИзНайденныхЗначенийСтрокТаблицыЗначений(тКартинки, Новый Структура("Владелец", стрТовар.guid), "guid");
	//	Если МассКарт.Количество() Тогда
	//		стрТовар.Вставить("imgs", МассКарт); КонецЕсли;	КонецЦикла;
	
	Возврат ВернутьОтветСОбработкойОшибки(Ответ, Лог);
	
КонецФункции

#Область Заказы

Функция СоздатьЗаказ(Запрос, ТелоЗапроса = "") Экспорт

	Перем Ответ, Сайт;
	Если Не Иницилизировать(Запрос, Ответ, Сайт) Тогда Возврат Ответ КонецЕсли;
	
	//ЗаказОбъект = Документы.ИнтернетЗаказПокупателя.СоздатьДокумент();
	//ЗаказОбъект.СайтИсточник = Сайт;
	
	стрОшибки 	= "";
	стрОтвет 	= API2.ОбновитьЗаказ(ТелоЗапроса(Запрос, ТелоЗапроса), стрОшибки,,,Сайт);
	Возврат ВернутьОтветСОбработкойОшибки(Ответ, стрОтвет, стрОшибки)
	
КонецФункции
Функция ОбновитьЗаказ(Запрос, ТелоЗапроса = "") Экспорт
	
	Перем Ответ, Сайт;
	Если Не Иницилизировать(Запрос, Ответ, Сайт) Тогда Возврат Ответ КонецЕсли;
	
	// Найдем заказ по гуиду
	
	ЗаказСсылка = ПолучитьОбъектПоПараметруURL(Запрос, Ответ, "order", Документы.ИнтернетЗаказПокупателя, Сайт);
	Если ЗаказСсылка = Неопределено Тогда Возврат Ответ КонецЕсли;
	
	// Отправим заказ на обработку
	
	стрОшибки 	= "";
	//стрОтвет 	= API2.ОбновитьЗаказ(ТелоЗапроса(Запрос, ТелоЗапроса), стрОшибки, ЗаказСсылка.ПолучитьОбъект());
	стрОтвет 	= API2.ОбновитьЗаказ(ТелоЗапроса(Запрос, ТелоЗапроса), стрОшибки, ЗаказСсылка,,Сайт);
	Возврат ВернутьОтветСОбработкойОшибки(Ответ, стрОтвет, стрОшибки);
	
КонецФункции
Функция ПолучитьЗаказ(Запрос, ТелоЗапроса = "") Экспорт
	
	Перем Ответ, Сайт;
	Если Не Иницилизировать(Запрос, Ответ, Сайт) Тогда Возврат Ответ КонецЕсли;
	
	// Найдем заказ по гуиду
	
	ЗаказСсылка = ПолучитьОбъектПоПараметруURL(Запрос, Ответ, "order", Документы.ИнтернетЗаказПокупателя, Сайт);
	Если ЗаказСсылка = Неопределено Тогда Возврат Ответ КонецЕсли;
	
	// Получим заказ
	
	стрОшибки = "";
	МассивЗаказов = API2.ПолучитьЗаказы(Новый Структура("Ссылка", ЗаказСсылка), стрОшибки);
	Если стрОшибки <> "" Тогда Возврат ВернутьОтветСОбработкойОшибки(Ответ, МассивЗаказов, стрОшибки) КонецЕсли;
		
	Если 		МассивЗаказов.Количество() > 1 Тогда	Ответ.УстановитьТелоИзСтроки(w1_Json.JSON(МассивЗаказов, Истина));
	ИначеЕсли 	МассивЗаказов.Количество() = 0 Тогда	Ответ.УстановитьТелоИзСтроки(w1_Json.JSON(МассивЗаказов[0], Истина));
	Иначе      	ВернутьОтветСОбработкойОшибки(Ответ,, "unknown error from metod ""get_orders"""); КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции
Функция ОплатитьЗаказ(Запрос, ТелоЗапроса = "") Экспорт
	
	Перем Ответ, Сайт;
	Если Не Иницилизировать(Запрос, Ответ, Сайт) Тогда Возврат Ответ КонецЕсли;
	
	// Найдем заказ по гуиду
	
	ЗаказСсылка = ПолучитьОбъектПоПараметруURL(Запрос, Ответ, "order", Документы.ИнтернетЗаказПокупателя, Сайт);
	Если ЗаказСсылка = Неопределено Тогда Возврат Ответ КонецЕсли;
	
	// Получим структуру
	
	СтруктураЗапроса = ПолучитьСтруктуруИзТелаЗапроса(Ответ, Запрос, ТелоЗапроса);
	Если СтруктураЗапроса = Неопределено Тогда Возврат Ответ КонецЕсли;
	
	// Проверим есть в структуре заказ и добавим его если нету
	
	Если Не СтруктураЗапроса.Свойство("order_guid") Тогда СтруктураЗапроса.Вставить("order_guid", XMLСтрока(ЗаказСсылка)) КонецЕсли;
	
	// Оплатим
	
	стрОшибки = "";
	СтрОтвет = API2_Оплаты.ОплатаПоЗаказу(w1_Json.JSON36(СтруктураЗапроса), стрОшибки);
	Возврат ВернутьОтветСОбработкойОшибки(Ответ, стрОтвет, стрОшибки);
	
КонецФункции

Функция ПрикрепитьФайлКЗаказу(Запрос, ТелоЗапроса = "") Экспорт
	
	Перем Ответ, Сайт;
	Если Не Иницилизировать(Запрос, Ответ, Сайт) Тогда Возврат Ответ КонецЕсли;
	
	// Найдем заказ по гуиду
	
	ЗаказСсылка = ПолучитьОбъектПоПараметруURL(Запрос, Ответ, "order", Документы.ИнтернетЗаказПокупателя, Сайт);
	Если ЗаказСсылка = Неопределено Тогда Возврат Ответ КонецЕсли;
	
	// Получим параметры файла из заголовка
	
	стрОшибки = "";
	Если Запрос.Заголовки["title"] = Неопределено Тогда стрОшибки = стрОшибки + " head ""title"" not found"; КонецЕсли;
	Если Запрос.Заголовки["extension"] = Неопределено Тогда стрОшибки = стрОшибки + " head ""extension"" not found" КонецЕсли;
	Если Запрос.Заголовки["id"] = Неопределено Тогда стрОшибки = стрОшибки + " head ""id"" not found" КонецЕсли;
	
	Если стрОшибки <> "" Тогда Возврат ВернутьОтветСОбработкойОшибки(Ответ,,стрОшибки) КонецЕсли;
	
	// получим объект для заливки
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка, Заказ Из Справочник.ХранилищеФайловЗаказов ГДЕ id = """ + Запрос.Заголовки["id"] + """ И НЕ ПометкаУдаления и Заказ = &ЗаказСсылка");
	Запрос.УстановитьПараметр("ЗаказСсылка", ЗаказСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Если Выборка.Заказ <> ЗаказСсылка Тогда
			Возврат ВернутьОтветСОбработкойОшибки(Ответ,,"this file to another order number " + Выборка.Заказ.Номер) КонецЕсли;
		
		СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
	Иначе
		
		СпрОбъект 		= Справочники.ХранилищеФайловЗаказов.СоздатьЭлемент(); 
		СпрОбъект.Заказ = ЗаказСсылка; КонецЕсли;
		
	// Заполним реквизиты
	
	СпрОбъект.ДатаИзменения = ТекущаяДата();
	СпрОбъект.id 			= Запрос.Заголовки["id"];
	СпрОбъект.Расширение	= Запрос.Заголовки["extension"];
	СпрОбъект.Наименование 	= Запрос.Заголовки["title"];
	
	// Загрузим файл
	
	СпрОбъект.Хранилище = Новый ХранилищеЗначения(Ответ.ПолучитьТелоКакДвоичныеДанные());
	
	// Сохраним
	
	Если ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(СпрОбъект,,стрОшибки) Тогда
			стрОтвета = XMLСтрока(СпрОбъект.Ссылка);
	Иначе 	стрОтвета = ""; КонецЕсли;
		
	Возврат ВернутьОтветСОбработкойОшибки(Ответ, стрОтвета, стрОшибки);
	
КонецФункции

#КонецОбласти

#Область Пользователи

Функция СоздатьПользователя(Запрос, ТелоЗапроса = "") Экспорт

	Ответ = Новый HTTPСервисОтвет(200);
	
	Сайт = ПолучитьСайт(Запрос, Ответ);
	Если Сайт = Неопределено Тогда Возврат Ответ КонецЕсли;
	
	стрОшибки 	= "";
	стрОтвет 	= API2.СоздатьПользователя(ТелоЗапроса(Запрос, ТелоЗапроса), стрОшибки, Сайт);
	Возврат ВернутьОтветСОбработкойОшибки(Ответ, стрОтвет, стрОшибки)
	
КонецФункции
Функция ОбновитьПользователя(Запрос, ТелоЗапроса = "") Экспорт
	
	Ответ = Новый HTTPСервисОтвет(200);
	
	// Получим имя сайта
	
	Сайт = ПолучитьСайт(Запрос, Ответ);
	Если Сайт = Неопределено Тогда Возврат Ответ КонецЕсли;
	
	// Найдем пользователя по гуиду
	
	ПользовательСсылка = ПолучитьОбъектПоПараметруURL(Запрос, Ответ, "user", Справочники.ПользователиИнтернет, Сайт);
	Если ПользовательСсылка = Неопределено Тогда Возврат Ответ КонецЕсли;
	
	// Отправим пользователя на обработку
	
	стрОшибки 	= "";
	стрОтвет 	= API2.ОбновитьПользователя(ТелоЗапроса(Запрос, ТелоЗапроса), ПользовательСсылка.ПолучитьОбъект(), стрОшибки, Сайт);
	Возврат ВернутьОтветСОбработкойОшибки(Ответ, стрОтвет, стрОшибки);
	
КонецФункции
Функция ПолучитьПользователя(Запрос, ТелоЗапроса = "") Экспорт
	
	Ответ = Новый HTTPСервисОтвет(200);
	
	// Получим имя сайта
	
	Сайт = ПолучитьСайт(Запрос, Ответ);
	Если Сайт = Неопределено Тогда Возврат Ответ КонецЕсли;
	
	// Найдем пользователя по гуиду
	
	ПользовательСсылка = ПолучитьОбъектПоПараметруURL(Запрос, Ответ, "user", Справочники.ПользователиИнтернет, Сайт);
	Если ПользовательСсылка = Неопределено Тогда Возврат Ответ КонецЕсли;
	
	// Получим пользователя
	
	Возврат ВернутьОтветомМассивИлиСтруктуру(API2.ПолучитьПользователей(Новый Структура("Ссылка", ПользовательСсылка)),Ответ, "get_users");
	
КонецФункции

Функция ПолучитьУровеньСкидки(Запрос, ТелоЗапроса = "") Экспорт

	Перем Ответ, Сайт;
	Если Не Иницилизировать(Запрос, Ответ, Сайт) Тогда Возврат Ответ КонецЕсли;
	
	// Получим пользователя
	
	ПользовательСсылка = ПолучитьОбъектПоПараметруURL(Запрос, Ответ, "user", Справочники.ПользователиИнтернет, Сайт);
	Если ПользовательСсылка = Неопределено Тогда Возврат Ответ КонецЕсли;
	
	// Вернем его уровень скидки
	
	Если ПользовательСсылка.Контрагент.Пустая() Тогда Возврат ВернутьОтветСОбработкойОшибки(Ответ, "", "user no link for partner"); КонецЕсли;
	Ответ.УстановитьТелоИзСтроки(XMLСтрока(ПользовательСсылка.Контрагент.УровеньСкидки));
	Возврат Ответ;
	
КонецФункции

#КонецОбласти

#Область Адреса_доставки

Функция СоздатьАдресДоставки(Запрос, ТелоЗапроса = "") Экспорт

	Ответ = Новый HTTPСервисОтвет(200);
	
	// Получим имя сайта
	
	Сайт = ПолучитьСайт(Запрос, Ответ);
	Если Сайт = Неопределено Тогда Возврат Ответ КонецЕсли;
	
	// Создадим адрес доставки
	
	стрОшибки 	= "";
	стрОтвет 	= API2.СоздатьАдрес(ТелоЗапроса(Запрос, ТелоЗапроса), стрОшибки, Сайт);
	Возврат ВернутьОтветСОбработкойОшибки(Ответ, стрОтвет, стрОшибки)
	
КонецФункции
Функция ПолучитьАдресДоставки(Запрос, ТелоЗапроса = "") Экспорт
	
	Ответ = Новый HTTPСервисОтвет(200);
	
	// Получим имя сайта
	
	Сайт = ПолучитьСайт(Запрос, Ответ);
	Если Сайт = Неопределено Тогда Возврат Ответ КонецЕсли;
	
	// Найдем адрес доставки по гуиду
	
	АдресСсылка = ПолучитьОбъектПоПараметруURL(Запрос, Ответ, "address", Справочники.АдресаДоставкиИнтернет);
	Если АдресСсылка = Неопределено Тогда Возврат Ответ КонецЕсли;
	
	// Получим адрес
	
	Возврат ВернутьОтветомМассивИлиСтруктуру(API2.ПолучитьАдресаДоставки(Новый Структура("Ссылка", АдресСсылка)), Ответ, "get_delivery_address");
	
КонецФункции
Функция ОбновитьАдресДоставки(Запрос, ТелоЗапроса = "") Экспорт
	
	Ответ = Новый HTTPСервисОтвет(200);
	
	// Получим имя сайта
	
	Сайт = ПолучитьСайт(Запрос, Ответ);
	Если Сайт = Неопределено Тогда Возврат Ответ КонецЕсли;
	
	// Найдем адрес доставки по гуиду
	
	АдресСсылка = ПолучитьОбъектПоПараметруURL(Запрос, Ответ, "address", Справочники.АдресаДоставкиИнтернет);
	Если АдресСсылка = Неопределено Тогда Возврат Ответ КонецЕсли;
	
	// Отправим адрес на обработку
	
	стрОшибки 	= "";
	стрОтвет 	= API2.ОбновитьАдрес(ТелоЗапроса(Запрос, ТелоЗапроса), АдресСсылка.ПолучитьОбъект(), стрОшибки);
	Возврат ВернутьОтветСОбработкойОшибки(Ответ, стрОтвет, стрОшибки);
	
КонецФункции
Функция УдалитьАдресДоставки(Запрос, ТелоЗапроса = "") Экспорт
	
	Перем Ответ, Сайт;
	Если Не Иницилизировать(Запрос, Ответ, Сайт) Тогда Возврат Ответ КонецЕсли;
	
	// Найдем адрес доставки по гуиду
	
	АдресСсылка = ПолучитьОбъектПоПараметруURL(Запрос, Ответ, "address", Справочники.АдресаДоставкиИнтернет);
	Если АдресСсылка = Неопределено Тогда Возврат Ответ КонецЕсли;
	
	// Удалим адркс доставки
	
	стрОшибки = "";
	стрОтвет = API2.УдалитьАдрес(Новый Структура("guid", XMLСтрока(АдресСсылка)), стрОшибки);
	Возврат ВернутьОтветСОбработкойОшибки(Ответ, стрОтвет, стрОшибки)
	
КонецФункции

#КонецОбласти

#Область СтраницаСвойств

Функция СтраницаСвойстПолучить(Запрос, ТелоЗапроса = "") Экспорт
	
	Ответ 	= Новый HTTPСервисОтвет(200);
	
	// Получим имя сайта
	
	Сайт = ПолучитьСайт(Запрос, Ответ);
	Если Сайт = Неопределено Тогда Возврат Ответ КонецЕсли;
	
	// Найдем страницу
	
	Страница = ПолучитьОбъектПоПараметруURL(Запрос, Ответ, "page_property", Справочники.СтраницыСвойствДляСайта);
	Если Страница = Неопределено Тогда Возврат Ответ КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1 
	|	Наименование title, h1, meta_description, meta_keywords, alies,
	|	НаименованиеSEO title_seo, Синонимы synonyms,
	
	|	Номенклатура.(Номенклатура) 	product_category_guids, 
	|	Производители.(Производитель) 	manufacturer_guids, 
	|	Свойства.(Свойство) 			property_guids
	|ИЗ 
	|	Справочник.СтраницыСвойствДляСайта
	|ГДЕ
	|	Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", Страница);
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Структура = КонвертацияТипов.ПолучитьСтруктуруИзСТрокиТаблицыЗначений(Таблица);
	Структура.synonyms = КонвертацияТипов.ПолучитьМассивИзСтроки(Структура.synonyms);
	
	Структура.product_category_guids 	= Таблица[0].product_category_guids.ВыгрузитьКолонку("Номенклатура");
	Структура.manufacturer_guids 		= Таблица[0].manufacturer_guids.ВыгрузитьКолонку("Производитель");
	Структура.property_guids 			= Таблица[0].property_guids.ВыгрузитьКолонку("Свойство");
	
	Возврат ВернутьОтветСОбработкойОшибки(Ответ, Структура);
	
КонецФункции
Функция СтраницыСвойствПолучить(Запрос, ТелоЗапроса = "") Экспорт
	
	Ответ = Новый HTTPСервисОтвет(200);
	
	// Получим имя сайта
	
	Сайт = ПолучитьСайт(Запрос, Ответ);
	Если Сайт = Неопределено Тогда Возврат Ответ КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ Ссылка guid ИЗ Справочник.СтраницыСвойствДляСайта");	
	Возврат ВернутьОтветСОбработкойОшибки(Ответ, КонвертацияТипов.ПолучитьМассивИзТаблицыЗначений(Запрос.Выполнить().Выгрузить()));
	
КонецФункции

#КонецОбласти

#Область Товары

Функция ПолучитьТоварыЛегкие(Запрос, ТелоЗапроса = "") Экспорт
	
	Перем Ответ, Сайт;
	Если Не Иницилизировать(Запрос, Ответ, Сайт) Тогда Возврат Ответ КонецЕсли;
			
	// Запросим
	
	Запрос = Новый Запрос(СтрШаблон("
	
	// Фильтр списка товаров
	
	|ВЫБРАТЬ %1 Ссылка
	|ПОМЕСТИТЬ Товары
	|ИЗ  Справочник.Номенклатура
	|ГДЕ %2;
	
	// Товары
	
	|ВЫБРАТЬ %1 Ссылка guid, ПорядковыйНомер id_number, Наименование title, Артикул sku
	|ИЗ Справочник.Номенклатура
	|ГДЕ %2
	|УПОРЯДОЧИТЬ ПО ПорядковыйНомер;
	
	// Картинки
	
	|ВЫБРАТЬ Ссылка guid, Владелец
	|ИЗ Справочник.КартинкиНоменклатуры
	|ГДЕ ВыгружатьНаСайт И НЕ ПометкаУдаления И Владелец В(ВЫБРАТЬ Ссылка ИЗ Товары)",
	
		// #1
		"ПЕРВЫЕ " + Запрос.ПараметрыURL["count"],
		
		// #2
		"		ВыгружатьНаСайт И
			|	НЕ ПометкаУдаления И
			|	НЕ ЭтоГруппа И
			|	ПорядковыйНомер >= " + Запрос.ПараметрыURL["id_begin"]));
	
	Пакет 		= Запрос.ВыполнитьПакет();
	Товары 		= КонвертацияТипов.ПолучитьМассивИзТаблицыЗначений(Пакет[1].Выгрузить());
	тКартинки 	= Пакет[2].Выгрузить();
	
	Для Каждого стрТовар Из Товары Цикл
		
		МассКарт = КонвертацияТипов.ПолучитьМассивИзНайденныхЗначенийСтрокТаблицыЗначений(тКартинки, Новый Структура("Владелец", стрТовар.guid), "guid");
		Если МассКарт.Количество() Тогда
			стрТовар.Вставить("imgs", МассКарт); КонецЕсли;	КонецЦикла;
	
	Возврат ВернутьОтветСОбработкойОшибки(Ответ, Товары);
	
КонецФункции

Функция ПолучитьТовар(Запрос, ТелоЗапроса = "") Экспорт
	
	Перем Ответ, Сайт;
	Если Не Иницилизировать(Запрос, Ответ, Сайт) Тогда Возврат Ответ КонецЕсли;
	
	// Найдем товар по гуиду
	
	ТоварСсылка = ПолучитьОбъектПоПараметруURL(Запрос, Ответ, "product", Справочники.Номенклатура);
	Если ТоварСсылка = Неопределено Тогда Возврат Ответ КонецЕсли;
	Если ТоварСсылка.ЭтоГруппа Тогда Возврат ВернутьОтветСОбработкойОшибки(Ответ, "", "it`s category not product"); КонецЕсли;
	
	// Вернем товар
	
	стрОшибки = "";
	
	//стрОтвет = API2.ПолучитьТовары(Новый Структура("Ссылка, Сайт", ТоварСсылка,Сайт), стрОшибки);
	стрОтвет = API2.ПолучитьТовары(Новый Структура("Ссылка", ТоварСсылка), стрОшибки);  // без фильтра по сайту
	
	Возврат ВернутьОтветСОбработкойОшибки(Ответ, стрОтвет, стрОшибки);	
	
КонецФункции
Функция ПолучитьТовары(Запрос, ТелоЗапроса = "") Экспорт
	
	Перем Ответ, Сайт;
	Если Не Иницилизировать(Запрос, Ответ, Сайт) Тогда Возврат Ответ КонецЕсли;
	
	// Вернем товары
	
	стрОшибки = "";
	
	//стрОтвет = API2.ПолучитьТовары(Новый Структура("Сайт, НомерНачала, НомерОкончания", Сайт, Запрос.ПараметрыURL["id_begin"], Запрос.ПараметрыURL["id_end"]), стрОшибки);
	// Без фильтра по сайту
	стрОтвет = API2.ПолучитьТовары(Новый Структура("НомерНачала, НомерОкончания", Запрос.ПараметрыURL["id_begin"], Запрос.ПараметрыURL["id_end"]), стрОшибки);
	
	Возврат ВернутьОтветСОбработкойОшибки(Ответ, стрОтвет, стрОшибки);	
	
КонецФункции

Функция ПолучитьТоварыГуиды(Запрос, ТелоЗапроса = "") Экспорт
	
	Перем Ответ, Сайт;
	Если Не Иницилизировать(Запрос, Ответ, Сайт) Тогда Возврат Ответ КонецЕсли;
	
	// Вернем товары
	
	стрОшибки = "";
	
	//стрОтвет = API2.ПолучитьТовары(Новый Структура("Сайт, НомерНачала, НомерОкончания", Сайт, Запрос.ПараметрыURL["id_begin"], Запрос.ПараметрыURL["id_end"]), стрОшибки);
	// Без фильтра по сайту
	стрОтвет = API2.ПолучитьТоварыГуиды(Новый Структура("НомерНачала, НомерОкончания", Запрос.ПараметрыURL["id_begin"], Запрос.ПараметрыURL["id_end"]), стрОшибки);
	Возврат ВернутьОтветомМассивИлиСтруктуру(стрОтвет, Ответ, стрОшибки)
	//Возврат ВернутьОтветСОбработкойОшибки(Ответ, стрОтвет, стрОшибки);	
	
КонецФункции


Функция ЗапросНаличияТовара(Запрос, ТелоЗапроса = "") Экспорт
	
	Перем Ответ, Сайт;
	Если Не Иницилизировать(Запрос, Ответ, Сайт) Тогда Возврат Ответ КонецЕсли;
	
	// Получим товар
	
	//СсылкаТовар = ПолучитьОбъектПоПараметруURL(Запрос, Ответ, "product", Справочники.Номенклатура);
	//Если СсылкаТовар = Неопределено Тогда Возврат Ответ КонецЕсли;
	//
	//// Подготовим структуру
	//
	Попытка		СтруктураЗапроса = w1_Json.UnJSON(ТелоЗапроса(Запрос, ТелоЗапроса));
	Исключение	
		ВернутьОтветСОбработкойОшибки(Ответ,, "error read body: " + ОписаниеОшибки());	
		Возврат Ответ; КонецПопытки;
	//		
	//// Запихаем товар в структуру на случай если в структуре нет товара а в url есть
	//		
	//СтруктураЗапроса.Вставить("product_guid", XMLСтрока(СсылкаТовар));
			
	// Выполним запрос
	
	стрОшибки 	= "";
	стрОтвет 	= API2.СоздатьЗапросНаУточнениеОстатка(СтруктураЗапроса, стрОшибки);
	Возврат ВернутьОтветСОбработкойОшибки(Ответ, стрОтвет, стрОшибки)
	
КонецФункции

//Функция ПолучитьКатегории(Запрос, ТелоЗапроса = "") Экспорт 		Возврат ВернутьТиповойGET("ПолучитьКатегории", 				Запрос) КонецФункции
Функция ПолучитьКатегорию(Запрос, ТелоЗапроса = "") Экспорт
	
	Перем Ответ, Сайт;
	Если Не Иницилизировать(Запрос, Ответ, Сайт) Тогда Возврат Ответ КонецЕсли;
	
	// Найдем категорию по гуиду
	Если НРег(Сайт) = "prom" Тогда Суфикс ="" Иначе Суфикс = "Сайт"+Сайт КонецЕсли;
	
	
	// КОСТЫЛЬ
	//КатегорияСсылка = ПолучитьОбъектПоПараметруURL(Запрос, Ответ, "category", Вычислить("Справочники.Номенклатура" + Суфикс));
	КатегорияСсылка = ПолучитьОбъектПоПараметруURL(Запрос, Ответ, "category", Вычислить("Справочники.Номенклатура"));
	
	Если КатегорияСсылка = Неопределено Тогда Возврат Ответ КонецЕсли;
	Если НЕ КатегорияСсылка.ЭтоГруппа Тогда Возврат ВернутьОтветСОбработкойОшибки(Ответ, "", "it`s not category"); КонецЕсли;
	
	// Вернем категорию
	
	стрОшибки = "";
	
	Если НРег(Сайт) = "prom" Тогда 
		стрОтвет = API2.ПолучитьКатегории(Новый Структура("Ссылка", КатегорияСсылка), стрОшибки);
	Иначе
		стрОтвет = API2.ПолучитьКатегории(Новый Структура("Ссылка,Сайт", КатегорияСсылка,Сайт), стрОшибки);
	КонецЕсли;

	Возврат ВернутьОтветСОбработкойОшибки(Ответ, стрОтвет, стрОшибки);	
	
КонецФункции
Функция ПолучитьКатегории(Запрос, ТелоЗапроса = "") Экспорт
	
	Перем Ответ, Сайт;
	Если Не Иницилизировать(Запрос, Ответ, Сайт) Тогда Возврат Ответ КонецЕсли;
	
	// Вернем категории
	
	стрОшибки = ""; 
	Если НРег(Сайт) = "prom" Тогда
	стрОтвет = API2.ПолучитьКатегории(Новый Структура(), стрОшибки);
		Иначе  стрОтвет = API2.ПолучитьКатегории(Новый Структура("Сайт", Сайт), стрОшибки); 
		КонецЕсли;
	Возврат ВернутьОтветСОбработкойОшибки(Ответ, стрОтвет, стрОшибки);	
	
КонецФункции
//Функция ПолучитьПроизводителей(Запрос, ТелоЗапроса = "") Экспорт 	Возврат ВернутьТиповойGET("ПолучитьПроизводителей", 		Запрос) КонецФункции

Функция ПолучитьПроизводителя(Запрос, ТелоЗапроса = "") Экспорт
	
	Перем Ответ, Сайт;
	Если Не Иницилизировать(Запрос, Ответ, Сайт) Тогда Возврат Ответ КонецЕсли;
	
	// Найдем производителя по гуиду
	
	ПроизводительСсылка = ПолучитьОбъектПоПараметруURL(Запрос, Ответ, "manufacturer", Справочники.Производители);
	Если ПроизводительСсылка = Неопределено Тогда Возврат Ответ КонецЕсли;
		
	// Вернем производителя
	
	стрОшибки = "";
	стрОтвет = API2.ПолучитьПроизводителей(Новый Структура("Ссылка", ПроизводительСсылка), стрОшибки);
	Возврат ВернутьОтветСОбработкойОшибки(Ответ, стрОтвет, стрОшибки);	
	
КонецФункции
Функция ПолучитьПроизводителей(Запрос, ТелоЗапроса = "") Экспорт
	
	Перем Ответ, Сайт;
	Если Не Иницилизировать(Запрос, Ответ, Сайт) Тогда Возврат Ответ КонецЕсли;
	
	// Вернем производителей
	
	стрОшибки = "";   
	стрОтвет = API2.ПолучитьПроизводителей(Новый Структура("Сайт", Сайт), стрОшибки);
	Возврат ВернутьОтветСОбработкойОшибки(Ответ, стрОтвет, стрОшибки);	
	
КонецФункции

Функция ПолучитьМенеджера(Запрос, ТелоЗапроса = "") Экспорт
	
	Перем Ответ, Сайт;
	Если Не Иницилизировать(Запрос, Ответ, Сайт) Тогда Возврат Ответ КонецЕсли;
	
	// Найдем менеджера по гуиду
	
	МенеджерСсылка = ПолучитьОбъектПоПараметруURL(Запрос, Ответ, "manager", Справочники.Пользователи);
	Если МенеджерСсылка = Неопределено Тогда Возврат Ответ КонецЕсли;
		
	// Вернем менеджера
	
	стрОшибки = "";
	стрОтвет = API2.ПолучитьМенеджеров(Новый Структура("Ссылка", МенеджерСсылка), стрОшибки);
	Возврат ВернутьОтветСОбработкойОшибки(Ответ, стрОтвет, стрОшибки);	
	
КонецФункции

Функция ПолучитьМенеджеров(Запрос, ТелоЗапроса = "") Экспорт
	
	Перем Ответ, Сайт;
	Если Не Иницилизировать(Запрос, Ответ, Сайт) Тогда Возврат Ответ КонецЕсли;
	
	// Вернем менеджеров
	
	стрОшибки = "";   
	стрОтвет = API2.ПолучитьМенеджеров(Новый Структура("Сайт", Сайт), стрОшибки);
	Возврат ВернутьОтветСОбработкойОшибки(Ответ, стрОтвет, стрОшибки);	
	
КонецФункции

Функция ПолучитьСклад(Запрос, ТелоЗапроса = "") Экспорт
	
	Перем Ответ, Сайт;
	Если Не Иницилизировать(Запрос, Ответ, Сайт) Тогда Возврат Ответ КонецЕсли;
	
	// Найдем производителя по гуиду
	
	СкладСсылка = ПолучитьОбъектПоПараметруURL(Запрос, Ответ, "warehouse", Справочники.Склады);
	Если СкладСсылка = Неопределено Тогда Возврат Ответ КонецЕсли;
		
	// Вернем производителя
	
	стрОшибки = "";
	стрОтвет = API2.ПолучитьСклады(Новый Структура("Ссылка", СкладСсылка), стрОшибки);
	Возврат ВернутьОтветСОбработкойОшибки(Ответ, стрОтвет, стрОшибки);
	
КонецФункции

Функция ПолучитьКоличествоТоваров(Запрос, ТелоЗапроса = "") Экспорт Возврат ВернутьТиповойGET("ПолучитьКоличествоТоваровВВыборке", 	Запрос) КонецФункции
Функция ПолучитьСвойстваТоваров(Запрос, ТелоЗапроса = "") Экспорт 	Возврат ВернутьТиповойGET("ПолучитьСвойстваНоменклатуры", 	Запрос) КонецФункции
Функция ПолучитьСклады(Запрос, ТелоЗапроса = "") Экспорт 			Возврат ВернутьТиповойGET("ПолучитьСклады", 				Запрос) КонецФункции
Функция ПолучитьТипыЦен(Запрос, ТелоЗапроса = "") Экспорт 			Возврат ВернутьТиповойGET("ПолучитьТипыЦен", 				Запрос) КонецФункции
Функция ПолучитьАкции(Запрос, ТелоЗапроса = "") Экспорт 			Возврат ВернутьТиповойGET("ПолучитьАкции", 					Запрос) КонецФункции
Функция ПолучитьВариантыОплат(Запрос, ТелоЗапроса = "") Экспорт 	Возврат ВернутьТиповойGET("ПолучитьВидыОплат", 				Запрос) КонецФункции
Функция ПолучитьПорогиСкидок(Запрос, ТелоЗапроса = "") Экспорт 		Возврат ВернутьТиповойGET("ПолучитьПорогиСкидок", 			Запрос) КонецФункции


#КонецОбласти

#Область Сообщения

Функция ПолучитьСообщения(Запрос, ТелоЗапроса = "") Экспорт
	
	Перем Ответ, Сайт;
	Если Не Иницилизировать(Запрос, Ответ, Сайт) Тогда Возврат Ответ КонецЕсли;
	
	// Найдем сообщения
	
	Ответ.УстановитьТелоИзСтроки(w1_Json.JSON(Справочники.СообщенияПользователям.API_ПолучитьТаблицу(,Новый Структура("Сайт", Сайт)), Истина));
	
	// Вернем сообщения
	
	Возврат Ответ;
	
КонецФункции
Функция ПолучитьСообщенияПользователя(Запрос, ТелоЗапроса = "") Экспорт
	
	Перем Ответ, Сайт;
	Если Не Иницилизировать(Запрос, Ответ, Сайт) Тогда Возврат Ответ КонецЕсли;
	
	// Найдем пользователя
	
	СсылкаПользователь = ПолучитьОбъектПоПараметруURL(Запрос, Ответ, "user", Справочники.ПользователиИнтернет);
	Если СсылкаПользователь = Неопределено Тогда Возврат Ответ КонецЕсли;
	
	// Проверим чтобы пользователь относился к одному и тому же сайту
	
	Если СсылкаПользователь.СайтИсточник <> Сайт Тогда
		Ответ.КодСостояния		= 404;
		Ответ.Причина 			= "User refers to the site: " + СсылкаПользователь.СайтИсточник;
		ЗавернутьОтветВJson(Ответ, "404", "User refers to the site: """ + СсылкаПользователь.СайтИсточник + """, your question """ + Сайт + """");

		Возврат Ответ; КонецЕсли;
	
	// Найдем сообщения
	
	Ответ.УстановитьТелоИзСтроки(w1_Json.JSON(Справочники.СообщенияПользователям.API_ПолучитьТаблицу(,Новый Структура("Сайт, Адресат", Сайт, СсылкаПользователь)), Истина));
	
	// Вернем сообщения
	
	Возврат Ответ;
	
КонецФункции


#КонецОбласти

#Область ПолучитьКартинку

Функция ПолучитьКартинку(Запрос, ТелоЗапроса = "") Экспорт
	
	Перем Ответ, Сайт;
	Если Не Иницилизировать(Запрос, Ответ, Сайт) Тогда Возврат Ответ КонецЕсли;
	
	// Найдем картинку
			
	СсылкаКартинка = ПолучитьОбъектПоПараметруURL(Запрос, Ответ, "image", Справочники.КартинкиНоменклатуры);
	
	Если СсылкаКартинка = Неопределено Тогда Возврат Ответ КонецЕсли;
	
	// Получим двоичные данные
	
	Запрос = Новый Запрос("ВЫБРАТЬ Картинка, Ссылка ИЗ Справочник.КартинкиНоменклатуры ГДЕ Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", ?(ЗначениеЗаполнено(СсылкаКартинка.КопияКартинки), СсылкаКартинка.КопияКартинки, СсылкаКартинка));
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		ВернутьОтветСОбработкойОшибки(Ответ,, "data image not found");	
		Возврат Ответ; КонецЕсли;
	
	тК 			= Выборка.Картинка.Получить(); 
	Картинка 	= ?(ТипЗнч(тК) = Тип("Картинка"), тК, Новый Картинка(тК));
	
	Если Картинка.Вид = ВидКартинки.Пустая Тогда	// если пустая то возмем из урла
		
		Урл = КонвертацияТипов.РазбитьURLНаЭлементы(Картинки.ПолучитьURLКартинкиВОблаке_ПоКартинке(СсылкаКартинка));
		СоединениеОблако = Новый HTTPСоединение(Урл.Сервер);
		Ответ.УстановитьТелоИзДвоичныхДанных(СоединениеОблако.Получить(Новый HTTPЗапрос(Урл.Путь)).ПолучитьТелоКакДвоичныеДанные());
		
	Иначе
		Ответ.УстановитьТелоИзДвоичныхДанных(Картинка.ПолучитьДвоичныеДанные()); КонецЕсли;
	
	// Установим заголовки тела с данными по картинке
	
	Ответ.Заголовки.Вставить("extension", 	?(Картинка.Вид = ВидКартинки.Пустая, null , НРег(Строка(Картинка.Формат()))));
	Ответ.Заголовки.Вставить("alt",			СсылкаКартинка.Наименование);
	Ответ.Заголовки.Вставить("title",		СсылкаКартинка.Наименование);
	Ответ.Заголовки.Вставить("last_updated",СсылкаКартинка.ДатаИзменения);
	Ответ.Заголовки.Вставить("guid",		XMLСтрока(Выборка.Ссылка));
	
	Возврат Ответ;
	
КонецФункции

// предыдущая функция ПолучитьКартинку ищет картинку по справочнику КартинкиНоменклатуры. Нужно обращаться еще к справочнику Картинки и поискать еще там

Функция ПолучитьКартинкуНеНоменклатуры(Запрос, ТелоЗапроса = "") Экспорт    
	
	Перем Ответ, Сайт;
	Если Не Иницилизировать(Запрос, Ответ, Сайт) Тогда Возврат Ответ КонецЕсли;
	
	// Найдем картинку
		
	СсылкаКартинка = ПолучитьОбъектПоПараметруURL(Запрос, Ответ, "image", Справочники.Картинки);
	
	Если СсылкаКартинка = Неопределено Тогда Возврат Ответ КонецЕсли;
	
	// Получим двоичные данные
	
	Запрос = Новый Запрос("ВЫБРАТЬ Картинка, Ссылка ИЗ Справочник.Картинки ГДЕ Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", СсылкаКартинка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		ВернутьОтветСОбработкойОшибки(Ответ,, "data image not found");	
		Возврат Ответ; КонецЕсли;
	
	тК 			= Выборка.Картинка.Получить(); 
	Картинка 	= ?(ТипЗнч(тК) = Тип("Картинка"), тК, Новый Картинка(тК));
	
	Ответ.УстановитьТелоИзДвоичныхДанных(Картинка.ПолучитьДвоичныеДанные());
	
	// Установим заголовки тела с данными по картинке
	
	Ответ.Заголовки.Вставить("extension", 	?(Картинка.Вид = ВидКартинки.Пустая, null , НРег(Строка(Картинка.Формат()))));
	Ответ.Заголовки.Вставить("alt",			СсылкаКартинка.Наименование);
	Ответ.Заголовки.Вставить("title",		СсылкаКартинка.Наименование);
	Ответ.Заголовки.Вставить("last_updated",СсылкаКартинка.ДатаИзменения);
	Ответ.Заголовки.Вставить("guid",		XMLСтрока(Выборка.Ссылка));
	
	Возврат Ответ;
	
КонецФункции


#КонецОбласти
#Область ПолучитьАватар

Функция ПолучитьАватар(Запрос, ТелоЗапроса = "") Экспорт
	
	Перем Ответ, Сайт;
	Если Не Иницилизировать(Запрос, Ответ, Сайт) Тогда Возврат Ответ КонецЕсли;
	
	// Найдем картинку
	
	СсылкаАватар = ПолучитьОбъектПоПараметруURL(Запрос, Ответ, "avatar", Справочники.АватарыМенеджеров);
	Если СсылкаАватар = Неопределено Тогда Возврат Ответ КонецЕсли;
	
	// Получим двоичные данные
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	АватарыМенеджеров.ХранилищеБинарныхДанных,
	                      |	АватарыМенеджеров.Ссылка
	                      |ИЗ
	                      |	Справочник.АватарыМенеджеров КАК АватарыМенеджеров
	                      |ГДЕ
	                      |	АватарыМенеджеров.Ссылка = &Ссылка
	                      |	И АватарыМенеджеров.ПометкаУдаления = ЛОЖЬ");
	Запрос.УстановитьПараметр("Ссылка", СсылкаАватар);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		ВернутьОтветСОбработкойОшибки(Ответ,, "data avatar not found");	

		Возврат Ответ; КонецЕсли;
	
	тК 			= Выборка.ХранилищеБинарныхДанных.Получить(); 
	Аватар 	= ?(ТипЗнч(тК) = Тип("Картинка"), тК, Новый Картинка(тК));
	
	Ответ.УстановитьТелоИзДвоичныхДанных(Аватар.ПолучитьДвоичныеДанные());	
	
	// Установим заголовки тела с данными по картинке
	
	Ответ.Заголовки.Вставить("extension", 	НРег(Строка(Аватар.Формат())));
//	Ответ.Заголовки.Вставить("alt",			СсылкаКартинка.Наименование);
	Ответ.Заголовки.Вставить("title",		СсылкаАватар.Наименование);
//	Ответ.Заголовки.Вставить("last_updated",СсылкаКартинка.ДатаИзменения);
	Ответ.Заголовки.Вставить("guid",		XMLСтрока(Выборка.Ссылка));
	
	Возврат Ответ;
	
КонецФункции

#КонецОбласти


#Область Северсталь

Функция ПолучитьСеверСтальЛимиты(Запрос, ТелоЗапроса = "") Экспорт 	Возврат ВернутьТиповойGET("ПолучитьЛимитыСеверстали", Запрос) КонецФункции

Функция ПолучитьСеверСтальЛимит(Запрос, ТелоЗапроса = "") Экспорт 	Возврат ВернутьТиповойGET("ПолучитьЛимитСеверстали", Запрос) КонецФункции

Функция ПолучитьСтатусСогласованияТовара(Запрос, ТелоЗапроса = "") Экспорт
	
	Перем Ответ, Сайт;
	Если Не Иницилизировать(Запрос, Ответ, Сайт) Тогда Возврат Ответ КонецЕсли;
	
	// Найдем пользователя по гуиду
	
	//ПользовательСсылка = ПолучитьОбъектПоПараметруURL(Запрос, Ответ, "user", Справочники.ПользователиИнтернет);
	//Если ПользовательСсылка = Неопределено Тогда Возврат Ответ КонецЕсли;
	//
	//// Найдем товар по гуиду
	//
	//ТоварСсылка = ПолучитьОбъектПоПараметруURL(Запрос, Ответ, "product", Справочники.Номенклатура);
	//Если ТоварСсылка = Неопределено Тогда Возврат Ответ КонецЕсли;
	
	// Вернем статус
	
	//Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 Номенклатура, Пользователь, Статус Status ИЗ РегистрСведений.ЗапросНаСогласованиеТовара.СрезПоследних(&Дата, Номенклатура = &Товар И Пользователь = &Пользователь)");
	//Запрос.УстановитьПараметр("Товар", Товар);
	//Запрос.УстановитьПараметр("Пользователь", Пользователь);
	//Запрос.УстановитьПараметр("Дата", Дата);
	//Выборка = Запрос.Выполнить().Выбрать();
	//Если Выборка.Следующий() Тогда
	Массив=API2.ПолучитьЗапросНаСогласование(Новый Структура("guid_reconcile", Запрос.ПараметрыURL["reconcile_guid"]));
	
	Стр = Новый Структура;
    Стр.Вставить("id", Массив[0].id);
	Стр.Вставить("status", Массив[0].status);
	
	Ответ.УстановитьТелоИзСтроки(w1_Json.JSON(Стр, Истина));
	
	//Ответ.УстановитьТелоИзСтроки(w1_Json.JSON(API2.ПолучитьЗапросНаСогласование(Новый Структура("guid_reconcile", Запрос.ПараметрыURL["reconcile_guid"])), Истина));
	
	//Ответ.УстановитьТелоИзСтроки(0);
	Возврат Ответ; 
	
КонецФункции
Функция СоздатьСогласованияТовара(Запрос, ТелоЗапроса = "") Экспорт
	
	Перем Ответ, Сайт;
	Если Не Иницилизировать(Запрос, Ответ, Сайт) Тогда Возврат Ответ КонецЕсли;
	
	//// Найдем пользователя по гуиду
	//
	//ПользовательСсылка = ПолучитьОбъектПоПараметруURL(Запрос, Ответ, "user", Справочники.ПользователиИнтернет);
	//Если ПользовательСсылка = Неопределено Тогда Возврат Ответ КонецЕсли;
	//
	//// Найдем товар по гуиду
	//
	//ТоварСсылка = ПолучитьОбъектПоПараметруURL(Запрос, Ответ, "product", Справочники.Номенклатура);
	//Если ТоварСсылка = Неопределено Тогда Возврат Ответ КонецЕсли;

	
	стрОшибки = "";
	Ответ.УстановитьТелоИзСтроки(w1_Json.JSON(API2.СоздатьЗапросНаСогласованиеТовара(Запрос.ПолучитьТелоКакСтроку(), стрОшибки)));
	ВОЗВРАТ Ответ;
	
	
	
	
	// Получим структуру
	
	СтруктураЗапроса = ПолучитьСтруктуруИзТелаЗапроса(Ответ, Запрос, ТелоЗапроса);
	Если СтруктураЗапроса = Неопределено Тогда Возврат Ответ КонецЕсли;
	
	стрОшибки = "";
	
	// Создадим
	
	Запись = РегистрыСведений.ЗапросНаСогласованиеТовара.СоздатьМенеджерЗаписи();
	Запись.Период 		= ТекущаяДата();
	Запись.Пользователь = HTTP.ПолучитьОбъектПоСсылке(Справочники.ПользователиИнтернет, 	СтруктураЗапроса.user, 		стрОшибки);
	Запись.Номенклатура = HTTP.ПолучитьОбъектПоСсылке(Справочники.Номенклатура, 			СтруктураЗапроса.product, 	стрОшибки);
	Попытка
	Запись.Контрагент 		= ?(Запись.Пользователь.ФизЛицо.Пустая(), Неопределено, Запись.Пользователь.ФизЛицо.Контрагент);
	Исключение
	КонецПопытки;
	
	стрОшибки = "";
	ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(Запись,,стрОшибки);
	Возврат ВернутьОтветСОбработкойОшибки(Ответ,,стрОшибки);
	
КонецФункции


#КонецОбласти

#Область Документы

Функция ПолучитьДокументы(Запрос, ТелоЗапроса = "") Экспорт 
	
	Перем Ответ, Сайт;
	Если Не Иницилизировать(Запрос, Ответ, Сайт) Тогда Возврат Ответ КонецЕсли;
	
	// Веренем массив объектов по модному API менеджера
	
	Возврат ВернутьОтветСОбработкойОшибки(Ответ, Справочники.ИнструкцииНоменклатуры.API_ПолучитьТаблицу(,Новый Структура("Сайт", Сайт)));
	
КонецФункции
Функция ПолучитьДокумент(Запрос, ТелоЗапроса = "") Экспорт 
	
	Перем Ответ, Сайт;
	Если Не Иницилизировать(Запрос, Ответ, Сайт) Тогда Возврат Ответ КонецЕсли;
	
	// Найдем картинку
	
	СсылкаИнструкция = ПолучитьОбъектПоПараметруURL(Запрос, Ответ, "document", Справочники.ИнструкцииНоменклатуры);
	Если СсылкаИнструкция = Неопределено Тогда Возврат Ответ КонецЕсли;
	
	// Получим двоичные данные
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 Файл ИЗ Справочник.ИнструкцииНоменклатуры ГДЕ Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", СсылкаИнструкция);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		
		ВернутьОтветСОбработкойОшибки(Ответ,, "data file not found");	
		Возврат Ответ; КонецЕсли;
	
	Тело = Выборка.Файл.Получить(); 
	Если ТипЗнч(Тело) <> Тип("ДвоичныеДанные") Тогда
		
		ВернутьОтветСОбработкойОшибки(Ответ,, "data file is null");	
		Возврат Ответ; КонецЕсли;
	
	Ответ.УстановитьТелоИзДвоичныхДанных(Тело);	
	
	// Установим заголовки тела с данными по картинке
	
	СтруктураОбъекта = Справочники.ИнструкцииНоменклатуры.API_ПолучитьОбъект(СсылкаИнструкция);
	Для Каждого Элемент Из СтруктураОбъекта Цикл 
		Ответ.Заголовки.Вставить(Элемент.Ключ, XMLСтрока(Элемент.Значение)) КонецЦикла;
	
	Возврат Ответ;
	
КонецФункции

#КонецОбласти

#Область Статьи

Функция ПолучитьКатегорииСтатей(Запрос, ТелоЗапроса = "") Экспорт Возврат ВернутьТиповойGET("ПолучитьКатегорииСтатьи", Запрос) КонецФункции
Функция ПолучитьСтатью(Запрос, ТелоЗапроса = "") Экспорт 
	
	Перем Ответ, Сайт;
	Если Не Иницилизировать(Запрос, Ответ, Сайт) Тогда Возврат Ответ КонецЕсли;
	
	// Найдем статью
	
	СсылкаСтатья = ПолучитьОбъектПоПараметруURL(Запрос, Ответ, "article", Справочники.ИнтернетСтатьи);
	Если СсылкаСтатья = Неопределено Тогда 
		СсылкаСтатья = ПолучитьОбъектПоПараметруURL(Запрос, Ответ, "article", Справочники.ИнтернетКонтакты);
		Если СсылкаСтатья = Неопределено Тогда
			Возврат Ответ КонецЕсли; 
		Ответ.КодСостояния = 200; КонецЕсли;
	
	
	Если СсылкаСтатья.ЭтоГруппа Тогда Возврат ВернутьОтветСОбработкойОшибки(Ответ, "", "it`s category not article"); КонецЕсли;
	
	// Веренем
	
	стрОшибки = "";
	стрОтвет = API2.ПолучитьСтатьи(Новый Структура("Ссылка", СсылкаСтатья), стрОшибки);
	Возврат ВернутьОтветСОбработкойОшибки(Ответ, стрОтвет, стрОшибки);	
	
КонецФункции
Функция ПолучитьСтатьи(Запрос, ТелоЗапроса = "") Экспорт
	
	Перем Ответ, Сайт;
	Если Не Иницилизировать(Запрос, Ответ, Сайт) Тогда Возврат Ответ КонецЕсли;
	
	// Вернем статьи
	
	стрОшибки = "";
	стрОтвет = API2.ПолучитьСтатьи(Новый Структура("Сайт", Сайт), стрОшибки);
	Возврат ВернутьОтветСОбработкойОшибки(Ответ, стрОтвет, стрОшибки);	
	
КонецФункции

Функция ПолучитьСтатьиКатегории(Запрос, ТелоЗапроса = "") Экспорт 

	Перем Ответ, Сайт;
	Если Не Иницилизировать(Запрос, Ответ, Сайт) Тогда Возврат Ответ КонецЕсли;
	
	// Найдем категорию статьи
	
	СсылкаКатегория = ПолучитьОбъектПоПараметруURL(Запрос, Ответ, "article_category", Справочники.ИнтернетСтатьи);
	//Если СсылкаКатегория = Неопределено Тогда Возврат Ответ КонецЕсли;
	Если СсылкаКатегория = Неопределено Тогда 
		СсылкаКатегория = ПолучитьОбъектПоПараметруURL(Запрос, Ответ, "article_category", Справочники.ИнтернетКонтакты);
		Если СсылкаКатегория = Неопределено Тогда
        Возврат Ответ КонецЕсли;
	    Ответ.КодСостояния = 200; КонецЕсли;
	Если Не СсылкаКатегория.ЭтоГруппа Тогда Возврат ВернутьОтветСОбработкойОшибки(Ответ, "", "it`s article, needs category"); КонецЕсли;
	
	// Веренм
	
	стрОшибки = "";
	стрОтвет = API2.ПолучитьСтатьи(Новый Структура("guid_article_category", XMLСтрока(СсылкаКатегория)), стрОшибки);
	Возврат ВернутьОтветСОбработкойОшибки(Ответ, стрОтвет, стрОшибки);	
	
КонецФункции

#КонецОбласти

#Область Контакты

Функция ПолучитьКонтакты(Запрос, ТелоЗапроса = "") Экспорт
	
	Перем Ответ, Сайт;
	Если Не Иницилизировать(Запрос, Ответ, Сайт) Тогда Возврат Ответ КонецЕсли;
	
	// Найдем по гуиду
	
	guid 		= Запрос.ПараметрыURL.Получить("guid");
	ЕстьГуид 	= Ложь;
	Если guid <> Неопределено Тогда ЕстьГуид = Истина;
	Ссылка = ПолучитьОбъектПоПараметруURL(Запрос, Ответ, "guid", Справочники.Контакты); КонецЕсли;
	 			
	Запрос = Новый Запрос(
	"ВЫБРАТЬ 	Наименование title, Ссылка guid, Город.Наименование city, Код Number, Владелец partner,
	|			""["" + Долгота + "", "" + Широта + ""]"" coordinates, alies, meta_keywords, meta_description, _description,
	| Неопределено addresses,
	| Неопределено emails,
	| Неопределено phones
	|ИЗ			Справочник.Контакты
	|ГДЕ 		НЕ ПометкаУдаления
	|" + ?(ЕстьГуид, "И Ссылка = &Ссылка", "")+ ";
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	| Ссылка guid,
	|	address
	|ИЗ
	|	Справочник.Контакты.addresses
	|ГДЕ 		НЕ Ссылка.ПометкаУдаления
	|" + ?(ЕстьГуид, "И Ссылка = &Ссылка", "")+ ";
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	| Ссылка guid,
	|	email
	|ИЗ
	|	Справочник.Контакты.emails 
	|ГДЕ 		НЕ Ссылка.ПометкаУдаления
	|" + ?(ЕстьГуид, "И Ссылка = &Ссылка", "")+ ";
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	| Ссылка guid,
	|	phone
	|ИЗ
	|	Справочник.Контакты.phones
	|ГДЕ  НЕ Ссылка.ПометкаУдаления
	|" + ?(ЕстьГуид, "И Ссылка = &Ссылка", ""));

	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Пакеты 		= Запрос.ВыполнитьПакет();
	
	Таблица		= Пакеты[0].Выгрузить(); ПослИнд = Таблица.Количество() - 1;
	addresses	= Пакеты[1].Выгрузить(); 
	emails	= Пакеты[2].Выгрузить(); 
	phones	= Пакеты[3].Выгрузить(); 
	
	Для Инд = 0 По ПослИнд Цикл
			
		структура 	= КонвертацияТипов.ПолучитьСтруктуруИзСТрокиТаблицыЗначений(Таблица, Инд);
		Отбор		= Новый Структура("guid", структура.guid);		     
		
		Таблица[Инд].addresses = КонвертацияТипов.ПолучитьМассивИзНайденныхЗначенийСтрокТаблицыЗначений(addresses,Отбор,"address");
		
		Таблица[Инд].emails =КонвертацияТипов.ПолучитьМассивИзНайденныхЗначенийСтрокТаблицыЗначений(emails,Отбор,"email");
		
		Таблица[Инд].phones =КонвертацияТипов.ПолучитьМассивИзНайденныхЗначенийСтрокТаблицыЗначений(phones,Отбор,"phone");
			
	КонецЦикла;
	//Возврат ВернутьОтветСОбработкойОшибки(Ответ, КонвертацияТипов.ПолучитьМассивИзТаблицыЗначений(Запрос.Выполнить().Выгрузить()));
	Возврат ВернутьОтветСОбработкойОшибки(Ответ, КонвертацияТипов.ПолучитьМассивИзТаблицыЗначений(Таблица));
	
КонецФункции


#КонецОбласти

#Область Задачи

Функция ПолучитьЗадачи(Запрос, ТелоЗапроса = "") Экспорт 
	
	Перем Ответ, Сайт;
	Если Не Иницилизировать(Запрос, Ответ, Сайт) Тогда Возврат Ответ КонецЕсли;
	
	// Найдем производителя по гуиду
	
	guid 		= Запрос.ПараметрыURL.Получить("guid");
	ЕстьГуид 	= Ложь;
	Если guid <> Неопределено Тогда ЕстьГуид = Истина;
		ЗадачаСсылка = ПолучитьОбъектПоПараметруURL(Запрос, Ответ, "guid", Справочники.Задачи); КонецЕсли;
		
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 	Наименование title, Ссылка guid, Статус status, Код Number, Исполнитель.Наименование performer, Заказчик.Наименование customer
	|" + ?(ЕстьГуид, ", Описание description, Заказчик.Наименование orderers, Исполнитель.Наименование worker, Закреплённая high,
	|					Комментарии.(Комментарий Comment, Дата Date) comment","") + "
	|ИЗ			Справочник.Задачи
	|ГДЕ 		НЕ ПометкаУдаления
	|" + ?(ЕстьГуид, "И Ссылка = &Ссылка", "") + "
	|УПОРЯДОЧИТЬ ПО Код");
	
	Запрос.УстановитьПараметр("Ссылка", ЗадачаСсылка);
	Возврат ВернутьОтветСОбработкойОшибки(Ответ, КонвертацияТипов.ПолучитьМассивИзТаблицыЗначений(Запрос.Выполнить().Выгрузить()));
	
КонецФункции
	
#КонецОбласти