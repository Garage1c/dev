Функция ОпределитьИмяОбъектаПоТипу(Объект) Экспорт 
	
	ТипОбъекта = ТипЗнч(Объект);
	
	Если ТипОбъекта = Тип("СправочникСсылка.Номенклатура") Тогда
		Возврат ?(Объект.ЭтоГруппа, "product_category", "product");
		
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.ИнтернетЗаказПокупателя") Тогда
		Возврат "order";
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ПользователиИнтернет") Тогда
		Возврат "user";
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ИнтернетСтатьи") Тогда
		Возврат ?(Объект.ЭтоГруппа, "article_category", "article");
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ИнтернетКонтакты") Тогда
		Возврат ?(Объект.ЭтоГруппа, "article_category", "article");
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Склады") Тогда
		Возврат "warehouse";
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ТипыЦен") Тогда
		Возврат "price_type";
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Производители") Тогда
		Возврат "manufacturer";
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.МВЗ") Тогда
		Возврат "place_of_cost";
		
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.Акция") Тогда
		Возврат "promo";
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Пользователи") Тогда
		Возврат "manager";	
		
	Иначе Возврат "undefined_type"; КонецЕсли;
	
КонецФункции

Функция КодСимволаASCII(Символ) 
	
	КодUNICODE = КодСимвола(Символ); 
	
	Если ((КодUNICODE > 1039) И (КодUNICODE < 1104)) Тогда 
		Возврат (КодUNICODE - 848); 
	ИначеЕсли КодUNICODE = 8470 Тогда 
		Возврат 185; 
	ИначеЕсли КодUNICODE = 1105 Тогда 
		Возврат 184; 
	ИначеЕсли КодUNICODE = 1025 Тогда 
		Возврат 168; 
	Иначе Возврат КодUNICODE; КонецЕсли; 
	
КонецФункции
Функция URLEncode( value )

    table = "%00%01%02%03%04%05%06%07%08%09%0A%0B%0C%0D%0E%0F%10%11%12%13%14" +
            "%15%16%17%18%19%1A%1B%1C%1D%1E%1F%20%21%22%23%24%25%26%27%28" +
            "%29%2A%2B%2C%2D%2E%2F%30%31%32%33%34%35%36%37%38%39%3A%3B%3C" +
            "%3D%3E%3F%40%41%42%43%44%45%46%47%48%49%4A%4B%4C%4D%4E%4F%50" +
            "%51%52%53%54%55%56%57%58%59%5A%5B%5C%5D%5E%5F%60%61%62%63%64" +
            "%65%66%67%68%69%6A%6B%6C%6D%6E%6F%70%71%72%73%74%75%76%77%78" +
            "%79%7A%7B%7C%7D%7E%7F%80%81%82%83%84%85%86%87%88%89%8A%8B%8C" +
            "%8D%8E%8F%90%91%92%93%94%95%96%97%98%99%9A%9B%9C%9D%9E%9F%A0" +
            "%A1%A2%A3%A4%A5%A6%A7%A8%A9%AA%AB%AC%AD%AE%AF%B0%B1%B2%B3%B4" +
            "%B5%B6%B7%B8%B9%BA%BB%BC%BD%BE%BF%C0%C1%C2%C3%C4%C5%C6%C7%C8" +
            "%C9%CA%CB%CC%CD%CE%CF%D0%D1%D2%D3%D4%D5%D6%D7%D8%D9%DA%DB%DC" +
            "%DD%DE%DF%E0%E1%E2%E3%E4%E5%E6%E7%E8%E9%EA%EB%EC%ED%EE%EF%F0" +
            "%F1%F2%F3%F4%F5%F6%F7%F8%F9%FA%FB%FC%FD%FE%FF";
    
    result = ""; length = СтрДлина( value );        
    
    Для i = 1 По  length Цикл symbol = Сред( value, i, 1 ); code = КодСимволаASCII( symbol ); result = result + Сред( table, code*3 + 1, 3 ); КонецЦикла;
    Возврат result;
	
КонецФункции
Функция Заэскейпить(ТипОбъекта, ТелоJSON, ТекстЛога = "") Экспорт
	api_key = Константы.api_key.Получить();
	
	Результат = ТипОбъекта + "=[" + КодироватьСтроку(ТелоJSON, СпособКодированияСтроки.КодировкаURL) + "]&api_key=" + api_key;
	//Результат = ТипОбъекта + "=[" + ТелоJSON + "]";
	//Результат = ТипОбъекта + "=[" + КодироватьСтроку(ТелоJSON, СпособКодированияСтроки.КодировкаURL) + "]";
	//Результат = ТипОбъекта + "=" + URLEncode(СтрЗаменить(ТелоJSON,"\","\\"));
	
	Лог(ТекстЛога, "Функция заэскейпить: " + Результат);
	
	//Возврат ТипОбъекта + "=" + URLEncode(СтрЗаменить(ТелоJSON,"\","\\"));
	Возврат Результат
	
КонецФункции

Функция ПолучитьСтруктуруИзJSON(json, стрОшибки)
	
	Попытка
		Структура = w1_Json.UnJSON(json);
	Исключение
		стрОшибки = "Не удалось сконвертировать json строку в структуру
		|Json строка: " + json;
		Возврат Неопределено; КонецПопытки;
	
	Если Структура = Неопределено Или Не Структура.Количество() Тогда
		стрОшибки = "Не удалось получить структуру из строки json
		|json: " + json; КонецЕсли;
	
	Возврат Структура;
	
КонецФункции
Процедура ДобавитьОписаниеОшибки(стрОшибки, ОписаниеОшибки)
	
	стрОшибки = Строка(стрОшибки) + ?(стрОшибки = "","","
	|") + ОписаниеОшибки;
	
КонецПроцедуры

Процедура ЗаменитьЭкранНаСпецсимволы(Текст) Экспорт
	
	// Источник: http://htmlhelp.com/reference/html40/entities/special.html
	
	//ТаблицаЭкрана = Новый Структура("&quot;,&amp;&lt;&gt;&circ,&ndash;,&lsquo;,&rsquo;, &sbquo;,&ldquo;,&rdquo;,&bdquo;",
	//				"""", 	"&", "<", ">", "ˆ", "~",	"‘",	"’",	"‚",		"“",	"”",	"„");
	
КонецПроцедуры

#Область Изменения_Данных_Базы

Функция УдалитьОбъект(Менеджер, ГуидСтрока, стрОшибки)
	
	Ссылка = HTTP.ПолучитьОбъектПоСсылке(Менеджер, ГуидСтрока, стрОшибки); Если Ссылка = Неопределено Тогда Возврат Ложь КонецЕсли;
	
	Объект = Ссылка.ПолучитьОбъект();
	
	Попытка
		Объект.УстановитьПометкуУдаления(Истина);
	Исключение
		опОшибки = ОписаниеОшибки();
		стрОшибки = "Ошибка при установки пометки удаления
		|" + опОшибки;
		Возврат Ложь; КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Процедура УстановитьРеквизитГуидИзСтруктуры(Менеджер, ИмяВОбъекте, ИмяВСтруктуре, Структура, Объект, Изменился, стрОшибки)
	
	Перем стрГуид;
	
	Если Структура.Свойство(ИмяВСтруктуре, стрГуид) Тогда
	
		Ссылка = HTTP.ПолучитьОбъектПоСсылке(Менеджер, стрГуид, стрОшибки); Если Ссылка = Неопределено Тогда Возврат КонецЕсли;
		
		Если Объект[ИмяВОбъекте] <> Ссылка Тогда
			
			Объект[ИмяВОбъекте] = Ссылка;
			Изменился = Истина; КонецЕсли; КонецЕсли;
	
КонецПроцедуры
Процедура УстановитьРеквизитИзСтруктуры(ИмяВОбъекте, ИмяВСтруктуре, Структура, Объект, Изменился)
	
	Перем Значение;
	
	Если Структура.Свойство(ИмяВСтруктуре, Значение) Тогда
	
		Если Объект[ИмяВОбъекте] <> Значение Тогда
		
			Объект[ИмяВОбъекте] = Значение;
			Изменился = Истина; 
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры
Процедура УстановитьРеквизит(Объект, ИмяРеквизита, Значение, Изменился)
	
	Если Объект[ИмяРеквизита] <> Значение Тогда
		
		Объект[ИмяРеквизита] = Значение;
		Изменился = Истина; КонецЕсли;
	
КонецПроцедуры

Функция ОбновитьАдрес(adress, АдресОбъект = Неопределено, стрОшибки = "") Экспорт

	// Проверим
	
	Структура = ПолучитьСтруктуруИзJSON(adress, стрОшибки); Если Структура = Неопределено Тогда Возврат Неопределено КонецЕсли;
	
	Если Не ПустаяСтрока(стрОшибки) Тогда Возврат Неопределено КонецЕсли;
	
	// Получим 
	
	Если АдресОбъект = Неопределено Тогда
		
		Если Не Структура.Свойство("guid") Или ПустаяСтрока(Структура.guid) Тогда 
			ДобавитьОписаниеОшибки(стрОшибки, "Не указан guid") 
		Иначе
			АдресСсылка = HTTP.ПолучитьОбъектПоСсылке(Справочники.АдресаДоставкиИнтернет, Структура.guid, стрОшибки); Если АдресСсылка = Неопределено Тогда Возврат Неопределено КонецЕсли;
			АдресОбъект = АдресСсылка.ПолучитьОбъект(); КонецЕсли; КонецЕсли;
	
	Если Не ПустаяСтрока(стрОшибки) Тогда Возврат Неопределено КонецЕсли;
	
	// Обновим его реквизиты
	
	Изменился = Ложь;
	УстановитьРеквизитИзСтруктуры("first_name", 	"first_name",	Структура, АдресОбъект, Изменился);
	УстановитьРеквизитИзСтруктуры("last_name", 		"last_name",	Структура, АдресОбъект, Изменился);
	УстановитьРеквизитИзСтруктуры("phone", 			"phone", 		Структура, АдресОбъект, Изменился);
	УстановитьРеквизитИзСтруктуры("Наименование", 	"title", 		Структура, АдресОбъект, Изменился);
	УстановитьРеквизитИзСтруктуры("ПочтовыйИндекс", "postal_code", 	Структура, АдресОбъект, Изменился);
	УстановитьРеквизитИзСтруктуры("Комментарий", 	"comment", 		Структура, АдресОбъект, Изменился);
	УстановитьРеквизитИзСтруктуры("Адрес", 			"title", 		Структура, АдресОбъект, Изменился);
	УстановитьРеквизитИзСтруктуры("id", 			"id", 			Структура, АдресОбъект, Изменился);
	УстановитьРеквизитИзСтруктуры("email", 			"email", 		Структура, АдресОбъект, Изменился);
	
	УстановитьРеквизитИзСтруктуры("Страна", 	    "country", 		Структура, АдресОбъект, Изменился);
	УстановитьРеквизитИзСтруктуры("Kladr", 			"kladr", 		Структура, АдресОбъект, Изменился);
	УстановитьРеквизитИзСтруктуры("Город", 			"city", 		Структура, АдресОбъект, Изменился);
	УстановитьРеквизитИзСтруктуры("Регион", 		"region", 		Структура, АдресОбъект, Изменился);
	УстановитьРеквизитИзСтруктуры("Улица", 			"street", 		Структура, АдресОбъект, Изменился);
	
	//УстановитьРеквизитИзСтруктуры("order_id", 		"order_id", 	Структура, АдресОбъект, Изменился);
	
	Если Структура.Свойство("is_main") и Структура.is_main = "1" Тогда АдресОбъект.Основной = Истина; Иначе АдресОбъект.Основной = Ложь; КонецЕсли;
    Если Структура.Свойство("is_delete") и Структура.is_delete = "1" Тогда АдресОбъект.ПометкаУдаления = Истина; Иначе АдресОбъект.ПометкаУдаления = Ложь; КонецЕсли;
	
	УстановитьРеквизитГуидИзСтруктуры(Справочники.ПользователиИнтернет, "Владелец","user_guid",Структура, АдресОбъект, Изменился, стрОшибки);
	
	Если Изменился Тогда
		АдресОбъект.ДополнительныеСвойства.Вставить("Обновление", Ложь); // сайт не пинать
		ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(АдресОбъект, ,стрОшибки, Ложь);
	КонецЕсли;
	
	Если Не ПустаяСтрока(стрОшибки) Тогда Возврат Неопределено КонецЕсли;
	
	// Вернем
	
	Возврат Новый Структура("guid, id", АдресОбъект.Ссылка, АдресОбъект.id);
КонецФункции
Функция СоздатьАдрес(adress, стрОшибки = "", Сайт = Неопределено) Экспорт
	
	// Проверим
	
	Структура = ПолучитьСтруктуруИзJSON(adress, стрОшибки); Если Структура = Неопределено Тогда Возврат Неопределено КонецЕсли;
	
	Если Структура.Свойство("guid") и НЕ ЗначениеЗаполнено(Структура.guid) Тогда 
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка Из Справочник.АдресаДоставкиИнтернет ГДЕ id = """ + Структура.id + """ И НЕ ПометкаУдаления");
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда НовСправочник = Выборка.Ссылка.ПолучитьОбъект(); КонецЕсли;
		
	ИначеЕсли  Структура.Свойство("guid") и  ЗначениеЗаполнено(Структура.guid) Тогда
		НовСправочникСсылка  = Http.ПолучитьОбъектПоСсылке(Справочники.АдресаДоставкиИнтернет,Структура.guid,стрОшибки);
		НовСправочник        = НовСправочникСсылка.ПолучитьОбъект();
		Если Сайт <> Неопределено Тогда НовСправочник.СайтИсточник 	= Сайт КонецЕсли;
	КонецЕсли;
	
	
	Если Не ПустаяСтрока(стрОшибки) Тогда Возврат Неопределено КонецЕсли;
	
	// Создадим адрес
	Если НовСправочник = Неопределено Тогда
		НовСправочник = Справочники.АдресаДоставкиИнтернет.СоздатьЭлемент();
		Если Сайт <> Неопределено Тогда НовСправочник.СайтИсточник 	= Сайт КонецЕсли;
	КонецЕсли;
	
	Возврат ОбновитьАдрес(adress, НовСправочник, стрОшибки);
КонецФункции

//**** начало
Функция СоздатьФайл(externalfile, стрОшибки = "") Экспорт  //пока комент
	
		
	Структура = w1_Json.UnJSON36(externalfile,Новый Структура("order_guid", "Документ.ИнтернетЗаказ"), стрОшибки); Если Структура = Неопределено Тогда Возврат Неопределено КонецЕсли;
	
	Если Структура.Свойство("order_guid") Тогда
		ЗаказСсылка = HTTP.ПолучитьОбъектПоСсылке(Документы.ИнтернетЗаказПокупателя, Структура.order_guid, стрОшибки); 
		Если ЗаказСсылка = Неопределено Тогда 
			стрОшибки = "Не найден заказ по гуиду: " + Структура.order_guid;
			Ошибка = Истина; КонецЕсли;
	Иначе
		Ошибка = Истина;
		стрОшибки = "Не обнаружено свойство order_guid"; КонецЕсли;
	
	Если Не ПустаяСтрока(стрОшибки) Тогда Возврат Неопределено КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка Из Справочник.ХранилищеФайловЗаказов ГДЕ id = """ + Структура.id + """ И НЕ ПометкаУдаления и Заказ = &ЗаказСсылка");
	Запрос.УстановитьПараметр("ЗаказСсылка",ЗаказСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда НовСправочник = Выборка.Ссылка.ПолучитьОбъект(); КонецЕсли;
	
    // Создадим файл
	Если НовСправочник = Неопределено Тогда
		НовСправочник = Справочники.ХранилищеФайловЗаказов.СоздатьЭлемент();
	КонецЕсли;
	
	Возврат ОбновитьФайл(externalfile, НовСправочник, стрОшибки);
 
КонецФункции
Функция ОбновитьФайл(externalfile, ФайлОбъект = Неопределено, стрОшибки = "") Экспорт

	// Проверим
	
		
	Структура = w1_Json.UnJSON36(externalfile,Новый Структура("order_guid", "Документ.ИнтернетЗаказ"), стрОшибки); Если Структура = Неопределено Тогда Возврат Неопределено КонецЕсли;
	
	Если Структура.Свойство("order_guid") Тогда
		ЗаказСсылка = HTTP.ПолучитьОбъектПоСсылке(Документы.ИнтернетЗаказПокупателя, Структура.order_guid, стрОшибки); 
		Если ЗаказСсылка = Неопределено Тогда 
			стрОшибки = "Не найден заказ по гуиду: " + Структура.order_guid;
			Ошибка = Истина; КонецЕсли;
	Иначе
		Ошибка = Истина;
		стрОшибки = "Не обнаружено свойство order_guid"; КонецЕсли;
	
	Если Не ПустаяСтрока(стрОшибки) Тогда Возврат Неопределено КонецЕсли;

	
	// Получим 
	
	Если ФайлОбъект = Неопределено Тогда
		
		Если Не Структура.Свойство("guid") Или ПустаяСтрока(Структура.guid) Тогда 
			ДобавитьОписаниеОшибки(стрОшибки, "Не указан guid") 
		Иначе
			ФайлСсылка = HTTP.ПолучитьОбъектПоСсылке(Справочники.ХранилищеФайловЗаказов, Структура.guid, стрОшибки); Если ФайлСсылка = Неопределено Тогда Возврат Неопределено КонецЕсли;
			ФайлОбъект = ФайлСсылка.ПолучитьОбъект(); КонецЕсли; КонецЕсли;
	
	Если Не ПустаяСтрока(стрОшибки) Тогда Возврат Неопределено КонецЕсли;
	
	// Обновим его реквизиты
	
	Изменился = Ложь;
		 
    ФайлОбъект.Заказ = ЗаказСсылка;
    УстановитьРеквизитИзСтруктуры("Наименование", 	"title", 		Структура, ФайлОбъект, Изменился);
    УстановитьРеквизитИзСтруктуры("Расширение", 	"extension", 	Структура, ФайлОбъект, Изменился);
    УстановитьРеквизитИзСтруктуры("id", 	        "id",       	Структура, ФайлОбъект, Изменился);
    ФайлОбъект.ИмяФайла  = Структура.title + "." + Структура.extension;	
    ФайлОбъект.Хранилище = Новый ХранилищеЗначения(Base64Значение(Структура.body));

	
	Если Изменился Тогда
		ФайлОбъект.ДополнительныеСвойства.Вставить("Обновление", Ложь); // сайт не пинать
		ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(ФайлОбъект, ,стрОшибки, Ложь);
	КонецЕсли;
	
	Если Не ПустаяСтрока(стрОшибки) Тогда Возврат Неопределено КонецЕсли;
	
	// Вернем
	
	Возврат Новый Структура("guid, id", ФайлОбъект.Ссылка, ФайлОбъект.id);
	
КонецФункции

//**** конец
Функция УдалитьАдрес(adressguid, стрОшибки = "") Экспорт
	
	Возврат УдалитьОбъект(Справочники.АдресаДоставкиИнтернет, adressguid.guid, стрОшибки);
	
КонецФункции

Функция ОбновитьПользователя(userJson, ПользовательОбъект = Неопределено, стрОшибки = "", Сайт = Неопределено) Экспорт

	// Проверим
	
	Пользователь = ПолучитьСтруктуруИзJSON(userJson, стрОшибки); Если Пользователь = Неопределено Тогда Возврат Ложь КонецЕсли;
	
	Если ПользовательОбъект = Неопределено Тогда
		
		Если Не Пользователь.Свойство("guid") Или ПустаяСтрока(Пользователь.guid) Тогда 
			ДобавитьОписаниеОшибки(стрОшибки, "Не указан guid") 
		Иначе
			ПользовательСсылка = HTTP.ПолучитьОбъектПоСсылке(Справочники.ПользователиИнтернет, Пользователь.guid, стрОшибки); Если ПользовательСсылка = Неопределено Тогда Возврат Неопределено КонецЕсли;
			ПользовательОбъект = ПользовательСсылка.ПолучитьОбъект(); КонецЕсли; КонецЕсли;
			
	Если Не ПустаяСтрока(стрОшибки) Тогда Возврат Неопределено КонецЕсли;
	
	ЗаписьЖурналаРегистрации("API2.update_user.find_object", УровеньЖурналаРегистрации.Информация,,,"код пользователя=" + ПользовательОбъект.Код);
	
	// Обновим его реквизиты
	first_name = ""; last_name = "";
	Пользователь.Свойство("first_name", first_name);
	Пользователь.Свойство("last_name", last_name);
	Пользователь.Вставить("username", Строка(last_name) + " " + Строка(first_name));
	
	Если ПустаяСтрока(Пользователь.username) И Пользователь.Свойство("email") Тогда
		Пользователь.username = Пользователь.email;
	КонецЕсли;
	
	Если Пользователь.Свойство("created_at") Тогда
		Пользователь.Вставить("created_at", Дата(Пользователь.created_at));
	КонецЕсли;
	
	Изменился = Ложь;
	УстановитьРеквизитИзСтруктуры("Наименование", 		"username", 	Пользователь, ПользовательОбъект, Изменился);
	УстановитьРеквизитИзСтруктуры("Имя", 				"first_name", 	Пользователь, ПользовательОбъект, Изменился);
	УстановитьРеквизитИзСтруктуры("Фамилия", 			"last_name", 	Пользователь, ПользовательОбъект, Изменился);
	
	УстановитьРеквизитИзСтруктуры("ЭлектроннаяПочта", 	"email", 		Пользователь, ПользовательОбъект, Изменился);
	УстановитьРеквизитИзСтруктуры("ДатаСоздания", 		"created_at", 	Пользователь, ПользовательОбъект, Изменился);
	УстановитьРеквизитИзСтруктуры("КонтактныйТелефон", 	"phone", 		Пользователь, ПользовательОбъект, Изменился);
	УстановитьРеквизитИзСтруктуры("id", 				"id", 			Пользователь, ПользовательОбъект, Изменился);
	УстановитьРеквизитИзСтруктуры("НеАктивен", 			"disable", 		Пользователь, ПользовательОбъект, Изменился);
	
	Если Сайт <> Неопределено Тогда
		УстановитьРеквизит(ПользовательОбъект, "СайтИсточник", Сайт, Изменился); КонецЕсли;
	
	УстановитьРеквизитГуидИзСтруктуры(Справочники.ТипыЦен, "ТипЦен", "price_types", Пользователь, ПользовательОбъект, Изменился, стрОшибки);
	
	Если Не ПустаяСтрока(стрОшибки) Тогда Возврат Неопределено КонецЕсли;
	
	// Попробуем найти контрагента
	Если ПользовательОбъект.Контрагент.Пустая() И Пользователь.Свойство("email") Тогда
		
		ЗаписьЖурналаРегистрации("API2.update_user.find_partner", УровеньЖурналаРегистрации.Информация,,,"Попытка найти контрагента");
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ВЫБОР 	КОГДА спр.Объект Ссылка Справочник.Контрагенты ТОГДА спр.Объект
		|			КОГДА спр.Объект Ссылка Справочник.КонтактныеЛица ТОГДА спр.Объект.Владелец
		|	КОНЕЦ КАК Контрагент
		|ИЗ
		|	РегистрСведений.ПредставлениеКонтактнойИнформации КАК спр
		|ГДЕ
		|	спр.Представление ПОДОБНО &Представление";
		
		Запрос.УстановитьПараметр("Представление", Пользователь.email);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			ЗаписьЖурналаРегистрации("API2.update_user.find_partner_success", УровеньЖурналаРегистрации.Информация,,,Выборка.Контрагент);
		    ПользовательОбъект.Контрагент = Выборка.Контрагент; КонецЕсли;КонецЕсли;
	
	ЗаписьЖурналаРегистрации("API2.update_user.update", УровеньЖурналаРегистрации.Информация,,,"изменился = " + Изменился);
	
	Если Изменился Тогда
		ПользовательОбъект.ДополнительныеСвойства.Вставить("Обновление", Ложь); // сайт не пинать
		ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(ПользовательОбъект,,стрОшибки, Ложь); КонецЕсли;
	
	Результат = Новый Структура("email, guid, id", ПользовательОбъект.ЭлектроннаяПочта, ПользовательОбъект.Ссылка, ПользовательОбъект.id);
	
	// Обновить информацию о адресе доставки
	АдресаДоставки = Неопределено;
	Если Пользователь.Свойство("delivery_address", АдресаДоставки) И ЗначениеЗаполнено(Пользователь.delivery_address) Тогда
		
		МассивОтвета 	= Новый Массив;
		МассивИД 		= Новый Массив;
		 		
		Для каждого АдресДоставки Из АдресаДоставки Цикл
			Если АдресДоставки.Свойство("id") И ЗначениеЗаполнено(АдресДоставки.id) Тогда МассивИД.Добавить(АдресДоставки.id); КонецЕсли; КонецЦикла;
				 		
		Запрос 	= Новый Запрос("ВЫБРАТЬ id, Ссылка ИЗ Справочник.АдресаДоставкиИнтернет КАК Адреса ГДЕ id в (&id)"); Запрос.УстановитьПараметр("id", МассивИД);
		Выборка = Запрос.Выполнить().Выбрать();
		ид 		= Новый Соответствие; Пока Выборка.Следующий() Цикл ид.Вставить(Выборка.id, Выборка.Ссылка); КонецЦикла;
						
		Для каждого АдресДоставки Из АдресаДоставки Цикл
			// Ищем по id
			
			Если АдресДоставки.Свойство("guid") И ЗначениеЗаполнено(АдресДоставки.guid) Тогда 
				НайденныйАдрес = HTTP.ПолучитьОбъектПоСсылке(Справочники.АдресаДоставкиИнтернет, АдресДоставки.guid, стрОшибки); 
			Иначе
				НайденныйАдрес = ид[АдресДоставки.id];
			КонецЕсли;
		
			Если НайденныйАдрес = Неопределено Тогда
				
				НайденныйАдрес = Справочники.АдресаДоставкиИнтернет.СоздатьЭлемент();
				НайденныйАдрес.Владелец = ПользовательОбъект.Ссылка;
				
			Иначе
				НайденныйАдрес = НайденныйАдрес.ПолучитьОбъект();КонецЕсли;
			
			Изменился = Ложь;
			УстановитьРеквизитИзСтруктуры("first_name", 	"first_name",	АдресДоставки, НайденныйАдрес, Изменился);
			УстановитьРеквизитИзСтруктуры("last_name", 		"last_name",	АдресДоставки, НайденныйАдрес, Изменился);
			УстановитьРеквизитИзСтруктуры("phone", 			"phone", 		АдресДоставки, НайденныйАдрес, Изменился);
			УстановитьРеквизитИзСтруктуры("Наименование", 	"title", 		АдресДоставки, НайденныйАдрес, Изменился);
			УстановитьРеквизитИзСтруктуры("ПочтовыйИндекс", "postal_code", 	АдресДоставки, НайденныйАдрес, Изменился);
			УстановитьРеквизитИзСтруктуры("Комментарий", 	"comment", 		АдресДоставки, НайденныйАдрес, Изменился);
			УстановитьРеквизитИзСтруктуры("Адрес", 			"title", 		АдресДоставки, НайденныйАдрес, Изменился);   //street_address
			УстановитьРеквизитИзСтруктуры("id", 			"id", 			АдресДоставки, НайденныйАдрес, Изменился);
			УстановитьРеквизитИзСтруктуры("email", 			"email", 		АдресДоставки, НайденныйАдрес, Изменился);
			
			УстановитьРеквизитИзСтруктуры("Улица", 	    	"street", 		АдресДоставки, НайденныйАдрес, Изменился);
			УстановитьРеквизитИзСтруктуры("Регион", 		"region", 		АдресДоставки, НайденныйАдрес, Изменился);
			УстановитьРеквизитИзСтруктуры("Город", 			"city", 		АдресДоставки, НайденныйАдрес, Изменился);
			УстановитьРеквизитИзСтруктуры("Страна", 		"country", 		АдресДоставки, НайденныйАдрес, Изменился);
			УстановитьРеквизитИзСтруктуры("Kladr", 		    "kladr", 		АдресДоставки, НайденныйАдрес, Изменился);
			
		//	УстановитьРеквизитИзСтруктуры("order_id", 		"order_id", 	АдресДоставки, НайденныйАдрес, Изменился);
			
			УстановитьРеквизитИзСтруктуры("Основной", 		"is_main", 		АдресДоставки, НайденныйАдрес, Изменился);
			УстановитьРеквизитИзСтруктуры("ПометкаУдаления","is_delete", 	АдресДоставки, НайденныйАдрес, Изменился);
         										
			//Если АдресаДоставки.Свойство("is_main") и АдресаДоставки.is_main = "1" Тогда НайденныйАдрес.Основной = Истина; Иначе НайденныйАдрес.Основной = Ложь; КонецЕсли;
			//Если АдресаДоставки.Свойство("is_delete") и АдресаДоставки.is_delete = "1" Тогда НайденныйАдрес.ПометкаУдаления = Истина; Иначе НайденныйАдрес.ПометкаУдаления = Ложь; КонецЕсли;
			
			УстановитьРеквизитГуидИзСтруктуры(Справочники.ПользователиИнтернет, "Владелец","user_guid",АдресДоставки, НайденныйАдрес, Изменился, стрОшибки);
			
			Если Изменился Тогда
				ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(НайденныйАдрес,,стрОшибки, Ложь);
			КонецЕсли;
			
			МассивОтвета.Добавить(Новый Структура("guid, id", НайденныйАдрес.Ссылка, НайденныйАдрес.id)); КонецЦикла;
		
		Если ЗначениеЗаполнено(МассивОтвета) Тогда
			Результат.Вставить("delivery_addresses", МассивОтвета); КонецЕсли; КонецЕсли;
	
	//ОтветJSON = Строка(w1_Json.JSON(Результат, Истина));
	ОтветJSON = Строка(w1_Json.JSON(ПолучитьПользователей(Новый Структура("Ссылка", ПользовательОбъект.Ссылка), стрОшибки), Истина));
	
	ЗаписьЖурналаРегистрации("API2.update_user.end", УровеньЖурналаРегистрации.Информация,,,"Результат = " + ОтветJSON);
	
	Возврат ОтветJSON;
	
КонецФункции
Функция СоздатьПользователя(userJson, стрОшибки = "", Сайт = Неопределено) Экспорт
	
	// Проверим
	
	НовПользователь = Неопределено;
	Пользователь = ПолучитьСтруктуруИзJSON(userJson, стрОшибки); Если Пользователь = Неопределено Тогда Возврат Неопределено КонецЕсли;
	
	Если Не Пользователь.Свойство("email") Или ПустаяСтрока(Пользователь.email) Тогда 
		
		ДобавитьОписаниеОшибки(стрОшибки, "Не указан  email") 
		
	Иначе // Проверим уникальность email
		
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка Из Справочник.ПользователиИнтернет ГДЕ ЭлектроннаяПочта = """ + Пользователь.email + """ И НЕ ПометкаУдаления");
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда НовПользователь = Выборка.Ссылка.ПолучитьОбъект(); КонецЕсли; КонецЕсли;
	
	Если Не ПустаяСтрока(стрОшибки) Тогда Возврат Неопределено КонецЕсли;
	
	// Создадим пользователя
	Если НовПользователь = Неопределено Тогда
		НовПользователь = Справочники.ПользователиИнтернет.СоздатьЭлемент();
		НовПользователь.СайтИсточник = ?(Сайт = Неопределено, Перечисления.Сайты.garage, Сайт);
	КонецЕсли;
	
	Возврат ОбновитьПользователя(userJson, НовПользователь, стрОшибки);
КонецФункции
Функция УдалитьПользователя(userguid, стрОшибки = "") Экспорт
	
	Возврат УдалитьОбъект(Справочники.ПользователиИнтернет, userguid, стрОшибки);
	
КонецФункции

Функция ОбновитьЗаказ_ст(orderJson, ЗаказОбъект = Неопределено, стрОшибки = "") Экспорт

	// Проверим
	
	//Структура = ПолучитьСтруктуруИзJSON(orderJson, стрОшибки); Если Структура = Неопределено Тогда Возврат Ложь КонецЕсли;
	//
	//Если ЗаказОбъект = Неопределено Тогда
	//	
	//	Если Не Структура.Свойство("guid") Или ПустаяСтрока(Структура.guid) Тогда 
	//		ДобавитьОписаниеОшибки(стрОшибки, "Не указан guid") 
	//	Иначе
	//		ЗаказСсылка = HTTP.ПолучитьОбъектПоСсылке(Документы.ИнтернетЗаказПокупателя, Структура.guid, стрОшибки); Если ЗаказСсылка = Неопределено Тогда Возврат Ложь КонецЕсли;
	//		ЗаказОбъект = ПользовательСсылка.ПолучитьОбъект(); КонецЕсли; КонецЕсли;
	//		
	//Если Не ПустаяСтрока(стрОшибки) Тогда Возврат Ложь КонецЕсли;
	//
	//// Обновим его реквизиты
	//
	//Изменился = Ложь;
	//УстановитьРеквизитИзСтруктуры("КомментарийКДоставке", 	"comment", 	Пользователь, ПользовательОбъект, Изменился);
	//
	//УстановитьРеквизитГуидИзСтруктуры(Справочники.ТипыЦен, "ТипЦен", "price_types", Пользователь, ПользовательОбъект, Изменился, стрОшибки);
	//
	//Если Не ПустаяСтрока(стрОшибки) Тогда Возврат Ложь КонецЕсли;
	//
	//// Вернем
	//
	//Возврат ?(Изменился, ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(ПользовательОбъект,,стрОшибки, Ложь), Истина);
	
КонецФункции
Функция ОбновитьЗаказ(orderJson, стрОшибки = "", ЗаказОбъект = Неопределено, НеСоздаватьЗаказ = Ложь, Сайт = Неопределено) Экспорт
	
	Перем number;
	Перем type_order;
	Перем status;
	//Перем error;
	Перем products;
	
	Заказ = w1_Json.UnJSON36(orderJson, Новый Структура, стрОшибки);
	//Заказ = w1_Json.UnJSON(orderJson);
	
	// user = "guid"
	// order.shipping_address or order.shipping_address_id
	
	//ЗаказJson.Свойство("cost_of_delivery", 	Заказ.СуммаДоставки);
	//ЗаказJson.Свойство("to_door", 			Заказ.ДоставкаДоДвери); 
	//ЗаказJson.Свойство("term_delivery",		Заказ.МаксимальныйСрокДоставки);
	//Если ЗаказJson.Свойство("id") Тогда Заказ.id = Формат(Заказ.id, "ЧГ=") КонецЕсли;
	//ЗаказJson.Свойство("variant_delivery",	Заказ.ВариантДоставки);
	//	
	//ЗаказJson.Свойство("comment", 			utКомментарий);
	// ЗаказJson.Свойство("comment_delivery",	utКомментарийКДоставке);
	//ЗаказJson.Свойство("kind_payment_code",	стрКодаОплаты);
	//ЗаказJson.Свойство("status", 	Заказ.СуммаДоставки);
	// real_delivery_cost СуммаДоставкиРасход
	
	//line_items
	// - product_guid
	// - quantity
	// - base_price
	// - discount
	
	Если ЗаказОбъект = Неопределено Тогда
	
		Если Заказ.Свойство("guid") И НЕ ПустаяСтрока(Заказ.guid) Тогда
			ЗаказОбъект = HTTP.ПолучитьОбъектПоСсылке(Документы.ИнтернетЗаказПокупателя, Заказ.guid, стрОшибки); 
		Если ЗаказОбъект = Неопределено Тогда Возврат Новый Структура КонецЕсли; КонецЕсли; КонецЕсли;
		
	Попытка
		Результат = СформироватьОбновитьЗаказ(Заказ, стрОшибки, ЗаказОбъект, НеСоздаватьЗаказ, Сайт);
	Исключение
		стрОшибки 	= ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("HTTP.create_order", УровеньЖурналаРегистрации.Ошибка, , , стрОшибки);
		Возврат "";
	КонецПопытки;
	
	Возврат w1_Json.JSON(Результат, Истина);
	
	// Проверим
	
	//Структура = ПолучитьСтруктуруИзJSON(orderJson, стрОшибки); Если Структура = Неопределено Тогда Возврат Ложь КонецЕсли;
	//
	//Если Не Структура.Свойство("items") Или Пользователь.products.Количество() Тогда ДобавитьОписаниеОшибки(стрОшибки, "Нет информации по товарам items") КонецЕсли;
	//Если Не Структура.Свойство("user") Или ПустаяСтрока(Структура.user) Тогда  ДобавитьОписаниеОшибки(стрОшибки, "Не указан пользователь user") КонецЕсли;
	//
	//Если Не ПустаяСтрока(стрОшибки) Тогда Возврат Ложь КонецЕсли;
	//
	//// Создадим
	//
	//НовЗаказ = Документы.ИнтернетЗаказПокупателя.СоздатьДокумент();
	//Если ОбновитьЗаказ(orderJson, НовЗаказ, стрОшибки) Тогда
	//	
	//	order_guid = XMLСтрока(НовЗаказ.Ссылка);
	//	Возврат Истина;
	//	
	//Иначе Возврат Ложь КонецЕсли;
	
КонецФункции

Функция СформироватьОбновитьЗаказ(order, error = "", ЗаказОбъект = Неопределено, НеСоздаватьЗаказ = Ложь, Сайт = Неопределено)
	
	ЗаписьЖурналаРегистрации("HTTP.Сайт создал новый заказ", УровеньЖурналаРегистрации.Информация, , , 
			"order = " + order);
			
	ЕстьЗаказ = ЗаказОбъект <> Неопределено И (ЗаказОбъект <> Неопределено или Не НеСоздаватьЗаказ);
	//Если НеСоздаватьЗаказ И ТипЗнч(ЗаказОбъект) = 
	
	СсылкаИнтернетПользователь = ?(ЕстьЗаказ, ЗаказОбъект.ПользовательИнтернет, ?(order.Свойство("user_guid") , HTTP.ПолучитьОбъектПоСсылке(Справочники.ПользователиИнтернет, order.user_guid, error), Неопределено));
	
	Если СсылкаИнтернетПользователь = Неопределено Тогда
		ТипЦен = HTTP.ПолучитьТипЦенПользователяИнтернет(Новый Структура("ТипЦен", ПредопределенноеЗначение("Справочник.ТипыЦен.ПустаяСсылка")));
	Иначе
		ТипЦен = HTTP.ПолучитьТипЦенПользователяИнтернет(СсылкаИнтернетПользователь);
	КонецЕсли;
	
	// Рискнем преобразовать русские буквы
	
	//order = HTTP.UTFвANSI(order);
	
	// Форматнем структуру заказа
	
	//ЗаказJson = Json.UnJSON_silber(order, error);
	ЗаказJson = order;
	Если ЗаказJson = Неопределено Тогда
		
		ЗаписьЖурналаРегистрации("HTTP.Сайт создал новый заказ", УровеньЖурналаРегистрации.Ошибка, , , error);
		Возврат "";
		
	КонецЕсли;
	
	// Создадим заказ
	
	МВЗ_гуид = Неопределено; МВЗ = Неопределено;
	ЗаказJson.Свойство("place_of_cost", МВЗ_гуид);
 	Если НЕ МВЗ_гуид = Неопределено Тогда
		МВЗ = HTTP.ПолучитьОбъектПоСсылке(Справочники.МВЗ, МВЗ_гуид, error);
	КонецЕсли;
	
	Если Не ЕстьЗаказ Тогда
		
		Если ЗаказОбъект = Неопределено Тогда  // Создадим новый заказ
			Заказ = Документы.ИнтернетЗаказПокупателя.СоздатьДокумент();
			Заказ.СайтИсточник 	= ?(Сайт = Неопределено, Перечисления.Сайты.garage, Сайт);
		Иначе
			Заказ = ЗаказОбъект; КонецЕсли;
		
		Заказ.СпособРазмещенияБезЗаказа = Истина;
		ОрганизацияЗаказа 	= Константы.ОрганизацияДляИнтернетЗаказов.Получить();
		
		// Заполним реквизиты у которых вначале стоит "ИнтернетЗаказ_"
		
		РеквЗак = ОрганизацияЗаказа.Метаданные().Реквизиты;
		Для Каждого Реквизит Из РеквЗак Цикл
			Если Лев(Реквизит.Имя, 14) = "ИнтернетЗаказ_" Тогда
				Имя = Сред(Реквизит.Имя,15);
				Заказ[Имя] = ОрганизацияЗаказа[Реквизит.Имя];
			КонецЕсли;
		КонецЦикла;
		
		ВалютаИнтернетПродаж = Константы.ВалютаУправленческогоУчета.Получить();
		
		Заказ.Дата					= ТекущаяДата();
		Заказ.ТипЦен 				= ТипЦен;
		Заказ.Валюта				= ВалютаИнтернетПродаж;
		Заказ.ПользовательИнтернет 	= СсылкаИнтернетПользователь;
		Заказ.УчитыватьНДС	 		= Ложь;
		
		Если ЗначениеЗаполнено(СсылкаИнтернетПользователь) Тогда Заказ.ОтветственноеЛицо = СсылкаИнтернетПользователь.ФизЛицо КонецЕсли;
		Если ЗначениеЗаполнено(Заказ.ОтветственноеЛицо) И МВЗ = Неопределено Тогда Заказ.ПередачаТовара = Истина; КонецЕсли; // это ИПР
		Если НЕ МВЗ = Неопределено Тогда // Заказ Северстали
			Заказ.Контрагент = Заказ.ОтветственноеЛицо.Контрагент;
			Если Заказ.Контрагент.Пустая() Тогда
				Заказ.Контрагент = МВЗ.Владелец.Контрагент;
			КонецЕсли;
			
			ФункцииФормДокументов.КонтрагентПриИзменении(Заказ);
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Табл.Организация КАК Организация ИЗ Справочник.Контрагенты.Организации КАК Табл ГДЕ Табл.ЗначениеПоУмолчанию И Табл.Ссылка = &Контрагент";
			Запрос.УстановитьПараметр("Контрагент", Заказ.Контрагент);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда Заказ.Организация = Выборка.Организация; КонецЕсли;
			
			Заказ.СуммаВключаетНДС	 	= Ложь;
		Иначе // Обычный заказ
						
			Если НЕ СсылкаИнтернетПользователь = Неопределено И Не СсылкаИнтернетПользователь.Контрагент.Пустая() Тогда
				Заказ.Контрагент = СсылкаИнтернетПользователь.Контрагент;
				ФункцииФормДокументов.КонтрагентПриИзменении(Заказ); 
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Заказ.Организация) Тогда
			Заказ.Организация			= Константы.ОрганизацияДляИнтернетЗаказов.Получить(); КонецЕсли;
			Заказ.СуммаВключаетНДС	 	= Истина;
			
			// Попробуем поискать контрагента по ИНН
			
			Если ЗаказJson.Свойство("inn") Тогда
				Если ЗначениеЗаполнено(ЗаказJson.inn) Тогда
					Заказ.ИНН = ЗаказJson.inn;
					Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка Контрагент ИЗ Справочник.Контрагенты ГДЕ ИНН = """ + ЗаказJson.inn + """");
					Выборка = Запрос.Выполнить().Выбрать();
					Если Выборка.Следующий() Тогда 
						Заказ.Контрагент = Выборка.Контрагент;
						ФункцииФормДокументов.КонтрагентПриИзменении(Заказ);
						// Раз есть такой контрагент то проверем его связь с интрнет пользователем и если связи не будет, тогда свяжем их
						
						Если 	Не Заказ.Контрагент.Пустая() И 
								Не Заказ.ПользовательИнтернет.Пустая() И
								Заказ.ПользовательИнтернет.Контрагент.Пустая() Тогда
								
							СпрИнтПользовательОб = Заказ.ПользовательИнтернет.ПолучитьОбъект();
							СпрИнтПользовательОб.Контрагент = Заказ.Контрагент;
							
							Если Не ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(СпрИнтПользовательОб) Тогда
								ЗаписьЖурналаРегистрации("HTTP.Сайт создал новый заказ", УровеньЖурналаРегистрации.Ошибка, , , error);
								Возврат "";
							КонецЕсли; 
						КонецЕсли; 
					КонецЕсли; 
				КонецЕсли;
				
				// Установим тип цен контрагента
				Если Не Заказ.Контрагент.Пустая() И Не Заказ.Контрагент.ТипЦен.Пустая() Тогда Заказ.ТипЦен = Заказ.Контрагент.ТипЦен КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	Иначе
		
		Заказ = ЗаказОбъект.ПолучитьОбъект();
		//Заказ.Товары.Очистить();
		
		БизнесПроцесс = HTTP.ПолучитьБизнесПроцесс(Заказ.Ссылка, error);
		Если БизнесПроцесс = Неопределено Тогда
			ЗаписьЖурналаРегистрации("HTTP.Сайт создал новый заказ", УровеньЖурналаРегистрации.Ошибка, , , error);
			Возврат "";
		КонецЕсли;
			
	КонецЕсли;
	
	    Если НЕ Заказ.Контрагент.Пустая() Тогда
	        Заказ.ЗаЧейСчетДоставка  = ?(ЗначениеЗаполнено(Заказ.Контрагент.ЗаЧейСчетДоставка), Заказ.Контрагент.ЗаЧейСчетДоставка, Заказ.ЗаЧейСчетДоставка);    КонецЕсли;

	// Поищем адрес доставки
	    delivery_address = Неопределено;
		Если 	ЗаказJson.Свойство("delivery_address_guid", 		delivery_address) Тогда
		
		Если не ПустаяСтрока(delivery_address) Тогда
		
			СсылкаАдресДоставки = HTTP.ПолучитьОбъектПоСсылке(Справочники.АдресаДоставкиИнтернет, delivery_address, error);
			//Если СсылкаАдресДоставки = Неопределено Тогда ЗаписьЖурналаРегистрации("HTTP.Сайт создал новый заказ", УровеньЖурналаРегистрации.Ошибка, , , error);Возврат "";КонецЕсли;
			
			Заказ.АдресДоставки  = СсылкаАдресДоставки;
		КонецЕсли; 
		КонецЕсли;
		
		// Обновить информацию о адресе доставки     ************
		
	// Проверим
	СтруктураАдресДоставки = Неопределено;
	//МассивОтвета 	= Новый Массив;

	Если ЗаказJson.Свойство("delivery_address", СтруктураАдресДоставки) И ЗначениеЗаполнено(ЗаказJson.delivery_address) Тогда
		
		// Получим 
		Если СтруктураАдресДоставки.Свойство("id") И ЗначениеЗаполнено(СтруктураАдресДоставки.id) Тогда  
			Запрос 	= Новый Запрос("ВЫБРАТЬ id, Ссылка ИЗ Справочник.АдресаДоставкиИнтернет КАК Адреса ГДЕ id = (&id)"); Запрос.УстановитьПараметр("id", СтруктураАдресДоставки.id);
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда НайденныйАдрес = Выборка.Ссылка; КонецЕсли;
			
		иначеЕсли СтруктураАдресДоставки.Свойство("guid") И ЗначениеЗаполнено(СтруктураАдресДоставки.guid) Тогда 
			НайденныйАдрес = Http.ПолучитьОбъектПоСсылке(Справочники.АдресаДоставкиИнтернет,СтруктураАдресДоставки.guid,"");
		КонецЕсли;	
		
		
		Если НайденныйАдрес = Неопределено Тогда
			
			НайденныйАдрес = Справочники.АдресаДоставкиИнтернет.СоздатьЭлемент();
			НайденныйАдрес.Владелец = СсылкаИнтернетПользователь;
			
		Иначе
			НайденныйАдрес = НайденныйАдрес.ПолучитьОбъект();
		КонецЕсли;
		
		//*****
		
		//Если Не ПустаяСтрока(error) Тогда Возврат Неопределено КонецЕсли;
		
		// Обновим его реквизиты
		
		Изменился = Ложь;
		УстановитьРеквизитИзСтруктуры("first_name", 	"first_name",	СтруктураАдресДоставки, НайденныйАдрес, Изменился);
		УстановитьРеквизитИзСтруктуры("last_name", 		"last_name",	СтруктураАдресДоставки, НайденныйАдрес, Изменился);
		УстановитьРеквизитИзСтруктуры("phone", 			"phone", 		СтруктураАдресДоставки, НайденныйАдрес, Изменился);
		УстановитьРеквизитИзСтруктуры("Наименование", 	"title", 		СтруктураАдресДоставки, НайденныйАдрес, Изменился);
		УстановитьРеквизитИзСтруктуры("ПочтовыйИндекс", "postal_code", 	СтруктураАдресДоставки, НайденныйАдрес, Изменился);
		УстановитьРеквизитИзСтруктуры("Комментарий", 	"comment", 		СтруктураАдресДоставки, НайденныйАдрес, Изменился);
		УстановитьРеквизитИзСтруктуры("Адрес", 			"title", 		СтруктураАдресДоставки, НайденныйАдрес, Изменился);
		УстановитьРеквизитИзСтруктуры("id", 			"id", 			СтруктураАдресДоставки, НайденныйАдрес, Изменился);
		УстановитьРеквизитИзСтруктуры("email", 			"email", 		СтруктураАдресДоставки, НайденныйАдрес, Изменился);
		
		УстановитьРеквизитИзСтруктуры("Страна", 	    "country", 		СтруктураАдресДоставки, НайденныйАдрес, Изменился);
		УстановитьРеквизитИзСтруктуры("Kladr", 			"kladr", 		СтруктураАдресДоставки, НайденныйАдрес, Изменился);
		УстановитьРеквизитИзСтруктуры("Город", 			"city", 		СтруктураАдресДоставки, НайденныйАдрес, Изменился);
		УстановитьРеквизитИзСтруктуры("Регион", 		"region", 		СтруктураАдресДоставки, НайденныйАдрес, Изменился);
		УстановитьРеквизитИзСтруктуры("Улица", 			"street", 		СтруктураАдресДоставки, НайденныйАдрес, Изменился);
		
		//УстановитьРеквизитИзСтруктуры("order_id", 		"order_id", 	СтруктураАдресДоставки, НайденныйАдрес, Изменился);
		
		УстановитьРеквизитИзСтруктуры("Основной", 		"is_main", 		СтруктураАдресДоставки, НайденныйАдрес, Изменился);
		УстановитьРеквизитИзСтруктуры("ПометкаУдаления","is_delete", 	СтруктураАдресДоставки, НайденныйАдрес, Изменился);
		УстановитьРеквизитИзСтруктуры("Admitad_uid","Admitad_uid", 	    СтруктураАдресДоставки, НайденныйАдрес, Изменился);
		УстановитьРеквизитИзСтруктуры("Источник","utm_source", 	    СтруктураАдресДоставки, НайденныйАдрес, Изменился);
		УстановитьРеквизитИзСтруктуры("ВидИсточника","utm_medium", 	    СтруктураАдресДоставки, НайденныйАдрес, Изменился);
		
		//Если СтруктураАдресДоставки.Свойство("is_main") и СтруктураАдресДоставки.is_main = "1" Тогда НайденныйАдрес.Основной = Истина; Иначе НайденныйАдрес.Основной = Ложь; КонецЕсли;
		//Если СтруктураАдресДоставки.Свойство("is_delete") и СтруктураАдресДоставки.is_delete = "1" Тогда НайденныйАдрес.ПометкаУдаления = Истина; Иначе НайденныйАдрес.ПометкаУдаления = Ложь; КонецЕсли;
		
		УстановитьРеквизитГуидИзСтруктуры(Справочники.ПользователиИнтернет, "Владелец","user_guid",СтруктураАдресДоставки, НайденныйАдрес, Изменился, error);
		
		Если Изменился Тогда
			НайденныйАдрес.ДополнительныеСвойства.Вставить("Обновление", Ложь); // сайт не пинать
			ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(НайденныйАдрес, ,"", Ложь);
		КонецЕсли;
		
		Если  НЕ НайденныйАдрес  = Неопределено Тогда
			СтруктураАдресДоставки.Вставить("guid",НайденныйАдрес.Ссылка);
		КонецЕсли; 
		//Если Не ПустаяСтрока(error) Тогда Возврат Неопределено КонецЕсли;
		
		// Вернем
		//АдресДоставки = Новый Структура("guid, id", НайденныйАдрес.Ссылка, НайденныйАдрес.id); 
		
		//Если ЗначениеЗаполнено(АдресДоставки) Тогда
		//	ЗаказJson.Вставить("delivery_addresses", АдресДоставки); КонецЕсли; КонецЕсли;
		Заказ.АдресДоставки  = НайденныйАдрес.Ссылка;
		
		УстановитьРеквизитИзСтруктуры("АдресОтправкиПисьма", 			"email", 		СтруктураАдресДоставки, Заказ, Изменился);
		
	КонецЕсли;
	//********************
	
	// Поищем склад
	
	Если НЕ МВЗ = Неопределено Тогда // Заказ Северстали
		Заказ.Склад = МВЗ.Владелец;
	ИначеЕсли ЗаказJson.Свойство("warehouse_guid") И ЗначениеЗаполнено(ЗаказJson.warehouse_guid) Тогда
		Заказ.СкладСамовывоза = HTTP.ПолучитьОбъектПоСсылке(Справочники.Склады, ЗаказJson.warehouse_guid, error);
		Заказ.Склад = Заказ.СкладСамовывоза;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Заказ.Склад) Тогда
		Заказ.Склад = Константы.СкладИнтернетЗаказа.Получить();
	КонецЕсли;
	
	// Заполним шапку
	
	utКомментарий 			= "";
	utКомментарийКДоставке 	= "";
	стрКодаОплаты			= "";
	ВидОплаты               = Неопределено;
	АдресДоставки			= "";
	
	ЗаказJson.Свойство("delivery_cost", 		Заказ.СуммаДоставки);
	ЗаказJson.Свойство("to_door", 				Заказ.ДоставкаДоДвери); 
	ЗаказJson.Свойство("term_delivery",			Заказ.МаксимальныйСрокДоставки);
	ЗаказJson.Свойство("id",					Заказ.id);
	ЗаказJson.Свойство("variant_delivery",		Заказ.ВариантДоставки);
	ЗаказJson.Свойство("real_delivery_cost", 	Заказ.СуммаДоставкиРасход);
		
	ЗаказJson.Свойство("comment", 				utКомментарий);
 	ЗаказJson.Свойство("comment_delivery",		utКомментарийКДоставке);
	ЗаказJson.Свойство("delivery_address",		АдресДоставки);
	                         
	Если ЗаказJson.Свойство("payment_variant_guid",стрКодаОплаты) и ЗначениеЗаполнено(ЗаказJson.payment_variant_guid) Тогда
		//ВидОплаты = HTTP.ПолучитьВидОплатыПоКОдуОплаты(стрКодаОплаты);
	ВидОплаты = HTTP.ПолучитьОбъектПоСсылке(Справочники.ВидОплатыИнтернетЗаказа,стрКодаОплаты, error);	
	КонецЕсли;	
	
	ЗаказJson.Свойство("current_location",		Заказ.МестоположениеСтр);
	
    ЗаказJson.Свойство("is_check",		        Заказ.is_check);
		
	Если ТипЗнч(АдресДоставки) = Тип("Строка") Тогда
		АдресДоставкиСтрока = АдресДоставки;
	ИначеЕсли ТипЗнч(АдресДоставки) = Тип("Структура") Тогда // тогда это скорее структура
		name = ""; title = ""; first_name = ""; last_name = ""; phone = ""; postal_code = ""; email = "";
		АдресДоставки.Свойство("title"			, title);
		АдресДоставки.Свойство("first_name"		, first_name);
		АдресДоставки.Свойство("last_name"		, last_name);
		АдресДоставки.Свойство("phone"			, phone);
		АдресДоставки.Свойство("postal_code"	, postal_code);
		АдресДоставки.Свойство("name"			, name);
		АдресДоставки.Свойство("email"			, email);

		АдресДоставкиСтрока = "Адрес: " + title + " Кому: " + phone + " " + name + " " + first_name + " " + last_name + " Индекс: " + postal_code +" Email: " + email;
	КонецЕсли;
	
	Заказ.ВидОплаты				= ВидОплаты;
	Заказ.Комментарий 			= СокрЛП(?(ЗначениеЗаполнено(utКомментарий), Строка(utКомментарий), "") + " Вид оплаты: " + ВидОплаты);
	Заказ.КомментарийКДоставке 	= Строка(utКомментарийКДоставке) + АдресДоставкиСтрока;
	
	Заказ.МВЗ					= МВЗ;
	Заказ.КомментарийКДоставке 	= Заказ.КомментарийКДоставке + Символы.ПС + "МВЗ: " + Строка(МВЗ);//+ МВЗ_гуид;
	
	Если ЗаказJson.Свойство("inn") Тогда
		стрИНН = "ИНН: " + ЗаказJson.inn;
		Заказ.ИНН = ЗаказJson.inn;
		Если Не СтрНайти(Заказ.КомментарийКДоставке, стрИНН) Тогда
			Заказ.КомментарийКДоставке = Заказ.КомментарийКДоставке + Символы.ПС + стрИНН; КонецЕсли; КонецЕсли;
	
	Если ЗаказJson.Свойство("admitad_uid") Тогда
		Заказ.Admitad_uid = ЗаказJson.admitad_uid;
	КонецЕсли;
	
	Если ЗаказJson.Свойство("utm_source") Тогда
		Заказ.Источник = ЗаказJson.utm_source;
	КонецЕсли;
	
	Если ЗаказJson.Свойство("utm_medium") Тогда
		Заказ.ВидИсточника = ЗаказJson.utm_medium;
	КонецЕсли;
	
	//Заполним поле "Кто оформил заказ"
	Заказ.КтоОФормилЗаказ = ?(СсылкаИнтернетПользователь <> Неопределено,Перечисления.КтоОформилЗаказ.Клиент,Перечисления.КтоОформилЗаказ.ПустаяСсылка());
	
	// Заполним Табличную часть заказ
	
	СтрокиТоваровJson = Неопределено; КЭШтоваровJSON = Новый Соответствие;
	Если ЗаказJson.Свойство("line_items", СтрокиТоваровJson) Тогда
		
		Если СтрокиТоваровJson = Неопределено Тогда error = "Список товаров не заполнен"; Возврат ""; КонецЕсли;
		
		Ном = 0;
		Для Каждого СтруктураСтроки Из СтрокиТоваровJson Цикл Ном = Ном + 1;
			
			// Получим товар
			
			product_guid = Неопределено;
			Если Не СтруктураСтроки.Свойство("product_guid", product_guid) Тогда
				
				error = "Ошибка, не обнаружен товар в строке №" + Ном + ", свойство ""product_guid""";
				ЗаписьЖурналаРегистрации("HTTP.Сайт создал новый заказ", УровеньЖурналаРегистрации.Ошибка, , , error);
				Возврат "";
				
			КонецЕсли;
			
			СсылкаНоменклатура = HTTP.ПолучитьОбъектПоСсылке(Справочники.Номенклатура, product_guid, error);
			Если СсылкаНоменклатура = Неопределено Тогда
				
				ЗаписьЖурналаРегистрации("HTTP.Сайт создал новый заказ", УровеньЖурналаРегистрации.Ошибка, , , error);
				Возврат "";
				
			КонецЕсли;
			
			КоличествоТовара = 0; ЦенаТовара = 0; Скидка = 0; Цена = 0; Всего = 0;
			
			СтруктураСтроки.Свойство("quantity"		, КоличествоТовара);
			СтруктураСтроки.Свойство("base_price"	, ЦенаТовара);
			СтруктураСтроки.Свойство("discount"		, Скидка);
			
			СтруктураСтроки.Свойство("price"		, Цена);
			СтруктураСтроки.Свойство("total"		, Всего);
			
			КЭШтоваровJSON.Вставить(СсылкаНоменклатура, Новый Структура("Цена, Всего, base_price", Цена, Всего, ЦенаТовара));
			
			НовСтрока = Заказ.Товары.Добавить();
			НовСтрока.Номенклатура 	= СсылкаНоменклатура;
			Акция = Неопределено;
			
			ЭтоНеРозничнаяЦена = Заказ.ТипЦен <> HTTP.ПолучитьТипЦенПользователяИнтернет(Новый Структура("ТипЦен", ПредопределенноеЗначение("Справочник.ТипыЦен.ПустаяСсылка")));
			
			Если ЭтоНеРозничнаяЦена Тогда
				// данное условие поставлено затем, чтобы далее учесть процент скидки,
				// то есть если тип цен не розничный, то это дилер, а у дилера всегда цена будет другой от цены товара (базовой)
				// а нам надо учесть скидку. И тогда получается все правильно, если в цену вписать цена товара
				// кстати у дилера нет скидки
				
				НовСтрока.Цена = РаботаСНоменклатурой.ПолучитьЦену(СсылкаНоменклатура, Заказ.ТипЦен, ВалютаИнтернетПродаж,, Заказ.Контрагент, Истина, Акция);
				//НовСтрока.Цена 			= Цена;
			Иначе
				Если Скидка = 0 Тогда
					НовСтрока.Цена 			= Цена;
				ИначеЕсли ЦенаТовара - (ЦенаТовара * Скидка / 100) - Цена > 2 Тогда
					НовСтрока.Цена 			= РаботаСНоменклатурой.ПолучитьЦену(СсылкаНоменклатура, ТипЦен, ВалютаИнтернетПродаж,, Заказ.Контрагент, Истина, Акция);
				Иначе
					НовСтрока.Цена 			= ЦенаТовара;					
				КонецЕсли;
			КонецЕсли;
			
			НовСтрока.base_price 		= ЦенаТовара; // Сохраним для нужд сайта (потом будем возвращать на сайт)
			
			НовСтрока.Количество	= КоличествоТовара;
			Если НЕ МВЗ = Неопределено Тогда // Это заказ Северстали
				НовСтрока.СтавкаНДС		= Перечисления.СтавкиНДС.НДС18;
			Иначе
				НовСтрока.СтавкаНДС		= ?(Заказ.УчитыватьНДС, Перечисления.СтавкиНДС.НДС18, Перечисления.СтавкиНДС.БезНДС);
			КонецЕсли;
			
			НовСтрока.ПроцентАвтоматическойСкидки = ?(Скидка, Скидка, РаботаСНоменклатурой.ПолучитьПроцентАвтоматическойСкидки(НовСтрока.Номенклатура, Заказ.Контрагент, Заказ.ДисконтнаяКарта));
			
			// пересчитаем строку
			
			//НовСтрока.СуммаБезСкидки = НовСтрока.Цена * НовСтрока.Количество;
			//НовСтрока.СуммаАвтоматическойСкидки = НовСтрока.СуммаБезСкидки * НовСтрока.ПроцентАвтоматическойСкидки / 100;
			//НовСтрока.Сумма	 =	НовСтрока.СуммаБезСкидки - НовСтрока.СуммаАвтоматическойСкидки;

			//СтавкаНДС = КэшируемыеФункции.ПолучитьЧислоСтавкиНДС(НовСтрока.СтавкаНДС);
			//НовСтрока.СуммаНДС	= СтавкаНДС * НовСтрока.Сумма / (СтавкаНДС + 100);
			
			СтруктураКолонокТовары = Новый Структура("ЕстьПроцентРучнойСкидки, ЕстьПроцентАвтоматическойСкидки, ТипЦен, Валюта, 
													|ЕстьАкция, ЕстьЦенаПоАкции, ЕстьУпаковка, ЕстьКоличество, ЕстьЦена, ЕстьСуммаБезСкидки, 
													|ЕстьСумма, ЕстьСуммаАвтоматическойСкидки, ЕстьСуммаРучнойСкидки, ЕстьСтавкаНДС, ЕстьСуммаНДС, 
													|СуммаВключаетНДС, ЕстьВсего, ЕстьДоставка, ЕстьАкция, Контрагент", 
													Истина, Истина, Заказ.ТипЦен, Заказ.Валюта,
													Истина, Ложь, Истина, Истина, Истина, Истина,
													Истина, Истина, Истина, Истина, Истина,
													Заказ.СуммаВключаетНДС, Ложь, Ложь, Истина, Заказ.Контрагент);
			
			ФункцииФормДокументов.РассчитатьСуммыСтрокиОтЦены(НовСтрока, СтруктураКолонокТовары, Ложь);
		КонецЦикла;
	КонецЕсли;
	
	// Запишем заказ
	
	Заказ.ДополнительныеСвойства.Вставить("Обновление", Ложь); // сайт не пинать
	//Если НЕ НеСоздаватьЗаказ Тогда Заказ.УстановитьНовыйНомер(); КонецЕсли;
	Заказ.ОбменДанными.Загрузка = Истина;
 	Попытка
		Заказ.Записать();
	Исключение
		стрОшибки = ОписаниеОшибки();
		МассивОшибок = ПолучитьСообщенияПользователю(Истина);  
		Для Каждого СообщениеОшибки ИЗ МассивОшибок Цикл
		 	стрОшибки = стрОшибки + " " + СообщениеОшибки.Текст; КонецЦикла;
		
		error = "Ошибка при записи интернет заказа
		|" + стрОшибки;
		ЗаписьЖурналаРегистрации("HTTP.Сайт создал новый заказ", УровеньЖурналаРегистрации.Ошибка, , , error);
		Возврат "";
	КонецПопытки;
	
	Заказ.ОбменДанными.Загрузка = Ложь;
	Размещен = Истина;

	ЗаписьЖурналаРегистрации("HTTP.Сайт создал новый заказ", УровеньЖурналаРегистрации.Информация, , , "Временный лог: Начало транзакции");	
	НачатьТранзакцию();
	
	// запрос резерва
 
	//ТоварыНаСайт = СформироватьРезерв(Заказ, ТипЦен, Размещен);
	ТоварыНаСайт = СформироватьРезерв(Заказ, Размещен);
		
	// проведение заказа
	//Если Размещен Тогда	

		Попытка
			Заказ.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			МассивОшибок = ПолучитьСообщенияПользователю(Истина);
			error = ОписаниеОшибки() + КонвертацияТипов.ПолучитьСтрокуИзМассива(МассивОшибок);
			ЗаписьЖурналаРегистрации("HTTP.Сайт создал новый заказ", УровеньЖурналаРегистрации.Ошибка, , , error);

			ОтменитьТранзакцию();
			Перейти ~КонэцТранзакции;
		КонецПопытки;
		
	//КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	ЗаписьЖурналаРегистрации("HTTP.Сайт создал новый заказ", УровеньЖурналаРегистрации.Информация, , , "Временный лог: транзакция зафиксирована");	
	
	~КонэцТранзакции:
	
	// страт бизнес-процесса

	Если НЕ ЕстьЗаказ Тогда
		
		БизнесПроцесс 				= БизнесПроцессы.ИнтернетЗаявка.СоздатьБизнесПроцесс();
		БизнесПроцесс.Дата 			= ТекущаяДата();
		БизнесПроцесс.Заказ = Заказ.Ссылка;
		//БизнесПроцесс.Статус 		= Перечисления.СтатусыИнтерентЗаявки.Открыт;
		
		БизнесПроцесс.ДополнительныеСвойства.Вставить("Обновление", Ложь);

		Попытка
			БизнесПроцесс.Записать();
	    	БизнесПроцесс.Старт();
		Исключение
			error = "Ошибка старта бизнес-процесса: " + ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("HTTP.Сайт создал новый заказ", УровеньЖурналаРегистрации.Ошибка, , , error);
		КонецПопытки;
				
	Иначе
				
		Если ФункцииБизнесПроцессов.СтоитНаТочкеМаршрута(БизнесПроцесс, БизнесПроцессы.ИнтернетЗаявка.ТочкиМаршрута.ОжиданиеОтвета) Тогда
			Задача = ФункцииБизнесПроцессов.ТекущаяЗадача(БизнесПроцесс);
			ЗадачаОбъект = Задача.ПолучитьОбъект();
			Попытка
				ЗадачаОбъект.ВыполнитьЗадачу();
			Исключение
				error = "Ошибка при выполнении задачи: " + ОписаниеОшибки();
				ЗаписьЖурналаРегистрации("HTTP.Сайт создал новый заказ", УровеньЖурналаРегистрации.Ошибка, , , error);
				Возврат "";
			КонецПопытки;

		КонецЕсли;	
	КонецЕсли;	
		
	// Установим возвращаемые параметры
		
	Результат = Новый Структура("guid, status, id, limit", XMLСтрока(Заказ.Ссылка), HTTP.ПолучитьТипЗаказа_2(Заказ.Ссылка, НЕ ЕстьЗаказ), Заказ.id, Неопределено);
	
	Если НЕ ЕстьЗаказ Тогда
		Результат.Вставить("number", Заказ.Номер);
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(СтруктураАдресДоставки) Тогда
			Результат.Вставить("delivery_addresses", СтруктураАдресДоставки); КонецЕсли;
		
	special_shipping_time = 0;
	Если ЗаказJson.Свойство("line_items") Тогда
		
		Для каждого строкаТовара Из ТоварыНаСайт Цикл // массив структур
			
			special_shipping_time = МАКС(special_shipping_time, строкаТовара.special_shipping_time);
			
			кэшТовара = КЭШтоваровJSON[строкаТовара.product_guid];
			Если НЕ кэшТовара = Неопределено Тогда
				строкаТовара.Вставить("price"		, кэшТовара.Цена);
				строкаТовара.Вставить("total"		, кэшТовара.Всего);
				строкаТовара.Вставить("base_price"	, кэшТовара.base_price);
			КонецЕсли;
		КонецЦикла;
		Результат.Вставить("line_items", ТоварыНаСайт);

		ЗаписьЖурналаРегистрации("HTTP.Сайт создал новый заказ", УровеньЖурналаРегистрации.Информация, , , "Резерв: " + Результат.line_items);
	КонецЕсли;
	Результат.Вставить("special_shipping_time", special_shipping_time);
	
	//type_order 	= HTTP.ПолучитьТипЗаказа(Заказ.Ссылка, НЕ ЕстьЗаказ);
	//status	= HTTP.ПолучитьТекстСтатусаЗаказа(Заказ.Ссылка, НЕ ЕстьЗаказ);
	
	Если НЕ СсылкаИнтернетПользователь = Неопределено И НЕ МВЗ = Неопределено Тогда
	// [Severstal] Передавать при оформлении заказа текущий лимит 
	
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ЛимитыОстатки.СуммаОстаток limit
		|ИЗ
		|	РегистрНакопления.Лимиты.Остатки КАК ЛимитыОстатки
		|ГДЕ
		|	ЛимитыОстатки.Инициатор = &Инициатор";
		
		запрос.УстановитьПараметр("Инициатор", СсылкаИнтернетПользователь.ФизЛицо);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Результат.limit = Выборка.limit;
		КонецЕсли;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации("HTTP.Сайт создал новый заказ", УровеньЖурналаРегистрации.Информация, , , "Возврат Гуид: " + Результат.guid);
	
	Возврат Результат;
	
КонецФункции
Функция СформироватьРезерв_Ст(Заказ, ТипЦен, Размещен = Истина)
	
	//ТоварыНаСайт = Новый Массив;
	//Заказ.Товары.Очистить();
	//
	//ВалютаИнтернетПродаж = Константы.ВалютаУправленческогоУчета.Получить();	
	//
	//Запрос = Новый Запрос("
	//|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	Таб.Номенклатура,
	//|	Таб.Склад,
	//|	Таб.Приоритет,
	//|	Таб.Количество,
	//|	Таб.Цена,
	//|	Таб.Акция,
	//|	Таб.ПроцентАвтоматическойСкидки,
	//|	Таб.СтавкаНДС,
	//|	ЕСТЬNULL(Ост.КоличествоОстаток,0) - ЕСТЬNULL(Рез.КоличествоОстаток,0) Остаток,
	//|	ВЫБОР КОГДА 
	//|		(ЕСТЬNULL(Ост.КоличествоОстаток,0) - ЕСТЬNULL(Рез.КоличествоОстаток,0) - Таб.Количество >= 0)
	//|	ТОГДА Истина
	//|	ИНАЧЕ Ложь
	//|	КОНЕЦ МожноСписать
	//|ИЗ
	//|	(
	//|	 	ВЫБРАТЬ
	//|			Раз.Склад,
	//|			Раз.Приоритет + ВЫБОР КОГДА РегРег.регион ЕСТЬ NULL ТОГДА 0 ИНАЧЕ 10 КОНЕЦ Приоритет,
	//|			Док.Номенклатура,
	//|			Док.Количество,
	//|			Док.Цена,
	//|			Док.Акция,
	//|			Док.ПроцентАвтоматическойСкидки,
	//|			Док.СтавкаНДС,
	//|			Док.Ссылка.АдресДоставки.Регион Региондок,
	//|			РегРег.Регион	
	//|		 ИЗ
	//|			Документ.ИнтернетЗаказПокупателя.Товары Док
	//|			
	//|		ЛЕВОЕ СОЕДИНЕНИЕ
	//|			(ВЫБРАТЬ
	//|				Скл.Ссылка					Склад,
	//|				ЕстьNULL(Спр.Дилер, ЛОЖЬ)	Дилер,
	//|				Скл.РозницаДляВсех 			РазрешеноРознице,
	//|				ВЫБОР 	КОГДА ЕстьNULL(Спр.Дилер, ЛОЖЬ)
	//|						ТОГДА Скл.ПриоритетСкладаДилер 
	//|						ИНАЧЕ Скл.ПриоритетСкладаРозничныйПокупатель
	//|				КОНЕЦ 		  Приоритет
	//|			ИЗ
	//|				Справочник.Склады Скл
	//|			ЛЕВОЕ СОЕДИНЕНИЕ
	//|				Справочник.ПользователиИнтернет КАК Спр
	//|			ПО
	//|				Спр.Ссылка = &ПользовательИнтернет
	//|			ГДЕ  
	//|				ВЫБОР 	КОГДА НЕ ЕстьNULL(Спр.Дилер, ЛОЖЬ)
	//|						ТОГДА Скл.ОтгрузкаРозничнымКлиентам 
	//						// Если дилер то только со складов дилеров
	//|						ИНАЧЕ Скл.ОтгрузкаДилерам
	//|				КОНЕЦ
	//|			) Раз
	//|				
	//|			ПО ИСТИНА
	//|				
	//|		ЛЕВОЕ СОЕДИНЕНИЕ
	//|			РегистрСведений.ПривязкаИнтернетРегионовКСкладам РегРег
	//|		ПО
	//|			Док.Ссылка.АдресДоставки.Регион = РегРег.Регион И
	//|			Раз.Склад = РегРег.Склад
	//|			
	//|		ГДЕ 
	//|			Док.Ссылка = &ИнтернетЗаказ
	//				// Если розница тогда только со своего региона или
	//				// если регион не определен то от всех складов которые в питере

	//|			И (
	//|				ЕСТЬNULL(Раз.Дилер, ИСТИНА) ИЛИ  
	//|				ВЫБОР КОГДА РегРег.Склад ЕСТЬ NULL 
	//|					ТОГДА Раз.РазрешеноРознице
	//|					ИНАЧЕ РегРег.Склад = Раз.Склад КОНЕЦ
	//|				)
	//|	) Таб
	//|	
	//|ЛЕВОЕ СОЕДИНЕНИЕ
	//|	РегистрНакопления.ТоварыНаСкладах.Остатки() Ост
	//|ПО Таб.Номенклатура = Ост.Номенклатура И Таб.Склад = Ост.Склад
	//|
	//|ЛЕВОЕ СОЕДИНЕНИЕ
	//|	РегистрНакопления.ТоварыВРезерве.Остатки() Рез
	//|ПО 
	//|	Таб.Номенклатура = Рез.Номенклатура И Таб.Склад = Рез.Размещение
	//|
	//|ДЛЯ ИЗМЕНЕНИЯ 
	//|	РегистрНакопления.ТоварыВРезерве.Остатки, РегистрНакопления.ТоварыНаСкладах.Остатки
	//|
	//|УПОРЯДОЧИТЬ ПО 
	//|	МожноСписать Убыв, Приоритет Убыв, Остаток Убыв
	//|
	//|ИТОГИ 
	//|	МАКСИМУМ(Количество), 
	//|	СУММА(Остаток)
	//|ПО
	//|	Таб.Номенклатура
	//|");
	//	
	//Запрос.УстановитьПараметр("ПользовательИнтернет", Заказ.ПользовательИнтернет);
	//Запрос.УстановитьПараметр("ИнтернетЗаказ", Заказ.Ссылка);

	//РезультатЗапроса = Запрос.Выполнить();
	//Если НЕ РезультатЗапроса.Пустой() Тогда
	//	
	//	
	//	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	//	Пока Выборка.Следующий() Цикл
	//		
	//		Количество		= Выборка.Количество;
	//		
	//		Если Выборка.Остаток - Количество >= 0 Тогда  // если суммарный остаток товара на складах позволяет произвести списание
	//			
	//			ВыборкаСклады = Выборка.Выбрать();
	//			ВыборкаСклады.Следующий();
	//			
	//			Если ВыборкаСклады.МожноСписать Тогда           	// если со склада обладающего высшим приоритетом и наличием товара можно списать искомое количество товара - делаем это!
	//				НоваяСтрока = Заказ.Товары.Добавить();
	//				
	//				НоваяСтрока.Номенклатура 	= Выборка.Номенклатура;
	//			   	НоваяСтрока.Размещение	 	= ВыборкаСклады.Склад;
	//				НоваяСтрока.Количество		= Количество;
	//				НоваяСтрока.Цена            = ВыборкаСклады.Цена;
	//				НоваяСтрока.Акция			= ВыборкаСклады.Акция;
	//				НоваяСтрока.СтавкаНДС		= ВыборкаСклады.СтавкаНДС;
	//				НоваяСтрока.ПроцентАвтоматическойСкидки = ВыборкаСклады.ПроцентАвтоматическойСкидки; 
	//				
	//				// пересчитаем строку
	//				
	//				НоваяСтрока.СуммаБезСкидки = НоваяСтрока.Цена * НоваяСтрока.Количество;
	//				НоваяСтрока.СуммаАвтоматическойСкидки = НоваяСтрока.СуммаБезСкидки * НоваяСтрока.ПроцентАвтоматическойСкидки / 100;
	//				НоваяСтрока.Сумма	 =	НоваяСтрока.СуммаБезСкидки - НоваяСтрока.СуммаАвтоматическойСкидки;

	//				СтавкаНДС = КэшируемыеФункции.ПолучитьЧислоСтавкиНДС(НоваяСтрока.СтавкаНДС);
	//				НоваяСтрока.СуммаНДС	= СтавкаНДС * НоваяСтрока.Сумма / (СтавкаНДС + 100);
	//			
	//			Иначе                      							// если одним складом не обойтись, раскидываем размещение по разным складам
	//				
	//				Треб = Выборка.Количество;
	//						
	//				Пока Треб > 0 Цикл                       
	//					  Если ВыборкаСклады.Остаток > 0 Тогда
	//						НоваяСтрока = Заказ.Товары.Добавить();

	//						НоваяСтрока.Номенклатура 	= Выборка.Номенклатура;
	//					   	НоваяСтрока.Размещение	 	= ВыборкаСклады.Склад;
	//						НоваяСтрока.Цена            = ВыборкаСклады.Цена;
	//						НоваяСтрока.Акция			= ВыборкаСклады.Акция;
	//						НоваяСтрока.СтавкаНДС		= ВыборкаСклады.СтавкаНДС;
	//						НоваяСтрока.ПроцентАвтоматическойСкидки = ВыборкаСклады.ПроцентАвтоматическойСкидки; 

	//						Если Треб - ВыборкаСклады.Остаток > 0 Тогда
	//							НоваяСтрока.Количество	 = ВыборкаСклады.Остаток;
	//							ВыборкаСклады.Следующий();
	//						Иначе
	//							НоваяСтрока.Количество	 = Треб;КонецЕсли;
	//						
	//						// пересчитаем строку
	//						
	//						НоваяСтрока.СуммаБезСкидки = НоваяСтрока.Цена * НоваяСтрока.Количество;
	//						НоваяСтрока.СуммаАвтоматическойСкидки = НоваяСтрока.СуммаБезСкидки * НоваяСтрока.ПроцентАвтоматическойСкидки / 100;
	//						НоваяСтрока.Сумма	 =	НоваяСтрока.СуммаБезСкидки - НоваяСтрока.СуммаАвтоматическойСкидки;

	//						СтавкаНДС = КэшируемыеФункции.ПолучитьЧислоСтавкиНДС(НоваяСтрока.СтавкаНДС);
	//						НоваяСтрока.СуммаНДС	= СтавкаНДС * НоваяСтрока.Сумма / (СтавкаНДС + 100);

	//						Треб = Треб - НоваяСтрока.Количество;
	//					Иначе
	//						ВыборкаСклады.Следующий(); КонецЕсли; КонецЦикла; КонецЕсли;
	//			
	//			ТоварыНаСайт.Добавить(Новый Структура("product_guid, quantity, reserve", 
	//									Выборка.Номенклатура, 
	//									Выборка.Количество,  
	//									Истина));
	//		Иначе
	//			
	//			ВыборкаСклады = Выборка.Выбрать();
	//			ВыборкаСклады.Следующий();
	//			
	//			// когда в заказе товара больше чем на всех складах
	//			
	//			Размещен = Ложь;
	//			
	//			НоваяСтрока = Заказ.Товары.Добавить();
	//			
	//			// в заказе оставляем количество товара в заказе, размещение не указываем
	//  	
	//			НоваяСтрока.Номенклатура 	= Выборка.Номенклатура;
	//			НоваяСтрока.Размещение	 	= Справочники.Склады.ПустаяСсылка();
	//			НоваяСтрока.Количество		= Количество;
	//			НоваяСтрока.Цена            = ВыборкаСклады.Цена;
	//			НоваяСтрока.Акция			= ВыборкаСклады.Акция;
	//			НоваяСтрока.СтавкаНДС		= ВыборкаСклады.СтавкаНДС;
	//			НоваяСтрока.ПроцентАвтоматическойСкидки = ВыборкаСклады.ПроцентАвтоматическойСкидки; 

	//			// пересчитаем строку
	//			
	//			НоваяСтрока.СуммаБезСкидки = НоваяСтрока.Цена * НоваяСтрока.Количество;
	//			НоваяСтрока.СуммаАвтоматическойСкидки = НоваяСтрока.СуммаБезСкидки * НоваяСтрока.ПроцентАвтоматическойСкидки / 100;
	//			НоваяСтрока.Сумма	 =	НоваяСтрока.СуммаБезСкидки - НоваяСтрока.СуммаАвтоматическойСкидки;

	//			СтавкаНДС = КэшируемыеФункции.ПолучитьЧислоСтавкиНДС(НоваяСтрока.СтавкаНДС);
	//			НоваяСтрока.СуммаНДС	= СтавкаНДС * НоваяСтрока.Сумма / (СтавкаНДС + 100);

	//			
	//			ТоварыНаСайт.Добавить(Новый Структура("product_guid, quantity, reserve", 
	//									Выборка.Номенклатура, 
	//									?(Выборка.Остаток >= 0, Выборка.Остаток, 0),
	//									Ложь));КонецЕсли;КонецЦикла;
	//							
	//Иначе
	//	Размещен = Ложь; КонецЕсли; 
	//	
	//Возврат ТоварыНаСайт;
	
КонецФункции
Функция СформироватьРезерв(Заказ, Размещен)
	
	ТоварыНаСайт = Новый Массив;
	Заказ.РазмещениеТоваров.Очистить();
	
	
	//Круглов 12.02.16
	//Остатки блокируем только на основном складе
	//Резервы блокируем по всем складам
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ТоварыНаСкладах");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = Заказ.Товары;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ТоварыВРезерве");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = Заказ.Товары;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
	
	Блокировка.Заблокировать();
	//Круглов 12.02.16
	
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Таб.Номенклатура,
	|	Таб.Размещение,
	|	Таб.Приоритет,
	|	Таб.Количество,
	|	ЕСТЬNULL(Ост.КоличествоОстаток,0) - ЕСТЬNULL(Рез.КоличествоОстаток,0) Остаток,
	|		ВЫБОР КОГДА (ЕСТЬNULL(Ост.КоличествоОстаток,0) - ЕСТЬNULL(Рез.КоличествоОстаток,0) - Таб.Количество >= 0)
	|		ТОГДА Истина ИНАЧЕ Ложь КОНЕЦ МожноСписать
	|ИЗ
	|	(
	|	 	ВЫБРАТЬ
	|			Раз.Размещение,
	|			Раз.Приоритет + ВЫБОР КОГДА РегРег.регион ЕСТЬ NULL ТОГДА 0 ИНАЧЕ 10 КОНЕЦ Приоритет,
	|			Док.Номенклатура,
	|			Док.Количество
	|		 ИЗ
	|			Документ.ИнтернетЗаказПокупателя.Товары Док
	|			
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			(ВЫБРАТЬ
	|				Скл.Ссылка					Размещение,
	|				ЕстьNULL(Спр.Дилер, ЛОЖЬ)	Дилер,
	|				Скл.РозницаДляВсех 			РазрешеноРознице,
	|				ВЫБОР 	КОГДА ЕстьNULL(Спр.Дилер, ЛОЖЬ)
	|						ТОГДА Скл.ПриоритетСкладаДилер 
	|						ИНАЧЕ Скл.ПриоритетСкладаРозничныйПокупатель
	|				КОНЕЦ 		  Приоритет
	|			ИЗ
	|				Справочник.Склады Скл
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПользователиИнтернет КАК Спр
	|			ПО	Спр.Ссылка = &ПользовательИнтернет
	|
	|			ГДЕ ВЫБОР КОГДА НЕ ЕстьNULL(Спр.Дилер, ЛОЖЬ) ТОГДА Скл.ОтгрузкаРозничнымКлиентам 
							// Если дилер то только со складов дилеров
	|					ИНАЧЕ Скл.ОтгрузкаДилерам КОНЕЦ
	|			) Раз
	|				
	|		ПО ИСТИНА
	|				
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.ПривязкаИнтернетРегионовКСкладам РегРег
	|		ПО
	|			Док.Ссылка.АдресДоставки.Регион = РегРег.Регион И
	|			Раз.Размещение = РегРег.Склад
	|			
	|		ГДЕ 
	|			Док.Ссылка = &ИнтернетЗаказ
					// Если розница тогда только со своего региона или
					// если регион не определен то от всех складов которые в питере
	|			И (
	|				ЕСТЬNULL(Раз.Дилер, ИСТИНА) ИЛИ  
	|				ВЫБОР КОГДА РегРег.Склад ЕСТЬ NULL 
	|					ТОГДА Раз.РазрешеноРознице
	|					ИНАЧЕ РегРег.Склад = Раз.Размещение КОНЕЦ
	|				)
	|	) Таб
	|	
	|ЛЕВОЕ СОЕДИНЕНИЕ	РегистрНакопления.ТоварыНаСкладах.Остатки() Ост
	|ПО 				Таб.Номенклатура = Ост.Номенклатура И 
	|					Таб.Размещение = Ост.Склад
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ	РегистрНакопления.ТоварыВРезерве.Остатки() Рез
	|ПО 				Таб.Номенклатура = Рез.Номенклатура И 
	|					Таб.Размещение = Рез.Размещение
	|
	//|ДЛЯ ИЗМЕНЕНИЯ 
	//|	РегистрНакопления.ТоварыВРезерве.Остатки, 
	//|	РегистрНакопления.ТоварыНаСкладах.Остатки
	|
	|УПОРЯДОЧИТЬ ПО 
	|	МожноСписать Убыв, Приоритет Убыв, Остаток Убыв
	|
	|ИТОГИ 
	|	МАКСИМУМ(Количество), 
	|	СУММА(Остаток)
	|ПО
	|	Таб.Номенклатура
	|");
		
	Запрос.УстановитьПараметр("ПользовательИнтернет", 	Заказ.ПользовательИнтернет);
	Запрос.УстановитьПараметр("ИнтернетЗаказ", 			Заказ.Ссылка);

	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		Пока Выборка.Следующий() Цикл
			
			Количество = Выборка.Количество;
			
			Если Выборка.Остаток - Количество >= 0 Тогда  // если суммарный остаток товара на складах позволяет произвести списание
				
				ВыборкаСклады = Выборка.Выбрать();
				ВыборкаСклады.Следующий();
				special_shipping_time = 0;
				
				Если ВыборкаСклады.МожноСписать Тогда           	// если со склада обладающего высшим приоритетом и наличием товара можно списать искомое количество товара - делаем это!
					
					НоваяСтрока = Заказ.РазмещениеТоваров.Добавить();
					
					НоваяСтрока.Номенклатура 	= Выборка.Номенклатура;
				   	НоваяСтрока.Размещение	 	= ВыборкаСклады.Размещение;
					НоваяСтрока.Количество		= Количество;
					special_shipping_time = ?(НоваяСтрока.Размещение = Заказ.Склад, 2, 5);
				Иначе                      							// если одним складом не обойтись, раскидываем размещение по разным складам
					
					Треб = Выборка.Количество;
							
					Пока Треб > 0 Цикл                       
						  Если ВыборкаСклады.Остаток > 0 Тогда
							  
							НоваяСтрока = Заказ.РазмещениеТоваров.Добавить();

							НоваяСтрока.Номенклатура 	= Выборка.Номенклатура;
						   	НоваяСтрока.Размещение	 	= ВыборкаСклады.Размещение;
							вр_special_shipping_time = ?(НоваяСтрока.Размещение = Заказ.Склад, 2, 5);
							special_shipping_time = Макс(вр_special_shipping_time, вр_special_shipping_time);  
							
							Если Треб - ВыборкаСклады.Остаток > 0 Тогда
									НоваяСтрока.Количество	 = ВыборкаСклады.Остаток;
									ВыборкаСклады.Следующий();
							Иначе	НоваяСтрока.Количество	 = Треб;КонецЕсли;
							
							// пересчитаем строку
							
							Треб = Треб - НоваяСтрока.Количество;
							
						Иначе
							
							ВыборкаСклады.Следующий(); КонецЕсли; КонецЦикла; КонецЕсли;
				
				ТоварыНаСайт.Добавить(Новый Структура("product_guid, quantity, reserve, special_shipping_time", 
										Выборка.Номенклатура, 
										Выборка.Количество,  
										Истина,
										special_shipping_time));
			Иначе
				
				ВыборкаСклады = Выборка.Выбрать();
				ВыборкаСклады.Следующий();
				
				// когда в заказе товара больше чем на всех складах
				
				Размещен = Ложь;
				special_shipping_time = 30;
				
  		        //belova 10.08.2016 { убираю эту строку, теперь всегда quantity равно количеству в заказе, а не только для ИПР
				//ЭтоПользовательИПР = Заказ.ПользовательИнтернет.ФизЛицо <> Справочники.ФизическиеЛица.ПустаяСсылка(); // для ИПР всегда возвращаем quantity равное количеству в заказе.
				// } belova 10.08.2016
				   
				// в заказе оставляем количество товара в заказе, размещение не указываем

				ТоварыНаСайт.Добавить(Новый Структура("product_guid, quantity, reserve, special_shipping_time", 
										Выборка.Номенклатура, 
										//belova 10.08.2016 { убираю эту строку, теперь всегда quantity равно количеству в заказе, а не только для ИПР
										//?(ЭтоПользовательИПР, Выборка.Количество, ?(Выборка.Остаток >= 0, Выборка.Остаток, 0)),
										// } belova 10.08.2016
								        Выборка.Количество,
										Ложь,
										special_shipping_time));КонецЕсли; КонецЦикла;
	Иначе
		Размещен = Ложь; КонецЕсли; 
		
	Возврат ТоварыНаСайт;
	
КонецФункции

Функция СоздатьЗапросНаУточнениеОстатка(requestJson, стрОшибки = "") Экспорт
	
	лЗапрос = ?(ТипЗнч(requestJson) = Тип("Строка"), w1_Json.UnJSON(requestJson), requestJson);
	
	//{product_guid,user_guid,id,phone,email,name}
	
	Заявка = Документы.ИнтернетЗапросНаУточнениеОстатка.СоздатьДокумент();
	Заявка.Дата = ТекущаяДата();
	
	СсылкаИнтернетПользователь = ?(лЗапрос.Свойство("user_guid"), HTTP.ПолучитьОбъектПоСсылке(Справочники.ПользователиИнтернет, лЗапрос.user_guid, стрОшибки), Неопределено);
	СсылкаТовар = ?(лЗапрос.Свойство("product_guid"), HTTP.ПолучитьОбъектПоСсылке(Справочники.Номенклатура, лЗапрос.product_guid, стрОшибки), Неопределено);
	
	Заявка.Пользователь = СсылкаИнтернетПользователь;
	Заявка.Товар		= СсылкаТовар;
	
	лЗапрос.Свойство("id"		, Заявка.id);
	лЗапрос.Свойство("name"		, Заявка.ИмяПользователя);
	лЗапрос.Свойство("email"	, Заявка.Почта);
	лЗапрос.Свойство("phone"	, Заявка.Телефон);
	лЗапрос.Свойство("region"	, Заявка.Регион);
	Если лЗапрос.Свойство("type") Тогда Заявка.Тип = Перечисления.ТипыЗапросовНаУточнениеТоваров.Получить(лЗапрос.type) КонецЕсли;
		
	Заявка.ДополнительныеСвойства.Вставить("Обновление", Ложь); // сайт не пинать
	Заявка.УстановитьНовыйНомер();
	Заявка.ОбменДанными.Загрузка = Истина;
 	Попытка
		Заявка.Записать();
	Исключение
		стрОшибки = ОписаниеОшибки();
		стрОшибки = "Ошибка при записи интернет запроса" + Символы.ПС + стрОшибки;
		ЗаписьЖурналаРегистрации("API2.check_available", УровеньЖурналаРегистрации.Ошибка, , , стрОшибки);
		Возврат "";
	КонецПопытки;
	
	Результат = Новый Структура("id", Заявка.id);
	
	Возврат w1_Json.JSON(Результат, Истина);
КонецФункции

#КонецОбласти

#Область Получение_Данных_Базы

Функция ПолучитьНовыйЭкземплярЗначения(Знач Значение)
	
	Возврат Значение;
	
КонецФункции
Функция ПолучитьМассивЗначенийИзТаблицы(Таблица, СтруктураПоиска, ПоляКолонок)
	
	массив = Новый Массив;
	
	Строки = Таблица.НайтиСтроки(СтруктураПоиска);
	Для Каждого Строка Из Строки Цикл НовЭлемент = Новый Структура(ПоляКолонок); ЗаполнитьЗначенияСвойств(НовЭлемент, Строка); массив.Добавить(НовЭлемент); КонецЦикла;

	Возврат массив;
	
КонецФункции

Процедура УстановитьИндексыТаблицам(ИмяПолей, Табл1, 
	Табл2 = Неопределено, 
	Табл3 = Неопределено, 
	Табл4 = Неопределено, 
	Табл5 = Неопределено, 
	Табл6 = Неопределено, 
	Табл7 = Неопределено, 
	Табл8 = Неопределено, 
	Табл9 = Неопределено, 
	Табл10 = Неопределено, 
	Табл11 = Неопределено,
	Табл12 = Неопределено,
	Табл13 = Неопределено)
	
	Табл1.Индексы.Добавить(ИмяПолей);
	Если Табл2 <> Неопределено Тогда Табл2.Индексы.Добавить(ИмяПолей) КонецЕсли;
	Если Табл3 <> Неопределено Тогда Табл3.Индексы.Добавить(ИмяПолей) КонецЕсли;
	Если Табл4 <> Неопределено Тогда Табл4.Индексы.Добавить(ИмяПолей) КонецЕсли;
	Если Табл5 <> Неопределено Тогда Табл5.Индексы.Добавить(ИмяПолей) КонецЕсли;
	Если Табл6 <> Неопределено Тогда Табл6.Индексы.Добавить(ИмяПолей) КонецЕсли;
	Если Табл7 <> Неопределено Тогда Табл7.Индексы.Добавить(ИмяПолей) КонецЕсли;
	Если Табл8 <> Неопределено Тогда Табл8.Индексы.Добавить(ИмяПолей) КонецЕсли;
	Если Табл9 <> Неопределено Тогда Табл9.Индексы.Добавить(ИмяПолей) КонецЕсли;
	Если Табл10 <> Неопределено Тогда Табл10.Индексы.Добавить(ИмяПолей) КонецЕсли;
	Если Табл11 <> Неопределено Тогда Табл11.Индексы.Добавить(ИмяПолей) КонецЕсли;
	Если Табл12 <> Неопределено Тогда Табл11.Индексы.Добавить(ИмяПолей) КонецЕсли;
	Если Табл13 <> Неопределено Тогда Табл11.Индексы.Добавить(ИмяПолей) КонецЕсли;
	
КонецПроцедуры
Функция ПолучитьПоляДляСтруктуры(ИмяПоляПоиска, Колонки)
	
	Структура = КонвертацияТипов.ПолучитьПустуюСтруктуруИзКолонокТаблицыЗначений(Колонки); 
	Структура.Удалить(ИмяПоляПоиска);
	Возврат КонвертацияТипов.ПолучитьСтрокуИзМассива(КонвертацияТипов.ПолучитьМассивИзКлючейСтруктуры(Структура));
	
КонецФункции

Функция ПолучитьМассивСвойствПоФорматAPI(ТаблицаСвойств)
	
	новМассив = Новый Массив;
	Для Каждого Строка ИЗ ТаблицаСвойств Цикл новМассив.Добавить(Новый Структура("guid, value", Строка.Свойство, СокрЛП(Строка.Значение))); КонецЦикла;
	
	Возврат новМассив;
	
КонецФункции
Функция ПолучитьМассивМенюПоФорматAPI(ТаблицаСвойств)
	
	новМассив = Новый Массив;
	Для Каждого Строка ИЗ ТаблицаСвойств Цикл новМассив.Добавить(Новый Структура("guid, parent_guid, link_title, link_text, sort_weight", Строка.Меню, Строка.Родитель, Строка.Наименование, Строка.Текст, Строка.Вес)) КонецЦикла;
	
	Возврат новМассив;
	
КонецФункции

Функция ПолучитьКартинку(Параметры, стрОшибки = "") Экспорт
	
	Ссылка 		= ?(Параметры.Свойство("Ссылка"), 		Параметры.Ссылка,		Неопределено);
	guid_image 	= ?(Параметры.Свойство("guid_image"), 	Параметры.guid_image, 	Неопределено);
	
	массивСсылок = Новый Массив;
	Если НЕ Ссылка = Неопределено Тогда
		массивСсылок.Добавить(Ссылка);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(guid_image) Тогда
		Если ТипЗнч(guid_image) = Тип("Массив") Тогда
			Для каждого гуид Из guid_image Цикл
				массивСсылок.Добавить(HTTP.ПолучитьОбъектПоСсылке(Справочники.КартинкиНоменклатуры, гуид, стрОшибки));
			КонецЦикла;
		ИначеЕсли ТипЗнч(guid_image) = Тип("Строка") Тогда
			массивСсылок.Добавить(HTTP.ПолучитьОбъектПоСсылке(Справочники.КартинкиНоменклатуры, guid_image, стрОшибки));
		КонецЕсли;
	КонецЕсли;
	
	лКартинки = Новый Массив;
	
	Для каждого Ссылка Из массивСсылок Цикл
		Структура 	= Новый Структура("guid, extension, body, alt, title, last_updated", XMLСтрока(Ссылка), "", "", Ссылка.Наименование, Ссылка.Наименование, Ссылка.ДатаИзменения);
	
		//desh.avdonin {{27.06.2014#
		Если ЗначениеЗаполнено(Ссылка.КопияКартинки) Тогда
			Картинка = Ссылка.КопияКартинки.Картинка.Получить();
		Иначе
			Картинка = Ссылка.Картинка.Получить();
		КонецЕсли;
		Если Картинка = Неопределено Тогда
			// тогда возможно картинка в аватаре
			Если ЗначениеЗаполнено(Ссылка.КопияКартинки) Тогда
				Картинка = Ссылка.КопияКартинки.Аватар.Получить();
			Иначе
				Картинка = Ссылка.Аватар.Получить();
			КонецЕсли;
		КонецЕсли;
		//}}desh.avdonin
		
		Если Картинка <> Неопределено Тогда
			Структура.extension = НРег(Строка(Картинка.Формат()));
			Структура.body 		= Картинка; 
		КонецЕсли;
		
		лКартинки.Добавить(Структура);
	КонецЦикла;
	
	Возврат ЗначениеВозврата(лКартинки);
КонецФункции

Функция ПолучитьКартинки(Параметры, стрОшибки = "") Экспорт
	
	guids 			= ?(Параметры.Свойство("guids")				, Параметры.guids, 	Неопределено);
	changesFromDate = ?(Параметры.Свойство("changesFromDate")	, Параметры.changesFromDate, 	Неопределено);
	
	массивСсылок = Новый Массив;
	
	Если ЗначениеЗаполнено(guids) Тогда
		Если ТипЗнч(guids) = Тип("Массив") Тогда
			Для каждого гуид Из guids Цикл
				массивСсылок.Добавить(HTTP.ПолучитьОбъектПоСсылке(Справочники.Картинки, гуид, стрОшибки));
			КонецЦикла;
		ИначеЕсли ТипЗнч(guids) = Тип("Строка") Тогда
			массивСсылок.Добавить(HTTP.ПолучитьОбъектПоСсылке(Справочники.Картинки, guids, стрОшибки));
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Спр.Ссылка		guid,
	|	Спр.Картинка	file,
	|	Спр.Расширение	extension
	|ИЗ 		
	|	Справочник.Картинки КАК Спр
	|ГДЕ
	|	Ссылка В(&массивСсылок)
	|" + ?(НЕ ЗначениеЗаполнено(changesFromDate), "", "	ИЛИ Спр.ДатаИзменения >= &changesFromDate") + "
	|";
	
	Запрос.УстановитьПараметр("массивСсылок", массивСсылок);
	Если ЗначениеЗаполнено(changesFromDate) Тогда
		Запрос.УстановитьПараметр("changesFromDate", Дата(changesFromDate));
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	лФайлы = Новый Массив;
	Пока Выборка.Следующий() Цикл
		Структура 	= Новый Структура("guid, extension, body", 
			XMLСтрока(Выборка.guid), 
			НРег(Выборка.extension), 
			?(ЗначениеЗаполнено(Выборка.file), Выборка.file.Получить(), Неопределено));
		
		лФайлы.Добавить(Структура);
	КонецЦикла;
	
	Возврат ЗначениеВозврата(лФайлы);
КонецФункции
Функция ПолучитьФайлЗаказа_ст(Параметры, стрОшибки = "") Экспорт   //пока комент
//	
//	guids 			= ?(Параметры.Свойство("guids")				, Параметры.guids, 	Неопределено);
//	changesFromDate = ?(Параметры.Свойство("changesFromDate")	, Параметры.changesFromDate, 	Неопределено);
//	
//	массивСсылок = Новый Массив;
//	
//	Если ЗначениеЗаполнено(guids) Тогда
//		Если ТипЗнч(guids) = Тип("Массив") Тогда
//			Для каждого гуид Из guids Цикл
//				массивСсылок.Добавить(HTTP.ПолучитьОбъектПоСсылке(Справочники.ХранилищеФайловЗаказов, гуид, стрОшибки));
//			КонецЦикла;
//		ИначеЕсли ТипЗнч(guids) = Тип("Строка") Тогда
//			массивСсылок.Добавить(HTTP.ПолучитьОбъектПоСсылке(Справочники.ХранилищеФайловЗаказов, guids, стрОшибки));
//		КонецЕсли;
//	КонецЕсли;
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = "
//	|ВЫБРАТЬ
//	|	Спр.Ссылка		 guid,
//	|	Спр.Хранилище  	 file,
//	|	Спр.Расширение	 extension,
//	|	Спр.Наименование title,
//	|	ВЫБОР КОГДА Спр.id = """" ТОГДА Неопределено ИНАЧЕ Спр.id КОНЕЦ КАК id
//	|ИЗ 		
//	|	Справочник.ХранилищеФайловЗаказов КАК Спр
//	|ГДЕ
//	|	Ссылка В(&массивСсылок)
//	|" + ?(НЕ ЗначениеЗаполнено(changesFromDate), "", "	ИЛИ Спр.ДатаИзменения >= &changesFromDate") + "
//	|";
//	
//	Запрос.УстановитьПараметр("массивСсылок", массивСсылок);
//	Если ЗначениеЗаполнено(changesFromDate) Тогда
//		Запрос.УстановитьПараметр("changesFromDate", Дата(changesFromDate));
//	КонецЕсли;
//	
//	Выборка = Запрос.Выполнить().Выбрать();
//	
//	лФайлы = Новый Массив;
//	Пока Выборка.Следующий() Цикл
//		Структура 	= Новый Структура("guid, extension, body, title,id", 
//			XMLСтрока(Выборка.guid), 
//			НРег(Выборка.extension), 
//			?(ЗначениеЗаполнено(Выборка.file), Выборка.file.Получить(), Неопределено),
//			?(ЗначениеЗаполнено(Выборка.title), Выборка.title, ""),
//			Выборка.id);
//		
//		лФайлы.Добавить(Структура);
//	КонецЦикла;
//	
//	Возврат ЗначениеВозврата(лФайлы);

КонецФункции

Функция ПолучитьДокументы(Параметры, стрОшибки = "") Экспорт
	
	guids 			= ?(Параметры.Свойство("guids")				, Параметры.guids, 	Неопределено);
	changesFromDate = ?(Параметры.Свойство("changesFromDate")	, Параметры.changesFromDate, 	Неопределено);
	
	массивСсылок = Новый Массив;
	
	Если ЗначениеЗаполнено(guids) Тогда
		Если ТипЗнч(guids) = Тип("Массив") Тогда
			Для каждого гуид Из guids Цикл
				массивСсылок.Добавить(HTTP.ПолучитьОбъектПоСсылке(Справочники.ИнструкцииНоменклатуры, гуид, стрОшибки));
			КонецЦикла;
		ИначеЕсли ТипЗнч(guids) = Тип("Строка") Тогда
			массивСсылок.Добавить(HTTP.ПолучитьОбъектПоСсылке(Справочники.ИнструкцииНоменклатуры, guids, стрОшибки));
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Спр.Ссылка		guid,
	|	Спр.Файл		file,
	|	Спр.Расширение	extension
	|ИЗ 		
	|	Справочник.ИнструкцииНоменклатуры КАК Спр
	|
	|" + ?(ЗначениеЗаполнено(guids), "ГДЕ Ссылка В(&массивСсылок)", "") + "
	|" + ?(НЕ ЗначениеЗаполнено(changesFromDate), "", ?(ЗначениеЗаполнено(guids), "	ИЛИ ", " ГДЕ ") + "Спр.ДатаИзменения >= &changesFromDate") + "
	|";
	
	Запрос.УстановитьПараметр("массивСсылок", массивСсылок);
	Если ЗначениеЗаполнено(changesFromDate) Тогда
		Запрос.УстановитьПараметр("changesFromDate", Дата(changesFromDate));
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	лФайлы = Новый Массив;
	Пока Выборка.Следующий() Цикл
		Структура 	= Новый Структура("guid, extension, body", 
			XMLСтрока(Выборка.guid), 
			НРег(Выборка.extension), 
			?(ЗначениеЗаполнено(Выборка.file), Выборка.file.Получить(), Неопределено));
		
		лФайлы.Добавить(Структура);
	КонецЦикла;
	
	Возврат ЗначениеВозврата(лФайлы);
КонецФункции

Функция ПолучитьКатегорииСтатьи(Параметры, стрОшибки = "") Экспорт
	
	// Возвращает массив категорий, если в массив состоит из 1 элемента тогда возвращается элемент массиа (структура)
	
	// Получим параметры
	
	СсылкаКатегории 		= ?(Параметры.Свойство("Ссылка"), 					Параметры.Ссылка, 				Неопределено);
	guid_article_category	= ?(Параметры.Свойство("guid_article_category"),	Параметры.guid_article_category,Неопределено);
	БратьДопТаблицыОтсюда 	= ?(Параметры.Свойство("БратьДопТаблицыОтсюда"), 	Параметры.БратьДопТаблицыОтсюда,Неопределено);
	
	Если Параметры.Свойство("guids") И Не Параметры.Свойство("Ссылка") Тогда
		СсылкаКатегории = HTTP.ПолучитьОбъектПоСсылке(Справочники.ИнтернетСтатьи, Параметры.guids, стрОшибки); 
		Если СсылкаКатегории = Неопределено Тогда 
			стрОшибки = "";
			СсылкаКатегории = HTTP.ПолучитьОбъектПоСсылке(Справочники.ИнтернетКонтакты, Параметры.guids, стрОшибки);  КонецЕсли;
	КонецЕсли;

	
	// Получим ссылку
	
	массивСсылок = Новый Массив;
	
	Если ЗначениеЗаполнено(guid_article_category) Тогда
		
		Если ТипЗнч(guid_article_category) = Тип("Массив") Тогда
			Для каждого guidТовара Из guid_article_category Цикл
				ссылкаНаСтатью = Неопределено;
				Если ссылкаНаСтатью = Неопределено Тогда ссылкаНаСтатью = HTTP.ПолучитьОбъектПоСсылке(Справочники.ИнтернетСтатьи, guidТовара, стрОшибки) КонецЕсли;
				Если ссылкаНаСтатью = Неопределено Тогда ссылкаНаСтатью = HTTP.ПолучитьОбъектПоСсылке(Справочники.ИнтернетКонтакты, guidТовара, стрОшибки) КонецЕсли;
				
				массивСсылок.Добавить(ссылкаНаСтатью);
			КонецЦикла;
		Иначе
			СсылкаКатегории = HTTP.ПолучитьОбъектПоСсылке(Справочники.ИнтернетСтатьи, guid_article_category, стрОшибки); 
			Если СсылкаКатегории = Неопределено Тогда СсылкаКатегории = HTTP.ПолучитьОбъектПоСсылке(Справочники.ИнтернетКонтакты, guid_article_category, стрОшибки);  КонецЕсли;
			Если СсылкаКатегории = Неопределено Тогда Возврат "" КонецЕсли;
			
			Если Не СсылкаКатегории.ЭтоГруппа Тогда
				стрОшибки = "Гуид родительской категории относится к статье.
				|Гуид: " + guid_article_category + "
				|Статья: " + Строка(СсылкаКатегории); 
				Возврат Неопределено; 
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ СсылкаКатегории = Неопределено Тогда
		ДопФильтр = "И Ссылка = &Ссылка" 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(массивСсылок) Тогда
		ДопФильтр = "И Ссылка В (&МассивСсылок)" 
	КонецЕсли;
	
	Если СсылкаКатегории = Неопределено И НЕ ЗначениеЗаполнено(массивСсылок) Тогда
		ДопФильтр = "И ЭтоГруппа И НЕ ПометкаУдаления";
	КонецЕсли;
		
#Область Текст_запроса
	
	Запрос = Новый Запрос("
	
	// Категории
	
	|ВЫБРАТЬ
	|	Спр.Ссылка				guid,
	|	Спр.h1,
	|	Спр.Наименование 		title,
	|	Спр.alies 				alias,
	|	КраткоеСодержание		description,
	|	Спр.meta_description,
	|	Спр.meta_keywords,
	|	Неопределено 			full_url, 
	|	link_text,
	|	title_for_link			link_title,
	//|	Неопределено			menu_items,
	|	Картинка				image,
	|	Родитель				category,
	|	ВЫБОР КОГДА Родитель = Значение(Справочник.ИнтернетСтатьи.ПустаяСсылка) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК root,
	|	Неопределено			categories,
	|	ВЫБОР КОГДА ЭтоНовости ТОГДА ""news"" ИНАЧЕ ""article"" КОНЕЦ КАК type,
	|
	|	Спр.ПометкаУдаления,
	|	Спр.ВыгружатьНаСайт
	|ИЗ 		
	|	Справочник.ИнтернетСтатьи КАК Спр
	|ГДЕ ВыгружатьНаСайт " + ДопФильтр + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Спр.Ссылка				guid,
	|	Спр.Наименование		h1,
	|	Спр.title		 		title,
	|	Спр.alies 				alias,
	|	Спр.Адрес				description,
	|	Спр.meta_description,
	|	Спр.meta_keywords,
	|	Неопределено 			full_url, 
	|	Спр.Наименование		link_text,
	|	Спр.Наименование		link_title,
	|	Неопределено			image,
	|	Родитель				category,
	|	ВЫБОР КОГДА Родитель = Значение(Справочник.ИнтернетКонтакты.ПустаяСсылка) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК root,
	|	Неопределено			categories,
	|	""contact""				type,
	|
	|	Спр.ПометкаУдаления,
	|	Спр.ВыгружатьНаСайт
	|ИЗ 		
	|	Справочник.ИнтернетКонтакты КАК Спр
	|ГДЕ ВыгружатьНаСайт " + ДопФильтр + "
	|;
	
	// Доп родители
	
	|ВЫБРАТЬ
	|	Ссылка 					Категория,
	|	Родитель				category_guid,
	|	Родитель.link_text 			link_title,
	|	Родитель.title_for_link		link_text
	|ИЗ
	|	Справочник.ИнтернетСтатьи.ДополнительныеРодители
	|ГДЕ
	|	Ссылка В(ВЫБРАТЬ Ссылка ИЗ Справочник.ИнтернетСтатьи ГДЕ ВыгружатьНаСайт " + ДопФильтр + ")
	|;
	
	
	|ВЫБРАТЬ 
	|	Объект Категория, 
	|	Меню																				guid,
	|	Родитель																			parent_guid, 
	|	ВЫБОР КОГДА Наименование = """" ТОГДА Меню.Наименование ИНАЧЕ Наименование КОНЕЦ 	link_title,
	|	ВЫБОР КОГДА ВЫРАЗИТЬ(Текст КАК СТРОКА(1)) = """" ТОГДА Меню.Текст ИНАЧЕ Текст КОНЕЦ link_text,
	|	ВЫБОР КОГДА Вес = 0 ТОГДА Меню.Вес ИНАЧЕ Вес КОНЕЦ 									sort_weight
	|ИЗ 
	|	РегистрСведений.ЧастныеСвойстваМенюОбъекта
	|ГДЕ 	
	|	Объект ССЫЛКА Справочник.ИнтернетСтатьи И
	|	Объект В(ВЫБРАТЬ Ссылка ИЗ Справочник.ИнтернетСтатьи ГДЕ ВыгружатьНаСайт " + ДопФильтр + ")
	|");
	
	Если СсылкаКатегории <> Неопределено Тогда
		Запрос.УстановитьПараметр("Ссылка", СсылкаКатегории) КонецЕсли;
	
	Если ЗначениеЗаполнено(массивСсылок) Тогда
		Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	КонецЕсли;
	
#КонецОбласти
	
	Пакеты 		= Запрос.ВыполнитьПакет();
	Категории 	= Новый Массив;
	Таблица		= Пакеты[0].Выгрузить(); ПослИнд = Таблица.Количество() - 1;
	Родители	= Пакеты[1].Выгрузить(); ПоляРодителей = ПолучитьПоляДляСтруктуры("Категория", Родители.Колонки);
	Меню		= Пакеты[2].Выгрузить(); ПоляМеню = ПолучитьПоляДляСтруктуры("Категория", Меню.Колонки);
	
	УстановитьИндексыТаблицам("Категория", Родители, Меню);
	
	Для Инд = 0 По ПослИнд Цикл
		
		// Получим категорию
		
		структураКатегория 	= КонвертацияТипов.ПолучитьСтруктуруИзСТрокиТаблицыЗначений(Таблица, Инд);
		Отбор				= Новый Структура("Категория", структураКатегория.guid);
		
		// Добавим родителей
		
		Если Не структураКатегория.category.Пустая() Тогда
			мРодителей = ПолучитьМассивЗначенийИзТаблицы(Родители, Отбор, ПоляРодителей);
			Если структураКатегория.type = "contact" Тогда
				мРодителей.Вставить(0, Новый Структура("category_guid, link_title, link_text", структураКатегория.category, структураКатегория.category.Наименование, структураКатегория.category.Наименование));
			Иначе
				мРодителей.Вставить(0, Новый Структура("category_guid, link_title, link_text", структураКатегория.category, структураКатегория.category.title_for_link, структураКатегория.category.link_text));
		    КонецЕсли;
			структураКатегория.categories = мРодителей; 
		КонецЕсли;
		структураКатегория.Удалить("category");
		
		// Картинки
		
		Если НЕ структураКатегория.image = Неопределено Тогда
			структураКатегория.image = структураКатегория.image.Получить();
		КонецЕсли;
		
		// Добавим меню
		
		//структураКатегория.menu_items = ПолучитьМассивЗначенийИзТаблицы(Меню, Отбор, ПоляМеню);
		
		// Запомним
		
		Категории.Добавить(структураКатегория); КонецЦикла;
	
	Возврат ЗначениеВозврата(Категории);
	
КонецФункции
Функция ПолучитьСтатьи(Параметры, стрОшибки = "") Экспорт
	
	// Возвращает массив статей, если массив состоит из 1 элемента тогда возвращается элемент массиа (структура)
	
	// Получим параметры
	
	СсылкаСтатьи 			= ?(Параметры.Свойство("Ссылка"), 					Параметры.Ссылка, 				Неопределено);
	guid_article			= ?(Параметры.Свойство("guid_article"),				Параметры.guid_article,			Неопределено);
	guid_article_category	= ?(Параметры.Свойство("guid_article_category"),	Параметры.guid_article_category,Неопределено);
	БратьДопТаблицыОтсюда 	= ?(Параметры.Свойство("БратьДопТаблицыОтсюда"), 	Параметры.БратьДопТаблицыОтсюда,Неопределено);
	
	// Получим родителя
	
	массивСсылок = Новый Массив;
	
	Если ЗначениеЗаполнено(guid_article_category) Тогда
		
		СсылкаРодитель = HTTP.ПолучитьОбъектПоСсылке(Справочники.ИнтернетСтатьи, guid_article_category, стрОшибки); 
		Если СсылкаРодитель = Неопределено Тогда 
			стрОшибки = "";
			СсылкаРодитель = HTTP.ПолучитьОбъектПоСсылке(Справочники.ИнтернетКонтакты, guid_article_category, стрОшибки);  КонецЕсли;
		Если СсылкаРодитель = Неопределено Тогда Возврат "" КонецЕсли;
		
		Если Не СсылкаРодитель.ЭтоГруппа Тогда
			стрОшибки = "Гуид родительской категории относится к статье.
			|Гуид: " + guid_article_category + "
			|Статья: " + Строка(СсылкаРодитель); Возврат Неопределено; КонецЕсли; КонецЕсли;
	
	Если ЗначениеЗаполнено(guid_article) Тогда
		
		Если ТипЗнч(guid_article) = Тип("Массив") Тогда
			Для каждого guidТовара Из guid_article Цикл
				ссылкаНаСтатью = Неопределено;
				Если ссылкаНаСтатью = Неопределено Тогда ссылкаНаСтатью = HTTP.ПолучитьОбъектПоСсылке(Справочники.ИнтернетСтатьи, guidТовара, стрОшибки) КонецЕсли;
				Если ссылкаНаСтатью = Неопределено Тогда ссылкаНаСтатью = HTTP.ПолучитьОбъектПоСсылке(Справочники.ИнтернетКонтакты, guidТовара, стрОшибки) КонецЕсли;
				
				массивСсылок.Добавить(ссылкаНаСтатью);
			КонецЦикла;
		Иначе
			СсылкаСтатьи = HTTP.ПолучитьОбъектПоСсылке(Справочники.ИнтернетСтатьи, guid_article, стрОшибки); 
			Если СсылкаСтатьи = Неопределено Тогда СсылкаСтатьи = HTTP.ПолучитьОбъектПоСсылке(Справочники.ИнтернетКонтакты, guid_article, стрОшибки);  КонецЕсли;
			Если СсылкаСтатьи = Неопределено Тогда Возврат "" КонецЕсли;
			
			Если СсылкаСтатьи.ЭтоГруппа Тогда
				стрОшибки = "Гуид статьи относится к категории стати.
				|Гуид: " + guid_article + "
				|Статья: " + Строка(СсылкаСтатьи); Возврат Неопределено; КонецЕсли; КонецЕсли;
		КонецЕсли;
		
	Если СсылкаСтатьи = Неопределено И НЕ ЗначениеЗаполнено(массивСсылок) Тогда
	
		ДопФильтр = "НЕ ЭтоГруппа И НЕ ПометкаУдаления И ВыгружатьНаСайт";
		ДопФильтр = ДопФильтр + ?(ЗначениеЗаполнено(СсылкаРодитель)," 	И Родитель = &Родитель ", "");
		
	ИначеЕсли ЗначениеЗаполнено(массивСсылок) Тогда
		ДопФильтр = "Ссылка В (&МассивСсылок)" 
	Иначе
		ДопФильтр = "Ссылка = &Ссылка" КонецЕсли;

#Область Текст_запроса
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Спр.Ссылка КАК guid,
	                      |	Спр.h1,
	                      |	Спр.alies КАК alias,
	                      |	Спр.Наименование КАК title,
	                      |	Спр.КраткоеСодержание КАК description,
	                      |	Спр.КраткоеСодержание КАК short_text,
	                      |	Спр.ТекстСтатьи КАК long_text,
	                      |	Спр.ДатаСтатьи КАК data_created,
	                      |	0 КАК sorting_weight,
	                      |	Спр.meta_description,
	                      |	Спр.meta_keywords,
	                      |	Спр.Родитель КАК category,
	                      |	НЕОПРЕДЕЛЕНО КАК categories,
						  |	НЕОПРЕДЕЛЕНО КАК product_guids,
						//  |	НЕОПРЕДЕЛЕНО КАК product_category_guids,
	                      |	Спр.Картинка КАК image,
	                      |	Спр.Родитель.ЭтоНовости КАК this_news,
	                      |	ВЫБОР
	                      |		КОГДА Спр.Родитель.ЭтоНовости
	                      |			ТОГДА ""news""
	                      |		ИНАЧЕ Спр.ТипСтатьи
	                      |	КОНЕЦ КАК type,
	                      |	ВЫБОР
	                      |		КОГДА Спр.ТемаОтображенияНаСайте = """"
	                      |			ТОГДА ""standart""
	                      |		ИНАЧЕ Спр.ТемаОтображенияНаСайте
	                      |	КОНЕЦ КАК theme,
	                      |	Спр.ПометкаУдаления,
	                      |	Спр.ВыгружатьНаСайт
	                      |ИЗ
	                      |	Справочник.ИнтернетСтатьи КАК Спр
	                      |ГДЕ
						  //|	ПОДСТРОКА(Спр.ТекстСтатьи, 1, 1) <> """"
						  //давайте проверять хотя  бы первые 20 символов, один пробел сначала может быть введен случайно
	                      |	ПОДСТРОКА(Спр.ТекстСтатьи, 1, 20) <> """"
	                      |	И Спр.ВыгружатьНаСайт И " + ДопФильтр + "
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	Спр.Ссылка,
	                      |	Спр.Наименование,
	                      |	Спр.alies,
	                      |	Спр.title,
	                      |	"""",
	                      |	"""",
	                      |	"""",
	                      |	ДАТАВРЕМЯ(1, 1, 1),
	                      |	Спр.sorting_weight,
	                      |	Спр.meta_description,
	                      |	Спр.meta_keywords,
	                      |	Спр.Родитель,
	                      |	НЕОПРЕДЕЛЕНО,
						 // |	НЕОПРЕДЕЛЕНО,
						  |	НЕОПРЕДЕЛЕНО,
	                      |	НЕОПРЕДЕЛЕНО,
	                      |	ЛОЖЬ,
	                      |	""contact"",
	                      |	""standart"",
	                      |	Спр.ПометкаУдаления,
	                      |	Спр.ВыгружатьНаСайт
	                      |ИЗ
	                      |	Справочник.ИнтернетКонтакты КАК Спр
	                      |ГДЕ
	                      |	Спр.ВыгружатьНаСайт И " + ДопФильтр + "
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ИнтернетСтатьиДополнительныеРодители.Ссылка КАК Статья,
	                      |	ИнтернетСтатьиДополнительныеРодители.Родитель КАК category_guid,
	                      |	ИнтернетСтатьиДополнительныеРодители.Родитель.link_text КАК link_title,
	                      |	ИнтернетСтатьиДополнительныеРодители.Родитель.title_for_link КАК link_text
	                      |ИЗ
	                      |	Справочник.ИнтернетСтатьи.ДополнительныеРодители КАК ИнтернетСтатьиДополнительныеРодители
	                      |ГДЕ
	                      |	ИнтернетСтатьиДополнительныеРодители.Ссылка В
	                      |			(ВЫБРАТЬ
	                      |				Справочник.ИнтернетСтатьи.Ссылка
	                      |			ИЗ
	                      |				Справочник.ИнтернетСтатьи
	                      |			ГДЕ
	                      |				Справочник.ИнтернетСтатьи.ВыгружатьНаСайт И " + ДопФильтр + ")
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	СтатьиНоменклатуры.Объект КАК product_guids,
	                      |	СтатьиНоменклатуры.Статья КАК Статья
	                      |ИЗ
	                      |	РегистрСведений.ТоварыИСтатьи КАК СтатьиНоменклатуры
	                      |ГДЕ
	                      |	СтатьиНоменклатуры.Статья.Ссылка В
	                      |			(ВЫБРАТЬ
	                      |				Справочник.ИнтернетСтатьи.Ссылка
	                      |			ИЗ
	                      |				Справочник.ИнтернетСтатьи
	                      |			ГДЕ
	                      |				Справочник.ИнтернетСтатьи.ВыгружатьНаСайт И " + ДопФильтр + ")
	                      |	И  НЕ СтатьиНоменклатуры.Объект.Ссылка.ПометкаУдаления И СтатьиНоменклатуры.Объект.Ссылка.ВыгружатьНаСайт И Не СтатьиНоменклатуры.Объект.Ссылка.ЭтоГруппа
						  |"); 
	                     
	                     
						 						  
	//					  // Статьи
	//
	//|ВЫБРАТЬ
	//|	Спр.Ссылка				guid,
	//|	Спр.h1,
	//|	Спр.alies 				alias,
	//|	Спр.Наименование 		title,
	//|	КраткоеСодержание		description,
	//|	КраткоеСодержание		short_text,
	//|	ТекстСтатьи				long_text,
	//|	Спр.ДатаСтатьи 			data_created,
	//|	0						sorting_weight,
	//|	Спр.meta_description,
	//|	Спр.meta_keywords,
	//|	Родитель				category,
	//|	Неопределено			categories,
	//|	Картинка				image,
	//|	Родитель.ЭтоНовости		this_news,
	//|	ВЫБОР КОГДА Родитель.ЭтоНовости ТОГДА ""news"" ИНАЧЕ ТипСтатьи КОНЕЦ КАК type,
	//|	ВЫБОР КОГДА Спр.ТемаОтображенияНаСайте = """" ТОГДА ""standart"" ИНАЧЕ Спр.ТемаОтображенияНаСайте КОНЕЦ theme,
	//|
	//|	Спр.ПометкаУдаления,
	//|	Спр.ВыгружатьНаСайт
	//|ИЗ 		
	//|	Справочник.ИнтернетСтатьи КАК Спр
	//|ГДЕ ПОДСТРОКА(ТекстСтатьи, 1, 1) <> """" И ВыгружатьНаСайт И " + ДопФильтр + "
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	Спр.Ссылка				guid,
	//|	Спр.Наименование		h1,
	//|	Спр.alies 				alias,
	//|	Спр.title		 		title,
	//|	""""					description,
	//|	""""					short_text,
	//|	""""					long_text,
	//|	ДАТАВРЕМЯ(1,1,1)		data_created,
	//|	sorting_weight			sorting_weight,
	//|	Спр.meta_description,
	//|	Спр.meta_keywords,
	//|	Родитель				category,
	//|	Неопределено			categories,
	//|	Неопределено			image,
	//|	ЛОЖЬ					this_news,
	//|	""contact""				type,
	//|	""standart"" 			theme,
	//|
	//|	Спр.ПометкаУдаления,
	//|	Спр.ВыгружатьНаСайт
	//|ИЗ 		
	//|	Справочник.ИнтернетКонтакты КАК Спр
	//|ГДЕ ВыгружатьНаСайт И " + ДопФильтр + "
	//|;
	//
	//// Доп родители
	//
	//|ВЫБРАТЬ
	//|	Ссылка 						Статья,
	//|	Родитель					category_guid,
	//|	Родитель.link_text 			link_title,
	//|	Родитель.title_for_link		link_text
	//|ИЗ
	//|	Справочник.ИнтернетСтатьи.ДополнительныеРодители
	//|ГДЕ
	//|	Ссылка В(ВЫБРАТЬ Ссылка ИЗ Справочник.ИнтернетСтатьи ГДЕ ВыгружатьНаСайт И " + ДопФильтр + ")
	//|");


	Если ЗначениеЗаполнено(guid_article_category) Тогда 
		Запрос.УстановитьПараметр("Родитель", СсылкаРодитель) КонецЕсли;
	
	Если СсылкаСтатьи <> Неопределено Тогда
		Запрос.УстановитьПараметр("Ссылка", СсылкаСтатьи) КонецЕсли;
	
	Если ЗначениеЗаполнено(массивСсылок) Тогда
		Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	КонецЕсли;
#КонецОбласти
	
	Пакеты 	     = Запрос.ВыполнитьПакет();
	Статьи 		 = Новый Массив;
	Таблица		 = Пакеты[0].Выгрузить(); ПослИнд = Таблица.Количество() - 1;
	Родители	 = Пакеты[1].Выгрузить(); ПоляРодителей = ПолучитьПоляДляСтруктуры("Статья", Родители.Колонки);
	Номенклатура = Пакеты[2].Выгрузить(); ПоляНоменклатуры = ПолучитьПоляДляСтруктуры("Статья", Номенклатура.Колонки); 
		
	УстановитьИндексыТаблицам("Статья", Родители);
	
	Для Инд = 0 По ПослИнд Цикл
		
		// Получим категорию
		
		структураСтатья 	= КонвертацияТипов.ПолучитьСтруктуруИзСТрокиТаблицыЗначений(Таблица, Инд);
		Отбор				= Новый Структура("Статья", структураСтатья.guid);
		
		Если ТипЗнч(структураСтатья.type) = Тип("ПеречислениеСсылка.ТипИнтернетСтатьи") Тогда
			
			Если структураСтатья.type = Перечисления.ТипИнтернетСтатьи.Новость Тогда
				структураСтатья.type = "news";
			ИначеЕсли структураСтатья.type = Перечисления.ТипИнтернетСтатьи.Контакт Тогда
				структураСтатья.type = "contact";
			ИначеЕсли структураСтатья.type = Перечисления.ТипИнтернетСтатьи.Страница Тогда
				структураСтатья.type = "page";
			Иначе
				структураСтатья.type = "article";
			КонецЕсли;
		КонецЕсли;
				
		//Если НЕ структураСтатья.type = "contact" Тогда Продолжить; КонецЕсли;
		//Если НЕ (структураСтатья.guid = HTTP.ПолучитьОбъектПоСсылке(Справочники.ИнтернетКонтакты, "937e7065-8dea-11e0-8020-0015175303fd", "") ИЛИ Инд < 2) Тогда Продолжить; КонецЕсли;
		
		// Добавим родителей
		Если Не структураСтатья.category.Пустая() Тогда
			мРодителей = ПолучитьМассивЗначенийИзТаблицы(Родители, Отбор, ПоляРодителей);
			Если структураСтатья.type = "contact" Тогда
				мРодителей.Вставить(0, Новый Структура("category_guid, link_title, link_text", структураСтатья.category, структураСтатья.category.Наименование, структураСтатья.category.Наименование));
			ИначеЕсли структураСтатья.type = "page" Тогда
				мРодителей = Новый Массив;
			Иначе
				мРодителей.Вставить(0, Новый Структура("category_guid, link_title, link_text", структураСтатья.category, структураСтатья.category.title_for_link, структураСтатья.category.link_text));
		    КонецЕсли;
			структураСтатья.categories = мРодителей; КонецЕсли;
		структураСтатья.Удалить("category");
		 			
			
		
		// Картинки
		
		Если НЕ структураСтатья.image = Неопределено Тогда
			структураСтатья.image = структураСтатья.image.Получить();
		КонецЕсли;
		
		  	мНоменклатуры = ПолучитьМассивЗначенийИзТаблицы(Номенклатура, Отбор, ПоляНоменклатуры);
			структураСтатья.product_guids = мНоменклатуры;
			
			//мКатегорий = ПолучитьМассивЗначенийИзТаблицы(Категории, Отбор, ПоляКатегорий);
			//структураСтатья.product_category = мКатегорий;
		
		// Заполним описания для контактов
		Если структураСтатья.type = "contact" Тогда
			//ПроизвольныйHTML
			// Телефоны
			// Почта
			// СлужбыСообщений
			текстКонтактов = "";
			
			Если ЗначениеЗаполнено(структураСтатья.guid.Адрес) Тогда
				текстКонтактов = ТекстКонтактов(структураСтатья.guid);
				
				short_text = текстКонтактов;
			Иначе
				short_text = структураСтатья.guid.ПроизвольныйHTML;
			КонецЕсли;
			
			long_text = ?(ЗначениеЗаполнено(текстКонтактов), текстКонтактов, ТекстКонтактов(структураСтатья.guid)) + "<br>" + структураСтатья.guid.ПроизвольныйHTML;
			
			// Добавляем карту
			ДобавитьСхемуПроезда(структураСтатья.guid, long_text);
			
			структураСтатья.short_text = short_text;
			структураСтатья.long_text  = long_text;
			структураСтатья.description = структураСтатья.short_text;
		КонецЕсли;
		
		// Запомним
		
		Статьи.Добавить(структураСтатья); КонецЦикла;
	
	Возврат ЗначениеВозврата(Статьи);
	
КонецФункции

Функция ТекстКонтактов(ИнтернетКонтакт)
	текстКонтактов = "<dl class=""info adress"">";
	текстКонтактов = текстКонтактов + "<dt>Адрес:</dt>";
	текстКонтактов = текстКонтактов + "<dd class=""description"">" + ИнтернетКонтакт.Адрес + "</dd>";
	
	// Телефоны
	Для каждого стрКонтакта Из ИнтернетКонтакт.Телефоны Цикл
		текстКонтактов = текстКонтактов + "<dt>" + стрКонтакта.ВидТелефона + ":</dt>";
		текстКонтактов = текстКонтактов + "<dd class=""description"">" + стрКонтакта.Телефон + "</dd>";
	КонецЦикла;
	
	// Email
	Если ИнтернетКонтакт.Почта.Количество() > 0 Тогда
		текстКонтактов = текстКонтактов + "<dt>email:</dt>";
	КонецЕсли;
	адресаПочты = "";
	Для каждого стрКонтакта Из ИнтернетКонтакт.Почта Цикл
		адресаПочты = адресаПочты + ?(ЗначениеЗаполнено(адресаПочты), ", ", "") + стрКонтакта.Почта;
	КонецЦикла;
	Если ЗначениеЗаполнено(адресаПочты) Тогда
		текстКонтактов = текстКонтактов + "<dd class=""description"">" + адресаПочты + "</dd>";
	КонецЕсли;
	
	// Skype, ICQ
	Для каждого стрКонтакта Из ИнтернетКонтакт.СлужбыСообщений Цикл
		текстКонтактов = текстКонтактов + "<dt>" + стрКонтакта.ИмяСлужбы + ":</dt>";
		текстКонтактов = текстКонтактов + "<dd class=""description"">" + стрКонтакта.Контакт + "</dd>";
	КонецЦикла;
	
	текстКонтактов = текстКонтактов + "</dl>";
	
	Возврат текстКонтактов;
КонецФункции // ТекстКонтактов()
Функция ДобавитьСхемуПроезда(ИнтернетКонтакт, long_text)
	Если ЗначениеЗаполнено(ИнтернетКонтакт.СсылкаНаКарту) Тогда
		long_text = long_text + Символы.ПС + ИнтернетКонтакт.СсылкаНаКарту;
		
		Возврат Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИнтернетКонтакт.Адрес) Тогда
		Возврат Истина;
	КонецЕсли;
	
	
	long_text = long_text + "<script src=""http://api-maps.yandex.ru/2.0-stable/?load=package.standard&amp;lang=ru-RU"" type=""text/javascript""></script>";
	long_text = long_text + "<div id=""map""></div>";
	long_text = long_text + "
	|<script type=""text/javascript"">
	|  //<![CDATA[
	|    ymaps.ready(init);
	|    
	|    function init() {
	|        ymaps.geocode('" + ИнтернетКонтакт.Адрес + "', { results: 1 }).then(function (res) {
	|            var firstGeoObject = res.geoObjects.get(0),
	|                myMap = new ymaps.Map(""map"", {
	|                    center: firstGeoObject.geometry.getCoordinates(),
	|                    zoom: 15
	|                });
	|    
	|            myMap.container.fitToViewport();
	|            myMap.geoObjects.add(res.geoObjects.get(0));
	|            myMap.controls.add('zoomControl', { left: 5, top: 5 }).add('typeSelector').add('mapTools', { left: 35, top: 5 });
	|            attachReverseGeocode(myMap);
	|    
	|        }, function (err) {
	|            alert(err.message);
	|        });
	|    
	|    }
	|  //]]>
	|</script>";
КонецФункции // ДобавитьСхемуПроезда()

Функция ПолучитьКатегории(Параметры, стрОшибки = "") Экспорт
	
	// Возвращает массив категорий, если в массив состоит из 1 элемента тогда возвращается элемент массиа (структура)
	
	// Получим параметры
	
 	СсылкаКатегории 		= ?(Параметры.Свойство("Ссылка"), 			Параметры.Ссылка, 			Неопределено);
	guid_category 			= ?(Параметры.Свойство("guid_category"), 	Параметры.guid_category, 	Неопределено);
	СсылкаРодитель			= Неопределено;
	БратьДопТаблицыОтсюда 	= ?(Параметры.Свойство("БратьДопТаблицыОтсюда"), Параметры.БратьДопТаблицыОтсюда, Неопределено);
	
	ДопФильтр = "";
	//Если guid_category = Неопределено Тогда
		ДопФильтр = "ВыгружатьНаСайт";
	//КонецЕсли;
	
	Параметры.Вставить("ДопКатегории", Новый Соответствие());//ДопКатегории());  //теперь не нужно
	// Получим родителя
	
	МассивСсылок = Новый Массив;
	
	Если Параметры.Свойство("массивСсылок") Тогда
		массивСсылок = Параметры.массивСсылок;
	КонецЕсли;
	// Подготовим параметры для фильтрации по сайту
	
	// КОСТЫЛЬ
	СуффиксНом = ""; Сайт = ""; СуффКод2 = "3"; Если Ложь Тогда
		
		Если Параметры.Свойство("Сайт") Тогда
				СуффиксНом = "Сайт" + Строка(Параметры.Сайт);
				СуффКод2 = "";
		Иначе	СуффиксНом = "";
				СуффКод2 = "3";//теперь это Код3 
			КонецЕсли; КонецЕсли;

	Если ЗначениеЗаполнено(guid_category) Тогда
		
		Если ТипЗнч(guid_category) = Тип("Массив") Тогда
			Для каждого guidТовара Из guid_category Цикл
				Если НЕ Параметры.ДопКатегории[guidТовара] = Неопределено Тогда массивСсылок.Добавить(Справочники.Номенклатура.ПустаяСсылка()); Продолжить; КонецЕсли;
				
				массивСсылок.Добавить(HTTP.ПолучитьОбъектПоСсылке(Справочники.Номенклатура, guidТовара, стрОшибки));
			КонецЦикла;
		Иначе
			Если Параметры.ДопКатегории[guid_category] = Неопределено Тогда
				СсылкаКатегории = HTTP.ПолучитьОбъектПоСсылке(Справочники.Номенклатура, guid_category, стрОшибки); Если СсылкаКатегории = Неопределено Тогда Возврат "" КонецЕсли;
		
				Если Не СсылкаКатегории.ЭтоГруппа Тогда
					стрОшибки = "Гуид родительской категории относится к товару.
					|Гуид: " + guid_category + "
					|Товар: " + Строка(СсылкаРодитель); Возврат Неопределено; 
				КонецЕсли; 
			Иначе
				СсылкаКатегории = Справочники.Номенклатура.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СсылкаКатегории = Неопределено И НЕ ЗначениеЗаполнено(МассивСсылок) Тогда
	
		ДопФильтр = ?(ПустаяСтрока(ДопФильтр), "", ДопФильтр + " И ") + "ЭтоГруппа И НЕ ПометкаУдаления И ВыгружатьНаСайт";
		ДопФильтр = ДопФильтр + ?(ЗначениеЗаполнено(СсылкаРодитель)," 	И Родитель = &Родитель ", "");
		
	ИначеЕсли ЗначениеЗаполнено(МассивСсылок) Тогда
		ДопФильтр = ?(ПустаяСтрока(ДопФильтр), "", ДопФильтр + " И ") + "Ссылка В (&МассивСсылок)";
	Иначе
		ДопФильтр = ?(ПустаяСтрока(ДопФильтр), "", ДопФильтр + " И ") + "Ссылка = &Ссылка" КонецЕсли;
	
			
	текстПустышка = "ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка ИЗ Справочник.Номенклатура" + СуффиксНом + "";
	
#Область Текст_запроса
	
	Запрос = Новый Запрос("
	
	// Категории
	
	|ВЫБРАТЬ
	|	Спр.Ссылка				guid,
	|	Спр.views_count, 
	|   Истина                  enabled,
	|	ВЫБОР 
	|		КОГДА Спр.sorting_weight <> 0 ТОГДА Спр.sorting_weight
	|		ИНАЧЕ 								Спр.Код" + СуффКод2 + "
	|	КОНЕЦ					sorting_weight,
	|	Спр.Наименование 		title,
	|	Спр.title		 		title_seo,
	|	Спр.Код		 			garage_sku,
	|	Спр.h1, 
	|	Спр.alies				alias,
	|	Спр.meta_keywords,
	|	Спр.meta_description,
	|   Спр.Синонимы            synonyms,
	|	Спр.Описание 			description,
	|	ВЫБОР КОГДА Спр.link_title = """" ТОГДА Спр.Наименование ИНАЧЕ Спр.link_title КОНЕЦ link_title,
	|	ВЫБОР КОГДА Спр.link_text = """" ТОГДА Спр.Наименование ИНАЧЕ Спр.link_text КОНЕЦ link_text,
	|	Неопределено			image,
	|	Неопределено			icon_guid,
	|	ВЫБОР КОГДА Родитель.ВыгружатьНаСайт ТОГДА Родитель ИНАЧЕ Null КОНЕЦ КАК parent,
	|	ВЫБОР КОГДА Родитель = Значение(Справочник.Номенклатура" + СуффиксНом + ".ПустаяСсылка) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК root,
	|	Неопределено			additional_parents,
	|	Неопределено			properties,
	|	ВЫБОР КОГДА view_type = 0 ТОГДА 1 ИНАЧЕ view_type - 1 КОНЕЦ КАК view_type,
	|   Неопределено            Как article_guids,
	|	Спр.ПометкаУдаления,
	|	Спр.ВыгружатьНаСайт,
	|	Спр.ОтображатьВместеСТоварами	show_products
	|ИЗ 		
	|	Справочник.Номенклатура" + СуффиксНом + " КАК Спр
	|ГДЕ " + ДопФильтр + "
	|;
	
	// Доп свойства
	
	|" + ?(БратьДопТаблицыОтсюда = Неопределено, "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура 	Категория,
	|	Свойство 		guid,
	|	Сортировка  	sorting_weight,
	|	Ключевой        key
	|ИЗ 		
	|	РегистрСведений.ЗначенияДополнительныхРеквизитовНоменклатуры 
	|ГДЕ
	|	Номенклатура В(ВЫБРАТЬ Ссылка ИЗ Справочник.Номенклатура" + СуффиксНом + " ГДЕ " + ДопФильтр + ")
	| И НЕ Свойство.ПометкаУдаления
	| УПОРЯДОЧИТЬ ПО Сортировка
	|",текстПустышка) + ";
	
	// Доп родители
	
	|ВЫБРАТЬ
	|	Ссылка 					Категория,
	|	Родитель				category_guid,
	|	Родитель.Наименование 	link_title,
	|	Родитель.Описание		link_text
	|ИЗ
	|	Справочник.Номенклатура" + СуффиксНом + ".ДополнительныеРодители
	|ГДЕ
	|	Ссылка В(ВЫБРАТЬ Ссылка ИЗ Справочник.Номенклатура" + СуффиксНом + " ГДЕ " + ДопФильтр + ")
	|	И Родитель.ВыгружатьНаСайт
	|;
	
	// Картинки
	
	|ВЫБРАТЬ
	|	Ссылка image, Владелец Категория
	|ИЗ
	|	Справочник.КартинкиНоменклатуры
	|ГДЕ
	|	Владелец В(ВЫБРАТЬ Ссылка ИЗ Справочник.Номенклатура" + СуффиксНом + " ГДЕ " + ДопФильтр + ")
	|	И НЕ ПометкаУдаления И НЕ ИконкаКатегории
	|;
	
	// Иконки
	
	|ВЫБРАТЬ
	|	Ссылка image, Владелец Категория
	|ИЗ
	|	Справочник.КартинкиНоменклатуры
	|ГДЕ
	|	Владелец В(ВЫБРАТЬ Ссылка ИЗ Справочник.Номенклатура" + СуффиксНом + " ГДЕ " + ДопФильтр + ")
	|	И НЕ ПометкаУдаления И ИконкаКатегории
	|;
	
	// Меню			-- Меню думаю нужно удалить за ненадобностью (его придумл Дубенский и это не взлетело даже близко)
	
	
	|" + ?(БратьДопТаблицыОтсюда = Неопределено, "
	|ВЫБРАТЬ 
	|	Объект Категория, 
	|	Меню																				guid,
	|	Родитель																			parent_guid, 
	|	ВЫБОР КОГДА Наименование = """" ТОГДА Меню.Наименование ИНАЧЕ Наименование КОНЕЦ 	link_title,
	|	ВЫБОР КОГДА ВЫРАЗИТЬ(Текст КАК СТРОКА(1)) = """" ТОГДА Меню.Текст ИНАЧЕ Текст КОНЕЦ link_text,
	|	ВЫБОР КОГДА Вес = 0 ТОГДА Меню.Вес ИНАЧЕ Вес КОНЕЦ 									sort_weight
	|ИЗ 
	|	РегистрСведений.ЧастныеСвойстваМенюОбъекта
	|ГДЕ 	
	|	Объект ССЫЛКА Справочник.Номенклатура" + СуффиксНом + " И
	|	Объект В(ВЫБРАТЬ Ссылка ИЗ Справочник.Номенклатура" + СуффиксНом + " ГДЕ " + ДопФильтр + ")
	|",текстПустышка) + ";
	
	//Статьи
	  	
	|ВЫБРАТЬ
	|	ТоварыИСтатьи.Объект КАК Категория,
	|	ТоварыИСтатьи.Статья КАК article_guids
	|ИЗ
	|	РегистрСведений.ТоварыИСтатьи КАК ТоварыИСтатьи
	|ГДЕ Не ТоварыИСтатьи.Статья.ПометкаУдаления И ТоварыИСтатьи.Статья.ВыгружатьНаСайт и
	|	ТоварыИСтатьи.Объект В(ВЫБРАТЬ Ссылка ИЗ Справочник.Номенклатура" + СуффиксНом + " ГДЕ " + ДопФильтр + ");
	|");
	
	Если ЗначениеЗаполнено(guid_category) Тогда 
		Запрос.УстановитьПараметр("Родитель", СсылкаРодитель) КонецЕсли;
	
	Если СсылкаКатегории <> Неопределено Тогда
		Запрос.УстановитьПараметр("Ссылка", СсылкаКатегории) КонецЕсли;
	
	Если ЗначениеЗаполнено(МассивСсылок) Тогда
		Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок) КонецЕсли;
	
#КонецОбласти
	
	Пакеты 		= Запрос.ВыполнитьПакет();
	Категории 	= Новый Массив;
	Таблица		= Пакеты[0].Выгрузить(); ПослИнд = Таблица.Количество() - 1;
	Свойства	= Пакеты[1].Выгрузить(); ПоляСвойств = ПолучитьПоляДляСтруктуры("Категория", Свойства.Колонки);
	Родители	= Пакеты[2].Выгрузить(); ПоляРодителей = ПолучитьПоляДляСтруктуры("Категория", Родители.Колонки);
	тКартинки	= Пакеты[3].Выгрузить();
	тИконки		= Пакеты[4].Выгрузить();
	Меню		= Пакеты[5].Выгрузить(); ПоляМеню   = ПолучитьПоляДляСтруктуры("Категория", Меню.Колонки);
	Статьи		= Пакеты[6].Выгрузить(); ПоляСтатьи = ПолучитьПоляДляСтруктуры("Категория", Статьи.Колонки);

	
	Если БратьДопТаблицыОтсюда = Неопределено Тогда
		УстановитьИндексыТаблицам("Категория", Свойства, 	Родители, 	тКартинки, Меню) Иначе
		УстановитьИндексыТаблицам("Категория", 				Родители, 	тКартинки) КонецЕсли;
	
	Для Инд = 0 По ПослИнд Цикл
		
		// Получим категорию
		
		структураКатегория 	= КонвертацияТипов.ПолучитьСтруктуруИзСТрокиТаблицыЗначений(Таблица, Инд);
		Отбор				= Новый Структура("Категория", структураКатегория.guid);
		
		// Обработаем sorting_weight
		Если структураКатегория.Свойство("sorting_weight") Тогда
			структураКатегория.sorting_weight = СтрЗаменить(структураКатегория.sorting_weight, " ", "");
		КонецЕсли;
		
		// Обработаем synonyms
		структураКатегория.synonyms = КонвертацияТипов.ПолучитьМассивИзСтроки(структураКатегория.synonyms, ",");
		
		// Добавим родителей
		
		структураКатегория.additional_parents = ПолучитьМассивЗначенийИзТаблицы(Родители, Отбор, ПоляРодителей);
				// Добавим свойства
		
		структураКатегория.properties = ?(БратьДопТаблицыОтсюда = Неопределено,
						ПолучитьМассивЗначенийИзТаблицы(Свойства, Отбор, ПоляСвойств),
						ПолучитьМассивСвойствПоФорматAPI(БратьДопТаблицыОтсюда.Свойства)); 
		// Добавим статьи
		мСтатьи = ПолучитьМассивЗначенийИзТаблицы(Статьи, Отбор, ПоляСтатьи);
		структураКатегория.article_guids = мСтатьи;

		// Добавим картинку
		
		СтрокаКартинки = тКартинки.Найти(структураКатегория.guid, "Категория");
		Если СтрокаКартинки <> Неопределено Тогда
			структураКатегория.image = XMLСтрока(СтрокаКартинки.image) КонецЕсли;
		
		// Добавим иконку
		
		СтрокаКартинки = тИконки.Найти(структураКатегория.guid, "Категория");
		Если СтрокаКартинки <> Неопределено Тогда
			структураКатегория.icon_guid = XMLСтрока(СтрокаКартинки.image) КонецЕсли;
		
		// Добавим меню
		
		//структураКатегория.menu_items = ?(БратьДопТаблицыОтсюда = Неопределено,
		//				ПолучитьМассивЗначенийИзТаблицы(Меню, Отбор, ПоляМеню),
		//				ПолучитьМассивМенюПоФорматAPI(БратьДопТаблицыОтсюда.Меню)); 
		
		// Запомним
		
		Категории.Добавить(структураКатегория); КонецЦикла;
	
	//ДобавитьДопКатегории(Категории, Параметры);
	
	Возврат ЗначениеВозврата(Категории);
	
КонецФункции
Функция ДопКатегории()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Различные Контрагент.ИдДляСайта КАК ид, Контрагент.Наименование КАК Наименование ИЗ Документ.СогласованиеАссортимента.Контрагенты КАК СогласованиеАссортиментаКонтрагенты СГРУППИРОВАТЬ ПО СогласованиеАссортиментаКонтрагенты.Контрагент";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДопКатегории = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		ДопКатегории.Вставить(Выборка.ид, Новый Структура("guid, views_count, sorting_weight, title, title_seo, h1, alias, meta_keywords, meta_description, description, link_title, link_text, image, parent, root, additional_parents, properties, view_type, ПометкаУдаления, ВыгружатьНаСайт", 
														  Выборка.ид, 0, "999", Выборка.Наименование, "", "", Выборка.ид + "_category", "", "", "", "", "", null, null, Ложь, Новый Массив, Новый Массив, 0, Ложь, Истина));
	КонецЦикла;
	
	//ДопКатегории.Вставить("severstal", Новый Структура("guid, views_count, sorting_weight, title, title_seo, h1, alias, meta_keywords, meta_description, description, link_title, link_text, image, parent, root, additional_parents, properties, view_type, ПометкаУдаления, ВыгружатьНаСайт", 
	//													"severstal", 0, "999", "Северсталь", "", "", "severstal_category", "", "", "", "", "", null, null, Ложь, Новый Массив, Новый Массив, 0, Ложь, Истина));
	//ДопКатегории.Вставить("okatysh", Новый Структура("guid, views_count, sorting_weight, title, title_seo, h1, alias, meta_keywords, meta_description, description, link_title, link_text, image, parent, root, additional_parents, properties, view_type, ПометкаУдаления, ВыгружатьНаСайт", 
	//													"okatysh", 0, "999", "Карельский окатыш", "", "", "okatysh_category", "", "", "", "", "", null, null, Ложь, Новый Массив, Новый Массив, 0, Ложь, Истина));
	//ДопКатегории.Вставить("promservice", Новый Структура("guid, views_count, sorting_weight, title, title_seo, h1, alias, meta_keywords, meta_description, description, link_title, link_text, image, parent, root, additional_parents, properties, view_type, ПометкаУдаления, ВыгружатьНаСайт", 
	//													"promservice", 0, "999", "Северсталь-Промсервис (ООО)", "", "", "promservice_category", "", "", "", "", "", null, null, Ложь, Новый Массив, Новый Массив, 0, Ложь, Истина));
	//ДопКатегории.Вставить("tyzhmash", Новый Структура("guid, views_count, sorting_weight, title, title_seo, h1, alias, meta_keywords, meta_description, description, link_title, link_text, image, parent, root, additional_parents, properties, view_type, ПометкаУдаления, ВыгружатьНаСайт", 
	//													"tyzhmash", 0, "999", "ССМ-Тяжмаш (ООО)", "", "", "tyzhmash_category", "", "", "", "", "", null, null, Ложь, Новый Массив, Новый Массив, 0, Ложь, Истина));
	//ДопКатегории.Вставить("domnaremont", Новый Структура("guid, views_count, sorting_weight, title, title_seo, h1, alias, meta_keywords, meta_description, description, link_title, link_text, image, parent, root, additional_parents, properties, view_type, ПометкаУдаления, ВыгружатьНаСайт", 
	//													"domnaremont", 0, "999", "Домнаремонт (ОАО)", "", "", "domnaremont_category", "", "", "", "", "", null, null, Ложь, Новый Массив, Новый Массив, 0, Ложь, Истина));
	//ДопКатегории.Вставить("tpz_sheksna", Новый Структура("guid, views_count, sorting_weight, title, title_seo, h1, alias, meta_keywords, meta_description, description, link_title, link_text, image, parent, root, additional_parents, properties, view_type, ПометкаУдаления, ВыгружатьНаСайт", 
	//													"tpz_sheksna", 0, "999", "Северсталь ТПЗ-Шексна (ООО)", "", "", "tpz_sheksna_category", "", "", "", "", "", null, null, Ложь, Новый Массив, Новый Массив, 0, Ложь, Истина));
	
	Возврат ДопКатегории;
КонецФункции // ДопКатегории()
Функция ДобавитьДопКатегории(Категории, Параметры)
	СсылкаКатегории 		= ?(Параметры.Свойство("Ссылка"), 			Параметры.Ссылка, 			Неопределено);
	guid_category 			= ?(Параметры.Свойство("guid_category"), 	Параметры.guid_category, 	Неопределено);
	
	ДопКатегории = Параметры.ДопКатегории;
	
	добавляемыеКатегории = Новый Соответствие;
	
	Если НЕ СсылкаКатегории = Неопределено ИЛИ Параметры.Свойство("массивСсылок") Тогда
		Возврат Ложь;
	КонецЕсли;
	Если ЗначениеЗаполнено(guid_category) Тогда
		Если ТипЗнч(guid_category) = Тип("Массив") Тогда
			Для каждого guidТовара Из guid_category Цикл
				Если НЕ ДопКатегории[guidТовара] = Неопределено Тогда
					добавляемыеКатегории.Вставить(guidТовара, Истина);
				КонецЕсли;
			КонецЦикла;
		Иначе // это строка
			Если НЕ ДопКатегории[guid_category] = Неопределено Тогда
				добавляемыеКатегории.Вставить(guid_category, Истина);
			КонецЕсли;
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(добавляемыеКатегории) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(добавляемыеКатегории) Тогда
		Для каждого допКатегория Из ДопКатегории Цикл
			добавляемыеКатегории.Вставить(допКатегория.Ключ, Истина);
		КонецЦикла;
	КонецЕсли;
	
	Для каждого кИз Из добавляемыеКатегории Цикл
		Категории.Добавить(ДопКатегории[кИз.Ключ]);
	КонецЦикла;
КонецФункции // ДобавитьДопКатегории()

Функция ПолучитьТекстПредставленияВариантаСвойства(Префикс = "") Экспорт
	
	Возврат "ВЫБОР 
		|КОГДА " + Префикс + "ВидСвойства = ЗНАЧЕНИЕ(Перечисление.ВидСвойства.Список) 		ТОГДА 1
		|КОГДА " + Префикс + "ВидСвойства = ЗНАЧЕНИЕ(Перечисление.ВидСвойства.Ползунок) 	ТОГДА 2
		|																					ИНАЧЕ 0
		|КОНЕЦ variant";
	
КонецФункции

Функция ПолучитьТовары(Параметры, стрОшибки = "") Экспорт
	
	// Возвращает массив товаров, если в параметре указан конкретный товар тогда возвращает структуру полей товара
	
	// Получим параметры (можно указать области массивСсылок, Области)
	
	СсылкаТовар 			= ?(Параметры.Свойство("Ссылка"), Параметры.Ссылка, Неопределено);
	guid_category 			= ?(Параметры.Свойство("guid_category"), Параметры.guid_category, Неопределено);
	ГуидыТоваров			= ?(Параметры.Свойство("ГуидыТоваров"), Параметры.ГуидыТоваров, Неопределено);
	НомерНачала 			= ?(Параметры.Свойство("НомерНачала"), Параметры.НомерНачала, Неопределено);
	НомерОкончания 			= ?(Параметры.Свойство("НомерОкончания"), Параметры.НомерОкончания, Неопределено);
	
	БратьДопТаблицыОтсюда 	= ?(Параметры.Свойство("БратьДопТаблицыОтсюда"), Параметры.БратьДопТаблицыОтсюда, Неопределено);
	
	Если СсылкаТовар = Неопределено Тогда
		текВремя = ТекущаяДата();
	
		ЗаписьЖурналаРегистрации("HTTP.Трассировка.api2.get_products",УровеньЖурналаРегистрации.Информация,,,"Получение метода:
		|cat_guid = " + guid_category + "
		|begin_id = " + НомерНачала + "
		|end_id = " + НомерОкончания + "
		|");
	КонецЕсли;
	
	// Подготовим параметры для фильтрации по сайту

	// КОСТЫЛЬ
	СуффиксНом = ""; Сайт = ""; Если Ложь Тогда
	
		Если Параметры.Свойство("Сайт") Тогда
				СуффиксНом = "Сайт" + Строка(Параметры.Сайт);
				Сайт = Строка(Параметры.Сайт);
		Иначе	СуффиксНом = ""; Сайт = "";
		КонецЕсли; КонецЕсли;
	  
	// Получим родителя
	
	Если ЗначениеЗаполнено(guid_category) Тогда
		
		СсылкаРодитель = HTTP.ПолучитьОбъектПоСсылке(Справочники.Номенклатура, guid_category); Если СсылкаРодитель = Неопределено Тогда Возврат "" КонецЕсли;
		//Вычислить("Справочники.Номенклатура" + СуффиксНом)       //                           , стрОшибки
		Если Не СсылкаРодитель.ЭтоГруппа Тогда
			стрОшибки = "Гуид родительской категории относится к товару.
			|Гуид: " + guid_category + "
			|Товар: " + Строка(СсылкаРодитель); Возврат Неопределено; КонецЕсли; КонецЕсли;

	массивСсылок = Неопределено;
	
	Если Параметры.Свойство("массивСсылок") Тогда
		массивСсылок = Параметры.массивСсылок;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ГуидыТоваров) Тогда
		массивСсылок = Новый Массив;
	
		Если ТипЗнч(ГуидыТоваров) = Тип("Массив") Тогда
			Для каждого guidТовара Из ГуидыТоваров Цикл
				массивСсылок.Добавить(HTTP.ПолучитьОбъектПоСсылке(Справочники.Номенклатура, guidТовара, стрОшибки));
			КонецЦикла;
		ИначеЕсли ТипЗнч(ГуидыТоваров) = Тип("Строка") Тогда
			массивСсылок.Добавить(HTTP.ПолучитьОбъектПоСсылке(Справочники.Номенклатура, ГуидыТоваров, стрОшибки));
		КонецЕсли;
		
	КонецЕсли;
	
	Если СсылкаТовар = Неопределено Тогда
	
		ДопФильтр = "НЕ ЭтоГруппа И НЕ ПометкаУдаления И ВыгружатьНаСайт";
		ДопФильтр = ДопФильтр + ?(ЗначениеЗаполнено(СсылкаРодитель)," 	И Родитель = &Родитель ", "");
		ДопФильтр = ДопФильтр + ?(ЗначениеЗаполнено(НомерНачала), " 	И ПорядковыйНомер >= " + Формат(НомерНачала,"ЧГ="), "");
		ДопФильтр = ДопФильтр + ?(ЗначениеЗаполнено(НомерОкончания), " 	И ПорядковыйНомер <= " + Формат(НомерОкончания,"ЧГ="), "");
		ДопФильтр = ДопФильтр + ?(ЗначениеЗаполнено(массивСсылок)," 	И Ссылка В (&массивСсылок) ", "");
		
	Иначе
		
		ДопФильтр = "Ссылка = &Ссылка И НЕ ПометкаУдаления И ВыгружатьНаСайт" 
	КонецЕсли;
	
	текстПустышка = ";ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка ИЗ СписокТоваров";
	
	Области = "Поля, Свойства, Родители,КатегорииПартнеров, Картинки, Остатки, Цены, Меню, Комплектация, КраткоеОписание, Инструкции, ВидеоОбзоры, Сопутствующие, Аналоги, Статьи";
	ид = Новый Структура(Области); сч = 14;
	
	Области = ?(Параметры.Свойство("Области"), Параметры.Области, Новый Структура(Области));
	
#Область Текст_запроса

	Запрос = Новый Запрос("
	
	// Список товаров
	
	|ВЫБРАТЬ 	Ссылка
	|ПОМЕСТИТЬ 	СписокТоваров
	|ИЗ 		Справочник.Номенклатура КАК Спр
	|ГДЕ " + ДопФильтр + "
	|;
	
	//
	
	|ВЫБРАТЬ  ПЕРВЫЕ 1
	|	Ссылка 			Товар,
	|	Родитель		Первый
	|ПОМЕСТИТЬ
	|	тДополнительныеРодители
	|ИЗ
	|	Справочник.Номенклатура.ДополнительныеРодители КАК Табл
	|ГДЕ
	|	Ссылка В(ВЫБРАТЬ Ссылка ИЗ СписокТоваров)
	|	И Родитель.ВыгружатьНаСайт
	|	И Родитель Ссылка Справочник.Номенклатура"+СуффиксНом+"
	|;
	
	//Было***
	
	//|ВЫБРАТЬ
	//|	Ост.Номенклатура Товар
	//|ПОМЕСТИТЬ
	//|	ВнешниеТовары
	//|ИЗ
	//|	Регистрнакопления.ТоварыНаСкладах.Обороты(,,,Номенклатура В(ВЫБРАТЬ Ссылка ИЗ СписокТоваров) И Склад.ВыгружатьНаСайт И Склад.ВнешнийСклад) КАК Ост
	//|СГРУППИРОВАТЬ ПО
	//|	Ост.Номенклатура
	//|; 
	//***
	
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура Товар
	|ПОМЕСТИТЬ
	|	ВнешниеТовары
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОстВнешнихСкладов.Номенклатура КАК Номенклатура,
	|		ОстВнешнихСкладов.КоличествоОстаток КАК КоличествоОстатокВнешнихСкл,
	|		ЕСТЬNULL(ОстСкладов.КоличествоОстаток, 0) КАК КоличествоОстатокСкл
	|	ИЗ
	|		РегистрНакопления.ТоварыНаСкладах.Остатки(,Номенклатура В(ВЫБРАТЬ Ссылка ИЗ СписокТоваров) и Склад.ВыгружатьНаСайт И Склад.ВнешнийСклад) КАК ОстВнешнихСкладов
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(,Номенклатура В(ВЫБРАТЬ Ссылка ИЗ СписокТоваров) и Склад.ВыгружатьНаСайт И НЕ Склад.ВнешнийСклад) КАК ОстСкладов
	|			ПО ОстВнешнихСкладов.Номенклатура = ОстСкладов.Номенклатура) КАК ВложенныйЗапрос
	|ГДЕ
	|	ВложенныйЗапрос.КоличествоОстатокСкл = 0
	|;
		
		 
	
	//
	
	|ВЫБРАТЬ
	|	Спр.Номенклатура Товар
	|ПОМЕСТИТЬ
	|	Новинки
	|ИЗ
	|	Справочник.Новинки.Товары КАК Спр
	|ГДЕ
	|	Спр.Готовность И
	|	&ТекущаяДата <= Спр.ПериодДействия
	|СГРУППИРОВАТЬ ПО
	|	Спр.Номенклатура
	|;
	|
	//|ВЫБРАТЬ 
	//|	ЕСТЬNULL(Зак.ЗаказПоставщику, Инв.ЗаказПоставщику) ЗаказПоставщику,
	//|	ЕСТЬNULL(Зак.Номенклатура, Инв.Номенклатура) Номенклатура,
	//|  	ВЫБОР КОГДА Инв.Инвойс ЕСТЬ NULL 
	//|     	ТОГДА	Зак.ЗаказПоставщику.Партнер.СрокВПути*86400
	//|	КОГДА Инв.Инвойс.ДатаПоступления = ДатаВремя(1,1,1)
	//|		ТОГДА 0
	//|	ИНАЧЕ	
	//|		РАЗНОСТЬДАТ(&ТекущаяДата,Инв.Инвойс.ДатаПоступления,СЕКУНДА) 
	//|	КОНЕЦ	СрокПоставки,	
	//|	ЕСТЬNULL(Зак.КоличествоОстаток, 0) + ЕСТЬNULL(Инв.КоличествоОстаток,0) КоличествоЗаказано
	//|
	//|ПОМЕСТИТЬ СрокиПоставкиСЗаказомПоставщику
	//|ИЗ
	//|	РегистрНакопления.ЗаказыПоставщикам.Остатки(, Номенклатура В(ВЫБРАТЬ Ссылка ИЗ СписокТоваров) И Номенклатура.Производитель.Импорт) Зак
	//|
	//|	ПОЛНОЕ СОЕДИНЕНИЕ
	//|  		РегистрНакопления.ТоварыПоставщиковВПути.Остатки(, Номенклатура В(ВЫБРАТЬ Ссылка ИЗ СписокТоваров) И Номенклатура.Производитель.Импорт) Инв
	//|  		ПО Зак.Номенклатура = Инв.Номенклатура И Зак.ЗаказПоставщику = Инв.ЗаказПоставщику
	//|
	//|;
	//|
	//|ВЫБРАТЬ 
	//|	Номенклатура, 
	//|	МАКСИМУМ(Период) ПоследнееПоступление 
	//|
	//|ПОМЕСТИТЬ  ПоставщикиПривлеченногоТовара 
	//|ИЗ 
	//|	РегистрСведений.Поставщики.СрезПоследних(,Номенклатура В(ВЫБРАТЬ Ссылка ИЗ СписокТоваров) И НЕ Номенклатура.Производитель.Импорт)
	//|
	//|СГРУППИРОВАТЬ ПО Номенклатура
	//|
	//|;
	//|
	//|ВЫБРАТЬ
	//|	Рег.Номенклатура, 
	//|	Рег.Поставщик.СрокВПути*86400 СрокПоставки 
	//|ПОМЕСТИТЬ 
	//|	СрокиПоставки 
	//|ИЗ 
	//|	РегистрСведений.Поставщики.СрезПоследних(,Номенклатура В(ВЫБРАТЬ Номенклатура ИЗ ПоставщикиПривлеченногоТовара)) Рег
	//|
	//|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	//|		ПоставщикиПривлеченногоТовара Пост
	//|		ПО  Рег.Номенклатура = Пост.Номенклатура И Рег.Период = Пост.ПоследнееПоступление 
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	Запр.Номенклатура,
	//|	Запр.СрокПоставки
	//|ИЗ
	//|	(ВЫБРАТЬ Номенклатура, МИНИМУМ(СрокПоставки) СрокПоставки, СУММА(КоличествоЗаказано) КоличествоЗаказано ИЗ СрокиПоставкиСЗаказомПоставщику СГРУППИРОВАТЬ ПО Номенклатура) Запр
	//|
	//|	ЛЕВОЕ СОЕДИНЕНИЕ
	//|		РегистрНакопления.РазмещениеЗаказов.Остатки(,Номенклатура В(ВЫБРАТЬ Ссылка ИЗ СписокТоваров) И Номенклатура.Производитель.Импорт) Разм
	//|		ПО Запр.Номенклатура = Разм.Номенклатура
	//|ГДЕ  
	//|	КоличествоЗаказано - ЕСТЬNULL(Разм.КоличествоОстаток,0) > 0
	
	//{начало-> belova 01.12.2016  жуткая функция расчета сроков поставки по хитрому алгоритму
	
	// Выбираем все товары из списка, которые заказаны или в инвойсе	
	
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Зак.Номенклатура, 		Инв.Номенклатура) 					Номенклатура,
	|	ЕСТЬNULL(Зак.ЗаказПоставщику, 	Инв.ЗаказПоставщику) 				ЗаказПоставщику,
	|	ЕСТЬNULL(Зак.ЗаказПоставщику.Контрагент, Инв.ЗаказПоставщику.Контрагент)	Контрагент,
	|	Инв.Инвойс 															Инвойс,
	|	ЕСТЬNULL(Зак.КоличествоОстаток,0)+ЕСТЬNULL(Инв.КоличествоОстаток,0) КоличествоОжидается
	|
	|ПОМЕСТИТЬ ТоварыОжидаются
	|ИЗ
	|	
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(, Номенклатура В(ВЫБРАТЬ Ссылка ИЗ СписокТоваров)) Зак
	|	
	|	ПОЛНОЕ СОЕДИНЕНИЕ
	|		
	|	РегистрНакопления.ТоварыПоставщиковВПути.Остатки(, Номенклатура В(ВЫБРАТЬ Ссылка ИЗ СписокТоваров)) Инв
	|	
	|	ПО Зак.Номенклатура = Инв.Номенклатура И Зак.ЗаказПоставщику = Инв.ЗаказПоставщику
	|		
	|;
	
	// Проверяем есть ли свободное для размещения количество товаров (если товары, которые едут в заказе поставщику/инвойсе уже все заняты очередью, по таким товарам сроки не даем)

	|ВЫБРАТЬ
	|	Запр.Номенклатура
	|
	|ПОМЕСТИТЬ СвободныеТовары
	|
	|ИЗ
	|
	|	(ВЫБРАТЬ Номенклатура, СУММА(КоличествоОжидается) ИЗ ТоварыОжидаются СГРУППИРОВАТЬ ПО Номенклатура) Запр
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.РазмещениеЗаказов.Остатки(, Номенклатура В(ВЫБРАТЬ Ссылка ИЗ СписокТоваров)) Разм
	|		ПО Запр.Номенклатура = Разм.Номенклатура
	|ГДЕ  
	|	КоличествоОжидается - ЕСТЬNULL(Разм.КоличествоОстаток,0) > 0
	|;

	// выбираем только те данные о товарах в  заказах поставщику/инвойсах, где есть свободный товар для размещения
	
	|ВЫБРАТЬ
	|	Номенклатура,
	|	Контрагент,
	|	ЗаказПоставщику,
	|	Инвойс
	|
	|ПОМЕСТИТЬ ЕдутКНам
	|ИЗ 
	|	ТоварыОжидаются
	|
	|ГДЕ Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ СвободныеТовары)
	|;
	
	// выбираем данные о сроках производста и доставки по всем поставщикам для товаров из Инвойсов/ЗаказовПоставщику, доступных для размещения (нужно для сопоставления с Контрагентом из Инвойсов/Заказов поставщику)
	
	|ВЫБРАТЬ 
	|	Номенклатура,
	|	Контрагент,
	|	СрокДоставки,
	|	СрокПроизводства
	|	
	|ПОМЕСТИТЬ ПоставщикиВсе
	|ИЗ 
	|	РегистрСведений.НоменклатураПартнеров
	|
	|ГДЕ Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ СвободныеТовары)
	|;
	
	// долго и нудно выбираем единственного поставщика для каждого товара из списка и выбираем данные о сроках производста и доставки для них
	
	|ВЫБРАТЬ 
	|	Номенклатура,
	|	МАКСИМУМ(Контрагент)
	|	
	|ПОМЕСТИТЬ ПоставщикиОсновные
	|ИЗ 
	|	РегистрСведений.НоменклатураПартнеров
	|ГДЕ
	|	Номенклатура В(ВЫБРАТЬ Ссылка ИЗ СписокТоваров) И Основной = ИСТИНА
	|СГРУППИРОВАТЬ ПО Номенклатура
	|
	|;
	|ВЫБРАТЬ 
	|	Номенклатура,
	|	МАКСИМУМ(Контрагент)
	|	
	|ПОМЕСТИТЬ ПоставщикиЛюбые
	|ИЗ 
	|	РегистрСведений.НоменклатураПартнеров
	|ГДЕ Номенклатура В(ВЫБРАТЬ Ссылка ИЗ СписокТоваров) И (СрокПроизводства + СрокДоставки) > 0
	|СГРУППИРОВАТЬ ПО Номенклатура
	|;
	|
	|// сопоставляем первых попавшихся поставщиков с основными, вытягиваем с приоритетом основного, если его нет - первый попавшийся сгодится
	|
	|ВЫБРАТЬ 
	|	Люб.Номенклатура	 Номенклатура, 
	|	ЕСТЬNULL(Осн.Контрагент, Люб.Контрагент) Контрагент
	|	
	|ПОМЕСТИТЬ ПоставщикиТочно
	|ИЗ
	|	ПоставщикиЛюбые  Люб
	|			
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|   	ПоставщикиОсновные Осн
	|	ПО Люб.Номенклатура = Осн.Номенклатура
	|
	|;
	|
	|ВЫБРАТЬ
	|   Рег.Номенклатура 		Номенклатура,
	|	Рег.Контрагент			Контрагент,
	|	Рег.СрокДоставки		СрокДоставки,
	|	Рег.СрокПроизводства    СрокПроизводства
	|
	|ПОМЕСТИТЬ Поставщики 
	|
	|ИЗ 
	|	РегистрСведений.НоменклатураПартнеров Рег
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	ПоставщикиТочно Пост
	|   По Рег.Номенклатура = Пост.Номенклатура И Рег.Контрагент = Пост.Контрагент
	|;
	
	 // вычисляем сроки поставки товаров из заказов поставщику/инвойсов, доступных для размещения
	
	|ВЫБРАТЬ 
	|	Тов.Номенклатура	 Номенклатура,
	|	ВЫБОР 
	|	КОГДА НЕ Тов.Инвойс ЕСТЬ NULL ТОГДА
	|	
	|			ВЫБОР 
	|			
	|			КОГДА Тов.Инвойс.ДатаПоступления <> ДатаВремя(1,1,1) ТОГДА 
	|	
	|					 РАЗНОСТЬДАТ(&ТекущаяДата, Тов.Инвойс.ДатаПоступления, СЕКУНДА) + 5*86400
	|			
	|			КОГДА  ЕСТЬNULL(Пост.СрокДоставки, 0) > 0 И Тов.Инвойс.ДатаПогрузки <> ДатаВремя(1,1,1) ТОГДА		
	|		
	|					РАЗНОСТЬДАТ(&ТекущаяДата, Тов.Инвойс.ДатаПогрузки, СЕКУНДА)  +  Пост.СрокДоставки*86400 + 5*86400 
	|			
	|			ИНАЧЕ 0		
	|					
	|			КОНЕЦ
	|	ИНАЧЕ 0
	|	КОНЕЦ СрокПоИнвойсу,
	|
	|	ВЫБОР
	|	КОГДА НЕ Тов.ЗаказПоставщику ЕСТЬ NULL ТОГДА
	|	
	|	    ВЫБОР   
	|	      	КОГДА 	Тов.ЗаказПоставщику.ДатаПоступления <> ДатаВремя(1,1,1) ТОГДА
	|	      	
	|	      				РАЗНОСТЬДАТ(&ТекущаяДата, Тов.ЗаказПоставщику.ДатаПоступления, СЕКУНДА) + 5*86400
	|	     
	|	       	КОГДА 	ЕСТЬNULL(Пост.СрокДоставки, 0) > 0 И Тов.ЗаказПоставщику.ДатаОкончанияПроизводства <> ДатаВремя(1,1,1) ТОГДА
	|	    			
	|	    				РАЗНОСТЬДАТ(&ТекущаяДата, Тов.ЗаказПоставщику.ДатаОкончанияПроизводства, СЕКУНДА) + Пост.СрокДоставки*86400 + 5*86400
	|	    			                                                                                                            
	|	   		КОГДА 	ЕСТЬNULL(Пост.СрокПроизводства, 0) > 0 ТОГДА 
	|	    		
	|	    				Пост.СрокПроизводства*86400 - РАЗНОСТЬДАТ(Тов.ЗаказПоставщику.Дата, &ТекущаяДата, СЕКУНДА) + Пост.СрокДоставки*86400 + 5*86400
	|	    		
	|	    	КОГДА 	ЕСТЬNULL(Пост.СрокДоставки, 0) > 0 ТОГДА
	|	    				
	|	    				Пост.СрокДоставки*86400 + 5*86400
	|	    	ИНАЧЕ
	|	    		0
	|	    	КОНЕЦ
	|	ИНАЧЕ 0
	|	КОНЕЦ СрокПоЗаказу
	|			
	|ПОМЕСТИТЬ СрокиПоставкиПоИнвойсуЗаказуПоставщику
	|ИЗ
	|	ЕдутКНам Тов
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|	
	|		ПоставщикиВсе Пост
	|	
	|	ПО  Тов.Номенклатура = Пост.Номенклатура И  Тов.Контрагент = Пост.Контрагент
 	|
	|;
	// вычисляем сроки поставки товаров из списка, берем данные из заказов поставщику/инвойсах если есть, если нет - то из справочных данных

	|ВЫБРАТЬ
	|	ЕСТЬNULL(Зак.Номенклатура, Пост.Номенклатура) Номенклатура,
	|	МИНИМУМ(
	|			ВЫБОР КОГДА ЕСТЬNULL(СрокПоИнвойсу, 0) = 0 ТОГДА 
	|	
	|				ВЫБОР КОГДА ЕСТЬNULL(СрокПоЗаказу,0) = 0 ТОГДА  
	|	
	|					ВЫБОР КОГДА ЕСТЬNULL(Пост.СрокПроизводства, 0)*86400 + ЕСТЬNULL(Пост.СрокДоставки*86400, 0) > 0 ТОГДА
	|
	|							ЕСТЬNULL(Пост.СрокПроизводства, 0)*86400 + ЕСТЬNULL(Пост.СрокДоставки*86400, 0) + 5*86400 ИНАЧЕ 0 КОНЕЦ
	|                                                                                                             
	|					ИНАЧЕ ЕСТЬNULL(СрокПоЗаказу,0) КОНЕЦ 
	|	
	|			ИНАЧЕ ЕСТЬNULL(СрокПоИнвойсу,0) 
	|			КОНЕЦ
	|	)	СрокПоставки
	|
	|ПОМЕСТИТЬ СрокиПоставки
	|ИЗ
	|	СрокиПоставкиПоИнвойсуЗаказуПоставщику Зак
	|
	|	ПОЛНОЕ СОЕДИНЕНИЕ
	|
	|	Поставщики Пост
	|
	|	ПО Зак.Номенклатура = Пост.Номенклатура
	|
	|СГРУППИРОВАТЬ ПО ЕСТЬNULL(Зак.Номенклатура, Пост.Номенклатура)
	|;
	// -> 01.12.2016  belova}
	|
	|ВЫБРАТЬ
	|	Спр.Ссылка							guid
	|" + ?(Области.свойство("Поля") ИЛИ Области.свойство("Остатки"), "
	|	, ВЫБОР КОГДА ВнешниеТовары.Товар Есть NULL ТОГДА ""false"" ИНАЧЕ ""true"" КОНЕЦ КАК external
	|", "") + "
	
	|" + ?(Области.свойство("Комплектация") ИЛИ Области.свойство("Поля"), "
	|	,Спр.Комплектация 					complectation_string
	|", "") + "
	
	|" + ?(Области.свойство("Поля"), "
	|	,ПорядковыйНомер					id_number,
	|	Спр.Код								garage_sku, 
	|	Спр.Артикул							sku, 
	|	Спр.Производитель.Импорт			import,
	|	ВЫБОР КОГДА ЕСТЬNULL(Сроки.СрокПоставки , 0) < 0 ТОГДА 0 ИНАЧЕ ЕСТЬNULL(Сроки.СрокПоставки , 0) КОНЕЦ shipping_time,
	//|	ВЫБОР КОГДА Спр.ТопТовар ТОГДА 
	//|		ВЫБОР КОГДА Спр.sorting_weight = 0
	//|		ТОГДА ЕСТЬNULL(Спр.Ранг, 99999)
	//|		ИНАЧЕ Спр.sorting_weight КОНЕЦ
	//|	ИНАЧЕ 
	|	Спр.sorting_weight + ЕСТЬNULL(Спр.Производитель.sorting_weight,0) sorting_weight,
//	|	КОНЕЦ КАК sorting_weight,
	|	Спр.h1, 
	|	Спр.Описание 						description,
	|	Спр.meta_description,
	|	Спр.meta_keywords,
	|	ВЫБОР КОГДА Спр.НаименованиеИнтернет = """" ТОГДА Спр.Наименование ИНАЧЕ Спр.НаименованиеИнтернет КОНЕЦ	name,
	|	Спр.title 							title,
	|	Спр.alies							alias,
//	|	Спр.ОписаниеКороткое				short_description,
//	|	Спр.МнениеЭксперта					expert,
	|	ОбратитьВнимание                    warning,
	|	Особенности                         application,
	|	Триггер                             trigger,
	|   Синонимы                            synonyms,
	|	ЛучшееПредложение                   ЛучшееПредложение,
	|	ПреимуществаЛучшегоПредложения      ПреимуществаЛучшегоПредложения,
	|	ЕдиницаИзмерения.Наименование 		in_stock_units,
	|	ДатаОжидания						date_expected,
	|	ВЫБОР КОГДА Родитель"+Сайт+".ВыгружатьНаСайт ТОГДА Родитель"+Сайт+" ИНАЧЕ тДополнительныеРодители.Первый КОНЕЦ КАК category,
	|	Производитель						manufacturer,
	|	Вес									weight,
	|	Объем								geometry,
	|	ЦенГр.ЦеноваяГруппа					price_group,
	|	ЦенГр.ЦеноваяГруппа.Наименование	price_group_title,
	
	|	ВЫБОР
	|		КОГДА 
	|			ЕСТЬNULL(Спр.Замена.ВыгружатьНаСайт, ЛОЖЬ) = ИСТИНА И 
	|			ЕСТЬNULL(Спр.Замена.Родитель"+Сайт+".ВыгружатьНаСайт, ЛОЖЬ) = ИСТИНА 
	|		ТОГДА Спр.Замена
	|		ИНАЧЕ null 
	|	КОНЕЦ new_product,
	
	|	Гарантия.Наименование				Гарантия_Наименование,
	|	Гарантия.Текст						Гарантия_Текст,
	|	Гарантия.Картинка					Гарантия_Картинка,
	|	ВЫБОР КОГДА Новинки.Товар Есть NULL ТОГДА ""false"" ИНАЧЕ ""true"" КОНЕЦ КАК is_new,
	|   Неопределено как article_guids,
	|	Спр.ПометкаУдаления,
	|	Спр.ДляВсехРегионов                 sell_everywhere,
	|	Спр.ВыгружатьНаСайт					enabled,
	|	Спр.ВыгружатьНаСайт					ВыгружатьНаСайт
	|", "") + "
	
	|ИЗ 		
	|	Справочник.Номенклатура КАК Спр
	
	//|" + ?(Области.свойство("Поля"), "
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	тДополнительныеРодители КАК тДополнительныеРодители
	|	ПО Спр.Ссылка = тДополнительныеРодители.Товар
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	СрокиПоставки Сроки
	|   ПО Спр.Ссылка = Сроки.Номенклатура
	|" + ?(Области.свойство("Поля") ИЛИ Области.свойство("Остатки"), "
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	ВнешниеТовары ВнешниеТовары
	|	ПО Спр.Ссылка = ВнешниеТовары.Товар
	|", "") + "
	//|", "") + "
	
	|" + ?(Области.свойство("Поля"), "
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ЦеноваяГруппаТовара ЦенГр
	|	ПО Спр.Ссылка = ЦенГр.Номенклатура
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Новинки Новинки
	|	ПО Спр.Ссылка = Новинки.Товар
	|", "") + "
	
	
	|ГДЕ НЕ ВЫБОР КОГДА ЕСТЬNULL(Родитель"+Сайт+".ВыгружатьНаСайт, Истина) ТОГДА Родитель"+Сайт+" ИНАЧЕ ЕСТЬNULL(тДополнительныеРодители.Первый, Родитель"+Сайт+")КОНЕЦ ЕСТЬ NULL И " + ДопФильтр + "
	|"); ид.Поля = сч; сч = сч + 1;
	
	// Доп свойства
	
	Если Области.Свойство("Свойства") Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|" + ?(БратьДопТаблицыОтсюда = Неопределено, "
		|;
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Номенклатура		 	Товар,
		|	Свойство				guid,
		|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(Значение) = ТИП(Число) ТОГДА Значение ИНАЧЕ Представление(Значение) КОНЕЦ value,
		|	" + ПолучитьТекстПредставленияВариантаСвойства("Свойство.") + ",
		|	Представление(Свойство.ЕдиницаИзмерения)		units,
		|	Сортировка  									sorting_weight
		|ИЗ 		
		|	РегистрСведений.ЗначенияДополнительныхРеквизитовНоменклатуры
		|ГДЕ
		|	Номенклатура В(ВЫБРАТЬ Ссылка ИЗ СписокТоваров)
		| И НЕ Свойство.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Ссылка 					Товар,
		|	""weight""				guid,
		|	Ссылка.Вес				value,
		|	""""					variant,
		|	""кг""					units,
		|	0						Сортировка
		|ИЗ
		|	СписокТоваров
		| УПОРЯДОЧИТЬ ПО Сортировка
		|", текстПустышка);
		
		ид.Свойства = сч; сч = сч + 1;
	КонецЕсли;
	
	// Комплектация
	
	Если Области.Свойство("Комплектация") Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|;
		|ВЫБРАТЬ
		|	Табл.Ссылка		 			Товар,
		|	ВЫБОР КОГДА Табл.Товар ССЫЛКА Справочник.Номенклатура И НЕ Табл.Товар.ЭтоГруппа ТОГДА Табл.Товар ИНАЧЕ Неопределено КОНЕЦ product_guid,
		|	ВЫБОР КОГДА Табл.Товар ССЫЛКА Справочник.Номенклатура И Табл.Товар.ЭтоГруппа ТОГДА Табл.Товар ИНАЧЕ Неопределено КОНЕЦ product_category_guid,
		|	ВЫБОР КОГДА Табл.Товар ССЫЛКА Справочник.Номенклатура ТОГДА Неопределено ИНАЧЕ Табл.Товар КОНЕЦ	text,
		|	Табл.Значение		value,
		|	Табл.Количество		count
		|ИЗ 		
		|	Справочник.Номенклатура.ТаблицаКомплектации КАК Табл
		|ГДЕ
		|	Ссылка В(ВЫБРАТЬ Ссылка ИЗ СписокТоваров)
		|	И ВЫБОР КОГДА Табл.Товар ССЫЛКА Справочник.Номенклатура И НЕ Табл.Товар.Родитель = Значение(Справочник.Номенклатура.ПустаяСсылка) ТОГДА Табл.Товар.ВыгружатьНаСайт И Табл.Товар.Родитель.ВыгружатьНаСайт ИНАЧЕ ИСТИНА КОНЕЦ
		|	И ВЫБОР КОГДА Табл.Товар ССЫЛКА Справочник.Номенклатура И Табл.Товар.Родитель = Значение(Справочник.Номенклатура.ПустаяСсылка) ТОГДА Табл.Товар.ВыгружатьНаСайт ИНАЧЕ ИСТИНА КОНЕЦ
		|УПОРЯДОЧИТЬ ПО
		|	Табл.НомерСтроки
		|";
		
		ид.Комплектация = сч; сч = сч + 1;
	КонецЕсли;
	
	// Краткое Описание
	
	Если Области.Свойство("КраткоеОписание") Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|;
		|ВЫБРАТЬ
		|	Табл.Ссылка		 		Товар,
		|	Табл.НомерСтроки 		sorting_weight,
		|	Табл.Картинка			image,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(Табл.Описание) = ТИП(Справочник.КраткиеОписания)
		|			ТОГДА ВЫРАЗИТЬ(Табл.Описание.Описание КАК СТРОКА(500))
		|		ИНАЧЕ Табл.Описание
		|	КОНЕЦ КАК text,
        //|	Табл.Описание.Описание	text,
		//|	Табл.Описание	text,
		|   Табл.Заголовок          title
		|ИЗ 		
		|	Справочник.Номенклатура.КороткоеОписание КАК Табл
		|ГДЕ
		|	Ссылка В(ВЫБРАТЬ Ссылка ИЗ СписокТоваров)
		|УПОРЯДОЧИТЬ ПО
		|	Табл.НомерСтроки
		|";
				
		
		ид.КраткоеОписание = сч; сч = сч + 1;
	КонецЕсли;
	
	// Инструкции
	
	Если Области.Свойство("Инструкции") Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|;
		|ВЫБРАТЬ
		|	Табл.Ссылка		 				Товар,
		|	Табл.НомерСтроки 				sorting_weight,
		|	Табл.Инструкция					file,
		|	Табл.Инструкция.Наименование	name
		|ИЗ 		
		|	Справочник.Номенклатура.Инструкции КАК Табл
		|ГДЕ
		|	Ссылка В(ВЫБРАТЬ Ссылка ИЗ СписокТоваров)
		|УПОРЯДОЧИТЬ ПО
		|	Табл.НомерСтроки
		|";
		
		ид.Инструкции = сч; сч = сч + 1;
	КонецЕсли;
	
	// ВидеоОбзоры
	
	Если Области.Свойство("ВидеоОбзоры") Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|;
		|ВЫБРАТЬ
		|	Табл.Ссылка		 				Товар,
		|	Табл.НомерСтроки 				sorting_weight,
		|	Табл.СсылкаНаВидео.Наименование	title,
		|	Табл.СсылкаНаВидео.URL			link,
		|	Табл.СсылкаНаВидео.iframe		iframe,
		|	Табл.СсылкаНаВидео.Описание		text
		|ИЗ 		
		|	Справочник.Номенклатура.ВидеоОбзоры КАК Табл
		|ГДЕ
		|	Ссылка В(ВЫБРАТЬ Ссылка ИЗ СписокТоваров)
		|УПОРЯДОЧИТЬ ПО
		|	Табл.НомерСтроки
		|";
		
		ид.ВидеоОбзоры = сч; сч = сч + 1;
	КонецЕсли;
	
	// Доп родители
	
	Если Области.Свойство("Родители") Тогда
		
		//Запрос.Текст = Запрос.Текст + "
		//|;
		//|ВЫБРАТЬ
		//|	Ссылка 					Товар,
		//|	Родитель				category_guid
		//|ИЗ
		//|	Справочник.Номенклатура.ДополнительныеРодители
		//|ГДЕ
		//|	Ссылка В(ВЫБРАТЬ Ссылка ИЗ СписокТоваров)
		//|	И Родитель.ВыгружатьНаСайт
		//|
		//|ОБЪЕДИНИТЬ ВСЕ
		//|
		//|ВЫБРАТЬ
		//|	Ссылка 					Товар,
		//|	Ссылка.Родитель			category_guid
		//|ИЗ
		//|	СписокТоваров
		//|ГДЕ
		//|	Ссылка.Родитель.ВыгружатьНаСайт
		//|
		//|";
		
		Запрос.Текст = Запрос.Текст + "
		|;
		|ВЫБРАТЬ
		|	Ссылка 					Товар,
		|	Родитель				category_guid
		|ИЗ
		|	Справочник.Номенклатура.ДополнительныеРодители
		|ГДЕ
		|	Ссылка В(ВЫБРАТЬ Ссылка ИЗ СписокТоваров)
		|	И Родитель.ВыгружатьНаСайт и Родитель Ссылка Справочник.Номенклатура"+СуффиксНом+"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Ссылка 					Товар,
		|	Ссылка.Родитель"+Сайт+" category_guid
		|ИЗ
		|	СписокТоваров
		|ГДЕ
		|	Ссылка.Родитель"+Сайт+".ВыгружатьНаСайт
		|
		|";
		
		ид.Родители = сч; сч = сч + 1;
	КонецЕсли;
	
		// Доп категории партера	
	Если Области.Свойство("КатегорииПартнеров") Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|;
		|ВЫБРАТЬ
		|	Номенклатура 					Товар,
		|	Контрагент.ИдДляСайта				category_guid
		|ИЗ
		|	РегистрСведений.ТоварыДляПередачи.СрезПоследних(&ТекущаяДата) КАК Табл
		|ГДЕ
		|	Номенклатура В(ВЫБРАТЬ Ссылка ИЗ СписокТоваров)и
		|	Табл.Использовать
		|";
		
		
		ид.КатегорииПартнеров = сч; сч = сч + 1;
	КонецЕсли;

	
	// Картинки
	
	Если Области.Свойство("Картинки") Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|;
		|ВЫБРАТЬ
		|	Ссылка image, ВЫБОР КОГДА ЭтоПредставлениеОбъекта ТОГДА 0 ИНАЧЕ 1 КОНЕЦ КАК position, Владелец Товар
		|ИЗ
		|	Справочник.КартинкиНоменклатуры
		|ГДЕ
		|	Владелец В(ВЫБРАТЬ Ссылка ИЗ СписокТоваров)
		|	И ВыгружатьНаСайт
		|
		|УПОРЯДОЧИТЬ ПО position УБЫВ
		|";
		
		ид.Картинки = сч; сч = сч + 1;
	КонецЕсли;	
	
	// Сопутствующие
	
	Если Области.Свойство("Сопутствующие") Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|;
		|ВЫБРАТЬ
		|	Номенклатура1 Товар,
		|	Номенклатура2 related_product_guid,
		|	sorting_weight
		|ИЗ
		|	РегистрСведений.СопутствующиеТовары КАК СопутствующиеТовары
		|ГДЕ
		|	Номенклатура1 В (ВЫБРАТЬ Ссылка ИЗ СписокТоваров)
		|	И Номенклатура2.ВыгружатьНаСайт И Номенклатура2.Родитель.ВыгружатьНаСайт
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Номенклатура2 Товар,
		|	Номенклатура1 related_product_guid,
		|	sorting_weight
		|ИЗ
		|	РегистрСведений.СопутствующиеТовары КАК СопутствующиеТовары
		|ГДЕ
		|	Номенклатура2 В (ВЫБРАТЬ Ссылка ИЗ СписокТоваров)
		|	И Номенклатура1.ВыгружатьНаСайт И Номенклатура1.Родитель.ВыгружатьНаСайт
		|";
		
		ид.Сопутствующие = сч; сч = сч + 1;
	КонецЕсли;
	
	// Сопутствующие
	
	Если Области.Свойство("Аналоги") Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|;
		|ВЫБРАТЬ
		|	Номенклатура1 Товар,
		|	Номенклатура2 similar_product_guid,
		|	sorting_weight
		|ИЗ
		|	РегистрСведений.АналогиНоменклатуры КАК АналогиНоменклатуры
		|ГДЕ
		|	Номенклатура1 В (ВЫБРАТЬ Ссылка ИЗ СписокТоваров)
		|	И Номенклатура2.ВыгружатьНаСайт И Номенклатура2.Родитель.ВыгружатьНаСайт
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Номенклатура2 Товар,
		|	Номенклатура1 similar_product_guid,
		|	sorting_weight
		|ИЗ
		|	РегистрСведений.АналогиНоменклатуры КАК АналогиНоменклатуры
		|ГДЕ
		|	Номенклатура2 В (ВЫБРАТЬ Ссылка ИЗ СписокТоваров)
		|	И Номенклатура1.ВыгружатьНаСайт И Номенклатура1.Родитель.ВыгружатьНаСайт
		|";
		
		ид.Аналоги = сч; сч = сч + 1;
	КонецЕсли;
	
	    //Статьи
    Если Области.Свойство("Статьи") Тогда
		
		
		Запрос.Текст = Запрос.Текст + "
		|;
		|ВЫБРАТЬ
		|	ТоварыИСтатьи.Объект КАК Товар,
		|	ТоварыИСтатьи.Статья КАК article_guids
		|ИЗ
		|	РегистрСведений.ТоварыИСтатьи КАК ТоварыИСтатьи
		|ГДЕ Не ТоварыИСтатьи.Статья.ПометкаУдаления И ТоварыИСтатьи.Статья.ВыгружатьНаСайт и
		|	ТоварыИСтатьи.Объект В(ВЫБРАТЬ Ссылка ИЗ СписокТоваров) и ТоварыИСтатьи.Объект.ВыгружатьНаСайт
		|";
		
		ид.Статьи = сч; сч = сч + 1;

	КонецЕсли;
	
	
	
	// Остатки
	
	Если Области.Свойство("Остатки") Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|;
		|ВЫБРАТЬ
		|	Ост.Номенклатура Товар,
		|	ВЫБОР КОГДА Ост.Склад.ОсновнойСкладНаСайте = Значение(Справочник.Склады.ПустаяСсылка) ТОГДА Ост.Склад ИНАЧЕ Ост.Склад.ОсновнойСкладНаСайте КОНЕЦ КАК warehouse_guid,
		|	ЕСТЬNULL(Ост.КоличествоОстаток,0) - ЕСТЬNULL(Рез.КоличествоОстаток,0) num_in_stock,
		|	0 squares_count
		|Поместить Остатки
		|ИЗ
		|	Регистрнакопления.ТоварыНаСкладах.Остатки(,Номенклатура В(ВЫБРАТЬ Ссылка ИЗ СписокТоваров) И Склад.ВыгружатьНаСайт) КАК Ост
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Регистрнакопления.ТоварыВРезерве.Остатки(,Номенклатура В(ВЫБРАТЬ Ссылка ИЗ СписокТоваров) И Размещение.ВыгружатьНаСайт) КАК Рез
		|ПО
		|	Ост.Номенклатура 	= Рез.Номенклатура И
		|	Ост.Склад 			= Рез.Размещение
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Ост.Номенклатура Товар,
		|	Ост.Склад		 warehouse_guid,
		|	ЕСТЬNULL(Ост.КоличествоОстаток,0) - ЕСТЬNULL(Рез.КоличествоОстаток,0) num_in_stock,
		|	0 squares_count
		|ИЗ
		|	Регистрнакопления.ТоварыНаСкладах.Остатки(,Номенклатура В(ВЫБРАТЬ Ссылка ИЗ СписокТоваров) И Склад.ВыгружатьНаСайт И Склад.ВыгружатьНаСайтВместеСОсновным) КАК Ост
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Регистрнакопления.ТоварыВРезерве.Остатки(,Номенклатура В(ВЫБРАТЬ Ссылка ИЗ СписокТоваров) И Размещение.ВыгружатьНаСайт И Размещение.ВыгружатьНаСайтВместеСОсновным) КАК Рез
		|ПО
		|	Ост.Номенклатура 	= Рез.Номенклатура И
		|	Ост.Склад 			= Рез.Размещение
		|
		|;
		|ВЫБРАТЬ
		|	Ост.Товар 				Товар,
		|	Ост.warehouse_guid 		warehouse_guid,
		|	Сумма(num_in_stock) 	num_in_stock,
		|	Сумма(squares_count)	squares_count
		|ИЗ
		|	Остатки КАК Ост
		|СГРУППИРОВАТЬ ПО
		|	Ост.Товар, Ост.warehouse_guid
		|";
		
		ид.Остатки = сч + 1; сч = сч + 2;
	КонецЕсли;	
	
	// Цены
	
	Если Области.Свойство("Цены") Тогда
		
		Запрос.Текст = Запрос.Текст + "
		//|;
		//|ВЫБРАТЬ
		//|	Цен.Номенклатура Товар,
		//|	Цен.ТипЦен price_type_guid,
		//|	ВЫБОР КОГДА Цен.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) ТОГДА 1 ИНАЧЕ Цен.Упаковка.Коэффициент КОНЕЦ amount,
		//|	Выразить(ЕСТЬNULL(Акц.НоваяЦена, Цен.Цена) * (ЕСТЬNULL(Вал.Курс, 1) * ЕСТЬNULL(ВалТип.Кратность, 1)) / (ЕСТЬNULL(ВалТип.Курс, 1) * ЕСТЬNULL(Вал.Кратность, 1)) КАК ЧИСЛО(15,2)) КАК price
		//|ИЗ
		//|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(,  ТипЦен.ВыгружатьНаСайт И Номенклатура В(ВЫБРАТЬ Ссылка ИЗ СписокТоваров)) Цен
		//|
		//|ЛЕВОЕ СОЕДИНЕНИЕ
		//|	( 	ВЫБРАТЬ ТипЦен, Номенклатура, НоваяЦена
		//|		ИЗ РегистрСведений.Акция.СрезПоследних(&ТекущаяДата, Номенклатура  В(ВЫБРАТЬ ссылка ИЗ СписокТоваров) И ТипЦен.ВыгружатьНаСайт)
		//|		ГДЕ Акция <> Значение(Документ.Акция.ПустаяСсылка))  Акц 
		//|ПО 
		//|	Цен.Номенклатура = Акц.Номенклатура И Цен.ТипЦен = Акц.ТипЦен
		//|
		//|ЛЕВОЕ СОЕДИНЕНИЕ 	РегистрСведений.КурсыВалют.СрезПоследних() Вал
		//|ПО 				Цен.Валюта = Вал.Валюта
		//|
		//|ЛЕВОЕ СОЕДИНЕНИЕ	РегистрСведений.КурсыВалют.СрезПоследних(, Валюта = &ВалютаТипаЦен) ВалТип
		//|ПО Цен.ТипЦен.Валюта = ВалТип.Валюта
		//|
		//|ГДЕ
		//|	Цен.ТипЦен.ВыгружатьНаСайт
		//|";
			
		|;
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Цен.Цена * (ЕСТЬNULL(ВалЦен.Курс, 1) * ЕСТЬNULL(ВалТек.Кратность, 1)) / (ЕСТЬNULL(ВалТек.Курс, 1) * ЕСТЬNULL(ВалЦен.Кратность, 1)) КАК price,
		|	Цен.Номенклатура Товар,
		|	Коэффициент amount,
		|	Цен.ТипЦен price_type_guid
		|ИЗ
		|(
		|	ВЫБРАТЬ
		|		Цен.Номенклатура, 
		|		Выбор когда ЕСТЬNULL(Акц.НоваяЦена, 0) = 0 тогда Цен.Цена иначе Акц.НоваяЦена конец Цена, 
		|		Выбор когда ЕСТЬNULL(Акц.НоваяЦена, 0) = 0 тогда Цен.Валюта иначе Акц.Валюта конец Валюта, 
		|		Цен.ТипЦен,
		|		ВЫБОР КОГДА Цен.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) ТОГДА 1 ИНАЧЕ Цен.Упаковка.Коэффициент КОНЕЦ Коэффициент
		|	ИЗ
		|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекущаяДата, ТипЦен.ВыгружатьНаСайт И Номенклатура В(ВЫБРАТЬ Ссылка ИЗ СписокТоваров)) Цен
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.Акция.СрезПоследних(&ТекущаяДата, ТипЦен.ВыгружатьНаСайт И Номенклатура В(ВЫБРАТЬ Ссылка ИЗ СписокТоваров)) Акц
		|	ПО
		|       Цен.Номенклатура = Акц.Номенклатура И 
		|		Цен.ТипЦен = Акц.ТипЦен
		|
		|	ГДЕ
		|		Цена <> 0
		|
		|) Цен
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата) ВалЦен
		|ПО Цен.Валюта = ВалЦен.Валюта
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата, Валюта = &ВалютаТипаЦен) ВалТек 
		|ПО ИСТИНА
		|";
		ид.Цены = сч; сч = сч + 1;
	КонецЕсли;	
	
	// Меню
	
	Если Области.Свойство("Меню") Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|" + ?(БратьДопТаблицыОтсюда = Неопределено, "
		|;
		|ВЫБРАТЬ 
		|	Объект Товар, 
		|	Меню																				guid,
		|	Родитель																			parent_guid, 
		|	ВЫБОР КОГДА Наименование = """" ТОГДА Меню.Наименование ИНАЧЕ Наименование КОНЕЦ 	link_title,
		|	ВЫБОР КОГДА ВЫРАЗИТЬ(Текст КАК СТРОКА(1)) = """" ТОГДА Меню.Текст ИНАЧЕ Текст КОНЕЦ link_text,
		|	ВЫБОР КОГДА Вес = 0 ТОГДА Меню.Вес ИНАЧЕ Вес КОНЕЦ 									sort_weight
		|ИЗ 
		|	РегистрСведений.ЧастныеСвойстваМенюОбъекта
		|ГДЕ 	
		|	Объект ССЫЛКА Справочник.Номенклатура И
		|	Объект В(ВЫБРАТЬ Ссылка ИЗ СписокТоваров)
		|", текстПустышка) + "
		|";
		
		ид.Меню = сч; сч = сч + 1;
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ПустаяАкция", Документы.Акция.ПустаяСсылка());

	
	Если СсылкаТовар <> Неопределено 		Тогда 	Запрос.УстановитьПараметр("Ссылка"			, СсылкаТовар) КонецЕсли;
	Если ЗначениеЗаполнено(СсылкаРодитель) 	Тогда 	Запрос.УстановитьПараметр("Родитель"		, СсылкаРодитель) КонецЕсли;
	Если ЗначениеЗаполнено(массивСсылок) 	Тогда 	Запрос.УстановитьПараметр("массивСсылок"	, массивСсылок) КонецЕсли;
	
	ТипЦеныСайта = Справочники.ТипыЦен.ПолучитьСсылку(Новый УникальныйИдентификатор("a2896017-fe5f-11dc-a014-001731520b3d"));
	Запрос.УстановитьПараметр("ВалютаТипаЦен", ТипЦеныСайта.Валюта);
	
#КонецОбласти
	
	пустаяТаблица = Новый ТаблицаЗначений; пустаяТаблица.Колонки.Добавить("Товар");

	Пакеты 		= Запрос.ВыполнитьПакет();
	Товары 		= Новый Массив;
	Таблица		= Пакеты[ид.Поля].Выгрузить(); ПослИнд = Таблица.Количество() - 1;
	Свойства	= ?(Области.Свойство("Свойства"), Пакеты[ид.Свойства].Выгрузить()	, пустаяТаблица); ПоляСвойств 	= ПолучитьПоляДляСтруктуры("Товар", Свойства.Колонки);
	Родители	= ?(Области.Свойство("Родители"), Пакеты[ид.Родители].Выгрузить()	, пустаяТаблица); ПоляРодителей = ПолучитьПоляДляСтруктуры("Товар", Родители.Колонки);
	
	КатегорииПартнеров	= ?(Области.Свойство("КатегорииПартнеров"), Пакеты[ид.КатегорииПартнеров].Выгрузить()	, пустаяТаблица); 
	
	тКартинки	= ?(Области.Свойство("Картинки"), Пакеты[ид.Картинки].Выгрузить()	, пустаяТаблица); ПоляКартинок 	= ПолучитьПоляДляСтруктуры("Товар", тКартинки.Колонки);
	Остатки		= ?(Области.Свойство("Остатки")	, Пакеты[ид.Остатки].Выгрузить()	, пустаяТаблица); ПоляОстатков 	= ПолучитьПоляДляСтруктуры("Товар", Остатки.Колонки);
	Цены		= ?(Области.Свойство("Цены")	, Пакеты[ид.Цены].Выгрузить()		, пустаяТаблица); ПоляЦен 		= ПолучитьПоляДляСтруктуры("Товар", Цены.Колонки);
	Меню		= ?(Области.Свойство("Меню")	, Пакеты[ид.Меню].Выгрузить()		, пустаяТаблица); ПоляМеню 		= ПолучитьПоляДляСтруктуры("Товар", Меню.Колонки);
	Комплект	= ?(Области.Свойство("Комплектация"), Пакеты[ид.Комплектация].Выгрузить()	, пустаяТаблица); ПоляКомплектация 	= ПолучитьПоляДляСтруктуры("Товар", Комплект.Колонки);
	КраткоеОписание = ?(Области.Свойство("КраткоеОписание"), Пакеты[ид.КраткоеОписание].Выгрузить()	, пустаяТаблица); ПоляКраткоеОписание 	= ПолучитьПоляДляСтруктуры("Товар", КраткоеОписание.Колонки);
	Инструкции 	= ?(Области.Свойство("Инструкции"), Пакеты[ид.Инструкции].Выгрузить(), пустаяТаблица); ПоляИнструкции = ПолучитьПоляДляСтруктуры("Товар", Инструкции.Колонки);
	ВидеоОбзоры 	= ?(Области.Свойство("ВидеоОбзоры"), Пакеты[ид.ВидеоОбзоры].Выгрузить(), пустаяТаблица); ПоляВидеоОбзоры = ПолучитьПоляДляСтруктуры("Товар", ВидеоОбзоры.Колонки);
	Сопутствующие 	= ?(Области.Свойство("Сопутствующие"), Пакеты[ид.Сопутствующие].Выгрузить(), пустаяТаблица); ПоляСопутствующие = ПолучитьПоляДляСтруктуры("Товар", Сопутствующие.Колонки);
	Аналоги 	= ?(Области.Свойство("Аналоги"), Пакеты[ид.Аналоги].Выгрузить(), пустаяТаблица); ПоляАналоги = ПолучитьПоляДляСтруктуры("Товар", Аналоги.Колонки);
    Статьи 	= ?(Области.Свойство("Статьи"), Пакеты[ид.Статьи].Выгрузить(), пустаяТаблица); ПоляСтатьи = ПолучитьПоляДляСтруктуры("Товар", Статьи.Колонки);
	
	
	Если БратьДопТаблицыОтсюда = Неопределено Тогда
			УстановитьИндексыТаблицам("Товар", Свойства, 	Родители,КатегорииПартнеров, тКартинки, Остатки, Цены, Комплект, КраткоеОписание, Инструкции, ВидеоОбзоры, Сопутствующие, Аналоги);
	Иначе	УстановитьИндексыТаблицам("Товар", 				Родители,КатегорииПартнеров, тКартинки, Остатки, Цены, Комплект, КраткоеОписание, Инструкции, ВидеоОбзоры, Сопутствующие, Аналоги) КонецЕсли;
	
	ТипЦенРозница = КэшируемыеФункции.ПолучитьТипЦенРозница();
	
	Для Инд = 0 По ПослИнд Цикл
		
		// Получим товар
		
		структураТовар 	= КонвертацияТипов.ПолучитьСтруктуруИзСТрокиТаблицыЗначений(Таблица, Инд);
		Отбор			= Новый Структура("Товар", структураТовар.guid);
		
		Если структураТовар.Свойство("description") И структураТовар.Свойство("short_description") И ПустаяСтрока(структураТовар.short_description) Тогда
			Если Найти(структураТовар.description, "<style") > 0 Тогда
				поз = Найти(структураТовар.description, "<p id=""full-descr"">");
				Если поз > 0 Тогда
					структураТовар.short_description = Сред(структураТовар.description, поз + 19);
					поз2 = Найти(структураТовар.short_description, "</p>");
					структураТовар.short_description = Лев(структураТовар.short_description, поз2 - 1);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Обработаем synonyms
		Если структураТовар.Свойство("synonyms") Тогда
			структураТовар.synonyms = КонвертацияТипов.ПолучитьМассивИзСтроки(структураТовар.synonyms, ",");
		КонецЕсли;
		
		// Лучшие предложения
		
		Если структураТовар.Свойство("ЛучшееПредложение") И структураТовар.Свойство("ПреимуществаЛучшегоПредложения") Тогда 
		
			структураТовар.Вставить("product_advice", Новый Структура("guid, advantages", структураТовар.ЛучшееПредложение,  КонвертацияТипов.ПолучитьМассивИзСтроки(структураТовар.ПреимуществаЛучшегоПредложения, ";")));
			структураТовар.Удалить("ЛучшееПредложение");
			структураТовар.Удалить("ПреимуществаЛучшегоПредложения");
		КонецЕсли;
		
		// Добавим родителей
		
		Если Области.Свойство("Родители") Тогда
			структураТовар.Вставить("available_in_categories", ПолучитьМассивЗначенийИзТаблицы(Родители, Отбор, ПоляРодителей));
		КонецЕсли;
		// Добавим категории партнеров
		
		Если Области.Свойство("КатегорииПартнеров") Тогда
		структураТовар.Вставить("partner_ids", КонвертацияТипов.ПолучитьМассивИзНайденныхЗначенийСтрокТаблицыЗначений(категорииПартнеров,Отбор,"category_guid"));
		КонецЕсли;

		
		// Добавим свойства
		Если Области.Свойство("Свойства") Тогда
			структураТовар.Вставить("properties", ?(БратьДопТаблицыОтсюда = Неопределено,
						ПолучитьМассивЗначенийИзТаблицы(Свойства, Отбор, ПоляСвойств),
						ПолучитьМассивСвойствПоФорматAPI(БратьДопТаблицыОтсюда.Свойства)));
						
			Если НЕ БратьДопТаблицыОтсюда = Неопределено Тогда
				структураТовар.properties.Добавить(новый Структура("guid, value", "weight", структураТовар.guid.Вес));
			КонецЕсли;
		КонецЕсли;
		
		// Добавим комплектацию
		
		Если Области.Свойство("Комплектация") Тогда
			структураТовар.Вставить("complectation", ПолучитьМассивЗначенийИзТаблицы(Комплект, Отбор, ПоляКомплектация));
		КонецЕсли;
		
		// Добавим картинку
		
		Если Области.Свойство("Картинки") Тогда
			структураТовар.Вставить("images", ПолучитьМассивЗначенийИзТаблицы(тКартинки, Отбор, ПоляКартинок));
		КонецЕсли;
		
		// Добавим краткое описание
		
		Если Области.Свойство("КраткоеОписание") Тогда
			структураТовар.Вставить("shorts", ПолучитьМассивЗначенийИзТаблицы(КраткоеОписание, Отбор, ПоляКраткоеОписание));
		КонецЕсли;
		
		// Добавим краткое описание
		
		Если Области.Свойство("Инструкции") Тогда
			структураТовар.Вставить("instructions", ПолучитьМассивЗначенийИзТаблицы(Инструкции, Отбор, ПоляИнструкции));
		КонецЕсли;
		
		Если Области.Свойство("ВидеоОбзоры") Тогда
			структураТовар.Вставить("movies", ПолучитьМассивЗначенийИзТаблицы(ВидеоОбзоры, Отбор, ПоляВидеоОбзоры));
		КонецЕсли;
		
		Если Области.Свойство("Сопутствующие") Тогда
			структураТовар.Вставить("related_products", ПолучитьМассивЗначенийИзТаблицы(Сопутствующие, Отбор, ПоляСопутствующие));
		КонецЕсли;
		
		Если Области.Свойство("Аналоги") Тогда
			структураТовар.Вставить("similar_products", ПолучитьМассивЗначенийИзТаблицы(Аналоги, Отбор, ПоляАналоги));
		КонецЕсли;
		
		Если Области.Свойство("Статьи") Тогда
			структураТовар.Вставить("article_guids", ПолучитьМассивЗначенийИзТаблицы(Статьи, Отбор, ПоляСтатьи));
		КонецЕсли;

		
		// Добавим Остатки
		
		Если Области.Свойство("Остатки") Тогда
			структураТовар.Вставить("enabled",Истина);
			структураТовар.Вставить("in_stock_warehouses", ПолучитьМассивЗначенийИзТаблицы(Остатки, Отбор, ПоляОстатков));
			ОбщКол = 0; Для Каждого ЭлСклада Из структураТовар.in_stock_warehouses Цикл ОбщКол = ОбщКол + ЭлСклада.num_in_stock КонецЦикла;
			структураТовар.Вставить("squares_count_common", ОбщКол);
		КонецЕсли;
		
		// Добавим Цены
		НулевыеЦены = Истина;
		Если Области.Свойство("Цены") Тогда
			структураТовар.Вставить("prices", ПолучитьМассивЗначенийИзТаблицы(Цены, Отбор, ПоляЦен));
			СтрокиЦены = Цены.НайтиСтроки(Новый Структура("Товар, price_type_guid", структураТовар.guid, ТипЦенРозница));
			структураТовар.Вставить("price", ?(СтрокиЦены.Количество(), Новый Структура("amount, price", СтрокиЦены[0].amount, СтрокиЦены[0].price), Неопределено));
		КонецЕсли;
		
		Если структураТовар.Свойство("Гарантия_Наименование") Тогда
			Если ЗначениеЗаполнено(структураТовар.Гарантия_Наименование) Тогда
				гарантия = Новый Структура("title, text, image", структураТовар.Гарантия_Наименование, структураТовар.Гарантия_Текст, структураТовар.Гарантия_Картинка);
	
				структураТовар.Вставить("guarantee", гарантия);
			КонецЕсли;
			
			структураТовар.Удалить("Гарантия_Наименование");
			структураТовар.Удалить("Гарантия_Текст");
			структураТовар.Удалить("Гарантия_Картинка");
		КонецЕсли;
		
		// Запомним
		
		Товары.Добавить(структураТовар); 
	КонецЦикла;
	
	Если СсылкаТовар = Неопределено Тогда
		новВремя = ТекущаяДата();
	
		ЗаписьЖурналаРегистрации("HTTP.Трассировка.api2.get_products",УровеньЖурналаРегистрации.Информация,,,"Окончания метода:
		|Получено элементов в списке " + Товары.Количество() + "
		|Время работы составило " + Строка(новВремя - текВремя) + " сек.
		|Error = " + стрОшибки + "
		|");
	КонецЕсли;
	
	Возврат ЗначениеВозврата(Товары);	
	
КонецФункции

Функция ПолучитьТоварыГуиды(Параметры, стрОшибки = "") Экспорт
	
	НомерНачала 			= ?(Параметры.Свойство("НомерНачала"), Параметры.НомерНачала, Неопределено);
	НомерОкончания 			= ?(Параметры.Свойство("НомерОкончания"), Параметры.НомерОкончания, Неопределено);
	
	ДопФильтр = "НЕ ЭтоГруппа И НЕ ПометкаУдаления И ВыгружатьНаСайт";
	ДопФильтр = ДопФильтр + ?(ЗначениеЗаполнено(НомерНачала), " 	И ПорядковыйНомер >= " + Формат(НомерНачала,"ЧГ="), "");
	ДопФильтр = ДопФильтр + ?(ЗначениеЗаполнено(НомерОкончания), " 	И ПорядковыйНомер <= " + Формат(НомерОкончания,"ЧГ="), "");
	
	Запрос = Новый Запрос("
	
	// Список товаров	
	
	|ВЫБРАТЬ 	Ссылка
	|ИЗ 		Справочник.Номенклатура КАК Спр
	|ГДЕ " + ДопФильтр + "
	|;");
	Таблица=Запрос.Выполнить().Выгрузить();
	
	МассивТовары=Таблица.ВыгрузитьКолонку("ссылка");
	
	Возврат МассивТовары;
	
КонецФункции


Функция ПолучитьСвойстваНоменклатуры(Параметры, стрОшибки = "") Экспорт
	
	// Получим параметры
	
	Ссылка 	= ?(Параметры.Свойство("Ссылка"), 	Параметры.Ссылка, 	Неопределено);
	Гуиды 	= ?(Параметры.Свойство("guids"), 	Параметры.guids, 	Неопределено);
	
	массивСсылок = Новый Массив;
	
	Параметры.Вставить("ДопСвойства", ДопСвойства());
	
	Если НЕ Ссылка = Неопределено Тогда
		массивСсылок.Добавить(Ссылка);
	КонецЕсли;
	Если ЗначениеЗаполнено(Гуиды) Тогда
		Если ТипЗнч(Гуиды) = Тип("Массив") Тогда
			Для каждого гуид Из Гуиды Цикл
				Если НЕ Параметры.ДопСвойства[гуид] = Неопределено Тогда массивСсылок.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыНоменклатуры.ПустаяСсылка()); Продолжить; КонецЕсли;
				
				массивСсылок.Добавить(HTTP.ПолучитьОбъектПоСсылке(ПланыВидовХарактеристик.ДополнительныеРеквизитыНоменклатуры, гуид, стрОшибки));
			КонецЦикла;
		ИначеЕсли ТипЗнч(Гуиды) = Тип("Строка") Тогда
			Если Параметры.ДопСвойства[Гуиды] = Неопределено Тогда
				массивСсылок.Добавить(HTTP.ПолучитьОбъектПоСсылке(ПланыВидовХарактеристик.ДополнительныеРеквизитыНоменклатуры, Гуиды, стрОшибки));
			Иначе
				массивСсылок.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыНоменклатуры.ПустаяСсылка());
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Спр.Ссылка				guid,
	|	Спр.Наименование 		name,
	|	Спр.УчаствуетВФильтре	filter,
	|	" + ПолучитьТекстПредставленияВариантаСвойства() + ",
	|	Представление(ЕдиницаИзмерения) units,
	|	Спр.ПометкаУдаления,
	|	ИСТИНА ВыгружатьНаСайт
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыНоменклатуры Спр
	|ГДЕ 
	|	НЕ ПометкаУдаления " + ?(ЗначениеЗаполнено(массивСсылок), "
	|	И Ссылка В (&массивСсылок)", "") + "
	|");
	
	Если ЗначениеЗаполнено(массивСсылок) Тогда 
		Запрос.УстановитьПараметр("массивСсылок", массивСсылок);
	КонецЕсли;
	
	Свойства = КонвертацияТипов.ПолучитьМассивИзТаблицыЗначений(Запрос.Выполнить().Выгрузить());
	ДобавитьДопСвойства(Свойства, Параметры);
	
	Возврат ЗначениеВозврата(Свойства);
	
КонецФункции
Функция ДопСвойства()
	ДопСвойства = Новый Соответствие;
	ДопСвойства.Вставить("weight", Новый Структура(	"guid, name, filter, units, ПометкаУдаления, ВыгружатьНаСайт", 
													"weight", "Вес", Ложь, "кг",Ложь, Истина));
	
	Возврат ДопСвойства;
КонецФункции // ДопКатегории()
Функция ДобавитьДопСвойства(Свойства, Параметры)
	Ссылка 	= ?(Параметры.Свойство("Ссылка"), 	Параметры.Ссылка, 	Неопределено);
	Гуиды 	= ?(Параметры.Свойство("guids"), 	Параметры.guids, 	Неопределено);
	
	ДопСвойства = Параметры.ДопСвойства;
	
	добавляемыеОбъекты = Новый Соответствие;
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Ложь;
	КонецЕсли;
	Если ЗначениеЗаполнено(Гуиды) Тогда
		Если ТипЗнч(Гуиды) = Тип("Массив") Тогда
			Для каждого гуид Из Гуиды Цикл
				Если НЕ ДопСвойства[гуид] = Неопределено Тогда
					добавляемыеОбъекты.Вставить(гуид, Истина);
				КонецЕсли;
			КонецЦикла;
		Иначе // это строка
			Если НЕ ДопСвойства[Гуиды] = Неопределено Тогда
				добавляемыеОбъекты.Вставить(Гуиды, Истина);
			КонецЕсли;
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(добавляемыеОбъекты) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(добавляемыеОбъекты) Тогда
		Для каждого ДопСвойство Из ДопСвойства Цикл
			добавляемыеОбъекты.Вставить(ДопСвойство.Ключ, Истина);
		КонецЦикла;
	КонецЕсли;
	
	Для каждого кИз Из добавляемыеОбъекты Цикл
		Свойства.Добавить(ДопСвойства[кИз.Ключ]);
	КонецЦикла;
КонецФункции // ДобавитьДопСвойства()

Функция ПолучитьПроизводителей(Параметры, стрОшибки = "") Экспорт
	
	// Получим параметры
	
	Ссылка 	= ?(Параметры.Свойство("Ссылка"), 				Параметры.Ссылка, 				Неопределено);
	guids 	= ?(Параметры.Свойство("guid_manafacture"), 	Параметры.guid_manafacture, 	Неопределено);
	
	массивСсылок = Новый Массив;
	Если НЕ Ссылка = Неопределено Тогда
		массивСсылок.Добавить(Ссылка);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(guids) Тогда
		Если ТипЗнч(guids) = Тип("Массив") Тогда
			Для каждого гуид Из guids Цикл
				массивСсылок.Добавить(HTTP.ПолучитьОбъектПоСсылке(Справочники.Производители, гуид, стрОшибки));
			КонецЦикла;
		ИначеЕсли ТипЗнч(guids) = Тип("Строка") Тогда
			массивСсылок.Добавить(HTTP.ПолучитьОбъектПоСсылке(Справочники.Производители, guids, стрОшибки));
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Спр.Ссылка				guid,
	//|	ВЫБОР КОГДА Спр.sorting_weight = 0 ТОГДА ""null"" ИНАЧЕ Спр.sorting_weight КОНЕЦ sorting_weight,
	|	Спр.sorting_weight,
	|	Спр.h1, 
	|	Спр.Наименование 		name,
	|	Спр.Описание 			description,
	|	Спр.meta_keywords,
	|	Спр.meta_description,
	|	Спр.Логотип				Логотип,
	|	Спр.Страна.Наименование	country,
	|	Ранг 					manufacture_rank,
	|
	|	Спр.ПометкаУдаления,
	|	ИСТИНА ВыгружатьНаСайт
	|ИЗ
	|	Справочник.Производители Спр
	|ГДЕ 
	|	НЕ ПометкаУдаления
	|" + ?(ЗначениеЗаполнено(массивСсылок), "И Ссылка В (&массивСсылок)", "") + "
	|
	|;
	|ВЫБРАТЬ
	|	Табл.Ссылка		 					Производитель,
	|	Табл.НомерСтроки 					sorting_weight,
	|	Табл.Сертификат.Наименование		title,
	|	Табл.Сертификат.Картинка			image,
	|	Табл.Сертификат.Текст				text
	|ИЗ 		
	|	Справочник.Производители.Сертификаты КАК Табл
	|ГДЕ
	|	НЕ Табл.Ссылка.ПометкаУдаления
	|" + ?(ЗначениеЗаполнено(массивСсылок), "И Ссылка В (&массивСсылок)", "") + "
	|УПОРЯДОЧИТЬ ПО
	|	Табл.НомерСтроки
	|");
	
	Запрос.УстановитьПараметр("массивСсылок", массивСсылок);
	
	Пакеты 			= Запрос.ВыполнитьПакет();
	Таблица			= Пакеты[0].Выгрузить(); ПослИнд = Таблица.Количество() - 1;
	Сертификаты		= Пакеты[1].Выгрузить(); ПоляСертификаты = ПолучитьПоляДляСтруктуры("Производитель", Сертификаты.Колонки);
	
	УстановитьИндексыТаблицам("Производитель", Сертификаты);
	
	массивОбъектов = Новый Массив;
	Для Инд = 0 По ПослИнд Цикл
		лПроизводитель = КонвертацияТипов.ПолучитьСтруктуруИзСТрокиТаблицыЗначений(Таблица, Инд);
		
		лПроизводитель.Вставить("logo", лПроизводитель.Логотип.Получить());
		лПроизводитель.Удалить("Логотип");
		
		Отбор = Новый Структура("Производитель", лПроизводитель.guid);
		лПроизводитель.Вставить("certificates", ПолучитьМассивЗначенийИзТаблицы(Сертификаты, Отбор, ПоляСертификаты));
		
		массивОбъектов.Добавить(лПроизводитель);
	КонецЦикла;
	
	Возврат ЗначениеВозврата(массивОбъектов);
КонецФункции
Функция ПолучитьСклады(Параметры, стрОшибки = "") Экспорт
	
	// Получим параметры
	
	Ссылка 	= ?(Параметры.Свойство("Ссылка"),	Параметры.Ссылка,	Неопределено);
	guids 	= ?(Параметры.Свойство("guids"), 	Параметры.guids, 	Неопределено);
	
	массивСсылок = Новый Массив;
	Если НЕ Ссылка = Неопределено Тогда
		массивСсылок.Добавить(Ссылка);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(guids) Тогда
		Если ТипЗнч(guids) = Тип("Массив") Тогда
			Для каждого гуид Из guids Цикл
				массивСсылок.Добавить(HTTP.ПолучитьОбъектПоСсылке(Справочники.Склады, гуид, стрОшибки));
			КонецЦикла;
		ИначеЕсли ТипЗнч(guids) = Тип("Строка") Тогда
			массивСсылок.Добавить(HTTP.ПолучитьОбъектПоСсылке(Справочники.Склады, guids, стрОшибки));
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Спр.Ссылка					guid,
	|	ВЫБОР КОГДА НаименованиеИнтернет = """" ТОГДА Наименование ИНАЧЕ НаименованиеИнтернет КОНЕЦ	title,
	|	ДополнительноеНаименование 	title_full,
	|	СсылкаНаКарту 				map,
	|	Адрес 						adress,
	|	НаСайтеНеПоказыватьВсем		for_dealer,
	|	РазрешеноПолучениеТовараПриСамовывозе for_pickup,
	|
	|	Спр.ПометкаУдаления,
	|	Спр.ВыгружатьНаСайт
	|ИЗ
	|	Справочник.Склады Спр
	|ГДЕ 
	|	НЕ ПометкаУдаления 
	|" + ?(ЗначениеЗаполнено(массивСсылок), "И Ссылка В (&массивСсылок)", "") + "
	|	И ВыгружатьНаСайт
	|");
	
	Запрос.УстановитьПараметр("массивСсылок", массивСсылок);
	
	Возврат ЗначениеВозврата(КонвертацияТипов.ПолучитьМассивИзТаблицыЗначений(Запрос.Выполнить().Выгрузить()));
КонецФункции
Функция ПолучитьЗаказы(Параметры, стрОшибки = "") Экспорт
	
	// Получим параметры
	
	Ссылка 	= ?(Параметры.Свойство("Ссылка"), 	Параметры.Ссылка, 	Неопределено);
	Гуиды 	= ?(Параметры.Свойство("orders"), 	Параметры.orders, 	Неопределено);
	
	массивСсылок = Новый Массив;
	
	Если НЕ Ссылка = Неопределено Тогда
		массивСсылок.Добавить(Ссылка);
	КонецЕсли;
	Если ЗначениеЗаполнено(Гуиды) Тогда
		Если ТипЗнч(Гуиды) = Тип("Массив") Тогда
			Для каждого гуид Из Гуиды Цикл
				массивСсылок.Добавить(HTTP.ПолучитьОбъектПоСсылке(Документы.ИнтернетЗаказПокупателя, гуид, стрОшибки));
			КонецЦикла;
		ИначеЕсли ТипЗнч(Гуиды) = Тип("Строка") Тогда
			массивСсылок.Добавить(HTTP.ПолучитьОбъектПоСсылке(Документы.ИнтернетЗаказПокупателя, Гуиды, стрОшибки));
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Зак.Ссылка 				КАК guid,
	|	Зак.id 			    	КАК  id,
	|	Зак.Номер 				КАК number,
	|	Зак.Дата 				КАК date,
	|	Зак.Сумма		 		КАК total,
	|	Зак.Комментарий 		КАК comment,
	|	Зак.ЭтоЧерновик 		КАК ЭтоЧерновик,
	|	Зак.АдресДоставки 		КАК delivery_address_guid,
	|	Зак.ВариантДоставки 	КАК delivery_variant,
	|	Зак.СкладСамовывоза		КАК warehouse_guid,
	|	Зак.ВидОплаты 			КАК payment_variant,
	|	Зак.СуммаДоставки 		КАК delivery_cost,
	|	Состояния.Состояние		КАК status,
	|	Зак.ПользовательИнтернет КАК user_guid,
	|	ЛимитыОстатки.СуммаОстаток limit,
	|	Зак.МестоположениеСтр	КАК current_location,
	|	БП.Ссылка				КАК СсылкаБП,
	|	Зак.ИНН 				КАК inn,
	|	Зак.is_check 	    	КАК is_check
	|ИЗ
	|	Документ.ИнтернетЗаказПокупателя КАК Зак
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.СостоянияЗаказов.СрезПоследних КАК Состояния
	|ПО
	|	Зак.Ссылка = Состояния.Заказ
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	БизнесПроцесс.ИнтернетЗаявка КАК БП
	|ПО
	|	Зак.Ссылка = БП.Заказ
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.Лимиты.Остатки КАК ЛимитыОстатки
	|ПО
	|	ЛимитыОстатки.Инициатор = Зак.ПользовательИнтернет.ФизЛицо
	|ГДЕ
	|	НЕ Зак.ПометкаУдаления
	|	И (Зак.СайтИсточник = Значение(Перечисление.Сайты.ПустаяСсылка) ИЛИ Зак.СайтИсточник = Значение(Перечисление.Сайты.garage))
	|" + ?(ЗначениеЗаполнено(массивСсылок), "И Зак.Ссылка В (&массивСсылок)", "") + "
	|;
	
	// Товары
	|ВЫБРАТЬ
	|	РегЗак.ИнтернетЗаказ,
	|	РегЗак.Номенклатура,
	|	РегЗак.Упаковка,
	|	РегЗак.Размещение,
	|	РегЗак.ПроцентРучнойСкидки,
	|	РегЗак.Цена,
	|	РегЗак.СуммаОстаток,
	|	РегЗак.ПроцентАвтоматическойСкидки,
	|	РегЗак.КоличествоОстаток
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	РегистрНакопления.ИнтернетЗаказПокупателя.Остатки(, 
	|" + ?(ЗначениеЗаполнено(массивСсылок), "ИнтернетЗаказ В (&массивСсылок)", "") + "
	|	) РегЗак
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РегЗак.ИнтернетЗаказ,
	|	РегЗак.Номенклатура,
	|	РегЗак.Упаковка,
	|	РегЗак.Размещение,
	|	РегЗак.ПроцентРучнойСкидки,
	|	РегЗак.Цена,
	|	РегЗак.СуммаРасход,
	|	РегЗак.ПроцентАвтоматическойСкидки,
	|	РегЗак.КоличествоРасход
	|ИЗ
	|	РегистрНакопления.ИнтернетЗаказПокупателя.ОстаткиИОбороты(,,РЕГИСТРАТОР,,
	|" + ?(ЗначениеЗаполнено(массивСсылок), "ИнтернетЗаказ В (&массивСсылок)", "") + "
	|	) РегЗак
	|ГДЕ
	|	ВЫБОР 	КОГДА РегЗак.ИнтернетЗаказ.Склад.ПередачаТовараМВЗ ИЛИ НЕ РегЗак.ИнтернетЗаказ.МВЗ = Значение(Справочник.МВЗ.ПустаяСсылка) 
	|			ТОГДА РегЗак.Регистратор ССЫЛКА Документ.ПередачаТовара
	|			ИНАЧЕ РегЗак.Регистратор ССЫЛКА Документ.РеализацияТоваров 
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Док.Ссылка,
	|	Док.Номенклатура,
	|	Док.Упаковка,
	|	Док.Размещение,
	|	Док.ПроцентРучнойСкидки,
	|	Док.Цена,
	|	Док.Сумма,
	|	Док.ПроцентАвтоматическойСкидки,
	|	Док.Количество
	|ИЗ
	|	Документ.ИнтернетЗаказПокупателя.Товары КАК Док
	|ГДЕ
	|	НЕ Док.Ссылка.Проведен
	|" + ?(ЗначениеЗаполнено(массивСсылок), " И Док.Ссылка В (&массивСсылок)", "") + "
	|;
	|	ВЫБРАТЬ 
	|		Номенклатура,
	|		ДокументРезерва,
	|		МАКСИМУМ(ВЫБОР КОГДА Размещение = ДокументРезерва.Склад ТОГДА 0 ИНАЧЕ 1 КОНЕЦ) СрокДоставки,
	|		МАКСИМУМ(ВЫБОР КОГДА ЕСТЬNULL(Размещение, Неопределено) ССЫЛКА Справочник.Склады ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ) ЕстьНаСкладе
	|	ПОМЕСТИТЬ РазмещениеТоваров
	|	ИЗ	
	|	РегистрНакопления.ТоварыВрезерве.Остатки(, Номенклатура В(ВЫБРАТЬ Номенклатура ИЗ ТаблицаТоваров) 
	|" + ?(ЗначениеЗаполнено(массивСсылок), " И ДокументРезерва В (&массивСсылок)", "") + "
	|)
	|СГРУППИРОВАТЬ ПО Номенклатура, ДокументРезерва
	|;
	|ВЫБРАТЬ
	|	РегЗак.ИнтернетЗаказ 								КАК Заказ,
	|	РегЗак.Номенклатура 								КАК product_guid,
	|	РегЗак.Цена - ЕстьNULL(Дост.Доставка, 0)			КАК base_price,
	|	РегЗак.Цена - ЕстьNULL(Дост.Доставка, 0) 			КАК price,
	|	РегЗак.СуммаОстаток - ЕстьNULL(Дост.Доставка, 0)	КАК total,
	|	РегЗак.ПроцентАвтоматическойСкидки 					КАК discount,
	|	РегЗак.КоличествоОстаток							КАК quantity,
	|	ИСТИНА												КАК reserve,
	|	ВЫБОР КОГДА Рез.СрокДоставки ЕСТЬ NULL ТОГДА 30
	|		КОГДА Рез.СрокДоставки = 0 ТОГДА 2
	|	    КОГДА Рез.СрокДоставки = 1 ТОГДА 5 КОНЕЦ КАК special_shipping_time,
	|   ЕстьNULL(Дост.Доставка, 0)                          КАК final_delivery_cost
	|ИЗ
	|	ТаблицаТоваров КАК РегЗак                           
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РазмещениеТоваров Рез
	|	ПО Рез.Номенклатура = РегЗак.Номенклатура И Рез.ДокументРезерва = РегЗак.ИнтернетЗаказ
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(ВЫБРАТЬ * ИЗ Документ.ИнтернетЗаказПокупателя.Доставка 
	|" + ?(ЗначениеЗаполнено(массивСсылок), "ГДЕ Ссылка В (&массивСсылок)", "") + "
	|	) Дост 
	|ПО 
	|	Дост.Ссылка = РегЗак.ИнтернетЗаказ
	|	И Дост.Номенклатура = РегЗак.Номенклатура 
	|	И Дост.Упаковка = РегЗак.Упаковка 
	|	И Дост.Размещение  = РегЗак.Размещение 
	|	И Дост.Цена = РегЗак.Цена 
	|	И Дост.ПроцентРучнойСкидки = РегЗак.ПроцентРучнойСкидки 
	|	И Дост.ПроцентАвтоматическойСкидки = РегЗак.ПроцентАвтоматическойСкидки
	|ГДЕ
	|	РегЗак.Номенклатура.ВыгружатьНаСайт И РегЗак.Номенклатура.Родитель.ВыгружатьНаСайт
	|;

	|");
	
	Если ЗначениеЗаполнено(массивСсылок) Тогда 
		Запрос.УстановитьПараметр("массивСсылок", массивСсылок);
	КонецЕсли;
	
	Пакеты 			= Запрос.ВыполнитьПакет();
	Таблица			= Пакеты[0].Выгрузить(); ПослИнд = Таблица.Количество() - 1;
	Товары			= Пакеты[3].Выгрузить(); ПоляТоваров = ПолучитьПоляДляСтруктуры("Заказ", Товары.Колонки);
	
	УстановитьИндексыТаблицам("Заказ", Товары);
	
	массивЗаказов	= Новый Массив;
	Для Инд = 0 По ПослИнд Цикл
		лЗаказ = КонвертацияТипов.ПолучитьСтруктуруИзСТрокиТаблицыЗначений(Таблица, Инд);
		
		Если лЗаказ.ЭтоЧерновик Тогда
			лЗаказ.status = 0;
		Иначе
			лЗаказ.status = HTTP.НомерСтатусаЗаказа(лЗаказ.status);
		КонецЕсли;
		
		лЗаказ.Удалить("ЭтоЧерновик");
	
		Отбор = Новый Структура("Заказ", лЗаказ.guid);
		лЗаказ.Вставить("line_items", ПолучитьМассивЗначенийИзТаблицы(Товары, Отбор, ПоляТоваров));
		
		лЗаказ.total = 0;
		Для каждого item Из лЗаказ.line_items Цикл
			лЗаказ.total = лЗаказ.total + item.total;
		КонецЦикла;
		
		// определим состояние товаров
		СостоянияТоваров = Заказы.ПолучитьСостояниеТоваров(лЗаказ.СсылкаБП,,,Ложь);
		СостоянияТоваров.Индексы.Добавить("Номенклатура");
		special_shipping_time = 0;
		final_delivery_cost   = 0;
		Для каждого line Из лЗаказ.line_items Цикл
			special_shipping_time = МАКС(special_shipping_time, line.special_shipping_time);
			final_delivery_cost   = line.final_delivery_cost +  final_delivery_cost;
			текСтрока = СостоянияТоваров.Найти(line.product_guid, "Номенклатура");
			статусLine = Перечисления.СостояниеСборкиЗаказа.НеСобрано;
			Если НЕ текСтрока = Неопределено Тогда
				статусLine = текСтрока.Состояние;
			КонецЕсли;
			Если статусLine = Перечисления.СостояниеСборкиЗаказа.НеСобрано Тогда
				статусОтгрузки = 0;
			ИначеЕсли статусLine = Перечисления.СостояниеСборкиЗаказа.ОжидаетПеремещения Тогда
				статусОтгрузки = 1;
			ИначеЕсли статусLine = Перечисления.СостояниеСборкиЗаказа.ОжидаетПоступления Тогда
				статусОтгрузки = 2;
			ИначеЕсли статусLine = Перечисления.СостояниеСборкиЗаказа.ОтменаСборки Тогда
				статусОтгрузки = 5;
			ИначеЕсли статусLine = Перечисления.СостояниеСборкиЗаказа.Перемещается Тогда
				статусОтгрузки = 4;
			ИначеЕсли 		статусLine = Перечисления.СостояниеСборкиЗаказа.Отгружен
			 			ИЛИ статусLine = Перечисления.СостояниеСборкиЗаказа.Отправлен
			 			ИЛИ статусLine = Перечисления.СостояниеСборкиЗаказа.Доставлен Тогда
				статусОтгрузки = 3;
			ИначеЕсли статусLine = Перечисления.СостояниеСборкиЗаказа.Собирается Тогда
				статусОтгрузки = 6;
			ИначеЕсли статусLine = Перечисления.СостояниеСборкиЗаказа.Собрано Тогда
				статусОтгрузки = 7;
			КонецЕсли;
			
			line.Вставить("status", статусОтгрузки);
		КонецЦикла;
		//Перечисления.СостояниеСборкиЗаказа.Отгружен
		лЗаказ.Вставить("special_shipping_time", special_shipping_time);
		лЗаказ.Вставить("final_delivery_cost", final_delivery_cost);
		лЗаказ.Удалить("СсылкаБП");
		массивЗаказов.Добавить(лЗаказ);
	КонецЦикла;
	
	Возврат ЗначениеВозврата(массивЗаказов);
	
КонецФункции // ПолучитьЗаказы

Функция ПолучитьПользователей(Параметры, стрОшибки = "") Экспорт
	// Получим параметры
	Ссылка 	= ?(Параметры.Свойство("Ссылка"),	Параметры.Ссылка,	Неопределено);
	guids 	= ?(Параметры.Свойство("guids"), 	Параметры.guids, 	Неопределено);
	
	массивСсылок = ?(Параметры.Свойство("массивСсылок"),	Параметры.массивСсылок,	Новый Массив);
	Если НЕ Ссылка = Неопределено Тогда
		массивСсылок.Добавить(Ссылка);
	КонецЕсли;
	
	Если НЕ Ссылка = Неопределено Тогда
		массивСсылок.Добавить(Ссылка);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(guids) Тогда
		Если ТипЗнч(guids) = Тип("Массив") Тогда
			Для каждого гуид Из guids Цикл
				массивСсылок.Добавить(HTTP.ПолучитьОбъектПоСсылке(Справочники.ПользователиИнтернет, гуид, стрОшибки));
			КонецЦикла;
		ИначеЕсли ТипЗнч(guids) = Тип("Строка") Тогда
			массивСсылок.Добавить(HTTP.ПолучитьОбъектПоСсылке(Справочники.ПользователиИнтернет, guids, стрОшибки));
		КонецЕсли;
	КонецЕсли;
	
	#Область Текст_запроса
	
	Запрос = Новый Запрос("
	
	// Пользователи
	
	|ВЫБРАТЬ
	|	Спр.Ссылка				guid,
	|	Спр.ЭлектроннаяПочта	email,
	|	Спр.НеАктивен	        disable,
	|	ИнформационныеКарты.Ссылка 	ДисконтнаяКарта,
	|	Спр.Контрагент				Контрагент,
	|	Спр.Контрагент.УровеньСкидки   УровеньСкидки,
	|	Спр.Контрагент.УровеньСкидки.Наименование УровеньСкидкиНаименование,
	|	ВЫБОР КОГДА Спр.id = """" ТОГДА Неопределено ИНАЧЕ Спр.id КОНЕЦ КАК id,
	|	ВЫБОР КОГДА Спр.Контрагент = Значение(Справочник.Контрагенты.ПустаяССылка) ТОГДА Спр.ТипЦен ИНАЧЕ Спр.Контрагент.ТипЦен КОНЕЦ КАК price_type_guid,
	|	Спр.Имя 				name,
	|	Спр.Фамилия				surname,
	|	Спр.Отчество 			patronymic,
	|	Спр.ФизЛицо.Контрагент.ОсновнойМенеджер	manager_guid,
	|	Истина					is_legal,
	|	ВЫБОР 	КОГДА Спр.ФизЛицо <> Значение(Справочник.ФизическиеЛица.ПустаяССылка) ТОГДА
	|				ВЫБОР КОГДА Спр.ФизЛицо.Контрагент.Северсталь ТОГДА ""severstal""
	|				ИНАЧЕ ""limit_partner"" КОНЕЦ		
	|			ИНАЧЕ ВЫБОР КОГДА Спр.Дилер ТОГДА ""dealer"" ИНАЧЕ ""user"" КОНЕЦ
	|	КОНЕЦ КАК role,
	|	ВЫБОР 	КОГДА Спр.ФизЛицо <> Значение(Справочник.ФизическиеЛица.ПустаяССылка) 
	|			ТОГДА 1 // ipr
	|			ИНАЧЕ 0 // user
	|	КОНЕЦ КАК label,
	|	ВЫБОР 	КОГДА Спр.ФизЛицо <> Значение(Справочник.ФизическиеЛица.ПустаяССылка) 
	|			ТОГДА Представление(Спр.ФизЛицо.Контрагент)
	|			ИНАЧЕ Неопределено
	|	КОНЕЦ КАК organization,
	|	ВЫБОР 	КОГДА Спр.ФизЛицо <> Значение(Справочник.ФизическиеЛица.ПустаяССылка) 
	|			ТОГДА Спр.ФизЛицо.Контрагент.ИдДляСайта
	|			ИНАЧЕ Неопределено
	|	КОНЕЦ КАК organization_id,
	|	ЕстьNULL(Лимиты.СуммаОстаток, 0) limit,
	|
	|	Спр.ПометкаУдаления,
	|	Истина ВыгружатьНаСайт,
	|	ВЫБОР КОГДА Спр.ЮрФизЛицо = Значение(Перечисление.ЮрФизЛицо.ЮрЛицо) или Спр.ЮрФизЛицо = Значение(Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ КАК type,
	|	Спр.ФизЛицо.Подчиненные.(ФизЛицо guid) people_guids
	|ИЗ 		
	|	Справочник.ПользователиИнтернет КАК Спр
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.Лимиты.Остатки() КАК Лимиты
	|ПО
	|	Спр.ФизЛицо = Лимиты.Инициатор
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
	|ПО
	|	Спр.Контрагент = ИнформационныеКарты.ВладелецКарты
	|	И НЕ Спр.Контрагент = Значение(Справочник.Контрагенты.ПустаяСсылка)
	|	И НЕ ИнформационныеКарты.ПометкаУдаления
	|
	|" + ?(ЗначениеЗаполнено(массивСсылок), "ГДЕ Спр.Ссылка В (&массивСсылок)", "") + "
	|;
	
	// МВЗ
	
	|ВЫБРАТЬ
	|	Спр.Ссылка 				Пользователь,
	|	отвЛица.МВЗ				guid
	|ИЗ 		
	|	Справочник.ПользователиИнтернет КАК Спр
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ОтветственныеЛица КАК отвЛица
	|ПО
	|	отвЛица.ОтветственноеЛицо = спр.ФизЛицо
	|ГДЕ Спр.ФизЛицо <> Значение(Справочник.ФизическиеЛица.ПустаяССылка)
	|	И НЕ отвЛица.МВЗ Есть NULL
	|" + ?(ЗначениеЗаполнено(массивСсылок), "И Спр.Ссылка В (&массивСсылок)", "") + "
	|;
	
	// Склады
	
	|ВЫБРАТЬ
	|	Спр.Ссылка 				Пользователь,
	|	Спр.Склад				warehouse_guid
	|ИЗ 		
	|	Справочник.ПользователиИнтернет.ДоступныеСклады КАК Спр
	|" + ?(ЗначениеЗаполнено(массивСсылок), "ГДЕ Спр.Ссылка В (&массивСсылок)", "") + "
	|;
	
	// Адреса доставки
	
	|ВЫБРАТЬ
	|	Спр.Владелец			Пользователь,
	|	Спр.Ссылка				guid,
	|	ВЫБОР КОГДА Спр.id = """" ТОГДА Неопределено ИНАЧЕ Спр.id КОНЕЦ КАК id,
	|	Спр.Наименование		title,
	|	Спр.first_name			first_name,
	|	Спр.last_name			last_name,
	//|	Спр.middle_name			middle_name,
	|	Спр.phone				phone,
	//|	Спр.Ссылка				country,

	|	Спр.ПочтовыйИндекс		postal_code,
	//|	Спр.Адрес				street_address,
	//|	Спр.Ссылка				coordinates,
	//|	Спр.Ссылка				is_main,
	|	Спр.Kladr				kladr,
	|	Спр.Страна				country,
	|	Спр.Город				city,
	|	Спр.Улица				street,
	|	Спр.Владелец    		user_guid,
	|	Спр.Регион				region,

	|	Спр.Основной            is_main,
	|	Спр.ПометкаУдаления     is_delete,
   // |	ВЫБОР КОГДА Спр.order_id = """" ТОГДА Неопределено ИНАЧЕ Спр.order_id КОНЕЦ КАК order_id,
	|	Спр.Email			    email
	|ИЗ 		
	|	Справочник.АдресаДоставкиИнтернет КАК Спр
	| Где Спр.ПометкаУдаления = Ложь 
	|" + ?(ЗначениеЗаполнено(массивСсылок), "И Спр.Владелец В (&массивСсылок)", "") + "
	|;
	
	|");
	
#КонецОбласти
	
	Запрос.УстановитьПараметр("массивСсылок", массивСсылок);
	
	Пакеты 			= Запрос.ВыполнитьПакет();
	Категории 		= Новый Массив;
	Таблица			= Пакеты[0].Выгрузить(); ПослИнд = Таблица.Количество() - 1;
	МВЗ				= Пакеты[1].Выгрузить(); ПоляМВЗ = ПолучитьПоляДляСтруктуры("Пользователь", МВЗ.Колонки);
	Склады			= Пакеты[2].Выгрузить(); ПоляСклады = ПолучитьПоляДляСтруктуры("Пользователь", Склады.Колонки);
	АдресаДоставки	= Пакеты[3].Выгрузить(); ПоляАдресовДоставки = ПолучитьПоляДляСтруктуры("Пользователь", АдресаДоставки.Колонки);
	
	УстановитьИндексыТаблицам("Пользователь", МВЗ, Склады, АдресаДоставки);
	
	Пользователи = Новый Массив;
	Для Инд = 0 По ПослИнд Цикл
		// Получим пользователя
		структураОбъекта 	= КонвертацияТипов.ПолучитьСтруктуруИзСТрокиТаблицыЗначений(Таблица, Инд);
		
		Если НЕ структураОбъекта.role = "severstal" И НЕ структураОбъекта.role = "limit_partner" Тогда
			структураОбъекта.limit = Неопределено;
		КонецЕсли;
		
		Отбор = Новый Структура("Пользователь", структураОбъекта.guid);
		
		// Добавим МВЗ
		структураОбъекта.Вставить("place_of_costs", ПолучитьМассивЗначенийИзТаблицы(МВЗ, Отбор, ПоляМВЗ));
		
		// Добавим Склады
		структураОбъекта.Вставить("warehouses", ПолучитьМассивЗначенийИзТаблицы(Склады, Отбор, ПоляСклады));
		
		// Добавим Адреса доставки
		структураОбъекта.Вставить("delivery_addresses", ПолучитьМассивЗначенийИзТаблицы(АдресаДоставки, Отбор, ПоляАдресовДоставки));
		
		// Информация по дисконтной карте
		Если структураОбъекта.Свойство("ДисконтнаяКарта") Тогда
			данныеКарты = Новый Структура;
			Если ЗначениеЗаполнено(структураОбъекта.ДисконтнаяКарта) Тогда
				данныеКарты = ИнформационнаяКарта(структураОбъекта.ДисконтнаяКарта, стрОшибки, Истина);
			ИначеЕсли структураОбъекта.Свойство("Контрагент") И структураОбъекта.Контрагент.Пустая() И НЕ ПустаяСтрока(структураОбъекта.email) Тогда
				// Тогда попробую найти по email
				Запрос = Новый Запрос;
				Запрос.Текст = "
				|ВЫБРАТЬ
				|	Карты.Ссылка КАК ДисконтнаяКарта
				|ИЗ
				|	РегистрСведений.ПредставлениеКонтактнойИнформации КАК спр
				|ЛЕВОЕ СОЕДИНЕНИЕ
				|	Справочник.ИнформационныеКарты КАК Карты
				|ПО
				|	НЕ Карты.ПометкаУдаления И
				|	ВЫБОР 	КОГДА спр.Объект Ссылка Справочник.Контрагенты ТОГДА спр.Объект = Карты.Контрагент
				|			КОГДА спр.Объект Ссылка Справочник.КонтактныеЛица ТОГДА спр.Объект.Владелец = Карты.ВладелецКарты
				|			ИНАЧЕ ЛОЖЬ
				|	КОНЕЦ
				|ГДЕ
				|	спр.Представление ПОДОБНО &Представление
				|	И НЕ Карты.Ссылка Есть NULL
				|";
				
				Запрос.УстановитьПараметр("Представление", структураОбъекта.email);
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					данныеКарты = ИнформационнаяКарта(Выборка.ДисконтнаяКарта, стрОшибки, Истина);
				КонецЕсли;
			КонецЕсли;
			
			структураОбъекта.Вставить("discount_card", данныеКарты);
		КонецЕсли;
		Если (НЕ структураОбъекта.Свойство("discount_card") ИЛИ НЕ ЗначениеЗаполнено(структураОбъекта.discount_card))  
			И структураОбъекта.Свойство("УровеньСкидки") 
			И ЗначениеЗаполнено(структураОбъекта.УровеньСкидки) Тогда
			
			структураОбъекта.Вставить("discount_card", Новый Структура("guid, title, sum, level, level_title", "", "", 0, структураОбъекта.УровеньСкидки, структураОбъекта.УровеньСкидкиНаименование));
		КонецЕсли;
		структураОбъекта.Удалить("ДисконтнаяКарта");
		структураОбъекта.Удалить("Контрагент");
		структураОбъекта.Удалить("УровеньСкидки");
		структураОбъекта.Удалить("УровеньСкидкиНаименование");
		
		Пользователи.Добавить(структураОбъекта); 
	КонецЦикла;
	
	Возврат ЗначениеВозврата(Пользователи);
КонецФункции // ПолучитьПользователей()

Функция ПолучитьАдресаДоставки(Параметры, стрОшибки = "") Экспорт
	// Получим параметры
	Ссылка 	= ?(Параметры.Свойство("Ссылка"),	Параметры.Ссылка,	Неопределено);
	guids 	= ?(Параметры.Свойство("guids"), 	Параметры.guids, 	Неопределено);
	
	массивСсылок = ?(Параметры.Свойство("массивСсылок"),	Параметры.массивСсылок,	Новый Массив);
	Если НЕ Ссылка = Неопределено Тогда
		массивСсылок.Добавить(Ссылка);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(guids) Тогда
		Если ТипЗнч(guids) = Тип("Массив") Тогда
			Для каждого гуид Из guids Цикл
				массивСсылок.Добавить(HTTP.ПолучитьОбъектПоСсылке(Справочники.АдресаДоставкиИнтернет, гуид, стрОшибки));
			КонецЦикла;
		ИначеЕсли ТипЗнч(guids) = Тип("Строка") Тогда
			массивСсылок.Добавить(HTTP.ПолучитьОбъектПоСсылке(Справочники.АдресаДоставкиИнтернет, guids, стрОшибки));
		КонецЕсли;
	КонецЕсли;
	
	#Область Текст_запроса
	
	Запрос = Новый Запрос("
	
	|ВЫБРАТЬ
	|	Спр.Ссылка				guid,
	|	ВЫБОР КОГДА Спр.id = """" ТОГДА Неопределено ИНАЧЕ Спр.id КОНЕЦ КАК id,
	|	Спр.first_name			first_name,
	|	Спр.last_name			last_name,
	|	Спр.phone				phone,
	|	Спр.ПочтовыйИндекс		postal_code,
	|	Спр.Комментарий			comment,
	|	Спр.Адрес				title,
    |	Спр.Email				Email,	
	|
	|	Спр.Kladr				kladr,
	|	Спр.Страна				country,
	|	Спр.Город				city,
	|	Спр.Улица				street,
	|	Спр.Владелец    		user_guid,
	|	Спр.Регион				region,
	|	Спр.Основной            is_main,
	|	Спр.ПометкаУдаления     is_delete,
	//|	ВЫБОР КОГДА Спр.order_id = """" ТОГДА Неопределено ИНАЧЕ Спр.order_id КОНЕЦ КАК order_id,
	|	Спр.ПометкаУдаления,
	|	Истина ВыгружатьНаСайт
	|ИЗ 		
	|	Справочник.АдресаДоставкиИнтернет КАК Спр
	| Где Спр.ПометкаУдаления = Ложь
	|" + ?(ЗначениеЗаполнено(массивСсылок), "И Спр.Ссылка В (&массивСсылок)", "") + "
	|");
	
#КонецОбласти
	
	Запрос.УстановитьПараметр("массивСсылок", массивСсылок);
	
	Пакеты 			= Запрос.ВыполнитьПакет();
	Категории 		= Новый Массив;
	Таблица			= Пакеты[0].Выгрузить(); ПослИнд = Таблица.Количество() - 1;
	
	АдресаДоставки = Новый Массив;
	Для Инд = 0 По ПослИнд Цикл
		структураОбъекта 	= КонвертацияТипов.ПолучитьСтруктуруИзСТрокиТаблицыЗначений(Таблица, Инд);
		
		АдресаДоставки.Добавить(структураОбъекта); 
	КонецЦикла;
	
	Возврат ЗначениеВозврата(АдресаДоставки);
КонецФункции // ПолучитьАдресаДоставки()

Функция ПолучитьКоличествоТоваровВВыборке(Параметры, стрОшибки = "") Экспорт
	
	Перем СсылкаРодитель;
	
	guid_category = ?(Параметры.Свойство("guid_category"), Параметры.guid_category, Неопределено);
	
	Если ЗначениеЗаполнено(guid_category) Тогда
		
		СсылкаРодитель = HTTP.ПолучитьОбъектПоСсылке(Справочники.Номенклатура, guid_category, стрОшибки); Если СсылкаРодитель = Неопределено Тогда Возврат "" КонецЕсли;
		
		Если Не СсылкаРодитель.ЭтоГруппа Тогда
			стрОшибки = "Гуид родительской категории относится к товару.
			|Гуид: " + guid_category + "
			|Товар: " + Строка(СсылкаРодитель); Возврат Неопределено; КонецЕсли; КонецЕсли;
	
	Запрос = Новый Запрос;
	
	// Подготовим параметры для фильтрации по сайту
	
	ЕстьСайт = Ложь;
	//ЕстьСайт = Параметры.Свойство("Сайт"); 	КОСТЫТЬ КОММЕНТ
	Если ЕстьСайт Тогда
		
		стрСайт = Строка(Параметры.Сайт);
		Запрос.УстановитьПараметр("ПустойРодитель", Справочники["НоменклатураСайт" + стрСайт].ПустаяСсылка());
		
		ТекстОтбораПоСайту = СтрШаблон("
		|ВЫБРАТЬ Ссылка ИЗ Справочник.Номенклатура ГДЕ Родитель%1 <> &ПустойРодитель 
		|ОБЪЕДИНИТЬ
		|ВЫБРАТЬ Ссылка ИЗ Справочник.Номенклатура.ДополнительныеРодители ГДЕ Родитель ССЫЛКА Справочник.НоменклатураСайт%1
		|", стрСайт); КонецЕсли;
	
	Запрос.Текст = СтрШаблон("
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(Ссылка) КАК Количество,
	|	МИНИМУМ(ПорядковыйНомер) КАК МинимальныйИД,
	|	МАКСИМУМ(ПорядковыйНомер) КАК МаксимальныйИД
	|ИЗ 		
	|	Справочник.Номенклатура
	|ГДЕ 
	|	НЕ ЭтоГруппа И ВыгружатьНаСайт %1 %2",
	?(СсылкаРодитель = Неопределено, "", "И Ссылка В ИЕРАРХИИ(&Родитель)"),
	?(ЕстьСайт,"И Ссылка В(" + ТекстОтбораПоСайту + ")",""));
	
	Запрос.УстановитьПараметр("Родитель", СсылкаРодитель);
	Выполнение = Запрос.Выполнить();
	Если Выполнение.Пустой() Тогда Возврат Новый Структура("Min, Max, Count");
	Иначе
		
		Выборка = Выполнение.Выбрать();
		Выборка.Следующий();
		Возврат Новый Структура("Min, Max, Count", Выборка.МинимальныйИД, Выборка.МаксимальныйИД, Выборка.Количество); КонецЕсли;
	
КонецФункции

Функция ПолучитьИнформационнуюКартуПоНомеру(Параметры, стрОшибки = "") Экспорт
	
	НомерКарты = ?(Параметры.Свойство("discount_card_number"), Параметры.discount_card_number, Неопределено);
	Если ПустаяСтрока(НомерКарты) Тогда стрОшибки = "Не указан номер карты"; Возврат ""; КонецЕсли;
	
	Если ТипЗнч(НомерКарты) = Тип("Массив") Тогда
		результат = Новый Массив;
		Для каждого лНомер Из НомерКарты Цикл
			результат.Добавить(ИнформационнаяКарта(лНомер, стрОшибки));
		КонецЦикла;
		Возврат ЗначениеВозврата(результат);
	Иначе
		Возврат ИнформационнаяКарта(НомерКарты, стрОшибки);
	КонецЕсли;
КонецФункции
Функция ИнформационнаяКарта(НомерКарты, стрОшибки = "", ЭтоСсылка = Ложь) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Ссылка guid, Спр.Наименование title, Спр.Сумма + ЕстьNULL(Прод.СуммаОборот, 0) КАК sum, ЕСТЬNULL(Порог.УровеньСкидки, Спр.УровеньСкидки) level, ЕСТЬNULL(Порог.УровеньСкидки.Наименование, Спр.УровеньСкидки.Наименование) level_title
	|ИЗ
	|	Справочник.ИнформационныеКарты Спр
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ПродажиПоДисконтнымКартам.Обороты(,,,ИнформационнаяКарта В(ВЫБРАТЬ Ссылка ИЗ Справочник.ИнформационныеКарты ГДЕ Наименование ПОДОБНО &Номер)) Прод
	|ПО
	|	Прод.ИнформационнаяКарта = Спр.Ссылка
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ПорогНакопительнойСкидки Порог
	|ПО
	|	ЕСТЬNULL(Прод.СуммаОборот,0) + Спр.Сумма >= Порог.Сумма
	|
	|ГДЕ
	|	" + ?(ЭтоСсылка, "Спр.Ссылка = &Ссылка", "Спр.Наименование ПОДОБНО &Номер") + "
	|
	|УПОРЯДОЧИТЬ ПО Порог.Сумма Убыв
	|");

	Запрос.УстановитьПараметр("Номер", "%" + НомерКарты);
	Запрос.УстановитьПараметр("Ссылка", НомерКарты);
	
	Выполнение = Запрос.Выполнить();
	Если Выполнение.Пустой() Тогда
		стрОшибки = "Карта с номером " + НомерКарты + " не найдена"; Возврат Новый Структура; КонецЕсли;
	
	Возврат КонвертацияТипов.ПолучитьСтруктуруИзСТрокиТаблицыЗначений(Выполнение.Выгрузить());
	
КонецФункции

Функция ПолучитьПорогиСкидок(Параметры,стрОшибки = "") Экспорт
	
	Гуиды 	= ?(Параметры.Свойство("guids"), 	Параметры.guids, 	Неопределено);
	
	МассивСсылокУровня = Новый Массив;
	МассивСсылокГруппы = Новый Массив;
	
	Если ЗначениеЗаполнено(Гуиды) Тогда
		Если ТипЗнч(Гуиды) = Тип("Массив") Тогда
			
 //Для каждого Гуид Из Гуиды Цикл
                Гуид = Гуиды[0];
				РазобранныйГуид = СтрРазделить(Гуид,"$");
				МассивСсылокУровня.Добавить(HTTP.ПолучитьОбъектПоСсылке(Справочники.УровниСкидок,  РазобранныйГуид[0], стрОшибки));
				МассивСсылокГруппы.Добавить(HTTP.ПолучитьОбъектПоСсылке(Справочники.ЦеновыеГруппы, РазобранныйГуид[1], стрОшибки));
//КонецЦикла;
    	
			
		ИначеЕсли ТипЗнч(Гуиды) = Тип("Строка") Тогда
			    РазобранныйГуид = СтрРазделить(Гуиды,"$");
				МассивСсылокУровня.Добавить(HTTP.ПолучитьОбъектПоСсылке(Справочники.УровниСкидок,  РазобранныйГуид[0], стрОшибки));
				МассивСсылокГруппы.Добавить(HTTP.ПолучитьОбъектПоСсылке(Справочники.ЦеновыеГруппы, РазобранныйГуид[1], стрОшибки));

		КонецЕсли;
		
	КонецЕсли;

	//Запрос = Новый Запрос("ВЫБРАТЬ УровеньСкидки level, УровеньСкидки.Наименование level_title, ЦеноваяГруппа price_group, ЦеноваяГруппа.Наименование price_group_title, ПроцентСкидки percent ИЗ РегистрСведений.СкидкиПоЦеновымГруппам.СрезПоследних");
 	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	СкидкиПоЦеновымГруппамСрезПоследних.УровеньСкидки КАК level,
	                      |	СкидкиПоЦеновымГруппамСрезПоследних.УровеньСкидки.Наименование КАК level_title,
	                      |	СкидкиПоЦеновымГруппамСрезПоследних.ЦеноваяГруппа КАК price_group,
	                      |	СкидкиПоЦеновымГруппамСрезПоследних.ЦеноваяГруппа.Наименование КАК price_group_title,
	                      |	СкидкиПоЦеновымГруппамСрезПоследних.ПроцентСкидки КАК percent,
	                      |	""00000000-0000-0000-0000-000000000000$00000000-0000-0000-0000-000000000000"" КАК guid
	                      |ИЗ
	                      |	РегистрСведений.СкидкиПоЦеновымГруппам.СрезПоследних( , 
						  |" + ?(ЗначениеЗаполнено(МассивСсылокГруппы), "  ЦеноваяГруппа В (&МассивСсылокГруппы)", "")+"
						  |"+ ?(ЗначениеЗаполнено(МассивСсылокУровня), "  И УровеньСкидки В (&МассивСсылокУровня)", "")+" 
						  |) КАК СкидкиПоЦеновымГруппамСрезПоследних");
						  
    Запрос.УстановитьПараметр("МассивСсылокГруппы",МассивСсылокГруппы);
	Запрос.УстановитьПараметр("МассивСсылокУровня",МассивСсылокУровня);
	Результат =  Запрос.Выполнить().Выгрузить();
	  					
	Для каждого Стр из Результат Цикл
	Стр.guid = XmlСтрока(Стр.level) +"$"+ XmlСтрока(Стр.price_group);
    КонецЦикла;


	Если ЗначениеЗаполнено(Гуиды)  Тогда
		
		ОдинЭлем = Новый Структура;
		Для каждого КолонкаТЗ Из Результат.Колонки Цикл
			ОдинЭлем.Вставить(КолонкаТЗ.Имя, Результат[0][КолонкаТЗ.Имя]);
		КонецЦикла; 
		
		Возврат (ОдинЭлем);
	Иначе
		
		Возврат КонвертацияТипов.ПолучитьМассивИзТаблицыЗначений(Результат);
	КонецЕсли;
	
КонецФункции

Функция ПолучитьАкции_ст(Параметры, стрОшибки = "") Экспорт
	
	// Получим параметры
	
	СсылкаАкции	= ?(Параметры.Свойство("Ссылка"), 	Параметры.Ссылка,	Неопределено);
	Гуиды		= ?(Параметры.Свойство("guids"), 	Параметры.guids, 	Неопределено);
	
	ДопФильтр = "";
	Если Гуиды = Неопределено ИЛИ ПустаяСтрока(Гуиды) ИЛИ (ТипЗнч(Гуиды) = Тип("Структура") И НЕ ЗначениеЗаполнено(Гуиды)) Тогда
		ДопФильтр = "Спр.Ссылка.ВыгружатьНаСайт";
	КонецЕсли;
	
	МассивСсылок = Новый Массив;
	
	Если НЕ СсылкаАкции = Неопределено Тогда
		МассивСсылок.Добавить(СсылкаАкции);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Гуиды) Тогда
		
		Если ТипЗнч(Гуиды) = Тип("Массив") Тогда
			Для каждого гуид Из Гуиды Цикл
				массивСсылок.Добавить(HTTP.ПолучитьОбъектПоСсылке(Документы.Акция, гуид, стрОшибки));
			КонецЦикла;
		Иначе
			массивСсылок.Добавить(HTTP.ПолучитьОбъектПоСсылке(Документы.Акция, Гуиды, стрОшибки));
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МассивСсылок) Тогда
		ДопФильтр = ?(ПустаяСтрока(ДопФильтр), "", ДопФильтр + " И ") + "Спр.Ссылка В (&МассивСсылок)";
	КонецЕсли;
	
#Область Текст_запроса
	
	Запрос = Новый Запрос("
	
	|ВЫБРАТЬ
	|	Спр.Ссылка					guid,
	|	0 							sorting_weight,
	|	Спр.ВариантСкидки,
	|	Спр.ВариантРасчета,
	|	Спр.ДатаНачала				start,
	|	Спр.ДатаОкончания			end,
	|	Спр.НаименованиеИнтернет	name,
	|	ВЫБОР КОГДА Спр.title = """" ТОГДА Спр.НаименованиеИнтернет ИНАЧЕ Спр.title КОНЕЦ title,
	|	ВЫБОР КОГДА Спр.h1 = """" ТОГДА Спр.НаименованиеИнтернет ИНАЧЕ Спр.h1 КОНЕЦ h1,
	|	Спр.alies					alies,
	|	Спр.meta_keywords			meta_keywords,
	|	Спр.meta_description		meta_description,
	|	Спр.Описание 				description,
	|	Спр.Картинка				image,
	|
	|	Спр.ПометкаУдаления,
	|	Спр.ВыгружатьНаСайт
	|ИЗ 		
	|	Документ.Акция КАК Спр
	|" + ?(ПустаяСтрока(ДопФильтр), "", "ГДЕ " + ДопФильтр) + "
	|;
	
	// Товары
	
	|ВЫБРАТЬ
	|	Спр.Ссылка 			Акция,
	|	Спр.Номенклатура	product_guid,
	|	Спр.Упаковка 		packing_guid,
	|	Спр.ТипЦен			price_type_guid,
	|	ВЫБОР КОГДА Спр.Ссылка.ВариантСкидки  = &ВариантЦена ТОГДА
	|   	ВЫБОР КОГДА
	|			Цен.Цена * (ЕСТЬNULL(ВалУстанЦен.Курс, 1) * ЕСТЬNULL(ВалТек.Кратность, 1)) / (ЕСТЬNULL(ВалТек.Курс, 1) * ЕСТЬNULL(ВалУстанЦен.Кратность, 1)) >
	|			Спр.НоваяЦена * (ЕСТЬNULL(ВалЦен.Курс, 1) * ЕСТЬNULL(ВалТек.Кратность, 1)) / (ЕСТЬNULL(ВалТек.Курс, 1) * ЕСТЬNULL(ВалЦен.Кратность, 1))
	|		ТОГДА
	|			ВЫРАЗИТЬ((1 -Спр.НоваяЦена * (ЕСТЬNULL(ВалЦен.Курс, 1) * ЕСТЬNULL(ВалТек.Кратность, 1)) / (ЕСТЬNULL(ВалТек.Курс, 1) * ЕСТЬNULL(ВалЦен.Кратность, 1)) /
	|						Цен.Цена * (ЕСТЬNULL(ВалУстанЦен.Курс, 1) * ЕСТЬNULL(ВалТек.Кратность, 1)) / (ЕСТЬNULL(ВалТек.Курс, 1) * ЕСТЬNULL(ВалУстанЦен.Кратность, 1)))*100 
	|					КАК ЧИСЛО(15,2))
	|		ИНАЧЕ 0
	|		КОНЕЦ 
	|	ИНАЧЕ
	|		Спр.ПроцентСкидки	
	| 	КОНЕЦ discount,
	|	Спр.НоваяЦена * (ЕСТЬNULL(ВалЦен.Курс, 1) * ЕСТЬNULL(ВалТек.Кратность, 1)) / (ЕСТЬNULL(ВалТек.Курс, 1) * ЕСТЬNULL(ВалЦен.Кратность, 1)) price,
	//|	Цена * (ЕСТЬNULL(ВалЦен.Курс, 1) * ЕСТЬNULL(ВалТек.Кратность, 1)) / (ЕСТЬNULL(ВалТек.Курс, 1) * ЕСТЬNULL(ВалЦен.Кратность, 1))		base_price
	|	Цен.Цена * (ЕСТЬNULL(ВалУстанЦен.Курс, 1) * ЕСТЬNULL(ВалТек.Кратность, 1)) / (ЕСТЬNULL(ВалТек.Курс, 1) * ЕСТЬNULL(ВалУстанЦен.Кратность, 1)) base_price
	|ИЗ
	|	Документ.Акция.Товары КАК Спр
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекущаяДата) Цен
	|ПО Спр.Номенклатура = Цен.Номенклатура И Спр.Упаковка = Цен.Упаковка И Спр.ТипЦен = Цен.ТипЦен
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата) ВалУстанЦен 
	|ПО  Цен.Валюта = ВалУстанЦен.Валюта
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата) ВалЦен
	|ПО Выбор когда Спр.Ссылка.Валюта = Значение(Справочник.Валюты.ПустаяСсылка) тогда ТипЦен.Валюта иначе Спр.Ссылка.Валюта Конец = ВалЦен.Валюта
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата) ВалТек 
	|ПО  ТипЦен.Валюта = ВалТек.Валюта
	|" + ?(ПустаяСтрока(ДопФильтр), "", "ГДЕ " + ДопФильтр) + "
	|;
	
	// Пользователи
	
	|ВЫБРАТЬ
	|	Спр.Ссылка 			Акция,
	|	Пользователи.Ссылка	user_guid
	|ИЗ
	|	Документ.Акция.Участники КАК Спр
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.ПользователиИнтернет КАК Пользователи
	|ПО
	|	ВЫБОР 
	|		КОГДА Спр.Участник ССЫЛКА Справочник.Контрагенты 
	|		ТОГДА Спр.Участник = Пользователи.Контрагент 
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|ГДЕ НЕ Пользователи.Ссылка Есть NULL" + ?(ПустаяСтрока(ДопФильтр), "", " И " + ДопФильтр) + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Спр.Ссылка 			Акция,
	|	Пользователи.Ссылка	user_guid
	|ИЗ
	|	Документ.Акция.Участники КАК Спр
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.ГруппыПартнеров.Состав КАК Группа
	|ПО
	|	ВЫБОР 
	|		КОГДА НЕ Спр.Участник ССЫЛКА Справочник.Контрагенты 
	|		ТОГДА Спр.Участник = Группа.Ссылка
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.ПользователиИнтернет КАК Пользователи
	|ПО
	|	Группа.Контрагент = Пользователи.Контрагент 
	|ГДЕ НЕ Пользователи.Ссылка Есть NULL" + ?(ПустаяСтрока(ДопФильтр), "", " И " + ДопФильтр) + "
		
	|");
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ВариантЦена", Перечисления.ВариантСкидки.Цена);
	Если ЗначениеЗаполнено(МассивСсылок) Тогда
		Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок) 
	КонецЕсли;
	
#КонецОбласти
	
	Пакеты 		= Запрос.ВыполнитьПакет();
	Акции 	= Новый Массив;
	Таблица		= Пакеты[0].Выгрузить(); ПослИнд = Таблица.Количество() - 1;
	Товары		= Пакеты[1].Выгрузить(); ПоляТоваров = ПолучитьПоляДляСтруктуры("Акция", Товары.Колонки);
	Пользователи= Пакеты[2].Выгрузить(); ПоляПользователей = ПолучитьПоляДляСтруктуры("Акция", Пользователи.Колонки);
	
	УстановитьИндексыТаблицам("Акция", Товары, Пользователи);
	
	Для Инд = 0 По ПослИнд Цикл
		
		// Получим категорию
		
		структураАкции 	= КонвертацияТипов.ПолучитьСтруктуруИзСТрокиТаблицыЗначений(Таблица, Инд);
		Отбор			= Новый Структура("Акция", структураАкции.guid);
		
		структураАкции.Вставить("items", ПолучитьМассивЗначенийИзТаблицы(Товары, Отбор, ПоляТоваров));
		структураАкции.Вставить("users", ПолучитьМассивЗначенийИзТаблицы(Пользователи, Отбор, ПоляПользователей));
		
		Если структураАкции.guid.Участники.Количество() И НЕ структураАкции.users.Количество() Тогда
			Продолжить;
		КонецЕсли;
		
		//ВариантСкидки
		type_of_discount = 0;
		Если структураАкции.ВариантСкидки = Перечисления.ВариантСкидки.Процент Тогда
			type_of_discount = 1;
		ИначеЕсли структураАкции.ВариантСкидки = Перечисления.ВариантСкидки.Товар Тогда
			type_of_discount = 2;
		ИначеЕсли структураАкции.ВариантСкидки = Перечисления.ВариантСкидки.Цена Тогда
			type_of_discount = 3;
			
			//структураАкции.discount = ?(структураАкции.base_price > 0, ОКР((1- структураАкции.price/структураАкции.base_price)*100, 2), 0);
			
		КонецЕсли;
		
		//ВариантРасчета
		type_of_price = 0;
		Если структураАкции.ВариантРасчета = Перечисления.ВариантРасчетаЦеныПоАкции.Авто Тогда
			type_of_price = 1;
		ИначеЕсли структураАкции.ВариантРасчета = Перечисления.ВариантРасчетаЦеныПоАкции.СкидкаПоАкции Тогда
			type_of_price = 2;
		ИначеЕсли структураАкции.ВариантРасчета = Перечисления.ВариантРасчетаЦеныПоАкции.СкидкиСуммируются Тогда
			type_of_price = 3;
		КонецЕсли;
		
		структураАкции.Вставить("type_of_discount", type_of_discount);
		структураАкции.Вставить("type_of_price", type_of_price);
		
		структураАкции.Удалить("ВариантСкидки");
		структураАкции.Удалить("ВариантРасчета");
		
		// Картинки
		
		Если НЕ структураАкции.image = Неопределено Тогда
			структураАкции.image = структураАкции.image.Получить();
		КонецЕсли;
		
		Акции.Добавить(структураАкции); 
	КонецЦикла;
	
	Возврат ЗначениеВозврата(Акции);
	
КонецФункции // ПолучитьАкции

Функция ПолучитьАкции(Параметры, стрОшибки = "") Экспорт
	
	// Получим параметры
	
	СсылкаАкции	= ?(Параметры.Свойство("Ссылка"), 	Параметры.Ссылка,	Неопределено);
	Гуиды		= ?(Параметры.Свойство("guids"), 	Параметры.guids, 	Неопределено);
	
	ДопФильтр = "";
	Если Гуиды = Неопределено ИЛИ ПустаяСтрока(Гуиды) ИЛИ (ТипЗнч(Гуиды) = Тип("Структура") И НЕ ЗначениеЗаполнено(Гуиды)) Тогда
	//	ДопФильтр = "Спр.Ссылка.ВыгружатьНаСайт";
		ДопФильтр = "Акция.ВыгружатьНаСайт";
	КонецЕсли;
	
	МассивСсылок = Новый Массив;
	
	Если НЕ СсылкаАкции = Неопределено Тогда
		МассивСсылок.Добавить(СсылкаАкции);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Гуиды) Тогда
		
		Если ТипЗнч(Гуиды) = Тип("Массив") Тогда
			Для каждого гуид Из Гуиды Цикл
				массивСсылок.Добавить(HTTP.ПолучитьОбъектПоСсылке(Документы.Акция, гуид, стрОшибки));
			КонецЦикла;
		Иначе
			массивСсылок.Добавить(HTTP.ПолучитьОбъектПоСсылке(Документы.Акция, Гуиды, стрОшибки));
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МассивСсылок) Тогда
		//ДопФильтр = ?(ПустаяСтрока(ДопФильтр), "", ДопФильтр + " И ") + "Спр.Ссылка В (&МассивСсылок)";
	      ДопФильтр = ?(ПустаяСтрока(ДопФильтр), "", ДопФильтр + " И ") + "Акция В (&МассивСсылок)"
	КонецЕсли;
	
#Область Текст_запроса
	
	Запрос = Новый Запрос("
	
	|ВЫБРАТЬ
	|	РАЗЛИЧНЫЕ Акция ПОМЕСТИТЬ СписокАкций ИЗ РегистрСведений.Акция.СрезПоследних(&ТекущаяДата) 
	|ГДЕ Акция <> &ПустаяАкция 	
	|" + ?(ПустаяСтрока(ДопФильтр), "", " И " + ДопФильтр) + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ РАЗЛИЧНЫЕ Акция ИЗ РегистрСведений.УчастникиАкции.СрезПоследних(&ТекущаяДата) 
	|ГДЕ Акция <> &ПустаяАкция
	|" + ?(ПустаяСтрока(ДопФильтр), "", " И " + ДопФильтр) + "
	|;
	|ВЫБРАТЬ
	|	Спр.Ссылка					guid,
	|	ИСТИНА						enabled,
	|	0 							sorting_weight,
	|	Спр.ВариантСкидки,
	|	Спр.ВариантРасчета,
	|	Спр.ДатаНачала				start,
	|	Спр.ДатаОкончания			end,
	|	Спр.НаименованиеИнтернет	name,
	|	ВЫБОР КОГДА Спр.title = """" ТОГДА Спр.НаименованиеИнтернет ИНАЧЕ Спр.title КОНЕЦ title,
	|	ВЫБОР КОГДА Спр.h1 = """" ТОГДА Спр.НаименованиеИнтернет ИНАЧЕ Спр.h1 КОНЕЦ h1,
	|	Спр.alies					alies,
	|	Спр.meta_keywords			meta_keywords,
	|	Спр.meta_description		meta_description,
	|	Спр.Описание 				description,
	|	Спр.Картинка				image,
	|
	|	Спр.ПометкаУдаления,
	|	Спр.ВыгружатьНаСайт
	|ИЗ 		
	|	Документ.Акция КАК Спр ГДЕ Ссылка В (ВЫБРАТЬ Акция ИЗ СписокАкций)
	//|" + ?(ПустаяСтрока(ДопФильтр), "", "ГДЕ " + ДопФильтр) + "
	|;
	
	// Товары
	
	|ВЫБРАТЬ
	|	Спр.Ссылка 			Акция,
	|	Спр.Номенклатура	product_guid,
	|	Спр.Упаковка 		packing_guid,
	|	Спр.ТипЦен			price_type_guid,
	|	ВЫБОР КОГДА Спр.Ссылка.ВариантСкидки  = &ВариантЦена ТОГДА
	|   	ВЫБОР КОГДА
	|			Цен.Цена * (ЕСТЬNULL(ВалУстанЦен.Курс, 1) * ЕСТЬNULL(ВалТек.Кратность, 1)) / (ЕСТЬNULL(ВалТек.Курс, 1) * ЕСТЬNULL(ВалУстанЦен.Кратность, 1)) >
	|			Спр.НоваяЦена * (ЕСТЬNULL(ВалЦен.Курс, 1) * ЕСТЬNULL(ВалТек.Кратность, 1)) / (ЕСТЬNULL(ВалТек.Курс, 1) * ЕСТЬNULL(ВалЦен.Кратность, 1))
	|		ТОГДА
	|			ВЫРАЗИТЬ((1 -Спр.НоваяЦена * (ЕСТЬNULL(ВалЦен.Курс, 1) * ЕСТЬNULL(ВалТек.Кратность, 1)) / (ЕСТЬNULL(ВалТек.Курс, 1) * ЕСТЬNULL(ВалЦен.Кратность, 1)) /
	|						Цен.Цена * (ЕСТЬNULL(ВалУстанЦен.Курс, 1) * ЕСТЬNULL(ВалТек.Кратность, 1)) / (ЕСТЬNULL(ВалТек.Курс, 1) * ЕСТЬNULL(ВалУстанЦен.Кратность, 1)))*100 
	|					КАК ЧИСЛО(15,2))
	|		ИНАЧЕ 0
	|		КОНЕЦ 
	|	ИНАЧЕ
	|		Спр.ПроцентСкидки	
	| 	КОНЕЦ discount,
	|	Спр.НоваяЦена * (ЕСТЬNULL(ВалЦен.Курс, 1) * ЕСТЬNULL(ВалТек.Кратность, 1)) / (ЕСТЬNULL(ВалТек.Курс, 1) * ЕСТЬNULL(ВалЦен.Кратность, 1)) price,
	//|	Цена * (ЕСТЬNULL(ВалЦен.Курс, 1) * ЕСТЬNULL(ВалТек.Кратность, 1)) / (ЕСТЬNULL(ВалТек.Курс, 1) * ЕСТЬNULL(ВалЦен.Кратность, 1))		base_price
	|	Цен.Цена * (ЕСТЬNULL(ВалУстанЦен.Курс, 1) * ЕСТЬNULL(ВалТек.Кратность, 1)) / (ЕСТЬNULL(ВалТек.Курс, 1) * ЕСТЬNULL(ВалУстанЦен.Кратность, 1)) base_price
	|ИЗ
	|	Документ.Акция.Товары КАК Спр
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекущаяДата) Цен
	|ПО Спр.Номенклатура = Цен.Номенклатура И Спр.Упаковка = Цен.Упаковка И Спр.ТипЦен = Цен.ТипЦен
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата) ВалУстанЦен 
	|ПО  Цен.Валюта = ВалУстанЦен.Валюта
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата) ВалЦен
	|ПО Выбор когда Спр.Ссылка.Валюта = Значение(Справочник.Валюты.ПустаяСсылка) тогда ТипЦен.Валюта иначе Спр.Ссылка.Валюта Конец = ВалЦен.Валюта
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата) ВалТек 
	|ПО  ТипЦен.Валюта = ВалТек.Валюта  ГДЕ Спр.Ссылка В (ВЫБРАТЬ Акция ИЗ СписокАкций)
	//|" + ?(ПустаяСтрока(ДопФильтр), "", " И " + ДопФильтр) + "
	|;
	
	// Пользователи
	
	|ВЫБРАТЬ
	|	Спр.Ссылка 			Акция,
	|	Пользователи.Ссылка	user_guid
	|ИЗ
	|	Документ.Акция.Участники КАК Спр
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.ПользователиИнтернет КАК Пользователи
	|ПО
	|	ВЫБОР 
	|		КОГДА Спр.Участник ССЫЛКА Справочник.Контрагенты 
	|		ТОГДА Спр.Участник = Пользователи.Контрагент 
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|ГДЕ НЕ Пользователи.Ссылка Есть NULL И Спр.Ссылка В (ВЫБРАТЬ Акция ИЗ СписокАкций)
	//" + ?(ПустаяСтрока(ДопФильтр), "", " И " + ДопФильтр) + " 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Спр.Ссылка 			Акция,
	|	Пользователи.Ссылка	user_guid
	|ИЗ
	|	Документ.Акция.Участники КАК Спр
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.ГруппыПартнеров.Состав КАК Группа
	|ПО
	|	ВЫБОР 
	|		КОГДА НЕ Спр.Участник ССЫЛКА Справочник.Контрагенты 
	|		ТОГДА Спр.Участник = Группа.Ссылка
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.ПользователиИнтернет КАК Пользователи
	|ПО
	|	Группа.Контрагент = Пользователи.Контрагент 
	|ГДЕ НЕ Пользователи.Ссылка Есть NULL И Спр.Ссылка В (ВЫБРАТЬ Акция ИЗ СписокАкций)
	//" + ?(ПустаяСтрока(ДопФильтр), "", " И " + ДопФильтр) + "
	|");
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ВариантЦена", Перечисления.ВариантСкидки.Цена);
	Запрос.УстановитьПараметр("ПустаяАкция", Документы.Акция.ПустаяСсылка());

	Если ЗначениеЗаполнено(МассивСсылок) Тогда
		Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок); 
	КонецЕсли;
	
#КонецОбласти
	
	Пакеты 		= Запрос.ВыполнитьПакет();
	Акции 	= Новый Массив;
	Таблица		= Пакеты[1].Выгрузить(); ПослИнд = Таблица.Количество() - 1;
	Товары		= Пакеты[2].Выгрузить(); ПоляТоваров = ПолучитьПоляДляСтруктуры("Акция", Товары.Колонки);
	Пользователи= Пакеты[3].Выгрузить(); ПоляПользователей = ПолучитьПоляДляСтруктуры("Акция", Пользователи.Колонки);
	
	УстановитьИндексыТаблицам("Акция", Товары, Пользователи);
	
	Для Инд = 0 По ПослИнд Цикл
		
		// Получим категорию
		
		структураАкции 	= КонвертацияТипов.ПолучитьСтруктуруИзСТрокиТаблицыЗначений(Таблица, Инд);
		Отбор			= Новый Структура("Акция", структураАкции.guid);
		
		структураАкции.Вставить("items", ПолучитьМассивЗначенийИзТаблицы(Товары, Отбор, ПоляТоваров));
		структураАкции.Вставить("users", ПолучитьМассивЗначенийИзТаблицы(Пользователи, Отбор, ПоляПользователей));
		
		Если структураАкции.guid.Участники.Количество() И НЕ структураАкции.users.Количество() Тогда
			Продолжить;
		КонецЕсли;
		
		//ВариантСкидки
		type_of_discount = 0;
		Если структураАкции.ВариантСкидки = Перечисления.ВариантСкидки.Процент Тогда
			type_of_discount = 1;
		ИначеЕсли структураАкции.ВариантСкидки = Перечисления.ВариантСкидки.Товар Тогда
			type_of_discount = 2;
		ИначеЕсли структураАкции.ВариантСкидки = Перечисления.ВариантСкидки.Цена Тогда
			type_of_discount = 3;
			
			//структураАкции.discount = ?(структураАкции.base_price > 0, ОКР((1- структураАкции.price/структураАкции.base_price)*100, 2), 0);
			
		КонецЕсли;
		
		//ВариантРасчета
		type_of_price = 0;
		Если структураАкции.ВариантРасчета = Перечисления.ВариантРасчетаЦеныПоАкции.Авто Тогда
			type_of_price = 1;
		ИначеЕсли структураАкции.ВариантРасчета = Перечисления.ВариантРасчетаЦеныПоАкции.СкидкаПоАкции Тогда
			type_of_price = 2;
		ИначеЕсли структураАкции.ВариантРасчета = Перечисления.ВариантРасчетаЦеныПоАкции.СкидкиСуммируются Тогда
			type_of_price = 3;
		КонецЕсли;
		
		структураАкции.Вставить("type_of_discount", type_of_discount);
		структураАкции.Вставить("type_of_price", type_of_price);
		
		структураАкции.Удалить("ВариантСкидки");
		структураАкции.Удалить("ВариантРасчета");
		
		// Картинки
		
		Если НЕ структураАкции.image = Неопределено Тогда
			структураАкции.image = структураАкции.image.Получить();
		КонецЕсли;
		
		Акции.Добавить(структураАкции); 
	КонецЦикла;
	
	Возврат ЗначениеВозврата(Акции);
	
КонецФункции // ПолучитьАкции


Функция ПолучитьВидыОплат(Параметры, стрОшибки = "") Экспорт
	
	Гуиды 	= ?(Параметры.Свойство("guids"), 	Параметры.guids, 	Неопределено);
	
	массивСсылок = Новый Массив;
	
	Если ЗначениеЗаполнено(Гуиды) Тогда
		Если ТипЗнч(Гуиды) = Тип("Массив") Тогда
			Для каждого гуид Из Гуиды Цикл
				массивСсылок.Добавить(HTTP.ПолучитьОбъектПоСсылке(Справочники.ВидОплатыИнтернетЗаказа, гуид, стрОшибки));
			КонецЦикла;
		ИначеЕсли ТипЗнч(Гуиды) = Тип("Строка") Тогда
			массивСсылок.Добавить(HTTP.ПолучитьОбъектПоСсылке(Справочники.ВидОплатыИнтернетЗаказа, Гуиды, стрОшибки));
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ Ссылка guid, Наименование name, kind_payment_code alias ИЗ Справочник.ВидОплатыИнтернетЗаказа
	|" + ?(ЗначениеЗаполнено(массивСсылок), " ГДЕ Ссылка В (&массивСсылок)", ""));
	
	Если ЗначениеЗаполнено(массивСсылок) Тогда 
		Запрос.УстановитьПараметр("массивСсылок", массивСсылок);
	КонецЕсли;
		
	Возврат КонвертацияТипов.ПолучитьМассивИзТаблицыЗначений(Запрос.Выполнить().Выгрузить());
	
КонецФункции

Функция ПолучитьТипыЦен(Параметры, стрОшибки = "") Экспорт
	
	Гуиды 	= ?(Параметры.Свойство("guids"), 	Параметры.guids, 	Неопределено);
	
	массивСсылок = Новый Массив;
	
	Если ЗначениеЗаполнено(Гуиды) Тогда
		Если ТипЗнч(Гуиды) = Тип("Массив") Тогда
			Для каждого гуид Из Гуиды Цикл
				массивСсылок.Добавить(HTTP.ПолучитьОбъектПоСсылке(Справочники.ТипыЦен, гуид, стрОшибки));
			КонецЦикла;
		ИначеЕсли ТипЗнч(Гуиды) = Тип("Строка") Тогда
			массивСсылок.Добавить(HTTP.ПолучитьОбъектПоСсылке(Справочники.ТипыЦен, Гуиды, стрОшибки));
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ Ссылка guid, Наименование title, Валюта.Наименование currency ИЗ Справочник.ТипыЦен ГДЕ ВыгружатьНаСайт И НЕ ПометкаУдаления
	|" + ?(ЗначениеЗаполнено(массивСсылок), " И Ссылка В (&массивСсылок)", ""));
	
	Если ЗначениеЗаполнено(массивСсылок) Тогда 
		Запрос.УстановитьПараметр("массивСсылок", массивСсылок);
	КонецЕсли;
		
	Возврат ЗначениеВозврата(КонвертацияТипов.ПолучитьМассивИзТаблицыЗначений(Запрос.Выполнить().Выгрузить()));
	
КонецФункции

Функция ПолучитьАналогиТоваров(Параметры, стрОшибки = "") Экспорт 
	// Параметры: ИдентификаторыТоваров - массив guid товаров
	
	Если НЕ Параметры.Свойство("ИдентификаторыТоваров") Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	массивСсылок = Новый Массив;
	Для каждого guidТовара Из Параметры.ИдентификаторыТоваров Цикл
		массивСсылок.Добавить(HTTP.ПолучитьОбъектПоСсылке(Справочники.Номенклатура, guidТовара, стрОшибки));
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Номенклатура1,
	|	Номенклатура2,
	|	sorting_weight
	|ИЗ
	|	РегистрСведений.АналогиНоменклатуры КАК АналогиНоменклатуры
	|ГДЕ
	|	Номенклатура1 В (&МассивСсылок)
	|УПОРЯДОЧИТЬ ПО
	|	sorting_weight УБЫВ
	|ИТОГИ ПО
	|	Номенклатура1
	|";
	
	Запрос.УстановитьПараметр("МассивСсылок", массивСсылок);
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Результат = Новый Массив;
	Пока Выборка.Следующий() Цикл
		структураТовара = Новый Структура;
		структураТовара.Вставить("guid",  Выборка.Номенклатура1);
		
		массивАналогов = Новый Массив;
		
		выборкаАналогов = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока выборкаАналогов.Следующий() Цикл
			массивАналогов.Добавить(Новый Структура("guid, sorting_weight", выборкаАналогов.Номенклатура2, выборкаАналогов.sorting_weight));
		КонецЦикла;
		
		структураТовара.Вставить("analogs",  массивАналогов);
		Результат.Добавить(структураТовара);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции // ПолучитьАналогиТоваров()
Функция ПолучитьСопутствующиеТовары(Параметры, стрОшибки = "") Экспорт 
	// Параметры: ИдентификаторыТоваров - массив guid товаров
	
	Если НЕ Параметры.Свойство("ИдентификаторыТоваров") Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	массивСсылок = Новый Массив;
	Для каждого guidТовара Из Параметры.ИдентификаторыТоваров Цикл
		массивСсылок.Добавить(HTTP.ПолучитьОбъектПоСсылке(Справочники.Номенклатура, guidТовара, стрОшибки));
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Номенклатура1,
	|	Номенклатура2,
	|	sorting_weight
	|ИЗ
	|	РегистрСведений.СопутствующиеТовары КАК СопутствующиеТовары
	|ГДЕ
	|	Номенклатура1 В (&МассивСсылок)
	|УПОРЯДОЧИТЬ ПО
	|	sorting_weight УБЫВ
	|ИТОГИ ПО
	|	Номенклатура1
	|";
	
	Запрос.УстановитьПараметр("МассивСсылок", массивСсылок);
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Результат = Новый Массив;
	Пока Выборка.Следующий() Цикл
		структураТовара = Новый Структура;
		структураТовара.Вставить("guid",  Выборка.Номенклатура1);
		
		массивСопутствующих = Новый Массив;
		
		выборкаСопутствующих = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока выборкаСопутствующих.Следующий() Цикл
			массивСопутствующих.Добавить(Новый Структура("guid, sorting_weight", выборкаСопутствующих.Номенклатура2, выборкаСопутствующих.sorting_weight));
		КонецЦикла;
		
		структураТовара.Вставить("related",  массивСопутствующих);
		Результат.Добавить(структураТовара);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции // ПолучитьАналогиТоваров()

Функция УровниСкидокПользователей(Параметры, стрОшибки = "") Экспорт 
	Результат = Новый Массив;
	
	Возврат Результат;
КонецФункции // УровниСкидокПользователей()

Функция ЗначениеВозврата(пЭлементы)
	Если пЭлементы.Количество() = 0 Тогда
		//Возврат Новый Структура("ВыгружатьНаСайт, ПометкаУдаления, guid", Ложь, Ложь, Неопределено);
		Возврат Новый Структура;
	ИначеЕсли пЭлементы.Количество() = 1 Тогда
		Возврат пЭлементы[0];
	КонецЕсли;
	
	Возврат пЭлементы;
КонецФункции // ЗначениеВозврата()

Функция ПолучитьМенеджеров(Параметры, стрОшибки = "") Экспорт
	
	// Получим параметры
	
	Ссылка 	= ?(Параметры.Свойство("Ссылка"), 				Параметры.Ссылка, 				Неопределено);
	guids 	= ?(Параметры.Свойство("guid_manager"),     	Параметры.guid_manager,     	Неопределено);
	
	массивСсылок = Новый Массив;
	Если НЕ Ссылка = Неопределено Тогда
		массивСсылок.Добавить(Ссылка);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(guids) Тогда
		Если ТипЗнч(guids) = Тип("Массив") Тогда
			Для каждого гуид Из guids Цикл
				массивСсылок.Добавить(HTTP.ПолучитьОбъектПоСсылке(Справочники.Пользователи, гуид, стрОшибки));
			КонецЦикла;
		ИначеЕсли ТипЗнч(guids) = Тип("Строка") Тогда
			массивСсылок.Добавить(HTTP.ПолучитьОбъектПоСсылке(Справочники.Пользователи, guids, стрОшибки));
		КонецЕсли;
	КонецЕсли;
//	|" + ?(ЗначениеЗаполнено(массивСсылок), "И Ссылка В (&массивСсылок)", "") + "
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Пользователи.Ссылка         КАК guid,
						  | Пользователи.ВыгружатьНаСайт,
						  | Пользователи.ПометкаУдаления,
	                      |	ФизическиеЛица.Ссылка       КАК guid_fl,
	                      |	ФизическиеЛица.Наименование КАК name
	                      |ИЗ
	                      |	Справочник.Пользователи КАК Пользователи
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	                      |		ПО Пользователи.ФизЛицо = ФизическиеЛица.Ссылка
	                      |ГДЕ
	                      |	НЕ ФизическиеЛица.ПометкаУдаления
	                      |	И ФизическиеЛица.ВыгружатьНаСайт
	                      |	И НЕ Пользователи.ПометкаУдаления
	                      |	И Пользователи.ВыгружатьНаСайт
						  |" + ?(ЗначениеЗаполнено(массивСсылок), "И Пользователи.Ссылка В (&массивСсылок)", "") + "
						  |");
	
	Запрос.УстановитьПараметр("массивСсылок", массивСсылок);
	
	Пакеты 			= Запрос.ВыполнитьПакет();
	Таблица			= Пакеты[0].Выгрузить(); ПослИнд = Таблица.Количество() - 1;
	//Сертификаты		= Пакеты[1].Выгрузить(); ПоляСертификаты = ПолучитьПоляДляСтруктуры("Производитель", Сертификаты.Колонки);
	//
	//УстановитьИндексыТаблицам("Производитель", Сертификаты);
	//
	массивОбъектов = Новый Массив;
	Для Инд = 0 По ПослИнд Цикл
		лМенеджер = КонвертацияТипов.ПолучитьСтруктуруИзСТрокиТаблицыЗначений(Таблица, Инд);
		
		лМенеджер.Вставить("mobile_phone", УправлениеКонтактнойИнформацией.ПолучитьПредставлениеКонтактнойИнформацииОбъекта(лМенеджер.guid_fl,  Справочники.ВидыКонтактнойИнформации.НайтиПоКоду("00020")));
		лМенеджер.Вставить("work_phone",   УправлениеКонтактнойИнформацией.ПолучитьПредставлениеКонтактнойИнформацииОбъекта(лМенеджер.guid_fl,  Справочники.ВидыКонтактнойИнформации.НайтиПоКоду("00054")));
		лМенеджер.Вставить("email",        УправлениеКонтактнойИнформацией.ПолучитьПредставлениеКонтактнойИнформацииОбъекта(лМенеджер.guid_fl,  Справочники.ВидыКонтактнойИнформации.НайтиПоКоду("00052")));
		
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка ИЗ Справочник.АватарыМенеджеров ГДЕ Владелец = &Владелец и Не ПометкаУдаления");
	Запрос.УстановитьПараметр("Владелец", лМенеджер.guid_fl);
	Выборка = Запрос.Выполнить().Выбрать();
	
    Если Выборка.Следующий() Тогда
		лМенеджер.Вставить("image_guid",  Выборка.Ссылка);
	Иначе
		лМенеджер.Вставить("image_guid",  Неопределено);
	КонецЕсли;
	
		массивОбъектов.Добавить(лМенеджер);
	КонецЦикла;
	
	Возврат ЗначениеВозврата(массивОбъектов);
КонецФункции
#КонецОбласти

#Область Северсталь

Функция ПолучитьЛимитыСеверстали(Параметры, стрОшибки = "") Экспорт
	// Получим параметры
		
	Ссылка 	= ?(Параметры.Свойство("Ссылка"),	Параметры.Ссылка,	Неопределено);
	guids 	= ?(Параметры.Свойство("guids"), 	Параметры.guids, 	Неопределено);
	
	массивСсылок = ?(Параметры.Свойство("массивСсылок"),	Параметры.массивСсылок,	Новый Массив);
	Если ЗначениеЗаполнено(Ссылка) Тогда
		массивСсылок.Добавить(Ссылка);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(guids) Тогда
		Если ТипЗнч(guids) = Тип("Массив") Тогда
			Для каждого гуид Из guids Цикл
				массивСсылок.Добавить(HTTP.ПолучитьОбъектПоСсылке(Справочники.МВЗ, гуид, стрОшибки));
			КонецЦикла;
		ИначеЕсли ТипЗнч(guids) = Тип("Строка") Тогда
			массивСсылок.Добавить(HTTP.ПолучитьОбъектПоСсылке(Справочники.МВЗ, guids, стрОшибки));
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Спр.Ссылка								user_guid,
	|	ЕстьNULL(ЛимитыОстатки.СуммаОстаток, 0)	limit,
	|	Спр.Код			 						name
	|ИЗ
	|	Справочник.МВЗ КАК Спр
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.Лимиты.Остатки(,
	|		" + ?(ЗначениеЗаполнено(массивСсылок), "Инициатор В (&массивСсылок)", "") + "
	|	) КАК ЛимитыОстатки
	|ПО
	|	Спр.Ссылка = ЛимитыОстатки.Инициатор
	//НЕ ЛимитыОстатки.Инициатор = Значение(Справочник.МВЗ.ПустаяСсылка)
	|		" + ?(ЗначениеЗаполнено(массивСсылок), "ГДЕ Спр.Ссылка В (&массивСсылок)", "") + "
	|");
	
	Запрос.УстановитьПараметр("массивСсылок", массивСсылок);
	
	Возврат ЗначениеВозврата(КонвертацияТипов.ПолучитьМассивИзТаблицыЗначений(Запрос.Выполнить().Выгрузить()));
КонецФункции

Функция ПолучитьЛимитСеверстали(Параметры, стрОшибки = "") Экспорт
	
	// Получим параметры
	
	//Ссылка 	= ?(Параметры.Свойство("Ссылка"),	Параметры.Ссылка,	Неопределено);
	user_guid 	= ?(Параметры.Свойство("guids"), 	Параметры.guids, 	Неопределено);
	
	массивСсылок = ?(Параметры.Свойство("массивСсылок"),	Параметры.массивСсылок,	Новый Массив);
	//Если ЗначениеЗаполнено(Ссылка) Тогда
	//	массивСсылок.Добавить(Ссылка);
	//КонецЕсли;
	
	Если ЗначениеЗаполнено(user_guid) Тогда
		Если ТипЗнч(user_guid) = Тип("Строка") Тогда
			массивСсылок.Добавить(HTTP.ПолучитьОбъектПоСсылке(Справочники.МВЗ, user_guid, стрОшибки));
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Спр.Ссылка								user_guid,
	|	ЕстьNULL(ЛимитыОстатки.СуммаОстаток, 0)	limit,
	|	Спр.Код			 						name
	|ИЗ
	|	Справочник.МВЗ КАК Спр
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.Лимиты.Остатки(,
	|		" + ?(ЗначениеЗаполнено(массивСсылок), "Инициатор В (&массивСсылок)", "") + "
	|	) КАК ЛимитыОстатки
	|ПО
	|	Спр.Ссылка = ЛимитыОстатки.Инициатор
	//НЕ ЛимитыОстатки.Инициатор = Значение(Справочник.МВЗ.ПустаяСсылка)
	|		" + ?(ЗначениеЗаполнено(массивСсылок), "ГДЕ Спр.Ссылка В (&массивСсылок)", "") + "
	|");
	
	//Запрос.УстановитьПараметр("массивСсылок", массивСсылок);
	Запрос.УстановитьПараметр("массивСсылок", массивСсылок);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		структураОбъекта = Новый Структура();
		
		структураОбъекта.Вставить("user_guid", Выборка.user_guid);
		структураОбъекта.Вставить("limit", Выборка.limit);
		структураОбъекта.Вставить("name", Выборка.name);
	КонецЕсли;
	//Возврат ЗначениеВозврата(КонвертацияТипов.ПолучитьМассивИзТаблицыЗначений(Запрос.Выполнить().Выгрузить()));
	Возврат структураОбъекта;

КонецФункции


#КонецОбласти

#Область ИПР

Функция СоздатьЗапросНаСогласованиеТовара(reconcile, стрОшибки = "") Экспорт
	
	Структура = ПолучитьСтруктуруИзJSON(reconcile, стрОшибки); Если Структура = Неопределено Тогда Возврат Неопределено КонецЕсли;
	id = Неопределено;
	
	Если  Структура.Свойство("id", id) Тогда
		
		Если Структура.Свойство("user") И НЕ ПустаяСтрока(Структура.user) Тогда
			
			Пользователь = HTTP.ПолучитьОбъектПоСсылке(Справочники.ПользователиИнтернет, Структура.user, стрОшибки);
			Если Пользователь = Неопределено Тогда Возврат Неопределено; КонецЕсли;
		Иначе
			стрОшибки = "Не указан guid пользователя"; Возврат Неопределено;
		КонецЕсли;
		
		Если Структура.Свойство("product") И НЕ ПустаяСтрока(Структура.product) Тогда
			Товар = HTTP.ПолучитьОбъектПоСсылке(Справочники.Номенклатура, Структура.product, стрОшибки);
			Если Товар = Неопределено Тогда Возврат Неопределено; КонецЕсли;
		Иначе
			стрОшибки = "Не указан guid товара"; Возврат Неопределено;
		КонецЕсли;

		Запись = РегистрыСведений.ЗапросНаСогласованиеТовара.СоздатьМенеджерЗаписи();
		Запись.Период = ТекущаяДата();
		Запись.Пользователь = Пользователь;
		Запись.Номенклатура = Товар; 
		Запись.Контрагент = Пользователь.ФизЛицо.Контрагент;
		Запись.ID = id;
		Запись.Статус = 1;
		
		Попытка
			Запись.Записать(Ложь);
		Исключение
			стрОшибки = ОписаниеОшибки();
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;

	Возврат Новый Структура("id", id);
	
КонецФункции
Функция ПолучитьЗапросНаСогласование(Параметры, стрОшибки = "") Экспорт
	
	Статус = 5; // все плохо
	
	//1 - создан в 1с
	//2 - отправлен на рассмотрение
	//3 - согласован
	//4 - не согласован
	guids 	= ?(Параметры.Свойство("guid_reconcile"), Параметры.guid_reconcile, Неопределено);
	Если ЗначениеЗаполнено(guids) Тогда
		МассивГУИД = Новый Массив;
		Если ТипЗнч(guids) <> Тип("Массив") Тогда
			МассивГУИД.Добавить(guids);
		Иначе
			МассивГУИД = guids;
		КонецЕсли;
	Иначе
		стрОшибки = "Пустой Гуид. Список гуидов для запроса не был получен";
		Возврат "";
	КонецЕсли;

	Запрос = Новый Запрос("ВЫБРАТЬ ID, Номенклатура, Пользователь, Статус Status ИЗ РегистрСведений.ЗапросНаСогласованиеТовара ГДЕ ID В (&ГУИД)");
	Запрос.УстановитьПараметр("ГУИД", МассивГУИД);
	Выборка = Запрос.Выполнить().Выбрать();
	МассивРезультат = Новый Массив;
	Если Выборка.Следующий() Тогда
	
		МассивРезультат.Добавить(Новый Структура("id, status", Выборка.ID, Выборка.Status));
		
	КонецЕсли;
	
	Возврат  МассивРезультат; 
КонецФункции

#КонецОбласти

#Область WEB1C_POST_протоколы

Функция УстановитьСоединениеИПолучитьЗапрос(СайтНазначения, ТекстЗапроса, РесурсНаСервере, Запрос, стрОшибки, ЗащищенноеСоединение = Неопределено)
	
	АрхивироватьЕслиПривысилоСимволов = Константы.АрхивироватьСообщениеЕслиПривысилоСимволов.Получить();
	
	Попытка
		Если СайтНазначения = Перечисления.Сайты.garage Тогда
			НТТР = Новый HTTPСоединение(Константы.ПутьИнтернетМагазин.Получить(),,,,,,ЗащищенноеСоединение);
		ИначеЕсли СайтНазначения = Перечисления.Сайты.licota Тогда
			НТТР = Новый HTTPСоединение(Константы.ПутьИнтернетМагазинLicota.Получить(),,,,,,ЗащищенноеСоединение);
		Иначе
			ВызватьИсключение "Не известный сайт назначения";
		КонецЕсли;
	Исключение
		опОшибки = ОписаниеОшибки();
		стрОшибки = "Ошибка инициализации HTTPСоединение - " + опОшибки;
		ЗаписьЖурналаРегистрации("API2.connect", УровеньЖурналаРегистрации.Ошибка,,,стрОшибки);
		Возврат Неопределено; КонецПопытки;

	
	ЗаголовокHTTP = Новый Соответствие();
	
	// Посмотрим что за данные если большие, то заархивируем если маленькие, тогда отправим в jsone
	
	Если СтрДлина(ТекстЗапроса) > АрхивироватьЕслиПривысилоСимволов Тогда
		
		// Архивируем
		
		ИмяТекстФайл 	= ПолучитьИмяВременногоФайла("txt");
		ИмяЗипФайл		= ПолучитьИмяВременногоФайла("zip");
					
		// Скинем в файл
					
		ТекстЗапись = Новый ЗаписьТекста(ИмяТекстФайл);
		ТекстЗапись.Записать(ТекстЗапроса);
		ТекстЗапись.Закрыть();
					
		// Заархивируем файл
					
		Зиппо = Новый ЗаписьZipФайла(ИмяЗипФайл);
		Зиппо.Добавить(ИмяТекстФайл);
		Зиппо.Записать();
					
		// Вставим в запрос
		
		ЗаголовокHTTP.Вставить("Content-Type", "multipart/form-data");
		Запрос = Новый HTTPЗапрос(РесурсНаСервере, ЗаголовокHTTP);
		Запрос.УстановитьТелоИзДвоичныхДанных(Новый ДвоичныеДанные(ИмяЗипФайл));
		
		// Удалим за собой файлы
		
		УдалитьФайлы(ИмяТекстФайл);
		УдалитьФайлы(ИмяЗипФайл);
		
	Иначе
		
		//ЗаголовокHTTP.Вставить("Content-Type", "application/json");
		ЗаголовокHTTP.Вставить("Content-Type", "application/x-www-form-urlencoded");
		ЗаголовокHTTP.Вставить("charset", "windows-1251");
		//ЗаголовокHTTP.Вставить("charset", "UTF-8");
		Запрос = Новый HTTPЗапрос(РесурсНаСервере, ЗаголовокHTTP);
		Запрос.УстановитьТелоИзСтроки(ТекстЗапроса, КодировкаТекста.ANSI);
		//Запрос.УстановитьТелоИзСтроки(ТекстЗапроса);
		
	КонецЕсли;
	
	Возврат НТТР;
	
КонецФункции

Функция POST(СайтНазначения, ТекстЗапроса, РесурсНаСервере, стрОшибки = "", КодСостояния = 200, ТекстЛога = "")
	
	Перем HTTPЗапрос;
	
	// Получим соединение
	
	HTTPConnect = УстановитьСоединениеИПолучитьЗапрос(СайтНазначения, ТекстЗапроса, РесурсНаСервере, HTTPЗапрос, стрОшибки, Новый ЗащищенноеСоединениеOpenSSL);
	Если HTTPConnect = Неопределено Тогда Возврат Неопределено КонецЕсли;
	
	// Отправим текст
	
	Лог(ТекстЛога, "Отправлен POST запрос: " + ТекстЗапроса);
	
	Попытка
		HTTPОтвет = HTTPConnect.ОтправитьДляОбработки(HTTPЗапрос);
	Исключение
		опОшибки 		= ОписаниеОшибки();
		КодСостояния 	= 0;
    	стрОшибки 		= "Ошибка POST запроса - " + опОшибки;
		Лог(ТекстЛога, "Ошибка запроса: " + стрОшибки);
    	ЗаписьЖурналаРегистрации("post", УровеньЖурналаРегистрации.Ошибка,,,стрОшибки);
    	Возврат Неопределено; КонецПопытки;
	
	КодСостояния = HTTPОтвет.КодСостояния;
	ОтветСервера = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	// Лог
	
	Лог = "ответ сервера POST запроса:
	|
	|Ответ код: " + КодСостояния + "
	|Текст: " + ОтветСервера;

	Лог(ТекстЛога,Лог);
	ЗаписьЖурналаРегистрации("API2.POST", УровеньЖурналаРегистрации.Информация,,,Лог);
	
	// Все ок
	
	Возврат ОтветСервера;
	 		
КонецФункции
Функция PUT(СайтНазначения, ТекстЗапроса, РесурсНаСервере, стрОшибки = "")
	
	Перем HTTPЗапрос;
	
	// Получим соединение
	
	HTTPConnect = УстановитьСоединениеИПолучитьЗапрос(СайтНазначения, ТекстЗапроса, РесурсНаСервере, HTTPЗапрос, стрОшибки, Новый ЗащищенноеСоединениеOpenSSL);
	Если HTTPConnect = Неопределено Тогда Возврат Неопределено КонецЕсли;
	
	// Отправим текст
	
	Попытка
		HTTPОтвет = HTTPConnect.Получить(HTTPЗапрос);
	Исключение
		опОшибки = ОписаниеОшибки();
    	стрОшибки = "Ошибка POST запроса - " + опОшибки;
    	ЗаписьЖурналаРегистрации("post", УровеньЖурналаРегистрации.Ошибка,,,стрОшибки);
    	Возврат Неопределено; КонецПопытки;
	
	// Все ок
	
	Возврат HTTPОтвет.ПолучитьТелоКакСтроку();
 		
КонецФункции

#КонецОбласти

#Область ПодпискиНаСобытия

Функция ЗаполнитьИзмененияОбъекта(новОбъект, текОбъект, стОбъект, ДобавлятьПринудительно = Ложь)
	
	// Содает повторную структуру в которой есть только измененные поля
	// от старого объекта
	//
	// Возвр ИСТИНА если было заполнение структуры изза изменений
	// и ЛОЖЬ если изменений не было
	//
	// Массив: Если есть изменения, то пишутся все данные массива
	
	Добавлено = Ложь;
	
	Для Каждого Элемент Из текОбъект Цикл
		
		Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
			
			Добавлять 		= Ложь;
			новМассив 		= Новый Массив;
			
			Если НЕ стОбъект.Свойство(Элемент.Ключ) ИЛИ НЕ ЗначениеЗаполнено(стОбъект[Элемент.Ключ]) ИЛИ Элемент.Значение.Количество() <> стОбъект[Элемент.Ключ].Количество() Тогда
				
				// Раз разное количество элементов то тупо забиваем все элементы как измененные
				
				Для Каждого ЭлМассива Из Элемент.Значение Цикл новМассив.Добавить(ЭлМассива); КонецЦикла;
				
				Добавлено = Истина;
				новОбъект.Вставить(Элемент.Ключ, новМассив);
				
			Иначе Инд = -1;
				
				Для Каждого ЭлМассива Из Элемент.Значение Цикл Инд = Инд + 1;
					
					Если ТипЗнч(ЭлМассива) = Тип("Строка") ИЛИ ТипЗнч(ЭлМассива) = Тип("Число") ИЛИ ТипЗнч(ЭлМассива) = Тип("Дата") Тогда  // если тип простой, то можно просто сравнить
						Если ЭлМассива <>  стОбъект[Элемент.Ключ][Инд] Тогда Добавлять = Истина; Прервать; КонецЕсли;
					Иначе
						новСтруктураМассива = Новый Структура;
						Если ЗаполнитьИзмененияОбъекта(новСтруктураМассива, ЭлМассива, стОбъект[Элемент.Ключ][Инд], ДобавлятьПринудительно) Тогда
							Добавлять = Истина;   // если хотя бы однин элемент массива изменился, будем далее перезаполнять весь массив
							Прервать КонецЕсли; КонецЕсли; КонецЦикла; КонецЕсли;
			
			Если Добавлять Тогда Инд = -1; // заполняем всеми независимо изменилось или нет
				
				Для Каждого ЭлМассива Из Элемент.Значение Цикл Инд = Инд + 1;
					Если ТипЗнч(ЭлМассива) = Тип("Строка") ИЛИ ТипЗнч(ЭлМассива) = Тип("Число") ИЛИ ТипЗнч(ЭлМассива) = Тип("Дата") Тогда
						новМассив.Добавить(ЭлМассива); 
					Иначе
						новСтруктураМассива = Новый Структура;
						ЗаполнитьИзмененияОбъекта(новСтруктураМассива, ЭлМассива, стОбъект[Элемент.Ключ][Инд], Истина);
						новМассив.Добавить(новСтруктураМассива); КонецЕсли; КонецЦикла;
				
				Добавлено = Истина;
				новОбъект.Вставить(Элемент.Ключ, новМассив); КонецЕсли;
			
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
			
			новСтруктура = Новый Структура; 
			Если ЗаполнитьИзмененияОбъекта(новСтруктура, Элемент.Значение, ?(стОбъект.свойство(Элемент.Ключ), стОбъект[Элемент.Ключ], Новый Структура), ДобавлятьПринудительно) Тогда
				Добавлено = Истина;
				новОбъект.Вставить(Элемент.Ключ, новСтруктура); КонецЕсли;
			
		ИначеЕсли ДобавлятьПринудительно Или Не стОбъект.Свойство(Элемент.Ключ) Или Элемент.Значение <> стОбъект[Элемент.Ключ] Тогда
			
			Добавлено = Истина;
			новОбъект.Вставить(Элемент.Ключ, Элемент.Значение); КонецЕсли; КонецЦикла;
	
	Возврат Добавлено;

КонецФункции
Процедура ДобавитьИзменениеОбъекта(Объект, ДобОбъект, Добавлять = Неопределено) Экспорт 
	Если Добавлять = Неопределено Тогда
		Добавлять = Новый Структура;
	КонецЕсли;
	
	// Добавляет к объекту поля второго объекта
	Для Каждого Элемент Из ДобОбъект Цикл
		Если Объект.Свойство(Элемент.Ключ) И НЕ Добавлять.Свойство(Элемент.Ключ) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
			Если Объект.Свойство(Элемент.Ключ) Тогда
				Для Каждого ЭлМассива Из Элемент.Значение Цикл
					Объект[Элемент.Ключ].Добавить(ЭлМассива);
				КонецЦикла;
			Иначе
				Объект.Вставить(Элемент.Ключ, Элемент.Значение);
			КонецЕсли;
		Иначе
			Объект.Вставить(Элемент.Ключ, Элемент.Значение); 
		КонецЕсли; 
	КонецЦикла;
КонецПроцедуры

Процедура ПередЗаписьюСправочника(Источник, ТипОбъекта, СсылкаСправочник, Отказ) Экспорт
	
	Перем АдресРесурсаСервера;
	
	стрОшибки = "";
	
	Если ТипОбъекта = Тип("СправочникОбъект.Контрагенты") Тогда
		ТипОбъекта = Тип("СправочникОбъект.ПользователиИнтернет");
		Запрос = Новый Запрос("Выбрать Ссылка ИЗ Справочник.ПользователиИнтернет ГДЕ Контрагент = &Контрагент И НЕ ПометкаУдаления И НЕ Контрагент = Значение(Справочник.Контрагент.ПустаяСсылка)");
		Запрос.УстановитьПараметр("Контрагент", СсылкаСправочник);
		выборка = Запрос.Выполнить().Выбрать();
		Если выборка.Следующий() Тогда
			СсылкаСправочник = выборка.Ссылка;
		Иначе 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	#Область Новый_API
	
	// Проверим объект работает по новому API или нет
	
	Имя = СсылкаСправочник.Метаданные().Имя;
	
	Попытка
		АдресРесурсаСервера = Справочники[Имя].API_URLОбновленияНаСайте();
	Исключение
	КонецПопытки;
	
	Если АдресРесурсаСервера <> Неопределено Тогда
		Источник.ДополнительныеСвойства.Вставить("API3_ЗаписатьВБуфер", Истина);
		ВОЗВРАТ; КонецЕсли;
	
	//ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.СообщенияПользователям") Тогда
	//	
	//	АдресРесурсаСервера 		= Справочники.СообщенияПользователям.API_URLОбновленияНаСайте();
	//	//ПараметрыПолученияОбъекта 	= Новый Структура("Очередь, Метод, ПараметрыМетода", 55, "Справочники.СообщенияПользователям.API_ПолучитьОбъект",  Новый Структура("Ссылка", СсылкаСправочник));
	//	ПараметрыПолученияОбъекта 	= Новый Структура("Очередь, Метод, ПараметрыМетода", 55, "Справочники.СообщенияПользователям.API_ПолучитьОбъект",  СсылкаСправочник);
		
	#КонецОбласти
	
	// Закатаем объект до записи
	
	Если ТипОбъекта = Тип("СправочникОбъект.Номенклатура") Тогда
			
		// НОМЕНКЛАТУРА
		
		АдресРесурсаСервера			= ?(Источник.ЭтоГруппа, "/api/product_categories", "/api/products");
		ПараметрыПолученияОбъекта 	= Новый Структура("Очередь, Метод, ПараметрыМетода",
										?(Источник.ЭтоГруппа, 25, 30),
										?(Источник.ЭтоГруппа, "ПолучитьКатегории", "ПолучитьТовары"),
										Новый Структура("Ссылка, БудутЗаписаны", СсылкаСправочник, 
													?(Источник.ДополнительныеСвойства.Свойство("БудутЗаписаны"),
																								Источник.ДополнительныеСвойства.БудутЗаписаны,
																								Неопределено)));
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.Производители") Тогда
		
		// ПРОИЗВОДИТЕЛИ
		
		АдресРесурсаСервера			= "/api/manufacturers";
		ПараметрыПолученияОбъекта 	= Новый Структура("Очередь, Метод, ПараметрыМетода", 10, "ПолучитьПроизводителей", Новый Структура("Ссылка", СсылкаСправочник));
		
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.Склады") Тогда
		
		// Склады
		
		АдресРесурсаСервера			= "/api/warehouses";
		ПараметрыПолученияОбъекта 	= Новый Структура("Очередь, Метод, ПараметрыМетода, ОсновнойСклад", 10, "ПолучитьСклады", Новый Структура("Ссылка", СсылкаСправочник), СсылкаСправочник.ОсновнойСкладНаСайте);
		
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.ИнтернетСтатьи") Тогда
		
		// СТАТЬИ
		
		АдресРесурсаСервера			= ?(Источник.ЭтоГруппа, "/api/article_categories", "/api/articles");
		ПараметрыПолученияОбъекта 	= Новый Структура("Очередь, Метод, ПараметрыМетода",
										?(Источник.ЭтоГруппа, 15, 20),
										?(Источник.ЭтоГруппа, "ПолучитьКатегорииСтатьи", "ПолучитьСтатьи"),
										Новый Структура("Ссылка, БудутЗаписаны", СсылкаСправочник, 
													?(Источник.ДополнительныеСвойства.Свойство("БудутЗаписаны"),
																								Источник.ДополнительныеСвойства.БудутЗаписаны,
																								Неопределено)));
		
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.ИнтернетКонтакты") Тогда
		
		// КОНТАКТЫ
		
		АдресРесурсаСервера			= ?(Источник.ЭтоГруппа, "/api/article_categories", "/api/articles");
		ПараметрыПолученияОбъекта 	= Новый Структура("Очередь, Метод, ПараметрыМетода",
										?(Источник.ЭтоГруппа, 15, 20),
										?(Источник.ЭтоГруппа, "ПолучитьКатегорииСтатьи", "ПолучитьСтатьи"),
										Новый Структура("Ссылка, БудутЗаписаны", СсылкаСправочник, 
													?(Источник.ДополнительныеСвойства.Свойство("БудутЗаписаны"),
																								Источник.ДополнительныеСвойства.БудутЗаписаны,
																								Неопределено)));
		
		
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.ПользователиИнтернет") Тогда
		
		// ПОЛЬЗОВАТЕЛИ
			
		АдресРесурсаСервера			= "/api/users";
		ПараметрыПолученияОбъекта 	= Новый Структура("Очередь, Метод, ПараметрыМетода", 25, "ПолучитьПользователей", Новый Структура("Ссылка", СсылкаСправочник));
		
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.Пользователи") Тогда
		
		// ПОЛЬЗОВАТЕЛИ (основной менеджер)
			
		АдресРесурсаСервера			= "/api/managers";
		ПараметрыПолученияОбъекта 	= Новый Структура("Очередь, Метод, ПараметрыМетода", 25, "ПолучитьМенеджеров", Новый Структура("Ссылка", СсылкаСправочник));	
			
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.Акция") Тогда
		
		// АКЦИИ
		
		АдресРесурсаСервера			= "/api/promos";
		ПараметрыПолученияОбъекта 	= Новый Структура("Очередь, Метод, ПараметрыМетода", 50, "ПолучитьАкции", Новый Структура("Ссылка", СсылкаСправочник));
		
	//ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.СообщенияПользователям") Тогда
	//	
	//	АдресРесурсаСервера 		= Справочники.СообщенияПользователям.API_URLОбновленияНаСайте();
	//	//ПараметрыПолученияОбъекта 	= Новый Структура("Очередь, Метод, ПараметрыМетода", 55, "Справочники.СообщенияПользователям.API_ПолучитьОбъект",  Новый Структура("Ссылка", СсылкаСправочник));
	//	ПараметрыПолученияОбъекта 	= Новый Структура("Очередь, Метод, ПараметрыМетода", 55, "Справочники.СообщенияПользователям.API_ПолучитьОбъект",  СсылкаСправочник);
	//	
	Иначе Возврат; КонецЕсли; // Не извесный справочник
	
	// Получим текущий объект из базы
	
	Параметры 	= ПараметрыПолученияОбъекта.ПараметрыМетода;
	ОбъектДо 	= Вычислить(ПараметрыПолученияОбъекта.Метод + "(Параметры)");
	
	Если ОбъектДо = Неопределено Тогда
			ОбщиеФункции.СообщитьТекст("Ошибка при помещении объекта в буфер обмена сайта
			|" + стрОшибки); Отказ = Истина; Возврат; КонецЕсли;
	
	Источник.ДополнительныеСвойства.Вставить("API2_ЗаписатьВБуфер", 
					Новый Структура("Объект, ОбъектСт, КомандаHTTP, АдресРесурсаСервера, ПолучениеОбъекта",
										СсылкаСправочник,
										ОбъектДо,
										Перечисления.КомандыHTTP.POST,
										АдресРесурсаСервера,
										ПараметрыПолученияОбъекта));
										
	ApiLicota.ПередЗаписьюСправочника(Источник, ТипОбъекта, СсылкаСправочник, Отказ);
	
КонецПроцедуры


Процедура ЗаписатьНаборТоваровВБуфер_ФоновымЗаданием(ОбъектСсылка,ДополнительныеСвойства) Экспорт
	
	Перем API3_ЗаписатьВБуфер, API2_ЗаписатьВБуфер, APILICOTA_ЗаписатьВБуфер;
	
	Отказ=Ложь;//оставлено для совместимости
	
	Если ДополнительныеСвойства.Свойство("API3_ЗаписатьВБуфер", API3_ЗаписатьВБуфер) Тогда
		ЗаписатьОбъектВБуферОтправки3(ОбъектСсылка, Новый Структура, Отказ); 
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("API2_ЗаписатьВБуфер", API2_ЗаписатьВБуфер) Тогда
		ЗаписатьОбъектВБуферОтправки(ОбъектСсылка, API2_ЗаписатьВБуфер,Отказ); 
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("APILICOTA_ЗаписатьВБуфер", APILICOTA_ЗаписатьВБуфер) Тогда
		ApiLicota.ЗаписатьОбъектВБуферОтправки(ОбъектСсылка, APILICOTA_ЗаписатьВБуфер,Отказ); 
	КонецЕсли;
	
КонецПроцедуры	 


Процедура ЗаписатьОбъектВБуферОтправки3(Ссылка, ДополнительныеПараметры, Отказ)
	
	// Определим менедежр
	
	МетаОб = Ссылка.Метаданные();
	
	Если Метаданные.Справочники.Содержит(МетаОб) Тогда
		Менеджер = Справочники[МетаОб.Имя];
	ИначеЕсли Метаданные.Документы.Содержит(МетаОб) Тогда
		Менеджер = Документы[МетаОб.Имя];
	Иначе 
		Возврат КонецЕсли;
	
	// Запишем
	
	Сайт = Менеджер.API_СайтОбъекта(Ссылка);
	
	Запись = РегистрыСведений.БуферКомандДляСайта_API2.СоздатьМенеджерЗаписи();
	Запись.СайтНазначения 			= ?(Сайт = Неопределено, Перечисления.Сайты.garage, Сайт);
	Запись.Объект 					= Ссылка;
	Запись.ДатаПримененияКоманды 	= ТекущаяДата();
	Запись.КомандаHTTP 				= Перечисления.КомандыHTTP.POST;
	Запись.АдресРесурсаСервера 		= Менеджер.API_URLОбновленияНаСайте();
	Запись.ТелоЗапроса 				= ЗначениеВСтрокуВнутр(КонвертацияТипов.ПолучитьСтруктуруИзСТрокиТаблицыЗначений(Менеджер.API_ПолучитьОбъект(Ссылка)));
	
	Если Не ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(Запись) Тогда Отказ = Истина КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьОбъектВБуферОтправки(ЗНАЧ ОбъектСсылка, ПараметрыЗаписи, Отказ) Экспорт
	
	Если ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.Контрагенты") Тогда
		ОбъектСсылка = ПараметрыЗаписи.Объект;
	КонецЕсли;
	
	// Получим данные
	
	Параметры 	= ПараметрыЗаписи.ПолучениеОбъекта.ПараметрыМетода;
	Если Параметры.Свойство("БудутЗаписаны") И Параметры.БудутЗаписаны <> Неопределено Тогда 
		Параметры.Вставить("БратьДопТаблицыОтсюда", Параметры.БудутЗаписаны) КонецЕсли;
	
	Если Параметры.Ссылка <> ОбъектСсылка Тогда
		Параметры.Вставить("Ссылка", ОбъектСсылка);
	КонецЕсли;
	
	текОбъект 	= Вычислить(ПараметрыЗаписи.ПолучениеОбъекта.Метод + "(Параметры)");
	
	стОбъект	= ПараметрыЗаписи.ОбъектСт;
	новОбъект	= Новый Структура;
	
	Если стОбъект.Количество() = 0 Тогда
		стОбъект.Вставить("ВыгружатьНаСайт", Ложь);
		стОбъект.Вставить("ПометкаУдаления", Ложь);
	КонецЕсли;
	
	Если текОбъект.Количество() = 0 Тогда
		текОбъект.Вставить("ВыгружатьНаСайт", Ложь);
		текОбъект.Вставить("ПометкаУдаления", Ложь);
	КонецЕсли;
	
	Если стОбъект.Свойство("ВыгружатьНаСайт") И текОбъект.Свойство("ВыгружатьНаСайт")
		И НЕ стОбъект.ВыгружатьНаСайт И НЕ текОбъект.ВыгружатьНаСайт Тогда
		Возврат;
	КонецЕсли;
	// Вычислим изменения объекта
	
	Если ЗаполнитьИзмененияОбъекта(новОбъект, текОбъект, стОбъект) Тогда
		Если новОбъект.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		// Считаем объект из регистра если есть
		
		Запрос = Новый Запрос("ВЫБРАТЬ ТелоЗапроса, АдресРесурсаСервера ИЗ РегистрСведений.БуферКомандДляСайта_API2 ГДЕ Объект = &Объект И СайтНазначения = Значение(Перечисление.Сайты.garage)");
		Запрос.УстановитьПараметр("Объект", ОбъектСсылка);
		Выполнение = Запрос.Выполнить();
		
		// Определим первый суффикс
	
		Если 	Не стОбъект.Свойство("guid") Или 
				(стОбъект.ПометкаУдаления И Не текОбъект.ПометкаУдаления) Или
				(Не стОбъект.ВыгружатьНаСайт И текОбъект.ВыгружатьНаСайт) Тогда Суффикс = "update";
			
		ИначеЕсли 	(Не стОбъект.ПометкаУдаления И текОбъект.ПометкаУдаления) Или
					(стОбъект.ВыгружатьНаСайт И Не текОбъект.ВыгружатьНаСайт) Тогда Суффикс = "delete";
					
		Иначе Суффикс = "update"; КонецЕсли;
				
		//Добавить при удалении в структуру поле destroy. Если true - то удаляем сущность иначе просто отключаем
		Если Суффикс = "delete" Тогда
			новОбъект.Вставить("destroy", Ложь);
		КонецЕсли;
		
		// Сравним считаный с измененным и добавим новые изменения
		
		ПредАдрес = "";
		
		Если Не Выполнение.Пустой() Тогда
			
			Выборка = Выполнение.Выбрать();
			Выборка.Следующий();
			                                                                                                                                    	
			ДобавитьИзменениеОбъекта(новОбъект, ЗначениеИзСтрокиВнутр(Выборка.ТелоЗапроса)); 
			
			// Пред суффикс
			
			ПредСуффикс = ?(Найти(Выборка.АдресРесурсаСервера, "create"), "create", ?(Найти(Выборка.АдресРесурсаСервера, "delete"),"delete","update"));
			
			// Определим новый суффикс
			
			Если ПредСуффикс = "create" И Суффикс = "delete" Тогда 
				
				// такой надо удалять так как не успел пожить
				
				Запись = РегистрыСведений.БуферКомандДляСайта_API2.СоздатьМенеджерЗаписи();
				Запись.Объект = ОбъектСсылка;
				Если Не ОбщиеФункции.УдалитьОбъектИСообщитьЕслиОшибка(Запись) Тогда
					Отказ = Истина КонецЕсли;
				Возврат;
				
			ИначеЕсли ПредСуффикс = "delete" И Суффикс = "create" Тогда	
				Суффикс = "update";
			ИначеЕсли ПредСуффикс = "create" И Суффикс = "update" Тогда
				Суффикс = "create"; КонецЕсли;
			
		КонецЕсли;
		
		Если ОпределитьИмяОбъектаПоТипу(ОбъектСсылка) = "user" Тогда
			новОбъект.Вставить("email", текОбъект.email);
			новОбъект.Вставить("id", текОбъект.id);
		КонецЕсли;
		
		Если Суффикс = "update" И ОпределитьИмяОбъектаПоТипу(ОбъектСсылка) = "product_category" Тогда
			новОбъект.Вставить("parent", текОбъект.parent);
			новОбъект.Вставить("root", текОбъект.root);
			новОбъект.Вставить("additional_parents", текОбъект.additional_parents);
		КонецЕсли;
	
		Если Суффикс = "update" И ОпределитьИмяОбъектаПоТипу(ОбъектСсылка) = "article_category" Тогда
			новОбъект.Вставить("root", текОбъект.root);
			новОбъект.Вставить("categories", текОбъект.categories);
		КонецЕсли;
		
		Если Суффикс = "update" Тогда
			новОбъект.Вставить("enabled", Истина);
		КонецЕсли;
	
		ДополнитьЗависимымиПолями(новОбъект, текОбъект, ОпределитьИмяОбъектаПоТипу(ОбъектСсылка));
		
		// Запишем
		
		Запись = РегистрыСведений.БуферКомандДляСайта_API2.СоздатьМенеджерЗаписи();
		Запись.СайтНазначения		= Перечисления.Сайты.garage;
		Запись.Объект 				= ОбъектСсылка;
		Запись.КомандаHTTP 			= ПараметрыЗаписи.КомандаHTTP;
		Запись.АдресРесурсаСервера 	= ПараметрыЗаписи.АдресРесурсаСервера + "/" + Суффикс;
		Запись.ТипОбъекта 			= ОпределитьИмяОбъектаПоТипу(ОбъектСсылка);
		Запись.ТелоЗапроса			= ЗначениеВСтрокуВнутр(новОбъект);
		Запись.Очередь 				= ПараметрыЗаписи.ПолучениеОбъекта.Очередь;
		Запись.ЕстьОшибка			= Ложь;
		Запись.ДатаИзменений		= ТекущаяДата();
		
		Если Не ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(Запись) Тогда
			Отказ = Истина КонецЕсли; 
	КонецЕсли;
	
	ДобавитьСвязанныеДанныеВБуфер(Новый Структура("Объект, стОбъект, текОбъект, ПараметрыЗаписи", ОбъектСсылка, стОбъект, текОбъект, ПараметрыЗаписи));
КонецПроцедуры

Функция ДополнитьЗависимымиПолями(новОбъект, текОбъект, типОбъекта)
	Если типОбъекта = "product" И (новОбъект.Свойство("complectation_string") ИЛИ новОбъект.Свойство("complectation")) Тогда
		Если НЕ новОбъект.Свойство("complectation_string") 	Тогда новОбъект.Вставить("complectation_string"	, текОбъект.complectation_string) КонецЕсли;
		Если НЕ новОбъект.Свойство("complectation") 		Тогда новОбъект.Вставить("complectation"		, текОбъект.complectation) КонецЕсли;
	КонецЕсли;
КонецФункции // ДополнитьЗависимымиПолями()

Функция ДобавитьСвязанныеДанныеВБуфер(Параметры)
	стВыгружатьНаСайт = ?(Параметры.стОбъект.Свойство("ВыгружатьНаСайт"), Параметры.стОбъект.ВыгружатьНаСайт, Ложь);
	текВыгружатьНаСайт = ?(Параметры.текОбъект.Свойство("ВыгружатьНаСайт"), Параметры.текОбъект.ВыгружатьНаСайт, Ложь);
	Если ТипЗнч(Параметры.Объект) = Тип("СправочникСсылка.Склады") Тогда
		Если НЕ стВыгружатьНаСайт = текВыгружатьНаСайт ИЛИ НЕ Параметры.ПараметрыЗаписи.ПолучениеОбъекта.ОсновнойСклад = Параметры.Объект.ОсновнойСкладНаСайте Тогда
			КодПолученияМассиваОбъектов = "
			|Запрос = Новый Запрос;
			|Запрос.Текст = ""ВЫБРАТЬ Номенклатура КАК Ссылка ИЗ РегистрНакопления.ТоварыНаСкладах.Остатки(, Склад = &Склад) КАК Остатки"";
			|Запрос.УстановитьПараметр(""Склад"", пОбъект);
			|
			|массивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(""Ссылка"");
			|";
			ПараметрыФункции = "(Новый Структура(""массивСсылок, Области"", массивОбъектов, Новый Структура(""Остатки"")))";
	
			API2.ЗаписатьНаборВБуферОбновленияНаСайте(Параметры.Объект, 
				Новый Структура("Поле, АдресРесурсаСервера, Очередь, ФункцияПолученияОбъекта, КодПолученияМассиваОбъектов, ПараметрыФункцииПолученияОбъекта", 
								"", "/api/products", 40, "ПолучитьТовары", КодПолученияМассиваОбъектов, ПараметрыФункции));
		КонецЕсли;
	КонецЕсли;						
	
	Если НЕ стВыгружатьНаСайт = текВыгружатьНаСайт Тогда
		Если ТипЗнч(Параметры.Объект) = Тип("СправочникСсылка.Номенклатура") И Параметры.Объект.ЭтоГруппа Тогда
			// Если это категория, у которой есть дочерние категории, то надо обновить категории
			// Если это категория, у которой нет дочерних категорий, то надо обновить подчиненные товары
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ Первые 1 * ИЗ Справочник.Номенклатура КАК Номен ГДЕ Родитель = &Объект И ЭтоГруппа";
			
			Запрос.УстановитьПараметр("Объект", Параметры.Объект);
			
			Выборка = Запрос.Выполнить().Выбрать();
			естьПодчиненныеКатегории = Ложь;
			Если Выборка.Следующий() Тогда
				естьПодчиненныеКатегории = Истина;
			КонецЕсли;
			
			Если естьПодчиненныеКатегории Тогда
				КодПолученияМассиваОбъектов = "
				|Запрос = Новый Запрос;
				|Запрос.Текст = ""ВЫБРАТЬ Ссылка ИЗ Справочник.Номенклатура КАК Спр Где Родитель = &Объект И ВыгружатьНаСайт И ЭтоГруппа"" + 
				|	"" ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ Спр.Ссылка ИЗ Справочник.Номенклатура.ДополнительныеРодители КАК Спр Где Спр.Родитель = &Объект И Спр.Ссылка.ВыгружатьНаСайт И Спр.Ссылка.ЭтоГруппа"";
				|Запрос.УстановитьПараметр(""Объект"", пОбъект);
				|
				|массивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(""Ссылка"");
				|";
				ПараметрыФункции = "(Новый Структура(""массивСсылок, Области"", массивОбъектов, Новый Структура(""Родители"")))";

				API2.ЗаписатьНаборВБуферОбновленияНаСайте(Параметры.Объект, 
					Новый Структура("Поле, АдресРесурсаСервера, Очередь, ФункцияПолученияОбъекта, КодПолученияМассиваОбъектов, ПараметрыФункцииПолученияОбъекта", 
									"", "/api/product_categories", 25, "ПолучитьКатегории", КодПолученияМассиваОбъектов, ПараметрыФункции));
			Иначе
				КодПолученияМассиваОбъектов = "
				|Запрос = Новый Запрос;
				|Запрос.Текст = ""ВЫБРАТЬ Ссылка ИЗ Справочник.Номенклатура КАК Спр Где Родитель = &Объект И ВыгружатьНаСайт"" + 
				|	"" ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ Спр.Ссылка ИЗ Справочник.Номенклатура.ДополнительныеРодители КАК Спр Где Спр.Родитель = &Объект И Спр.Ссылка.ВыгружатьНаСайт"";
				|Запрос.УстановитьПараметр(""Объект"", пОбъект);
				|
				|массивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(""Ссылка"");
				|";
				ПараметрыФункции = "(Новый Структура(""массивСсылок, Области"", массивОбъектов, Новый Структура(""Поля, Родители"")))";

				API2.ЗаписатьНаборВБуферОбновленияНаСайте(Параметры.Объект, 
					Новый Структура("УдалятьПустые, Поле, АдресРесурсаСервера, Очередь, ФункцияПолученияОбъекта, КодПолученияМассиваОбъектов, ПараметрыФункцииПолученияОбъекта", 
									Истина, "", "/api/products", 25, "ПолучитьТовары", КодПолученияМассиваОбъектов, ПараметрыФункции));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецФункции // ДобавитьСвязанныеДанныеВБуфер()
#КонецОбласти

#Область Добавление_в_Буфер

Функция ЗаписатьЗаявкиНаСогласованиеДляПередачиНаСайт(НаборЗаписей) Экспорт
	
	Для Каждого Заявка Из НаборЗаписей Цикл
		
	Запись = РегистрыСведений.БуферКомандДляСайта_API2.СоздатьМенеджерЗаписи();
	Запись.СайтНазначения		= Перечисления.Сайты.garage;
	Запись.Объект 				= Заявка.Id;
	Запись.КомандаHTTP 			= Перечисления.КомандыHTTP.POST;
	Запись.АдресРесурсаСервера 	= "/api/reconciles/update";
	Запись.ТипОбъекта 			= "reconcile_message";
	Запись.ТелоЗапроса			= ЗначениеВСтрокуВнутр(Новый Структура("guid, id, status", Заявка.ID, Заявка.ID, Заявка.Статус));
	Запись.Очередь 				= 100;
	Запись.ЕстьОшибка			= Ложь;
	Запись.ДатаИзменений		= ТекущаяДата();
		
	Если Не ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(Запись) Тогда
		//ничего не делаем
		Возврат Ложь;
	КонецЕсли;

	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ЗаписатьОбъектВБуферНаИзменениеНаСайте(ОбъектСсылка, ПараметрыЗаписи, Отказ) Экспорт
	
	новОбъект	= ПараметрыЗаписи.ТелоЗапроса;
	Если новОбъект.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ ТелоЗапроса, АдресРесурсаСервера ИЗ РегистрСведений.БуферКомандДляСайта_API2 ГДЕ Объект = &Объект И СайтНазначения = Значение(Перечисление.Сайты.garage)");
	Запрос.УстановитьПараметр("Объект", ОбъектСсылка);
	Выполнение = Запрос.Выполнить();
		
	Суффикс = ПараметрыЗаписи.Суффикс;
		
	ПредАдрес = "";
	
	Если Не Выполнение.Пустой() Тогда
		Выборка = Выполнение.Выбрать();
		Выборка.Следующий();
		                                                                                                                                    	
		ДобавитьИзменениеОбъекта(новОбъект, ЗначениеИзСтрокиВнутр(Выборка.ТелоЗапроса)); 
		
		// Пред суффикс
		ПредСуффикс = ?(Найти(Выборка.АдресРесурсаСервера, "create"), "create", ?(Найти(Выборка.АдресРесурсаСервера, "delete"),"delete","update"));
		
		// Определим новый суффикс
		
		Если ПредСуффикс = "create" И Суффикс = "delete" Тогда 
			// такой надо удалять так как не успел пожить
			
			Запись = РегистрыСведений.БуферКомандДляСайта_API2.СоздатьМенеджерЗаписи();
			Запись.Объект = ОбъектСсылка;
			Если Не ОбщиеФункции.УдалитьОбъектИСообщитьЕслиОшибка(Запись) Тогда
				Отказ = Истина КонецЕсли;
			Возврат Истина;
		ИначеЕсли ПредСуффикс = "delete" И Суффикс = "create" Тогда	
			Суффикс = "update";
		ИначеЕсли ПредСуффикс = "create" И Суффикс = "update" Тогда
			Суффикс = "create"; 
		КонецЕсли;
	КонецЕсли;
	
	// Запишем
	Запись = РегистрыСведений.БуферКомандДляСайта_API2.СоздатьМенеджерЗаписи();
	Запись.СайтНазначения 		= Перечисления.Сайты.garage;
	Запись.Объект 				= ОбъектСсылка;
	Запись.КомандаHTTP 			= ПараметрыЗаписи.КомандаHTTP;
	Запись.АдресРесурсаСервера 	= ПараметрыЗаписи.АдресРесурсаСервера + "/" + Суффикс;
	Запись.ТипОбъекта 			= ОпределитьИмяОбъектаПоТипу(ОбъектСсылка);
	Запись.ТелоЗапроса			= ЗначениеВСтрокуВнутр(новОбъект);
	Запись.Очередь 				= ПараметрыЗаписи.Очередь;
	Запись.ЕстьОшибка			= Ложь;
	Запись.ДатаИзменений		= ТекущаяДата();
	
	Если Не ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(Запись) Тогда
		Отказ = Истина 
	КонецЕсли;
КонецФункции

Процедура ЗаписатьНаборТоваровВБуфер(пНаборЗаписей) Экспорт 
	
	Если (ТипЗнч(пНаборЗаписей) = Тип("Массив")) Тогда //из наборов записей ТоварыНаСкладах и ТоварыВРезерве передается Массив
		
		ОбластиИзменения = "Остатки"; 
		массивНоменклатуры = пНаборЗаписей;
	Иначе
		ОбластиИзменения = ОбластиИзменения(пНаборЗаписей);
		
		массивНоменклатуры = Новый Массив;
		
		УсловиеЦены = (ТипЗнч(пНаборЗаписей) = Тип("РегистрСведенийНаборЗаписей.ЦеныНоменклатуры"));
		Для каждого лЗапись Из пНаборЗаписей Цикл
			Если УсловиеЦены Тогда
				Если лЗапись.ТипЦен.ВыгружатьНаСайт И лЗапись.Период <= ТекущаяДата() Тогда
					массивНоменклатуры.Добавить(лЗапись.Номенклатура);
				КонецЕсли;
				// TODO: еще у лЗапись есть поле "Период" - дата с которой стартует цена
			Иначе
				массивНоменклатуры.Добавить(лЗапись.Номенклатура);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	
	
	Если массивНоменклатуры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	полученныеТовары = ПолучитьТовары(Новый Структура("массивСсылок, Области ", массивНоменклатуры, Новый Структура(ОбластиИзменения)));
	
	Если НЕ ЗначениеЗаполнено(полученныеТовары) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(полученныеТовары) = Тип("Структура") Тогда
		товары = Новый Массив;
		товары.Добавить(полученныеТовары);
	Иначе
		товары = полученныеТовары;
	КонецЕсли;
	
	/////////////////////////////////////////////////////////////////////////////////////
	// ЗАПИСЬ В БУФЕР
	
	ПараметрыЗаписи = Новый Структура("КомандаHTTP, АдресРесурсаСервера, Очередь", 
										Перечисления.КомандыHTTP.POST, 
										"/api/products",
										40);
		
	Запрос = Новый Запрос("ВЫБРАТЬ ТелоЗапроса, АдресРесурсаСервера, Объект ИЗ РегистрСведений.БуферКомандДляСайта_API2 ГДЕ Объект В (&Объект) И СайтНазначения = Значение(Перечисление.Сайты.garage)");
	Запрос.УстановитьПараметр("Объект", массивНоменклатуры);
	Выполнение = Запрос.Выполнить().Выгрузить();
	
	Выполнение.Индексы.Добавить("Объект");
		
	Для каждого новОбъект Из товары Цикл
		Суффикс = "update";
		
		Выборка = Выполнение.Найти(новОбъект.guid, "Объект");
		Если НЕ Выборка = Неопределено Тогда
			ДобавитьИзменениеОбъекта(новОбъект, ЗначениеИзСтрокиВнутр(Выборка.ТелоЗапроса));
			
			// Пред суффикс
			ПредСуффикс = ?(Найти(Выборка.АдресРесурсаСервера, "create"), "create", ?(Найти(Выборка.АдресРесурсаСервера, "delete"),"delete","update"));
			
			// Определим новый суффикс
			
			Если ПредСуффикс = "create" И Суффикс = "delete" Тогда 
				// такой надо удалять так как не успел пожить
				
				Запись = РегистрыСведений.БуферКомандДляСайта_API2.СоздатьМенеджерЗаписи();
				Запись.Объект = новОбъект.guid;
				Если Не ОбщиеФункции.УдалитьОбъектИСообщитьЕслиОшибка(Запись) Тогда
					//ничего не делаем
				КонецЕсли;
				Продолжить;
			ИначеЕсли ПредСуффикс = "delete" И Суффикс = "create" Тогда	
				Суффикс = "update";
			ИначеЕсли ПредСуффикс = "create" И Суффикс = "update" Тогда
				Суффикс = "create"; 
			КонецЕсли;
		КонецЕсли;
	
		// Запишем
		Запись = РегистрыСведений.БуферКомандДляСайта_API2.СоздатьМенеджерЗаписи();
		Запись.СайтНазначения		= Перечисления.Сайты.garage;
		Запись.Объект 				= новОбъект.guid;
		Запись.КомандаHTTP 			= ПараметрыЗаписи.КомандаHTTP;
		Запись.АдресРесурсаСервера 	= ПараметрыЗаписи.АдресРесурсаСервера + "/" + Суффикс;
		Запись.ТипОбъекта 			= ОпределитьИмяОбъектаПоТипу(новОбъект.guid);
		Запись.ТелоЗапроса			= ЗначениеВСтрокуВнутр(новОбъект);
		Запись.Очередь 				= ПараметрыЗаписи.Очередь;
		Запись.ЕстьОшибка			= Ложь;
		Запись.ДатаИзменений		= ТекущаяДата();
		
		Если Не ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(Запись) Тогда
			//ничего не делаем
			ЗаписьНеУдалась=Истина;
		КонецЕсли;
	КонецЦикла;
	
	ApiLicota.ЗаписатьНаборТоваровВБуфер(пНаборЗаписей);
КонецПроцедуры // ЗаписатьНаборТоваровВБуфер()

Функция ЗаписатьНаборВБуферОбновленияНаСайте(пОбъект, Параметры, РежимУпаковкиДляДальнейшегоРазбора = Истина) Экспорт 
	// пОбъект - объект на основании которого можно получить список обновляемых объектов
	// Параметры - структура
	//	- УдалятьПустые 						- добавлять в буфер на удаление объекты, которые теперь возвращают пустую структуру при получении с помощью функции ФункцияПолученияОбъекта
	//  - Поле 									- если пОбъект это набор записей, то у записа в Поле будет записан объект для записи в буфер
	//  - АдресРесурсаСервера 					- для заполнения реквизита записи буфера
	//  - Очередь 								- для заполнения реквизита записи буфера
	//  - КодПолученияМассиваОбъектов			- код выполнения которого получит массив объектов для записи в буфер
	//  - ФункцияПолученияОбъекта				- функция с помощью которой получается структура объекта
	//  - ПараметрыФункцииПолученияОбъекта		- 
	
	массивОбъектов = Новый Массив;
	ДатыПрименения = Новый Соответствие;
	
	//Если РежимУпаковкиДляДальнейшегоРазбора Тогда
	//	Если НЕ (Параметры.Свойство("КодПолученияМассиваОбъектов") И ЗначениеЗаполнено(Параметры.КодПолученияМассиваОбъектов)) Тогда
	//		Для каждого лЗапись Из пОбъект Цикл
	//			массивОбъектов.Добавить(лЗапись[Параметры.Поле]);
	//		КонецЦикла;
	//	КонецЕсли;
	//	
	//	// сохраним информацию о наборе
	//	Запись = РегистрыСведений.БуферКомандДляСайта_API2.СоздатьМенеджерЗаписи();
	//	Запись.Объект 				= Строка(Новый УникальныйИдентификатор);
	//	Запись.АдресРесурсаСервера 	= "algorithm";
	//	Запись.ТипОбъекта 			= "algorithm";
	//	Запись.ТелоЗапроса			= ЗначениеВСтрокуВнутр(Новый Структура("МассивОбъектов, Параметры", массивОбъектов, Параметры));
	//	Запись.Очередь 				= 1000;
	//	Запись.ЕстьОшибка			= Ложь;
	//	Запись.ДатаИзменений		= ТекущаяДата();
	//	//Запись.ДатаПримененияКоманды = ДатаПримененияКоманды;
	//	
	//	Если Не ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(Запись) Тогда
	//		Отказ = Истина 
	//	КонецЕсли;
	//	
	//	Возврат Истина;
	//КонецЕсли;
	
	Если Параметры.Свойство("КодПолученияМассиваОбъектов") И ЗначениеЗаполнено(Параметры.КодПолученияМассиваОбъектов) Тогда
		Выполнить(Параметры.КодПолученияМассиваОбъектов);
	Иначе
		Для каждого лЗапись Из пОбъект Цикл
			массивОбъектов.Добавить(лЗапись[Параметры.Поле]);
		КонецЦикла;
	КонецЕсли;
	
	Если массивОбъектов.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	полученныеОбъекты = Неопределено;
	ПараметрыФункции = "(Новый Структура(""массивСсылок"", массивОбъектов))";
	Если Параметры.Свойство("ПараметрыФункцииПолученияОбъекта") И ЗначениеЗаполнено(Параметры.ПараметрыФункцииПолученияОбъекта) Тогда
		ПараметрыФункции = Параметры.ПараметрыФункцииПолученияОбъекта;
	КонецЕсли;
	
	Выполнить("полученныеОбъекты = " + Параметры.ФункцияПолученияОбъекта + ПараметрыФункции);
	
	Если НЕ ЗначениеЗаполнено(полученныеОбъекты) Тогда
		Если Параметры.Свойство("УдалятьПустые") И Параметры.УдалятьПустые Тогда
			ЗаписатьНаУдаление(массивОбъектов, Новый Соответствие, Параметры);
		КонецЕсли;
		Возврат Истина;
	КонецЕсли;
	
	Если ТипЗнч(полученныеОбъекты) = Тип("Структура") Тогда
		объекты = Новый Массив;
		объекты.Добавить(полученныеОбъекты);
	Иначе
		объекты = полученныеОбъекты;
	КонецЕсли;
	
	/////////////////////////////////////////////////////////////////////////////////////
	// ЗАПИСЬ В БУФЕР
	
	ПараметрыЗаписи = Новый Структура("КомандаHTTP, АдресРесурсаСервера, Очередь", 
										Перечисления.КомандыHTTP.POST, 
										Параметры.АдресРесурсаСервера,
										Параметры.Очередь);
		
	Запрос = Новый Запрос("ВЫБРАТЬ ТелоЗапроса, АдресРесурсаСервера, Объект ИЗ РегистрСведений.БуферКомандДляСайта_API2 ГДЕ Объект В (&Объект) И СайтНазначения = Значение(Перечисление.Сайты.garage)");
	Запрос.УстановитьПараметр("Объект", массивОбъектов);
	Выполнение = Запрос.Выполнить().Выгрузить();
	
	Выполнение.Индексы.Добавить("Объект");
	
	Добавленные = Новый Соответствие;
	Для каждого новОбъект Из объекты Цикл
		Суффикс = "update";
		
		Выборка = Выполнение.Найти(новОбъект.guid, "Объект");
		Если НЕ Выборка = Неопределено Тогда
			ДобавитьИзменениеОбъекта(новОбъект, ЗначениеИзСтрокиВнутр(Выборка.ТелоЗапроса));
			
			// Пред суффикс
			ПредСуффикс = ?(Найти(Выборка.АдресРесурсаСервера, "create"), "create", ?(Найти(Выборка.АдресРесурсаСервера, "delete"),"delete","update"));
			
			// Определим новый суффикс
			
			Если ПредСуффикс = "create" И Суффикс = "delete" Тогда 
				// такой надо удалять так как не успел пожить
				
				Запись = РегистрыСведений.БуферКомандДляСайта_API2.СоздатьМенеджерЗаписи();
				Запись.Объект = новОбъект.guid;
				Если Не ОбщиеФункции.УдалитьОбъектИСообщитьЕслиОшибка(Запись) Тогда
					Отказ = Истина КонецЕсли;
				Продолжить;
			ИначеЕсли ПредСуффикс = "delete" И Суффикс = "create" Тогда	
				Суффикс = "update";
			ИначеЕсли ПредСуффикс = "create" И Суффикс = "update" Тогда
				Суффикс = "create"; 
			КонецЕсли;
		КонецЕсли;
	
		// Запишем
		Запись = РегистрыСведений.БуферКомандДляСайта_API2.СоздатьМенеджерЗаписи();
		Запись.СайтНазначения		= Перечисления.Сайты.garage;
		Запись.Объект 				= новОбъект.guid;
		Запись.КомандаHTTP 			= ПараметрыЗаписи.КомандаHTTP;
		Запись.АдресРесурсаСервера 	= ПараметрыЗаписи.АдресРесурсаСервера + "/" + Суффикс;
		Запись.ТипОбъекта 			= ОпределитьИмяОбъектаПоТипу(новОбъект.guid);
		Запись.ТелоЗапроса			= ЗначениеВСтрокуВнутр(новОбъект);
		Запись.Очередь 				= ПараметрыЗаписи.Очередь;
		Запись.ЕстьОшибка			= Ложь;
		Запись.ДатаИзменений		= ТекущаяДата();
		
		ДатаПримененияКоманды = ДатыПрименения[Запись.Объект];
		Если ДатаПримененияКоманды = Неопределено Тогда
			Запись.ДатаПримененияКоманды = ДатаПримененияКоманды;
		КонецЕсли;
		
		Добавленные.Вставить(новОбъект.guid, Истина);
		Если Не ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(Запись) Тогда
			Отказ = Истина 
		КонецЕсли;
	КонецЦикла;
	
	Если Параметры.Свойство("УдалятьПустые") И Параметры.УдалятьПустые Тогда
		ЗаписатьНаУдаление(массивОбъектов, Добавленные, Параметры);
	КонецЕсли;
	
	Возврат Истина;
КонецФункции // ЗаписатьНаборТоваровВБуфер()

Функция ЗаписатьНаУдаление(массивОбъектов, НеУдалять, Параметры)
	ПараметрыЗаписи = Новый Структура("КомандаHTTP, АдресРесурсаСервера, Очередь", 
										Перечисления.КомандыHTTP.POST, 
										Параметры.АдресРесурсаСервера,
										Параметры.Очередь);
										
	Суффикс = "delete";
	Для каждого лОбъект Из массивОбъектов Цикл
		Если НЕ НеУдалять[лОбъект] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Запись = РегистрыСведений.БуферКомандДляСайта_API2.СоздатьМенеджерЗаписи();
		Запись.СайтНазначения		= Перечисления.Сайты.garage;
		Запись.Объект 				= лОбъект;
		Запись.КомандаHTTP 			= ПараметрыЗаписи.КомандаHTTP;
		Запись.АдресРесурсаСервера 	= ПараметрыЗаписи.АдресРесурсаСервера + "/" + Суффикс;
		Запись.ТипОбъекта 			= ОпределитьИмяОбъектаПоТипу(лОбъект);
		Запись.ТелоЗапроса			= ЗначениеВСтрокуВнутр(Новый Структура);
		Запись.Очередь 				= ПараметрыЗаписи.Очередь;
		Запись.ЕстьОшибка			= Ложь;
		Запись.ДатаИзменений		= ТекущаяДата();
		
		Если Не ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(Запись) Тогда
			Отказ = Истина 
		КонецЕсли;
	КонецЦикла;
КонецФункции // ЗаписатьНаУдаление()

Функция ОбластиИзменения(пНаборЗаписей)
	Если ТипЗнч(пНаборЗаписей) = Тип("РегистрНакопленияНаборЗаписей.ТоварыНаСкладах") ИЛИ ТипЗнч(пНаборЗаписей) = Тип("РегистрНакопленияНаборЗаписей.ТоварыВРезерве") Тогда
		Возврат "Остатки";
	ИначеЕсли ТипЗнч(пНаборЗаписей) = Тип("РегистрСведенийНаборЗаписей.ЦеныНоменклатуры") Тогда
		Возврат "Цены";
	ИначеЕсли ТипЗнч(пНаборЗаписей) = Тип("РегистрСведенийНаборЗаписей.ТоварыДляПередачи") Тогда
		Возврат "Родители, КатегорииПартнеров";
	КонецЕсли;
КонецФункции // ОбластьИзменения()

#КонецОбласти

#Область Робот

Функция ОтправитьТекстPOST(СайтНазначения, АдресРесурсаСервера, Текст, КодСостояния = 200, ОтветСервера = "", ТекстЛога = "")
	
	// Отправим
	
	стрОшибки 		= "";
	ОтветСервера 	= POST(СайтНазначения, Текст, АдресРесурсаСервера, стрОшибки, КодСостояния, ТекстЛога);
	Если ОтветСервера = Неопределено Тогда
		
		ОтветСервера = стрОшибки;
		ЗаписьЖурналаРегистрации("API.POST", УровеньЖурналаРегистрации.Ошибка,,,"Ошибка отправления POST запроса сайту:
					|Код состояния: " + КодСостояния + "
					|Адрес ресурса: " + АдресРесурсаСервера + "
					|Текст запроса: " + Текст + "
					|Описание ошибки: " + стрОшибки);
		
		Возврат Ложь;
	Иначе
		Возврат КодСостояния = 200 КонецЕсли;
	
КонецФункции
Процедура Лог(ТекстЛога, Текст)
	
	ТекстЛога = ТекстЛога + ?(ТекстЛога = "","", Символы.ПС) + Текст;
	
КонецПроцедуры
Процедура ОтправлениеЗапросовСайту_API2(ТекстЛога = "", ОдинОбъект = Неопределено, СайтНазначения = Неопределено) Экспорт
	
	ЗиповатьПакет 					= Истина;
	ПриОшибкеОтправлятьЧерезСек 	= 180;
	ПриОшибкеОтправлятьНеБольшеРаз 	= 42;
	
	
	// Подготовим запрос
	//не обрабатываются повторно записи с кодами ошибок:
	//500  - internal server error
	//408  - request timeuot
	//подробности у Артема Румянцева
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 	СайтНазначения, Объект, ТипОбъекта, КомандаHTTP, АдресРесурсаСервера, ТелоЗапроса, ЕстьОшибка, Очередь
	|ИЗ			РегистрСведений.БуферКомандДляСайта_API2
	| " + ?(ОдинОбъект = Неопределено, "
	|ГДЕ  (&ТекущаяДата >= ДатаПримененияКоманды ИЛИ ДатаПримененияКоманды = &ПустаяДата) И (НЕ ЕстьОшибка ИЛИ (НомерПовтораПриОшибке <= &КолПовторов И РАЗНОСТЬДАТ(ДатаОшибки, &ТекущаяДата, СЕКУНДА) > &СлОшибкаНеРаньше)) и (Не КодОшибки=500 и Не КодОшибки=408)
	|", "ГДЕ Объект = &ОдинОбъект И СайтНазначения = &СайтНазначения") + "
	|УПОРЯДОЧИТЬ ПО СайтНазначения, Очередь, ДатаИзменений
	|ИТОГИ МАКСИМУМ(ТипОбъекта) ПО СайтНазначения, Очередь, КомандаHTTP, АдресРесурсаСервера
	|");
	
	Запрос.УстановитьПараметр("ТекущаяДата", 		ТекущаяДата());
	Запрос.УстановитьПараметр("ПустаяДата", 		Дата("00010101000000"));
	Запрос.УстановитьПараметр("СлОшибкаНеРаньше", 	ПриОшибкеОтправлятьЧерезСек);
	Запрос.УстановитьПараметр("КолПовторов", 		ПриОшибкеОтправлятьНеБольшеРаз);
	Запрос.УстановитьПараметр("ОдинОбъект", 		ОдинОбъект);
	Запрос.УстановитьПараметр("СайтНазначения", 	СайтНазначения);
	
	// Вытащим данные
	
#Область Перебор_данных	
	
	ВыборкаСайта = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Пока ВыборкаСайта.Следующий() Цикл
		ВыборкаОчереди = ВыборкаСайта.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		Пока ВыборкаОчереди.Следующий() Цикл
			ВыборкаКоманды = ВыборкаОчереди.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
			Пока ВыборкаКоманды.Следующий() Цикл
				ВыборкаАдреса = ВыборкаКоманды.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
				Пока ВыборкаАдреса.Следующий() Цикл
	#КонецОбласти				
					МассивОтправки 		= Новый Массив;
					ИмяОбъекта 			= ОпределитьИмяОбъектаПоТипу(ВыборкаАдреса.Объект);
					
					// Соберем запрос
					
					Выборка = ВыборкаАдреса.Выбрать();
					Пока Выборка.Следующий() Цикл
						
						СтруктураОбъекта = ЗначениеИзСтрокиВнутр(Выборка.ТелоЗапроса);
						СтруктураОбъекта.Вставить("guid", XMLСтрока(Выборка.Объект));
						МассивОтправки.Добавить(СтруктураОбъекта); КонецЦикла;
					
					Лог(ТекстЛога, "Получение объектов из буфера, найдено " + Выборка.Количество());
					
					КодСостояния = 200;
					ОтветСервера = "";
					
					ОтправкаJSON 	= w1_Json.JSON(МассивОтправки, Истина);
					Лог(ТекстЛога, "Определен тип объекта = " + ВыборкаАдреса.ТипОбъекта);
					Лог(ТекстЛога, "Сформирована JSON строка = " + ОтправкаJSON);
					
					// Уберем квадратные скобки
					ОтправкаJSON = Сред(ОтправкаJSON, 3, СтрДлина(ОтправкаJSON) - 4);
					
					Если ОтправитьТекстPOST(ВыборкаАдреса.СайтНазначения, ВыборкаАдреса.АдресРесурсаСервера, Заэскейпить(ВыборкаАдреса.ТипОбъекта, ОтправкаJSON, ТекстЛога), КодСостояния, ОтветСервера, ТекстЛога) Тогда
						
						// Удалим удачно отправленные записи
						
						Выборка = ВыборкаАдреса.Выбрать();
						Пока Выборка.Следующий() Цикл
							Запись = РегистрыСведений.БуферКомандДляСайта_API2.СоздатьМенеджерЗаписи();
							Запись.СайтНазначения = Выборка.СайтНазначения;
							Запись.Объект = Выборка.Объект;
							ОбщиеФункции.УдалитьОбъектИСообщитьЕслиОшибка(Запись); КонецЦикла;
					Иначе
						
						Лог(ТекстЛога, "===============================");
						Лог(ТекстЛога, "Не получилось отправить толпу, запущен процес отправки объектов по одному");
						
						// Если не удалось отправить тогда отправляем по одному
						
						ЗаписьЖурналаРегистрации("API.POST", УровеньЖурналаРегистрации.Информация,,,"Попытка отправка объектов по одному");

						Выборка = ВыборкаАдреса.Выбрать();
						Пока Выборка.Следующий() Цикл
							
							СтруктураОбъекта = ЗначениеИзСтрокиВнутр(Выборка.ТелоЗапроса);
							СтруктураОбъекта.Вставить("guid", XMLСтрока(Выборка.Объект));
							
							Если Не ОтправитьТекстPOST(ВыборкаАдреса.СайтНазначения,ВыборкаАдреса.АдресРесурсаСервера, Заэскейпить(ВыборкаАдреса.ТипОбъекта, w1_Json.JSON(СтруктураОбъекта, Истина)), КодСостояния, ОтветСервера, ТекстЛога) Тогда
								
								// Запишем в буфер ошибку отправки
								
								Запись = РегистрыСведений.БуферКомандДляСайта_API2.СоздатьМенеджерЗаписи();
								Запись.СайтНазначения = Выборка.СайтНазначения;
								Запись.Объект = Выборка.Объект;
								Запись.Прочитать();
								
								Запись.ДатаОшибки = ТекущаяДата();
								Запись.ЕстьОшибка = Истина;
								Запись.НомерПовтораПриОшибке = Запись.НомерПовтораПриОшибке + 1;
								Запись.Ошибка = "Код возврата: " + КодСостояния + "
												|Текст: " + ОтветСервера;
								Запись.КодОшибки = КодСостояния;				
								ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(Запись); 
							Иначе
								Запись = РегистрыСведений.БуферКомандДляСайта_API2.СоздатьМенеджерЗаписи();
								Запись.СайтНазначения = Выборка.СайтНазначения;
								Запись.Объект = Выборка.Объект;
								ОбщиеФункции.УдалитьОбъектИСообщитьЕслиОшибка(Запись);
							КонецЕсли; 
						КонецЦикла; 
					КонецЕсли; 
				КонецЦикла; 
			КонецЦикла; 
		КонецЦикла;
	КонецЦикла;	
КонецПроцедуры

#КонецОбласти



