#Область ОбработкаРегламентныхЗаданий

Процедура ПровестиКлассификациюНоменклатуры() Экспорт
	
	Если Константы.ПроводитьКлассификациюНоменклатуры.Получить() = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ПровестиABCАнализНоменклатуры();
	ПровестиXYZАнализНоменклатуры();
	
КонецПроцедуры

#КонецОбласти

Процедура ПровестиABCАнализНоменклатуры() Экспорт 
		
	//Обработка дат
	НачалоПериода = ТекущаяДата();
	НачалоПериода = ДобавитьМесяц(НачалоПериода,-3);
	НачалоПериода = НачалоМесяца(НачалоПериода);	
	
	КонецПериода = ТекущаяДата();
	КонецПериода = НачалоМесяца(КонецПериода);
	
	Метод = Перечисления.СпособРасчетаABC.ПоМетодуКасательной;
	
	А = 80;
	Б = 15;
	
	//Собираем склады и группы складов чтоб по ним сделать расчет
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Склады.Ссылка КАК Номенклатура
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.КлассифицироватьНоменклатуру = ИСТИНА";
	Выборка = Запрос.Выполнить().Выгрузить();
	Склады = Выборка.ВыгрузитьКолонку("Номенклатура");
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГруппыСкладов.Ссылка КАК ГруппаСкладов
	|ИЗ
	|	Справочник.ГруппыСкладов КАК ГруппыСкладов
	|ГДЕ
	|	ГруппыСкладов.КлассифицироватьНоменклатуру = ИСТИНА";
	Выборка = Запрос.Выполнить().Выгрузить();
	ГруппыСкладов = Выборка.ВыгрузитьКолонку("ГруппаСкладов");

	Таблица = ПолучитьДанныеABCПоНоменклатруре(Истина, Склады, ГруппыСкладов, НачалоПериода, КонецПериода);
	
	ОпределитьКатегорииABC(Таблица, Перечисления.КлассификацияАнализа.ПродажиСумма, Метод, А, Б);
	ЗаписатьДанныеКлассификации(Таблица, Перечисления.КлассификацияАнализа.ПродажиСумма, Перечисления.ТипКлассификации.ABC);	
	
	ОпределитьКатегорииABC(Таблица, Перечисления.КлассификацияАнализа.Прибыль, Метод, А, Б);
	ЗаписатьДанныеКлассификации(Таблица, Перечисления.КлассификацияАнализа.Прибыль, Перечисления.ТипКлассификации.ABC);
	
	ОпределитьКатегорииABC(Таблица, Перечисления.КлассификацияАнализа.КоличествоПродаж, Метод, А, Б);
	ЗаписатьДанныеКлассификации(Таблица, Перечисления.КлассификацияАнализа.КоличествоПродаж, Перечисления.ТипКлассификации.ABC);
	
КонецПроцедуры

Процедура ПровестиXYZАнализНоменклатуры()  Экспорт 
	
	//Параметры расчета
	КоличествоПериодов = 30;
	X = 25;
	Y = 45;
	
	НачПериода = НачалоМесяца(ДобавитьМесяц(ТекущаяДата(),-КоличествоПериодов));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПродажиОбороты.Период КАК Период,
	|	ПродажиОбороты.Номенклатура КАК Номенклатура,
	|	ПродажиОбороты.КоличествоОборот КАК Количество,
	|	ПродажиОбороты.Период КАК КоличествоПериодов
	|ИЗ
	|	РегистрНакопления.Продажи.Обороты(&НачПериода, &КонПериода, Месяц, ) КАК ПродажиОбороты
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	Период
	|ИТОГИ
	|	СУММА(Количество),
	|	КОЛИЧЕСТВО(КоличествоПериодов)
	|ПО
	|	Номенклатура";
	
	Запрос.УстановитьПараметр("КонПериода", НачалоМесяца(ТекущаяДата())-1);
	Запрос.УстановитьПараметр("НачПериода", НачПериода);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	НачатьТранзакцию();
	Пока Выборка.Следующий() Цикл
		
		ДетальныеЗаписи = Выборка.Выбрать();
		Если Выборка.КоличествоПериодов >= 10 Тогда
			
			КоэфВариации = ПосчитатьКоэфВариации(ДетальныеЗаписи, Выборка.Количество, Выборка.КоличествоПериодов);
			
			Если КоэфВариации * 100 <= X Тогда
				Категория = Перечисления.КатегорииXYZАнализа.X;
			ИначеЕсли КоэфВариации * 100 <= Y Тогда
				Категория = Перечисления.КатегорииXYZАнализа.Y;
			Иначе
				Категория = Перечисления.КатегорииXYZАнализа.Z;
			КонецЕсли;
			
			МенеджерЗаписи = РегистрыСведений.ABCXYZКлассификацияНоменклатуры.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Номенклатура = Выборка.Номенклатура;
			МенеджерЗаписи.Критерий = КоэфВариации*100;
			МенеджерЗаписи.Категория = Категория;
			МенеджерЗаписи.Классификация = Перечисления.КлассификацияАнализа.ПродажиШт;
			МенеджерЗаписи.ТипКлассификации = Перечисления.ТипКлассификации.XYZ;
			МенеджерЗаписи.Период = ТекущаяДата();
			МенеджерЗаписи.Записать();
			
		КонецЕсли;         
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура ЗаписатьДанныеКлассификации(Таблица, КлассификацияАнализа, ТипКлассификации)
	
	ИмяПеречисления = КлассификацияАнализа.Метаданные().Имя;
	ИндексЗначенияПеречисления = Перечисления[ИмяПеречисления].Индекс(КлассификацияАнализа);
	ИмяКлассификации = Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;

	//Сверям со старыми значениями
	//Если было D или небыло записи и сейчас там же, то не пишем
	//Если сейчас нету категории, а раньше была отлична от от D, то не пишем
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.Номенклатура,
	|	Таблица.Раздел КАК Раздел,
	|	Таблица.ПродажиСумма,
	|	Таблица.ПродажиШт,
	|	Таблица.ПродажиСебестоимость,
	|	Таблица.КоличествоПродаж,
	|	Таблица.ОстаткиШт,
	|	Таблица.ОстаткиСебестоимость,
	|	Таблица.Прибыль,"+
	" Таблица."+  ИмяКлассификации + "Категория "+ 
	" ПОМЕСТИТЬ ВрТаблица
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВрТаблица.Номенклатура,
	|	ВрТаблица.Раздел,
	|	ВрТаблица.ПродажиСумма,
	|	ВрТаблица.ПродажиШт,
	|	ВрТаблица.ПродажиСебестоимость,
	|	ВрТаблица.КоличествоПродаж,
	|	ВрТаблица.ОстаткиШт,
	|	ВрТаблица.ОстаткиСебестоимость,
	|	ВрТаблица.Прибыль,
	|	ABCXYZКлассификацияНоменклатурыСрезПоследних.Категория КАК Категория,"+
	" 	ВрТаблица."+  ИмяКлассификации + "Категория "+ 
	" ИЗ
	|	ВрТаблица КАК ВрТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ABCXYZКлассификацияНоменклатуры.СрезПоследних(&Период
	|				,
	|				Классификация = &Классификация
	|					И ТипКлассификации = &ТипКлассификации) КАК ABCXYZКлассификацияНоменклатурыСрезПоследних
	|		ПО ВрТаблица.Номенклатура = ABCXYZКлассификацияНоменклатурыСрезПоследних.Номенклатура
	|			И ВрТаблица.Раздел = ABCXYZКлассификацияНоменклатурыСрезПоследних.Раздел";
	Запрос.УстановитьПараметр("ТипКлассификации",ТипКлассификации);
	Запрос.УстановитьПараметр("Классификация",КлассификацияАнализа);
	Запрос.УстановитьПараметр("Период", НачалоМесяца(ТекущаяДата())-1);
	Запрос.УстановитьПараметр("Таблица",Таблица);
	Выборка = Запрос.Выполнить().Выгрузить();
	
	НачатьТранзакцию();
	
	Для Каждого Строка Из Выборка Цикл
		//Проверочка
		Если НЕ (Строка[ ИмяКлассификации + "Категория" ] = Перечисления.КатегорииABCАнализа.D 
			И  (Строка.Категория = NULL ИЛИ Строка.Категория = Перечисления.КатегорииABCАнализа.D)) Тогда
			МенеджерЗаписи = РегистрыСведений.ABCXYZКлассификацияНоменклатуры.СоздатьМенеджерЗаписи();
			
			МенеджерЗаписи.Классификация 	= КлассификацияАнализа;
			МенеджерЗаписи.ТипКлассификации = ТипКлассификации;
			МенеджерЗаписи.Номенклатура 	= Строка.Номенклатура;
			МенеджерЗаписи.Категория 		= Строка[ ИмяКлассификации + "Категория" ];
			МенеджерЗаписи.Критерий 		= Строка[ ИмяКлассификации ];
			МенеджерЗаписи.Раздел 			= Строка.Раздел;
			МенеджерЗаписи.Период 			= ТекущаяДата();
			
			МенеджерЗаписи.Записать();
		КонецЕсли;
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Функция ПолучитьДанныеABCПоНоменклатруре(ПоКомпании, Склады, ГруппыСкладов, Знач НачалоПериода, Знач КонецПериода) 
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("НачПериода",НачалоПериода);
	Запрос.УстановитьПараметр("КонПериода",КонецПериода);
	Запрос.УстановитьПараметр("ТипЦен",  Справочники.ТипыЦен.НайтиПоКоду("000000024"));	//НайтиПоНаименованию("Себестоимость"));
	Запрос.УстановитьПараметр("ТипЦен1", Справочники.ТипыЦен.НайтиПоКоду("000000007"));	//НайтиПоНаименованию("Закупочная руб"));
	Запрос.УстановитьПараметр("ПоКомпании",ПоКомпании);	
	Запрос.УстановитьПараметр("Склады",Склады);	
	Запрос.УстановитьПараметр("ГруппыСкладов",ГруппыСкладов);	
	
	#Область ФормируемЗапрос
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Себест.Цена ЕСТЬ NULL 
	|			ТОГДА Закуп.Цена
	|		ИНАЧЕ Себест.Цена
	|	КОНЕЦ КАК Цена,
	|	ВЫБОР
	|		КОГДА Себест.Номенклатура ЕСТЬ NULL 
	|			ТОГДА Закуп.Номенклатура
	|		ИНАЧЕ Себест.Номенклатура
	|	КОНЕЦ КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА Себест.Валюта ЕСТЬ NULL 
	|			ТОГДА Закуп.Валюта
	|		ИНАЧЕ Себест.Валюта
	|	КОНЕЦ КАК Валюта
	|ПОМЕСТИТЬ Цены
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&НачПериода,
	|			ТипЦен = &ТипЦен1
	|				И Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)) КАК Закуп
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&КонПериода,
	|				ТипЦен = &ТипЦен
	|					И Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)) КАК Себест
	|		ПО Закуп.Номенклатура = Себест.Номенклатура
	|			И Закуп.Упаковка = Себест.Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПродажиОбороты.Склад,
	|	ПродажиОбороты.Номенклатура,
	|	СУММА(ПродажиОбороты.КоличествоОборот) КАК ПродажиШт,
	|	СУММА(ПродажиОбороты.СуммаОборот) КАК ПродажиСумма,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПродажиОбороты.ДокументПродажи) КАК КоличествоПродаж,
	|	СУММА(ЕСТЬNULL(ПродажиОбороты.КоличествоОборот * Цены.Цена * КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность, 0)) КАК ПродажиСебест,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(ПродажиОбороты.КоличествоОборот * Цены.Цена * КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность, 0) = 0
	|				ТОГДА 0
	|			ИНАЧЕ ПродажиОбороты.СуммаОборот - ПродажиОбороты.КоличествоОборот * Цены.Цена * КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность
	|		КОНЕЦ) КАК Прибыль
	|ПОМЕСТИТЬ Продажи
	|ИЗ
	|	РегистрНакопления.Продажи.Обороты(&НачПериода, &КонПериода, , ) КАК ПродажиОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Цены КАК Цены
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&КонПериода, ) КАК КурсыВалютСрезПоследних
	|			ПО Цены.Валюта = КурсыВалютСрезПоследних.Валюта
	|		ПО ПродажиОбороты.Номенклатура = Цены.Номенклатура
	|ГДЕ
	|	ПродажиОбороты.СуммаОборот > 0
	|	И ПродажиОбороты.КоличествоОборот > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ПродажиОбороты.Склад,
	|	ПродажиОбороты.Номенклатура
	|
	|ИМЕЮЩИЕ
	|	СУММА(ПродажиОбороты.СуммаОборот - ЕСТЬNULL(ПродажиОбороты.КоличествоОборот * Цены.Цена * КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность, 0)) >= 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыНаСкладахОстатки.Склад,
	|	ТоварыНаСкладахОстатки.Номенклатура,
	|	ТоварыНаСкладахОстатки.КоличествоОстаток КАК Остаток,
	|	ТоварыНаСкладахОстатки.КоличествоОстаток * Цены.Цена * КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность КАК ОстаткиСебест
	|ПОМЕСТИТЬ Остатки
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(&КонПериода, ) КАК ТоварыНаСкладахОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Цены КАК Цены
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&КонПериода, ) КАК КурсыВалютСрезПоследних
	|			ПО Цены.Валюта = КурсыВалютСрезПоследних.Валюта
	|		ПО ТоварыНаСкладахОстатки.Номенклатура = Цены.Номенклатура
	|ГДЕ
	|	ТоварыНаСкладахОстатки.КоличествоОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	0 КАК Распределение,
	|	НЕОПРЕДЕЛЕНО КАК Раздел,
	|	ВЫБОР
	|		КОГДА Остатки.Номенклатура ЕСТЬ NULL 
	|			ТОГДА Продажи.Номенклатура
	|		ИНАЧЕ Остатки.Номенклатура
	|	КОНЕЦ КАК Номенклатура,
	|	СУММА(ЕСТЬNULL(Остатки.Остаток, 0)) КАК ОстаткиШт,
	|	СУММА(ЕСТЬNULL(Остатки.ОстаткиСебест, 0)) КАК ОстаткиСебестоимость,
	|	СУММА(ЕСТЬNULL(Продажи.ПродажиШт, 0)) КАК ПродажиШт,
	|	СУММА(ЕСТЬNULL(Продажи.ПродажиСумма, 0)) КАК ПродажиСумма,
	|	СУММА(ЕСТЬNULL(Продажи.КоличествоПродаж, 0)) КАК КоличествоПродаж,
	|	СУММА(ЕСТЬNULL(Продажи.ПродажиСебест, 0)) КАК ПродажиСебестоимость,
	|	СУММА(ЕСТЬNULL(Продажи.Прибыль, 0)) КАК Прибыль
	|ИЗ
	|	Продажи КАК Продажи
	|		ПОЛНОЕ СОЕДИНЕНИЕ Остатки КАК Остатки
	|		ПО Продажи.Склад = Остатки.Склад
	|			И Продажи.Номенклатура = Остатки.Номенклатура
	|ГДЕ
	|	&ПоКомпании = ИСТИНА
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА Остатки.Номенклатура ЕСТЬ NULL 
	|			ТОГДА Продажи.Номенклатура
	|		ИНАЧЕ Остатки.Номенклатура
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1,
	|	ВЫБОР
	|		КОГДА Остатки.Склад ЕСТЬ NULL 
	|			ТОГДА Продажи.Склад
	|		ИНАЧЕ Остатки.Склад
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Остатки.Номенклатура ЕСТЬ NULL 
	|			ТОГДА Продажи.Номенклатура
	|		ИНАЧЕ Остатки.Номенклатура
	|	КОНЕЦ,
	|	СУММА(ЕСТЬNULL(Остатки.Остаток, 0)),
	|	СУММА(ЕСТЬNULL(Остатки.ОстаткиСебест, 0)),
	|	СУММА(ЕСТЬNULL(Продажи.ПродажиШт, 0)),
	|	СУММА(ЕСТЬNULL(Продажи.ПродажиСумма, 0)),
	|	СУММА(ЕСТЬNULL(Продажи.КоличествоПродаж, 0)),
	|	СУММА(ЕСТЬNULL(Продажи.ПродажиСебест, 0)),
	|	СУММА(ЕСТЬNULL(Продажи.Прибыль, 0))
	|ИЗ
	|	Продажи КАК Продажи
	|		ПОЛНОЕ СОЕДИНЕНИЕ Остатки КАК Остатки
	|		ПО Продажи.Склад = Остатки.Склад
	|			И Продажи.Номенклатура = Остатки.Номенклатура
	|ГДЕ
	|	ВЫБОР
	|			КОГДА Остатки.Склад ЕСТЬ NULL 
	|				ТОГДА Продажи.Склад
	|			ИНАЧЕ Остатки.Склад
	|		КОНЕЦ В (&Склады)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА Остатки.Склад ЕСТЬ NULL 
	|			ТОГДА Продажи.Склад
	|		ИНАЧЕ Остатки.Склад
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Остатки.Номенклатура ЕСТЬ NULL 
	|			ТОГДА Продажи.Номенклатура
	|		ИНАЧЕ Остатки.Номенклатура
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	ВЫБОР
	|		КОГДА Остатки.Склад ЕСТЬ NULL 
	|			ТОГДА ГруппыСкладовПродажи.Ссылка
	|		ИНАЧЕ ГруппыСкладовОстатки.Ссылка
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Остатки.Номенклатура ЕСТЬ NULL 
	|			ТОГДА Продажи.Номенклатура
	|		ИНАЧЕ Остатки.Номенклатура
	|	КОНЕЦ,
	|	СУММА(ЕСТЬNULL(Остатки.Остаток, 0)),
	|	СУММА(ЕСТЬNULL(Остатки.ОстаткиСебест, 0)),
	|	СУММА(ЕСТЬNULL(Продажи.ПродажиШт, 0)),
	|	СУММА(ЕСТЬNULL(Продажи.ПродажиСумма, 0)),
	|	СУММА(ЕСТЬNULL(Продажи.КоличествоПродаж, 0)),
	|	СУММА(ЕСТЬNULL(Продажи.ПродажиСебест, 0)),
	|	СУММА(ЕСТЬNULL(Продажи.Прибыль, 0))
	|ИЗ
	|	Продажи КАК Продажи
	|		ПОЛНОЕ СОЕДИНЕНИЕ Остатки КАК Остатки
	|		ПО Продажи.Склад = Остатки.Склад
	|			И Продажи.Номенклатура = Остатки.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыСкладов.Склады КАК ГруппыСкладовОстатки
	|		ПО Продажи.Склад = ГруппыСкладовОстатки.Склад
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыСкладов.Склады КАК ГруппыСкладовПродажи
	|		ПО Продажи.Склад = ГруппыСкладовПродажи.Склад
	|ГДЕ
	|	(ГруппыСкладовОстатки.Ссылка В (&ГруппыСкладов)
	|			ИЛИ ГруппыСкладовПродажи.Ссылка В (&ГруппыСкладов))
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА Остатки.Склад ЕСТЬ NULL 
	|			ТОГДА ГруппыСкладовПродажи.Ссылка
	|		ИНАЧЕ ГруппыСкладовОстатки.Ссылка
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Остатки.Номенклатура ЕСТЬ NULL 
	|			ТОГДА Продажи.Номенклатура
	|		ИНАЧЕ Остатки.Номенклатура
	|	КОНЕЦ" ;
	
	
	#КонецОбласти
	
	Выборка = Запрос.Выполнить().Выгрузить();
	Возврат Выборка;
	
КонецФункции

#Область ОпределениеКатегорийABC

Процедура ОпределитьКатегорииABC(ИсточникДанных, Классификация = Неопределено, Метод, Знач А, Знач Б, ИмяКлассификации = "", НольПропустить = Ложь) Экспорт
	
	Если Классификация <> Неопределено Тогда
	
	ИмяПеречисления = Классификация.Метаданные().Имя;
	ИндексЗначенияПеречисления = Перечисления[ИмяПеречисления].Индекс(Классификация);
	ИмяКлассификации = Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя; КонецЕсли;
	
	// Источник данных пуст, классификация не требуется.
	Если ИсточникДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Классификация без разделения.
	Если ИсточникДанных.Колонки.Найти("Разделитель") = Неопределено Тогда
		
		ИсточникДанных.Колонки.Добавить("Разделитель");
		ИсточникДанных.ЗаполнитьЗначения(0, "Разделитель");
		
	КонецЕсли;

	// Источник данных упорядочивается по возрастанию разделителя и убыванию параметра классификации.
	ИсточникДанных.Сортировать("Разделитель Возр, " + ИмяКлассификации + " Убыв");
	
	// В колонку "Категория" будет помещен результат классификации.
	Если ИсточникДанных.Колонки.Найти(ИмяКлассификации + "Категория") = Неопределено Тогда
		ИсточникДанных.Колонки.Добавить(ИмяКлассификации + "Категория", Новый ОписаниеТипов("ПеречислениеСсылка.КатегорииABCАнализа"));
	КонецЕсли;
	
	Если Метод = Перечисления.СпособРасчетаABC.ПоМетодуКасательной Тогда
		ОпределитьКатегорииПоКасательной(ИсточникДанных, ИмяКлассификации);
	ИначеЕсли Метод = Перечисления.СпособРасчетаABC.ПоПарето Тогда
		ОпределитьКатегорииПоПарето(ИсточникДанных, ИмяКлассификации, А, Б, НольПропустить);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОпределитьКатегорииПоПарето(ИсточникДанных, ИмяКлассификации, А, Б, НольПропустить = Ложь)
	
	А = А/100;
	Б = Б/100;
	
	ОбщаяСумма = ИсточникДанных.Итог(ИмяКлассификации);
	
	ДОИ = 0;
	НаростающийИтог = 0;
	ПрошлыйКритерий = 0;
	ТекущаяКатегория = Перечисления.КатегорииABCАнализа.A;	
	
	Для Каждого Строка Из ИсточникДанных Цикл
		
		Если Строка[ИмяКлассификации] <= 0 Тогда   // для нулевых показателей категорию не назначаем
			Если НЕ НольПропустить Тогда Строка[ИмяКлассификации + "Категория"] = Перечисления.КатегорииABCАнализа.D; КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		ДО = Строка[ИмяКлассификации] / ОбщаяСумма; 
		НаростающийИтог = НаростающийИтог + Строка[ИмяКлассификации];
		
		
		Если ТекущаяКатегория = Перечисления.КатегорииABCАнализа.A Тогда
			Если ДОИ > А И НЕ Строка[ИмяКлассификации] = ПрошлыйКритерий Тогда
				ТекущаяКатегория = Перечисления.КатегорииABCАнализа.B;
			КонецЕсли;
			Строка[ИмяКлассификации+"Категория"] = ТекущаяКатегория;
			
		ИначеЕсли ТекущаяКатегория = Перечисления.КатегорииABCАнализа.B Тогда
			Если ДОИ > А+Б И НЕ Строка[ИмяКлассификации] = ПрошлыйКритерий Тогда
				ТекущаяКатегория = Перечисления.КатегорииABCАнализа.C;
			КонецЕсли;
			Строка[ИмяКлассификации+"Категория"] = ТекущаяКатегория;
			
		ИначеЕсли ТекущаяКатегория = Перечисления.КатегорииABCАнализа.C Тогда
			Строка[ИмяКлассификации+"Категория"] = ТекущаяКатегория;
			
		КонецЕсли;
		ПрошлыйКритерий = Строка[ИмяКлассификации];
		ДОИ = НаростающийИтог / ОбщаяСумма;
		
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ОпределитьКатегорииПоКасательной(ИсточникДанных, ИмяКлассификации)
	
	ТекущаяКатегория = Перечисления.КатегорииABCАнализа.A;
	НаростающийИтог = 0;
	НомерСтроки = 0;
	ОбщаяСумма = ИсточникДанных.Итог(ИмяКлассификации);
	КоличествоОбъектов = ИсточникДанных.Количество();
	
	Отбор = Новый Структура(ИмяКлассификации,0);
	НулевыеСтроки = ИсточникДанных.НайтиСтроки(Отбор);
	КоличествоОбъектов = ИсточникДанных.Количество() - НулевыеСтроки.Количество();
	
	ОстСумма = ОбщаяСумма;
	ОстКоличество = КоличествоОбъектов ;
	
	Для Каждого Строка Из ИсточникДанных Цикл
		
		Если Строка[ИмяКлассификации] <= 0 Тогда
			Строка[ИмяКлассификации + "Категория"] = Перечисления.КатегорииABCАнализа.D;
			Продолжить;
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
		ДО = Строка[ИмяКлассификации] / ОбщаяСумма;
		НаростающийИтог = НаростающийИтог + Строка[ИмяКлассификации];
		ДОИ = НаростающийИтог / ОбщаяСумма;
		
		Если ТекущаяКатегория = Перечисления.КатегорииABCАнализа.A Тогда
			Если Строка[ИмяКлассификации] < ОстСумма / ОстКоличество Тогда
				ТекущаяКатегория = Перечисления.КатегорииABCАнализа.B;
				ОстСумма = ОбщаяСумма - НаростающийИтог;
				ОстКоличество = КоличествоОбъектов - НомерСтроки;
			КонецЕсли;
			Строка[ИмяКлассификации+"Категория"] = ТекущаяКатегория;
			
		ИначеЕсли ТекущаяКатегория = Перечисления.КатегорииABCАнализа.B Тогда
			Если Строка[ИмяКлассификации] < ОстСумма / ОстКоличество Тогда
				ТекущаяКатегория = Перечисления.КатегорииABCАнализа.C;
				ОстСумма = ОбщаяСумма - НаростающийИтог;
				ОстКоличество = КоличествоОбъектов - НомерСтроки;
			КонецЕсли;
			Строка[ИмяКлассификации+"Категория"] = ТекущаяКатегория;
			
		ИначеЕсли ТекущаяКатегория = Перечисления.КатегорииABCАнализа.C Тогда
			Строка[ИмяКлассификации+"Категория"] = ТекущаяКатегория;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

Функция ПосчитатьКоэфВариации(Записи, ОбщаяСумма, Количество)
	
	Среднее = ОбщаяСумма / Количество;
	Сумма = 0;
	
	Пока Записи.Следующий() Цикл
		Сумма = Сумма + Pow(Записи.Количество - Среднее,2)
	КонецЦикла;
	
	СтандартноеОтклонение = Sqrt(Сумма / (Количество-1) );
	КоэфВариации = СтандартноеОтклонение/Среднее;
	
	Возврат КоэфВариации;
	
КонецФункции



