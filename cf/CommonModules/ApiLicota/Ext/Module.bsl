
Функция ОпределитьИмяОбъектаПоТипу(Объект) Экспорт 
	
	ТипОбъекта = ТипЗнч(Объект);
	
	Если ТипОбъекта = Тип("СправочникСсылка.Номенклатура") Тогда
		Возврат ?(Объект.ЭтоГруппа, "product_category", "product");
		
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.ИнтернетЗаказПокупателя") Тогда
		Возврат "order";
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ПользователиИнтернет") Тогда
		Возврат "user";
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ИнтернетСтатьи") Тогда
		Возврат ?(Объект.ЭтоГруппа, "article_category", "article");
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ИнтернетКонтакты") Тогда
		Возврат ?(Объект.ЭтоГруппа, "article_category", "article");
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Склады") Тогда
		Возврат "warehouse";
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ТипыЦен") Тогда
		Возврат "price_type";
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Производители") Тогда
		Возврат "manufacturer";
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.МВЗ") Тогда
		Возврат "place_of_cost";
		
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.Акция") Тогда
		Возврат "promo";
		
	Иначе Возврат "undefined_type"; КонецЕсли;
	
КонецФункции

Функция Заэскейпить(ТипОбъекта, ТелоJSON, ТекстЛога = "") Экспорт
	api_key = Константы.api_key.Получить();
	
	Результат = ТипОбъекта + "=[" + КодироватьСтроку(ТелоJSON, СпособКодированияСтроки.КодировкаURL) + "]&api_key=" + api_key;
	
	Возврат Результат
	
КонецФункции

#Область Пользователи

Функция ОбновитьПользователя(userJson, ПользовательОбъект = Неопределено, стрОшибки = "") Экспорт

	// Проверим
	
	Пользователь = ПолучитьСтруктуруИзJSON(userJson, стрОшибки); Если Пользователь = Неопределено Тогда Возврат Ложь КонецЕсли;
	
	Если ПользовательОбъект = Неопределено Тогда
		
		Если Не Пользователь.Свойство("guid") Или ПустаяСтрока(Пользователь.guid) Тогда 
			ДобавитьОписаниеОшибки(стрОшибки, "Не указан guid") 
		Иначе
			ПользовательСсылка = HTTP.ПолучитьОбъектПоСсылке(Справочники.ПользователиИнтернет, Пользователь.guid, стрОшибки); Если ПользовательСсылка = Неопределено Тогда Возврат Неопределено КонецЕсли;
			ПользовательОбъект = ПользовательСсылка.ПолучитьОбъект(); КонецЕсли; КонецЕсли;
			
	Если Не ПустаяСтрока(стрОшибки) Тогда Возврат Неопределено КонецЕсли;
	
	ЗаписьЖурналаРегистрации("API2.update_user.find_object", УровеньЖурналаРегистрации.Информация,,,"код пользователя=" + ПользовательОбъект.Код);
	
	// Обновим его реквизиты
	first_name = ""; last_name = "";
	Пользователь.Свойство("first_name", first_name);
	Пользователь.Свойство("last_name", last_name);
	Пользователь.Вставить("username", Строка(last_name) + " " + Строка(first_name));
	
	Если ПустаяСтрока(Пользователь.username) И Пользователь.Свойство("email") Тогда
		Пользователь.username = Пользователь.email;
	КонецЕсли;
	
	Если Пользователь.Свойство("created_at") Тогда
		Пользователь.Вставить("created_at", Дата(Пользователь.created_at));
	КонецЕсли;
	
	Изменился = Ложь;
	УстановитьРеквизитИзСтруктуры("Наименование", 		"username", 	Пользователь, ПользовательОбъект, Изменился);
	УстановитьРеквизитИзСтруктуры("Имя", 				"first_name", 	Пользователь, ПользовательОбъект, Изменился);
	УстановитьРеквизитИзСтруктуры("Фамилия", 			"last_name", 	Пользователь, ПользовательОбъект, Изменился);
	
	УстановитьРеквизитИзСтруктуры("ЭлектроннаяПочта", 	"email", 		Пользователь, ПользовательОбъект, Изменился);
	УстановитьРеквизитИзСтруктуры("ДатаСоздания", 		"created_at", 	Пользователь, ПользовательОбъект, Изменился);
	УстановитьРеквизитИзСтруктуры("КонтактныйТелефон", 	"phone", 		Пользователь, ПользовательОбъект, Изменился);
	УстановитьРеквизитИзСтруктуры("id", 				"id", 			Пользователь, ПользовательОбъект, Изменился);
	
	УстановитьРеквизитГуидИзСтруктуры(Справочники.ТипыЦен, "ТипЦен", "price_types", Пользователь, ПользовательОбъект, Изменился, стрОшибки);
	
	Если Не ПустаяСтрока(стрОшибки) Тогда Возврат Неопределено КонецЕсли;
	
	// Попробуем найти Контрагента
	Если ПользовательОбъект.Контрагент.Пустая() И Пользователь.Свойство("email") Тогда
		
		ЗаписьЖурналаРегистрации("API2.update_user.find_partner", УровеньЖурналаРегистрации.Информация,,,"Попытка найти Контрагента");
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ВЫБОР 	КОГДА спр.Объект Ссылка Справочник.Контрагенты ТОГДА спр.Объект
		|			КОГДА спр.Объект Ссылка Справочник.Партнеры ТОГДА спр.Объект.ОсновнойКонтрагент
		|			КОГДА спр.Объект Ссылка Справочник.КонтактныеЛица ТОГДА спр.Объект.Владелец
		|	КОНЕЦ КАК Контрагент
		|ИЗ
		|	РегистрСведений.ПредставлениеКонтактнойИнформации КАК спр
		|ГДЕ
		|	спр.Представление ПОДОБНО &Представление";
		
		Запрос.УстановитьПараметр("Представление", Пользователь.email);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			ЗаписьЖурналаРегистрации("API2.update_user.find_partner_success", УровеньЖурналаРегистрации.Информация,,,Выборка.Контрагент);
		    ПользовательОбъект.Контрагент = Выборка.Контрагент; КонецЕсли;КонецЕсли;
	
	ЗаписьЖурналаРегистрации("API2.update_user.update", УровеньЖурналаРегистрации.Информация,,,"изменился = " + Изменился);
	
	Если Изменился Тогда
		ПользовательОбъект.ДополнительныеСвойства.Вставить("Обновление", Ложь); // сайт не пинать
		ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(ПользовательОбъект,,стрОшибки, Ложь); КонецЕсли;
	
	Результат = Новый Структура("email, guid, id", ПользовательОбъект.ЭлектроннаяПочта, ПользовательОбъект.Ссылка, ПользовательОбъект.id);
	
	// Обновить информацию о адресе доставки
	АдресаДоставки = Неопределено;
	Если Пользователь.Свойство("delivery_address", АдресаДоставки) И ЗначениеЗаполнено(Пользователь.delivery_address) Тогда
		
		МассивОтвета 	= Новый Массив;
		МассивИД 		= Новый Массив;
		
		Для каждого АдресДоставки Из АдресаДоставки Цикл МассивИД.Добавить(АдресДоставки.id) КонецЦикла;
		
		Запрос 	= Новый Запрос("ВЫБРАТЬ id, Ссылка ИЗ Справочник.АдресаДоставкиИнтернет КАК Адреса ГДЕ id в (&id)"); Запрос.УстановитьПараметр("id", МассивИД);
		Выборка = Запрос.Выполнить().Выбрать();
		ид 		= Новый Соответствие; Пока Выборка.Следующий() Цикл ид.Вставить(Выборка.id, Выборка.Ссылка); КонецЦикла;
		
		Для каждого АдресДоставки Из АдресаДоставки Цикл
			// Ищем по id
			НайденныйАдрес = ид[АдресДоставки.id];
			Если НайденныйАдрес = Неопределено Тогда
				
				НайденныйАдрес = Справочники.АдресаДоставкиИнтернет.СоздатьЭлемент();
				НайденныйАдрес.Владелец = ПользовательОбъект.Ссылка;
				
			Иначе
				НайденныйАдрес = НайденныйАдрес.ПолучитьОбъект();КонецЕсли;
			
			Изменился = Ложь;
			УстановитьРеквизитИзСтруктуры("first_name", 	"first_name",	АдресДоставки, НайденныйАдрес, Изменился);
			УстановитьРеквизитИзСтруктуры("last_name", 		"last_name",	АдресДоставки, НайденныйАдрес, Изменился);
			УстановитьРеквизитИзСтруктуры("phone", 			"phone", 		АдресДоставки, НайденныйАдрес, Изменился);
			УстановитьРеквизитИзСтруктуры("Наименование", 	"title", 		АдресДоставки, НайденныйАдрес, Изменился);
			УстановитьРеквизитИзСтруктуры("ПочтовыйИндекс", "postal_code", 	АдресДоставки, НайденныйАдрес, Изменился);
			УстановитьРеквизитИзСтруктуры("Комментарий", 	"comment", 		АдресДоставки, НайденныйАдрес, Изменился);
			УстановитьРеквизитИзСтруктуры("Адрес", 			"title", 		АдресДоставки, НайденныйАдрес, Изменился);
			УстановитьРеквизитИзСтруктуры("id", 			"id", 			АдресДоставки, НайденныйАдрес, Изменился);
			УстановитьРеквизитИзСтруктуры("email", 			"email", 		АдресДоставки, НайденныйАдрес, Изменился);
			
			Если Изменился Тогда
				ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(НайденныйАдрес,,стрОшибки, Ложь);
			КонецЕсли;
			
			МассивОтвета.Добавить(Новый Структура("guid, id", НайденныйАдрес.Ссылка, НайденныйАдрес.id)); КонецЦикла;
		
		Если ЗначениеЗаполнено(МассивОтвета) Тогда
			Результат.Вставить("delivery_addresses", МассивОтвета); КонецЕсли; КонецЕсли;
	
	//ОтветJSON = Строка(w1_Json.JSON(Результат, Истина));
	ОтветJSON = Строка(w1_Json.JSON(ПолучитьПользователей(Новый Структура("Ссылка", ПользовательОбъект.Ссылка), стрОшибки), Истина));
	
	ЗаписьЖурналаРегистрации("API2.update_user.end", УровеньЖурналаРегистрации.Информация,,,"Результат = " + ОтветJSON);
	
	Возврат ОтветJSON;
	
КонецФункции
Функция СоздатьПользователя(userJson, стрОшибки = "") Экспорт
	
	// Проверим
	
	НовПользователь = Неопределено;
	Пользователь = ПолучитьСтруктуруИзJSON(userJson, стрОшибки); Если Пользователь = Неопределено Тогда Возврат Неопределено КонецЕсли;
	
	Если Не Пользователь.Свойство("email") Или ПустаяСтрока(Пользователь.email) Тогда 
		
		ДобавитьОписаниеОшибки(стрОшибки, "Не указан  email") 
		
	Иначе // Проверим уникальность email
		
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка Из Справочник.ПользователиИнтернет ГДЕ ЭлектроннаяПочта = """ + Пользователь.email + """ И НЕ ПометкаУдаления И СайтИсточник = Значение(Перечисление.Сайты.licota)");
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда НовПользователь = Выборка.Ссылка.ПолучитьОбъект(); КонецЕсли; КонецЕсли;
	
	Если Не ПустаяСтрока(стрОшибки) Тогда Возврат Неопределено КонецЕсли;
	
	// Создадим пользователя
	Если НовПользователь = Неопределено Тогда
		НовПользователь = Справочники.ПользователиИнтернет.СоздатьЭлемент();
		НовПользователь.СайтИсточник = Перечисления.Сайты.licota;
	КонецЕсли;
	
	Возврат ОбновитьПользователя(userJson, НовПользователь, стрОшибки);
КонецФункции
Функция УдалитьПользователя(userguid, стрОшибки = "") Экспорт
	
	Возврат УдалитьОбъект(Справочники.ПользователиИнтернет, userguid, стрОшибки);
	
КонецФункции

Функция ПолучитьПользователей(Параметры, стрОшибки = "") Экспорт
	// Получим параметры
	Ссылка 	= ?(Параметры.Свойство("Ссылка"),	Параметры.Ссылка,	Неопределено);
	guids 	= ?(Параметры.Свойство("guids"), 	Параметры.guids, 	Неопределено);
	
	массивСсылок = ?(Параметры.Свойство("массивСсылок"),	Параметры.массивСсылок,	Новый Массив);
	Если НЕ Ссылка = Неопределено Тогда
		массивСсылок.Добавить(Ссылка);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(guids) Тогда
		Если ТипЗнч(guids) = Тип("Массив") Тогда
			Для каждого гуид Из guids Цикл
				массивСсылок.Добавить(HTTP.ПолучитьОбъектПоСсылке(Справочники.ПользователиИнтернет, гуид, стрОшибки));
			КонецЦикла;
		ИначеЕсли ТипЗнч(guids) = Тип("Строка") Тогда
			массивСсылок.Добавить(HTTP.ПолучитьОбъектПоСсылке(Справочники.ПользователиИнтернет, guids, стрОшибки));
		КонецЕсли;
	КонецЕсли;
	
	#Область Текст_запроса
	
	Запрос = Новый Запрос("
	
	// Пользователи
	
	|ВЫБРАТЬ
	|	Спр.Ссылка				guid,
	|	Спр.ЭлектроннаяПочта	email,
	|	ВЫБОР КОГДА Спр.id = """" ТОГДА Неопределено ИНАЧЕ Спр.id КОНЕЦ КАК id,
	|	Спр.Имя 				name,
	|	Спр.Фамилия				surname,
	|	Спр.Отчество 			patronymic,
	|	Истина					is_legal,
	|
	|	Спр.ПометкаУдаления,
	|	Истина ВыгружатьНаСайт,
	|	ВЫБОР КОГДА Спр.ЮрФизЛицо = Значение(Перечисление.ЮрФизЛицо.ЮрЛицо) или Спр.ЮрФизЛицо = Значение(Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ КАК type
	|ИЗ 		
	|	Справочник.ПользователиИнтернет КАК Спр
	|ГДЕ
	|	Спр.СайтИсточник = Значение(Перечисление.Сайты.licota)
	|" + ?(ЗначениеЗаполнено(массивСсылок), " И Спр.Ссылка В (&массивСсылок)", "") + "
	|;
	
	// Склады
	
	|ВЫБРАТЬ
	|	Спр.Ссылка 				Пользователь,
	|	Спр.Склад				warehouse_guid
	|ИЗ 		
	|	Справочник.ПользователиИнтернет.ДоступныеСклады КАК Спр
	|" + ?(ЗначениеЗаполнено(массивСсылок), "ГДЕ Спр.Ссылка В (&массивСсылок)", "") + "
	|;
	
	// Адреса доставки
	
	|ВЫБРАТЬ
	|	Спр.Владелец			Пользователь,
	|	Спр.Ссылка				guid,
	|	ВЫБОР КОГДА Спр.id = """" ТОГДА Неопределено ИНАЧЕ Спр.id КОНЕЦ КАК id,
	|	Спр.Наименование		title,
	|	Спр.first_name			first_name,
	|	Спр.last_name			last_name,
	//|	Спр.middle_name			middle_name,
	|	Спр.phone				phone,
	//|	Спр.Ссылка				country,
	|	Спр.Регион				region,
	|	Спр.Город				city,
	|	Спр.ПочтовыйИндекс		postal_code,
	|	Спр.Адрес				street_address,
	//|	Спр.Ссылка				coordinates,
	//|	Спр.Ссылка				is_main,
	|	Спр.Email				email
	|ИЗ 		
	|	Справочник.АдресаДоставкиИнтернет КАК Спр
	|" + ?(ЗначениеЗаполнено(массивСсылок), "ГДЕ Спр.Владелец В (&массивСсылок)", "") + "
	|;
	
	|");
	
#КонецОбласти
	
	Запрос.УстановитьПараметр("массивСсылок", массивСсылок);
	
	Пакеты 			= Запрос.ВыполнитьПакет();
	Категории 		= Новый Массив;
	Таблица			= Пакеты[0].Выгрузить(); ПослИнд = Таблица.Количество() - 1;
	Склады			= Пакеты[1].Выгрузить(); ПоляСклады = ПолучитьПоляДляСтруктуры("Пользователь", Склады.Колонки);
	АдресаДоставки	= Пакеты[2].Выгрузить(); ПоляАдресовДоставки = ПолучитьПоляДляСтруктуры("Пользователь", АдресаДоставки.Колонки);
	
	УстановитьИндексыТаблицам("Пользователь", Склады, АдресаДоставки);
	
	Пользователи = Новый Массив;
	Для Инд = 0 По ПослИнд Цикл
		// Получим пользователя
		структураОбъекта 	= КонвертацияТипов.ПолучитьСтруктуруИзСТрокиТаблицыЗначений(Таблица, Инд);
		
		Отбор = Новый Структура("Пользователь", структураОбъекта.guid);
		
		// Добавим Склады
		структураОбъекта.Вставить("warehouses", ПолучитьМассивЗначенийИзТаблицы(Склады, Отбор, ПоляСклады));
		
		// Добавим Адреса доставки
		структураОбъекта.Вставить("delivery_addresses", ПолучитьМассивЗначенийИзТаблицы(АдресаДоставки, Отбор, ПоляАдресовДоставки));
		
		
		Пользователи.Добавить(структураОбъекта); 
	КонецЦикла;
	
	Возврат ЗначениеВозврата(Пользователи);
КонецФункции // ПолучитьПользователей()
Функция ПолучитьАдресаДоставки(Параметры, стрОшибки = "") Экспорт
	// Получим параметры
	Ссылка 	= ?(Параметры.Свойство("Ссылка"),	Параметры.Ссылка,	Неопределено);
	guids 	= ?(Параметры.Свойство("guids"), 	Параметры.guids, 	Неопределено);
	
	массивСсылок = ?(Параметры.Свойство("массивСсылок"),	Параметры.массивСсылок,	Новый Массив);
	Если НЕ Ссылка = Неопределено Тогда
		массивСсылок.Добавить(Ссылка);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(guids) Тогда
		Если ТипЗнч(guids) = Тип("Массив") Тогда
			Для каждого гуид Из guids Цикл
				массивСсылок.Добавить(HTTP.ПолучитьОбъектПоСсылке(Справочники.АдресаДоставкиИнтернет, гуид, стрОшибки));
			КонецЦикла;
		ИначеЕсли ТипЗнч(guids) = Тип("Строка") Тогда
			массивСсылок.Добавить(HTTP.ПолучитьОбъектПоСсылке(Справочники.АдресаДоставкиИнтернет, guids, стрОшибки));
		КонецЕсли;
	КонецЕсли;
	
	#Область Текст_запроса
	
	Запрос = Новый Запрос("
	
	|ВЫБРАТЬ
	|	Спр.Ссылка				guid,
	|	ВЫБОР КОГДА Спр.id = """" ТОГДА Неопределено ИНАЧЕ Спр.id КОНЕЦ КАК id,
	|	Спр.first_name			first_name,
	|	Спр.last_name			last_name,
	|	Спр.phone				phone,
	|	Спр.ПочтовыйИндекс		postal_code,
	|	Спр.Комментарий			comment,
	|	Спр.Адрес				title,
	|	Спр.Email				email,
	|
	|	Спр.ПометкаУдаления,
	|	Истина ВыгружатьНаСайт
	|ИЗ 		
	|	Справочник.АдресаДоставкиИнтернет КАК Спр
	|" + ?(ЗначениеЗаполнено(массивСсылок), "ГДЕ Спр.Ссылка В (&массивСсылок)", "") + "
	|");
	
#КонецОбласти
	
	Запрос.УстановитьПараметр("массивСсылок", массивСсылок);
	
	Пакеты 			= Запрос.ВыполнитьПакет();
	Категории 		= Новый Массив;
	Таблица			= Пакеты[0].Выгрузить(); ПослИнд = Таблица.Количество() - 1;
	
	АдресаДоставки = Новый Массив;
	Для Инд = 0 По ПослИнд Цикл
		структураОбъекта 	= КонвертацияТипов.ПолучитьСтруктуруИзСТрокиТаблицыЗначений(Таблица, Инд);
		
		АдресаДоставки.Добавить(структураОбъекта); 
	КонецЦикла;
	
	Возврат ЗначениеВозврата(АдресаДоставки);
КонецФункции // ПолучитьАдресаДоставки()

#КонецОбласти

#Область Заказы

Функция ОбновитьЗаказ(orderJson, стрОшибки = "") Экспорт
	
	Перем number;
	Перем type_order;
	Перем status;
	Перем error;
	Перем products;
	
	Заказ = w1_Json.UnJSON(orderJson);
	
	// user = "guid"
	// order.shipping_address or order.shipping_address_id
	
	//ЗаказJson.Свойство("cost_of_delivery", 	Заказ.СуммаДоставки);
	//ЗаказJson.Свойство("to_door", 			Заказ.ДоставкаДоДвери); 
	//ЗаказJson.Свойство("term_delivery",		Заказ.МаксимальныйСрокДоставки);
	//Если ЗаказJson.Свойство("id") Тогда Заказ.id = Формат(Заказ.id, "ЧГ=") КонецЕсли;
	//ЗаказJson.Свойство("variant_delivery",	Заказ.ВариантДоставки);
	//	
	//ЗаказJson.Свойство("comment", 			utКомментарий);
	// ЗаказJson.Свойство("comment_delivery",	utКомментарийКДоставке);
	//ЗаказJson.Свойство("kind_payment_code",	стрКодаОплаты);
	//ЗаказJson.Свойство("status", 	Заказ.СуммаДоставки);
	// real_delivery_cost СуммаДоставкиРасход
	
	//line_items
	// - product_guid
	// - quantity
	// - base_price
	// - discount
	
	ЗаказСсылка = Неопределено;
	
	Если Заказ.Свойство("guid") И НЕ ПустаяСтрока(Заказ.guid) Тогда
		ЗаказСсылка = HTTP.ПолучитьОбъектПоСсылке(Документы.ИнтернетЗаказПокупателя, Заказ.guid, стрОшибки); 
		Если ЗаказСсылка = Неопределено Тогда Возврат Новый Структура КонецЕсли;
	КонецЕсли;
		
	Попытка
		Результат = СформироватьОбновитьЗаказ(Заказ, error, ЗаказСсылка);
	Исключение
		стрОшибки 	= ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("HTTP.licota.create_order", УровеньЖурналаРегистрации.Ошибка, , , стрОшибки);
		Возврат "";
	КонецПопытки;
	
	Возврат w1_Json.JSON(Результат, Истина);
	
КонецФункции

Функция СформироватьОбновитьЗаказ(order, error = "", ЗаказОбъект = Неопределено)
	
	ЗаписьЖурналаРегистрации("HTTP.licota.Сайт создал новый заказ", УровеньЖурналаРегистрации.Информация, , , 
			"order = " + order);
			
	ЕстьЗаказ = ЗаказОбъект <> Неопределено;
	
	СсылкаИнтернетПользователь = ?(ЕстьЗаказ, ЗаказОбъект.ПользовательИнтернет, ?(order.Свойство("user_guid"), HTTP.ПолучитьОбъектПоСсылке(Справочники.ПользователиИнтернет, order.user_guid, error), Неопределено));
	
	Если СсылкаИнтернетПользователь = Неопределено Тогда
		ТипЦен = HTTP.ПолучитьТипЦенПользователяИнтернет(Новый Структура("ТипЦен", ПредопределенноеЗначение("Справочник.ТипыЦен.ПустаяСсылка")));
	Иначе
		ТипЦен = HTTP.ПолучитьТипЦенПользователяИнтернет(СсылкаИнтернетПользователь);
	КонецЕсли;
	
	// Форматнем структуру заказа
	
	//ЗаказJson = Json.UnJSON_silber(order, error);
	ЗаказJson = order;
	Если ЗаказJson = Неопределено Тогда
		
		ЗаписьЖурналаРегистрации("HTTP.licota.Сайт создал новый заказ", УровеньЖурналаРегистрации.Ошибка, , , error);
		Возврат "";
		
	КонецЕсли;
	
	// Создадим заказ
	
	МВЗ_гуид = Неопределено; МВЗ = Неопределено;
	ЗаказJson.Свойство("place_of_cost", МВЗ_гуид);
 	Если НЕ МВЗ_гуид = Неопределено Тогда
		МВЗ = HTTP.ПолучитьОбъектПоСсылке(Справочники.МВЗ, МВЗ_гуид, error);
	КонецЕсли;
	
	Если Не ЕстьЗаказ Тогда
		
		Заказ 				= Документы.ИнтернетЗаказПокупателя.СоздатьДокумент();
		Заказ.СайтИсточник 	= Перечисления.Сайты.licota;
		ОрганизацияЗаказа 	= Константы.ОрганизацияДляИнтернетЗаказов.Получить();
		
		// Заполним реквизиты у которых вначале стоит "ИнтернетЗаказ_"
		
		РеквЗак = ОрганизацияЗаказа.Метаданные().Реквизиты;
		Для Каждого Реквизит Из РеквЗак Цикл
			Если Лев(Реквизит.Имя, 14) = "ИнтернетЗаказ_" Тогда
				Имя = Сред(Реквизит.Имя,15);
				Заказ[Имя] = ОрганизацияЗаказа[Реквизит.Имя];
			КонецЕсли;
		КонецЦикла;
		
		ВалютаИнтернетПродаж = Константы.ВалютаУправленческогоУчета.Получить();
		
		Заказ.Дата					= ТекущаяДата();
		Заказ.ТипЦен 				= ТипЦен;
		Заказ.Валюта				= ВалютаИнтернетПродаж;
		Заказ.ПользовательИнтернет 	= СсылкаИнтернетПользователь;
		Заказ.УчитыватьНДС	 		= Ложь;
		
		Если ЗначениеЗаполнено(СсылкаИнтернетПользователь) Тогда Заказ.ОтветственноеЛицо = СсылкаИнтернетПользователь.ФизЛицо КонецЕсли;
					
		Если НЕ СсылкаИнтернетПользователь = Неопределено И Не СсылкаИнтернетПользователь.Контрагент.Пустая() Тогда
			Заказ.Контрагент = СсылкаИнтернетПользователь.Контрагент;
			ФункцииФормДокументов.КонтрагентПриИзменении(Заказ); 
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Заказ.Организация) Тогда
		Заказ.Организация			= Константы.ОрганизацияДляИнтернетЗаказов.Получить(); КонецЕсли;
		Заказ.СуммаВключаетНДС	 	= Истина;
		
	Иначе
		
		Заказ = ЗаказОбъект;
		Заказ.Товары.Очистить();
		
		БизнесПроцесс = HTTP.ПолучитьБизнесПроцесс(Заказ.Ссылка, error);
		Если БизнесПроцесс = Неопределено Тогда
			ЗаписьЖурналаРегистрации("HTTP.licota.Сайт создал новый заказ", УровеньЖурналаРегистрации.Ошибка, , , error);
			Возврат "";
		КонецЕсли;
			
	КонецЕсли;
	
	// Поищем адрес доставки
	
	delivery_address = Неопределено;
	Если 	ЗаказJson.Свойство("delivery_address_guid", 		delivery_address) Тогда
		
		Если не ПустаяСтрока(delivery_address) Тогда
		 СсылкаАдресДоставки = HTTP.ПолучитьОбъектПоСсылке(Справочники.АдресаДоставкиИнтернет, delivery_address, error);
			
			Заказ.АдресДоставки  = СсылкаАдресДоставки;
		КонецЕсли; 
	КонецЕсли;

	// Поищем склад
	
	Если ЗаказJson.Свойство("warehouse_guid") И ЗначениеЗаполнено(ЗаказJson.warehouse_guid) Тогда
		Заказ.СкладСамовывоза = HTTP.ПолучитьОбъектПоСсылке(Справочники.Склады, ЗаказJson.warehouse_guid, error);
		Заказ.Склад = Заказ.СкладСамовывоза;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Заказ.Склад) Тогда
		Заказ.Склад = Константы.СкладИнтернетЗаказа.Получить();
	КонецЕсли;
	
	// Заполним шапку
	
	utКомментарий 			= "";
	utКомментарийКДоставке 	= "";
	стрКодаОплаты			= "";
	АдресДоставки			= "";
	
	ЗаказJson.Свойство("delivery_cost", 		Заказ.СуммаДоставки);
	ЗаказJson.Свойство("to_door", 				Заказ.ДоставкаДоДвери); 
	ЗаказJson.Свойство("term_delivery",			Заказ.МаксимальныйСрокДоставки);
	ЗаказJson.Свойство("id",					Заказ.id);
	ЗаказJson.Свойство("variant_delivery",		Заказ.ВариантДоставки);
	ЗаказJson.Свойство("real_delivery_cost", 	Заказ.СуммаДоставкиРасход);
		
	ЗаказJson.Свойство("comment", 				utКомментарий);
 	ЗаказJson.Свойство("comment_delivery",		utКомментарийКДоставке);
	ЗаказJson.Свойство("delivery_address",		АдресДоставки);
	ЗаказJson.Свойство("payment_variant_guid",	стрКодаОплаты);
	
	ЗаказJson.Свойство("current_location",		Заказ.МестоположениеСтр);
	
	Если ТипЗнч(АдресДоставки) = Тип("Строка") Тогда
		АдресДоставкиСтрока = АдресДоставки;
	ИначеЕсли ТипЗнч(АдресДоставки) = Тип("Структура") Тогда // тогда это скорее структура
		name = ""; title = ""; first_name = ""; last_name = ""; phone = ""; postal_code = ""; email = "";
		АдресДоставки.Свойство("title"			, title);
		АдресДоставки.Свойство("first_name"		, first_name);
		АдресДоставки.Свойство("last_name"		, last_name);
		АдресДоставки.Свойство("phone"			, phone);
		АдресДоставки.Свойство("postal_code"	, postal_code);
		АдресДоставки.Свойство("name"			, name);
		АдресДоставки.Свойство("email"			, email);
		
		АдресДоставкиСтрока = "Адрес: " + title + " Кому: " + phone + " " + name + " " + first_name + " " + last_name + " Индекс: " + postal_code + " Email: " + email;
	КонецЕсли;
	
	//ВидОплаты = HTTP.ПолучитьВидОплатыПоКОдуОплаты(стрКодаОплаты);
	ВидОплаты = HTTP.ПолучитьОбъектПоСсылке(Справочники.ВидОплатыИнтернетЗаказа, стрКодаОплаты, error);
	
	Заказ.ВидОплаты				= ВидОплаты;
	Заказ.Комментарий 			= СокрЛП(?(ЗначениеЗаполнено(utКомментарий), Строка(utКомментарий), "") + " Вид оплаты: " + ВидОплаты);
	Заказ.КомментарийКДоставке 	= Строка(utКомментарийКДоставке) + АдресДоставкиСтрока;
	
	Заказ.КомментарийКДоставке 	= Заказ.КомментарийКДоставке;
	
	// Заполним Табличную часть заказ
	
	СтрокиТоваровJson = Неопределено; КЭШтоваровJSON = Новый Соответствие;
	Если ЗаказJson.Свойство("line_items", СтрокиТоваровJson) Тогда
		
		Ном = 0;
		Для Каждого СтруктураСтроки Из СтрокиТоваровJson Цикл Ном = Ном + 1;
			
			// Получим товар
			
			product_guid = Неопределено;
			Если Не СтруктураСтроки.Свойство("product_guid", product_guid) Тогда
				
				error = "Ошибка, не обнаружен товар в строке №" + Ном + ", свойство ""product_guid""";
				ЗаписьЖурналаРегистрации("HTTP.licota.Сайт создал новый заказ", УровеньЖурналаРегистрации.Ошибка, , , error);
				Возврат "";
				
			КонецЕсли;
			
			СсылкаНоменклатура = HTTP.ПолучитьОбъектПоСсылке(Справочники.Номенклатура, product_guid, error);
			Если СсылкаНоменклатура = Неопределено Тогда
				
				ЗаписьЖурналаРегистрации("HTTP.licota.Сайт создал новый заказ", УровеньЖурналаРегистрации.Ошибка, , , error);
				Возврат "";
				
			КонецЕсли;
			
			КоличествоТовара = 0; ЦенаТовара = 0; Скидка = 0; Цена = 0; Всего = 0;
			
			СтруктураСтроки.Свойство("quantity"		, КоличествоТовара);
			СтруктураСтроки.Свойство("base_price"	, ЦенаТовара);
			СтруктураСтроки.Свойство("discount"		, Скидка);
			
			СтруктураСтроки.Свойство("price"		, Цена);
			СтруктураСтроки.Свойство("total"		, Всего);
			
			КЭШтоваровJSON.Вставить(СсылкаНоменклатура, Новый Структура("Цена, Всего, base_price", Цена, Всего, ЦенаТовара));
			
			НовСтрока = Заказ.Товары.Добавить();
			НовСтрока.Номенклатура 	= СсылкаНоменклатура;
			Акция = Неопределено;
			//НовСтрока.Цена 		= РаботаСНоменклатурой.ПолучитьЦену(СсылкаНоменклатура, ТипЦен, ВалютаИнтернетПродаж,, Заказ.Партнер, Истина, Акция);
			//Если Акция <> Неопределено Тогда НовСтрока.Акция = Акция; КонецЕсли;
			//НовСтрока.ПроцентАвтоматическойСкидки = РаботаСНоменклатурой.ПолучитьПроцентАвтоматическойСкидки(НовСтрока.Номенклатура, Заказ.Партнер, Заказ.ДисконтнаяКарта, НовСтрока.Акция);
			
			Если НЕ Заказ.ТипЦен = HTTP.ПолучитьТипЦенПользователяИнтернет(Новый Структура("ТипЦен", ПредопределенноеЗначение("Справочник.ТипыЦен.ПустаяСсылка"))) Тогда
				// данное условие поставлено затем, чтобы далее учесть процент скидки,
				// то есть если тип цен не розничный, то это дилер, а у дилера всегда цена будет другой от цены товара (базовой)
				// а нам надо учесть скидку. И тогда получается все правильно, если в цену вписать цена товара
				// кстати у дилера нет скидки
				НовСтрока.Цена 			= Цена;
			Иначе
				Если Скидка = 0 Тогда
					НовСтрока.Цена 			= Цена;
				ИначеЕсли ЦенаТовара - (ЦенаТовара * Скидка / 100) - Цена > 2 Тогда
					НовСтрока.Цена 			= РаботаСНоменклатурой.ПолучитьЦену(СсылкаНоменклатура, ТипЦен, ВалютаИнтернетПродаж,, Заказ.Контрагент, Истина, Акция);
				Иначе
					НовСтрока.Цена 			= ЦенаТовара;					
				КонецЕсли;
			КонецЕсли;
			
			НовСтрока.base_price 		= ЦенаТовара; // Сохраним для нужд сайта (потом будем возвращать на сайт)
			
			НовСтрока.Количество	= КоличествоТовара;
			НовСтрока.СтавкаНДС		= ?(Заказ.УчитыватьНДС, Перечисления.СтавкиНДС.НДС18, Перечисления.СтавкиНДС.БезНДС);
			НовСтрока.ПроцентАвтоматическойСкидки = Скидка;
			
			СтруктураКолонокТовары = Новый Структура("ЕстьПроцентРучнойСкидки, ЕстьПроцентАвтоматическойСкидки, ТипЦен, Валюта, Контрагент, 
													|ЕстьАкция, ЕстьЦенаПоАкции, ЕстьУпаковка, ЕстьКоличество, ЕстьЦена, ЕстьСуммаБезСкидки, 
													|ЕстьСумма, ЕстьСуммаАвтоматическойСкидки, ЕстьСуммаРучнойСкидки, ЕстьСтавкаНДС, ЕстьСуммаНДС, 
													|СуммаВключаетНДС, ЕстьВсего, ЕстьДоставка, ЕстьАкция", 
													Истина, Истина, Заказ.ТипЦен, Заказ.Валюта, Заказ.Контрагент,
													Истина, Ложь, Истина, Истина, Истина, Истина,
													Истина, Истина, Истина, Истина, Истина,
													Заказ.СуммаВключаетНДС, Ложь, Ложь, Истина);
			
			ФункцииФормДокументов.РассчитатьСуммыСтрокиОтЦены(НовСтрока, СтруктураКолонокТовары, Ложь);
		КонецЦикла;
	КонецЕсли;
	
	// Запишем заказ
	
	Заказ.ДополнительныеСвойства.Вставить("Обновление", Ложь); // сайт не пинать
	Заказ.УстановитьНовыйНомер();
	Заказ.ОбменДанными.Загрузка = Истина;
 	Попытка
		Заказ.Записать();
	Исключение
		стрОшибки = ОписаниеОшибки();
		error = "Ошибка при записи интернет заказа
		|" + стрОшибки;
		ЗаписьЖурналаРегистрации("HTTP.licota.Сайт создал новый заказ", УровеньЖурналаРегистрации.Ошибка, , , error);
		Возврат "";
	КонецПопытки;
	
	Заказ.ОбменДанными.Загрузка = Ложь;
	Размещен = Истина;

	ЗаписьЖурналаРегистрации("HTTP.licota.Сайт создал новый заказ", УровеньЖурналаРегистрации.Информация, , , "Временный лог: Начало транзакции");	
	НачатьТранзакцию();
	
	// запрос резерва
 
	//ТоварыНаСайт = СформироватьРезерв(Заказ, ТипЦен, Размещен);
	
	ТоварыНаСайт = СформироватьРезерв(Заказ, Размещен);	
	// проведение заказа
	Если Размещен Тогда	

		Попытка
			Заказ.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			error = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("HTTP.licota.Сайт создал новый заказ", УровеньЖурналаРегистрации.Ошибка, , , error);

			ОтменитьТранзакцию();
			Перейти ~КонэцТранзакции;
		КонецПопытки;
		
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	ЗаписьЖурналаРегистрации("HTTP.licota.Сайт создал новый заказ", УровеньЖурналаРегистрации.Информация, , , "Временный лог: транзакция зафиксирована");	
	
	~КонэцТранзакции:
	
	// страт бизнес-процесса

	Если НЕ ЕстьЗаказ Тогда
		
		БизнесПроцесс 				= БизнесПроцессы.ИнтернетЗаявка.СоздатьБизнесПроцесс();
		БизнесПроцесс.Дата 			= ТекущаяДата();
		БизнесПроцесс.Заказ = Заказ.Ссылка;
		
		БизнесПроцесс.ДополнительныеСвойства.Вставить("Обновление", Ложь);

		Попытка
			БизнесПроцесс.Записать();
	    	БизнесПроцесс.Старт();
		Исключение
			error = "Ошибка старта бизнес-процесса: " + ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("HTTP.licota.Сайт создал новый заказ", УровеньЖурналаРегистрации.Ошибка, , , error);
		КонецПопытки;
				
	Иначе
				
		Если ФункцииБизнесПроцессов.СтоитНаТочкеМаршрута(БизнесПроцесс, БизнесПроцессы.ИнтернетЗаявка.ТочкиМаршрута.ОжиданиеОтвета) Тогда
			Задача = ФункцииБизнесПроцессов.ТекущаяЗадача(БизнесПроцесс);
			ЗадачаОбъект = Задача.ПолучитьОбъект();
			Попытка
				ЗадачаОбъект.ВыполнитьЗадачу();
			Исключение
				error = "Ошибка при выполнении задачи: " + ОписаниеОшибки();
				ЗаписьЖурналаРегистрации("HTTP.licota.Сайт создал новый заказ", УровеньЖурналаРегистрации.Ошибка, , , error);
				Возврат "";
			КонецПопытки;

		КонецЕсли;	
	КонецЕсли;	
		
	// Установим возвращаемые параметры
		
	Результат = Новый Структура("guid, status, id, limit", XMLСтрока(Заказ.Ссылка), HTTP.ПолучитьТипЗаказа_2(Заказ.Ссылка, НЕ ЕстьЗаказ), Заказ.id, Неопределено);
	
	Если НЕ ЕстьЗаказ Тогда
		Результат.Вставить("number", Заказ.Номер);
	КонецЕсли;
	Если ЗаказJson.Свойство("line_items") Тогда
		
		Для каждого строкаТовара Из ТоварыНаСайт Цикл // массив структур
			кэшТовара = КЭШтоваровJSON[строкаТовара.product_guid];
			Если НЕ кэшТовара = Неопределено Тогда
				строкаТовара.Вставить("price"		, кэшТовара.Цена);
				строкаТовара.Вставить("total"		, кэшТовара.Всего);
				строкаТовара.Вставить("base_price"	, кэшТовара.base_price);
			КонецЕсли;
		КонецЦикла;
		Результат.Вставить("line_items", ТоварыНаСайт);
		
		ЗаписьЖурналаРегистрации("HTTP.licota.Сайт создал новый заказ", УровеньЖурналаРегистрации.Информация, , , "Резерв: " + Результат.line_items);
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации("HTTP.licota.Сайт создал новый заказ", УровеньЖурналаРегистрации.Информация, , , "Возврат Гуид: " + Результат.guid);
	
	Возврат Результат;
	
КонецФункции
Функция СформироватьРезерв_Ст(Заказ, ТипЦен, Размещен = Истина)
	
	//ТоварыНаСайт = Новый Массив;
	//Заказ.Товары.Очистить();
	
	//ВалютаИнтернетПродаж = Константы.ВалютаУправленческогоУчета.Получить();	
	
	//Запрос = Новый Запрос("
	//|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	Таб.Номенклатура,
	//|	Таб.Склад,
	//|	Таб.Приоритет,
	//|	Таб.Количество,
	//|	Таб.Цена,
	//|	Таб.Акция,
	//|	Таб.ПроцентАвтоматическойСкидки,
	//|	Таб.СтавкаНДС,
	//|	ЕСТЬNULL(Ост.КоличествоОстаток,0) - ЕСТЬNULL(Рез.КоличествоОстаток,0) Остаток,
	//|	ВЫБОР КОГДА 
	//|		(ЕСТЬNULL(Ост.КоличествоОстаток,0) - ЕСТЬNULL(Рез.КоличествоОстаток,0) - Таб.Количество >= 0)
	//|	ТОГДА Истина
	//|	ИНАЧЕ Ложь
	//|	КОНЕЦ МожноСписать
	//|ИЗ
	//|	(
	//|	 	ВЫБРАТЬ
	//|			Раз.Склад,
	//|			Раз.Приоритет + ВЫБОР КОГДА РегРег.регион ЕСТЬ NULL ТОГДА 0 ИНАЧЕ 10 КОНЕЦ Приоритет,
	//|			Док.Номенклатура,
	//|			Док.Количество,
	//|			Док.Цена,
	//|			Док.Акция,
	//|			Док.ПроцентАвтоматическойСкидки,
	//|			Док.СтавкаНДС,
	//|			Док.Ссылка.АдресДоставки.Регион Региондок,
	//|			РегРег.Регион	
	//|		 ИЗ
	//|			Документ.ИнтернетЗаказПокупателя.Товары Док
	//|			
	//|		ЛЕВОЕ СОЕДИНЕНИЕ
	//|			(ВЫБРАТЬ
	//|				Скл.Ссылка					Склад,
	//|				ЕстьNULL(Спр.Дилер, ЛОЖЬ)	Дилер,
	//|				Скл.РозницаДляВсех 			РазрешеноРознице,
	//|				ВЫБОР 	КОГДА ЕстьNULL(Спр.Дилер, ЛОЖЬ)
	//|						ТОГДА Скл.ПриоритетСкладаДилер 
	//|						ИНАЧЕ Скл.ПриоритетСкладаРозничныйПокупатель
	//|				КОНЕЦ 		  Приоритет
	//|			ИЗ
	//|				Справочник.Склады Скл
	//|			ЛЕВОЕ СОЕДИНЕНИЕ
	//|				Справочник.ПользователиИнтернет КАК Спр
	//|			ПО
	//|				Спр.Ссылка = &ПользовательИнтернет
	//|			ГДЕ  
	//|				ВЫБОР 	КОГДА НЕ ЕстьNULL(Спр.Дилер, ЛОЖЬ)
	//|						ТОГДА Скл.ОтгрузкаРозничнымКлиентам 
	//						// Если дилер то только со складов дилеров
	//|						ИНАЧЕ Скл.ОтгрузкаДилерам
	//|				КОНЕЦ
	//|			) Раз
	//|				
	//|			ПО ИСТИНА
	//|				
	//|		ЛЕВОЕ СОЕДИНЕНИЕ
	//|			РегистрСведений.ПривязкаИнтернетРегионовКСкладам РегРег
	//|		ПО
	//|			Док.Ссылка.АдресДоставки.Регион = РегРег.Регион И
	//|			Раз.Склад = РегРег.Склад
	//|			
	//|		ГДЕ 
	//|			Док.Ссылка = &ИнтернетЗаказ
	//				// Если розница тогда только со своего региона или
	//				// если регион не определен то от всех складов которые в питере
    //
	//|			И (
	//|				ЕСТЬNULL(Раз.Дилер, ИСТИНА) ИЛИ  
	//|				ВЫБОР КОГДА РегРег.Склад ЕСТЬ NULL 
	//|					ТОГДА Раз.РазрешеноРознице
	//|					ИНАЧЕ РегРег.Склад = Раз.Склад КОНЕЦ
	//|				)
	//|	) Таб
	//|	
	//|ЛЕВОЕ СОЕДИНЕНИЕ
	//|	РегистрНакопления.ТоварыНаСкладах.Остатки() Ост
	//|ПО Таб.Номенклатура = Ост.Номенклатура И Таб.Склад = Ост.Склад
	//|
	//|ЛЕВОЕ СОЕДИНЕНИЕ
	//|	РегистрНакопления.ТоварыВРезерве.Остатки() Рез
	//|ПО 
	//|	Таб.Номенклатура = Рез.Номенклатура И Таб.Склад = Рез.Размещение
	//|
	//|ДЛЯ ИЗМЕНЕНИЯ 
	//|	РегистрНакопления.ТоварыВРезерве.Остатки, РегистрНакопления.ТоварыНаСкладах.Остатки
	//|
	//|УПОРЯДОЧИТЬ ПО 
	//|	МожноСписать Убыв, Приоритет Убыв, Остаток Убыв
	//|
	//|ИТОГИ 
	//|	МАКСИМУМ(Количество), 
	//|	СУММА(Остаток)
	//|ПО
	//|	Таб.Номенклатура
	//|");
		
	//Запрос.УстановитьПараметр("ПользовательИнтернет", Заказ.ПользовательИнтернет);
	//Запрос.УстановитьПараметр("ИнтернетЗаказ", Заказ.Ссылка);

	//РезультатЗапроса = Запрос.Выполнить();
	//Если НЕ РезультатЗапроса.Пустой() Тогда
		
		
		//Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		//Пока Выборка.Следующий() Цикл
			
			//Количество		= Выборка.Количество;
			
			//Если Выборка.Остаток - Количество >= 0 Тогда  // если суммарный остаток товара на складах позволяет произвести списание
				
				//ВыборкаСклады = Выборка.Выбрать();
				//ВыборкаСклады.Следующий();
				
				//Если ВыборкаСклады.МожноСписать Тогда           	// если со склада обладающего высшим приоритетом и наличием товара можно списать искомое количество товара - делаем это!
					//НоваяСтрока = Заказ.Товары.Добавить();
					
					//НоваяСтрока.Номенклатура 	= Выборка.Номенклатура;
				    //НоваяСтрока.Размещение	 	= ВыборкаСклады.Склад;
					//НоваяСтрока.Количество		= Количество;
					//НоваяСтрока.Цена            = ВыборкаСклады.Цена;
					//НоваяСтрока.Акция			= ВыборкаСклады.Акция;
					//НоваяСтрока.СтавкаНДС		= ВыборкаСклады.СтавкаНДС;
					//НоваяСтрока.ПроцентАвтоматическойСкидки = ВыборкаСклады.ПроцентАвтоматическойСкидки; 
					
					// пересчитаем строку
					
					//НоваяСтрока.СуммаБезСкидки = НоваяСтрока.Цена * НоваяСтрока.Количество;
					//НоваяСтрока.СуммаАвтоматическойСкидки = НоваяСтрока.СуммаБезСкидки * НоваяСтрока.ПроцентАвтоматическойСкидки / 100;
					//НоваяСтрока.Сумма	 =	НоваяСтрока.СуммаБезСкидки - НоваяСтрока.СуммаАвтоматическойСкидки;

					//СтавкаНДС = КэшируемыеФункции.ПолучитьЧислоСтавкиНДС(НоваяСтрока.СтавкаНДС);
					//НоваяСтрока.СуммаНДС	= СтавкаНДС * НоваяСтрока.Сумма / (СтавкаНДС + 100);
				
				//Иначе                      							// если одним складом не обойтись, раскидываем размещение по разным складам
					
				//	Треб = Выборка.Количество;
							
				//	Пока Треб > 0 Цикл                       
					//	  Если ВыборкаСклады.Остаток > 0 Тогда
					//		НоваяСтрока = Заказ.Товары.Добавить();

							//НоваяСтрока.Номенклатура 	= Выборка.Номенклатура;
						   	//НоваяСтрока.Размещение	 	= ВыборкаСклады.Склад;
							//НоваяСтрока.Цена            = ВыборкаСклады.Цена;
							//НоваяСтрока.Акция			= ВыборкаСклады.Акция;
							//НоваяСтрока.СтавкаНДС		= ВыборкаСклады.СтавкаНДС;
							//НоваяСтрока.ПроцентАвтоматическойСкидки = ВыборкаСклады.ПроцентАвтоматическойСкидки; 

							//Если Треб - ВыборкаСклады.Остаток > 0 Тогда
								//НоваяСтрока.Количество	 = ВыборкаСклады.Остаток;
								//ВыборкаСклады.Следующий();
							//Иначе
							//	НоваяСтрока.Количество	 = Треб;КонецЕсли;
							
							//// пересчитаем строку
			//				
			//				НоваяСтрока.СуммаБезСкидки = НоваяСтрока.Цена * НоваяСтрока.Количество;
			//				НоваяСтрока.СуммаАвтоматическойСкидки = НоваяСтрока.СуммаБезСкидки * НоваяСтрока.ПроцентАвтоматическойСкидки / 100;
			//				НоваяСтрока.Сумма	 =	НоваяСтрока.СуммаБезСкидки - НоваяСтрока.СуммаАвтоматическойСкидки;

			//				СтавкаНДС = КэшируемыеФункции.ПолучитьЧислоСтавкиНДС(НоваяСтрока.СтавкаНДС);
			//				НоваяСтрока.СуммаНДС	= СтавкаНДС * НоваяСтрока.Сумма / (СтавкаНДС + 100);

			//				Треб = Треб - НоваяСтрока.Количество;
			//			Иначе
			//				ВыборкаСклады.Следующий(); КонецЕсли; КонецЦикла; КонецЕсли;
			//	
			//	ТоварыНаСайт.Добавить(Новый Структура("product_guid, quantity, reserve", 
			//							Выборка.Номенклатура, 
			//							Выборка.Количество,  
			//							Истина));
			//Иначе
			//	
			//	ВыборкаСклады = Выборка.Выбрать();
			//	ВыборкаСклады.Следующий();
			//	
			//	// когда в заказе товара больше чем на всех складах
				
	//			Размещен = Ложь;
	//			
	//			НоваяСтрока = Заказ.Товары.Добавить();
	//			
	//			// в заказе оставляем количество товара в заказе, размещение не указываем
	//  	
	//			НоваяСтрока.Номенклатура 	= Выборка.Номенклатура;
	//			НоваяСтрока.Размещение	 	= Справочники.Склады.ПустаяСсылка();
	//			НоваяСтрока.Количество		= Количество;
	//			НоваяСтрока.Цена            = ВыборкаСклады.Цена;
	//			НоваяСтрока.Акция			= ВыборкаСклады.Акция;
	//			НоваяСтрока.СтавкаНДС		= ВыборкаСклады.СтавкаНДС;
	//			НоваяСтрока.ПроцентАвтоматическойСкидки = ВыборкаСклады.ПроцентАвтоматическойСкидки; 

	//			// пересчитаем строку
	//			
	//			НоваяСтрока.СуммаБезСкидки = НоваяСтрока.Цена * НоваяСтрока.Количество;
	//			НоваяСтрока.СуммаАвтоматическойСкидки = НоваяСтрока.СуммаБезСкидки * НоваяСтрока.ПроцентАвтоматическойСкидки / 100;
	//			НоваяСтрока.Сумма	 =	НоваяСтрока.СуммаБезСкидки - НоваяСтрока.СуммаАвтоматическойСкидки;

	//			СтавкаНДС = КэшируемыеФункции.ПолучитьЧислоСтавкиНДС(НоваяСтрока.СтавкаНДС);
	//			НоваяСтрока.СуммаНДС	= СтавкаНДС * НоваяСтрока.Сумма / (СтавкаНДС + 100);

	//			
	//			ТоварыНаСайт.Добавить(Новый Структура("product_guid, quantity, reserve", 
	//									Выборка.Номенклатура, 
	//									?(Выборка.Остаток >= 0, Выборка.Остаток, 0),
	//									Ложь));КонецЕсли;КонецЦикла;
	//							
	//Иначе
	//	Размещен = Ложь; КонецЕсли; 
	//	
	//Возврат ТоварыНаСайт;
	
КонецФункции

Функция СформироватьРезерв(Заказ, Размещен)
	
	ТоварыНаСайт = Новый Массив;
	Заказ.РазмещениеТоваров.Очистить();
	
	//Круглов 12.02.16
	//Остатки блокируем только на основном складе
	//Резервы блокируем по всем складам
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ТоварыНаСкладах");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = Заказ.Товары;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ТоварыВРезерве");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = Заказ.Товары;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
	
	Блокировка.Заблокировать();
	//Круглов 12.02.16
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Таб.Номенклатура,
	|	Таб.Размещение,
	|	Таб.Приоритет,
	|	Таб.Количество,
	|	ЕСТЬNULL(Ост.КоличествоОстаток,0) - ЕСТЬNULL(Рез.КоличествоОстаток,0) Остаток,
	|		ВЫБОР КОГДА (ЕСТЬNULL(Ост.КоличествоОстаток,0) - ЕСТЬNULL(Рез.КоличествоОстаток,0) - Таб.Количество >= 0)
	|		ТОГДА Истина ИНАЧЕ Ложь КОНЕЦ МожноСписать
	|ИЗ
	|	(
	|	 	ВЫБРАТЬ
	|			Раз.Размещение,
	|			Раз.Приоритет + ВЫБОР КОГДА РегРег.регион ЕСТЬ NULL ТОГДА 0 ИНАЧЕ 10 КОНЕЦ Приоритет,
	|			Док.Номенклатура,
	|			Док.Количество
	|		 ИЗ
	|			Документ.ИнтернетЗаказПокупателя.Товары Док
	|			
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			(ВЫБРАТЬ
	|				Скл.Ссылка					Размещение,
	|				ЕстьNULL(Спр.Дилер, ЛОЖЬ)	Дилер,
	|				Скл.РозницаДляВсех 			РазрешеноРознице,
	|				ВЫБОР 	КОГДА ЕстьNULL(Спр.Дилер, ЛОЖЬ)
	|						ТОГДА Скл.ПриоритетСкладаДилер 
	|						ИНАЧЕ Скл.ПриоритетСкладаРозничныйПокупатель
	|				КОНЕЦ 		  Приоритет
	|			ИЗ
	|				Справочник.Склады Скл
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПользователиИнтернет КАК Спр
	|			ПО	Спр.Ссылка = &ПользовательИнтернет
	|
	|			ГДЕ ВЫБОР КОГДА НЕ ЕстьNULL(Спр.Дилер, ЛОЖЬ) ТОГДА Скл.ОтгрузкаРозничнымКлиентам 
							// Если дилер то только со складов дилеров
	|					ИНАЧЕ Скл.ОтгрузкаДилерам КОНЕЦ
	|			) Раз
	|				
	|		ПО ИСТИНА
	|				
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.ПривязкаИнтернетРегионовКСкладам РегРег
	|		ПО
	|			Док.Ссылка.АдресДоставки.Регион = РегРег.Регион И
	|			Раз.Размещение = РегРег.Склад
	|			
	|		ГДЕ 
	|			Док.Ссылка = &ИнтернетЗаказ
					// Если розница тогда только со своего региона или
					// если регион не определен то от всех складов которые в питере
	|			И (
	|				ЕСТЬNULL(Раз.Дилер, ИСТИНА) ИЛИ  
	|				ВЫБОР КОГДА РегРег.Склад ЕСТЬ NULL 
	|					ТОГДА Раз.РазрешеноРознице
	|					ИНАЧЕ РегРег.Склад = Раз.Размещение КОНЕЦ
	|				)
	|	) Таб
	|	
	|ЛЕВОЕ СОЕДИНЕНИЕ	РегистрНакопления.ТоварыНаСкладах.Остатки() Ост
	|ПО 				Таб.Номенклатура = Ост.Номенклатура И 
	|					Таб.Размещение = Ост.Склад
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ	РегистрНакопления.ТоварыВРезерве.Остатки() Рез
	|ПО 				Таб.Номенклатура = Рез.Номенклатура И 
	|					Таб.Размещение = Рез.Размещение
	|
	//|ДЛЯ ИЗМЕНЕНИЯ 
	//|	РегистрНакопления.ТоварыВРезерве.Остатки, 
	//|	РегистрНакопления.ТоварыНаСкладах.Остатки
	|
	|УПОРЯДОЧИТЬ ПО 
	|	МожноСписать Убыв, Приоритет Убыв, Остаток Убыв
	|
	|ИТОГИ 
	|	МАКСИМУМ(Количество), 
	|	СУММА(Остаток)
	|ПО
	|	Таб.Номенклатура
	|");
		
	Запрос.УстановитьПараметр("ПользовательИнтернет", 	Заказ.ПользовательИнтернет);
	Запрос.УстановитьПараметр("ИнтернетЗаказ", 			Заказ.Ссылка);

	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		Пока Выборка.Следующий() Цикл
			
			Количество = Выборка.Количество;
			
			Если Выборка.Остаток - Количество >= 0 Тогда  // если суммарный остаток товара на складах позволяет произвести списание
				
				ВыборкаСклады = Выборка.Выбрать();
				ВыборкаСклады.Следующий();
				
				Если ВыборкаСклады.МожноСписать Тогда           	// если со склада обладающего высшим приоритетом и наличием товара можно списать искомое количество товара - делаем это!
					
					НоваяСтрока = Заказ.РазмещениеТоваров.Добавить();
					
					НоваяСтрока.Номенклатура 	= Выборка.Номенклатура;
				   	НоваяСтрока.Размещение	 	= ВыборкаСклады.Размещение;
					НоваяСтрока.Количество		= Количество;
					
				Иначе                      							// если одним складом не обойтись, раскидываем размещение по разным складам
					
					Треб = Выборка.Количество;
							
					Пока Треб > 0 Цикл                       
						  Если ВыборкаСклады.Остаток > 0 Тогда
							  
							  НоваяСтрока = Заказ.РазмещениеТоваров.Добавить();

							НоваяСтрока.Номенклатура 	= Выборка.Номенклатура;
						   	НоваяСтрока.Размещение	 	= ВыборкаСклады.Размещение;
							
							Если Треб - ВыборкаСклады.Остаток > 0 Тогда
									НоваяСтрока.Количество	 = ВыборкаСклады.Остаток;
									ВыборкаСклады.Следующий();
							Иначе	НоваяСтрока.Количество	 = Треб;КонецЕсли;
							
							// пересчитаем строку
							
							Треб = Треб - НоваяСтрока.Количество;
							
						Иначе
							
							ВыборкаСклады.Следующий(); КонецЕсли; КонецЦикла; КонецЕсли;
				
				ТоварыНаСайт.Добавить(Новый Структура("product_guid, quantity, reserve", 
										Выборка.Номенклатура, 
										Выборка.Количество,  
										Истина));
			Иначе
				
				ВыборкаСклады = Выборка.Выбрать();
				ВыборкаСклады.Следующий();
				
				// когда в заказе товара больше чем на всех складах
				
				Размещен = Ложь;
				
				// в заказе оставляем количество товара в заказе, размещение не указываем
  		
				ТоварыНаСайт.Добавить(Новый Структура("product_guid, quantity, reserve", 
										Выборка.Номенклатура, 
										?(Выборка.Остаток >= 0, Выборка.Остаток, 0),
										Ложь));КонецЕсли; КонецЦикла;
	Иначе
		Размещен = Ложь; КонецЕсли; 
		
	Возврат ТоварыНаСайт;
	
КонецФункции

Функция ПолучитьЗаказы(Параметры, стрОшибки = "") Экспорт
	
	// Получим параметры
	
	Ссылка 	= ?(Параметры.Свойство("Ссылка"), 	Параметры.Ссылка, 	Неопределено);
	Гуиды 	= ?(Параметры.Свойство("orders"), 	Параметры.orders, 	Неопределено);
	
	массивСсылок = Новый Массив;
	
	Если НЕ Ссылка = Неопределено Тогда
		массивСсылок.Добавить(Ссылка);
	КонецЕсли;
	Если ЗначениеЗаполнено(Гуиды) Тогда
		Если ТипЗнч(Гуиды) = Тип("Массив") Тогда
			Для каждого гуид Из Гуиды Цикл
				массивСсылок.Добавить(HTTP.ПолучитьОбъектПоСсылке(Документы.ИнтернетЗаказПокупателя, гуид, стрОшибки));
			КонецЦикла;
		ИначеЕсли ТипЗнч(Гуиды) = Тип("Строка") Тогда
			массивСсылок.Добавить(HTTP.ПолучитьОбъектПоСсылке(Документы.ИнтернетЗаказПокупателя, Гуиды, стрОшибки));
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Зак.Ссылка 				КАК guid,
	|	Зак.Номер 				КАК number,
	|	Зак.Дата 				КАК date,
	|	Зак.Сумма		 		КАК total,
	|	Зак.Комментарий 		КАК comment,
	|	Зак.ЭтоЧерновик 		КАК ЭтоЧерновик,
	|	Зак.АдресДоставки 		КАК delivery_address_guid,
	|	Зак.ВариантДоставки 	КАК delivery_variant,
	|	Зак.СкладСамовывоза		КАК warehouse_guid,
	|	Зак.ВидОплаты 			КАК payment_variant,
	|	Зак.СуммаДоставки 		КАК delivery_cost,
	|	Состояния.Состояние		КАК status,
	|	Зак.ПользовательИнтернет КАК user_guid,
	|	ЛимитыОстатки.СуммаОстаток limit,
	|	Зак.МестоположениеСтр	КАК current_location,
	|	БП.Ссылка				КАК СсылкаБП
	|ИЗ
	|	Документ.ИнтернетЗаказПокупателя КАК Зак
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.СостоянияЗаказов.СрезПоследних КАК Состояния
	|ПО
	|	Зак.Ссылка = Состояния.Заказ
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	БизнесПроцесс.ИнтернетЗаявка КАК БП
	|ПО
	|	Зак.Ссылка = БП.Заказ
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.Лимиты.Остатки КАК ЛимитыОстатки
	|ПО
	|	ЛимитыОстатки.Инициатор = Зак.ПользовательИнтернет.ФизЛицо
	|ГДЕ
	|	НЕ Зак.ПометкаУдаления
	|	И Зак.СайтИсточник = Значение(Перечисление.Сайты.licota)
	|" + ?(ЗначениеЗаполнено(массивСсылок), "И Зак.Ссылка В (&массивСсылок)", "") + "
	|;
	
	// Товары
	|ВЫБРАТЬ
	|	РегЗак.ИнтернетЗаказ,
	|	РегЗак.Номенклатура,
	|	РегЗак.Упаковка,
	|	РегЗак.Размещение,
	|	РегЗак.ПроцентРучнойСкидки,
	|	РегЗак.Цена,
	|	РегЗак.СуммаОстаток,
	|	РегЗак.ПроцентАвтоматическойСкидки,
	|	РегЗак.КоличествоОстаток
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	РегистрНакопления.ИнтернетЗаказПокупателя.Остатки(,
	|		ИнтернетЗаказ.СайтИсточник = Значение(Перечисление.Сайты.licota)
	|" + ?(ЗначениеЗаполнено(массивСсылок), " И ИнтернетЗаказ В (&массивСсылок)", "") + "
	|	) РегЗак
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РегЗак.ИнтернетЗаказ,
	|	РегЗак.Номенклатура,
	|	РегЗак.Упаковка,
	|	РегЗак.Размещение,
	|	РегЗак.ПроцентРучнойСкидки,
	|	РегЗак.Цена,
	|	РегЗак.СуммаРасход,
	|	РегЗак.ПроцентАвтоматическойСкидки,
	|	РегЗак.КоличествоРасход
	|ИЗ
	|	РегистрНакопления.ИнтернетЗаказПокупателя.ОстаткиИОбороты(,,РЕГИСТРАТОР,,
	|		ИнтернетЗаказ.СайтИсточник = Значение(Перечисление.Сайты.licota)
	|" + ?(ЗначениеЗаполнено(массивСсылок), " И ИнтернетЗаказ В (&массивСсылок)", "") + "
	|	) РегЗак
	|ГДЕ
	|	ВЫБОР 	КОГДА РегЗак.ИнтернетЗаказ.Склад.ПередачаТовараМВЗ ИЛИ НЕ РегЗак.ИнтернетЗаказ.МВЗ = Значение(Справочник.МВЗ.ПустаяСсылка) 
	|			ТОГДА РегЗак.Регистратор ССЫЛКА Документ.ПередачаТовара
	|			ИНАЧЕ РегЗак.Регистратор ССЫЛКА Документ.РеализацияТоваров 
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Док.Ссылка,
	|	Док.Номенклатура,
	|	Док.Упаковка,
	|	Док.Размещение,
	|	Док.ПроцентРучнойСкидки,
	|	Док.Цена,
	|	Док.Сумма,
	|	Док.ПроцентАвтоматическойСкидки,
	|	Док.Количество
	|ИЗ
	|	Документ.ИнтернетЗаказПокупателя.Товары КАК Док
	|ГДЕ
	|	НЕ Док.Ссылка.Проведен
	|" + ?(ЗначениеЗаполнено(массивСсылок), " И Док.Ссылка В (&массивСсылок)", "") + "
	|;
	
	|ВЫБРАТЬ
	|	РегЗак.ИнтернетЗаказ 								КАК Заказ,
	|	РегЗак.Номенклатура 								КАК product_guid,
	|	РегЗак.Цена - ЕстьNULL(Дост.Доставка, 0)			КАК base_price,
	|	РегЗак.Цена - ЕстьNULL(Дост.Доставка, 0) 			КАК price,
	|	РегЗак.СуммаОстаток - ЕстьNULL(Дост.Доставка, 0)	КАК total,
	|	РегЗак.ПроцентАвтоматическойСкидки 					КАК discount,
	|	РегЗак.КоличествоОстаток							КАК quantity,
	|	ИСТИНА												КАК reserve
	|ИЗ
	|	ТаблицаТоваров КАК РегЗак
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(ВЫБРАТЬ * ИЗ Документ.ИнтернетЗаказПокупателя.Доставка 
	|		ГДЕ Ссылка.СайтИсточник = Значение(Перечисление.Сайты.licota)
	|" + ?(ЗначениеЗаполнено(массивСсылок), " И Ссылка В (&массивСсылок)", "") + "
	|	) Дост 
	|ПО 
	|	Дост.Ссылка = РегЗак.ИнтернетЗаказ
	|	И Дост.Номенклатура = РегЗак.Номенклатура 
	|	И Дост.Упаковка = РегЗак.Упаковка 
	|	И Дост.Размещение  = РегЗак.Размещение 
	|	И Дост.Цена = РегЗак.Цена 
	|	И Дост.ПроцентРучнойСкидки = РегЗак.ПроцентРучнойСкидки 
	|	И Дост.ПроцентАвтоматическойСкидки = РегЗак.ПроцентАвтоматическойСкидки
	|ГДЕ
	|	РегЗак.Номенклатура.ВыгружатьНаСайт И РегЗак.Номенклатура.Родитель.ВыгружатьНаСайт
	|;
	
	|");
	
	Если ЗначениеЗаполнено(массивСсылок) Тогда 
		Запрос.УстановитьПараметр("массивСсылок", массивСсылок);
	КонецЕсли;
	
	Пакеты 			= Запрос.ВыполнитьПакет();
	Таблица			= Пакеты[0].Выгрузить(); ПослИнд = Таблица.Количество() - 1;
	Товары			= Пакеты[2].Выгрузить(); ПоляТоваров = ПолучитьПоляДляСтруктуры("Заказ", Товары.Колонки);
	
	УстановитьИндексыТаблицам("Заказ", Товары);
	
	массивЗаказов	= Новый Массив;
	Для Инд = 0 По ПослИнд Цикл
		лЗаказ = КонвертацияТипов.ПолучитьСтруктуруИзСТрокиТаблицыЗначений(Таблица, Инд);
		
		Если лЗаказ.ЭтоЧерновик Тогда
			лЗаказ.status = 0;
		Иначе
			лЗаказ.status = HTTP.НомерСтатусаЗаказа(лЗаказ.status);
		КонецЕсли;
		
		лЗаказ.Удалить("ЭтоЧерновик");
		
		Отбор = Новый Структура("Заказ", лЗаказ.guid);
		лЗаказ.Вставить("line_items", ПолучитьМассивЗначенийИзТаблицы(Товары, Отбор, ПоляТоваров));
		
		лЗаказ.total = 0;
		Для каждого item Из лЗаказ.line_items Цикл
			лЗаказ.total = лЗаказ.total + item.total;
		КонецЦикла;
		
		// определим состояние товаров
		СостоянияТоваров = Заказы.ПолучитьСостояниеТоваров(лЗаказ.СсылкаБП,,,Ложь);
		СостоянияТоваров.Индексы.Добавить("Номенклатура");
		
		Для каждого line Из лЗаказ.line_items Цикл
			текСтрока = СостоянияТоваров.Найти(line.product_guid, "Номенклатура");
			статусLine = Перечисления.СостояниеСборкиЗаказа.НеСобрано;
			Если НЕ текСтрока = Неопределено Тогда
				статусLine = текСтрока.Состояние;
			КонецЕсли;
			Если статусLine = Перечисления.СостояниеСборкиЗаказа.НеСобрано Тогда
				статусОтгрузки = 0;
			ИначеЕсли статусLine = Перечисления.СостояниеСборкиЗаказа.ОжидаетПеремещения Тогда
				статусОтгрузки = 1;
			ИначеЕсли статусLine = Перечисления.СостояниеСборкиЗаказа.ОжидаетПоступления Тогда
				статусОтгрузки = 2;
			ИначеЕсли статусLine = Перечисления.СостояниеСборкиЗаказа.ОтменаСборки Тогда
				статусОтгрузки = 5;
			ИначеЕсли статусLine = Перечисления.СостояниеСборкиЗаказа.Перемещается Тогда
				статусОтгрузки = 4;
			ИначеЕсли 		статусLine = Перечисления.СостояниеСборкиЗаказа.Отгружен
			 			ИЛИ статусLine = Перечисления.СостояниеСборкиЗаказа.Отправлен
			 			ИЛИ статусLine = Перечисления.СостояниеСборкиЗаказа.Доставлен Тогда
				статусОтгрузки = 3;
			ИначеЕсли статусLine = Перечисления.СостояниеСборкиЗаказа.Собирается Тогда
				статусОтгрузки = 6;
			ИначеЕсли статусLine = Перечисления.СостояниеСборкиЗаказа.Собрано Тогда
				статусОтгрузки = 7;
			КонецЕсли;
			
			line.Вставить("status", статусОтгрузки);
		КонецЦикла;
		
		лЗаказ.Удалить("СсылкаБП");
		массивЗаказов.Добавить(лЗаказ);
	КонецЦикла;
	
	Возврат ЗначениеВозврата(массивЗаказов);
	
КонецФункции // ПолучитьЗаказы
#КонецОбласти

#Область Товары

Функция ПолучитьМассивКатегорийLicota()
	Запрос = Новый Запрос;
	Запрос.Текст = "Выбрать Различные 
	|	Ном.Ссылка,
	|	Ном.Родитель
	|ИЗ
	|	Справочник.Номенклатура КАК Ном
	|Где ЭтоГРуппа";
	Группы = запрос.Выполнить().Выгрузить();
	Группы.Индексы.Добавить("Ссылка");
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Ном.Родитель КАК Ссылка,
	|	Ном.Родитель.Родитель КАК Родитель
	|ИЗ
	|	Справочник.Номенклатура КАК Ном
	|ГДЕ
	|	Производитель = &КлючСайта
	|	И ВыгружатьНаСайт
	|	И Родитель.ВыгружатьНаСайт
	|	И НЕ Родитель = Значение(Справочник.Номенклатура.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Ном.Родитель КАК Ссылка,
	|	Ном.Родитель.Родитель КАК Родитель
	|ИЗ
	|	Справочник.Номенклатура.ДополнительныеРодители КАК Ном
	|ГДЕ
	|	Ссылка.Производитель = &КлючСайта
	|	И Ссылка.ВыгружатьНаСайт
	|	И Родитель.ВыгружатьНаСайт
	|	И НЕ Родитель = Значение(Справочник.Номенклатура.ПустаяСсылка)
	|";
	
	КлючСайтаЛикота = КэшируемыеФункции.ПолучитьКлючСайтаЛикота();
	Запрос.УстановитьПараметр("КлючСайта", КлючСайтаЛикота);
 	
	Выборка = Запрос.Выполнить().Выбрать();
	                         
	РодителиЛикота = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		РодителиЛикота.Вставить(Выборка.Ссылка, Истина);
		Если РодителиЛикота.Получить(Выборка.Родитель) = Неопределено Тогда
			Очередь = Новый Соответствие;
			Очередь.Вставить(Выборка.Родитель);
			Пока Очередь.Количество() > 0 Цикл
				Для каждого киз Из Очередь Цикл
					Если НЕ киз.Ключ.Пустая() И РодителиЛикота.Получить(киз.Ключ) = Неопределено Тогда
						РодителиЛикота.Вставить(киз.Ключ, Истина);
						//Очередь.Вставить(киз.Ключ.Родитель);
						Очередь.Вставить(Группы.Найти(киз.Ключ, "Ссылка").Родитель);
					КонецЕсли;
					Очередь.Удалить(киз.Ключ);
					Прервать;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	массивЛикота = Новый Массив;
	Для каждого киз Из РодителиЛикота Цикл
		массивЛикота.Добавить(киз.Ключ);
	КонецЦикла;
	
	Возврат массивЛикота;
КонецФункции // ПолучитьМассивКатегорийLicota()
Функция ПолучитьКатегории(Параметры, стрОшибки = "") Экспорт
	
	// Возвращает массив категорий, если в массив состоит из 1 элемента тогда возвращается элемент массиа (структура)
	
	// Получим параметры
	
	КлючПроизводитель = Константы.КлючСайтаЛикота.Получить();
	
	СсылкаКатегории 		= ?(Параметры.Свойство("Ссылка"), 			Параметры.Ссылка, 			Неопределено);
	guid_category 			= ?(Параметры.Свойство("guid_category"), 	Параметры.guid_category, 	Неопределено);
	СсылкаРодитель			= Неопределено;
	БратьДопТаблицыОтсюда 	= ?(Параметры.Свойство("БратьДопТаблицыОтсюда"), Параметры.БратьДопТаблицыОтсюда, Неопределено);
	
	ДопФильтр = "Ссылка В (&МассивLicota)";
	Если guid_category = Неопределено Тогда
		ДопФильтр = ДопФильтр + " И ВыгружатьНаСайт";
	КонецЕсли;
	
	МассивСсылок = Новый Массив;
	
	Если Параметры.Свойство("массивСсылок") Тогда
		массивСсылок = Параметры.массивСсылок;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(guid_category) Тогда
		
		Если ТипЗнч(guid_category) = Тип("Массив") Тогда
			Для каждого guidТовара Из guid_category Цикл
				массивСсылок.Добавить(HTTP.ПолучитьОбъектПоСсылке(Справочники.Номенклатура, guidТовара, стрОшибки));
			КонецЦикла;
		Иначе
			СсылкаКатегории = HTTP.ПолучитьОбъектПоСсылке(Справочники.Номенклатура, guid_category, стрОшибки); Если СсылкаКатегории = Неопределено Тогда Возврат "" КонецЕсли;
		
			Если Не СсылкаКатегории.ЭтоГруппа Тогда
				стрОшибки = "Гуид родительской категории относится к товару.
				|Гуид: " + guid_category + "
				|Товар: " + Строка(СсылкаРодитель); Возврат Неопределено; 
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
	Если СсылкаКатегории = Неопределено И НЕ ЗначениеЗаполнено(МассивСсылок) Тогда
	
		ДопФильтр = ?(ПустаяСтрока(ДопФильтр), "", ДопФильтр + " И ") + "ЭтоГруппа И НЕ ПометкаУдаления И ВыгружатьНаСайт";
		ДопФильтр = ДопФильтр + ?(ЗначениеЗаполнено(СсылкаРодитель)," 	И Родитель = &Родитель ", "");
		
	ИначеЕсли ЗначениеЗаполнено(МассивСсылок) Тогда
		ДопФильтр = ?(ПустаяСтрока(ДопФильтр), "", ДопФильтр + " И ") + "Ссылка В (&МассивСсылок)";
	Иначе
		ДопФильтр = ?(ПустаяСтрока(ДопФильтр), "", ДопФильтр + " И ") + "Ссылка = &Ссылка" КонецЕсли;

	текстПустышка = "ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка ИЗ Справочник.Номенклатура";
	
#Область Текст_запроса
	
	Запрос = Новый Запрос("
	
	// Категории
	
	|ВЫБРАТЬ
	|	Спр.Ссылка				guid,
	|	Спр.views_count, 
	|   Истина                  enabled,
	|	ВЫБОР КОГДА Спр.sorting_weight = 0 ТОГДА Спр.Код ИНАЧЕ Спр.sorting_weight КОНЕЦ		sorting_weight,
	|	Спр.Наименование 		title,
	|	Спр.title		 		title_seo,
	|	Спр.h1, 
	|	Спр.alies				alias,
	|	Спр.meta_keywords,
	|	Спр.meta_description,
	|	Спр.Описание 			description,
	|	ВЫБОР КОГДА Спр.link_title = """" ТОГДА Спр.Наименование ИНАЧЕ Спр.link_title КОНЕЦ link_title,
	|	ВЫБОР КОГДА Спр.link_text = """" ТОГДА Спр.Наименование ИНАЧЕ Спр.link_text КОНЕЦ link_text,
	|	Неопределено			image,
	|	ВЫБОР КОГДА Родитель.ВыгружатьНаСайт ТОГДА Родитель ИНАЧЕ Null КОНЕЦ КАК parent,
	|	ВЫБОР КОГДА Родитель = Значение(Справочник.Номенклатура.ПустаяСсылка) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК root,
	|	Неопределено			additional_parents,
	|	Неопределено			properties,
	|	ВЫБОР КОГДА view_type = 0 ТОГДА 1 ИНАЧЕ view_type - 1 КОНЕЦ КАК view_type,
	|
	|	Спр.ПометкаУдаления,
	|	Спр.ВыгружатьНаСайт,
	|	Спр.ОтображатьВместеСТоварами	show_products
	|ИЗ 		
	|	Справочник.Номенклатура КАК Спр
	|ГДЕ " + ДопФильтр + "
	|;
	
	// Доп свойства
	
	|" + ?(БратьДопТаблицыОтсюда = Неопределено, "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура 	Категория,
	|	Свойство 		guid
	|ИЗ 		
	|	РегистрСведений.ЗначенияДополнительныхРеквизитовНоменклатуры 
	|ГДЕ
	|	Номенклатура В(ВЫБРАТЬ Ссылка ИЗ Справочник.Номенклатура ГДЕ " + ДопФильтр + ")
	| И НЕ Свойство.ПометкаУдаления
	|",текстПустышка) + ";
	
	// Доп родители
	
	|ВЫБРАТЬ
	|	Ссылка 					Категория,
	|	Родитель				category_guid,
	|	Родитель.Наименование 	link_title,
	|	Родитель.Описание		link_text
	|ИЗ
	|	Справочник.Номенклатура.ДополнительныеРодители
	|ГДЕ
	|	Ссылка В(ВЫБРАТЬ Ссылка ИЗ Справочник.Номенклатура ГДЕ " + ДопФильтр + ")
	|	И Родитель.ВыгружатьНаСайт
	|	И Родитель В (&МассивLicota)
	|;
	
	// Картинки
	
	|ВЫБРАТЬ
	|	Ссылка image, Владелец Категория
	|ИЗ
	|	Справочник.КартинкиНоменклатуры
	|ГДЕ
	|	Владелец В(ВЫБРАТЬ Ссылка ИЗ Справочник.Номенклатура ГДЕ " + ДопФильтр + ")
	|	И НЕ ПометкаУдаления
	|;
	|");
	
	Запрос.УстановитьПараметр("МассивLicota", ПолучитьМассивКатегорийLicota());
	
	Если ЗначениеЗаполнено(guid_category) Тогда 
		Запрос.УстановитьПараметр("Родитель", СсылкаРодитель) КонецЕсли;
	
	Если СсылкаКатегории <> Неопределено Тогда
		Запрос.УстановитьПараметр("Ссылка", СсылкаКатегории) КонецЕсли;
	
	Если ЗначениеЗаполнено(МассивСсылок) Тогда
		Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок) КонецЕсли;
	
#КонецОбласти
	
	Пакеты 		= Запрос.ВыполнитьПакет();
	Категории 	= Новый Массив;
	Таблица		= Пакеты[0].Выгрузить(); ПослИнд = Таблица.Количество() - 1;
	Свойства	= Пакеты[1].Выгрузить(); ПоляСвойств = ПолучитьПоляДляСтруктуры("Категория", Свойства.Колонки);
	Родители	= Пакеты[2].Выгрузить(); ПоляРодителей = ПолучитьПоляДляСтруктуры("Категория", Родители.Колонки);
	тКартинки	= Пакеты[3].Выгрузить();
	
	Если БратьДопТаблицыОтсюда = Неопределено Тогда
		УстановитьИндексыТаблицам("Категория", Свойства, 	Родители, 	тКартинки) Иначе
		УстановитьИндексыТаблицам("Категория", 				Родители, 	тКартинки) КонецЕсли;
	
	Для Инд = 0 По ПослИнд Цикл
		
		// Получим категорию
		
		структураКатегория 	= КонвертацияТипов.ПолучитьСтруктуруИзСТрокиТаблицыЗначений(Таблица, Инд);
		Отбор				= Новый Структура("Категория", структураКатегория.guid);
		
		// Обработаем sorting_weight
		Если структураКатегория.Свойство("sorting_weight") Тогда
			структураКатегория.sorting_weight = СтрЗаменить(структураКатегория.sorting_weight, " ", "");
		КонецЕсли;
		
		// Добавим родителей
		
		структураКатегория.additional_parents = ПолучитьМассивЗначенийИзТаблицы(Родители, Отбор, ПоляРодителей);
		
		// Добавим свойства
		
		структураКатегория.properties = ?(БратьДопТаблицыОтсюда = Неопределено,
						ПолучитьМассивЗначенийИзТаблицы(Свойства, Отбор, ПоляСвойств),
						ПолучитьМассивСвойствПоФорматAPI(БратьДопТаблицыОтсюда.Свойства)); 
		
		// Добавим картинку
		
		СтрокаКартинки = тКартинки.Найти(структураКатегория.guid, "Категория");
		Если СтрокаКартинки <> Неопределено Тогда
			структураКатегория.image = XMLСтрока(СтрокаКартинки.image) КонецЕсли;
		
		// Запомним
		
		Категории.Добавить(структураКатегория); 
	КонецЦикла;
	
	Возврат ЗначениеВозврата(Категории);
	
КонецФункции

Функция ПолучитьТовары(Параметры, стрОшибки = "") Экспорт
	
	// Возвращает массив товаров, если в параметре указан конкретный товар тогда возвращает структуру полей товара
	
	// Получим параметры (можно указать области массивСсылок, Области)
	
	СсылкаТовар 			= ?(Параметры.Свойство("Ссылка"), Параметры.Ссылка, Неопределено);
	guid_category 			= ?(Параметры.Свойство("guid_category"), Параметры.guid_category, Неопределено);
	ГуидыТоваров			= ?(Параметры.Свойство("ГуидыТоваров"), Параметры.ГуидыТоваров, Неопределено);
	НомерНачала 			= ?(Параметры.Свойство("НомерНачала"), Параметры.НомерНачала, Неопределено);
	НомерОкончания 			= ?(Параметры.Свойство("НомерОкончания"), Параметры.НомерОкончания, Неопределено);
	
	БратьДопТаблицыОтсюда 	= ?(Параметры.Свойство("БратьДопТаблицыОтсюда"), Параметры.БратьДопТаблицыОтсюда, Неопределено);
	
	Если СсылкаТовар = Неопределено Тогда
		текВремя = ТекущаяДата();
	
		ЗаписьЖурналаРегистрации("HTTP.licota.Трассировка.api2.get_products",УровеньЖурналаРегистрации.Информация,,,"Получение метода:
		|cat_guid = " + guid_category + "
		|begin_id = " + НомерНачала + "
		|end_id = " + НомерОкончания + "
		|");
	КонецЕсли;
	
	// Получим родителя
	
	Если ЗначениеЗаполнено(guid_category) Тогда
		
		СсылкаРодитель = HTTP.ПолучитьОбъектПоСсылке(Справочники.Номенклатура, guid_category, стрОшибки); Если СсылкаРодитель = Неопределено Тогда Возврат "" КонецЕсли;
		
		Если Не СсылкаРодитель.ЭтоГруппа Тогда
			стрОшибки = "Гуид родительской категории относится к товару.
			|Гуид: " + guid_category + "
			|Товар: " + Строка(СсылкаРодитель); Возврат Неопределено; КонецЕсли; КонецЕсли;

	массивСсылок = Неопределено;
	
	Если Параметры.Свойство("массивСсылок") Тогда
		массивСсылок = Параметры.массивСсылок;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ГуидыТоваров) Тогда
		массивСсылок = Новый Массив;
	
		Если ТипЗнч(ГуидыТоваров) = Тип("Массив") Тогда
			Для каждого guidТовара Из ГуидыТоваров Цикл
				массивСсылок.Добавить(HTTP.ПолучитьОбъектПоСсылке(Справочники.Номенклатура, guidТовара, стрОшибки));
			КонецЦикла;
		ИначеЕсли ТипЗнч(ГуидыТоваров) = Тип("Строка") Тогда
			массивСсылок.Добавить(HTTP.ПолучитьОбъектПоСсылке(Справочники.Номенклатура, ГуидыТоваров, стрОшибки));
		КонецЕсли;
		
	КонецЕсли;
	
	Если СсылкаТовар = Неопределено Тогда
	
		ДопФильтр = "НЕ ЭтоГруппа И НЕ ПометкаУдаления И ВыгружатьНаСайт И Производитель = &КлючСайта";
		ДопФильтр = ДопФильтр + ?(ЗначениеЗаполнено(СсылкаРодитель)," 	И Родитель = &Родитель ", "");
		ДопФильтр = ДопФильтр + ?(ЗначениеЗаполнено(НомерНачала), " 	И ПорядковыйНомер >= " + Формат(НомерНачала,"ЧГ="), "");
		ДопФильтр = ДопФильтр + ?(ЗначениеЗаполнено(НомерОкончания), " 	И ПорядковыйНомер <= " + Формат(НомерОкончания,"ЧГ="), "");
		ДопФильтр = ДопФильтр + ?(ЗначениеЗаполнено(массивСсылок)," 	И Ссылка В (&массивСсылок) ", "");
		
	Иначе
		
		ДопФильтр = "Ссылка = &Ссылка И НЕ ПометкаУдаления И ВыгружатьНаСайт И Производитель = &КлючСайта" 
	КонецЕсли;
	
	текстПустышка = ";ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка ИЗ СписокТоваров";
	
	Области = "Поля, Свойства, Родители, Картинки, Остатки, Цены, Меню, Комплектация, КраткоеОписание, Инструкции, ВидеоОбзоры, Сопутствующие, Аналоги";
	ид = Новый Структура(Области); сч = 3;
	
	Области = ?(Параметры.Свойство("Области"), Параметры.Области, Новый Структура(Области));
	
#Область Текст_запроса

	Запрос = Новый Запрос("
	
	// Список товаров
	
	|ВЫБРАТЬ 	Ссылка
	|ПОМЕСТИТЬ 	СписокТоваров
	|ИЗ 		Справочник.Номенклатура КАК Спр
	|ГДЕ " + ДопФильтр + "
	|;
	
	//
	
	|ВЫБРАТЬ
	|	Ссылка 			Товар,
	|	Родитель		Первый
	|ПОМЕСТИТЬ
	|	тДополнительныеРодители
	|ИЗ
	|	Справочник.Номенклатура.ДополнительныеРодители КАК Табл
	|ГДЕ
	|	Ссылка В(ВЫБРАТЬ Ссылка ИЗ СписокТоваров)
	|	И Родитель.ВыгружатьНаСайт
	|	И НомерСтроки = 1
	|;
	
	//
	
	|ВЫБРАТЬ
	|	Спр.Номенклатура Товар
	|ПОМЕСТИТЬ
	|	Новинки
	|ИЗ
	|	Справочник.Новинки.Товары КАК Спр
	|ГДЕ
	|	Спр.Готовность И
	|	&ТекущаяДата <= Спр.ПериодДействия
	|СГРУППИРОВАТЬ ПО
	|	Спр.Номенклатура
	|;
	
	//
	
	|ВЫБРАТЬ
	|	Спр.Ссылка							guid
	|" + ?(Области.свойство("Комплектация") ИЛИ Области.свойство("Поля"), "
	|	,Спр.Комплектация 					complectation_string
	|", "") + "
	
	|" + ?(Области.свойство("Поля"), "
	|	,ПорядковыйНомер					id_number,
	|	Спр.Артикул							sku, 
	|	ВЫБОР КОГДА Спр.ТопТовар ТОГДА 
	|		ВЫБОР КОГДА Спр.sorting_weight = 0
	|		ТОГДА ЕСТЬNULL(Спр.Ранг, 99999)
	|		ИНАЧЕ Спр.sorting_weight КОНЕЦ
	|	ИНАЧЕ 
	|		ВЫБОР КОГДА Спр.sorting_weight = 0 ТОГДА
	|			ЕСТЬNULL(Спр.Производитель.Ранг, 99999)
	|			ИНАЧЕ Спр.sorting_weight КОНЕЦ
	|	КОНЕЦ КАК sorting_weight,
	|	Спр.h1, 
	|	Спр.Описание 						description,
	|	Спр.meta_description,
	|	Спр.meta_keywords,
	|	ВЫБОР КОГДА Спр.НаименованиеИнтернет = """" ТОГДА Спр.Наименование ИНАЧЕ Спр.НаименованиеИнтернет КОНЕЦ	name,
	|	Спр.title 							title,
	|	Спр.alies							alias,
	//|	Спр.ОписаниеКороткое				short_description,
	//|	Спр.МнениеЭксперта					expert,
	|	ОбратитьВнимание                    warning,
	|	Особенности                         application,
	|	ЕдиницаИзмерения.Наименование 		in_stock_units,
	|	ДатаОжидания						date_expected,
	|	ВЫБОР КОГДА Родитель.ВыгружатьНаСайт ТОГДА Родитель ИНАЧЕ тДополнительныеРодители.Первый КОНЕЦ КАК category,
	|	Производитель						manufacturer,
	|	Вес									weight,
	|	Объем								geometry,
	|	ЦенГр.ЦеноваяГруппа					price_group,
	|	ЦенГр.ЦеноваяГруппа.Наименование	price_group_title,
	|	Спр.Замена							new_product,
	|	Гарантия.Наименование				Гарантия_Наименование,
	|	Гарантия.Текст						Гарантия_Текст,
	|	Гарантия.Картинка					Гарантия_Картинка,
	|	ВЫБОР КОГДА Новинки.Товар Есть NULL ТОГДА ""false"" ИНАЧЕ ""true"" КОНЕЦ КАК is_new,
	|
	|	Спр.ПометкаУдаления,
	|	Спр.ВыгружатьНаСайт					enabled,
	|	Спр.ВыгружатьНаСайт                 ВыгружатьНаСайт
	|", "") + "
	
	|ИЗ 		
	|	Справочник.Номенклатура КАК Спр
	
	//|" + ?(Области.свойство("Поля"), "
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	тДополнительныеРодители КАК тДополнительныеРодители
	|ПО
	|	Спр.Ссылка = тДополнительныеРодители.Товар
	
	|" + ?(Области.свойство("Поля"), "
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ЦеноваяГруппаТовара ЦенГр
	|ПО
	|	Спр.Ссылка = ЦенГр.Номенклатура
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Новинки Новинки
	|ПО
	|	Спр.Ссылка = Новинки.Товар
	|", "") + "
	
	|ГДЕ НЕ ВЫБОР КОГДА Родитель.ВыгружатьНаСайт ТОГДА Родитель ИНАЧЕ тДополнительныеРодители.Первый КОНЕЦ ЕСТЬ NULL И " + ДопФильтр + "
	|"); ид.Поля = сч; сч = сч + 1;
	
	// Доп свойства
	
	Если Области.Свойство("Свойства") Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|" + ?(БратьДопТаблицыОтсюда = Неопределено, "
		|;
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Номенклатура		 	Товар,
		|	Свойство				guid,
		|	Представление(Значение)	value,
		|	" + API2.ПолучитьТекстПредставленияВариантаСвойства("Свойство.") + ",
		|	Представление(Свойство.ЕдиницаИзмерения)		units
		|ИЗ 		
		|	РегистрСведений.ЗначенияДополнительныхРеквизитовНоменклатуры 
		|ГДЕ
		|	Номенклатура В(ВЫБРАТЬ Ссылка ИЗ СписокТоваров)
		| И НЕ Свойство.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Ссылка 					Товар,
		|	""weight""				guid,
		|	Ссылка.Вес				value,
		|	""""					variant,
		|	""кг""					units
		|ИЗ
		|	СписокТоваров
		|", текстПустышка);
		
		ид.Свойства = сч; сч = сч + 1;
	КонецЕсли;
	
	// Комплектация
	
	Если Области.Свойство("Комплектация") Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|;
		|ВЫБРАТЬ
		|	Табл.Ссылка		 			Товар,
		|	ВЫБОР КОГДА Табл.Товар ССЫЛКА Справочник.Номенклатура И НЕ Табл.Товар.ЭтоГруппа ТОГДА Табл.Товар ИНАЧЕ Неопределено КОНЕЦ product_guid,
		|	ВЫБОР КОГДА Табл.Товар ССЫЛКА Справочник.Номенклатура И Табл.Товар.ЭтоГруппа ТОГДА Табл.Товар ИНАЧЕ Неопределено КОНЕЦ product_category_guid,
		|	ВЫБОР КОГДА Табл.Товар ССЫЛКА Справочник.Номенклатура ТОГДА Неопределено ИНАЧЕ Табл.Товар КОНЕЦ	text,
		|	Табл.Значение		value,
		|	Табл.Количество		count
		|ИЗ 		
		|	Справочник.Номенклатура.ТаблицаКомплектации КАК Табл
		|ГДЕ
		|	Ссылка В(ВЫБРАТЬ Ссылка ИЗ СписокТоваров)
		|	И ВЫБОР КОГДА Табл.Товар ССЫЛКА Справочник.Номенклатура И НЕ Табл.Товар.Родитель = Значение(Справочник.Номенклатура.ПустаяСсылка) ТОГДА Табл.Товар.ВыгружатьНаСайт И Табл.Товар.Родитель.ВыгружатьНаСайт ИНАЧЕ ИСТИНА КОНЕЦ
		|	И ВЫБОР КОГДА Табл.Товар ССЫЛКА Справочник.Номенклатура И Табл.Товар.Родитель = Значение(Справочник.Номенклатура.ПустаяСсылка) ТОГДА Табл.Товар.ВыгружатьНаСайт ИНАЧЕ ИСТИНА КОНЕЦ
		|УПОРЯДОЧИТЬ ПО
		|	Табл.НомерСтроки
		|";
		
		ид.Комплектация = сч; сч = сч + 1;
	КонецЕсли;
	
	// Краткое Описание
	
	Если Области.Свойство("КраткоеОписание") Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|;
		|ВЫБРАТЬ
		|	Табл.Ссылка		 		Товар,
		|	Табл.НомерСтроки 		sorting_weight,
		|	Табл.Картинка			image,
		|	Табл.Описание.Описание	text
		|ИЗ 		
		|	Справочник.Номенклатура.КороткоеОписание КАК Табл
		|ГДЕ
		|	Ссылка В(ВЫБРАТЬ Ссылка ИЗ СписокТоваров)
		|УПОРЯДОЧИТЬ ПО
		|	Табл.НомерСтроки
		|";
		
		ид.КраткоеОписание = сч; сч = сч + 1;
	КонецЕсли;
	
	// Инструкции
	
	Если Области.Свойство("Инструкции") Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|;
		|ВЫБРАТЬ
		|	Табл.Ссылка		 				Товар,
		|	Табл.НомерСтроки 				sorting_weight,
		|	Табл.Инструкция					file,
		|	Табл.Инструкция.Наименование	name
		|ИЗ 		
		|	Справочник.Номенклатура.Инструкции КАК Табл
		|ГДЕ
		|	Ссылка В(ВЫБРАТЬ Ссылка ИЗ СписокТоваров)
		|УПОРЯДОЧИТЬ ПО
		|	Табл.НомерСтроки
		|";
		
		ид.Инструкции = сч; сч = сч + 1;
	КонецЕсли;
	
	// ВидеоОбзоры
	
	Если Области.Свойство("ВидеоОбзоры") Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|;
		|ВЫБРАТЬ
		|	Табл.Ссылка		 				Товар,
		|	Табл.НомерСтроки 				sorting_weight,
		|	Табл.СсылкаНаВидео.Наименование	title,
		|	Табл.СсылкаНаВидео.URL			link,
		|	Табл.СсылкаНаВидео.iframe		iframe,
		|	Табл.СсылкаНаВидео.Описание		text
		|ИЗ 		
		|	Справочник.Номенклатура.ВидеоОбзоры КАК Табл
		|ГДЕ
		|	Ссылка В(ВЫБРАТЬ Ссылка ИЗ СписокТоваров)
		|УПОРЯДОЧИТЬ ПО
		|	Табл.НомерСтроки
		|";
		
		ид.ВидеоОбзоры = сч; сч = сч + 1;
	КонецЕсли;
	
	// Доп родители
	
	Если Области.Свойство("Родители") Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|;
		|ВЫБРАТЬ
		|	Ссылка 					Товар,
		|	Родитель				category_guid
		|ИЗ
		|	Справочник.Номенклатура.ДополнительныеРодители
		|ГДЕ
		|	Ссылка В(ВЫБРАТЬ Ссылка ИЗ СписокТоваров)
		|	И Родитель.ВыгружатьНаСайт
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Ссылка 					Товар,
		|	Ссылка.Родитель			category_guid
		|ИЗ
		|	СписокТоваров
		|ГДЕ
		|	Ссылка.Родитель.ВыгружатьНаСайт
		|";
		
		ид.Родители = сч; сч = сч + 1;
	КонецЕсли;
	
	// Картинки
	
	Если Области.Свойство("Картинки") Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|;
		|ВЫБРАТЬ
		|	Ссылка image, ВЫБОР КОГДА ЭтоПредставлениеОбъекта ТОГДА 0 ИНАЧЕ 1 КОНЕЦ КАК position, Владелец Товар
		|ИЗ
		|	Справочник.КартинкиНоменклатуры
		|ГДЕ
		|	Владелец В(ВЫБРАТЬ Ссылка ИЗ СписокТоваров)
		|	И ВыгружатьНаСайт
		|";
		
		ид.Картинки = сч; сч = сч + 1;
	КонецЕсли;	
	
	// Сопутствующие
	
	Если Области.Свойство("Сопутствующие") Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|;
		|ВЫБРАТЬ
		|	Номенклатура1 Товар,
		|	Номенклатура2 related_product_guid,
		|	sorting_weight
		|ИЗ
		|	РегистрСведений.СопутствующиеТовары КАК СопутствующиеТовары
		|ГДЕ
		|	Номенклатура1 В (ВЫБРАТЬ Ссылка ИЗ СписокТоваров)
		|	И Номенклатура2.ВыгружатьНаСайт И Номенклатура2.Родитель.ВыгружатьНаСайт И Номенклатура2.Производитель = &КлючСайта
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Номенклатура2 Товар,
		|	Номенклатура1 related_product_guid,
		|	sorting_weight
		|ИЗ
		|	РегистрСведений.СопутствующиеТовары КАК СопутствующиеТовары
		|ГДЕ
		|	Номенклатура2 В (ВЫБРАТЬ Ссылка ИЗ СписокТоваров)
		|	И Номенклатура1.ВыгружатьНаСайт И Номенклатура1.Родитель.ВыгружатьНаСайт И Номенклатура1.Производитель = &КлючСайта
		|";
		
		ид.Сопутствующие = сч; сч = сч + 1;
	КонецЕсли;
	
	// Сопутствующие
	
	Если Области.Свойство("Аналоги") Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|;
		|ВЫБРАТЬ
		|	Номенклатура1 Товар,
		|	Номенклатура2 similar_product_guid,
		|	sorting_weight
		|ИЗ
		|	РегистрСведений.АналогиНоменклатуры КАК АналогиНоменклатуры
		|ГДЕ
		|	Номенклатура1 В (ВЫБРАТЬ Ссылка ИЗ СписокТоваров)
		|	И Номенклатура2.ВыгружатьНаСайт И Номенклатура2.Родитель.ВыгружатьНаСайт И Номенклатура2.Производитель = &КлючСайта
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Номенклатура2 Товар,
		|	Номенклатура1 similar_product_guid,
		|	sorting_weight
		|ИЗ
		|	РегистрСведений.АналогиНоменклатуры КАК АналогиНоменклатуры
		|ГДЕ
		|	Номенклатура2 В (ВЫБРАТЬ Ссылка ИЗ СписокТоваров)
		|	И Номенклатура1.ВыгружатьНаСайт И Номенклатура1.Родитель.ВыгружатьНаСайт И Номенклатура1.Производитель = &КлючСайта
		|";
		
		ид.Аналоги = сч; сч = сч + 1;
	КонецЕсли;
	
	// Остатки
	
	Если Области.Свойство("Остатки") Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|;
		|ВЫБРАТЬ
		|	Ост.Номенклатура Товар,
		|	ВЫБОР КОГДА Ост.Склад.ОсновнойСкладНаСайте = Значение(Справочник.Склады.ПустаяСсылка) ТОГДА Ост.Склад ИНАЧЕ Ост.Склад.ОсновнойСкладНаСайте КОНЕЦ КАК warehouse_guid,
		|	ЕСТЬNULL(Ост.КоличествоОстаток,0) - ЕСТЬNULL(Рез.КоличествоОстаток,0) num_in_stock,
		|	0 squares_count
		|Поместить Остатки
		|ИЗ
		|	Регистрнакопления.ТоварыНаСкладах.Остатки(,Номенклатура В(ВЫБРАТЬ Ссылка ИЗ СписокТоваров) И Склад.ВыгружатьНаСайт) КАК Ост
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Регистрнакопления.ТоварыВРезерве.Остатки(,Номенклатура В(ВЫБРАТЬ Ссылка ИЗ СписокТоваров) И Размещение.ВыгружатьНаСайт) КАК Рез
		|ПО
		|	Ост.Номенклатура 	= Рез.Номенклатура И
		|	Ост.Склад 			= Рез.Размещение
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Ост.Номенклатура Товар,
		|	Ост.Склад		 warehouse_guid,
		|	ЕСТЬNULL(Ост.КоличествоОстаток,0) - ЕСТЬNULL(Рез.КоличествоОстаток,0) num_in_stock,
		|	0 squares_count
		|ИЗ
		|	Регистрнакопления.ТоварыНаСкладах.Остатки(,Номенклатура В(ВЫБРАТЬ Ссылка ИЗ СписокТоваров) И Склад.ВыгружатьНаСайт И Склад.ВыгружатьНаСайтВместеСОсновным) КАК Ост
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Регистрнакопления.ТоварыВРезерве.Остатки(,Номенклатура В(ВЫБРАТЬ Ссылка ИЗ СписокТоваров) И Размещение.ВыгружатьНаСайт И Размещение.ВыгружатьНаСайтВместеСОсновным) КАК Рез
		|ПО
		|	Ост.Номенклатура 	= Рез.Номенклатура И
		|	Ост.Склад 			= Рез.Размещение
		|;
		|ВЫБРАТЬ
		|	Ост.Товар 				Товар,
		|	Ост.warehouse_guid 		warehouse_guid,
		|	Сумма(num_in_stock) 	num_in_stock,
		|	Сумма(squares_count)	squares_count
		|ИЗ
		|	Остатки КАК Ост
		|ГДЕ
		|	Ост.warehouse_guid = &ЦентральныйСклад
		|СГРУППИРОВАТЬ ПО
		|	Ост.Товар, Ост.warehouse_guid
		|";
		
		ид.Остатки = сч + 1; сч = сч + 2;
	КонецЕсли;	
	
	// Цены
	
	Если Области.Свойство("Цены") Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|;
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Цен.Цена * (ЕСТЬNULL(ВалЦен.Курс, 1) * ЕСТЬNULL(ВалТек.Кратность, 1)) / (ЕСТЬNULL(ВалТек.Курс, 1) * ЕСТЬNULL(ВалЦен.Кратность, 1)) КАК price,
		|	Цен.Номенклатура Товар,
		|	Цен.ТипЦен price_type_guid,
		|	Коэффициент amount
		|ИЗ
		|(
		|	ВЫБРАТЬ
		|		Цен.Номенклатура, 
		|		Выбор когда ЕСТЬNULL(Акц.НоваяЦена, 0) = 0 тогда Цен.Цена иначе Акц.НоваяЦена конец Цена, 
		|		Выбор когда ЕСТЬNULL(Акц.НоваяЦена, 0) = 0 тогда Цен.Валюта иначе Акц.Валюта конец Валюта, 
		|		Цен.ТипЦен,
		|		ВЫБОР КОГДА Цен.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) ТОГДА 1 ИНАЧЕ Цен.Упаковка.Коэффициент КОНЕЦ Коэффициент
		|	ИЗ
		|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекущаяДата, ТипЦен = &ТипЦенРозница И Номенклатура В(ВЫБРАТЬ Ссылка ИЗ СписокТоваров)) Цен
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.Акция.СрезПоследних(&ТекущаяДата, ТипЦен = &ТипЦенРозница И Номенклатура В(ВЫБРАТЬ Ссылка ИЗ СписокТоваров)) Акц
		|	ПО
		|       Цен.Номенклатура = Акц.Номенклатура И 
		|		Цен.ТипЦен = Акц.ТипЦен
		|) Цен
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата) ВалЦен
		|ПО Цен.Валюта = ВалЦен.Валюта
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата, Валюта = &ВалютаТипаЦен) ВалТек 
		|ПО ИСТИНА
		|
		|";
		ид.Цены = сч; сч = сч + 1;
	КонецЕсли;	
	
	ТипЦенРозница = КэшируемыеФункции.ПолучитьТипЦенРозница();
	ЦентральныйСклад = КэшируемыеФункции.ПолучитьЦентральныйСкладМагазина();
	КлючСайтаЛикота = КэшируемыеФункции.ПолучитьКлючСайтаЛикота();
	
	Запрос.УстановитьПараметр("ТекущаяДата", 		ТекущаяДата());
	Запрос.УстановитьПараметр("ПустаяАкция", 		Документы.Акция.ПустаяСсылка());
	Запрос.УстановитьПараметр("КлючСайта", 	 		КлючСайтаЛикота);
 	Запрос.УстановитьПараметр("ТипЦенРозница", 	 	ТипЦенРозница);
	Запрос.УстановитьПараметр("ЦентральныйСклад", 	ЦентральныйСклад);
	
	Если СсылкаТовар <> Неопределено 		Тогда 	Запрос.УстановитьПараметр("Ссылка"			, СсылкаТовар) КонецЕсли;
	Если ЗначениеЗаполнено(СсылкаРодитель) 	Тогда 	Запрос.УстановитьПараметр("Родитель"		, СсылкаРодитель) КонецЕсли;
	Если ЗначениеЗаполнено(массивСсылок) 	Тогда 	Запрос.УстановитьПараметр("массивСсылок"	, массивСсылок) КонецЕсли;
	
	ТипЦеныСайта = Справочники.ТипыЦен.ПолучитьСсылку(Новый УникальныйИдентификатор("a2896017-fe5f-11dc-a014-001731520b3d"));
	Запрос.УстановитьПараметр("ВалютаТипаЦен", ТипЦеныСайта.Валюта);
	
#КонецОбласти
	
	пустаяТаблица = Новый ТаблицаЗначений; пустаяТаблица.Колонки.Добавить("Товар");

	Пакеты 		= Запрос.ВыполнитьПакет();
	Товары 		= Новый Массив;
	Таблица		= Пакеты[ид.Поля].Выгрузить(); ПослИнд = Таблица.Количество() - 1;
	Свойства	= ?(Области.Свойство("Свойства"), Пакеты[ид.Свойства].Выгрузить()	, пустаяТаблица); ПоляСвойств 	= ПолучитьПоляДляСтруктуры("Товар", Свойства.Колонки);
	Родители	= ?(Области.Свойство("Родители"), Пакеты[ид.Родители].Выгрузить()	, пустаяТаблица); ПоляРодителей = ПолучитьПоляДляСтруктуры("Товар", Родители.Колонки);
	тКартинки	= ?(Области.Свойство("Картинки"), Пакеты[ид.Картинки].Выгрузить()	, пустаяТаблица); ПоляКартинок 	= ПолучитьПоляДляСтруктуры("Товар", тКартинки.Колонки);
	Остатки		= ?(Области.Свойство("Остатки")	, Пакеты[ид.Остатки].Выгрузить()	, пустаяТаблица); ПоляОстатков 	= ПолучитьПоляДляСтруктуры("Товар", Остатки.Колонки);
	Цены		= ?(Области.Свойство("Цены")	, Пакеты[ид.Цены].Выгрузить()		, пустаяТаблица); ПоляЦен 		= ПолучитьПоляДляСтруктуры("Товар", Цены.Колонки);
	Комплект	= ?(Области.Свойство("Комплектация"), Пакеты[ид.Комплектация].Выгрузить()	, пустаяТаблица); ПоляКомплектация 	= ПолучитьПоляДляСтруктуры("Товар", Комплект.Колонки);
	КраткоеОписание = ?(Области.Свойство("КраткоеОписание"), Пакеты[ид.КраткоеОписание].Выгрузить()	, пустаяТаблица); ПоляКраткоеОписание 	= ПолучитьПоляДляСтруктуры("Товар", КраткоеОписание.Колонки);
	Инструкции 	= ?(Области.Свойство("Инструкции"), Пакеты[ид.Инструкции].Выгрузить(), пустаяТаблица); ПоляИнструкции = ПолучитьПоляДляСтруктуры("Товар", Инструкции.Колонки);
	ВидеоОбзоры 	= ?(Области.Свойство("ВидеоОбзоры"), Пакеты[ид.ВидеоОбзоры].Выгрузить(), пустаяТаблица); ПоляВидеоОбзоры = ПолучитьПоляДляСтруктуры("Товар", ВидеоОбзоры.Колонки);
	Сопутствующие 	= ?(Области.Свойство("Сопутствующие"), Пакеты[ид.Сопутствующие].Выгрузить(), пустаяТаблица); ПоляСопутствующие = ПолучитьПоляДляСтруктуры("Товар", Сопутствующие.Колонки);
	Аналоги 	= ?(Области.Свойство("Аналоги"), Пакеты[ид.Аналоги].Выгрузить(), пустаяТаблица); ПоляАналоги = ПолучитьПоляДляСтруктуры("Товар", Аналоги.Колонки);
	
	Если БратьДопТаблицыОтсюда = Неопределено Тогда
			УстановитьИндексыТаблицам("Товар", Свойства, 	Родители, тКартинки, Остатки, Цены, Комплект, КраткоеОписание, Инструкции, ВидеоОбзоры, Сопутствующие, Аналоги);
	Иначе	УстановитьИндексыТаблицам("Товар", 				Родители, тКартинки, Остатки, Цены, Комплект, КраткоеОписание, Инструкции, ВидеоОбзоры, Сопутствующие, Аналоги) КонецЕсли;
	
	Для Инд = 0 По ПослИнд Цикл
		
		// Получим товар
		
		структураТовар 	= КонвертацияТипов.ПолучитьСтруктуруИзСТрокиТаблицыЗначений(Таблица, Инд);
		Отбор			= Новый Структура("Товар", структураТовар.guid);
		
		// Добавим родителей
		
		Если Области.Свойство("Родители") Тогда
			структураТовар.Вставить("available_in_categories", ПолучитьМассивЗначенийИзТаблицы(Родители, Отбор, ПоляРодителей));
		КонецЕсли;
		
		// Добавим свойства
		Если Области.Свойство("Свойства") Тогда
			структураТовар.Вставить("properties", ?(БратьДопТаблицыОтсюда = Неопределено,
						ПолучитьМассивЗначенийИзТаблицы(Свойства, Отбор, ПоляСвойств),
						ПолучитьМассивСвойствПоФорматAPI(БратьДопТаблицыОтсюда.Свойства)));
						
			Если НЕ БратьДопТаблицыОтсюда = Неопределено Тогда
				структураТовар.properties.Добавить(новый Структура("guid, value", "weight", структураТовар.guid.Вес));
			КонецЕсли;
		КонецЕсли;
		
		// Добавим комплектацию
		
		Если Области.Свойство("Комплектация") Тогда
			структураТовар.Вставить("complectation", ПолучитьМассивЗначенийИзТаблицы(Комплект, Отбор, ПоляКомплектация));
		КонецЕсли;
		
		// Добавим картинку
		
		Если Области.Свойство("Картинки") Тогда
			структураТовар.Вставить("images", ПолучитьМассивЗначенийИзТаблицы(тКартинки, Отбор, ПоляКартинок));
		КонецЕсли;
		
		// Добавим краткое описание
		
		Если Области.Свойство("КраткоеОписание") Тогда
			структураТовар.Вставить("shorts", ПолучитьМассивЗначенийИзТаблицы(КраткоеОписание, Отбор, ПоляКраткоеОписание));
		КонецЕсли;
		
		Если Области.Свойство("Инструкции") Тогда
			структураТовар.Вставить("instructions", ПолучитьМассивЗначенийИзТаблицы(Инструкции, Отбор, ПоляИнструкции));
		КонецЕсли;
		
		Если Области.Свойство("ВидеоОбзоры") Тогда
			структураТовар.Вставить("movies", ПолучитьМассивЗначенийИзТаблицы(ВидеоОбзоры, Отбор, ПоляВидеоОбзоры));
		КонецЕсли;
		
		Если Области.Свойство("Сопутствующие") Тогда
			структураТовар.Вставить("related_products", ПолучитьМассивЗначенийИзТаблицы(Сопутствующие, Отбор, ПоляСопутствующие));
		КонецЕсли;
		
		Если Области.Свойство("Аналоги") Тогда
			структураТовар.Вставить("similar_products", ПолучитьМассивЗначенийИзТаблицы(Аналоги, Отбор, ПоляАналоги));
		КонецЕсли;
		
		// Добавим Остатки
		
		Если Области.Свойство("Остатки") Тогда
			структураТовар.Вставить("enabled",Истина);
			структураТовар.Вставить("in_stock_warehouses", ПолучитьМассивЗначенийИзТаблицы(Остатки, Отбор, ПоляОстатков));
			ОбщКол = 0; Для Каждого ЭлСклада Из структураТовар.in_stock_warehouses Цикл ОбщКол = ОбщКол + ЭлСклада.num_in_stock КонецЦикла;
			структураТовар.Вставить("squares_count_common", ОбщКол);
		КонецЕсли;
		
		// Добавим Цены
		Если Области.Свойство("Цены") Тогда
			структураТовар.Вставить("prices", ПолучитьМассивЗначенийИзТаблицы(Цены, Отбор, ПоляЦен));
			СтрокиЦены = Цены.НайтиСтроки(Новый Структура("Товар, price_type_guid", структураТовар.guid, ТипЦенРозница));
			структураТовар.Вставить("price", ?(СтрокиЦены.Количество(), Новый Структура("amount, price", СтрокиЦены[0].amount, СтрокиЦены[0].price), Неопределено));
		КонецЕсли;
		
		Если структураТовар.Свойство("Гарантия_Наименование") Тогда
			Если ЗначениеЗаполнено(структураТовар.Гарантия_Наименование) Тогда
				гарантия = Новый Структура("title, text, image", структураТовар.Гарантия_Наименование, структураТовар.Гарантия_Текст, структураТовар.Гарантия_Картинка);
	
				структураТовар.Вставить("guarantee", гарантия);
			КонецЕсли;
			
			структураТовар.Удалить("Гарантия_Наименование");
			структураТовар.Удалить("Гарантия_Текст");
			структураТовар.Удалить("Гарантия_Картинка");
		КонецЕсли;
		
		// Запомним
		
		Товары.Добавить(структураТовар); 
	КонецЦикла;
	
	Если СсылкаТовар = Неопределено Тогда
		новВремя = ТекущаяДата();
	
		ЗаписьЖурналаРегистрации("HTTP.licota.Трассировка.api2.get_products",УровеньЖурналаРегистрации.Информация,,,"Окончания метода:
		|Получено элементов в списке " + Товары.Количество() + "
		|Время работы составило " + Строка(новВремя - текВремя) + " сек.
		|Error = " + стрОшибки + "
		|");
	КонецЕсли;
	
	Возврат ЗначениеВозврата(Товары);
		
КонецФункции
Функция ПолучитьСвойстваНоменклатуры(Параметры, стрОшибки = "") Экспорт
	
	// Получим параметры
	
	Ссылка 	= ?(Параметры.Свойство("Ссылка"), 	Параметры.Ссылка, 	Неопределено);
	Гуиды 	= ?(Параметры.Свойство("guids"), 	Параметры.guids, 	Неопределено);
	
	массивСсылок = Новый Массив;
	
	Параметры.Вставить("ДопСвойства", ДопСвойства());
	
	Если НЕ Ссылка = Неопределено Тогда
		массивСсылок.Добавить(Ссылка);
	КонецЕсли;
	Если ЗначениеЗаполнено(Гуиды) Тогда
		Если ТипЗнч(Гуиды) = Тип("Массив") Тогда
			Для каждого гуид Из Гуиды Цикл
				Если НЕ Параметры.ДопСвойства[гуид] = Неопределено Тогда массивСсылок.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыНоменклатуры.ПустаяСсылка()); Продолжить; КонецЕсли;
				
				массивСсылок.Добавить(HTTP.ПолучитьОбъектПоСсылке(ПланыВидовХарактеристик.ДополнительныеРеквизитыНоменклатуры, гуид, стрОшибки));
			КонецЦикла;
		ИначеЕсли ТипЗнч(Гуиды) = Тип("Строка") Тогда
			Если Параметры.ДопСвойства[Гуиды] = Неопределено Тогда
				массивСсылок.Добавить(HTTP.ПолучитьОбъектПоСсылке(ПланыВидовХарактеристик.ДополнительныеРеквизитыНоменклатуры, Гуиды, стрОшибки));
			Иначе
				массивСсылок.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыНоменклатуры.ПустаяСсылка());
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Спр.Ссылка				guid,
	|	Спр.Наименование 		name,
	|	Спр.УчаствуетВФильтре	filter,
	|" + API2.ПолучитьТекстПредставленияВариантаСвойства() + ",
	|	Представление(ЕдиницаИзмерения) units,
	|
	|	Спр.ПометкаУдаления,
	|	ИСТИНА ВыгружатьНаСайт
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыНоменклатуры Спр
	|ГДЕ 
	|	НЕ ПометкаУдаления " + ?(ЗначениеЗаполнено(массивСсылок), "
	|	И Ссылка В (&массивСсылок)", "") + "
	|");
	
	Если ЗначениеЗаполнено(массивСсылок) Тогда 
		Запрос.УстановитьПараметр("массивСсылок", массивСсылок);
	КонецЕсли;
	
	Свойства = КонвертацияТипов.ПолучитьМассивИзТаблицыЗначений(Запрос.Выполнить().Выгрузить());
	ДобавитьДопСвойства(Свойства, Параметры);
	
	Возврат ЗначениеВозврата(Свойства);
	
КонецФункции
Функция ДопСвойства()
	ДопСвойства = Новый Соответствие;
	ДопСвойства.Вставить("weight", Новый Структура(	"guid, name, filter, ПометкаУдаления, ВыгружатьНаСайт", 
													"weight", "Вес", Ложь, Ложь, Истина));
	
	Возврат ДопСвойства;
КонецФункции // ДопСвойства()
Функция ДобавитьДопСвойства(Свойства, Параметры)
	Ссылка 	= ?(Параметры.Свойство("Ссылка"), 	Параметры.Ссылка, 	Неопределено);
	Гуиды 	= ?(Параметры.Свойство("guids"), 	Параметры.guids, 	Неопределено);
	
	ДопСвойства = Параметры.ДопСвойства;
	
	добавляемыеОбъекты = Новый Соответствие;
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Ложь;
	КонецЕсли;
	Если ЗначениеЗаполнено(Гуиды) Тогда
		Если ТипЗнч(Гуиды) = Тип("Массив") Тогда
			Для каждого гуид Из Гуиды Цикл
				Если НЕ ДопСвойства[гуид] = Неопределено Тогда
					добавляемыеОбъекты.Вставить(гуид, Истина);
				КонецЕсли;
			КонецЦикла;
		Иначе // это строка
			Если НЕ ДопСвойства[Гуиды] = Неопределено Тогда
				добавляемыеОбъекты.Вставить(Гуиды, Истина);
			КонецЕсли;
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(добавляемыеОбъекты) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(добавляемыеОбъекты) Тогда
		Для каждого ДопСвойство Из ДопСвойства Цикл
			добавляемыеОбъекты.Вставить(ДопСвойство.Ключ, Истина);
		КонецЦикла;
	КонецЕсли;
	
	Для каждого кИз Из добавляемыеОбъекты Цикл
		Свойства.Добавить(ДопСвойства[кИз.Ключ]);
	КонецЦикла;
КонецФункции // ДобавитьДопСвойства()

#КонецОбласти

#Область Общие_Справочники

Функция ПолучитьКартинку(Параметры, стрОшибки = "") Экспорт
	
	Ссылка 		= ?(Параметры.Свойство("Ссылка"), 		Параметры.Ссылка,		Неопределено);
	guid_image 	= ?(Параметры.Свойство("guid_image"), 	Параметры.guid_image, 	Неопределено);
	
	массивСсылок = Новый Массив;
	Если НЕ Ссылка = Неопределено Тогда
		массивСсылок.Добавить(Ссылка);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(guid_image) Тогда
		Если ТипЗнч(guid_image) = Тип("Массив") Тогда
			Для каждого гуид Из guid_image Цикл
				массивСсылок.Добавить(HTTP.ПолучитьОбъектПоСсылке(Справочники.КартинкиНоменклатуры, гуид, стрОшибки));
			КонецЦикла;
		ИначеЕсли ТипЗнч(guid_image) = Тип("Строка") Тогда
			массивСсылок.Добавить(HTTP.ПолучитьОбъектПоСсылке(Справочники.КартинкиНоменклатуры, guid_image, стрОшибки));
		КонецЕсли;
	КонецЕсли;
	
	лКартинки = Новый Массив;
	
	Для каждого Ссылка Из массивСсылок Цикл
		Структура 	= Новый Структура("guid, extension, body, alt, title, last_updated", XMLСтрока(Ссылка), "", "", Ссылка.Наименование, Ссылка.Наименование, Ссылка.ДатаИзменения);
	
		//desh.avdonin {{27.06.2014#
		Если ЗначениеЗаполнено(Ссылка.КопияКартинки) Тогда
			Картинка = Ссылка.КопияКартинки.Картинка.Получить();
		Иначе
			Картинка = Ссылка.Картинка.Получить();
		КонецЕсли;
		Если Картинка = Неопределено Тогда
			// тогда возможно картинка в аватаре
			Если ЗначениеЗаполнено(Ссылка.КопияКартинки) Тогда
				Картинка = Ссылка.КопияКартинки.Аватар.Получить();
			Иначе
				Картинка = Ссылка.Аватар.Получить();
			КонецЕсли;
		КонецЕсли;
		//}}desh.avdonin
		
		Если Картинка <> Неопределено Тогда
			Структура.extension = НРег(Строка(Картинка.Формат()));
			Структура.body 		= Картинка; 
		КонецЕсли;
		
		лКартинки.Добавить(Структура);
	КонецЦикла;
	
	Возврат ЗначениеВозврата(лКартинки);
КонецФункции

Функция ПолучитьКартинки(Параметры, стрОшибки = "") Экспорт
	
	guids 			= ?(Параметры.Свойство("guids")				, Параметры.guids, 	Неопределено);
	changesFromDate = ?(Параметры.Свойство("changesFromDate")	, Параметры.changesFromDate, 	Неопределено);
	
	массивСсылок = Новый Массив;
	
	Если ЗначениеЗаполнено(guids) Тогда
		Если ТипЗнч(guids) = Тип("Массив") Тогда
			Для каждого гуид Из guids Цикл
				массивСсылок.Добавить(HTTP.ПолучитьОбъектПоСсылке(Справочники.Картинки, гуид, стрОшибки));
			КонецЦикла;
		ИначеЕсли ТипЗнч(guids) = Тип("Строка") Тогда
			массивСсылок.Добавить(HTTP.ПолучитьОбъектПоСсылке(Справочники.Картинки, guids, стрОшибки));
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Спр.Ссылка		guid,
	|	Спр.Картинка	file,
	|	Спр.Расширение	extension
	|ИЗ 		
	|	Справочник.Картинки КАК Спр
	|ГДЕ
	|	Ссылка В(&массивСсылок)
	|" + ?(НЕ ЗначениеЗаполнено(changesFromDate), "", "	ИЛИ Спр.ДатаИзменения >= &changesFromDate") + "
	|";
	
	Запрос.УстановитьПараметр("массивСсылок", массивСсылок);
	Если ЗначениеЗаполнено(changesFromDate) Тогда
		Запрос.УстановитьПараметр("changesFromDate", Дата(changesFromDate));
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	лФайлы = Новый Массив;
	Пока Выборка.Следующий() Цикл
		Структура 	= Новый Структура("guid, extension, body", 
			XMLСтрока(Выборка.guid), 
			НРег(Выборка.extension), 
			?(ЗначениеЗаполнено(Выборка.file), Выборка.file.Получить(), Неопределено));
		
		лФайлы.Добавить(Структура);
	КонецЦикла;
	
	Возврат ЗначениеВозврата(лФайлы);
КонецФункции
Функция ПолучитьДокументы(Параметры, стрОшибки = "") Экспорт
	
	guids 			= ?(Параметры.Свойство("guids")				, Параметры.guids, 	Неопределено);
	changesFromDate = ?(Параметры.Свойство("changesFromDate")	, Параметры.changesFromDate, 	Неопределено);
	
	массивСсылок = Новый Массив;
	
	Если ЗначениеЗаполнено(guids) Тогда
		Если ТипЗнч(guids) = Тип("Массив") Тогда
			Для каждого гуид Из guids Цикл
				массивСсылок.Добавить(HTTP.ПолучитьОбъектПоСсылке(Справочники.ИнструкцииНоменклатуры, гуид, стрОшибки));
			КонецЦикла;
		ИначеЕсли ТипЗнч(guids) = Тип("Строка") Тогда
			массивСсылок.Добавить(HTTP.ПолучитьОбъектПоСсылке(Справочники.ИнструкцииНоменклатуры, guids, стрОшибки));
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Спр.Ссылка		guid,
	|	Спр.Файл		file,
	|	Спр.Расширение	extension
	|ИЗ 		
	|	Справочник.ИнструкцииНоменклатуры КАК Спр
	|ГДЕ
	|	Ссылка В(&массивСсылок)
	|" + ?(НЕ ЗначениеЗаполнено(changesFromDate), "", "	ИЛИ Спр.ДатаИзменения >= &changesFromDate") + "
	|";
	
	Запрос.УстановитьПараметр("массивСсылок", массивСсылок);
	Если ЗначениеЗаполнено(changesFromDate) Тогда
		Запрос.УстановитьПараметр("changesFromDate", Дата(changesFromDate));
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	лФайлы = Новый Массив;
	Пока Выборка.Следующий() Цикл
		Структура 	= Новый Структура("guid, extension, body", 
			XMLСтрока(Выборка.guid), 
			НРег(Выборка.extension), 
			?(ЗначениеЗаполнено(Выборка.file), Выборка.file.Получить(), Неопределено));
		
		лФайлы.Добавить(Структура);
	КонецЦикла;
	
	Возврат ЗначениеВозврата(лФайлы);
КонецФункции

Функция ПолучитьКатегорииСтатьи(Параметры, стрОшибки = "") Экспорт
	
	// Возвращает массив категорий, если в массив состоит из 1 элемента тогда возвращается элемент массиа (структура)
	
	// Получим параметры
	
	СсылкаКатегории 		= ?(Параметры.Свойство("Ссылка"), 					Параметры.Ссылка, 				Неопределено);
	guid_article_category	= ?(Параметры.Свойство("guid_article_category"),	Параметры.guid_article_category,Неопределено);
	БратьДопТаблицыОтсюда 	= ?(Параметры.Свойство("БратьДопТаблицыОтсюда"), 	Параметры.БратьДопТаблицыОтсюда,Неопределено);
	
	// Получим ссылку
	
	массивСсылок = Новый Массив;
	
	Если ЗначениеЗаполнено(guid_article_category) Тогда
		
		Если ТипЗнч(guid_article_category) = Тип("Массив") Тогда
			Для каждого guidТовара Из guid_article_category Цикл
				ссылкаНаСтатью = Неопределено;
				Если ссылкаНаСтатью = Неопределено Тогда ссылкаНаСтатью = HTTP.ПолучитьОбъектПоСсылке(Справочники.ИнтернетСтатьи, guidТовара, стрОшибки) КонецЕсли;
				Если ссылкаНаСтатью = Неопределено Тогда ссылкаНаСтатью = HTTP.ПолучитьОбъектПоСсылке(Справочники.ИнтернетКонтакты, guidТовара, стрОшибки) КонецЕсли;
				
				массивСсылок.Добавить(ссылкаНаСтатью);
			КонецЦикла;
		Иначе
			СсылкаКатегории = HTTP.ПолучитьОбъектПоСсылке(Справочники.ИнтернетСтатьи, guid_article_category, стрОшибки); 
			Если СсылкаКатегории = Неопределено Тогда СсылкаКатегории = HTTP.ПолучитьОбъектПоСсылке(Справочники.ИнтернетКонтакты, guid_article_category, стрОшибки);  КонецЕсли;
			Если СсылкаКатегории = Неопределено Тогда Возврат "" КонецЕсли;
			
			Если Не СсылкаКатегории.ЭтоГруппа Тогда
				стрОшибки = "Гуид родительской категории относится к статье.
				|Гуид: " + guid_article_category + "
				|Статья: " + Строка(СсылкаКатегории); 
				Возврат Неопределено; 
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ СсылкаКатегории = Неопределено Тогда
		ДопФильтр = "И Ссылка = &Ссылка" 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(массивСсылок) Тогда
		ДопФильтр = "И Ссылка В (&МассивСсылок)" 
	КонецЕсли;
	
	Если СсылкаКатегории = Неопределено И НЕ ЗначениеЗаполнено(массивСсылок) Тогда
		ДопФильтр = "И ЭтоГруппа И НЕ ПометкаУдаления";
	КонецЕсли;
		
#Область Текст_запроса
	
	Запрос = Новый Запрос("
	
	// Категории
	
	|ВЫБРАТЬ
	|	Спр.Ссылка				guid,
	|	Спр.h1,
	|	Спр.Наименование 		title,
	|	Спр.alies 				alias,
	|	КраткоеСодержание		description,
	|	Спр.meta_description,
	|	Спр.meta_keywords,
	|	Неопределено 			full_url, 
	|	link_text,
	|	title_for_link			link_title,
	//|	Неопределено			menu_items,
	|	Картинка				image,
	|	Родитель				category,
	|	ВЫБОР КОГДА Родитель = Значение(Справочник.ИнтернетСтатьи.ПустаяСсылка) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК root,
	|	Неопределено			categories,
	|	ВЫБОР КОГДА ЭтоНовости ТОГДА ""news"" ИНАЧЕ ""article"" КОНЕЦ КАК type,
	|
	|	Спр.ПометкаУдаления,
	|	Спр.ВыгружатьНаСайтЛикота ВыгружатьНаСайт
	|ИЗ 		
	|	Справочник.ИнтернетСтатьи КАК Спр
	|ГДЕ ВыгружатьНаСайтЛикота " + ДопФильтр + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Спр.Ссылка				guid,
	|	Спр.Наименование		h1,
	|	Спр.title		 		title,
	|	Спр.alies 				alias,
	|	Спр.Адрес				description,
	|	Спр.meta_description,
	|	Спр.meta_keywords,
	|	Неопределено 			full_url, 
	|	Спр.Наименование		link_text,
	|	Спр.Наименование		link_title,
	|	Неопределено			image,
	|	Родитель				category,
	|	ВЫБОР КОГДА Родитель = Значение(Справочник.ИнтернетКонтакты.ПустаяСсылка) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК root,
	|	Неопределено			categories,
	|	""contact""				type,
	|
	|	Спр.ПометкаУдаления,
	|	Спр.ВыгружатьНаСайтЛикота ВыгружатьНаСайт
	|ИЗ 		
	|	Справочник.ИнтернетКонтакты КАК Спр
	|ГДЕ ВыгружатьНаСайтЛикота " + ДопФильтр + "
	|;
	
	// Доп родители
	
	|ВЫБРАТЬ
	|	Ссылка 					Категория,
	|	Родитель				category_guid,
	|	Родитель.link_text 			link_title,
	|	Родитель.title_for_link		link_text
	|ИЗ
	|	Справочник.ИнтернетСтатьи.ДополнительныеРодители
	|ГДЕ
	|	Ссылка В(ВЫБРАТЬ Ссылка ИЗ Справочник.ИнтернетСтатьи ГДЕ ВыгружатьНаСайтЛикота " + ДопФильтр + ")
	|");
	
	Если СсылкаКатегории <> Неопределено Тогда
		Запрос.УстановитьПараметр("Ссылка", СсылкаКатегории) КонецЕсли;
	
	Если ЗначениеЗаполнено(массивСсылок) Тогда
		Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	КонецЕсли;
	
#КонецОбласти
	
	Пакеты 		= Запрос.ВыполнитьПакет();
	Категории 	= Новый Массив;
	Таблица		= Пакеты[0].Выгрузить(); ПослИнд = Таблица.Количество() - 1;
	Родители	= Пакеты[1].Выгрузить(); ПоляРодителей = ПолучитьПоляДляСтруктуры("Категория", Родители.Колонки);
	
	УстановитьИндексыТаблицам("Категория", Родители);
	
	Для Инд = 0 По ПослИнд Цикл
		
		// Получим категорию
		
		структураКатегория 	= КонвертацияТипов.ПолучитьСтруктуруИзСТрокиТаблицыЗначений(Таблица, Инд);
		Отбор				= Новый Структура("Категория", структураКатегория.guid);
		
		// Добавим родителей
		
		Если Не структураКатегория.category.Пустая() Тогда
			мРодителей = ПолучитьМассивЗначенийИзТаблицы(Родители, Отбор, ПоляРодителей);
			Если структураКатегория.type = "contact" Тогда
				мРодителей.Вставить(0, Новый Структура("category_guid, link_title, link_text", структураКатегория.category, структураКатегория.category.Наименование, структураКатегория.category.Наименование));
			Иначе
				мРодителей.Вставить(0, Новый Структура("category_guid, link_title, link_text", структураКатегория.category, структураКатегория.category.title_for_link, структураКатегория.category.link_text));
		    КонецЕсли;
			структураКатегория.categories = мРодителей; 
		КонецЕсли;
		структураКатегория.Удалить("category");
		
		// Картинки
		
		Если НЕ структураКатегория.image = Неопределено Тогда
			структураКатегория.image = структураКатегория.image.Получить();
		КонецЕсли;
		
		// Запомним
		
		Категории.Добавить(структураКатегория); КонецЦикла;
	
	Возврат ЗначениеВозврата(Категории);
	
КонецФункции
Функция ПолучитьСтатьи(Параметры, стрОшибки = "") Экспорт
	
	// Возвращает массив статей, если массив состоит из 1 элемента тогда возвращается элемент массиа (структура)
	
	// Получим параметры
	
	СсылкаСтатьи 			= ?(Параметры.Свойство("Ссылка"), 					Параметры.Ссылка, 				Неопределено);
	guid_article			= ?(Параметры.Свойство("guid_article"),				Параметры.guid_article,			Неопределено);
	guid_article_category	= ?(Параметры.Свойство("guid_article_category"),	Параметры.guid_article_category,Неопределено);
	БратьДопТаблицыОтсюда 	= ?(Параметры.Свойство("БратьДопТаблицыОтсюда"), 	Параметры.БратьДопТаблицыОтсюда,Неопределено);
	
	// Получим родителя
	
	массивСсылок = Новый Массив;
	
	Если ЗначениеЗаполнено(guid_article_category) Тогда
		
		СсылкаРодитель = HTTP.ПолучитьОбъектПоСсылке(Справочники.ИнтернетСтатьи, guid_article_category, стрОшибки); 
		Если СсылкаРодитель = Неопределено Тогда СсылкаРодитель = HTTP.ПолучитьОбъектПоСсылке(Справочники.ИнтернетКонтакты, guid_article_category, стрОшибки);  КонецЕсли;
		Если СсылкаРодитель = Неопределено Тогда Возврат "" КонецЕсли;
		
		Если Не СсылкаРодитель.ЭтоГруппа Тогда
			стрОшибки = "Гуид родительской категории относится к статье.
			|Гуид: " + guid_article_category + "
			|Статья: " + Строка(СсылкаРодитель); Возврат Неопределено; КонецЕсли; КонецЕсли;
	
	Если ЗначениеЗаполнено(guid_article) Тогда
		
		Если ТипЗнч(guid_article) = Тип("Массив") Тогда
			Для каждого guidТовара Из guid_article Цикл
				ссылкаНаСтатью = Неопределено;
				Если ссылкаНаСтатью = Неопределено Тогда ссылкаНаСтатью = HTTP.ПолучитьОбъектПоСсылке(Справочники.ИнтернетСтатьи, guidТовара, стрОшибки) КонецЕсли;
				Если ссылкаНаСтатью = Неопределено Тогда ссылкаНаСтатью = HTTP.ПолучитьОбъектПоСсылке(Справочники.ИнтернетКонтакты, guidТовара, стрОшибки) КонецЕсли;
				
				массивСсылок.Добавить(ссылкаНаСтатью);
			КонецЦикла;
		Иначе
			СсылкаСтатьи = HTTP.ПолучитьОбъектПоСсылке(Справочники.ИнтернетСтатьи, guid_article, стрОшибки); 
			Если СсылкаСтатьи = Неопределено Тогда СсылкаСтатьи = HTTP.ПолучитьОбъектПоСсылке(Справочники.ИнтернетКонтакты, guid_article, стрОшибки);  КонецЕсли;
			Если СсылкаСтатьи = Неопределено Тогда Возврат "" КонецЕсли;
			
			Если СсылкаСтатьи.ЭтоГруппа Тогда
				стрОшибки = "Гуид статьи относится к категории стати.
				|Гуид: " + guid_article + "
				|Статья: " + Строка(СсылкаСтатьи); Возврат Неопределено; КонецЕсли; КонецЕсли;
		КонецЕсли;
		
	Если СсылкаСтатьи = Неопределено И НЕ ЗначениеЗаполнено(массивСсылок) Тогда
	
		ДопФильтр = "НЕ ЭтоГруппа И НЕ ПометкаУдаления И ВыгружатьНаСайт";
		ДопФильтр = ДопФильтр + ?(ЗначениеЗаполнено(СсылкаРодитель)," 	И Родитель = &Родитель ", "");
		
	ИначеЕсли ЗначениеЗаполнено(массивСсылок) Тогда
		ДопФильтр = "Ссылка В (&МассивСсылок)" 
	Иначе
		ДопФильтр = "Ссылка = &Ссылка" КонецЕсли;

#Область Текст_запроса
	
	Запрос = Новый Запрос("
	
	// Статьи
	
	|ВЫБРАТЬ
	|	Спр.Ссылка				guid,
	|	Спр.h1,
	|	Спр.alies 				alias,
	|	Спр.Наименование 		title,
	|	КраткоеСодержание		description,
	|	КраткоеСодержание		short_text,
	|	ТекстСтатьи				long_text,
	|	Спр.ДатаСтатьи 			data_created,
	|	0						sorting_weight,
	|	Спр.meta_description,
	|	Спр.meta_keywords,
	|	Родитель				category,
	|	Неопределено			categories,
	|	Картинка				image,
	|	Родитель.ЭтоНовости		this_news,
	|	ВЫБОР КОГДА Родитель.ЭтоНовости ТОГДА ""news"" ИНАЧЕ ТипСтатьи КОНЕЦ КАК type,
	|	ВЫБОР КОГДА Спр.ТемаОтображенияНаСайте = """" ТОГДА ""standart"" ИНАЧЕ Спр.ТемаОтображенияНаСайте КОНЕЦ theme,
	|
	|	Спр.ПометкаУдаления,
	|	Спр.ВыгружатьНаСайтЛикота ВыгружатьНаСайт
	|ИЗ 		
	|	Справочник.ИнтернетСтатьи КАК Спр
	|ГДЕ ПОДСТРОКА(ТекстСтатьи, 1, 1) <> """" И ВыгружатьНаСайтЛикота И " + ДопФильтр + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Спр.Ссылка				guid,
	|	Спр.Наименование		h1,
	|	Спр.alies 				alias,
	|	Спр.title		 		title,
	|	""""					description,
	|	""""					short_text,
	|	""""					long_text,
	|	ДАТАВРЕМЯ(1,1,1)		data_created,
	|	sorting_weight			sorting_weight,
	|	Спр.meta_description,
	|	Спр.meta_keywords,
	|	Родитель				category,
	|	Неопределено			categories,
	|	Неопределено			image,
	|	ЛОЖЬ					this_news,
	|	""contact""				type,
	|	""standart"" 			theme,
	|
	|	Спр.ПометкаУдаления,
	|	Спр.ВыгружатьНаСайтЛикота ВыгружатьНаСайт
	|ИЗ 		
	|	Справочник.ИнтернетКонтакты КАК Спр
	|ГДЕ ВыгружатьНаСайтЛикота И " + ДопФильтр + "
	|;
	
	// Доп родители
	
	|ВЫБРАТЬ
	|	Ссылка 						Статья,
	|	Родитель					category_guid,
	|	Родитель.link_text 			link_title,
	|	Родитель.title_for_link		link_text
	|ИЗ
	|	Справочник.ИнтернетСтатьи.ДополнительныеРодители
	|ГДЕ
	|	Ссылка В(ВЫБРАТЬ Ссылка ИЗ Справочник.ИнтернетСтатьи ГДЕ ВыгружатьНаСайтЛикота И " + ДопФильтр + ")
	|");
	
	Если ЗначениеЗаполнено(guid_article_category) Тогда 
		Запрос.УстановитьПараметр("Родитель", СсылкаРодитель) КонецЕсли;
	
	Если СсылкаСтатьи <> Неопределено Тогда
		Запрос.УстановитьПараметр("Ссылка", СсылкаСтатьи) КонецЕсли;
	
	Если ЗначениеЗаполнено(массивСсылок) Тогда
		Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	КонецЕсли;
#КонецОбласти
	
	Пакеты 		= Запрос.ВыполнитьПакет();
	Статьи 		= Новый Массив;
	Таблица		= Пакеты[0].Выгрузить(); ПослИнд = Таблица.Количество() - 1;
	Родители	= Пакеты[1].Выгрузить(); ПоляРодителей = ПолучитьПоляДляСтруктуры("Статья", Родители.Колонки);
	
	УстановитьИндексыТаблицам("Статья", Родители);
	
	Для Инд = 0 По ПослИнд Цикл
		
		// Получим категорию
		
		структураСтатья 	= КонвертацияТипов.ПолучитьСтруктуруИзСТрокиТаблицыЗначений(Таблица, Инд);
		Отбор				= Новый Структура("Статья", структураСтатья.guid);
		
		Если ТипЗнч(структураСтатья.type) = Тип("ПеречислениеСсылка.ТипИнтернетСтатьи") Тогда
			
			Если структураСтатья.type = Перечисления.ТипИнтернетСтатьи.Новость Тогда
				структураСтатья.type = "news";
			ИначеЕсли структураСтатья.type = Перечисления.ТипИнтернетСтатьи.Контакт Тогда
				структураСтатья.type = "contact";
			ИначеЕсли структураСтатья.type = Перечисления.ТипИнтернетСтатьи.Страница Тогда
				структураСтатья.type = "page";
			Иначе
				структураСтатья.type = "article";
			КонецЕсли;
		КонецЕсли;
		
		//Если НЕ структураСтатья.type = "contact" Тогда Продолжить; КонецЕсли;
		//Если НЕ (структураСтатья.guid = HTTP.ПолучитьОбъектПоСсылке(Справочники.ИнтернетКонтакты, "937e7065-8dea-11e0-8020-0015175303fd", "") ИЛИ Инд < 2) Тогда Продолжить; КонецЕсли;
		
		// Добавим родителей
		Если Не структураСтатья.category.Пустая() Тогда
			мРодителей = ПолучитьМассивЗначенийИзТаблицы(Родители, Отбор, ПоляРодителей);
			Если структураСтатья.type = "contact" Тогда
				мРодителей.Вставить(0, Новый Структура("category_guid, link_title, link_text", структураСтатья.category, структураСтатья.category.Наименование, структураСтатья.category.Наименование));
			ИначеЕсли структураСтатья.type = "page" Тогда
				мРодителей = Новый Массив;
			Иначе
				мРодителей.Вставить(0, Новый Структура("category_guid, link_title, link_text", структураСтатья.category, структураСтатья.category.title_for_link, структураСтатья.category.link_text));
		    КонецЕсли;
			структураСтатья.categories = мРодителей; КонецЕсли;
		структураСтатья.Удалить("category");
		
		// Картинки
		
		Если НЕ структураСтатья.image = Неопределено Тогда
			структураСтатья.image = структураСтатья.image.Получить();
		КонецЕсли;
		
		// Заполним описания для контактов
		Если структураСтатья.type = "contact" Тогда
			//ПроизвольныйHTML
			// Телефоны
			// Почта
			// СлужбыСообщений
			текстКонтактов = "";
			
			Если ЗначениеЗаполнено(структураСтатья.guid.Адрес) Тогда
				текстКонтактов = ТекстКонтактов(структураСтатья.guid);
				
				short_text = текстКонтактов;
			Иначе
				short_text = структураСтатья.guid.ПроизвольныйHTML;
			КонецЕсли;
			
			long_text = ?(ЗначениеЗаполнено(текстКонтактов), текстКонтактов, ТекстКонтактов(структураСтатья.guid)) + "<br>" + структураСтатья.guid.ПроизвольныйHTML;
			
			// Добавляем карту
			ДобавитьСхемуПроезда(структураСтатья.guid, long_text);
			
			структураСтатья.short_text = short_text;
			структураСтатья.long_text  = long_text;
			структураСтатья.description = структураСтатья.short_text;
		КонецЕсли;
		
		// Запомним
		
		Статьи.Добавить(структураСтатья); КонецЦикла;
	
	Возврат ЗначениеВозврата(Статьи);
	
КонецФункции

Функция ПолучитьАкции(Параметры, стрОшибки = "") Экспорт
	
	// Получим параметры
	
	СсылкаАкции	= ?(Параметры.Свойство("Ссылка"), 	Параметры.Ссылка,	Неопределено);
	Гуиды		= ?(Параметры.Свойство("guids"), 	Параметры.guids, 	Неопределено);
	
	ДопФильтр = "";
	Если Гуиды = Неопределено ИЛИ ПустаяСтрока(Гуиды) ИЛИ (ТипЗнч(Гуиды) = Тип("Структура") И НЕ ЗначениеЗаполнено(Гуиды)) Тогда
		ДопФильтр = "Спр.Ссылка.ВыгружатьНаСайт";
	КонецЕсли;
	
	МассивСсылок = Новый Массив;
	
	Если НЕ СсылкаАкции = Неопределено Тогда
		МассивСсылок.Добавить(СсылкаАкции);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Гуиды) Тогда
		
		Если ТипЗнч(Гуиды) = Тип("Массив") Тогда
			Для каждого гуид Из Гуиды Цикл
				массивСсылок.Добавить(HTTP.ПолучитьОбъектПоСсылке(Документы.Акция, гуид, стрОшибки));
			КонецЦикла;
		Иначе
			массивСсылок.Добавить(HTTP.ПолучитьОбъектПоСсылке(Документы.Акция, Гуиды, стрОшибки));
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МассивСсылок) Тогда
		ДопФильтр = ?(ПустаяСтрока(ДопФильтр), "", ДопФильтр + " И ") + "Спр.Ссылка В (&МассивСсылок)";
	КонецЕсли;
	
#Область Текст_запроса
	
	Запрос = Новый Запрос("
	
	|ВЫБРАТЬ
	|	Спр.Ссылка					guid,
	|	0 							sorting_weight,
	|	Спр.ВариантСкидки,
	|	Спр.ВариантРасчета,
	|	Спр.ДатаНачала				start,
	|	Спр.ДатаОкончания			end,
	|	Спр.НаименованиеИнтернет	name,
	|	ВЫБОР КОГДА Спр.title = """" ТОГДА Спр.НаименованиеИнтернет ИНАЧЕ Спр.title КОНЕЦ title,
	|	ВЫБОР КОГДА Спр.h1 = """" ТОГДА Спр.НаименованиеИнтернет ИНАЧЕ Спр.h1 КОНЕЦ h1,
	|	Спр.alies					alies,
	|	Спр.meta_keywords			meta_keywords,
	|	Спр.meta_description		meta_description,
	|	Спр.Описание 				description,
	|	Спр.Картинка				image,
	|
	|	Спр.ПометкаУдаления,
	|	Спр.ВыгружатьНаСайт
	|ИЗ 		
	|	Документ.Акция КАК Спр
	|" + ?(ПустаяСтрока(ДопФильтр), "", "ГДЕ " + ДопФильтр) + "
	|;
	
	// Товары
	
	|ВЫБРАТЬ
	|	Ссылка 			Акция,
	|	Номенклатура	product_guid,
	|	Упаковка 		packing_guid,
	|	ТипЦен			price_type_guid,
	|	ПроцентСкидки	discount,
	|	НоваяЦена * (ЕСТЬNULL(ВалЦен.Курс, 1) * ЕСТЬNULL(ВалТек.Кратность, 1)) / (ЕСТЬNULL(ВалТек.Курс, 1) * ЕСТЬNULL(ВалЦен.Кратность, 1)) price,
	|	Цена * (ЕСТЬNULL(ВалЦен.Курс, 1) * ЕСТЬNULL(ВалТек.Кратность, 1)) / (ЕСТЬNULL(ВалТек.Курс, 1) * ЕСТЬNULL(ВалЦен.Кратность, 1))		base_price
	|ИЗ
	|	Документ.Акция.Товары КАК Спр
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата) ВалЦен
	|ПО Выбор когда Спр.Ссылка.Валюта = Значение(Справочник.Валюты.ПустаяСсылка) тогда ТипЦен.Валюта иначе Спр.Ссылка.Валюта Конец = ВалЦен.Валюта
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата) ВалТек 
	|ПО  ТипЦен.Валюта = ВалТек.Валюта
	|
	|ГДЕ
	|	 Спр.Номенклатура.Производитель = &КлючСайта
	|" + ?(ПустаяСтрока(ДопФильтр), "", " И " + ДопФильтр) + "
	|
	|;
	
	// Пользователи
	
	|ВЫБРАТЬ
	|	Спр.Ссылка 			Акция,
	|	Пользователи.Ссылка	user_guid
	|ИЗ
	|	Документ.Акция.Участники КАК Спр
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.ПользователиИнтернет КАК Пользователи
	|ПО
	|	ВЫБОР 
	|		КОГДА Спр.Участник ССЫЛКА Справочник.Контрагенты 
	|		ТОГДА Спр.Участник = Пользователи.Контрагент 
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|ГДЕ НЕ Пользователи.Ссылка Есть NULL" + ?(ПустаяСтрока(ДопФильтр), "", " И " + ДопФильтр) + "
	|	И Пользователи.СайтИсточник = Значение(Перечисление.Сайты.licota)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Спр.Ссылка 			Акция,
	|	Пользователи.Ссылка	user_guid
	|ИЗ
	|	Документ.Акция.Участники КАК Спр
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.ГруппыПартнеров.Состав КАК Группа
	|ПО
	|	ВЫБОР 
	|		КОГДА НЕ Спр.Участник ССЫЛКА Справочник.Контрагенты 
	|		ТОГДА Спр.Участник = Группа.Ссылка
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.ПользователиИнтернет КАК Пользователи
	|ПО
	|	Группа.Контрагент = Пользователи.Контрагент 
	|ГДЕ НЕ Пользователи.Ссылка Есть NULL" + ?(ПустаяСтрока(ДопФильтр), "", " И " + ДопФильтр) + "
	|	И Пользователи.СайтИсточник = Значение(Перечисление.Сайты.licota)
	|");
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("КлючСайта", КэшируемыеФункции.ПолучитьКлючСайтаЛикота());
	Если ЗначениеЗаполнено(МассивСсылок) Тогда
		Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок) 
	КонецЕсли;
	
#КонецОбласти
	
	Пакеты 		= Запрос.ВыполнитьПакет();
	Акции 	= Новый Массив;
	Таблица		= Пакеты[0].Выгрузить(); ПослИнд = Таблица.Количество() - 1;
	Товары		= Пакеты[1].Выгрузить(); ПоляТоваров = ПолучитьПоляДляСтруктуры("Акция", Товары.Колонки);
	Пользователи= Пакеты[2].Выгрузить(); ПоляПользователей = ПолучитьПоляДляСтруктуры("Акция", Пользователи.Колонки);
	
	УстановитьИндексыТаблицам("Акция", Товары, Пользователи);
	
	Для Инд = 0 По ПослИнд Цикл
		
		// Получим категорию
		
		структураАкции 	= КонвертацияТипов.ПолучитьСтруктуруИзСТрокиТаблицыЗначений(Таблица, Инд);
		Отбор			= Новый Структура("Акция", структураАкции.guid);
		
		структураАкции.Вставить("items", ПолучитьМассивЗначенийИзТаблицы(Товары, Отбор, ПоляТоваров));
		структураАкции.Вставить("users", ПолучитьМассивЗначенийИзТаблицы(Пользователи, Отбор, ПоляПользователей));
		
		Если структураАкции.guid.Участники.Количество() И НЕ структураАкции.users.Количество() Тогда
			Продолжить;
		КонецЕсли;
		
		//ВариантСкидки
		type_of_discount = 0;
		Если структураАкции.ВариантСкидки = Перечисления.ВариантСкидки.Процент Тогда
			type_of_discount = 1;
		ИначеЕсли структураАкции.ВариантСкидки = Перечисления.ВариантСкидки.Товар Тогда
			type_of_discount = 2;
		ИначеЕсли структураАкции.ВариантСкидки = Перечисления.ВариантСкидки.Цена Тогда
			type_of_discount = 3;
		КонецЕсли;
		
		//ВариантРасчета
		type_of_price = 0;
		Если структураАкции.ВариантРасчета = Перечисления.ВариантРасчетаЦеныПоАкции.Авто Тогда
			type_of_price = 1;
		ИначеЕсли структураАкции.ВариантРасчета = Перечисления.ВариантРасчетаЦеныПоАкции.СкидкаПоАкции Тогда
			type_of_price = 2;
		ИначеЕсли структураАкции.ВариантРасчета = Перечисления.ВариантРасчетаЦеныПоАкции.СкидкиСуммируются Тогда
			type_of_price = 3;
		КонецЕсли;
		
		структураАкции.Вставить("type_of_discount", type_of_discount);
		структураАкции.Вставить("type_of_price", type_of_price);
		
		структураАкции.Удалить("ВариантСкидки");
		структураАкции.Удалить("ВариантРасчета");
		
		// Картинки
		
		Если НЕ структураАкции.image = Неопределено Тогда
			структураАкции.image = структураАкции.image.Получить();
		КонецЕсли;
		
		Акции.Добавить(структураАкции); 
	КонецЦикла;
	
	Возврат ЗначениеВозврата(Акции);
	
КонецФункции // ПолучитьАкции

Функция ТекстКонтактов(ИнтернетКонтакт)
	текстКонтактов = "<dl class=""info adress"">";
	текстКонтактов = текстКонтактов + "<dt>Адрес:</dt>";
	текстКонтактов = текстКонтактов + "<dd class=""description"">" + ИнтернетКонтакт.Адрес + "</dd>";
	
	// Телефоны
	Для каждого стрКонтакта Из ИнтернетКонтакт.Телефоны Цикл
		текстКонтактов = текстКонтактов + "<dt>" + стрКонтакта.ВидТелефона + ":</dt>";
		текстКонтактов = текстКонтактов + "<dd class=""description"">" + стрКонтакта.Телефон + "</dd>";
	КонецЦикла;
	
	// Email
	Если ИнтернетКонтакт.Почта.Количество() > 0 Тогда
		текстКонтактов = текстКонтактов + "<dt>email:</dt>";
	КонецЕсли;
	адресаПочты = "";
	Для каждого стрКонтакта Из ИнтернетКонтакт.Почта Цикл
		адресаПочты = адресаПочты + ?(ЗначениеЗаполнено(адресаПочты), ", ", "") + стрКонтакта.Почта;
	КонецЦикла;
	Если ЗначениеЗаполнено(адресаПочты) Тогда
		текстКонтактов = текстКонтактов + "<dd class=""description"">" + адресаПочты + "</dd>";
	КонецЕсли;
	
	// Skype, ICQ
	Для каждого стрКонтакта Из ИнтернетКонтакт.СлужбыСообщений Цикл
		текстКонтактов = текстКонтактов + "<dt>" + стрКонтакта.ИмяСлужбы + ":</dt>";
		текстКонтактов = текстКонтактов + "<dd class=""description"">" + стрКонтакта.Контакт + "</dd>";
	КонецЦикла;
	
	текстКонтактов = текстКонтактов + "</dl>";
	
	Возврат текстКонтактов;
КонецФункции // ТекстКонтактов()
Функция ДобавитьСхемуПроезда(ИнтернетКонтакт, long_text)
	Если ЗначениеЗаполнено(ИнтернетКонтакт.СсылкаНаКарту) Тогда
		long_text = long_text + Символы.ПС + ИнтернетКонтакт.СсылкаНаКарту;
		
		Возврат Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИнтернетКонтакт.Адрес) Тогда
		Возврат Истина;
	КонецЕсли;
	
	
	long_text = long_text + "<script src=""http://api-maps.yandex.ru/2.0-stable/?load=package.standard&amp;lang=ru-RU"" type=""text/javascript""></script>";
	long_text = long_text + "<div id=""map""></div>";
	long_text = long_text + "
	|<script type=""text/javascript"">
	|  //<![CDATA[
	|    ymaps.ready(init);
	|    
	|    function init() {
	|        ymaps.geocode('" + ИнтернетКонтакт.Адрес + "', { results: 1 }).then(function (res) {
	|            var firstGeoObject = res.geoObjects.get(0),
	|                myMap = new ymaps.Map(""map"", {
	|                    center: firstGeoObject.geometry.getCoordinates(),
	|                    zoom: 15
	|                });
	|    
	|            myMap.container.fitToViewport();
	|            myMap.geoObjects.add(res.geoObjects.get(0));
	|            myMap.controls.add('zoomControl', { left: 5, top: 5 }).add('typeSelector').add('mapTools', { left: 35, top: 5 });
	|            attachReverseGeocode(myMap);
	|    
	|        }, function (err) {
	|            alert(err.message);
	|        });
	|    
	|    }
	|  //]]>
	|</script>";
КонецФункции // ДобавитьСхемуПроезда()

Функция ПолучитьПроизводителей(Параметры, стрОшибки = "") Экспорт
	
	// Получим параметры
	
	Ссылка 	= ?(Параметры.Свойство("Ссылка"), 				Параметры.Ссылка, 				Неопределено);
	guids 	= ?(Параметры.Свойство("guid_manafacture"), 	Параметры.guid_manafacture, 	Неопределено);
	
	массивСсылок = Новый Массив;
	Если НЕ Ссылка = Неопределено Тогда
		массивСсылок.Добавить(Ссылка);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(guids) Тогда
		Если ТипЗнч(guids) = Тип("Массив") Тогда
			Для каждого гуид Из guids Цикл
				массивСсылок.Добавить(HTTP.ПолучитьОбъектПоСсылке(Справочники.Производители, гуид, стрОшибки));
			КонецЦикла;
		ИначеЕсли ТипЗнч(guids) = Тип("Строка") Тогда
			массивСсылок.Добавить(HTTP.ПолучитьОбъектПоСсылке(Справочники.Производители, guids, стрОшибки));
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Спр.Ссылка				guid,
	//|	ВЫБОР КОГДА Спр.sorting_weight = 0 ТОГДА ""null"" ИНАЧЕ Спр.sorting_weight КОНЕЦ sorting_weight,
	|	Спр.sorting_weight,
	|	Спр.h1, 
	|	Спр.Наименование 		name,
	|	Спр.Описание 			description,
	|	Спр.meta_keywords,
	|	Спр.meta_description,
	|	Спр.Страна.Наименование	country,
	|	Ранг 					manufacture_rank,
	|
	|	Спр.ПометкаУдаления,
	|	ИСТИНА ВыгружатьНаСайт
	|ИЗ
	|	Справочник.Производители Спр
	|ГДЕ 
	|	НЕ ПометкаУдаления
	|" + ?(ЗначениеЗаполнено(массивСсылок), "И Ссылка В (&массивСсылок)", "") + "
	|
	|;
	|ВЫБРАТЬ
	|	Табл.Ссылка		 					Производитель,
	|	Табл.НомерСтроки 					sorting_weight,
	|	Табл.Сертификат.Наименование		title,
	|	Табл.Сертификат.Картинка			image,
	|	Табл.Сертификат.Текст				text
	|ИЗ 		
	|	Справочник.Производители.Сертификаты КАК Табл
	|ГДЕ
	|	НЕ Табл.Ссылка.ПометкаУдаления
	|" + ?(ЗначениеЗаполнено(массивСсылок), "И Ссылка В (&массивСсылок)", "") + "
	|УПОРЯДОЧИТЬ ПО
	|	Табл.НомерСтроки
	|");
	
	Запрос.УстановитьПараметр("массивСсылок", массивСсылок);
	
	Пакеты 			= Запрос.ВыполнитьПакет();
	Таблица			= Пакеты[0].Выгрузить(); ПослИнд = Таблица.Количество() - 1;
	Сертификаты		= Пакеты[1].Выгрузить(); ПоляСертификаты = ПолучитьПоляДляСтруктуры("Производитель", Сертификаты.Колонки);
	
	УстановитьИндексыТаблицам("Производитель", Сертификаты);
	
	массивОбъектов = Новый Массив;
	Для Инд = 0 По ПослИнд Цикл
		лПроизводитель = КонвертацияТипов.ПолучитьСтруктуруИзСТрокиТаблицыЗначений(Таблица, Инд);
		
		Отбор = Новый Структура("Производитель", лПроизводитель.guid);
		лПроизводитель.Вставить("certificates", ПолучитьМассивЗначенийИзТаблицы(Сертификаты, Отбор, ПоляСертификаты));
		
		массивОбъектов.Добавить(лПроизводитель);
	КонецЦикла;
	
	Возврат ЗначениеВозврата(массивОбъектов);
КонецФункции
Функция ПолучитьСклады(Параметры, стрОшибки = "") Экспорт
	
	// Получим параметры
	
	Ссылка 	= ?(Параметры.Свойство("Ссылка"),	Параметры.Ссылка,	Неопределено);
	guids 	= ?(Параметры.Свойство("guids"), 	Параметры.guids, 	Неопределено);
	
	массивСсылок = Новый Массив;
	Если НЕ Ссылка = Неопределено Тогда
		массивСсылок.Добавить(Ссылка);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(guids) Тогда
		Если ТипЗнч(guids) = Тип("Массив") Тогда
			Для каждого гуид Из guids Цикл
				массивСсылок.Добавить(HTTP.ПолучитьОбъектПоСсылке(Справочники.Склады, гуид, стрОшибки));
			КонецЦикла;
		ИначеЕсли ТипЗнч(guids) = Тип("Строка") Тогда
			массивСсылок.Добавить(HTTP.ПолучитьОбъектПоСсылке(Справочники.Склады, guids, стрОшибки));
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Спр.Ссылка					guid,
	|	ВЫБОР КОГДА НаименованиеИнтернет = """" ТОГДА Наименование ИНАЧЕ НаименованиеИнтернет КОНЕЦ	title,
	|	ДополнительноеНаименование 	title_full,
	|	СсылкаНаКарту 				map,
	|	Адрес 						adress,
	|	НаСайтеНеПоказыватьВсем		for_dealer,
	|	РазрешеноПолучениеТовараПриСамовывозе for_pickup,
	|
	|	Спр.ПометкаУдаления,
	|	Спр.ВыгружатьНаСайт
	|ИЗ
	|	Справочник.Склады Спр
	|ГДЕ 
	|	НЕ ПометкаУдаления 
	|" + ?(ЗначениеЗаполнено(массивСсылок), "И Ссылка В (&массивСсылок)", "") + "
	|	И ВыгружатьНаСайт
	|");
	
	Запрос.УстановитьПараметр("массивСсылок", массивСсылок);
	
	Возврат ЗначениеВозврата(КонвертацияТипов.ПолучитьМассивИзТаблицыЗначений(Запрос.Выполнить().Выгрузить()));
КонецФункции

Функция ПолучитьКоличествоТоваровВВыборке(Параметры, стрОшибки = "") Экспорт
	
	Перем СсылкаРодитель;
	
	guid_category = ?(Параметры.Свойство("guid_category"), Параметры.guid_category, Неопределено);
	
	Если ЗначениеЗаполнено(guid_category) Тогда
		
		СсылкаРодитель = HTTP.ПолучитьОбъектПоСсылке(Справочники.Номенклатура, guid_category, стрОшибки); Если СсылкаРодитель = Неопределено Тогда Возврат "" КонецЕсли;
		
		Если Не СсылкаРодитель.ЭтоГруппа Тогда
			стрОшибки = "Гуид родительской категории относится к товару.
			|Гуид: " + guid_category + "
			|Товар: " + Строка(СсылкаРодитель); Возврат Неопределено; КонецЕсли; КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(Ссылка) КАК Количество,
	|	МИНИМУМ(ПорядковыйНомер) КАК МинимальныйИД,
	|	МАКСИМУМ(ПорядковыйНомер) КАК МаксимальныйИД
	|ИЗ 		
	|	Справочник.Номенклатура
	|ГДЕ 
	|	НЕ ЭтоГруппа И
	|	ВыгружатьНаСайт
	|	И Производитель = &КлючСайта
	|" + ?(СсылкаРодитель = Неопределено,"","И Ссылка В ИЕРАРХИИ(&Родитель)") + "
 	|");
	
	Запрос.УстановитьПараметр("Родитель", СсылкаРодитель);
	Запрос.УстановитьПараметр("КлючСайта", КэшируемыеФункции.ПолучитьКлючСайтаЛикота());
	Выполнение = Запрос.Выполнить();
	Если Выполнение.Пустой() Тогда
		
		Возврат Новый Структура("Min, Max, Coun");
		
	Иначе
		
		Выборка = Выполнение.Выбрать();
		Выборка.Следующий();
		Возврат Новый Структура("Min, Max, Count", Выборка.МинимальныйИД, Выборка.МаксимальныйИД, Выборка.Количество); КонецЕсли;
	
КонецФункции

Функция ПолучитьТипыЦен(Параметры, стрОшибки = "") Экспорт
	
	Гуиды 	= ?(Параметры.Свойство("guids"), 	Параметры.guids, 	Неопределено);
	
	массивСсылок = Новый Массив;
	
	Если ЗначениеЗаполнено(Гуиды) Тогда
		Если ТипЗнч(Гуиды) = Тип("Массив") Тогда
			Для каждого гуид Из Гуиды Цикл
				массивСсылок.Добавить(HTTP.ПолучитьОбъектПоСсылке(Справочники.ТипыЦен, гуид, стрОшибки));
			КонецЦикла;
		ИначеЕсли ТипЗнч(Гуиды) = Тип("Строка") Тогда
			массивСсылок.Добавить(HTTP.ПолучитьОбъектПоСсылке(Справочники.ТипыЦен, Гуиды, стрОшибки));
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ Ссылка guid, Наименование title, Валюта.Наименование currency ИЗ Справочник.ТипыЦен ГДЕ ВыгружатьНаСайт И НЕ ПометкаУдаления
	|" + ?(ЗначениеЗаполнено(массивСсылок), " И Ссылка В (&массивСсылок)", ""));
	
	Если ЗначениеЗаполнено(массивСсылок) Тогда 
		Запрос.УстановитьПараметр("массивСсылок", массивСсылок);
	КонецЕсли;
		
	Возврат ЗначениеВозврата(КонвертацияТипов.ПолучитьМассивИзТаблицыЗначений(Запрос.Выполнить().Выгрузить()));
	
КонецФункции

Функция ПолучитьВидыОплат(Параметры, стрОшибки = "") Экспорт
	
	Гуиды 	= ?(Параметры.Свойство("guids"), 	Параметры.guids, 	Неопределено);
	
	массивСсылок = Новый Массив;
	
	Если ЗначениеЗаполнено(Гуиды) Тогда
		Если ТипЗнч(Гуиды) = Тип("Массив") Тогда
			Для каждого гуид Из Гуиды Цикл
				массивСсылок.Добавить(HTTP.ПолучитьОбъектПоСсылке(Справочники.ВидОплатыИнтернетЗаказа, гуид, стрОшибки));
			КонецЦикла;
		ИначеЕсли ТипЗнч(Гуиды) = Тип("Строка") Тогда
			массивСсылок.Добавить(HTTP.ПолучитьОбъектПоСсылке(Справочники.ВидОплатыИнтернетЗаказа, Гуиды, стрОшибки));
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ Ссылка guid, Наименование name, kind_payment_code alias ИЗ Справочник.ВидОплатыИнтернетЗаказа
	|" + ?(ЗначениеЗаполнено(массивСсылок), " ГДЕ Ссылка В (&массивСсылок)", ""));
	
	Если ЗначениеЗаполнено(массивСсылок) Тогда 
		Запрос.УстановитьПараметр("массивСсылок", массивСсылок);
	КонецЕсли;
		
	Возврат КонвертацияТипов.ПолучитьМассивИзТаблицыЗначений(Запрос.Выполнить().Выгрузить());
	
КонецФункции

Функция СоздатьЗапросНаУточнениеОстатка(requestJson, стрОшибки = "") Экспорт
	
	лЗапрос = w1_Json.UnJSON(requestJson);
	
	//{product_guid,user_guid,id,phone,email,name}
	
	Заявка = Документы.ИнтернетЗапросНаУточнениеОстатка.СоздатьДокумент();
	Заявка.Дата = ТекущаяДата();
	
	СсылкаИнтернетПользователь = ?(лЗапрос.Свойство("user_guid"), HTTP.ПолучитьОбъектПоСсылке(Справочники.ПользователиИнтернет, лЗапрос.user_guid, стрОшибки), Неопределено);
	СсылкаТовар = ?(лЗапрос.Свойство("product_guid"), HTTP.ПолучитьОбъектПоСсылке(Справочники.Номенклатура, лЗапрос.product_guid, стрОшибки), Неопределено);
	
	Заявка.Пользователь = СсылкаИнтернетПользователь;
	Заявка.Товар		= СсылкаТовар;
	
	лЗапрос.Свойство("id"		, Заявка.id);
	лЗапрос.Свойство("name"		, Заявка.ИмяПользователя);
	лЗапрос.Свойство("email"	, Заявка.Почта);
	лЗапрос.Свойство("phone"	, Заявка.Телефон);
	лЗапрос.Свойство("region"	, Заявка.Регион);
		
	Заявка.ДополнительныеСвойства.Вставить("Обновление", Ложь); // сайт не пинать
	Заявка.УстановитьНовыйНомер();
	Заявка.ОбменДанными.Загрузка = Истина;
 	Попытка
		Заявка.Записать();
	Исключение
		стрОшибки = ОписаниеОшибки();
		стрОшибки = "Ошибка при записи интернет запроса" + Символы.ПС + стрОшибки;
		ЗаписьЖурналаРегистрации("API2.check_available", УровеньЖурналаРегистрации.Ошибка, , , стрОшибки);
		Возврат "";
	КонецПопытки;
	
	Результат = Новый Структура("id", Заявка.id);
	
	Возврат w1_Json.JSON(Результат, Истина);
КонецФункции
#КонецОбласти

#Область Вспомогательные_функции

Функция ПолучитьСтруктуруИзJSON(json, стрОшибки)
	
	Попытка
		Структура = w1_Json.UnJSON(json);
	Исключение
		стрОшибки = "Не удалось сконвертировать json строку в структуру
		|Json строка: " + json;
		Возврат Неопределено; КонецПопытки;
	
	Если Структура = Неопределено Или Не Структура.Количество() Тогда
		стрОшибки = "Не удалось получить структуру из строки json
		|json: " + json; КонецЕсли;
	
	Возврат Структура;
	
КонецФункции
Процедура ДобавитьОписаниеОшибки(стрОшибки, ОписаниеОшибки)
	
	стрОшибки = Строка(стрОшибки) + ?(стрОшибки = "","","
	|") + ОписаниеОшибки;
	
КонецПроцедуры

Функция УдалитьОбъект(Менеджер, ГуидСтрока, стрОшибки)
	
	Ссылка = HTTP.ПолучитьОбъектПоСсылке(Менеджер, ГуидСтрока, стрОшибки); Если Ссылка = Неопределено Тогда Возврат Ложь КонецЕсли;
	
	Объект = Ссылка.ПолучитьОбъект();
	
	Попытка
		Объект.УстановитьПометкуУдаления();
	Исключение
		опОшибки = ОписаниеОшибки();
		стрОшибки = "Ошибка при установки пометки удаления
		|" + опОшибки;
		Возврат Ложь; КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Процедура УстановитьРеквизитГуидИзСтруктуры(Менеджер, ИмяВОбъекте, ИмяВСтруктуре, Структура, Объект, Изменился, стрОшибки)
	
	Перем стрГуид;
	
	Если Структура.Свойство(ИмяВСтруктуре, стрГуид) Тогда
	
		Ссылка = HTTP.ПолучитьОбъектПоСсылке(Менеджер, стрГуид, стрОшибки); Если Ссылка = Неопределено Тогда Возврат КонецЕсли;
		
		Если Объект[ИмяВОбъекте] <> Ссылка Тогда
			
			Объект[ИмяВОбъекте] = Ссылка;
			Изменился = Истина; КонецЕсли; КонецЕсли;
	
КонецПроцедуры
Процедура УстановитьРеквизитИзСтруктуры(ИмяВОбъекте, ИмяВСтруктуре, Структура, Объект, Изменился)
	
	Перем Значение;
	
	Если Структура.Свойство(ИмяВСтруктуре, Значение) Тогда
	
		Если Объект[ИмяВОбъекте] <> Значение Тогда
		
			Объект[ИмяВОбъекте] = Значение;
			Изменился = Истина; КонецЕсли; КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьМассивЗначенийИзТаблицы(Таблица, СтруктураПоиска, ПоляКолонок)
	
	массив = Новый Массив;
	
	Строки = Таблица.НайтиСтроки(СтруктураПоиска);
	Для Каждого Строка Из Строки Цикл НовЭлемент = Новый Структура(ПоляКолонок); ЗаполнитьЗначенияСвойств(НовЭлемент, Строка); массив.Добавить(НовЭлемент); КонецЦикла;

	Возврат массив;
	
КонецФункции

Процедура УстановитьИндексыТаблицам(ИмяПолей, Табл1, 
	Табл2 = Неопределено, 
	Табл3 = Неопределено, 
	Табл4 = Неопределено, 
	Табл5 = Неопределено, 
	Табл6 = Неопределено, 
	Табл7 = Неопределено, 
	Табл8 = Неопределено, 
	Табл9 = Неопределено, 
	Табл10 = Неопределено, 
	Табл11 = Неопределено)
	
	Табл1.Индексы.Добавить(ИмяПолей);
	Если Табл2 <> Неопределено Тогда Табл2.Индексы.Добавить(ИмяПолей) КонецЕсли;
	Если Табл3 <> Неопределено Тогда Табл3.Индексы.Добавить(ИмяПолей) КонецЕсли;
	Если Табл4 <> Неопределено Тогда Табл4.Индексы.Добавить(ИмяПолей) КонецЕсли;
	Если Табл5 <> Неопределено Тогда Табл5.Индексы.Добавить(ИмяПолей) КонецЕсли;
	Если Табл6 <> Неопределено Тогда Табл6.Индексы.Добавить(ИмяПолей) КонецЕсли;
	Если Табл7 <> Неопределено Тогда Табл7.Индексы.Добавить(ИмяПолей) КонецЕсли;
	Если Табл8 <> Неопределено Тогда Табл8.Индексы.Добавить(ИмяПолей) КонецЕсли;
	Если Табл9 <> Неопределено Тогда Табл9.Индексы.Добавить(ИмяПолей) КонецЕсли;
	Если Табл10 <> Неопределено Тогда Табл10.Индексы.Добавить(ИмяПолей) КонецЕсли;
	Если Табл11 <> Неопределено Тогда Табл11.Индексы.Добавить(ИмяПолей) КонецЕсли;
	
КонецПроцедуры
Функция ПолучитьПоляДляСтруктуры(ИмяПоляПоиска, Колонки)
	
	Структура = КонвертацияТипов.ПолучитьПустуюСтруктуруИзКолонокТаблицыЗначений(Колонки); 
	Структура.Удалить(ИмяПоляПоиска);
	Возврат КонвертацияТипов.ПолучитьСтрокуИзМассива(КонвертацияТипов.ПолучитьМассивИзКлючейСтруктуры(Структура));
	
КонецФункции

Функция ПолучитьМассивСвойствПоФорматAPI(ТаблицаСвойств)
	
	новМассив = Новый Массив;
	Для Каждого Строка ИЗ ТаблицаСвойств Цикл новМассив.Добавить(Новый Структура("guid, value", Строка.Свойство, СокрЛП(Строка.Значение))); КонецЦикла;
	
	Возврат новМассив;
	
КонецФункции

Функция ЗначениеВозврата(пЭлементы)
	Если пЭлементы.Количество() = 0 Тогда
		//Возврат Новый Структура("ВыгружатьНаСайт, ПометкаУдаления, guid", Ложь, Ложь, Неопределено);
		Возврат Новый Структура;
	ИначеЕсли пЭлементы.Количество() = 1 Тогда
		Возврат пЭлементы[0];
	КонецЕсли;
	
	Возврат пЭлементы;
КонецФункции // ЗначениеВозврата()
#КонецОбласти

#Область ПодпискиНаСобытия

Функция ЗаполнитьИзмененияОбъекта(новОбъект, текОбъект, стОбъект, ДобавлятьПринудительно = Ложь)
	
	// Содает повторную структуру в которой есть только измененные поля
	// от старого объекта
	//
	// Возвр ИСТИНА если было заполнение структуры изза изменений
	// и ЛОЖЬ если изменений не было
	//
	// Массив: Если есть изменения, то пишутся все данные массива
	
	Добавлено = Ложь;
	
	Для Каждого Элемент Из текОбъект Цикл
		
		Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
			
			Добавлять 		= Ложь;
			новМассив 		= Новый Массив;
			
			Если НЕ стОбъект.Свойство(Элемент.Ключ) ИЛИ НЕ ЗначениеЗаполнено(стОбъект[Элемент.Ключ]) ИЛИ Элемент.Значение.Количество() <> стОбъект[Элемент.Ключ].Количество() Тогда
				
				// Раз разное количество элементов то тупо забиваем все элементы как измененные
				
				Для Каждого ЭлМассива Из Элемент.Значение Цикл новМассив.Добавить(ЭлМассива); КонецЦикла;
				
				Добавлено = Истина;
				новОбъект.Вставить(Элемент.Ключ, новМассив);
				
			Иначе Инд = -1;
				
				Для Каждого ЭлМассива Из Элемент.Значение Цикл Инд = Инд + 1;
					новСтруктураМассива = Новый Структура;
					Если ЗаполнитьИзмененияОбъекта(новСтруктураМассива, ЭлМассива, стОбъект[Элемент.Ключ][Инд], ДобавлятьПринудительно) Тогда
						Добавлять = Истина;
						Прервать КонецЕсли; КонецЦикла; КонецЕсли;
			
			Если Добавлять Тогда Инд = -1; // Заполняем всеми независимо изменилось или нет
				
				Для Каждого ЭлМассива Из Элемент.Значение Цикл Инд = Инд + 1;
					новСтруктураМассива = Новый Структура;
					ЗаполнитьИзмененияОбъекта(новСтруктураМассива, ЭлМассива, стОбъект[Элемент.Ключ][Инд], Истина);
					новМассив.Добавить(новСтруктураМассива); КонецЦикла;
				
				Добавлено = Истина;
				новОбъект.Вставить(Элемент.Ключ, новМассив); КонецЕсли;
			
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
			
			новСтруктура = Новый Структура; 
			Если ЗаполнитьИзмененияОбъекта(новСтруктура, Элемент.Значение, ?(стОбъект.свойство(Элемент.Ключ), стОбъект[Элемент.Ключ], Новый Структура), ДобавлятьПринудительно) Тогда
				Добавлено = Истина;
				новОбъект.Вставить(Элемент.Ключ, новСтруктура); КонецЕсли;
			
		ИначеЕсли ДобавлятьПринудительно Или Не стОбъект.Свойство(Элемент.Ключ) Или Элемент.Значение <> стОбъект[Элемент.Ключ] Тогда
			
			Добавлено = Истина;
			новОбъект.Вставить(Элемент.Ключ, Элемент.Значение); КонецЕсли; КонецЦикла;
	
	Возврат Добавлено;

КонецФункции
Процедура ДобавитьИзменениеОбъекта(Объект, ДобОбъект, Добавлять = Неопределено) Экспорт 
	Если Добавлять = Неопределено Тогда
		Добавлять = Новый Структура;
	КонецЕсли;
	
	// Добавляет к объекту поля второго объекта
	Для Каждого Элемент Из ДобОбъект Цикл
		Если Объект.Свойство(Элемент.Ключ) И НЕ Добавлять.Свойство(Элемент.Ключ) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
			Если Объект.Свойство(Элемент.Ключ) Тогда
				Для Каждого ЭлМассива Из Элемент.Значение Цикл
					Объект[Элемент.Ключ].Добавить(ЭлМассива);
				КонецЦикла;
			Иначе
				Объект.Вставить(Элемент.Ключ, Элемент.Значение);
			КонецЕсли;
		Иначе
			Объект.Вставить(Элемент.Ключ, Элемент.Значение); 
		КонецЕсли; 
	КонецЦикла;
КонецПроцедуры

Процедура ПередЗаписьюСправочника(Источник, ТипОбъекта, СсылкаСправочник, Отказ) Экспорт
	
	стрОшибки = "";
	
	Если ТипОбъекта = Тип("СправочникОбъект.Контрагенты") Тогда
		ТипОбъекта = Тип("СправочникОбъект.ПользователиИнтернет");
		Запрос = Новый Запрос("Выбрать Ссылка ИЗ Справочник.ПользователиИнтернет ГДЕ Контрагент = &Контрагент И НЕ ПометкаУдаления И НЕ Контрагент = Значение(Справочник.Контрагенты.ПустаяСсылка)");
		Запрос.УстановитьПараметр("Контрагент", СсылкаСправочник);
		выборка = Запрос.Выполнить().Выбрать();
		Если выборка.Следующий() Тогда
			СсылкаСправочник = выборка.Ссылка;
		Иначе 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Закатаем объект до записи
	
	Если ТипОбъекта = Тип("СправочникОбъект.Номенклатура") Тогда
			
		// НОМЕНКЛАТУРА
		
		АдресРесурсаСервера			= ?(Источник.ЭтоГруппа, "/api/product_categories", "/api/products");
		ПараметрыПолученияОбъекта 	= Новый Структура("Очередь, Метод, ПараметрыМетода",
										?(Источник.ЭтоГруппа, 25, 30),
										?(Источник.ЭтоГруппа, "ПолучитьКатегории", "ПолучитьТовары"),
										Новый Структура("Ссылка, БудутЗаписаны", СсылкаСправочник, 
													?(Источник.ДополнительныеСвойства.Свойство("БудутЗаписаны"),
																								Источник.ДополнительныеСвойства.БудутЗаписаны,
																								Неопределено)));
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.ИнтернетСтатьи") Тогда
		
		// СТАТЬИ
		
		АдресРесурсаСервера			= ?(Источник.ЭтоГруппа, "/api/article_categories", "/api/articles");
		ПараметрыПолученияОбъекта 	= Новый Структура("Очередь, Метод, ПараметрыМетода",
										?(Источник.ЭтоГруппа, 15, 20),
										?(Источник.ЭтоГруппа, "ПолучитьКатегорииСтатьи", "ПолучитьСтатьи"),
										Новый Структура("Ссылка, БудутЗаписаны", СсылкаСправочник, 
													?(Источник.ДополнительныеСвойства.Свойство("БудутЗаписаны"),
																								Источник.ДополнительныеСвойства.БудутЗаписаны,
																								Неопределено)));
		
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.ИнтернетКонтакты") Тогда
		
		// КОНТАКТЫ
		
		АдресРесурсаСервера			= ?(Источник.ЭтоГруппа, "/api/article_categories", "/api/articles");
		ПараметрыПолученияОбъекта 	= Новый Структура("Очередь, Метод, ПараметрыМетода",
										?(Источник.ЭтоГруппа, 15, 20),
										?(Источник.ЭтоГруппа, "ПолучитьКатегорииСтатьи", "ПолучитьСтатьи"),
										Новый Структура("Ссылка, БудутЗаписаны", СсылкаСправочник, 
													?(Источник.ДополнительныеСвойства.Свойство("БудутЗаписаны"),
																								Источник.ДополнительныеСвойства.БудутЗаписаны,
																								Неопределено)));
		
		
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.ПользователиИнтернет") Тогда
		
		// ПОЛЬЗОВАТЕЛИ
			
		АдресРесурсаСервера			= "/api/users";
		ПараметрыПолученияОбъекта 	= Новый Структура("Очередь, Метод, ПараметрыМетода", 25, "ПолучитьПользователей", Новый Структура("Ссылка", СсылкаСправочник));
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.Акция") Тогда
		
		// АКЦИИ
		
		АдресРесурсаСервера			= "/api/promos";
		ПараметрыПолученияОбъекта 	= Новый Структура("Очередь, Метод, ПараметрыМетода", 50, "ПолучитьАкции", Новый Структура("Ссылка", СсылкаСправочник));
		
	Иначе Возврат; КонецЕсли; // Не извесный справочник
	
	// Получим текущий объект из базы
	
	Параметры 	= ПараметрыПолученияОбъекта.ПараметрыМетода;
	ОбъектДо 	= Вычислить(ПараметрыПолученияОбъекта.Метод + "(Параметры)");
	
	Если ОбъектДо = Неопределено Тогда
			ОбщиеФункции.СообщитьТекст("Ошибка при помещении объекта в буфер обмена сайта
			|" + стрОшибки); Отказ = Истина; Возврат; КонецЕсли;
	
	Источник.ДополнительныеСвойства.Вставить("APILICOTA_ЗаписатьВБуфер", 
					Новый Структура("Объект, ОбъектСт, КомандаHTTP, АдресРесурсаСервера, ПолучениеОбъекта",
										СсылкаСправочник,
										ОбъектДо,
										Перечисления.КомандыHTTP.POST,
										АдресРесурсаСервера,
										ПараметрыПолученияОбъекта));
КонецПроцедуры
Процедура ЗаписатьОбъектВБуферОтправки(ЗНАЧ ОбъектСсылка, ПараметрыЗаписи, Отказ) Экспорт
	
	Если ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.Контрагенты") Тогда
		ОбъектСсылка = ПараметрыЗаписи.Объект;
	КонецЕсли;
	
	// Получим данные
	
	Параметры 	= ПараметрыЗаписи.ПолучениеОбъекта.ПараметрыМетода;
	Если Параметры.Свойство("БудутЗаписаны") И Параметры.БудутЗаписаны <> Неопределено Тогда 
		Параметры.Вставить("БратьДопТаблицыОтсюда", Параметры.БудутЗаписаны) КонецЕсли;
	
	Если Параметры.Ссылка <> ОбъектСсылка Тогда
		Параметры.Вставить("Ссылка", ОбъектСсылка);
	КонецЕсли;
	
	текОбъект 	= Вычислить(ПараметрыЗаписи.ПолучениеОбъекта.Метод + "(Параметры)");
	стОбъект	= ПараметрыЗаписи.ОбъектСт;
	новОбъект	= Новый Структура;
	
	Если стОбъект.Количество() = 0 Тогда
		стОбъект.Вставить("ВыгружатьНаСайт", Ложь);
		стОбъект.Вставить("ПометкаУдаления", Ложь);
	КонецЕсли;
	Если текОбъект.Количество() = 0 Тогда
		текОбъект.Вставить("ВыгружатьНаСайт", Ложь);
		текОбъект.Вставить("ПометкаУдаления", Ложь);
	КонецЕсли;
	
	Если стОбъект.Свойство("ВыгружатьНаСайт") И текОбъект.Свойство("ВыгружатьНаСайт")
		И НЕ стОбъект.ВыгружатьНаСайт И НЕ текОбъект.ВыгружатьНаСайт Тогда
		Возврат;
	КонецЕсли;
	
	// Вычислим изменения объекта
	
	Если ЗаполнитьИзмененияОбъекта(новОбъект, текОбъект, стОбъект) Тогда
		
		Если новОбъект.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		// Считаем объект из регистра если есть
		
		Запрос = Новый Запрос("ВЫБРАТЬ ТелоЗапроса, АдресРесурсаСервера ИЗ РегистрСведений.БуферКомандДляСайта_API2 ГДЕ Объект = &Объект И СайтНазначения = Значение(Перечисление.Сайты.licota)");
		Запрос.УстановитьПараметр("Объект", ОбъектСсылка);
		Выполнение = Запрос.Выполнить();
		
		// Определим первый суффикс
	
		Если 	Не стОбъект.Свойство("guid") Или 
				(стОбъект.ПометкаУдаления И Не текОбъект.ПометкаУдаления) Или
				(Не стОбъект.ВыгружатьНаСайт И текОбъект.ВыгружатьНаСайт) Тогда Суффикс = "update";
			
		ИначеЕсли 	(Не стОбъект.ПометкаУдаления И текОбъект.ПометкаУдаления) Или
					(стОбъект.ВыгружатьНаСайт И Не текОбъект.ВыгружатьНаСайт) Тогда Суффикс = "delete";
					
		Иначе Суффикс = "update"; КонецЕсли;
				
		//Добавить при удалении в структуру поле destroy. Если true - то удаляем сущность иначе просто отключаем
		Если Суффикс = "delete" Тогда
			новОбъект.Вставить("destroy", Ложь);
		КонецЕсли;
		
		// Сравним считаный с измененным и добавим новые изменения
		
		ПредАдрес = "";
		
		Если Не Выполнение.Пустой() Тогда
			
			Выборка = Выполнение.Выбрать();
			Выборка.Следующий();
			                                                                                                                                    	
			ДобавитьИзменениеОбъекта(новОбъект, ЗначениеИзСтрокиВнутр(Выборка.ТелоЗапроса)); 
			
			// Пред суффикс
			
			ПредСуффикс = ?(Найти(Выборка.АдресРесурсаСервера, "create"), "create", ?(Найти(Выборка.АдресРесурсаСервера, "delete"),"delete","update"));
			
			// Определим новый суффикс
			
			Если ПредСуффикс = "create" И Суффикс = "delete" Тогда 
				
				// такой надо удалять так как не успел пожить
				
				Запись = РегистрыСведений.БуферКомандДляСайта_API2.СоздатьМенеджерЗаписи();
				Запись.Объект = ОбъектСсылка;
				Если Не ОбщиеФункции.УдалитьОбъектИСообщитьЕслиОшибка(Запись) Тогда
					Отказ = Истина КонецЕсли;
				Возврат;
				
			ИначеЕсли ПредСуффикс = "delete" И Суффикс = "create" Тогда	
				Суффикс = "update";
			ИначеЕсли ПредСуффикс = "create" И Суффикс = "update" Тогда
				Суффикс = "create"; КонецЕсли;
			
		КонецЕсли;
		
		Если ОпределитьИмяОбъектаПоТипу(ОбъектСсылка) = "user" Тогда
			новОбъект.Вставить("email", текОбъект.email);
			новОбъект.Вставить("id", текОбъект.id);
		КонецЕсли;
		
		Если Суффикс = "update" И ОпределитьИмяОбъектаПоТипу(ОбъектСсылка) = "product_category" Тогда
			новОбъект.Вставить("parent", текОбъект.parent);
			новОбъект.Вставить("root", текОбъект.root);
			новОбъект.Вставить("additional_parents", текОбъект.additional_parents);
		КонецЕсли;
	
		Если Суффикс = "update" И ОпределитьИмяОбъектаПоТипу(ОбъектСсылка) = "article_category" Тогда
			новОбъект.Вставить("root", текОбъект.root);
			новОбъект.Вставить("categories", текОбъект.categories);
		КонецЕсли;
		
		Если Суффикс = "update" Тогда
			новОбъект.Вставить("enabled", Истина);
		КонецЕсли;
	
		ДополнитьЗависимымиПолями(новОбъект, текОбъект, ОпределитьИмяОбъектаПоТипу(ОбъектСсылка));
		
		// Запишем
		
		Запись = РегистрыСведений.БуферКомандДляСайта_API2.СоздатьМенеджерЗаписи();
		Запись.СайтНазначения		= Перечисления.Сайты.licota;
		Запись.Объект 				= ОбъектСсылка;
		Запись.КомандаHTTP 			= ПараметрыЗаписи.КомандаHTTP;
		Запись.АдресРесурсаСервера 	= ПараметрыЗаписи.АдресРесурсаСервера + "/" + Суффикс;
		Запись.ТипОбъекта 			= ОпределитьИмяОбъектаПоТипу(ОбъектСсылка);
		Запись.ТелоЗапроса			= ЗначениеВСтрокуВнутр(новОбъект);
		Запись.Очередь 				= ПараметрыЗаписи.ПолучениеОбъекта.Очередь;
		Запись.ЕстьОшибка			= Ложь;
		Запись.ДатаИзменений		= ТекущаяДата();
		
		Если Не ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(Запись) Тогда
			Отказ = Истина КонецЕсли; 
	КонецЕсли;
	
	ДобавитьСвязанныеДанныеВБуфер(Новый Структура("Объект, стОбъект, текОбъект, ПараметрыЗаписи", ОбъектСсылка, стОбъект, текОбъект, ПараметрыЗаписи));
	
КонецПроцедуры

Функция ДополнитьЗависимымиПолями(новОбъект, текОбъект, типОбъекта)
	Если типОбъекта = "product" И (новОбъект.Свойство("complectation_string") ИЛИ новОбъект.Свойство("complectation")) Тогда
		Если НЕ новОбъект.Свойство("complectation_string") 	Тогда новОбъект.Вставить("complectation_string"	, текОбъект.complectation_string) КонецЕсли;
		Если НЕ новОбъект.Свойство("complectation") 		Тогда новОбъект.Вставить("complectation"		, текОбъект.complectation) КонецЕсли;
	КонецЕсли;
КонецФункции // ДополнитьЗависимымиПолями()

Функция ДобавитьСвязанныеДанныеВБуфер(Параметры)
	стВыгружатьНаСайт = ?(Параметры.стОбъект.Свойство("ВыгружатьНаСайт"), Параметры.стОбъект.ВыгружатьНаСайт, Ложь);
	текВыгружатьНаСайт = ?(Параметры.текОбъект.Свойство("ВыгружатьНаСайт"), Параметры.текОбъект.ВыгружатьНаСайт, Ложь);
	Если ТипЗнч(Параметры.Объект) = Тип("СправочникСсылка.Склады") Тогда
		Если НЕ стВыгружатьНаСайт = текВыгружатьНаСайт ИЛИ НЕ Параметры.ПараметрыЗаписи.ПолучениеОбъекта.ОсновнойСклад = Параметры.Объект.ОсновнойСкладНаСайте Тогда
			КодПолученияМассиваОбъектов = "
			|Запрос = Новый Запрос;
			|Запрос.Текст = ""ВЫБРАТЬ Номенклатура КАК Ссылка ИЗ РегистрНакопления.ТоварыНаСкладах.Остатки(, Склад = &Склад) КАК Остатки"";
			|Запрос.УстановитьПараметр(""Склад"", пОбъект);
			|
			|массивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(""Ссылка"");
			|";
			ПараметрыФункции = "(Новый Структура(""массивСсылок, Области"", массивОбъектов, Новый Структура(""Остатки"")))";
	
			API2.ЗаписатьНаборВБуферОбновленияНаСайте(Параметры.Объект, 
				Новый Структура("Поле, АдресРесурсаСервера, Очередь, ФункцияПолученияОбъекта, КодПолученияМассиваОбъектов, ПараметрыФункцииПолученияОбъекта", 
								"", "/api/products", 40, "ПолучитьТовары", КодПолученияМассиваОбъектов, ПараметрыФункции));
		КонецЕсли;
	КонецЕсли;						
	
	Если НЕ стВыгружатьНаСайт = текВыгружатьНаСайт Тогда
		Если ТипЗнч(Параметры.Объект) = Тип("СправочникСсылка.Номенклатура") И Параметры.Объект.ЭтоГруппа Тогда
			// Если это категория, у которой есть дочерние категории, то надо обновить категории
			// Если это категория, у которой нет дочерних категорий, то надо обновить подчиненные товары
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ Первые 1 * ИЗ Справочник.Номенклатура КАК Номен ГДЕ Родитель = &Объект И ЭтоГруппа";
			
			Запрос.УстановитьПараметр("Объект", Параметры.Объект);
			
			Выборка = Запрос.Выполнить().Выбрать();
			естьПодчиненныеКатегории = Ложь;
			Если Выборка.Следующий() Тогда
				естьПодчиненныеКатегории = Истина;
			КонецЕсли;
			
			Если естьПодчиненныеКатегории Тогда
				КодПолученияМассиваОбъектов = "
				|Запрос = Новый Запрос;
				|Запрос.Текст = ""ВЫБРАТЬ Ссылка ИЗ Справочник.Номенклатура КАК Спр Где Родитель = &Объект И ВыгружатьНаСайт И ЭтоГруппа"" + 
				|	"" ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ Спр.Ссылка ИЗ Справочник.Номенклатура.ДополнительныеРодители КАК Спр Где Спр.Родитель = &Объект И Спр.Ссылка.ВыгружатьНаСайт И Спр.Ссылка.ЭтоГруппа"";
				|Запрос.УстановитьПараметр(""Объект"", пОбъект);
				|
				|массивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(""Ссылка"");
				|";
				ПараметрыФункции = "(Новый Структура(""массивСсылок, Области"", массивОбъектов, Новый Структура(""Родители"")))";

				API2.ЗаписатьНаборВБуферОбновленияНаСайте(Параметры.Объект, 
					Новый Структура("Поле, АдресРесурсаСервера, Очередь, ФункцияПолученияОбъекта, КодПолученияМассиваОбъектов, ПараметрыФункцииПолученияОбъекта", 
									"", "/api/product_categories", 25, "ПолучитьКатегории", КодПолученияМассиваОбъектов, ПараметрыФункции));
			Иначе
				КодПолученияМассиваОбъектов = "
				|Запрос = Новый Запрос;
				|Запрос.Текст = ""ВЫБРАТЬ Ссылка ИЗ Справочник.Номенклатура КАК Спр Где Родитель = &Объект И ВыгружатьНаСайт"" + 
				|	"" ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ Спр.Ссылка ИЗ Справочник.Номенклатура.ДополнительныеРодители КАК Спр Где Спр.Родитель = &Объект И Спр.Ссылка.ВыгружатьНаСайт"";
				|Запрос.УстановитьПараметр(""Объект"", пОбъект);
				|
				|массивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(""Ссылка"");
				|";
				ПараметрыФункции = "(Новый Структура(""массивСсылок, Области"", массивОбъектов, Новый Структура(""Поля, Родители"")))";

				API2.ЗаписатьНаборВБуферОбновленияНаСайте(Параметры.Объект, 
					Новый Структура("УдалятьПустые, Поле, АдресРесурсаСервера, Очередь, ФункцияПолученияОбъекта, КодПолученияМассиваОбъектов, ПараметрыФункцииПолученияОбъекта", 
									Истина, "", "/api/products", 25, "ПолучитьТовары", КодПолученияМассиваОбъектов, ПараметрыФункции));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецФункции // ДобавитьСвязанныеДанныеВБуфер()
#КонецОбласти

#Область Добавление_в_Буфер

Функция ЗаписатьОбъектВБуферНаИзменениеНаСайте(ОбъектСсылка, ПараметрыЗаписи, Отказ) Экспорт
	
	новОбъект	= ПараметрыЗаписи.ТелоЗапроса;
	Если новОбъект.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ ТелоЗапроса, АдресРесурсаСервера ИЗ РегистрСведений.БуферКомандДляСайта_API2 ГДЕ Объект = &Объект И СайтНазначения = Значение(Перечисление.Сайты.licota)");
	Запрос.УстановитьПараметр("Объект", ОбъектСсылка);
	Выполнение = Запрос.Выполнить();
		
	Суффикс = ПараметрыЗаписи.Суффикс;
		
	ПредАдрес = "";
	
	Если Не Выполнение.Пустой() Тогда
		Выборка = Выполнение.Выбрать();
		Выборка.Следующий();
		                                                                                                                                    	
		ДобавитьИзменениеОбъекта(новОбъект, ЗначениеИзСтрокиВнутр(Выборка.ТелоЗапроса)); 
		
		// Пред суффикс
		ПредСуффикс = ?(Найти(Выборка.АдресРесурсаСервера, "create"), "create", ?(Найти(Выборка.АдресРесурсаСервера, "delete"),"delete","update"));
		
		// Определим новый суффикс
		
		Если ПредСуффикс = "create" И Суффикс = "delete" Тогда 
			// такой надо удалять так как не успел пожить
			
			Запись = РегистрыСведений.БуферКомандДляСайта_API2.СоздатьМенеджерЗаписи();
			Запись.Объект = ОбъектСсылка;
			Если Не ОбщиеФункции.УдалитьОбъектИСообщитьЕслиОшибка(Запись) Тогда
				Отказ = Истина КонецЕсли;
			Возврат Истина;
		ИначеЕсли ПредСуффикс = "delete" И Суффикс = "create" Тогда	
			Суффикс = "update";
		ИначеЕсли ПредСуффикс = "create" И Суффикс = "update" Тогда
			Суффикс = "create"; 
		КонецЕсли;
	КонецЕсли;
	
	// Запишем
	Запись = РегистрыСведений.БуферКомандДляСайта_API2.СоздатьМенеджерЗаписи();
	Запись.СайтНазначения 		= Перечисления.Сайты.licota;
	Запись.Объект 				= ОбъектСсылка;
	Запись.КомандаHTTP 			= ПараметрыЗаписи.КомандаHTTP;
	Запись.АдресРесурсаСервера 	= ПараметрыЗаписи.АдресРесурсаСервера + "/" + Суффикс;
	Запись.ТипОбъекта 			= ОпределитьИмяОбъектаПоТипу(ОбъектСсылка);
	Запись.ТелоЗапроса			= ЗначениеВСтрокуВнутр(новОбъект);
	Запись.Очередь 				= ПараметрыЗаписи.Очередь;
	Запись.ЕстьОшибка			= Ложь;
	Запись.ДатаИзменений		= ТекущаяДата();
	
	Если Не ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(Запись) Тогда
		Отказ = Истина 
	КонецЕсли;
КонецФункции

Процедура ЗаписатьНаборТоваровВБуфер(пНаборЗаписей) Экспорт 
	
	Если (ТипЗнч(пНаборЗаписей) = Тип("Массив")) Тогда //из наборов записей ТоварыНаСкладах и ТоварыВРезерве передается Массив
		
		ОбластиИзменения = "Остатки"; 
		массивНоменклатуры = пНаборЗаписей;
	Иначе
		ОбластиИзменения = ОбластиИзменения(пНаборЗаписей);
		
		массивНоменклатуры = Новый Массив;
				
		УсловиеЦены = (ТипЗнч(пНаборЗаписей) = Тип("РегистрСведенийНаборЗаписей.ЦеныНоменклатуры"));
		Для каждого лЗапись Из пНаборЗаписей Цикл
			Если УсловиеЦены Тогда
				Если лЗапись.ТипЦен.ВыгружатьНаСайт И лЗапись.Период <= ТекущаяДата() Тогда
					массивНоменклатуры.Добавить(лЗапись.Номенклатура);
				КонецЕсли;
				// TODO: еще у лЗапись есть поле "Период" - дата с которой стартует цена
			Иначе
				массивНоменклатуры.Добавить(лЗапись.Номенклатура);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	
	
	Если ОбластиИзменения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	массивНоменклатуры = Новый Массив;
	
	
	Если массивНоменклатуры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	полученныеТовары = ПолучитьТовары(Новый Структура("массивСсылок, Области", массивНоменклатуры, Новый Структура(ОбластиИзменения)));
	
	Если НЕ ЗначениеЗаполнено(полученныеТовары) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(полученныеТовары) = Тип("Структура") Тогда
		товары = Новый Массив;
		товары.Добавить(полученныеТовары);
	Иначе
		товары = полученныеТовары;
	КонецЕсли;
	
	/////////////////////////////////////////////////////////////////////////////////////
	// ЗАПИСЬ В БУФЕР
	
	ПараметрыЗаписи = Новый Структура("КомандаHTTP, АдресРесурсаСервера, Очередь", 
										Перечисления.КомандыHTTP.POST, 
										"/api/products",
										40);
		
	Запрос = Новый Запрос("ВЫБРАТЬ ТелоЗапроса, АдресРесурсаСервера, Объект ИЗ РегистрСведений.БуферКомандДляСайта_API2 ГДЕ Объект В (&Объект) И СайтНазначения = Значение(Перечисление.Сайты.licota)");
	Запрос.УстановитьПараметр("Объект", массивНоменклатуры);
	Выполнение = Запрос.Выполнить().Выгрузить();
	
	Выполнение.Индексы.Добавить("Объект");
		
	Для каждого новОбъект Из товары Цикл
		Суффикс = "update";
		
		Выборка = Выполнение.Найти(новОбъект.guid, "Объект");
		Если НЕ Выборка = Неопределено Тогда
			ДобавитьИзменениеОбъекта(новОбъект, ЗначениеИзСтрокиВнутр(Выборка.ТелоЗапроса));
			
			// Пред суффикс
			ПредСуффикс = ?(Найти(Выборка.АдресРесурсаСервера, "create"), "create", ?(Найти(Выборка.АдресРесурсаСервера, "delete"),"delete","update"));
			
			// Определим новый суффикс
			
			Если ПредСуффикс = "create" И Суффикс = "delete" Тогда 
				// такой надо удалять так как не успел пожить
				
				Запись = РегистрыСведений.БуферКомандДляСайта_API2.СоздатьМенеджерЗаписи();
				Запись.Объект = новОбъект.guid;
				Если Не ОбщиеФункции.УдалитьОбъектИСообщитьЕслиОшибка(Запись) Тогда
					Отказ = Истина КонецЕсли;
				Продолжить;
			ИначеЕсли ПредСуффикс = "delete" И Суффикс = "create" Тогда	
				Суффикс = "update";
			ИначеЕсли ПредСуффикс = "create" И Суффикс = "update" Тогда
				Суффикс = "create"; 
			КонецЕсли;
		КонецЕсли;
	
		// Запишем
		Запись = РегистрыСведений.БуферКомандДляСайта_API2.СоздатьМенеджерЗаписи();
		Запись.СайтНазначения		= Перечисления.Сайты.licota;
		Запись.Объект 				= новОбъект.guid;
		Запись.КомандаHTTP 			= ПараметрыЗаписи.КомандаHTTP;
		Запись.АдресРесурсаСервера 	= ПараметрыЗаписи.АдресРесурсаСервера + "/" + Суффикс;
		Запись.ТипОбъекта 			= ОпределитьИмяОбъектаПоТипу(новОбъект.guid);
		Запись.ТелоЗапроса			= ЗначениеВСтрокуВнутр(новОбъект);
		Запись.Очередь 				= ПараметрыЗаписи.Очередь;
		Запись.ЕстьОшибка			= Ложь;
		Запись.ДатаИзменений		= ТекущаяДата();
		
		Если Не ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(Запись) Тогда
			ЗаписьНеУдалась=Истина;
			//Ничего не делаем 
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // ЗаписатьНаборТоваровВБуфер()

Функция ЗаписатьНаборВБуферОбновленияНаСайте(пОбъект, Параметры, РежимУпаковкиДляДальнейшегоРазбора = Истина) Экспорт 
	// пОбъект - объект на основании которого можно получить список обновляемых объектов
	// Параметры - структура
	//	- УдалятьПустые 						- добавлять в буфер на удаление объекты, которые теперь возвращают пустую структуру при получении с помощью функции ФункцияПолученияОбъекта
	//  - Поле 									- если пОбъект это набор записей, то у записа в Поле будет записан объект для записи в буфер
	//  - АдресРесурсаСервера 					- для заполнения реквизита записи буфера
	//  - Очередь 								- для заполнения реквизита записи буфера
	//  - КодПолученияМассиваОбъектов			- код выполнения которого получит массив объектов для записи в буфер
	//  - ФункцияПолученияОбъекта				- функция с помощью которой получается структура объекта
	//  - ПараметрыФункцииПолученияОбъекта		- 
	
	массивОбъектов = Новый Массив;
	ДатыПрименения = Новый Соответствие;
	
	Если Параметры.Свойство("КодПолученияМассиваОбъектов") И ЗначениеЗаполнено(Параметры.КодПолученияМассиваОбъектов) Тогда
		Выполнить(Параметры.КодПолученияМассиваОбъектов);
	Иначе
		Для каждого лЗапись Из пОбъект Цикл
			массивОбъектов.Добавить(лЗапись[Параметры.Поле]);
		КонецЦикла;
	КонецЕсли;
	
	Если массивОбъектов.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	полученныеОбъекты = Неопределено;
	ПараметрыФункции = "(Новый Структура(""массивСсылок"", массивОбъектов))";
	Если Параметры.Свойство("ПараметрыФункцииПолученияОбъекта") И ЗначениеЗаполнено(Параметры.ПараметрыФункцииПолученияОбъекта) Тогда
		ПараметрыФункции = Параметры.ПараметрыФункцииПолученияОбъекта;
	КонецЕсли;
	
	Выполнить("полученныеОбъекты = " + Параметры.ФункцияПолученияОбъекта + ПараметрыФункции);
	
	Если НЕ ЗначениеЗаполнено(полученныеОбъекты) Тогда
		Если Параметры.Свойство("УдалятьПустые") И Параметры.УдалятьПустые Тогда
			ЗаписатьНаУдаление(массивОбъектов, Новый Соответствие, Параметры);
		КонецЕсли;
		Возврат Истина;
	КонецЕсли;
	
	Если ТипЗнч(полученныеОбъекты) = Тип("Структура") Тогда
		объекты = Новый Массив;
		объекты.Добавить(полученныеОбъекты);
	Иначе
		объекты = полученныеОбъекты;
	КонецЕсли;
	
	/////////////////////////////////////////////////////////////////////////////////////
	// ЗАПИСЬ В БУФЕР
	
	ПараметрыЗаписи = Новый Структура("КомандаHTTP, АдресРесурсаСервера, Очередь", 
										Перечисления.КомандыHTTP.POST, 
										Параметры.АдресРесурсаСервера,
										Параметры.Очередь);
		
	Запрос = Новый Запрос("ВЫБРАТЬ ТелоЗапроса, АдресРесурсаСервера, Объект ИЗ РегистрСведений.БуферКомандДляСайта_API2 ГДЕ Объект В (&Объект) И СайтНазначения = Значение(Перечисление.Сайты.licota)");
	Запрос.УстановитьПараметр("Объект", массивОбъектов);
	Выполнение = Запрос.Выполнить().Выгрузить();
	
	Выполнение.Индексы.Добавить("Объект");
	
	Добавленные = Новый Соответствие;
	Для каждого новОбъект Из объекты Цикл
		Суффикс = "update";
		
		Выборка = Выполнение.Найти(новОбъект.guid, "Объект");
		Если НЕ Выборка = Неопределено Тогда
			ДобавитьИзменениеОбъекта(новОбъект, ЗначениеИзСтрокиВнутр(Выборка.ТелоЗапроса));
			
			// Пред суффикс
			ПредСуффикс = ?(Найти(Выборка.АдресРесурсаСервера, "create"), "create", ?(Найти(Выборка.АдресРесурсаСервера, "delete"),"delete","update"));
			
			// Определим новый суффикс
			
			Если ПредСуффикс = "create" И Суффикс = "delete" Тогда 
				// такой надо удалять так как не успел пожить
				
				Запись = РегистрыСведений.БуферКомандДляСайта_API2.СоздатьМенеджерЗаписи();
				Запись.Объект = новОбъект.guid;
				Если Не ОбщиеФункции.УдалитьОбъектИСообщитьЕслиОшибка(Запись) Тогда
					Отказ = Истина КонецЕсли;
				Продолжить;
			ИначеЕсли ПредСуффикс = "delete" И Суффикс = "create" Тогда	
				Суффикс = "update";
			ИначеЕсли ПредСуффикс = "create" И Суффикс = "update" Тогда
				Суффикс = "create"; 
			КонецЕсли;
		КонецЕсли;
	
		// Запишем
		Запись = РегистрыСведений.БуферКомандДляСайта_API2.СоздатьМенеджерЗаписи();
		Запись.СайтНазначения		= Перечисления.Сайты.licota;
		Запись.Объект 				= новОбъект.guid;
		Запись.КомандаHTTP 			= ПараметрыЗаписи.КомандаHTTP;
		Запись.АдресРесурсаСервера 	= ПараметрыЗаписи.АдресРесурсаСервера + "/" + Суффикс;
		Запись.ТипОбъекта 			= ОпределитьИмяОбъектаПоТипу(новОбъект.guid);
		Запись.ТелоЗапроса			= ЗначениеВСтрокуВнутр(новОбъект);
		Запись.Очередь 				= ПараметрыЗаписи.Очередь;
		Запись.ЕстьОшибка			= Ложь;
		Запись.ДатаИзменений		= ТекущаяДата();
		
		ДатаПримененияКоманды = ДатыПрименения[Запись.Объект];
		Если ДатаПримененияКоманды = Неопределено Тогда
			Запись.ДатаПримененияКоманды = ДатаПримененияКоманды;
		КонецЕсли;
		
		Добавленные.Вставить(новОбъект.guid, Истина);
		Если Не ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(Запись) Тогда
			Отказ = Истина 
		КонецЕсли;
	КонецЦикла;
	
	Если Параметры.Свойство("УдалятьПустые") И Параметры.УдалятьПустые Тогда
		ЗаписатьНаУдаление(массивОбъектов, Добавленные, Параметры);
	КонецЕсли;
	
	Возврат Истина;
КонецФункции // ЗаписатьНаборТоваровВБуфер()

Функция ЗаписатьНаУдаление(массивОбъектов, НеУдалять, Параметры)
	ПараметрыЗаписи = Новый Структура("КомандаHTTP, АдресРесурсаСервера, Очередь", 
										Перечисления.КомандыHTTP.POST, 
										Параметры.АдресРесурсаСервера,
										Параметры.Очередь);
										
	Суффикс = "delete";
	Для каждого лОбъект Из массивОбъектов Цикл
		Если НЕ НеУдалять[лОбъект] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Запись = РегистрыСведений.БуферКомандДляСайта_API2.СоздатьМенеджерЗаписи();
		Запись.СайтНазначения		= Перечисления.Сайты.licota;
		Запись.Объект 				= лОбъект;
		Запись.КомандаHTTP 			= ПараметрыЗаписи.КомандаHTTP;
		Запись.АдресРесурсаСервера 	= ПараметрыЗаписи.АдресРесурсаСервера + "/" + Суффикс;
		Запись.ТипОбъекта 			= ОпределитьИмяОбъектаПоТипу(лОбъект);
		Запись.ТелоЗапроса			= ЗначениеВСтрокуВнутр(Новый Структура);
		Запись.Очередь 				= ПараметрыЗаписи.Очередь;
		Запись.ЕстьОшибка			= Ложь;
		Запись.ДатаИзменений		= ТекущаяДата();
		
		Если Не ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(Запись) Тогда
			Отказ = Истина 
		КонецЕсли;
	КонецЦикла;
КонецФункции // ЗаписатьНаУдаление()

Функция ОбластиИзменения(пНаборЗаписей)
	Если ТипЗнч(пНаборЗаписей) = Тип("РегистрНакопленияНаборЗаписей.ТоварыНаСкладах") ИЛИ ТипЗнч(пНаборЗаписей) = Тип("РегистрНакопленияНаборЗаписей.ТоварыВРезерве") Тогда
		Возврат "Остатки";
	ИначеЕсли ТипЗнч(пНаборЗаписей) = Тип("РегистрСведенийНаборЗаписей.ЦеныНоменклатуры") Тогда
		Возврат "Цены";
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции // ОбластьИзменения()

#КонецОбласти

