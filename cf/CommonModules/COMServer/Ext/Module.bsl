
// ОБЩИЕ ФУНКЦИИ ЯДРА

Функция ПолучитьПараметрыПодключенияК81ПоУмолчанию() Экспорт
	
	Возврат Константы.ПараметрыПодключенияКУТ81.Получить();
	
КонецФункции

Функция РазбудитьConnector81_Ст(ПараметрыПодключения = Неопределено, стрОшибки = "") Экспорт
	
	//Перем Connector;
	//
	//// Получим указатель
	//
	//Если ЭтоАдресВременногоХранилища(ПараметрыСеанса.ConnectorUT81) Тогда
	//	
	//	Connector = ПолучитьИзВременногоХранилища(ПараметрыСеанса.ConnectorUT81);
	//	
	//КонецЕсли;
	//
	//Если Connector = Неопределено Тогда
	//
	//	Попытка
	//		
	//		Имя = Connector.Метаданные().Имя;
	//			
	//	Исключение
	//		
	//		Если ПараметрыПодключения = Неопределено Тогда
	//			ПараметрыПодключения = ПолучитьПараметрыПодключенияК81ПоУмолчанию();
	//			Если ПустаяСтрока(ПараметрыПодключения) Тогда
	//				стрОшибки = "не заданы параметры подключения к базе УТ 81.
	//								|Для задания параметров установите константу - ""Параметры подключения к УТ 81"" ";
	//				Возврат Неопределено;
	//			КонецЕсли;
	//		КонецЕсли;
	//		
	//		Connector = ИницилизироватьCOMConnector81(
	//							?(ПараметрыПодключения = Неопределено, 
	//										ПолучитьПараметрыПодключенияК81ПоУмолчанию(), 
	//										ПараметрыПодключения), 
	//							стрОшибки);
	//	КонецПопытки;
	//КонецЕсли;
	//
	//Возврат Connector;
	//
КонецФункции

Функция ПолучитьВыполнениеЗапроса81(ТекстЗапроса, ПараметрыПодключения = Неопределено, СтруктураПараметров = Неопределено, стрОшибки = "", Connector = Неопределено) Экспорт
	
	Если Connector = Неопределено Тогда
		Connector = КэшируемыеФункции.ИницилизироватьCOMConnector81(ПараметрыПодключения, стрОшибки);
	КонецЕсли;
	
	Если Connector <> Неопределено Тогда
		
		Запрос = Connector.NewObject("Запрос", ТекстЗапроса);
		
		Если СтруктураПараметров <> Неопределено Тогда
			Для Каждого Параметр Из СтруктураПараметров Цикл
				Запрос.УстановитьПараметр(СтрЗаменить(Параметр.Ключ, ".",""), Параметр.Значение);
			КонецЦикла;
		КонецЕсли;
		
		Попытка
			Выборка = Запрос.Выполнить();
		Исключение
			текст = ОписаниеОшибки();
			стрОшибки = "Ошибка при выполнении запроса в 81
							|" + текст;
			Возврат Неопределено;
		КонецПопытки;
		
		Возврат Выборка;
		
	КонецЕсли;
	
КонецФункции

// ОБЩИЕ

Функция НайтиСоответствиеСсылкиCOM81(Ссылка81, СинхронизироватьОбъект = Истина, стрОшибки = "", Connector = Неопределено)
	
	Если Connector = Неопределено Тогда
		Connector = КэшируемыеФункции.ИницилизироватьCOMConnector81(, стрОшибки);
	КонецЕсли;
	
	Если Connector = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Определим тип объекта
	
	МетаДанные81 = Connector.Метаданные();
	МетаСсылка81 = Ссылка81.Метаданные();
	
	ПолноеИмя81 = МетаСсылка81.ПолноеИмя();
	
	ПредставлениеСтрокой = Connector.string(Ссылка81);
	
	Если Найти(ПолноеИмя81, "Перечисление.") = 1 Тогда
	//ИначеЕсли МетаДанные81.Перечисления.Содержит(МетаСсылка81) Тогда
		
		Если Ссылка81.Пустая() Тогда
			Возврат Перечисления[МетаСсылка81.имя].ПустаяСсылка();
		Иначе
			Попытка
				Возврат Перечисления[МетаСсылка81.имя].Получить(Connector.Перечисления[МетаСсылка81.имя].Индекс(Ссылка81));
			Исключение
				Возврат Перечисления[МетаСсылка81.имя].ПустаяСсылка();
			КонецПопытки;
		КонецЕсли;
		
		//ПравилаСопоставления = КэшируемыеФункции.ПолучитьПравилаСопостовленияУТ81Поимени81("Перечисления." + МетаСсылка81.Имя);
		//
		//Если ПравилаСопоставления = Неопределено Тогда
		//	стрОшибки = "Не найдено правило сопостовления для перечисления """ + МетаСсылка81.Имя + """";
		//	Возврат Неопределено;
		//КонецЕсли;

	ИначеЕсли ПредставлениеСтрокой = Неопределено Тогда
		
		Возврат Неопределено;
		
	ИначеЕсли Найти(ПолноеИмя81, "Справочник.") = 1 Тогда
	//Если МетаДанные81.Справочники.Содержит(МетаСсылка81) Тогда
		
		// Найдем правило
		
		ПравилоСопоставления = КэшируемыеФункции.ПолучитьПравилаСопостовленияУТ81Поимени81("Справочник." + МетаСсылка81.Имя, стрОшибки);
		
		если ПравилоСопоставления = Неопределено Тогда
			//стрОшибки = "Не найдено правило сопостовления для справочника """ + МетаСсылка81.Имя + """";
			Возврат Неопределено;
		КонецЕсли;

		// Найдем справочник
		
		метаСпр = ПолучитьМетаОбъектПоПравилу(ПравилоСопоставления, "Справочники", стрОшибки);
		Если МетаСпр = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Менеджер = Справочники[метаСпр.имя];
		
		// Проверим может пустой
		
		Если Ссылка81.Пустая() Тогда
			Возврат Менеджер.ПустаяСсылка();
		КонецЕсли;
		
		// синхронизируем объект
		
		стрУникальныйИдентификатор = Connector.String(Ссылка81.УникальныйИдентификатор());
		
		Если 	СинхронизироватьОбъект И
				Не СинхронизироватьОбъект(стрУникальныйИдентификатор, ПравилоСопоставления,, стрОшибки) Тогда
				
			Возврат Ложь;
		КонецЕсли;
		
		Ссылка 	= Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(стрУникальныйИдентификатор));
		
		если Ссылка.пустая() Тогда
			новСправочник = Неопределено;
		Иначе
			новСправочник = Ссылка.ПолучитьОбъект();
		КонецЕсли;
			
		Если новСправочник = Неопределено Тогда
			новСправочник = ?(метаСпр.Иерархический И Ссылка81.ЭтоГруппа, 
												Менеджер.СоздатьГруппу(),
												Менеджер.СоздатьЭлемент());
			новСправочник.УстановитьСсылкуНового(Ссылка);
			
			Если не ЗаписатьСправочник(новСправочник, стрОшибки) Тогда
				Возврат Неопределено;
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат Ссылка;
		
	ИначеЕсли Найти(ПолноеИмя81, "Документ.") = 1 Тогда
		
		// Найдем правило
		
		ПравилоСопоставления = КэшируемыеФункции.ПолучитьПравилаСопостовленияУТ81Поимени81("Документ." + МетаСсылка81.Имя, стрОшибки);
		
		если ПравилоСопоставления = Неопределено Тогда
			//стрОшибки = "Не найдено правило сопостовления для справочника """ + МетаСсылка81.Имя + """";
			Возврат Неопределено;
		КонецЕсли;

		// Найдем справочник
		
		метаСпр = ПолучитьМетаОбъектПоПравилу(ПравилоСопоставления, "Документы", стрОшибки);
		Если МетаСпр = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Менеджер = Документы[метаСпр.имя];
		
		// Проверим может пустой
		
		Если Ссылка81.Пустая() Тогда
			Возврат Менеджер.ПустаяСсылка();
		КонецЕсли;
		
		// синхронизируем объект
		
		стрУникальныйИдентификатор = Connector.String(Ссылка81.УникальныйИдентификатор());
		
		Если 	СинхронизироватьОбъект И
				Не СинхронизироватьОбъект(стрУникальныйИдентификатор, ПравилоСопоставления,, стрОшибки) Тогда
				
			Возврат Ложь;
		КонецЕсли;
		
		Ссылка 	= Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(стрУникальныйИдентификатор));
		
		если Ссылка.пустая() Тогда
			новДокумент = Неопределено;
		Иначе
			новДокумент = Ссылка.ПолучитьОбъект();
		КонецЕсли;
			
		Если новДокумент = Неопределено Тогда
			новДокумент = Менеджер.СоздатьДокумент();
			новДокумент.УстановитьСсылкуНового(Ссылка);
			
			Если не ЗаписатьДокумент(
								новДокумент, 
								?(Ссылка81.Проведен, 
										РежимЗаписиДокумента.Проведение, 
										РежимЗаписиДокумента.Запись), 
								стрОшибки) Тогда
								
				Возврат Неопределено;
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат Ссылка;
 			
	Иначе
		
		стрОшибки = "Не известный тип ссылки 81 " + ПолноеИмя81;
		
	КонецЕсли;
	
КонецФункции
Функция НайтиСоответствиеСсылкиДляCOM81(Ссылка, стрОшибки = "")
	
	Connector = КэшируемыеФункции.ИницилизироватьCOMConnector81(, стрОшибки);
	
	Если Connector = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Определим тип объекта
	
	ТекМетаСсылка = Ссылка.Метаданные();
	
	Если Метаданные.Справочники.Содержит(ТекМетаСсылка) Тогда
		
		// Найдем правило
		
		ПравилаСопоставления = КэшируемыеФункции.ПолучитьПравилаСопостовленияУТ81Поимени82("Справочник." + ТекМетаСсылка.Имя);
		
		если ПравилаСопоставления = Неопределено Тогда
			стрОшибки = "Не найдено правило сопостовления для справочника """ + ТекМетаСсылка.Синоним + """";
			Возврат Неопределено;
		КонецЕсли;

		// Найдем справочник
		
		Метаданные81 = Connector.Метаданные();
		МетаСпр81 = Метаданные81.НайтипоПолномуИмени(ПравилаСопоставления.ИмяИсточника);
		
		Если 	МетаСпр81 = Неопределено Или
				Не Метаданные81.Справочники.Содержит(МетаСпр81) Тогда
			строшибки = "Не найден справочник в метаданных 81 """ + ПравилаСопоставления.ИмяИсточника + """";
			Возврат Ложь;
		КонецЕсли;
		
		Менеджер 	= Connector.Справочники[МетаСпр81.Имя];
		Ссылка81 	= Менеджер.ПолучитьСсылку(Connector.NewObject("УникальныйИдентификатор", Строка(Ссылка.УникальныйИдентификатор())));
		
		Если Ссылка81.Пустая() Или Ссылка.ПолучитьОбъект() = Неопределено Тогда
			стрОшибки = "Не найден справочник " + Ссылка;
			Возврат Неопределено;
		Иначе
			Возврат Ссылка81;
		КонецЕсли;
		
	Иначе
		
		стрОшибки = "Не известный тип ссылки 81 " + Connector.string(Connector.ТипЗнч(Ссылка81));
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьЗначениеИзЗначения81(Значение81, стрОшибки = "", Connector = Неопределено)
	
	Если типЗнч(Значение81) = Тип("COMОбъект") Тогда
		
		Возврат НайтиСоответствиеСсылкиCOM81(Значение81,, стрОшибки, Connector);
		
	Иначе
		
		Возврат Значение81;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции
Функция ПолучитьЗначениеИзПолуЗначенияЗначения81XML(Значение81, ТипЗнч, стрОшибки = "")
	
	Если типЗнч(Значение81) = Тип("COMОбъект") Тогда
		
		Возврат НайтиСоответствиеСсылкиCOM81(Значение81,, стрОшибки);
		
	ИначеЕсли 	типЗнч(Значение81) = Тип("Строка") И
				СтрЧислоВхождений(Значение81, "-") = 4 И
		 		Сред(Значение81,9,1) = "-" И 
				Сред(Значение81,14,1) = "-" И 
				Сред(Значение81,19,1) = "-" И 
				Сред(Значение81,24,1) = "-" Тогда    // XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
				
		Попытка
			Возврат XMLЗначение(ТипЗнч ,Значение81);
		Исключение
			стрОшибки = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("Ошибка в коде", УровеньЖурналаРегистрации.Ошибка,,,стрОшибки + "
			|Код: Возврат XMLЗначение(ТипЗнч ,Значение81)
			|ТипЗнч - " + ТипЗнч + " - тип - " + ТипЗнч(ТипЗнч) + "
			|Значение81 - " + Значение81 + " - тип - " + ТипЗнч(Значение81));
		КонецПопытки;
		
	ИначеЕсли 	типЗнч(Значение81) = Тип("Строка") И
				Лев(Врег(Значение81), 12) = Врег("Перечисления") И
				СтрЧислоВхождений(Значение81, ".") = 2 Тогда
		Попытка
			Возврат Вычислить(Значение81);
		Исключение
			Возврат Неопределено;
		КонецПопытки;
		
	//иначеЕсли ТипЗнч = 
		
	Иначе
		
		Возврат Значение81;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ОбновитьРеквизитобъекта(Объект, ИмяРеквизита, НовоеЗначение, Изменился, стрОшибки = "", Connector = Неопределено)
	
	Если типЗнч(НовоеЗначение) = Тип("COMОбъект") Тогда
		ЗначениеСравнения = НайтиСоответствиеСсылкиCOM81(НовоеЗначение,, стрОшибки, Connector);
		Если НовоеЗначение = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	Иначе
		ЗначениеСравнения = НовоеЗначение;
	КонецЕсли;
	
	//Если Объект[ИмяРеквизита] <> ЗначениеСравнения Тогда
	//
	//	Если 	типЗнч(Объект[ИмяРеквизита]) = Тип("Строка") И
	//			СокрЛП(Объект[ИмяРеквизита]) <> СокрЛП(ЗначениеСравнения) Тогда
	//			
	//		текИзменился = Ло;
	//иначе
	//	текИзменился = Объект[ИмяРеквизита] <> ЗначениеСравнения;
	//КонецЕсли;
	//
	//Если текИзменился Тогда
	
	Если 	не ЗначениеЗаполнено(ЗначениеСравнения) И
			не ЗначениеЗаполнено(Объект[ИмяРеквизита]) Тогда // пустые могут быть разных типов Неопределено Null и все это будем считать одинаковым
		Возврат Истина;
	КонецЕсли;
	
	Если Объект[ИмяРеквизита] <> ЗначениеСравнения Тогда
		
		Изменился = Истина;
		Объект[ИмяРеквизита] = ЗначениеСравнения;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции
Функция ОбновитьРеквизитСправочника(СпрОбъект, ИмяРеквизита, НовоеЗначение, Изменился, стрОшибки = "")
	
	Если типЗнч(НовоеЗначение) = Тип("COMОбъект") Тогда
		ЗначениеСравнения = НайтиСоответствиеСсылкиCOM81(НовоеЗначение,, стрОшибки);
		Если НовоеЗначение = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	Иначе
		ЗначениеСравнения = НовоеЗначение;
	КонецЕсли;
	
	Если СпрОбъект[ИмяРеквизита] <> ЗначениеСравнения Тогда
		
		Изменился = Истина;
		СпрОбъект[ИмяРеквизита] = ЗначениеСравнения;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции
Процедура ДобавитьРеквизитКЗагрузке(РеквизитыКЗагрузке, ПропускаемыеРеквизитыМассив, ИмяРеквизита, имяКак = "")
	
	Если ПропускаемыеРеквизитыМассив.Найти(ИмяРеквизита) = Неопределено Тогда
		
		ЕстьТочка = Найти(ИмяРеквизита,".");
		РеквизитыКЗагрузке = РеквизитыКЗагрузке + ?(РеквизитыКЗагрузке = "","",", ") + ИмяРеквизита + ?(имяКак = "", ?(ЕстьТочка, " КАК " + СтрЗаменить(ИмяРеквизита,".",""), "") ," КАК " + имяКак);
		
	КонецЕсли;
		
КонецПроцедуры

Функция ПолучитьМетаОбъектПоПравилу(ПравилоСопоставления, принадлежитККолекции = "", стрОшибки = "") Экспорт
	
	МетаОбъект = Метаданные.НайтиПоПолномуИмени(ПравилоСопоставления.ИмяПриемника);

	Если МетаОбъект = Неопределено Тогда
		
		стрОшибки = "Не найден объект в метаданных """ + ПравилоСопоставления.ИмяПриемника + """";
		Возврат Неопределено;
		
	КонецЕсли;
	 
	Если 	принадлежитККолекции <> "" И 
			Не Метаданные[принадлежитККолекции].Содержит(МетаОбъект) Тогда
		
		стрОшибки = "Выбранный объект метаданных не пренадлежит к коллекции """ + принадлежитККолекции + """ - """ + ПравилоСопоставления.ИмяПриемника + """";
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат МетаОбъект;
	
КонецФункции
Функция ПолучитьМетаОбъект81ПоПравилу(Connector, ПравилоСопоставления, принадлежитККолекции = "", стрОшибки = "") Экспорт
	
	МетаОбъект = Connector.Метаданные().НайтиПоПолномуИмени(ПравилоСопоставления.ИмяИсточника);

	Если МетаОбъект = Неопределено Тогда
		
		стрОшибки = "Не найден объект в метаданных 81 """ + ПравилоСопоставления.ИмяИсточника + """";
		Возврат Неопределено;
		
	КонецЕсли;
	 
	Если 	принадлежитККолекции <> "" И 
			Не Connector.Метаданные()[принадлежитККолекции].Содержит(МетаОбъект) Тогда
		
		стрОшибки = "Выбранный объект метаданных 81 не пренадлежит к коллекции """ + принадлежитККолекции + """ - """ + ПравилоСопоставления.ИмяИсточника + """";
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат МетаОбъект;
	
КонецФункции
 
Функция ЗаписатьДокумент(Документ, РежимЗаписиДокумента = Неопределено, стрОшибки = "")
	
	Если РежимЗаписиДокумента = Неопределено Тогда
		РежимЗаписиДокумента = РежимЗаписиДокумента.Запись;
	КонецЕсли;
	
	// Проверим на уникальность номер
	
	//Если 	Документ.ЭтоНовый() И
	//		Не ПустаяСтрока(Документ.Номер) Тогда
	
	ЕстьНомер = Не ПустаяСтрока(Документ.Номер);
	ЭтоНовый = Документ.ЭтоНовый();
	
	Запрос = Новый Запрос("ВЫБРАТЬ ИСТИНА ИЗ Документ." + Документ.Метаданные().Имя + " ГДЕ Номер = """ + Документ.Номер + """" + ?(Не ЭтоНовый И ЕстьНомер," И Ссылка <> &Ссылка",""));
	Запрос.УстановитьПараметр("Ссылка", Документ.Ссылка);
	
	Выполнение = Запрос.Выполнить();
	Если Не Выполнение.Пустой() Тогда
			
		стНомер = Документ.Номер;
		Документ.УстановитьНовыйНомер("Err");
		ЗаписьЖурналаРегистрации(
				"COMConnector.Синхронизация объекта", 
				УровеньЖурналаРегистрации.Предупреждение,,,
				"При записи нового документа обнаружен точно такой же номер у другого документа, старый номер - " + стНомер + " новый назначенный номер - " + Документ.Номер);
		
	КонецЕсли;
	//КонецЕсли;
	
	Попытка
		Документ.Записать(РежимЗаписиДокумента);
	Исключение
		Текст = ОписаниеОшибки();
		стрОшибки = "Ошибка при записи документа " + Документ.Метаданные().Синоним + " """ + Документ.Номер + """ от " + Документ.Дата + "
								|" + Текст;
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции
Функция ЗаписатьСправочник(Справочник, стрОшибки)
	
	Справочник.ОбменДанными.Загрузка = Истина;
	
	Попытка
		Справочник.Записать();
	Исключение
		Текст = ОписаниеОшибки();
		стрОшибки = "Ошибка при записи справочника " + Справочник.Метаданные().Синоним + " """ + Справочник.Наименование + """
								|" + Текст;
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции
Функция ЗагрузитьСправочник_отключитьПопозже(
				ПравилоСопоставления,
				Отборы						= Неопределено,
				стрОшибки 					= "",
				ОстанавливатьсяПриОшибке 	= Истина,
				ПроизвольныйТекстЗапроса	= "") Экспорт
				
	// Загружает справочник COM в текущую базу
	// 	Возвращает ИСТИНА если все нормально
	//
	// Отборы					- структура, в ключе имя отбора для запроса в значении значение отбора,
	//								если в значении будет ссылка тогда ссылка будет установлена по уникальному 
	//								идентификатору другой базы
	
	
	// Зададим переменные
	
	Перем СтруктураПараметров;
	
	МетаСпр = ПолучитьМетаОбъектПоПравилу(ПравилоСопоставления, "Справочники", стрОшибки);
	Если МетаСпр = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Менеджер    	= Справочники[МетаСпр.Имя];
	Иерархический 	= МетаСпр.Иерархический;
	
	ИскатьПоИдентификатору = Не ПравилоСопоставления.КлючСоответствия.Количество();
	
	// получим коннектор для определения уникального идентификатора
	Если ИскатьПоИдентификатору Тогда
		Connector = КэшируемыеФункции.ИницилизироватьCOMConnector81(, стрОшибки);
		Если Connector = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Сформируем строку запроса реквизитов
	ПропускаемыеРеквизиты 	= ПравилоСопоставления.ПропускаемыеРеквизиты.ВыгрузитьКолонку("Имя");
	РеквизитыКЗагрузке 		= "";
	
	ДобавитьРеквизитКЗагрузке(РеквизитыКЗагрузке, ПропускаемыеРеквизиты, "ПометкаУдаления");
	
	МетаСпр81 = ПолучитьМетаОбъект81ПоПравилу(Connector, ПравилоСопоставления, "Справочники", стрОшибки);
	Если МетаСпр = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	//Если МетаСпр81.ДлинаКода Тогда
	//	ДобавитьРеквизитКЗагрузке(РеквизитыКЗагрузке, ПропускаемыеРеквизиты, "Код");
	//КонецЕсли;
	//Если МетаСпр81.ДлинаНаименования Тогда
	//	ДобавитьРеквизитКЗагрузке(РеквизитыКЗагрузке, ПропускаемыеРеквизиты, "Наименование");
	//КонецЕсли;
	//Если МетаСпр81.Иерархический Тогда
	//	ДобавитьРеквизитКЗагрузке(РеквизитыКЗагрузке, ПропускаемыеРеквизиты, "Родитель");
	//КонецЕсли;
	
	Для Каждого Строка Из ПравилоСопоставления.РеквизитыКЗагрузке Цикл
		ДобавитьРеквизитКЗагрузке(РеквизитыКЗагрузке, ПропускаемыеРеквизиты, Строка.ИмяИсточника, Строка.ИмяПриемника);
	КонецЦикла;
	
	// Заполним структуру параметров внешнего запроса
	
	СтрокаОтбора = "";
	
	Если Отборы <> Неопределено Тогда
		
		СтруктураПараметров = Новый Структура;
		
		Для Каждого Элемент Из отборы Цикл
			ТипЗнч = ТипЗнч(Элемент.Значение);
			Если 	ТипЗнч = Тип("Строка") Или
					ТипЗнч = Тип("Число") Или
					ТипЗнч = Тип("Дата") Или
					ТипЗнч = Тип("Булево") Тогда
					
				СтруктураПараметров.Вставить(Элемент.Ключ, Элемент.Значение);
					
			Иначе
				
				Ссылка81 = НайтиСоответствиеСсылкиДляCOM81(Элемент.Значение, стрОшибки);
				Если Ссылка81 = Неопределено Тогда
					Возврат Ложь;
				КонецЕсли;
				
				СтруктураПараметров.Вставить(Элемент.Ключ, Ссылка81);

			КонецЕсли;
			
			СтрокаОтбора = СтрокаОтбора + ?(СтрокаОтбора = "",""," И ") + Элемент.Ключ + " = &" + Элемент.Ключ;
			
		КонецЦикла;
	КонецЕсли;
	
	// Выполним запрос
	
	Выполнение = ПолучитьВыполнениеЗапроса81(?(ПроизвольныйТекстЗапроса = "","
	|ВЫБРАТЬ Ссылка, 
	|" 					+ РеквизитыКЗагрузке + " 
	|,"					+ ?(Иерархический, "ЭтоГруппа", "Ложь") + " КАК ЭтоГруппа
	|ИЗ " 				+ ПравилоСопоставления.ИмяИсточника + "
	|" 					+ ?(ПустаяСтрока(СтрокаОтбора),"","
	|ГДЕ " 				+ СтрокаОтбора) + "
	|", ПроизвольныйТекстЗапроса)
			,,СтруктураПараметров, 
			стрОшибки);
	
	Если Выполнение = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = Выполнение.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// найдем справочник
		
		Если ИскатьПоИдентификатору Тогда
			
			Ссылка = Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(Connector.String(Выборка.Ссылка.УникальныйИдентификатор())));
			новСправочник = Ссылка.ПолучитьОбъект();
			
			Если новСправочник = Неопределено Тогда
				новСправочник = ?(Иерархический И Выборка.ЭтоГруппа, 
													Менеджер.СоздатьГруппу(),
													Менеджер.СоздатьЭлемент());
				новСправочник.УстановитьСсылкуНового(Ссылка);
			КонецЕсли;
			
		Иначе
			
		КонецЕсли;
		
		// Проверим реквизиты справочника
		
		Изменился 			= Ложь;
		
		Для Каждого Реквизит Из ПравилоСопоставления.РеквизитыКЗагрузке Цикл
			ОбновитьРеквизитСправочника(новСправочник, Реквизит.ИмяПриемника, Выборка[Реквизит.ИмяПриемника], Изменился);
		КонецЦикла;
		
		// Запишем справочник
		
		Если Изменился Тогда
			
			Если 	Не ЗаписатьСправочник(новСправочник, стрОшибки) И
					ОстанавливатьсяПриОшибке Тогда
				Возврат Ложь;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ЗаписатьЗаписьРегистра(ЗаписьРегистраСведений, стрОшибки)
	
	Попытка
		ЗаписьРегистраСведений.Записать();
	Исключение
		Текст = ОписаниеОшибки();
		стрОшибки = "Ошибка при записи " + ЗаписьРегистраСведений + "
								|" + Текст;
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция ЗагрузитьОбъекты(ПравилоСопоставления,
				Отборы						= Неопределено,
				стрОшибки 					= "",
				//ОстанавливатьсяПриОшибке 	= Истина,
				ПроизвольныйТекстЗапроса	= "",
				сообщатьобИзменениях 		= Ложь
				) Экспорт
				
	// Загружает объект COM в текущую базу
	// 	Возвращает ИСТИНА если все нормально
	
	
	// Зададим переменные
	
	Перем СтруктураПараметров;
	
	МетаОбъект = ПолучитьМетаОбъектПоПравилу(ПравилоСопоставления,, стрОшибки);
	Если МетаОбъект = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Иерархический = Ложь;
	
	ПропускаемыеРеквизиты 	= ПравилоСопоставления.ПропускаемыеРеквизиты.ВыгрузитьКолонку("Имя");
	РеквизитыКЗагрузке 		= "";
	
	ЭтоСправочник 	= Ложь;
	ЭтоДокумент 	= Ложь;
	ЭтоРегистр81 	= Найти(Врег(ПравилоСопоставления.ИмяИсточника), Врег("РегистрСведений")) = 1;
	
	// Определим менеджер и особые реквизиты загрузки
	
	Если Метаданные.Справочники.Содержит(МетаОбъект) Тогда
		
		ЭтоСправочник 	= Истина;
		
		Менеджер 		= Справочники[МетаОбъект.Имя];
		Иерархический 	= МетаОбъект.Иерархический;
		
		Если Иерархический И Не ЭтоРегистр81 Тогда
			ДобавитьРеквизитКЗагрузке(РеквизитыКЗагрузке, ПропускаемыеРеквизиты, "ЭтоГруппа");
		КонецЕсли;
		
	ИначеЕсли Метаданные.Документы.Содержит(МетаОбъект) Тогда
		
		ЭтоДокумент 	= Истина;
		
		Менеджер 		= Документы[МетаОбъект.Имя];
		
		ДобавитьРеквизитКЗагрузке(РеквизитыКЗагрузке, ПропускаемыеРеквизиты, "Проведен");
		ДобавитьРеквизитКЗагрузке(РеквизитыКЗагрузке, ПропускаемыеРеквизиты, "Номер");
		ДобавитьРеквизитКЗагрузке(РеквизитыКЗагрузке, ПропускаемыеРеквизиты, "Дата");
		
	Иначе
		
		стрОшибки = "Не могу определить менеджер объекта " + МетаОбъект;
		Возврат Ложь; 
		
	КонецЕсли;
	
	ИскатьПоИдентификатору = Не ПравилоСопоставления.КлючСоответствия.Количество();
	
	// получим коннектор для определения уникального идентификатора
	
	Если ИскатьПоИдентификатору Тогда
		Connector = КэшируемыеФункции.ИницилизироватьCOMConnector81(, стрОшибки);
		Если Connector = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	МетаОб81 = ПолучитьМетаОбъект81ПоПравилу(Connector, ПравилоСопоставления,, стрОшибки);
	Если МетаОб81 = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Подготовим информацию по вложенным таблицам
	
	// таблицаЗначений по структре колонок с полями
	// ИмяТаблицыИсточника
	// ИмяРеквизитаИсточника
	// ИмяПриемника
	
	ТаблицаСтруктурТаблиц 	= Новый ТаблицаЗначений;
	ТипСтрока 				= Новый ОписаниеТипов("Строка");
	ТекстыВложенныхТаблиц	= Новый Структура;
	
	ТаблицаСтруктурТаблиц.Колонки.Добавить("ИмяТаблицыИсточника", 	ТипСтрока);
	ТаблицаСтруктурТаблиц.Колонки.Добавить("ИмяРеквизитаИсточника", ТипСтрока);
	ТаблицаСтруктурТаблиц.Колонки.Добавить("ИмяПриемника", 			ТипСтрока);
	ТаблицаСтруктурТаблиц.Колонки.Добавить("Выражение", 			ТипСтрока);
	
	Для Каждого Строка Из ПравилоСопоставления.РеквизитыКЗагрузке Цикл
		
		Если 	Строка.Этотаблица И
				СтрЧислоВхождений(Строка.ИмяИсточника, ".") = 1 Тогда
			
			ИмяТаблицыИсточника 	= Лев(Строка.ИмяИсточника, Найти(Строка.ИмяИсточника,".") - 1);
			ИмяРеквизитаИсточника	= Сред(Строка.ИмяИсточника, Найти(Строка.ИмяИсточника,".") + 1);
			
			НовСтрока = ТаблицаСтруктурТаблиц.Добавить();
			НовСтрока.ИмяТаблицыИсточника 	= ИмяТаблицыИсточника;
			НовСтрока.ИмяРеквизитаИсточника = ИмяРеквизитаИсточника;
			НовСтрока.ИмяПриемника 			= Строка.ИмяПриемника;
			НовСтрока.Выражение 			= Строка.Выражение;
			
			УжеЕстьТекст = Неопределено;
			ТекстыВложенныхТаблиц.Свойство(ИмяТаблицыИсточника, УжеЕстьТекст);
			ТекстыВложенныхТаблиц.Вставить(ИмяТаблицыИсточника, ?(УжеЕстьТекст = Неопределено,"", УжеЕстьТекст + ",
									|") + ИмяРеквизитаИсточника);
		Иначе
			
			// Добавим обычный реквизит
			ДобавитьРеквизитКЗагрузке(РеквизитыКЗагрузке, ПропускаемыеРеквизиты, Строка.ИмяИсточника, СтрЗаменить(Строка.ИмяПриемника,".",""));
			
		КонецЕсли;
	КонецЦикла;
	
	// Составим текст для вложенных таблиц
	Для Каждого ЭлементТекста Из ТекстыВложенныхТаблиц Цикл
		
		РеквизитыКЗагрузке = 
			РеквизитыКЗагрузке + 
			?(РеквизитыКЗагрузке = "","","," + Символы.ПС) + 
			ЭлементТекста.Ключ + ".(" + ЭлементТекста.Значение + ") КАК " + ЭлементТекста.Ключ;
			
	КонецЦикла;
	
	// Заполним структуру параметров внешнего запроса
	
	СтрокаОтбора = "";
	
	Если Отборы = Неопределено Тогда
		Отборы = ПравилоСопоставления.Отборы;
	КонецЕсли;
		
	СтруктураПараметров = Новый Структура;
	
	Для Каждого Элемент Из Отборы Цикл
			
		СтрокаОтбора = СтрокаОтбора + ?(ПустаяСтрока(СтрокаОтбора),""," И ") + "
				|	" + Элемент.ИмяРеквизита + " " + КэшируемыеФункции.ОпределитьТекстУсловияОтбораПостроке(Элемент.ВидСравнения) + " &" + СтрЗаменить(Элемент.ИмяРеквизита, ".","");
		СтруктураПараметров.Вставить(СтрЗаменить(Элемент.ИмяРеквизита, ".",""), Элемент.Значение);
			
	КонецЦикла;
	
	// Выполним запрос
	
	Выполнение = ПолучитьВыполнениеЗапроса81(?(ПроизвольныйТекстЗапроса = "","
	|ВЫБРАТЬ " + ?(ЭтоРегистр81, ""," Ссылка, ПометкаУдаления, ") + "
	|" 					+ РеквизитыКЗагрузке + " 
	//|"					+ ?(ЭтоСправочник, 	"," + ?(Иерархический, "ЭтоГруппа", "Ложь") + " КАК ЭтоГруппа","") + "
	//|"					+ ?(ЭтоДокумент, 	"," + "Проведен КАК Проведен","") + "
	|ИЗ " 				+ ПравилоСопоставления.ИмяИсточника + "
	|" 					+ ?(ПустаяСтрока(СтрокаОтбора),"","
	|" + ?(ПустаяСтрока(СтрокаОтбора),""," ГДЕ " + СтрокаОтбора)) + "
	|", ПроизвольныйТекстЗапроса)
			,,СтруктураПараметров, 
			стрОшибки,
	Connector);
			
	ЭтоНовыйОбъект = Ложь;
			
	Если Выполнение = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = Выполнение.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// найдем объект
		
		Если ИскатьПоИдентификатору Тогда
			
			ИмяПоискаСсылки = "Ссылка";
			
			Если ЭтоРегистр81 Тогда    // определим когда Регистр -> Справочник
				
				СтрокаСсылкиПоиска = ПравилоСопоставления.РеквизитыКЗагрузке.Найти("Ссылка", "ИмяПриемника");
				Если СтрокаСсылкиПоиска = Неопределено Тогда
					стрОшибки = "не найден реквизит поиска справочника из регистра";
					Возврат Ложь;
				КонецЕсли;
				
				ИмяПоискаСсылки = СтрокаСсылкиПоиска.ИмяИсточника;
				
			КонецЕсли;
			
			Ссылка 		= Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(Connector.String(Выборка[ИмяПоискаСсылки].УникальныйИдентификатор())));
			//Ссылка 		= Менеджер.ПолучитьСсылку(Connector.XMLString_2(Выборка[ИмяПоискаСсылки]));
			новОбъект 	= Ссылка.ПолучитьОбъект();
			
			Если новОбъект = Неопределено Тогда
				
				Если ЭтоСправочник Тогда
			
					Попытка 
						новОбъект = ?(Иерархический И Выборка.ЭтоГруппа, 
													Менеджер.СоздатьГруппу(),
													Менеджер.СоздатьЭлемент());
					Исключение
													
						новОбъект =	Менеджер.СоздатьЭлемент();
					КонецПопытки;

				ИначеЕсли ЭтоДокумент Тогда
					
					новОбъект = Менеджер.СоздатьДокумент();
					
				КонецЕсли;
			    
			 	новОбъект.УстановитьСсылкуНового(Ссылка);
				
			КонецЕсли;
			
		Иначе
			
			// Тут опишем поиск не по идентификатору
			
		КонецЕсли;
		

		
		Изменился = Ложь;
		
		// Проверим системные реквизиты	
	
		Если ЭтоДокумент И новОбъект.Проведен <> Выборка.Проведен Тогда
			Изменился = Истина;
		КонецЕсли;
		
		// Проверим реквизиты

		Для Каждого Реквизит Из ПравилоСопоставления.РеквизитыКЗагрузке Цикл
			Если Не Найти(Реквизит.ИмяПриемника, ".") Тогда
				Если ПустаяСтрока(Реквизит.Выражение) Тогда
					текИзменился = Изменился;
					ОбновитьРеквизитобъекта(новОбъект, Реквизит.ИмяПриемника, Выборка[Реквизит.ИмяПриемника], Изменился, стрОшибки, Connector);
					
					// Сообщалка
					
					Если 	Не текИзменился И 
							Изменился И 
							сообщатьобИзменениях Тогда
							
						ОбщиеФункции.СообщитьТекст("Изменился реквизит " + Реквизит.ИмяПриемника + " значение81 = " + Выборка[Реквизит.ИмяПриемника] + " значение новое = " + новОбъект[Реквизит.ИмяПриемника]);
							
					КонецЕсли;
						
				ИначеЕсли Не ВыполнитьВыражениеОбменаДанныхCOM(Реквизит.Выражение, новОбъект, ,Выборка, ,Изменился, стрОшибки, Connector) Тогда
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// Проверим табличные части
		
		// ИмяТаблицыИсточника
		// ИмяРеквизитаИсточника
		// ИмяПриемника

		ОбработанныеТаблицы = Новый Структура;
		// складируем обработанные строки всех табличных частей. работает если у приемника одна таблиная часть, а у источника одна и более. наоборот не работает!!!
		ОтработанныеСтроки = Новый массив; 	// будем складывать индексы тех строк, которые мы находили в текущем объекте
											// а все то что не найдем то мы удалим
			
		Для Каждого Строка Из ТаблицаСтруктурТаблиц Цикл
			
			// Если уже обработали то пропустим
			
			Если ОбработанныеТаблицы.Свойство(Строка.ИмяТаблицыИсточника) Тогда
				Продолжить;
			КонецЕсли;
			
			ОбработанныеТаблицы.Вставить(Строка.ИмяТаблицыИсточника, Истина);
			
			ИмяПриемника = Строка.ИмяПриемника;
			Если СтрЧислоВхождений(ИмяПриемника, ".") <> 1 Тогда // пока обрабатываем правило таблицу в таблицу, более сложные вещи оставим на будущее
				стрОшибки = "нет возможности обработать правило таблицы " + Строка.ИмяТаблицыИсточника + "." + Строка.ИмяРеквизитаИсточника + " -> " + ИмяПриемника;
				Возврат Ложь;
			КонецЕсли;
			
			СтрокиТаблиц 	= ТаблицаСтруктурТаблиц.НайтиСтроки(Новый Структура("ИмяТаблицыИсточника", Строка.ИмяТаблицыИсточника));
			НовТаблица		= новОбъект[Лев(ИмяПриемника, Найти(ИмяПриемника, ".") - 1)];
			Таблица81 	= Выборка[Строка.ИмяТаблицыИсточника].Выгрузить();
			
			Для Каждого Строка81 Из Таблица81 Цикл
				
				// Поищем строку
				
				поискСтрок = новый Структура;
				
				Для Каждого СтрокаТаблицы Из СтрокиТаблиц Цикл
					Если ПустаяСтрока(СтрокаТаблицы.Выражение) Тогда
						
						Если Строка81[СтрокаТаблицы.ИмяРеквизитаИсточника] = Неопределено Тогда
							Продолжить;
						КонецЕсли;
						
						НовоеЗначениеПоиска = ПолучитьЗначениеИзЗначения81(Строка81[СтрокаТаблицы.ИмяРеквизитаИсточника], стрОшибки, Connector);
						Если НовоеЗначениеПоиска = Неопределено Тогда
							Возврат Ложь;
						КонецЕсли;
						
						// Частные случаи
						
						Если 	СтрокаТаблицы.ИмяРеквизитаИсточника = "Сумма" Или  
								СтрокаТаблицы.ИмяРеквизитаИсточника = "СуммаНДС" Или
								СтрокаТаблицы.ИмяРеквизитаИсточника = "Цена" Тогда
								
							НовоеЗначениеПоиска = Окр(НовоеЗначениеПоиска, 2);
							
						КонецЕсли;
						
						// Вставляем поиск
						
						поискСтрок.Вставить(Сред(СтрокаТаблицы.ИмяПриемника, найти(СтрокаТаблицы.ИмяПриемника, ".") + 1), НовоеЗначениеПоиска);
						
					КонецЕсли;
				КонецЦикла;
				
				// Определим строку приемник
				
				ПодобныеСтроки = новТаблица.найтиСтроки(поискСтрок);
				Если ПодобныеСтроки.Количество() Тогда
					новСтрока = ПодобныеСтроки[0];
				Иначе
					новСтрока = новТаблица.Добавить();
					Изменился = Истина;
					
					// сообщалка
					Если сообщатьобИзменениях Тогда
						ОбщиеФункции.СообщитьТекст("Изменилась строка с параметрами:");
						Для Каждого Элемент Из поискСтрок Цикл
							ОбщиеФункции.СообщитьТекст(Элемент.Ключ + " = " + Элемент.Значение);
						КонецЦикла;
					КонецЕсли;
					
				КонецЕсли;
				
				Если Не ЭтоНовыйОбъект Тогда
					ОтработанныеСтроки.Добавить(новТаблица.Индекс(новСтрока));
				КонецЕсли;
				
				// Обновим как рекизит
				
				Для Каждого СтрокаТаблицы Из СтрокиТаблиц Цикл
					
					Если пустаяСтрока(СтрокаТаблицы.Выражение)Тогда
						
						имяКолонкиПриемника = Сред(СтрокаТаблицы.ИмяПриемника, найти(СтрокаТаблицы.ИмяПриемника, ".") + 1);
						ОбновитьРеквизитобъекта(новСтрока, имяКолонкиПриемника, Строка81[СтрокаТаблицы.ИмяРеквизитаИсточника], Изменился,стрОшибки, Connector);
					
					ИначеЕсли Не ВыполнитьВыражениеОбменаДанныхCOM(СтрокаТаблицы.Выражение, новОбъект, новСтрока, Выборка, Строка81, Изменился, стрОшибки, Connector) Тогда
						
						Возврат Ложь;
						
					КонецЕсли;
					
				КонецЦикла;
			КонецЦикла;
			
			// Удалим лишнии строки
			Если Не ЭтоНовыйОбъект Тогда
				
				КолСтрок 	= новТаблица.Количество();
				инд 		= КолСтрок;
				
				Для Ном = 1 По КолСтрок Цикл Инд = Инд - 1;
					
					Если ОтработанныеСтроки.Найти(Инд) = Неопределено Тогда
						НовТаблица.Удалить(Инд);
						Изменился = Истина;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
			
		// Запишем объект
		
		Если Изменился Тогда
			
			Если ЭтоСправочник Тогда
				
				Если Не ЗаписатьСправочник(новОбъект, стрОшибки) Тогда
					
					Если ПравилоСопоставления.ОстанавливатьсяПриОшибке Тогда
					
						Возврат Ложь;
					
					Иначе
					
						ОбщиеФункции.СообщитьТекст(стрОшибки);
						стрОшибки = "";
					
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ЭтоДокумент Тогда
				
				Проведен = новОбъект.проведен;
				
				Если Не ЗаписатьДокумент(	новОбъект, 
												?(Проведен И Не Выборка.Проведен, 
													РежимЗаписиДокумента.ОтменаПроведения,
													?(Выборка.Проведен, 
														РежимЗаписиДокумента.Проведение,
														РежимЗаписиДокумента.Запись)
											),
											стрОшибки) Тогда
											
					Если ПравилоСопоставления.ОстанавливатьсяПриОшибке Тогда
							
						Возврат ложь;
						
					Иначе
						
						ОбщиеФункции.СообщитьТекст(стрОшибки);
						стрОшибки = "";
						
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
				
КонецФункции
Функция СинхронизироватьОбъект(УникальныйИдентификатор, ПравилоСопоставления, СоздаватьОбъектЕслиНет = Истина, стрОшибки = "") Экспорт
				
	// Синхронизирует объект81
	// 	Возвращает ИСТИНА если все нормально
	
	// Зададим переменные
	
	Перем СтруктураПараметров;
	
	МетаОбъект = ПолучитьМетаОбъектПоПравилу(ПравилоСопоставления,, стрОшибки);
	Если МетаОбъект = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Иерархический = Ложь;
	
	//ПропускаемыеРеквизиты 	= ПравилоСопоставления.ПропускаемыеРеквизиты.ВыгрузитьКолонку("Имя");
	ПропускаемыеРеквизиты = Новый Массив;
	РеквизитыКЗагрузке 		= "";
	
	ЭтоСправочник 	= Ложь;
	ЭтоДокумент 	= Ложь;
	
	// Определим менеджер и особые реквизиты загрузки
	
	Если Метаданные.Справочники.Содержит(МетаОбъект) Тогда
		
		ЭтоСправочник 	= Истина;
		
		Менеджер 		= Справочники[МетаОбъект.Имя];
		Иерархический 	= МетаОбъект.Иерархический;
		
		Если Иерархический Тогда
			ДобавитьРеквизитКЗагрузке(РеквизитыКЗагрузке, ПропускаемыеРеквизиты, "ЭтоГруппа");
		КонецЕсли;
		
	ИначеЕсли Метаданные.Документы.Содержит(МетаОбъект) Тогда
		
		ЭтоДокумент 	= Истина;
		
		Менеджер 		= Документы[МетаОбъект.Имя];
		
		ДобавитьРеквизитКЗагрузке(РеквизитыКЗагрузке, ПропускаемыеРеквизиты, "Проведен");
		ДобавитьРеквизитКЗагрузке(РеквизитыКЗагрузке, ПропускаемыеРеквизиты, "Номер");
		ДобавитьРеквизитКЗагрузке(РеквизитыКЗагрузке, ПропускаемыеРеквизиты, "Дата");
		
	Иначе
		
		стрОшибки = "Не могу определить менеджер объекта " + МетаОбъект;
		Возврат Ложь; 
		
	КонецЕсли;
	
	// получим коннектор для определения ссылки уникального идентификатора
	
	Connector = КэшируемыеФункции.ИницилизироватьCOMConnector81(, стрОшибки);
	Если Connector = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МетаОб81 = ПолучитьМетаОбъект81ПоПравилу(Connector, ПравилоСопоставления,, стрОшибки);
	Если МетаОб81 = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЭтоСправочник Тогда
		
		Ссылка81 = Connector.Справочники[МетаОб81.Имя].ПолучитьСсылку(Connector.NewObject("УникальныйИдентификатор", УникальныйИдентификатор));
		
	ИначеЕсли ЭтоДокумент Тогда
		
		Ссылка81 = Connector.Документы[МетаОб81.Имя].ПолучитьСсылку(Connector.NewObject("УникальныйИдентификатор", УникальныйИдентификатор));
		
	Иначе
		
		стрОшибки = "Нет определения менеджера объекта при синхронизации объекта
		|для синхронизации нужно прописать менеджер в функции ""СинхронизироватьОбъект"" модуля COMServer";
		Возврат Ложь;
		
	КонецЕсли;
	
	// Подготовим информацию по вложенным таблицам
	
	// таблицаЗначений по структре колонок с полями
	// ИмяТаблицыИсточника
	// ИмяРеквизитаИсточника
	// ИмяПриемника
	
	ТаблицаСтруктурТаблиц 	= Новый ТаблицаЗначений;
	ТипСтрока 				= Новый ОписаниеТипов("Строка");
	ТекстыВложенныхТаблиц	= Новый Структура;
	
	ТаблицаСтруктурТаблиц.Колонки.Добавить("ИмяТаблицыИсточника", 	ТипСтрока);
	ТаблицаСтруктурТаблиц.Колонки.Добавить("ИмяРеквизитаИсточника", ТипСтрока);
	ТаблицаСтруктурТаблиц.Колонки.Добавить("ИмяПриемника", 			ТипСтрока);
	ТаблицаСтруктурТаблиц.Колонки.Добавить("Выражение", 			ТипСтрока);
	
	Для Каждого Строка Из ПравилоСопоставления.РеквизитыКЗагрузке Цикл
		
		Если 	Строка.Этотаблица И
				СтрЧислоВхождений(Строка.ИмяИсточника, ".") = 1 Тогда
			
			ИмяТаблицыИсточника 	= Лев(Строка.ИмяИсточника, Найти(Строка.ИмяИсточника,".") - 1);
			ИмяРеквизитаИсточника	= Сред(Строка.ИмяИсточника, Найти(Строка.ИмяИсточника,".") + 1);
			
			НовСтрока = ТаблицаСтруктурТаблиц.Добавить();
			НовСтрока.ИмяТаблицыИсточника 	= ИмяТаблицыИсточника;
			НовСтрока.ИмяРеквизитаИсточника = ИмяРеквизитаИсточника;
			НовСтрока.ИмяПриемника 			= Строка.ИмяПриемника;
			НовСтрока.Выражение 			= Строка.Выражение;
			
			УжеЕстьТекст = Неопределено;
			ТекстыВложенныхТаблиц.Свойство(ИмяТаблицыИсточника, УжеЕстьТекст);
			ТекстыВложенныхТаблиц.Вставить(ИмяТаблицыИсточника, ?(УжеЕстьТекст = Неопределено,"", УжеЕстьТекст + ",
									|") + ИмяРеквизитаИсточника);
		Иначе
			
			// Добавим обычный реквизит
			ДобавитьРеквизитКЗагрузке(РеквизитыКЗагрузке, ПропускаемыеРеквизиты, Строка.ИмяИсточника, СтрЗаменить(Строка.ИмяПриемника,".",""));
			
		КонецЕсли;
	КонецЦикла;
	
	// Составим текст для вложенных таблиц
	Для Каждого ЭлементТекста Из ТекстыВложенныхТаблиц Цикл
		
		РеквизитыКЗагрузке = 
			РеквизитыКЗагрузке + 
			?(РеквизитыКЗагрузке = "","","," + Символы.ПС) + 
			ЭлементТекста.Ключ + ".(" + ЭлементТекста.Значение + ") КАК " + ЭлементТекста.Ключ;
			
	КонецЦикла;
	
	// Получим ссылку и определим ее
	
	Ссылка 			= Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(УникальныйИдентификатор));
	ЭтоНовыйОбъект 	= Ссылка.Пустая();
	
	Если Не ЭтоНовыйОбъект Тогда
		новОбъект 		= Ссылка.ПолучитьОбъект();
		ЭтоНовыйОбъект 	= новОбъект = Неопределено;
	КонецЕсли;
	
	Если ЭтоНовыйОбъект Тогда
		
		Если Не СоздаватьОбъектЕслиНет Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
		Изменился = Истина;
			
		Если ЭтоСправочник Тогда
			
			новОбъект = ?(Иерархический И Ссылка81.ЭтоГруппа, 
												Менеджер.СоздатьГруппу(),
												Менеджер.СоздатьЭлемент());
				
		ИначеЕсли ЭтоДокумент Тогда
				
			новОбъект = Менеджер.СоздатьДокумент();
					
		КонецЕсли;
			
		новОбъект.УстановитьСсылкуНового(Ссылка);
		
	Иначе
		
		Изменился = Ложь;
				
	КонецЕсли;
	
	// Проверим системные реквизиты	
	
	Если ЭтоДокумент И новОбъект.Проведен <> Ссылка81.Проведен Тогда
		Изменился = Истина;
	КонецЕсли;
	
	// Проверим реквизиты
		
	Для Каждого Реквизит Из ПравилоСопоставления.РеквизитыКЗагрузке Цикл
		Если Не Найти(Реквизит.ИмяПриемника, ".") Тогда
			Если ПустаяСтрока(Реквизит.Выражение) Тогда
				ОбновитьРеквизитобъекта(новОбъект, Реквизит.ИмяПриемника, Вычислить("Ссылка81." + Реквизит.ИмяИсточника), Изменился, стрОшибки, Connector);
			ИначеЕсли Не ВыполнитьВыражениеОбменаДанныхCOM(Реквизит.Выражение, новОбъект, ,Ссылка81, ,Изменился, стрОшибки, Connector) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
		
	// Проверим табличные части
	
	// ИмяТаблицыИсточника
	// ИмяРеквизитаИсточника
	// ИмяПриемника

	ОбработанныеТаблицы = Новый Структура;

	сч = 0;
	Для Каждого Строка Из ТаблицаСтруктурТаблиц Цикл
		сч = сч + 1;
		// Если уже обработали то пропустим
		
		Если ОбработанныеТаблицы.Свойство(Строка.ИмяТаблицыИсточника) Тогда
			Продолжить;
		КонецЕсли;
		
		ОбработанныеТаблицы.Вставить(Строка.ИмяТаблицыИсточника, Истина);
		
		ИмяПриемника = Строка.ИмяПриемника;
		Если СтрЧислоВхождений(ИмяПриемника, ".") <> 1 Тогда // пока обрабатываем правило таблицу в таблицу, более сложные вещи оставим на будущее
			стрОшибки = "нет возможности обработать правило таблицы " + Строка.ИмяТаблицыИсточника + "." + Строка.ИмяРеквизитаИсточника + " -> " + ИмяПриемника;
			Возврат Ложь;
		КонецЕсли;
		
		СтрокиТаблиц 	= ТаблицаСтруктурТаблиц.НайтиСтроки(Новый Структура("ИмяТаблицыИсточника", Строка.ИмяТаблицыИсточника));
		
		Если сч = 1 Тогда
			НовТаблица		= новОбъект[Лев(ИмяПриемника, Найти(ИмяПриемника, ".") - 1)];
			ОтработанныеСтроки = Новый массив; 	// будем складывать индексы тех строк, которые мы находили в текущем объекте
												// а все то что не найдем то мы удалим
		КонецЕсли;
		
		
		Таблица81 		= Ссылка81[Строка.ИмяТаблицыИсточника].Выгрузить();
		
											
		//ЕСЛИ Не ЭтоНовыйОбъект И ИСТИНА ТОГДА // !!!! Почемуто дублируются некоторые строки, поэтому я буду всегда очищать старый документ перед заполнением
		//	НовТаблица.Очистить();
		//	Изменился = Ложь;
		//КОНЕЦЕСЛИ;										

			
		Для Каждого Строка81 Из Таблица81 Цикл
			
			// Поищем строку
			
			поискСтрок = новый Структура;
			
			Для Каждого СтрокаТаблицы Из СтрокиТаблиц Цикл
				Если ПустаяСтрока(СтрокаТаблицы.Выражение) Тогда
					
					Если Строка81[СтрокаТаблицы.ИмяРеквизитаИсточника] = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					НовоеЗначениеПоиска = ПолучитьЗначениеИзЗначения81(Строка81[СтрокаТаблицы.ИмяРеквизитаИсточника], стрОшибки, Connector);
					Если НовоеЗначениеПоиска = Неопределено Тогда
						Возврат Ложь;
					КонецЕсли;
					
					поискСтрок.Вставить(Сред(СтрокаТаблицы.ИмяПриемника, найти(СтрокаТаблицы.ИмяПриемника, ".") + 1), НовоеЗначениеПоиска);
					
				КонецЕсли;
			КонецЦикла;
				
			// Определим строку приемник
			
			ПодобныеСтроки = новТаблица.найтиСтроки(поискСтрок);
			Если ПодобныеСтроки.Количество() Тогда
				новСтрока = ПодобныеСтроки[0];
			Иначе
				новСтрока = новТаблица.Добавить();
				Изменился = Истина;
			КонецЕсли;
			
			Если Не ЭтоНовыйОбъект Тогда
				ОтработанныеСтроки.Добавить(новТаблица.Индекс(новСтрока));
			КонецЕсли;
			
			// Обновим как рекизит
			
			Для Каждого СтрокаТаблицы Из СтрокиТаблиц Цикл
				
				Если пустаяСтрока(СтрокаТаблицы.Выражение)Тогда
					
					имяКолонкиПриемника = Сред(СтрокаТаблицы.ИмяПриемника, найти(СтрокаТаблицы.ИмяПриемника, ".") + 1);
					ОбновитьРеквизитобъекта(новСтрока, имяКолонкиПриемника, Строка81[СтрокаТаблицы.ИмяРеквизитаИсточника], Изменился, стрОшибки, Connector);
				
				ИначеЕсли Не ВыполнитьВыражениеОбменаДанныхCOM(СтрокаТаблицы.Выражение, новОбъект, новСтрока, Ссылка81, Строка81, Изменился, стрОшибки, Connector) Тогда
					
					Возврат Ложь;
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
		
		
	КонецЦикла;
	// Удалим лишнии строки
		Если Не ЭтоНовыйОбъект И сч > 0 Тогда
			
			КолСтрок 	= новТаблица.Количество();
			инд 		= КолСтрок;
			
			Для Ном = 1 По КолСтрок Цикл Инд = Инд - 1;
				
				Если ОтработанныеСтроки.Найти(Инд) = Неопределено Тогда
					НовТаблица.Удалить(Инд);
					Изменился = Истина;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	
			
	// Запишем объект
	
	Если Изменился Тогда
		
		Если ЭтоСправочник Тогда
			
			Если Не ЗаписатьСправочник(новОбъект, стрОшибки) Тогда
				
				Если ПравилоСопоставления.ОстанавливатьсяПриОшибке Тогда
				
					Возврат Ложь;
				
				Иначе
				
					ОбщиеФункции.СообщитьТекст(стрОшибки);
					стрОшибки = "";
				
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ЭтоДокумент Тогда
			
			Проведен = новОбъект.проведен;
			
			Если Не ЗаписатьДокумент(	новОбъект, 
											?(Проведен И Не Ссылка81.Проведен, 
												РежимЗаписиДокумента.ОтменаПроведения,
												?(Ссылка81.Проведен, 
													РежимЗаписиДокумента.Проведение,
													РежимЗаписиДокумента.Запись)
										),
										стрОшибки) Тогда
										
				Если ПравилоСопоставления.ОстанавливатьсяПриОшибке Тогда
						
					Возврат ложь;
					
				Иначе
					
					ОбщиеФункции.СообщитьТекст(стрОшибки);
					Возврат ложь;
					//стрОшибки = "";
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
				
КонецФункции
Функция СинхронизироватьОбъект_ПоОбъектуСтруктуре(ОбъектСтруктура, ПравилоСопоставления, СоздаватьОбъектЕслиНет = Истина, стрОшибки = "", НовОбъектСсылка82 = Неопределено, БезПроведения = Ложь) Экспорт
				
	// Синхронизирует объект81
	// 	Возвращает ИСТИНА если все нормально
	
	// Зададим переменные
	
	Перем СтруктураПараметров;
	
	МетаОбъект = ПолучитьМетаОбъектПоПравилу(ПравилоСопоставления,, стрОшибки);
	Если МетаОбъект = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Иерархический = Ложь;
	
	//ПропускаемыеРеквизиты 	= ПравилоСопоставления.ПропускаемыеРеквизиты.ВыгрузитьКолонку("Имя");
	ПропускаемыеРеквизиты = Новый Массив;
	РеквизитыКЗагрузке 		= "";
	
	ЭтоСправочник 	= Ложь;
	ЭтоДокумент 	= Ложь;
	
	// Определим менеджер и особые реквизиты загрузки
	
	Если Метаданные.Справочники.Содержит(МетаОбъект) Тогда
		
		ЭтоСправочник 	= Истина;
		
		Менеджер 		= Справочники[МетаОбъект.Имя];
		Иерархический 	= МетаОбъект.Иерархический;
		
		Если Иерархический Тогда
			ДобавитьРеквизитКЗагрузке(РеквизитыКЗагрузке, ПропускаемыеРеквизиты, "ЭтоГруппа");
		КонецЕсли;
		
	ИначеЕсли Метаданные.Документы.Содержит(МетаОбъект) Тогда
		
		ЭтоДокумент 	= Истина;
		
		Менеджер 		= Документы[МетаОбъект.Имя];
		
		ДобавитьРеквизитКЗагрузке(РеквизитыКЗагрузке, ПропускаемыеРеквизиты, "Проведен");
		ДобавитьРеквизитКЗагрузке(РеквизитыКЗагрузке, ПропускаемыеРеквизиты, "Номер");
		ДобавитьРеквизитКЗагрузке(РеквизитыКЗагрузке, ПропускаемыеРеквизиты, "Дата");
		
	Иначе
		
		стрОшибки = "Не могу определить менеджер объекта " + МетаОбъект;
		Возврат Ложь; 
		
	КонецЕсли;
	
	// получим коннектор для определения ссылки уникального идентификатора
	
	Connector = КэшируемыеФункции.ИницилизироватьCOMConnector81(, стрОшибки);
	Если Connector = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МетаОб81 = ПолучитьМетаОбъект81ПоПравилу(Connector, ПравилоСопоставления,, стрОшибки);
	Если МетаОб81 = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЭтоСправочник Тогда
		
		//Ссылка81 = Connector.Справочники[МетаОб81.Имя].ПолучитьСсылку(Connector.NewObject("УникальныйИдентификатор", УникальныйИдентификатор));
		Ссылка81 = Connector.Справочники[МетаОб81.Имя].ПолучитьСсылку(Connector.NewObject("УникальныйИдентификатор", ОбъектСтруктура.Ссылка));
		
	ИначеЕсли ЭтоДокумент Тогда
		
		//Ссылка81 = Connector.Документы[МетаОб81.Имя].ПолучитьСсылку(Connector.NewObject("УникальныйИдентификатор", УникальныйИдентификатор));
		Ссылка81 = Connector.Документы[МетаОб81.Имя].ПолучитьСсылку(Connector.NewObject("УникальныйИдентификатор", ОбъектСтруктура.Ссылка));
		
	Иначе
		
		стрОшибки = "Нет определения менеджера объекта при синхронизации объекта
		|для синхронизации нужно прописать менеджер в функции ""СинхронизироватьОбъект"" модуля COMServer";
		Возврат Ложь;
		
	КонецЕсли;
	
	// Проверим что загружаемый объект соответствует отбору
	//Для Каждого Строка Из ПравилоСопоставления.Отборы Цикл
	//	
	//	Если Врег(Строка.ВидСравнения) = Врег("Выражение") Тогда
	//		
	//		ОтказОтЗагрузки = Ложь;
	//		Если Не ВыполнитьВыражениеОтбора(Строка.Значение, Ссылка81, ОтказОтЗагрузки, стрОшибки) Тогда
	//			Возврат Ложь;
	//		КонецЕсли;
	//		
	//		Если ОтказОтЗагрузки Тогда
	//			Возврат Истина;
	//		КонецЕсли;
	//		
	//		//	ВыполнитьВыражениеОбменаДанныхCOM();
	//		//
	//		//Подходит = Вычислить("Ссылка81." + Строка.ИмяРеквизита + " = Строка.Значение");
	//		//Если Не Подходит Тогда
	//		//	Возврат Истина;
	//		//КонецЕсли;
	//		
	//	КонецЕсли;
	//КонецЦикла;
	
	
	// Подготовим информацию по вложенным таблицам
	
	// таблицаЗначений по структре колонок с полями
	// ИмяТаблицыИсточника
	// ИмяРеквизитаИсточника
	// ИмяПриемника
	
	ТаблицаСтруктурТаблиц 	= Новый ТаблицаЗначений;
	ТипСтрока 				= Новый ОписаниеТипов("Строка");
	ТекстыВложенныхТаблиц	= Новый Структура;
	
	ТаблицаСтруктурТаблиц.Колонки.Добавить("ИмяТаблицыИсточника", 	ТипСтрока);
	ТаблицаСтруктурТаблиц.Колонки.Добавить("ИмяРеквизитаИсточника", ТипСтрока);
	ТаблицаСтруктурТаблиц.Колонки.Добавить("ИмяПриемника", 			ТипСтрока);
	ТаблицаСтруктурТаблиц.Колонки.Добавить("Выражение", 			ТипСтрока);
	
	Для Каждого Строка Из ПравилоСопоставления.РеквизитыКЗагрузке Цикл
		
		Если 	Строка.Этотаблица И
				СтрЧислоВхождений(Строка.ИмяИсточника, ".") = 1 Тогда
			
			ИмяТаблицыИсточника 	= Лев(Строка.ИмяИсточника, Найти(Строка.ИмяИсточника,".") - 1);
			ИмяРеквизитаИсточника	= Сред(Строка.ИмяИсточника, Найти(Строка.ИмяИсточника,".") + 1);
			
			НовСтрока = ТаблицаСтруктурТаблиц.Добавить();
			НовСтрока.ИмяТаблицыИсточника 	= ИмяТаблицыИсточника;
			НовСтрока.ИмяРеквизитаИсточника = ИмяРеквизитаИсточника;
			НовСтрока.ИмяПриемника 			= Строка.ИмяПриемника;
			НовСтрока.Выражение 			= Строка.Выражение;
			
			УжеЕстьТекст = Неопределено;
			ТекстыВложенныхТаблиц.Свойство(ИмяТаблицыИсточника, УжеЕстьТекст);
			ТекстыВложенныхТаблиц.Вставить(ИмяТаблицыИсточника, ?(УжеЕстьТекст = Неопределено,"", УжеЕстьТекст + ",
									|") + ИмяРеквизитаИсточника);
		Иначе
			
			// Добавим обычный реквизит
			ДобавитьРеквизитКЗагрузке(РеквизитыКЗагрузке, ПропускаемыеРеквизиты, Строка.ИмяИсточника, СтрЗаменить(Строка.ИмяПриемника,".",""));
			
		КонецЕсли;
	КонецЦикла;
	
	// Составим текст для вложенных таблиц
	Для Каждого ЭлементТекста Из ТекстыВложенныхТаблиц Цикл
		
		РеквизитыКЗагрузке = 
			РеквизитыКЗагрузке + 
			?(РеквизитыКЗагрузке = "","","," + Символы.ПС) + 
			ЭлементТекста.Ключ + ".(" + ЭлементТекста.Значение + ") КАК " + ЭлементТекста.Ключ;
			
	КонецЦикла;
	
	// Получим ссылку и определим ее
	
	Ссылка 			= Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектСтруктура.Ссылка));
	ЭтоНовыйОбъект 	= Ссылка.Пустая();
	
	Если Не ЭтоНовыйОбъект Тогда
		новОбъект 		= Ссылка.ПолучитьОбъект();
		ЭтоНовыйОбъект 	= новОбъект = Неопределено;
	КонецЕсли;
	
	Если ЭтоНовыйОбъект Тогда
		
		Если Не СоздаватьОбъектЕслиНет Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
		Изменился = Истина;
			
		Если ЭтоСправочник Тогда
			
			новОбъект = ?(Иерархический И ОбъектСтруктура.ЭтоГруппа, 
												Менеджер.СоздатьГруппу(),
												Менеджер.СоздатьЭлемент());
				
		ИначеЕсли ЭтоДокумент Тогда
				
			новОбъект = Менеджер.СоздатьДокумент();
					
		КонецЕсли;
			
		новОбъект.УстановитьСсылкуНового(Ссылка);
		
	Иначе
		
		Изменился = Ложь;
				
	КонецЕсли;
	
	// Проверим системные реквизиты	
	
	Если ЭтоДокумент И новОбъект.Проведен <> ОбъектСтруктура.Проведен Тогда
		Изменился = Истина;
	КонецЕсли;
	
	// Проверим реквизиты
		
	Для Каждого Реквизит Из ПравилоСопоставления.РеквизитыКЗагрузке Цикл
		Если Не Найти(Реквизит.ИмяПриемника, ".") Тогда
			Если ПустаяСтрока(Реквизит.Выражение) Тогда
				
				//ОбновитьРеквизитобъекта(новОбъект, Реквизит.ИмяПриемника, Вычислить("ОбъектСтруктура." + Реквизит.ИмяИсточника), Изменился);
				
				Если Найти(Реквизит.ИмяИсточника,".") Тогда
					текЗначение = Вычислить("Ссылка81." + Реквизит.ИмяИсточника);
				Иначе
					текЗначение = Вычислить("ОбъектСтруктура." + Реквизит.ИмяИсточника);
				КонецЕсли;
				
				ОбновитьРеквизитобъекта(новОбъект, Реквизит.ИмяПриемника, ПолучитьЗначениеИзПолуЗначенияЗначения81XML(текЗначение, ТипЗнч(новОбъект[Реквизит.ИмяПриемника])), Изменился, стрОшибки, Connector);
				
			ИначеЕсли Не ВыполнитьВыражениеОбменаДанныхCOM(Реквизит.Выражение, новОбъект, ,ОбъектСтруктура, ,Изменился, стрОшибки, Connector) Тогда
				
				Возврат Ложь;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
		
	// Проверим табличные части
	
	// ИмяТаблицыИсточника
	// ИмяРеквизитаИсточника
	// ИмяПриемника

	ОбработанныеТаблицы = Новый Структура;
	сч = 0;
	Для Каждого Строка Из ТаблицаСтруктурТаблиц Цикл
		сч = сч + 1;
		// Если уже обработали то пропустим
		
		Если ОбработанныеТаблицы.Свойство(Строка.ИмяТаблицыИсточника) Тогда
			Продолжить;
		КонецЕсли;
		
		ОбработанныеТаблицы.Вставить(Строка.ИмяТаблицыИсточника, Истина);
		
		ИмяПриемника = Строка.ИмяПриемника;
		Если СтрЧислоВхождений(ИмяПриемника, ".") <> 1 Тогда // пока обрабатываем правило таблицу в таблицу, более сложные вещи оставим на будущее
			стрОшибки = "нет возможности обработать правило таблицы " + Строка.ИмяТаблицыИсточника + "." + Строка.ИмяРеквизитаИсточника + " -> " + ИмяПриемника;
			Возврат Ложь;
		КонецЕсли;
		
		СтрокиТаблиц 	= ТаблицаСтруктурТаблиц.НайтиСтроки(Новый Структура("ИмяТаблицыИсточника", Строка.ИмяТаблицыИсточника));
		Если сч = 1 Тогда
			ИмяНовойТаблицы = Лев(ИмяПриемника, Найти(ИмяПриемника, ".") - 1);
			НовТаблица		= новОбъект[ИмяНовойТаблицы];
			ОтработанныеСтроки = Новый массив; 	// будем складывать индексы тех строк, которые мы находили в текущем объекте
												// а все то что не найдем то мы удалим
		КонецЕсли;
		
		Массив81 		= ОбъектСтруктура[Строка.ИмяТаблицыИсточника];
		
		
		//Если Не ЭтоНовыйОбъект Тогда
		//	НовТаблица.Очистить();
		//КонецЕсли;
			
		Для Каждого Строка81 Из Массив81 Цикл
			
			// Поищем строку
			
			поискСтрок = новый Структура;
			
			Для Каждого СтрокаТаблицы Из СтрокиТаблиц Цикл
				Если ПустаяСтрока(СтрокаТаблицы.Выражение) Тогда
					
					текЗначение 		= Строка81[СтрокаТаблицы.ИмяРеквизитаИсточника];
					текТипЗначения 		= МетаОбъект.ТабличныеЧасти[ИмяНовойТаблицы].Реквизиты[Сред(СтрокаТаблицы.ИмяПриемника, Найти(СтрокаТаблицы.ИмяПриемника, ".") + 1)].Тип.Типы()[0];
					НовоеЗначениеПоиска = ПолучитьЗначениеИзПолуЗначенияЗначения81XML(текЗначение, текТипЗначения, стрОшибки);
					//НовоеЗначениеПоиска = ПолучитьЗначениеИзЗначения81(Строка81[СтрокаТаблицы.ИмяРеквизитаИсточника], стрОшибки);
					Если НовоеЗначениеПоиска = Неопределено Тогда
						Возврат Ложь;
					КонецЕсли;
					
					поискСтрок.Вставить(Сред(СтрокаТаблицы.ИмяПриемника, найти(СтрокаТаблицы.ИмяПриемника, ".") + 1), НовоеЗначениеПоиска);
					
				КонецЕсли;
			КонецЦикла;
				
			// Определим строку приемник
			
			ПодобныеСтроки = новТаблица.найтиСтроки(поискСтрок);
			
			Если ПодобныеСтроки.Количество() Тогда
				новСтрока = ПодобныеСтроки[0];
			Иначе
				новСтрока = новТаблица.Добавить();
				Изменился = Истина;
			КонецЕсли;
			
			Если Не ЭтоНовыйОбъект Тогда
				ОтработанныеСтроки.Добавить(новТаблица.Индекс(новСтрока));
			КонецЕсли;
			
			// Обновим как рекизит
			
			Для Каждого СтрокаТаблицы Из СтрокиТаблиц Цикл
				
				Если пустаяСтрока(СтрокаТаблицы.Выражение)Тогда
					
					имяКолонкиПриемника = Сред(СтрокаТаблицы.ИмяПриемника, найти(СтрокаТаблицы.ИмяПриемника, ".") + 1);
					//ОбновитьРеквизитобъекта(новСтрока, имяКолонкиПриемника, Строка81[СтрокаТаблицы.ИмяРеквизитаИсточника], Изменился);
					текЗначение = Строка81[СтрокаТаблицы.ИмяРеквизитаИсточника];
					ОбновитьРеквизитобъекта(новСтрока, имяКолонкиПриемника, ПолучитьЗначениеИзПолуЗначенияЗначения81XML(текЗначение, ТипЗнч(НовСтрока[имяКолонкиПриемника])), Изменился, стрОшибки, Connector);
				
				ИначеЕсли Не ВыполнитьВыражениеОбменаДанныхCOM(СтрокаТаблицы.Выражение, новОбъект, новСтрока, ОбъектСтруктура, Строка81, Изменился, стрОшибки, Connector) Тогда
					
					Возврат Ложь;
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
		
		
	КонецЦикла;
	
		// Удалим лишнии строки
		Если Не ЭтоНовыйОбъект и сч > 0 Тогда
			
			КолСтрок 	= новТаблица.Количество();
			инд 		= КолСтрок;
			
			Для Ном = 1 По КолСтрок Цикл Инд = Инд - 1;
				
				Если ОтработанныеСтроки.Найти(Инд) = Неопределено Тогда
					НовТаблица.Удалить(Инд);
					Изменился = Истина;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	
	
			
	// Запишем объект
	
	Если Изменился Тогда
		
		Если ЭтоСправочник Тогда
			
			Если Не ЗаписатьСправочник(новОбъект, стрОшибки) Тогда
				
				Если ПравилоСопоставления.ОстанавливатьсяПриОшибке Тогда
				
					Возврат Ложь;
				
				Иначе
				
					ОбщиеФункции.СообщитьТекст(стрОшибки);
					стрОшибки = "";
				
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ЭтоДокумент Тогда
			
			Проведен = новОбъект.проведен;
			
			Если Не ЗаписатьДокумент(	новОбъект, 
											?(Проведен И Не ОбъектСтруктура.Проведен, 
												РежимЗаписиДокумента.ОтменаПроведения,
												?(БезПроведения,
														РежимЗаписиДокумента.Запись,
														?(ОбъектСтруктура.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись)
												)
											),
										стрОшибки) Тогда

										
				Если ПравилоСопоставления.ОстанавливатьсяПриОшибке Тогда
						
					Возврат ложь;
					
				Иначе
					
					ОбщиеФункции.СообщитьТекст(стрОшибки);
					Возврат ложь;
					//стрОшибки = "";
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НовОбъект <> Неопределено Тогда
		НовОбъектСсылка82 = НовОбъект.Ссылка;
	КонецЕсли;
	
	Возврат Истина;
				
КонецФункции

Функция ВыполнитьВыражениеОтбора(Выражение, Ссылка81, Отказ, стрОшибки = Неопределено)
	
	Попытка
		Выполнить(Выражение);
	Исключение
		ошибка = ОписаниеОшибки();
		стрОшибки = "Ошиба при вычислении выражения отбора
						|" + ошибка;
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции
Функция ВыполнитьВыражениеОбменаДанныхCOM(Выражение, Объект, СтрокаПриемника = Неопределено, Выборка, СтрокаИсточника = Неопределено, Изменился, стрОшибки = "", Connector)
	
	// Объект 			- новый или изменяемый объект текущей базы
	// СтрокаПриемника 	- строка таблицы нового объекта если это перебор строк
	// Выборка 			- выборка из объекта из COM базы у установленная на текущей строке объекта
	// СтрокаИсточника	- строка выборки источника COM базы если это перебор строк
	// Изменился 		- булево, если объект нужно записать то нужно установить ее в ИСТИНА
	// стрОшибки		- текст, в него можно вернуть выражение об ошибке если она произойдет
	// Connector - COM соединение
	
	Попытка
		Выполнить(Выражение);
	Исключение
		ошибка = ОписаниеОшибки();
		стрОшибки = "Ошиба при вычислении выражения
						|" + ошибка;
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

//Контактная информация

Функция ПолучитьГУИД(Connector, ТекущийОбъект)
	
	Если ТекущийОбъект <> Null Тогда
	
		Попытка
			ГУИД81 = Connector.String(ТекущийОбъект.УникальныйИдентификатор());
		Исключение
			Сообщить("Не удалось получить ГУИД """ + Строка(ТекущийОбъект) + """!
	                 |" + ОписаниеОшибки());
			Возврат Неопределено;
		КонецПопытки;
		
		Возврат ГУИД81;
		
	КонецЕсли;	
КонецФункции

Функция ЗаписатьКонтактнуюИнформацию(Контакт, стрОшибки);
	
	Набор = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
	Набор.Отбор.Объект.Установить(Контакт.Ссылка);
	
	Набор.Загрузить(Контакт.ДополнительныеСвойства.Регистр);
	
	Попытка 
		Набор.Записать();
		Возврат Истина;
	Исключение
		стрОшибки = ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Функция ЗаписатьРегистрКонтактнаяИнформация(Ссылка, Регистр, Менеджер, стрОшибки);
	
	Набор = РегистрыСведений[Менеджер].СоздатьНаборЗаписей();
	Набор.Отбор.Объект.Установить(Ссылка);
	
	Набор.Загрузить(Регистр);
	
	Попытка 
		Набор.Записать();
		Возврат Истина;
	Исключение
		стрОшибки = ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции


Функция ЗаписатьКонтакт(Контакт, стрОшибки)
	
	Контакт.ОбменДанными.Загрузка = Истина;
	
	Попытка
		Контакт.Записать();
		Возврат ЗаписатьКонтактнуюИнформацию(Контакт, стрОшибки);
	
	Исключение
		СтрОшибки = "Не удалось записать объект """ + Контакт + """!
	             	 |" + ОписаниеОшибки();
		Возврат Ложь;	 
	КонецПопытки;
	
КонецФункции

Функция ПолучитьПолеПредставление(Вид)
	ГруппаВид = Вид; 
	Если НЕ Вид.ЭтоГруппа Тогда
		ГруппаВид = Вид.Родитель;
	КонецЕсли;      
	Запрос = Новый Запрос("ВЫБРАТЬ Ссылка ИЗ ПланВидовХарактеристик.СоставКонтактнойИнформации ГДЕ Наименование = ""Представление"" И Вид=&ЭтотВид");
	Запрос.УстановитьПараметр("ЭтотВид", ГруппаВид);
	Рез = Запрос.Выполнить();
	Если НЕ Рез.Пустой() Тогда
		Выб = Рез.Выбрать();
		Выб.Следующий();
		Возврат Выб.Ссылка;
	КонецЕсли;
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьВидКИ(Ссылка, ГУИД, Группа, СоответствиеПолей = Неопределено)
	                                                    
	ТекущийВид 	= Справочники.ВидыКонтактнойИнформации.ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД));
	Вид			= ТекущийВид.ПолучитьОбъект();
								
	Если Вид = Неопределено Тогда
				 
		НовыйОбъект = Справочники.ВидыКонтактнойИнформации.СоздатьЭлемент();
		НовыйОбъект.УстановитьСсылкуНового(ТекущийВид);
		НовыйОбъект.УстановитьНовыйКод();
		НовыйОбъект.Наименование 	= Ссылка.Наименование;

		Если Группа = "Адрес" И Найти(Ссылка.Наименование, "Юридический адрес") Тогда
			НовыйОбъект.Родитель 		= ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.АдресЮридический");
		ИначеЕсли Группа = "Адрес" И Найти(Ссылка.Наименование, "Фактический адрес") Тогда	
			НовыйОбъект.Родитель 		= ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.АдресФактический");
		Иначе
			НовыйОбъект.Родитель 		= ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации." + Группа);
		КонецЕсли;
		
		ПолеПредставление = ПолучитьПолеПредставление(НовыйОбъект.Родитель);
		Если ПолеПредставление <> Неопределено Тогда
			НоваяСтрока		= НовыйОбъект.СоставПолей.Добавить();
			НоваяСтрока.Имя = ПолеПредставление;
		КонецЕсли;			
		
		Если СоответствиеПолей <> Неопределено Тогда
			Для Каждого Поле Из СоответствиеПолей Цикл
			
				НоваяСтрока = НовыйОбъект.СоставПолей.Добавить();
				НоваяСтрока.Имя = Поле.Значение;
				
			КонецЦикла;
		КонецЕсли;
	
		Если ЗаписатьСправочник(НовыйОбъект, "") Тогда
			Возврат НовыйОбъект.Ссылка;
		КонецЕсли;
		
	//Иначе // потом можно удалить
	//	
	//	ПолеПредставление = ПолучитьПолеПредставление(Вид.Родитель);
	//	Если ПолеПредставление <> Неопределено И Вид.СоставПолей.Найти(ПолеПредставление) = Неопределено Тогда
	//		НоваяСтрока		= Вид.СоставПолей.Добавить();
	//		НоваяСтрока.Имя = ПолеПредставление;
	//		Если ЗаписатьСправочник(Вид, "") Тогда
	//			Возврат Вид.Ссылка;
	//		КонецЕсли;		
	//	КонецЕсли;
			
	
    Иначе
		Если Группа = "Адрес" И Найти(Ссылка.Наименование, "Юридический адрес") Тогда
			Вид.Родитель 		= ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.АдресЮридический");
			ЗаписатьСправочник(Вид, "");
		ИначеЕсли Группа = "Адрес" И Найти(Ссылка.Наименование, "Фактический адрес") Тогда	
			Вид.Родитель 		= ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.АдресФактический");
			ЗаписатьСправочник(Вид, "");
		КонецЕсли;

	КонецЕсли;
	
	Возврат ТекущийВид;

КонецФункции

Функция ВыполнитьСинхронизациюКонтактнойИнформации_ст(МетаданныеПолноеИмя, Ссылка, стрОшибки) Экспорт
	
	Connector = КэшируемыеФункции.ИницилизироватьCOMConnector81();
    Если Connector <> Неопределено Тогда
	
		Метаданные81 = Connector.Метаданные();
		МетаСпр81 = Метаданные81.НайтипоПолномуИмени(МетаданныеПолноеИмя);
		
		Если МетаСпр81 = Неопределено ИЛИ Не Метаданные81.Справочники.Содержит(МетаСпр81) Тогда
			строшибки = "Не найден справочник в метаданных 81 """ + МетаданныеПолноеИмя + """";
			Возврат Ложь;
		КонецЕсли;
		
		СсылкаНаОбъект = Connector.Справочники[МетаСпр81.Имя].ПолучитьСсылку(Connector.NewObject("УникальныйИдентификатор", Ссылка));
		
		СоответствиеАдреса		= КэшируемыеФункции.ПолучитьСоответствиеПолейАдреса();
		СоответствиеТелефоны	= КэшируемыеФункции.ПолучитьСоответствиеПолейТелефона();
		
		ТекстЗапроса = "ВЫБРАТЬ
								|Объект,
								|Тип,
								|Вид,
								|Поле1,
								|Поле2,
								|Поле3,
								|Поле4,
								|Поле5,
								|Поле6,
								|Поле7,
								|Поле8,
								|Поле9,
								|Комментарий,
								|ЗначениеПоУмолчанию,
								|Представление,
								|ВЫБОР КОГДА Объект ССЫЛКА Справочник.Контрагенты ТОГДА ""Партнеры""
								|ИНАЧЕ
								|	ВЫБОР КОГДА Объект ССЫЛКА Справочник.КонтактныеЛицаКонтрагентов ТОГДА ""КонтактныеЛица""
								|	ИНАЧЕ
								|		ВЫБОР КОГДА Объект ССЫЛКА Справочник.ФизическиеЛица ТОГДА ""ФизическиеЛица""
								|        ИНАЧЕ ""Другое""
								|        КОНЕЦ
								|	КОНЕЦ
								|КОНЕЦ ТипОбъекта,
								|ВЫБОР КОГДА Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес) ТОГДА ""Адрес""
								|ИНАЧЕ
								|	ВЫБОР КОГДА Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон) ТОГДА ""Телефон""
								|	ИНАЧЕ
								|		ВЫБОР КОГДА Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты) ТОГДА ""АдресЭлектроннойПочты""
								|		ИНАЧЕ
								|			 ВЫБОР КОГДА Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.ВебСтраница) ТОГДА ""ВебСтраница""
								|			КОНЕЦ
								|		КОНЕЦ
								|	КОНЕЦ
								|КОНЕЦ ГруппаВид  
	                            |
								|ИЗ                         
								|РегистрСведений.КонтактнаяИнформация
	                            |
								|ГДЕ  Вид ССЫЛКА Справочник.ВидыКонтактнойИнформации И
								|    (Объект ССЫЛКА Справочник.Контрагенты ИЛИ 
								|  	Объект ССЫЛКА Справочник.КонтактныеЛицаКонтрагентов ИЛИ
								|	Объект ССЫЛКА Справочник.ФизическиеЛица) И
								|	Тип <> ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Другое)
								|   И Объект = &ЭтотОбъект
								|УПОРЯДОЧИТЬ ПО ТипОбъекта, Объект, ГруппаВид"; 
							
						
		СтруктураПараметров	= Новый Структура("ЭтотОбъект", СсылкаНаОбъект);
		РезультатЗапроса81	= COMServer.ПолучитьВыполнениеЗапроса81(ТекстЗапроса, , СтруктураПараметров,);;
		Если РезультатЗапроса81 <> Неопределено Тогда
				
			Выборка = РезультатЗапроса81.Выбрать();
			Пока Выборка.СледующийПоЗначениюПоля("ТипОбъекта") Цикл
				
				ТекущийТипОбъекта 	= Выборка.ТипОбъекта; 
				Пока Выборка.СледующийПоЗначениюПоля("Объект") Цикл
					
					ГУИД81 = ПолучитьГУИД(Connector, Выборка.Объект); 
					Если ГУИД81 <> Неопределено Тогда
						 
						ТекущееКонтактноеЛицо 	= Справочники[ТекущийТипОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД81));
						Контакт 				= ТекущееКонтактноеЛицо.ПолучитьОбъект();
						Если Контакт <> Неопределено Тогда							 
							
							Контакт.КонтактнаяИнформация.Очистить();		
							Регистр = Новый ТаблицаЗначений;
							Регистр.Колонки.Добавить("Объект");
							Регистр.Колонки.Добавить("ID");
                            Регистр.Колонки.Добавить("Вид");
							Регистр.Колонки.Добавить("Поле");
							Регистр.Колонки.Добавить("Значение");
 														
							Пока Выборка.СледующийПоЗначениюПоля("ГруппаВид") Цикл
								
								ГруппаВид 		= Выборка.ГруппаВид;
								Пока Выборка.Следующий() Цикл
											
									НовыйКонтакт	= Контакт.КонтактнаяИнформация.Добавить();
									ГИУДВид81		= ПолучитьГУИД(Connector, Выборка.Вид);
									НовыйКонтакт.Представление	= Выборка.Представление;
									Если ГруппаВид = "Адрес" Тогда
										НовыйКонтакт.Вид 		= ПолучитьВидКИ(Выборка.Вид, ГИУДВид81, ГруппаВид, СоответствиеАдреса);
									ИначеЕсли ГруппаВид = "Телефон" Тогда
										НовыйКонтакт.Вид 		= ПолучитьВидКИ(Выборка.Вид, ГИУДВид81, ГруппаВид, СоответствиеТелефоны);
									Иначе
										НовыйКонтакт.Вид 		= ПолучитьВидКИ(Выборка.Вид, ГИУДВид81, ГруппаВид);
									КонецЕсли;
									НовыйКонтакт.ID						= Новый УникальныйИдентификатор();
									НовыйКонтакт.Комментарий    		= Выборка.Комментарий;
									НовыйКонтакт.ЗначениеПоУмолчанию    = Выборка.ЗначениеПоУмолчанию;
									
									ПолеПредставление = ПолучитьПолеПредставление(НовыйКонтакт.Вид);
									Если ПолеПредставление <> Неопределено Тогда
										НоваяЗапись = Регистр.Добавить() ;
										НоваяЗапись.Объект  			= Контакт.Ссылка;
										НоваяЗапись.ID 					= НовыйКонтакт.ID;
										НоваяЗапись.Вид 				= НовыйКонтакт.Вид; 
                                        НоваяЗапись.Поле 				= ПолеПредставление;
										НоваяЗапись.Значение			= Выборка.Представление;
										НоваяЗапись.Комментарий			= Выборка.Комментарий;
										НоваяЗапись.ЗначениеПоУмолчанию	= Выборка.ЗначениеПоУмолчанию;
									КонецЕсли;

									Для сч = 1 По 9 Цикл
										
										Если ЗначениеЗаполнено(Выборка["Поле" + сч]) Тогда
											
											НоваяЗапись = Регистр.Добавить() ;
											НоваяЗапись.Объект   = Контакт.Ссылка;
											НоваяЗапись.ID 		 = НовыйКонтакт.ID;
											НоваяЗапись.Вид 	 = НовыйКонтакт.Вид;
											Если ГруппаВид = "Адрес" Тогда 
												НоваяЗапись.Поле	 = СоответствиеАдреса.Получить("Поле" + сч);
											Иначе
												НоваяЗапись.Поле	 = СоответствиеТелефоны.Получить("Поле" + сч);
											КонецЕсли;
											НоваяЗапись.Значение = Выборка["Поле" + сч];
											НоваяЗапись.Комментарий			= Выборка.Комментарий;
											НоваяЗапись.ЗначениеПоУмолчанию	= Выборка.ЗначениеПоУмолчанию;
											
										КонецЕсли;
										
									КонецЦикла;
									
								КонецЦикла; // Выборка.Следующий()
										
							КонецЦикла; //Выборка.СледующийПоЗначениюПоля("ГруппаВид") 
							
							Контакт.ДополнительныеСвойства.Вставить("Регистр", Регистр);
							ЗаписатьКонтакт(Контакт, стрОшибки);
							
						Иначе
							стрОшибки = "Не удалось получить объект " + Строка(ТекущееКонтактноеЛицо);	
						КонецЕсли;
						
					КонецЕсли;	
				КонецЦикла; //Выборка.СледующийПоЗначениюПоля("Объект")		 
						
			КонецЦикла; //Выборка.СледующийПоЗначениюПоля("ТипОбъекта")	
			
		КонецЕсли; //РезультатЗапроса81 <> Неопределено	
  	КонецЕсли; //Connector <> Неопределено
КонецФункции

Функция ВыполнитьСинхронизациюКонтактнойИнформации_ст2(МетаданныеПолноеИмя, Ссылка, стрОшибки, Connector = Неопределено) Экспорт
	
	Если Connector = Неопределено Тогда
		Connector = КэшируемыеФункции.ИницилизироватьCOMConnector81();
	КонецЕсли;
	
    Если Connector <> Неопределено Тогда
	
		Метаданные81 = Connector.Метаданные();
		МетаСпр81 = Метаданные81.НайтипоПолномуИмени(МетаданныеПолноеИмя);
		
		Если МетаСпр81 = Неопределено ИЛИ Не Метаданные81.Справочники.Содержит(МетаСпр81) Тогда
			строшибки = "Не найден справочник в метаданных 81 """ + МетаданныеПолноеИмя + """";
			Возврат Ложь;
		КонецЕсли;
		
		СсылкаНаОбъект = Connector.Справочники[МетаСпр81.Имя].ПолучитьСсылку(Connector.NewObject("УникальныйИдентификатор", Ссылка));
		
		СоответствиеАдреса		= КэшируемыеФункции.ПолучитьСоответствиеПолейАдреса();
		СоответствиеТелефоны	= КэшируемыеФункции.ПолучитьСоответствиеПолейТелефона();
		
		ТекстЗапроса = "ВЫБРАТЬ
								|Объект,
								|ПРЕДСТАВЛЕНИЕ(Объект) ПредставлениеОбъекта,
								|Тип,
								|Вид,
								|Поле1,
								|Поле2,
								|Поле3,
								|Поле4,
								|Поле5,
								|Поле6,
								|Поле7,
								|Поле8,
								|Поле9,
								|Комментарий,
								|ЗначениеПоУмолчанию,
								|Представление,
								|ВЫБОР КОГДА Объект ССЫЛКА Справочник.Контрагенты ТОГДА ""Партнеры""
								|ИНАЧЕ
								|	ВЫБОР КОГДА Объект ССЫЛКА Справочник.КонтактныеЛицаКонтрагентов ТОГДА ""КонтактныеЛица""
								|	ИНАЧЕ
								|		ВЫБОР КОГДА Объект ССЫЛКА Справочник.ФизическиеЛица ТОГДА ""ФизическиеЛица""
								|        ИНАЧЕ ""Другое""
								|        КОНЕЦ
								|	КОНЕЦ
								|КОНЕЦ ТипОбъекта,
								|ВЫБОР КОГДА Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес) ТОГДА ""Адрес""
								|ИНАЧЕ
								|	ВЫБОР КОГДА Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон) ТОГДА ""Телефон""
								|	ИНАЧЕ
								|		ВЫБОР КОГДА Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты) ТОГДА ""АдресЭлектроннойПочты""
								|		ИНАЧЕ
								|			 ВЫБОР КОГДА Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.ВебСтраница) ТОГДА ""ВебСтраница""
								|			КОНЕЦ
								|		КОНЕЦ
								|	КОНЕЦ
								|КОНЕЦ ГруппаВид  
	                            |
								|ИЗ                         
								|РегистрСведений.КонтактнаяИнформация
	                            |
								|ГДЕ  Вид ССЫЛКА Справочник.ВидыКонтактнойИнформации И
								|    (Объект ССЫЛКА Справочник.Контрагенты ИЛИ 
								|  	Объект ССЫЛКА Справочник.КонтактныеЛицаКонтрагентов ИЛИ
								|	Объект ССЫЛКА Справочник.ФизическиеЛица) И
								|	Тип <> ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Другое)
								|   И Объект = &ЭтотОбъект
								|УПОРЯДОЧИТЬ ПО ТипОбъекта, Объект, ГруппаВид"; 
							
						
		СтруктураПараметров	= Новый Структура("ЭтотОбъект", СсылкаНаОбъект);
		РезультатЗапроса81	= COMServer.ПолучитьВыполнениеЗапроса81(ТекстЗапроса, , СтруктураПараметров, ,Connector);;
		Если РезультатЗапроса81 <> Неопределено Тогда
				
			Выборка = РезультатЗапроса81.Выбрать();
			Пока Выборка.СледующийПоЗначениюПоля("ТипОбъекта") Цикл
				
				ТекущийТипОбъекта 	= Выборка.ТипОбъекта; 
				Пока Выборка.СледующийПоЗначениюПоля("Объект") Цикл
					
					ГУИД81 = ПолучитьГУИД(Connector, Выборка.Объект); 
					Если ГУИД81 <> Неопределено Тогда
						 
							ТекущееКонтактноеЛицо 	= Справочники[ТекущийТипОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД81));
                  	    	Если  ТекущееКонтактноеЛицо.ПолучитьОбъект() = Неопределено Тогда
								Сообщить("Объект отсутствует в 8.2 - " + Выборка.ПредставлениеОбъекта);
								Продолжить;
							КонецЕсли;
						
						
							Регистр = Новый ТаблицаЗначений;
							Регистр.Колонки.Добавить("Объект");
							Регистр.Колонки.Добавить("ID");
                            Регистр.Колонки.Добавить("Вид");
							Регистр.Колонки.Добавить("Поле");
							Регистр.Колонки.Добавить("Значение");
 							
							РегистрПредставление = Новый ТаблицаЗначений;
							РегистрПредставление.Колонки.Добавить("Объект");
							РегистрПредставление.Колонки.Добавить("ID");
                            РегистрПредставление.Колонки.Добавить("Вид");
							РегистрПредставление.Колонки.Добавить("Представление");
 							РегистрПредставление.Колонки.Добавить("Комментарий");
							РегистрПредставление.Колонки.Добавить("ЗначениеПоУмолчанию");
							
							Пока Выборка.СледующийПоЗначениюПоля("ГруппаВид") Цикл
								
								ГруппаВид 		= Выборка.ГруппаВид;
								Пока Выборка.Следующий() Цикл
											
									ГИУДВид81		= ПолучитьГУИД(Connector, Выборка.Вид);
									Если ГруппаВид = "Адрес" Тогда
										ки_Вид 		= ПолучитьВидКИ(Выборка.Вид, ГИУДВид81, ГруппаВид, СоответствиеАдреса);
									ИначеЕсли ГруппаВид = "Телефон" Тогда
										ки_Вид 		= ПолучитьВидКИ(Выборка.Вид, ГИУДВид81, ГруппаВид, СоответствиеТелефоны);
									Иначе
										ки_Вид 		= ПолучитьВидКИ(Выборка.Вид, ГИУДВид81, ГруппаВид);
									КонецЕсли;
									ки_ID			= Новый УникальныйИдентификатор();
									
									НоваяЗапись = РегистрПредставление.Добавить();
									НоваяЗапись.Объект  			= ТекущееКонтактноеЛицо;
									НоваяЗапись.ID 					= ки_ID;
									НоваяЗапись.Вид 				= ки_Вид; 
									НоваяЗапись.Представление		= Выборка.Представление;
									НоваяЗапись.Комментарий			= Выборка.Комментарий;
									НоваяЗапись.ЗначениеПоУмолчанию	= Выборка.ЗначениеПоУмолчанию;

 									Для сч = 1 По 9 Цикл
										
										Если ЗначениеЗаполнено(Выборка["Поле" + сч]) Тогда
											
											НоваяЗапись = Регистр.Добавить() ;
											НоваяЗапись.Объект   = ТекущееКонтактноеЛицо;
											НоваяЗапись.ID 		 = ки_ID;
											НоваяЗапись.Вид 	 = ки_Вид;
											Если ГруппаВид = "Адрес" Тогда 
												НоваяЗапись.Поле	 = СоответствиеАдреса.Получить("Поле" + сч);
											Иначе
												НоваяЗапись.Поле	 = СоответствиеТелефоны.Получить("Поле" + сч);
											КонецЕсли;
											НоваяЗапись.Значение = Выборка["Поле" + сч];											
										КонецЕсли;
										
									КонецЦикла;
									
								КонецЦикла; // Выборка.Следующий()
										
							КонецЦикла; //Выборка.СледующийПоЗначениюПоля("ГруппаВид") 
														
							НачатьТранзакцию();
							Если ЗаписатьРегистрКонтактнаяИнформация(ТекущееКонтактноеЛицо, Регистр, "КонтактнаяИнформация", стрОшибки) И 
								ЗаписатьРегистрКонтактнаяИнформация(ТекущееКонтактноеЛицо, РегистрПредставление, "ПредставлениеКонтактнойИнформации", стрОшибки) Тогда
								ЗафиксироватьТранзакцию();
							Иначе
								ОтменитьТранзакцию();
							КонецЕсли;

					КонецЕсли;	
				КонецЦикла; //Выборка.СледующийПоЗначениюПоля("Объект")		 
						
			КонецЦикла; //Выборка.СледующийПоЗначениюПоля("ТипОбъекта")	
			
		КонецЕсли; //РезультатЗапроса81 <> Неопределено	
  	КонецЕсли; //Connector <> Неопределено
КонецФункции

Функция ВыполнитьСинхронизациюКонтактнойИнформации(МетаданныеПолноеИмя, Ссылка, стрОшибки, Connector = Неопределено) Экспорт
	
	Если Connector = Неопределено Тогда
		Connector = КэшируемыеФункции.ИницилизироватьCOMConnector81();
	КонецЕсли;
	
	Если Connector <> Неопределено Тогда
	
		Метаданные81 = Connector.Метаданные();
		МетаСпр81 = Метаданные81.НайтипоПолномуИмени(МетаданныеПолноеИмя);
		
		Если МетаСпр81 = Неопределено ИЛИ Не Метаданные81.Справочники.Содержит(МетаСпр81) Тогда
			строшибки = "Не найден справочник в метаданных 81 """ + МетаданныеПолноеИмя + """";
			Возврат Ложь;
		КонецЕсли;
		
		СсылкаНаОбъект = Ссылка; //Connector.Справочники[МетаСпр81.Имя].ПолучитьСсылку(Connector.NewObject("УникальныйИдентификатор", Строка(Ссылка.УникальныйИдентификатор())));
		
		СоответствиеАдреса		= КэшируемыеФункции.ПолучитьСоответствиеПолейАдреса();
		СоответствиеТелефоны	= КэшируемыеФункции.ПолучитьСоответствиеПолейТелефона();
		
		Регистр = Новый ТаблицаЗначений;
		Регистр.Колонки.Добавить("Объект");
		Регистр.Колонки.Добавить("ID");
		Регистр.Колонки.Добавить("Вид");
		Регистр.Колонки.Добавить("Поле");
		Регистр.Колонки.Добавить("Значение");
						
		РегистрПредставление = Новый ТаблицаЗначений;
		РегистрПредставление.Колонки.Добавить("Объект");
		РегистрПредставление.Колонки.Добавить("ID");
		РегистрПредставление.Колонки.Добавить("Вид");
		РегистрПредставление.Колонки.Добавить("Представление");
		РегистрПредставление.Колонки.Добавить("Комментарий");
		РегистрПредставление.Колонки.Добавить("ЗначениеПоУмолчанию");
		
		ТекстЗапроса = "ВЫБРАТЬ
								|Объект,
								|ПРЕДСТАВЛЕНИЕ(Объект) ПредставлениеОбъекта,
								|Тип,
								|Вид,
								|Поле1,
								|Поле2,
								|Поле3,
								|Поле4,
								|Поле5,
								|Поле6,
								|Поле7,
								|Поле8,
								|Поле9,
								|Комментарий,
								|ЗначениеПоУмолчанию,
								|Представление,
								|ВЫБОР КОГДА Объект ССЫЛКА Справочник.Контрагенты ТОГДА ""Партнеры""
								|ИНАЧЕ
								|	ВЫБОР КОГДА Объект ССЫЛКА Справочник.КонтактныеЛица ТОГДА ""КонтактныеЛица""
								|	ИНАЧЕ
								|		ВЫБОР КОГДА Объект ССЫЛКА Справочник.ФизическиеЛица ТОГДА ""ФизическиеЛица""
								|        ИНАЧЕ 
								|				ВЫБОР КОГДА Объект ССЫЛКА Справочник.Организации ТОГДА ""Организации"" 
								|				ИНАЧЕ ""Другое""
								|				КОНЕЦ
								|        КОНЕЦ
								|	КОНЕЦ
								|КОНЕЦ ТипОбъекта,
								|ВЫБОР КОГДА Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес) ТОГДА ""Адрес""
								|ИНАЧЕ
								|	ВЫБОР КОГДА Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон) ТОГДА ""Телефон""
								|	ИНАЧЕ
								|		ВЫБОР КОГДА Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты) ТОГДА ""АдресЭлектроннойПочты""
								|		ИНАЧЕ
								|			 ВЫБОР КОГДА Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.ВебСтраница) ТОГДА ""ВебСтраница""
								|			КОНЕЦ
								|		КОНЕЦ
								|	КОНЕЦ
								|КОНЕЦ ГруппаВид  
	                            |
								|ИЗ                         
								|РегистрСведений.КонтактнаяИнформация
	                            |
								|ГДЕ  Вид ССЫЛКА Справочник.ВидыКонтактнойИнформации И
								|    (Объект ССЫЛКА Справочник.Контрагенты ИЛИ 
								|  	Объект ССЫЛКА Справочник.КонтактныеЛица ИЛИ
								|	Объект ССЫЛКА Справочник.ФизическиеЛица ИЛИ
								|	Объект ССЫЛКА Справочник.Организации) И
								|	Тип <> ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Другое)
								|   И Объект = &ЭтотОбъект
								|УПОРЯДОЧИТЬ ПО ТипОбъекта, Объект, ГруппаВид"; 
							
						
		СтруктураПараметров	= Новый Структура("ЭтотОбъект", СсылкаНаОбъект);
		РезультатЗапроса81	= COMServer.ПолучитьВыполнениеЗапроса81(ТекстЗапроса, , СтруктураПараметров, ,Connector);
		Если РезультатЗапроса81 <> Неопределено Тогда
				
			Выборка = РезультатЗапроса81.Выбрать();
			Пока Выборка.СледующийПоЗначениюПоля("ТипОбъекта") Цикл
				
				ТекущийТипОбъекта 	= Выборка.ТипОбъекта;
				Если ТекущийТипОбъекта = "Другое" Тогда
					Продолжить;
				КонецЕсли;
				
				Пока Выборка.СледующийПоЗначениюПоля("Объект") Цикл
					
					ГУИД81 = ПолучитьГУИД(Connector, Выборка.Объект); 
					Если ГУИД81 <> Неопределено Тогда
						 
						ТекущееКонтактноеЛицо 	= Справочники[ТекущийТипОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД81));
                  	    Если  ТекущееКонтактноеЛицо.ПолучитьОбъект() = Неопределено Тогда
							Сообщить("Объект отсутствует в 8.2 - " + Выборка.ПредставлениеОбъекта);
							Продолжить;
						КонецЕсли;
						
						    Регистр.Очистить();
						//	Регистр = Новый ТаблицаЗначений;
						//	Регистр.Колонки.Добавить("Объект");
						//	Регистр.Колонки.Добавить("ID");
						//	Регистр.Колонки.Добавить("Вид");
						//	Регистр.Колонки.Добавить("Поле");
						//	Регистр.Колонки.Добавить("Значение");
						
							РегистрПредставление.Очистить();
						
						//	РегистрПредставление = Новый ТаблицаЗначений;
						//	РегистрПредставление.Колонки.Добавить("Объект");
						//	РегистрПредставление.Колонки.Добавить("ID");
						//	РегистрПредставление.Колонки.Добавить("Вид");
						//	РегистрПредставление.Колонки.Добавить("Представление");
						//РегистрПредставление.Колонки.Добавить("Комментарий");
						//	РегистрПредставление.Колонки.Добавить("ЗначениеПоУмолчанию");
							
							Пока Выборка.СледующийПоЗначениюПоля("ГруппаВид") Цикл
								
								ГруппаВид 		= Выборка.ГруппаВид;
								Пока Выборка.Следующий() Цикл
											
									ГИУДВид81		= ПолучитьГУИД(Connector, Выборка.Вид);
									Если ГруппаВид = "Адрес" Тогда
										ки_Вид 		= ПолучитьВидКИ(Выборка.Вид, ГИУДВид81, ГруппаВид, СоответствиеАдреса);
									ИначеЕсли ГруппаВид = "Телефон" Тогда
										ки_Вид 		= ПолучитьВидКИ(Выборка.Вид, ГИУДВид81, ГруппаВид, СоответствиеТелефоны);
									Иначе
										ки_Вид 		= ПолучитьВидКИ(Выборка.Вид, ГИУДВид81, ГруппаВид);
									КонецЕсли;
									ки_ID			= Новый УникальныйИдентификатор();
									
									НоваяЗапись = РегистрПредставление.Добавить();
									НоваяЗапись.Объект  			= ТекущееКонтактноеЛицо;
									НоваяЗапись.ID 					= ки_ID;
									НоваяЗапись.Вид 				= ки_Вид; 
									НоваяЗапись.Представление		= Выборка.Представление;
									НоваяЗапись.Комментарий			= Выборка.Комментарий;
									НоваяЗапись.ЗначениеПоУмолчанию	= Выборка.ЗначениеПоУмолчанию;

 									Для сч = 1 По 9 Цикл
										
										Если ЗначениеЗаполнено(Выборка["Поле" + сч]) Тогда
											
											НоваяЗапись = Регистр.Добавить() ;
											НоваяЗапись.Объект   = ТекущееКонтактноеЛицо;
											НоваяЗапись.ID 		 = ки_ID;
											НоваяЗапись.Вид 	 = ки_Вид;
											Если ГруппаВид = "Адрес" Тогда 
												НоваяЗапись.Поле	 = СоответствиеАдреса.Получить("Поле" + сч);
											Иначе
												НоваяЗапись.Поле	 = СоответствиеТелефоны.Получить("Поле" + сч);
											КонецЕсли;
											НоваяЗапись.Значение = Выборка["Поле" + сч];											
										КонецЕсли;
										
									КонецЦикла;
									
								КонецЦикла; // Выборка.Следующий()
										
							КонецЦикла; //Выборка.СледующийПоЗначениюПоля("ГруппаВид") 
							
							НачатьТранзакцию();
							Если ЗаписатьРегистрКонтактнаяИнформация(ТекущееКонтактноеЛицо, Регистр, "КонтактнаяИнформация", стрОшибки) И 
								ЗаписатьРегистрКонтактнаяИнформация(ТекущееКонтактноеЛицо, РегистрПредставление, "ПредставлениеКонтактнойИнформации", стрОшибки) Тогда
								ЗафиксироватьТранзакцию();
							Иначе
								ОтменитьТранзакцию();
							КонецЕсли;
							
					КонецЕсли;	
				КонецЦикла; //Выборка.СледующийПоЗначениюПоля("Объект")		 
						
			КонецЦикла; //Выборка.СледующийПоЗначениюПоля("ТипОбъекта")	
			
		КонецЕсли; //РезультатЗапроса81 <> Неопределено	
  	КонецЕсли; //Connector <> Неопределено
КонецФункции



Функция ВыполнитьСинхронизациюКонтактнойИнформации_общая(стрОшибки) Экспорт
	
	Connector = КэшируемыеФункции.ИницилизироватьCOMConnector81();
    Если Connector <> Неопределено Тогда
	
		//Метаданные81 = Connector.Метаданные();
		//МетаСпр81 = Метаданные81.НайтипоПолномуИмени(МетаданныеПолноеИмя);
		//
		//Если МетаСпр81 = Неопределено ИЛИ Не Метаданные81.Справочники.Содержит(МетаСпр81) Тогда
		//	строшибки = "Не найден справочник в метаданных 81 """ + МетаданныеПолноеИмя + """";
		//	Возврат Ложь;
		//КонецЕсли;
		//
		//СсылкаНаОбъект = Connector.Справочники[МетаСпр81.Имя].ПолучитьСсылку(Connector.NewObject("УникальныйИдентификатор", Ссылка));
		
		СоответствиеАдреса		= КэшируемыеФункции.ПолучитьСоответствиеПолейАдреса();
		СоответствиеТелефоны	= КэшируемыеФункции.ПолучитьСоответствиеПолейТелефона();
		
		Регистр = Новый ТаблицаЗначений;
		Регистр.Колонки.Добавить("Объект");
		Регистр.Колонки.Добавить("ID");
		Регистр.Колонки.Добавить("Вид");
		Регистр.Колонки.Добавить("Поле");
		Регистр.Колонки.Добавить("Значение");
						
		РегистрПредставление = Новый ТаблицаЗначений;
		РегистрПредставление.Колонки.Добавить("Объект");
		РегистрПредставление.Колонки.Добавить("ID");
		РегистрПредставление.Колонки.Добавить("Вид");
		РегистрПредставление.Колонки.Добавить("Представление");
		РегистрПредставление.Колонки.Добавить("Комментарий");
		РегистрПредставление.Колонки.Добавить("ЗначениеПоУмолчанию");
		
		ТекстЗапроса = "ВЫБРАТЬ
								|Объект,
								|ПРЕДСТАВЛЕНИЕ(Объект) ПредставлениеОбъекта,
								|Тип,
								|Вид,
								|Поле1,
								|Поле2,
								|Поле3,
								|Поле4,
								|Поле5,
								|Поле6,
								|Поле7,
								|Поле8,
								|Поле9,
								|Комментарий,
								|ЗначениеПоУмолчанию,
								|Представление,
								|ВЫБОР КОГДА Объект ССЫЛКА Справочник.Контрагенты ТОГДА ""Партнеры""
								|ИНАЧЕ
								|	ВЫБОР КОГДА Объект ССЫЛКА Справочник.КонтактныеЛицаКонтрагентов ТОГДА ""КонтактныеЛица""
								|	ИНАЧЕ
								|		ВЫБОР КОГДА Объект ССЫЛКА Справочник.ФизическиеЛица ТОГДА ""ФизическиеЛица""
								|        ИНАЧЕ 
								|				ВЫБОР КОГДА Объект ССЫЛКА Справочник.Организации ТОГДА ""Организации"" 
								|				ИНАЧЕ ""Другое""
								|				КОНЕЦ
								|        КОНЕЦ
								|	КОНЕЦ
								|КОНЕЦ ТипОбъекта,
								|ВЫБОР КОГДА Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес) ТОГДА ""Адрес""
								|ИНАЧЕ
								|	ВЫБОР КОГДА Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон) ТОГДА ""Телефон""
								|	ИНАЧЕ
								|		ВЫБОР КОГДА Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты) ТОГДА ""АдресЭлектроннойПочты""
								|		ИНАЧЕ
								|			 ВЫБОР КОГДА Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.ВебСтраница) ТОГДА ""ВебСтраница""
								|			КОНЕЦ
								|		КОНЕЦ
								|	КОНЕЦ
								|КОНЕЦ ГруппаВид  
	                            |
								|ИЗ                         
								|РегистрСведений.КонтактнаяИнформация
	                            |
								|ГДЕ  Вид ССЫЛКА Справочник.ВидыКонтактнойИнформации И
								|    (Объект ССЫЛКА Справочник.Контрагенты ИЛИ 
								|  	Объект ССЫЛКА Справочник.КонтактныеЛицаКонтрагентов ИЛИ
								|	Объект ССЫЛКА Справочник.ФизическиеЛица ИЛИ
								|	Объект ССЫЛКА Справочник.Организации) И
								|	Тип <> ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Другое)
								//|   И Объект = &ЭтотОбъект
								|УПОРЯДОЧИТЬ ПО ТипОбъекта, Объект, ГруппаВид"; 
							
						
		//СтруктураПараметров	= Новый Структура("ЭтотОбъект", СсылкаНаОбъект);
		СтруктураПараметров = Новый Структура;
		РезультатЗапроса81	= COMServer.ПолучитьВыполнениеЗапроса81(ТекстЗапроса, , СтруктураПараметров,);;
		Если РезультатЗапроса81 <> Неопределено Тогда
				
			Выборка = РезультатЗапроса81.Выбрать();
			Пока Выборка.СледующийПоЗначениюПоля("ТипОбъекта") Цикл
				
				ТекущийТипОбъекта 	= Выборка.ТипОбъекта;
				Если ТекущийТипОбъекта = "Другое" Тогда
					Продолжить;
				КонецЕсли;
				
				Пока Выборка.СледующийПоЗначениюПоля("Объект") Цикл
					
					ГУИД81 = ПолучитьГУИД(Connector, Выборка.Объект); 
					Если ГУИД81 <> Неопределено Тогда
						 
						ТекущееКонтактноеЛицо 	= Справочники[ТекущийТипОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД81));
                  	    Если  ТекущееКонтактноеЛицо.ПолучитьОбъект() = Неопределено Тогда
							Сообщить("Объект отсутствует в 8.2 - " + Выборка.ПредставлениеОбъекта);
							Продолжить;
						КонецЕсли;
						
						    Регистр.Очистить();
						//	Регистр = Новый ТаблицаЗначений;
						//	Регистр.Колонки.Добавить("Объект");
						//	Регистр.Колонки.Добавить("ID");
						//	Регистр.Колонки.Добавить("Вид");
						//	Регистр.Колонки.Добавить("Поле");
						//	Регистр.Колонки.Добавить("Значение");
						
							РегистрПредставление.Очистить();
						
						//	РегистрПредставление = Новый ТаблицаЗначений;
						//	РегистрПредставление.Колонки.Добавить("Объект");
						//	РегистрПредставление.Колонки.Добавить("ID");
						//	РегистрПредставление.Колонки.Добавить("Вид");
						//	РегистрПредставление.Колонки.Добавить("Представление");
						//РегистрПредставление.Колонки.Добавить("Комментарий");
						//	РегистрПредставление.Колонки.Добавить("ЗначениеПоУмолчанию");
							
							Пока Выборка.СледующийПоЗначениюПоля("ГруппаВид") Цикл
								
								ГруппаВид 		= Выборка.ГруппаВид;
								Пока Выборка.Следующий() Цикл
											
									ГИУДВид81		= ПолучитьГУИД(Connector, Выборка.Вид);
									Если ГруппаВид = "Адрес" Тогда
										ки_Вид 		= ПолучитьВидКИ(Выборка.Вид, ГИУДВид81, ГруппаВид, СоответствиеАдреса);
									ИначеЕсли ГруппаВид = "Телефон" Тогда
										ки_Вид 		= ПолучитьВидКИ(Выборка.Вид, ГИУДВид81, ГруппаВид, СоответствиеТелефоны);
									Иначе
										ки_Вид 		= ПолучитьВидКИ(Выборка.Вид, ГИУДВид81, ГруппаВид);
									КонецЕсли;
									ки_ID			= Новый УникальныйИдентификатор();
									
									НоваяЗапись = РегистрПредставление.Добавить();
									НоваяЗапись.Объект  			= ТекущееКонтактноеЛицо;
									НоваяЗапись.ID 					= ки_ID;
									НоваяЗапись.Вид 				= ки_Вид; 
									НоваяЗапись.Представление		= Выборка.Представление;
									НоваяЗапись.Комментарий			= Выборка.Комментарий;
									НоваяЗапись.ЗначениеПоУмолчанию	= Выборка.ЗначениеПоУмолчанию;

 									Для сч = 1 По 9 Цикл
										
										Если ЗначениеЗаполнено(Выборка["Поле" + сч]) Тогда
											
											НоваяЗапись = Регистр.Добавить() ;
											НоваяЗапись.Объект   = ТекущееКонтактноеЛицо;
											НоваяЗапись.ID 		 = ки_ID;
											НоваяЗапись.Вид 	 = ки_Вид;
											Если ГруппаВид = "Адрес" Тогда 
												НоваяЗапись.Поле	 = СоответствиеАдреса.Получить("Поле" + сч);
											Иначе
												НоваяЗапись.Поле	 = СоответствиеТелефоны.Получить("Поле" + сч);
											КонецЕсли;
											НоваяЗапись.Значение = Выборка["Поле" + сч];											
										КонецЕсли;
										
									КонецЦикла;
									
								КонецЦикла; // Выборка.Следующий()
										
							КонецЦикла; //Выборка.СледующийПоЗначениюПоля("ГруппаВид") 
							
							НачатьТранзакцию();
							Если ЗаписатьРегистрКонтактнаяИнформация(ТекущееКонтактноеЛицо, Регистр, "КонтактнаяИнформация", стрОшибки) И 
								ЗаписатьРегистрКонтактнаяИнформация(ТекущееКонтактноеЛицо, РегистрПредставление, "ПредставлениеКонтактнойИнформации", стрОшибки) Тогда
								ЗафиксироватьТранзакцию();
							Иначе
								ОтменитьТранзакцию();
							КонецЕсли;
							
					КонецЕсли;	
				КонецЦикла; //Выборка.СледующийПоЗначениюПоля("Объект")		 
						
			КонецЦикла; //Выборка.СледующийПоЗначениюПоля("ТипОбъекта")	
			
		КонецЕсли; //РезультатЗапроса81 <> Неопределено	
  	КонецЕсли; //Connector <> Неопределено
КонецФункции

Процедура ВыгрузитьШтрихКоды() Экспорт
	
	
	Connector = КэшируемыеФункции.ИницилизироватьCOMConnector81();
	Если Connector <> Неопределено Тогда
	
		ТекстЗапроса = "ВЫБРАТЬ
						|	Штрихкод,
						|	ПРЕДСТАВЛЕНИЕ(ТипШтрихкода) ТипШтрихкода,
						|	Владелец 				Номенклатура,
						|	ПРЕДСТАВЛЕНИЕ(Владелец) ПредставлениеОбъекта
						|ИЗ
						|	РегистрСведений.ШтрихКоды
						|ГДЕ
						|	Владелец ССЫЛКА Справочник.Номенклатура
						|";
															
		СтруктураПараметров = Новый Структура;
		РезультатЗапроса81	= COMServer.ПолучитьВыполнениеЗапроса81(ТекстЗапроса, , СтруктураПараметров,);;
		Если РезультатЗапроса81 <> Неопределено Тогда
				
			Выборка = РезультатЗапроса81.Выбрать();
			Пока Выборка.Следующий() Цикл
				
					ГУИД81 = ПолучитьГУИД(Connector, Выборка.Номенклатура); 
					Если ГУИД81 = Неопределено Тогда
						Продолжить;
					КонецЕсли;
						 
					СсылкаТовар	= Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД81));
					
					Если  СсылкаТовар.ПолучитьОбъект() = Неопределено Тогда
						Сообщить("Товар отсутствует в 8.2 - " + Выборка.ПредставлениеОбъекта);
						Продолжить;
					КонецЕсли;
					
					Запись = РегистрыСведений.ШтрихКоды.СоздатьМенеджерЗаписи();
					
					Запись.ТипШтрихКода = Перечисления.ТипыШтрихКодов[Выборка.ТипШтрихкода];
					Запись.Объект = СсылкаТовар;
					
					Запись.ШтрихКод	= Выборка.ШтрихКод;
					 					
					Попытка
						Запись.Записать();
					Исключение
						Сообщить("Ошибка записи данных: " + ОписаниеОшибки());
					КонецПопытки;
					
			КонецЦикла;
			
		КонецЕсли; //РезультатЗапроса81 <> Неопределено	
		
		ТекстЗапроса = "ВЫБРАТЬ
						|	Штрихкод,
						|	ПРЕДСТАВЛЕНИЕ(ТипШтрихкода) ТипШтрихкода,
						|	Владелец 				ИнформационнаяКарта,
						|	ПРЕДСТАВЛЕНИЕ(Владелец) ПредставлениеОбъекта
						|ИЗ
						|	РегистрСведений.ШтрихКоды
						|ГДЕ
						|	Владелец ССЫЛКА Справочник.ИнформационныеКарты
						|";
															
		СтруктураПараметров = Новый Структура;
		РезультатЗапроса81	= COMServer.ПолучитьВыполнениеЗапроса81(ТекстЗапроса, , СтруктураПараметров,);;
		Если РезультатЗапроса81 <> Неопределено Тогда
				
			Выборка = РезультатЗапроса81.Выбрать();
			Пока Выборка.Следующий() Цикл
				
					ГУИД81 = ПолучитьГУИД(Connector, Выборка.ИнформационнаяКарта); 
					Если ГУИД81 = Неопределено Тогда
						Продолжить;
					КонецЕсли;
						 
					СсылкаКарта	= Справочники.ИнформационныеКарты.ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД81));
					
					Если  СсылкаКарта.ПолучитьОбъект() = Неопределено Тогда
						Сообщить("Товар отсутствует в 8.2 - " + Выборка.ПредставлениеОбъекта);
						Продолжить;
					КонецЕсли;
					
					Запись = РегистрыСведений.ШтрихКоды.СоздатьМенеджерЗаписи();
					
					Запись.ТипШтрихКода = Перечисления.ТипыШтрихКодов[Выборка.ТипШтрихкода];
					Запись.Объект = СсылкаКарта;
					
					Запись.ШтрихКод	= Выборка.ШтрихКод;
					 					
					Попытка
						Запись.Записать();
					Исключение
						Сообщить("Ошибка записи данных: " + ОписаниеОшибки());
					КонецПопытки;
					
			КонецЦикла;
			
		КонецЕсли; //РезультатЗапроса81 <> Неопределено	
		
		
  	КонецЕсли; //Connector 	
	
КонецПроцедуры

Процедура ВыгрузитьТипЦенПарнера() Экспорт
	
	
	Connector = КэшируемыеФункции.ИницилизироватьCOMConnector81();
	Если Connector <> Неопределено Тогда
	
		ТекстЗапроса = "ВЫБРАТЬ
						|	Ссылка Партнер,
						|	ОсновнойДоговорКонтрагента.ТипЦен ТипЦен,
						|	ПРЕДСТАВЛЕНИЕ(Ссылка) ПредставлениеОбъекта
						|ИЗ
						|	Справочник.Контрагенты
						|ГДЕ
						|	ОсновнойДоговорКонтрагента <> ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) И ОсновнойДоговорКонтрагента.ТипЦен ССЫЛКА Справочник.ТипыЦенНоменклатуры
						|";
															
		СтруктураПараметров = Новый Структура;
		РезультатЗапроса81	= COMServer.ПолучитьВыполнениеЗапроса81(ТекстЗапроса, , СтруктураПараметров,);;
		Если РезультатЗапроса81 <> Неопределено Тогда
				
			Выборка = РезультатЗапроса81.Выбрать();
			Пока Выборка.Следующий() Цикл
				
					ГУИД81 = ПолучитьГУИД(Connector, Выборка.Партнер); 
					Если ГУИД81 = Неопределено Тогда
						Продолжить;
					КонецЕсли;
						 
					СсылкаПартнер	= Справочники.Партнеры.ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД81));
					
					ОбъектПартнер = СсылкаПартнер.ПолучитьОбъект();
					Если ОбъектПартнер  = Неопределено Тогда
						Сообщить("Партнер отсутствует в 8.2 - " + Выборка.ПредставлениеОбъекта);
						Продолжить;
					КонецЕсли;
					
					ГУИД81 = ПолучитьГУИД(Connector, Выборка.ТипЦен); 
					Если ГУИД81 = Неопределено Тогда
						Продолжить;
					КонецЕсли;
						 
					Если ГУИД81 <> "00000000-0000-0000-0000-000000000000" Тогда
						СсылкаТипЦен	= Справочники.ТипыЦен.ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД81));
						
						Если СсылкаТипЦен.ПолучитьОбъект()  = Неопределено Тогда
							Сообщить("ТипЦен объекта отсутствует в 8.2 - " + Выборка.ПредставлениеОбъекта);
							Продолжить;
						КонецЕсли;					
						
						ОбъектПартнер.ТипЦен = СсылкаТипЦен; 
						
						ОбъектПартнер.ОбменДанными.Загрузка = Истина; 					
						Попытка
							ОбъектПартнер.Записать();
						Исключение
							Сообщить("Ошибка записи данных: " + ОписаниеОшибки());
						КонецПопытки;
					КонецЕсли;
			КонецЦикла;
			
		КонецЕсли; //РезультатЗапроса81 <> Неопределено	
		
		
		
		ТекстЗапроса = "ВЫБРАТЬ
						|	Ссылка Партнер,
						|	ОсновнойДоговорКонтрагента.ТипЦен.ТипЦеныНоменклатуры ТипЦен,
						|	ПРЕДСТАВЛЕНИЕ(Ссылка) ПредставлениеОбъекта
						|ИЗ
						|	Справочник.Контрагенты
						|ГДЕ
						|	ОсновнойДоговорКонтрагента <> ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) И ОсновнойДоговорКонтрагента.ТипЦен ССЫЛКА Справочник.ТипыЦенНоменклатурыКонтрагентов
						|";
															
		СтруктураПараметров = Новый Структура;
		РезультатЗапроса81	= COMServer.ПолучитьВыполнениеЗапроса81(ТекстЗапроса, , СтруктураПараметров,);;
		Если РезультатЗапроса81 <> Неопределено Тогда
				
			Выборка = РезультатЗапроса81.Выбрать();
			Пока Выборка.Следующий() Цикл
				
					ГУИД81 = ПолучитьГУИД(Connector, Выборка.Партнер); 
					Если ГУИД81 = Неопределено Тогда
						Продолжить;
					КонецЕсли;
						 
					СсылкаПартнер	= Справочники.Партнеры.ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД81));
					
					ОбъектПартнер = СсылкаПартнер.ПолучитьОбъект();
					Если ОбъектПартнер  = Неопределено Тогда
						Сообщить("Партнер отсутствует в 8.2 - " + Выборка.ПредставлениеОбъекта);
						Продолжить;
					КонецЕсли;
					
					ГУИД81 = ПолучитьГУИД(Connector, Выборка.ТипЦен); 
					Если ГУИД81 = Неопределено Тогда
						Продолжить;
					КонецЕсли;
						 
					
					Если ГУИД81 <> "00000000-0000-0000-0000-000000000000" Тогда

						СсылкаТипЦен	= Справочники.ТипыЦен.ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД81));
						
						Если СсылкаТипЦен.ПолучитьОбъект()  = Неопределено Тогда
							Сообщить("ТипЦен объекта отсутствует в 8.2 - " + Выборка.ПредставлениеОбъекта);
							Продолжить;
						КонецЕсли;					
						
						ОбъектПартнер.ТипЦен = СсылкаТипЦен; 
						
						ОбъектПартнер.ОбменДанными.Загрузка = Истина; 					
						Попытка
							ОбъектПартнер.Записать();
						Исключение
							Сообщить("Ошибка записи данных: " + ОписаниеОшибки());
						КонецПопытки;
					КонецЕсли;

			КонецЦикла;
			
		КонецЕсли; //РезультатЗапроса81 <> Неопределено	

		
			
  	КонецЕсли; //Connector 	
	
КонецПроцедуры

Процедура ВыгрузитьПаспортныеДанные() Экспорт
	
	Connector = КэшируемыеФункции.ИницилизироватьCOMConnector81();
	Если Connector <> Неопределено Тогда
	
		ТекстЗапроса = "ВЫБРАТЬ
						|	ФизЛицо,
						|	ДокументВид,
						|   ДокументСерия,
						|	ДокументНомер,
						|	ДокументДатаВыдачи,
						|	ДокументКемВыдан,
						|	ДокументКодПодразделения,
						|	ДатаРегистрацииПоМестуЖительства,
						|	ПРЕДСТАВЛЕНИЕ(ФизЛицо) ПредставлениеОбъекта
						|ИЗ
						|	РегистрСведений.ПаспортныеДанныеФизЛиц.СрезПоследних()
						|";
															
		СтруктураПараметров = Новый Структура;
		РезультатЗапроса81	= COMServer.ПолучитьВыполнениеЗапроса81(ТекстЗапроса, , СтруктураПараметров,);;
		Если РезультатЗапроса81 <> Неопределено Тогда
				
			Выборка = РезультатЗапроса81.Выбрать();
			Пока Выборка.Следующий() Цикл
				
					ГУИД81 = ПолучитьГУИД(Connector, Выборка.ФизЛицо); 
					Если ГУИД81 = Неопределено Тогда
						Продолжить;
					КонецЕсли;
						 
					СсылкаФизЛицо	= Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД81));
					
					ОбъектФизЛицо = СсылкаФизЛицо.ПолучитьОбъект();
					Если ОбъектФизЛицо  = Неопределено Тогда
						Сообщить("ФизЛицо отсутствует в 8.2 - " + Выборка.ПредставлениеОбъекта);
						Продолжить;
					КонецЕсли;
					
					ГУИД81 = ПолучитьГУИД(Connector, Выборка.ДокументВид); 
					Если ГУИД81 = Неопределено Тогда
						Продолжить;
					КонецЕсли;
						 
					Если ГУИД81 <> "00000000-0000-0000-0000-000000000000" Тогда
						СсылкаДокументВид	= Справочники.ДокументыУдостоверяющиеЛичность.ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД81));
						
						Если СсылкаДокументВид.ПолучитьОбъект()  = Неопределено Тогда
							Сообщить("Вид документа для объекта отсутствует в 8.2 - " + Выборка.ПредставлениеОбъекта);
							Продолжить;
						КонецЕсли;	
						ОбъектФизЛицо.ДокументВид = СсылкаДокументВид;
					КонецЕсли;
					
					ЗаполнитьЗначенияСвойств(ОбъектФизЛицо, Выборка, "ДокументСерия, ДокументНомер, ДокументДатаВыдачи, ДокументКемВыдан, ДокументКодПодразделения, ДатаРегистрацииПоМестуЖительства");
										 
					ОбъектФизЛицо.ОбменДанными.Загрузка = Истина; 					
					Попытка
						ОбъектФизЛицо.Записать();
					Исключение
						Сообщить("Ошибка записи данных: " + ОписаниеОшибки());
					КонецПопытки;
					
				КонецЦикла;
			
		КонецЕсли; //РезультатЗапроса81 <> Неопределено	
		
 	КонецЕсли; //Connector 	
	
КонецПроцедуры

Процедура ВыгрузитьОрганизацииИзДоговораСКонтрагентом() Экспорт
	
	СтрОшибки = "";
	Connector =КэшируемыеФункции.ИницилизироватьCOMConnector81();
	Если Connector <> Неопределено Тогда
		ТекстЗапроса = "
			|ВЫБРАТЬ
			|	Таб.Владелец					Объект,
			|	ЕСТЬNULL(Таб.Организация, Неопределено)	Организация,
			|	ПРЕДСТАВЛЕНИЕ(Таб.Владелец)     Представление,
			|	МАКСИМУМ(ЗначениеПоУмолчанию)   Основной
			|ИЗ
			|		(						
			|					ВЫБРАТЬ	
			|						Дог.Владелец,
			|						Дог.Организация,
			|						ВЫБОР КОГДА Спр.Ссылка ЕСТЬ NULL
			|						ТОГДА Ложь 
			|						ИНАЧЕ Истина
			|						КОНЕЦ ЗначениеПоУмолчанию
			|					ИЗ
			|						Справочник.ДоговорыКонтрагентов Дог
			|						ЛЕВОЕ СОЕДИНЕНИЕ
			|							Справочник.Контрагенты Спр
			|						ПО
			|							Дог.Владелец = Спр.Ссылка И Дог.Ссылка = Спр.ОсновнойДоговорКонтрагента
			|		) Таб
			|СГРУППИРОВАТЬ ПО 
			|	Таб.Владелец, 
			|	Таб.Организация
			|УПОРЯДОЧИТЬ ПО 
			|	Владелец";

		РезультатЗапроса = COMServer.ПолучитьВыполнениеЗапроса81(ТекстЗапроса,,,, Connector);
		Если РезультатЗапроса <> Неопределено Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			
			Пока Выборка.СледующийПоЗначениюПоля("Объект") Цикл
				ГУИД =  Connector.String(Выборка.Объект.УникальныйИдентификатор());
				КонтрагентСсылка = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД));
				
				КонтрагентОбъект = КонтрагентСсылка.ПолучитьОбъект();
				Если КонтрагентОбъект = Неопределено Тогда
					Сообщить("Объект в рабочей отсутствует: " + Выборка.Представление);
					Продолжить;
				КонецЕсли;
				
				Организации = КонтрагентОбъект.Организации;
				
				Пока Выборка.Следующий() Цикл
					Если Выборка.Организация <> Неопределено Тогда
						
						ГУИД = Connector.String(Выборка.Организация.УникальныйИдентификатор());
						ОрганизацияСсылка = Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД));
						
						Если Организации.Найти(ОрганизацияСсылка, "Организация") = Неопределено Тогда
						
							тчСтрока = Организации.Добавить();
							тчСтрока.Организация 			= ОрганизацияСсылка; 
							тчСтрока.ЗначениеПоУмолчанию	= Выборка.Основной;
							
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;	
					
				КонтрагентОбъект.ОбменДанными.Загрузка = Истина;
				
				Попытка 
					КонтрагентОбъект.Записать();
				Исключение
					Сообщить("Ошибка записи данных: " + ОписаниеОшибки());
					Продолжить;
				КонецПопытки;
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	
КонецПроцедуры

// НОМЕНКЛАТУРА

Функция ОбновитьСсылкуНоменклатуры(СсылкаНоменклатуры, стрОшибки = "") Экспорт
	
	Если Не ЗначениеЗаполнено(СсылкаНоменклатуры) Тогда
		стрОшибки = "Не задана номенклатура для обновления";
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗагрузитьОбъекты(КэшируемыеФункции.ПолучитьПравилаСопостовленияУТ81(Справочники.ПравилаОбмена.Номенклатура),Новый Структура("Ссылка", СсылкаНоменклатуры), стрОшибки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции
Функция ЗагрузитьНоменклатуруПоКоду(Код, стрОшибки = "") Экспорт
	
	Если ПустаяСтрока(Код) Тогда
		стрОшибки = "Не задан код номенклатуры";
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗагрузитьОбъекты(Справочники.ПравилаОбмена.Номенклатура,Новый Структура("Код", Код), стрОшибки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СправочникСсылка = Справочники.Номенклатура.НайтиПоКоду(Код);
	
	Если СправочникСсылка.Пустая() Тогда
		
		стрОшибки = "Справочник с кодом """ + Код + """ во внешней базе не найден.";
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции
Функция ЗагрузитьГруппуНоменклатурыПоНаименованию(Наименование, стрОшибки = "") Экспорт
	
	Если ПустаяСтрока(Наименование) Тогда
		стрОшибки = "Не задана наименование группы";
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗагрузитьОбъекты(Справочники.ПравилаОбмена.Номенклатура,Новый Структура("ЭтоГруппа, Наименование", Истина, Наименование), стрОшибки) Тогда
	 	Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// ЭКСЕЛЬ

Функция ЗаполнитьРеквизитОбъектаДаннымиЭкселя(Объект, ТаблицаДанных, СтрокаДанных, Изменился, стрОшибки = "", ПропускатьОшибки = Ложь)
	
	Перем стЗнРеквизита;
	
	ИмяРеквизита = ?(Найти(СтрокаДанных.ИмяРеквизита, "."),
						Сред(СтрокаДанных.ИмяРеквизита, Найти(СтрокаДанных.ИмяРеквизита, ".") + 1),
						СтрокаДанных.ИмяРеквизита);
						
	//Если ПустаяСтрока(ИмяРеквизита) И ПропускатьОшибки Тогда
	Если ПустаяСтрока(ИмяРеквизита) Тогда
		Возврат Истина;
	//Иначе
	//	Возврат Ложь;
	КонецЕсли;
						
	стЗнРеквизита = объект[ИмяРеквизита];
						
	Если ПустаяСтрока(СтрокаДанных.Выражение) Тогда
							
		ЭтоВыражение = Ложь;
		
		Если КэшируемыеФункции.стрПримитивныйТип(СтрокаДанных.ТипОбъекта) Тогда
			
			объект[ИмяРеквизита] = СтрокаДанных.ТекстВЯчейке;
			
		ИначеЕсли Не ПустаяСтрока(СтрокаДанных.ТипОбъекта) Тогда
			
			Попытка
				МетаОбъект = Вычислить("Метаданные." + СтрокаДанных.ТипОбъекта);
			Исключение
				стрОшибки = "не могу определить тип объекта в метаданных """ + СтрокаДанных.ТипОбъекта + """";
				Возврат Ложь;
			КонецПопытки;
			
			Если Метаданные.Справочники.Содержит(МетаОбъект) Тогда
				
				// найдем справочник
				
				Запрос = Новый Запрос("ВЫБРАТЬ Ссылка ИЗ Справочник." + МетаОбъект.Имя + " ГДЕ " + СтрокаДанных.ИмяРеквизитаПоискаСсылки + " = """ + СтрокаДанных.ТекстВЯчейке + """");
				Выполнение = Запрос.Выполнить();
				Если Не Выполнение.Пустой() Тогда
					
					Выборка = Выполнение.Выбрать();
					Выборка.Следующий();
					
					Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда
					
						объект[ИмяРеквизита] = Выборка.Ссылка;
						
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(МетаОбъект) Тогда
				
				// найдем план
				
				Запрос = Новый Запрос("ВЫБРАТЬ Ссылка ИЗ ПланВидовХарактеристик." + МетаОбъект.Имя + " ГДЕ " + СтрокаДанных.ИмяРеквизитаПоискаСсылки + " = """ + СтрокаДанных.ТекстВЯчейке + """");
				Выполнение = Запрос.Выполнить();
				Если Не Выполнение.Пустой() Тогда
					
					Выборка = Выполнение.Выбрать();
					Выборка.Следующий();
					
					Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда
					
						объект[ИмяРеквизита] = Выборка.Ссылка;
						
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	Иначе
		
		ЭтоВыражение = истина;
		
		// Вычисление произвольного выражения
		
		Если Не ВыполнитьВыражениеЭкселя(Объект, СтрокаДанных.Выражение, ТаблицаДанных, СтрокаДанных.ТекстВЯчейке, Изменился, стрОшибки) Тогда
			стрОшибки = стрОшибки + "
								| при вычислении поля """ + СтрокаДанных.ИмяРеквизита + """";
			Возврат ложь;
		КонецЕсли;
		
	КонецЕсли;
			
	//Если 	Не ЭтоВыражение И
	Если стЗнРеквизита <> объект[ИмяРеквизита] Тогда
		Изменился = Истина;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции
Функция ЗаполнитьРеквизитыОбъектаДаннымиЭкселя(Объект, таблицаДанных, Изменился, стрОшибки = "", ПропускатьОшибки = Ложь)
	
	// Соберем данные для строк таблицы
	
	ТаблЧасти = Новый Структура;
	
	Для Каждого Строка Из таблицаДанных Цикл
		Если Найти(Строка.ИмяРеквизита,".") Тогда
			
			// Определимся с именами
			
			стрРекв = КонвертацияТипов.ПолучитьМассивИзСтроки(Строка.ИмяРеквизита, ".");
			ИмяТаблицы 		= стрРекв[0] + "_" + Строка.НомерГруппировкиСтрок;
			ИмяРеквизита 	= стрРекв[1];
			
			// Найдем или создадим сторку
			
			СтрокаТаблицы = Неопределено;
			Если Не ТаблЧасти.Свойство("ИмяТаблицы", СтрокаТаблицы) Тогда
				СтрокаТаблицы = Новый Структура;
			КонецЕсли;
			
			// Добавим значение в строку
			
			СтрокаТаблицы.Вставить(имяРеквизита, Строка);
			
			// Запомним строку таблицы
			
			ТаблЧасти.Вставить(ИмяТаблицы, СтрокаТаблицы)
						
		КонецЕсли;
	КонецЦикла;
	
	// Заполним реквизиты табличных частей объекта
	
	Для Каждого ЭлементТаблица Из ТаблЧасти Цикл
		
		таблЧастьОбъекта 	= Объект[Лев(ЭлементТаблица.Ключ, Найти(ЭлементТаблица.Ключ, "_") - 1)];
		новСтрока 			= таблЧастьОбъекта.Добавить();
		
		СтруктураУдаления 	= Новый Структура;
		ЕстьУдаляемые		= Ложь;
		ЕстьЗаполнение		= Ложь;
		
		Для Каждого ЭлементСтроки Из ЭлементТаблица.Значение Цикл
			Если 	ЗначениеЗаполнено(ЭлементСтроки.Значение.ТекстВЯчейке) Тогда
				
				ИмяРеквизитаТаблицы = Сред(ЭлементСтроки.Значение.ИмяРеквизита, Найти(ЭлементСтроки.Значение.ИмяРеквизита,".") + 1);
				
				Если Не ЗаполнитьРеквизитОбъектаДаннымиЭкселя(новСтрока, ЭлементСтроки.Значение, Изменился, стрОшибки) Тогда
					
					Если ПропускатьОшибки Тогда
						Продолжить;
					КонецЕсли;
					
					Возврат Ложь;
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(новСтрока[ИмяРеквизитаТаблицы]) Тогда 
					ЕстьЗаполнение = Истина;
				КонецЕсли;
					
				// Заполним структуру поиска таблицы для удаления строк которые уже существуют
				
				Если ЭлементСтроки.Значение.НеДобавлятьЕслиТакойЕсть Тогда
					ЕстьУдаляемые = Истина;
					СтруктураУдаления.Вставить(ИмяРеквизитаТаблицы, новСтрока[ИмяРеквизитаТаблицы]);
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		// Удалим повторяющие строки которые не должны повторяться
		
		Если 	Не ЕстьЗаполнение ИЛИ
			(	ЕстьУдаляемые И
				таблЧастьОбъекта.НайтиСтроки(СтруктураУдаления).Количество() > 1
			) Тогда
				
			таблЧастьОбъекта.Удалить(новСтрока);
				
		КонецЕсли;
	КонецЦикла;
	
	// Заполним реквизиты объекта
	
	Для Каждого Строка Из таблицаДанных Цикл
			
		Если 	ЗначениеЗаполнено(Строка.ТекстВЯчейке) И
				Не ЗаполнитьРеквизитОбъектаДаннымиЭкселя(Объект, таблицаДанных, Строка, Изменился, стрОшибки, ПропускатьОшибки) Тогда
				
			Если ПропускатьОшибки Тогда
				Продолжить;
			КонецЕсли;
					
			Возврат Ложь;
				
		КонецЕсли;
 	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ЗагрузитьОбъектИзЭкселя(МетаОбъект, таблицаДанных, СтруктураНастроек, стрОшибки = "", ПропускатьОшибки = Ложь) Экспорт
	
	Если Метаданные.Справочники.Содержит(МетаОбъект) Тогда
		
		// Определим структуру поиска
		
		СтрокиПоиска 	= таблицаДанных.найтиСтроки(Новый Структура("ЭтоРеквизитПоиска", Истина));
		ТекстФильтра 	= "";
		
		Если Не СтрокиПоиска.Количество() Тогда
			стрОшибки = "Не найдены реквизиты поиска, нужно указать какие реквизиты являются реквизитами поиска";
			Возврат Ложь;
		КонецЕсли;
		
		ТекстРасшифровкиОшибки = "";
		
		Для Каждого Строка Из СтрокиПоиска Цикл
			
			ТекстФильтра = ТекстФильтра + ?(ТекстФильтра = "",""," И ") + Строка.ИмяРеквизита + " ";
			
			Если ВРЕГ(Строка.ТипОбъекта) = ВРЕГ("Строка(0)") Тогда
				 ТекстФильтра = ТекстФильтра + "Подобно ""%" + Строка.ТекстВЯчейке + "%""";
			Иначе
				 ТекстФильтра = ТекстФильтра + "= """ + Строка.ТекстВЯчейке + """";
			КонецЕсли;
			 
			ТекстРасшифровкиОшибки = ТекстРасшифровкиОшибки + ?(ТекстРасшифровкиОшибки = "","",", ") + 
				Строка.ИмяРеквизита + " = " + Строка.ТекстВЯчейке;
				
		КонецЦикла;
		                                                                                                                   
		// Найдем справочник
		Запрос = Новый Запрос("
		|ВЫБРАТЬ Ссылка ИЗ Справочник." 	+ МетаОбъект.имя + " 
		|ГДЕ 							" 	+ ТекстФильтра + "
		|");
		
		новОбъект 	= Неопределено;
		Выполнение 	= Запрос.Выполнить();
		
		Если Выполнение.Пустой() Тогда	// Новый объект
			
			Если СтруктураНастроек.НеСоздавать Тогда
				ОбщиеФункции.СообщитьТекст("Не найден элемент справочника """ + МетаОбъект.имя + """: " + ТекстРасшифровкиОшибки);
				Возврат Истина; // не нашли и не надо
			КонецЕсли;
			
			Объект = ?(СтруктураНастроек.Группа, 
								Справочники[МетаОбъект.Имя].СоздатьГруппу(),
								Справочники[МетаОбъект.Имя].СоздатьЭлемент());
								
			Если Не ЗаполнитьРеквизитыОбъектаДаннымиЭкселя(Объект, таблицаДанных, Истина, стрОшибки) Тогда
				Возврат Ложь;
			КонецЕсли;
			
			// Запишем справочник
		
			Возврат ЗаписатьСправочник(Объект, стрОшибки);
								
		Иначе							// Старый объект (объекты)
								
			Выборка = Выполнение.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Объект = Выборка.Ссылка.ПолучитьОбъект();
				
				// Обновим реквизиты
		
				Изменился = Ложь;
				
				Если Не ЗаполнитьРеквизитыОбъектаДаннымиЭкселя(Объект, таблицаДанных, Изменился, стрОшибки, ПропускатьОшибки) Тогда
					
					Возврат Ложь;
				КонецЕсли;
				
				// Запишем справочник
				
				Если Изменился И Не ЗаписатьСправочник(Объект, стрОшибки) Тогда
					Возврат Ложь;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(МетаОбъект) Тогда
		
		// Определим структуру поиска
		
		Если Не таблицаДанных.найтиСтроки(Новый Структура("ЭтоРеквизитПоиска", Истина)).Количество() Тогда
			стрОшибки = "Не найдены реквизиты поиска, нужно указать какие рекуизиты являются реквизитами поиска";
			Возврат Ложь;
		КонецЕсли;
		
		// Создадим сруктры фильтра менеджера записей
		
		ОбщиеИзмерения 			= Новый Структура;
		ОбщиеРесурсы 			= Новый Структура;
		ИзмеренияГруппировок	= Новый Структура;
		Группировка 			= Новый Соответствие;
		
		Для Каждого Строка Из таблицаДанных Цикл
			
			ТекИндекс = таблицаДанных.Индекс(Строка);
			
			Если Строка.НомерГруппировкиСтрок Тогда
				
				// Вставим отдельные ресурсы группировок
				
				Если Группировка[Строка.НомерГруппировкиСтрок] = Неопределено Тогда
					Группировка.Вставить(Строка.НомерГруппировкиСтрок,
							Новый Структура("измерения, ресурсы", Новый Структура, Новый Структура));
					
				КонецЕсли;
				
				Если Строка.ЭтоРеквизитПоиска Тогда
					Группировка[Строка.НомерГруппировкиСтрок].измерения.Вставить(Строка.ИмяРеквизита, ТекИндекс);
				Иначе
					Группировка[Строка.НомерГруппировкиСтрок].ресурсы.Вставить(Строка.ИмяРеквизита, ТекИндекс);
				КонецЕсли;
				
			Иначе
				
				// Вставим общие ресурсы
				
				Если Строка.ЭтоРеквизитПоиска Тогда
					ОбщиеИзмерения.Вставить(Строка.ИмяРеквизита, ТекИндекс);
				Иначе
					ОбщиеРесурсы.Вставить(Строка.ИмяРеквизита, ТекИндекс);
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		ОбщаяЗапись = РегистрыСведений[МетаОбъект.Имя].СоздатьМенеджерЗаписи();
			
		// Определим общие измерения регистра
			
		Для Каждого Элемент Из ОбщиеИзмерения Цикл
			Если Не ЗаполнитьРеквизитОбъектаДаннымиЭкселя(ОбщаяЗапись, таблицаДанных[Элемент.Значение], Истина, стрОшибки) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
		
		// Определим общие ресурсы регистра
			
		Для Каждого Элемент Из ОбщиеРесурсы Цикл
			Если Не ЗаполнитьРеквизитОбъектаДаннымиЭкселя(ОбщаяЗапись, таблицаДанных[Элемент.Значение], Истина, стрОшибки) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
		
		// Если группировок нет тогда симитируем что есть одна группировка
		Если Не Группировка.Количество() Тогда
			Группировка.Вставить(0, Новый Структура("измерения, ресурсы", Новый Структура, Новый Структура));
		КонецЕсли;
			
		// Начнем формировать структуру регистра
		
		Для каждого элементГруппировки Из Группировка Цикл
			
			Запись = РегистрыСведений[МетаОбъект.Имя].СоздатьМенеджерЗаписи();
			
			// Заполним общими измерениями и ресурсами
			
			ЗаполнитьЗначенияСвойств(Запись, ОбщаяЗапись);
			
			// Определим измерения групп регистра
			
			Для Каждого Элемент Из элементГруппировки.Значение.Измерения Цикл
				Если Не ЗаполнитьРеквизитОбъектаДаннымиЭкселя(Запись, таблицаДанных[Элемент.Значение], Истина, стрОшибки) Тогда
					Возврат Ложь;
				КонецЕсли;
			КонецЦикла;
			
			// Прочитаем регистр из базы
			
			//Запись.Прочитать();
			
			// Заполним ресурсами группировки
			
			//Изменился = Ложь; 
			
			// Определим ресурсы группировки
		
			Для Каждого Элемент Из элементГруппировки.Значение.ресурсы Цикл
				Если Не ЗаполнитьРеквизитОбъектаДаннымиЭкселя(Запись, ТаблицаДанных, таблицаДанных[Элемент.Значение], Истина, стрОшибки) Тогда
					Возврат Ложь;
				КонецЕсли;
			КонецЦикла;
			
			// Запишем если изменился
			
			//Если 	Изменился И 
			Если	Не ЗаписатьЗаписьРегистра(Запись, стрОшибки) Тогда
					
				Возврат Ложь;
				
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		стрОшибки = "Нет данных о загрузк объекта метаданного " + МетаОбъект;
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ВыполнитьВыражениеЭкселя(Объект, Выражение, ТаблицаДанных, ТекстЭкселя, Изменился, стрОшибки = "")
	
	Попытка
		Выполнить(Выражение);	
	Исключение
		новОшибка = ОписаниеОшибки();
		стрОшибки = стрОшибки + "
						|" + новОшибка;
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// My SQL

Функция НайтиЗначениеСложногоПоля(СоединениеADO, Значение1С, СтрокаПравил, стрОшибки = "")
	
	СтруктураКолонки = MySQLСервер.ПолучитьСтруктуруСложнойКолонки(СтрокаПравил.ИмяКолонки);
	
	ТекстУсловия = MySQLСервер.ПолучитьТекстВыраженияВЗапросе(Значение1С, стрОшибки);
	Если ТекстУсловия = Ложь Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Текст = "
	|SELECT " + СтруктураКолонки.ИмяКлючаДополнительнойТаблицы + "
	|FROM " + СтруктураКолонки.ИмяДополнительнойТаблицы + "
	|WHERE " + СтруктураКолонки.ИмяПоляДополнительнойТаблицы + " = " + ТекстУсловия + "
	|";
	
	Command = Новый COMОбъект("ADODB.Command");
    Command.ActiveConnection = СоединениеADO;
	
	Command.CommandText = Текст;
    Command.CommandType = 1;
	
    RecordSet = Новый COMОбъект("ADODB.RecordSet");
    RecordSet = Command.Execute();
	
    НомерСтроки = 1;
	Если Не RecordSet.EOF Тогда
		
		Возврат RecordSet.Fields(СтруктураКолонки.ИмяКлючаДополнительнойТаблицы).Value;
		
	КонецЕсли;      
	
	стрОшибки = "Не удалось найти значение поля MySQL таблицы """ + СтруктураКолонки.ИмяДополнительнойТаблицы + """ по полю """ + СтруктураКолонки.ИмяКлючаДополнительнойТаблицы + """ значения """ + Значение1С + """";
    Возврат Неопределено;
	
КонецФункции

Функция СинхронизироватьОбъекты_в_MySQL(Правило, стрОшибки = "") Экспорт
											
	Соединение = КэшируемыеФункции.ИницилизироватьADO(, стрОшибки);
	
	Если Соединение = Неопределено Тогда
		
		ОбщиеФункции.СообщитьТекст(стрОшибки);
		Возврат Ложь;
		
	Иначе
		
		// Получим структуру правил
	
		СтруктураПравил = КонвертацияТипов.ПолучитьСтруктуруИзСправочника(Правило, стрОшибки);
		Если СтруктураПравил = Неопределено Тогда
			ОбщиеФункции.СообщитьТекст(стрОшибки);
			Возврат Ложь;
		КонецЕсли;

		// Получим таблицу данных MySQL
			
		ТаблицаДанных = MySQLСервер.ПолучитьТаблицу(Соединение, СтруктураПравил, стрОшибки);
	
		Если ТаблицаДанных = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ТаблицаПараметровДляMySQL = Новый ТаблицаЗначений;
		ТаблицаПараметровДляMySQL.Колонки.Добавить("ИмяПоля");
		ТаблицаПараметровДляMySQL.Колонки.Добавить("Значение");
		
		Запрос 			= Новый Запрос;
		МенеджерТабл 	= Новый МенеджерВременныхТаблиц;
		ТекстПолей 		= "";
		ТекстПолейMySQL	= "";
		ТекстСоединения = "";
		ТекстПроверки 	= "";
		текстОтбора1С 	= "";
		текстОтбораMySQL= "";
		
		ИмяПоля1С 				= "Поле1С";
		ИмяПоляMySQL 			= "ПолеMySQL";
		ИмяДопПоляMySQL 		= "ДопПолеMySQL";
		ИмяПроверкиСложногоПоля = "ЭтоСложнаяКолонка";
		
		Попытка
			МетаОбъект = Вычислить("Метаданные." + СтруктураПравил.ВидОбъекта);
		Исключение
			стрОшибки = "не могу определить тип объекта метаданных """ + СтруктураПравил.ВидОбъекта + """";
			Возврат Ложь;
		КонецПопытки;
		
		// Сформируем текст запроса
		
		Ном = 0;
		Для Каждого Строка Из СтруктураПравил.ЗагружаемыеСтроки Цикл Ном = Ном + 1;НомСтроки = Формат(Ном,"ЧГ=0");
			
			ЕстьИмяКолонки 		= Не ПустаяСтрока(Строка.ИмяКолонки);
			ЕстьИмяРеквизита 	= Не ПустаяСтрока(Строка.ИмяРеквизита);
			ЭтоСложнаяКОлонка	= ЕстьИмяКолонки И СтрЧислоВхождений(Строка.ИмяКолонки,".") = 3;
			
			// Получим имя у сложной колонки
			Если ЭтоСложнаяКОлонка Тогда
				СтруктураКолонки 	= MySQLСервер.ПолучитьСтруктуруСложнойКолонки(Строка.ИмяКолонки);
				ИмяКолонки 			= СтруктураКолонки.ИмяПоляДополнительнойТаблицы;
			Иначе
				ИмяКолонки 			= Строка.ИмяКолонки;
			КонецЕсли; 
			
			// Текст полей выборки
			
			ТекстПолей = ТекстПолей + 
							?(ТекстПолей = "","","," + Символы.ПС) + 
							?(ЕстьИмяРеквизита, 
									"ОбБазы." + Строка.ИмяРеквизита,
									"NULL") + 
							" КАК " + ИмяПоля1С + НомСтроки + ",
			|" +
							?(ЕстьИмяРеквизита, 
									"Табл." + ИмяКолонки,
									"NULL") + 
							" КАК " + ИмяПоляMySQL +НомСтроки + ",
			|" +
							?(ЕстьИмяРеквизита И ЭтоСложнаяКОлонка, 
									"Табл." + СтруктураКолонки.ИмяПоляОсновнойТаблицы,
									"NULL") + 
							" КАК " + ИмяДопПоляMySQL + НомСтроки + ",
			|" +
							?(ЭтоСложнаяКОлонка, "ИСТИНА", "ЛОЖЬ") + " КАК " + ИмяПроверкиСложногоПоля + НомСтроки;
							
			Если ЕстьИмяКолонки Тогда
				
				ТекстПолейMySQL = ТекстПолейMySQL + ?(ТекстПолейMySQL = "","",", ") + "внТабл." + ИмяКолонки;
				Если ЭтоСложнаяКОлонка Тогда
						ТекстПолейMySQL = ТекстПолейMySQL + ",
							|внТабл." + СтруктураКолонки.ИмяПоляОсновнойТаблицы;
				КонецЕсли;
			КонецЕсли;
			
			// Текст условий
			
			Если Строка.ЭтоРеквизитПоиска Тогда
				
				ТекстСоединения = ТекстСоединения + ?(ТекстСоединения = "",""," И ") + 
								"ОбБазы." + Строка.ИмяРеквизита + 
											" = Табл." + ИмяКолонки;
			КонецЕсли;
		КонецЦикла;
		
		// Сформируем текст отборов 1С
		
		Для Каждого Строка Из СтруктураПравил.Отборы1С Цикл
			
			текстОтбора1С = текстОтбора1С + " И (ОбБазы." + Строка.ИмяРеквизита + " " + КэшируемыеФункции.ОпределитьТекстУсловияОтбораПостроке(Строка.ВидСравнения) + " &" + Строка.ИмяРеквизита + 
												" ИЛИ ОбБазы." + Строка.ИмяРеквизита + " ЕСТЬ NULL)";
			Запрос.УстановитьПараметр(Строка.ИмяРеквизита, Строка.Значение);
			
		КонецЦикла;
		
		Если Метаданные.Справочники.Содержит(МетаОбъект) Тогда
			
			Если ТекстСоединения = "" Тогда
				стрОшибки = "Не найдены реквизиты поиска, нужно указать какие реквизиты являются реквизитами поиска";
				Возврат Ложь;
			КонецЕсли;
			
			// Закинем в запрос таблицу
			
			Запрос.УстановитьПараметр("ТаблицаMySQL", ТаблицаДанных);
			
			// Получим выгрузку 
			
			Запрос.Текст = "
			|ВЫБРАТЬ
			|" + ТекстПолейMySQL + "
			|ПОМЕСТИТЬ
			|	ТаблицаMySQL
			|ИЗ
			|	&ТаблицаMySQL КАК внТабл
			|;
			|ВЫБРАТЬ
			|	" + ТекстПолей + "
			//|	" + ТекстПроверки + "
			|ИЗ
			|	Справочник." +  МетаОбъект.Имя + " КАК ОбБазы
			|
			|ПОЛНОЕ СОЕДИНЕНИЕ
			|	(ВЫБРАТЬ 
			|		" + ТекстПолейMySQL  + " ИЗ ТаблицаMySQL КАК внТабл
			|	) КАК Табл
			|ПО
			|	" + ТекстСоединения + "
			|
			|ГДЕ
			|	ИСТИНА
			|" + текстОтбора1С + "
			|";
			
			Пакеты 	= Запрос.ВыполнитьПакет();
			Выборка = Пакеты[1].Выбрать();
			Пока Выборка.Следующий() Цикл
				
				// Определим действие над объектом
				
				ЕстьСправочник 	= Истина;
				ЕстьНаСайте 	= Истина;
				КлючиОдинаковые = Истина;
				ПоляОдинаковые	= Истина;
				
				Ном = 0;
				Для Каждого Строка Из СтруктураПравил.ЗагружаемыеСтроки Цикл Ном = Ном + 1; НомПоля = Формат(Ном,"ЧГ=0");
					
					Если Не ПустаяСтрока(Строка.ИмяРеквизита) И Выборка[ИмяПоля1С + НомПоля] = NULL Тогда
						
						ЕстьСправочник = Ложь;
						
					ИначеЕсли Не ПустаяСтрока(Строка.ИмяКолонки) И Выборка[ИмяПоляMySQL + НомПоля] = NULL Тогда
						
						ЕстьНаСайте 	= Ложь;
						
					ИначеЕсли 	Строка.ЭтоРеквизитПоиска И
								Выборка[ИмяПоля1С + НомПоля] <> Выборка[ИмяПоляMySQL + НомПоля] Тогда
								
						КлючиОдинаковые = Ложь;
						
					ИначеЕсли 	Не Строка.ЭтоРеквизитПоиска И
								Не ПустаяСтрока(Строка.ИмяРеквизита) И
								Не ПустаяСтрока(Строка.ИмяКолонки) И
								
								Выборка[ИмяПоля1С + НомПоля] <> Выборка[ИмяПоляMySQL + НомПоля] Тогда
								
						ПоляОдинаковые	= Ложь;
						
					КонецЕсли;
				КонецЦикла;
				
				// Если одинаковый тогда ничего делать не буду
				
				Если 	ЕстьСправочник И 
						ЕстьНаСайте И
						КлючиОдинаковые И 
						ПоляОдинаковые Тогда
					Продолжить;
				КонецЕсли;
				
				// Назначим действие
				
				Добавлять 	= ЕстьСправочник И Не ЕстьНаСайте;
				Удалять 	= Не ЕстьСправочник И ЕстьНаСайте;
				Изменять 	= Не ПоляОдинаковые;
				
				// Подготовим таблицы для операции
				
				ТаблицаПоиска 	= ТаблицаПараметровДляMySQL.Скопировать();
				ТаблицаПолей 	= ТаблицаПараметровДляMySQL.Скопировать();
				
				Ном = 0;
				Для Каждого Строка Из СтруктураПравил.ЗагружаемыеСтроки Цикл Ном = Ном + 1; НомПоля = Формат(Ном,"ЧГ=0");
					
					//ЕстьИмяКолонки 		= Не ПустаяСтрока(Строка.ИмяКолонки);
					ЭтоСложнаяКОлонка		= Выборка[ИмяПроверкиСложногоПоля + НомПоля];
					ЗначениеСложнойКолонки 	= Выборка[ИмяДопПоляMySQL + НомПоля];
					
					Если ЭтоСложнаяКОлонка Тогда
						СтруктураКолонки 	= MySQLСервер.ПолучитьСтруктуруСложнойКолонки(Строка.ИмяКолонки);
						ИмяКолонки 			= СтруктураКолонки.ИмяПоляОсновнойТаблицы;
					Иначе
						ИмяКолонки 			= Строка.ИмяКолонки;
					КонецЕсли;
					
					// Найдем значения для сложных полей
					
					Если 	ЭтоСложнаяКОлонка И ЕстьСправочник И
							ЗначениеЗаполнено(Выборка[ИмяПоля1С + НомПоля]) И
							Выборка[ИмяПоля1С + НомПоля] <> Выборка[ИмяПоляMySQL + НомПоля] Тогда
								
						ЗначениеСложнойКолонки = НайтиЗначениеСложногоПоля(Соединение, Выборка[ИмяПоля1С + НомПоля], Строка, стрОшибки);
						Если ЗначениеСложнойКолонки = Неопределено Тогда
							Возврат Ложь;
						КонецЕсли;
						
					КонецЕсли;

					Если Добавлять Тогда
						
						Если Не пустаяСтрока(Строка.Выражение) Тогда
							
							Если ВыполнитьВыражениеОбновления(ТаблицаДанных, ТаблицаПоиска, ТаблицаПолей, Выборка, Строка.Выражение, "INSERT", стрОшибки) Тогда
								Если стрОшибки <> "" Тогда
									Возврат Ложь;
								КонецЕсли;
								Продолжить;
							Иначе
								Возврат ложь;
							КонецЕсли;
							
						КонецЕсли;
						
						НовСтрока = ТаблицаПолей.Добавить();
						НовСтрока.ИмяПоля 	= ИмяКолонки;
						НовСтрока.Значение 	= ?(ЭтоСложнаяКОлонка, 
														ЗначениеСложнойКолонки,
														Выборка[ИмяПоля1С + НомПоля]);
					ИначеЕсли Удалять Тогда
						
						Если Не пустаяСтрока(Строка.Выражение) Тогда
							
							Если ВыполнитьВыражениеОбновления(ТаблицаДанных, ТаблицаПоиска, ТаблицаПолей, Выборка, Строка.Выражение, "DELETE", стрОшибки) Тогда
								Если стрОшибки <> "" Тогда
									Возврат Ложь;
								КонецЕсли;
								Продолжить;
							Иначе
								Возврат ложь;
							КонецЕсли;
						КонецЕсли;
						
						НовСтрока = ТаблицаПоиска.Добавить();
						НовСтрока.ИмяПоля 	= ИмяКолонки;
						НовСтрока.Значение 	= ?(ЭтоСложнаяКОлонка, 
														ЗначениеСложнойКолонки,
														Выборка[ИмяПоляMySQL + НомПоля]);
					ИначеЕсли Изменять Тогда
						
						Если Не пустаяСтрока(Строка.Выражение) Тогда
							
							Если ВыполнитьВыражениеОбновления(ТаблицаДанных, ТаблицаПоиска, ТаблицаПолей, Выборка, Строка.Выражение, "UPDATE", стрОшибки) Тогда
								Если стрОшибки <> "" Тогда
									Возврат Ложь;
								КонецЕсли;
								Продолжить;
							Иначе
								Возврат ложь;
							КонецЕсли;
							
						ИначеЕсли Строка.ЭтоРеквизитПоиска Тогда
							НовСтрока = ТаблицаПоиска.Добавить();
						Иначе
							НовСтрока = ТаблицаПолей.Добавить();
						КонецЕсли;
						
						НовСтрока.ИмяПоля 	= ИмяКолонки;
						НовСтрока.Значение 	= ?(ЭтоСложнаяКОлонка, 
														ЗначениеСложнойКолонки,
														Выборка[ИмяПоля1С + НомПоля]);
					КонецЕсли;
				КонецЦикла;
														
				// Выполним назначенные действия
				
				Если 		Добавлять И
							Не MySQLСервер.ВставитьДанные(Соединение, СтруктураПравил.ИмяТаблицы, ТаблицаПолей, стрОшибки) Тогда
						
					Возврат Ложь;
					
				ИначеЕсли Удалять Тогда
					
					Если 	Не СтруктураПравил.НеУдалятьПриСинхронизации И
							Не MySQLСервер.УдалитьДанные(Соединение, СтруктураПравил.ИмяТаблицы, ТаблицаПоиска, стрОшибки) Тогда
						Возврат Ложь;
					КонецЕсли;
					
				ИначеЕсли 	Изменять И 
							Не MySQLСервер.ОбновитьДанные(Соединение, СтруктураПравил.ИмяТаблицы ,ТаблицаПолей, ТаблицаПоиска, стрОшибки) Тогда
							
					Возврат Ложь;
					
				КонецЕсли;
			КонецЦикла;
		Иначе
			
			стрОшибки = "Нет данных о синхронизации объекта метаданного " + МетаОбъект;
			Возврат Ложь;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции
Функция СинхронизироватьОбъекты_в_MySQL_Ст2(Правило, стрОшибки = "") Экспорт
											
	Если Правило.ВидЗагрузки <> Перечисления.ВидыЗагрузок.СинхронизацияСправочника Тогда
		стрОшибки = "ошибка синхронизации. Правило """ + Правило + """ не является правиом синхронизации.";
		Возврат Ложь;
	КонецЕсли;
											
	Соединение = КэшируемыеФункции.ИницилизироватьADO(, стрОшибки);
	
	Если Соединение = Неопределено Тогда
		
		ОбщиеФункции.СообщитьТекст(стрОшибки);
		Возврат Ложь;
		
	Иначе
		
		// Получим структуру правил
	
		СтруктураПравил = КонвертацияТипов.ПолучитьСтруктуруИзСправочника(Правило, стрОшибки);
		Если СтруктураПравил = Неопределено Тогда
			ОбщиеФункции.СообщитьТекст(стрОшибки);
			Возврат Ложь;
		КонецЕсли;

		// Получим таблицу данных MySQL
			
		ТаблицаДанных = MySQLСервер.ПолучитьТаблицу(Соединение, СтруктураПравил, стрОшибки);
	
		Если ТаблицаДанных = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ТаблицаПараметровДляMySQL = Новый ТаблицаЗначений;
		ТаблицаПараметровДляMySQL.Колонки.Добавить("ИмяПоля");
		ТаблицаПараметровДляMySQL.Колонки.Добавить("Значение");
		
		Запрос 			= Новый Запрос;
		МенеджерТабл 	= Новый МенеджерВременныхТаблиц;
		ТекстПолей 		= "";
		ТекстПолейMySQL	= "";
		ТекстСоединения = "";
		ТекстПроверки 	= "";
		текстОтбора1С 	= "";
		текстОтбораMySQL= "";
		
		Попытка
			МетаОбъект = Вычислить("Метаданные." + СтруктураПравил.ВидОбъекта);
		Исключение
			стрОшибки = "не могу определить тип объекта метаданных """ + СтруктураПравил.ВидОбъекта + """";
			Возврат Ложь;
		КонецПопытки;
		
		// Сформируем текст запроса
			
		Для Каждого Строка Из СтруктураПравил.ЗагружаемыеСтроки Цикл
			
			ЕстьИмяКолонки 		= Не ПустаяСтрока(Строка.ИмяКолонки);
			ЕстьИмяРеквизита 	= Не ПустаяСтрока(Строка.ИмяРеквизита);
			ИмяКолонки 			= Строка.ИмяКолонки;
			ИмяРеквизита		= СтрЗаменить(Строка.ИмяРеквизита, ".", "");
			ЭтоСложнаяКОлонка	= ЕстьИмяКолонки И СтрЧислоВхождений(ИмяКолонки,".") = 3;
			
			// Получим имя у сложной колонки
			Если ЭтоСложнаяКОлонка Тогда
				СтруктураКолонки = MySQLСервер.ПолучитьСтруктуруСложнойКолонки(ИмяКолонки);
				ИмяКолонки = СтруктураКолонки.ИмяПоляДополнительнойТаблицы;
			КонецЕсли; 
				
			Если 	ЕстьИмяКолонки И
					ЕстьИмяРеквизита Тогда
					
				ТекстПолей = ТекстПолей + 
								?(ТекстПолей = "","",", ") + 
								"ЕСТЬNULL(ОбБазы." + Строка.ИмяРеквизита + 
											", Табл."  + ИмяКолонки + ") КАК " + ИмяРеквизита;
				Если ЭтоСложнаяКОлонка Тогда
						ТекстПолей = ТекстПолей + ",
							|Табл."  + СтруктураКолонки.ИмяПоляОсновнойТаблицы + " КАК " + СтруктураКолонки.ИмяПоляОсновнойТаблицы;
				КонецЕсли;
				
				Если ЕстьИмяРеквизита Тогда
					ТекстПолей = ТекстПолей + ?(ТекстПолей = "","",", ") + "ОбБазы." + Строка.ИмяРеквизита;
				ИначеЕсли ЕстьИмяКолонки Тогда
					ТекстПолей = ТекстПолей + ?(ТекстПолей = "","",", ") + "Табл." + ИмяКолонки;
				КонецЕсли;
				
			КонецЕсли; 
			
			Если ЕстьИмяКолонки Тогда
				ТекстПолейMySQL = ТекстПолейMySQL + ?(ТекстПолейMySQL = "","",", ") + "внТабл." + ИмяКолонки;
				Если ЭтоСложнаяКОлонка Тогда
						ТекстПолейMySQL = ТекстПолейMySQL + ",
							|внТабл." + СтруктураКолонки.ИмяПоляОсновнойТаблицы;
				КонецЕсли;
			КонецЕсли;
			
			Если Строка.ЭтоРеквизитПоиска Тогда
				
				ТекстПроверки = ТекстПроверки + ?(ТекстПроверки = "","",",") + "
							|ВЫБОР КОГДА ОбБазы." + Строка.ИмяРеквизита + " ЕСТЬ NULL ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ КАК ЕстьСправочник,
							|ВЫБОР КОГДА Табл." + ИмяКолонки + " ЕСТЬ NULL ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ КАК ЕстьНаСайте";
			 
				ТекстСоединения = ТекстСоединения + ?(ТекстСоединения = "",""," И ") + 
								"ОбБазы." + Строка.ИмяРеквизита + 
											" = Табл."  + ИмяКолонки;
			КонецЕсли;
		КонецЦикла;
		
		// Сформируем текст отборов 1С
		
		Для Каждого Строка Из СтруктураПравил.Отборы1С Цикл
			
			текстОтбора1С = текстОтбора1С + " И (ОбБазы." + Строка.ИмяРеквизита + " " + КэшируемыеФункции.ОпределитьТекстУсловияОтбораПостроке(Строка.ВидСравнения) + " &" + Строка.ИмяРеквизита + 
												" ИЛИ ОбБазы." + Строка.ИмяРеквизита + " ЕСТЬ NULL)";
			Запрос.УстановитьПараметр(Строка.ИмяРеквизита, Строка.Значение);
			
		КонецЦикла;
		
		Если Метаданные.Справочники.Содержит(МетаОбъект) Тогда
			
			Если ТекстСоединения = "" Тогда
				стрОшибки = "Не найдены реквизиты поиска, нужно указать какие реквизиты являются реквизитами поиска";
				Возврат Ложь;
			КонецЕсли;
			
			// Закинем в запрос таблицу
			
			Запрос.УстановитьПараметр("ТаблицаMySQL", ТаблицаДанных);
			
			// Получим выгрузку 
			
			Запрос.Текст = "
			|ВЫБРАТЬ
			|" + ТекстПолейMySQL + "
			|ПОМЕСТИТЬ
			|	ТаблицаMySQL
			|ИЗ
			|	&ТаблицаMySQL КАК внТабл
			|;
			|ВЫБРАТЬ
			|	" + ТекстПолей + ",
			|	" + ТекстПроверки + "
			|ИЗ
			|	Справочник." +  МетаОбъект.Имя + " КАК ОбБазы
			|
			|ПОЛНОЕ СОЕДИНЕНИЕ
			|	(ВЫБРАТЬ 
			|		" + ТекстПолейMySQL  + " ИЗ ТаблицаMySQL КАК внТабл
			|	) КАК Табл
			|ПО
			|	" + ТекстСоединения + "
			|
			|ГДЕ
			|	ИСТИНА
			|" + ?(МетаОбъект.Реквизиты.Найти("ВыгружатьНаСайт") = Неопределено, "","
			|	И ЕСТЬNULL(ОбБазы.ВыгружатьНаСайт, ИСТИНА) = ИСТИНА") + "
			|" + текстОтбора1С + "
			|";
			
			Пакеты 	= Запрос.ВыполнитьПакет();
			Выборка = Пакеты[1].Выбрать();
			Пока Выборка.Следующий() Цикл
				
				ТаблицаПоиска 	= ТаблицаПараметровДляMySQL.Скопировать();
				ТаблицаПолей 	= ТаблицаПараметровДляMySQL.Скопировать();
				
				Для Каждого Строка Из СтруктураПравил.ЗагружаемыеСтроки Цикл
						
					ЕстьИмяКолонки 		= Не ПустаяСтрока(Строка.ИмяКолонки);
					ИмяКолонки 			= Строка.ИмяКолонки;
					ЭтоСложнаяКОлонка	= ЕстьИмяКолонки И СтрЧислоВхождений(Строка.ИмяКолонки,".") = 3;
						
					Если ЭтоСложнаяКОлонка Тогда
						СтруктураКолонки 	= MySQLСервер.ПолучитьСтруктуруСложнойКолонки(ИмяКолонки);
						ИмяКолонки 			= СтруктураКолонки.ИмяПоляОсновнойТаблицы;
					КонецЕсли; 

					
					Если 	Выборка.ЕстьСправочник И
							Выборка.ЕстьНаСайте Тогда
					
						// Есть в базе, значит обновим на сайте
					
					 	Если Не пустаяСтрока(Строка.Выражение) Тогда
							
							Если ВыполнитьВыражениеОбновления(ТаблицаДанных, ТаблицаПоиска, ТаблицаПолей, Выборка, Строка.Выражение, "UPDATE", стрОшибки) Тогда
								Если стрОшибки <> "" Тогда
									Возврат Ложь;
								КонецЕсли;
								Продолжить;
							Иначе
								Возврат ложь;
							КонецЕсли;
							
						ИначеЕсли Строка.ЭтоРеквизитПоиска Тогда
							НовСтрока = ТаблицаПоиска.Добавить();
						Иначе
							НовСтрока = ТаблицаПолей.Добавить();
						КонецЕсли;
						
						НовСтрока.ИмяПоля 	= ИмяКолонки;
						НовСтрока.Значение 	= ?(ЭтоСложнаяКОлонка, 
														Выборка[СтруктураКолонки.ИмяПоляОсновнойТаблицы],
														Выборка[Строка.ИмяРеквизита]);
						
						Если 	ТаблицаПолей.Количество() И
								Не MySQLСервер.ОбновитьДанные(Соединение, СтруктураПравил.ИмяТаблицы ,ТаблицаПолей, ТаблицаПоиска, стрОшибки) Тогда
							Возврат Ложь;
						КонецЕсли;
					
					ИначеЕсли Выборка.ЕстьСправочник Тогда
					
					// Нет на сайте, нужно создать новую запись
					
						Если Не пустаяСтрока(Строка.Выражение) Тогда
							
							Если ВыполнитьВыражениеОбновления(ТаблицаДанных, ТаблицаПоиска, ТаблицаПолей, Выборка, Строка.Выражение, "INSERT", стрОшибки) Тогда
								Если стрОшибки <> "" Тогда
									Возврат Ложь;
								КонецЕсли;
								Продолжить;
							Иначе
								Возврат ложь;
							КонецЕсли;
							
						КонецЕсли;
						
						НовСтрока = ТаблицаПолей.Добавить();
						НовСтрока.ИмяПоля 	= ИмяКолонки;
						НовСтрока.Значение 	= ?(ЭтоСложнаяКОлонка, 
														Выборка[СтруктураКолонки.ИмяПоляОсновнойТаблицы],
														Выборка[Строка.ИмяРеквизита]);
						
						Если Не MySQLСервер.ВставитьДанные(Соединение, СтруктураПравил.ИмяТаблицы, ТаблицаПолей, стрОшибки) Тогда
							Возврат Ложь;
						КонецЕсли;					
					
					ИначеЕсли Не СтруктураПравил.НеУдалятьПриСинхронизации Тогда
					
					// Есть на сайте нет в базе, значит снести на сайте	
					
						Если Не пустаяСтрока(Строка.Выражение) Тогда
							
							Если ВыполнитьВыражениеОбновления(ТаблицаДанных, ТаблицаПоиска, ТаблицаПолей, Выборка, Строка.Выражение, "DELETE", стрОшибки) Тогда
								Если стрОшибки <> "" Тогда
									Возврат Ложь;
								КонецЕсли;
								Продолжить;
							Иначе
								Возврат ложь;
							КонецЕсли;
						КонецЕсли;
						
						НовСтрока = ТаблицаПоиска.Добавить();
						НовСтрока.ИмяПоля 	= ИмяКолонки;
						НовСтрока.Значение 	= ?(ЭтоСложнаяКОлонка, 
														Выборка[СтруктураКолонки.ИмяПоляОсновнойТаблицы],
														Выборка[Строка.ИмяРеквизита]);
						
						Если Не MySQLСервер.УдалитьДанные(Соединение, СтруктураПравил.ИмяТаблицы, ТаблицаПоиска, стрОшибки) Тогда
							Возврат Ложь;
						КонецЕсли;
					
					КонецЕсли
				КонецЦикла;
			КонецЦикла;
			
		Иначе
			
			стрОшибки = "Нет данных о синхронизации объекта метаданного " + МетаОбъект;
			Возврат Ложь;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции
Функция СинхронизироватьОбъекты_в_MySQL_Ст(Правило, стрОшибки = "") Экспорт
											
	//Если Правило.ВидЗагрузки <> Перечисления.ВидыЗагрузок.СинхронизацияСправочника Тогда
	//	стрОшибки = "ошибка синхронизации. Правило """ + Правило + """ не является правиом синхронизации.";
	//	Возврат Ложь;
	//КонецЕсли;
	//										
	//Соединение = КэшируемыеФункции.ИницилизироватьADO(, стрОшибки);
	//
	//Если Соединение = Неопределено Тогда
	//	
	//	ОбщиеФункции.СообщитьТекст(стрОшибки);
	//	Возврат Ложь;
	//	
	//Иначе
	//	
	//	// Получим структуру правил
	//
	//	СтруктураПравил = КонвертацияТипов.ПолучитьСтруктуруИзСправочника(Правило, стрОшибки);
	//	Если СтруктураПравил = Неопределено Тогда
	//		ОбщиеФункции.СообщитьТекст(стрОшибки);
	//		Возврат Ложь;
	//	КонецЕсли;

	//	// Получим таблицу данных MySQL
	//		
	//	ТаблицаДанных = MySQLСервер.ПолучитьТаблицу(Соединение, СтруктураПравил, стрОшибки);
	//
	//	Если ТаблицаДанных = Неопределено Тогда
	//		Возврат Ложь;
	//	КонецЕсли;
	//	
	//	ТаблицаПараметровДляMySQL = Новый ТаблицаЗначений;
	//	ТаблицаПараметровДляMySQL.Колонки.Добавить("ИмяПоля");
	//	ТаблицаПараметровДляMySQL.Колонки.Добавить("Значение");
	//	
	//	Запрос 			= Новый Запрос;
	//	МенеджерТабл 	= Новый МенеджерВременныхТаблиц;
	//	ТекстПолей 		= "";
	//	ТекстПолейMySQL	= "";
	//	ТекстСоединения = "";
	//	ТекстПроверки 	= "";
	//	текстОтбора1С 	= "";
	//	текстОтбораMySQL= "";
	//	
	//	Попытка
	//		МетаОбъект = Вычислить("Метаданные." + СтруктураПравил.ВидОбъекта);
	//	Исключение
	//		стрОшибки = "не могу определить тип объекта метаданных """ + СтруктураПравил.ВидОбъекта + """";
	//		Возврат Ложь;
	//	КонецПопытки;
	//	
	//	// Сформируем текст запроса
	//		
	//	Для Каждого Строка Из СтруктураПравил.ЗагружаемыеСтроки Цикл
	//		
	//		ЕстьИмяКолонки 		= Не ПустаяСтрока(Строка.ИмяКолонки);
	//		ЕстьИмяРеквизита 	= Не ПустаяСтрока(Строка.ИмяРеквизита);
	//		ИмяКолонки 			= MySQLСервер.ИмяКолонки(Строка.ИмяКолонки);
	//		ИмяРеквизита		= СтрЗаменить(Строка.ИмяРеквизита, ".", "");
	//		ЭтоСложнаяКОлонка	= ЕстьИмяКолонки И СтрЧислоВхождений(Колонка.ИмяКолонки,".") = 3;
	//		
	//		// Получим имя у сложной колонки
	//		Если ЭтоСложнаяКОлонка Тогда
	//			СтруктураКолонки = MySQLСервер.ПолучитьСтруктуруСложнойКолонки(ИмяКолонки);
	//			ИмяКолонки = СтруктураКолонки.ИмяПоляДополнительнойТаблицы;
	//		КонецЕсли; 
	//			
	//		Если 	ЕстьИмяКолонки И
	//				ЕстьИмяРеквизита Тогда
	//				
	//			ТекстПолей = ТекстПолей + 
	//							?(ТекстПолей = "","",", ") + 
	//							"ЕСТЬNULL(ОбБазы." + Строка.ИмяРеквизита + 
	//										", Табл."  + ИмяКолонки + ") КАК " + Строка.ИмяРеквизита;
	//			Если ЭтоСложнаяКОлонка Тогда
	//					ТекстПолей = ТекстПолей + ",
	//						"Табл."  + СтруктураКолонки.ИмяПоляОсновнойТаблицы + " КАК " + СтруктураКолонки.ИмяПоляОсновнойТаблицы;
	//			КонецЕсли;
	//			
	//			Если ЕстьИмяРеквизита Тогда
	//				ТекстПолей = ТекстПолей + ?(ТекстПолей = "","",", ") + "ОбБазы." + Строка.ИмяРеквизита;
	//			ИначеЕсли ЕстьИмяКолонки Тогда
	//				ТекстПолей = ТекстПолей + ?(ТекстПолей = "","",", ") + "Табл." + ИмяКолонки;
	//			КонецЕсли;
	//			
	//		КонецЕсли; 
	//		
	//		Если ЕстьИмяКолонки Тогда
	//			ТекстПолейMySQL = ТекстПолейMySQL + ?(ТекстПолейMySQL = "","",", ") + "внТабл." + ИмяКолонки;
	//			Если ЭтоСложнаяКОлонка Тогда
	//					ТекстПолейMySQL = ТекстПолейMySQL + ",
	//						"внТабл." + СтруктураКолонки.ИмяПоляОсновнойТаблицы;
	//			КонецЕсли;
	//		КонецЕсли;
	//		
	//		Если Строка.ЭтоРеквизитПоиска Тогда
	//			
	//			ТекстПроверки = ТекстПроверки + ?(ТекстПроверки = "","",",") + "
	//						|ВЫБОР КОГДА ОбБазы." + Строка.ИмяРеквизита + " ЕСТЬ NULL ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ КАК ЕстьСправочник,
	//						|ВЫБОР КОГДА Табл." + ИмяКолонки + " ЕСТЬ NULL ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ КАК ЕстьНаСайте";
	//		 
	//			ТекстСоединения = ТекстСоединения + ?(ТекстСоединения = "",""," И ") + 
	//							"ОбБазы." + Строка.ИмяРеквизита + 
	//										" = Табл."  + ИмяКолонки;
	//		КонецЕсли;
	//	КонецЦикла;
	//	
	//	// Сформируем текст отборов 1С
	//	
	//	Для Каждого Строка Из СтруктураПравил.Отборы1С Цикл
	//		
	//		текстОтбора1С = текстОтбора1С + " И (ОбБазы." + Строка.ИмяРеквизита + " " + КэшируемыеФункции.ОпределитьТекстУсловияОтбораПостроке(Строка.ВидСравнения) + " &" + Строка.ИмяРеквизита + 
	//											" ИЛИ ОбБазы." + Строка.ИмяРеквизита + " ЕСТЬ NULL)";
	//		Запрос.УстановитьПараметр(Строка.ИмяРеквизита, Строка.Значение);
	//		
	//	КонецЦикла;
	//	
	//	Если Метаданные.Справочники.Содержит(МетаОбъект) Тогда
	//		
	//		Если ТекстСоединения = "" Тогда
	//			стрОшибки = "Не найдены реквизиты поиска, нужно указать какие реквизиты являются реквизитами поиска";
	//			Возврат Ложь;
	//		КонецЕсли;
	//		
	//		// Закинем в запрос таблицу
	//		
	//		Запрос.УстановитьПараметр("ТаблицаMySQL", ТаблицаДанных);
	//		
	//		// Получим выгрузку 
	//		
	//		Запрос.Текст = "
	//		|ВЫБРАТЬ
	//		|" + ТекстПолейMySQL + "
	//		|ПОМЕСТИТЬ
	//		|	ТаблицаMySQL
	//		|ИЗ
	//		|	&ТаблицаMySQL КАК внТабл
	//		|;
	//		|ВЫБРАТЬ
	//		|	" + ТекстПолей + ",
	//		|	" + ТекстПроверки + "
	//		|ИЗ
	//		|	Справочник." +  МетаОбъект.Имя + " КАК ОбБазы
	//		|
	//		|ПОЛНОЕ СОЕДИНЕНИЕ
	//		|	(ВЫБРАТЬ 
	//		|		" + ТекстПолейMySQL  + " ИЗ ТаблицаMySQL КАК внТабл
	//		|	) КАК Табл
	//		|ПО
	//		|	" + ТекстСоединения + "
	//		|
	//		|ГДЕ
	//		|	ИСТИНА
	//		|" + ?(МетаОбъект.Реквизиты.Найти("ВыгружатьНаСайт") = Неопределено, "","
	//		|	И ЕСТЬNULL(ОбБазы.ВыгружатьНаСайт, ИСТИНА) = ИСТИНА") + "
	//		|" + текстОтбора1С + "
	//		|";
	//		
	//		Пакеты 	= Запрос.ВыполнитьПакет();
	//		Выборка = Пакеты[1].Выбрать();
	//		Пока Выборка.Следующий() Цикл
	//			
	//			ТаблицаПоиска 	= ТаблицаПараметровДляMySQL.Скопировать();
	//			ТаблицаПолей 	= ТаблицаПараметровДляMySQL.Скопировать();
	//				
	//			Если 	Выборка.ЕстьСправочник И
	//					Выборка.ЕстьНаСайте Тогда
	//				
	//				// Есть в базе, значит обновим на сайте
	//				
	//				
	//				Для Каждого Строка Из СтруктураПравил.ЗагружаемыеСтроки Цикл
	//					
	//					ЕстьИмяКолонки 		= Не ПустаяСтрока(Строка.ИмяКолонки);
	//					ИмяКолонки 			= Строка.ИмяКолонки;
	//					ЭтоСложнаяКОлонка	= ЕстьИмяКолонки И СтрЧислоВхождений(Колонка.ИмяКолонки,".") = 3;
	//					
	//					Если ЭтоСложнаяКОлонка Тогда
	//						СтруктураКолонки 	= MySQLСервер.ПолучитьСтруктуруСложнойКолонки(ИмяКолонки);
	//						ИмяКолонки 			= СтруктураКолонки.ИмяПоляОсновнойТаблицы;
	//					КонецЕсли; 
	//		
	//					Если Не пустаяСтрока(Строка.Выражение) Тогда
	//						
	//						Если ВыполнитьВыражениеОбновления(ТаблицаДанных, ТаблицаПоиска, ТаблицаПолей, Выборка, Строка.Выражение, "UPDATE", стрОшибки) Тогда
	//							Если стрОшибки <> "" Тогда
	//								Возврат Ложь;
	//							КонецЕсли;
	//							Продолжить;
	//						Иначе
	//							Возврат ложь;
	//						КонецЕсли;
	//						
	//					ИначеЕсли Строка.ЭтоРеквизитПоиска Тогда
	//						НовСтрока = ТаблицаПоиска.Добавить();
	//					Иначе
	//						НовСтрока = ТаблицаПолей.Добавить();
	//					КонецЕсли;
	//					
	//					НовСтрока.ИмяПоля 	= ИмяКолонки;
	//					НовСтрока.Значение 	= Выборка[Строка.ИмяРеквизита];
	//					
	//				КонецЦикла;
	//				
	//				Если 	ТаблицаПолей.Количество() И
	//						Не MySQLСервер.ОбновитьДанные(Соединение, СтруктураПравил.ИмяТаблицы ,ТаблицаПолей, ТаблицаПоиска, стрОшибки) Тогда
	//					Возврат Ложь;
	//				КонецЕсли;
	//				
	//			ИначеЕсли Выборка.ЕстьСправочник Тогда
	//				
	//				// Нет на сайте, нужно создать новую запись
	//				
	//				Для Каждого Строка Из СтруктураПравил.ЗагружаемыеСтроки Цикл
	//					
	//					Если Не пустаяСтрока(Строка.Выражение) Тогда
	//						
	//						Если ВыполнитьВыражениеОбновления(ТаблицаДанных, ТаблицаПоиска, ТаблицаПолей, Выборка, Строка.Выражение, "INSERT", стрОшибки) Тогда
	//							Если стрОшибки <> "" Тогда
	//								Возврат Ложь;
	//							КонецЕсли;
	//							Продолжить;
	//						Иначе
	//							Возврат ложь;
	//						КонецЕсли;
	//						
	//					КонецЕсли;
	//					
	//					НовСтрока = ТаблицаПолей.Добавить();
	//					НовСтрока.ИмяПоля 	= Строка.ИмяКолонки;
	//					НовСтрока.Значение 	= Выборка[Строка.ИмяРеквизита];
	//					
	//				КонецЦикла;
	//				
	//				Если Не MySQLСервер.ВставитьДанные(Соединение, СтруктураПравил.ИмяТаблицы, ТаблицаПолей, стрОшибки) Тогда
	//					Возврат Ложь;
	//				КонецЕсли;					
	//				
	//			ИначеЕсли Не СтруктураПравил.НеУдалятьПриСинхронизации Тогда
	//				
	//				// Есть на сайте нет в базе, значит снести на сайте	
	//				
	//				Для Каждого Строка Из СтруктураПравил.ЗагружаемыеСтроки Цикл
	//					
	//					Если Не пустаяСтрока(Строка.Выражение) Тогда
	//						
	//						Если ВыполнитьВыражениеОбновления(ТаблицаДанных, ТаблицаПоиска, ТаблицаПолей, Выборка, Строка.Выражение, "DELETE", стрОшибки) Тогда
	//							Если стрОшибки <> "" Тогда
	//								Возврат Ложь;
	//							КонецЕсли;
	//							Продолжить;
	//						Иначе
	//							Возврат ложь;
	//						КонецЕсли;
	//					КонецЕсли;
	//					
	//					НовСтрока = ТаблицаПоиска.Добавить();
	//					НовСтрока.ИмяПоля 	= Строка.ИмяКолонки;
	//					НовСтрока.Значение 	= Выборка[Строка.ИмяРеквизита];
	//					
	//				КонецЦикла;
	//				
	//				Если Не MySQLСервер.УдалитьДанные(Соединение, СтруктураПравил.ИмяТаблицы, ТаблицаПоиска, стрОшибки) Тогда
	//					Возврат Ложь;
	//				КонецЕсли;
	//				
	//			КонецЕсли
	//		КонецЦикла;
	//		
	//	Иначе
	//		
	//		стрОшибки = "Нет данных о синхронизации объекта метаданного " + МетаОбъект;
	//		Возврат Ложь;
	//		
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Возврат Истина;

КонецФункции

Функция ВыполнитьВыражениеОбновления(ТаблицаДанных, ТаблицаПоиска, ТаблицаПолей, Выборка, Выражение, Действие, стрОшибки = "")
	
	// ТаблицаДанных 	- таблица с данными MySQL
	// ТаблицаПоиска 	- таблица значений с загруженными до данного поля, реквизитами поиска
	// ТаблицаПолей 	- таблица значений с загруженными до данного поля, значниями полей
	// Выборка			- выборка запроса с данными 1С
	// Действие
	
	Попытка
		Выполнить(Выражение);
	Исключение
		ошибка = ОписаниеОшибки();
		стрОшибки = "Ошиба при вычислении выражения
						|" + ошибка;
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

