
Функция СохранитьПорядокСтрок(Объект, ТаблТоваров) Экспорт
	
	// Объект - объект для которого сохраняем порядок строк
	// ТаблТоваров - таблица значений внутри номенклатура и количество, в такой последовательности будут сохранены номера строк
	
	Если ЗначениеЗаполнено(Объект) Тогда
	
		Набор = РегистрыСведений.ПорядокСтрокНоменклатуры.СоздатьНаборЗаписей();
		Набор.Отбор.Объект.Установить(Объект);
		НомСтр = 0; врДвойные = Новый  Соответствие;
		//Для КАждого Строка Из ТаблТоваров Цикл НомСтр = НомСтр + 1; НовЗапись = Набор.Добавить(); НовЗапись.Объект = Объект; НовЗапись.Номенклатура = Строка.Номенклатура; НовЗапись.Количество = Строка.Количество; НовЗапись.Позиция = НомСтр; КонецЦикла;
		Для КАждого Строка Из ТаблТоваров Цикл Если врДвойные[Строка.Номенклатура] <> Истина Тогда врДвойные.Вставить(Строка.Номенклатура, Истина); НомСтр = НомСтр + 1; НовЗапись = Набор.Добавить(); НовЗапись.Объект = Объект; НовЗапись.Номенклатура = Строка.Номенклатура; НовЗапись.Позиция = НомСтр; КонецЕсли; КонецЦикла;
	
			Возврат ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(Набор);
	Иначе	Возврат Истина; КонецЕсли;
	
КонецФункции
Функция ПолучитьНомерГТД(СсылкаНоменклатуры = Неопределено) Экспорт

	Возврат СсылкаНоменклатуры.НомерГТД;
	
КонецФункции
Функция ПроверитьНомерГТД(ДатаДокумента,Товары) Экспорт
	Отказ = Ложь;
	Для каждого Стр из Товары Цикл
		Если ЗначениеЗаполнено(Стр.НомерГТД) Тогда
			НомерГТД = Стр.НомерГТД;
			ПозицияРазделителя = Найти(Стр.НомерГТД,"/");
			ДатаПоГТДСтрокой = Сред(НомерГТД, ПозицияРазделителя + 1, 6);
			День  = Сред(ДатаПоГТДСтрокой,1,2);
			Месяц = Сред(ДатаПоГТДСтрокой,3,2);
            Год   = Строка(20) + Сред(ДатаПоГТДСтрокой,5,2);
			Попытка
            	ДатаГТД = Дата(Год,Месяц,День);
			Исключение
				Отказ = Истина;
			КонецПопытки;	
			
			Если ДатаДокумента < ДатаГТД Тогда
			Отказ = Истина; КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	Возврат Отказ;
	
	КонецФункции

Функция ПолучитьСтавкуНДСНоменклатуры(СсылкаНоменклатуры = Неопределено) Экспорт
	
	Если СсылкаНоменклатуры = Неопределено Тогда
		Возврат Перечисления.СтавкиНДС.БезНДС;
	КонецЕсли;
	
	// Если это германия тогда всегда 19 процентов
	
	Если ПолучитьФункциональнуюОпцию("НемецкийУчет") Тогда
		Возврат Перечисления.СтавкиНДС.НДС19; КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 СтавкаНДС ИЗ Справочник.Номенклатура ГДЕ Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", СсылкаНоменклатуры);
	
	Выполнение = Запрос.Выполнить();
	Если Выполнение.Пустой() Тогда
		
		Возврат Перечисления.СтавкиНДС.ПустаяСсылка();
		
	Иначе
		
		Выборка = Выполнение.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.СтавкаНДС;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьЦенуЗаЧасРемонтаИнструмента(СсылкаНоменклатуры) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 ЦенаЗаЧас ИЗ Справочник.Производители ГДЕ Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", СсылкаНоменклатуры.Производитель);
	
	Выполнение = Запрос.Выполнить();
	Если Выполнение.Пустой() Тогда
		
		Возврат 0;
		
	Иначе
		
		Выборка = Выполнение.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.ЦенаЗаЧас;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьКоэффициентУпаковки(Упаковка) Экспорт

	Возврат Упаковка.Коэффициент;
	
КонецФункции

Функция ПолучитьНоменклатуруПоШтрихКоду(ШтрихКод, Упаковка = Неопределено) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 Объект Номенклатура, Упаковка ИЗ РегистрСведений.ШтрихКоды ГДЕ ШтрихКод = """ + ШтрихКод + """ И Объект ССЫЛКА Справочник.Номенклатура");
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда Упаковка = Выборка.Упаковка; Возврат Выборка.Номенклатура; КонецЕсли;
	
КонецФункции
Функция ПолучитьОбъектПоШтрихКоду(ШтрихКод, Упаковка = Неопределено) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 Объект, Упаковка ИЗ РегистрСведений.ШтрихКоды ГДЕ ШтрихКод = """ + ШтрихКод + """");
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда Упаковка = Выборка.Упаковка; Возврат Выборка.Объект; КонецЕсли;
	
КонецФункции

Функция ПолучитьУпаковкуПоставщика(Номенклатура) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка ИЗ Справочник.УпаковкиНоменклатуры ГДЕ Владелец = &Номенклатура И Закупочная = ИСТИНА И НЕ ПометкаУдаления");
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Справочники.УпаковкиНоменклатуры.ПустаяСсылка();
	
КонецФункции

Функция ПолучитьСтавкуНДС_БезНДС() Экспорт 
	
	Возврат Перечисления.СтавкиНДС.БезНДС;
	
КонецФункции

// ЦЕНЫ

//Функция ПолучитьСуммуСУчетомАкции(ТекДанные, Номенклатура, ТипЦен, Цена, Дата = Неопределено) Экспорт
//	
//	Запрос = Новый Запрос("ВЫБРАТЬ
//		|	Акция,
//		|	Цена,
//		|	Процент
//		|ИЗ
//		|	РегистрСведений.Акция.СрезПоследних(" + ?(Дата = Неопределено, "","&Дата") + ", ТипЦен = &ТипЦен И Номенклатура = &Номенклатура)");
//		
//	Запрос.УстановитьПараметр("Дата", 	Дата);
//	Запрос.УстановитьПараметр("ТипЦен", ТипЦен);
//	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
//	
//	Выборка = Запрос.Выполнить().Выбрать();
//	Если Выборка.Следующий() Тогда
//		Возврат Выборка.Акция; КонецЕсли;
//		
//	
//КонецФункции

Функция ПолучитьДействующуюАкциюДляТовара(Номенклатура, Упаковка, ТипЦен, Дата = Неопределено, Акция = Неопределено, Контрагент = Неопределено, ВариантСкидки = Неопределено) Экспорт
	
	Если Дата = Неопределено Тогда
		Дата = ТекущаяДата(); КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ Акция, НоваяЦена, ПроцентСкидки ИЗ 
	|РегистрСведений.Акция.СрезПоследних(&ДатаСреза, Номенклатура = &Номенклатура И Упаковка = &Упаковка И ТипЦен = &ТипЦен)
	|ГДЕ " + ?(Акция = Неопределено, "Акция <> &ПустаяАкция", "Акция = &Акция") + ?(ВариантСкидки = Неопределено, "", "ВариантСкидки = &ВариантСкидки"));
	
	Запрос.УстановитьПараметр("ДатаСреза", 		Дата);
	Запрос.УстановитьПараметр("Номенклатура", 	Номенклатура);	
	Запрос.УстановитьПараметр("Упаковка", 		Упаковка);
	Запрос.УстановитьПараметр("ТипЦен", 		ТипЦен);
	Запрос.УстановитьПараметр("ПустаяАкция", 	Документы.Акция.ПустаяСсылка());
	Запрос.УстановитьПараметр("Акция", 			Акция);
	Запрос.УстановитьПараметр("ВариантСкидки", 	ВариантСкидки);

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Новый Структура("Акция, ЦенаПоАкции, СкидкаПоАкции", Выборка.Акция, Выборка.НоваяЦена, Выборка.ПроцентСкидки); КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьЦенуПоАкции(Номенклатура, Упаковка, ТипЦен, Дата = Неопределено, Акция = Неопределено , Контрагент = Неопределено)
	
	Акция = ПолучитьДействующуюАкциюДляТовара(Номенклатура, Упаковка, ТипЦен, Дата, Акция, Контрагент, Перечисления.ВариантСкидки.Цена);
	Если Акция = Неопределено Тогда
		Возврат 0; КонецЕсли;
	
	Возврат Акция.ЦенаПоАкции;
	
КонецФункции

Функция ПолучитьПроцентСкидкиПоАкции(Номенклатура, Упаковка, ТипЦен, Дата = Неопределено, Акция = Неопределено , Контрагент = Неопределено)
	
	Акция = ПолучитьДействующуюАкциюДляТовара(Номенклатура, Упаковка, ТипЦен, Дата, Акция, Контрагент, Перечисления.ВариантСкидки.Процент);
	Если Акция = Неопределено Тогда
		Возврат 0; КонецЕсли;
	
	Возврат Акция.СкидкаПоАкции;
	
КонецФункции


Функция ПолучитьСкидкуПоДисконтнойПрограмме(ИнформационнаяКарта, Номенклатура)
	
	ПроцентСкидки = 0;
	
	Запрос = Новый Запрос("
	    |
		// УЗНАЕМ К КАКОЙ ЦЕНОВОЙ ГРУППЕ ОТНОСИТСЯ ТОВАР  (товар может относиться только к одной ценовой группе)
		|
		|ВЫБРАТЬ ЦеноваяГруппа 
		|ПОМЕСТИТЬ ЦеноваяГруппаТовара
        |
		|ИЗ РегистрСведений.ЦеноваяГруппаТовара 
		|ГДЕ Номенклатура = &Номенклатура
        |
		|;
        |
		|ВЫБРАТЬ
		|	Внз.Карта,
		|	ЕСТЬNULL(СкдУстан.ПроцентСкидки, 0)	НачальныйПроцент,
		|	ЕСТЬNULL(СкдНакоп.ПроцентСкидки, 0) НакопленныйПроцент
		|ИЗ
		| 
		 // ВЫЧИСЛИМ СКОЛЬКО НА КАРТЕ НАКОПЛЕНО И КАКОМУ ПОРОГУ СООТВЕТСТВУЕТ СУММА
		|(
		|  ВЫБРАТЬ
		|   Спр.Ссылка							Карта,
		|   Спр.УровеньСкидки        			НачальныйУровеньКарты,
		|   МАКСИМУМ(ЕСТЬNULL(Прг.Сумма,0)) 	Порог
		| ИЗ
		| 	Справочник.ИнформационныеКарты Спр	
		|
		| 	ЛЕВОЕ СОЕДИНЕНИЕ
		| 		РегистрНакопления.ПродажиПоДисконтнымКартам.Обороты() Рег
		| 	ПО  Спр.Ссылка = Рег.ИнформационнаяКарта
		| 
		| 	ЛЕВОЕ СОЕДИНЕНИЕ
		| 		РегистрСведений.ПорогНакопительнойСкидки Прг
		| 	ПО	ЕСТЬNULL(Рег.СуммаОборот,0) + Спр.Сумма >= Прг.Сумма
		|  
		|  ГДЕ Спр.Ссылка = &ИнформационнаяКарта
		| 	
		|  СГРУППИРОВАТЬ ПО Спр.Ссылка	
		| ) Внз
        |
		// УЗНАЕМ КАКОЙ УРОВЕНЬ СООТВЕТСТВУЕТ ДОСТИГНУТОМУ ПОРОГУ 	
		| 
		|   ЛЕВОЕ СОЕДИНЕНИЕ
		| 		РегистрСведений.ПорогНакопительнойСкидки  Прг
		| 	ПО
		| 		Внз.Порог = Прг.Сумма
        |
		// ВЫЧИСЛИМ КАКОЙ ПРОЦЕНТ СКИДКИ ДЛЯ ДАННОГО ТОВАРА СООТВЕТСТВУЕТ НАЙДЕННОМУ УРОВНЮ				
		|					
		|  	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.СкидкиПоЦеновымГруппам.СрезПоследних(, 
		|				ЦеноваяГруппа В (ВЫБРАТЬ ЦеноваяГруппа ИЗ ЦеноваяГруппаТовара)) СкдНакоп
		|	ПО
		| 		Прг.УровеньСкидки = СкдНакоп.УровеньСкидки
		| 
		// ВЫЧИСЛИМ КАКОЙ ПРОЦЕНТ СКИДКИ ДЛЯ ДАННОГО ТОВАРА СООТВЕТСТВУЕТ ПРЕДУСТАНОВЛЕННОМУ УРОВНЮ КАРТЫ
		| 
		| 	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.СкидкиПоЦеновымГруппам.СрезПоследних(, 
		|				ЦеноваяГруппа В (ВЫБРАТЬ ЦеноваяГруппа ИЗ ЦеноваяГруппаТовара)) СкдУстан
		|	ПО
		| 		Внз.НачальныйУровеньКарты = СкдУстан.УровеньСкидки
		|");
		
	Запрос.УстановитьПараметр("ИнформационнаяКарта", ИнформационнаяКарта);
    Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Рез = Запрос.Выполнить();	
	
	Если НЕ Рез.Пустой() Тогда
		Выборка = Рез.Выбрать();
		Если Выборка.Следующий() Тогда  
			ПроцентСкидки = ?(Выборка.НакопленныйПроцент < Выборка.НачальныйПроцент, Выборка.НачальныйПроцент, Выборка.НакопленныйПроцент);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПроцентСкидки;
	
КонецФункции

// если товар относится к одной из ценовых групп и для ценовой группы установлен процент скидки, вернется величина скидки
функция ПолучитьПроцентАвтоматическойСкидки(Номенклатура, Контрагент = Неопределено, ИнформационнаяКарта = Неопределено, Акция = Неопределено) Экспорт
	
	// проверим возможность установки скидки для текущей акции
	
	Если 	Акция <> Неопределено И  
			ФункцииФормДокументов.СкидкаТолькоПоАкции(Акция, Заказы.ПолучитьВариантРасчетаЦеныПоАкции(Акция)) Тогда
			
			Возврат 0; КонецЕсли; 
	
	// если у Контрагента есть уровень, дисконтная программа не действует

	Если ЗначениеЗаполнено(Контрагент.УровеньСкидки) Тогда
		Возврат ПолучитьПроцентСкидкиПартнера(Контрагент, Номенклатура)	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИнформационнаяКарта) Тогда
		Возврат ПолучитьСкидкуПоДисконтнойПрограмме(ИнформационнаяКарта, Номенклатура);
	КонецЕсли;
	
	//Запрос = Новый Запрос("ВЫБРАТЬ Процент,
	//|ВЫБОР КОГДА ВариантРасчета = ЗНАЧЕНИЕ(Перечисление.ВариантРасчетаЦеныПоАкции.СкидкаПоАкции) ТОГДА
	//|Процент
	//|КОГДА ВариантРасчета = ЗНАЧЕНИЕ(Перечисление.ВариантРасчетаЦеныПоАкции.СкидкиСуммируются) ТОГДА
	//|Процент + &Процент
	//|КОГДА ВариантРасчета = ЗНАЧЕНИЕ(Перечисление.ВариантРасчетаЦеныПоАкции.Авто) ТОГДА
	//|	
	//|ИЗ РегистрСведений.Акции.СрезПоследних(, Номенклатура = &Ссылка И ТипЦен = &ТипЦен И ВариантСкидки = ЗНАЧЕНИЕ(Перечисление.ВариантСкидки.Процент))");
	//
	
	Возврат 0;
	
КонецФункции

Функция ПолучитьПроцентСкидкиПартнера(Контрагент, Номенклатура, Дата = Неопределено)
	
	ПроцентСкидки = 0;
	
	УровеньСкидки = Контрагент.УровеньСкидки;
	Если УровеньСкидки.Пустая() Тогда
		Возврат ПроцентСкидки;
	КонецЕсли;
	
	Запрос = Новый Запрос("	ВЫБРАТЬ ПЕРВЫЕ 1
							|	Рег.ПроцентСкидки Процент
							|ИЗ
							|	РегистрСведений.СкидкиПоЦеновымГруппам.СрезПоследних(" + ?(Дата = Неопределено, "","&ДатаСреза") + ", 
							|									УровеньСкидки = &Уровень 
							|									И ЦеноваяГруппа В ( ВЫБРАТЬ ЦеноваяГруппа ИЗ РегистрСведений.ЦеноваяГруппаТовара 
							|														ГДЕ Номенклатура = &Номенклатура)
							|															
							|									) Рег
							|");
							
	Запрос.УстановитьПараметр("ДатаСреза", 		Дата);
	Запрос.УстановитьПараметр("Уровень", 		УровеньСкидки);
	Запрос.УстановитьПараметр("Номенклатура", 	Номенклатура);
	
	Выполнение = Запрос.Выполнить();
	
	Если НЕ Выполнение.Пустой() Тогда
		
		Выборка = Выполнение.Выбрать();
		Выборка.Следующий();
		
		ПроцентСкидки = Выборка.Процент;
		
	КонецЕсли;
	
	Возврат ПроцентСкидки;
	
КонецФункции

Функция ПолучитьТекстЗапросаДляВычисленияЦеныБезНДС(ТипЦен) Экспорт
	
	Возврат ?(ТипЦен.ЦенаВключаетНДС, "Цена * 100 / (100 + " + КэшируемыеФункции.ПолучитьЧислоТекущейСтавкиНДС() + ")", "Цена");
	
КонецФункции
Функция ПолучитьТекстЗапросаДляВычисленияСуммыПартии(СумаВключаетНДС) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("НемецкийУчет") Тогда // у немцов сумма без НДС
		
		Возврат ?(СумаВключаетНДС, "Сумма - СуммаНДС", "Сумма");
		
	Иначе // у наших товарищей сумма с НДС
		
		Возврат ?(СумаВключаетНДС, "Сумма", "Сумма + СуммаНДС"); КонецЕсли;
	
КонецФункции

Функция ПолучитьЦенуСУчетомНДС(Цена, СтавкаНДС, УчитыватьНДС = Истина, СуммаВлючаетНДС = Истина, ЦенаУжеВключаетНДС = Истина) Экспорт
	
	ЧислоСтавки = КэшируемыеФункции.ПолучитьЧислоСтавкиНДС(СтавкаНДС);
 	
	Если УчитыватьНДС = Истина Тогда
		
				
		Если 	ЦенаУжеВключаетНДС = Истина И 
				НЕ СуммаВлючаетНДС = Истина Тогда
				
				//если в цене уже заложен ндс а в сумме нет, то исключим из цены величину ндс, накинем потом сверху
				
				Цена	= Цена * 100 / (ЧислоСтавки + 100); // исключаем НДС
				
		ИначеЕсли
				НЕ ЦенаУжеВключаетНДС = Истина И 
				СуммаВлючаетНДС = Истина Тогда
				
				// если в цене не заложен ндс, но сумма содержит, добавим к цене величину ндс, что бы цена*колич = сумма
				
				Цена = Цена * (100 + ЧислоСтавки) / 100;	// включаем НДС
				
		КонецЕсли;
			
	//Иначе
	//	
	//	Если ЦенаУжеВключаетНДС Тогда
	//		
	//		// если ндс не учитывается то величину ндс надо исключить из цены, если она туда включена 
	//		
	//		Цена = Цена * 100 / (ЧислоСтавки + 100); // исключаем НДС
	//		
	//	КонецЕсли;
	//	
	КонецЕсли;		
	
	Возврат Цена;
	
КонецФункции

Функция ПолучитьЦенуПриИзмененииВалюты(Знач Цена, ВалютаЦены, НоваяВалюта, Дата = Неопределено) Экспорт
		
	Если 	ВалютаЦены <> НоваяВалюта 
			И ВалютаЦены <> Неопределено 
			И НоваяВалюта <> Неопределено Тогда
				                        
		Запрос = Новый Запрос("
			|		ВЫБРАТЬ
			|			&Цена * (ЕСТЬNULL(ВалЦен.Курс, 1) * ЕСТЬNULL(ВалВыб.Кратность, 1)) / (ЕСТЬNULL(ВалВыб.Курс, 1) * ЕСТЬNULL(ВалЦен.Кратность, 1)) КАК Цена
			|		ИЗ
			|			РегистрСведений.КурсыВалют.СрезПоследних(" + ?(Дата = Неопределено, "","&Дата1") + ", Валюта = &ВалЦен) ВалЦен
			|	
			|		ЛЕВОЕ СОЕДИНЕНИЕ 
			|			РегистрСведений.КурсыВалют.СрезПоследних("+ ?(Дата = Неопределено, "","&Дата1") + ", Валюта = &ВалВыб) ВалВыб
			|		ПО  ИСТИНА
			|");
			
		Запрос.УстановитьПараметр("Дата1", 	Дата);
		Запрос.УстановитьПараметр("Цена", 	Цена);
		Запрос.УстановитьПараметр("ВалЦен",	ВалютаЦены);
		Запрос.УстановитьПараметр("ВалВыб", НоваяВалюта);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
				
			Цена = Выборка.Цена;
				
		КонецЕсли;
		
	КонецЕсли;	
		
	Возврат Цена;	

КонецФункции

Функция РассчитатьАкциюДляПартнера_ст(Контрагент, Товары, СтруктураКолонокТовары, Валюта = Неопределено, ПересчитатьСтроки = Истина, Дата = Неопределено, ЕстьДоставка = Ложь) Экспорт
	
	//Если Дата = Неопределено Тогда
	//	Дата = ТекущаяДата(); КонецЕсли;

	//Если Валюта = Неопределено Тогда
	//	Валюта = ОбщиеФункции.ПолучитьЗначениеКонстантыВОбласти("ВалютаУправленческогоУчета"); КонецЕсли;
	//
	//Акция = Неопределено;
	//
	//Запрос = Новый Запрос("
	//|ВЫБРАТЬ
	//|	ДокументАкция.Номенклатура,
	//|	ДокументАкция.Акция,
	//|	ЕСТЬNULL(ДокументАкция.НоваяЦена, 0)*(ЕСТЬNULL(ВалЦенАкция.Курс, 1) * ЕСТЬNULL(ВалютаПеревода.Кратность, 1)) / (ЕСТЬNULL(ВалютаПеревода.Курс, 1) * ЕСТЬNULL(ВалЦенАкция.Кратность, 1)) НоваяЦена
	//|ИЗ
	//|  ( ВЫБРАТЬ Номенклатура, Акция, НоваяЦена, Валюта
	//|	ИЗ
	//|		РегистрСведений.УчастникиАкции.СрезПоследних(&Дата, Номенклатура В (&Товары) И ВЫБОР 
	//|			КОГДА Участник ССЫЛКА Справочник.Партнеры 
	//|			ТОГДА Участник = &Партнер 
	//|			ИНАЧЕ Участник В (ВЫБРАТЬ Ссылка ИЗ Справочник.ГруппыПартнеров.Состав ГДЕ Партнер = &Партнер)
	//|		КОНЕЦ)
	//|	ГДЕ 
	//|		Акция <> &ПустаяАкция ) ДокументАкция
	//|	ЛЕВОЕ СОЕДИНЕНИЕ 
	//|		РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) ВалЦенАкция
	//|	ПО 
	//|		ДокументАкция.Валюта= ВалЦенАкция.Валюта
	//|
	//|	ЛЕВОЕ СОЕДИНЕНИЕ 
	//|		РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &ВалютаПеревода) ВалютаПеревода
	//|	ПО 
	//|		ИСТИНА
	//|");
	//
	//Запрос.УстановитьПараметр("Дата", 			Дата);
	//Запрос.УстановитьПараметр("Партнер",		Партнер);
	//Запрос.УстановитьПараметр("Товары",			Товары.Выгрузить(, "Номенклатура").ВыгрузитьКолонку("Номенклатура"));
	//Запрос.УстановитьПараметр("ПустаяАкция",	Документы.Акция.ПустаяСсылка());
	//Запрос.УстановитьПараметр("ВалютаПеревода", Валюта);

	//Выборка = Запрос.Выполнить().Выбрать();
	//
	//Пока Выборка.Следующий() Цикл
	//	Строки = Товары.НайтиСтроки(Новый Структура("Номенклатура", Выборка.Номенклатура));
	//	
	//	Для Каждого Строка Из Строки Цикл
	//		Строка.Акция = Выборка.Акция;
	//		Строка.Цена = Выборка.НоваяЦена;
	//		Если ЕстьДоставка Тогда
	//			Строка.ЦенаПоУмолчанию = Строка.Цена; КонецЕсли;
	//		Если Строка.Акция.ВариантРасчета = Перечисления.ВариантРасчетаЦеныПоАкции.СкидкаПоАкции Тогда
	//			Если СтруктураКолонокТовары.ЕстьПроцентРучнойСкидки 		Тогда	Строка.ПроцентРучнойСкидки = 0; 		КонецЕсли;
	//			Если СтруктураКолонокТовары.ЕстьПроцентАвтоматическойСкидки Тогда 	Строка.ПроцентАвтоматическойСкидки = 0; КонецЕсли; КонецЕсли;
	//		
	//		Если ПересчитатьСтроки Тогда ФункцииФормДокументов.РассчитатьСуммыТабличныхЧастей(Строка, СтруктураКолонокТовары); КонецЕсли;
	//		
	//КонецЦикла; КонецЦикла;
			
КонецФункции
Процедура ПересчитатьАкциюДляТоваров_ст(Партнер, ТипЦен, Товары, СтруктураКолонокТовары, Валюта = Неопределено, ПересчитатьСтроки = Истина, Дата = Неопределено, ЕстьДоставка = Ложь) Экспорт
	
	//// очисть старые акции
	//времТовары = Товары.Выгрузить();
	//времТовары.ЗаполнитьЗначения(0, "ВариантРасчета");
	//времТовары.ЗаполнитьЗначения(Неопределено, "Акция");
	//Товары.Загрузить(времТовары);
	//
	//Если Дата = Неопределено Тогда
	//	Дата = ТекущаяДата(); КонецЕсли;

	//Если Валюта = Неопределено Тогда
	//	Валюта = ОбщиеФункции.ПолучитьЗначениеКонстантыВОбласти("ВалютаУправленческогоУчета"); КонецЕсли;
	//
	//Акция = Неопределено;

	//Запрос = Новый Запрос("
	//	|	ВЫБРАТЬ
	//	|       ДокументАкция.Акция 			Акция,
	//	|		ВЫБОР 
	//	|			КОГДА ДокументАкция.Акция.ВариантРасчета  = ЗНАЧЕНИЕ(Перечисление.ВариантРасчетаЦеныПоАкции.СкидкаПоАкции) 		ТОГДА 1
	//	|           КОГДА ДокументАкция.Акция.ВариантРасчета  = ЗНАЧЕНИЕ(Перечисление.ВариантРасчетаЦеныПоАкции.СкидкиСуммируются) 	ТОГДА 2
	//	|			ИНАЧЕ 0
	//	|		КОНЕЦ ВариантРасчета,
	//	|		ДокументАкция.Номенклатура		Номенклатура,
	//	|		ДокументАкция.Приоритет,
	//	| 		ДокументАкция.НоваяЦена*(ЕСТЬNULL(ВалЦенАкция.Курс, 1) * ЕСТЬNULL(ВалютаПеревода.Кратность, 1)) / (ЕСТЬNULL(ВалютаПеревода.Курс, 1) * ЕСТЬNULL(ВалЦенАкция.Кратность, 1)) НоваяЦена
	//	|	ИЗ
	//	|	(	ВЫБРАТЬ 
	//	|			Акция, Номенклатура, НоваяЦена, Валюта, 1 Приоритет
	//	|		ИЗ	
	//	|			РегистрСведений.Акция.СрезПоследних(&Дата1, Номенклатура В (&Товары) И ТипЦен = &ТипЦен)  
	//	|			ГДЕ Акция <> &ПустаяАкция
	//	|	
	//	|		ОБЪЕДИНИТЬ ВСЕ
	//	|		
	//	|		ВЫБРАТЬ 
	//	|			Акция, Номенклатура, НоваяЦена, Валюта, 2 Приоритет
	//    |       ИЗ
	//	|			РегистрСведений.УчастникиАкции.СрезПоследних(&Дата1, Номенклатура В (&Товары) И 
	//	|						ВЫБОР 
	//	|						КОГДА Участник ССЫЛКА Справочник.Партнеры 
	//	|						ТОГДА Участник = &Партнер 
	//	|						ИНАЧЕ Участник В (ВЫБРАТЬ Ссылка ИЗ Справочник.ГруппыПартнеров.Состав ГДЕ Партнер = &Партнер) КОНЕЦ) 
	//	|			ГДЕ Акция <> &ПустаяАкция
	//	|	
	//	|
	//	|   ) ДокументАкция
	//	|
	//	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	//	|		РегистрСведений.КурсыВалют.СрезПоследних(&Дата1, ) ВалЦенАкция
	//	|	ПО 
	//	|		ДокументАкция.Валюта= ВалЦенАкция.Валюта
	//	|   
	//	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	//	|		РегистрСведений.КурсыВалют.СрезПоследних(&Дата1, Валюта = &ВалютаПеревода) ВалютаПеревода
	//	|	ПО 
	//	|		ИСТИНА
	//	|
	//	|
	//	|");
	//
	//Запрос.УстановитьПараметр("Дата1", 			Дата);
	//Запрос.УстановитьПараметр("Партнер",		Партнер);
	//Запрос.УстановитьПараметр("ТипЦен",			ТипЦен);
	//Запрос.УстановитьПараметр("Товары",			времТовары.ВыгрузитьКолонку("Номенклатура"));
	//Запрос.УстановитьПараметр("ПустаяАкция",	Документы.Акция.ПустаяСсылка());
	//Запрос.УстановитьПараметр("ВалютаПеревода", Валюта);

	//Акции = Запрос.Выполнить().Выгрузить();
	//Если НЕ Акции.Количество() Тогда Возврат; КонецЕсли;
	//
	//Для Каждого Строка ИЗ Товары Цикл
	//	Строки = Акции.НайтиСтроки(Новый Структура("Номенклатура", Строка.Номенклатура));	
	//	// если для товара нашлась действующая акция
	//	Если Строки.Количество() Тогда
	//		Приоритет = 0;
	//		// выбираем акцию с наивысшим приоритетом
	//		Для Каждого АкцияТовара Из Строки Цикл
	//			Если АкцияТовара.Приоритет > Приоритет Тогда
	//				Строка.Акция 			= АкцияТовара.Акция;
	//				Строка.ВариантРасчета	= АкцияТовара.ВариантРасчета; 
	//				Строка.Цена				= АкцияТовара.НоваяЦена;
	//				
	//				Если ЕстьДоставка Тогда Строка.ЦенаПоУмолчанию = Строка.Цена; КонецЕсли;
	//			
	//				// #ВариантРасчета
	//				Если ФункцииФормДокументов.СкидкаТолькоПоАкции(Строка) Тогда
	//					Если СтруктураКолонокТовары.ЕстьПроцентРучнойСкидки 		Тогда	Строка.ПроцентРучнойСкидки = 0; 		КонецЕсли;
	//					Если СтруктураКолонокТовары.ЕстьПроцентАвтоматическойСкидки Тогда 	Строка.ПроцентАвтоматическойСкидки = 0; КонецЕсли; 
	//				КонецЕсли;
	//				
	//				Если ПересчитатьСтроки Тогда ФункцииФормДокументов.РассчитатьСуммыТабличныхЧастей(Строка, СтруктураКолонокТовары); КонецЕсли;
	//					
	//				Приоритет = АкцияТовара.Приоритет КонецЕсли; 
	//		КонецЦикла; 
	//	Иначе
	//		Строка.Акция = Неопределено;
	//		Строка.ВариантРасчета = 0;
	//	КонецЕсли; КонецЦикла;
	
КонецПроцедуры
Процедура ПересчитатьАкциюДляТоваров(Контрагент, ТипЦен, Товары, СтруктураКолонокТовары, Валюта = Неопределено, ПересчитатьСтроки = Истина, Дата = Неопределено, ЕстьДоставка = Ложь) Экспорт
	
	// очисть старые акции
	времТовары = Товары.Выгрузить();
	времТовары.ЗаполнитьЗначения(0, "ВариантРасчета");
	//времТовары.ЗаполнитьЗначения(Неопределено, "Акция");
	Товары.Загрузить(времТовары);
	
	Для Каждого Строка Из Товары Цикл
		Если ЗначениеЗаполнено(Строка.Акция) Тогда
			//ФункцииФормДокументов.РассчитатьСуммыТабличныхЧастей(Строка, СтруктураКолонокТовары,,, Истина); КонецЕсли; КонецЦикла;
			ФункцииФормДокументов.РассчитатьСуммыСтрокиОтЦены(Строка, СтруктураКолонокТовары); КонецЕсли; КонецЦикла;
	
	Если Дата = Неопределено Тогда
		Дата = ТекущаяДата(); КонецЕсли;

	Если Валюта = Неопределено Тогда
		Валюта = ОбщиеФункции.ПолучитьЗначениеКонстантыВОбласти("ВалютаУправленческогоУчета"); КонецЕсли;
	
	Акция = Неопределено;

	Запрос = Новый Запрос("
		|	ВЫБРАТЬ
		|       ДокументАкция.Акция 			Акция,
		|		ВЫБОР 
		|			КОГДА ДокументАкция.Акция.ВариантРасчета  = ЗНАЧЕНИЕ(Перечисление.ВариантРасчетаЦеныПоАкции.СкидкаПоАкции) 		ТОГДА 1
		|           КОГДА ДокументАкция.Акция.ВариантРасчета  = ЗНАЧЕНИЕ(Перечисление.ВариантРасчетаЦеныПоАкции.СкидкиСуммируются) 	ТОГДА 2
		|			ИНАЧЕ 0
		|		КОНЕЦ ВариантРасчета,
		|		ДокументАкция.Номенклатура		Номенклатура,
		| 		ДокументАкция.НоваяЦена*(ЕСТЬNULL(ВалЦенАкция.Курс, 1) * ЕСТЬNULL(ВалютаПеревода.Кратность, 1)) / (ЕСТЬNULL(ВалютаПеревода.Курс, 1) * ЕСТЬNULL(ВалЦенАкция.Кратность, 1)) НоваяЦена
		|	ИЗ
		|	(	ВЫБРАТЬ 
		|			ЕСТЬNULL(АкцПартнера.Акция, Акц.Акция) 			Акция,
		|			ЕСТЬNULL(АкцПартнера.Номенклатура, 	Акц.Номенклатура) 	Номенклатура,
		|			ЕСТЬNULL(АкцПартнера.НоваяЦена, 	Акц.НоваяЦена) 		НоваяЦена,
		|			ЕСТЬNULL(АкцПартнера.Валюта, 		Акц.Валюта) 		Валюта
		|		ИЗ	
		|			(ВЫБРАТЬ Акция, Номенклатура, НоваяЦена, Валюта
		|			ИЗ
		|			РегистрСведений.Акция.СрезПоследних(&Дата1, Номенклатура В (&Товары) И ТипЦен = &ТипЦен)
		|			ГДЕ Акция <> &ПустаяАкция)  Акц 
		|	
		|			ПОЛНОЕ СОЕДИНЕНИЕ
		|			(ВЫБРАТЬ Акция, Номенклатура, НоваяЦена, Валюта
		|			ИЗ
		|			РегистрСведений.УчастникиАкции.СрезПоследних(&Дата1, Номенклатура В (&Товары) И 
		|						ВЫБОР 
		|						КОГДА Участник ССЫЛКА Справочник.Контрагенты 
		|						ТОГДА Участник = &Контрагент 
		|						ИНАЧЕ Участник В (ВЫБРАТЬ Ссылка ИЗ Справочник.ГруппыПартнеров.Состав ГДЕ Контрагент = &Контрагент) КОНЕЦ) 
		|			ГДЕ Акция <> &ПустаяАкция
		|			)
		|			АкцПартнера 
		|
		|			ПО Акц.Номенклатура = АкцПартнера.Номенклатура
		|	
		|   ) ДокументАкция
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ 
		|		РегистрСведений.КурсыВалют.СрезПоследних(&Дата1, ) ВалЦенАкция
		|	ПО 
		|		ДокументАкция.Валюта= ВалЦенАкция.Валюта
		|   
		|	ЛЕВОЕ СОЕДИНЕНИЕ 
		|		РегистрСведений.КурсыВалют.СрезПоследних(&Дата1, Валюта = &ВалютаПеревода) ВалютаПеревода
		|	ПО 
		|		ИСТИНА
		|
		|");
	
	Запрос.УстановитьПараметр("Дата1", 			Дата);
	Запрос.УстановитьПараметр("Контрагент",		Контрагент);
	Запрос.УстановитьПараметр("ТипЦен",			ТипЦен);
	Запрос.УстановитьПараметр("Товары",			времТовары.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("ПустаяАкция",	Документы.Акция.ПустаяСсылка());
	Запрос.УстановитьПараметр("ВалютаПеревода", Валюта);

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Строки = Товары.НайтиСтроки(Новый Структура("Номенклатура", Выборка.Номенклатура));	
		
		Для Каждого Строка ИЗ Строки Цикл
			
			Строка.Акция 			= Выборка.Акция;
			Строка.ВариантРасчета	= Выборка.ВариантРасчета; 
			Строка.Цена				= Выборка.НоваяЦена;
					
			Если ЕстьДоставка Тогда Строка.ЦенаПоУмолчанию = Строка.Цена; КонецЕсли;
			    //учтем доставку
				Если ЕстьДоставка  Тогда
					СтоимостьДоставки	= ?(Строка.Количество <>0, Строка.Доставка/Строка.Количество, 0);
					Если СтоимостьДоставки - Окр(СтоимостьДоставки, 2) <> 0 Тогда Строка.Доставка = 0; СтоимостьДоставки = 0; Сообщить("Невозможно включить доставку для текущей позиции."); КонецЕсли;
					Строка.Цена   = Строка.Цена     + СтоимостьДоставки;
				КонецЕсли;

				
			// #ВариантРасчета
			Если ФункцииФормДокументов.СкидкаТолькоПоАкции(Строка.Акция, Выборка.ВариантРасчета) Тогда
				Если СтруктураКолонокТовары.ЕстьПроцентРучнойСкидки 		Тогда	Строка.ПроцентРучнойСкидки = 0; 		КонецЕсли;
				Если СтруктураКолонокТовары.ЕстьПроцентАвтоматическойСкидки Тогда 	Строка.ПроцентАвтоматическойСкидки = 0; КонецЕсли; 
			КонецЕсли;
					
			//Если ПересчитатьСтроки Тогда ФункцииФормДокументов.РассчитатьСуммыТабличныхЧастей(Строка, СтруктураКолонокТовары); КонецЕсли;
			Если ПересчитатьСтроки Тогда ФункцииФормДокументов.РассчитатьСуммыСтрокиОтЦены(Строка, СтруктураКолонокТовары); КонецЕсли;
	     КонецЦикла; КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьЦену_ст(Номенклатура, ТипЦен, Валюта = Неопределено, Упаковка = Неопределено, Округлять = Истина, СУчетомСкидки = Истина, Контрагент = Неопределено, Дата = Неопределено, ВВалютеУпрУчета = Ложь, СУчетомАкции = Ложь, Акция = Неопределено) Экспорт
	
	// Если поле Акция заполнено, то цена будет браться именно по этой акции
		
	Если Дата = Неопределено Тогда
		Дата = ТекущаяДата();
	КонецЕсли;
	
	Если Валюта = Неопределено Тогда
		Валюта = ТипЦен.Валюта;
	КонецЕсли;
	
	Если ВВалютеУпрУчета Тогда
		Валюта = ОбщиеФункции.ПолучитьЗначениеКонстантыВОбласти("ВалютаУправленческогоУчета");
	КонецЕсли;
	
	ЦенаВключаетНДС = ТипЦен.ЦенаВключаетНДС;	
	
	Запрос = Новый Запрос("
	|		ВЫБРАТЬ
	|			Цены.Упаковка КАК Упаковка,
	|			Цены.Цена * (ЕСТЬNULL(ВалЦен.Курс, 1) * ЕСТЬNULL(ВалютаПеревода.Кратность, 1)) / (ЕСТЬNULL(ВалютаПеревода.Курс, 1) * ЕСТЬNULL(ВалЦен.Кратность, 1)) КАК Цена,        
	| 			Цены.ЦенаПоАкции*(ЕСТЬNULL(ВалЦенАкция.Курс, 1) * ЕСТЬNULL(ВалютаПеревода.Кратность, 1)) / (ЕСТЬNULL(ВалютаПеревода.Курс, 1) * ЕСТЬNULL(ВалЦенАкция.Кратность, 1)) ЦенаПоАкции,
	|			Цены.ВариантРасчета ВариантРасчета
	|		ИЗ
	|			(   ВЫБРАТЬ ЦеныНоменклатуры.Цена Цена,
	|						ЦеныНоменклатуры.Валюта Валюта,
	|						ЦеныНоменклатуры.Упаковка Упаковка,
	|						ЕСТЬNULL(АкцияПартнер.НоваяЦена, ЕСТЬNULL(АкцияТипЦен.НоваяЦена, 0)) ЦенаПоАкции, 
	|						ЕСТЬNULL(АкцияПартнер.Валюта, ЕСТЬNULL(АкцияТипЦен.Валюта, Неопределено)) ВалютаАкции,
	|						ЕСТЬNULL(АкцияПартнер.ВариантРасчета, ЕСТЬNULL(АкцияТипЦен.ВариантРасчета, Неопределено)) ВариантРасчета
	|				
	|				ИЗ
	|					РегистрСведений.ЦеныНоменклатуры.СрезПоследних(" + ?(Дата = Неопределено, "","&Дата1") + ", ТипЦен = &ТипЦен И Номенклатура = &Ссылка" + ?(Упаковка = Неопределено, ")", " И Упаковка = &Упаковка)")  + " ЦеныНоменклатуры
    |
	//			посмотрим есть ли акция, не партнерская для данного товара и типацен
	
	|               ЛЕВОЕ СОЕДИНЕНИЕ
	|					(	ВЫБРАТЬ 
	|							Упаковка, НоваяЦена, ВариантРасчета, Валюта  
	|						ИЗ	
	|							РегистрСведений.Акция.СрезПоследних(" + ?(Дата = Неопределено, "","&Дата1") + ", Номенклатура = &Ссылка И ТипЦен = &ТипЦен И Контрагент = &ПустойКонтрагент)  
	|						ГДЕ " + ?(Акция = Неопределено, "Акция <> &ПустаяАкция", "Акция = &Акция") + " И ВариантСкидки = &ВариантСкидки 
	|					) АкцияТипЦен
	|		
	|				ПО ЦеныНоменклатуры.Упаковка = АкцияТипЦен.Упаковка
	
	//			проверим есть ли партнерская акция, если есть возьмем ее
	
	|				ЛЕВОЕ СОЕДИНЕНИЕ
	|					(	ВЫБРАТЬ 
	|							Упаковка, НоваяЦена, ВариантРасчета, Валюта
	|						ИЗ 
	|							РегистрСведений.Акция.СрезПоследних(" + ?(Дата = Неопределено, "","&Дата1") + ", Номенклатура = &Ссылка И ТипЦен = &ТипЦен И Контрагент = &Контрагент)  
	|						ГДЕ " + ?(Акция = Неопределено, "Акция <> &ПустаяАкция", "Акция = &Акция") + " И ВариантСкидки = &ВариантСкидки
	|					) АкцияПартнер
	|	
	|				ПО ЦеныНоменклатуры.Упаковка = АкцияПартнер.Упаковка
	|
 	|
	|           ) Цены
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.КурсыВалют.СрезПоследних(" + ?(Дата = Неопределено, "","&Дата1") + ", ) ВалЦен
	|		ПО 
	|			Цены.Валюта = ВалЦен.Валюта
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.КурсыВалют.СрезПоследних(" + ?(Дата = Неопределено, "","&Дата1") + ", ) ВалЦенАкция
	|		ПО 
	|			Цены.ВалютаАкции <> Неопределено И Цены.ВалютаАкции = ВалЦенАкция.Валюта
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.КурсыВалют.СрезПоследних(" + ?(Дата = Неопределено, "","&Дата1") + ", Валюта = &ВалютаПеревода) ВалютаПеревода
	|		ПО 
	|			ИСТИНА
	|	
	|
	|	УПОРЯДОЧИТЬ ПО Упаковка	
	|");		

	// получается из валюты установки цен в выбранную валюту
	
	Запрос.УстановитьПараметр("Дата1", 			Дата);
	Запрос.УстановитьПараметр("ТипЦен", 		ТипЦен);
	Запрос.УстановитьПараметр("Ссылка", 		Номенклатура);
	Запрос.УстановитьПараметр("ВалютаПеревода", 	Валюта);
	Запрос.УстановитьПараметр("Упаковка", 		Упаковка);
	Запрос.УстановитьПараметр("Акция", 			Акция);
	Запрос.УстановитьПараметр("ПустаяАкция", 	Документы.Акция.ПустаяСсылка());
	Запрос.УстановитьПараметр("ВариантСкидки",  Перечисления.ВариантСкидки.Цена);
	Запрос.УстановитьПараметр("ПустойКонтрагент",  Справочники.Контрагенты.ПустаяСсылка());
	Запрос.УстановитьПараметр("Контрагент",  		Контрагент);
	
	Цена = 0;

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Цена = Выборка.Цена;
		
		Если СУчетомАкции И Выборка.ЦенаПоАкции > 0 Тогда
			
			Расчет = Выборка.ВариантРасчета;
			Если Расчет = Перечисления.ВариантРасчетаЦеныПоАкции.Авто Тогда
				Цена = Мин(Цена, Выборка.ЦенаПоАкции);
			Иначе
				Цена = Выборка.ЦенаПоАкции;
			КонецЕсли;
			
		КонецЕсли;			 
		
		//// уменьшаем цену на величину включенной в нее ндс
		//Если СтавкаНДС <> Неопределено Тогда
		//	
		//   Цена = ЦенаСУчетомНДС(Цена, СтавкаНДС, УчитыватьНДС, СуммаВлючаетНДС, ЦенаВключаетНДС);

		//КонецЕсли;
		
		// вычитаем сумму скидки, накопленной выбранным контрагентом
		Если СУчетомСкидки И ЗначениеЗаполнено(Контрагент) Тогда
			
		//	Цена = Цена * ПолучитьПроцентАвтоматическойСкидки(Номенклатура, Контрагент) / 100;
			
		КонецЕсли;
				
		// округляем по правилам округления для выбранного типа цен
		Если Округлять Тогда
			Цена = Окр(Цена, ТипЦен.ТочностьОкругления, Число(ТипЦен.ОкруглятьВБольшуюСторону));
		Иначе
			Цена = Цел(Цена);
		КонецЕсли;
		
  	КонецЕсли;

	Возврат Цена;
	
КонецФункции
Функция ПолучитьЦену(Номенклатура, ТипЦен, Знач Валюта = Неопределено, Упаковка = Неопределено, Контрагент = Неопределено, СУчетомАкции = Ложь, Акция = Неопределено, ЦенаПоАкцииОтдельно = Ложь, Округлять = Истина, СУчетомСкидки = Истина, ОставленоДляСовместимости = Неопределено, Дата = Неопределено, ВВалютеУпрУчета = Ложь, ТипЦенВключаетНДС = Неопределено) Экспорт
	
	// ТипЦенВключаетНДС - сюда функция вернет булево, включает тип цен НДС или нет
	
	ТипЦенВключаетНДС = ТипЦен.ЦенаВключаетНДС;
	
	Валюта = ?(ВВалютеУпрУчета, ОбщиеФункции.ПолучитьЗначениеКонстантыВОбласти("ВалютаУправленческогоУчета"), 
								?(Валюта = Неопределено, ТипЦен.Валюта, Валюта)); 
	
	//ЦенаВключаетНДС = ТипЦен.ЦенаВключаетНДС;	
	
	// посчитаем цену в выбранной валюте
	
	ТекстЗапроса = "	
	|		ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|			ЦеныНоменклатуры.Упаковка КАК Упаковка,
	|			ЦеныНоменклатуры.Цена * (ЕСТЬNULL(ВалЦен.Курс, 1) * ЕСТЬNULL(ВалютаПеревода.Кратность, 1)) / (ЕСТЬNULL(ВалютаПеревода.Курс, 1) * ЕСТЬNULL(ВалЦен.Кратность, 1)) КАК Цена        
	|		ИЗ
	|			РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата1, ТипЦен = &ТипЦен И Номенклатура = &Ссылка" + ?(Упаковка = Неопределено, ")", " И Упаковка = &Упаковка)")  + " ЦеныНоменклатуры
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.КурсыВалют.СрезПоследних(&Дата1, ) ВалЦен
	|		ПО 
	|			ЦеныНоменклатуры.Валюта = ВалЦен.Валюта
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.КурсыВалют.СрезПоследних(&Дата1, Валюта = &ВалютаПеревода) ВалютаПеревода
	|		ПО 
	|			ИСТИНА
	|	УПОРЯДОЧИТЬ ПО Упаковка
	|";
	
	Если СУчетомАкции Тогда
		
		// найдем акцию для выбранного товара: если акция есть для партнера, выберем ее, иначе проверим есть ли акция для типа цен
		
		ТекстЗапроса = ТекстЗапроса + ";
		|		ВЫБРАТЬ ПЕРВЫЕ 1
		|           ДокументАкция.Акция Акция,
		|			ДокументАкция.Приоритет,
		| 			ДокументАкция.НоваяЦена*(ЕСТЬNULL(ВалЦенАкция.Курс, 1) * ЕСТЬNULL(ВалютаПеревода.Кратность, 1)) / (ЕСТЬNULL(ВалютаПеревода.Курс, 1) * ЕСТЬNULL(ВалЦенАкция.Кратность, 1)) ЦенаПоАкции
		|		ИЗ
		|		(	ВЫБРАТЬ 
		|				Акция, Номенклатура, НоваяЦена, ВариантРасчета, Валюта, 1 Приоритет
		|			ИЗ	
		|				РегистрСведений.Акция.СрезПоследних(&Дата1, Номенклатура = &Ссылка И ТипЦен = &ТипЦен)  
		|				ГДЕ " + ?(Акция = Неопределено ИЛИ Акция.Пустая(), "Акция <> &ПустаяАкция", "Акция = &Акция") + " И ВариантСкидки = &ВариантСкидки
		|		
		|			ОБЪЕДИНИТЬ ВСЕ
		|
		|			ВЫБРАТЬ 
		|				Акция, Номенклатура, НоваяЦена, Неопределено ВариантРасчета, Валюта, 0 Приоритет
		|			ИЗ	
		|				РегистрСведений.УчастникиАкции.СрезПоследних(&Дата1, Номенклатура = &Ссылка И 
		|							ВЫБОР 
		|							КОГДА Участник ССЫЛКА Справочник.Контрагенты 
		|							ТОГДА Участник = &Контрагент 
		|							ИНАЧЕ Участник В (ВЫБРАТЬ Ссылка ИЗ Справочник.ГруппыПартнеров.Состав ГДЕ Контрагент = &Контрагент) КОНЕЦ) 
		//|					    (Участник = &Партнер ИЛИ Участник В (ВЫБРАТЬ Ссылка ИЗ Справочник.ГруппыПартнеров.Состав ГДЕ Партнер = &Партнер)))
		|			ГДЕ " + ?(Акция = Неопределено ИЛИ Акция.Пустая(), "Акция <> &ПустаяАкция", "Акция = &Акция") + " 
		|		
		|   	) ДокументАкция
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ 
		|			РегистрСведений.КурсыВалют.СрезПоследних(&Дата1, ) ВалЦенАкция
		|		ПО 
		|			ДокументАкция.Валюта= ВалЦенАкция.Валюта
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ 
		|			РегистрСведений.КурсыВалют.СрезПоследних(&Дата1, Валюта = &ВалютаПеревода) ВалютаПеревода
		|		ПО 
		|			ИСТИНА
		|	УПОРЯДОЧИТЬ ПО Приоритет Возр 
		|
		|"; КонецЕсли;
		
	
	Запрос = Новый Запрос(ТекстЗапроса);		
	
	Запрос.УстановитьПараметр("Дата1", 			?(Дата = Неопределено, ТекущаяДата(), Дата));
	Запрос.УстановитьПараметр("ТипЦен", 		ТипЦен);
	Запрос.УстановитьПараметр("Ссылка", 		Номенклатура);
	Запрос.УстановитьПараметр("ВалютаПеревода", Валюта);
	Запрос.УстановитьПараметр("Упаковка", 		Упаковка);
	Запрос.УстановитьПараметр("Акция", 			Акция);
	Запрос.УстановитьПараметр("ПустаяАкция", 	Документы.Акция.ПустаяСсылка());
	Запрос.УстановитьПараметр("ВариантСкидки",  Перечисления.ВариантСкидки.Цена);
	//Запрос.УстановитьПараметр("ПустойПартнер",  Справочники.Партнеры.ПустаяСсылка());
	//Запрос.УстановитьПараметр("Партнер",  		Партнер);
	Запрос.УстановитьПараметр("Контрагент",  		Контрагент);
	
	Цена = 0;
	ЦенаУстановлена = Ложь;
	ЦенаПоАкции = 0;
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Если СУчетомАкции Тогда
		ВыборкаАкция = РезультатЗапроса[1].Выбрать();
		
		Если ВыборкаАкция.Следующий() Тогда ЦенаУстановлена = Истина;
			Акция 	= ВыборкаАкция.Акция;
			// т.к. по акции цену можно установить только за единицу товара, рассчитаем цену за упаковку сами
			Если ЦенаПоАкцииОтдельно Тогда
				ЦенаПоАкции = ВыборкаАкция.ЦенаПоАкции * ?(Упаковка = Неопределено ИЛИ Упаковка.Пустая(), 1, Упаковка.Коэффициент); 			
			Иначе
				Цена 	= ВыборкаАкция.ЦенаПоАкции * ?(Упаковка = Неопределено ИЛИ Упаковка.Пустая(), 1, Упаковка.Коэффициент); 
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;			 
	
	Если НЕ ЦенаУстановлена ИЛИ ЦенаПоАкцииОтдельно Тогда
		Выборка = РезультатЗапроса[0].Выбрать();
		
		Если Выборка.Следующий() Тогда
		 	Цена = Выборка.Цена;
		
			// берем акционную цену
			
			// уменьшаем цену на величину включенной в нее ндс
			
			//Если СтавкаНДС <> Неопределено Тогда
			//   	Цена = ЦенаСУчетомНДС(Цена, СтавкаНДС, УчитыватьНДС, СуммаВлючаетНДС, ЦенаВключаетНДС);
			//КонецЕсли;
			
			// вычитаем сумму скидки, накопленной выбранным контрагентом
			
			//Если СУчетомСкидки И ЗначениеЗаполнено(Контрагент) Тогда
			//		Цена = Цена * ПолучитьПроцентАвтоматическойСкидки(Номенклатура, Контрагент) / 100;
			//КонецЕсли;
					
			// округляем по правилам округления для выбранного типа цен
		
			Цена = ?(Округлять, Окр(Цена, ТипЦен.ТочностьОкругления, Число(ТипЦен.ОкруглятьВБольшуюСторону)), Цел(Цена));
				
  	КонецЕсли; КонецЕсли;
	Если ЦенаПоАкцииОтдельно Тогда
		Возврат Новый Структура("Цена, ЦенаПоАкции", Цена, ЦенаПоАкции);
	Иначе
		Возврат Цена;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьДисконтнуюКартуПарнера(Контрагент) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ Ссылка Из Справочник.ИнформационныеКарты ГДЕ ВладелецКарты = &Контрагент И НЕ ПометкаУдаления");
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Справочники.ИнформационныеКарты.ПустаяСсылка();
КонецФункции

// ДОПОЛНИТЕЛЬНЫЕ РЕКВИЗИТЫ

Функция УстановитьПараметрыРодителейЗапроса(Запрос, НоменклатураСсылка, ТекРодитель = 0)
	
	Родитель = НоменклатураСсылка.Родитель;
	
	Если Родитель.Пустая() Тогда
		
		Возврат ТекРодитель;
		
	Иначе
		
		ТекРодитель = ТекРодитель + 1;
		Запрос.УстановитьПараметр("Родитель" + Формат(ТекРодитель,"ЧГ=0"), Родитель);
		
		Возврат УстановитьПараметрыРодителейЗапроса(Запрос, НоменклатураСсылка.Родитель, ТекРодитель);
		
	КонецЕсли;
	
КонецФункции
Функция ПолучитьДополнительныеРеквизитыНоменклатуры_Ст(НоменклатураСсылка, СвойствоСсылка = Неопределено) Экспорт
	
	//// Возвращает таблицу значений с заполненными свойствами номенклатуры
	//// можно делать только для одо свойства
	//
	//
	//// Создадим таблицу возврата
	//
	//ТаблицаСвойств = Новый ТаблицаЗначений;
	//ТаблицаСвойств.Колонки.Добавить("Свойство", 	Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыНоменклатуры"));
	//ТаблицаСвойств.Колонки.Добавить("Значение");
	//ТаблицаСвойств.Колонки.Добавить("Родитель", 	Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	//ТаблицаСвойств.Колонки.Добавить("Номер", 		Новый ОписаниеТипов("Строка"));
	//ТаблицаСвойств.Колонки.Добавить("ТипЗначения",	Новый ОписаниеТипов("ОписаниеТипов"));
	//ТаблицаСвойств.Колонки.Добавить("Наследовать",	Новый ОписаниеТипов("Булево"));
	//ТаблицаСвойств.Колонки.Добавить("Записывать",	Новый ОписаниеТипов("Булево"));
	//
	//// Сформируем запрос
	//
	//Запрос 			= Новый Запрос;
	//Запрос.УстановитьПараметр("Ссылка", 		НоменклатураСсылка);
	//Запрос.УстановитьПараметр("ПустойРодитель", Справочники.Номенклатура.ПустаяСсылка());
	//
	//Если СвойствоСсылка <> Неопределено Тогда
	//	Запрос.УстановитьПараметр("Свойство", СвойствоСсылка);
	//КонецЕсли;
	//	
	//КолРодителей = УстановитьПараметрыРодителейЗапроса(Запрос, НоменклатураСсылка);
	//
	//Текст = "
	//|ВЫБРАТЬ 
	//|	Свойство,
	//|	Значение,
	//|	ТипЗначения,
	//|	Наследовать,
	//|	Истина КАК Записывать,
	//|	&ПустойРодитель КАК Родитель
	//|ИЗ
	//|	РегистрСведений.ЗначенияДополнительныхРеквизитовНоменклатуры КАК Рег
	//|
	//|ЛЕВОЕ СОЕДИНЕНИЕ
	//|	ПланВидовХарактеристик.ДополнительныеРеквизитыНоменклатуры КАК План
	//|ПО
	//|	Рег.Свойство = План.Ссылка
	//|
	//|ГДЕ
	//|	Номенклатура = &Ссылка
	//|" + ?(СвойствоСсылка = Неопределено, ""," И Рег.Свойство = &Свойство") + "
	//|";
	//
	//// Добавим родителей к запросу
	//
	//Для Ном = 1 По КолРодителей Цикл
	//	
	//	Текст = Текст + "
	//	|ОБЪЕДИНИТЬ ВСЕ
	//	|
	//	|ВЫБРАТЬ
	//	|	Свойство,
	//	|	Значение,
	//	|	ТипЗначения,
	//	|	Наследовать,
	//	|	Ложь,
	//	|	Номенклатура
	//	|ИЗ
	//	|	РегистрСведений.ЗначенияДополнительныхРеквизитовНоменклатуры КАК Рег
	//	|
	//	|ЛЕВОЕ СОЕДИНЕНИЕ
	//	|	ПланВидовХарактеристик.ДополнительныеРеквизитыНоменклатуры КАК План
	//	|ПО
	//	|	Рег.Свойство = План.Ссылка
	//	|
	//	|ГДЕ
	//	|	Наследовать = Истина И
	//	|	Номенклатура = &Родитель" + Формат(Ном,"ЧГ=0") + "
	//	|" + ?(СвойствоСсылка = Неопределено, ""," И Рег.Свойство = &Свойство") + "
	//	|";
	//	
	//КонецЦикла;
	//
	//Запрос.Текст = Текст;
	//
	//// Выполним запрос установим свойства по иерархъии снизу
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//
	//Ном = 0;
	//Пока Выборка.Следующий() Цикл Ном = Ном + 1;
	//	
	//	Если ЗначениеЗаполнено(Выборка.Свойство) Тогда
	//		
	//		Строка = ТаблицаСвойств.Найти(Выборка.Свойство, "Свойство");
	//		ЭтоНоваяСтрока 	= Строка = Неопределено;
	//		НовСтрока 		= ?(ЭтоНоваяСтрока, ТаблицаСвойств.Добавить(), Строка);
	//		
	//		Если ЭтоНоваяСтрока Тогда
	//			
	//			ЗаполнитьЗначенияСвойств(НовСтрока, Выборка);
	//			НовСтрока.Номер = Формат(Ном,"ЧГ=0");
	//			
	//		Иначе
	//		
	//			НовСтрока.Родитель = Выборка.Родитель;
	//			
	//		КонецЕсли;
	//			
	//	КонецЕсли;
	//КонецЦикла;
	//
	//// Вернем таблицу свойств
	//
	//Возврат ТаблицаСвойств;
	
КонецФункции
Функция ПолучитьДополнительныеРеквизитыНоменклатуры(НоменклатураСсылка, Язык = Неопределено) Экспорт
	
	// Возвращает таблицу значений с заполненными свойствами номенклатуры
	
	Запрос 	= Новый Запрос("ВЫБРАТЬ 	Номенклатура,
	 |   Свойство,
	 |	 Свойство.ЕдиницаИзмерения 	ЕдиницаИзмерения,
	 |	 Свойство.УчаствуетВФильтре Основной,
	 |	 Свойство.ТипЗначения       ТипЗначения,
	 |	 Представление(Свойство)	Представление,
	 |   Ид,
	 |   Значение,
	 |	 Наследовать,
	 |   Сортировка,
	 |   ОтображатьВСписке,
	 |   Владелец,
	 |	Ключевой
	 |ИЗ РегистрСведений.ЗначенияДополнительныхРеквизитовНоменклатуры ГДЕ Номенклатура = &Номенклатура УПОРЯДОЧИТЬ ПО Сортировка, Ключевой");
	Запрос.УстановитьПараметр("Номенклатура", НоменклатураСсылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции

Процедура ОбновитьДополнительныеРевизиты(Элементы, ЭтаФорма, ТаблицаСвойств, ЭтоГруппа, ИмяРодителяЭлементов = "СписокРеквизитов") Экспорт

	// Процедура добавляет/удаляет реквизиты на форме
	
	// Создадим реквизиты
	ДобавляемыеРеквизиты = Новый Массив();
	
	Для Каждого СтрРеквизит Из ТаблицаСвойств Цикл
		
		ТипЗначенияСвойства 	= СтрРеквизит.ТипЗначения;
		ИмяРеквизитаЗначение 	= "ДополнительныйРеквизитЗначение" + СтрРеквизит.Номер;
		ИмяРеквизитаСвойство 	= "Свойство" + ИмяРеквизитаЗначение;
		
		Если Элементы.Найти(ИмяРеквизитаЗначение) = Неопределено Тогда
		
			Реквизит = Новый РеквизитФормы(ИмяРеквизитаЗначение, ТипЗначенияСвойства, , СтрРеквизит.Свойство, Истина);
			ДобавляемыеРеквизиты.Добавить(Реквизит);
			
		КонецЕсли;
	КонецЦикла;
	
	Если Не ДобавляемыеРеквизиты.Количество() Тогда
		Возврат;
	КонецЕсли;
		
	ЭтаФорма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	// Создадим элементы формы
	Для Каждого СтрРеквизит Из ТаблицаСвойств Цикл
		
		ТипЗначенияСвойства 	= СтрРеквизит.ТипЗначения;
		ИмяРеквизитаЗначение 	= "ДополнительныйРеквизитЗначение" + СтрРеквизит.Номер;
		
		Если Элементы.Найти(ИмяРеквизитаЗначение) = Неопределено Тогда
			
			// Группа
			
			ЭлементГруппа = Элементы.Добавить("Группа" + ИмяРеквизитаЗначение, Тип("ГруппаФормы"), Элементы[ИмяРодителяЭлементов]);
			
			ЭлементГруппа.Вид 					= ВидГруппыФормы.ОбычнаяГруппа;
			ЭлементГруппа.Отображение			= ОтображениеОбычнойГруппы.Нет;
			ЭлементГруппа.Группировка 			= ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			ЭлементГруппа.ОтображатьЗаголовок 	= Ложь;
			
			// Элемент поля
			
			ЭлементПоле = Элементы.Добавить(ИмяРеквизитаЗначение, Тип("ПолеФормы"), ЭлементГруппа);
			
			ЭлементПоле.Вид 				= ?(ТипЗначенияСвойства.Типы().Найти(Тип("Булево")) <> Неопределено, ВидПоляФормы.ПолеФлажка, ВидПоляФормы.ПолеВвода);
			ЭлементПоле.ПутьКДанным 		= "ДополнительныйРеквизитЗначение" + СтрРеквизит.Номер;
			ЭтаФорма[ИмяРеквизитаЗначение] 	= СтрРеквизит.Значение;
			ЭлементПоле.УстановитьДействие("ПриИзменении","ПриИзмененииДополнительногоРеквизита");
			
			// Для значения свойств добавим дополнительные свойства
			
			Если ТипЗначенияСвойства = новый ОписаниеТипов("СправочникСсылка.ЗначенияДополнительныхРеквизитовНоменклатуры") Тогда
				
				Параметры = Новый массив;
				Параметры.Добавить(Новый ПараметрВыбора("Отбор.Владелец", СтрРеквизит.Свойство));
				ЭлементПоле.ПараметрыВыбора = Новый ФиксированныйМассив(Параметры);
				
			КонецЕсли;
			
			// Информация
			
			Если Элементы.ДобавитьДополнительныйРеквизит.Видимость Тогда // если не видет этой кнопки тогда не дадим позырить
				
				ЭлементИнформация = Элементы.Добавить("Декорация" + ИмяРеквизитаЗначение, Тип("ДекорацияФормы"), ЭлементГруппа);
				ЭлементИнформация.Вид = ВидДекорацииФормы.Надпись;
				ОбновитьЗначениеИнформацииПоДопРеквизитам(стрРеквизит, ЭлементИнформация, ЭтоГруппа);
				
			КонецЕсли;
																	
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ОбновитьЗначениеИнформацииПоДопРеквизитам(стрРеквизит, ЭлементИнформация, ЭтоГруппа) Экспорт

	Если ЭтоГруппа И стрРеквизит.Наследовать Тогда
					
		ЭлементИнформация.ЦветТекста	= Метаданные.ЭлементыСтиля.ЦветДляНаследниковИнформации.Значение;
		ЭлементИнформация.Заголовок 	= "Наследовать";
		ЭлементИнформация.ГиперСсылка 	= Истина;
		ЭлементИнформация.УстановитьДействие("Нажатие","ПриИзмененииНаследования");
		
		
	ИначеЕсли стрРеквизит.Записывать Тогда
		
		ЭлементИнформация.ЦветТекста 	= Метаданные.ЭлементыСтиля.ЦветНаследуемойИнформации.Значение;
		ЭлементИнформация.Заголовок 	= "Личный";
		ЭлементИнформация.ГиперСсылка 	= ЭтоГруппа;
		ЭлементИнформация.УстановитьДействие("Нажатие","ПриИзмененииНаследования");
		
	Иначе
		
		ЭлементИнформация.Заголовок 	= "Наследуемый";
		ЭлементИнформация.ЦветТекста	= Новый Цвет;
		ЭлементИнформация.ГиперСсылка 	= Ложь;
			
	КонецЕсли;
		
КонецПроцедуры

Функция УстановитьСвойстваДляОбъекта(НоменклатураСсылка, ТаблицаСвойств, Владелец)
	
	// Прочитаем набор свойст которые личные и не вошли к нам в наш список
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Табл.Ид					КАК Ид,
	|	Табл.Свойство			КАК Свойство,
	|	Табл.Значение			КАК Значение,
	//|	Табл.ЕдиницаИзмерения	КАК ЕдиницаИзмерения,
	|   Табл.Сортировка			КАК Сортировка,
	|   Табл.ОтображатьВСписке	КАК ОтображатьВСписке,
	|	Табл.Наследовать		КАК Наследовать,
	|	Табл.Владелец			КАК Владелец,
	|	Табл.Ключевой			КАК Ключевой
	|ПОМЕСТИТЬ
	|	ТаблицаСвойств
	|ИЗ
	|	&ТаблицаСвойств КАК Табл
	|" + ?(НоменклатураСсылка = Владелец, "","
	|ГДЕ
	|	Табл.Наследовать = ИСТИНА
	|") + "
	|;
	
	// ---
	
	|ВЫБРАТЬ 
	|	&Ссылка 												КАК Номенклатура,
	|   ЕСТЬNULL(Табл.Свойство, Рег.Свойство) 					КАК Свойство,
	|   ЕСТЬNULL(Табл.Ид, Рег.Ид)			 					КАК Ид,
	|   МАКСИМУМ(ЕСТЬNULL(Табл.Значение, Рег.Значение))			КАК Значение,
	|	МАКСИМУМ(ЕСТЬNULL(Табл.Ключевой, Рег.Ключевой))			КАК Ключевой,
	|   МАКСИМУМ(ЕСТЬNULL(Рег.Значение, Табл.Значение))			КАК ЗначениеРегистра,
	//|   МАКСИМУМ(ЕСТЬNULL(Табл.ЕдиницаИзмерения, Рег.Свойство.ЕдиницаИзмерения))	КАК ЕдиницаИзмерения,
	|   МАКСИМУМ(ЕСТЬNULL(Табл.Сортировка, Рег.Сортировка)) 	КАК Сортировка,
	|   МАКСИМУМ(ЕСТЬNULL(Табл.Наследовать, Рег.Наследовать)) 	КАК Наследовать,
	|   МАКСИМУМ(ЕСТЬNULL(Табл.ОтображатьВСписке, Рег.ОтображатьВСписке)) КАК ОтображатьВСписке,
	|   МАКСИМУМ(ВЫБОР КОГДА Табл.Владелец = &ПустаяНоменклатура ТОГДА &Владелец ИНАЧЕ ЕСТЬNULL(Табл.Владелец, Рег.Владелец) КОНЕЦ) КАК Владелец
	|ИЗ 
	|	(ВЫБРАТЬ * ИЗ РегистрСведений.ЗначенияДополнительныхРеквизитовНоменклатуры ГДЕ Номенклатура = &Ссылка) КАК Рег
	|
	|ПОЛНОЕ СОЕДИНЕНИЕ
	|	ТаблицаСвойств КАК Табл
	|ПО
	|	Рег.Свойство = Табл.Свойство
	|
	|ГДЕ
	|	НЕ (Табл.Свойство ЕСТЬ NULL) //18.11.2015 уберу т.к. нужно что бы наследуемые свойства можно было удалить И Рег.Владелец = &Владелец)
	|
	|СГРУППИРОВАТЬ ПО
	|   ЕСТЬNULL(Табл.Свойство, Рег.Свойство),
	|   ЕСТЬNULL(Табл.Ид, Рег.Ид)
	|");

	
	Запрос.УстановитьПараметр("ТаблицаСвойств", 	ТаблицаСвойств);
	Запрос.УстановитьПараметр("Ссылка", 			НоменклатураСсылка);
	Запрос.УстановитьПараметр("Владелец", 			Владелец);
	Запрос.УстановитьПараметр("ПустаяНоменклатура", Справочники.Номенклатура.ПустаяСсылка());
	
	Пакет 	= Запрос.ВыполнитьПакет();
	Таблица = Пакет[1].Выгрузить();
	
	// Подготовим набор
	
	Набор = РегистрыСведений.ЗначенияДополнительныхРеквизитовНоменклатуры.СоздатьНаборЗаписей();
	Набор.Отбор.Номенклатура.Установить(НоменклатураСсылка);
	Набор.Загрузить(Таблица);
	
	// Проверим пустые значения
	
	Инд = -1;
	Для Каждого Строка Из Набор ЦИкл Инд = Инд + 1;
		Если Не ЗначениеЗаполнено(Строка.Значение) Тогда
			Строка.Значение = Таблица[Инд].ЗначениеРегистра; 
		КонецЕсли;
	КонецЦикла;

	// Удалим удаленные (которых нет в таблице но есть в регистре)
	
	// Запишем
	
	Попытка
		Набор.Записать();
	Исключение
		
		стрОшибки = ОписаниеОшибки();
		ОбщиеФункции.СообщитьТекст("Ошибка при записи свойств объекта - " + НоменклатураСсылка + "
									|"+ стрОшибки);
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции
Функция УстановитьСвойстваДляОбъекта_Тормазная(НоменклатураСсылка, ТаблицаСвойств, Сортировка, Владелец, Сверху)
	
	// Создадим набор
	
	//Набор = РегистрыСведений.ЗначенияДополнительныхРеквизитовНоменклатуры.СоздатьНаборЗаписей();
	//Набор.Отбор.Объект.Установить(Ссылка);
	//Набор.Прочитать()	
	//
	//// Запомним что было
	//
	//УжеВБазе = Набор.Выгрузить();
	//
	//// Начнем
	//
	//Набор.Очистить();
	//
	//Если Сортировка Тогда
	//	
	//	// Пересчитаем строки
	//	
	//	Для Каждого Строка Из ТаблицаСвойств Цикл
	//		
	//		// Поищем такого же
	//		
	//		СтрокаТакогоВБазе 	= УжеВБазе.Найти(Строка.Свойство, "Свойство");
	//		ЕстьТакой 			= СтрокаТакогоВБазе <> Неопределено; 
	//		
	//		// Если у него своя сортировка то не трогаем
	//		
	//		
	//		текСтрока = ?(ЕстьТакой И СтрокаТакогоВБазе.Сортировка, СтрокаТакогоВБазе, Строка);
	//		
	//	КонецЦикла;
	//	
	//КонецЕсли;
	//
	//Если Сверху Тогда // свойства группы находятся впереди свойств товара
	//	
	//	
	//Иначе
	//	
	//КонецЕсли;
	
КонецФункции
Функция ПроверитьЗаполнениеДополнительныхРеквизитов(ТаблицаСвойств) Экспорт
	Возврат Истина; // временно
	Строки = ТаблицаСвойств.НайтиСтроки(Новый Структура("Основной", Истина));
	Возврат Строки.Количество() <= 6;
	
КонецФункции
Функция СохранитьДополнительныеРеквизиты(НоменклатураСсылка, ТаблицаСвойств, ПерезаписыватьПодчиненные = Ложь, стрОшибки = "") Экспорт
	
	Если НЕ ПроверитьЗаполнениеДополнительныхРеквизитов(ТаблицаСвойств) Тогда 
		стрОшибки = "Количество основных параметров номенклатуры превышает допустимое значение"; Возврат Ложь; КонецЕсли;
	
	// сохраним сортировку
	Если НоменклатураСсылка.СортировкаДопРеквизитов Тогда
		Сорт = 0;
		Для Каждого Строка Из ТаблицаСвойств Цикл Сорт = Сорт +1; Строка.Сортировка = Сорт; КонецЦикла; КонецЕсли;		
	
	// Получим объекты которым будем устанавливать свойства
	
	Если Не УстановитьСвойстваДляОбъекта(НоменклатураСсылка, ТаблицаСвойств, НоменклатураСсылка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПерезаписыватьПодчиненные Тогда
		
		// Получим только те записи которые наследуються
		КолСтрок = ТаблицаСвойств.Количество();
		Для Ном = 1 По КолСтрок Цикл
			Строка = ТаблицаСвойств[КолСтрок - Ном];
			Если Не Строка.Наследовать Тогда
				ТаблицаСвойств.Удалить(Строка);
			КонецЕсли;
		КонецЦикла;
		
		Если ТаблицаСвойств.Количество() Тогда
		
			Запрос = Новый Запрос("
			|ВЫБРАТЬ 
			|	Ссылка КАК Номенклатура
			|ИЗ 
			|	Справочник.Номенклатура КАК Спр
			|
			|ГДЕ Ссылка 
			|	В ИЕРАРХИИ(&Ссылка) И
			|	Ссылка <> &Ссылка
			|");

			Запрос.УстановитьПараметр("Ссылка", НоменклатураСсылка);
							
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Если Не УстановитьСвойстваДляОбъекта(Выборка.Номенклатура, ТаблицаСвойств, НоменклатураСсылка) Тогда
					Возврат Ложь;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции
Функция СохранитьДополнительныеРеквизиты_СложноНоПравильно(НоменклатураСсылка, ТаблицаСвойств, ПерезаписыватьПодчиненные) Экспорт
	
	// Получим объекты которым будем устанавливать свойства
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Табл.Свойство,
	|	Табл.Ид,
	|	Табл.Значение,
	|   Табл.Сортировка,
	|   Табл.ОтображатьВСписке,
	|	Табл.Наследовать
	|ПОМЕСТИТЬ
	|	ТаблицаСвойств
	|ИЗ
	|	&ТаблицаСвойств КАК Табл
	|ГДЕ
	|	Табл.Наследовать = ИСТИНА
	|;
	|ВЫБРАТЬ 
	|	Спр.Ссылка 		КАК Номенклатура,
	|   Табл.Свойство 	КАК Свойство,
	|   Табл.Ид		 	КАК Ид,
	|	
	//|	ВЫБОР 
	//|		КОГДА Табл.Наследовать ТОГДА Табл.Значение
	//|		ИНАЧЕ ЕСТЬNULL(Рег.Значение, Табл.Значение)
	//|	КОНЕЦ КАК Значение,
	//|	ВЫБОР 
	//|		КОГДА Табл.Наследовать И ЕСТЬNULL(Рег.Сортировка,0) <> 0 ТОГДА Табл.Сортировка
	//|		ИНАЧЕ ЕСТЬNULL(Рег.Сортировка, Табл.Сортировка)
	//|	КОНЕЦ КАК Сортировка,
	//|	ВЫБОР 
	//|		КОГДА Табл.Наследовать ТОГДА &Ссылка
	//|		ИНАЧЕ ЕСТЬNULL(Рег.Владелец, &Ссылка)
	//|	КОНЕЦ КАК Владелец
	|ИЗ 
	|	Справочник.Номенклатура КАК Спр
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	ТаблицаСвойств КАК Табл
	|ПО
	|	ИСТИНА
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ЗначенияДополнительныхРеквизитовНоменклатуры КАК Рег
	|ПО
	|	Рег.Номенклатура = Спр.Ссылка И
	|	Табл.Свойство = Рег.Свойство
	|
	|ГДЕ Ссылка 
	|	В ИЕРАРХИИ(&Ссылка)
	|");
				
	Запрос.УстановитьПараметр("Свойства", 	ТаблицаСвойств.ВыгрузитьКолонку("Свойство"));
	Запрос.УстановитьПараметр("Ссылка", 	НоменклатураСсылка);
					
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		
		
	КонецЦикла;
	
	
	// Сохраняет значения свойств в регистре
	
	//Набор = РегистрыСведений.ЗначенияДополнительныхРеквизитовНоменклатуры.СоздатьНаборЗаписей();
	//Набор.Отбор.Номенклатура.Установить(НоменклатураСсылка);
	//
	//Для Каждого Строка Из ТаблицаСвойств Цикл
	//	
	//	Если 	Строка.Записывать Или
	//			Строка.Родитель.Пустая() Тогда
	//		
	//		НовЗапись = Набор.Добавить();
	//		ЗаполнитьЗначенияСвойств(НовЗапись, Строка);
	//		
	//		НовЗапись.Номенклатура 	= НоменклатураСсылка;
	//		НовЗапись.Значение		= Этаформа["ДополнительныйРеквизитЗначение" + Строка.Номер];
	//		
	//	КонецЕсли;
	//КонецЦикла;
	//
	//Попытка
	//	Набор.Записать();
	//Исключение
	//	стрОшибки = ОписаниеОшибки();
	//	ОбщиеФункции.СообщитьТекст("Ошибка при записи набора дополнительных свойств номенклатуры
	//			|" + стрОшибки);
	//	Возврат Ложь;
	//КонецПопытки;
	//
	//Возврат Истина;
	
КонецФункции
Функция СохранитьДополнительныеРеквизиты_Ст(НоменклатураСсылка, ТаблицаСвойств, ЭтаФорма) Экспорт
	
	// Сохраняет значения свойств в регистре
	
	Набор = РегистрыСведений.ЗначенияДополнительныхРеквизитовНоменклатуры.СоздатьНаборЗаписей();
	Набор.Отбор.Номенклатура.Установить(НоменклатураСсылка);
	
	Для Каждого Строка Из ТаблицаСвойств Цикл
		
		Если 	Строка.Записывать Или
				Строка.Родитель.Пустая() Тогда
			
			НовЗапись = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(НовЗапись, Строка);
			
			НовЗапись.Номенклатура 	= НоменклатураСсылка;
			НовЗапись.Значение		= Этаформа["ДополнительныйРеквизитЗначение" + Строка.Номер];
			
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		Набор.Записать();
	Исключение
		стрОшибки = ОписаниеОшибки();
		ОбщиеФункции.СообщитьТекст("Ошибка при записи набора дополнительных свойств номенклатуры
				|" + стрОшибки);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьСвойства(НоменклатураСсылка) Экспорт
	
	// Возвращает свойства номенклатуры
	
	Запрос = Новый Запрос("ВЫБРАТЬ Ид, Свойство, Значение, Сортировка, ОтображатьВСписке, Наследовать, Владелец ИЗ РегистрСведений.ЗначенияДополнительныхРеквизитовНоменклатуры ГДЕ Номенклатура = &Номенклатура");
	Запрос.УстановитьПараметр("Номенклатура", НоменклатураСсылка);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// КЭШ

Функция ОбновитьКэш_ст(Ссылки = Неопределено, ТекстФильтраНоменклатуры = "", ДопПараметры = Неопределено) Экспорт
	
	// Ссылки - Справочник ссылка номенклатура,
	//			или массив в котором элементы ссылки номенклатуры
	
	Запрос = Новый Запрос;
	
	// Определим фильтр
	
	Если ПустаяСтрока(ТекстФильтраНоменклатуры) Тогда
		
		Если Ссылки = Неопределено Тогда
			ФильтрНоменклатура = "";
		
		ИначеЕсли ТипЗнч(Ссылки) = Тип("СправочникСсылка.Номенклатура") Тогда
			ФильтрНоменклатура = "#Номенклатура = &Номенклатура";
			
		ИначеЕсли ТипЗнч(Ссылки) = Тип("Массив") Тогда
			ФильтрНоменклатура = "#Номенклатура В(&Номенклатура)";
			
		Иначе
			ОбщиеФункции.СообщитьТекст("Неизвестный тип номенклатуры, при обновлении кэша номенклатуры");
			Возврат Ложь; КонецЕсли;
	Иначе
		
		// Вытащим товары из документа
		
		ФильтрНоменклатура = "#Номенклатура В(&Номенклатура)";
		
		ЗапросСписка = Новый Запрос(ТекстФильтраНоменклатуры);
		Если ДопПараметры <> Неопределено Тогда
			Для Каждого Элемент Из ДопПараметры Цикл ЗапросСписка.УстановитьПараметр(Элемент.Ключ, Элемент.Значение) КонецЦикла; КонецЕсли;
			
		Ссылки = ЗапросСписка.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура"); КонецЕсли;
		
	// Запрос
	
	Запрос.Текст = "
	
	//// Курсы валют
	//
	//|ВЫБРАТЬ 	Валюта, Курс, Кратность
	//|ПОМЕСТИТЬ	КурсыВалют
	//|ИЗ			РегистрСведений.КурсыВалют.СрезПоследних(&текДата)
	//|ИНДЕКСИРОВАТЬ ПО Валюта
	//|;
		
	// Список товаров по всем акциям
	
	|ВЫБРАТЬ	Акц.Номенклатура, Акц.Акция, Акц.ТипЦен, Акц.Валюта, МАКСИМУМ(Акц.НоваяЦена) ЦенаПоАкции, Уч.Участник
	|ПОМЕСТИТЬ	ТоварыПоАкции
	|ИЗ			РегистрСведений.Акция.СрезПоследних(&текДата, " + СтрЗаменить(ФильтрНоменклатура, "#Номенклатура", "Номенклатура") + ") Акц
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ	РегистрСведений.УчастникиАкции.СрезПоследних(&текДата, " + СтрЗаменить(ФильтрНоменклатура, "#Номенклатура", "Номенклатура") + ") Уч
	|ПО					Акц.Акция = Уч.Акция И Акц.Номенклатура = Уч.Номенклатура
	|
	|ГДЕ	Акц.Акция <> &ПустаяАкция И (Уч.Акция <> &ПустаяАкция ИЛИ Уч.Акция ЕСТЬ NULL) И ВариантСкидки = &ВариантСкидкиЦена
	|
	|СГРУППИРОВАТЬ ПО Акц.Номенклатура, Акц.Акция, Акц.ТипЦен, Акц.Валюта, Уч.Участник
	|
	|ИНДЕКСИРОВАТЬ ПО Акц.Номенклатура, Акц.ТипЦен
	|;
	
	// Основной запрос
	
	|ВЫБРАТЬ
	|	Спр.Ссылка		 								Номенклатура,
	
	|	Цены.ТипЦен 									ТипЦен,
	|	Акции.Акция 									Акция,
	|	Акции.Участник 									Участник,
	
	//|	МАКСИМУМ(ЕСТЬNULL(
	//|		Акции.ЦенаПоАкции * (ЕСТЬNULL(Цены.ТипЦен.Курс, 1) * ЕСТЬNULL(Курсы.Кратность, 1)) / (ЕСТЬNULL(Курсы.Курс, 1) * ЕСТЬNULL(Цены.ТипЦен.Курс, 1))), 
	//|		Цены.Цена * (ЕСТЬNULL(Цены.ТипЦен.Курс, 1) * ЕСТЬNULL(Курсы.Кратность, 1)) / (ЕСТЬNULL(Курсы.Курс, 1) * ЕСТЬNULL(Цены.ТипЦен.Курс, 1))))	Цена,
	//|	МАКСИМУМ(Цены.Цена * (ЕСТЬNULL(Цены.ТипЦен.Курс, 1) * ЕСТЬNULL(Курсы.Кратность, 1)) / (ЕСТЬNULL(Курсы.Курс, 1) * ЕСТЬNULL(Цены.ТипЦен.Курс, 1))) ЦенаБезАкции,
	
	|	МАКСИМУМ(Цены.Валюта) 	Валюта,
	|	МАКСИМУМ(Акции.Валюта) 	ВалютаАкции,
	
	
	|	МАКСИМУМ(ЕСТЬNULL(Акции.ЦенаПоАкции, Цены.Цена))	Цена,
	|	МАКСИМУМ(ЕСТЬNULL(Цены.Цена, 0)) ЦенаБезАкции,
	
	|	Ост.Склад										Склад,
	|	МАКСИМУМ(ЕСТЬNULL(Ост.КоличествоОстаток, 0))	Остаток,
	|	МАКСИМУМ(ЕСТЬNULL(Рез.КоличествоОстаток, 0))	Резерв	
	|ПОМЕСТИТЬ
	|	Мегазапрос
	|ИЗ
	|	Справочник.Номенклатура Спр
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ	РегистрНакопления.ТоварыНаСкладах.Остатки(&текДата," + СтрЗаменить(ФильтрНоменклатура, "#Номенклатура", "Номенклатура") + ") КАК Ост
	|ПО					Спр.Ссылка = Ост.Номенклатура
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ	РегистрНакопления.ТоварыВРезерве.Остатки(&текДата," + СтрЗаменить(ФильтрНоменклатура, "#Номенклатура", "Номенклатура") + ") КАК Рез
	|ПО					Ост.Номенклатура = Рез.Номенклатура И Ост.Склад = Рез.Размещение
	|		
	|ЛЕВОЕ СОЕДИНЕНИЕ	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&текДата, Упаковка = &ПустаяУпаковка " + СтрЗаменить(ФильтрНоменклатура, "#Номенклатура", " И Номенклатура") + ") КАК Цены
	|ПО					Спр.Ссылка = Цены.Номенклатура
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ	ТоварыПоАкции Акции
	|ПО 				Цены.Номенклатура = Акции.Номенклатура И Цены.ТипЦен = Акции.ТипЦен
	|
	|ГДЕ Не Спр.ЭтоГруппа " + СтрЗаменить(ФильтрНоменклатура, "#Номенклатура", "И Спр.Ссылка") + "
	|
	|СГРУППИРОВАТЬ ПО Спр.Ссылка, Цены.ТипЦен, Акции.Акция, Акции.Участник, Ост.Склад;
	
	// Сгруппированный запрос
	
	|ВЫБРАТЬ 	Номенклатура, 
	|			0 Цена, 0 ЦенаБезАкции, NULL ТипЦен, NULL Акция, NULL Участник, NULL Валюта, NULL ВалютаАкции,
	|			Склад, МАКСИМУМ(Остаток) Остаток, МАКСИМУМ(Резерв) Резерв
	|ИЗ			Мегазапрос
	|СГРУППИРОВАТЬ ПО Номенклатура, Склад
	
	|ОБЪЕДИНИТЬ ВСЕ
	
	|ВЫБРАТЬ 	Номенклатура, 
	|			МАКСИМУМ(Цена), МАКСИМУМ(ЦенаБезАкции), ТипЦен, Акция, NULL Участник, NULL Валюта, NULL ВалютаАкции,
	|			NULL, 0, 0
	|ИЗ			Мегазапрос
	|ГДЕ		Участник = НЕОПРЕДЕЛЕНО
	|СГРУППИРОВАТЬ ПО Номенклатура, ТипЦен, Акция
	
	|ОБЪЕДИНИТЬ ВСЕ
	
	|ВЫБРАТЬ 	Номенклатура, 
	|			МАКСИМУМ(Цена), МАКСИМУМ(ЦенаБезАкции), NULL, Акция, NULL Участник, NULL Валюта, NULL ВалютаАкции,
	|			NULL, 0, 0
	|ИЗ			Мегазапрос
	|ГДЕ		Участник <> НЕОПРЕДЕЛЕНО
	|СГРУППИРОВАТЬ ПО Номенклатура, ТипЦен, Акция
	|";
	
	Запрос.УстановитьПараметр("Номенклатура", 		Ссылки);
	Запрос.УстановитьПараметр("ВариантСкидкиЦена", 	Перечисления.ВариантСкидки.Цена);
	Запрос.УстановитьПараметр("ПустаяАкция", 		Документы.Акция.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяУпаковка", 	Справочники.УпаковкиНоменклатуры.ПустаяСсылка());
	Запрос.УстановитьПараметр("текДата", 			ТекущаяДата());
	
	Если ТипЗнч(Ссылки) = Тип("Массив") Тогда
		
		ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
		ТаблицаТоваров.Индексы.Добавить("Номенклатура");
		
		Для Каждого Ссылка Из Ссылки Цикл
			
			Набор = РегистрыСведений.КэшНоменклатуры.СоздатьНаборЗаписей();
			Набор.Отбор.Номенклатура.Установить(Ссылка);
			Набор.Загрузить(КонвертацияТипов.ПолучитьТаблицуИзНайденныхСтрокТаблицыЗначений(ТаблицаТоваров, Новый Структура("Номенклатура", Ссылка)));
			Если Не ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(Набор) Тогда Возврат Ложь КонецЕсли; КонецЦикла;
		
	Иначе // Весь регистр или 1 товар
	
		Набор = РегистрыСведений.КэшНоменклатуры.СоздатьНаборЗаписей();
		Если Ссылки <> Неопределено Тогда Набор.Отбор.Номенклатура.Установить(Ссылки) КонецЕсли;
		Набор.Загрузить(Запрос.Выполнить().Выгрузить());
		
		Возврат ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(Набор); КонецЕсли;
	
	Возврат Истина;
			
КонецФункции
Функция ОбновитьКэш(Ссылки = Неопределено, ТекстФильтраНоменклатуры = "", ДопПараметры = Неопределено) Экспорт
		
	
	// Ссылки - Справочник ссылка номенклатура,
	//			или массив в котором элементы ссылки номенклатуры
	
	Запрос = Новый Запрос;
	
	// Определим фильтр
	
	Если ПустаяСтрока(ТекстФильтраНоменклатуры) Тогда
		
		Если Ссылки = Неопределено Тогда
			ФильтрНоменклатура = "";
		
		ИначеЕсли ТипЗнч(Ссылки) = Тип("СправочникСсылка.Номенклатура") Тогда
			ФильтрНоменклатура = "#Номенклатура = &Номенклатура";
			
		ИначеЕсли ТипЗнч(Ссылки) = Тип("Массив") Тогда
			ФильтрНоменклатура = "#Номенклатура В(&Номенклатура)";
			
		Иначе
			ОбщиеФункции.СообщитьТекст("Неизвестный тип номенклатуры, при обновлении кэша номенклатуры");
			Возврат Ложь; КонецЕсли;
	Иначе
		
		// Вытащим товары из документа
		
		ФильтрНоменклатура = "#Номенклатура В(&Номенклатура)";
		
		ЗапросСписка = Новый Запрос(ТекстФильтраНоменклатуры);
		Если ДопПараметры <> Неопределено Тогда
			Для Каждого Элемент Из ДопПараметры Цикл ЗапросСписка.УстановитьПараметр(Элемент.Ключ, Элемент.Значение) КонецЦикла; КонецЕсли;
			
		Ссылки = ЗапросСписка.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура"); КонецЕсли;
		
	// Запрос
	
	Запрос.Текст = "
	
	//// Курсы валют
	//
	//|ВЫБРАТЬ 	Валюта, Курс, Кратность
	//|ПОМЕСТИТЬ	КурсыВалют
	//|ИЗ			РегистрСведений.КурсыВалют.СрезПоследних(&текДата)
	//|ИНДЕКСИРОВАТЬ ПО Валюта
	//|;
		
	// Список товаров по всем акциям
	
	
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Акция,  Номенклатура, ТипЦен, НоваяЦена, Валюта
	|ПОМЕСТИТЬ ТоварыПоАкции
	|ИЗ	
	|	РегистрСведений.Акция.СрезПоследних(&текДата, 
	|	" + СтрЗаменить(ФильтрНоменклатура, "#Номенклатура", "Номенклатура") + "
	|)  
	|ГДЕ  
	|	Акция <> &ПустаяАкция И ВариантСкидки = &ВариантСкидкиЦена
	|		
	|ИНДЕКСИРОВАТЬ ПО Номенклатура, ТипЦен
	|;
	
	// Основной запрос
	
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Ост.Номенклатура 						Номенклатура,
	|	Ост.Склад								Склад,
	|	Ост.КоличествоОстаток					Остаток,
	|	ЕСТЬNULL(Рез.КоличествоОстаток, 0)		Резерв,
	|	NULL ТипЦен, NULL Валюта,  0 Цена, NULL Акция, NULL Участник,  NULL ВалютаБезАкции, 0 ЦенаБезАкции
	|ИЗ
	|	
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(&текДата,
	|		" + СтрЗаменить(ФильтрНоменклатура, "#Номенклатура", "Номенклатура") + "
	|	) КАК Ост
	| 
	|	ЛЕВОЕ СОЕДИНЕНИЕ	
	|	
	|	РегистрНакопления.ТоварыВРезерве.Остатки(&текДата,
	|		" + СтрЗаменить(ФильтрНоменклатура, "#Номенклатура", "Номенклатура") + "
	|	) КАК Рез
	|	ПО					
	|		Ост.Номенклатура = Рез.Номенклатура И Ост.Склад = Рез.Размещение
	|ОБЪЕДИНИТЬ ВСЕ	
	|
	|ВЫБРАТЬ
	|	Цен.Номенклатура Номенклатура, NULL Склад, 0 Остаток, 0 Резерв,
	|	Цен.ТипЦен								ТипЦен, 
	|	ЕСТЬNULL(Акц.Валюта, 	Цен.Валюта) 	Валюта, 
	|	ЕСТЬNULL(Акц.НоваяЦена, Цен.Цена) 		Цена, 
	|   Акц.Акция 								Акция, 
	|	NULL 									Участник,  
	|	Цен.Валюта 								ВалютаБезАкции, 
	|	Цен.Цена 								ЦенаБезАкции
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&текДата, Упаковка = &ПустаяУпаковка 
	|	" + СтрЗаменить(ФильтрНоменклатура, "#Номенклатура", " И Номенклатура") + "
	|	) Цен
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТоварыПоАкции Акц
	|		ПО 
	|		Цен.Номенклатура = Акц.Номенклатура И Цен.ТипЦен = Акц.ТипЦен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	Номенклатура, NULL Склад, 0 Остаток, 0 Резерв, NULL ТипЦен,	Валюта, 
	|	НоваяЦена Цена, Акция, Участник, NULL ВалютаБезАкции, 0 ЦенаБезАкции
	|ИЗ	
	|	РегистрСведений.УчастникиАкции.СрезПоследних(&текДата, 
	|	" + СтрЗаменить(ФильтрНоменклатура, "#Номенклатура", "Номенклатура") + "
	|)
	|ГДЕ
	|	Акция <> &ПустаяАкция 
	|";
	
	
	// Сгруппированный запрос
	
	//|ВЫБРАТЬ 	Номенклатура, 
	//|			0 Цена, 0 ЦенаБезАкции, NULL ТипЦен, NULL Акция, NULL Участник, NULL Валюта, NULL ВалютаАкции,
	//|			Склад, МАКСИМУМ(Остаток) Остаток, МАКСИМУМ(Резерв) Резерв
	//|ИЗ			Мегазапрос
	//|СГРУППИРОВАТЬ ПО Номенклатура, Склад
	//
	//|ОБЪЕДИНИТЬ ВСЕ
	//
	//|ВЫБРАТЬ 	Номенклатура, 
	//|			МАКСИМУМ(Цена), МАКСИМУМ(ЦенаБезАкции), ТипЦен, Акция, NULL Участник, NULL Валюта, NULL ВалютаАкции,
	//|			NULL, 0, 0
	//|ИЗ			Мегазапрос
	//|ГДЕ		Участник = НЕОПРЕДЕЛЕНО
	//|СГРУППИРОВАТЬ ПО Номенклатура, ТипЦен, Акция
	//
	//|ОБЪЕДИНИТЬ ВСЕ
	//
	//|ВЫБРАТЬ 	Номенклатура, 
	//|			МАКСИМУМ(Цена), МАКСИМУМ(ЦенаБезАкции), NULL, Акция, NULL Участник, NULL Валюта, NULL ВалютаАкции,
	//|			NULL, 0, 0
	//|ИЗ			Мегазапрос
	//|ГДЕ		Участник <> НЕОПРЕДЕЛЕНО
	//|СГРУППИРОВАТЬ ПО Номенклатура, ТипЦен, Акция
	//|";
	
	Запрос.УстановитьПараметр("Номенклатура", 		Ссылки);
	Запрос.УстановитьПараметр("ВариантСкидкиЦена", 	Перечисления.ВариантСкидки.Цена);
	Запрос.УстановитьПараметр("ПустаяАкция", 		Документы.Акция.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяУпаковка", 	Справочники.УпаковкиНоменклатуры.ПустаяСсылка());
	Запрос.УстановитьПараметр("текДата", 			ТекущаяДата());
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Ссылки) = Тип("Массив") Тогда
		
		ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
		ТаблицаТоваров.Индексы.Добавить("Номенклатура");
		
		Для Каждого Ссылка Из Ссылки Цикл
			
			Набор = РегистрыСведений.КэшНоменклатуры.СоздатьНаборЗаписей();
			Набор.Отбор.Номенклатура.Установить(Ссылка);
			Набор.Загрузить(КонвертацияТипов.ПолучитьТаблицуИзНайденныхСтрокТаблицыЗначений(ТаблицаТоваров, Новый Структура("Номенклатура", Ссылка)));
			Если Не ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(Набор) Тогда 
				УстановитьПривилегированныйРежим(Ложь);
				Возврат Ложь 
			КонецЕсли; 
		КонецЦикла;
		
	Иначе // Весь регистр или 1 товар
	
		Набор = РегистрыСведений.КэшНоменклатуры.СоздатьНаборЗаписей();
		Если Ссылки <> Неопределено Тогда 
			Набор.Отбор.Номенклатура.Установить(Ссылки) 
		КонецЕсли;
		Набор.Загрузить(Запрос.Выполнить().Выгрузить());
		
		Результат = ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(Набор);
		УстановитьПривилегированныйРежим(Ложь);
		
		Возврат Результат 
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	Возврат Истина;
			
КонецФункции

// ЯЧЕЕЕСТЫВЕ ОПЕРАЦИИ

Функция РасспределитьТоварПоЯчейкам(ТаблицаРасспределения, СкладЯчейки) Экспорт
	
	//Запрос = Новый Запрос("
	
КонецФункции

// ПРЕДСТАВЛЕНИЕ ТОВАРА

Процедура УстановитьТекстЦветаСтрокиТовара(Фонт, КонФонта, Остаток, Резерв)
	
	СвободныйОстаток = Остаток - Резерв;
	
	Если СвободныйОстаток < 0 Тогда
		
		Фонт = "<font color=""red"">";
		КонФонта = "</font>";
		
	ИначеЕсли 	СвободныйОстаток = 0 И
				Остаток > 0 И
				Остаток = Резерв Тогда
				
		Фонт = "<font color=""gray"">";
		КонФонта = "</font>";
				
				
	Иначе
		
		Фонт 		= "";
		КонФонта 	= "";
		
	КонецЕсли;
	
КонецПроцедуры
Функция ПолучитьТекстЦветаСтрокиТовара(Остаток, Резерв)
	
	СвободныйОстаток = Остаток - Резерв;
	
	Если СвободныйОстаток < 0 ИЛИ Резерв < 0 ИЛИ Остаток < 0 Тогда
		
		Возврат "#FF0000";
		
	ИначеЕсли 	СвободныйОстаток = 0 И
				Остаток > 0 И
				Остаток = Резерв Тогда
				
		Возврат "#C0C0C0";
				
				
	Иначе
		
		Возврат "#333333";
		
	КонецЕсли;
	
КонецФункции
Функция ПолучитьТекстHTMLОТоваре_ст(МассивСсылок, ПоследовательностьЗапросов, СЗаголовокм = Истина, ТекстЗаголовка = "") Экспорт
	
	РазделительЦифр = " | ";
	
	// ПоследовательностьЗапросов - строка через запятую в нем в нужной последовательности указаны номра запросов в котором порядке их выводить в текст
	
	НомПоследовательностей = КонвертацияТипов.ПолучитьМассивИзСтроки(ПоследовательностьЗапросов);
	
	// Сперва состряпаем пакет
	
	Текст			= "";
	ТекстЗапроса 	= "";
	СоотвПослПакета = Новый Соответствие;
	
	Инд = -1;
	Для Каждого стрНомерЗапроса ИЗ НомПоследовательностей Цикл Инд = Инд + 1;
		
		НомерЗапроса = Число(стрНомерЗапроса);
		СоотвПослПакета.Вставить(НомерЗапроса, Инд);
		
		Если НомерЗапроса = 0 Тогда   // ИНФОРМАЦИЯ ИЗ СПРАВОЧНИКА
			
			ТекстЗапроса = ТекстЗапроса + ?(ТекстЗапроса = "","",";") + "
			|ВЫБРАТЬ
			|	Наименование,
			|	НаименованиеПолное,
			|	Артикул,
			|	Код
			|ИЗ
			|	Справочник.Номенклатура
			|
			|ГДЕ
			|	Ссылка В(&Ссылки)
			|";
			
		ИначеЕсли НомерЗапроса = 1 Тогда // ИНФОРМАЦИЯ ПО ОСТАТКАМ
			
			ТекстЗапроса = ТекстЗапроса + ?(ТекстЗапроса = "","",";") + "
			|ВЫБРАТЬ 
			|	Склад КАК Склад,
			|	Склад.Код КАК КодСклада,
			|	СУММА(Ост.КоличествоОстаток) КАК Остаток,
			|	СУММА(ЕСТЬNULL(Рез.КоличествоОстаток, 0)) КАК Резерв,
			|	СУММА(Ост.КоличествоОстаток - ЕСТЬNULL(Рез.КоличествоОстаток, 0)) КАК СвободныйОстаток,
			|	СУММА(ЕСТЬNULL(Пут.КоличествоОстаток,0)) ВПути
			|ИЗ 
			|	РегистрНакопления.ТоварыНаСкладах.Остатки(,Номенклатура В(&Ссылки)) КАК Ост
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрНакопления.ТоварыВРезерве.Остатки(,Номенклатура В(&Ссылки)) КАК Рез
			|ПО
			|	Ост.Склад 			= Рез.Размещение И
			|	Ост.Номенклатура 	= Рез.Номенклатура
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрНакопления.ТоварыВПути.Остатки(,Номенклатура В(&Ссылки)) КАК Пут
			|ПО
			|	Ост.Склад 			= Пут.СкладПолучатель И
			|	Ост.Номенклатура 	= Пут.Номенклатура
			|СГРУППИРОВАТЬ ПО
			|	Склад
			|";
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Выполним
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылки", МассивСсылок);
	Результаты = Запрос.ВыполнитьПакет();
	
	// Определим количество товара
	Если МассивСсылок.Количество() = 1 Тогда
		текстТовара = "<b>" + МассивСсылок[0].Артикул + "</b> " + МассивСсылок[0].Наименование + ":";
	Иначе
		стр = ЧислоПрописью(МассивСсылок.Количество(),"ЧДЦ=0;НП-ложь;НД=ложь;","позиция, позиции, позиций, ж");
		текстТовара = СокрЛП(СтрЗаменить(стр,"00","")) + ":"
	КонецЕсли;
	
	// Выведем результат пакета
	
	Если СЗаголовокм Тогда
		Текст = "<h3>" + ?(ТекстЗаголовка = "","",текстТовара) + "</h3>";
	Иначе
		ТекстЗаголовка = текстТовара;
	КонецЕсли;
	
	Фонт 		= "";
	КонФонта 	= "";
	
	Для Каждого стрНомерЗапроса ИЗ НомПоследовательностей Цикл
		
		НомерЗапроса 	= Число(стрНомерЗапроса);
		Результат 		= Результаты[СоотвПослПакета[НомерЗапроса]];
		
		Если НомерЗапроса = 0 Тогда   // ИНФОРМАЦИЯ ИЗ СПРАВОЧНИКА
			
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
			
				Текст = Текст + ?(Текст = "","","<pr>") + "
				|" + ?(ПустаяСтрока(Выборка.НаименованиеПолное), Выборка.Наименование, Выборка.НаименованиеПолное) + 
				"<br><small>Артикул = """ + Выборка.Артикул + """ Код = """ + Выборка.Код + """</small>";
				
			КонецЦикла;
			
		ИначеЕсли НомерЗапроса = 1 Тогда // ИНФОРМАЦИЯ ПО ОСТАТКАМ
			
			Если Результат.Пустой() Тогда
				
				Текст = Текст + ?(Текст = "","","<hr>") + "
				|Нет остатков на складах.";
				
			Иначе
				
				Всего = 0; Остаток = 0; Резерв = 0; ВПути = 0;
				Текст = Текст + ?(Текст = "","","<hr>") + "<small><small><small>Код склада:  остаток" + РазделительЦифр + "резерв" + РазделительЦифр + "свободно" + РазделительЦифр + "в пути</small></small></small><ul>";
				
				Выборка = Результат.Выбрать();
				Пока Выборка.Следующий() Цикл
					
					Фонт 		= "";
					КонФонта 	= "";
					Остаток		= Остаток + Выборка.Остаток;
					Резерв 		= Резерв + Выборка.Резерв;
					ВПути		= ВПути + Выборка.ВПути;
					Всего 		= Всего + Выборка.СвободныйОстаток;
					
					УстановитьТекстЦветаСтрокиТовара(Фонт, КонФонта, Выборка.Остаток, Выборка.Резерв);
					
					//Текст = Текст + 
					//	"<li>" + Фонт + 
					//	Выборка.Склад + ": " + 
					//	Выборка.СвободныйОстаток + 
					//	?(Выборка.Резерв," (" + Выборка.Резерв + " резерв, " + Выборка.Остаток + " остаток)", "") + КонФонта + 
					//	"</li>";
					Текст = Текст + "<li>" + Фонт + Выборка.КодСклада + ": " + Выборка.Остаток + РазделительЦифр + СформироватьСсылкаHTML(Выборка.КодСклада, Выборка.Резерв) + РазделительЦифр + Выборка.СвободныйОстаток + РазделительЦифр + Выборка.ВПути + КонФонта + "</li>";
					
				КонецЦикла;
					
				Текст = Текст + "</ul>";
				
				Если Выборка.Количество() > 1 Тогда
					УстановитьТекстЦветаСтрокиТовара(Фонт, КонФонта, Остаток, Резерв);
					Текст = Текст + "<hr>" + Фонт + "<b>Всего: " + Остаток + РазделительЦифр + СформироватьСсылкаHTML("ViewReserve", Резерв) + РазделительЦифр + ВПути + РазделительЦифр + Всего + "</b>" + КонФонта;
				КонецЕсли;
				
			КонецЕсли
		КонецЕсли;
	КонецЦикла;

	Возврат "<HTML><HEAD>
			|<META content=""text/html; charset=utf-8"" http-equiv=Content-Type>
			|<META name=GENERATOR content=""MSHTML 8.00.7600.16588""></HEAD>
			|<body bgcolor=""#FCFAEB"">" + Текст;

КонецФункции
  
    
#Область HTML

Функция СформироватьШапкаКолонкиHTML(Заголовок = "", Подсказка = "", Цвет = "#333333", Выравнивание = "right")
	//Возврат "<th align=""" + Выравнивание + """" + ?(ЗначениеЗаполнено(Подсказка), " title= """ + Подсказка + """", "") + " style=""color: " + Цвет + ";padding:3px 5px;border-bottom:1px solid #CCC085; border-top:1px solid #CCC085;"">"+ Заголовок +"</th>"
	Возврат "<th align=""" + Выравнивание + """" + ?(ЗначениеЗаполнено(Подсказка), " title= """ + Подсказка + """", "") + " style=""padding:3px 5px;border-bottom:1px solid #CCC085; border-top:1px solid #CCC085;"">"+ Заголовок +"</th>"
КонецФункции
Функция СформироватьСтрокуТаблицыHTML(Значение, Выравнивание = "right", Цвет = "#333333", Подсказка = "", Выделить = Ложь, Размер = "12")
	//Возврат "<td align=""" + Выравнивание + """" + ?(ЗначениеЗаполнено(Подсказка), " title= """ + Подсказка + """", "") + " valign=""top"" style=""font-family: Verdana,Geneva,sans-serif;border-bottom:1px solid #CCC085;padding:3px 5px;font-size:"+ Размер +"px;color: " + Цвет + ";"">" +  ?(Выделить, "<b>", "") + Значение + ?(Выделить, "</b>", "") + "</td>";
	Возврат "<td align=""" + Выравнивание + """" + ?(ЗначениеЗаполнено(Подсказка), " title= """ + Подсказка + """", "") + " valign=""top"" style=""font-family: Verdana,Geneva,sans-serif;border-bottom:1px solid #CCC085;padding:3px 5px;font-size:"+ Размер +"px;"">" +  ?(Выделить, "<b>", "") + Значение + ?(Выделить, "</b>", "") + "</td>";
КонецФункции
Функция СформироватьПодвалКолонкиHTML(Значение = "", Цвет = "#333333", Размер = "12", Выделить = Ложь, допПараметр = "", Отступ = "3px 5px", Разделитель = Истина)    
	//Возврат "<td " + допПараметр +  " style=""color:" + Цвет + ";font-family: Verdana,Geneva,sans-serif;font-size:"+ Размер +"px;padding:" + Отступ +";" + ?(Выделить, "font-weight: bold;", "") + ?(Разделитель, "border-bottom:1px solid #CCC085;", "") + """>" + Значение + "</td>";
	Возврат "<td " + допПараметр +  " style=""font-family: Verdana,Geneva,sans-serif;font-size:"+ Размер +"px;padding:" + Отступ +";" + ?(Выделить, "font-weight: bold;", "") + ?(Разделитель, "border-bottom:1px solid #CCC085;", "") + """>" + Значение + "</td>";
КонецФункции    //line-height:15px;
Функция СформироватьСсылкаHTML(ID = Неопределено, Значение, Подсказка = "", Цвет = "#333333", href = "./0")
	//Возврат "<A style=""color:" + Цвет + ";"" id=" + Строка(ID) + ?(ЗначениеЗаполнено(Подсказка), " title= """ + Подсказка + """", "") + " href='" + href + "'>" + Строка(Значение) + "</A>";
	
	// silber {
	
	Возврат "<a style=""color:" + Цвет + ";"" " + ?(ЗначениеЗаполнено(Подсказка), " title= """ + Подсказка + """", "") + " href='" + href + "'>" + Строка(Значение) + "</a>";
	
	// } silber
	
КонецФункции

Функция Текст_ОткрытьОтчет(ИмяОтчета, КодПолученияТовара, КодПолученияСклада = "", ИмяОтбораСклада = "Склад")
	
	Возврат "V8:ВЫПОЛНИТЬ КОД:
			|ОткрытьФорму(""Отчет." + ИмяОтчета + ".ФормаОбъекта"",  
			|				Новый Структура(""Отбор, СформироватьПриОткрытии"", 
			|						Новый Структура(""Номенклатура" + ?(КодПолученияСклада = "","","," + ИмяОтбораСклада) + """, 
			|												" + КодПолученияТовара + ?(КодПолученияСклада = "","",", " + КодПолученияСклада) + "),Истина));
			|ЭтаФорма.ОбработатьОтображениеИнформацииОТоваре();";
					
КонецФункции

Функция ПолучитьТекстHTMLОТоваре(МассивСсылок, Валюта, ТекстЗаголовка = "", ВыводитьПрикрепленныеФайлы = Истина, ТолькоТело = Ложь,Дополнительно = Ложь) Экспорт
		
	//ПустойТекст = "<HTML><BODY bgcolor=""#FCFAEB""></BODY></HTML>";
	ПустойТекст = "<HTML></BODY></HTML>";
	
	Настройки = ЗначениеИзСтрокиВнутр(ПараметрыСеанса.НастройкиОперативнойИнфоОТоваре); // выборка данных с индивидуальным фильтром
		
	ВыбСклады 	= Настройки.Склады;
	ВыбТипыЦен	= Настройки.ТипыЦен;
	ПоказыватьОстатки	= Настройки.Остатки;
	ПоказыватьЦены		= Настройки.Цены;
	ПоказыватьСборку 	= Настройки.Свойство("Сборка") И Настройки.Сборка;
	ВнутренниеЗаказы = Настройки.ВнутренниеЗаказы;
	ВыбВалюта = ?(Настройки.Валюта = Неопределено, Валюта, Настройки.Валюта);
	ВыбКонтрагент = Настройки.Контрагент;
	ПоказыватьДополнительно = Настройки.Дополнительно;
	
	//ид = 0;
	//Для Каждого Строка ИЗ ВыбТипыЦен Цикл ид = ид + 1;
	//	Если Строка.ПолучитьОбъект() = Неопределено Тогда
	//		ид = ид - 1;
	//		ВыбТипыЦен.Удалить(ид);
	//	КонецЕсли;
	//КонецЦикла;
	
	
	#Область Запросы
	
	СоотвПакетов = Новый Соответствие;
	
	Инд = ?(ВыбКонтрагент = Неопределено, 0, 1);
    ТекстЗапроса = "";	
	
	// ЗАГОЛОВОК
	
	СоотвПакетов.Вставить("Шапка", Инд);
	ТекстЗапроса = ТекстЗапроса + ?(ТекстЗапроса = "","",";") + "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Наименование,
	|	НаименованиеПолное,
	|	Артикул,
	|	Код
	|ИЗ
	|	Справочник.Номенклатура
	|
	|ГДЕ
	|	Ссылка В(&Ссылки)
	|" + ?(ВыбКонтрагент = Неопределено, "", ";
	|ВЫБРАТЬ Ссылка 
	|ПОМЕСТИТЬ ВозможныеУчастники
	|ИЗ Справочник.ГруппыПартнеров.Состав 
	|ГДЕ Контрагент = &Контрагент
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ Ссылка ИЗ Справочник.Контрагенты ГДЕ Ссылка = &Контрагент
	|");
			
	// ИНФОРМАЦИЯ ПО ОСТАТКАМ
	 
	Если ПоказыватьОстатки Тогда
			
		Инд = Инд + 1;
		СоотвПакетов.Вставить("Остатки", Инд);
		Инд = Инд + 1;
		СоотвПакетов.Вставить("ОстаткиВПути", Инд);

		ТекстЗапроса = ТекстЗапроса + ?(ТекстЗапроса = "","",";") + "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(Ост.Номенклатура, ЕСТЬNULL(Рез.Номенклатура, Сбор.Номенклатура)) 		Номенклатура,
		|	ЕСТЬNULL(Ост.Склад, ЕСТЬNULL(Рез.Размещение, ЕСТЬNULL(Там.Склад, Сбор.Склад)))	Склад,
		|	ЕСТЬNULL(Ост.Склад.Код, ЕСТЬNULL(Рез.Размещение.Код, ЕСТЬNULL(Сбор.Склад.Код, ЕСТЬNULL(Там.Склад.Код, """")))) КодСклада,
		|	ЕСТЬNULL(Ост.Склад.Ячеестый, ЕСТЬNULL(Рез.Размещение.Ячеестый, ЕСТЬNULL(Сбор.Склад.Ячеестый, ЕСТЬNULL(Там.Склад.ЯчееСтый, Ложь)))) Ячеестый,
		|	ВЫБОР КОГДА Там.Склад ЕСТЬ NULL ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ ЭтоТаможня,
		|	СУММА(ЕСТЬNULL(Ост.КоличествоОстаток, ЕСТЬNULL(Там.КоличествоУпрОстаток, 0))) 		Остаток,
		|	СУММА(ЕСТЬNULL(Рез.КоличествоОстаток,0)) 	КАК Резерв,
		|	СУММА(ЕСТЬNULL(Сбор.ВСборкеОстаток,0)) 		КАК ВСборке,
		|	СУММА(ЕСТЬNULL(Сбор.СобраноОстаток,0)) 		КАК Собрано,
		|	СУММА(ЕСТЬNULL(Ост.КоличествоОстаток, 0) - ЕСТЬNULL(Рез.КоличествоОстаток, 0)) КАК СвободныйОстаток
		|
		
		// товары на складах
		
		|ИЗ 
		|	РегистрНакопления.ТоварыНаСкладах.Остатки(,Номенклатура В(&Ссылки)" + ?(ВыбСклады.Количество(),"И Склад В(&Склады)", "") + ") КАК Ост
		
		// товары в таможне
		
		|ПОЛНОЕ СОЕДИНЕНИЕ
		|	РегистрНакопления.ТоварыНаТаможне.Остатки(,Номенклатура В(&Ссылки)" + ?(ВыбСклады.Количество(), "И Склад В(&Склады)","") + ") КАК Там
		|ПО
		|	Ост.Склад 			= Там.Склад И
		|	Ост.Номенклатура 	= Там.Номенклатура
		
		// товары в резерве
		
		|ПОЛНОЕ СОЕДИНЕНИЕ
		|	РегистрНакопления.ТоварыВРезерве.Остатки(,Номенклатура В(&Ссылки)" + ?(ВыбСклады.Количество(), "И Размещение В(&Склады)","") + ") КАК Рез
		|ПО
		|	Ост.Склад 			= Рез.Размещение И
		|	Ост.Номенклатура 	= Рез.Номенклатура
		
		// сборка заказа
		
		|ПОЛНОЕ СОЕДИНЕНИЕ
		|	(ВЫБРАТЬ 
		|		ВЫБОР КОГДА СкладЯчейка ССЫЛКА Справочник.Склады ТОГДА СкладЯчейка ИНАЧЕ СкладЯчейка.Владелец КОНЕЦ Склад,
		|		Номенклатура,
		|		СУММА(ВСборкеОстаток) ВСборкеОстаток, 
		|		СУММА(СобраноОстаток) СобраноОстаток
		|	ИЗ 
		|		РегистрНакопления.СборкаЗаказа.Остатки(,	Номенклатура В(&Ссылки)" + ?(ВыбСклады.Количество(), "
		|													И ВЫБОР КОГДА СкладЯчейка ССЫЛКА Справочник.Склады ТОГДА СкладЯчейка В(&Склады) ИНАЧЕ СкладЯчейка.Владелец В(&Склады) КОНЕЦ","") + ")
		|	СГРУППИРОВАТЬ ПО
		|		ВЫБОР КОГДА СкладЯчейка ССЫЛКА Справочник.Склады ТОГДА СкладЯчейка ИНАЧЕ СкладЯчейка.Владелец КОНЕЦ,
		|		Номенклатура
		|		
		|) КАК Сбор
 		|ПО
		|	Ост.Номенклатура = Сбор.Номенклатура И
		|	Ост.Склад = Сбор.Склад
		
		// 
		
		|СГРУППИРОВАТЬ ПО
		|	ЕСТЬNULL(Ост.Номенклатура, ЕСТЬNULL(Рез.Номенклатура, Сбор.Номенклатура)), 
		|	ЕСТЬNULL(Ост.Склад, ЕСТЬNULL(Рез.Размещение, ЕСТЬNULL(Там.Склад, Сбор.Склад))),
		|	ЕСТЬNULL(Ост.Склад.Код, ЕСТЬNULL(Рез.Размещение.Код, ЕСТЬNULL(Сбор.Склад.Код, ЕСТЬNULL(Там.Склад.Код, """")))),
		|	ЕСТЬNULL(Ост.Склад.Ячеестый, ЕСТЬNULL(Рез.Размещение.Ячеестый, ЕСТЬNULL(Сбор.Склад.Ячеестый, ЕСТЬNULL(Там.Склад.ЯчееСтый, Ложь)))),
		|	ВЫБОР КОГДА Там.Склад ЕСТЬ NULL ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ
		|;
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ СУММА(Зап.Заказ) Заказ, Сумма(Зап.Едет) Едет, Сумма(Зап.Ожидание) Ожидание
		|ИЗ
		|(
		|	ВЫБРАТЬ
		|  		ВЫБОР
		|  		КОГДА Заказано.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) ТОГДА
		|  					Заказано.КоличествоОстаток 	
		|  			ИНАЧЕ	Заказано.КоличествоОстаток* Заказано.Упаковка.Коэффициент
		|  		КОНЕЦ		Заказ,
		|  		0 Едет,
		|  		0 Ожидание
		|  		
		|  	ИЗ
		|  		РегистрНакопления.ЗаказыПоставщикам.Остатки(,Номенклатура В(&Ссылки)) КАК Заказано
		|	  
		|	  ОБЪЕДИНИТЬ ВСЕ 
		|  	
		|  	ВЫБРАТЬ
		|  		0 Заказ,
		|  		ВЫБОР 
		|  			КОГДА Едет.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) ТОГДА
		|  					Едет.КоличествоОстаток 	
		|  			ИНАЧЕ	Едет.КоличествоОстаток* Едет.Упаковка.Коэффициент
		|  		КОНЕЦ		Едет,
		|  		0 Ожидание
		|  	ИЗ
		|  		РегистрНакопления.ТоварыПоставщиковВПути.Остатки(,Номенклатура В(&Ссылки)) КАК Едет
		|  
		|  	ОБЪЕДИНИТЬ ВСЕ
		|  
		|  	ВЫБРАТЬ 
		|  		0 Заказ,
		|  		0 Едет,
		|  		Ожидание.КоличествоОстаток 	Ожидание
        |  	ИЗ	
		|  		РегистрНакопления.РазмещениеЗаказов.Остатки(,Номенклатура В(&Ссылки)) КАК Ожидание
		|  ) Зап
   		|";
		
		Инд = Инд + 1;
		СоотвПакетов.Вставить("ОстаткиМеждуСкладами", Инд);
		
		ТекстЗапроса = ТекстЗапроса + ?(ТекстЗапроса = "","",";") + "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СкладОтправитель,
		|	СкладПолучатель,
		|	ВЫБОР КОГДА Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) ТОГДА КоличествоОстаток ИНАЧЕ КоличествоОстаток*Упаковка.Коэффициент КОНЕЦ ВПути
		|ИЗ
		|	РегистрНакопления.ТоварыВПути.Остатки(, Номенклатура В(&Ссылки)" + ?(ВыбСклады.Количество()," И (СкладОтправитель В(&Склады) ИЛИ СкладПолучатель В(&Склады))", "") + ")
		|";
		
		
		
	КонецЕсли;
	
	 // ИНФОРМАЦИЯ ПО ВНУТРЕННИМ ЗАКАЗАМ
	Если ВнутренниеЗаказы Тогда
			
		Инд = Инд + 1;
		СоотвПакетов.Вставить("ВнутренниеЗаказы", Инд);
		
		ТекстЗапроса = ТекстЗапроса + ?(ТекстЗапроса = "","",";") + 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(ЕСТЬNULL(ВнутЗаказыОст.КоличествоОстаток, 0)) КАК Заказано,
		|	ВнутЗаказыОст.Заказчик КАК Получатель,
		|	СУММА(ЕСТЬNULL(ТовВПутиОстВн.КоличествоОстаток, 0)) КАК ВПути,
		|	ВнутЗаказыОст.ВнутреннийЗаказ.Склад КАК Отправитель
		|ИЗ
		|	РегистрНакопления.ВнутренниеЗаказы.Остатки(
		|			,
		|			Номенклатура В (&Ссылки)
		|				И Заказчик ССЫЛКА Справочник.Склады "+ ?(ВыбСклады.Количество(),"
		|				И Заказчик В (&Склады)", "") + ") КАК ВнутЗаказыОст
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВПути.Остатки(
		|				,
		|				Номенклатура В (&Ссылки)
		|					И Заказчик.Заказ ССЫЛКА Документ.ВнутреннийЗаказ  "+ ?(ВыбСклады.Количество(),"
		|					И СкладПолучатель В (&Склады)", "") + ") КАК ТовВПутиОстВн
		|		ПО ВнутЗаказыОст.ВнутреннийЗаказ = ТовВПутиОстВн.Заказчик.Заказ
		|			И ВнутЗаказыОст.Номенклатура = ТовВПутиОстВн.Номенклатура
		|			И ВнутЗаказыОст.ВнутреннийЗаказ.Склад = ТовВПутиОстВн.СкладОтправитель
		|
		|СГРУППИРОВАТЬ ПО
		|	ВнутЗаказыОст.Заказчик,
		|	ВнутЗаказыОст.ВнутреннийЗаказ.Склад" ;
		
	КонецЕсли;

		
	// ИНФОРМАЦИЯ ПО ЦЕНАМ
	Если ПоказыватьЦены Тогда
			
		Инд = Инд + 1;
		СоотвПакетов.Вставить("Цены", Инд);
		
		ТекстЗапроса = ТекстЗапроса + ?(ТекстЗапроса = "","",";") + "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Цен.Цена * (ЕСТЬNULL(ВалЦен.Курс, 1) * ЕСТЬNULL(ВалТек.Кратность, 1)) / (ЕСТЬNULL(ВалТек.Курс, 1) * ЕСТЬNULL(ВалЦен.Кратность, 1)) КАК Цена,
		|	Цен.Номенклатура 	 	Номенклатура,
		|	Цен.Упаковка		 	Упаковка,
		|	Цен.ТипЦен			 	ТипЦен,
		|	ЕСТЬNULL(Акц.НоваяЦена, 0) * ЕСТЬNULL(Цен.Упаковка.Коэффициент, 1)* ЕСТЬNULL(ВалЦенАкц.Курс, 1) * ЕСТЬNULL(ВалТек.Кратность, 1)/ (ЕСТЬNULL(ВалТек.Курс, 1) * ЕСТЬNULL(ВалЦенАкц.Кратность, 1)) ЦенаПоАкции
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&текДата, Номенклатура В(&Ссылки) " + ?(ВыбТипыЦен.Количество(),"И ТипЦен В(&ТипыЦен)", "") + " ) Цен
		|	ЛЕВОЕ СОЕДИНЕНИЕ 
		|		РегистрСведений.КурсыВалют.СрезПоследних(&текДата) ВалЦен
		|	ПО 
		|		Цен.Валюта = ВалЦен.Валюта
		|	
		|  	ЛЕВОЕ СОЕДИНЕНИЕ 
		|		РегистрСведений.КурсыВалют.СрезПоследних(&текДата, Валюта = &Валюта) ВалТек
		|	ПО 
		|		ИСТИНА
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|	(ВЫБРАТЬ Номенклатура, ТипЦен, НоваяЦена, Валюта ИЗ 
		|	РегистрСведений.Акция.СрезПоследних(&текДата, Номенклатура В(&Ссылки)" + ?(ВыбТипыЦен.Количество()," И ТипЦен В(&ТипыЦен)", "") + ")  
		|	ГДЕ Акция <> &ПустаяАкция И ВариантСкидки = &ВариантСкидкиЦена ) Акц
		|	ПО Цен.Номенклатура = Акц.Номенклатура И Цен.ТипЦен = Акц.ТипЦен
		|   ЛЕВОЕ СОЕДИНЕНИЕ 
		|		РегистрСведений.КурсыВалют.СрезПоследних(&текДата) ВалЦенАкц
		|	ПО 
		|		Акц.Валюта = ВалЦенАкц.Валюта
		|";		
		
	// silber {
	
	// УЧАСТИНИК АКЦИИ
	
		Инд = Инд + 1;
		СоотвПакетов.Вставить("УчАкций", Инд);
		ТекстЗапроса = ТекстЗапроса + ?(ТекстЗапроса = "","",";") + "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Цен.НоваяЦена * (ЕСТЬNULL(ВалЦен.Курс, 1) * ЕСТЬNULL(ВалТек.Кратность, 1)) / (ЕСТЬNULL(ВалТек.Курс, 1) * ЕСТЬNULL(ВалЦен.Кратность, 1)) КАК Цена,
		|	Цен.Номенклатура 	 	Номенклатура,
		|	Цен.Участник			Участник," + ?(ВыбКонтрагент = Неопределено, "
		|	ИСТИНА ВыбКонтрагентТут", "
		|	ВЫБОР КОГДА Участник В(ВЫБРАТЬ Ссылка ИЗ ВозможныеУчастники) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ ВыбКонтрагентТут") + "
		|ИЗ
		|	РегистрСведений.УчастникиАкции.СрезПоследних(&текДата, Номенклатура В(&Ссылки)) Цен
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ 	РегистрСведений.КурсыВалют.СрезПоследних(&текДата) ВалЦен
		|ПО					Цен.Валюта = ВалЦен.Валюта
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ 	РегистрСведений.КурсыВалют.СрезПоследних(&текДата, Валюта = &Валюта) ВалТек
		|ПО					ИСТИНА
		|ГДЕ Цен.Акция <> &ПустаяАкция
		|УПОРЯДОЧИТЬ ПО Участник 
		|";
		
		
	КонецЕсли;
	
	Если ВыводитьПрикрепленныеФайлы Тогда Инд = Инд + 1; СоотвПакетов.Вставить("ПрикрепленныеФайлы", Инд);
		
		ТекстЗапроса = ТекстЗапроса + ?(ТекстЗапроса = "","",";") + "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИмяФайла,
		|	URLнаСайте,
		|	ВыгружатьНаСайт
		|ИЗ
		|	Справочник.Номенклатура.СсылкиКФайламДляСайта
		|ГДЕ
		|	Ссылка В(&Ссылки)
		|";				
		
	КонецЕсли;
	
	// } silber
	
	// Дополнительная ИНФОРМАЦИЯ раздел закупки
	Если ПоказыватьДополнительно Тогда
			
		Инд = Инд + 2;
		СоотвПакетов.Вставить("Дополнительно", Инд);
		
		ТекстЗапроса = ТекстЗапроса + ?(ТекстЗапроса = "","",";") + 
		   		
		   "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		   |	Номен.Производитель,
		   |	Номен.КатегорияТовара,
		   |	Номен.Ссылка,
		   |	Номен.Поставщик
		   |ПОМЕСТИТЬ ИнфТоваров
		   |ИЗ
		   |	Справочник.Номенклатура КАК Номен
		   |ГДЕ
		   |	Номен.Ссылка В(&Ссылки)
		   |;
		   |
		   |////////////////////////////////////////////////////////////////////////////////
		   |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		   |	ВЫБОР
		   |		КОГДА КатегорииТоваров.КатегорийныйМенеджер = &КатегорийныйМенеджерПусто
		   |			ТОГДА ""Не назначен""
		   |		ИНАЧЕ КатегорииТоваров.КатегорийныйМенеджер
		   |	КОНЕЦ КАК КатегорийныйМенеджер,
		   |	ИнфТоваров.Ссылка,
		   |	ВЫБОР
		   |		КОГДА Контрагенты.МенеджерЗакупок = &ЗакупщикПусто
		   |			ТОГДА ""Не назначен""
		   |		ИНАЧЕ Контрагенты.МенеджерЗакупок
		   |	КОНЕЦ КАК Закупщик
		   |ИЗ
		   |	ИнфТоваров КАК ИнфТоваров
		   |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КатегорииТоваров КАК КатегорииТоваров
		   |		ПО ИнфТоваров.КатегорияТовара = КатегорииТоваров.Ссылка
		   |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		   |		ПО ИнфТоваров.Поставщик = Контрагенты.Ссылка";
		
	КонецЕсли;

	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылки", 	МассивСсылок);
	Запрос.УстановитьПараметр("Валюта", 	ВыбВалюта);
	Запрос.УстановитьПараметр("ТипыЦен",	ВыбТипыЦен);
	Запрос.УстановитьПараметр("Склады", 	ВыбСклады);
	Запрос.УстановитьПараметр("текДата", 	ТекущаяДата());
	Запрос.УстановитьПараметр("ПустаяАкция", Документы.Акция.ПустаяСсылка());
	Запрос.УстановитьПараметр("Контрагент", 			ВыбКонтрагент);
	Запрос.УстановитьПараметр("ВариантСкидкиЦена", 	Перечисления.ВариантСкидки.Цена);
	Запрос.УстановитьПараметр("КатегорийныйМенеджерПусто",Справочники.Пользователи.ПустаяСсылка());
	Запрос.УстановитьПараметр("ЗакупщикПусто",Справочники.Пользователи.ПустаяСсылка());
	
	//УстановитьПривилегированныйРежим(Истина);
	
	Попытка		Результаты = Запрос.ВыполнитьПакет();
	Исключение	Сообщить(ОписаниеОшибки());
				//УстановитьПривилегированныйРежим(Ложь);
				Возврат ""; КонецПопытки;
	
	//УстановитьПривилегированныйРежим(Ложь);
	
#КонецОбласти
	
	// Вывод ЗАГОЛОВОК
	
	ТекстЗаголовка = СформироватьЗаголовокТовараHTML(МассивСсылок, ПоказыватьОстатки,ВнутренниеЗаказы, ПоказыватьЦены, ПоказыватьСборку, ТолькоТело,ПоказыватьДополнительно);
	
	// Вывод табличных данных
	
	Текст = "";
	ЦветФонаШапки = "#F5F2DD";
	
#Область Остатки
	
	Если ПоказыватьОстатки Тогда                                  
		
		КодПолученияСсылки = "HTMLОбработкаСервер.ПолучитьОбъектПоГуидСтроке(""Справочники.Номенклатура"",""" + XMLСтрока(МассивСсылок[0]) + """)";
		
		Всего = 0; Остаток = 0; Резерв = 0; Собрано = 0; ВСборке = 0;//ВПути = 0;
		
		Инд = СоотвПакетов.Получить("Остатки");
        Результат = Результаты[Инд]; 
		
		ОтступТаблицы = ?(Инд = 1 , "5px", "10px");
 		ТекстОстатки = "";
		
		Если Результат.Пустой() Тогда
			
			ТекстОстатки = "
			|<tr> " + НСтр("ru='Нет остатков на складах'; de='Waren fehlt';") + ". </tr>";
			
		Иначе
			
			// шапка таблицы              // ; text-align:center

			ТекстОстатки = ТекстОстатки + 
				"<thead>                                       	             
				 |	<tr style=""background-color: " + ЦветФонаШапки + ";font-family: Verdana,Geneva,sans-serif;font-size:10px;"">
				 |" + 	СформироватьШапкаКолонкиHTML("Склад",,,"left") + 
				 		СформироватьШапкаКолонкиHTML("Дост", "Доступно",,"right") +
						СформироватьШапкаКолонкиHTML("Ост", "Остаток",,"right") +
						СформироватьШапкаКолонкиHTML("Рез", "Резерв",,"right") +
						?(ПоказыватьСборку,СформироватьШапкаКолонкиHTML("Соб", "В сборке, собрано",,"right"),"") + "
						//СформироватьШапкаКолонкиHTML("В пут", "В пути") + 
				 |	</tr>
				 |</thead>";	
			 
			Выборка = Результат.Выбрать();
				
			ТекстОстатки = ТекстОстатки + "<tbody border=""1"" style=""background-color:#FFF;"">";

			Пока Выборка.Следующий() Цикл									
				
				КодПолученияСклада = "HTMLОбработкаСервер.ПолучитьОбъектПоГуидСтроке(""Справочники.Склады"",""" + XMLСтрока(Выборка.Склад) + """)";
				
				ТекстОстатки = ТекстОстатки + "<tr>";
					
				Остаток		= Остаток + Выборка.Остаток;
				Резерв 		= Резерв + ?(Выборка.ЭтоТаможня, 0, Выборка.Резерв);
				ВСборке 	= ВСборке + Выборка.ВСборке;
				Собрано 	= Собрано + Выборка.Собрано;
				//ВПути		= ВПути + Выборка.ВПути;
				Всего 		= Всего + Выборка.СвободныйОстаток;
				
				Фонт 		= ПолучитьТекстЦветаСтрокиТовара(Выборка.Остаток, Выборка.Резерв);
					
				//ТекстОстатки = ТекстОстатки + 
				//	СформироватьСтрокуТаблицыHTML(Выборка.КодСклада, "center", Фонт, Выборка.Склад, Истина) + 
				//	СформироватьСтрокуТаблицыHTML(Выборка.СвободныйОстаток, , Фонт) + 
				//	СформироватьСтрокуТаблицыHTML(?(Выборка.Ячеестый, СформироватьСсылкаHTML("s" + Выборка.КодСклада, Выборка.Остаток, "Остатки в ячейках", Фонт), Выборка.Остаток), , Фонт) +
				//	СформироватьСтрокуТаблицыHTML(?(Выборка.Резерв <> 0 И Выборка.КодСклада <> "", СформироватьСсылкаHTML(Выборка.КодСклада, Выборка.Резерв, "Показать резерв", Фонт), Выборка.Резерв), , Фонт);
				
				// silber {
				
				ТекстОстатки = ТекстОстатки + 
					СформироватьСтрокуТаблицыHTML(Выборка.КодСклада, "center", Фонт, Выборка.Склад, Истина) + 
					СформироватьСтрокуТаблицыHTML(?(Выборка.ЭтоТаможня, "n/a", Выборка.СвободныйОстаток), , Фонт) + 
					
					// Остатки  
					
				СформироватьСтрокуТаблицыHTML(?(Выборка.Ячеестый, СформироватьСсылкаHTML(,Выборка.Остаток, "Остатки в ячейках", Фонт,
								Текст_ОткрытьОтчет("ТоварыВЯчейках", КодПолученияСсылки, КодПолученияСклада)), Выборка.Остаток),,Фонт) +
					
					// Резервы
					
				СформироватьСтрокуТаблицыHTML(?(Выборка.Резерв <> 0 И Выборка.КодСклада <> "", СформироватьСсылкаHTML(,Выборка.Резерв, "Показать резерв", Фонт, 
								Текст_ОткрытьОтчет("ТоварыВРезерве", КодПолученияСсылки, КодПолученияСклада, "Размещение")), 
								?(Выборка.ЭтоТаможня, "n/a", Выборка.Резерв)),,Фонт);
					
				Если ПоказыватьСборку Тогда
					
					// Сборка
					
					ТекстСтроки 	= Строка(Выборка.ВСборке) + "/" + Строка(Выборка.Собрано);
					ТекстОстатки 	= ТекстОстатки + 
					СформироватьСтрокуТаблицыHTML(?(Выборка.ВСборке <> 0 Или Выборка.Собрано <> 0, СформироватьСсылкаHTML(,ТекстСтроки, "Показать резерв", Фонт, 
								Текст_ОткрытьОтчет("СборкаЗаказов", КодПолученияСсылки, КодПолученияСклада)), ТекстСтроки),,Фонт); КонецЕсли;
				
				// } silber
					
				ТекстОстатки = ТекстОстатки + "</tr>";
		
			КонецЦикла;
				
			ТекстОстатки = ТекстОстатки + "</tbody>";
				
			Если Выборка.Количество() > 1 Тогда
				Фонт = ПолучитьТекстЦветаСтрокиТовара(Остаток, Резерв);
				ТекстОстатки = ТекстОстатки + 
				"<tfoot>
				|	<tr style=""border-bottom-style: none; font-weight: bold;background-color:" + ЦветФонаШапки + "; text-align:right;"">" +
						СформироватьПодвалКолонкиHTML("Всего", ЦветФонаШапки, 10) +
						СформироватьПодвалКолонкиHTML(Всего, Фонт) +
						СформироватьПодвалКолонкиHTML(Остаток, Фонт) +
						//СформироватьПодвалКолонкиHTML(СформироватьСсылкаHTML("ViewReserve", Резерв, "Показать резерв", Фонт), Фонт) + "
						// ?(ПоказыватьСборку, СформироватьПодвалКолонкиHTML(Строка(ВСборке) + "/" + Строка(Собрано), Фонт),"") + "
						// silber {
						СформироватьПодвалКолонкиHTML(?(Резерв, СформироватьСсылкаHTML(,Резерв, "Показать резерв", Фонт,
							Текст_ОткрытьОтчет("ТоварыВРезерве", КодПолученияСсылки)),Резерв), Фонт)
					
					+ ?(ПоказыватьСборку,СформироватьПодвалКолонкиHTML(?(ВСборке <> 0 и Собрано <> 0, СформироватьСсылкаHTML(,Строка(ВСборке) + "/" + Строка(Собрано), "Показать сборку", Фонт,
							Текст_ОткрытьОтчет("СборкаЗаказов", КодПолученияСсылки)),"0/0"), Фонт),"") + "
						// } silber
						
			            //СформироватьПодвалКолонкиHTML(ВПути, Фонт) + " 
				|	</tr>
				//|	<tr style=""border-bottom-style: none; text-align:right; background-color:#FFF;"">" +
				//		СформироватьПодвалКолонкиHTML("Заказано", , 10, Истина) +
				//		СформироватьПодвалКолонкиHTML(Выборка.Едет) + 
				//		СформироватьПодвалКолонкиHTML("Ожидается", ,10, Истина, "colspan = ""2""") + 
				//		СформироватьПодвалКолонкиHTML(Выборка.Едет) + "
				//|	</tr>
				|</tfoot>";
			КонецЕсли;
			

		КонецЕсли;
		
		Инд = СоотвПакетов.Получить("ОстаткиВПути");
		Результат = Результаты[Инд]; 		
		Выборка = Результат.Выбрать();
		ЕстьВнешниеОстатки = Ложь;
		Если НЕ Результат.Пустой() И Выборка.Следующий() И Выборка <> Неопределено И (Выборка.Заказ +  Выборка.Едет + Выборка.Ожидание) <> 0 Тогда ЕстьВнешниеОстатки = Истина;
			
			Фонт = ПолучитьТекстЦветаСтрокиТовара(Выборка.Заказ, 0);
			
			Текст = Текст +  "	
						|	<tr style=""border-bottom-style: none; text-align:left;"">" +
								СформироватьПодвалКолонкиHTML("Заказано", , 11, Истина,,"0px 5px" ,Ложь) +
								
								СформироватьПодвалКолонкиHTML(?(Выборка.Заказ <> 0, СформироватьСсылкаHTML(,Выборка.Заказ, "Заказано у поставщиков", ПолучитьТекстЦветаСтрокиТовара(Выборка.Заказ, 0),
										Текст_ОткрытьОтчет("ЗаказыПоставщикам", КодПолученияСсылки)),Выборка.Заказ),,,,,"0px 5px",Ложь) +
					
								СформироватьПодвалКолонкиHTML("Едет к нам", , 11, Истина,,"0px 10px", Ложь) + 
								
								СформироватьПодвалКолонкиHTML(?(Выборка.Едет <> 0, СформироватьСсылкаHTML(,Выборка.Едет, "В инвойсах", ПолучитьТекстЦветаСтрокиТовара(Выборка.Едет, 0),
										Текст_ОткрытьОтчет("ТоварыПоставщикаВПути", КодПолученияСсылки)),Выборка.Едет),,,,,"0px 5px",Ложь) + "
								
						|	</tr>
						|	<tr style=""border-bottom-style: none; text-align:left;"">" +
								СформироватьПодвалКолонкиHTML("Можно размещать", , 11, Истина,,"5px 5px" ,Ложь) +
								//СформироватьПодвалКолонкиHTML(СформироватьСсылкаHTML("dostup", Всего + Выборка.Заказ + Выборка.Едет - Выборка.Ожидание),,,,,"10px 5px",Ложь) +  
								СформироватьПодвалКолонкиHTML(Всего + Выборка.Заказ + Выборка.Едет - Выборка.Ожидание,,,,,"5px 5px",Ложь) + 
								СформироватьПодвалКолонкиHTML("Потребность", ,11, Истина,,"5px 10px", Ложь) + 
								//СформироватьПодвалКолонкиHTML(СформироватьСсылкаHTML("spros", Выборка.Ожидание),,,,,"10px 0px",Ложь) + "
								СформироватьПодвалКолонкиHTML(?(Выборка.Ожидание <> 0, СформироватьСсылкаHTML(,Выборка.Ожидание, "Потребность", ПолучитьТекстЦветаСтрокиТовара(Выборка.Ожидание, 0),
										Текст_ОткрытьОтчет("ПотребностьВТоваре", КодПолученияСсылки)),Выборка.Ожидание),,,,,"5px 5px",Ложь) + "
								                                
						|	</tr>
						|";
		КонецЕсли;
		
				
		Текст = Текст +  "	 <tr>
						|		<td colspan = ""4"" align=""center"" valign=""top"">
						|			<table width=""95%"" cellspacing=""0"" cellpadding=""0"" border=""0"" style=""margin:" + ОтступТаблицы + " 5px;"">
						|" + ТекстОстатки + "	
						|			</table>
						|		</td>
						|	</tr>
						|";
						
						Инд = СоотвПакетов.Получить("ОстаткиМеждуСкладами");
		Результат = Результаты[Инд]; 		
		Выборка = Результат.Выбрать();
		
		Если НЕ Результат.Пустой() Тогда
			
			Пока Выборка.Следующий() Цикл
				Текст = Текст +	"	
								|	<tr style=""border-bottom-style: none; text-align:left;"">" +
										СформироватьПодвалКолонкиHTML(Строка(Выборка.СкладОтправитель) + " -> " + Строка(Выборка.СкладПолучатель), , 10, Истина, "colspan = """ + ?(ЕстьВнешниеОстатки,3,0) + """","3px 5px" ,Ложь) +
							            //СформироватьПодвалКолонкиHTML(СформироватьСсылкаHTML("betweenWH", Выборка.ВПути),,,,,"0px 5px",Ложь) + "                                                             
										СформироватьПодвалКолонкиHTML(СформироватьСсылкаHTML(,Выборка.ВПути, "Потребность", Фонт,
											Текст_ОткрытьОтчет("ТоварыМеждуСкладами", КодПолученияСсылки)),,,,,"3px 5px",Ложь) + "
								|	</tr>
								|";
		    КонецЦикла;
				
		КонецЕсли;
				
	КонецЕсли;
	
#КонецОбласти
	
#Область Внутреннии_заказы
	
	Если ВнутренниеЗаказы Тогда
		
		КодПолученияСсылки = "HTMLОбработкаСервер.ПолучитьОбъектПоГуидСтроке(""Справочники.Номенклатура"",""" + XMLСтрока(МассивСсылок[0]) + """)";
		
		Заказано = 0; ВПути = 0;
		
		Инд = СоотвПакетов.Получить("ВнутренниеЗаказы");
        Результат = Результаты[Инд]; 
		
		ОтступТаблицы = ?(Инд = 1 , "5px", "10px");
 		ТекстВнутренниеЗаказы = "";
		
		Если Результат.Пустой() Тогда
			
			ТекстВнутренниеЗаказы = "
			|<tr> " + НСтр("ru='Нет внутренних заказов'") + ". </tr>";
			
		Иначе
			ТекстВнутренниеЗаказы = "
			|<tr> " + НСтр("ru='Внутренние заказы:'") + " </tr>";
			
			// шапка таблицы     
			
			ТекстВнутренниеЗаказы = ТекстВнутренниеЗаказы + 
				"<thead>                                       	             
				 |	<tr style=""background-color: " + ЦветФонаШапки + ";font-family: Verdana,Geneva,sans-serif;font-size:10px;"">
				 |" + 	СформироватьШапкаКолонкиHTML("Заказчик", "Склад заказчик",,"center") + 
						СформироватьШапкаКолонкиHTML("Отправитель","Склад отправитель",,"center") +
						СформироватьШапкаКолонкиHTML("Заказано",,,"right") +
						СформироватьШапкаКолонкиHTML("В пути",,,"right") +
				 "	</tr>
				 |</thead>";	
			 
			Выборка = Результат.Выбрать();
				
			ТекстВнутренниеЗаказы = ТекстВнутренниеЗаказы + "<tbody border=""1"" style=""background-color:#FFF;"">";

			Пока Выборка.Следующий() Цикл									
				
				КодПолученияСклада = "HTMLОбработкаСервер.ПолучитьОбъектПоГуидСтроке(""Справочники.Склады"",""" + XMLСтрока(Выборка.Получатель) + """)";
				ТекстВнутренниеЗаказы = ТекстВнутренниеЗаказы + "<tr>";
					
				ТекстВнутренниеЗаказы = ТекстВнутренниеЗаказы + 
					СформироватьСтрокуТаблицыHTML(?(Выборка.Получатель = null,"",Выборка.Получатель.Код) , "center",, Выборка.Получатель, Истина) + 
					СформироватьСтрокуТаблицыHTML(?(Выборка.Отправитель = null,"",Выборка.Отправитель.Код), "center",, Выборка.Отправитель, Истина) +
					СформироватьСтрокуТаблицыHTML(?(Выборка.Заказано, СформироватьСсылкаHTML(,Выборка.Заказано, "Заказано", ,
								Текст_ОткрытьОтчет("ВнутренниеЗаказы", КодПолученияСсылки, КодПолученияСклада,)), Выборка.Заказано),,Ложь) +

				СформироватьСтрокуТаблицыHTML(Выборка.ВПути, "right","#333333", , Ложь); 
					
				ТекстВнутренниеЗаказы = ТекстВнутренниеЗаказы + "</tr>";
		
			КонецЦикла;
				
			ТекстВнутренниеЗаказы = ТекстВнутренниеЗаказы + "</tbody>";
				
		КонецЕсли;
		
		Текст = Текст +  "	 <tr>
						|		<td colspan = ""4"" align=""center"" valign=""top"">
						|			<table width=""95%"" cellspacing=""0"" cellpadding=""0"" border=""0"" style=""margin:" + ОтступТаблицы + " 5px;"">
						|" + ТекстВнутренниеЗаказы + "	
						|			</table>
						|		</td>
						|	</tr>
						|";

	КонецЕсли;
	
#КонецОбласти

#Область Цены
	
	Если ПоказыватьЦены Тогда
		
		Инд = СоотвПакетов.Получить("Цены");
		Результат = Результаты[Инд];
		
		ОтступТаблицы = ?(Инд = 1, "0", "20px");
		ТекстЦены = "";	
		
		Если Результат.Пустой() Тогда
					  
			ТекстЦены = "
			|Нет информации о ценах.";
					
		Иначе
			
			// шапка таблицы
				
			Акция = 0;
			ТекстЦены = ТекстЦены + 
				"<thead> "+СформироватьЭлементВыбораВалюты(ВыбВалюта)+
		         "	<tr style=""background-color: " + ЦветФонаШапки + "; text-align:center;font-family: Verdana,Geneva,sans-serif;font-size:10px;"">
		 		 |"  +	СформироватьШапкаКолонкиHTML("Тип цены") + 
				 		СформироватьШапкаКолонкиHTML("Цена", "Цена") + " %АкцияКолонка%
				 |	</tr>
				 |</thead>";	
					 
			Выборка = Результат.Выбрать();
					
			ТекстЦены = ТекстЦены + "<tbody border=""1"" style=""background-color:#FFF;"">";

			Пока Выборка.Следующий() Цикл									
						
				ТекстЦены = ТекстЦены + "<tr>";
						
				ТекстЦены = ТекстЦены + 
					СформироватьСтрокуТаблицыHTML(Строка(Выборка.ТипЦен) + ?(Выборка.Упаковка.Пустая(), "", " (" + Строка(Выборка.Упаковка.Коэффициент) + " " + Строка(Выборка.Номенклатура.ЕдиницаИзмерения) + ")"), "left", , Выборка.ТипЦен, Истина,"10") + 
					СформироватьСтрокуТаблицыHTML(Формат(Выборка.Цена, "ЧЦ=10; ЧДЦ=2"), , );
					Если Выборка.ЦенаПоАкции > 0 Тогда
						Акция = Акция + Выборка.ЦенаПоАкции;
						ТекстЦены = ТекстЦены + СформироватьСтрокуТаблицыHTML(Формат(Выборка.ЦенаПоАкции, "ЧЦ=10; ЧДЦ=2"), , ); КонецЕсли;
					
				ТекстЦены = ТекстЦены + "</tr>";КонецЦикла;
					
			ТекстЦены = ТекстЦены + "</tbody>";
			
			ТекстЦены = СтрЗаменить(ТекстЦены, "%АкцияКолонка%", ?(Акция, СформироватьШапкаКолонкиHTML("Акция", "Цена по акции"), ""));  	
		КонецЕсли;
		
		Текст = Текст +  "
				|	<tr>
				|		<td colspan = ""4"" align=""center"" valign=""top"">
				|			<table width=""95%"" cellspacing=""0"" cellpadding=""0"" border=""0"" style=""margin:" + ОтступТаблицы + " 0 0;"">
				|" + ТекстЦены + "	
				|			</table>
				|		</td>
				|	</tr>
				|";
			
#КонецОбласти

#Область Участники_акции

		Инд = СоотвПакетов.Получить("УчАкций");
		Результат = Результаты[Инд];

		ОтступТаблицы = ?(Инд = 1, "0", "20px");
		ТекстУчастников = "";	
		
		Если Результат.Пустой() Тогда
					  
			ТекстУчастников = " 
			|Нет акций для участников";
					
		Иначе
			
			// шапка таблицы
				
			//Акция = 0;
			ТекстУчастников = ТекстУчастников + 
				"<thead> " + СформироватьЭлементВыбораПартнера(ВыбКонтрагент) +
		         "	<tr style=""background-color: " + ЦветФонаШапки + "; text-align:center;font-family: Verdana,Geneva,sans-serif;font-size:10px;"">
		 		 |"  +	СформироватьШапкаКолонкиHTML("Участник") + 
				 		СформироватьШапкаКолонкиHTML("Цена", "Цена") + "
				 |	</tr>
				 |</thead>";	
					 
			Выборка = Результат.Выбрать();
					
			ТекстУчастников = ТекстУчастников + "<tbody border=""1"" style=""background-color:#FFF;"">";

			ЕстьСтрока = Ложь;
			Пока Выборка.Следующий() Цикл
				
				ЦветУчастника = ?(Выборка.ВыбКонтрагентТут,"#333333", "#C2C2C2");
				ТекстУчастников = ТекстУчастников + "<tr>";
					
				ТекстУчастников = ТекстУчастников + 
					?(Выборка.ВыбКонтрагентТут,
						СформироватьСтрокуТаблицыHTML(Строка(Выборка.Участник), "left",, Выборка.Участник, Истина, "10"),
				 		СформироватьСтрокуТаблицыHTML("<font color=""grey"">" + Строка(Выборка.Участник) + "</font>", "left",, Выборка.Участник,, "10")) + 
					СформироватьСтрокуТаблицыHTML(Формат(Выборка.Цена, "ЧЦ=10; ЧДЦ=2"));
						
				ТекстУчастников = ТекстУчастников + "</tr>"; КонецЦикла;
					
			ТекстУчастников = ТекстУчастников + "</tbody>"; КонецЕсли;
		
		Текст = Текст +  "
				|	<tr>
				|		<td colspan = ""4"" align=""center"" valign=""top"">
				|			<table width=""95%"" cellspacing=""0"" cellpadding=""0"" border=""0"" style=""margin:" + ОтступТаблицы + " 0 0;"">
				|" + ТекстУчастников + "	
				|			</table>
				|		</td>
				|	</tr>
				|"; КонецЕсли;

#КонецОбласти

#Область Дополнительно
	Если ПоказыватьДополнительно Тогда
		
		//Инд = СоотвПакетов.Получить("Закупка");
		//Закупка = Результаты[Инд].Выгрузить();

		Дополнительно = Результаты[СоотвПакетов.Получить("Дополнительно")].Выбрать();
		
		Если Дополнительно.Количество() Тогда
			Текст = Текст + "<ul>";

			Пока Дополнительно.Следующий() Цикл 
			           //"<br>" + "Категорийный менеджер: "+ Дополнительно.КатегорийныйМенеджер+"<br>"+ "Закупщик: "+ Дополнительно.Закупщик+"</br>" ;
			Текст = Текст + "	|	<tr style=""border-bottom-style: none; text-align:left;"">" +
										СформироватьПодвалКолонкиHTML("Категорийный менеджер: "+ Дополнительно.КатегорийныйМенеджер,"colspan = 4", 10, Истина, ,"3px 5px" ,Ложь)+"
								 |	</tr>
								|	<tr style=""border-bottom-style: none; text-align:left;"">" +
										СформироватьПодвалКолонкиHTML("Закупщик: "+ Дополнительно.Закупщик,"colspan = 4",10,Истина,,"3px 5px",Ложь) + "
								|	</tr>     
								|";

		КонецЦикла;
		
			Текст = Текст + "</ul>"; КонецЕсли;КонецЕсли;
	 #КонецОбласти

	Если ВыводитьПрикрепленныеФайлы Тогда
		
		ВыборкаФайлов = Результаты[СоотвПакетов.Получить("ПрикрепленныеФайлы")].Выбрать();
		
		Если ВыборкаФайлов.Количество() Тогда
			
			Текст = Текст + "<ul>Сопутствующие файлы:";
			Пока ВыборкаФайлов.Следующий() Цикл Текст = Текст + "<li>" + СтрЗаменить(ВыборкаФайлов.URLнаСайте,"</a>","<target = ""_blank""/a>") + "</li>";КонецЦикла;
			Текст = Текст + "</ul>"; КонецЕсли;КонецЕсли;
	
	
	
	Текст = "<table width=""100%"" border=""0"" cellspacing=""0"" cellpadding=""0"">
			|" + Текст + "	
			|</table>";
	
	Возврат ?(ТолькоТело, Текст,
			"<!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Strict//EN"" ""http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"">
			|<html xmlns=""http://www.w3.org/1999/xhtml"" xml:lang=""ru"">
			|<head>
			|	<meta http-equiv=""Content-Type"" content=""text/html"" />
			|</head>
			|  
			|<body>
			|" + Текст + "	
			|</body>
			|</html>");
			
КонецФункции         
Функция СформироватьЗаголовокТовараHTML(МассивСсылок, Остатки, ВнутренниеЗаказы, Цены, Сборка = Ложь, ТолькоТело = Ложь , Дополнительно = Ложь) Экспорт
			
	Если МассивСсылок.Количество() = 1 Тогда
		
		Товар = МассивСсылок[0];
		
		Если Товар.ВыгружатьНаСайт И Не ПустаяСтрока(Товар.alies) Тогда
			Заголовок = "<a href='http://www.garagetools.ru/shop/" + Товар.alies + "' target=""_blank""><b>" + СокрЛП(Товар.Артикул) + "</b> " + Товар.Наименование + ":</a>";
		Иначе
			Заголовок = "<b>" + СокрЛП(Товар.Артикул) + "</b> " + Товар.Наименование + ":";
		КонецЕсли;
		
	Иначе
		стр 		= ЧислоПрописью(МассивСсылок.Количество(),"ЧДЦ=0;НП-ложь;НД=ложь;","позиция, позиции, позиций, ж");
		Заголовок 	= СокрЛП(СтрЗаменить(стр,"00","")) + ":" КонецЕсли;

	Текст = "
	|<table width=""100%"" border=""0"" cellspacing=""0"" cellpadding=""0"" >
	|	<tr style=""font-family: Verdana,Geneva,sans-serif;font-size:12px;"">
 	|		<td align=""right"" valign=""top"">
	|		<INPUT Type=""checkbox""" + ?(Остатки, " checked=""checked""", "") + " id=""CheckStock"" VALUE=""1"" style=""width: 20px; height:20px; border:none; color:#fff; background-color:#FCFAEB;"">Остатки
	|		<INPUT Type=""checkbox""" + ?(Цены, " checked=""checked""", "") + " id=""CheckPrice"" VALUE=""2"" style="" width: 20px;height:20px;border: none;color:#fff;background-color:#FCFAEB;"">Цены
	|		<INPUT Type=""checkbox""" + ?(Сборка, " checked=""checked""", "") + " id=""CheckLoader"" VALUE=""2"" style="" width: 20px;height:20px;border: none;color:#fff;background-color:#FCFAEB;"">Сборка товара
	|       <INPUT Type=""checkbox""" + ?(ВнутренниеЗаказы, " checked=""checked""", "") + " id=""CheckInOrder"" VALUE=""2"" style="" width: 20px;height:20px;border: none;color:#fff;background-color:#FCFAEB;"">Внутренние заказы
	|   	<INPUT Type=""checkbox""" + ?(Дополнительно, " checked=""checked""", "") + " id=""CheckExtra"" VALUE=""2"" style="" width: 20px;height:20px;border: none;color:#fff;background-color:#FCFAEB;"">Дополнительно
	|</td></tr>
	|</table>
	|	<p>" + Заголовок + "</p>
	|";
	
	Возврат ?(ТолькоТело, Текст, "<HTML><HEAD>
	|<META content=""text/html; charset=utf-8"" http-equiv=Content-Type>
	|<META name=GENERATOR content=""MSHTML 8.00.7601.17655""></HEAD>
	//|<BODY bgcolor=""#FCFAEB"" style=""font-family: Verdana,Geneva,sans-serif;font-size:12px;""> 
	//|<BODY style=""font-family: Verdana,Geneva,sans-serif;font-size:12px;""> 
	|<BODY>" + Текст + "</BODY></HTML>");
	
КонецФункции

Функция ОтрезатьСимволы(Строка, СимволовНеБолее)
	
	Возврат ?(СтрДлина(Строка) > СимволовНеБолее, Лев(Строка, СимволовНеБолее - 3) + " ..", Строка);
	
КонецФункции

Функция СформироватьЭлементВыбораВалюты(лВалюта)
	
	ТекстHTML = "<tr align=""right""><td colspan=""3"">Валюта <select id=""Сurrency""><option disabled>Выберите валюту</option>";

	ВсеВалюты = КэшируемыеФункции.ПолучитьВалюты();	
	Для Каждого Строка Из ВсеВалюты Цикл
		ТекстHTML = ТекстHTML + "<option "+?(лВалюта = Строка.Валюта,"selected ","") +"value="""+Строка.Валюта.УникальныйИдентификатор()+""">"+Строка.Валюта.Наименование+"</option>";
	КонецЦикла;
	ТекстHTML = ТекстHTML + "</td></tr>";
	
	Возврат ТекстHTML;
	
КонецФункции
Функция СформироватьЭлементВыбораПартнера(Контрагент)
	
	вСпискеСимволовНеБольше = 25;
	
	ТекстHTML = "<tr align=""right""><td colspan=""3"">Участник <select id=""UserSales""><option disabled>Выберите Контрагента</option>";
	ТекстHTML = ТекстHTML + "<option " + ?(ЗначениеЗаполнено(Контрагент),"","selected ") + "value=""ВсеУчастники"">Все участники акций</option>";
	ТекстHTML = ТекстHTML + "<option value=""ВыборКонтрагента"">Выбрать Контрагента</option>";
	
	Если Контрагент <> Неопределено Тогда
		ТекстHTML = ТекстHTML + "<option selected value=""" + Контрагент.УникальныйИдентификатор() + """>" + ОтрезатьСимволы(Строка(Контрагент), вСпискеСимволовНеБольше) + "</option>"; КонецЕсли;
			
	// Получим 10 последнявыбераемых партнеров
	
	СписокКонтрагентов = НастройкиПользователя.ПолучитьСписокПовторногоВвода("Контрагент");
	
	Если СписокКонтрагентов.Количество() Тогда
		
		ТекстHTML = ТекстHTML + "<option disabled>--------------------</option>";
		Для Каждого Элемент Из СписокКонтрагентов Цикл 
			Если Элемент.Значение <> Контрагент И Элемент.Значение <> Неопределено Тогда
				ТекстHTML = ТекстHTML + "<option value=""" + Элемент.Значение.УникальныйИдентификатор() + """>" + ОтрезатьСимволы(Строка(Элемент.Значение), вСпискеСимволовНеБольше) + "</option>"; КонецЕсли; КонецЦикла; КонецЕсли;
	
	ТекстHTML = ТекстHTML + "</td></tr>";
	Возврат ТекстHTML;
	
КонецФункции
Функция СформироватьЭлементВыбораПартнераДляЗамены(Контрагент)
	
	ТекстHTML = "<tr align=""right""><td colspan=""3"">Контрагент <select id=""UserSales""><option disabled>Выберите Контрагента</option>";

	ВсеВалюты = КэшируемыеФункции.ПолучитьПартнеровСЗаменойНоменклатуры();	
	Для Каждого Строка Из ВсеВалюты Цикл
		ТекстHTML = ТекстHTML + "<option "+?(Контрагент = Строка.Контрагент,"selected ","") +"value="""+Строка.Контрагент.УникальныйИдентификатор()+""">"+Строка.Контрагент.Наименование+"</option>";
	КонецЦикла;
	ТекстHTML = ТекстHTML + "</td></tr>";
	
	Возврат ТекстHTML;
	
КонецФункции

#КонецОбласти

// ПРЕЗЕНТАЦИЯ


Функция ПолучитьТабличныйДокументПрезентации(Ссылки) Экспорт
	
	ПривРежим = ПривилегированныйРежим();
	//УстановитьПривилегированныйРежим(Истина);
	
	Таблица 		= Новый ТабличныйДокумент;
	Макет 			= ПолучитьОбщийМакет("ПрезентацияТоваров");
	ОбластьШапка 	= Макет.ПолучитьОбласть("Шапка" + ?(ПолучитьФункциональнуюОпцию("НемецкийУчет"),"_de" ,""));
	Ном 			= 0;
	ТипЦeнРозница	= ОбщиеФункции.ПолучитьЗначениеКонстантыВОбласти("ТипЦенРозница");
	Валюта			= ТипЦeнРозница.Валюта;
	
	Таблица.Вывести(ОбластьШапка);
	
	Для Каждого Номенклатура Из Ссылки Цикл Ном = Ном + 1;
		
		// Описаниен на текущем языке
		//Описание = ?(Номенклатура.Язык = ПараметрыСеанса.ТекущийЯзык, Номенклатура.Описание, Translation.ПолучитьРеквизитНаЯзыке("Описание", Номенклатура));
		Описание = Номенклатура.Описание;
		
		НаименованиеТов = Строка(Номенклатура);
		ДобСтрока = ?(Найти(НаименованиеТов, Описание), "_об", "");
		ОбластьСтрока = Макет.ПолучитьОбласть(?(Ном % 2, "Строка1" + ДобСтрока, "Строка2" + ДобСтрока));
		
		ОбластьСтрока.Параметры.Номенклатура = Номенклатура;
		ОбластьСтрока.Параметры.Артикул 	= СокрЛП(Номенклатура.Артикул) + Символы.ПС + Номенклатура.Производитель;
		//ОбластьСтрока.Параметры.Описание 	= КонвертацияТипов.ПолучитьПредставлениеТекстаHTML(Описание, Истина);
		Если ДобСтрока = "" Тогда ОбластьСтрока.Параметры.Описание 	= Описание КонецЕсли;
		ОбластьСтрока.Параметры.Цена		= Формат(РаботаСНоменклатурой.ПолучитьЦену(Номенклатура, ТипЦeнРозница), "ЧЦ=15; ЧДЦ=2") + Символы.ПС + Строка(Валюта);
				
		ЯчейкаРисунка 	= ОбластьСтрока.Область("R1");
				
		ТаблицаПроверки = Новый ТабличныйДокумент;
		ТаблицаПроверки.ВысотаСтраницы = 60;
				
		Если ТаблицаПроверки.ПроверитьВывод(ОбластьСтрока) Тогда 
			ЯчейкаРисунка.ВысотаСтроки 		= 80;
			ЯчейкаРисунка.АвтоВысотаСтроки 	= Ложь;
		Иначе
			ЯчейкаРисунка.ВысотаСтроки 		= 0; 
			ЯчейкаРисунка.АвтоВысотаСтроки 	= Истина;КонецЕсли;
				
		СсылкаКартинка = Картинки.ПолучитьСсылкуОсновногоИзображения(Номенклатура);
				
		Рисунок = ОбластьСтрока.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
		Рисунок.Картинка 		= ?(СсылкаКартинка = Неопределено, БиблиотекаКартинок.НетФото, ?(СсылкаКартинка.КопияКартинки.Пустая(), СсылкаКартинка.Аватар.Получить(), СсылкаКартинка.КопияКартинки.Аватар.Получить()));
		Рисунок.ГраницаСверху 	= Ложь; 
		Рисунок.ГраницаСнизу 	= Ложь; 
		Рисунок.ГраницаСлева 	= Ложь; 
		Рисунок.ГраницаСправа 	= Ложь; 
		Рисунок.РазмерКартинки 	= РазмерКартинки.АвтоРазмер; 
				
		ОбластьСтрока.Рисунки[0].Расположить(ОбластьСтрока.Область("R1C1"));
				
		Если Не Таблица.ПроверитьВывод(ОбластьСтрока) Тогда
			Таблица.ВывестиГоризонтальныйРазделительСтраниц();
			Таблица.Вывести(ОбластьШапка); КонецЕсли;
			
		Таблица.Вывести(ОбластьСтрока); КонецЦикла;
	
	//Таблица.Параметры.
	Таблица.НижнийКолонтитул.Выводить = Истина;
	Таблица.НижнийКолонтитул.ТекстСлева = "[&НомерСтраницы]";
	
	//УстановитьПривилегированныйРежим(ПривРежим);
	
	Возврат Таблица;
	
КонецФункции


// АНАЛОГИ

Процедура ДобавитьИнформациюОАналогах(Форма) Экспорт
				
КонецПроцедуры

Процедура ДобавитьИнформациюОбАналогах(Форма) Экспорт
	
	ТипСтрока 	= Новый ОписаниеТипов("Строка");
	РеквизитыИнфТовара = Новый Массив;
	
	РеквизитыИнфТовара.Добавить(Новый РеквизитФормы("ИнфАналогиТекстHTML", 		ТипСтрока));
	РеквизитыИнфТовара.Добавить(Новый РеквизитФормы("ИнфАналогиОтображать",		Новый ОписаниеТипов("Булево")));
	
	Форма.ИзменитьРеквизиты(РеквизитыИнфТовара);

	НоваяКоманда = Форма.Команды.Добавить("ПоказатьСкрытьИнфАналоги");
	НоваяКоманда.Действие		= "ПоказатьСкрытьАналогиТовара";
    НоваяКоманда.Подсказка		= "Показать, скрыть аналоги для выделенного товара";
	НоваяКоманда.Картинка		= БиблиотекаКартинок.АналогиТовара;
	НоваяКоманда.Отображение 	= ОтображениеКнопки.Картинка;
	
	// Элементы
	
	Группа = Форма.Элементы.ГруппаАналогиТовара;
	Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	ГруппаКнопки = ДобавитьГруппуФормы(Форма.Элементы, "ГруппаАналогиТовараКартинкаКнопки", Группа);
	
	Кнопка = Форма.Элементы.Добавить("АналогиТовараКнопка", Тип("КнопкаФормы"), ГруппаКнопки);
	Кнопка.Заголовок 	= "";
	Кнопка.ИмяКоманды 	= "ПоказатьСкрытьИнфАналоги";
	
	ПолеТело = ДобавитьПолеФормы(Форма.Элементы, "ИнфАналогиТекстHTML", "ИнфАналогиТекстHTML", Группа, ВидПоляФормы.ПолеHTMLДокумента,, "ИнфАналогиТекстHTMLПриНажатии");
	ПолеТело.Ширина = 40;
	
	// раскрасим
	
	//Форма.ИнфТовараЗаголовок = "<html><body bgcolor=""#FCFAEB""></body></html>";
	Форма.ИнфАналогиТекстHTML = "<html><body bgcolor=""#FCFAEB""></body></html>";	
	
	ОбработатьОтображениеАналоговТовара(Форма) 
				
КонецПроцедуры
Процедура ОбработатьОтображениеАналоговТовара(Форма, ТоварыЭлементы = "Товары", ТоварыФорма = "Товары", Массив = Неопределено, КолонкаТовара = "Номенклатура", Контрагент = Неопределено) Экспорт
	
	ИнфАналогиОтображать = Форма.ИнфАналогиОтображать;
		
	Форма.Элементы.ИнфАналогиТекстHTML.Видимость = ИнфАналогиОтображать;
		
	Если ИнфАналогиОтображать Тогда
			
		Если Массив = Неопределено Тогда
			Массив = ПолучитьМассивВыделенныхТоваров(Форма, ТоварыЭлементы, ТоварыФорма, КолонкаТовара); КонецЕсли;
			
		Если Массив.Количество() Тогда
			Если Контрагент = Неопределено Тогда ЭлементКонтрагент = Форма.Элементы.Найти("Контрагент");
			
			Контрагент =  ?(ЭлементКонтрагент <> Неопределено, Вычислить("Форма." + ЭлементКонтрагент.ПутьКДанным), ОбщиеФункции.НастройкаПользователя("ПоУмолчанию_Контрагент", ПараметрыСеанса.ТекущийПользователь));
			КонецЕсли;
			ИнфАналоги = ПолучитьИнформациюHTMLАналоговТовара(Массив, Контрагент);
							
			Форма.ИнфАналогиТекстHTML = ИнфАналоги; КонецЕсли; КонецЕсли;

КонецПроцедуры

Функция ПолучитьИнформациюHTMLАналоговТовара(Массив, Контрагент)  Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	АналогиНоменклатуры.Номенклатура1 КАК Номенклатура,
	                      |	АналогиНоменклатуры.Номенклатура1.Артикул КАК Артикул,
	                      |	АналогиНоменклатуры.Номенклатура1.Наименование КАК Наименование,
	                      |	АналогиНоменклатуры.Номенклатура1.ВыгружатьНаСайт КАК ВыгружатьНаСайт,
	                      |	АналогиНоменклатуры.Номенклатура1.alies КАК alies,
	                      |	АналогиНоменклатуры.Номенклатура1.СсылкаURL КАК СсылкаURL,
	                      |	АналогиНоменклатуры.Номенклатура1.Производитель КАК Производитель,
	                      |	АналогиНоменклатуры.Основной КАК Основной
	                      |ПОМЕСТИТЬ ТоварыАналоги
	                      |ИЗ
	                      |	РегистрСведений.АналогиНоменклатуры КАК АналогиНоменклатуры
	                      |ГДЕ
	                      |	АналогиНоменклатуры.Номенклатура2 В(&Ссылки)
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	АналогиНоменклатуры.Номенклатура2,
	                      |	АналогиНоменклатуры.Номенклатура2.Артикул,
	                      |	АналогиНоменклатуры.Номенклатура2.Наименование,
	                      |	АналогиНоменклатуры.Номенклатура2.ВыгружатьНаСайт,
	                      |	АналогиНоменклатуры.Номенклатура2.alies,
	                      |	АналогиНоменклатуры.Номенклатура2.СсылкаURL,
	                      |	АналогиНоменклатуры.Номенклатура2.Производитель,
	                      |	АналогиНоменклатуры.Основной
	                      |ИЗ
	                      |	РегистрСведений.АналогиНоменклатуры КАК АналогиНоменклатуры
	                      |ГДЕ
	                      |	АналогиНоменклатуры.Номенклатура1 В(&Ссылки)
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ЦеныНоменклатурыСрезПоследних.Цена,
	                      |	ТоварыАналоги.Номенклатура,
	                      |	ТоварыАналоги.Артикул,
	                      |	ТоварыАналоги.Наименование,
	                      |	ТоварыАналоги.ВыгружатьНаСайт,
	                      |	ТоварыАналоги.alies,
	                      |	ТоварыАналоги.СсылкаURL,
	                      |	ТоварыАналоги.Производитель,
	                      |	ТоварыАналоги.Основной
	                      |ИЗ
	                      |	ТоварыАналоги КАК ТоварыАналоги
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	                      |				,
	                      |				ТипЦен = &Розничные
	                      |					И Номенклатура.Производитель.ЗапрещенКЗакупке = ЛОЖЬ) КАК ЦеныНоменклатурыСрезПоследних
	                      |		ПО ТоварыАналоги.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
						  |;
						  |ВЫБРАТЬ
						  |		НоменклатураЗамена 					Номенклатура,
						  |     НоменклатураЗамена.Артикул			Артикул,
						  |		НоменклатураЗамена.Наименование 	Наименование,
						  |		НоменклатураЗамена.Производитель 	Производитель
						  |ИЗ
						  |	РегистрСведений.НоменклатураЗамены.СрезПоследних(&текДата, Контрагент = &Контрагент И Номенклатура В(&Ссылки))");

	Запрос.УстановитьПараметр("Ссылки", Массив);
	Запрос.УстановитьПараметр("Розничные",Справочники.ТипыЦен.НайтиПоКоду("000000004"));
	Запрос.УстановитьПараметр("текДата", ТекущаяДата());
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	
	Рез = Запрос.ВыполнитьПакет();
	
	Выборка = Рез[1].Выбрать();
	Текст = "";
	Если Выборка.Количество() Тогда
	ЦветФонаШапки = "#F5F2DD";
	Текст = "<thead>
		 |	<tr style=""background-color: " + ЦветФонаШапки + ";font-family: Verdana,Geneva,sans-serif;font-size:10px;"">
		 |" + 	СформироватьШапкаКолонкиHTML("Изображение",,,"left") +
				СформироватьШапкаКолонкиHTML("Аналог",,,"left") +
		 		СформироватьШапкаКолонкиHTML("Производитель", ,,"left") +
				СформироватьШапкаКолонкиHTML("Розничная цена", ,,"left") + "
		 |	</tr>
		 |</thead>";	
	Текст = Текст + "<tbody border=""1"" style=""background-color:#FFF;"">";
	
	Пока Выборка.Следующий() Цикл Текст = Текст + "<tr>";
		Цвет = ?(Выборка.Основной, "#008000", "#000000");
		
		Если Выборка.ВыгружатьНаСайт И Не ПустаяСтрока(Выборка.alies) Тогда
			ТекстОткрытьСсылку = "http://www.garagetools.ru/shop/" + Выборка.alies;
		Иначе
			ТекстОткрытьСсылку = "./0";
		КонецЕсли;
		
		//Текст = Текст + "<td><a href=' " + ТекстОткрытьСсылку + "' target=""_blank""><img  width='120' src='" + Картинки.ПолучитьURLКартинкиВОблаке(Выборка.Номенклатура) + "'></a></td>";
		
		Текст = Текст + СформироватьСтрокуТаблицыHTML("<img width='100' src='" + Картинки.ПолучитьURLКартинкиВОблаке(Выборка.Номенклатура) + "'");
		
		КодПолученияТовара = "HTMLОбработкаСервер.ПолучитьОбъектПоГуидСтроке(""Справочники.Номенклатура"",""" + XMLСтрока(Выборка.Номенклатура) + """)";
 		ТекстОткрытьТовар =  "V8:ВЫПОЛНИТЬ КОД:
			|ПоказатьЗначение(, " + КодПолученияТовара + ");";
			
		Текст = Текст + СформироватьСтрокуТаблицыHTML(СформироватьСсылкаHTML(,"<b>" + СокрЛП(Выборка.Артикул) + "</b> " , "Открыть карточку товара", Цвет, ТекстОткрытьТовар) + " <br> " + Выборка.Наименование, // + " <img src ='" + ПоместитьВоВременноеХранилище(БиблиотекаКартинок.Глаз, Новый УникальныйИдентификатор) + "'>",
		"left", Цвет);
		Текст = Текст + СформироватьСтрокуТаблицыHTML(Выборка.Производитель, "left", Цвет);
	    Текст = Текст + СформироватьСтрокуТаблицыHTML(Выборка.Цена, "left", Цвет);
		Текст = Текст + "</tr>";

	КонецЦикла;
	
	//Возврат "<html><body bgcolor=""#F5F2DD""></body></html>";
	Текст = "<tr><table width=""100%"" border=""0"" cellspacing=""0"" cellpadding=""0"">
			|<caption style=""font-family: Verdana,Geneva,sans-serif;font-size:10px; font-weight: bold;""> Аналоги товара </caption>
	    	|" + Текст + "	
			|</table></tr>";
			
	КонецЕсли;		
	// ЗАМЕНА
	
	Выборка = Рез[2].Выбрать();
	Если Выборка.Количество() Тогда
		ЦветФонаШапки = "#F5F2DD";
		Текст2 = "<thead>" + СформироватьЭлементВыбораПартнераДляЗамены(Контрагент) + "<tr><br></tr>
			 |	<tr style=""background-color: " + ЦветФонаШапки + ";font-family: Verdana,Geneva,sans-serif;font-size:10px;"">
			 |" + 	СформироватьШапкаКолонкиHTML("Изображение",,,"left") +
					СформироватьШапкаКолонкиHTML("Аналог",,,"left") +
			 		СформироватьШапкаКолонкиHTML("Производитель", ,,"left") + "
			 |	</tr>
			 |</thead>";	
		Текст2 = Текст2 + "<tbody border=""1"" style=""background-color:#FFF;"">";
		
		Пока Выборка.Следующий() Цикл Текст2 = Текст2 + "<tr>";
			//Цвет = ?(Выборка.Основной, "#008000", "#000000");
			//
			//Если Выборка.ВыгружатьНаСайт И Не ПустаяСтрока(Выборка.alies) Тогда
			//	Текст2ОткрытьСсылку = "http://www.garagetools.ru/shop/" + Выборка.alies;
			//Иначе
				Текст2ОткрытьСсылку = "./0";
			//КонецЕсли;
			
			//Текст2 = Текст2 + "<td><a href=' " + Текст2ОткрытьСсылку + "' target=""_blank""><img  width='120' src='" + Картинки.ПолучитьURLКартинкиВОблаке(Выборка.Номенклатура) + "'></a></td>";
			
			Текст2 = Текст2 + СформироватьСтрокуТаблицыHTML("<img width='100' src='" + Картинки.ПолучитьURLКартинкиВОблаке(Выборка.Номенклатура) + "'");
			
			КодПолученияТовара = "HTMLОбработкаСервер.ПолучитьОбъектПоГуидСтроке(""Справочники.Номенклатура"",""" + XMLСтрока(Выборка.Номенклатура) + """)";
	 		Текст2ОткрытьТовар =  "V8:ВЫПОЛНИТЬ КОД:
				|ПоказатьЗначение(, " + КодПолученияТовара + ");";
				
			Текст2 = Текст2 + СформироватьСтрокуТаблицыHTML(СформироватьСсылкаHTML(,"<b>" + СокрЛП(Выборка.Артикул) + "</b> " , "Открыть карточку товара", Цвет, Текст2ОткрытьТовар) + " <br> " + Выборка.Наименование, // + " <img src ='" + ПоместитьВоВременноеХранилище(БиблиотекаКартинок.Глаз, Новый УникальныйИдентификатор) + "'>",
			"left", Цвет);
			Текст2 = Текст2 + СформироватьСтрокуТаблицыHTML(Выборка.Производитель, "left", Цвет);
		  //  Текст2 = Текст2 + СформироватьСтрокуТаблицыHTML(Выборка.Цена, "left", Цвет);
			Текст2 = Текст2 + "</tr>";

		КонецЦикла;
		
		//Возврат "<html><body bgcolor=""#F5F2DD""></body></html>";
		Текст = Текст + "<tr><br></tr><tr><table width=""100%"" border=""0"" cellspacing=""0"" cellpadding=""0"">
		  		|<caption style=""font-family: Verdana,Geneva,sans-serif;font-size:10px; font-weight: bold;""> Номенклатура замена для выбранного Контрагента </caption>
				|" + Текст2 + "	
				|</table></tr>";
		Иначе
		Текст = Текст + "<tr><br></tr><tr><table width=""100%"" border=""0"" cellspacing=""0"" cellpadding=""0"">
		  		|<caption style=""font-family: Verdana,Geneva,sans-serif;font-size:10px;font-weight:bold;""> Номенклатура замена для выбранного Контрагента </caption>
				|<thead>" + СформироватьЭлементВыбораПартнераДляЗамены(Контрагент) + "</thead><tr><br></tr>	
				|</table></tr>";
		
		КонецЕсли;
			
	Текст = "<table width=""100%"" border=""0"" cellspacing=""0"" cellpadding=""0"">
			|" + Текст + "	
			|</table>";
		
			
	Возврат
			"<!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Strict//EN"" ""http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"">
			|<html xmlns=""http://www.w3.org/1999/xhtml"" xml:lang=""ru"">
			|<head>
			|	<meta http-equiv=""Content-Type"" content=""text/html"" />
			|</head>
			|  
			|<body>
			|" + Текст + "	
			|</body>
			|</html>";
	
КонецФункции


#Область Информация_о_товаре

Функция ПолучитьНастройкиОперативнойИнфоОТоваре() Экспорт
	
	//	если настройки не заданы, по-умолчанию выводятся как таблица остатков так и таблица цен,
	//	выборка производится для всех складов, всех типов цен
	
	ВыбСклады 	= Новый Массив;
	ВыбТипыЦен	= Новый Массив;
    ПоказыватьОстатки 	= Истина;
	ПоказыватьЦены 		= Истина;
	ПоказыватьСборку 	= Ложь;
	ВнутренниеЗаказы 	= Ложь;
	ПоказыватьДополнительно	= Ложь;

	Настройки = ХранилищеНастроекДанныхФорм.Загрузить("ОбщиеФормы.НастройкаОперативнойИнформацииОТоваре", "НастройкиИнфТовара");

	Если Настройки <> Неопределено Тогда
		
		Склады = Настройки.Получить("Склады");
		Если Склады <> Неопределено Тогда
			Для Каждого Строка Из Склады Цикл Если Строка.Пометка Тогда ВыбСклады.Добавить(Строка.Значение); КонецЕсли; КонецЦикла; КонецЕсли;
		
		ТипыЦен = Настройки.Получить("ТипыЦен");
		Если ТипыЦен <> Неопределено Тогда
			Для Каждого Строка Из ТипыЦен Цикл Если Строка.Пометка Тогда ВыбТипыЦен.Добавить(Строка.Значение); КонецЕсли; КонецЦикла; КонецЕсли;
		
		Остатки	= Настройки.Получить("Остатки");
		Если Остатки <> Неопределено Тогда
			ПоказыватьОстатки = Остатки; КонецЕсли;
		
		Сборка	= Настройки.Получить("Сборка");
		Если Сборка <> Неопределено Тогда ПоказыватьСборку = Сборка КонецЕсли;
		
		Цены	= Настройки.Получить("Цены");
		Если Цены <> Неопределено Тогда
			ПоказыватьЦены = Цены; КонецЕсли;

		НВалюта	= Настройки.Получить("Валюта");
		Если НВалюта <> Неопределено Тогда
			Валюта = НВалюта; КонецЕсли;
		
		НКонтрагент	= Настройки.Получить("Контрагент");
		Если НКонтрагент <> Неопределено Тогда
			Контрагент = НКонтрагент; КонецЕсли;
		
		НВнутренниеЗаказы	= Настройки.Получить("ВнутренниеЗаказы");
		Если НВнутренниеЗаказы <> Неопределено Тогда
			ВнутренниеЗаказы = НВнутренниеЗаказы; КонецЕсли; 
		
	   НВДополнительно	= Настройки.Получить("Дополнительно");
		Если НВДополнительно <> Неопределено Тогда
			ПоказыватьДополнительно = НВДополнительно; КонецЕсли; КонецЕсли;

	
	Возврат Новый Структура("Склады, ТипыЦен, Остатки, Цены, Сборка, Валюта, Контрагент, ВнутренниеЗаказы, Дополнительно", ВыбСклады, ВыбТипыЦен, ПоказыватьОстатки, ПоказыватьЦены, ПоказыватьСборку, Валюта, Контрагент, ВнутренниеЗаказы,ПоказыватьДополнительно);
	
КонецФункции

Функция ОбновитьНастройкиОперативнойИнфоОТоваре(НовыеНастройки) Экспорт
	
	Настройки = ХранилищеНастроекДанныхФорм.Загрузить("ОбщиеФормы.НастройкаОперативнойИнформацииОТоваре", "НастройкиИнфТовара");
	
	Если Настройки = Неопределено Тогда
		Настройки = Новый Соответствие;
	КонецЕсли;
	
	Цены = Истина;
	Если НовыеНастройки.Свойство("Цены", Цены) Тогда
		Настройки.Вставить("Цены", Цены);
	КонецЕсли;
	
	Остатки = Истина;
	Если НовыеНастройки.Свойство("Остатки", Остатки) Тогда
		Настройки.Вставить("Остатки", Остатки);
	КонецЕсли;
	
	Сборка = Истина;
	Если НовыеНастройки.Свойство("Сборка", Сборка) Тогда
		Настройки.Вставить("Сборка", Сборка);
	КонецЕсли;
	
	Склады 	= Новый СписокЗначений;
	Если НовыеНастройки.Свойство("Склады", Склады) Тогда
		Настройки.Вставить("Склады", Склады);
	КонецЕсли;
	
	ТипыЦен = Новый СписокЗначений;
	Если НовыеНастройки.Свойство("ТипыЦен", ТипыЦен) Тогда
		Настройки.Вставить("ТипыЦен", ТипыЦен);
	КонецЕсли;
	
	Валюта = Неопределено;
	Если НовыеНастройки.Свойство("Валюта", Валюта) Тогда
		Настройки.Вставить("Валюта", Валюта);
	КонецЕсли;
	
	Контрагент = Неопределено;
	Если НовыеНастройки.Свойство("Контрагент", Контрагент) Тогда
		Настройки.Вставить("Контрагент", Контрагент);
	КонецЕсли;
	
	ВнутренниеЗаказы = Истина;
	Если НовыеНастройки.Свойство("ВнутренниеЗаказы", ВнутренниеЗаказы) Тогда
		Настройки.Вставить("ВнутренниеЗаказы", ВнутренниеЗаказы);
	КонецЕсли;
	
	Дополнительно = Истина;
	Если НовыеНастройки.Свойство("Дополнительно", Дополнительно) Тогда
		Настройки.Вставить("Дополнительно", Дополнительно);
	КонецЕсли;

	ХранилищеНастроекДанныхФорм.Сохранить("ОбщиеФормы.НастройкаОперативнойИнформацииОТоваре", "НастройкиИнфТовара", Настройки);
	
	ПараметрыСеанса["НастройкиОперативнойИнфоОТоваре"] = ЗначениеВСтрокуВнутр(РаботаСНоменклатурой.ПолучитьНастройкиОперативнойИнфоОТоваре());

КонецФункции

Функция ПолучитьИнформациюHTMLОТоваре(Массив, Валюта) Экспорт
	
	Структура = Новый Структура("Заголовок, АдресКартинки, ТекстHTML","","","");
	
	Если Массив.Количество() Тогда                                    
		Заголовок 	= "";
		Структура.ТекстHTML 	= ПолучитьТекстHTMLОТоваре(Массив, Валюта, Заголовок);
		Структура.АдресКартинки	= Картинки.ПолучитьНавигационнуюСсылкуОсновногоИзображения(Массив[0]);
		Структура.Заголовок		= Заголовок;
	КонецЕсли;
	
	Возврат Структура;
			
КонецФункции
Функция ПолучитьКартинкиМатриц_Ст(Массив)
	
	//Строки = Новый Массив;
	//
	//// Найдем какие матрицы есть
	//
	//Матрицы = Матрицы(); ЕстьМатр = Новый Структура;
	//Для КАждого Эл Из Матрицы Цикл ЕстьМатр.Вставить(Эл, Ложь) КонецЦикла;
	//
	//Для Каждого Товар Из Массив Цикл
	//	Если НЕ Товар.ЭтоГруппа Тогда
	//		Для КАждого Матрица Из Матрицы Цикл
	//			
	//			Если Матрица.Это1К1 Тогда	ЕстьМатрица = Товар[Матрица.ИмяРеквизита] = Справочники.Матрицы[Матрица.Имя];
	//			Иначе						ЕстьМатрица = Товар[Матрица.ИмяРеквизита + Матрица.Имя]; КонецЕсли;
	//			
	//			Если ЕстьМатрица Тогда
	//				ЕстьМатр.Вставить(Матрица.Имя, Истина) КонецЕсли; КонецЦикла; КонецЕсли; КонецЦикла;
	//
	//// Состряпаем картинки из имеющихся матриц
	//                                         
	//Для Каждого Элемент Из ЕстьМатр Цикл                                
	//	Если Элемент.Значение Тогда
	//		//Строки.Добавить("<img  width='32' height='32' src='" + ПараметрыСеанса.СсылкиНаКартинкиМатриц[Элемент.Ключ] + "'>"); КонецЕсли; КонецЦикла;
	//		Строки.Добавить("<img  width='32' height='32' src='" + ПолучитьНавигационнуюСсылку(Справочники.Матрицы[Элемент.Ключ], "Картинка_32") + "'>"); КонецЕсли; КонецЦикла;
	//
	//// Вернем
	//
	//Возврат СтрСоединить(Строки, Символы.ПС);
	
КонецФункции
Функция ПолучитьКартинкиМатриц(Массив)
	
	Строки 	= Новый Массив;
	Матрицы = Матрицы(); 
	
	// Найдем какие матрицы есть
	
	Для Каждого Товар Из Массив Цикл
		Если НЕ Товар.ЭтоГруппа Тогда
			Для КАждого Матрица Из Матрицы Цикл
				
				Если 	(Матрица.Это1К1 И Товар[Матрица.ИмяРеквизита] = Матрица.Ссылка) ИЛИ
						(НЕ Матрица.Это1К1 И Товар[Матрица.ИмяРеквизита + Матрица.Имя]) Тогда
						
					Строки.Добавить("<img  width='32' height='32' src='" + ПолучитьНавигационнуюСсылку(Матрица.Ссылка, "Картинка_32") + "' title=""" + Матрица.Наименование + """>"); КонецЕсли; КонецЦикла; КонецЕсли; КонецЦикла;
	// Вернем
	
	Возврат СтрСоединить(Строки, Символы.ПС);
	
КонецФункции
Функция ПолучитьИнформациюHTMLОТовареВсюВHTML(Массив, Валюта = Неопределено) Экспорт
	
	Если Валюта = Неопределено Тогда Валюта = КэшируемыеФункции.ВалютаУправленческогоУчета() КонецЕсли;
	
	Заголовок 		= "";
	ТаблицаHTML 	= ПолучитьТекстHTMLОТоваре(Массив, Валюта, Заголовок,,Истина);
	
	КодПолученияСсылки = "HTMLОбработкаСервер.ПолучитьОбъектПоГуидСтроке(""Справочники.Номенклатура"",""" + XMLСтрока(Массив[0]) + """)";
	
	Возврат "
	|<html>
	|<head>
	|	<meta http-equiv=""Content-Type"" content=""text/html"" />
	//|	<meta http-equiv=""X-UA-Compatible"" content=""IE=9"">
	|<style>
	|.image {
	|   filter: progid:DXImageTransform.Microsoft.Shadow(color=#aaaaaa,direction=125,strength=3);
	|	width: 130px; 
	|	height: 130px;
	|	float:left;
	|}
	|.image table tr td {
	|	padding: 0;
	|	margin: 0;
	|	border: 0;
	|	height: 100%;
	|	width: 100%;
	|}               
	|.image table {
	|	border-collapse: collapse;
	|	height: 100%;
	|	width: 100%;
	|}
	|.image td {
	|	 vertical-align: middle;
	|	 text-align: center;
	|}
	|.head {
	|	float:left;
	|	height:120px;
	|}
	|.table {
	|	position: relative;
	|}
	|</style>
	|</head>
	|<body>
	
	|" + ПолучитьКартинкиМатриц(Массив) + "

	
	|<div class=""image""><table><tr><td><a href='
	 	|V8:ВЫПОЛНИТЬ КОД: ОткрытьФорму(""Справочник.КартинкиНоменклатуры.ФормаСписка"", Новый Структура(""ТекущаяСтрока"", " + КодПолученияСсылки + "));
	|'><img  width='120' src='" + Картинки.ПолучитьURLКартинкиВОблаке(Массив[0]) + "'></a></td></tr></table></div>

	//|<div class=""image""><img width='120' height='120' src='" + Картинки.ПолучитьURLКартинкиВОблаке(Массив[0]) + "'></img></div>
	
	|<div class=""head"">" + Заголовок + "</div>
	
	|<div class=""table"">
	|" + ТаблицаHTML + "
	|</div>
	
	|</body>
	|</html>
	|";
			
КонецФункции

Функция ДобавитьПолеФормы(Элементы, Имя, ПутьКДанным, Родитель, ВидПоляФормы, Заголовок = Неопределено, ОбработчикПриНажатии = "", ТолькоПросмотр = Ложь)
      
	НовоеПоле = Элементы.Добавить(Имя, Тип("ПолеФормы"), Родитель);
	НовоеПоле.Вид = ВидПоляФормы;
	НовоеПоле.ПутьКДанным = ПутьКДанным;
	НовоеПоле.Заголовок = ?(ЗначениеЗаполнено(Заголовок), Заголовок, "");
	НовоеПоле.ТолькоПросмотр = ТолькоПросмотр;
	НовоеПоле.ПоложениеЗаголовка = ?(ЗначениеЗаполнено(Заголовок), ПоложениеЗаголовкаЭлементаФормы.Авто, ПоложениеЗаголовкаЭлементаФормы.Нет);
   	НовоеПоле.ЦветРамки = Новый Цвет(252, 250, 235);

	Если ЗначениеЗаполнено(ОбработчикПриНажатии) Тогда
		НовоеПоле.УстановитьДействие("ПриНажатии", ОбработчикПриНажатии);
	КонецЕсли;
	
	Возврат НовоеПоле;
	
КонецФункции
Функция ДобавитьГруппуФормы(Элементы, Имя, Родитель, Заголовок = Неопределено)

	НоваяГруппа = Элементы.Добавить(Имя, Тип("ГруппаФормы"), Родитель);	
	НоваяГруппа.Заголовок = ?(ЗначениеЗаполнено(Заголовок), Заголовок, "");
	НоваяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	НоваяГруппа.ОтображатьЗаголовок = Ложь;
	НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
	
	Возврат НоваяГруппа;
	
КонецФункции

Процедура ДобавитьОперативнуюИнформациюОТоваре(Форма, ОтображатьЦены = Истина) Экспорт
	
	// Реквизиты
	
	ТипСтрока 	= Новый ОписаниеТипов("Строка");
	РеквизитыИнфТовара = Новый Массив;
	
	//РеквизитыИнфТовара.Добавить(Новый РеквизитФормы("ИнфТовараАдресКартинки", 	ТипСтрока));
	//РеквизитыИнфТовара.Добавить(Новый РеквизитФормы("ИнфТовараЗаголовок", 		ТипСтрока));
	
	РеквизитыИнфТовара.Добавить(Новый РеквизитФормы("ИнфТовараТекстHTML", 		ТипСтрока));
	РеквизитыИнфТовара.Добавить(Новый РеквизитФормы("ИнфТовраОтображать",		Новый ОписаниеТипов("Булево")));
	
	Форма.ИзменитьРеквизиты(РеквизитыИнфТовара);

	НоваяКоманда = Форма.Команды.Добавить("ПоказатьСкрытьИнфОТоваре");
	НоваяКоманда.Действие		= "ПоказатьСкрытьИнфОТоваре";
    НоваяКоманда.Подсказка		= "Показать, скрыть информацию о товарах в выделенных строках таблицы";
	НоваяКоманда.Картинка		= БиблиотекаКартинок.ИнформацияОТоваре;
	НоваяКоманда.Отображение 	= ОтображениеКнопки.Картинка;
	
	НоваяКоманда = Форма.Команды.Добавить("НастройкаИнфОТоваре");
	НоваяКоманда.Действие		= "НастройкаИнфОТоваре";
    НоваяКоманда.Подсказка		= "Параметры отображения оперативной информации о товаре";
	НоваяКоманда.Картинка		= БиблиотекаКартинок.НастройкиОтчета;
	НоваяКоманда.Отображение 	= ОтображениеКнопки.Картинка;
	
	// Элементы
	
	Группа = Форма.Элементы.ГруппаОперативнойИнформацииТовара;
	Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	//Группа.РастягиватьПоВертикали = Истина;
	
	//ГруппаШапка = ДобавитьГруппуФормы(Форма.Элементы, "ГруппаИнфТовараШапка", Группа);
	//ГруппаШапка.Ширина = 0;
	//ГруппаШапка.Высота = 6;
	//ГруппаШапка.РастягиватьПоВертикали = Ложь;

	//ГруппаКартинкаКнопки = ДобавитьГруппуФормы(Форма.Элементы, "ГруппаИнфТовараКартинкаКнопки", ГруппаШапка);
	//ГруппаКартинкаКнопки.Ширина = 0;
	//ГруппаКартинкаКнопки.Высота = 6;
	//ГруппаКартинкаКнопки.РастягиватьПоВертикали = Ложь;
	//ГруппаКартинкаКнопки.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	
	//ГруппаКнопки = ДобавитьГруппуФормы(Форма.Элементы, "ГруппаКнопкиИнфТовара", ГруппаКартинкаКнопки);
	ГруппаКнопки = ДобавитьГруппуФормы(Форма.Элементы, "ГруппаИнфТовараКартинкаКнопки", Группа);
	
	Кнопка = Форма.Элементы.Добавить("ИнфТовараКнопка", Тип("КнопкаФормы"), ГруппаКнопки);
	Кнопка.Заголовок 	= "";
	Кнопка.ИмяКоманды 	= "ПоказатьСкрытьИнфОТоваре";
	
	Кнопка = Форма.Элементы.Добавить("ИнфТовараКнопкаНастройки", Тип("КнопкаФормы"), ГруппаКнопки);
	Кнопка.Заголовок 	= "";
	Кнопка.ИмяКоманды 	= "НастройкаИнфОТоваре";
	
	Кнопка = Форма.Элементы.Добавить("ИнфТовараКнопкаОтчетыТовара", Тип("КнопкаФормы"), ГруппаКнопки);
	Кнопка.Заголовок 	= "";
	Кнопка.Картинка		= БиблиотекаКартинок.ОтчетыТовара;
	Кнопка.ИмяКоманды 	= "НастройкаИнфОТоваре";


	//ГруппаШапка = ДобавитьГруппуФормы(Форма.Элементы, "ГруппаИнфТовараШапка", Группа);
	//ГруппаШапка.Ширина = 0;
	//ГруппаШапка.Высота = 5;
	//ГруппаШапка.РастягиватьПоВертикали = Ложь;
					
	//ПолеКартинки  = ДобавитьПолеФормы(Форма.Элементы, "ИнфТовараКартинка",  "ИнфТовараАдресКартинки", ГруппаКартинкаКнопки, ВидПоляФормы.ПолеКартинки);
	//ПолеКартинки.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
	//ПолеКартинки.Ширина = 10;
	//ПолеКартинки.Высота = 5;
	//ПолеКартинки.РастягиватьПоВертикали = Ложь;
	//ПолеКартинки.РастягиватьПоГоризонтали = Ложь;
	//ПолеКартинки.РазмерКартинки = РазмерКартинки.Пропорционально;
	//
	//ПолеЗаголовка = ДобавитьПолеФормы(Форма.Элементы, "ИнфТовараЗаголовок", "ИнфТовараЗаголовок",	  ГруппаШапка, ВидПоляФормы.ПолеHTMLДокумента, ,"ИнфТовараЗаголовокHTMLПриНажатии");
	//ПолеЗаголовка.Ширина = 20;
	
	ПолеТело = ДобавитьПолеФормы(Форма.Элементы, "ИнфТовараТекстHTML", "ИнфТовараТекстHTML", Группа, ВидПоляФормы.ПолеHTMLДокумента, ,"ИнфТовараТекстHTMLПриНажатии");
	ПолеТело.Ширина = 20;
	
	// раскрасим
	
	//Форма.ИнфТовараЗаголовок = "<html><body bgcolor=""#FCFAEB""></body></html>";
	Форма.ИнфТовараТекстHTML = "<html><body bgcolor=""#FCFAEB""></body></html>";	
	
	ОбработатьОтображениеИнформацииОТоваре(Форма) 
	
КонецПроцедуры


Функция СкладДляРасшифровки(Код, СкладСсылка) Экспорт
	
	СкладСсылка = Справочники.Склады.НайтиПоКоду(Код);
	Если ЗначениеЗаполнено(СкладСсылка) Тогда
		Возврат Истина;				
	КонецЕсли;
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьМассивВыделенныхТоваров(Форма, ТоварыЭлементы = "Товары", ТоварыФорма = "Товары", КолонкаТовара = "Номенклатура")
	
	Строки = Форма.Элементы[ТоварыЭлементы].ВыделенныеСтроки;
	Массив = Новый Массив;
	
	Если Строки.Количество() Тогда
					
		Для Каждого Идентификатор Из Строки Цикл
			
				Строка = ?(ТоварыЭлементы = "Список", Идентификатор, Вычислить("Форма." + ТоварыФорма).НайтиПоИдентификатору(Идентификатор));
				Если Строка <> Неопределено Тогда
					текТовар = ?(ТоварыЭлементы = "Список", Строка, Строка[КолонкаТовара]);
					Если ТипЗнч(текТовар) = Тип("СправочникСсылка.Номенклатура") Тогда
						Массив.Добавить(текТовар); КонецЕсли; КонецЕсли; КонецЦикла; КонецЕсли;
	Возврат Массив;
	
КонецФункции
Процедура ОбработатьОтображениеИнформацииОТоваре(Форма, ТоварыЭлементы = "Товары", ТоварыФорма = "Товары", Массив = Неопределено, КолонкаТовара = "Номенклатура") Экспорт
	
	ИнфТовраОтображать = Форма.ИнфТовраОтображать;
	
	Если ИнфТовраОтображать <> Форма.Элементы.ИнфТовараТекстHTML.Видимость Тогда // Только если изменилось то только тогда  есть смысл подавать сигнал на обновление
		
		Форма.Элементы.ИнфТовараТекстHTML.Видимость 		= ИнфТовраОтображать;
		Форма.Элементы.ИнфТовараКнопкаНастройки.Видимость	= ИнфТовраОтображать;
		Форма.Элементы.ИнфТовараКнопкаОтчетыТовара.Видимость= ИнфТовраОтображать; КонецЕсли;
			
	Если ИнфТовраОтображать Тогда
			
		Если Массив = Неопределено Тогда
			Массив = ПолучитьМассивВыделенныхТоваров(Форма, ТоварыЭлементы, ТоварыФорма, КолонкаТовара); КонецЕсли;
			
		Если Массив.Количество() Тогда
			ЭлементВалюта = Форма.Элементы.Найти("Валюта");
			ИнфОТоваре = ПолучитьИнформациюHTMLОТовареВсюВHTML(Массив, ?(ЭлементВалюта <> Неопределено, Вычислить("Форма." + ЭлементВалюта.ПутьКДанным), КэшируемыеФункции.ВалютаУправленческогоУчета()));
							
			Форма.ИнфТовараТекстHTML = ИнфОТоваре; КонецЕсли; КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПолучитьАртикулПоставщика(Номенклатура,Поставщик) Экспорт
	Запрос = Новый Запрос("Выбрать Разрешенные АртикулПоставщика из РегистрСведений.НоменклатураПартнеров ГДЕ Номенклатура=&Номенклатура и Контрагент=&Контрагент");
	Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
	Запрос.УстановитьПараметр("Контрагент",Поставщик);
	Рез=Запрос.Выполнить();
	Если Не Рез.Пустой() Тогда
		Возврат Рез.Выгрузить()[0].АртикулПоставщика;
	Иначе
		Возврат "";
	КонецЕсли;	
	 
КонецФункции	

#КонецОбласти

// АНАЛИЗ

Функция ОпределитьНеудовлетворенныйСпрос(ТаблицаПоЗаказам, Заказ, Склад, Подразделение, Период) Экспорт
	
	// Возвращает таблицу для проведения по неудовлетворенному спросу
	// смотри какой товар был удален из заказа и если этого товара не хватало на остатках
	// тогда такой товар попадает в неудовлетворенный спрос
	
	
	// Вытащим отрицательное количество (удаленное)
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Таблица.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	
	Для КАждого Строка Из ТаблицаПоЗаказам Цикл Если Строка.Количество < 0 Тогда ЗаполнитьЗначенияСвойств(Таблица.Добавить(), Строка) КонецЕсли; КонецЦикла;
	Таблица.Свернуть("Номенклатура", "Количество, Сумма");
		
	// Проверим остатки
	
	Запрос = Новый Запрос("
	
	// Поместим таблицу в запрос
	
	|ВЫБРАТЬ	Табл.Номенклатура Номенклатура, -Табл.Количество Количество, -Табл.Сумма Сумма
	|ПОМЕСТИТЬ	Спрос
	|ИЗ			&Таблица Табл
	|ГДЕ		Табл.Количество < 0;
	
	// Получим остатки
	
	|ВЫБРАТЬ 	Ост.Номенклатура, Ост.КоличествоОстаток - ЕСтьNULL(Рез.КоличествоОстаток, 0) Количество
	|ПОМЕСТИТЬ 	Остатки
	|ИЗ 		РегистрНакопления.ТоварыНаСкладах.Остатки(&Период, Номенклатура В(ВЫБРАТЬ Номенклатура ИЗ Спрос)) Ост
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ	РегистрНакопления.ТоварыВРезерве.Остатки(&Период, Номенклатура В(ВЫБРАТЬ Номенклатура ИЗ Спрос)) Рез
	|ПО					Ост.Номенклатура = Рез.Номенклатура;
	
	// Сравним таблицы
	
	|ВЫБРАТЬ 	&Период Период, &Заказ Заказ, &Склад Склад, &Подразделение Подразделение, Док.Номенклатура, 
	|			Док.Количество - ЕСТЬNULL(Ост.Количество, 0) Количество,
	|			ВЫБОР 
	|				КОГДА Док.Сумма = 0 ТОГДА 0 
	|				ИНАЧЕ ((Док.Количество - ЕСТЬNULL(Ост.Количество, 0)) * Док.Сумма) / Док.Количество
	|			КОНЕЦ Сумма
	|ИЗ 
	|	Спрос Док
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Остатки Ост
	|ПО
	|	Док.Номенклатура = Ост.Номенклатура
	|
	|ГДЕ
	|	Док.Количество - ЕСТЬNULL(Ост.Количество, 0) > 0
	|");
	
	Запрос.УстановитьПараметр("Таблица", 		ТаблицаПоЗаказам);
	Запрос.УстановитьПараметр("ДатаЗаказа", 	Заказ.Дата);
	Запрос.УстановитьПараметр("Заказ", 			Заказ);
	Запрос.УстановитьПараметр("Склад",			Склад);
	Запрос.УстановитьПараметр("Подразделение", 	Подразделение);
	Запрос.УстановитьПараметр("Период",			Период);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции



#Область Сайт

Функция ИмяОсновногоСайта() Экспорт
	
	Возврат "Основной";
	
КонецФункции

Функция ИмяСайтаИзТипаОбъекта(Объект) Экспорт
	
	Если Объект = Неопределено Тогда Возврат ИмяОсновногоСайта() КонецЕсли;
	Имя = Объект.Метаданные().Имя;
	
	Если Имя = "Номенклатура" Тогда
			Возврат ИмяОсновногоСайта();
	Иначе	Возврат Сред(Имя, 17); КонецЕсли;
	
КонецФункции

Функция ЭтотСайтОсновной(ИмяСайта) Экспорт
	
	Возврат ИмяСайта = ИмяОсновногоСайта() Или ИмяСайта = "";
	
КонецФункции

#КонецОбласти

#Область Матрицы

Функция Матрицы(ВернутьМассив = Ложь) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ ИмяПредопределенныхДанных Имя, ИмяРеквизита, Это1К1, Наименование, Ссылка  ИЗ Справочник.Матрицы ГДЕ Предопределенный УПОРЯДОЧИТЬ ПО КОД");
	Табл = Запрос.Выполнить().Выгрузить();
	
	Возврат ?(ВернутьМассив, Табл.ВыгрузитьКолонку("Имя"), Табл);
	
КонецФункции
Функция СписокМатриц(ТипМатрицы = Неопределено) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ ИмяПредопределенныхДанных Имя, Наименование, Картинка_32 ИЗ Справочник.Матрицы ГДЕ Предопределенный" + ?(ТипМатрицы = Неопределено, "", " И ТипМатрицы = &ТипМатрицы") + " УПОРЯДОЧИТЬ ПО КОД");
	Запрос.УстановитьПараметр("ТипМатрицы", ТипМатрицы);
	
	Возврат КонвертацияТипов.ПолучитьСписокЗначенийИзВыборки(Запрос.Выполнить().Выбрать(), "Имя", "Наименование",,"Картинка_32");
	
КонецФункции

Функция ИмяРеквизитаКартинкиМатрицы(Вкл) Возврат "Картинка_32" + ?(Вкл, "", "_откл") КонецФункции
Функция ИмяРеквизитаМатрицыВТоваре(Матрица, Имя = "Имя") Экспорт Возврат ?(Матрица.Это1К1, Матрица.ИмяРеквизита, Матрица.ИмяРеквизита + Матрица[Имя]) КонецФункции

Функция ПолучитьНастройкиМатриц(Матрицы = Неопределено)
	
	Если Матрицы = Неопределено Тогда Матрицы = Матрицы() КонецЕсли;
	
	ПоУмолч = Новый Структура("Использовать", Ложь);
	Для Каждого Строка Из Матрицы Цикл ПоУмолч.Вставить(Строка.Имя, Истина) КонецЦикла;
	
	Настройки = ХранилищеНастроекДанныхФорм.Загрузить("Матрицы", "Отображение");
	Если Настройки = Неопределено Тогда Возврат ПоУмолч;
	Иначе
		// Проверим чтобы все было на месте
		
		Для Каждого Элемент Из ПоУмолч Цикл
			Если Не Настройки.Свойство(Элемент.Ключ) Тогда
				Настройки.Вставить(Элемент.Ключ, Элемент.Значение); КонецЕсли; КонецЦикла;
		
		Возврат Настройки; КонецЕсли;
		
КонецФункции
Процедура СохранитьНастройкуМатриц(Имя, Значение)
	
	Настройки = ПолучитьНастройкиМатриц();
	Настройки.Вставить(Имя, Значение);
		
	ХранилищеНастроекДанныхФорм.Сохранить("Матрицы", "Отображение", Настройки);
	
КонецПроцедуры

Процедура ИзменилсяФильтрМатрицы(Форма, ИмяЭлементаКартинкиМатрицы, Спиок, СохранятьВНастройках = Истина) Экспорт
	
	Вкл 		= Форма[ИмяЭлементаКартинкиМатрицы];
	ФильтрВкл 	= Форма.МатрицаФильтровать;
	ИмяМатрицы	= Сред(ИмяЭлементаКартинкиМатрицы, стрДлина("Матрица") + 1);
	
	Форма["Картинка" + ИмяМатрицы] = ПолучитьНавигационнуюСсылку(Справочники.Матрицы[ИмяМатрицы], ИмяРеквизитаКартинкиМатрицы(Вкл));
	
	//Форма.Элементы[ИмяМатрицы + "Вкл"].Видимость 	= Не ФильтрВкл Или Вкл;
	//Форма.Элементы[ИмяМатрицы + "Выкл"].Видимость 	= ФильтрВкл И Не Вкл;
	
	// Сохраним в настройках
	
	Если СохранятьВНастройках Тогда 
		//СохранитьНастройкуМатриц(Сред(ИмяМатрицы, СтрДлина("Матрица") + 1), Вкл) КонецЕсли;
		СохранитьНастройкуМатриц(ИмяМатрицы, Вкл) КонецЕсли;
	
	// Установим новые настройки фильтра
	
	Спиок.Параметры.УстановитьЗначениеПараметра(ИмяЭлементаКартинкиМатрицы, Вкл);
	
КонецПроцедуры
Процедура УстановитьЗначениеВсехМатриц(Значение, Форма, Список) Экспорт
	
	Для Каждого Суфф ИЗ Матрицы(Истина) Цикл Форма["Матрица" + Суфф] = Значение КонецЦикла;
	ОбновитьВидимостьВсехМатриц(Форма, Список, Истина);
	
КонецПроцедуры
Процедура ОбновитьВидимостьВсехМатриц(Форма, Список, СохранятьВНастройках = Ложь, Матрицы = Неопределено)
	
	Если Матрицы = Неопределено Тогда Матрицы = Матрицы(Истина) КонецЕсли;
	
	//Для Каждого Суфф ИЗ Матрицы Цикл
	Для Каждого Матрица ИЗ Матрицы Цикл
		//ИзменилсяФильтрМатрицы(Форма, "Матрица" + Суфф, Список, СохранятьВНастройках); КонецЦикла;
		ИзменилсяФильтрМатрицы(Форма, "Матрица" + Матрица, Список, СохранятьВНастройках); КонецЦикла;
		
КонецПроцедуры

Процедура МатрицаФильтроватьИзменении(Форма, Список) Экспорт
	
	Список.Параметры.УстановитьЗначениеПараметра("МатрицыВключены", Форма.МатрицаФильтровать);
	СохранитьНастройкуМатриц("Использовать", Форма.МатрицаФильтровать);
	
	ОбновитьВидимостьВсехМатриц(Форма, Список);
	
КонецПроцедуры

Процедура ДобавитьКартинкуДекорацию(Имя, Картинка, Форма, ГруппаФормы)
	
	Декорация = Форма.Элементы.Добавить(Имя, Тип("ДекорацияФормы"), ГруппаФормы);
	Декорация.Вид 				= ВидДекорацииФормы.Картинка;
	//Декорация.Гиперссылка	 	= Истина;
	Декорация.Ширина			= 2;
	Декорация.Высота			= 1;
	Декорация.РазмерКартинки 	= РазмерКартинки.Пропорционально;
	Декорация.Картинка 			= Картинка;
	
КонецПроцедуры
Процедура ДобавитьКартинкуПоля(Имя, Подсказка, Форма, ГруппаФормы)
	
	Декорация = Форма.Элементы.Добавить("Матрица" + Имя, Тип("ПолеФормы"), ГруппаФормы);
	Декорация.Вид 				= ВидПоляФормы.ПолеКартинки;
	Декорация.Гиперссылка	 	= Истина;
	Декорация.Ширина			= 2;
	Декорация.Высота			= 1;
	Декорация.Подсказка			= Подсказка;
	Декорация.РазмерКартинки 	= РазмерКартинки.Пропорционально;
	Декорация.Рамка				= Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
	Декорация.ПутьКДанным		= "Картинка" + Имя;
	Декорация.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	Декорация.РастягиватьПоГоризонтали = Ложь;
	Декорация.РастягиватьПоВертикали = Ложь;
	
	Декорация.УстановитьДействие("Нажатие", "ОбработкаДействияФильтраМатрицы");
	
	//Декорация.Обновить();
	
	//Декорация = Форма.Элементы.Добавить(Имя, Тип("ДекорацияФормы"), ГруппаФормы);
	//Декорация.Вид 				= ВидДекорацииФормы.Картинка;
	//Декорация.Гиперссылка	 	= Истина;
	//Декорация.Ширина			= 2;
	//Декорация.Высота			= 1;
	//Декорация.Подсказка			= Подсказка;
	//Декорация.РазмерКартинки 	= РазмерКартинки.Пропорционально;
	//
	//Если Картинка <> Неопределено Тогда Декорация.Картинка = ?(ТипЗнч(Картинка) = Тип("ДвоичныеДанные"), Новый картинка(Картинка), Картинка); КонецЕсли;
	//Если ИмяПроцедурыДействия <> "" Тогда Декорация.УстановитьДействие("Нажатие", ИмяПроцедурыДействия); КонецЕсли;
	
КонецПроцедуры
Процедура ДобавитьДекорациюПоТипуМатрицы(Тип, Форма, ГруппаФормы, Матрицы)
	
	СтрокиМатриц = Матрицы.НайтиСтроки(Новый Структура("ТипМатрицы", Тип));
	
	Для Каждого Строка Из СтрокиМатриц Цикл
		//ДобавитьДекорацию(Строка.Имя + "Вкл", 	Строка.Наименование, Строка.Картинка_32.Получить(), 		Форма, ГруппаФормы, "ОбработкаДействияФильтраМатрицы");
		ДобавитьКартинкуПоля(Строка.Имя, Строка.Наименование, Форма, ГруппаФормы); КонецЦикла;
	
КонецПроцедуры
Процедура ДобавитьМатрицы(Форма, Список) Экспорт
	
	Запрос 	= Новый Запрос("ВЫБРАТЬ Ссылка, ТипМатрицы, ИмяРеквизита, Наименование, Это1К1, ИмяПредопределенныхДанных Имя ИЗ Справочник.Матрицы ГДЕ Предопределенный УПОРЯДОЧИТЬ ПО КОД");
	Матрицы = Запрос.Выполнить().Выгрузить();
	
	// Получим настройки
	
	Настройки 	= ПолучитьНастройкиМатриц(Матрицы);
	ГруппаФормы = Форма.Элементы.Найти("ГруппаФильтраМатриц");
	ГруппаФормы.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	// Добавим кнопку управления
	
	НоваяКоманда = Форма.Команды.Добавить("КнопкаУправленияМатрицами");
	НоваяКоманда.Действие = "КнопкаУправленияМатрицами";
    НоваяКоманда.Подсказка	= "Матрицы";
	
	Кнопка = Форма.Элементы.Добавить("КнопкаВыбратьВсеМатрицы", Тип("КнопкаФормы"), ГруппаФормы);
	Кнопка.Отображение 	= ОтображениеКнопки.Картинка;
	Кнопка.Картинка		= БиблиотекаКартинок.Матрица;
	Кнопка.ИмяКоманды 	= "КнопкаУправленияМатрицами";
	
	Кнопка.Ширина = 3;
	Кнопка.Высота = 1;
	
	// Добавим реквизиты
	
	ТипБулево = Новый ОписаниеТипов("Булево");
	ТипСтрока = Новый ОписаниеТипов("Строка");
	
	РеквизитыИнфТовара = Новый Массив;
	РеквизитыИнфТовара.Добавить(Новый РеквизитФормы("МатрицаФильтровать", 	ТипБулево));
	Для Каждого Строка Из Матрицы Цикл
		РеквизитыИнфТовара.Добавить(Новый РеквизитФормы("Картинка" + Строка.Имя, ТипСтрока));
		РеквизитыИнфТовара.Добавить(Новый РеквизитФормы("Матрица" + Строка.Имя, ТипБулево)); КонецЦикла;
	
	Форма.ИзменитьРеквизиты(РеквизитыИнфТовара);
	
	// Добавим флажки
	
	Галка = Форма.Элементы.Добавить("МатрицаФильтровать", Тип("ПолеФормы"), ГруппаФормы);
	Галка.ПутьКДанным			= "МатрицаФильтровать";
	Галка.Вид 					= ВидПоляФормы.ПолеФлажка;
	Галка.ПоложениеЗаголовка 	= ПоложениеЗаголовкаЭлементаФормы.Нет;
	Галка.Подсказка 			= "Фильтровать по матрицам";
	Галка.УстановитьДействие("ПриИзменении", "МатрицаФильтроватьИзменении");
	
	// Установим настройки
	
	Форма.МатрицаФильтровать = Настройки.Использовать;
	Для Каждого Строка Из Матрицы Цикл
		Форма["Картинка" + Строка.Имя] 	= ПолучитьНавигационнуюСсылку(Справочники.Матрицы[Строка.Имя], ИмяРеквизитаКартинкиМатрицы(Настройки[Строка.Имя]));
		Форма["Матрица" + Строка.Имя] 	= Настройки[Строка.Имя]; КонецЦикла;
	
	// Добавим красивые картинки
	
	ДобавитьДекорациюПоТипуМатрицы(Перечисления.ТипыМатриц.ПоКлиентам,Форма, ГруппаФормы, Матрицы);
	ДобавитьКартинкуДекорацию("МатрицаРаздел1",БиблиотекаКартинок.Линия, Форма, ГруппаФормы);
	ДобавитьДекорациюПоТипуМатрицы(Перечисления.ТипыМатриц.ПоКачеству,Форма, ГруппаФормы, Матрицы);
	ДобавитьКартинкуДекорацию("МатрицаРаздел2",БиблиотекаКартинок.Линия, Форма, ГруппаФормы);
	ДобавитьДекорациюПоТипуМатрицы(Перечисления.ТипыМатриц.ПоНаличию, Форма, ГруппаФормы, Матрицы);
	ДобавитьКартинкуДекорацию("МатрицаРаздел3",БиблиотекаКартинок.Линия, Форма, ГруппаФормы);
	ДобавитьДекорациюПоТипуМатрицы(Перечисления.ТипыМатриц.ПоДоступности, Форма, ГруппаФормы, Матрицы);
	
	// Установим текст и параметры запроса
	
	стр = "";
	
	Для Каждого Строка ИЗ Матрицы Цикл
		
		ИмяПараметра = "Матрица" + Строка.Имя;
		ИмяРеквизита = Строка.ИмяРеквизита + Строка.Имя;
		стр = стр + ?(стр = "",""," ИЛИ ") + "(&Матрица" + Строка.Имя + " = ИСТИНА И ";
		
		Если Строка.Это1К1 Тогда	стр = стр + "&" + ИмяРеквизита + " = " + Строка.ИмяРеквизита + ")";
		Иначе						стр = стр 		+ ИмяРеквизита + " = ИСТИНА)"; КонецЕсли; КонецЦикла;
		
	Форма.Список.ТекстЗапроса = СтрЗаменить(Форма.Список.ТекстЗапроса,
				"// Тут появятся условия по матрицам",  // Ищем в запросе такой текст для замены
				"И НЕ &МатрицыВключены ИЛИ (" + стр + ")");
	
	Список.Параметры.УстановитьЗначениеПараметра("МатрицыВключены", Настройки.Использовать);
	Для Каждого Строка Из Матрицы Цикл
		
		ВклНаФорме = Форма["Матрица" + Строка.Имя];
		
		Список.Параметры.УстановитьЗначениеПараметра("Матрица" + Строка.Имя, ВклНаФорме); 
		Если Строка.Это1К1 Тогда
			Список.Параметры.УстановитьЗначениеПараметра(Строка.ИмяРеквизита + Строка.Имя, Строка.Ссылка); КонецЕсли; КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСписокКомандУправленияМатрицами(Форма) Экспорт
	
	Список = Новый СписокЗначений;
	Если Форма.МатрицаФильтровать Тогда
		Список.Добавить("ВыбратьВсе", 	"Выбрать все матрицы",,БиблиотекаКартинок.УстановитьФлажки);
		Список.Добавить("ОтменитьВсе", 	"Снять все матрицы",,БиблиотекаКартинок.СнятьФлажки); КонецЕсли;
	
	Если РольДоступна("ПолныеПрава") Или РольДоступна("ПолныеПраваВОбласти") Или РольДоступна("РедактированиеНоменклатуры") Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ Код, ИСТИНА 						Вкл, 	
		|			ТипМатрицы						ТипМатрицы,
		|			""Установить"" 					Суфф, 	
		|			ИмяПредопределенныхДанных 		Имя, 	
		|			""Установить: "" + Наименование Наименование, 	
		|			Картинка_32 					Картинка 	
		|ИЗ
		|	Справочник.Матрицы ГДЕ Предопределенный
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ 
		|	Код, ЛОЖЬ, ТипМатрицы, ""Снять"", ИмяПредопределенныхДанных, ""Снять: "" + Наименование , Картинка_32_откл
		|ИЗ 
		|	Справочник.Матрицы ГДЕ Предопределенный
		|
		|УПОРЯДОЧИТЬ ПО КОД");
		
		Табл = Запрос.Выполнить().Выгрузить();
		КонвертацияТипов.ВыполнитьВыражениеВКаждойСтрокеТаблицы(Табл, "Строка.Имя = Строка.Суфф + Строка.Имя");
		
		Список.Добавить(,"-------------------");
		
		КонвертацияТипов.ДобавитьСписокВКонецСписка(Список,
			КонвертацияТипов.ПолучитьСписокЗначенийИзТаблицы(Табл.НайтиСтроки(Новый Структура("Вкл, ТипМатрицы", Истина, Перечисления.ТипыМатриц.ПоКлиентам)), "Имя", "Наименование",,"Картинка"));
		КонвертацияТипов.ДобавитьСписокВКонецСписка(Список,
			КонвертацияТипов.ПолучитьСписокЗначенийИзТаблицы(Табл.НайтиСтроки(Новый Структура("Вкл, ТипМатрицы", Ложь, Перечисления.ТипыМатриц.ПоКлиентам)), "Имя", "Наименование",,"Картинка"));
			
		Список.Добавить(,"-------------------");
		
		КонвертацияТипов.ДобавитьСписокВКонецСписка(Список,
			КонвертацияТипов.ПолучитьСписокЗначенийИзТаблицы(Табл.НайтиСтроки(Новый Структура("Вкл, ТипМатрицы", Истина, Перечисления.ТипыМатриц.ПоКачеству)), "Имя", "Наименование",,"Картинка"));
		КонвертацияТипов.ДобавитьСписокВКонецСписка(Список,
			КонвертацияТипов.ПолучитьСписокЗначенийИзТаблицы(Табл.НайтиСтроки(Новый Структура("Вкл, ТипМатрицы", Ложь, Перечисления.ТипыМатриц.ПоКачеству)), "Имя", "Наименование",,"Картинка"));
			
		Список.Добавить(,"-------------------");
		
		КонвертацияТипов.ДобавитьСписокВКонецСписка(Список,
			КонвертацияТипов.ПолучитьСписокЗначенийИзТаблицы(Табл.НайтиСтроки(Новый Структура("Вкл, ТипМатрицы", Истина, Перечисления.ТипыМатриц.ПоНаличию)), "Имя", "Наименование",,"Картинка"));
		КонвертацияТипов.ДобавитьСписокВКонецСписка(Список,
			КонвертацияТипов.ПолучитьСписокЗначенийИзТаблицы(Табл.НайтиСтроки(Новый Структура("Вкл, ТипМатрицы", Ложь, Перечисления.ТипыМатриц.ПоНаличию)), "Имя", "Наименование",,"Картинка"));
			
		Список.Добавить(,"-------------------");
		
		КонвертацияТипов.ДобавитьСписокВКонецСписка(Список,
			КонвертацияТипов.ПолучитьСписокЗначенийИзТаблицы(Табл.НайтиСтроки(Новый Структура("Вкл, ТипМатрицы", Истина, Перечисления.ТипыМатриц.ПоДоступности)), "Имя", "Наименование",,"Картинка"));
		КонвертацияТипов.ДобавитьСписокВКонецСписка(Список,
			КонвертацияТипов.ПолучитьСписокЗначенийИзТаблицы(Табл.НайтиСтроки(Новый Структура("Вкл, ТипМатрицы", Ложь, Перечисления.ТипыМатриц.ПоДоступности)), "Имя", "Наименование",,"Картинка")); КонецЕсли;
	
	Возврат Список;
	
КонецФункции

Функция УстановитьМатрицуНаТовар(Ссылка, МатрицаСуфф, Проверять = Истина, Сообщать = Истина) Экспорт
	
	Если Ссылка.ЭтоГруппа Тогда Возврат Истина КонецЕсли;
	
	// Проверяем для матрицы обязаловки
	
	Если Проверять И Не МожноУстановитьМатрицу(МатрицаСуфф, Ссылка, Сообщать) Тогда
		Возврат Ложь; КонецЕсли;
	
	// Устанавливаем
	
	Матрица = Справочники.Матрицы[МатрицаСуфф];
	ИмяРекв = ИмяРеквизитаМатрицыВТоваре(Матрица, "ИмяПредопределенныхДанных");
	
	СпрОб = Ссылка.ПолучитьОбъект();
	СпрОб.ДополнительныеСвойства.Вставить("ОтключитьПроверкуМатриц", Не Проверять); // для ускорения
	
	Если Матрица.Это1К1 Тогда
			СпрОб[ИмяРекв] = Матрица
	Иначе	СпрОб[ИмяРекв] = Истина КонецЕсли;
	
	СпрОб.ДополнительныеСвойства.Вставить("Обновление", Ложь); // типо чтобы сайт не обновлялся
	
	Возврат ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(СпрОб);
	
КонецФункции
Функция СнятьМатрицуСТовара(Ссылка, МатрицаСуфф) Экспорт
	
	Если Ссылка.ЭтоГруппа Тогда Возврат Истина КонецЕсли;
	
	// Проверяем для матрицы обязаловки для снятия
	
	// Снимаем
	
	Матрица = Справочники.Матрицы[МатрицаСуфф];
	ИмяРекв = ИмяРеквизитаМатрицыВТоваре(Матрица, "ИмяПредопределенныхДанных");
	
	СпрОб = Ссылка.ПолучитьОбъект();
	Если Матрица.Это1К1 Тогда
		Если СпрОб[ИмяРекв] = Матрица Тогда 
			СпрОб[ИмяРекв] = Неопределено КонецЕсли;
	Иначе
		СпрОб[ИмяРекв] = Ложь КонецЕсли;
	
	СпрОб.ДополнительныеСвойства.Вставить("Обновление", Ложь); // типо чтобы сайт не обновлялся
	
	Возврат ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(СпрОб);
	
КонецФункции

Функция МожноУстановитьМатрицу(МатрицаИлиМатрицы, ТоварИлиТовары, Сообщать = Истина) Экспорт
	
	// Определяет можно или нет установить матрицу(ы) на товар(ы)
	
	// ТоварИлиТовары - ссылка на товар или массив внутри которого ссылка на товары
	// МатрицаИлиМатрицы - ссылка на матрицу или массив внутри которого ссылка на матрицы, можно еще указать имя матрицы строкой (только не в массиве)
	//
	// Возвращает ИСТИНА если можно и ЛОЖ если низя
	
	УстановитьПривилегированныйРежим(Истина);	
	
#Область Запрос_по_матрицам
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 	Ссылка Матрица, ИмяПоля, ДопМатрица, ДопМатрица.ИмяРеквизита ИмяДопПоляМатрицы
	|ИЗ 		Справочник.Матрицы.ОбязательныеРеквизиты
	|ГДЕ 		Ссылка В(&Матрицы)
	|ИТОГИ МАКСИМУМ(ИмяДопПоляМатрицы) ПО Матрица, ДопМатрица;");
	
	Если ТипЗнч(МатрицаИлиМатрицы) = Тип("СправочникСсылка.Матрицы") Тогда
		Ссылки = Новый Массив;
		Ссылки.Добавить(МатрицаИлиМатрицы);
	ИначеЕсли ТипЗнч(МатрицаИлиМатрицы) = Тип("Строка") Тогда
		Ссылки = Новый Массив;
		Ссылки.Добавить(Справочники.Матрицы[МатрицаИлиМатрицы]);
	Иначе
		Ссылки = МатрицаИлиМатрицы; КонецЕсли;
	
	Запрос.УстановитьПараметр("Матрицы", Ссылки);
	
	Поля 			= Новый Массив;
	ВыборкаМатриц 	= Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Пока ВыборкаМатриц.Следующий() Цикл
		
		ВыборкаДоп = ВыборкаМатриц.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		Пока ВыборкаДоп.Следующий() Цикл
		
			ВыборкаПолей = ВыборкаДоп.Выбрать();//ВыборкаМатриц.Выбрать();
			Пока ВыборкаПолей.Следующий() Цикл
				Если Поля.Найти(ВыборкаПолей.ИмяПоля) = Неопределено Тогда
					Поля.Добавить(ВыборкаПолей.ИмяПоля); КонецЕсли; КонецЦикла; КонецЦикла;КонецЦикла;
	
	Если Не Поля.Количество() Тогда 
		УстановитьПривилегированныйРежим(Ложь);	
		Возврат Истина КонецЕсли; // не заполнили обязательные поля, значит нечего проверять
	
#КонецОбласти

#Область Запрос_по_товарам

	ЗапросТоваров = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ Номенклатура, ТипЦен, Цена, Валюта
	|ПОМЕСТИТЬ 	Цены
	|ИЗ 		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(,Номенклатура В(&Ссылки));
	
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ Ссылка, Артикул, " + СтрСоединить(Поля, ",") + " ИЗ Справочник.Номенклатура Спр
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(
	|	ВЫБРАТЬ Номенклатура, 
									// дополнительные поля которые могут быть в условии
	|			МАКСИМУМ(ЦенаРозн) 	ЦенаРозн, 
	|			МАКСИМУМ(ЦенаОпт) 	ЦенаОпт, 
	|			МАКСИМУМ(ЦенаСеб) 	ЦенаСеб, 
	|			МАКСИМУМ(ЦенаЗакуп) ЦенаЗакуп, 
	|			МАКСИМУМ(ЦенаСпец) 	ЦенаСпец,  
	|			МАКСИМУМ(ВалютаЗак) ВалютаЗак
	|		ИЗ
	|		(	ВЫБРАТЬ Номенклатура, Цена ЦенаРозн, 0 ЦенаОпт, 0 ЦенаСеб, 0 ЦенаЗакуп, 0 ЦенаСпец, null ВалютаЗак
	|			ИЗ Цены ГДЕ ТипЦен В (ВЫБРАТЬ Значение ИЗ Константа.ТипЦенРозница)
	|
	|			ОБЪЕДИНИТЬ ВСЕ
	| 			ВЫБРАТЬ Номенклатура, 0, Цена, 0, 0, 0, null ИЗ Цены 
	|			ГДЕ ТипЦен В(ВЫБРАТЬ Ссылка ИЗ Справочник.ТипыЦен ГДЕ НЕ ПометкаУдаления И Наименование LIKE ""Опт"")
	|
	|			ОБЪЕДИНИТЬ ВСЕ
	| 			ВЫБРАТЬ Номенклатура, 0, 0, Цена, 0, 0, null ИЗ Цены ГДЕ ТипЦен В (ВЫБРАТЬ Значение ИЗ Константа.ТипЦенСебестоимостьДляРасчетаЗП)
	|
	|			ОБЪЕДИНИТЬ ВСЕ
	| 			ВЫБРАТЬ Номенклатура, 0, 0, 0, Цена, 0, Валюта ИЗ Цены 
	//|			ГДЕ ТипЦен В (ВЫБРАТЬ Значение ИЗ Константа.ТипЦенЗакупочный)
	|			ГДЕ ТипЦен В (ВЫБРАТЬ Ссылка ИЗ Справочник.ТипыЦен ГДЕ НЕ ПометкаУдаления И (Наименование LIKE ""Закупоч%"" ИЛИ Наименование LIKE ""FOB""))
	|
	|			ОБЪЕДИНИТЬ ВСЕ
	| 			ВЫБРАТЬ Номенклатура, 0, 0, 0, 0, Цена, null ИЗ Цены 
	|			ГДЕ ТипЦен В(ВЫБРАТЬ Ссылка ИЗ Справочник.ТипыЦен ГДЕ НЕ ПометкаУдаления И Наименование LIKE ""СЦ%"" ИЛИ Наименование LIKE ""Спец%"")
	|
	|		) Запр
	|		СГРУППИРОВАТЬ ПО
	|			Номенклатура 
	|	) Цен
	|ПО
	|	Спр.Ссылка = Цен.Номенклатура
	|
	|ГДЕ Ссылка В (&Ссылки)");
	
	Если ТипЗнч(ТоварИлиТовары) = Тип("СправочникСсылка.Номенклатура") Тогда
		Ссылки = Новый Массив;
		Ссылки.Добавить(ТоварИлиТовары);
	Иначе
		Ссылки = ТоварИлиТовары; КонецЕсли;
	
	ЗапросТоваров.УстановитьПараметр("Ссылки", Ссылки);
	
#КонецОбласти

	Отказ 		= Ложь;
	ТипБулево 	= Тип("Булево");
	Выборка 	= ЗапросТоваров.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		стрМатриц = "";
		
		ВыборкаМатриц.Сбросить();
		Пока ВыборкаМатриц.Следующий() Цикл
			
			//стрПолей = "";
			//
			//ВыборкаПолей = ВыборкаМатриц.Выбрать();
			//Пока ВыборкаПолей.Следующий() Цикл
			//	
			//	// Проверим установдено обязательное поле
			//	
			//	Значение = Выборка[ВыборкаПолей.ИмяПоля];
			//	Если ?(ТипЗнч(Значение) = ТипБулево, Не Значение, НЕ ЗначениеЗаполнено(Значение)) Тогда
			//		
			//		Отказ = Истина;
			//		Если ПривилегированныйРежим() Тогда
			//			УстановитьПривилегированныйРежим(Ложь);	КонецЕсли;
			//		Если Не Сообщать Тогда Возврат Ложь КонецЕсли; // короткий разговор
			//		стрПолей = стрПолей + ?(стрПолей = "","",", ") + ВыборкаПолей.ИмяПоля; КонецЕсли; КонецЦикла;
			//
			//Если стрПолей <> "" Тогда
			//	стрМатриц = стрМатриц + ?(стрМатриц = "", "","; ") + "Матрица (" + ВыборкаМатриц.Матрица + ?(ВыборкаМатриц.ДопМатрица.Пустая(), "", " - " + ВыборкаМатриц.ДопМатрица) + ") не заполнены поля: " + стрПолей; КонецЕсли; КонецЦикла;
			
			ВыборкаДоп = ВыборкаМатриц.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
			Пока ВыборкаДоп.Следующий() Цикл
				
				Если Не ВыборкаДоп.ДопМатрица.Пустая() Тогда
					
					// Пропускаем проверку если у товара не установлена дополнительная матрица
					
					МатрицаДоп = Выборка.Ссылка[ИмяРеквизитаМатрицыВТоваре(ВыборкаДоп.ДопМатрица, "ИмяПредопределенныхДанных")];
					ДопМатрицаУстановлена = ?(ТипЗнч(МатрицаДоп) = ТипБулево, МатрицаДоп, МатрицаДоп = ВыборкаДоп.МатрицаДоп);
					
					Если Не ДопМатрицаУстановлена Тогда
						Продолжить; КонецЕсли; КонецЕсли;
				
				стрПолей = "";
				
				ВыборкаПолей = ВыборкаДоп.Выбрать();
				Пока ВыборкаПолей.Следующий() Цикл
					
					// Проверим установдено обязательное поле
					
					Значение = Выборка[ВыборкаПолей.ИмяПоля];
					Если ?(ТипЗнч(Значение) = ТипБулево, Не Значение, НЕ ЗначениеЗаполнено(Значение)) Тогда
					
						Отказ = Истина;
						Если ПривилегированныйРежим() Тогда
							УстановитьПривилегированныйРежим(Ложь);	КонецЕсли;
						Если Не Сообщать Тогда Возврат Ложь КонецЕсли; // короткий разговор
						стрПолей = стрПолей + ?(стрПолей = "","",", ") + ВыборкаПолей.ИмяПоля; КонецЕсли; КонецЦикла;
			
				Если стрПолей <> "" Тогда
					стрМатриц = стрМатриц + ?(стрМатриц = "", "","; ") + "Матрица (" + ВыборкаДоп.Матрица + ?(ВыборкаДоп.ДопМатрица.Пустая(), "", " - " + ВыборкаДоп.ДопМатрица) + ") не заполнены поля: " + стрПолей; КонецЕсли; КонецЦикла; КонецЦикла;
			
		Если стрМатриц <> "" Тогда 
			ОбщиеФункции.СообщитьТекст("[" + Выборка.Артикул + "] " + Выборка.Ссылка + Символы.ПС + стрМатриц); КонецЕсли; КонецЦикла;
	
	Если ПривилегированныйРежим() Тогда 
		УстановитьПривилегированныйРежим(Ложь);	 КонецЕсли;
	
	Возврат Не Отказ;
	
КонецФункции
Функция МожноУстановитьМатрицу_Ст(Матрица, СсылкаИлиСсылки, Сообщать = Истина) Экспорт
	
	//// Определяет можно или нет установить матрицу на товар(ы)
	//
	//// Код, Наименование, Артикул, Брэнд, 
	//// Поставщик, АртикулПоставщика, СрокПроизводства, СрокДоставки, КомментарийПоставки,
	//// ЦенаЗакупки, ВалютаЗакупки, Себестоимость, РозничнаяЦена, СпецЦена, КатегорияТовара, Группа1с
	//
	//стр = "
	//|ВЫБРАТЬ 	Номенклатура, ТипЦен, Цена, Валюта
	//|ПОМЕСТИТЬ 	Цены
	//|ИЗ 		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(,Номенклатура В(&Ссылки));
	//
	//|ВЫБРАТЬ
	//|	Ссылка, Артикул,
	//|	"""" + 	ВЫБОР КОГДА Наименование	= """" ТОГДА ""наименование,"" ИНАЧЕ """" КОНЕЦ +
	//|			ВЫБОР КОГДА Артикул 		= """" ТОГДА ""артикул,		"" ИНАЧЕ """" КОНЕЦ +
	//|			ВЫБОР КОГДА КатегорияТовара	= ЗНАЧЕНИЕ(Справочник.КатегорииТоваров.ПустаяСсылка) ТОГДА ""категория товара,"" ИНАЧЕ """" КОНЕЦ
	//|	// нечетные Текст 
	//|ИЗ 
	//|	Справочник.Номенклатура Спр
	//|
	//|ЛЕВОЕ СОЕДИНЕНИЕ
	//|	(
	//|		ВЫБРАТЬ Номенклатура, МАКСИМУМ(ЦенаРозн) ЦенаРозн, МАКСИМУМ(ЦенаОпт) ЦенаОпт, МАКСИМУМ(ЦенаСеб) ЦенаСеб, МАКСИМУМ(ЦенаЗакуп) ЦенаЗакуп, МАКСИМУМ(ЦенаСпец) ЦенаСпец,  МАКСИМУМ(ВалютаЗак) ВалютаЗак
	//|		ИЗ
	//|		(	ВЫБРАТЬ Номенклатура, Цена ЦенаРозн, 0 ЦенаОпт, 0 ЦенаСеб, 0 ЦенаЗакуп, 0 ЦенаСпец, null ВалютаЗак
	//|			ИЗ Цены ГДЕ ТипЦен = &ТипЦенРозн
	//|
	//|			ОБЪЕДИНИТЬ ВСЕ
	//| 			ВЫБРАТЬ Номенклатура, 0, Цена, 0, 0, 0, null ИЗ Цены 
	//|			ГДЕ ТипЦен В(ВЫБРАТЬ Ссылка ИЗ Справочник.ТипыЦен ГДЕ НЕ ПометкаУдаления И Наименование LIKE ""Опт"")
	//|
	//|			ОБЪЕДИНИТЬ ВСЕ
	//| 			ВЫБРАТЬ Номенклатура, 0, 0, Цена, 0, 0, null ИЗ Цены ГДЕ ТипЦен = &ТипЦенСеб
	//|
	//|			ОБЪЕДИНИТЬ ВСЕ
	//| 			ВЫБРАТЬ Номенклатура, 0, 0, 0, Цена, 0, Валюта ИЗ Цены ГДЕ ТипЦен = &ТипЦенЗакуп
	//|
	//|			ОБЪЕДИНИТЬ ВСЕ
	//| 			ВЫБРАТЬ Номенклатура, 0, 0, 0, 0, Цена, null ИЗ Цены 
	//|			ГДЕ ТипЦен В(ВЫБРАТЬ Ссылка ИЗ Справочник.ТипыЦен ГДЕ НЕ ПометкаУдаления И Наименование LIKE ""СЦ"" ИЛИ Наименование LIKE ""Спец"")
	//|
	//|		) Запр
	//|		СГРУППИРОВАТЬ ПО
	//|			Номенклатура 
	//|	) Цен
	//|ПО
	//|	Спр.Ссылка = Цен.Номенклатура
	//|
	//|ГДЕ 
	//|	Ссылка В (&Ссылки) И (
	//|		Наименование 	= """" ИЛИ
	//|		Артикул 		= """" ИЛИ
	//|		КатегорияТовара	= ЗНАЧЕНИЕ(Справочник.КатегорииТоваров.ПустаяСсылка)
	//|		// четные 
	//|						)";
	//
	//Если ТипЗнч(СсылкаИлиСсылки) = Тип("СправочникСсылка.Номенклатура") Тогда
	//	Ссылки = Новый Массив;
	//	Ссылки.Добавить(СсылкаИлиСсылки);
	//Иначе
	//	Ссылки = СсылкаИлиСсылки; КонецЕсли;
	//
	////Шаблон = Новый Массив;
	//стрЧетные = ""; стрНеЧетные = "";
	//
	//#Область Добавки
	//
	//Если Матрица = "Опт" Или Матрица = "Розн" Тогда
	//	
	//	стрНеЧетные = стрНеЧетные + " + ВЫБОР КОГДА КОД = """" ТОГДА ""код,"" ИНАЧЕ """" КОНЕЦ";
	//	стрЧетные 	= стрЧетные + " ИЛИ Код = """""; 
	//	
	//	//Шаблон.Добавить(" + ВЫБОР КОГДА КОД = """" ТОГДА ""код,"" ИНАЧЕ """" КОНЕЦ");
	//	//Шаблон.Добавить(" ИЛИ Код = """"");
	//	
	//	стрНеЧетные = стрНеЧетные + " + ВЫБОР КОГДА СрокПроизводства = 0 ТОГДА ""срок производства,"" ИНАЧЕ """" КОНЕЦ";
	//	стрЧетные 	= стрЧетные + " ИЛИ СрокПроизводства = 0"; 
	//	
	//	стрНеЧетные = стрНеЧетные + " + ВЫБОР КОГДА СрокДоставки = 0 ТОГДА ""срок доставки,"" ИНАЧЕ """" КОНЕЦ";
	//	стрЧетные 	= стрЧетные + " ИЛИ СрокДоставки = 0";  КонецЕсли;
	//
	//Если Матрица = "ИПР" Или Матрица = "Опт" Или Матрица = "Розн" Или Матрица = "Доп" Тогда
	//	
	//	стрНеЧетные = стрНеЧетные + " + ВЫБОР КОГДА Производитель = ЗНАЧЕНИЕ(Справочник.Производители.ПустаяСсылка) ТОГДА ""брэнд,"" ИНАЧЕ """" КОНЕЦ";
	//	стрЧетные 	= стрЧетные + " ИЛИ Производитель	= ЗНАЧЕНИЕ(Справочник.Производители.ПустаяСсылка)"; 
	//	
	//	//Шаблон.Добавить(" + ВЫБОР КОГДА Производитель = ЗНАЧЕНИЕ(Справочник.Производители.ПустаяСсылка) ТОГДА ""брэнд,"" ИНАЧЕ """" КОНЕЦ");
	//	//Шаблон.Добавить(" ИЛИ Производитель	= ЗНАЧЕНИЕ(Справочник.Производители.ПустаяСсылка)");
	//	
	//	стрНеЧетные = стрНеЧетные + " + ВЫБОР КОГДА Поставщик = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка) ТОГДА ""поставщик,"" ИНАЧЕ """" КОНЕЦ";
	//	стрЧетные 	= стрЧетные + " ИЛИ Поставщик	= ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)"; 
	//	
	//	стрНеЧетные = стрНеЧетные + " + ВЫБОР КОГДА АртикулПоставщика = """" ТОГДА ""артикул поставщика,"" ИНАЧЕ """" КОНЕЦ";
	//	стрЧетные 	= стрЧетные + " ИЛИ АртикулПоставщика = """""; 
	//	
	//	стрНеЧетные = стрНеЧетные + " + ВЫБОР КОГДА ЕСТЬNULL(ЦенаЗакуп,0) = 0 ТОГДА ""цена закупки,"" ИНАЧЕ """" КОНЕЦ";
	//	стрЧетные 	= стрЧетные + " ИЛИ ЕСТЬNULL(ЦенаЗакуп,0) = 0"; 
	//	
	//	стрНеЧетные = стрНеЧетные + " + ВЫБОР КОГДА ЕСТЬNULL(ВалютаЗак, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) ТОГДА ""валюта закупки,"" ИНАЧЕ """" КОНЕЦ";
	//	стрЧетные 	= стрЧетные + " ИЛИ ЕСТЬNULL(ВалютаЗак, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)"; 
	//	
	//	стрНеЧетные = стрНеЧетные + " + ВЫБОР КОГДА ЕСТЬNULL(ЦенаСеб,0) = 0 ТОГДА ""себестоимость,"" ИНАЧЕ """" КОНЕЦ";
	//	стрЧетные 	= стрЧетные + " ИЛИ ЕСТЬNULL(ЦенаСеб,0) = 0";  КонецЕсли;
	//
	//Если Матрица = "ИПР" Или Матрица = "Опт" Или Матрица = "Доп" Тогда
	//	
	//	стрНеЧетные = стрНеЧетные + " + ВЫБОР КОГДА ЕСТЬNULL(ЦенаРозн,0) = 0 ТОГДА ""розничная цена,"" ИНАЧЕ """" КОНЕЦ";
	//	стрЧетные 	= стрЧетные + " ИЛИ ЕСТЬNULL(ЦенаРозн,0) = 0";  КонецЕсли;
	//
	//Если Матрица = "ИПР" Тогда
	//	
	//	стрНеЧетные = стрНеЧетные + " + ВЫБОР КОГДА КомментарийПоставщика = """" ТОГДА ""комментарий поставщика,"" ИНАЧЕ """" КОНЕЦ";
	//	стрЧетные 	= стрЧетные + " ИЛИ КомментарийПоставщика = """"";  КонецЕсли;
	//
	////Если Матрица = "Опт" Тогда
	////	
	////	стрНеЧетные = стрНеЧетные + " + ВЫБОР КОГДА ЕСТЬNULL(ЦенаОпт,0) = 0 ТОГДА ""спец цена,"" ИНАЧЕ """" КОНЕЦ";
	////	стрЧетные 	= стрЧетные + " ИЛИ ЕСТЬNULL(ЦенаОпт,0) = 0";  КонецЕсли;
	//
	//#КонецОбласти
	//
	//
	//// Найдем последнюю цифру шаблона и заполним пустыми строками шаблон (когда я начинал то этот код понимал я и бог, теперь остался только бог)
	//
	////Поз 		= СтрНайти(стр, "#", НаправлениеПоиска.СКонца);	
	////ПослЦифра 	= Число(сред(Стр, Поз + 1, СтрНайти(Стр, " ",, Поз) - Поз - 1));
	////КолШаблон	= Шаблон.Количество();
	////стрШаблона 	= "СтрШаблон(Стр"; 
	////Для Ном = 1 По КолШаблон Цикл // ПослЦифра Цикл
	////	
	////	Если Не Ном > КолШаблон / 2 Тогда //Если Не Ном > ПослЦифра / 2 Тогда
	////		стрЧетные 	= стрЧетные 	+ " #" + Формат(Ном * 2, 	"ЧГ=");
	////		стрНеЧетные = стрНеЧетные 	+ " #" + Формат(Ном * 2 -1, "ЧГ="); КонецЕсли;
	////	
	////	стрШаблона = стрШаблона + ",Шаблон[" + Формат(Ном - 1, "ЧН=0; ЧГ=") + "]"; КонецЦикла;
	////
	//стр = СтрЗаменить(Стр, "// нечетные", 	стрНеЧетные);
	//стр = СтрЗаменить(Стр, "// четные", 	стрЧетные);
	//
	//// отобразим
	//
	////Запрос = Новый Запрос(Вычислить(стрШаблона + ")"));
	//Запрос = Новый Запрос(Стр);
	//Запрос.УстановитьПараметр("Ссылки", Ссылки);
	//Запрос.УстановитьПараметр("ТипЦенРозн", 	Константы.ТипЦенРозница.Получить());
	//Запрос.УстановитьПараметр("ТипЦенСеб", 		Константы.ТипЦенСебестоимостьДляРасчетаЗП.Получить());
	//Запрос.УстановитьПараметр("ТипЦенЗакуп", 	Константы.ТипЦенЗакупочный.Получить());
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//Если Не Сообщать И Выборка.Количество() Тогда
	//	Возврат Ложь; КонецЕсли;
	//
	//Отказ = Ложь;
	//Если Выборка.Количество() Тогда ОбщиеФункции.СообщитьТекст("Не заполнены требования для матрицы: " + Символы.ПС) КонецЕсли;
	//Пока Выборка.Следующий() Цикл
	//	Отказ = ИСтина;
	//	ОбщиеФункции.СообщитьТекст(Выборка.Текст + " [" + Выборка.Артикул + "] " + Выборка.Ссылка); КонецЦикла;
	//
	//Возврат Не Отказ;
	
КонецФункции

Функция ПредставлениеТовараСАртикулом(Номенклатура)
	
	Возврат "[" + Номенклатура.Артикул + "] " + Номенклатура;
	
КонецФункции
Функция ЕстьСтопПродажи(МассивТоваров, Сообщать = Истина) Экспорт
	
	Есть = Ложь;
	
	Для Каждого Номенклатура Из МассивТоваров Цикл
		Если Номенклатура.МатрицаСтопПродажи Тогда
			Есть = Истина;
			Если Не Сообщать Тогда Прервать; КонецЕсли;
			ОбщиеФункции.СообщитьТекст("Стоп - продажи: " + ПредставлениеТовараСАртикулом(Номенклатура)); КонецЕсли; КонецЦикла;
	
	Возврат Есть;
	
КонецФункции
Функция ЕстьСтопЗаказ(МассивТоваров, Сообщать = Истина) Экспорт
	
	Есть = Ложь;
	
	Для Каждого Номенклатура Из МассивТоваров Цикл
		Если Номенклатура.МатрицаСтопЗаказ Тогда
			Есть = Истина;
			Если Не Сообщать Тогда Прервать; КонецЕсли;
			ОбщиеФункции.СообщитьТекст("Стоп - заказ: " + ПредставлениеТовараСАртикулом(Номенклатура)); КонецЕсли; КонецЦикла;
	
	Возврат Есть;
	
КонецФункции


#КонецОбласти

#Область Остатки
Функция ПолучитьОстаткиПоСкладам(Номенклатура) Экспорт
	
	// Возвращает таблицу остатков только по складам где есть товар
	// Колонки таблицы:		Склад
	//						Количество - остаток за минус резервов
	//						Резерв
	
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 	Ост.Склад, СУММА(Ост.КоличествоОстаток - ЕСТЬNULL(Рез.КоличествоОстаток, 0)) Количество, СУММА(ЕСТЬNULL(Рез.КоличествоОстаток, 0)) Резерв
	|ИЗ 		РегистрНакопления.ТоварыНаСкладах.Остатки(,Номенклатура = &Номенклатура) Ост
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВРезерве.Остатки(,Номенклатура = &Номенклатура) Рез
	|ПО	Ост.Склад = Рез.Размещение
	|
	|СГРУППИРОВАТЬ ПО Ост.Склад
	|ИМЕЮЩИЕ СУММА(Ост.КоличествоОстаток - ЕСТЬNULL(Рез.КоличествоОстаток, 0)) > 0
	|");
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Функция ПолучитьСписокСкладовСОстатками(МассивТоваров, ЗаказСсылка) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 	СУММА(Ост.КоличествоОстаток - ЕСТЬNULL(Рез.КоличествоОстаток, 0)) Количество, 
	|			Склад, Склад.Наименование Наименование, Склад.Код Код
	|ИЗ РегистрНакопления.ТоварыНаСкладах.Остатки(,Номенклатура В(&Товары)) Ост
	
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВРезерве.Остатки(,ДокументРезерва <> &Заказ И Номенклатура В(&Товары)) Рез
	|ПО	Рез.Номенклатура 	= Ост.Номенклатура И
	|	Рез.Размещение 		= Ост.Склад
	
	|ГДЕ Ост.КоличествоОстаток - ЕСТЬNULL(Рез.КоличествоОстаток, 0) <> 0
	|СГРУППИРОВАТЬ ПО Склад 
	|УПОРЯДОЧИТЬ ПО Количество Убыв
	|");
	
	Запрос.УстановитьПараметр("Товары", МассивТоваров);
	Запрос.УстановитьПараметр("Заказ", 	ЗаказСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Список	= Новый СписокЗначений;
	
	Пока Выборка.Следующий() Цикл Список.Добавить(Выборка.Склад, Выборка.Код + " " + Выборка.Склад + " - " + Выборка.Количество) КонецЦикла;
	Возврат Список;
	
КонецФункции

Процедура ЗаполнитьОстатки(Склады, МассивТоваров, ЗаказСсылка, ТаблицаТоваров) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ СУММА(Ост.КоличествоОстаток - ЕСТЬNULL(Рез.КоличествоОстаток, 0)) Количество, Ост.Номенклатура
	|ИЗ			РегистрНакопления.ТоварыНаСкладах.Остатки(,Склад В(&Склады) И Номенклатура В(&Товары)) Ост
	
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВРезерве.Остатки(,Размещение В(&Склады) И ДокументРезерва <> &Заказ И Номенклатура В(&Товары)) Рез
	|ПО	Рез.Номенклатура 	= Ост.Номенклатура И
	|	Рез.Размещение 		= Ост.Склад
	
	|СГРУППИРОВАТЬ ПО Ост.Номенклатура");
	
	Запрос.УстановитьПараметр("Товары", МассивТоваров);
	Запрос.УстановитьПараметр("Склады", Склады);
	Запрос.УстановитьПараметр("Заказ", 	ЗаказСсылка);
	
	Остатки = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Строка Из ТаблицаТоваров Цикл
		
		строкаОст = Остатки.Найти(Строка.Номенклатура, "Номенклатура");
		Строка.Остаток = ?(строкаОст = Неопределено, 0, строкаОст.Количество); КонецЦикла;
	
КонецПроцедуры

#КонецОбласти