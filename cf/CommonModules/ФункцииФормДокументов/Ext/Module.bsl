                           
	
#Область Струкутура_колонок_товары

Функция НайтиЭлементВИерархии(ИмяЭлемента, Элементы)
	
	КолЭлементов = Элементы.Количество();
	Для Ном = 1 По КолЭлементов Цикл
		
		Элемент = Элементы[КолЭлементов - Ном];
		Если Элемент.Имя = ИмяЭлемента Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если 	типЗнч(Элемент) = Тип("ГруппаФормы") И
				НайтиЭлементВИерархии(ИмяЭлемента, Элемент.ПодчиненныеЭлементы) Тогда
			Возврат Истина;
			
		КонецЕсли;		
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции
Функция ПолучитьЭлементВИерерхии(Элементы, ИмяИскомогоЭлемента)
	
	КолЭлементов = Элементы.Количество();
	Для Ном = 1 По КолЭлементов Цикл
		
		Элемент = Элементы[КолЭлементов - Ном];
		Если Элемент.Имя = ИмяИскомогоЭлемента Тогда
			Возврат Элемент;
		КонецЕсли;
		
		Если типЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			
			Элемент = ПолучитьЭлементВИерерхии(Элемент.ПодчиненныеЭлементы, ИмяИскомогоЭлемента);
			Если Элемент <> Неопределено Тогда
				Возврат Элемент;
			КонецЕсли;
			
		КонецЕсли;		
	КонецЦикла;
	
КонецФункции

Функция ЕстьТакойЭлемент(ИмяЭлемента, Элементы, УчитыватьИерархию = Истина)
	
	Если Не УчитыватьИерархию Тогда
		Возврат Элементы.Найти(ИмяЭлемента) <> Неопределено;
	КонецЕсли;
	
	Возврат НайтиЭлементВиерархии(ИмяЭлемента, Элементы);
	
КонецФункции
Функция ПолучитьСтруктуруКолонокТовары(ТабличнаяЧастьТовары, СуммаВключаетНДС = Неопределено, ТипЦен = Неопределено, ПриставкаКИмени = "", ДисконтнаяКарта = Неопределено,  Валюта = Неопределено, УчитыватьНДС = Неопределено, стВалюта = Неопределено, стСуммаВключаетНДС = Неопределено, Касса = Неопределено, стУчитыватьНДС = Неопределено, стТипЦен = Неопределено, Контрагент = Неопределено, ЕстьКоличествоОтгружено = Ложь, РасчетСкидкиОтЦены = Ложь, стРасчетСкидкиОтЦены = Неопределено) Экспорт

	Если стСуммаВключаетНДС = Неопределено Тогда
		стСуммаВключаетНДС = СуммаВключаетНДС;
	КонецЕсли;
	
	Если стРасчетСкидкиОтЦены = Неопределено Тогда
		стРасчетСкидкиОтЦены = РасчетСкидкиОтЦены;
	КонецЕсли;

	
	Если стВалюта = Неопределено Тогда
		стВалюта = Валюта;
	КонецЕсли;
	
	Если стУчитыватьНДС = Неопределено Тогда
		стУчитыватьНДС = УчитыватьНДС;
	КонецЕсли;
   
	Если стТипЦен = Неопределено Тогда
		стТипЦен = ТипЦен;
	КонецЕсли;
	
	ЕстьТипЦен = ТипЦен <> Неопределено;
	
	СтруктураКолонокТовары 	= Новый Структура("ТипЦен, СуммаВключаетНДС, УчитыватьНДС, ДисконтнаяКарта, Контрагент, Валюта, стВалюта, стСуммаВключаетНДС, Касса, стУчитыватьНДС, стТипЦен, РасчетСкидкиОтЦены, стРасчетСкидкиОтЦены",
												ТипЦен,СуммаВключаетНДС, УчитыватьНДС, ДисконтнаяКарта, Контрагент, Валюта, стВалюта, стСуммаВключаетНДС, Касса, стУчитыватьНДС, стТипЦен, РасчетСкидкиОтЦены, стРасчетСкидкиОтЦены);
													
	СтруктураКолонокТовары.Вставить("ЕстьТипЦен", 			ЕстьТипЦен);
	СтруктураКолонокТовары.Вставить("ЕстьСуммаВключаетНДС", СуммаВключаетНДС <> Неопределено);
	СтруктураКолонокТовары.Вставить("ЕстьУчитыватьНДС", 	УчитыватьНДС <> Неопределено);
	
	Элементы = ТабличнаяЧастьТовары.ПодчиненныеЭлементы;
	
	СтруктураКолонокТовары.Вставить("ЕстьКоличествоОтгружено", ЕстьКоличествоОтгружено);
	
	СтруктураКолонокТовары.Вставить("ЕстьНоменклатура", ЕстьТакойЭлемент(ПриставкаКИмени + "Номенклатура", 	Элементы));
	СтруктураКолонокТовары.Вставить("ЕстьУпаковка", 	ЕстьТакойЭлемент(ПриставкаКИмени + "Упаковка",	 	Элементы));
	
	СтруктураКолонокТовары.Вставить("ЕстьКоличество", 	ЕстьТакойЭлемент(ПриставкаКИмени + "Количество", 	Элементы));
	СтруктураКолонокТовары.Вставить("ЕстьСуммаНДС", 	ЕстьТакойЭлемент(ПриставкаКИмени + "СуммаНДС", 		Элементы));
	СтруктураКолонокТовары.Вставить("ЕстьСтавкаНДС", 	ЕстьТакойЭлемент(ПриставкаКИмени + "СтавкаНДС", 	Элементы));
	СтруктураКолонокТовары.Вставить("ЕстьЦена", 		ЕстьТакойЭлемент(ПриставкаКИмени + "Цена", 			Элементы));
	СтруктураКолонокТовары.Вставить("ЕстьСумма", 		ЕстьТакойЭлемент(ПриставкаКИмени + "Сумма", 		Элементы));
	
	СтруктураКолонокТовары.Вставить("ЕстьСуммаРучнойСкидки", 	ЕстьТакойЭлемент(ПриставкаКИмени + "СуммаРучнойСкидки", 	Элементы));
	СтруктураКолонокТовары.Вставить("ЕстьПроцентРучнойСкидки",	ЕстьТакойЭлемент(ПриставкаКИмени + "ПроцентРучнойСкидки", 	Элементы));
	СтруктураКолонокТовары.Вставить("ЕстьСуммаАвтоматическойСкидки", 	ЕстьТакойЭлемент(ПриставкаКИмени + "СуммаАвтоматическойСкидки", 	Элементы));
	СтруктураКолонокТовары.Вставить("ЕстьПроцентАвтоматическойСкидки",	ЕстьТакойЭлемент(ПриставкаКИмени + "ПроцентАвтоматическойСкидки", 	Элементы));
	
	СтруктураКолонокТовары.Вставить("ЕстьСуммаБезСкидки", 	ЕстьТакойЭлемент(ПриставкаКИмени + "СуммаБезСкидки",Элементы));
	СтруктураКолонокТовары.Вставить("ЕстьВсего", 			ЕстьТакойЭлемент(ПриставкаКИмени + "Всего", 		Элементы));
	СтруктураКолонокТовары.Вставить("ЕстьКоличествоВУпаковке",	ЕстьТакойЭлемент(ПриставкаКИмени + "КоличествоВУпаковке", 	Элементы));
	
	СтруктураКолонокТовары.Вставить("ЕстьАкция", 			ЕстьТакойЭлемент(ПриставкаКИмени + "Акция", Элементы));
	СтруктураКолонокТовары.Вставить("ЕстьЦенаПоАкции", 		ЕстьТакойЭлемент(ПриставкаКИмени + "ЦенаПоАкции", Элементы));
	
	СтруктураКолонокТовары.Вставить("ЕстьДоставка", 	ЕстьТакойЭлемент(ПриставкаКИмени + "Доставка", Элементы));
    СтруктураКолонокТовары.Вставить("ЕстьЦенаДо", 		ЕстьТакойЭлемент(ПриставкаКИмени + "ТоварыЦенаДо",   Элементы));

	СтруктураКолонокТовары.Вставить("ЕстьАртикулПоставщика", ЕстьТакойЭлемент(ПриставкаКИмени + "АртикулПоставщика",Элементы));
	СтруктураКолонокТовары.Вставить("ЕстьНомерГТД", 	     ЕстьТакойЭлемент(ПриставкаКИмени + "НомерГТД", 		Элементы));
	СтруктураКолонокТовары.Вставить("ЕстьЯчейкаОтправитель", ЕстьТакойЭлемент("ЯчейкаОтправитель", 		Элементы));
	
	СтруктураКолонокТовары.Вставить("ЕстьБольшеНеПоставляется",	ЕстьТакойЭлемент(ПриставкаКИмени + "БольшеНеПоставляется",	Элементы));
	
	Возврат СтруктураКолонокТовары;

КонецФункции
&НаСервере
Процедура НайтиВОбщихИУстановить(ИмяРеквизита, МетаДок, Объект, СтруктураКолонокТовары) 
	
	Есть = Метаданные.ОбщиеРеквизиты[ИмяРеквизита].Состав.Найти(МетаДок).Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать;
	СтруктураКолонокТовары.Вставить("Есть" + ИмяРеквизита, Есть);
	
	Если Есть Тогда СтруктураКолонокТовары.Вставить(ИмяРеквизита, Объект[ИмяРеквизита]) КонецЕсли 
	
КонецПроцедуры
&НаСервере
Процедура НайтиВКоллекцииИУстановить(ИмяРеквизита, Коллекция, СтруктураКолонокТовары) 
	
	СтруктураКолонокТовары.Вставить("Есть" + ИмяРеквизита, Коллекция.Найти(ИмяРеквизита) <> Неопределено) 
	
КонецПроцедуры
&НаСервере
Функция ПолучитьСтруктуруКолонокТоварыПоОбъекту(Объект, ИмяТаблЧастиТовары = "Товары", допИмяТабличнойЧасти = "") Экспорт

	СтруктураКолонокТовары = Новый Структура("ЕстьВсего, ЕстьКоличествоОтгружено", Ложь, Ложь);
	МетаДок 		= Объект.Ссылка.Метаданные(); 
	Реквизиты 		= МетаДок.Реквизиты;
	ТаблРеквизиты 	= МетаДок.ТабличныеЧасти[ИмяТаблЧастиТовары].Реквизиты;
	Если НЕ ПустаяСтрока(допИмяТабличнойЧасти) Тогда
		допТаблРеквизиты = МетаДок.ТабличныеЧасти[допИмяТабличнойЧасти].Реквизиты; КонецЕсли;
	
	НайтиВОбщихИУстановить("ТипЦен", 			МетаДок, Объект, СтруктураКолонокТовары);
	НайтиВОбщихИУстановить("СуммаВключаетНДС", 	МетаДок, Объект, СтруктураКолонокТовары);
	НайтиВОбщихИУстановить("УчитыватьНДС", 		МетаДок, Объект, СтруктураКолонокТовары);
	НайтиВОбщихИУстановить("Контрагент", 			МетаДок, Объект, СтруктураКолонокТовары);
	НайтиВОбщихИУстановить("Валюта", 			МетаДок, Объект, СтруктураКолонокТовары);
	НайтиВОбщихИУстановить("Касса", 			МетаДок, Объект, СтруктураКолонокТовары);

	//НайтиВОбщихИУстановить и НайтиВКоллекцииИУстановить не подошли, делаем так:
	Если Реквизиты.Найти("РасчетСкидкиОтЦены") <> Неопределено Тогда
		СтруктураКолонокТовары.Вставить("РасчетСкидкиОтЦены", Объект["РасчетСкидкиОтЦены"]);
	КонецЕсли;
	
	НайтиВКоллекцииИУстановить("Номенклатура", 					ТаблРеквизиты, СтруктураКолонокТовары);
	НайтиВКоллекцииИУстановить("Упаковка", 						ТаблРеквизиты, СтруктураКолонокТовары);
	НайтиВКоллекцииИУстановить("Количество", 					ТаблРеквизиты, СтруктураКолонокТовары);
	НайтиВКоллекцииИУстановить("СуммаНДС", 						ТаблРеквизиты, СтруктураКолонокТовары);
	НайтиВКоллекцииИУстановить("СтавкаНДС", 					ТаблРеквизиты, СтруктураКолонокТовары);
	НайтиВКоллекцииИУстановить("Цена", 							ТаблРеквизиты, СтруктураКолонокТовары);
	НайтиВКоллекцииИУстановить("Сумма", 						ТаблРеквизиты, СтруктураКолонокТовары);
	НайтиВКоллекцииИУстановить("СуммаРучнойСкидки", 			ТаблРеквизиты, СтруктураКолонокТовары);
	НайтиВКоллекцииИУстановить("ПроцентРучнойСкидки", 			ТаблРеквизиты, СтруктураКолонокТовары);
	НайтиВКоллекцииИУстановить("СуммаАвтоматическойСкидки", 	ТаблРеквизиты, СтруктураКолонокТовары);
	НайтиВКоллекцииИУстановить("ПроцентАвтоматическойСкидки", 	ТаблРеквизиты, СтруктураКолонокТовары);
	НайтиВКоллекцииИУстановить("СуммаБезСкидки", 				ТаблРеквизиты, СтруктураКолонокТовары);
	НайтиВКоллекцииИУстановить("КоличествоВУпаковке", 			ТаблРеквизиты, СтруктураКолонокТовары);
	НайтиВКоллекцииИУстановить("Акция", 						ТаблРеквизиты, СтруктураКолонокТовары);
	НайтиВКоллекцииИУстановить("ЦенаПоАкции", 					ТаблРеквизиты, СтруктураКолонокТовары);
	НайтиВКоллекцииИУстановить("Размещение", 					ТаблРеквизиты, СтруктураКолонокТовары);
	Если НЕ ПустаяСтрока(допИмяТабличнойЧасти) Тогда	
		НайтиВКоллекцииИУстановить("Доставка", 					допТаблРеквизиты, СтруктураКолонокТовары); КонецЕсли;
	
	Возврат СтруктураКолонокТовары;

КонецФункции


Процедура ОбновитьСтруктуруКолонокТовары(Объект, СтруктураКолонокТовары, МассивРеквизитов) Экспорт
	
	Для Каждого Реквизит ИЗ МассивРеквизитов Цикл
		Если СтруктураКолонокТовары.Свойство(Реквизит) Тогда
			Попытка 
				СтруктураКолонокТовары[Реквизит] 	= Объект[Реквизит];
			Исключение
				Продолжить;
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	//СтруктураКолонокТовары.Валюта 	= Объект.Валюта;
	//СтруктураКолонокТовары.ТипЦен 	= Объект.ТипЦен;
	//СтруктураКолонокТовары.УчитыватьНДС 		= Объект.УчитыватьНДС;
	//СтруктураКолонокТовары.СуммаВключаетНДС 	= Объект.СуммаВключаетНДС;
	//СтруктураКолонокТовары.ДисконтнаяКарта 		= ДисконтнаяКарта;

КонецПроцедуры

Процедура ОбновитьСтруктуруКолонокТоварыПоСтруктуре(СтруктураКолонокТовары, СтруктураРеквизитов) Экспорт
	
	Для Каждого Реквизит ИЗ СтруктураРеквизитов Цикл
		Если СтруктураКолонокТовары.Свойство(Реквизит.Ключ) Тогда
			СтруктураКолонокТовары[Реквизит.Ключ] = Реквизит.Значение;
		КонецЕсли;
	КонецЦикла;
	//СтруктураКолонокТовары.Валюта 	= Объект.Валюта;
	//СтруктураКолонокТовары.ТипЦен 	= Объект.ТипЦен;
	//СтруктураКолонокТовары.УчитыватьНДС 		= Объект.УчитыватьНДС;
	//СтруктураКолонокТовары.СуммаВключаетНДС 	= Объект.СуммаВключаетНДС;
	//СтруктураКолонокТовары.ДисконтнаяКарта 		= ДисконтнаяКарта;

КонецПроцедуры


#КонецОбласти

Процедура ПриИзмененииСтатьиДДС(ТекущаяСтатья, ВтораяСтатья) Экспорт
	
	ВтораяСтатья =?(ТекущаяСтатья.СтатьяДДСбух.Пустая(), ТекущаяСтатья, ТекущаяСтатья.СтатьяДДСбух)  
	
КонецПроцедуры

Процедура НоменклатураПриИзменении(	ТабличнаяЧастьТовары, 
									СтруктураКолонокТовары, 
									ТекДанные 					= Неопределено, 
									ДисконтнаяКарта 			= Неопределено, 
									ПересчитатьЦену 			= Истина, 
									ЗаполнитьУпаковкуПоставщика = Ложь, 
									ДоставкаВключенаВЦену 		= Ложь,
									ПересчитатьАкцию			= Истина,
									ЗаполнитьАртикул 			= Ложь) Экспорт
	
	Если ТекДанные = Неопределено Тогда
		ТекДанные = ТабличнаяЧастьТовары.ТекущиеДанные;
	КонецЕсли;
	
	Если ТекДанные <> Неопределено Тогда
		
		// АРТИКУЛ
		Если ЗаполнитьАртикул Тогда
			ТекДанные.Артикул = ТекДанные.Номенклатура.Артикул; КонецЕсли;
			
		// БОЛЬШЕ НЕ ПОСТАВЛЯЕТС
		Если СтруктураКолонокТовары.ЕстьБольшеНеПоставляется Тогда ТекДанные.БольшеНеПоставляется = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ТекДанные.Номенклатура,"БольшеНеПоставляется"); КонецЕсли;
		
		// СТАВКА НДС
		
		Если СтруктураКолонокТовары.ЕстьСтавкаНДС И СтруктураКолонокТовары.ЕстьУчитыватьНДС Тогда ТекДанные.СтавкаНДС = РаботаСНоменклатурой.ПолучитьСтавкуНДСНоменклатуры(ТекДанные.Номенклатура) КонецЕсли;
		
		// УПАКОВКА
		
		Если СтруктураКолонокТовары.ЕстьУпаковка И ЗаполнитьУпаковкуПоставщика Тогда
			ТекДанные.Упаковка = РаботаСНоменклатурой.ПолучитьУпаковкуПоставщика(ТекДанные.Номенклатура); КонецЕсли;
		
		// ЦЕНА
		// получаем сразу с акцией
		Если 	ПересчитатьЦену И СтруктураКолонокТовары.ТипЦен <> Неопределено И 
				СтруктураКолонокТовары.ЕстьЦена Тогда
				Акция = Неопределено;
				
				Цена = РаботаСНоменклатурой.ПолучитьЦену(	ТекДанные.Номенклатура, 
																	СтруктураКолонокТовары.ТипЦен,
																	СтруктураКолонокТовары.Валюта,
																	?(СтруктураКолонокТовары.ЕстьУпаковка, ТекДанные.Упаковка, Неопределено), 
																	СтруктураКолонокТовары.Контрагент, 
																	СтруктураКолонокТовары.ЕстьАкция, 
																	Акция,
																	СтруктураКолонокТовары.ЕстьЦенаПоАкции);
																	
			Если СтруктураКолонокТовары.ЕстьЦенаПоАкции Тогда
				ТекДанные.Цена 			= Цена.Цена;
				ТекДанные.ЦенаПоАкции	= Цена.ЦенаПоАкции;
			Иначе
				ТекДанные.Цена 			= Цена;
			КонецЕсли;
													
			Если СтруктураКолонокТовары.ЕстьАкция Тогда
				ТекДанные.Акция = Акция; 
				ТекДанные.ВариантРасчета = Заказы.ПолучитьВариантРасчетаЦеныПоАкции(Акция); КонецЕсли;
					
			Если ДоставкаВключенаВЦену Тогда
				ТекДанные.ЦенаПоУмолчанию = ТекДанные.Цена;
				ТекДанные.Цена = ТекДанные.ЦенаПоУмолчанию + ТекДанные.Доставка/ТекДанные.Количество; КонецЕсли;

		КонецЕсли;																																																									
		
		// СКИДКИ
		
		Если  СтруктураКолонокТовары.ЕстьПроцентАвтоматическойСкидки Тогда
			
			Если СтруктураКолонокТовары.ДисконтнаяКарта <> Неопределено ИЛИ СтруктураКолонокТовары.Контрагент <> Неопределено Тогда	
				ТекДанные.ПроцентАвтоматическойСкидки = РаботаСНоменклатурой.ПолучитьПроцентАвтоматическойСкидки(ТекДанные.Номенклатура, СтруктураКолонокТовары.Контрагент, СтруктураКолонокТовары.ДисконтнаяКарта, ?(СтруктураКолонокТовары.ЕстьАкция, ТекДанные.Акция, Неопределено)); КонецЕсли;
					
			//Если СтруктураКолонокТовары.ЕстьСуммаБезСкидки И СтруктураКолонокТовары.ЕстьСуммаАвтоматическойСкидки Тогда
			//	ТекДанные.СуммаАвтоматическойСкидки = ТекДанные.СуммаБезСкидки * ТекДанные.ПроцентАвтоматическойСкидки / 100;
			//КонецЕсли;
		КонецЕсли;
		
		Если СтруктураКолонокТовары.ЕстьПроцентРучнойСкидки Тогда
			
			Если СтруктураКолонокТовары.ЕстьАкция И СкидкаТолькоПоАкции(ТекДанные.Акция, ТекДанные.ВариантРасчета) Тогда
				ТекДанные.ПроцентРучнойСкидки = 0; 
				               
			    Если СтруктураКолонокТовары.ЕстьСуммаРучнойСкидки Тогда ТекДанные.СуммаРучнойСкидки = 0; КонецЕсли;
				
				КонецЕсли; 
	
		КонецЕсли;
		
		//Артикул поставщика
		
		Если СтруктураКолонокТовары.ЕстьАртикулПоставщика Тогда
			ТекДанные.АртикулПоставщика = РаботаСНоменклатурой.ПолучитьАртикулПоставщика(ТекДанные.Номенклатура,СтруктураКолонокТовары.Контрагент);
		КонецЕсли;
		
		//Номер ГТД
		
		Если СтруктураКолонокТовары.ЕстьНомерГТД Тогда
			ТекДанные.НомерГТД = РаботаСНоменклатурой.ПолучитьНомерГТД(ТекДанные.Номенклатура);
		КонецЕсли;
			
		//РассчитатьСуммыТабличныхЧастей(ТекДанные, СтруктураКолонокТовары,, ?(ПересчитатьЦену И СтруктураКолонокТовары.ТипЦен <> Неопределено, КэшируемыеФункции.ПолучитьЦенаВключаетНДС(СтруктураКолонокТовары.ТипЦен), Неопределено), ПересчитатьЦену);		
		РассчитатьСуммыСтрокиОтЦены(ТекДанные, СтруктураКолонокТовары, ПересчитатьЦену);
	
	КонецЕсли;
		
КонецПроцедуры

Функция СкидкаТолькоПоАкции(Акция, ВариантРасчета) Экспорт
	Возврат ВариантРасчета = 1 И Акция <> Неопределено и Не Акция.Пустая();
КонецФункции

Процедура УпаковкаПриИзменении(ТабличнаяЧастьТовары, СтруктураКолонокТовары, ТекДанные = Неопределено, ДисконтнаяКарта = Неопределено, ДоставкаВключенаВЦену = Ложь) Экспорт
	
	Если ТекДанные = Неопределено Тогда
		ТекДанные = ТабличнаяЧастьТовары.ТекущиеДанные;
	КонецЕсли;
	
	Если ТекДанные <> Неопределено Тогда
		
		//Если СтруктураКолонокТовары.ЕстьКоличествоВУпаковке Тогда
		//	ТекДанные.КоличествоВУпаковке = РаботаСНоменклатурой.ПолучитьКоэффициентУпаковки(ТекДанные.Упаковка);
		//КонецЕсли;
		
		Если СтруктураКолонокТовары.ЕстьЦена Тогда 
				Акция = Неопределено;	
				Цена = РаботаСНоменклатурой.ПолучитьЦену(	ТекДанные.Номенклатура, 
																	СтруктураКолонокТовары.ТипЦен,
																	СтруктураКолонокТовары.Валюта,
																	?(СтруктураКолонокТовары.ЕстьУпаковка, ТекДанные.Упаковка, Неопределено), 
																	СтруктураКолонокТовары.Контрагент, 
																	СтруктураКолонокТовары.ЕстьАкция, 
																	Акция,
																	СтруктураКолонокТовары.ЕстьЦенаПоАкции);
			Если СтруктураКолонокТовары.ЕстьЦенаПоАкции Тогда
				ТекДанные.Цена 			= Цена.Цена;
				ТекДанные.ЦенаПоАкции	= Цена.ЦенаПоАкции;
			Иначе
				ТекДанные.Цена 			= Цена;
			КонецЕсли;

			Если СтруктураКолонокТовары.ЕстьАкция Тогда
				ТекДанные.Акция = Акция; 
				ТекДанные.ВариантРасчета = Заказы.ПолучитьВариантРасчетаЦеныПоАкции(Акция); КонецЕсли;

			Если ДоставкаВключенаВЦену Тогда
				ТекДанные.ЦенаПоУмолчанию = ТекДанные.Цена;
				ТекДанные.Цена = ТекДанные.ЦенаПоУмолчанию + ТекДанные.Доставка/ТекДанные.Количество; КонецЕсли;
													
		КонецЕсли;
		
		Если  СтруктураКолонокТовары.ЕстьПроцентАвтоматическойСкидки Тогда
			
			Если СтруктураКолонокТовары.ЕстьАкция И СкидкаТолькоПоАкции(ТекДанные.Акция, ТекДанные.ВариантРасчета) Тогда  	
				ТекДанные.ПроцентАвтоматическойСкидки = 0; КонецЕсли;
	
		КонецЕсли;
		
		Если СтруктураКолонокТовары.ЕстьПроцентРучнойСкидки Тогда
			
			Если СтруктураКолонокТовары.ЕстьАкция И СкидкаТолькоПоАкции(ТекДанные.Акция, ТекДанные.ВариантРасчета) Тогда
				ТекДанные.ПроцентРучнойСкидки = 0; КонецЕсли; 
	
		КонецЕсли;
		
		//РассчитатьСуммыТабличныхЧастей(ТекДанные, СтруктураКолонокТовары);
		РассчитатьСуммыСтрокиОтЦены(ТекДанные, СтруктураКолонокТовары);
		
	КонецЕсли;
		
КонецПроцедуры
Процедура КоличествоПриИзменении(ТабличнаяЧастьТовары, СтруктураКолонокТовары, ТекДанные = Неопределено, РазмещениеТоваров = Неопределено, текСклад = Неопределено) Экспорт
	
	//Получим текущую строку
	
	Если ТекДанные = Неопределено Тогда ТекДанные = ТабличнаяЧастьТовары.ТекущиеДанные КонецЕсли;
	
	// Посчитаем суммы
	
	Если ТекДанные <> Неопределено Тогда РассчитатьСуммыСтрокиОтЦены(ТекДанные, СтруктураКолонокТовары, Ложь); КонецЕсли;
	
	// Изменим количество в таблице резеров
	
	Если РазмещениеТоваров <> Неопределено И текСклад <> Неопределено Тогда
		
		Добавить = ТекДанные.Количество - КонвертацияТипов.ПолучитьСуммуКолонкиПоУсловию(РазмещениеТоваров, "Количество", Новый Структура("Номенклатура, Размещение", ТекДанные.Номенклатура, текСклад));
		Если Добавить < 0 Тогда	// уменьшаем, запрос к базе не нужен
			
			// Уберем количество с других складов и потом с основного
			РазмещениеТоваров.Сортировать("Количество");
			СтрокиТовара = РазмещениеТоваров.НайтиСтроки(Новый Структура("Номенклатура", ТекДанные.Номенклатура));
			Для Каждого Строка Из СтрокиТовара Цикл
				Убираем = Мин(Строка.Количество - Строка.КоличествоМинимум, Добавить * -1);
				Строка.Количество = Строка.Количество - Убираем; 
				Добавить = Добавить + Убираем; КонецЦикла;
			
			Добавить = Добавить * -1; КонецЕсли;
		
		// Значит запустим общую процедуру размещения
		
		//Если Добавить Тогда
		//	
		//	Заказы.ИзменитьКоличествоРезерваПоПорядкуСкладов(текСклад, РазмещениеТоваров, Новый Структура("Номенклатура, Количество, КоличествоМинимум, КоличествоОтгружено, КоличествоСобрано",
		//															ТекДанные.Номенклатура, ТекДанные.Количество, ТекДанные.КоличествоМинимум, ТекДанные.КоличествоОтгружено, ТекДанные.КоличествоСобрано)); 
		//	//РазмещениеТоваров.Очистить();
		//	//КонвертацияТипов.ДобавитьТаблицуКДругойТаблице(РазмещениеТоваров, ТЗРазм); 
		//КонецЕсли; 
	КонецЕсли;
															
	// Обновим представление резервов
	#Если Клиент Тогда
	
		Если РазмещениеТоваров <> Неопределено Тогда
			ТекДанные.Размещение = ДиалогиСПользователем.ПолучитьПредставлениеРазмещения(ТекДанные.Количество, ДиалогиСПользователем.ПолучитьмассивРазмещенийТоваров(РазмещениеТоваров, ТекДанные.Номенклатура),,?(СтруктураКолонокТовары.ЕстьКоличествоОтгружено, ТекДанные.КоличествоОтгружено, 0)); КонецЕсли;
		
	#КонецЕсли
	
КонецПроцедуры
Процедура ЦенаПриИзменении(ТабличнаяЧастьТовары, СтруктураКолонокТовары, ТекДанные =  Неопределено) Экспорт
	
	Если ТекДанные = Неопределено Тогда
		ТекДанные = ТабличнаяЧастьТовары.ТекущиеДанные;
	КонецЕсли;
	
	Если ТекДанные <> Неопределено Тогда
		
		//РассчитатьСуммыТабличныхЧастей(ТекДанные, СтруктураКолонокТовары);
		РассчитатьСуммыСтрокиОтЦены(ТекДанные, СтруктураКолонокТовары, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры
Процедура СуммаПриИзменении(ТабличнаяЧастьТовары, СтруктураКолонокТовары, ТекДанные =  Неопределено, ДоставкаВключенаВЦену = Ложь) Экспорт
	
	Если ТекДанные = Неопределено Тогда
		ТекДанные = ТабличнаяЧастьТовары.ТекущиеДанные;
	КонецЕсли;
	
	Если ТекДанные <> Неопределено Тогда
		
		Если 	СтруктураКолонокТовары.ЕстьКоличество И
				СтруктураКолонокТовары.ЕстьЦена
				И (НЕ СтруктураКолонокТовары.ЕстьПроцентАвтоматическойСкидки ИЛИ (СтруктураКолонокТовары.ЕстьПроцентАвтоматическойСкидки И ТекДанные.ПроцентАвтоматическойСкидки = 0))
				И (НЕ СтруктураКолонокТовары.ЕстьПроцентРучнойСкидки ИЛИ (СтруктураКолонокТовары.ЕстьПроцентРучнойСкидки И ТекДанные.ПроцентРучнойСкидки = 0))
				И НЕ ДоставкаВключенаВЦену Тогда
				
			ТекДанные.Цена = ?(ТекДанные.Количество = 0, 0, 
									ТекДанные.Сумма / ТекДанные.Количество);
		КонецЕсли;
		
		Если	СтруктураКолонокТовары.ЕстьСуммаБезСкидки И
				СтруктураКолонокТовары.ЕстьСуммаРучнойСкидки Тогда
				
			ТекДанные.СуммаРучнойСкидки = ТекДанные.СуммаБезСкидки - ТекДанные.Сумма; 
			
			Если СтруктураКолонокТовары.ЕстьПроцентРучнойСкидки Тогда
				ТекДанные.ПроцентРучнойСкидки = ТекДанные.СуммаРучнойСкидки * 100 / ТекДанные.СуммаБезСкидки;
			КонецЕсли;
			
		КонецЕсли;	
		
		РассчитатьСуммыТабличныхЧастей(ТекДанные, СтруктураКолонокТовары, Ложь);
		//РассчитатьСуммыСтрокиОтЦены(ТекДанные, СтруктураКолонокТовары, Ложь);

	КонецЕсли;
	
КонецПроцедуры

// СуммаПроц = сумма / проц * 100
// проц * СуммаПроц =  сумма * 100
// проц =  (сумма * 100) / СуммаПроц

Функция ПолучитьСуммуОбратногоПоцентаДляДобавления(СуммаСтала, ПроцентДобавили)
	
	// Вернет сумму которая была до того как к ней прибавили процент
	
	Возврат СуммаСтала - СуммаСтала * ПроцентДобавили / (100 + ПроцентДобавили);
	
КонецФункции


Функция ПолучитьСуммуОбратногоПоцентаДляВычитания(СуммаСтала, ПроцентВычли)
	
	// Вернет сумму которая была до того как из нее вычли процент
	
	Возврат  СуммаСтала / (1 - ПроцентВычли/100);
	
КонецФункции


Процедура СуммаРучнойСкидкиПриИзменении(ТабличнаяЧастьТовары, СтруктураКолонокТовары, ТекДанные =  Неопределено) Экспорт

	Если ТекДанные = Неопределено Тогда
		ТекДанные = ТабличнаяЧастьТовары.ТекущиеДанные;
	КонецЕсли;
	
	Если ТекДанные <> Неопределено Тогда
		
		Сумма = 0;
		Если	СтруктураКолонокТовары.ЕстьКоличество И
				СтруктураКолонокТовары.ЕстьЦена Тогда 
				
				Сумма = ТекДанные.Количество * ТекДанные.Цена;	
		КонецЕсли;		

		
		Если Сумма <> 0 И СтруктураКолонокТовары.ЕстьПроцентРучнойСкидки Тогда
			ТекДанные.ПроцентРучнойСкидки = ТекДанные.СуммаРучнойСкидки * 100 / Сумма;

		КонецЕсли;
		
		//РассчитатьСуммыТабличныхЧастей(ТекДанные, СтруктураКолонокТовары);
		РассчитатьСуммыСтрокиОтЦены(ТекДанные, СтруктураКолонокТовары, Ложь);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПроцентРучнойСкидкиПриИзменении(ТабличнаяЧастьТовары, СтруктураКолонокТовары, ТекДанные =  Неопределено) Экспорт

	Если ТекДанные = Неопределено Тогда
		ТекДанные = ТабличнаяЧастьТовары.ТекущиеДанные;
	КонецЕсли;
	
	Если ТекДанные <> Неопределено Тогда 
		
		Если СтруктураКолонокТовары.ЕстьАкция И СкидкаТолькоПоАкции(ТекДанные.Акция, Заказы.ПолучитьВариантРасчетаЦеныПоАкции(ТекДанные.Акция)) Тогда
		     ТекДанные.ПроцентРучнойСкидки = 0; КонецЕсли;
		 
		//РассчитатьСуммыТабличныхЧастей(ТекДанные, СтруктураКолонокТовары);
		РассчитатьСуммыСтрокиОтЦены(ТекДанные, СтруктураКолонокТовары, Ложь);

	КонецЕсли;

КонецПроцедуры

Процедура ПроцентАвтоматическойСкидкиПриИзменении(ТабличнаяЧастьТовары, СтруктураКолонокТовары, ТекДанные =  Неопределено) Экспорт

	Если ТекДанные = Неопределено Тогда
		ТекДанные = ТабличнаяЧастьТовары.ТекущиеДанные;
	КонецЕсли;
	
	Если ТекДанные <> Неопределено Тогда
		
		//Если СтруктураКолонокТовары.ЕстьСуммаБезСкидки И СтруктураКолонокТовары.ЕстьСуммаАвтоматическойСкидки Тогда
		//	ТекДанные.СуммаАвтоматическойСкидки = ТекДанные.СуммаБезСкидки * ТекДанные.ПроцентАвтоматическойСкидки / 100;
		//КонецЕсли;
		
		//РассчитатьСуммыТабличныхЧастей(ТекДанные, СтруктураКолонокТовары);
		РассчитатьСуммыСтрокиОтЦены(ТекДанные, СтруктураКолонокТовары, Ложь);
		
	КонецЕсли;

КонецПроцедуры
Процедура СуммаБезСкидкиПриИзменении(ТабличнаяЧастьТовары, СтруктураКолонокТовары, ТекДанные = Неопределено) Экспорт
	
	
	
КонецПроцедуры
Процедура ВсегоПриИзменении(ТабличнаяЧастьТовары, СтруктураКолонокТовары, ТекДанные = Неопределено) Экспорт
	
	Если ТекДанные = Неопределено Тогда ТекДанные = ТабличнаяЧастьТовары.ТекущиеДанные КонецЕсли;
	
	Если 	СтруктураКолонокТовары.ЕстьЦена И
			СтруктураКолонокТовары.ЕстьСумма Тогда
			
		Сумма = ТекДанные.Всего;
			
		// Вытолкнем ставку НДС
		
		Если СтруктураКолонокТовары.ЕстьСтавкаНДС Тогда
			
			ПроцентСтавки = КэшируемыеФункции.ПолучитьЧислоСтавкиНДС(ТекДанные.СтавкаНДС);
			Если ПроцентСтавки Тогда
			
				Если СтруктураКолонокТовары.СуммаВключаетНДС Тогда
					
					ТекДанные.СуммаНДС = Сумма - Сумма / ((100 + ПроцентСтавки) / 100);
					ТекДанные.Сумма = ТекДанные.Всего;
					
				Иначе
					
					Сумма = ПолучитьСуммуОбратногоПоцентаДляДобавления(ТекДанные.Всего, ПроцентСтавки); 
					ТекДанные.СуммаНДС = Сумма / 100 * ПроцентСтавки; 
					ТекДанные.Сумма = Сумма;
					
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;
		
		
		// Вытолкнем скидку
		
		ПроцСкидки = 0;			
		Если СтруктураКолонокТовары.ЕстьСуммаРучнойСкидки И СтруктураКолонокТовары.ЕстьПроцентРучнойСкидки Тогда ПроцСкидки = ПроцСкидки + текДанные.ПроцентРучнойСкидки КонецЕсли;
		Если СтруктураКолонокТовары.ЕстьСуммаАвтоматическойСкидки И СтруктураКолонокТовары.ЕстьПроцентАвтоматическойСкидки Тогда ПроцСкидки = ПроцСкидки + текДанные.ПроцентАвтоматическойСкидки КонецЕсли;
		
		ФактСуммаСкидки=0;
		Если ПроцСкидки Тогда 
			
			
			//Сумму скидки считаем всегда с НДС
			Сумма = ПолучитьСуммуОбратногоПоцентаДляВычитания(ТекДанные.Всего,ПроцСкидки);
			Если СтруктураКолонокТовары.ЕстьСуммаРучнойСкидки И СтруктураКолонокТовары.ЕстьПроцентРучнойСкидки Тогда
				текДанные.СуммаРучнойСкидки = Сумма / 100 * текДанные.ПроцентРучнойСкидки; 
			КонецЕсли;
			Если СтруктураКолонокТовары.ЕстьСуммаАвтоматическойСкидки И СтруктураКолонокТовары.ЕстьПроцентАвтоматическойСкидки Тогда
				текДанные.СуммаАвтоматическойСкидки = Сумма / 100 * текДанные.ПроцентАвтоматическойСкидки; 
			КонецЕсли; 
			
			//Для расчетов : фактическая сумма скидки
			Сумма = ПолучитьСуммуОбратногоПоцентаДляВычитания(ТекДанные.Сумма,ПроцСкидки);
			Если СтруктураКолонокТовары.ЕстьСуммаРучнойСкидки И СтруктураКолонокТовары.ЕстьПроцентРучнойСкидки Тогда
				ФактСуммаСкидки = Сумма / 100 * текДанные.ПроцентРучнойСкидки; 
			КонецЕсли;
			Если СтруктураКолонокТовары.ЕстьСуммаАвтоматическойСкидки И СтруктураКолонокТовары.ЕстьПроцентАвтоматическойСкидки Тогда
				ФактСуммаСкидки = ФактСуммаСкидки + Сумма / 100 * текДанные.ПроцентАвтоматическойСкидки; 
			КонецЕсли; 
			
		КонецЕсли;
		
		// Покажем сколько бы было без скидки
		
		Если СтруктураКолонокТовары.ЕстьСуммаБезСкидки Тогда
			ТекДанные.СуммаБезСкидки = ТекДанные.Сумма + ФактСуммаСкидки; 
		КонецЕсли;
		
		
		// Установим цену
		
		ТекДанные.Цена = ТекДанные.СуммаБезСкидки / ТекДанные.Количество; КонецЕсли;
	
КонецПроцедуры
Процедура СтавкаНДСПриИзменении(ТабличнаяЧастьТовары, СтруктураКолонокТовары, ТекДанные =  Неопределено) Экспорт
	
	Если ТекДанные = Неопределено Тогда
		ТекДанные = ТабличнаяЧастьТовары.ТекущиеДанные;
	КонецЕсли;
	
	//Если СтруктураКолонокТовары.УчитыватьНДС <> Истина И НЕ КэшируемыеФункции.ЭтоСтавкаБезНДС(ТекДанные.СтавкаНДС) Тогда
	//	
	//	ОбщиеФункции.СообщитьТекст("НДС не учитывается,
	//	|
	//	|Для того чтобы рассчитать сумму НДС, установите флаг ""Учитывать НДС""");
		
	Если ТекДанные <> Неопределено Тогда //И (СтруктураКолонокТовары.УчитыватьНДС ИЛИ КэшируемыеФункции.ЭтоСтавкаБезНДС(ТекДанные.СтавкаНДС))  Тогда
				
		//РассчитатьСуммыТабличныхЧастей(ТекДанные, СтруктураКолонокТовары);
		РассчитатьСуммыСтрокиОтЦены(ТекДанные, СтруктураКолонокТовары, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СуммаНДСПриИзменении(ТабличнаяЧастьТовары, СтруктураКолонокТовары, ТекДанные =  Неопределено) Экспорт
	
	Если ТекДанные = Неопределено Тогда
		ТекДанные = ТабличнаяЧастьТовары.ТекущиеДанные;
	КонецЕсли;
	
	Если ТекДанные <> Неопределено Тогда
		
		Если 	СтруктураКолонокТовары.УчитыватьНДС И Не СтруктураКолонокТовары.СуммаВключаетНДС И  // Если сверху НДС тогда изменим сумму
				СтруктураКолонокТовары.ЕстьСумма И
				СтруктураКолонокТовары.ЕстьВсего Тогда
				
			ТекДанные.Всего = ТекДанные.Сумма + ТекДанные.СуммаНДС;
			
		Иначе
			
			//РассчитатьСуммыТабличныхЧастей(ТекДанные, СтруктураКолонокТовары);

		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКолонокТоваров(ТабличнаяЧастьТовары, СтруктураКолонокТовары) Экспорт
	
	// ЦЕНА
	
	Если Не КэшируемыеФункции.ПравоРедактированияЦеныВДокументе() Тогда
	
		Если СтруктураКолонокТовары.ЕстьЦена Тогда
			ПолучитьЭлементВИерерхии(ТабличнаяЧастьТовары.ПодчиненныеЭлементы, "Цена").ТолькоПросмотр = Истина;
		КонецЕсли;
		
		Если СтруктураКолонокТовары.ЕстьСумма Тогда
			ПолучитьЭлементВИерерхии(ТабличнаяЧастьТовары.ПодчиненныеЭлементы, "Сумма").ТолькоПросмотр = Истина;
		КонецЕсли;
					
	КонецЕсли;
	
	Если СтруктураКолонокТовары.ЕстьСуммаБезСкидки Тогда
		ПолучитьЭлементВИерерхии(ТабличнаяЧастьТовары.ПодчиненныеЭлементы, "СуммаБезСкидки").ТолькоПросмотр = Истина;
	КонецЕсли;
	
	//   Если СтруктураКолонокТовары.ЕстьПроцентАвтоматическойСкидки Тогда
	//	ПолучитьЭлементВИерерхии(ТабличнаяЧастьТовары.ПодчиненныеЭлементы, "ПроцентАвтоматическойСкидки").ТолькоПросмотр = Истина;
	//КонецЕсли;
	
	Если СтруктураКолонокТовары.ЕстьСуммаАвтоматическойСкидки Тогда
		ПолучитьЭлементВИерерхии(ТабличнаяЧастьТовары.ПодчиненныеЭлементы, "СуммаАвтоматическойСкидки").ТолькоПросмотр = Истина;
	КонецЕсли;

	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНастройкиТабличногоДокумента(ТабДок) Экспорт
	
	ТабДок.ОтображатьСетку 		= Ложь;
	ТабДок.Защита 				= Ложь;
	ТабДок.ТолькоПросмотр 		= Ложь;
	ТабДок.ОтображатьЗаголовки 	= Ложь;
КонецПроцедуры

&НаСервере
Функция ПреобразоватьМассивШтрихКодовВНоменклатуру(МассивСтруктурШтрихКодов, СообщатьОбОшибке = Истина) Экспорт
	
	// МассивСтруктурШтрихКодов - структура:
	//								- ШтрихКод 
	// 								- Количество
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ШтрихКод", 	Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(13)));
	Таблица.Колонки.Добавить("Количество",	Новый ОписаниеТипов("Число"));
	
	Для Каждого Структура Из МассивСтруктурШтрихКодов Цикл
		ЗаполнитьЗначенияСвойств(Таблица.Добавить(), Структура);
	КонецЦикла;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ШтрихКоды.ШтрихКод,
	|	ШтрихКоды.Количество
	|ПОМЕСТИТЬ
	|	ШтрихКоды
	|ИЗ
	|	&ШтрихКоды КАК ШтрихКоды
	|;
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Рег.Объект, &ПустаяНоменклатура) КАК Номенклатура,
	|	Рег.Упаковка,
	|	ШтрихКоды.ШтрихКод,
	|	ШтрихКоды.Количество
	|ИЗ
	|	ШтрихКоды КАК ШтрихКоды
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ШтрихКоды КАК Рег
	|ПО
	|	Рег.ШтрихКод = ШтрихКоды.ШтрихКод
	|
	|");
	
	Запрос.УстановитьПараметр("ПустаяНоменклатура", Справочники.Номенклатура.ПустаяСсылка());
	Запрос.УстановитьПараметр("ШтрихКоды", Таблица);
	
	ИмяСтруктуры 	= "Номенклатура, Упаковка, Количество";
	МассивВозврата 	= Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Номенклатура.Пустая() Тогда
			
			Если СообщатьОбОшибке Тогда
				ОбщиеФункции.СообщитьТекст("Не найдена номенклатура по штрих коду " + Выборка.ШтрихКод);
			КонецЕсли;
			
		Иначе
		
			МассивВозврата.Добавить(Новый Структура(ИмяСтруктуры,
													Выборка.Номенклатура,
													Выборка.ШтрихКод,
													Выборка.Количество));
		КонецЕсли;
	КонецЦикла;
												
	Возврат МассивВозврата;
	
КонецФункции

Процедура РассчитатьСуммыТабличныхЧастей(СтрокаТаблицы, СтруктураКолонокТовары, ПересчитатьПолеСумма = Истина,  ЦенаУжеВключаетНДС = Неопределено, ПересчитатьЦену = Ложь, ТипЦенВключаетНДС = Неопределено) Экспорт
	
	Перем УчитыватьНДС, СуммаВключаетНДС, стВалюта, стСуммаВключаетНДС, Касса, стУчитыватьНДС, стТипЦен;
	
	УчитыватьНДС = ?(СтруктураКолонокТовары.Свойство("УчитыватьНДС", УчитыватьНДС) И УчитыватьНДС <> Неопределено, СтруктураКолонокТовары.УчитыватьНДС, Истина);
	
	СуммаВключаетНДС = ?(СтруктураКолонокТовары.Свойство("СуммаВключаетНДС", СуммаВключаетНДС) И СуммаВключаетНДС <> Неопределено, СтруктураКолонокТовары.СуммаВключаетНДС, Истина);

	// НДС
	
	Если 	УчитыватьНДС <> Истина 
			И СтруктураКолонокТовары.ЕстьСтавкаНДС
			И СтруктураКолонокТовары.ЕстьСуммаНДС Тогда	
		
			СтрокаТаблицы.СтавкаНДС = РаботаСНоменклатурой.ПолучитьСтавкуНДСНоменклатуры();
			СтрокаТаблицы.СуммаНДС	= 0;
	КонецЕсли;
	
	Если 	УчитыватьНДС = Истина И 
			СтруктураКолонокТовары.ЕстьСтавкаНДС И 
			Не КэшируемыеФункции.ЭтоСтавкаБезНДС(СтрокаТаблицы.СтавкаНДС) И
			КэшируемыеФункции.ПолучитьЧислоСтавкиНДС(СтрокаТаблицы.СтавкаНДС) = 0 Тогда
		
			СтрокаТаблицы.СтавкаНДС = РаботаСНоменклатурой.ПолучитьСтавкуНДСНоменклатуры(СтрокаТаблицы.Номенклатура);
			
	КонецЕсли;
	
	Если 	УчитыватьНДС = Истина И СтруктураКолонокТовары.Свойство("стУчитыватьНДС", стУчитыватьНДС) И стУчитыватьНДС <> Неопределено И стУчитыватьНДС <> УчитыватьНДС И
			СтруктураКолонокТовары.ЕстьСтавкаНДС Тогда
			
			СтрокаТаблицы.СтавкаНДС = РаботаСНоменклатурой.ПолучитьСтавкуНДСНоменклатуры(СтрокаТаблицы.Номенклатура);
			
	КонецЕсли;
		
	
	// УПАКОВКА
	//	
	//Если 	СтруктураКолонокТовары.ЕстьУпаковка
	//		И ЗначениеЗаполнено(СтрокаТаблицы.Упаковка)
	//		И СтруктураКолонокТовары.ЕстьКоличествоВУпаковке Тогда
	//				
	//		СтрокаТаблицы.КоличествоТовара = РаботаСНоменклатурой.ПолучитьКоэффициентУпаковки(СтрокаТаблицы.Упаковка);
	//				
	//КонецЕсли;

		
	// ЦЕНА С НДС
	
	Если    ПересчитатьЦену И
			ТипЦенВключаетНДС <> Ложь И
			//ЦенаУжеВключаетНДС <> Неопределено И
			СтруктураКолонокТовары.Свойство("стСуммаВключаетНДС", стСуммаВключаетНДС) И стСуммаВключаетНДС <> Неопределено 
			И СтруктураКолонокТовары.ЕстьЦена
			И СтруктураКолонокТовары.ЕстьСтавкаНДС Тогда
			
			СтрокаТаблицы.Цена = РаботаСНоменклатурой.ПолучитьЦенуСУчетомНДС(СтрокаТаблицы.Цена, СтрокаТаблицы.СтавкаНДС, УчитыватьНДС, СуммаВключаетНДС, ?(ЦенаУжеВключаетНДС <> Неопределено, ЦенаУжеВключаетНДС, стСуммаВключаетНДС));
		
	КонецЕсли;
	
	// ЦЕНА В НОВОЙ ВАЛЮТЕ
	
	Если 	СтруктураКолонокТовары.Свойство("стВалюта", стВалюта) И стВалюта <> Неопределено И СтруктураКолонокТовары.стВалюта <> СтруктураКолонокТовары.Валюта
			И СтруктураКолонокТовары.ЕстьЦена Тогда
		
		СтрокаТаблицы.Цена = РаботаСНоменклатурой.ПолучитьЦенуПриИзмененииВалюты(СтрокаТаблицы.Цена, СтруктураКолонокТовары.стВалюта, СтруктураКолонокТовары.Валюта);
	КонецЕсли;
	
	// ЦЕНА В НОВОМ ТИПЕ ЦЕН
	
	Если 	СтруктураКолонокТовары.ЕстьЦена И 
			((СтруктураКолонокТовары.Свойство("стТипЦен", стТипЦен) И стТипЦен <> Неопределено И СтруктураКолонокТовары.стТипЦен <> СтруктураКолонокТовары.ТипЦен) 
			ИЛИ ПересчитатьЦену) Тогда
		
			Акция = Неопределено;
			
			Цена = РаботаСНоменклатурой.ПолучитьЦену(	СтрокаТаблицы.Номенклатура, 
																	СтруктураКолонокТовары.ТипЦен,
																	СтруктураКолонокТовары.Валюта,
																	?(СтруктураКолонокТовары.ЕстьУпаковка, СтрокаТаблицы.Упаковка, Неопределено), 
																	СтруктураКолонокТовары.Контрагент, 
																	СтруктураКолонокТовары.ЕстьАкция, 
																	Акция,
																	СтруктураКолонокТовары.ЕстьЦенаПоАкции);
																	
			Если СтруктураКолонокТовары.ЕстьЦенаПоАкции Тогда
				СтрокаТаблицы.Цена 			= Цена.Цена;
				СтрокаТаблицы.ЦенаПоАкции	= Цена.ЦенаПоАкции; 
			Иначе
				СтрокаТаблицы.Цена 			= Цена;
			КонецЕсли;
																	
			Если СтруктураКолонокТовары.ЕстьАкция Тогда
				СтрокаТаблицы.Акция = Акция; 
				СтрокаТаблицы.ВариантРасчета = Заказы.ПолучитьВариантРасчетаЦеныПоАкции(Акция);
				Если СкидкаТолькоПоАкции(СтрокаТаблицы.Акция, СтрокаТаблицы.ВариантРасчета) Тогда
					Если СтруктураКолонокТовары.ЕстьПроцентАвтоматическойСкидки Тогда СтрокаТаблицы.ПроцентАвтоматическойСкидки = 0; КонецЕсли;
					Если СтруктураКолонокТовары.ЕстьПроцентРучнойСкидки Тогда СтрокаТаблицы.ПроцентРучнойСкидки = 0; КонецЕсли;
				КонецЕсли;
			КонецЕсли;
	 									
		// цену получим, включающую НДС, поправим это если нужно:																	
		Если СтруктураКолонокТовары.ЕстьСтавкаНДС Тогда
	        СтрокаТаблицы.Цена = РаботаСНоменклатурой.ПолучитьЦенуСУчетомНДС(СтрокаТаблицы.Цена, СтрокаТаблицы.СтавкаНДС, , СуммаВключаетНДС);
		КонецЕсли;
			
	КонецЕсли;
	
	
	// СУММА БЕЗ СКИДКИ
	
	Если 	СтруктураКолонокТовары.ЕстьКоличество И
			СтруктураКолонокТовары.ЕстьЦена И 
			СтруктураКолонокТовары.ЕстьСуммаБезСкидки Тогда
			
			СтрокаТаблицы.СуммаБезСкидки = СтрокаТаблицы.Количество * СтрокаТаблицы.Цена;
	КонецЕсли;
	
	// СУММА

	Если 	СтруктураКолонокТовары.ЕстьСуммаБезСкидки И СтруктураКолонокТовары.ЕстьСумма Тогда
		
			СтрокаТаблицы.Сумма	= СтрокаТаблицы.СуммаБезСкидки;
	КонецЕсли;
		
		
	Если 	СтруктураКолонокТовары.ЕстьКоличество И
			СтруктураКолонокТовары.ЕстьЦена И 
			СтруктураКолонокТовары.ЕстьСумма И НЕ СтруктураКолонокТовары.ЕстьСуммаБезСкидки И ПересчитатьПолеСумма Тогда
			
			СтрокаТаблицы.Сумма = СтрокаТаблицы.Количество * СтрокаТаблицы.Цена;
	КонецЕсли;
	
	
	//СУММА АВТ СКИДКИ
	
	Если 	СтруктураКолонокТовары.ЕстьСуммаБезСкидки И 
			СтруктураКолонокТовары.ЕстьСуммаАвтоматическойСкидки Тогда
			
			СтрокаТаблицы.СуммаАвтоматическойСкидки = Окр(СтрокаТаблицы.СуммаБезСкидки * СтрокаТаблицы.ПроцентАвтоматическойСкидки / 100, 2); // belova 21.08.2014 добавила округление
	КонецЕсли;

	Если	//СтруктураКолонокТовары.ЕстьСуммаБезСкидки И
			СтруктураКолонокТовары.ЕстьСуммаАвтоматическойСкидки Тогда
			
			СтрокаТаблицы.Сумма	 =	СтрокаТаблицы.Сумма - СтрокаТаблицы.СуммаАвтоматическойСкидки;
	КонецЕсли;
	
	//СУММА РУЧ СКИДКИ
	
	Если 	СтруктураКолонокТовары.ЕстьСуммаБезСкидки И 
			СтруктураКолонокТовары.ЕстьСуммаРучнойСкидки Тогда
			
			СтрокаТаблицы.СуммаРучнойСкидки = Окр(СтрокаТаблицы.СуммаБезСкидки * СтрокаТаблицы.ПроцентРучнойСкидки / 100, 2);   // belova 21.08.2014 добавила округление
	КонецЕсли;

	
	Если	//СтруктураКолонокТовары.ЕстьСуммаБезСкидки И
			СтруктураКолонокТовары.ЕстьСуммаРучнойСкидки Тогда
			
			СтрокаТаблицы.Сумма	 =	СтрокаТаблицы.Сумма - СтрокаТаблицы.СуммаРучнойСкидки;
	КонецЕсли;
	
	// СУММА НДС
	
	Если 	УчитыватьНДС = Истина И СтруктураКолонокТовары.ЕстьСумма И
			СтруктураКолонокТовары.ЕстьСтавкаНДС И
			СтруктураКолонокТовары.ЕстьСуммаНДС Тогда
			
			СтавкаНДС = КэшируемыеФункции.ПолучитьЧислоСтавкиНДС(СтрокаТаблицы.СтавкаНДС);

							
			Если СуммаВключаетНДС Тогда	
				СтрокаТаблицы.СуммаНДС = Окр(СтавкаНДС * СтрокаТаблицы.Сумма / (СтавкаНДС + 100), 2); // belova 21.08.2014 добавила округление
			Иначе
				СтрокаТаблицы.СуммаНДС = Окр(СтавкаНДС * СтрокаТаблицы.Сумма / 100, 2); // belova 21.08.2014 добавила округление
			КонецЕсли;				
	                                                                                                                                                                  
		
	КонецЕсли;
		
	// ОКРУГЛИМ
	
	Если СтруктураКолонокТовары.Свойство("Касса", Касса) И Касса <> Неопределено Тогда
		СтрокаТаблицы.Сумма = Окр(СтрокаТаблицы.Сумма, КэшируемыеФункции.ПолучитьТочностьОкругления(Касса));
	КонецЕсли;
	
	
	// ВСЕГО
	
	Если 	СтруктураКолонокТовары.ЕстьВсего И
			СтруктураКолонокТовары.ЕстьСумма Тогда
		
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма;
		
	КонецЕсли;
			
	Если 	УчитыватьНДС = Истина И Не СуммаВключаетНДС И
			СтруктураКолонокТовары.ЕстьСуммаНДС И
			СтруктураКолонокТовары.ЕстьВсего Тогда
				
		СтрокаТаблицы.Всего = СтрокаТаблицы.Всего + СтрокаТаблицы.СуммаНДС;
				
	КонецЕсли;	
	
КонецПроцедуры

Функция СтавкаБезНДС()
	
	#Если Клиент Тогда
		Возврат глСтавкаНДС_БезНДС;
	#ИначеЕсли Сервер Тогда
		Возврат Перечисления.СтавкиНДС.БезНДС;
	#КонецЕсли
	
КонецФункции

Процедура РассчитатьСуммыСтрокиОтЦены(СтрокаТаблицы, СтруктураКолонокТовары, ПересчитатьЦену = Истина) Экспорт
	
	// Великая, прекрасная, мудрая процедура перерасчета, попытка 2 !!!
	
	Перем ТипЦенВключаетНДС;
	
	Если Не СтруктураКолонокТовары.ЕстьКоличество Тогда Возврат КонецЕсли;
	//Количество			= СтрокаТаблицы.Количество * ?(СтруктураКолонокТовары.ЕстьУпаковка = Истина И ЗначениеЗаполнено(СтрокаТаблицы.Упаковка) И (СтруктураКолонокТовары.Свойство("ЕстьКоличествоВУпаковке") И СтруктураКолонокТовары.ЕстьКоличествоВУпаковке), РаботаСНоменклатурой.ПолучитьКоэффициентУпаковки(СтрокаТаблицы.Упаковка), 1);
	Количество			= СтрокаТаблицы.Количество; // Расчет по упаковке отключаем  так как если указана упаковка то и сумму считаем упаковки а не всего товара в упаковке (испр. ошибки умнажаенияумножения на коэффициент)	
	
	УчитыватьСкидку 	= Истина;
	Акция				= ?(СтруктураКолонокТовары.ЕстьАкция, СтрокаТаблицы.Акция, Неопределено);
	УчитыватьНДС 		= ?(СтруктураКолонокТовары.Свойство("УчитыватьНДС", 	УчитыватьНДС) И УчитыватьНДС <> Неопределено, СтруктураКолонокТовары.УчитыватьНДС, Истина);
	СуммаВключаетНДС 	= ?(СтруктураКолонокТовары.Свойство("СуммаВключаетНДС", СуммаВключаетНДС) И СуммаВключаетНДС <> Неопределено, СтруктураКолонокТовары.СуммаВключаетНДС, Истина);
    ЕстьДоставка	    = ?(СтруктураКолонокТовары.Свойство("ЕстьДоставка"), СтруктураКолонокТовары.ЕстьДоставка, Ложь);

	РасчетСкидкиОтЦены = Ложь;
	РасчетСкидкиОтЦены = ?(СтруктураКолонокТовары.Свойство("РасчетСкидкиОтЦены", РасчетСкидкиОтЦены), СтруктураКолонокТовары.РасчетСкидкиОтЦены, Ложь);
	
	ЕстьСкидка = ?(СтруктураКолонокТовары.ЕстьПроцентРучнойСкидки, СтрокаТаблицы.ПроцентРучнойСкидки, 0) + ?(СтруктураКолонокТовары.ЕстьПроцентАвтоматическойСкидки, СтрокаТаблицы.ПроцентАвтоматическойСкидки, 0);
	
	// Если в строке есть скидка( ручная или автоматическая) и включен флаг РасчетСкидкиОтЦена то Цена пересчитывается в обязательном порядке
	
	ПересчитатьЦену = ПересчитатьЦену ИЛИ РасчетСкидкиОтЦены; // И ЕстьСкидка;
	
#Область Рассчитать_цену_ценуНДС_Акцию

	// Получаем официальную цену
	
    	
	Цена 	= ?(Не ПересчитатьЦену Или СтруктураКолонокТовары.ТипЦен = Неопределено, ?(СтруктураКолонокТовары.ЕстьЦена, СтрокаТаблицы.Цена, 0),
					РаботаСНоменклатурой.ПолучитьЦену(	СтрокаТаблицы.Номенклатура,
													СтруктураКолонокТовары.ТипЦен,
													СтруктураКолонокТовары.Валюта,
													?(СтруктураКолонокТовары.ЕстьУпаковка, СтрокаТаблицы.Упаковка, Неопределено),
													СтруктураКолонокТовары.Контрагент, 
													СтруктураКолонокТовары.ЕстьАкция, 
													Акция,,,,
													СтруктураКолонокТовары.Контрагент,,,
													ТипЦенВключаетНДС));
														
	
	// Перещелкним акцию
	
													
	Если СтруктураКолонокТовары.ЕстьАкция Тогда
		СтрокаТаблицы.Акция = Акция; 
		Если СкидкаТолькоПоАкции(Акция, Заказы.ПолучитьВариантРасчетаЦеныПоАкции(Акция)) Тогда УчитыватьСкидку = Ложь; КонецЕсли; 
	КонецЕсли;

	// Расчитываем цену
	
	Если Не УчитыватьНДС Тогда 
		
		СтавкаНДС = 0; //ЦенаНДСБезОкр = 0; ЦенаБезОкр = Цена; ЦенаСНДС = Цена; 
		Если СтруктураКолонокТовары.ЕстьСтавкаНДС Тогда СтрокаТаблицы.СтавкаНДС = СтавкаБезНДС() КонецЕсли;
		
	Иначе
		
		Если СтруктураКолонокТовары.ЕстьСтавкаНДС И СтрокаТаблицы.СтавкаНДС.Пустая() Тогда СтрокаТаблицы.СтавкаНДС = СтавкаБезНДС() КонецЕсли;
		СтавкаНДС = ?(СтруктураКолонокТовары.ЕстьСтавкаНДС, КэшируемыеФункции.ПолучитьЧислоСтавкиНДС(СтрокаТаблицы.СтавкаНДС), 0);
	
		Если ТипЦенВключаетНДС = Неопределено Тогда ТипЦенВключаетНДС = КэшируемыеФункции.ТипЦенВключаетНДС(СтруктураКолонокТовары.ТипЦен); КонецЕсли;
		
		Если ПересчитатьЦену Тогда
		
			Если СуммаВключаетНДС Тогда
							
				ЦенаБезОкр	= ?(ТипЦенВключаетНДС, Цена, Цена + Цена * СтавкаНДС / 100 );
				Цена = Окр(ЦенаБезОкр, 2);
					
			Иначе
								
				ЦенаБезОкр 	= ?(ТипЦенВключаетНДС, Цена - Цена * СтавкаНДС / (100 + СтавкаНДС), Цена);
				Цена 		= Окр(ЦенаБезОкр, 2);
				
				//Если ТипЦенВключаетНДС И Цена + ЦенаНДС <> Цена Тогда	
				//	Цена = новЦена - (новЦена + ЦенаНДС - Цена);
				//Иначе									
				//	Цена = новЦена; КонецЕсли; 
				
			КонецЕсли;  
		
		КонецЕсли;
				
	КонецЕсли;	
	
	// расчитываем цену если скидка на цену
	ПроцентСкидки = Число(УчитыватьСкидку) * (?(СтруктураКолонокТовары.ЕстьПроцентРучнойСкидки, СтрокаТаблицы.ПроцентРучнойСкидки, 0) + ?(СтруктураКолонокТовары.ЕстьПроцентАвтоматическойСкидки, СтрокаТаблицы.ПроцентАвтоматическойСкидки, 0));

	Если ПроцентСкидки И РасчетСкидкиОтЦены Тогда
		
		ЦенаБезСкидки =  Цена;
	
		ЦенаБезОкр 	= Цена - Цена * ПроцентСкидки/ 100;
		Цена 		= Окр(ЦенаБезОкр, 2);
		
		Если СтруктураКолонокТовары.ЕстьПроцентРучнойСкидки И СтруктураКолонокТовары.ЕстьСуммаРучнойСкидки Тогда СтрокаТаблицы.СуммаРучнойСкидки = (ЦенаБезСкидки / 100 * СтрокаТаблицы.ПроцентРучнойСкидки)*Количество; КонецЕсли;
		Если СтруктураКолонокТовары.ЕстьПроцентАвтоматическойСкидки И СтруктураКолонокТовары.ЕстьСуммаАвтоматическойСкидки Тогда СтрокаТаблицы.СуммаАвтоматическойСкидки = (ЦенаБезСкидки / 100 * СтрокаТаблицы.ПроцентАвтоматическойСкидки)*Количество; КонецЕсли; 
		
	КонецЕсли;	
	
	
	// рассчитываем цену если доствка
	
	Если ЕстьДоставка И ПересчитатьЦену Тогда
		СтоимостьДоставки	= ?(Количество <> 0, СтрокаТаблицы.Доставка/Количество, 0);
		Если СтоимостьДоставки - Окр(СтоимостьДоставки, 2) <> 0 Тогда СтрокаТаблицы.Доставка = 0; СтоимостьДоставки = 0; Сообщить("Невозможно включить доставку для текущей позиции."); КонецЕсли;
		
		Цена       = Цена  + СтоимостьДоставки;
		
	КонецЕсли;

	Если СтруктураКолонокТовары.ЕстьЦена И ПересчитатьЦену Тогда  СтрокаТаблицы.Цена = Цена КонецЕсли;
	
#КонецОбласти


#Область рассчитаем_суммы

	Сумма			= Цена * Количество;
	СуммаНДС		= ?(СуммаВключаетНДС, Сумма * СтавкаНДС/(100 + СтавкаНДС), Сумма * СтавкаНДС /100);
	Всего			= ?(СуммаВключаетНДС, Сумма, Сумма + СуммаНДС);
	
	Если СтруктураКолонокТовары.ЕстьСуммаБезСкидки Тогда	СтрокаТаблицы.СуммаБезСкидки 	= Сумма; 	КонецЕсли;
	Если СтруктураКолонокТовары.ЕстьСумма Тогда				СтрокаТаблицы.Сумма 			= Сумма; 	КонецЕсли;
	Если СтруктураКолонокТовары.ЕстьСуммаНДС Тогда 			СтрокаТаблицы.СуммаНДС			= СуммаНДС; КонецЕсли;
	Если СтруктураКолонокТовары.ЕстьВсего Тогда 			СтрокаТаблицы.Всего 			= Всего; 	КонецЕсли;
	
#КонецОбласти

#Область рассчитаем_скидку_от_суммы

	Если ПроцентСкидки И НЕ РасчетСкидкиОтЦены Тогда
		
			ВсегоДляРасчетаСкидки = ?(ЕстьДоставка, Всего - СтрокаТаблицы.Доставка, Всего); // скидка не распространяется на стоимость доставки
			Всего = ВсегоДляРасчетаСкидки - ВсегоДляРасчетаСкидки  * ПроцентСкидки/ 100 + ?(ЕстьДоставка, СтрокаТаблицы.Доставка, 0);
			СуммаДляРасчетаСкидки = ?(ЕстьДоставка, Сумма - СтрокаТаблицы.Доставка, Сумма);   // скидка не распространяется на стоимость доставки
			
			//Если СтруктураКолонокТовары.ЕстьЦена Тогда						СтрокаТаблицы.Цена 		= Цена КонецЕсли;
			Если СтруктураКолонокТовары.ЕстьСумма Тогда  					СтрокаТаблицы.Сумма 	= СуммаДляРасчетаСкидки - СуммаДляРасчетаСкидки * ПроцентСкидки/ 100 + ?(ЕстьДоставка, СтрокаТаблицы.Доставка, 0); КонецЕсли;
			Если СтруктураКолонокТовары.ЕстьВсего Тогда 					СтрокаТаблицы.Всего 	= Всего; КонецЕсли;
			Если СтруктураКолонокТовары.ЕстьСуммаНДС И УчитыватьНДС Тогда 	СтрокаТаблицы.СуммаНДС 	= Всего * СтавкаНДС / (100 + СтавкаНДС); КонецЕсли;
			
			Если СтруктураКолонокТовары.ЕстьПроцентРучнойСкидки И СтруктураКолонокТовары.ЕстьСуммаРучнойСкидки Тогда СтрокаТаблицы.СуммаРучнойСкидки = ВсегоДляРасчетаСкидки / 100 * СтрокаТаблицы.ПроцентРучнойСкидки; КонецЕсли;
			Если СтруктураКолонокТовары.ЕстьПроцентАвтоматическойСкидки И СтруктураКолонокТовары.ЕстьСуммаАвтоматическойСкидки Тогда СтрокаТаблицы.СуммаАвтоматическойСкидки = ВсегоДляРасчетаСкидки / 100 * СтрокаТаблицы.ПроцентАвтоматическойСкидки; КонецЕсли; 
			
	КонецЕсли;
	
#КонецОбласти

#Область Округления

	// Окргуглим если это касса

	Если СтруктураКолонокТовары.Свойство("Касса") И ЗначениеЗаполнено(СтруктураКолонокТовары.Касса) Тогда
		
		Точность = КэшируемыеФункции.ПолучитьТочностьОкругления(СтруктураКолонокТовары.Касса);
		
		Если СтруктураКолонокТовары.ЕстьСумма Тогда СтрокаТаблицы.Сумма = Окр(СтрокаТаблицы.Сумма, Точность) КонецЕсли;
		Если СтруктураКолонокТовары.ЕстьВсего Тогда СтрокаТаблицы.Всего = Окр(СтрокаТаблицы.Всего, Точность) КонецЕсли; КонецЕсли;	
	
#КонецОбласти
	
КонецПроцедуры

Процедура РассчитатьСуммыСтрокиОтЦены_ст(СтрокаТаблицы, СтруктураКолонокТовары, ПересчитатьЦену = Истина) Экспорт
	
	// Великая, прекрасная, мудрая процедура перерасчета !!!
	
	Перем ТипЦенВключаетНДС;
	
	Если Не СтруктураКолонокТовары.ЕстьКоличество Тогда Возврат КонецЕсли;
	
	Акция				= ?(СтруктураКолонокТовары.ЕстьАкция, СтрокаТаблицы.Акция, Неопределено);
	УчитыватьНДС 		= ?(СтруктураКолонокТовары.Свойство("УчитыватьНДС", 	УчитыватьНДС) И УчитыватьНДС <> Неопределено, СтруктураКолонокТовары.УчитыватьНДС, Истина);
	СуммаВключаетНДС 	= ?(СтруктураКолонокТовары.Свойство("СуммаВключаетНДС", СуммаВключаетНДС) И СуммаВключаетНДС <> Неопределено, СтруктураКолонокТовары.СуммаВключаетНДС, Истина);
	//Количество			= СтрокаТаблицы.Количество * ?(СтруктураКолонокТовары.ЕстьУпаковка = Истина И ЗначениеЗаполнено(СтрокаТаблицы.Упаковка) И (СтруктураКолонокТовары.Свойство("ЕстьКоличествоВУпаковке") И СтруктураКолонокТовары.ЕстьКоличествоВУпаковке), РаботаСНоменклатурой.ПолучитьКоэффициентУпаковки(СтрокаТаблицы.Упаковка), 1);
	Количество			= СтрокаТаблицы.Количество; // Расчет по упаковке отключаем  так как если указана упаковка то и сумму считаем упаковки а не всего товара в упаковке (испр. ошибки умнажаенияумножения на коэффициент)
	УчитыватьСкидку 	= Истина;
    ЕстьДоставка	    = ?(СтруктураКолонокТовары.Свойство("ЕстьДоставка") , СтруктураКолонокТовары.ЕстьДоставка, Ложь);

#Область Рассчитать_цену_ценуНДС_Акцию

	// Получаем официальную цену
	
    	
	Цена 	= ?(Не ПересчитатьЦену Или СтруктураКолонокТовары.ТипЦен = Неопределено, ?(СтруктураКолонокТовары.ЕстьЦена, СтрокаТаблицы.Цена, 0),
					РаботаСНоменклатурой.ПолучитьЦену(	СтрокаТаблицы.Номенклатура,
													СтруктураКолонокТовары.ТипЦен,
													СтруктураКолонокТовары.Валюта,
													?(СтруктураКолонокТовары.ЕстьУпаковка, СтрокаТаблицы.Упаковка, Неопределено),
													СтруктураКолонокТовары.Контрагент, 
													СтруктураКолонокТовары.ЕстьАкция, 
													Акция,,,,
													СтруктураКолонокТовары.Контрагент,,,
													ТипЦенВключаетНДС));
														
	
	// Перещелкним акцию
	
													
	Если СтруктураКолонокТовары.ЕстьАкция Тогда
		СтрокаТаблицы.Акция = Акция; 
		Если СкидкаТолькоПоАкции(Акция, Заказы.ПолучитьВариантРасчетаЦеныПоАкции(Акция)) Тогда
			УчитыватьСкидку = Ложь; КонецЕсли; КонецЕсли;

	// Выделяем НДС из цены
	
	Если Не УчитыватьНДС Тогда 
		
		СтавкаНДС = 0; ЦенаНДСБезОкр = 0; ЦенаБезОкр = Цена; ЦенаСНДС = Цена; 
		Если СтруктураКолонокТовары.ЕстьСтавкаНДС Тогда СтрокаТаблицы.СтавкаНДС = СтавкаБезНДС() КонецЕсли;
		
	Иначе
		
		СтавкаНДС = ?(СтруктураКолонокТовары.ЕстьСтавкаНДС, КэшируемыеФункции.ПолучитьЧислоСтавкиНДС(СтрокаТаблицы.СтавкаНДС), 0);
	
		Если ТипЦенВключаетНДС = Неопределено И УчитыватьНДС Тогда ТипЦенВключаетНДС = Истина КонецЕсли;
		Если СтруктураКолонокТовары.ЕстьСтавкаНДС И СтрокаТаблицы.СтавкаНДС.Пустая() Тогда СтрокаТаблицы.СтавкаНДС = СтавкаБезНДС() КонецЕсли;
			
		Если СуммаВключаетНДС Тогда
			
			ЦенаНДСБезОкр 	= ?(ТипЦенВключаетНДС, Цена - Цена / ((100 + СтавкаНДС) / 100), Цена / 100 * СтавкаНДС);
			ЦенаНДС 		= Окр(ЦенаНДСБезОкр, 2);
			Цена			= Цена + ?(ТипЦенВключаетНДС, 0, ЦенаНДС);
			ЦенаБезОкр		= Цена + ?(ТипЦенВключаетНДС, 0, ЦенаНДСБезОкр);
			
		Иначе
			
			Если ПересчитатьЦену Тогда
			
				ЦенаНДСБезОкр 	= ?(ТипЦенВключаетНДС, Цена - Цена / ((100 + СтавкаНДС) / 100), Цена / 100 * СтавкаНДС);
				ЦенаНДС 		= Окр(ЦенаНДСБезОкр, 2);
				новЦена 		= Цена - ?(ТипЦенВключаетНДС, ЦенаНДС, 0);
				ЦенаБезОкр		= Цена - ?(ТипЦенВключаетНДС, ЦенаНДСБезОкр, 0);
				
				// округлим обратно чтобы не полезли копейки
				
				Если ТипЦенВключаетНДС И новЦена + ЦенаНДС <> Цена Тогда	
					Цена = новЦена - (новЦена + ЦенаНДС - Цена);
				Иначе									
					Цена = новЦена; КонецЕсли; 
			Иначе
				
				ЦенаНДСБезОкр 	= ?(ТипЦенВключаетНДС, Цена / 100 * СтавкаНДС, Цена - Цена / ((100 + СтавкаНДС) / 100));
				ЦенаНДС 		= Окр(ЦенаНДСБезОкр, 2);
				ЦенаБезОкр 		= Цена; КонецЕсли; КонецЕсли;
		
		ЦенаСНДС = ЦенаБезОкр + ?(СуммаВключаетНДС, 0, ЦенаНДСБезОкр); КонецЕсли;
	
	
	Если ЕстьДоставка И ПересчитатьЦену Тогда
		СтоимостьДоставки	= ?(Количество <>0, СтрокаТаблицы.Доставка/Количество, 0);
		Если СтоимостьДоставки - Окр(СтоимостьДоставки, 2) <> 0 Тогда СтрокаТаблицы.Доставка = 0; СтоимостьДоставки = 0; Сообщить("Невозможно включить доставку для текущей позиции."); КонецЕсли;
		Цена          = Цена          + СтоимостьДоставки;
		ЦенаБезОкр    = ЦенаБезОкр    + СтоимостьДоставки;
		ЦенаНДСБезОкр = ЦенаНДСБезОкр + СтоимостьДоставки;
		ЦенаСНДС      = ЦенаСНДС      + СтоимостьДоставки;
	КонецЕсли;


	Если СтруктураКолонокТовары.ЕстьЦена И ПересчитатьЦену Тогда   СтрокаТаблицы.Цена = Цена КонецЕсли;
	
#КонецОбласти

#Область рассчитаем_суммы

	СуммаБезОкр		= ЦенаБезОкр * Количество;
	СуммаНДСБезОкр 	= ЦенаНДСБезОкр * Количество;
	Всего			= Количество * ЦенаСНДС;

	Если СтруктураКолонокТовары.ЕстьСумма Тогда				СтрокаТаблицы.Сумма 			= СуммаБезОкр КонецЕсли;
	Если СтруктураКолонокТовары.ЕстьСуммаНДС Тогда 			СтрокаТаблицы.СуммаНДС			= СуммаНДСБезОкр КонецЕсли;
	Если СтруктураКолонокТовары.ЕстьСуммаБезСкидки Тогда	СтрокаТаблицы.СуммаБезСкидки 	= Количество * ЦенаСНДС КонецЕсли;
	Если СтруктураКолонокТовары.ЕстьВсего Тогда 			СтрокаТаблицы.Всего 			= Всего КонецЕсли;
	
#КонецОбласти

#Область рассчитаем_скидку

	ПроцентСкидки = Число(УчитыватьСкидку) * ?(СтруктураКолонокТовары.ЕстьПроцентРучнойСкидки, СтрокаТаблицы.ПроцентРучнойСкидки, 0) + ?(СтруктураКолонокТовары.ЕстьПроцентАвтоматическойСкидки, СтрокаТаблицы.ПроцентАвтоматическойСкидки, 0);
	Если ПроцентСкидки Тогда
		
		ВсегоБезСкидки 	= ?(ЕстьДоставка, Всего - СтрокаТаблицы.Доставка, Всего);
		Всего 			= ?(ЕстьДоставка, (Всего - СтрокаТаблицы.Доставка) - (Всего -СтрокаТаблицы.Доставка) / 100 * ПроцентСкидки + СтрокаТаблицы.Доставка, Всего - Всего / 100 * ПроцентСкидки); 
			
		Если СтруктураКолонокТовары.ЕстьЦена Тогда						СтрокаТаблицы.Цена 		= Цена КонецЕсли;
		Если СтруктураКолонокТовары.ЕстьСумма Тогда  					СтрокаТаблицы.Сумма 	= ?(ЕстьДоставка, (СуммаБезОкр - СтрокаТаблицы.Доставка) - (СуммаБезОкр - СтрокаТаблицы.Доставка) / 100 * ПроцентСкидки + СтрокаТаблицы.Доставка, СуммаБезОкр - СуммаБезОкр / 100 * ПроцентСкидки) КонецЕсли;
		Если СтруктураКолонокТовары.ЕстьВсего Тогда 					СтрокаТаблицы.Всего 	= Всего КонецЕсли;
		Если СтруктураКолонокТовары.ЕстьСуммаНДС И УчитыватьНДС Тогда 	СтрокаТаблицы.СуммаНДС 	= Всего - Всего / ((100 + СтавкаНДС) / 100) КонецЕсли;
		
		Если СтруктураКолонокТовары.ЕстьПроцентРучнойСкидки И СтруктураКолонокТовары.ЕстьСуммаРучнойСкидки Тогда СтрокаТаблицы.СуммаРучнойСкидки = ВсегоБезСкидки / 100 * СтрокаТаблицы.ПроцентРучнойСкидки; КонецЕсли;
		Если СтруктураКолонокТовары.ЕстьПроцентАвтоматическойСкидки И СтруктураКолонокТовары.ЕстьСуммаАвтоматическойСкидки Тогда СтрокаТаблицы.СуммаАвтоматическойСкидки = ВсегоБезСкидки / 100 * СтрокаТаблицы.ПроцентАвтоматическойСкидки; КонецЕсли; КонецЕсли;
	
#КонецОбласти

#Область Округления

	// Окргуглим если это касса

	Если СтруктураКолонокТовары.Свойство("Касса") И ЗначениеЗаполнено(СтруктураКолонокТовары.Касса) Тогда
		
		Точность = КэшируемыеФункции.ПолучитьТочностьОкругления(СтруктураКолонокТовары.Касса);
		
		Если СтруктураКолонокТовары.ЕстьСумма Тогда СтрокаТаблицы.Сумма = Окр(СтрокаТаблицы.Сумма, Точность) КонецЕсли;
		Если СтруктураКолонокТовары.ЕстьВсего Тогда СтрокаТаблицы.Всего = Окр(СтрокаТаблицы.Всего, Точность) КонецЕсли; КонецЕсли;	
	
#КонецОбласти
	
КонецПроцедуры

Процедура РассчитатьСуммыТабличныхЧастейВоВсехСтроках(Таблица, СтруктураКолонокТовары, ПересчитатьЦену = Ложь,  ЦенаУжеВключаетНДС = Неопределено) Экспорт
	
	Для Каждого Строка Из Таблица Цикл Если СтруктураКолонокТовары.ЕстьЦена = Истина Тогда РассчитатьСуммыСтрокиОтЦены(Строка, СтруктураКолонокТовары, ПересчитатьЦену) КонецЕсли; КонецЦикла;
		
	//	РассчитатьСуммыТабличныхЧастей(Строка, СтруктураКолонокТовары, ПересчитатьПолеСумма,  ЦенаУжеВключаетНДС);
	//	
	//КонецЦикла;
	
КонецПроцедуры


Процедура РассчитатьДинамическиеКолонки(ТабличнаяЧастьТовары, СтруктураКолонокТовары) Экспорт
	 
	Для Каждого Строка Из ТабличнаяЧастьТовары Цикл
		// ВСЕГО
		Если СтруктураКолонокТовары.ЕстьБольшеНеПоставляется Тогда
			Строка.БольшеНеПоставляется = Строка.Номенклатура.БольшеНеПоставляется;
		КонецЕсли;
		
		Если СтруктураКолонокТовары.ЕстьВсего Тогда
		
			Если СтруктураКолонокТовары.ЕстьСумма Тогда
				Строка.Всего = Строка.Сумма;
			КонецЕсли;
						
			Если 	СтруктураКолонокТовары.УчитыватьНДС = Истина 
				  И СтруктураКолонокТовары.СуммаВключаетНДС <> Истина
				  И СтруктураКолонокТовары.ЕстьСуммаНДС Тогда
				Строка.Всего = Строка.Всего + Строка.СуммаНДС;
			КонецЕсли;
		КонецЕсли;
		
		//Если СтруктураКолонокТовары.ЕстьАкция Тогда 
		//	Строка.ВариантРасчета = Заказы.ПолучитьВариантРасчетаЦеныПоАкции(Строка.Акция);
		//КонецЕсли;
		
	КонецЦикла;
	 
КонецПроцедуры


&НаКлиенте
Процедура ОткрытьОбщиеРеквизитыБП(ФормаБП) Экспорт
	
	ОткрытьФорму("ОбщаяФорма.ОбщиеРеквизитыБП", ,ФормаБП);
	
КонецПроцедуры


Процедура ОбновитьПодвал(Объект, Элементы, СуммаВсего, СтруктураКолонокТовары, ИмяТаблицы = "Товары", ИмяЭлементаСуммаНДС = "СуммаНДС", СуммаНДСВсего = Неопределено) Экспорт
	
	Если СтруктураКолонокТовары.ЕстьСуммаВключаетНДС Тогда
	
		Если Объект.СуммаВключаетНДС Тогда
		    Элементы[ИмяЭлементаСуммаНДС].Заголовок =  ?(СтруктураКолонокТовары.ЕстьУчитыватьНДС И НЕ СтруктураКолонокТовары.УчитыватьНДС, "Без налога (НДС)", "В том числе НДС");

			СуммаВсего = Объект[ИмяТаблицы].Итог("Сумма");
						
		Иначе
			Элементы[ИмяЭлементаСуммаНДС].Заголовок =  ?(СтруктураКолонокТовары.ЕстьУчитыватьНДС И НЕ СтруктураКолонокТовары.УчитыватьНДС, "Без налога (НДС)", "Сумма НДС");

			
			Если СтруктураКолонокТовары.ЕстьСуммаНДС Тогда
				СуммаВсего = Объект[ИмяТаблицы].Итог("Сумма") + Объект[ИмяТаблицы].Итог("СуммаНДС");
			КонецЕсли;
						
		КонецЕсли;
		
		Если СтруктураКолонокТовары.ЕстьСуммаНДС И СуммаНДСВсего <> Неопределено Тогда
			СуммаНДСВсего = Объект[ИмяТаблицы].Итог("СуммаНДС");	
		КонецЕсли;
	
	КонецЕсли;

	//СуммаВсего = Объект[ИмяТаблицы].Итог("Сумма");
	
КонецПроцедуры


Процедура ОбновитьПодвалСервер(Объект, Элементы, СуммаВсего, СтруктураКолонокТовары, ИмяТаблицы = "Товары", ИмяЭлементаСуммаНДС = "СуммаНДС", СуммаНДСВсего = Неопределено) Экспорт
	
	Если СтруктураКолонокТовары.ЕстьСуммаВключаетНДС Тогда
	
		Если Объект.СуммаВключаетНДС Тогда
		
			СуммаВсего = Объект[ИмяТаблицы].Итог("Сумма");
			Элементы[ИмяЭлементаСуммаНДС].Заголовок = "В том числе НДС";
		
		ИначеЕсли СтруктураКолонокТовары.ЕстьСуммаНДС Тогда
		
			СуммаВсего = Объект[ИмяТаблицы].Итог("Сумма") + Объект[ИмяТаблицы].Итог("СуммаНДС");
			Элементы[ИмяЭлементаСуммаНДС].Заголовок = "Сумма НДС";
			
			Если СуммаНДСВсего <> Неопределено Тогда
				СуммаНДСВсего = Объект[ИмяТаблицы].Итог("СуммаНДС");	
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЕсли;
		
	//СуммаВсего = Объект[ИмяТаблицы].Итог("Сумма");
	
КонецПроцедуры

&НаКлиенте
Функция ОткрытьОбщиеРеквизиты(ФормаВладелец, Параметры = Неопределено) Экспорт
	ОткрытьФорму("ОбщаяФорма.ОбщиеРеквизитыДокумента",,ФормаВладелец,,,,);
КонецФункции
		
&НаКлиенте
Функция ИзменитьРеквизиты(ФормаВладелец, Параметры = Неопределено) Экспорт
	
	Если КэшируемыеФункции.РольДоступнаПользователю("ИзмененияРеквизитов") Тогда		
		ОткрытьФорму("ОбщаяФорма.ИзменениеРеквизитов", 
			Параметры, 
			ФормаВладелец,,,, Новый ОписаниеОповещения("ОбработатьИзмененияРеквизитов", ФормаВладелец));
	Иначе
		ОткрытьФорму("Документ.РеализацияТоваров.Форма.ФормаОплат", 
			Параметры, 
			ФормаВладелец);
		//ФормаВладелец.Прочитать();
	КонецЕсли;

КонецФункции		

&НаСервере
Функция ЭтоНовый_УДАЛИТЬ(Форма, ИмяОбъекта = "Объект") Экспорт
	
	ТекОбъект = Форма.РеквизитФормыВЗначение(ИмяОбъекта);
	
	Возврат ТекОбъект.ЭтоНовый();
		
КонецФункции


// ОСНОВНЫЕ РЕКВИЗИТЫ

&НаСервере
Функция ЗаполнитьПоЗапросуВсеКромеПустых(Запрос, Объект, СтруктураОчищения, СтруктураЗаполнения = Неопределено, СтруктураРеквизитов = Неопределено)
	
	Если СтруктураРеквизитов = Неопределено Тогда
		СтруктураРеквизитов = Новый Структура; КонецЕсли;
	
	//  и пустые тоже
	
	Выгрузка = Запрос.Выполнить().Выгрузить();
	
	//СтруктураРеквизитов = Новый Структура(Ключ);
	
	Если НЕ Выгрузка.Количество() Тогда
		// очищаем зависимые реквизиты
		
		Для Каждого Строка ИЗ СтруктураОчищения Цикл
			Попытка
				Объект[Строка.Ключ] = Строка.Значение;
			Исключение
				Продолжить;
			КонецПопытки;
				
		КонецЦикла;
	ИначеЕсли СтруктураЗаполнения <> Неопределено Тогда
		
		Для Каждого Строка Из Выгрузка Цикл
			Для Каждого Поле Из СтруктураЗаполнения Цикл
				
				СтруктураРеквизитов.Вставить(Поле.Ключ, Строка[Поле.Ключ]);
				Попытка
					Объект[Поле.Ключ] = Строка[Поле.Ключ];
				Исключение
					Продолжить;
				КонецПопытки;
				
			КонецЦикла;
		КонецЦикла;
	Иначе
		
		Для Каждого Строка Из Выгрузка Цикл
			Для Каждого Колонка Из Выгрузка.Колонки Цикл
				
					СтруктураРеквизитов.Вставить(Колонка.Имя, Строка[Колонка.Имя]);
				//Если ЗначениеЗаполнено(Строка[Колонка.Имя]) Тогда
				Попытка
					///Антон
					///Чтоб при выборе партнера не очищалось поле Организация в германском учете
					Если (ПолучитьФункциональнуюОпцию("НемецкийУчет") И Колонка.Имя = "Организация") 
						ИЛИ (НЕ ЗначениеЗаполнено(Строка[Колонка.Имя]) И Колонка.Имя = "СтатьяДвиженияДенежныхСредств") Тогда //desh.avdonin {{16.03.2015#
						Продолжить;
					Иначе	
						Объект[Колонка.Имя] = Строка[Колонка.Имя];
					КонецЕсли;
					
					Исключение
						Продолжить;
					КонецПопытки;
					 
				//КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	//Возврат КонвертацияТипов.ПолучитьСтруктуруИзСтрокиТаблицыЗначений(Выгрузка);
	Возврат СтруктураРеквизитов; 
КонецФункции 

&НаСервере
Функция ПартнерПриИзменении(Объект, Контрагент = Неопределено, ПрименитьДанныеПоОрганизации = Истина, СтруктураЗаполнения = Неопределено) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|
	|" + ?(Контрагент = Неопределено, "
	|
	|	ЕСТЬNULL(Контр.Ссылка, &ПустойКонтрагент) 			Контрагент, ", "
	//|	Парт.Ссылка 										Партнер,
	|") + " 
	//|	ВЫБОР 
	//|		КОГДА 	ЕСТЬNULL(Контр.ТипЦен, &ПустойТипЦен) <> ЕСТЬNULL(Партнер.ТипЦен, &ПустойТипЦен) И 
	//|				ЕСТЬNULL(Контр.ТипЦен, &ПустойТипЦен) <> &ПустойТипЦен
	//|		ТОГДА 	ЕСТЬNULL(Контр.ТипЦен, Партнер.ТипЦен)
	//|		ИНАЧЕ 	Партнер.ТипЦен
	//|	КОНЕЦ 												ТипЦен,
	|	Контр.ТипЦен 										ТипЦен,
	//|	Парт.СтатьяДвиженияДенежныхСредств					СтатьяДвиженияДенежныхСредств, //desh.avdonin {{11.03.2015#
	|	Контр.СтатьяДвиженияДенежныхСредств					СтатьяДвиженияДенежныхСредств, //desh.avdonin {{11.03.2015#
	|	ЕСТЬNULL(Контр.ФизЛицо,		&ПустоеФизЛицо)			ФизЛицо,
	|	ЕСТЬNULL(СчетКонтр.Ссылка, 	&ПустойСчет)			БанковскийСчетПартнера,
	|
	|" + ?(ПрименитьДанныеПоОрганизации, "
	|
	|	ЕСТЬNULL(Орг.Организация,	&ПустаяОрганизация)		Организация,
	|	ЕСТЬNULL(Орг.Организация.УчитыватьНДС, Истина)		УчитыватьНДС,
	|	ЕСТЬNULL(СчетОрг.Ссылка, 	&ПустойСчет)			БанковскийСчетОрганизации,
	|", "") + "
	|
	// если у партнера есть уровень скидки, дисконтная программа не действует
	|
	| 	ВЫБОР 
	//|		КОГДА 	Парт.Ссылка.УровеньСкидки = &НетУровняСкидки 
	|		КОГДА 	Контр.УровеньСкидки = &НетУровняСкидки 
	|		ТОГДА 	ЕСТЬNULL(Инф.Ссылка, 		&ПустаяКарта)
	|		ИНАЧЕ 	&ПустаяКарта 
	|	КОНЕЦ 												ДисконтнаяКарта
    |
	|ИЗ                                     
	|	Справочник.Контрагенты Контр
	|
	//|ЛЕВОЕ СОЕДИНЕНИЕ
	//|	Справочник.Контрагенты Контр
	//|	ПО Парт.Ссылка = Контр.Партнер " + ?(Контрагент = Неопределено, "", " И Контр.Ссылка = &Контрагент") + "
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.БанковскиеСчета СчетКонтр
	|	ПО Контр.Ссылка = СчетКонтр.Владелец
	|
	|" + ?(ПрименитьДанныеПоОрганизации, "	
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.Контрагенты.Организации Орг
	|	ПО Контр.Ссылка = Орг.Ссылка
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.БанковскиеСчета СчетОрг
	|	ПО Орг.Организация = СчетОрг.Владелец
	|", "") + "
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.ИнформационныеКарты Инф 
	//|	ПО 	Инф.ВладелецКарты = Парт.Ссылка И НЕ Инф.ПометкаУдаления И 
	|	ПО 	Инф.Контрагент = Контр.Ссылка И НЕ Инф.ПометкаУдаления И 
	|		(Инф.ДатаПрекращенияДействия = ДАТАВРЕМЯ(1,1,1) ИЛИ НАЧАЛОПЕРИОДА(Инф.ДатаПрекращенияДействия, ДЕНЬ) > НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)) 
	|
	|ГДЕ
	|	Контр.Ссылка = &Ссылка 	
	|
	|УПОРЯДОЧИТЬ ПО 
	//|	Контр.ЗначениеПоУмолчанию		Убыв, 
	|	СчетКонтр.ЗначениеПоУмолчанию	Убыв 
	|	" + ?(ПрименитьДанныеПоОрганизации, ",
	|	Орг.ЗначениеПоУмолчанию			Убыв,
	|	СчетОрг.ЗначениеПоУмолчанию		Убыв 
	|", "") + "");	
	
	//Запрос.УстановитьПараметр("Ссылка", 			?(Контрагент = Неопределено, Объект.Партнер, Контрагент.Партнер));
	Запрос.УстановитьПараметр("Ссылка", 			Контрагент);
	Запрос.УстановитьПараметр("Контрагент", 		Контрагент);
	Запрос.УстановитьПараметр("ПустойСчет", 		Справочники.БанковскиеСчета.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойКонтрагент", 	Справочники.Контрагенты.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойТипЦен", 		Справочники.ТипыЦен.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяОрганизация",	Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустоеФизЛицо",		Справочники.ФизическиеЛица.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяКарта",		Справочники.ИнформационныеКарты.ПустаяСсылка()); 
	Запрос.УстановитьПараметр("НетУровняСкидки",	Справочники.УровниСкидок.ПустаяСсылка());
	Запрос.УстановитьПараметр("ТекущаяДата",		ТекущаяДата());
	СтруктураРеквизитов = Новый Структура;
	СтруктураОчищения = Новый Структура("БанковскийСчетПартнера", Справочники.БанковскиеСчета.ПустаяСсылка());
	//Если Контрагент = Неопределено Тогда
	//	СтруктураОчищения.Вставить("Контрагент", 	Справочники.Контрагенты.ПустаяСсылка());
	//	СтруктураРеквизитов.Вставить("Партнер", 	Объект.Партнер);

	//Иначе
		//СтруктураОчищения.Вставить("Партнер",		Справочники.Партнеры.ПустаяСсылка());
		СтруктураРеквизитов.Вставить("Контрагент", 	Контрагент);
	//КонецЕсли;
	
	Возврат ЗаполнитьПоЗапросуВсеКромеПустых(Запрос, Объект, СтруктураОчищения, СтруктураЗаполнения, СтруктураРеквизитов);
	
КонецФункции

&НаСервере
Функция КонтрагентПриИзменении(Объект, ПрименитьДанныеПоОрганизации = Истина, СтруктураЗаполнения = Неопределено) Экспорт
	
	Возврат ПартнерПриИзменении(Объект, Объект.Контрагент, ПрименитьДанныеПоОрганизации, СтруктураЗаполнения);
	
КонецФункции
&НаСервере
Функция ОрганизацияПриИзменении(Объект) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 
	|	БанкСч.Ссылка 					БанковскийСчетОрганизации, 
	|	Спр.УчитыватьНДС 				УчитыватьНДС,
	|	Спр.Ссылка						Организация
	|ИЗ 
	|	Справочник.Организации Спр
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.БанковскиеСчета БанкСч
	|	ПО
	|		Спр.Ссылка = БанкСч.Владелец
	|ГДЕ 
	|	Спр.Ссылка = &Ссылка 
	|УПОРЯДОЧИТЬ ПО 
	|	ЗначениеПоУмолчанию Убыв");
	Запрос.УстановитьПараметр("Ссылка", Объект.Организация);
	Возврат ЗаполнитьПоЗапросуВсеКромеПустых(Запрос, Объект, Новый Структура("БанковскийСчетОрганизации", Справочники.БанковскиеСчета.ПустаяСсылка()),, 
	Новый Структура("Организация", Объект.Организация));
	
КонецФункции
&НаСервере
Функция ГрузополучательПриИзменении(Объект) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 
	|	Ссылка БанковскийСчетГрузополучателя	
	|ИЗ
	|	Справочник.БанковскиеСчета
	|	ГДЕ
	|		Владелец = &Ссылка
	|УПОРЯДОЧИТЬ ПО 
	|	ЗначениеПоУмолчанию Убыв");
	Запрос.УстановитьПараметр("Ссылка", Объект.Грузополучатель);
	Возврат ЗаполнитьПоЗапросуВсеКромеПустых(Запрос, Объект, Новый Структура("БанковскийСчетГрузополучателя", Справочники.БанковскиеСчета.ПустаяСсылка()),,
	Новый Структура("Грузополучатель", Объект.Грузополучатель));
	
КонецФункции
&НаСервере
Функция ГрузоотправительПриИзменении(Объект) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 
	|	Ссылка БанковскийСчетГрузоотправителя	
	|ИЗ
	|	Справочник.БанковскиеСчета
	|	ГДЕ
	|		Владелец = &Ссылка
	|УПОРЯДОЧИТЬ ПО 
	|	ЗначениеПоУмолчанию Убыв");
	Запрос.УстановитьПараметр("Ссылка", Объект.Грузоотправитель);
	Возврат ЗаполнитьПоЗапросуВсеКромеПустых(Запрос, Объект, Новый Структура("БанковскийСчетГрузоотправителя", Справочники.БанковскиеСчета.ПустаяСсылка()),,
	Новый Структура("Грузоотправитель", Объект.Грузоотправитель));
	
КонецФункции

&НаСервере
Процедура УстановитьФильтрПоПартнеру(Форма, Контрагент) Экспорт
	
	Если Контрагент.Пустая() Тогда
		НовыйМассив = Новый Массив();
		Форма.Элементы.Контрагент.СвязиПараметровВыбора = Новый ФиксированныйМассив(НовыйМассив);
	Иначе
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(Новый СвязьПараметраВыбора("Отбор.Контрагент", "Контрагент"));
		Форма.Элементы.Контрагент.СвязиПараметровВыбора = Новый ФиксированныйМассив(НовыйМассив);
		
	КонецЕсли;
КонецПроцедуры

// НЕИСПРАВНОСТЬ

&НаКлиенте
Процедура ОкончанияВводаТекстаНеисправности(Форма, Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	// Поищем в базе неисправность
	
	СписокНеисправностей = ФункцииБизнесПроцессов.ПолучитьСписокНеисправностейПоТексту(Текст);
	
	// Если она одна тогда ето ниче не надо
	
	Если ТипЗнч(СписокНеисправностей) = Тип("СправочникСсылка.Неисправности") Тогда
		Возврат;
	КонецЕсли;
	
	// А теперь займемся
	
	
	СписокНеисправностей.Вставить(0, Неопределено, "Создать новый",, БиблиотекаКартинок.СоздатьЭлементСписка);
	
	Выбор = Форма.ВыбратьИзСписка(СписокНеисправностей, Элемент);
	                                    
	// Поищем в базе подобные неисправности
	
	Если Выбор <> Неопределено Тогда
		
		ДанныеВыбора = ?(Выбор.Значение = Неопределено,
				ФункцииБизнесПроцессов.СоздатьНеисправность(Текст),
				Выбор.Значение);
				
	КонецЕсли;
         	
	
КонецПроцедуры

// ЯЧЕЙКИ

&НаКлиенте
Процедура ЗаполнитьЯчейки_ул(ТаблицаТовары) Экспорт
	
	//// Преобразуме в таблицу значений для загрузки в sql
	//
	//ТаблицаТовары = ДанныеФормыВЗначение(ТабличнаяЧастьТовары, Тип("ТаблицаЗначений"));
	
	// Заполним
	
	//ЗаполнитьЯчейкиНаСервере(ТаблицаТовары);
	
	//// Загрузим обратно
	//
	//ЗначениеВДанныеФормы(ТаблицаТовары, ТабличнаяЧастьТовары);
	
КонецПроцедуры
&НаСервере
Процедура ЗаполнитьЯчейки_Ст2(ТаблицаТовары) Экспорт

	// Загрузим текущие товары на сервак
	
	Запрос                         = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ 	ТаблДока.Номенклатура, ТаблДока.Количество
	|ПОМЕСТИТЬ 	ТаблДока
	|ИЗ 		&ТаблицаДока КАК ТаблДока
	|;
	|ВЫБРАТЬ ТаблДока.Номенклатура, СУММА(ТаблДока.Количество) Количество 
	|ПОМЕСТИТЬ Док
	|ИЗ ТаблДока ТаблДока 
	|СГРУППИРОВАТЬ ПО Номенклатура";
	
	Запрос.УстановитьПараметр("ТаблицаДока", ТаблицаТовары.Выгрузить(,"Номенклатура, Количество"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Ост.Ячейка, Док.Номенклатура
	|ИЗ
	|	Док Док
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыВЯчейках.Остатки(, Номенклатура В(ВЫБРАТЬ Док.Номенклатура ИЗ Док)) Ост
	|ПО
	|	Док.Номенклатура = Ост.Номенклатура И
	|	Док.Количество <= Ост.КоличествоОстаток
	|";
	
	ТаблЯчеек = Запрос.Выполнить().Выгрузить();
	ТаблЯчеек.Индексы.Добавить("Номенклатура");
	
	ПустаяЯчейка = Справочники.Ячейки.ПустаяСсылка();
	
	Для каждого Строка Из ТаблицаТовары Цикл
		
		СтрокаЯчейки = ТаблЯчеек.Найти(Строка.Номенклатура, "Номенклатура");
		Строка.Ячейка = ?(СтрокаЯчейки <> Неопределено,
							СтрокаЯчейки.Ячейка,
							ПустаяЯчейка);
	КонецЦикла; 

КонецПроцедуры
&НаСервере
Процедура ЗаполнитьЯчейки_Ст3(ТаблицаТовары, 
							Дата 					= Неопределено, 
							СтруктураКолонокТовары 	= Неопределено, 
							Склад 					= Неопределено, 
							ИмяКолонкиСклад 		= "Склад", 
							ИмяКолонкиЯчейка 		= "Ячейка",
							ИмяКолонкиКоличество	= "Количество",
							Задача 					= Неопределено) Экспорт
	
	//// ИмяКолонкиСклад - если указать в нее имя колонки, тогда ячейки будут разносится на основании указаного склада
	//// 						в данной колонке, а в случае остуствия знаяения в ней то по складу указанному в шапке
	//
	//// СтруктураКолонокТовары - если будет передана структура тогда будет происходить пересчет строки
	//
	//// Задача - задача из которой нужен подбор,
	////			в первую очередь береться из этой задачи
	//
	//Запрос = Новый Запрос("
	//|ВЫБРАТЬ
	//|	Ячейка.Владелец Склад,
	//|	Ячейка, 
	//|	Номенклатура, 
	//|	КоличествоОстаток Количество,
	//|	ЕСТЬNULL(РегПроход.Вес,""000"") + ЕСТЬNULL(РегСекция.Вес,""000"") + ЕСТЬNULL(РегЯрус.Вес,""000"") + ЕСТЬNULL(РегПоддон.Вес,""000"") 
	//|							Вес
	//|ПОМЕТСИТЬ
	//|	ОстаткиЯчеек
	//|ИЗ
	//|	РегистрНакопления.ТоварыВЯчейках.Остатки(" + ?(Дата = Неопределено,"","&Дата") + ", Номенклатура В(&МассивНоменклатуры))
	//|
	//|ЛЕВОЕ СОЕДИНЕНИЕ
	//|	РегистрСведений.ПорядокЯчеек РегПроход
	//|ПО
	//|	РегПроход.Имя = 1 И
	//|	Ячейка.Проход = РегПроход.Имя
	//|
	//|ЛЕВОЕ СОЕДИНЕНИЕ
	//|	РегистрСведений.ПорядокЯчеек РегСекция
	//|ПО
	//|	РегСекция.Имя = 2 И
	//|	Ячейка.Проход = РегСекция.Имя
	//|
	//|ЛЕВОЕ СОЕДИНЕНИЕ
	//|	РегистрСведений.ПорядокЯчеек РегЯрус
	//|ПО
	//|	РегЯрус.Имя = 3 И
	//|	Ячейка.Проход = РегЯрус.Имя
	//|
	//|ЛЕВОЕ СОЕДИНЕНИЕ
	//|	РегистрСведений.ПорядокЯчеек РегПоддон
	//|ПО
	//|	РегПоддон.Имя = 4 И
	//|	Ячейка.Проход = РегПоддон.Имя
	//|
	//|ГДЕ
	//|	КоличествоОстаток > 0
	////|	РезервОстаток >= 0 И
	////|	КоличествоОстаток > 0
	//|
	////|УПОРЯДОЧИТЬ ПО Вес
	////|;
	////|ЛЕВОЕ СОЕДИНЕНИЕ
	////|	(ВЫБРАТЬ Ячейка, Номенклатура, 
	////|ПО
	////|	
	////|
	//|");
	//
	//ТабличнаяЧасть = ТаблицаТовары.Выгрузить();
	//
	//Запрос.УстановитьПараметр("МассивНоменклатуры", ТабличнаяЧасть.ВыгрузитьКолонку("Номенклатура"));
	//Запрос.УстановитьПараметр("Дата",				Дата);
	//
	//ТаблЯчеек = Запрос.Выполнить().Выгрузить();
	//ТаблЯчеек.Индексы.Добавить("Склад, Номенклатура");
	//
	//ПустаяЯчейка = Справочники.Ячейки.ПустаяСсылка();
	//
	//ТабличнаяЧасть.Очистить();
	//
	//КолСтрок = ТабличнаяЧасть.Количество();
	//Для Каждого Строка Из ТаблицаТовары Цикл
	//	
	//	// Определим че бум списывать
	//	
	//	НужноРасспределить 	= Строка[ИмяКолонкиКоличество];
	//	Распределено		= 0;
	//	
	//	// Добавим строку
	//	
	//	НовСтрока = ТабличнаяЧасть.Добавить();
	//	ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
	//	НовСтрока[ИмяКолонкиЯчейка] = ПустаяЯчейка;
	//	
	//	// Начнем списание
	//	
	//	СтрокиЯчеек = ТаблЯчеек.НайтиСтроки(
	//						Новый Структура("Склад, Номенклатура", 
	//								?(Склад <> Неопределено,
	//											Склад,
	//											Строка[ИмяКолонкиСклад]), 
	//								Строка.Номенклатура));
	//								
	//	Если СтрокиЯчеек.Количество() Тогда
	//		
	//		Для каждого СтрокаЯчеки Из СтрокиЯчеек Цикл
	//			Если СтрокаЯчеки.Количество Тогда
	//			
	//				// Скоко
	//					
	//				Списываем 						= Мин(НужноРасспределить, СтрокаЯчеки.Количество);
	//				НовСтрока[ИмяКолонкиКоличество] = Списываем;
	//				НовСтрока[ИмяКолонкиЯчейка] 	= СтрокаЯчеки.Ячейка;
	//				
	//				// считаем НДС и прочую ересь
	//				
	//				Если СтруктураКолонокТовары <> Неопределено Тогда
	//					РассчитатьСуммыТабличныхЧастей(НовСтрока, СтруктураКолонокТовары);
	//				КонецЕсли;
	//				
	//				// Уменьшаем
	//				
	//				СтрокаЯчеки.Количество 	= СтрокаЯчеки.Количество - Списываем;
	//				НужноРасспределить 		= НужноРасспределить - Списываем;
	//				Распределено 			= Распределено + Списываем;
	//				
	//				// Выход
	//				
	//				Если Не НужноРасспределить Тогда
	//					Прервать;
	//				КонецЕсли; 
	//				
	//				// Добавляем еще строку раз не хватило
	//				
	//				НовСтрока = ТабличнаяЧасть.Добавить();
	//				ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
	//				
	//			КонецЕсли;
	//		КонецЦикла;
	//	КонецЕсли;
	//	
	//	// Уменьшим количество у ячейки которое не распределено
	//	
	//	Если НужноРасспределить Тогда
	//		
	//		НовСтрока[ИмяКолонкиКоличество] = НужноРасспределить;
	//		
	//		// считаем НДС и прочую ересь
	//		
	//		Если СтруктураКолонокТовары <> Неопределено Тогда
	//			РассчитатьСуммыТабличныхЧастей(НовСтрока, СтруктураКолонокТовары);
	//		КонецЕсли;
	//			
	//	КонецЕсли; 
	//КонецЦикла;
	//
	//ТаблицаТовары.Загрузить(ТабличнаяЧасть);
	
КонецПроцедуры
&НаСервере
Функция СтрокаСоответвуетОтбору(Строка, ОтборТаблицы)
	
	Соответствует = Истина;
	Для Каждого Элемент Из ОтборТаблицы Цикл Если Строка[Элемент.Ключ] <> Элемент.Значение Тогда Соответствует = Ложь; Прервать; КонецЕсли; КонецЦикла;
		
	Возврат Соответствует;
	
КонецФункции

//эта функция уже не актуальна. оставлена для совместимости
&НаСервере
Процедура ЗаполнитьЯчейки(ТаблицаТовары, 
							Дата 					= Неопределено, 
							СтруктураКолонокТовары 	= Неопределено, 
							Склад 					= Неопределено, 
							ИмяКолонкиСклад 		= "Склад", 
							ИмяКолонкиЯчейка 		= "Ячейка",
							ИмяКолонкиКоличество	= "Количество",
							ПропускатьСтрокуСЯчейкой = Ложь,
							Задача 					= Неопределено,
							ОтборТаблицы			= Неопределено,
							ТекстЗапросаОстатов 	= "",
							ПараметрыЗапроса		= Неопределено,
							УчитыватьРезерв			= Истина,
							УчитыватьЯчейкуПотеряшку = Ложь) Экспорт
							
	//
	// СтруктураКолонокТовары 	- если будет передана структура тогда будет происходить пересчет строки
	// ИмяКолонкиСклад 			- если указать в нее имя колонки, тогда ячейки будут разносится на основании указаного склада
	// 								в данной колонке, а в случае остуствия знаяения в ней то по складу указанному в шапке
	// ПропускатьСтрокуСЯчейкой - если в товарах ячейка будет заполнена то такой товар не отработает
	// Задача					- ссылка на свою задачу чтобы пропускать свой резерв 
	// ОтборТаблицы 			- структура в которой указан фильтр по каким строкам проставлять 
	// ТекстЗапросаОстатов		- произвольный текст запроса получения остатков, главное чтобы в нем были следующие поля
	//									Склад, Ячейка, Номенклатура, Количество, <<Поля>>, <<Соединения>>,<<Порядок>> - см. что по умолчанию
	// ПараметрыЗапроса			- структура, дополнитиельные параметры запроса (ключ имя параметра, значение значения параметра)
	// УчитыватьРезерв			- остаток ячеек будет с учетом резерва по нему
	// УчитыватьЯчейкуПотеряшку - если установлено то будет устанавливать в том числе и ячейку потеряшу, если ложь тогда ячейка потеряшка будет отфильтрована
	
	Если ТекстЗапросаОстатов = "" Тогда
		ТекстЗапросаОстатов = СтрШаблон("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Ячейка.Владелец Склад,
		|	Ячейка, 
		|	Номенклатура, 
		|	КоличествоОстаток Количество,
		|	<<Поля>>
		|ИЗ
		|	РегистрНакопления.ТоварыВЯчейках.Остатки(" + ?(Дата = Неопределено,"","&Дата") + ", Номенклатура В(&МассивНоменклатуры) %1)
		|
		|<<Соединения>>
		|
		|ГДЕ
		|	КоличествоОстаток > 0
		|
		|<<Порядок>>", ?(УчитыватьЯчейкуПотеряшку, "", "И Ячейка <> &ЯчейкаПотеряшка")) КонецЕсли;
	
	// Подготовим запрос
	
	ТекстЗапросаОстатов = СтрЗаменить(ТекстЗапросаОстатов, "<<Поля>>","
		|	ЕСТЬNULL(РегПроход.Вес,""000"") + ЕСТЬNULL(РегСекция.Вес,""000"") + ЕСТЬNULL(РегЯрус.Вес,""000"") + ЕСТЬNULL(РегПоддон.Вес,""000"") 
		|							Вес");
		
	ТекстЗапросаОстатов = СтрЗаменить(ТекстЗапросаОстатов, "<<Соединения>>","
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ПорядокЯчеек РегПроход
		|ПО
		|	РегПроход.ВидЯчейки = 1 И
		|	Ячейка.Проход 		= РегПроход.Имя
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ПорядокЯчеек РегСекция
		|ПО
		|	РегСекция.ВидЯчейки = 2 И
		|	Ячейка.Секция 		= РегСекция.Имя
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ПорядокЯчеек РегЯрус
		|ПО
		|	РегЯрус.ВидЯчейки 	= 3 И
		|	Ячейка.Ярус 		= РегЯрус.Имя
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ПорядокЯчеек РегПоддон
		|ПО
		|	РегПоддон.ВидЯчейки = 4 И
		|	Ячейка.Поддон 		= РегПоддон.Имя");
		
	ТекстЗапросаОстатов = СтрЗаменить(ТекстЗапросаОстатов, "<<Порядок>>","
		|УПОРЯДОЧИТЬ ПО Вес");

	// Выполним запрос
	
	Запрос = Новый Запрос(ТекстЗапросаОстатов + ";
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Ячейка, Номенклатура, Количество
	|ИЗ
	|	РегистрСведений.ЯчейкиПоЗаказу
	|ГДЕ
	|	Задача.ПометкаУдаления 	= ЛОЖЬ И
	|	Задача.Выполнена 		= ЛОЖЬ И
	|	Номенклатура В(&МассивНоменклатуры)
	|" + ?(Задача = Неопределено, "","И Задача <> &Задача") + "
	|");
	
	ТабличнаяЧасть = ?(ТипЗнч(ТаблицаТовары) = Тип("ТаблицаЗначений"), ТаблицаТовары.Скопировать(), ТаблицаТовары.Выгрузить());
	
	Запрос.УстановитьПараметр("МассивНоменклатуры", ТабличнаяЧасть.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("Дата",				Дата);
	Запрос.УстановитьПараметр("Задача",				Задача);
	Запрос.УстановитьПараметр("ЯчейкаПотеряшка",	Склад.ЯчейкаНеНайдено);
	
	Если ПараметрыЗапроса <> Неопределено Тогда КонвертацияТипов.УстановитьПараметрыЗапросаИзСтруктуры(Запрос, ПараметрыЗапроса) КонецЕсли;
	
	Выполнение = Запрос.ВыполнитьПакет();
	
	ТаблЯчеек = Выполнение[0].Выгрузить();
	//ТаблОстатков.Индексы.Добавить("Склад, Номенклатура");
	
	ТаблРезервов = Выполнение[1].Выгрузить();
	
	// Сперва установим резерв на ячейки (уменьшим количество на резерв)
	
	Если УчитыватьРезерв Тогда
		Для Каждого СтрокаОстатка Из ТаблЯчеек Цикл СтрокиРезервов = ТаблРезервов.НайтиСтроки(Новый Структура("Ячейка,Номенклатура", СтрокаОстатка.Ячейка, СтрокаОстатка.Номенклатура)); Для Каждого СтрокаРезерва Из СтрокиРезервов Цикл Списываем = Мин(СтрокаРезерва.Количество, СтрокаОстатка.Количество); СтрокаОстатка.Количество = СтрокаОстатка.Количество - Списываем; СтрокаРезерва.Количество = СтрокаРезерва.Количество - Списываем; КонецЦикла; КонецЦикла; КонецЕсли;
	
	// Затем начнем списание
	
	ПустаяЯчейка = Справочники.Ячейки.ПустаяСсылка();
	
	ТабличнаяЧасть.Очистить();
	
	КолСтрок = ТабличнаяЧасть.Количество();
	Для Каждого Строка Из ТаблицаТовары Цикл
		
		// Проверим отбор товаров
		
		Если 	(ОтборТаблицы <> Неопределено И Не СтрокаСоответвуетОтбору(Строка, ОтборТаблицы)) Или
			
		// Проверим пропуск заполненных ячеек
		
				(ПропускатьСтрокуСЯчейкой И ЗначениеЗаполнено(Строка.Ячейка)) Тогда
				
			ЗаполнитьЗначенияСвойств(ТабличнаяЧасть.Добавить(), Строка);
			Продолжить; КонецЕсли;
		
		// Определим че бум списывать
		
		НужноРасспределить 	= Строка[ИмяКолонкиКоличество];
		Если ТипЗнч(ТаблицаТовары) = Тип("ТаблицаЗначений") И ТаблицаТовары.Колонки.Найти("Собрано")<>Неопределено Тогда
			НужноРасспределитьСобрано 	= Строка.Собрано;
		Иначе
			НужноРасспределитьСобрано 	= 0;
		КонецЕсли;	
		Распределено		= 0;
		
		// Добавим строку
		
		НовСтрока = ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
		НовСтрока[ИмяКолонкиЯчейка] = ПустаяЯчейка;
		
		// Начнем списание
		
		СтрокиЯчеек = ТаблЯчеек.НайтиСтроки(
							Новый Структура("Склад, Номенклатура", 
									?(Склад <> Неопределено,
												Склад,
												Строка[ИмяКолонкиСклад]), 
									Строка.Номенклатура));
									
		Если СтрокиЯчеек.Количество() Тогда
			
			Для каждого СтрокаЯчеки Из СтрокиЯчеек Цикл
				Если СтрокаЯчеки.Количество Тогда
				
					// Скоко
						
					Списываем 						= Мин(НужноРасспределить, СтрокаЯчеки.Количество);
					НовСтрока[ИмяКолонкиКоличество] = Списываем;
					Если ТипЗнч(ТаблицаТовары) = Тип("ТаблицаЗначений") И ТаблицаТовары.Колонки.Найти("Собрано")<>Неопределено Тогда
						СписываемСобрано 			= Мин(НужноРасспределитьСобрано, СтрокаЯчеки.Количество);
						НовСтрока.Собрано = СписываемСобрано;
					КонецЕсли;	
					НовСтрока[ИмяКолонкиЯчейка] 	= СтрокаЯчеки.Ячейка;
					
					// считаем НДС и прочую ересь
					
					Если СтруктураКолонокТовары <> Неопределено Тогда
						//РассчитатьСуммыТабличныхЧастей(НовСтрока, СтруктураКолонокТовары);
						РассчитатьСуммыСтрокиОтЦены(НовСтрока, СтруктураКолонокТовары);
					КонецЕсли;
					
					// Уменьшаем
					
					СтрокаЯчеки.Количество 	= СтрокаЯчеки.Количество - Списываем;
					НужноРасспределить 		= НужноРасспределить - Списываем;
					Если ТипЗнч(ТаблицаТовары) = Тип("ТаблицаЗначений") И ТаблицаТовары.Колонки.Найти("Собрано")<>Неопределено Тогда
						НужноРасспределитьСобрано = НужноРасспределитьСобрано - СписываемСобрано;
					КонецЕсли;	
					Распределено 			= Распределено + Списываем;
					
					// Выход
					
					Если Не НужноРасспределить Тогда
						Прервать;
					КонецЕсли; 
					
					// Добавляем еще строку раз не хватило
					
					НовСтрока = ТабличнаяЧасть.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Уменьшим количество у ячейки которое не распределено
		
		Если НужноРасспределить Тогда
			
			НовСтрока[ИмяКолонкиКоличество] = НужноРасспределить;
			
			// считаем НДС и прочую ересь
			
			Если СтруктураКолонокТовары <> Неопределено Тогда
				//РассчитатьСуммыТабличныхЧастей(НовСтрока, СтруктураКолонокТовары);
				РассчитатьСуммыСтрокиОтЦены(НовСтрока, СтруктураКолонокТовары);
			КонецЕсли;
				
		КонецЕсли;
		
		Если НужноРасспределитьСобрано Тогда
			Если ТипЗнч(ТаблицаТовары) = Тип("ТаблицаЗначений") И ТаблицаТовары.Колонки.Найти("Собрано")<>Неопределено Тогда
				НовСтрока.Собрано = НужноРасспределитьСобрано;
			КонецЕсли;	
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТипЗнч(ТаблицаТовары) = Тип("ТаблицаЗначений") Тогда ТаблицаТовары = ТабличнаяЧасть Иначе ТаблицаТовары.Загрузить(ТабличнаяЧасть) КонецЕсли;
	
КонецПроцедуры


&НаСервере
Функция РазбитьПоЯчейкам(ВходТовары, Склад, СборочныйЛист) Экспорт
	
	//получаем остатки в ячейках у которых ярус 1 или 2
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВходТовары",ВходТовары);
	Запрос.УстановитьПараметр("Склад",Склад);
	Запрос.УстановитьПараметр("СборочныйЛист",СборочныйЛист);
	Запрос.УстановитьПараметр("ЯчейкаИсключение",Склад.ЯчейкаНеНайдено);
	Запрос.Текст = "ВЫБРАТЬ
	|	Товары.Номенклатура
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&ВходТовары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ячейки.Ссылка КАК Ячейка
	|ПОМЕСТИТЬ Ячейки
	|ИЗ
	|	Справочник.Ячейки КАК Ячейки
	|ГДЕ
	|	Ячейки.Владелец = &Склад
	|	И Ячейки.Ярус ПОДОБНО ""[1-2]""
	|	И Ячейки.Ссылка <> &ЯчейкаИсключение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ост.Номенклатура,
	|	Ост.Номенклатура.Артикул,
	|	Ост.Ячейка,
	|	Ост.Ячейка.Сортировка КАК ЯчейкаСортировка,
	|	Ост.КоличествоОстаток - ЕСТЬNULL(Рез.КоличествоОстаток, 0) КАК Количество
	|ИЗ
	|	РегистрНакопления.ТоварыВЯчейках.Остатки(
	|			,
	|			Номенклатура В
	|					(ВЫБРАТЬ
	|						Товары.Номенклатура
	|					ИЗ
	|						Товары)
	|				И Ячейка В
	|					(ВЫБРАТЬ
	|						Ячейки.Ячейка
	|					ИЗ
	|						Ячейки)) КАК Ост
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РезервыВЯчейках.Остатки(
	|				,
	|				Номенклатура В
	|						(ВЫБРАТЬ
	|							Товары.Номенклатура
	|						ИЗ
	|							Товары)
	|					И Ячейка В
	|						(ВЫБРАТЬ
	|							Ячейки.Ячейка
	|						ИЗ
	|							Ячейки)
	|					И СборочныйЛист <> &СборочныйЛист) КАК Рез
	|		ПО Ост.Номенклатура = Рез.Номенклатура
	|			И Ост.Ячейка = Рез.Ячейка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ост.Номенклатура,
	|	Ост.Ячейка.Ярус,
	|	ЯчейкаСортировка";
	
	Ост =Запрос.Выполнить().Выгрузить();
	
	// Остаток по ячекам у которых ярус не равен 1 или 2
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВходТовары",ВходТовары);
	Запрос.УстановитьПараметр("Склад",Склад);
	Запрос.УстановитьПараметр("СборочныйЛист",СборочныйЛист);
	Запрос.УстановитьПараметр("ЯчейкаИсключение",Склад.ЯчейкаНеНайдено);
	Запрос.Текст = "ВЫБРАТЬ
	               |	Товары.Номенклатура
	               |ПОМЕСТИТЬ Товары
	               |ИЗ
	               |	&ВходТовары КАК Товары
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Ячейки.Ссылка КАК Ячейка
	               |ПОМЕСТИТЬ Ячейки
	               |ИЗ
	               |	Справочник.Ячейки КАК Ячейки
	               |ГДЕ
	               |	Ячейки.Владелец = &Склад
	               |	И НЕ Ячейки.Ярус ПОДОБНО ""[1-2]""
	               |	И Ячейки.Ссылка <> &ЯчейкаИсключение
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Ост.Номенклатура,
	               |	Ост.Номенклатура.Артикул,
	               |	Ост.Ячейка,
	               |	Ост.Ячейка.Сортировка КАК ЯчейкаСортировка,
	               |	Ост.КоличествоОстаток - ЕСТЬNULL(Рез.КоличествоОстаток, 0) КАК Количество
	               |ИЗ
	               |	РегистрНакопления.ТоварыВЯчейках.Остатки(
	               |			,
	               |			Номенклатура В
	               |					(ВЫБРАТЬ
	               |						Товары.Номенклатура
	               |					ИЗ
	               |						Товары)
	               |				И Ячейка В
	               |					(ВЫБРАТЬ
	               |						Ячейки.Ячейка
	               |					ИЗ
	               |						Ячейки)) КАК Ост
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РезервыВЯчейках.Остатки(
	               |				,
	               |				Номенклатура В
	               |						(ВЫБРАТЬ
	               |							Товары.Номенклатура
	               |						ИЗ
	               |							Товары)
	               |					И Ячейка В
	               |						(ВЫБРАТЬ
	               |							Ячейки.Ячейка
	               |						ИЗ
	               |							Ячейки)
	               |					И СборочныйЛист <> &СборочныйЛист) КАК Рез
	               |		ПО Ост.Номенклатура = Рез.Номенклатура
	               |			И Ост.Ячейка = Рез.Ячейка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ост.Номенклатура,
	               |	Количество";
	
	ТаблицаИсточник =Запрос.Выполнить().Выгрузить();
	
	// Объеденим две таблицы
	Для Каждого СтрокаТаблицыИсточник Из ТаблицаИсточник Цикл 
		ЗаполнитьЗначенияСвойств(Ост.Добавить(), СтрокаТаблицыИсточник); 
	КонецЦикла;
	
	//обходим
	Товары = ВходТовары.СкопироватьКолонки();
	Товары.Колонки.Добавить("ЯчейкаСортировка");
	
	Для Каждого Стр из ВходТовары Цикл
		
		Списать = Стр.Количество;
		
		Отбор = Новый Структура("Номенклатура", Стр.Номенклатура);
		Ячейки = Ост.НайтиСтроки(Отбор);
		
		
		Для Каждого СтрЯчейка из Ячейки Цикл
			
			Если СтрЯчейка.Ячейка = Склад.ЯчейкаНеНайдено тогда Продолжить; КонецЕсли;
			
			Списываем = Мин(Списать, СтрЯчейка.Количество);
			
			Если Списываем = 0 Тогда Продолжить; КонецЕсли;
			
			НовСтр = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр,Стр);
			НовСтр.Ячейка = СтрЯчейка.Ячейка;
			НовСтр.ЯчейкаСортировка = СтрЯчейка.ЯчейкаСортировка;
			НовСтр.Количество = Списываем;
			НовСтр.Собрано = Списываем;
			НовСтр.МаксимальноеКоличество = Списываем;
			
			Списать = Списать - Списываем;
			
			СтрЯчейка.Количество = СтрЯчейка.Количество - Списываем;
		КонецЦикла;
		
		Если Списать >0 Тогда
			
			НовСтр = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр,Стр);
			НовСтр.Ячейка = Справочники.Ячейки.ПустаяСсылка();
			НовСтр.Количество = Списать;
			НовСтр.Собрано = Списать;
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	Если Склад.Ячеестый Тогда
		Товары.Свернуть("Ячейка, Номенклатура, Артикул, ЯчейкаСортировка", "Количество, Собрано, МаксимальноеКоличество");
		Товары.Сортировать("ЯчейкаСортировка, Артикул");	
	Иначе
		Товары.Сортировать("Артикул");	
	КонецЕсли;
	
	Возврат Товары;
	
КонецФункции
&НаСервере
Функция РазбитьПоЯчейкам_СтараяВерсия(ВходТовары, Склад, СборочныйЛист) Экспорт
	
	//получаем остатки в ячейках
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВходТовары",ВходТовары);
	Запрос.УстановитьПараметр("Склад",Склад);
	Запрос.УстановитьПараметр("СборочныйЛист",СборочныйЛист);
	Запрос.Текст = "
	|Выбрать Товары.Номенклатура Поместить Товары из &ВходТовары Товары
	|;
	|Выбрать ссылка Ячейка Поместить Ячейки из Справочник.Ячейки ГДЕ Владелец = &Склад
	|;
	|Выбрать Ост.Номенклатура, Ост.Ячейка,
	|	
	|ЕСТЬNULL(РегПроход.Вес,""000"") + ЕСТЬNULL(РегСекция.Вес,""000"") + ЕСТЬNULL(РегЯрус.Вес,""000"") + ЕСТЬNULL(РегПоддон.Вес,""000"")	Вес,
	|	
	|Ост.КоличествоОстаток - isnull(Рез.КоличествоОстаток,0) Количество
	|	
	|из РегистрНакопления.ТоварыВЯчейках.Остатки(,Номенклатура в (Выбрать Номенклатура из Товары) и Ячейка в (Выбрать Ячейка из Ячейки)) Ост
	|	
	|Левое соединение
	|	
	|РегистрНакопления.РезервыВЯчейках.Остатки(,Номенклатура в (Выбрать Номенклатура из Товары) и Ячейка в (Выбрать Ячейка из Ячейки) и СборочныйЛист <> &СборочныйЛист) Рез
	|По Ост.Номенклатура = Рез.Номенклатура и Ост.Ячейка = Рез.Ячейка
	|	
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ПорядокЯчеек РегПроход
	|ПО
	|	РегПроход.ВидЯчейки = 1 И
	|	Ост.Ячейка.Проход 		= РегПроход.Имя
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ПорядокЯчеек РегСекция
	|ПО
	|	РегСекция.ВидЯчейки = 2 И
	|	Ост.Ячейка.Секция 		= РегСекция.Имя
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ПорядокЯчеек РегЯрус
	|ПО
	|	РегЯрус.ВидЯчейки 	= 3 И
	|	Ост.Ячейка.Ярус 		= РегЯрус.Имя
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ПорядокЯчеек РегПоддон
	|ПО
	|	РегПоддон.ВидЯчейки = 4 И
	|	Ост.Ячейка.Поддон 		= РегПоддон.Имя
	|
	|	
	|Упорядочить по Ост.Номенклатура, Вес	
	|";
	
	Ост =Запрос.Выполнить().Выгрузить();
	
	//обходим
	Товары = ВходТовары.СкопироватьКолонки();
	
	Для Каждого Стр из ВходТовары Цикл
		
		Списать = Стр.Количество;
		
		Отбор = Новый Структура("Номенклатура", Стр.Номенклатура);
		Ячейки = Ост.НайтиСтроки(Отбор);
		
		
		Для Каждого СтрЯчейка из Ячейки Цикл
			
			Если СтрЯчейка.Ячейка = Склад.ЯчейкаНеНайдено тогда Продолжить; КонецЕсли;
			
			Списываем = Мин(Списать, СтрЯчейка.Количество);
			
			Если Списываем = 0 Тогда Продолжить; КонецЕсли;
			
			НовСтр = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр,Стр);
			НовСтр.Ячейка = СтрЯчейка.Ячейка;
			НовСтр.Количество = Списываем;
			НовСтр.Собрано = Списываем;
			
			Списать = Списать - Списываем;
			
			СтрЯчейка.Количество = СтрЯчейка.Количество - Списываем;
		КонецЦикла;
		
		Если Списать >0 Тогда
			
			НовСтр = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр,Стр);
			НовСтр.Ячейка = Справочники.Ячейки.ПустаяСсылка();
			НовСтр.Количество = Списать;
			НовСтр.Собрано = Списать;
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	Возврат Товары;
	
КонецФункции


&НаСервере
Процедура ЗаполнитьЯчейкаПоРезервуЗадачи(Задача, ТаблицаТовары) Экспорт
	
	Товары 		= ТаблицаТовары.Выгрузить();
	НовТовары 	= Товары.СкопироватьКолонки();
	
	// Очистим ячейки
	
	Товары.ЗаполнитьЗначения(Справочники.Ячейки.ПустаяСсылка(), "Ячейка");
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 
	|	Ячейка, Номенклатура, Сборщик, Количество
	|ИЗ
	|	РегистрСведений.ЯчейкиПоЗаказу
	|ГДЕ
	|	Задача = &Задача
	|");
	
	Запрос.УстановитьПараметр("Задача", Задача);
	ТаблицаРезерва = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Строка Из Товары Цикл
		
		Нужно = Строка.Количество;
		
		СтрокиРезерва = ТаблицаРезерва.НайтиСтроки(Новый Структура("Номенклатура", Строка.Номенклатура));
		Для Каждого СтрокаРезерва Из СтрокиРезерва Цикл
			
			Списываем = Мин(СтрокаРезерва.Количество, Нужно);
			Если Списываем Тогда
				
				НовСтрока = НовТовары.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
				ЗаполнитьЗначенияСвойств(НовСтрока, СтрокаРезерва);
				
				СтрокаРезерва.Количество 	= СтрокаРезерва.Количество - Списываем;
				НовСтрока.Количество 		= Списываем;
				Нужно 						= Нужно - Списываем;
				
			КонецЕсли;
		КонецЦикла;
		
		Если Нужно Тогда
			НовСтрока = НовТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
			НовСтрока.Количество = Нужно;
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаТовары.Загрузить(НовТовары);
	
КонецПроцедуры
&НаСервере
Функция ЗапомнитьЯчейкиВЗадаче(Задача, Товары) Экспорт
	
	Набор = РегистрыСведений.ЯчейкиПоЗаказу.СоздатьНаборЗаписей();
	Набор.Отбор.Задача.Установить(Задача);
	
	Для Каждого Строка Из Товары Цикл
		Если Не Строка.Ячейка.Пустая() Тогда	
			
			НовСтрока = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
			
			НовСтрока.Задача = Задача;
					
		КонецЕсли;
	КонецЦикла;	
	
	Попытка
		Набор.Записать();
	Исключение
		стрОшибки 	= ОписаниеОшибки();
		ОбщиеФункции.СообщитьТекст("Ошибка записи буфера ячеек
											|" + стрОшибки);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции
&НаСервере
Процедура ЗаполнитьСохраненныеЯчейкиЗадачи2(Задача, Товары, Состояние) Экспорт
	
	//ТЗ - если таблица типа ТаблицаЗначений
	//Товары - если таблица вида табличная часть 
	
	Набор = РегистрыСведений.ЯчейкиПоЗаказу.СоздатьНаборЗаписей();
	Набор.Отбор.Задача.Установить(Задача);
	Набор.Прочитать();
	ТЗНабор 	= Набор.Выгрузить();
		
	НовТовары 	= ?(ТипЗнч(Товары) = Тип("ТаблицаЗначений"), Товары.СкопироватьКолонки(), Товары.Выгрузить().СкопироватьКолонки());
	
	ПустаяЯчейка = Справочники.Ячейки.ПустаяСсылка();	
	
	Для Каждого Строка Из Товары Цикл
			
		Нужно 	= Строка.Количество;
		
		Если Строка.Состояние = Состояние Тогда
		
			Строки 	= ТЗНабор.НайтиСтроки(Новый Структура("Номенклатура", Строка.Номенклатура));

			Строка.Ячейка = ПустаяЯчейка;	
			
			Для Каждого СтрокаОстатка Из Строки Цикл
					
				Списываем = Мин(СтрокаОстатка.Количество, Нужно);
				Если Списываем Тогда
						
					НовСтрока = НовТовары.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
					ЗаполнитьЗначенияСвойств(НовСтрока, СтрокаОстатка);
					НовСтрока.Количество = Списываем;
						
					Нужно = Нужно - Списываем;
					СтрокаОстатка.Количество = СтрокаОстатка.Количество - Списываем;
						
				КонецЕсли;
			КонецЦикла;
		
		КонецЕсли;
			
		Если Нужно Тогда
				
			НовСтрока = НовТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
			НовСтрока.Количество = Нужно;
					
		КонецЕсли;
	КонецЦикла;
	
	
	Если ТипЗнч(Товары) = Тип("ТаблицаЗначений") Тогда Товары = НовТовары Иначе Товары.Загрузить(НовТовары) КонецЕсли;
	
КонецПроцедуры

// ЗНАЧЕНИЯ ПО УМОЛЧАНИЮ

&НаСервере
Функция ЗначениеПоУмолчанию(КлючНастроек, ИдентификаторПользователя = Неопределено) Экспорт
	
	Возврат ХранилищеОбщихНастроек.Загрузить("ЗначенияПоУмолчанию", КлючНастроек,,ИдентификаторПользователя);
	
КонецФункции
&НаСервере
Процедура УстановитьЗначенияПоУмолчанию_ННо(Форма) Экспорт
	
	//Запрос = Новый Запрос("ВЫБРАТЬ Настройка.Наименование ИмяРеквизита, Значение ИЗ РегистрСведений.ЗначенияНастроекПользователя ГДЕ Пользователь = &Пользователь");
	//Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	//
	//начПозиция = СтрДлина("ПоУмолчанию_") + 1;
	//Выборка = Запрос.Выполнить().Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	
	//	Элемент = Форма.Элементы.Найти(Сред(Выборка.ИмяРеквизита, начПозиция));
	//	Если Элемент <> Неопределено Тогда
	//		
	//		Форма[]
	//		
	//	КонецЕсли;
	//КонецЦикла;
	
КонецПроцедуры
&НаСервере
Функция ПроверитьДокументНаКорректностьЗаполнения(ДокументСсылка, стрОшибки = "") Экспорт
	
	// Проверяет что все нормально и возвращает ИСТИНА когда все гуд, и ЛОЖЬ коду худо
	
	МетДок = ДокументСсылка.Метаданные();
	Ошибка = Ложь;
	
	// Проверим реквзиты
	
	Для Каждого Реквизит Из МетДок.Реквизиты Цикл
		
		Если 	Реквизит.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку И
				Не ЗначениеЗаполнено(ДокументСсылка[Реквизит.Имя]) Тогда
				
			стрОшибки = стрОшибки + " 
			|Не заполнено " + НРег(Реквизит.Синоним);
			Ошибка = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверим таблицы
	
	Для Каждого ТабличнаяЧасть Из МетДок.ТабличныеЧасти Цикл
		
		ТекстНачало = "Таблица """ + НРег(ТабличнаяЧасть.Синоним) + """";
		НомСтроки 	= 0;
		
		Для Каждого Строка Из ДокументСсылка[ТабличнаяЧасть.Имя] Цикл НомСтроки = НомСтроки + 1;
			Для Каждого Реквизит Из ТабличнаяЧасть.Реквизиты Цикл
			
				Если 	Реквизит.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку И
						Не ЗначениеЗаполнено(Строка[Реквизит.Имя]) Тогда
						
					стрОшибки = стрОшибки + " 
					|" + ТекстНачало + " в строке №" + НомСтроки + " не заполнено " + НРег(Реквизит.Синоним);
					Ошибка = Истина;
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Не Ошибка;
	
КонецФункции

&НаСервере
Функция ЗаполнитьЗначенияПоУмолчанию_Ст(Форма, Объект, ИмяОбъекта = "Объект") Экспорт
	
	Начало = "ПоУмолчанию_";
	
	ТекОбъект = Форма.РеквизитФормыВЗначение(ИмяОбъекта);
	//Реквизиты = ТекОбъект.Метаданные().Реквизиты;
	
	ОбъектМетаданные = ТекОбъект.Метаданные();
	Реквизиты = Новый Массив;
	КонвертацияТипов.ДобавитьМассивВКонецМассива(Реквизиты,
						КонвертацияТипов.ПолучитьМассивИзКлючейСтруктуры(
								КонвертацияТипов.ПолучитьПустуюСтруктуруИзПолейТабличнойЧасти(ОбъектМетаданные)));
	
	
	СвойствоИспользовать = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать;
	   
	Для Каждого ОбщийРеквизит ИЗ Метаданные.ОбщиеРеквизиты Цикл
		
		Элемент = ОбщийРеквизит.Состав.Найти(ОбъектМетаданные);
		
		Если Элемент.Использование = СвойствоИспользовать Тогда
			Реквизиты.Добавить(ОбщийРеквизит.Имя);
		КонецЕсли;
		
	КонецЦикла;
	
	
	// Тип цен
	
	Если 	Реквизиты.Найти("ТипЦен") <> Неопределено И 
			Объект.ТипЦен.Пустая() Тогда
			
		Объект.ТипЦен = ОбщиеФункции.НастройкаПользователя(Начало + "ТипЦен");
		
	КонецЕсли;
		
	// Валюта
		
	Если 	Реквизиты.Найти("Валюта") <> Неопределено И 
			Объект.Валюта.Пустая() Тогда
			
		Объект.Валюта = ОбщиеФункции.НастройкаПользователя(Начало + "Валюта");
		
	КонецЕсли;
	
КонецФункции
&НаСервере
Функция ЗаполнитьЗначенияПоУмолчанию(ОбъектУстановки, ОбъектПроверки, ПереписыватьСуществующее = Истина, ИсключитьЗначения = "") Экспорт
	
	Начало = "ПоУмолчанию_";
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Хар.Ссылка,
	|	Знач.Значение
	|ИЗ
	|	ПланВидовХарактеристик.НастройкиПользователя Хар
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ЗначенияНастроекПользователя Знач
	|ПО
	|	Хар.Ссылка = Знач.Настройка
	|ГДЕ		
	|	Хар.Предопределенный И
	|	Знач.Пользователь = &ТекущийПользователь
	|	И НЕ Хар.ИмяПредопределенныхДанных В (&ИсключитьЗначения)
	|	И НЕ Хар.ПометкаУдаления
	|");
	
	Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("ИсключитьЗначения", КонвертацияТипов.ПолучитьМассивИзСтроки(ИсключитьЗначения));
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Значение = Выборка.Значение;
		Если ЗначениеЗаполнено(Значение) Тогда
		
			ИмяРеквПоиска = СтрЗаменить(
						ПланыВидовХарактеристик.НастройкиПользователя.ПолучитьИмяПредопределенного(Выборка.Ссылка),
						Начало, 
						"");
		
			Если 	ОбъектПроверки.Найти(ИмяРеквПоиска) <> Неопределено И
					(
						(
							Не ПереписыватьСуществующее И 
							Не ЗначениеЗаполнено(ОбъектУстановки[ИмяРеквПоиска])
							
						) ИЛИ
						
						ПереписыватьСуществующее
						
					) Тогда
					
				Попытка
					ОбъектУстановки[ИмяРеквПоиска] = Значение;
				Исключение
				КонецПопытки;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// пока так
	
	Если 	ОбъектПроверки.Найти("СуммаВключаетНДС") <> Неопределено И
		(
			(
				Не ПереписыватьСуществующее И 
				ЗначениеЗаполнено(ОбъектПроверки.Найти("СуммаВключаетНДС"))
				
			) ИЛИ
						
		ПереписыватьСуществующее
				
		) Тогда

		ОбъектУстановки.СуммаВключаетНДС = ?(ОбъектПроверки.Найти("ТипЦен") <> Неопределено, ОбъектУстановки.ТипЦен.ЦенаВключаетНДС, Истина);

		
	КонецЕсли;


	Если 	ОбъектПроверки.Найти("УчитыватьНДС") <> Неопределено И
		(
			(
				Не ПереписыватьСуществующее И 
				ЗначениеЗаполнено(ОбъектПроверки.Найти("УчитыватьНДС"))
				
			) ИЛИ
						
		ПереписыватьСуществующее
				
		) Тогда

		ОбъектУстановки.УчитыватьНДС = Истина;
	КонецЕсли;
КонецФункции

&НаСервере
Функция АвтозаполнениеРеквизитов(Объект, Приемник) Экспорт
	
	СписокРеквизитов = ПолучитьРеквизитыДокумента(Документы.ЗаказПокупателя.ПустаяСсылка());
	
	Запрос = Новый Запрос("ВЫБРАТЬ Ссылка, Реквизит, Значение ИЗ Справочник.АвтозаполнениеРеквизитов.Условия ГДЕ Реквизит В (&СписокРеквизитов) ИТОГИ ПО Ссылка");
	Запрос.УстановитьПараметр("СписокРеквизитов", СписокРеквизитов);
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Пока Выборка.Следующий() Цикл
		
		ВыборкаУсловия = Выборка.Выбрать();
		
		КоличествоСовпадений = ВыборкаУсловия.Количество();
		текКоличество = 0;
		Пока ВыборкаУсловия.Следующий() Цикл
			Если Приемник[ВыборкаУсловия.Реквизит] = ВыборкаУсловия.Значение Тогда текКоличество = текКоличество+1; КонецЕсли;
		КонецЦикла;
		Если текКоличество И текКоличество = КоличествоСовпадений Тогда
			ВыборкаРезультат = Выборка.Ссылка.Результат;
			Для Каждого Строка Из ВыборкаРезультат Цикл
				Приемник[Строка.Реквизит] = Строка.Значение;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция ЗаполнитьРеквизитыДокументаПоУмолчанию(Объект) Экспорт
	
	ОбъектПроверки = ПолучитьРеквизитыДокумента(Объект.Ссылка);
	ЗаполнитьЗначенияПоУмолчанию(Объект, ОбъектПроверки);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьНастройкуПоУмолчанию(ДокОбъект, МетаДок, текПользователь, ИмяНастройки)
	
	Если МетаДок.Реквизиты.Найти(ИмяНастройки) <> Неопределено Тогда
		
		ДокОбъект[ИмяНастройки] = ОбщиеФункции.НастройкаПользователя("ПоУмолчанию_" + ИмяНастройки, текПользователь);
		
	КонецЕсли;
	
КонецПроцедуры
&НаСервере
Процедура ЗаполнитьШапкуДокументаПоУмолчанию(ДокОбъект) Экспорт
	
	текПользователь	= ПараметрыСеанса.ТекущийПользователь;
	ДокОбъект.Дата 	= ТекущаяДата();
	МетаДок 		= ДокОбъект.Метаданные();
	
	ЗаполнитьНастройкуПоУмолчанию(ДокОбъект, МетаДок, текПользователь, "Валюта");
	ЗаполнитьНастройкуПоУмолчанию(ДокОбъект, МетаДок, текПользователь, "СтавкаНДС");
	ЗаполнитьНастройкуПоУмолчанию(ДокОбъект, МетаДок, текПользователь, "ТипЦен");
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРеквизитыДокумента(Ссылка) Экспорт	
	
	РеквизитыВладельца 	= Новый Массив;
	ОбъектМетаданные 	= Ссылка.Метаданные();
	
	// Добавим предопределенные реквизиты
	
	РеквизитыВладельца.Добавить("Номер");
	РеквизитыВладельца.Добавить("Дата");
		
	// Получим из реквизитов
	
	КонвертацияТипов.ДобавитьМассивВКонецМассива(РеквизитыВладельца,
						КонвертацияТипов.ПолучитьМассивИзКлючейСтруктуры(
								КонвертацияТипов.ПолучитьПустуюСтруктуруИзПолейТабличнойЧасти(ОбъектМетаданные)));
							
	// Получим из общих реквизитов
	
	СвойствоИспользовать = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать;
	   
	Для Каждого ОбщийРеквизит ИЗ Метаданные.ОбщиеРеквизиты Цикл
		
		Элемент = ОбщийРеквизит.Состав.Найти(ОбъектМетаданные);
		
		Если Элемент.Использование = СвойствоИспользовать Тогда
			РеквизитыВладельца.Добавить(ОбщийРеквизит.Имя);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РеквизитыВладельца;
	
КонецФункции

&НаСервере
Процедура ПересчитатьСуммыТабличныхЧастей(Таблица, СтруктураКолонокТовары = Неопределено, ПересчитатьЦену = Истина, ТипЦенВключаетНДС = Неопределено) Экспорт
	
 	Если СтруктураКолонокТовары <> Неопределено Тогда	
		
		Для Каждого Строка Из Таблица Цикл ФункцииФормДокументов.РассчитатьСуммыСтрокиОтЦены(Строка, СтруктураКолонокТовары, ПересчитатьЦену) КонецЦикла;
		
					
			//ФункцииФормДокументов.РассчитатьСуммыТабличныхЧастей(
			//		Строка, 
			//		СтруктураКолонокТовары,,,ПересчитатьЦену, ТипЦенВключаетНДС);
			//
			//КонецЦикла;
			
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПересчитатьСуммыТабличныхЧастейПоСтарому(Таблица, СтруктураКолонокТовары = Неопределено, ПересчитатьЦену = Истина, ТипЦенВключаетНДС = Неопределено) Экспорт
	
 	Если СтруктураКолонокТовары <> Неопределено Тогда	
		
		Для Каждого Строка Из Таблица Цикл //ФункцииФормДокументов.РассчитатьСуммыСтрокиОтЦены(Строка, СтруктураКолонокТовары, ПересчитатьЦену) КонецЦикла;
			ФункцииФормДокументов.РассчитатьСуммыТабличныхЧастей(
					Строка, 
					СтруктураКолонокТовары,,,ПересчитатьЦену, ТипЦенВключаетНДС);
			
			КонецЦикла;
	КонецЕсли;

КонецПроцедуры


&НаСервере
Процедура ЗаполнитьСтавкуНДС(Таблица, СтруктураКолонокТовары = Неопределено) Экспорт
	
 	Если СтруктураКолонокТовары <> Неопределено Тогда	
		
		Для Каждого Строка Из Таблица Цикл Строка.СтавкаНДС = ?(СтруктураКолонокТовары.УчитыватьНДС, РаботаСНоменклатурой.ПолучитьСтавкуНДСНоменклатуры(Строка.Номенклатура), РаботаСНоменклатурой.ПолучитьСтавкуНДСНоменклатуры()); КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроставитьНомераГТД(Товары, СтруктураКолонокТовары, Дата) Экспорт
	ТзТовары = Товары.Выгрузить();
	МенВрТаб = Новый МенеджерВременныхТаблиц();
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенВрТаб;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СписокТ.Номенклатура
	               |ПОМЕСТИТЬ НоменклатураДокумента
	               |ИЗ
	               |	&ТзТовары КАК СписокТ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ПоступлениеТоваровТовары.Ссылка.Дата,
	               |	ПоступлениеТоваровТовары.НомерГТД,
	               |	НоменклатураДокумента.Номенклатура КАК Номенклатура
	               |ПОМЕСТИТЬ ОбщаяТЗ
	               |ИЗ
	               |	НоменклатураДокумента КАК НоменклатураДокумента
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваров.Товары КАК ПоступлениеТоваровТовары
	               |		ПО НоменклатураДокумента.Номенклатура = ПоступлениеТоваровТовары.Номенклатура
	               |ГДЕ
	               |	ПоступлениеТоваровТовары.Ссылка.Проведен = ИСТИНА
	               |	И ПоступлениеТоваровТовары.Ссылка.Дата < &Дата
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ОбщаяТЗ.Номенклатура,
	               |	ОбщаяТЗ.НомерГТД,
	               |	ОбщаяТЗ.Дата
	               |ИЗ
	               |	ОбщаяТЗ КАК ОбщаяТЗ
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			МАКСИМУМ(ОбщаяТЗ.Дата) КАК Дата,
	               |			ОбщаяТЗ.Номенклатура КАК Номенклатура
	               |		ИЗ
	               |			ОбщаяТЗ КАК ОбщаяТЗ
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ОбщаяТЗ.Номенклатура) КАК ВложенныйЗапрос
	               |		ПО ОбщаяТЗ.Дата = ВложенныйЗапрос.Дата
	               |			И ОбщаяТЗ.Номенклатура = ВложенныйЗапрос.Номенклатура";
    
    Запрос.УстановитьПараметр("ТзТовары", ТзТовары);
	Запрос.УстановитьПараметр("Дата", Дата);
    Результат = Запрос.Выполнить();
	
	
				
			    ВыборкаНоменклатура = Результат.Выбрать();
				
				Если СтруктураКолонокТовары <> Неопределено и СтруктураКолонокТовары.ЕстьНомерГТД Тогда
					
				Пока ВыборкаНоменклатура.Следующий() Цикл
						
					Для каждого Строка из Товары Цикл
						Если Строка.Номенклатура = ВыборкаНоменклатура.Номенклатура Тогда
							Строка.НомерГТД = ВыборкаНоменклатура.НомерГТД;
						КонецЕсли;
					КонецЦикла;
										
				КонецЦикла;
				
                КонецЕсли;
		
КонецПроцедуры
&НаКлиенте
Функция ЕстьЧтоИзменятьВТаблице(КолСтрокВТаблице = Неопределено)
	
	Возврат КолСтрокВТаблице = Неопределено Или
			КолСтрокВТаблице <> 0;
	
КонецФункции
&НаКлиенте
Функция ДиалогПриИзмененииТипаЦен(КолСтрокВТаблице = Неопределено, СтруктураКолонокТовары, ТипЦен) Экспорт
	
	// Истина если согласен
	// Ложь не согласен
	
	СтруктураКолонокТовары.ТипЦен = ТипЦен;
	
	Если Не ЕстьЧтоИзменятьВТаблице(КолСтрокВТаблице) Тогда
			
		Возврат Ложь;
		
	Иначе
		////перевести
		Возврат Вопрос("Изменился тип цены!
			|Пересчитать товары по новому типу цен?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да;
		
	КонецЕсли;
	
КонецФункции
&НаКлиенте
Функция ДиалогПриИзмененииВалюты(КолСтрокВТаблице = Неопределено, СтруктураКолонокТовары, Валюта) Экспорт
	
	// Истина если согласен
	// Ложь не согласен
	
	СтруктураКолонокТовары.Валюта = Валюта;
	
	Если Не ЕстьЧтоИзменятьВТаблице(КолСтрокВТаблице) Тогда
			
		Возврат Ложь;
		
	Иначе
		///перевести
		Возврат Вопрос("Изменилась валюта документа,
			|Пересчитать товары по новой валюте?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да;
		
	КонецЕсли;
	
КонецФункции
&НаКлиенте
Функция ДиалогПриИзмененииУчитыватьНДС(УчитыватьНДС, КолСтрокВТаблице = Неопределено, СтруктураКолонокТовары) Экспорт
	
	// Истина если согласен
	// Ложь не согласен
	
	СтруктураКолонокТовары.УчитыватьНДС = УчитыватьНДС;
	
	Если Не ЕстьЧтоИзменятьВТаблице(КолСтрокВТаблице) Тогда
			
		Возврат Ложь;
		
	Иначе
		///перевести
		Возврат Вопрос(?(УчитыватьНДС, "Установлен учет НДС,
			|Пересчитать товары с учетом НДС?",
										"Снят НДС,
			|Пересчитать товары без учета НДС?"), 
					РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да;
		
	КонецЕсли;
	
КонецФункции
&НаКлиенте
Функция ДиалогПриИзмененииСуммаВключаетНДС(СуммаВключаетНДС, КолСтрокВТаблице = Неопределено, СтруктураКолонокТовары) Экспорт
	
	// Истина если согласен
	// Ложь не согласен
	
	СтруктураКолонокТовары.СуммаВключаетНДС = СуммаВключаетНДС;
	
	Если Не ЕстьЧтоИзменятьВТаблице(КолСтрокВТаблице) Тогда
			
		Возврат Ложь;
		
	Иначе
		///перевести
		Возврат Вопрос(?(СуммаВключаетНДС, "НДС включена в стоимость,
			|Пересчитать товары с НДС в цене товара?",
										"НДС установлен сверху,
			|Пересчитать товары с учетом НДС сверх цены?"), 
					РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ДиалогПриИзмененииРасчетСкидкиОтЦены(РасчетСкидкиОтЦены, КолСтрокВТаблице = Неопределено, СтруктураКолонокТовары, ФормаВладелец, ИмяРеквизита) Экспорт
	
	// Истина если согласен
	// Ложь не согласен
	
	СтруктураКолонокТовары.РасчетСкидкиОтЦены = РасчетСкидкиОтЦены;
	
	Если Не ЕстьЧтоИзменятьВТаблице(КолСтрокВТаблице) Тогда
			
		Возврат Ложь;
		
	Иначе
		///перевести
		
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПослеОтветаНаВопросВДиалоге", ФормаВладелец, ИмяРеквизита),?(РасчетСкидкиОтЦены, "Скидка расчитывается от суммы,
			|Пересчитать товары с расчетом скидки от цены?",
										 "Скидка расчитывается от цены,
			|Пересчитать товары с расчетом скидки от суммы?"), РежимДиалогаВопрос.ДаНет); 
			
		
	КонецЕсли;
	
КонецФункции
&НаСервере
Функция ЗапрещеноВыбиратьТипЦенВДокументах(Элем) Экспорт
	Если РольДоступна("УстановкаОптовогоТипаЦен") Тогда
		Возврат Ложь;
	Иначе	
		Возврат Элем.ЗапрещеноВыбиратьВДокументах;
	КонецЕсли;	
КонецФункции

