
// Обработчик события ПриЗаписи регистра сведений КурсыВалют.
// При записи нового элемента(ов) вызывает функциональность записи
// курса подчиненных валют.
//
Процедура ПриЗаписи(Отказ, Замещение)
	
	Если Количество() > 0 Тогда
		Для Каждого Запись Из ЭтотОбъект Цикл
			Если (Запись.Кратность = 0) ИЛИ (Запись.Курс = 0) Тогда
				Сообщить(НСтр("ru = 'Кратность или курс не могут быть нулевыми!'"));
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Отправим сайту инфу о изменении согласованного ассортимента
	
	ЗапросСсылок = "ВЫБРАТЬ Различные РАЗРЕШЕННЫЕ
	|	Цен.Номенклатура КАК Ссылка
	|ИЗ
	|(
	|	ВЫБРАТЬ
	|		Цен.Номенклатура, 
	|		Выбор когда ЕСТЬNULL(Акц.НоваяЦена, 0) = 0 тогда Цен.Цена иначе Акц.НоваяЦена конец Цена, 
	|		Выбор когда ЕСТЬNULL(Акц.НоваяЦена, 0) = 0 тогда Цен.Валюта иначе Акц.Валюта конец Валюта, 
	|		Цен.ТипЦен,
	|		ВЫБОР КОГДА Цен.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) ТОГДА 1 ИНАЧЕ Цен.Упаковка.Коэффициент КОНЕЦ Коэффициент
	|	ИЗ
	|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекущаяДата, ТипЦен.ВыгружатьНаСайт) Цен
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.Акция.СрезПоследних(&ТекущаяДата, ТипЦен.ВыгружатьНаСайт) Акц
	|	ПО
	|       Цен.Номенклатура = Акц.Номенклатура И 
	|		Цен.ТипЦен = Акц.ТипЦен
	|) КАК Цен
	|
	|ГДЕ Цен.Валюта В (&Валюты) И Цен.Номенклатура.ВыгружатьНаСайт И Цен.Номенклатура.Родитель.ВыгружатьНаСайт
	|";
		
	КодПолученияМассиваОбъектов = "
	|массивВалют = Новый Массив;
	|Для каждого лЗапись Из пОбъект Цикл
	|	Если лЗапись.Валюта = Справочники.Валюты.ПустаяСсылка() Тогда Продолжить; КонецЕсли;
	|	массивВалют.Добавить(лЗапись.Валюта);
	|КонецЦикла;
	|
	|Запрос = Новый Запрос;
	|Запрос.Текст = """ + СтрЗаменить(ЗапросСсылок, Символы.ПС, " ") + """;
	|Запрос.УстановитьПараметр(""Валюты"", массивВалют);
	|Запрос.УстановитьПараметр(""ТекущаяДата"", ТекущаяДата());
	|
	|массивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(""Ссылка"");
	|";
	ПараметрыФункции = "(Новый Структура(""массивСсылок, Области"", массивОбъектов, Новый Структура(""Цены"")))";
	
	//Если 	Количество() И
	//		Константы.ИнтеграцияССайтом.Получить() И
	//		Не API2.ЗаписатьНаборВБуферОбновленияНаСайте(ЭтотОбъект, 
	//			Новый Структура("Поле, АдресРесурсаСервера, Очередь, ФункцияПолученияОбъекта, КодПолученияМассиваОбъектов, ПараметрыФункцииПолученияОбъекта", 
	//			"", "/api/products", 25, "ПолучитьТовары", КодПолученияМассиваОбъектов, ПараметрыФункции)) Тогда
	//		
	//	Отказ = Истина;
	//КонецЕсли;
	
	Для Каждого Запись Из ЭтотОбъект Цикл
		// Найти все зависимые валюты от данной и изменить их курс
		ЗагрузитьКурсДляПодчиненныхВалют(Запись.Валюта,
		                                 Запись.Период,
		                                 Запись.Курс,
		                                 Запись.Кратность);
	КонецЦикла;
	
КонецПроцедуры

// Находит подчиненные валюты от базовой, переданной в качестве параметра и 
// создает записи в регистре сведений на основе записи регистра сведений
// базовой валюты (период, курс, кратность).
//
// Параметры
//  ВалютаБазовая – Справочники.Валюты – ссылка на базовую валюту, из регистра
//                 сведений которой, будут копироваться данные
//  Период        - Дата - отметка времени, на которую необходимо записать параметры
//  Курс          - Число - курс базовой валюты
//  Кратность     - Число - кратность базовой валюты
//
Процедура ЗагрузитьКурсДляПодчиненныхВалют(ВалютаБазовая, Период, Курс, Кратность) Экспорт
	
	ТаблицаВалют = РаботаСКурсамиВалют.ПолучитьСписокЗависимыхВалют(ВалютаБазовая);
	
	РегистрКурсыВалют = РегистрыСведений.КурсыВалют;
		
	Для Каждого ЭлементВалюта Из ТаблицаВалют Цикл
		
		ЗаписьКурсовВалют = РегистрКурсыВалют.СоздатьМенеджерЗаписи();
		
		ЗаписьКурсовВалют.Валюта    = ЭлементВалюта.Ссылка;
		ЗаписьКурсовВалют.Период    = Период;
		ЗаписьКурсовВалют.Курс      = Курс + Курс * ЭлементВалюта.КоэффициентПодчиненногоКурса / 100;
		ЗаписьКурсовВалют.Кратность = Кратность;
		ЗаписьКурсовВалют.Записать();
		
	КонецЦикла;
	
КонецПроцедуры
