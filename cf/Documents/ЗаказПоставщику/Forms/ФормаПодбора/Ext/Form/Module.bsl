&НаКлиенте
Перем ВыполняетсяЗакрытие;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.УникальныйИдентификатор = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Предусмотрено открытие обработки только из форм объектов.'");
	КонецЕсли;
	
	ОбработатьПереданныеПараметры(Параметры);
	
	ИнициализироватьКомпоновщикСервер(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если НЕ ЗавершениеРаботы И НЕ ВыполняетсяЗакрытие И Не ПеренестиВДокумент И Товары.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru = 'Подобранные ставки не перенесены в документ. Перенести?'");

		Отказ = Истина;
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект), 
			ТекстВопроса, 
			РежимДиалогаВопрос.ДаНетОтмена);
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Заполнить(Команда)
	
	ТекстВопроса = НСтр("ru = 'При перезаполнении все введенные вручную данные будут потеряны, продолжить?'");
	
	Если Товары.Количество() > 0 Тогда
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ЗаполнитьТаблицуТоваровЗавершение", ЭтотОбъект),
			ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
	Иначе
		ЗаполнитьТаблицуТоваровНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВДокумент(Команда)
	
	ПеренестиВДокумент = Истина;
	АдресТоваровВХранилище = ПоместитьВоВременноеХранилищеНаСервере();
	Закрыть(АдресТоваровВХранилище);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиТаблицыФормыСтавки

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	КоличествоПодобранныхТоваров = Товары.Количество();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗаполнитьТаблицуТоваровЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт 
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьТаблицуТоваровНаСервере();
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТаблицуТоваровЗавершение()

&НаСервере
Процедура ЗаполнитьТаблицуТоваровНаСервере()
	
	Запрос = Новый Запрос;
	
	СхемаОтбора = Документы.ЗаказПоставщику.ПолучитьМакет("СхемаПодбора");
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	КомпоновщикНастроекРасчета = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроекРасчета.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаОтбора));
	КомпоновщикНастроекРасчета.ЗагрузитьНастройки(КомпоновщикНастроек.Настройки);
	
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаОтбора, КомпоновщикНастроекРасчета.ПолучитьНастройки(),,,
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	// Инициализация процессора компоновки
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
	
	Товары.Очистить();
	ТаблицаТоваров = РеквизитФормыВЗначение("Товары");
	
	// Получение результата
	ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений =
		Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений.УстановитьОбъект(ТаблицаТоваров);
	ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений.Вывести(ПроцессорКомпоновкиДанных);
	//рассчитаем количество для переноса в документ
	ТаблицаТоваров.Свернуть("Номенклатура,ЮнитПак","Мин,Макс,КоличествоОстаток,Количество");
	Для каждого Эл Из ТаблицаТоваров Цикл
		Если Эл.КоличествоОстаток <= Эл.Мин Тогда
		
			Эл.Количество = Окр( (Эл.Макс - Эл.КоличествоОстаток)/?(Эл.Юнитпак = 0, 1, Эл.Юнитпак)  + 0.5, 0, 0) * ?(Эл.Юнитпак = 0, 1, Эл.Юнитпак);	
		
		КонецЕсли;
	    
	КонецЦикла;
	//
	ЗначениеВРеквизитФормы(ТаблицаТоваров, "Товары");
	
	КоличествоПодобранныхТоваров = Товары.Количество();
	
КонецПроцедуры // ЗаполнитьТаблицуТоваровНаСервере()

&НаСервере
Процедура ИнициализироватьКомпоновщикСервер(НастройкаКомпоновки)
	
	СхемаКомпоновки = Документы.ЗаказПоставщику.ПолучитьМакет("СхемаПодбора");
	
	АдресСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновки,УникальныйИдентификатор);
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));
	
	Если НастройкаКомпоновки = Неопределено Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновки.НастройкиПоУмолчанию);
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(НастройкаКомпоновки);
		КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	КонецЕсли;
	
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Период", КонецДня(Период));
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Склад", Склад);	
	ЭлементыНастроек = КомпоновщикНастроек.Настройки.Отбор.Элементы;
	
	//УстановитьОтборыВНастройках(
	//	ЭлементыНастроек, 
	//	"КатегорияТовара", 
	//	КатегорияТовара);	
	УстановитьОтборыВНастройках(
		ЭлементыНастроек, 
		"Поставщик", 
		Поставщик);	
		
	УстановитьОтборыВНастройках(
		ЭлементыНастроек, 
		"Склад", 
		Склад);	
	
КонецПроцедуры // ИнициализироватьКомпоновщикСервер()

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		ВыполняетсяЗакрытие = Истина;
		Закрыть();
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ВыполняетсяЗакрытие = Истина;
		ПеренестиВДокумент = Истина;
		АдресТоваровВХранилище = ПоместитьВоВременноеХранилищеНаСервере();
		Закрыть(АдресТоваровВХранилище);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПоместитьВоВременноеХранилищеНаСервере()
	 ТЗ = Товары.Выгрузить();
	 МассивСтрок = ТЗ.НайтиСтроки(Новый Структура("Количество", 0));
	 Для каждого Эл Из МассивСтрок Цикл
	 
	 	 ТЗ.Удалить(Эл);
	 
	 КонецЦикла;
	Возврат ПоместитьВоВременноеХранилище(ТЗ, ИдентификаторВызывающейФормы);
	
КонецФункции

&НаСервере
Процедура ОбработатьПереданныеПараметры(Параметры)

	ИдентификаторВызывающейФормы = Параметры.УникальныйИдентификатор;
	Склад	 					 = Параметры.Склад;
	Поставщик	 					 = Параметры.Поставщик;
	//КатегорияТовара					 = Параметры.КатегорияТовара;
	Период						 = Параметры.Период;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборыВНастройках(ЭлементыНастроек, ИмяПоля, Значение, ВидСравненияПоля = Неопределено)
	
	Если ВидСравненияПоля = Неопределено Тогда
		
		Если ТипЗнч(Значение) = Тип("СписокЗначений") Тогда	
			ВидСравненияПоля = ВидСравненияКомпоновкиДанных.ВСписке;
		Иначе 
			ВидСравненияПоля = ВидСравненияКомпоновкиДанных.Равно;
		КонецЕсли; 
		
	КонецЕсли; 
	
	Если ТипЗнч(Значение) = Тип("СписокЗначений") Тогда	
		Использование = (Значение.Количество() > 0);
	Иначе 
		Использование = ЗначениеЗаполнено(Значение);
	КонецЕсли; 
	
	ЭлементНайден = Ложь;
	
	ПолеОтбора = Новый ПолеКомпоновкиДанных(ИмяПоля);
	
	Для каждого ЭлементОтбора Из ЭлементыНастроек Цикл
	
		Если ЭлементОтбора.ЛевоеЗначение = ПолеОтбора Тогда
		
			ЭлементНайден = Истина;
			Прервать;
		
		КонецЕсли; 	
	
	КонецЦикла; 
	
	Если Не ЭлементНайден Тогда
		ЭлементОтбора = ЭлементыНастроек.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение 						 = ПолеОтбора;
		ЭлементОтбора.ИдентификаторПользовательскойНастройки = Строка(Новый УникальныйИдентификатор);
	КонецЕсли; 
	
	ЭлементОтбора.ПравоеЗначение						 = Значение;
	ЭлементОтбора.ВидСравнения  						 = ВидСравненияПоля;
	ЭлементОтбора.Использование   						 = Использование;
	ЭлементОтбора.РежимОтображения					     = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Авто;
	
КонецПроцедуры

#КонецОбласти

ВыполняетсяЗакрытие = Ложь;