&НаКлиенте
Перем СтруктураКолонокТовары Экспорт;

//&НаСервере
//Перем НовыйДокумент;

&НаКлиенте
Процедура ОбщиеРеквизиты(Команда)
	
	ФункцииФормДокументов.ОткрытьОбщиеРеквизиты(ЭтаФорма);
	
КонецПроцедуры
&НаСервере
Процедура ПересчитатьСуммыТабличныхЧастей(СтруктураКолонокТовары) Экспорт
	
	ФункцииФормДокументов.ПересчитатьСуммыТабличныхЧастей(Объект.Товары, СтруктураКолонокТовары);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюОЗаказе81()
	
	// Получим заказ из 81
	
	Connector = КэшируемыеФункции.ИницилизироватьCOMConnector81();
	
	Если Connector <> Неопределено Тогда
			
		ИнформацияОЗаказе81 = Connector.String(Connector.Документы.ЗаказПокупателя.ПолучитьСсылку(Connector.NewObject("UUID", Строка(Объект.Ссылка.УникальныйИдентификатор()))));
			
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ОбновитьВидимостьЭлементов()
	
	//ЕстьЗаказ = Не ЗаказПокупателя.Пустая(); - всегда будет пустой, из 8.1 в 8.2 заказ не идет, так как ЭтоИнтернетЗаказ = Истина, поэтому:
	ЕстьЗаказ = Объект.СинхронизированС81;	
	
	Элементы.ПроизвестиДействияВ81.Видимость = Не ЕстьЗаказ;
	ИнформацияОЗаказе81 = "Такого заказа в 8.1 нет";
	
	Если ЕстьЗаказ Тогда
		
		ОбновитьИнформациюОЗаказе81();
		
	КонецЕсли;
	
КонецПроцедуры

// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//НовыйЗаказ = Параметры.Ключ.Пустая();
		
	GUID = Объект.Ссылка.УникальныйИдентификатор();
	
	// Рассчитаем динамические колонки
	
	ФункцииФормДокументов.РассчитатьДинамическиеКолонки(
					Объект.Товары,
					ФункцииФормДокументов.ПолучитьСтруктуруКолонокТовары(Элементы.Товары, Объект.СуммаВключаетНДС, Объект.ТипЦен));
    Элементы.Оператор.РежимВыбораИзСписка = Истина;		
    Элементы.Оператор.СписокВыбора.ЗагрузитьЗначения(ПолучитьСписокПоРоли(Справочники.Роли.НайтиПоНаименованию("Менеджер  интернет")));
	// Получим заказ
	
	ОбновитьЗаказПокупателя();
					
	ФункцииФормДокументовСервер.УстановитьСвязиГрузополучателя(Объект,Элементы,Новый Структура("Грузополучатель, Грузоотправитель","Объект.Организация","Объект.Контрагент"));
КонецПроцедуры

Функция ПолучитьСписокПоРоли(Роль)
   Запрос = Новый Запрос();
   Запрос.Текст =  "ВЫБРАТЬ
                   |	РолиПользователей.Пользователь
                   |ИЗ
                   |	РегистрСведений.РолиПользователей КАК РолиПользователей
                   |ГДЕ
                   |	РолиПользователей.Роль = &Роль";
   Запрос.УстановитьПараметр("Роль", Роль);	
   ТаблицаПродавцов = Запрос.Выполнить().Выгрузить();
   Возврат ТаблицаПродавцов.ВыгрузитьКолонку("Пользователь");	
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СтруктураКолонокТовары = ФункцииФормДокументов.ПолучитьСтруктуруКолонокТовары(Элементы.Товары, Объект.СуммаВключаетНДС, Объект.ТипЦен);
	
	ОбновитьВидимостьЭлементов();
	УправлениеВидимостьюДоступностьюНаКлиенте();
КонецПроцедуры
&НаКлиенте
Процедура ПодборВыполнить()

КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаказПокупателя()

	врЗаказ = Документы.ЗаказПокупателя.ПолучитьСсылку(Новый УникальныйИдентификатор(GUID));
	Если врЗаказ <> Неопределено И НЕ врЗаказ.Пустая() И врЗаказ.ПолучитьОбъект() <> Неопределено Тогда
		ЗаказПокупателя = врЗаказ;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция СинхронизироватьЗаказВ81(ЭтоРезерв, стрОшибки = "")
	
	Если Документы.ИнтернетЗаказПокупателя.СинхронизироватьЗаказВ81(Объект.Ссылка, ЭтоРезерв, стрОшибки) Тогда
		ОбновитьЗаказПокупателя();
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции
&НаКлиенте
Процедура СинхронизироватьС81БезРезерва(Команда)
	
	Записать();
	
	// Синхронизируем
	
	стрОшибки = "";
	
	Если СинхронизироватьЗаказВ81(Ложь, стрОшибки) Тогда
		
		ОбщиеФункции.СообщитьТекст("Синхронизация успешно выполнена");
		Объект.СинхронизированС81 = Истина;
		
		ОбновитьВидимостьЭлементов();
		
	Иначе
		
		ОбщиеФункции.СообщитьТекст("При синхронизации произошли ошибки
										|" + стрОшибки);
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура СинхронизироватьС81СРезервом(Команда)
	
	Записать();
	
	// Синхронизируем
	
	стрОшибки = "";
	
	Если СинхронизироватьЗаказВ81(Истина, стрОшибки) Тогда
		
		ОбщиеФункции.СообщитьТекст("Синхронизация успешно выполнена");
		Объект.СинхронизированС81 = Истина;
		
		ОбновитьВидимостьЭлементов();
		
	Иначе
		
		ОбщиеФункции.СообщитьТекст("При синхронизации произошли ошибки
										|" + стрОшибки);
	КонецЕсли;

	
КонецПроцедуры


// ОБРАБОТКИ ТАБЛИЧНОЙ ЧАСТИ

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)

	ФункцииФормДокументов.НоменклатураПриИзменении(
				Элементы.Товары, 
				СтруктураКолонокТовары);
				
КонецПроцедуры
&НаКлиенте
Процедура КоличествоПриИзменении(Элемент)
	
	ФункцииФормДокументов.КоличествоПриИзменении(Элементы.Товары, СтруктураКолонокТовары);
	
КонецПроцедуры
&НаКлиенте
Процедура ЦенаПриИзменении(Элемент)
	
	СтруктураКолонокТовары.ЕстьПроцентРучнойСкидки=Истина;
	СтруктураКолонокТовары.ЕстьПроцентАвтоматическойСкидки=Истина;
	
	ФункцииФормДокументов.ЦенаПриИзменении(Элементы.Товары, СтруктураКолонокТовары);
	
КонецПроцедуры
&НаКлиенте
Процедура СуммаПриИзменении(Элемент)
	
	СтруктураКолонокТовары.ЕстьПроцентРучнойСкидки=Истина;
	СтруктураКолонокТовары.ЕстьПроцентАвтоматическойСкидки=Истина;
	СтруктураКолонокТовары.ЕстьСуммаБезСкидки= Истина;
	СтруктураКолонокТовары.ЕстьСуммаРучнойСкидки=Истина;
	
	ФункцииФормДокументов.СуммаПриИзменении(Элементы.Товары, СтруктураКолонокТовары);
	
КонецПроцедуры
&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент)
	
	ФункцииФормДокументов.СтавкаНДСПриИзменении(Элементы.Товары, СтруктураКолонокТовары);
	
КонецПроцедуры
&НаКлиенте
Процедура УпаковкаПриИзменении(Элемент)
	
	ФункцииФормДокументов.УпаковкаПриИзменении(
				Элементы.Товары, 
				СтруктураКолонокТовары);

КонецПроцедуры
&НаКлиенте
Процедура СуммаНДСПриИзменении(Элемент)
	
	ФункцииФормДокументов.СуммаНДСПриИзменении(Элементы.Товары, СтруктураКолонокТовары);
	
КонецПроцедуры


&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	                 
	//Если НовыйЗаказ Тогда
	//	
	//	//СсылкаНового = Документы.ИнтернетЗаказПокупателя.ПолучитьСсылку(Новый УникальныйИдентификатор);
	//	//УстановитьСсылкуНового(СсылкаНового);
	//	
	//	БизнесПроцесс = БизнесПроцессы.ИнтернетЗаявка.СоздатьБизнесПроцесс();
	//	БизнесПроцесс.Дата = ТекущаяДата();
	//	БизнесПроцесс.ИнтернетЗаказ = Объект.Ссылка; //ПолучитьСсылкуНового();
	//	БизнесПроцесс.Статус = Перечисления.СтатусыИнтерентЗаявки.Открыт;
	//	БизнесПроцесс.Записать();
	//	БизнесПроцесс.Старт();

	//КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	//Если НовыйДокумент Тогда
	//	
	//	БизнесПроцесс = БизнесПроцессы.ИнтернетЗаявка.СоздатьБизнесПроцесс();
	//	БизнесПроцесс.Дата = ТекущаяДата();
	//	БизнесПроцесс.ИнтернетЗаказ = ТекущийОбъект.Ссылка;
	//	БизнесПроцесс.Статус = Перечисления.СтатусыИнтерентЗаявки.Открыт;
	//	БизнесПроцесс.Записать();
	//	БизнесПроцесс.Старт();
	//	
	//КонецЕсли;
	
КонецПроцедуры

                       
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	//НовыйДокумент = ТекущийОбъект.ЭтоНовый();
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьТаблицу()
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Объект.Товары.Выгрузить(), УникальныйИдентификатор);
	
	Возврат АдресХранилища;
	
КонецФункции

&НаКлиенте
Процедура ВесОбъем(Команда)
	
	// пока так
	
	АдресХранилища = ПодготовитьТаблицу();
	
	ОткрытьФорму("Документ.ИнтернетЗаказПокупателя.Форма.ФормаВеса", Новый Структура("АдресХранилища", АдресХранилища));
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	//Если НЕ ПроверитьИзменения() Тогда
	//	Отказ = Истина;
	//КонецЕсли;
		
КонецПроцедуры


&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	Объект.Грузополучатель = ФункцииФормДокументовСервер.ГрузополучательПриИзмененииРеквизита(Объект.Контрагент);
	Объект.МенеджерЗаказа = ФункцииФормДокументовСервер.МенеджерЗаказаПриИзмененииРеквизита(Объект.Контрагент,Объект.Грузополучатель);
	
	СтруктураДанныхКонтрагента = ПолучитьСтруктуруЗначенийДоставкиКонтрагентаНаСервере(Объект.Контрагент);
	Объект.ВариантДоставкиНов = СтруктураДанныхКонтрагента.ВариантДоставкиНов;
	Объект.ЗаЧейСчетДоставка = СтруктураДанныхКонтрагента.ЗаЧейСчетДоставка;
	Объект.Грузоперевозчик = СтруктураДанныхКонтрагента.ОсновнойГрузоперевозчик;
	Объект.ЧастичнаяОтгрузка = СтруктураДанныхКонтрагента.ЧастичнаяОтгрузка;
	
	УправлениеВидимостьюДоступностьюНаКлиенте();
КонецПроцедуры
&НаСервереБезКонтекста
Функция ПолучитьСтруктуруЗначенийДоставкиКонтрагентаНаСервере(Контрагент)
	Структура = Новый Структура;
	Структура.Вставить("ВариантДоставкиНов" , Контрагент.ВариантДоставки);
	Структура.Вставить("ЗаЧейСчетДоставка" , Контрагент.ЗаЧейСчетДоставка);
	Структура.Вставить("ОсновнойГрузоперевозчик", Контрагент.ОсновнойГрузоперевозчик);
	Структура.Вставить("ЧастичнаяОтгрузка", Контрагент.ЧастичнаяОтгрузка);

	Возврат Структура;
КонецФункции


&НаКлиенте
Процедура ГрузополучательПриИзменении(Элемент)
	Объект.МенеджерЗаказа = ФункцииФормДокументовСервер.МенеджерЗаказаПриИзмененииРеквизита(Объект.Контрагент,Объект.Грузополучатель);
КонецПроцедуры

&НаКлиенте
Процедура ВариантДоставкиНовПриИзменении(Элемент)
	УправлениеВидимостьюДоступностьюНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВидимостьюДоступностьюНаКлиенте()
	
	Если Объект.ВариантДоставкиНов=ПредопределенноеЗначение("Перечисление.ВариантДоставки.СамовывозСНашегоСклада") Тогда
		Элементы.ЗаЧейСчетДоставка.Видимость				 = Ложь;
		Элементы.Грузоперевозчик.Видимость					 = Ложь;
		Элементы.ДатаДоставки.Видимость						 = Ложь;
		Элементы.ВремяДоставкиС.Видимость					 = Ложь;
		Элементы.ВремяДоставкиПо.Видимость					 = Ложь;
		Элементы.АдресДоставкиНов.Видимость					 = Ложь;
		Элементы.КонтактноеЛицоДоставки.Видимость			 = Ложь;
		Элементы.ТелефонКонтактногоЛицаДоставки.Видимость	 = Ложь;
	ИначеЕсли Объект.ВариантДоставкиНов=ПредопределенноеЗначение("Перечисление.ВариантДоставки.ДоставкаДоКлиента") Тогда
		Элементы.ЗаЧейСчетДоставка.Видимость				 = Истина;
		Элементы.Грузоперевозчик.Видимость					 = Истина;
		Элементы.ДатаДоставки.Видимость						 = Истина;
		Элементы.ВремяДоставкиС.Видимость					 = Истина;
		Элементы.ВремяДоставкиПо.Видимость					 = Истина;
		Элементы.АдресДоставкиНов.Видимость					 = Истина;
		Элементы.КонтактноеЛицоДоставки.Видимость			 = Истина;
		Элементы.ТелефонКонтактногоЛицаДоставки.Видимость	 = Истина;
	ИначеЕсли Объект.ВариантДоставкиНов=ПредопределенноеЗначение("Перечисление.ВариантДоставки.ДоставкаДоГрузоперевозчика") Тогда
		Элементы.ЗаЧейСчетДоставка.Видимость				 = Истина;
		Элементы.Грузоперевозчик.Видимость					 = Истина;
		Элементы.ДатаДоставки.Видимость						 = Ложь;
		Элементы.ВремяДоставкиС.Видимость					 = Ложь;
		Элементы.ВремяДоставкиПо.Видимость					 = Ложь;
		Элементы.АдресДоставкиНов.Видимость					 = Ложь;
		Элементы.КонтактноеЛицоДоставки.Видимость			 = Истина;
		Элементы.ТелефонКонтактногоЛицаДоставки.Видимость	 = Истина;
	ИначеЕсли Объект.ВариантДоставкиНов=ПредопределенноеЗначение("Перечисление.ВариантДоставки.ДоставкаДоКлиентаНашимиСилами") Тогда
		Элементы.ЗаЧейСчетДоставка.Видимость				 = Истина;
		Элементы.Грузоперевозчик.Видимость					 = Ложь;
		Элементы.ДатаДоставки.Видимость						 = Истина;
		Элементы.ВремяДоставкиС.Видимость					 = Истина;
		Элементы.ВремяДоставкиПо.Видимость					 = Истина;
		Элементы.АдресДоставкиНов.Видимость					 = Истина;
		Элементы.КонтактноеЛицоДоставки.Видимость			 = Истина;
		Элементы.ТелефонКонтактногоЛицаДоставки.Видимость	 = Истина;
	Иначе
		Элементы.ЗаЧейСчетДоставка.Видимость				 = Истина;
		Элементы.Грузоперевозчик.Видимость					 = Истина;
		Элементы.ДатаДоставки.Видимость						 = Истина;
		Элементы.ВремяДоставкиС.Видимость					 = Истина;
		Элементы.ВремяДоставкиПо.Видимость					 = Истина;
		Элементы.АдресДоставкиНов.Видимость					 = Истина;
		Элементы.КонтактноеЛицоДоставки.Видимость			 = Истина;
		Элементы.ТелефонКонтактногоЛицаДоставки.Видимость	 = Истина;
	КонецЕсли;
	
КонецПроцедуры




