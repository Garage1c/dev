&НаКлиенте
Процедура ОбщиеРеквизиты(Команда)
	
	ФункцииФормДокументов.ОткрытьОбщиеРеквизиты(ЭтаФорма);
	
КонецПроцедуры

// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	Если Объект.Ссылка.Пустая() И НЕ ЗначениеЗаполнено(Параметры.Основание) Тогда
	
		Объект.Процесс 		= Параметры.Процесс;
		Объект.Касса 		= Параметры.Касса;
		Объект.СтатьяДДС	= Параметры.СтатьяДДС;
		Объект.Валюта       = ОбщиеФункции.НастройкаПользователя("ПоУмолчанию_Валюта");
		
		Если Объект.Касса.Пустая()  Тогда
			Объект.Касса = ОбщиеФункции.НастройкаПользователя("ПоУмолчанию_Касса");
		КонецЕсли;
		
		Если НЕ Объект.Касса.Пустая() Тогда
			Объект.Организация	= Объект.Касса.Организация;
			Объект.Валюта		= Объект.Касса.ТипЦен.Валюта;
		КонецЕсли;
	
	КонецЕсли;
	
	УправлениеВидимостьюДоступностью();

	УстановитьВидимостьККТ();
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение ИЛИ  ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		Оповестить(СобытияСистемы.Событие_ИзмениласьНаличность(), , ЭтаФорма);
	КонецЕсли;
	
	//+25.06.2017 Андриянов
	//Добавляем автоматическое пробитие по кассе, если это касса с пробитием и документ ещё не пробит
	//Если проведение, если в кассе установлен реквизит "Продажа по кассе" и по кассе ещё не проведено
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение И ОбщегоНазначения.НужноПробитиеПоКассе(Объект.Касса) И НЕ Объект.ПроведеноПоККТ И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ОплатаПокупателя") Тогда
		ПробитьЧекПоКассе(Ложь);
	КонецЕсли;
	//-Андриянов
КонецПроцедуры


// ЗАПОЛНИТЬ

&НаСервере
Процедура ЗаполнитьНаСервере(ЗаполняемаяСумма = 0)
	
	Заказы.ЗаполнитьТаблицуДокументаОплаты(Объект, ЗаполняемаяСумма);
			
КонецПроцедуры
&НаКлиенте
Процедура Заполнить(Команда)
	
	ЗаполнитьНаСервере();
	
КонецПроцедуры
&НаКлиенте
Процедура ЗаполнитьПоСумме(Команда)
	
	Сумма = Объект.Сумма;
	
	Если ВвестиЧисло(Сумма, "Сумма заполнения:", 15,2) Тогда
		
		ЗаполнитьНаСервере(Сумма);
		
	КонецЕсли;
	
КонецПроцедуры



#Область ПодобратьЗаказы

&НаКлиенте
Процедура ПодобратьЗаказы(Команда)

	АдресРасшифровкиСуммы=ПоместитьТЧвВХ();
	стрВозврТабл = ОткрытьФорму("ОбщаяФорма.ПодборЗаказовДляДокументовОплаты", 
			Новый Структура("Контрагент, Сумма, ТекущийДокумент, АдресРасшифровкиСуммы,ЭтоВозвратОплаты", 
					Объект.Контрагент, 
					Объект.Сумма,
					Объект.Ссылка,
					АдресРасшифровкиСуммы,
					Ложь),,,,,Новый ОписаниеОповещения("ОбработкаПодбораЗаказов",ЭтаФОрма,));

КонецПроцедуры

&НаСервере
Функция ПоместитьТЧвВХ(); 
	Возврат ПоместитьВоВременноеХранилище(Объект.РасшифровкаСуммы.Выгрузить());
КонецФункции	

&НаКлиенте
Процедура ОбработкаПодбораЗаказов(Результат, Параметры) Экспорт
	Если Результат <> Неопределено Тогда
		ЗаполнитьПодобранныеЗаказы(Результат);
	КонецЕсли;
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьПодобранныеЗаказы(стрВозврТабл)
	
	ТЗ= ЗначениеИзСтрокиВнутр(стрВозврТабл);
	
	Если ПроверитьОтделы(ТЗ) Тогда
		Модифицированность=Истина;
		
		Объект.РасшифровкаСуммы.Очистить();
		Объект.РасшифровкаСуммы.Загрузить(ТЗ);
		
		ЗаполнитьОтдел();
		
	КонецЕсли;
	
КонецПроцедуры



&НаКлиенте
Процедура ЗаполнитьЗаказыАвтоматом(Команда)
	
	ОтветРобота = ЗаполнитьЗаказыАвтоматомНаСервере();
	ПоказатьОповещениеПользователя(ОтветРобота,,,БиблиотекаКартинок.Робот);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьЗаказыАвтоматомНаСервере()
	
	Парам=Новый Структура("Контрагент,Ссылка,Сумма,НазначениеПлатежа,ВидДокумента",Объект.Контрагент,Объект.Ссылка,Объект.Сумма,Объект.Комментарий,Объект.Ссылка.Метаданные().Имя);
	Рез=ВзаиморасчетыСервер.ПолучитьЗаказыДляПлатежки(Парам);
	ТЗ=Рез.ТабЗаказов;
	ОтветРобота=Рез.ОтветРобота;
	Если ТЗ.Количество() Тогда
		
		Объект.РасшифровкаСуммы.Очистить();
		Объект.РасшифровкаСуммы.Загрузить(ТЗ);
		
		ЗаполнитьОтдел();
		
	КонецЕсли;	
	
	Возврат ОтветРобота;
	
КонецФункции

#КонецОбласти


&НаСервере
Функция ПроверитьОтделы(ТЗ)
	
	Если Объект.Контрагент.ОсновнойМенеджер = Справочники.Пользователи.СвободныйЛид 
		ИЛИ НЕ ЗначениеЗаполнено(Объект.Контрагент.ОсновнойМенеджер) Тогда
		
		ВТ=Новый таблицаЗначений;
		ВТ.Колонки.Добавить("Отдел");
		Для Каждого Стр Из ТЗ Цикл
			Если ЗначениеЗаполнено(Стр.Заказ) Тогда
				НовСтр=ВТ.Добавить();
				НовСтр.Отдел = Стр.Заказ.Автор.Отдел;
			КонецЕсли;
		КонецЦикла;	
		ВТ.Свернуть("Отдел");
		Если ВТ.Количество()>1 Тогда
			Сообщить("Для свободного лида нельзя выбирать заказы с авторами из разных отделов (Заказ.Автор.Отдел)! Платежка должна быть на один отдел.");
			Возврат Ложь;
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьОтдел()
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Если ЗначениеЗаполнено(Объект.Контрагент.ОсновнойМенеджер) Тогда
			Если Объект.Контрагент.ОсновнойМенеджер <> Справочники.Пользователи.СвободныйЛид Тогда
				Объект.Отдел = Объект.Контрагент.ОсновнойМенеджер.Отдел;
				Объект.Подразделение = Объект.Отдел.Подразделение;
			Иначе//если свободный лид - берем из автора заказа 
				Объект.Отдел = "";
				Если Объект.РасшифровкаСуммы.Количество()>0 Тогда
					Если ЗначениеЗаполнено(Объект.РасшифровкаСуммы[0].Заказ) Тогда
						//Объект.Отдел = Объект.РасшифровкаСуммы[0].Заказ.Автор.Отдел;
						Объект.Отдел = Объект.РасшифровкаСуммы[0].Заказ.Отдел;

					КонецЕсли;	
					Объект.Подразделение = Объект.Отдел.Подразделение;
				КонецЕсли;	
			КонецЕсли;
		Иначе// если основной менеджер не заполнен - это все равно что свободный лид
			Объект.Отдел = "";
			Если Объект.РасшифровкаСуммы.Количество()>0 Тогда
				Если ЗначениеЗаполнено(Объект.РасшифровкаСуммы[0].Заказ) Тогда
					//Объект.Отдел = Объект.РасшифровкаСуммы[0].Заказ.Автор.Отдел;
					Объект.Отдел = Объект.РасшифровкаСуммы[0].Заказ.Отдел;
					
				КонецЕсли;	
				Объект.Подразделение = Объект.Отдел.Подразделение;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры


&НаКлиенте
Процедура АнализОплат(Команда)
	
	ОткрытьФорму("Обработка.ДолгиПоОплате_Управление.Форма.Управление", 
			Новый Структура("Организация, Контрагент", 
						Объект.Организация, 
						Объект.Контрагент));
КонецПроцедуры


// ПРИ Изменении

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ФункцииФормДокументов.ОрганизацияПриИзменении(Объект);
	
КонецПроцедуры
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
	Если Объект.Сумма > 0 И Вопрос("Заполнить документы отргузки для новой организации?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		ЗаполнитьНаСервере(Объект.Сумма);
	КонецЕсли;
 	
КонецПроцедуры


&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
	
	ФункцииФормДокументов.КонтрагентПриИзменении(Объект,Ложь);
	
КонецПроцедуры
&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииНаСервере();
	
КонецПроцедуры


&НаКлиенте
Процедура ЗаНеучтенныйТоварПриИзменении(Элемент)
	
	НеУчет = НЕ Объект.ЗаНеучтенныйТовар;
	
	Элементы.Контрагент.АвтоОтметкаНезаполненного = НеУчет; 
	
	Элементы.Контрагент.Видимость = НеУчет; 
	Элементы.Контрагент.Видимость = НеУчет; 
    Элементы.РасшифровкаСуммы.Видимость = НеУчет;

КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	УправлениеВидимостьюДоступностью();
	ЗаполнитьСтатьиДДС();

	//+ККТ
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ОплатаПокупателя") И ОбщегоНазначения.НужноПробитиеПоКассе(Объект.Касса) Тогда
		ПоказатьПредупреждение(,"Для пробития по ККТ обязательно заполните реквизит ""Документ отгрузки"" и сумма ПКО должна совпадать с суммой документов отгрузки!");
	КонецЕсли;
	//-ККТ
КонецПроцедуры

&НаСервере
Процедура УправлениеВидимостьюДоступностью()

	ПрочийПриход = Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ПрочийПриход;
	Элементы.Контрагент.Видимость = не ПрочийПриход;
	
	////Начало изменения (Вера)
	//Объект.Валюта = ОбщиеФункции.НастройкаПользователя("ПоУмолчанию_Валюта");
	////Конец изменения (Вера)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Элементы.Сумма.Доступность = ?(РольДоступна("ПолныеПрава") ИЛИ РольДоступна("Бухгалтер") ИЛИ РольДоступна("ПолныеПраваВОбласти"),Истина, Ложь); 
		//Элементы.СтатьяДДС.Доступность = ?(РольДоступна("ПолныеПрава") ИЛИ РольДоступна("Бухгалтер") ИЛИ РольДоступна("ПолныеПраваВОбласти"),Истина, Ложь); 
		//Элементы.СтатьяДДСБух.Доступность = ?(РольДоступна("ПолныеПрава") ИЛИ РольДоступна("Бухгалтер"),Истина, Ложь); 
		Элементы.ВидОперации.Доступность = ?(РольДоступна("ПолныеПрава") ИЛИ РольДоступна("Бухгалтер") ИЛИ РольДоступна("ПолныеПраваВОбласти"),Истина, Ложь); 
		Элементы.Контрагент.Доступность = ?(РольДоступна("ПолныеПрава") ИЛИ РольДоступна("Бухгалтер") ИЛИ РольДоступна("ПолныеПраваВОбласти"),Истина, Ложь); 
		Элементы.Организация.Доступность = ?(РольДоступна("ПолныеПрава") ИЛИ РольДоступна("Бухгалтер") ИЛИ РольДоступна("ПолныеПраваВОбласти"),Истина, Ложь); 
		Элементы.Подразделение.Доступность = ?(РольДоступна("ПолныеПрава") ИЛИ РольДоступна("Бухгалтер") ИЛИ РольДоступна("ПолныеПраваВОбласти"),Истина, Ложь); 
		Элементы.Отдел.Доступность = ?(РольДоступна("ПолныеПрава") ИЛИ РольДоступна("Бухгалтер") ИЛИ РольДоступна("РаботатьСОптовымиПокупателями"),Истина, Ложь); 
		Элементы.ЦФУ.Доступность   = ?(РольДоступна("ПолныеПрава") ИЛИ РольДоступна("Бухгалтер") ИЛИ РольДоступна("ПолныеПраваВОбласти") ,Истина, Ложь);
		Элементы.Касса.Доступность = ?(РольДоступна("ПолныеПрава") ИЛИ РольДоступна("Бухгалтер") ИЛИ РольДоступна("ПолныеПраваВОбласти"),Истина, Ложь); 
		Элементы.ОбщиеРеквизиты.Доступность = ?(РольДоступна("ПолныеПрава") ИЛИ РольДоступна("Бухгалтер") ИЛИ РольДоступна("ПолныеПраваВОбласти"),Истина, Ложь);
	КонецЕсли;
	
	Элементы.РасшифровкаСуммы.ТолькоПросмотр = ?(РольДоступна("ПолныеПрава") ИЛИ РольДоступна("Бухгалтер") ИЛИ РольДоступна("ПолныеПраваВОбласти"),Ложь, Истина);
	
КонецПроцедуры


&НаКлиенте
Процедура КассаПриИзменении(Элемент)
	КассаПриИзмененииНаСервере();
КонецПроцедуры


&НаСервере
Процедура КассаПриИзмененииНаСервере()
	
	Если Объект.Касса.Организация <> Объект.Организация Тогда 
		
		Объект.Организация = Объект.Касса.Организация;
		ОрганизацияПриИзмененииНаСервере();
		
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	//ЗаполнитьСтатьиДДС();
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьСтатьиДДС()
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя ТОГДА
		Объект.СтатьяДДС = КэшируемыеФункции.ПолучитьСтатьюОплатаПокупателя();
	ИначеЕсли
		Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПоставщика ТОГДА
		Объект.СтатьяДДС = КэшируемыеФункции.ПолучитьСтатьюВозвратПоставщика();
	КонецЕсли;
	
	СтатьяДДСПриИзмененииНаСервере(Объект.СтатьяДДС, Объект.СтатьяДДСБух);

КонецПроцедуры

#Область СтатьяДДС

&НаКлиенте
Процедура СтатьяДДСПриИзменении(Элемент)
	
	СтатьяДДСПриИзмененииНаСервере(Объект.СтатьяДДС, Объект.СтатьяДДСБух);
	
КонецПроцедуры

&НаСервере
Процедура СтатьяДДСПриИзмененииНаСервере(Ст1, Ст2)
	
	ФункцииФормДокументов.ПриИзмененииСтатьиДДС(Ст1, Ст2);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДДСБухПриИзменении(Элемент)
	
	//СтатьяДДСПриИзмененииНаСервере(Объект.СтатьяДДСБух, Объект.СтатьяДДС);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ЗапретРедактирования.УстановитьРежимТолькоПросмотрПоДатеЗапрета(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти


#Область ККТ
&НаКлиенте
Процедура ККТПровести(Команда)
	Если Модифицированность Тогда
		ПоказатьПредупреждение(,"Перед пробитием по ККТ необходимо записать документ!");
		Возврат;
	КонецЕсли;
	
	ИнкассациюНаФискальномУстройстве();
КонецПроцедуры

&НаКлиенте
Процедура ИнкассациюНаФискальномУстройстве()
	Если НЕ ОбщегоНазначения.НужноПробитиеПоКассе(Объект.Касса) Тогда
		//ПоказатьПредупреждение(,"Не установлен признак необходимости проведения по кассе");
		Возврат;
	КонецЕсли;
	Если Объект.ПроведеноПоККТ Тогда
		ПоказатьПредупреждение(,"Документ уже был проведен по кассе");
		Возврат;
	КонецЕсли;
	Если НЕ Объект.Проведен Тогда
		ПоказатьПредупреждение(,"Для проведения документа по кассе он должен быть проведён в системе");
		Возврат;
	КонецЕсли;
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ПрочийПриход") ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ВозвратОтПоставщика") Тогда
		//Если НЕ ОбщегоНазначения.НужнаИнкассация(Объект.Касса) Тогда
		//	Возврат;
		//КонецЕсли;
		
		ЭтаФорма.Доступность = Ложь; //При необходимости можно заблокировать интерфейс пользователя.
		
		ТипИнкассации = 1; //  Тип операции (0 - Выемка / 1 - Внесение)
		СуммаОперации = Объект.Сумма; // Сумма внесения/выемки
		ПараметрыОперации = Новый Структура("ТипИнкассации, Сумма", ТипИнкассации, СуммаОперации);
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("ИнкассациюНаФискальномУстройствеЗавершение", ЭтотОбъект);
		МенеджерОборудованияКлиент.НачатьИнкассациюНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, ПараметрыОперации);
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ОплатаПокупателя") Тогда
		ПробитьЧекПоКассе(Истина);
	Иначе
		ПоказатьПредупреждение(,"Неизвестный вид РКО! Движения по кассе невозможны!");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИнкассациюНаФискальномУстройствеЗавершение(РезультатВыполнения, Параметры) Экспорт

	ЭтаФорма.Доступность = Истина; //При необходимости разблокируем интерфейс пользователя.

	Если НЕ РезультатВыполнения.Результат Тогда
		ПоказатьПредупреждение(,"Внимание! Не удалось провести документ по ККТ! Для проведения - откройте документ и нажмите кнопку ""ККТ Провести"""+Символы.ПС+Символы.ПС+"Техническая информация: "+РезультатВыполнения.ОписаниеОшибки);
		//ТекстСообщения = НСтр("ru = 'При выполнении операции произошла ошибка:""%ОписаниеОшибки%"".'");
		//ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		//Сообщить(ТекстСообщения);
	Иначе
		ОбщегоНазначения.УстановитьРеквизитПроведеноПоККТ(Объект.Ссылка);
		УстановитьВидимостьККТ();
		СобытияСистемы.ОповеститьОПробитииЧека(Объект.Ссылка);
		Если ЭтаФорма.Открыта() Тогда
			Закрыть();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекПоКассе(ЗакрытьФорму)
	Ошибка = "";
	ОбщиеПараметры = ПолучитьШаблонЧека(Ошибка);
	Если ОбщиеПараметры = Неопределено Тогда
		ПоказатьПредупреждение(,"Невозможно напечатать чек! Возникла ошибка: "+Ошибка);
		Возврат;
	КонецЕсли;
	ЭтаФорма.Доступность = Ложь; //При необходимости можно заблокировать интерфейс пользователя.
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ПечатьЧекаЗавершение", ЭтотОбъект, ЗакрытьФорму);
	МенеджерОборудованияКлиент.НачатьФискализациюЧекаНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, ОбщиеПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЧекаЗавершение(РезультатВыполнения, Параметры) Экспорт
 
	ЭтаФорма.Доступность = Истина; //При необходимости разблокируем интерфейс пользователя.

	Если НЕ РезультатВыполнения.Результат Тогда
		ПоказатьПредупреждение(,"Не удалось пробить чек! Устраните проблему и нажмите кнопку ""ККТ Пробить"", находящуюся наверху."+Символы.ПС+Символы.ПС+"Техническая информация: "+РезультатВыполнения.ОписаниеОшибки);
	Иначе
		ОбщегоНазначения.УстановитьРеквизитПроведеноПоККТ(Объект.Ссылка);
		УстановитьВидимостьККТ();
		СобытияСистемы.ОповеститьОПробитииЧека(Объект.Ссылка);
		Если ЭтаФорма.Открыта() Тогда
			Если Параметры = Истина Тогда
				Закрыть();
			Иначе
				Прочитать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьШаблонЧека(Ошибка)
	//Товары = ПолучитьНоменклатуруПоЗаказам();
	
	
	// Общие параметры чека
	ОбщиеПараметры = МенеджерОборудованияКлиентСервер.ПараметрыОперацииФискализацииЧека();

	// Параметры установлены по умолчанию.
	ОбщиеПараметры.ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств"); // Перечисление "ТипыРасчетаДенежнымиСредствами"
	ОбщиеПараметры.Электронно = Ложь; // Если Электронно = Истина, то чек будет предоставлен в элетронной форме, без печати.
	ОбщиеПараметры.Отправляет1СSMS   = Ложь; // SMS отправляет средствами 1C.
	ОбщиеПараметры.Отправляет1СEmail = Ложь; // Email отправляет средствами 1C.
	ОбщиеПараметры.ПокупательEmail = Неопределено;
	ОбщиеПараметры.ПокупательНомер = Неопределено;

	// Параметры необходимые для чека ЕНВД на принтере чеков
	ОбщиеПараметры.Кассир = Строка(Объект.Ответственный);
	//ОбщиеПараметры.ОрганизацияНазвание = "ООО ""1C-СОФТ""";
	//ОбщиеПараметры.ОрганизацияИНН = "7709860400";
	//ОбщиеПараметры.ОрганизацияКПП = "770901001";
	//ОбщиеПараметры.НомерКассы = "00001";
	//ОбщиеПараметры.НомерЧека = "1";
	//ОбщиеПараметры.НомерСмены = "1";
	КодСистемы = ОбщегоНазначения.ПолучитьКодСистемыНалогообложения(Объект.Касса,Ошибка);
	Если КодСистемы = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	ОбщиеПараметры.КодСистемыНалогообложения = КодСистемы;

	Если Объект.РасшифровкаСуммы.Количество() = 0 Тогда
		Ошибка = "Нет расшифровки суммы";
		Возврат Неопределено;
	КонецЕсли;
	
	СуммаПоДокументам = ОбщегоНазначения.ККТЗаполнитьНоменклатуру(Объект.Ссылка,ОбщиеПараметры,Ошибка);
	Если ЗначениеЗаполнено(Ошибка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если СуммаПоДокументам<>Объект.Сумма Тогда
		Ошибка = "Сумма по оплате не соответствует сумме по реализациям или реализации не заполнены. Невозможно разнести суммы в чеке.";
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокаОплаты = Новый Структура();
	СтрокаОплаты.Вставить("Сумма", Объект.Сумма);
	СтрокаОплаты.Вставить("Наименование", "Наличная оплата");
	СтрокаОплаты.Вставить("ТипОплаты", 0); 
	ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);

	Возврат ОбщиеПараметры;

КонецФункции

&НаСервере
Процедура УстановитьВидимостьККТ()
	Если Не Объект.Ссылка.Пустая() И Объект.Касса.ПродажаПоККТ И НЕ Объект.ПроведеноПоККТ Тогда
		Элементы.ФормаККТПровести.Видимость = Истина;
	Иначе
		Элементы.ФормаККТПровести.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
