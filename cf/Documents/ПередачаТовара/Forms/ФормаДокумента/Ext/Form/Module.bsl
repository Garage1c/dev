&НаКлиенте
Перем СтруктураКолонокТовары Экспорт;

// ИНФОРМАЦИЯ

&НаКлиенте
Процедура ОбщиеРеквизиты(Команда)
	
	ФункцииФормДокументов.ОткрытьОбщиеРеквизиты(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСуммыТабличныхЧастей(СтруктураКолонокТовары) Экспорт
	
	ФункцииФормДокументов.ПересчитатьСуммыТабличныхЧастей(Объект.Товары, СтруктураКолонокТовары);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеВидимостьюДоступностью()
	Элементы.НеСписыватьЛимит.Видимость = РольДоступна("ПолныеПрава");	
КонецПроцедуры


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ПроведенияДокументов.РазрешеноПерепроводитьДокумент(Объект.Ссылка) Тогда
		Сообщить("Данный заказ закрыт. Редактирование документа запрещено.");
		ТолькоПросмотр = Истина;
	КонецЕсли;	
	
	Если Объект.Ссылка.Пустая() И НЕ ЗначениеЗаполнено(Параметры.Основание) Тогда
		ФункцииФормДокументов.ЗаполнитьЗначенияПоУмолчанию(Объект, ФункцииФормДокументов.ПолучитьРеквизитыДокумента(Документы.ПередачаТовара.ПустаяСсылка()));
	КонецЕсли;
	// информация о товаре
		
	РаботаСНоменклатурой.ДобавитьОперативнуюИнформациюОТоваре(ЭтаФорма);
	УправлениеВидимостьюДоступностью();
	
	ФункцииФормДокументовСервер.УстановитьСвязиГрузополучателя(Объект,Элементы,Новый Структура("Грузополучатель","Объект.Контрагент"));
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	СтруктураКолонокТовары = ФункцииФормДокументов.ПолучитьСтруктуруКолонокТовары(Элементы.Товары, Объект.СуммаВключаетНДС,Объект.ТипЦен,,,Объект.Валюта, Объект.УчитыватьНДС,,,, Объект.УчитыватьНДС,,);
	//ФункцииФормДокументов.УстановитьДоступностьКолонокТоваров(Элементы.Товары, СтруктураКолонокТовары);
	ФункцииФормДокументов.ОбновитьПодвал(Объект, Элементы, Объект.Товары.Итог("Сумма"), СтруктураКолонокТовары);
	
	Список 		= ПолучитьСписокОтветственных();
	Элементы.ОтветственноеЛицо.СписокВыбора.ЗагрузитьЗначения(Список);
	
	Список = ПолучитьСписокМВЗ(Объект.ОтветственноеЛицо);
	Элементы.МВЗ.СписокВыбора.ЗагрузитьЗначения(Список);

	
КонецПроцедуры

// ОБРАБОТКИ ТАБЛИЧНОЙ ЧАСТИ
////
&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент, КонкретнаяСтрока = Неопределено)

	ФункцииФормДокументов.НоменклатураПриИзменении(
				Элементы.Товары, 
				СтруктураКолонокТовары,
				КонкретнаяСтрока);

КонецПроцедуры

&НаКлиенте
Процедура КоличествоПриИзменении(Элемент, КонкретнаяСтрока = Неопределено)
	
	ФункцииФормДокументов.КоличествоПриИзменении(Элементы.Товары, СтруктураКолонокТовары, КонкретнаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаПриИзменении(Элемент)
	
	ФункцииФормДокументов.ЦенаПриИзменении(Элементы.Товары, СтруктураКолонокТовары);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаПриИзменении(Элемент)
	
	ФункцииФормДокументов.СуммаПриИзменении(Элементы.Товары, СтруктураКолонокТовары);
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент)
	
	ФункцииФормДокументов.СтавкаНДСПриИзменении(Элементы.Товары, СтруктураКолонокТовары);
	
КонецПроцедуры

&НаКлиенте
Процедура УпаковкаПриИзменении(Элемент)
	ФункцииФормДокументов.УпаковкаПриИзменении(
			Элементы.Товары, 
			СтруктураКолонокТовары);
КонецПроцедуры

&НаКлиенте
Процедура СуммаНДСПриИзменении(Элемент)
	
	ФункцииФормДокументов.СуммаНДСПриИзменении(Элементы.Товары, СтруктураКолонокТовары);
	
КонецПроцедуры


///
// ПОДБОР

&НаСервере
Функция ПоместитьТоварыВХранилище() 
	
	Возврат ПоместитьВоВременноеХранилище(
					Объект.Товары.Выгрузить(), 
					УникальныйИдентификатор);
КонецФункции

&НаКлиенте
Процедура ПодборВыполнить()
	
	ИмяТабличнойЧасти = "Товары";
	
	АдресТоваровВХранилище = ПоместитьТоварыВХранилище();
	ПараметрыПодбора = Новый Структура("АдресТоваровВХранилище", АдресТоваровВХранилище);
	
	ПараметрыПодбора.Вставить("СтруктураКолонокТовары", СтруктураКолонокТовары);
	ПараметрыПодбора.Вставить("ВидЗапроса", 			"ОстаткиНоменклатуры");
	ПараметрыПодбора.Вставить("ВидыЗапросов", 			"СписокНоменклатуры");
	ПараметрыПодбора.Вставить("Склад", 					Объект.Склад);
	ПараметрыПодбора.Вставить("ТипЦен", 				Объект.ТипЦен);
	ПараметрыПодбора.Вставить("Валюта", 				Объект.Валюта);
	ПараметрыПодбора.Вставить("ЦенаВключаетНДС", 		Объект.СуммаВключаетНДС);
	
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаПодбора", ПараметрыПодбора, Элементы.Товары,,,,,);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьТоварыИзХранилища(АдресТоваровВХранилище)
	
	Объект.Товары.Загрузить(ПолучитьИзВременногоХранилища(АдресТоваровВХранилище));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение <> Неопределено Тогда		
		
		ПолучитьТоварыИзХранилища(ВыбранноеЗначение);		// получаем
		УдалитьИзВременногоХранилища(ВыбранноеЗначение); 	// заметаем следы
		Модифицированность = Истина;
		УправлениеВидимостьюДоступностью();
		
	КонецЕсли;
	
КонецПроцедуры


// ТАБЛИЧНАЯ ЧАСТЬ

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	ФункцииФормДокументов.ОбновитьПодвал(Объект, Элементы, Объект.Товары.Итог("Сумма"), СтруктураКолонокТовары);
	
КонецПроцедуры

&НаСервере
Функция ПреобразоватьМассивШтрихКодовВНоменклатуру(МассивДанных)
	
	Возврат ФункцииФормДокументов.ПреобразоватьМассивШтрихКодовВНоменклатуру(МассивДанных);
	
КонецФункции

&НаКлиенте
Функция ПолученыШтрихКоды(МассивДанных) Экспорт

	МассивНоменклатуры = ПреобразоватьМассивШтрихКодовВНоменклатуру(МассивДанных);
	
	Для Каждого Структура Из МассивНоменклатуры Цикл
		
		//ТоварыОбработкаВыбора(Элементы.Товары, Структура, Ложь);
		
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСтавкуНДС(Команда)
	
	ДиалогиСПользователем.ЗаполнитьСтавкуНДС(Объект.Товары, СтруктураКолонокТовары);

КонецПроцедуры

// ИЗМЕНЕНИЕ РЕКВИЗИТОВ

&НаСервере
Процедура ПриИзмененииРеквизитаВлияющегоНаТабличнуюЧасть(СтруктураКолонокТовары, ПересчитыватьЦену = Истина)
	
	ФункцииФормДокументов.ПересчитатьСуммыТабличныхЧастей(Объект.Товары, СтруктураКолонокТовары);
	
КонецПроцедуры 
 


&НаСервере
Процедура КонтрагентПриИзмененииНаСервере(СтруктураКолонокТовары)
	
	СтруктураРеквизитов = ФункцииФормДокументов.КонтрагентПриИзменении(Объект, Ложь);
	
	ФункцииФормДокументов.ОбновитьСтруктуруКолонокТоварыПоСтруктуре( 
			СтруктураКолонокТовары, 
			СтруктураРеквизитов);
	
	Если Объект.Товары.Количество() Тогда
		// пересчитаем товары
    	ПриИзмененииРеквизитаВлияющегоНаТабличнуюЧасть(СтруктураКолонокТовары, Ложь); 
	КонецЕсли;
		
	ДолгПарнера = ДенежныеСредства.ПолучитьДолгКонтрагента(Объект.Контрагент);

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииНаСервере(СтруктураКолонокТовары);
	
	СохранитьТекущиеЗначенияПараметров();
	//Элементы.Купоны.Доступность = ПродажаФизЛицу();
	
	СтруктураКолонокТовары = ФункцииФормДокументов.ПолучитьСтруктуруКолонокТовары(Элементы.Товары, Объект.СуммаВключаетНДС, Объект.ТипЦен, ,, Объект.Валюта, Объект.УчитыватьНДС, ,);
	
	Объект.Грузополучатель = ФункцииФормДокументовСервер.ГрузополучательПриИзмененииРеквизита(Объект.Контрагент);
КонецПроцедуры


&НаСервере
Функция КонтрагентФизЛицо()
	
	Возврат Объект.Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо
	
КонецФункции

&НаКлиенте
Процедура СохранитьТекущиеЗначенияПараметров()
	
	// сохраняем текущие значения параметров
	
	СтруктураКолонокТовары.стУчитыватьНДС = Объект.УчитыватьНДС;
	СтруктураКолонокТовары.стСуммаВключаетНДС = СтруктураКолонокТовары.СуммаВключаетНДС;
	СтруктураКолонокТовары.стВалюта = СтруктураКолонокТовары.Валюта;
		
КонецПроцедуры



&НаСервере 
Функция ПолучитьПользовательскиеНастройкиОтчета(ПользовательскиеНастроки, НастройкиОтбора) 
	
	Отчет = Отчеты.ВзаиморасчетыСПартнером.Создать();
	ПользовательскиеНастроки = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки; 
	НастройкиОтбора = Отчет.КомпоновщикНастроек.Настройки.Отбор;
	
КонецФункции 

&НаСервереБезКонтекста 
Процедура УстановитьЗначениеПользовательскойНастройки(Настройки, НастройкиОтбора, Имя, Значение, Использование = Истина)
	
	Для Каждого Элемент ИЗ НастройкиОтбора.Элементы Цикл
			
		Если	Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Имя) Тогда
				настройкаИД = Элемент.ИдентификаторПользовательскойНастройки;
		КонецЕсли;
	КонецЦикла;
		
	Для Каждого Элемент Из Настройки.Элементы Цикл
		Если ТипЗнч(Элемент) = Тип("ЭлементОтбораКомпоновкиДанных") И Элемент.ИдентификаторПользовательскойНастройки = настройкаИД Тогда
			
				Элемент.ПравоеЗначение 	= Значение;
				Элемент.Использование 	= Использование;
		КонецЕсли
	КонецЦикла;

КонецПроцедуры 



&НаКлиенте
Процедура ТипЦенПриИзменении(Элемент)
	
	СтруктураКолонокТовары.Вставить("ТипЦен", Объект.ТипЦен);
	
	Если ФункцииФормДокументов.ДиалогПриИзмененииТипаЦен(Объект.Товары.Количество(), СтруктураКолонокТовары, Объект.ТипЦен) Тогда
		
		ПриИзмененииРеквизитаВлияющегоНаТабличнуюЧасть(СтруктураКолонокТовары);
		
	КонецЕсли;
	
	СтруктураКолонокТовары.Вставить("стТипЦен", Объект.ТипЦен);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Получение штрих кода от сканера штрих кода
	
	Если ИмяСобытия = "ПолученШтрихкод" Тогда
		ВнешнееОборудование.ОбработатьДобавлениеШтрихКодаВДокумент(Параметр, Объект.Товары, Элементы.Товары, СтруктураКолонокТовары); КонецЕсли;
	
КонецПроцедуры

// КОРЗИНА
#Если Не ВебКлиент Тогда
&НаСервере
Процедура ДобавитьИзКорзиныНаСервере(ИмяКомпа, СтруктураКолонокТовары, КолСтрок)
	
	МодульКорзины.ПолучитьТоварИзКорзины(Элементы.Товары, Объект.Товары, СтруктураКолонокТовары, ИмяКомпа, КолСтрок);
	
КонецПроцедуры
#КонецЕсли

#Если Не ВебКлиент Тогда
&НаКлиенте
Процедура ВставитьИзКорзины(Команда)
	
	КолСтрок = 0;
	ДобавитьИзКорзиныНаСервере(ИмяКомпьютера(), СтруктураКолонокТовары, КолСтрок);
	
	Если КолСтрок Тогда
		
		МодульКорзины.ОповеститьОВставкеТовараВДокумент(КолСтрок, Объект.Товары.Количество());
		
	Иначе
		
		МодульКорзины.ОповеститьЧтоНечегоДобавлять();
		
	КонецЕсли;
	

КонецПроцедуры
#КонецЕсли

#Если Не ВебКлиент Тогда
&НаСервере
Функция ПоложитьВКорзинуНаСервере(ВыделенныеИндексы, ИмяКомпа, КолВКорзине)
	
	Возврат МодульКорзины.ПоложитьТоварВКорзину(Объект.Товары, ВыделенныеИндексы, ИмяКомпа, КолВКорзине);
	
КонецФункции
#КонецЕсли

#Если Не ВебКлиент Тогда
&НаКлиенте
Процедура ДобавитьВКорзину(Команда)
	
	ВыделенныеИндексы 	= МодульКорзины.ПолучитьВыделенныеСтрокиТоваров(Элементы.Товары, Объект.Товары);
	КолВКорзине 		= 0;
	КолТовара			= ВыделенныеИндексы.Количество();
	
	
	Если КолТовара Тогда
		
		Если ПоложитьВКорзинуНаСервере(ВыделенныеИндексы, ИмяКомпьютера(), КолВКорзине) Тогда
			МодульКорзины.ОповеститьОПомещенииТовара(КолТовара, КолВКорзине);
		КонецЕсли;
		
	Иначе
		
		МодульКорзины.ОповеститьЧтоНечегоДобавлять();
				
	КонецЕсли;

КонецПроцедуры
#КонецЕсли

#Если Не ВебКлиент Тогда
&НаКлиенте
Процедура РедактироватьТоварВКорзине(Команда)
	
	ОткрытьФорму("РегистрСведений.Корзина.Форма.Форма");
	
КонецПроцедуры
#КонецЕсли

#Если Не ВебКлиент Тогда
&НаСервере
Функция ОчиститьНаСервере(ИмяКомпа)
	
	Возврат МодульКорзины.ОчиститьКорзину(ИмяКомпа);
	
КонецФункции
#КонецЕсли

#Если Не ВебКлиент Тогда
&НаКлиенте
Процедура ОчиститьКорзину(Команда)
	
	Если ОчиститьНаСервере(ИмяКомпьютера()) Тогда
		
		МодульКорзины.ОповеститьЧтоКорзинаОчищена();
		
	КонецЕсли;

КонецПроцедуры
#КонецЕсли

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	// информация о товаре
	ОбработатьОтображениеИнформацииОТоваре()	
	 	

КонецПроцедуры

#Область ОперативнаяИнформацияОТоваре
&НаСервере
Процедура ОбработатьОтображениеИнформацииОТоваре() Экспорт 
	РаботаСНоменклатурой.ОбработатьОтображениеИнформацииОТоваре(ЭтаФорма, "Товары", "Объект.Товары");
КонецПроцедуры

&НаКлиенте
Процедура ИнфТовараТекстHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	РаботаСНоменклатуройКлиент.ИнфТовараТекстHTMLПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры
&НаКлиенте
Процедура ИнфТовараЗаголовокHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	РаботаСНоменклатуройКлиент.ИнфТовараЗаголовокHTMLПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка, "Товары", "Объект.Товары");
КонецПроцедуры

 &НаКлиенте
Процедура ПоказатьСкрытьИнфОТоваре(Команда)
	РаботаСНоменклатуройКлиент.ПоказатьСкрытьИнфОТоваре(ЭтаФорма);
КонецПроцедуры
&НаКлиенте
Процедура НастройкаИнфОТоваре(Команда) 
	РаботаСНоменклатуройКлиент.НастройкаИнфОТоваре(ЭтаФорма, "Товары", "Объект.Товары");
КонецПроцедуры
#КонецОбласти

&НаСервере
Функция ПолучитьСписокОтветственных()
	
	Возврат	Справочники.МВЗ.ПолучитьСписокОтветственных(Объект.МВЗ);
	
КонецФункции


// СОГЛАСОВАНИЕ АССОРТИМЕНТА

&НаСервере
Процедура ПроверитьНаСоответствиеАссортиментуНаСервере(ВыбКонтр)
	
	Таблица = Заказы.ПроверитьНаСоответствиеАссортимента(Объект.Товары.Выгрузить(), ВыбКонтр);
	Если Таблица.Найти(Истина, "ТоварНеСогласован") <> Неопределено Тогда
		Объект.Товары.Загрузить(Таблица); КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаСоответствиеАссортименту(Команда)
	
	ПроверитьНаСоответствиеАссортиментуНаСервере(Объект.Контрагент);
	
КонецПроцедуры


&НаКлиенте
Процедура ИнициаторЗаказаПриИзменении(Элемент)
	
	//Список 		= ПолучитьСписокОтветственных();
	//Элементы.Ответственный.СписокВыбора.ЗагрузитьЗначения(Список);
	//
	//Если ВЫбЭлемент <> Неопределено Тогда
	//	
	//	Объект.Инициатор = ВЫбЭлемент.Значение;
	//	//ВыбратьЭлементДляВсех("Справочник.ФизическиеЛица.ФормаВыбора", "Сборщик");
	//	//УстановитьЗначениеДляВсех(ВыбЭлемент.Значение, "Сборщик", Истина);
	//	
	//КонецЕсли;
	Список 		= ПолучитьСписокОтветственных();
	Элементы.ОтветственноеЛицо.СписокВыбора.ЗагрузитьЗначения(Список);

КонецПроцедуры


&НаКлиенте
Процедура ОтветственныйНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
//	СтандартнаяОбработка = Ложь;

КонецПроцедуры

&НаСервере
Функция ОтветственноеЛицоПриИзмененииНаСервере(СтруктураКолонокТовары)
	
	Объект.Контрагент = Объект.ОтветственноеЛицо.Контрагент;
	Если Объект.Контрагент.Пустая() Тогда
		Объект.Контрагент = Объект.Склад.Контрагент; КонецЕсли;
	
	КонтрагентПриИзмененииНаСервере(СтруктураКолонокТовары);	
	
КонецФункции


&НаКлиенте
Процедура ОтветственноеЛицоПриИзменении(Элемент)
		
	ОтветственноеЛицоПриИзмененииНаСервере(СтруктураКолонокТовары);
	СохранитьТекущиеЗначенияПараметров();
	
	Список = ПолучитьСписокМВЗ(Объект.ОтветственноеЛицо);
	Элементы.МВЗ.СписокВыбора.ЗагрузитьЗначения(Список);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокМВЗ(Инициатор)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ МВЗ Из РегистрСведений.ОтветственныеЛица ГДЕ ОтветственноеЛицо = &Инициатор Упорядочить по МВЗ.Наименование");
	Запрос.УстановитьПараметр("Инициатор", Инициатор);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("МВЗ");
	
КонецФункции


&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	Если Объект.МВЗ.Пустая() Тогда
		
	 	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Поле ""МВЗ"" не заполнено.'"),
					Объект,
					"Объект.МВЗ");

		Отказ = Истина;
		
		
	КонецЕсли;
КонецПроцедуры

