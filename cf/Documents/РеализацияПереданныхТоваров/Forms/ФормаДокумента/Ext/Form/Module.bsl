&НаКлиенте
Перем СтруктураКолонокТовары Экспорт;

&НаКлиенте
Процедура ОбщиеРеквизиты(Команда)
	
	ФункцииФормДокументов.ОткрытьОбщиеРеквизиты(ЭтаФорма);
	
КонецПроцедуры
Процедура ОбработкаПолученияДанныхИзФормы(Результат, Параметры)  Экспорт
	;
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСуммыТабличныхЧастей(СтруктураКолонокТовары) Экспорт
	
	ФункцииФормДокументов.ПересчитатьСуммыТабличныхЧастей(Объект.Товары, СтруктураКолонокТовары);
	
КонецПроцедуры

&НаСервере
Функция РазрешенаЗапись()
	
	//Возврат ФункцииБизнесПроцессов.СтоитНаТочкеМаршрута(БизнесПроцесс, БизнесПроцессы.СборкаЗаказа.ТочкиМаршрута.СобратьЗаказ) ИЛИ РольДоступна("ПолныеПрава") ИЛИ РольДоступна("ЧастичныеПрава")
	Возврат Истина;		
КонецФункции
&НаСервере
Функция РазрешеноПроведение()
	
	//Возврат ФункцииБизнесПроцессов.СтоитНаТочкеМаршрута(БизнесПроцесс, БизнесПроцессы.СборкаЗаказа.ТочкиМаршрута.ОтгрузитьЗаказ) ИЛИ РольДоступна("ПолныеПрава") Или РольДоступна("ЧастичныеПрава")
	Возврат истина;
КонецФункции

&НаКлиенте
Процедура УправлениеВидимостьюДоступностью() Экспорт
	
	//Элементы.ПерейтиНаБизнесПроцесс.Доступность = Не БизнесПроцесс.Пустая();
	
	Если Не БизнесПроцесс.Пустая() Тогда
		
		РазрешенаЗапись 	= РазрешенаЗапись();
		РазрешеноПроведение = РазрешеноПроведение();
		
		// Установим доступность кнопок
		
		Если Элементы.Найти("КнопкаПровестиИЗакрыть") <> Неопределено Тогда
			Элементы.КнопкаПровестиИЗакрыть.Доступность = РазрешеноПроведение;
		КонецЕсли;
		Если Элементы.Найти("КнопкаПровести") <> Неопределено Тогда
			Элементы.КнопкаПровести.Доступность = РазрешеноПроведение;
		КонецЕсли;
		Элементы.КнопкаЗаписать.Доступность 		= РазрешенаЗапись;
		Элементы.КнопкаЗаписатьИЗакрыть.Доступность	= РазрешенаЗапись;
		Элементы.ИзменитьРеквизиты.Доступность		= РазрешенаЗапись;
	КонецЕсли;
	
	Элементы.ИзменитьРеквизиты.Доступность		= НЕ Объект.Ссылка.Пустая();
	ВидимостьЯчееек();
	
	// информация о товаре                
	ОбработатьОтображениеИнформацииОТоваре();
	
КонецПроцедуры

&НаСервере
Функция ОтображатьЯчейки()
	
	Возврат Истина;
	
	//Возврат Объект.Склад.Ячеестый И
	//		Документы.РеализацияПереданныхТоваров.БизнесПроцесс(Объект.Ссылка).Пустая();
	
КонецФункции
&НаКлиенте
Процедура ВидимостьЯчееек()
	
//	СкладЯчеестый = ОтображатьЯчейки();
//	Элементы.ТоварыЯчейка.Видимость 			= СкладЯчеестый;
//	Элементы.ТоварыЗаполнитьЯчейки.Видимость 	= СкладЯчеестый;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокОтветственных()
	
	Возврат	Справочники.МВЗ.ПолучитьСписокОтветственных(Объект.МВЗ);
	
КонецФункции
&НаСервереБезКонтекста
Функция ПолучитьСписокМВЗ(Инициатор)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ МВЗ Из РегистрСведений.ОтветственныеЛица ГДЕ ОтветственноеЛицо = &Инициатор Упорядочить по МВЗ.Наименование");
	Запрос.УстановитьПараметр("Инициатор", Инициатор);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("МВЗ");
	
КонецФункции


// ВНЕШНИЕ ФУНКЦИИ


// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		Период.ДатаНачала = Объект.НачалоПериода;
		Период.ДатаОкончания = Объект.КонецПериода;
	КонецЕсли;

	// Значения по умолчанию
	
	Если Объект.Ссылка.Пустая() Тогда
		
		ФункцииФормДокументов.ЗаполнитьЗначенияПоУмолчанию(Объект, ФункцииФормДокументов.ПолучитьРеквизитыДокумента(Документы.РеализацияПереданныхТоваров.ПустаяСсылка()));
		
	Иначе   
		
		// Прикрепим счет-фактуру
		
		Запрос = Новый Запрос("ВЫБРАТЬ Номер, Дата ИЗ РегистрСведений.СчетФактуры ГДЕ Основание = &Основание");
		Запрос.УстановитьПараметр("Основание", Объект.Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ОбновитьЗаголовокСчетФактуры(Выборка.Номер, Выборка.Дата);
		КонецЕсли;
	КонецЕсли;	
		
	// информация о товаре
	
	РаботаСНоменклатурой.ДобавитьОперативнуюИнформациюОТоваре(ЭтаФорма);
	
	// Рассчитаем динамические колонки
	
	ФункцииФормДокументов.РассчитатьДинамическиеКолонки(
					Объект.Товары,
					ФункцииФормДокументов.ПолучитьСтруктуруКолонокТовары(Элементы.Товары, Объект.СуммаВключаетНДС, Объект.ТипЦен, , , Объект.Валюта, Объект.УчитыватьНДС));
					
	ФункцииФормДокументовСервер.УстановитьСвязиГрузополучателя(Объект,Элементы,Новый Структура("Грузополучатель, БанковскийСчетГрузополучателя, Грузоотправитель, БанковскийСчетГрузоотправителя","Объект.Контрагент","Объект.Грузополучатель","Объект.Организация","Объект.Грузоотправитель"));
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// Прочитаем оплаты
	
	ДокументыОплаты.ЗагрузитьЗначения(ТекущийОбъект.ПлатежныеДокументы.Выгрузить().ВыгрузитьКолонку("ДокументОплаты"));
	
	ЗапретРедактирования.УстановитьРежимТолькоПросмотрПоДатеЗапрета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	 
	СтруктураКолонокТовары = ФункцииФормДокументов.ПолучитьСтруктуруКолонокТовары(Элементы.Товары, Объект.СуммаВключаетНДС, Объект.ТипЦен, , , Объект.Валюта, Объект.УчитыватьНДС, Объект.Валюта, Объект.СуммаВключаетНДС,,Объект.УчитыватьНДС,,Объект.Контрагент);
	
	// 	Обновим подвал
	
	ФункцииФормДокументов.ОбновитьПодвал(Объект, Элементы, Сумма, СтруктураКолонокТовары);
	
	УправлениеВидимостьюДоступностью();
	
КонецПроцедуры
&НаКлиенте
Процедура ПодборВыполнить()
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Перем РежимЗаписи;
	
	Если ПараметрыЗаписи.Свойство("РежимЗаписи", РежимЗаписи ) Тогда
		
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			
			Если Объект.Организация.Пустая() Тогда
				ОбщиеФункции.СообщитьТекст("Не заполнена организация!");
				Отказ = Истина;
			КонецЕсли;
			
				
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.НачалоПериода = Период.ДатаНачала;
	ТекущийОбъект.КонецПериода	= Период.ДатаОкончания;
	
	// Сохраним оплаты
	
	Если Не Отказ Тогда
		ТекущийОбъект.ПлатежныеДокументы.Очистить();
		КонвертацияТипов.ЗагрузитьСписокЗначенийВТаблицу(ТекущийОбъект.ПлатежныеДокументы, ДокументыОплаты, "ДокументОплаты"); 
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить(СобытияСистемы.Событие_ЗаписанаРеализация(),Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

#Область Обработка_табличной_части

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)

	ФункцииФормДокументов.НоменклатураПриИзменении(
				Элементы.Товары, 
				СтруктураКолонокТовары);

КонецПроцедуры
&НаКлиенте
Процедура КоличествоПриИзменении(Элемент)
	
	ФункцииФормДокументов.КоличествоПриИзменении(Элементы.Товары, СтруктураКолонокТовары);
	
КонецПроцедуры
&НаКлиенте
Процедура ЦенаПриИзменении(Элемент)
	
	ФункцииФормДокументов.ЦенаПриИзменении(Элементы.Товары, СтруктураКолонокТовары);
	
КонецПроцедуры
&НаКлиенте
Процедура СуммаПриИзменении(Элемент)
	
	ФункцииФормДокументов.СуммаПриИзменении(Элементы.Товары, СтруктураКолонокТовары);
	
КонецПроцедуры
&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент)
	
	ФункцииФормДокументов.СтавкаНДСПриИзменении(Элементы.Товары, СтруктураКолонокТовары);
	
КонецПроцедуры
&НаКлиенте
Процедура УпаковкаПриИзменении(Элемент)
	ФункцииФормДокументов.УпаковкаПриИзменении(
			Элементы.Товары, 
			СтруктураКолонокТовары);
КонецПроцедуры
&НаКлиенте
Процедура СуммаНДСПриИзменении(Элемент)
	
	ФункцииФормДокументов.СуммаНДСПриИзменении(Элементы.Товары, СтруктураКолонокТовары);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцентРучнойСкидкиПриИзменении(Элемент)
	
	ФункцииФормДокументов.ПроцентРучнойСкидкиПриИзменении(Элементы.Товары, СтруктураКолонокТовары);
	
КонецПроцедуры
&НаКлиенте
Процедура ПроцентАвтоматическойСкидкиПриИзменении(Элемент)
	ФункцииФормДокументов.ПроцентАвтоматическойСкидкиПриИзменении(Элементы.Товары, СтруктураКолонокТовары);
КонецПроцедуры

&НаКлиенте
Процедура СуммаРучнойСкидкиПриИзменении(Элемент)
	
	ФункцииФормДокументов.СуммаРучнойСкидкиПриИзменении(Элементы.Товары, СтруктураКолонокТовары);

КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Попытка
		Записать();
	Исключение
		Возврат;
	КонецПопытки;
	
	Закрыть();

КонецПроцедуры

//&НаКлиенте
//Процедура ПерейтиНаБизнесПроцесс(Команда)
//	
//	//Если Не БизнесПроцесс.Пустая() Тогда
//	//	
//	//	ОткрытьФорму("БизнесПроцесс.СборкаЗаказа.ФормаОбъекта", Новый Структура("Ключ", БизнесПроцесс));
//	//	
//	//КонецЕсли;

//КонецПроцедуры

// ШАПКА

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	ВидимостьЯчееек();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственноеЛицоПриИзменении(Элемент)
	
	Список = ПолучитьСписокМВЗ(Объект.ОтветственноеЛицо);
	Элементы.МВЗ.СписокВыбора.ЗагрузитьЗначения(Список);
	
КонецПроцедуры

&НаКлиенте
Процедура МВЗПриИзменении(Элемент)
	
	Список 		= ПолучитьСписокОтветственных();
	Элементы.ОтветственноеЛицо.СписокВыбора.ЗагрузитьЗначения(Список);
	
КонецПроцедуры

// ЯЧЕЙКИ

&НаСервере
Процедура ЗаполнитьЯчейкиНаСервере()
	
	ФункцииФормДокументов.ЗаполнитьЯчейки(Объект.Товары,,,,"Размещение");
	
КонецПроцедуры
&НаКлиенте
Процедура ЗаполнитьЯчейки(Команда)
	
	ЗаполнитьЯчейкиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДисконтнаяКартаПриИзменении(Элемент)
	
	ДисконтнаяКартаПриИзмененииНаСервере(СтруктураКолонокТовары);
	         
КонецПроцедуры

&НаСервере
Процедура ДисконтнаяКартаПриИзмененииНаСервере(СтруктураКолонокТовары = Неопределено)
	
	Если СтруктураКолонокТовары <> Неопределено Тогда
		СтруктураКолонокТовары.ДисконтнаяКарта = Объект.ДисконтнаяКарта;
	КонецЕсли;
	
	Для Каждого Строка Из Объект.Товары Цикл
				
		Строка.ПроцентАвтоматическойСкидки = РаботаСНоменклатурой.ПолучитьПроцентАвтоматическойСкидки(Строка.Номенклатура, Объект.Контрагент, Объект.ДисконтнаяКарта, Строка.Акция);
		ФункцииФормДокументов.ПроцентАвтоматическойСкидкиПриИзменении(Элементы.Товары, СтруктураКолонокТовары, Строка);
			
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьТаблицу()
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Объект.Товары.Выгрузить(), УникальныйИдентификатор);
	
	Возврат АдресХранилища;
	
КонецФункции

&НаКлиенте
Процедура ВесОбъем(Команда)
	
	// пока так
	
	АдресХранилища = ПодготовитьТаблицу();
	
	ОткрытьФорму("Документ.ИнтернетЗаказПокупателя.Форма.ФормаВеса", Новый Структура("АдресХранилища", АдресХранилища));
	
КонецПроцедуры

// КОМАНДЫ

&НаКлиенте
Процедура ЗаполнитьРучСкидку(Команда)
	
	ДиалогиСПользователем.ЗаполнитьРучСкидку(Объект.Товары, СтруктураКолонокТовары);
		
КонецПроцедуры
&НаКлиенте
Процедура ЗаполнитьСтавкуНДС(Команда)
	
	ДиалогиСПользователем.ЗаполнитьСтавкуНДС(Объект.Товары, СтруктураКолонокТовары);
	
КонецПроцедуры

#Область Информация_о_товаре


&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	// информация о товаре
	ОбработатьОтображениеИнформацииОТоваре()	
	 	
КонецПроцедуры
&НаСервере
Процедура ОбработатьОтображениеИнформацииОТоваре() Экспорт 
	РаботаСНоменклатурой.ОбработатьОтображениеИнформацииОТоваре(ЭтаФорма, "Товары", "Объект.Товары");
КонецПроцедуры

&НаКлиенте
Процедура ИнфТовараТекстHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	РаботаСНоменклатуройКлиент.ИнфТовараТекстHTMLПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры
&НаКлиенте
Процедура ИнфТовараЗаголовокHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	РаботаСНоменклатуройКлиент.ИнфТовараЗаголовокHTMLПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка, "Товары", "Объект.Товары");
КонецПроцедуры

 &НаКлиенте
Процедура ПоказатьСкрытьИнфОТоваре(Команда)
	РаботаСНоменклатуройКлиент.ПоказатьСкрытьИнфОТоваре(ЭтаФорма);
КонецПроцедуры
&НаКлиенте
Процедура НастройкаИнфОТоваре(Команда) 
	РаботаСНоменклатуройКлиент.НастройкаИнфОТоваре(ЭтаФорма, "Товары", "Объект.Товары");
КонецПроцедуры


#КонецОбласти

// АВАНС

&НаСервере
Функция ЗаполнитьДокументыОплатыНаСервере()
	
	ДокФантом = Документы.РеализацияПереданныхТоваров.СоздатьДокумент();
	ЗаполнитьЗначенияСвойств(ДокФантом, Объект.Ссылка);
	ДокФантом.ЗаполнитьДокументыОплаты(Объект.Ссылка);
	
	ДокументыОплаты.ЗагрузитьЗначения(ДокФантом.ПлатежныеДокументы.Выгрузить().ВыгрузитьКолонку("ДокументОплаты"));
	
КонецФункции
&НаКлиенте
Процедура ЗаполнитьАванс(Команда)
	
	ЗаполнитьДокументыОплатыНаСервере();
	
КонецПроцедуры

// СЧЕТ - ФАКТУРА

Процедура ОбновитьЗаголовокСчетФактуры(НомерСчетФактуры, ДатаСчетФактуры)
	
	Элементы.СФ.Заголовок = "Счет-фактура № " + НомерСчетФактуры + " от " + ДатаСчетФактуры;	
	
КонецПроцедуры

&НаКлиенте
Процедура СФНажатие(Элемент)
	
	Если НЕ Модифицированность Тогда 
		//ОткрытьФорму("Документ.РеализацияТоваров.Форма.ФормаСчетФактура", Новый Структура("Основание", Объект.Ссылка), ЭтаФорма);
		ОткрытьФорму("Документ.РеализацияТоваров.Форма.ФормаСчетФактура", Новый Структура("Основание", Объект.Ссылка), ЭтаФорма);
	Иначе
		Сообщить("Перед вводом счет-фактуры необходимо записать документ");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаписьСФ" И ТипЗнч(Параметр) = Тип("Структура") Тогда
		ОбновитьЗаголовокСчетФактуры(Параметр.Номер, Параметр.Дата);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ИзменитьРеквизитыДокумента(Команда)
	
	ФункцииФормДокументов.ИзменитьРеквизиты(ЭтаФорма);

КонецПроцедуры
&НаКлиенте
Процедура ОбработатьИзмененияРеквизитов(ЗакрытьФорму, Параметры) Экспорт
	
	Если ЗакрытьФорму = Истина Тогда Закрыть() КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОплатыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыбПлатежка = ОткрытьФорму("Документ.ПлатежноеПоручениеВходящее.ФормаВыбора",Новый Структура("Организация, Контрагент",Объект.Организация, Объект.Контрагент),ЭтаФорма,,,,Новый ОписаниеОповещения("ОбработкаВыбораДокаОплаты",ЭтаФорма,),);
КонецПроцедуры

Процедура ОбработкаВыбораДокаОплаты(Результат, Параметры) Экспорт							
	Если ДокументыОплаты.НайтиПоЗначению(Результат) = Неопределено Тогда
		ДокументыОплаты.Добавить(Результат);
		Модифицированность = Истина;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОстаткам(Команда)
	// Вставить содержимое обработчика.
	ЗаполнитьПоОстаткамНаСервере(СтруктураКолонокТовары);
КонецПроцедуры
&НаСервере
Процедура ЗаполнитьПоОстаткамНаСервере(СтруктураКолонокТовары, Грузополучатель = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Сообщить("Контрагент не указан! Укажите контрагента!", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Ост.Номенклатура  		Номенклатура,
				   |	Ост.НоменклатураЗамена	НоменклатураЗамена,
	               |	Ост.ДокументПередачи  	ДокументПередачи,
	               |	Ост.ДокументПередачи.ОтветственноеЛицо  	ОтветственноеЛицо,
	               |	Ост.Инициатор  			Инициатор,
	               |	Ост.Размещение 			Размещение,
	               |	Ост.СтавкаНДС  			СтавкаНДС,
				   |	Ост.Упаковка			Упаковка,
				   |" + ?(Объект.ЦенаНаКонецПериода, "
			  	   |    ЕСТЬNULL(Цен.Цена, 0) * (ЕСТЬNULL(ВалЦен.Курс, 1) * ЕСТЬNULL(ВалУпр.Кратность, 1)) / (ЕСТЬNULL(ВалУпр.Курс, 1) * ЕСТЬNULL(ВалЦен.Кратность, 1))", "
				   |	Ост.Цена") + "			Цена,
				   |	Ост.Цена				ЦенаПередачи,
	               |	Ост.КоличествоОстаток  	Количество,
	               |	Ост.СуммаОстаток  		Сумма
	               |ИЗ
	               |	РегистрНакопления.ПередачаТоваров.Остатки(" + ?(Период.ДатаОкончания <> '00010101', "&КонецПериода", "") + ", Контрагент = &Контрагент 
				   |" + ?(НЕ ЗначениеЗаполнено(Грузополучатель), "", " И ДокументПередачи.ОтветственноеЛицо.ГрузополучательИПР = &Грузополучатель") + "
				   |" + ?(ЗначениеЗаполнено(Объект.ОтветственноеЛицо), "И ДокументПередачи.ОтветственноеЛицо = &ОтветственноеЛицо", " ") + "
				   |" + ?(ЗначениеЗаполнено(Объект.МВЗ), "И ДокументПередачи.МВЗ = &МВЗ", " ") + "
				   |) Ост                                   
				   |" + ?(Объект.ЦенаНаКонецПериода, " 
				   |		
				   |	ЛЕВОЕ СОЕДИНЕНИЕ
				   |		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(" + ?(Период.ДатаОкончания <> '00010101', "&КонецПериода", "") + ", ТипЦен = &ТипЦен) Цен
				   |		ПО Ост.Номенклатура = Цен.Номенклатура
				   |		
				   |	ЛЕВОЕ СОЕДИНЕНИЕ
				   |		РегистрСведений.КурсыВалют.СрезПоследних(" + ?(Период.ДатаОкончания <> '00010101', "&КонецПериода", "") + ") ВалЦен
				   |		ПО Цен.Валюта = ВалЦен.Валюта
				   |    
				   |	ЛЕВОЕ СОЕДИНЕНИЕ    				 
				   |		РегистрСведений.КурсыВалют.СрезПоследних(" + ?(Период.ДатаОкончания <> '00010101', "&КонецПериода", "") + ", Валюта В(ВЫБРАТЬ ВалютаУправленческогоУчета ИЗ Константы)) ВалУпр
				   |		ПО ИСТИНА
				   |
				   |", "") + "
				   |
				   // И Размещение = &Склад)
				   |УПОРЯДОЧИТЬ ПО ДокументПередачи.Дата";
				   
	//Запрос.УстановитьПараметр("НачалоПериода", Объект.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  Период.ДатаОкончания);

	Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
	Запрос.УстановитьПараметр("ОтветственноеЛицо", 	Объект.ОтветственноеЛицо);
	Запрос.УстановитьПараметр("МВЗ", 	Объект.МВЗ);
	Запрос.УстановитьПараметр("Грузополучатель", Грузополучатель);
	Запрос.УстановитьПараметр("ТипЦен", Объект.ТипЦен);
	
	

	Выполнение = Запрос.Выполнить();
	Объект.Товары.Загрузить(Выполнение.Выгрузить());
	
	ФункцииФормДокументов.ПересчитатьСуммыТабличныхЧастей(Объект.Товары, СтруктураКолонокТовары, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОстаткамПоГрузополучателю(Команда)
	
	ЗаполнитьПоОстаткамНаСервере(СтруктураКолонокТовары, Объект.Грузополучатель);

КонецПроцедуры


&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	СтруктураКолонокТовары = ФункцииФормДокументов.ПолучитьСтруктуруКолонокТовары(Элементы.Товары, Объект.СуммаВключаетНДС, Объект.ТипЦен, , , Объект.Валюта, Объект.УчитыватьНДС, Объект.Валюта, Объект.СуммаВключаетНДС,,Объект.УчитыватьНДС,,Объект.Контрагент);
	
	Объект.Грузополучатель = ФункцииФормДокументовСервер.ГрузополучательПриИзмененииРеквизита(Объект.Контрагент);
	Объект.БанковскийСчетГрузополучателя = ФункцииФормДокументовСервер.БанковскийСчетПриИзмененииРеквизита(Объект.Грузополучатель);
КонецПроцедуры


&НаКлиенте
Процедура ГрузополучательПриИзменении(Элемент)
	Объект.БанковскийСчетГрузополучателя = ФункцииФормДокументовСервер.БанковскийСчетПриИзмененииРеквизита(Объект.Грузополучатель);
КонецПроцедуры

&НаКлиенте
Процедура ГрузоотправительПриИзменении(Элемент)
	Объект.БанковскийСчетГрузоотправителя = ФункцииФормДокументовСервер.БанковскийСчетПриИзмененииРеквизита(Объект.Грузоотправитель);
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Объект.Грузоотправитель = ФункцииФормДокументовСервер.ГрузополучательПриИзмененииРеквизита(Объект.Организация);
	Объект.БанковскийСчетГрузоотправителя = ФункцииФормДокументовСервер.БанковскийСчетПриИзмененииРеквизита(Объект.Грузоотправитель);
КонецПроцедуры