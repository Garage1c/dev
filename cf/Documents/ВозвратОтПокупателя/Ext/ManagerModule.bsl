
Процедура ИницилизироватьДополнительныеДанныеДокумента(Ссылка, ДополнительныеСвойства) Экспорт
	
	Запрос = Новый Запрос(
	
	КэшируемыеФункции.ТектЗапросаПолученияПараметровСистемы() + "
	
	|;
	
	// ШАПКА
	
	|ВЫБРАТЬ
	|	Склад, Контрагент
	|ИЗ
	|	Документ.ВозвратОтПокупателя
	|ГДЕ
	|	Ссылка = &Ссылка
	
	// ТОВАРЫ НА СКЛАДАХ
	
	|;
	|ВЫБРАТЬ
	|	&Период				КАК Период,
	|	&ВидДвиженияПриход	КАК ВидДвижения,
	|	Ссылка.Склад		КАК Склад,
	|	Номенклатура,
	|	Цена,
	|	ВЫБОР КОГДА Упаковка = &ПустаяУпаковка ТОГДА
	|		СУММА(Количество)
	|	ИНАЧЕ
	|		СУММА(Количество*Упаковка.Коэффициент)
	|	КОНЕЦ  				КАК Количество,
    |	СУММА(Сумма)		КАК Сумма
	|ИЗ
	|	Документ.ВозвратОтПокупателя.Товары
	|
	|ГДЕ
	|	Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Ссылка,
	|	Номенклатура,
	|	Упаковка,
	|	Цена
	|;
	
	// ВЗАИМОРАСЧЕТЫ
	
	|ВЫБРАТЬ
	|	&Период				КАК Период,
	|	&ВидДвиженияПриход	КАК ВидДвижения,
	|	Организация	КАК Организация,
	|	Контрагент	КАК Контрагент,
	|	ЗНАЧЕНИЕ(Перечисление.ФормаОтношений.Клиент) 	ФормаОтношений,	
	|	-Сумма		КАК Сумма,
	|   -Сумма      КАК СуммаУпр
	|ИЗ
	|	Документ.ВозвратОтПокупателя
	|
	|ГДЕ
	|	Ссылка = &Ссылка
	|
	|;
	
	// ЯЧЕЙКИ
	
	|ВЫБРАТЬ
	|	&Период				КАК Период,
	|	&ВидДвиженияПриход	КАК ВидДвижения,
	|	Ячейка				КАК Ячейка,
	|	Номенклатура,
	|	ВЫБОР КОГДА Упаковка = &ПустаяУпаковка ТОГДА
	|		СУММА(Количество)
	|	ИНАЧЕ
	|		СУММА(Количество*Упаковка.Коэффициент)
	|	КОНЕЦ  				КАК Количество
    |ИЗ
	|	Документ.ВозвратОтПокупателя.Товары
	|
	|ГДЕ
	|	Ссылка = &Ссылка И
	|	Ячейка <> &ПустаяЯчейка
	|
	|СГРУППИРОВАТЬ ПО
	|	Ячейка,
	|	Номенклатура,
	|	Упаковка
	|;
	
	// ПРОДАЖИ
	
	|ВЫБРАТЬ
	|	&Период 						Период,
	|	Ссылка.Склад					Склад,
	|	Ссылка.Подразделение			Подразделение,
	|	&Менеджер						Менеджер,
	|	Ссылка.ОТдел					ОТдел,
	|   Ссылка.ДокументОтгрузки.Заказ 	Заказ,
	|	Ссылка.Контрагент				Контрагент,
	|	Номенклатура, 
	|	Упаковка,
	|	Ссылка.ДокументОтгрузки			ДокументПродажи,
	|	Акция,
	|	-СУММА(Количество) 				Количество,
	|	-СУММА(СуммаПартии)				Себестоимость,
	//|	ВЫБОР
	//|		КОГДА Упаковка = &ПустаяУпаковка 
	//|		ТОГДА СУММА(Количество)
	//|		ИНАЧЕ СУММА(Количество*Упаковка.Коэффициент) КОНЕЦ Количество,
	|	ВЫБОР 
	|		КОГДА Ссылка.СуммаВключаетНДС 
	|		ТОГДА -СУММА(Сумма)		
	|		ИНАЧЕ -СУММА(Сумма) - СУММА(СуммаНДС) 		 КОНЕЦ	Сумма
	|ИЗ
	|	Документ.ВозвратОтПокупателя.Товары
	|
	|ГДЕ
	|	Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Ссылка, 
	|	Номенклатура,
	|	Упаковка,
	|	Акция
	|;
	
	// ПРОДАЖИ ПО ДИСКОНТНЫМ КАРТАМ
	
	|ВЫБРАТЬ
	|	&Период									Период,
	|	Ссылка.ДисконтнаяКарта 					ИнформационнаяКарта,
	|	Ссылка.ДисконтнаяКарта.ВладелецКарты	ВладелецКарты,
	|	ВЫБОР 
	|		КОГДА Ссылка.СуммаВключаетНДС
	|		ТОГДА -СУММА(Сумма)		
	|		ИНАЧЕ -СУММА(Сумма) - СУММА(СуммаНДС) КОНЕЦ	Сумма
	|ИЗ
	|	Документ.ВозвратОтПокупателя.Товары
	|
	|ГДЕ
	|	Ссылка = &Ссылка И Ссылка.ДисконтнаяКарта <> ЗНАЧЕНИЕ(Справочник.ИнформационныеКарты.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	Ссылка
	|;
	
	 // Долги по отгрузкам
	
	|
	|ВЫБРАТЬ                               
	|	&Период 			Период,
	|	&ВидДвиженияПриход	ВидДвижения,
	|	&Организация		Организация,
	|	&Контрагент			Контрагент,
	|	ДокументОтгрузки.Заказ	Заказ,
	|	ДокументОтгрузки	ДокументОтгрузки,
	|	-Сумма				Сумма
	|ИЗ
	|	Документ.ВозвратОтПокупателя
	|ГДЕ
	|   Ссылка = &Ссылка
	|;
	
	
	
	// ПАРТИИ ТОВАРОВ
	
	|ВЫБРАТЬ неопределено ГДЕ Истина=Ложь
	|");
	
	//Запрос.УстановитьПараметр("Область", 				ПараметрыСеанса.ТекущаяОбласть);
	Запрос.УстановитьПараметр("Ссылка", 				Ссылка);
	Запрос.УстановитьПараметр("Период", 				Ссылка.Дата);
	Запрос.УстановитьПараметр("ВидДвиженияПриход", 		ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("ВидДвиженияРасход", 		ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("ПустаяЯчейка", 			Справочники.Ячейки.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяУпаковка", 		Справочники.УпаковкиНоменклатуры.ПустаяСсылка());
	
	Запрос.УстановитьПараметр("Организация", 		Ссылка.Организация);
	Запрос.УстановитьПараметр("Контрагент", 		Ссылка.Контрагент);
	Запрос.УстановитьПараметр("Заказ", 				Ссылка.ДокументОтгрузки.Заказ);
	Запрос.УстановитьПараметр("ДокументОтгрузки",	Ссылка.ДокументОтгрузки);
	Запрос.УстановитьПараметр("Менеджер", 			Справочники.Контрагенты.ПолучитьОсновногоМенеджераПартнера(Ссылка.Дата, Ссылка.Контрагент));
	
	Запрос.УстановитьПараметр("ВидОперацииОплата", 	Перечисления.ВидыОперацийВзаиморасчетов.Отгрузка);
	Запрос.УстановитьПараметр("ФормаОтношений", 	Перечисления.ФормаОтношений.Клиент);
	
	Пакет = Запрос.ВыполнитьПакет();
	
	ДополнительныеСвойства.Вставить("ПараметрыСистемы", КонвертацияТипов.ПолучитьСтруктуруИзСТрокиТаблицыЗначений(Пакет[0].Выгрузить()));
	ДополнительныеСвойства.Вставить("Шапка", 			КонвертацияТипов.ПолучитьСтруктуруИзСТрокиТаблицыЗначений(Пакет[1].Выгрузить()));
	ДополнительныеСвойства.Вставить("ТоварыНаСкладах", 	Пакет[2].Выгрузить());
	ДополнительныеСвойства.Вставить("Взаиморасчеты", 	Пакет[3].Выгрузить());
	ДополнительныеСвойства.Вставить("ТоварыВЯчейках", 	Пакет[4].Выгрузить());
	ДополнительныеСвойства.Вставить("Продажи", 			Пакет[5].Выгрузить());
	ДополнительныеСвойства.Вставить("ПродажиПоДисконтнымКартам",Пакет[6].Выгрузить());
	ДополнительныеСвойства.Вставить("ДолгиПоОтгрузкам",Пакет[7].Выгрузить());
	
КонецПроцедуры


Функция ПолучитьДанныеДляТОРГ12(ТабличныйДокумент, Ссылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	КолонкаКодов = ""; // ФормированиеПечатныхФорм.ИмяДополнительнойКолонки();
	Если Не ЗначениеЗаполнено(КолонкаКодов) Тогда
		КолонкаКодов = "Код";
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|////////////////////////////////////////////////////////////////////////////
	|// ВРЕМЕННАЯ ТАБЛИЦА НоменклатураДокументов
	|ВЫБРАТЬ
	|	Товары.Ссылка КАК Ссылка,
	|	МАКСИМУМ(
	|		ВЫБОР КОГДА Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга) ТОГДА
	|			Истина
	|		ИНАЧЕ
	|			Ложь
	|		КОНЕЦ
	|	) КАК ЕстьУслуги,
	|	МАКСИМУМ(
	|		ВЫБОР КОГДА Товары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга) ТОГДА
	|			Истина
	|		ИНАЧЕ
	|			Ложь
	|		КОНЕЦ
	|	)КАК ЕстьТовары
	|
	|ПОМЕСТИТЬ НоменклатураДокументов
	|ИЗ
	|	Документ.ВозвратОтПокупателя.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	
	|СГРУППИРОВАТЬ ПО
	|	Товары.Ссылка
	|;
	|////////////////////////////////////////////////////////////////////////////
	|// ЗАПРОС ПО ШАПКЕ
	|
	|ВЫБРАТЬ
	|   ЕСТЬNULL(НоменклатураДокументов.ЕстьУслуги, Ложь)						   КАК ЕстьУслуги,
	|   ЕСТЬNULL(НоменклатураДокументов.ЕстьТовары, Ложь)						   КАК ЕстьТовары,
	|	Док.Ссылка                                              КАК Ссылка,
	|	Док.Номер                                               КАК Номер,
	|	Док.Дата                                                КАК Дата,
	|	Док.Контрагент                                          КАК Организация,
	|	Док.Организация                                         КАК Контрагент,
	|	""""                                                    КАК Руководитель,                                // ЕСТЬNULL(Рук.ФизическоеЛицо.Наименование, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))
	|	""""                                                                          КАК ДолжностьРуководителя,    // ЕСТЬNULL(Рук.Должность, """") 
	|	""""                                                                          КАК ГлавныйБухгалтер,         // ЕСТЬNULL(Бух.ФизическоеЛицо.Наименование, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))  
	|	""""                                                                          КАК Кладовщик,                // ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|	""""                                    									  КАК ДолжностьКладовщика, 
	|	ЕСТЬNULL(Док.ДокументОтгрузки, """")										  КАК Основание,
	|
	|	ВЫБОР КОГДА Док.Грузополучатель В (Неопределено,ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка),ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка),Значение(Справочник.Грузополучатели.ПустаяСсылка)) ТОГДА
	|		Док.Организация
	|	ИНАЧЕ
	|		Док.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|
	|	ВЫБОР КОГДА Док.Грузоотправитель В (Неопределено,ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка),ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка),Значение(Справочник.Грузополучатели.ПустаяСсылка)) ТОГДА
	|		Док.Контрагент
	|	ИНАЧЕ
	|		Док.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|
	|	Док.БанковскийСчетОрганизации                             КАК БанковскийСчетОрганизации,
	|	Док.БанковскийСчетПартнера                             	  КАК БанковскийСчетКонтрагента,
	|	Док.БанковскийСчетГрузоотправителя                        КАК БанковскийСчетГрузоотправителя,
	|	Док.БанковскийСчетГрузополучателя                         КАК БанковскийСчетГрузополучателя,
	|	""""								                                         КАК АдресДоставки,
	|	Неопределено                                                                 КАК Подразделение,
	|
	//|	// При взаиморасчетах в иностранной валюте в обработку передаем суммы в валюте регл. учета.
	//|	ВЫБОР КОГДА РеализацияТоваровУслуг.Ссылка В (&МассивДокументовВВалютеРегл) ТОГДА
	//|		&ВалютаРегламентированногоУчета
	//|	ИНАЧЕ
	|		Док.Валюта                                            КАК Валюта,
	//|	КОНЕЦ						                                                 КАК Валюта,
	|
	|	Док.СуммаВключаетНДС                                     КАК ЦенаВключаетНДС,
	|	""""                                     									КАК ДоверенностьНомер,
	|	ДАТАВРЕМЯ(1,1,1,0,0,0)                                    					КАК ДоверенностьДата,
	|	""""                                   										КАК ДоверенностьВыдана,
	|	""""                                     									КАК ДоверенностьЛицо,
	|	ВЫБОР КОГДА НЕ Док.Плательщик = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	ТОГДА Док.Плательщик		
	|	ИНАЧЕ 	ВЫБОР КОГДА Док.Грузополучатель В (Неопределено,ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка),ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка),Значение(Справочник.Грузополучатели.ПустаяСсылка))
	|	            ТОГДА	Док.Контрагент
	|	            ИНАЧЕ 	Док.Грузополучатель
	|	КОНЕЦ КОНЕЦ	                                               Плательщик
	|ИЗ
	|	Документ.ВозвратОтПокупателя КАК Док
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ОтветственныеЛицаОрганизации.СрезПоследних(&Дата, Организация = &Организация И ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизации.ГлавныйБухгалтер)) Бух
	|	ПО ИСТИНА
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ОтветственныеЛицаОрганизации.СрезПоследних(&Дата, Организация = &Организация И ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизации.Руководитель)) Рук
	|	ПО ИСТИНА
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		НоменклатураДокументов КАК НоменклатураДокументов
	|	ПО
	|		Док.Ссылка = НоменклатураДокументов.Ссылка
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////
	|// ЗАПРОС ПО ТАБЛИЧНЫМ ЧАСТЯМ
	|
	|ВЫБРАТЬ
	|	Товары.Ссылка                                                     КАК Ссылка,
	|	Товары.Номенклатура                                               КАК Номенклатура,
	|	Товары.Номенклатура.НаименованиеПолное                            КАК ТоварНаименование,
	|	Товары.Номенклатура." + КолонкаКодов + "                          КАК ТоварКод,
	|	ВЫБОР КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) ТОГДА
	|		Товары.Номенклатура.ЕдиницаИзмерения.Наименование    
	|	ИНАЧЕ
	|		ПРЕДСТАВЛЕНИЕ(Товары.Упаковка)
	|	КОНЕЦ  														  	  КАК БазоваяЕдиницаНаименование,
	|	ВЫБОР КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) ТОГДА
	|		Товары.Номенклатура.ЕдиницаИзмерения.Код    
	|	ИНАЧЕ
	|		""""
	|	КОНЕЦ 														  	  КАК БазоваяЕдиницаКодПоОКЕИ, 														 
	//|	Товары.ЕдиницаИзмерения                                           КАК ЕдиницаИзмерения,
	|	""""												              КАК ВидУпаковки,
	|   0                                                                 КАК КоличествоВОдномМесте,
	|	Товары.Цена                                                       КАК Цена,																	   
	|	Товары.Количество                                                 КАК Количество,
	|	0                                								  КАК КоличествоМест,
	|	Товары.Сумма                									  КАК Сумма,
	|	Товары.СуммаНДС          										  КАК СуммаНДС,
	|	Товары.НомерСтроки                                                КАК НомерСтроки,
	|	0							                                      КАК МассаБрутто,
	|	Ложь                                                              КАК ЭтоВозвратнаяТара
	|ИЗ
	|		Документ.ВозвратОтПокупателя.Товары КАК Товары
	|	ГДЕ
	|		Товары.Ссылка  = &Ссылка И Товары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|");                                 
		
	//ТаблицаВВалютеРегл = ПолучитьТабличнуюЧастьВВалютеРеглУчета(МассивОбъектов);
	//МассивДокументовВВалютеРегл = ТаблицаВВалютеРегл.ВыгрузитьКолонку("ДокументСсылка");
	//ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Запрос.УстановитьПараметр("Дата", 				Ссылка.Дата);
    Запрос.УстановитьПараметр("Ссылка", 			Ссылка);
	Запрос.УстановитьПараметр("Организация", 		Ссылка.Организация);

	//Запрос.УстановитьПараметр("ТаблицаВВалютеРегл",				ТаблицаВВалютеРегл);
	//Запрос.УстановитьПараметр("МассивДокументовВВалютеРегл", 	МассивДокументовВВалютеРегл);
	//Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(Ссылка);
	ТаблицаКурсовВалют = ПолучитьТаблицуКурсовВалют(МассивОбъектов);
	
	МассивРезультатов 			= Запрос.ВыполнитьПакет();
	// МассивРезультатов[0] - временная таблица "Таблица корректировок"
	РезультатПоШапке			= МассивРезультатов[1];
	РезультатПоТабличнойЧасти 	= МассивРезультатов[2];
	
	СтруктураДанныхДляПечати 	= Новый Структура("РезультатПоШапке, РезультатПоТабличнойЧасти, ТаблицаКурсовВалют",
												   РезультатПоШапке, РезультатПоТабличнойЧасти, ТаблицаКурсовВалют);
												   
	Если ПривилегированныйРежим() Тогда
	    УстановитьПривилегированныйРежим(Ложь);	
	КонецЕсли;
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции
Функция ПолучитьТаблицуКурсовВалют(МассивДокументов)
	
	ВалютаРегламентированногоУчета = ОбщиеФункции.ПолучитьЗначениеКонстантыВОбласти("ВалютаУправленческогоУчета");
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НАЧАЛОПЕРИОДА(Док.Дата, ДЕНЬ) КАК Дата,
		|	Док.Валюта КАК Валюта
		|ИЗ
		|	Документ.ВозвратОтПокупателя КАК Док
		|ГДЕ
		|	Док.Ссылка В(&МассивДокументов)
		|	И Док.Валюта <> &ВалютаРегламентированногоУчета
		|
		|УПОРЯДОЧИТЬ ПО
		|	Валюта,
		|	Дата
		|");
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	ТаблицаКурсовВалют = Новый ТаблицаЗначений;
	ТаблицаКурсовВалют.Колонки.Добавить("Валюта",    Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаКурсовВалют.Колонки.Добавить("Дата",      Новый ОписаниеТипов("Дата"));
	ТаблицаКурсовВалют.Колонки.Добавить("Курс",      Новый ОписаниеТипов("Число"));
	ТаблицаКурсовВалют.Колонки.Добавить("Кратность", Новый ОписаниеТипов("Число"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ТаблицаКурсовВалют.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		КурсыВалюты = ОбщиеФункции.ПолучитьКурсВалюты(Выборка.Валюта, Выборка.Дата);
		НоваяСтрока.Курс = КурсыВалюты.Курс;
		НоваяСтрока.Кратность = КурсыВалюты.Кратность;
		
	КонецЦикла;
	
	Возврат ТаблицаКурсовВалют;
	
КонецФункции // ПолучитьТаблицуКурсовВалют()
Процедура Печать_Накладная(ТабличныйДокумент, Ссылка) Экспорт
	
	КолонкаКодов = "Артикул"; // ФормированиеПечатныхФорм.ИмяДополнительнойКолонки();
	ВыводитьКоды = ЗначениеЗаполнено(КолонкаКодов);
	
	//ИспользоватьРучныеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВЗакупках");
	
	Запрос = Новый Запрос("
	|////////////////////////////////////////////////////////////////////////////
	|// ЗАПРОС ПО ШАПКЕ
	|
	|ВЫБРАТЬ
	|	Док.Ссылка                                  КАК Ссылка,
	|	Док.Номер                                   КАК Номер,
	|	Док.Дата                                    КАК Дата,
	|	Док.Контрагент                              КАК Поставщик,
	|	Док.Организация                             КАК Организация,
	|	Док.Валюта                                  КАК Валюта,
	|	Док.СуммаВключаетНДС                        КАК ЦенаВключаетНДС,
	|	ВЫБОР КОГДА
	|		Док.Ответственный.Организация = Док.Организация
	|	ТОГДА
	|		Док.Ответственный.Наименование						         
	|	ИНАЧЕ
	|		"""" 
	|	КОНЕЦ										КАК ПолучениеПроизвел,
	|	Док.УчитыватьНДС     						КАК УчитыватьНДС
	|ИЗ
	|	Документ.ВозвратОтПокупателя КАК Док
	|
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////
	|// ЗАПРОС ПО ТАБЛИЧНЫМ ЧАСТЯМ
	|
	|ВЫБРАТЬ
	|	Товары.Ссылка                                                     КАК Ссылка,
	|	Товары.Номенклатура                                               КАК Номенклатура,
	|	Товары.Номенклатура.НаименованиеПолное                            КАК ТоварНаименованиеПолное,
	|	Товары.Номенклатура.Код                                           КАК Код,
	|	Товары.Номенклатура.Артикул                                       КАК Артикул,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование                              КАК ЕдиницаЦены,
	|	Товары.Номенклатура.ЕдиницаИзмерения                                           КАК ЕдиницаИзмерения,
	|	Товары.СтавкаНДС                                                  КАК СтавкаНДС,
	|	Товары.Цена													    КАК Цена,
	|	ВЫБОР КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) 
	|	ТОГДА Товары.Количество                                              
	|	ИНАЧЕ Товары.Количество*Товары.Упаковка.Коэффициент
	|	КОНЕЦ															КАК Количество,
	|	Товары.Сумма													КАК Сумма,
	|	Товары.СуммаНДС												    КАК СуммаНДС,
	|	0						                                        КАК СуммаСкидки,
	|	Товары.Сумма                                            		КАК СуммаБезСкидки,
	|	Товары.НомерСтроки                                              КАК НомерСтроки,
	|	Ложь                                                            КАК ЭтоВозвратнаяТара
	|	ИЗ
	|		Документ.ВозвратОтПокупателя.Товары КАК Товары
	|	ГДЕ
	|		Товары.Ссылка = &Ссылка
	|		И Товары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|	
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|
	|ИТОГИ
	|	СУММА(СуммаСкидки)
	|ПО
	|	Ссылка
	|");

	Запрос.УстановитьПараметр("Ссылка", Ссылка);

	//ТабличныйДокумент = Новый ТабличныйДокумент;
	//ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПоступлениеТоваровУслуг_Накладная";
	
	//ТабличныйДокумент = Новый ТабличныйДокумент;
	
	МассивРезультатов 		= Запрос.ВыполнитьПакет();
	ДанныеПечати			= МассивРезультатов[0].Выбрать();
	ВыборкаПоДокументам 	= МассивРезультатов[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	//ПервыйДокумент = Истина;
	
	Пока ДанныеПечати.Следующий() Цикл
		
		// Найдем в выборке товары по текущему документу
		//СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		//НайденСледующий = ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска);
		
		Если ВыборкаПоДокументам.Следующий() Тогда
			ВыборкаПоТоварам = ВыборкаПоДокументам.Выбрать();
			ЕстьСкидки = ФормированиеПечатныхФорм.НужноВыводитьСкидки(ВыборкаПоТоварам);
			ВыборкаПоТоварам.Сбросить();
		КонецЕсли;	
		
		// Если в накладной только услуги - перейдем к следующему документу
		
		//Если НайденСледующий Тогда
		//	ВыборкаПоТоварам = ВыборкаПоДокументам.Выбрать();
		//	ЕстьСкидки = ФормированиеПечатныхФорм.НужноВыводитьСкидки(ВыборкаПоТоварам, ИспользоватьРучныеСкидки);
		//	ВыборкаПоТоварам.Сбросить();
		//Иначе
		//	Продолжить;
		//КонецЕсли;
		
		// Макет необходимо получать для каждого документа, т.к. размеры колонок изменяются динамически
		Макет = Документы.ВозвратОтПокупателя.ПолучитьМакет("ВозвратТоваров");
		
		//Если Не ПервыйДокумент Тогда
		//	ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		//КонецЕсли;
		
		//ПервыйДокумент    = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Выводим шапку накладной
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		
		ТекстЗаголовка = ФормированиеПечатныхФорм.СформироватьЗаголовокДокумента(ДанныеПечати, НСтр("ru='Возврат товаров'"),,Истина);
		
		ОбластьМакета.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета                                   = Макет.ПолучитьОбласть("Поставщик");
		ПредставлениеПоставщика                         = ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Поставщик, ДанныеПечати.Дата), "ПолноеНаименование");
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;
		ОбластьМакета.Параметры.Поставщик               = ДанныеПечати.Поставщик;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета                                   = Макет.ПолучитьОбласть("Покупатель");
		ПредставлениеПолучателя                         = ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата), "ПолноеНаименование");
		ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеПолучателя;
		ОбластьМакета.Параметры.Получатель              = ДанныеПечати.Организация;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Выводим заголовок таблицы Товары
		
		Если ЕстьСкидки Тогда
			ОбластьКолонкаТовар = Макет.Область("ТоварСоСкидкой");
		Иначе
			ОбластьКолонкаТовар = Макет.Область("Товар");
		КонецЕсли;
			
		Если Не ВыводитьКоды Тогда
			
			Если ЕстьСкидки Тогда
				ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки * 1.35;
			Иначе
				ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки * 1.2;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЕстьСкидки Тогда
			
			ОбластьНомера  = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой|НомерСтроки");
			ОбластьКодов   = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой|КолонкаКодов");
			ОбластьТовар   = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой|ТоварСоСкидкой");
			ОбластьДанных  = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой|ДанныеСоСкидкой");
			
		Иначе
			
			ОбластьНомера  = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
			ОбластьКодов   = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
			ОбластьТовар   = Макет.ПолучитьОбласть("ШапкаТаблицы|Товар");
			ОбластьДанных  = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
			
		КонецЕсли;
			
		ТабличныйДокумент.Вывести(ОбластьНомера);
			
		Если ВыводитьКоды Тогда
			ОбластьКодов.Параметры.ИмяКолонкиКодов = КолонкаКодов;
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
			
		ТабличныйДокумент.Присоединить(ОбластьТовар);
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		
		Если ЕстьСкидки Тогда
			
			ОбластьНомера  = Макет.ПолучитьОбласть("СтрокаТаблицыСоСкидкой|НомерСтроки");
			ОбластьКодов   = Макет.ПолучитьОбласть("СтрокаТаблицыСоСкидкой|КолонкаКодов");
			ОбластьТовар   = Макет.ПолучитьОбласть("СтрокаТаблицыСоСкидкой|ТоварСоСкидкой");
			ОбластьДанных  = Макет.ПолучитьОбласть("СтрокаТаблицыСоСкидкой|ДанныеСоСкидкой");
			
		Иначе
			
			ОбластьНомера  = Макет.ПолучитьОбласть("СтрокаТаблицы|НомерСтроки");
			ОбластьКодов   = Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаКодов");
			ОбластьТовар   = Макет.ПолучитьОбласть("СтрокаТаблицы|Товар");
			ОбластьДанных  = Макет.ПолучитьОбласть("СтрокаТаблицы|Данные");
			
		КонецЕсли;
			
		Сумма          = 0;
		СуммаНДС       = 0;
		ВсегоСкидок    = 0;
		НомерСтроки    = 0;
		ВсегоБезСкидок = 0;
		
		// Выводим строки таблицы Товары
			
		Пока ВыборкаПоТоварам.Следующий() Цикл
			
			НомерСтроки = НомерСтроки + 1;
			
			ОбластьНомера.Параметры.НомерСтроки = НомерСтроки;
			ТабличныйДокумент.Вывести(ОбластьНомера);
			
			Если ВыводитьКоды Тогда
				
				ОбластьКодов.Параметры.Артикул = ВыборкаПоТоварам[КолонкаКодов];
				ТабличныйДокумент.Присоединить(ОбластьКодов);
				
			КонецЕсли;
			
			ОбластьТовар.Параметры.Заполнить(ВыборкаПоТоварам);
			ОбластьТовар.Параметры.Товар = ФормированиеПечатныхФорм.ПолучитьПредставлениеНоменклатурыДляПечати(ВыборкаПоТоварам.ТоварНаименованиеПолное)
				+ ?(ВыборкаПоТоварам.ЭтоВозвратнаяТара, НСтр("ru=' (возвратная тара)'"), "");
				
			ТабличныйДокумент.Присоединить(ОбластьТовар);

			ОбластьДанных.Параметры.Заполнить(ВыборкаПоТоварам);

			ТабличныйДокумент.Присоединить(ОбластьДанных);
			
			Сумма          = Сумма          + ВыборкаПоТоварам.Сумма;
			СуммаНДС       = СуммаНДС       + ВыборкаПоТоварам.СуммаНДС;
			
			Если ЕстьСкидки Тогда
				ВсегоСкидок    = ВсегоСкидок    + ВыборкаПоТоварам.СуммаСкидки;
				ВсегоБезСкидок = ВсегоБезСкидок + ВыборкаПоТоварам.СуммаБезСкидки;
			КонецЕсли;
			
		КонецЦикла;
		
		// Выводим подвал
		
		Если ЕстьСкидки Тогда
			
			ОбластьНомера  = Макет.ПолучитьОбласть("ПодвалТаблицыСоСкидкой|НомерСтроки");
			ОбластьКодов   = Макет.ПолучитьОбласть("ПодвалТаблицыСоСкидкой|КолонкаКодов");
			ОбластьТовар   = Макет.ПолучитьОбласть("ПодвалТаблицыСоСкидкой|ТоварСоСкидкой");
			ОбластьДанных  = Макет.ПолучитьОбласть("ПодвалТаблицыСоСкидкой|ДанныеСоСкидкой");
			
		Иначе
			
			ОбластьНомера  = Макет.ПолучитьОбласть("ПодвалТаблицы|НомерСтроки");
			ОбластьКодов   = Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаКодов");
			ОбластьТовар   = Макет.ПолучитьОбласть("ПодвалТаблицы|Товар");
			ОбластьДанных  = Макет.ПолучитьОбласть("ПодвалТаблицы|Данные");
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьНомера);
		
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьТовар);
		
		Если ЕстьСкидки Тогда
			
			ОбластьДанных.Параметры.ВсегоСкидок    = ВсегоСкидок;
			ОбластьДанных.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
			
		КонецЕсли;
		
		ОбластьДанных.Параметры.Всего = ФормированиеПечатныхФорм.ФорматСумм(Сумма);
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		
		// Выводим ИтогоНДС
		
		Если ДанныеПечати.УчитыватьНДС Тогда
			
			Если ЕстьСкидки Тогда
				
				ОбластьНомера  = Макет.ПолучитьОбласть("ПодвалТаблицыНДССоСкидкой|НомерСтроки");
				ОбластьКодов   = Макет.ПолучитьОбласть("ПодвалТаблицыНДССоСкидкой|КолонкаКодов");
				ОбластьТовар   = Макет.ПолучитьОбласть("ПодвалТаблицыНДССоСкидкой|ТоварСоСкидкой");
				ОбластьДанных  = Макет.ПолучитьОбласть("ПодвалТаблицыНДССоСкидкой|ДанныеСоСкидкой");
				
			Иначе
				
				ОбластьНомера  = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|НомерСтроки");
				ОбластьКодов   = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|КолонкаКодов");
				ОбластьТовар   = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|Товар");
				ОбластьДанных  = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|Данные");
				
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьНомера);
			
			Если ВыводитьКоды Тогда
				ТабличныйДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			
			ТабличныйДокумент.Присоединить(ОбластьТовар);
			
			ОбластьДанных.Параметры.ВсегоНДС = ФормированиеПечатныхФорм.ФорматСумм(СуммаНДС);
			ОбластьДанных.Параметры.НДС = ?(ДанныеПечати.ЦенаВключаетНДС, НСтр("ru='В том числе НДС:'"), НСтр("ru='Сумма НДС:'"));
			ТабличныйДокумент.Присоединить(ОбластьДанных);
			
		КонецЕсли;
		
		// Выводим Сумму прописью
		
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		СуммаКПрописи = Сумма + ?(ДанныеПечати.ЦенаВключаетНДС, 0, СуммаНДС);
		
		ИтоговаяСтрока = НСтр("ru='Всего наименований %КоличествоНаименований%, на сумму %СуммаДокумента% '");
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%КоличествоНаименований%", ВыборкаПоТоварам.Количество());
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%СуммаДокумента%", ФормированиеПечатныхФорм.ФорматСумм(СуммаКПрописи, ДанныеПечати.Валюта));

		ОбластьМакета.Параметры.ИтоговаяСтрока = ИтоговаяСтрока;
		ОбластьМакета.Параметры.СуммаПрописью  = РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, ДанныеПечати.Валюта);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Выводим подписи
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		
		Если ЗначениеЗаполнено(ДанныеПечати.ПолучениеПроизвел) Тогда
			ОбластьМакета.Параметры.ПолучениеПроизвел = ФормированиеПечатныхФорм.ФамилияИнициалыФизЛица(ДанныеПечати.ПолучениеПроизвел);
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		//УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
	//ТабличныйДокумент.АвтоМасштаб = Истина;

	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	//Возврат ТабличныйДокумент;
	
КонецПроцедуры

