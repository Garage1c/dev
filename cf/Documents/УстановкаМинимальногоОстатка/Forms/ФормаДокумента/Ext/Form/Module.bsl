&НаКлиенте
Перем РедНоменклатура;
&НаКлиенте
Перем СтруктураКолонокТовары Экспорт;

&НаСервере
Процедура СформироватьТаблицуТоваров(Открыт)
	
	// Добавим колонки
	
	СоответствияИмен = ПолучитьСоответствияИменКолонок();
	
	ТипЧисло 	= Новый ОписаниеТипов("Число");
	Таблица 	= Новый ТаблицаЗначений;
	Колонки		= Таблица.Колонки;
	
	Колонки.Добавить("Номер", 	ТипЧисло);
	Колонки.Добавить("Номенклатура", 	Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	
	КолонкиТаблицыТоваров = Новый Массив;
	
	// Удалим колонки
	
	Для Каждого Элемент Из ПолучитьРеквизиты("Товары") Цикл
		Если Найти(Элемент.Имя, "Остаток") Или Найти(Элемент.Имя, "СтОстаток") Или Найти(Элемент.Имя, "РекОстаток") Тогда
			КолонкиТаблицыТоваров.Добавить("Товары." + Элемент.Имя); КонецЕсли; КонецЦикла;
	
	ИзменитьРеквизиты(,КолонкиТаблицыТоваров);
	
	// Добавим колонки
	
	КолонкиТаблицыТоваров.Очистить();
	
	Для Каждого Элемент Из СоответствияИмен Цикл
		
		// старый остаток
		ИмяКолонки = СтрЗаменить(Элемент.Ключ, "Остаток", "СтОстаток");
		
		Колонки.Добавить(ИмяКолонки, ТипЧисло);
		КолонкиТаблицыТоваров.Добавить(Новый РеквизитФормы(ИмяКолонки, ТипЧисло, "Товары", Элемент.Значение.Наименование, Истина));
		
		// Остаток
		ИмяКолонки = Элемент.Ключ;
		
		Колонки.Добавить(ИмяКолонки, ТипЧисло);
		КолонкиТаблицыТоваров.Добавить(Новый РеквизитФормы(ИмяКолонки, ТипЧисло, "Товары", Элемент.Значение.Наименование, Истина)); 
	
		// рекомендуемый остаток
		ИмяКолонки = СтрЗаменить(Элемент.Ключ, "Остаток", "РекОстаток");
		
		Колонки.Добавить(ИмяКолонки, ТипЧисло);
		КолонкиТаблицыТоваров.Добавить(Новый РеквизитФормы(ИмяКолонки, ТипЧисло, "Товары", Элемент.Значение.Наименование, Истина)); КонецЦикла;
		
	
	ИзменитьРеквизиты(КолонкиТаблицыТоваров);
	
	// Удалим колонки на форме
		
	Пока Элементы.Товары.ПодчиненныеЭлементы.Количество() > 2 Цикл
		Элементы.Удалить(Элементы.Товары.ПодчиненныеЭлементы[Элементы.Товары.ПодчиненныеЭлементы.Количество() - 1]); КонецЦикла;
	
	// Добавим колонки на форме
	
	ЦветБыло = Метаданные.ЭлементыСтиля.ЦветТекстаНезарезервированногоТовара.Значение;
	
	Для Каждого Элемент Из СоответствияИмен Цикл 
		
		НоваяГруппа = Элементы.Добавить("Гр" + Элемент.Ключ, Тип("ГруппаФормы"), Элементы.Товары);	
		НоваяГруппа.Заголовок 			= Элемент.Значение.Наименование;
		НоваяГруппа.Вид 				= ВидГруппыФормы.ГруппаКолонок;
		НоваяГруппа.ОтображатьВШапке 	= Истина;
		НоваяГруппа.Группировка 		= ГруппировкаКолонок.Горизонтальная;
		
		ДобавитьПолеФормы("Ст" + Элемент.Ключ, "было",,,,,ЦветБыло, Истина, НоваяГруппа);
		ДобавитьПолеФормы(Элемент.Ключ, 		"мин", 	"ОстатокПриИзменении",,,,,,НоваяГруппа); 
		ДобавитьПолеФормы("Рек" + Элемент.Ключ, "рек", 	"РекомендуемПриИзменении",,,,,,НоваяГруппа); КонецЦикла;
	
	
	// Заполним строки
	
	Если Открыт Тогда	ЗагрузитьСписокТоваров(Таблица);
	Иначе	 			ИзменитьСписокТоваров(Таблица); КонецЕсли;
	
	// Обновим старыми остатками "было"
	
	//ОбновитьЗначенияБыло();
	  
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСписокСкладов()
	
	ВрТаблица = Объект.Товары.Выгрузить(,"Склад");
	ВрТаблица.Свернуть("Склад");
	
	СписокСкладов.ЗагрузитьЗначения(ВрТаблица.ВыгрузитьКолонку("Склад"));
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСписокТоваров(Таблица)
	
	ТЗ 					= Объект.Товары.Выгрузить();
	ТаблицаБыло 		= ПолучитьтаблицуБыло(ТЗ.ВыгрузитьКолонку("Номенклатура"));
	СоответствияСкладов = ПолучитьСоответствияСкладов();
	
	Для Каждого Строка Из ТЗ Цикл
		
		Строки = Таблица.НайтиСтроки(Новый Структура("Номенклатура", Строка.Номенклатура));
		
		Если Не Строки.Количество() Тогда
			НовСтрока = Таблица.Добавить();
			НовСтрока.Номер	= Таблица.Количество();
			НовСтрока.Номенклатура 	= Строка.Номенклатура;
		Иначе
			НовСтрока = Строки[0]; КонецЕсли;

		Если Не Строка.Склад.Пустая() Тогда
			
			ИмяКолонки = СоответствияСкладов[Строка.Склад];
			Если ИмяКолонки <> Неопределено Тогда
		
				НовСтрока[ИмяКолонки] 			= Строка.МинимальныйОстаток;
				НовСтрока["Рек"+ ИмяКолонки] 	= Строка.РекомендуемыйОстаток;
				НовСтрока["Ст" + ИмяКолонки] 	= СкокоБыло(ТаблицаБыло, Строка.Номенклатура, Строка.Склад); КонецЕсли; КонецЕсли; КонецЦикла;
	
	// Загрузим
	
	Товары.Загрузить(Таблица);

КонецПроцедуры
&НаСервере
Процедура ИзменитьСписокТоваров(Таблица)
	
	СоответствияСкладов = ПолучитьСоответствияСкладов();
	ТаблицаБыло 		= ПолучитьтаблицуБыло(Товары.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
	
	Для Каждого Строка Из Товары Цикл
		Для Каждого СтрокаСклад Из СписокСкладов Цикл
			
			НовСтрока = Таблица.Добавить();
			НовСтрока.Номер	= Таблица.Количество();
			НовСтрока.Номенклатура 	= Строка.Номенклатура;
			
			ИмяКолонки = СоответствияСкладов[СтрокаСклад.Значение];
			Если ИмяКолонки <> Неопределено Тогда
		
				НовСтрока[ИмяКолонки] 			= Строка[ИмяКолонки];
				НовСтрока["Рек" + ИмяКолонки] 	= Строка["Рек" + ИмяКолонки];
				НовСтрока["Ст" + ИмяКолонки] 	= СкокоБыло(ТаблицаБыло, Строка.Номенклатура, СтрокаСклад.Значение); КонецЕсли; КонецЦикла; КонецЦикла;
	
	Товары.Загрузить(Таблица);
	
КонецПроцедуры
&НаСервере
Функция СкокоБыло(ТаблицаБыло, текНоменклатура, текСклад)
	
	СтрокиБыло = ТаблицаБыло.НайтиСтроки(Новый Структура("Номенклатура, Склад", текНоменклатура, текСклад));
	Возврат ?(СтрокиБыло.Количество(), СтрокиБыло[0].Остаток, 0);
	
КонецФункции
&НаСервере
Функция ПолучитьтаблицуБыло(МассивНоменклатуры)
	
	Запрос = Новый Запрос("ВЫБРАТЬ Товар Номенклатура, Склад, МинимальныйОстаток Остаток ИЗ РегистрСведений.МинимальныеОстаткиНаСкладе.СрезПоследних(" + ?(Объект.Проведен,"&Дата","") + ",Товар В(&Товары))");
	Запрос.УстановитьПараметр("Дата", Объект.Дата - 1);
	Запрос.УстановитьПараметр("Товары", МассивНоменклатуры);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Функция ПолучитьСоответствияИменКолонок()
	
	Соответствия = Новый Соответствие;
	Для Каждого Элемент Из СписокСкладов Цикл Соответствия.Вставить("Остаток" + СтрЗаменить(Строка(Элемент.Значение.УникальныйИдентификатор()),"-",""), Элемент.Значение) КонецЦикла;
	
	Возврат Соответствия;
	
КонецФункции

&НаСервере
Функция ПолучитьСоответствияСкладов()
	
	Соответствия	= Новый Соответствие;
		
	Для Каждого Элемент Из СписокСкладов Цикл 
					
		Соответствия.Вставить(Элемент.Значение, "Остаток" + СтрЗаменить(Строка(Элемент.Значение.УникальныйИдентификатор()),"-",""));
		
	КонецЦикла;
	
	Возврат Соответствия;
	
КонецФункции

&НаСервере
Функция ВыбратьСписокСкладов()
	
	Запрос = Новый Запрос("ВЫБРАТЬ Ссылка Склад ИЗ Справочник.Склады ГДЕ ПометкаУдаления = Ложь УПОРЯДОЧИТЬ ПО Наименование");
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Возврат  ТЗ.ВыгрузитьКолонку("Склад");
	
КонецФункции

&НаСервере
Функция ДобавитьПолеФормы(Имя, Заголовок = Неопределено, ОбработчикПриИзменении = "", ОбработчикНачалоВыбора = "", ЦветФона = Неопределено, ЦветФонаЗаголовка = Неопределено, ЦветТекста = Неопределено, ТолькоПросмотр = Ложь, текРодитель = Неопределено)
	
	НовоеПоле = Элементы.Добавить(Имя, Тип("ПолеФормы"), ?(текРодитель = Неопределено, Элементы.Товары, текРодитель));	
	НовоеПоле.ПутьКДанным 			= "Товары." + Имя;
	НовоеПоле.Заголовок 			= ?(ЗначениеЗаполнено(Заголовок), Заголовок, Имя);
	НовоеПоле.РежимРедактирования 	= РежимРедактированияКолонки.Непосредственно;
	НовоеПоле.Вид 					= ВидПоляФормы.ПолеВвода;
	
	Если ЦветФонаЗаголовка <> Неопределено Тогда 	НовоеПоле.ЦветФонаЗаголовка = ЦветФонаЗаголовка; КонецЕсли;
	Если ЦветФона <> Неопределено Тогда 			НовоеПоле.ЦветФона 			= ЦветФона;КонецЕсли;
	Если ЦветТекста <> Неопределено Тогда 			НовоеПоле.ЦветТекста 		= ЦветТекста; КонецЕсли;
	Если ТолькоПросмотр Тогда 						НовоеПоле.ТолькоПросмотр 	= ТолькоПросмотр; КонецЕсли;
		
	Если ЗначениеЗаполнено(ОбработчикПриИзменении) Тогда
		НовоеПоле.УстановитьДействие("ПриИзменении", ОбработчикПриИзменении); КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбработчикНачалоВыбора) Тогда
		НовоеПоле.УстановитьДействие("НачалоВыбора", ОбработчикНачалоВыбора); КонецЕсли;
	
	Возврат НовоеПоле;
	
КонецФункции

&НаСервере
Процедура ВнестиИзмененияВТовары(СтруктураПоиска, Значение)
	
	//	Строки = Объект.Товары.НайтиСтроки(СтруктураПоиска);								
	//	Если Строки.Количество() Тогда
	//		
	//		Строки[0].Номенклатура = Значение;
	//		
	//	Иначе
	//		Строка = Объект.Товары.Добавить();
	//		Строка.Номенклатура = Значение;
	//	КонецЕсли;
	//
КонецПроцедуры

&НаСервере
Процедура ВнестиОстатокВТовары(СтруктураТоваров, Значение)
	
	//Строки = Объект.Товары.НайтиСтроки(СтруктураТоваров);
	//
	//Если Строки.Количество() Тогда
	//	
	//	Строки[0].МинимальныйОстаток = Значение;
	//	
	//Иначе             
	//	НоваяСтрока = Объект.Товары.Добавить();
	//	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураТоваров);
	//	НоваяСтрока.МинимальныйОстаток = Значение;
	//	
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьЛишниеКолонки()

	//СоответствиеСкладов = ПолучитьСоответствияСкладов();
	////текТовары			= Объект.Товары;
	//КолСтрок			= Товары.Количество();
	//
	//Для Ном = 1 По КолСтрок Цикл 
	//	Строка = Товары[КолСтрок - Ном]; 
	//		Если СоответствиеСкладов[Строка.Склад] = Неопределено Тогда Товары.Удалить(Строка); КонецЕсли; КонецЦикла;
	//	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТабличнуюЧасть() 
	
	Объект.Товары.Очистить();
	СоответствиеСкладов = ПолучитьСоответствияСкладов();
	
	Для Каждого СтрокаТовар Из Товары Цикл ТекТовар = СтрокаТовар.Номенклатура;
		Для Каждого СтрокаСклад Из СписокСкладов Цикл
			
		    ТекСклад = СтрокаСклад.Значение;
			
			НоваяСтрока 	=  Объект.Товары.Добавить();
			КолонкаОстаток 	= СоответствиеСкладов[ТекСклад];
			НоваяСтрока.Склад 					= ТекСклад;
		    НоваяСтрока.Номенклатура 			= ТекТовар;
			НоваяСтрока.МинимальныйОстаток 		= СтрокаТовар[КолонкаОстаток]; 
			НоваяСтрока.РекомендуемыйОстаток 	= СтрокаТовар["Рек" + КолонкаОстаток];  КонецЦикла; КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПрисвоитьПустоеЗначение()
	
	РедНоменклатура = Справочники.Номенклатура.ПустаяСсылка();
	
КонецПроцедуры


// ОБРАБОТЧИКИ РЕКВИЗИТОВ ФОРМЫ

&НаКлиенте
Процедура СписокСкладовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Склады = ВыбратьСписокСкладов();
	
	СписокВыбора = Новый СписокЗначений;
	
	СписокВыбора.ЗагрузитьЗначения(Склады);
	
	Для Каждого ЭлементСписка Из СписокВыбора Цикл
		
		ЭлементСписка.Пометка = СписокСкладов.НайтиПоЗначению(ЭлементСписка.Значение) <> Неопределено;
		
	КонецЦикла;

	Если СписокВыбора.ОтметитьЭлементы("Выбор склада:") Тогда
		
		// Созадим список
		
		СписокСкладов.Очистить();
		Для Каждого ЭлементСписка Из СписокВыбора Цикл
			Если ЭлементСписка.Пометка Тогда
			
				СписокСкладов.Добавить(ЭлементСписка.Значение);
				
			КонецЕсли;
		КонецЦикла;
		
		СформироватьТаблицуТоваров(Ложь);
	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОстатокПриИзменении(Элемент)
	
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	
	// Сделаем рекомендуемый не меньше минимума
	
	Если ТекДанные["Рек" + Элемент.Имя] < ТекДанные[Элемент.Имя] Тогда
		ТекДанные["Рек" + Элемент.Имя] = ТекДанные[Элемент.Имя]; КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура РекомендуемПриИзменении(Элемент)
	
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	
	// Сделаем рекомендуемый не меньше минимума
	
	ИмяОстаток = Прав(Элемент.Имя, стрДлина(Элемент.Имя) - 3);
	
	Если ТекДанные[Элемент.Имя] < ТекДанные[ИмяОстаток] Тогда
		ТекДанные[ИмяОстаток] = ТекДанные[Элемент.Имя]; КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСкокоБылоПоСтроке(Индекс)
	
	МассивНоменклатуры = Новый Массив; МассивНоменклатуры.Добавить(Товары[Индекс].Номенклатура);
	ТаблицаБыло = ПолучитьтаблицуБыло(МассивНоменклатуры);
		
	СоответствияСкладов = ПолучитьСоответствияСкладов();
	
	Для Каждого СтрокаСклад Из СписокСкладов Цикл
			
		ИмяКолонки = СоответствияСкладов[СтрокаСклад.Значение];
		Если ИмяКолонки <> Неопределено Тогда

			НайдСтроки = ТаблицаБыло.НайтиСтроки(Новый Структура("Номенклатура, Склад", Товары[Индекс].Номенклатура, СтрокаСклад.Значение));
			Товары[Индекс]["Ст" + ИмяКолонки] = ?(НайдСтроки.Количество(), НайдСтроки[0].Остаток, 0); КонецЕсли; КонецЦикла;
	
КонецПроцедуры
&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
 	ОбновитьСкокоБылоПоСтроке(Товары.Индекс(Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока)));
										
КонецПроцедуры

									
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗагрузитьСписокСкладов();
	СформироватьТаблицуТоваров(Истина);
	
	// информация о товаре
	РаботаСНоменклатурой.ДобавитьОперативнуюИнформациюОТоваре(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	УдалитьЛишниеКолонки();

	ЗаполнитьТабличнуюЧасть();
	
КонецПроцедуры


// ОСНОВНЫЕ ДЕЙСТВИЯ ФОРМЫ

&НаКлиенте
Процедура ДополнительныеРеквизиты(Команда)
	
	ФункцииФормДокументов.ОткрытьОбщиеРеквизиты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВниз(Команда)
	
	Если Элементы.Товары.ТекущаяСтрока <> Неопределено Тогда
		
		текИнд 	= Товары.Индекс(Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока));
		сдвиг 	= ?(текИнд = Товары.Количество() - 1, -1 *(Товары.Количество() - 1), 1);
	
		Товары.Сдвинуть(текИнд, сдвиг); КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ПереместитьВверх(Команда)
	
	Если Элементы.Товары.ТекущаяСтрока <> Неопределено Тогда
	
		текИнд 	= Товары.Индекс(Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока));
		сдвиг 	= ?(Не текИнд, Товары.Количество() - 1, -1);
		
		Товары.Сдвинуть(текИнд, сдвиг); КонецЕсли;
	
КонецПроцедуры

// ИНФОРМАЦИЯ О ТОВАРЕ

&НаСервере
Процедура ОбработатьОтображениеИнформацииОТоваре() Экспорт
	РаботаСНоменклатурой.ОбработатьОтображениеИнформацииОТоваре(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ИнфТовараТекстHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	РаботаСНоменклатуройКлиент.ИнфТовараТекстHTMLПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры
&НаКлиенте
Процедура ИнфТовараЗаголовокHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	РаботаСНоменклатуройКлиент.ИнфТовараЗаголовокHTMLПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры

 &НаКлиенте
Процедура ПоказатьСкрытьИнфОТоваре(Команда)
	РаботаСНоменклатуройКлиент.ПоказатьСкрытьИнфОТоваре(ЭтаФорма);
КонецПроцедуры
&НаКлиенте
Процедура НастройкаИнфОТоваре(Команда) 
	РаботаСНоменклатуройКлиент.НастройкаИнфОТоваре(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
		// информация о товаре
	ОбработатьОтображениеИнформацииОТоваре()	
	
КонецПроцедуры

// ПОДБОР

&НаСервере
Функция ПоместитьТоварыВХранилище() 
	
	ПустаяТЗ =  Новый ТаблицаЗначений;
//	ПустаяТЗ.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ПустаяТЗ = Товары.Выгрузить().СкопироватьКолонки();
	
	Возврат ПоместитьВоВременноеХранилище(
					ПустаяТЗ, 
					УникальныйИдентификатор);
КонецФункции
&НаКлиенте
Процедура ПодборВыполнить()
	
	ИмяТабличнойЧасти = "Товары";
	
	АдресТоваровВХранилище = ПоместитьТоварыВХранилище();
	ПараметрыПодбора = Новый Структура("АдресТоваровВХранилище", АдресТоваровВХранилище);
	
	СтруктураКолонокТовары = ФункцииФормДокументов.ПолучитьСтруктуруКолонокТовары(Элементы.Товары, Истина, , , , , Истина);

	ПараметрыПодбора.Вставить("СтруктураКолонокТовары", СтруктураКолонокТовары);
	//ПараметрыПодбора.Вставить("ВидЗапроса", "СписокНоменклатуры");
	//ПараметрыПодбора.Вставить("ВидыЗапросов", "ОстаткиНоменклатуры");
	
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаПодбора", ПараметрыПодбора, Элементы.Товары);
	
КонецПроцедуры
&НаКлиенте
Процедура ТоварыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение <> Неопределено Тогда		
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
			ПолучитьТоварыИзХранилища(ВыбранноеЗначение.Товары);		// получаем
			УдалитьИзВременногоХранилища(ВыбранноеЗначение.Товары); 	// заметаем следы
		Иначе
			ПолучитьТоварыИзХранилища(ВыбранноеЗначение);		// получаем
			УдалитьИзВременногоХранилища(ВыбранноеЗначение); 	// заметаем следы
		КонецЕсли;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры
&НаСервере
Процедура ПолучитьТоварыИзХранилища(АдресТоваровВХранилище)
	
	КонвертацияТипов.ДобавитьТаблицуКДругойТаблице(Товары, ПолучитьИзВременногоХранилища(АдресТоваровВХранилище));
	
КонецПроцедуры


// КОРЗИНА
#Если Не ВебКлиент Тогда
&НаСервере
Процедура ДобавитьИзКорзиныНаСервере(ИмяКомпа, СтруктураКолонокТовары, КолСтрок)
	
	МодульКорзины.ПолучитьТоварИзКорзины(Элементы.Товары, Товары, СтруктураКолонокТовары, ИмяКомпа, КолСтрок);
	
КонецПроцедуры
#КонецЕсли

#Если Не ВебКлиент Тогда
&НаКлиенте
Процедура ВставитьИзКорзины(Команда)
	
	КолСтрок = 0;
	ДобавитьИзКорзиныНаСервере(ИмяКомпьютера(), СтруктураКолонокТовары, КолСтрок);
	
	Если КолСтрок Тогда
		
		МодульКорзины.ОповеститьОВставкеТовараВДокумент(КолСтрок, Товары.Количество());
		
	Иначе
		
		МодульКорзины.ОповеститьЧтоНечегоДобавлять();
		
	КонецЕсли;
	

КонецПроцедуры
#КонецЕсли

#Если Не ВебКлиент Тогда
&НаСервере
Функция ПоложитьВКорзинуНаСервере(ВыделенныеИндексы, ИмяКомпа, КолВКорзине)
	
	Возврат МодульКорзины.ПоложитьТоварВКорзину(Товары, ВыделенныеИндексы, ИмяКомпа, КолВКорзине);
	
КонецФункции
#КонецЕсли

#Если Не ВебКлиент Тогда
&НаКлиенте
Процедура ДобавитьВКорзину(Команда)
	
	ВыделенныеИндексы 	= МодульКорзины.ПолучитьВыделенныеСтрокиТоваров(Элементы.Товары, Товары);
	КолВКорзине 		= 0;
	КолТовара			= ВыделенныеИндексы.Количество();
	
	
	Если КолТовара Тогда
		
		Если ПоложитьВКорзинуНаСервере(ВыделенныеИндексы, ИмяКомпьютера(), КолВКорзине) Тогда
			МодульКорзины.ОповеститьОПомещенииТовара(КолТовара, КолВКорзине);
		КонецЕсли;
		
	Иначе
		
		МодульКорзины.ОповеститьЧтоНечегоДобавлять();
				
	КонецЕсли;

КонецПроцедуры
#КонецЕсли

#Если Не ВебКлиент Тогда
&НаКлиенте
Процедура РедактироватьТоварВКорзине(Команда)
	
	ОткрытьФорму("РегистрСведений.Корзина.Форма.Форма");
	
КонецПроцедуры
#КонецЕсли

#Если Не ВебКлиент Тогда
&НаСервере
Функция ОчиститьНаСервере(ИмяКомпа)
	
	Возврат МодульКорзины.ОчиститьКорзину(ИмяКомпа);
	
КонецФункции
#КонецЕсли

#Если Не ВебКлиент Тогда
&НаКлиенте
Процедура ОчиститьКорзину(Команда)
	
	Если ОчиститьНаСервере(ИмяКомпьютера()) Тогда
		
		МодульКорзины.ОповеститьЧтоКорзинаОчищена();
		
	КонецЕсли;

КонецПроцедуры
#КонецЕсли

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	СтруктураКолонокТовары = ФункцииФормДокументов.ПолучитьСтруктуруКолонокТовары(Элементы.Товары,,,,,,);

КонецПроцедуры

// МЕНЮ - "ЗАГРУЗИТЬ"
&НаКлиенте
Процедура ЗагрузитьДанныеExcel(Команда)
	  ЗагрузитьВнешниеДанные(Команда.Имя);
КонецПроцедуры
&НаКлиенте
Процедура ЗагрузитьДанныеТабличногоДокумента(Команда)
	  ЗагрузитьВнешниеДанные(Команда.Имя);
КонецПроцедуры
&НаКлиенте
Процедура ЗагрузитьВнешниеДанные(ИмяКоманды)
	
	АдресТоваровВХранилище = ПоместитьТоварыВХранилище();
	// грузим значения для первого по списку склада
	ИдентификаторСклада =  ?(СписокСкладов.Количество(), СтрЗаменить(Строка(СписокСкладов[0].Значение.УникальныйИдентификатор()),"-",""), Неопределено);
	
	ОткрытьФорму("Документ.ЗаказПокупателя.Форма.ЗагрузкаДанных", Новый Структура("Страница, СтруктураКолонокТовары, ИмяТаблицы, АдресТоваровВХранилище, ЗагрузитьРекомендуемоеКоличество, ИдентификаторСклада", ИмяКоманды, Неопределено, "Товары", АдресТоваровВХранилище, ИдентификаторСклада <> Неопределено, ИдентификаторСклада), Элементы.Товары);
	
КонецПроцедуры


&НаКлиенте
Процедура ЗагрузитьИзФайлаExcel(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("УникальныйИдентификатор",  УникальныйИдентификатор);
	ОповещениеЗакрытия = Новый ОписаниеОповещения("ЗагрузитьИзФайлаExcelЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.УстановкаМинимальногоОстатка.Форма.ФормаЗагрузкиExcel", ПараметрыФормы, ЭтотОбъект,,,,ОповещениеЗакрытия);

КонецПроцедуры
&НаКлиенте
Процедура ЗагрузитьИзФайлаExcelЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт 
	Если ЭтоАдресВременногоХранилища(РезультатЗакрытия) Тогда
		СписокСкладов.Очистить();
		Товары.Очистить();

	    МассивОшибокСклады = Новый Массив;
		МассивОшибокНоменклатура = Новый Массив;
		ЗаполнитьТоварыИзХранилищаНаСервере(РезультатЗакрытия,МассивОшибокСклады,МассивОшибокНоменклатура);
		ОчиститьСообщения();
	     Если МассивОшибокСклады.Количество() Тогда
		 	ПоказатьПредупреждение(,"Не удалось сопоставить все склады. Заполнение прервано!");
			Для каждого Эл Из МассивОшибокСклады Цикл
				
				Сообщить(Эл);
			КонецЦикла;
		КонецЕсли;
		
		Если МассивОшибокНоменклатура.Количество() Тогда
			ПоказатьПредупреждение(,"Не удалось сопоставить некоторое позиции номенклатуры!");
			Для каждого Эл Из МассивОшибокНоменклатура Цикл
				Сообщить(Эл);
			КонецЦикла;
		КонецЕсли;

	КонецЕсли;
КонецПроцедуры // ПодборСОтборомЗавершение()
&НаСервереБезКонтекста
Функция СправочникСкладыНайтиПоТочномуКоду(Код)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Склады.Ссылка
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	Склады.Код = &Код
		|	И НЕ Склады.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Код", Код);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
КонецФункции	
&НаСервере
Процедура ЗаполнитьТоварыИзХранилищаНаСервере(АдресХранилища,МассивОшибокСклады,МассивОшибокНоменклатура)
	Структура =  ПолучитьИзВременногоХранилища(АдресХранилища);
	СписокКодовСкладов = Структура.СписокКодовСкладов;
	ЕстьОшибки = Ложь;
	Для каждого Эл Из СписокКодовСкладов Цикл
		//Спр = Справочники.Склады.НайтиПоКоду(Эл.Значение);
		Спр = СправочникСкладыНайтиПоТочномуКоду(Эл.Значение);
		Если НЕ ЗначениеЗаполнено(Спр) Тогда
			ЕстьОшибки = Истина;
			МассивОшибокСклады.Добавить("Не найден склад с кодом: " + Эл.Значение);
		Иначе
			СписокСкладов.Добавить(Спр);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	СформироватьТаблицуТоваров(Ложь);
    ТЗ = Структура.ТЗ;
	Соответствие = ПолучитьСоответствияИменКолонок();
	СоответствиеИмен = Новый Соответствие;
	Для каждого Эл Из Соответствие Цикл
		СоответствиеИмен.Вставить(Эл.Значение, СтрЗаменить(Эл.Ключ,"Остаток","")) 
	КонецЦикла;
	Для каждого Эл Из ТЗ Цикл
		Если СокрЛП(Эл.Артикул) = "" Тогда
		    Продолжить;
		КонецЕсли;
		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.Номенклатура = Справочники.Номенклатура.НайтиПореквизиту("Артикул",Эл.Артикул); 
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
			МассивОшибокНоменклатура.Добавить("Не найдена номенклатура с артикулом: " + Эл.Артикул);// + " строка: " + (Товары.Индекс(НоваяСтрока) + 1));
		КонецЕсли;
		Сч = 0;
		СчСклад = 0;
		Пока СчСклад <= СписокСкладов.Количество() - 1 Цикл
			Склад = СписокСкладов[СчСклад].Значение;
			НоваяСтрока["Остаток" +  СоответствиеИмен[Склад]] = Эл[Сч + 3];
			НоваяСтрока["РекОстаток" + СоответствиеИмен[Склад]] = Эл[Сч + 4];
			Сч = Сч + 2;
			СчСклад = СчСклад + 1;
		КонецЦикла;
	КонецЦикла;
   
	Модифицированность = Истина;
	
КонецПроцедуры // ЗаполнитьСтавкиИзХранилищаНаСервере()
 




