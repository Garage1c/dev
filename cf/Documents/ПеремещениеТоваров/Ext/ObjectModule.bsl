Функция ПолучитьСкладСписания() Экспорт Возврат СкладОтправитель КонецФункции
Функция ПолучитьТекстЗапросаПолученияСпискаТоваров() Экспорт
	
	Возврат "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары
	|ГДЕ
	|	Ссылка = &ДокументСсылка
	|";
	
КонецФункции
Функция ПолучитьТекстЗапросаПолученияСпискаРезервируемыхТоваров() Экспорт
	
	Возврат "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары
	|ГДЕ
	|	Ссылка = &ДокументСсылка 
	//|И
	//|	ЕСТЬNULL(ДокументРезерва, НЕОПРЕДЕЛЕНО) <> НЕОПРЕДЕЛЕНО И
	//|	НЕ ДокументРезерва.Номер ЕСТЬ NULL
	|";
	
КонецФункции

Процедура ЗаполнитьСкладИзШапки(ИмяСклада) Экспорт
	
	Склад = ЭтотОбъект[ИмяСклада];
	
	Если Не Склад.Пустая() Тогда
	
		СтрокиБезСкладов = Товары.НайтиСтроки(Новый Структура(ИмяСклада, Справочники.Склады.ПустаяСсылка()));		
		
		Для Каждого Строка ИЗ СтрокиБезСкладов Цикл
			
			Строка[ИмяСклада] = Склад;
			
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры

// ПРЕДОПРЕДЕЛЕННЫЕ ФУНКЦИИ

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Подготовка
	
	Заголовок = КонтрольПроведения.ПолучитьСтандарнтыйЗаголовокПриПроведенииДокумента(Ссылка);
	
	Документы[Метаданные().Имя].ИницилизироватьДополнительныеДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Последовательности
	
	//avdonin {{12.09.2010#
	//
	ПроведенияДокументов.ПоследовательностьОстаткиТоваров(ДополнительныеСвойства, ПринадлежностьПоследовательностям, Отказ);
	//}}avdonin
	
	// Проведение
	
	//ПроведенияДокументов.ТоварыНаСкладах(ДополнительныеСвойства, Движения, Отказ);
	
	ПроведенияДокументов.ПровестиПоВсемРегистрам(Метаданные().Движения, ДополнительныеСвойства, Движения, Отказ);
	
	// Запись
	
	Движения.Записать();
	
	// Контроль
	
	КонтрольПроведения.ПроверитьПоВсемРегистрам(ЭтотОбъект, Отказ, Заголовок);
	
	////Если Не РольДоступна("ПолныеПрава") тогда
	//		
	//	//avdonin {{21.09.2010#
	//	//
	//	Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
	//		КонтрольПроведения.ПроверитьТоварыНаСкладах(
	//			ЭтотОбъект, 
	//			СкладОтправитель, 
	//			?(ДополнительныеСвойства.ПараметрыСистемы.КонтрольОстатков, Отказ, Ложь),
	//			Заголовок);
	//			
	//		КонтрольПроведения.ПроверитьТоварыНаСкладах(
	//			ЭтотОбъект, 
	//			СкладПолучатель, 
	//			?(ДополнительныеСвойства.ПараметрыСистемы.КонтрольОстатков, Отказ, Ложь),
	//			Заголовок);
	//	Иначе
	//		КонтрольПроведения.ПроверитьТоварыНаСкладахНЕОперативно(ЭтотОбъект, Отказ, Заголовок);
	//	КонецЕсли;
	//	//}}avdonin			
	//	
	//	
	//	Если Не Отказ Тогда
	//		КонтрольПроведения.ПроверитьТоварыВЯчейках(ЭтотОбъект, СкладОтправитель, Отказ, Заголовок);
	//	КонецЕсли;
		
	//КонецЕсли;
	
КонецПроцедуры
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Подготовка

	Заголовок = КонтрольПроведения.ПолучитьСтандарнтыйЗаголовокПриОтменеПроведенияДокумента(Ссылка);
	
	//avdonin {{12.09.2010#
	// надо опять инициализировать доп. свойства для контроля остатка (чтобы тянуть информацию только по тем остаткам, которые изменялись)
	// в контроле по идее имеет смысл указывать, что это отмена проведения или передавать движения
	Документы[Метаданные().Имя].ИницилизироватьДополнительныеДанныеДокумента(Ссылка, ДополнительныеСвойства);
	//}}avdonin
	
	// Последовательности
	
	//avdonin {{12.09.2010#
	// последний параметр - признак отмены проведения
	ПроведенияДокументов.ПоследовательностьОстаткиТоваров(ДополнительныеСвойства, ПринадлежностьПоследовательностям, Отказ, Истина);
	//}}avdonin
	
	// Запись
	
	Движения.ТоварыНаСкладах.Очистить();
	Движения.Записать();
	
	// Контроль
	
	КонтрольПроведения.ПроверитьПоВсемРегистрам(ЭтотОбъект, Отказ, Заголовок);
	
	//КонтрольПроведения.ПроверитьТоварыНаСкладах(
	//		ЭтотОбъект, 
	//		СкладОтправитель, 
	//		Отказ,
	//		Заголовок);
	//		
	//КонтрольПроведения.ПроверитьТоварыНаСкладах(
	//		ЭтотОбъект, 
	//		СкладПолучатель, 
	//		Отказ,
	//		Заголовок);
	//
	////avdonin {{22.09.2010#
	//// выше правда делается оперативный контроль
	//КонтрольПроведения.ПроверитьТоварыНаСкладахНЕОперативно(ЭтотОбъект, Отказ, Заголовок, Истина);
	//}}avdonin
		
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// Если склад не заполнен тогда заполним его из шапок
	
	//ЗаполнитьСкладИзШапки("СкладОтправитель");
	//ЗаполнитьСкладИзШапки("СкладПолучатель");
	
		//наборЗаписей = ПринадлежностьПоследовательностям.ОстаткиТоваров;
		//наборЗаписей.Очистить();
		//
		//Запрос = Новый Запрос;
		//Запрос.Текст = "ВЫБРАТЬ
		//|	ПеремещениеТоваровТовары.Номенклатура,
		//|	Ссылка.СкладОтправитель,
		//|	Ссылка.СкладПолучатель
		//|ИЗ
		//|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
		//|ГДЕ
		//|	ПеремещениеТоваровТовары.Ссылка = &Ссылка";
		//
		//Запрос.УстановитьПараметр("Ссылка", Ссылка);
		//
		//Результат = Запрос.Выполнить();
		//Выборка = Результат.Выбрать();
		//
		//Пока Выборка.Следующий() Цикл
		//	новСтрока = наборЗаписей.Добавить();
		//	новСтрока.Склад = Выборка.СкладОтправитель;
		//	новСтрока.Номенклатура = Выборка.Номенклатура;
		//	новСтрока.Период = Дата;
		//	
		//	новСтрока = наборЗаписей.Добавить();
		//	новСтрока.Склад = Выборка.СкладПолучатель;
		//	новСтрока.Номенклатура = Выборка.Номенклатура;
		//	новСтрока.Период = Дата;
		//КонецЦикла;
	
	
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если СкладОтправитель.Ячеестый И ТипЗнч(Основание) <> Тип("БизнесПроцессСсылка.ПеремещениеТоваров") Тогда
		ПроверяемыеРеквизиты.Добавить("Товары.ЯчейкаОтправитель");
	КонецЕсли;
	
	Если СкладПолучатель.Ячеестый Тогда
		ПроверяемыеРеквизиты.Добавить("Товары.ЯчейкаПолучатель");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Основание = ДанныеЗаполнения;
	
	ТипЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипЗаполнения = Тип("Структура") Тогда
		
		КонвертацияТипов.ЗаполнитьОбъектПоСтруктуреОснованию(ЭтотОбъект, ДанныеЗаполнения);
	
	ИначеЕсли ТипЗаполнения = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
		
		СкладПолучатель 	= ДанныеЗаполнения.Заказчик;
		СкладОтправитель 	= ДанныеЗаполнения.Склад;
		СнятьРезерв			= Истина;
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ 
		|	Номенклатура, Количество, Упаковка,
		|	ВЫБОР КОГДА Размещение = &ПустойСклад ТОГДА НЕОПРЕДЕЛЕНО ИНАЧЕ &Заказ КОНЕЦ ДокументРезерва
		|ИЗ
		|	Документ.ВнутреннийЗаказ.Товары
		|ГДЕ
		|	Ссылка = &Заказ
		|");
		
		Запрос.УстановитьПараметр("Заказ", 			ДанныеЗаполнения);
		Запрос.УстановитьПараметр("ПустойСклад", 	Справочники.Склады.ПустаяСсылка());
		
		Товары.Загрузить(Запрос.Выполнить().Выгрузить());
		
	ИначеЕсли ТипЗаполнения = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда
		
		СкладОтправитель 	= ДанныеЗаполнения.Склад;
		СнятьРезерв			= Истина;
		Основание			= ДанныеЗаполнения.Ссылка;
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ 
		|	Ячейка ЯчейкаОтправитель, Номенклатура, Количество, Упаковка, Цена, СтавкаНДС, Сумма
		|ИЗ
		|	Документ.ПоступлениеТоваров.Товары
		|ГДЕ
		|	Ссылка = &Заказ
		|");
		
		Запрос.УстановитьПараметр("Заказ", 			ДанныеЗаполнения);
		Запрос.УстановитьПараметр("ПустойСклад", 	Справочники.Склады.ПустаяСсылка());
		
		Товары.Загрузить(Запрос.Выполнить().Выгрузить());
		
		СтруктураКолонокТовары = Новый Структура("ЕстьПроцентРучнойСкидки, ЕстьПроцентАвтоматическойСкидки, ТипЦен, Валюта, Партнер, ЕстьАкция, ЕстьЦенаПоАкции, ЕстьУпаковка, ЕстьКоличество, ЕстьЦена, ЕстьСуммаБезСкидки, ЕстьСумма, ЕстьСуммаАвтоматическойСкидки, ЕстьСуммаРучнойСкидки, ЕстьСтавкаНДС, ЕстьСуммаНДС, СуммаВключаетНДС, ЕстьВсего, ЕстьКоличествоВУпаковке",
												Ложь, Ложь, неопределено, Неопределено, Неопределено, ложь, ложь, Истина, Истина, Истина, Ложь, Истина, Ложь, Ложь, Истина, Ложь, Истина, Ложь, Истина);
												
		ФункцииФормДокументов.РассчитатьСуммыТабличныхЧастейВоВсехСтроках(Товары, СтруктураКолонокТовары);
		
	ИначеЕсли ТипЗаполнения = Тип("ДокументСсылка.ЧекККМ") Тогда
		
		СкладПолучатель 	= ДанныеЗаполнения.Склад;
		Основание			= ДанныеЗаполнения.Ссылка;
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ 
		|	Номенклатура, Количество, Упаковка, Цена, СтавкаНДС, Сумма
		|ИЗ
		|	Документ.ЧекККМ.Товары
		|ГДЕ
		|	Ссылка = &Чек
		|");
		
		Запрос.УстановитьПараметр("Чек", ДанныеЗаполнения);
		Товары.Загрузить(Запрос.Выполнить().Выгрузить());
		
	КонецЕсли;
	
КонецПроцедуры


