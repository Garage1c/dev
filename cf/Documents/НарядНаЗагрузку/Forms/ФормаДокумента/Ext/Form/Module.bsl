&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// информация о товаре
	РаботаСНоменклатурой.ДобавитьОперативнуюИнформациюОТоваре(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновитьОтображение();
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
КонецПроцедуры

// ОБНОВЛЕНИЕ ОТОБРАЖЕНИЯ
&НаКлиенте
Процедура ОбновитьОтображение()
	Элементы.КнопкаОтправить.Доступность 	  = Не Объект.ЗаказыОтправлены;
	Элементы.КнопкаОтменить.Доступность		  = Объект.ЗаказыОтправлены;
	Элементы.ТабЗаказовДоставлены.Доступность = Объект.ЗаказыОтправлены;
	
	ОбновитьСтатусыСервер(Ложь);
	//ЗагрузитьПечатьДокументов();	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПечатьДокументов()
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ИсторияПечатиПоЗаказамСрезПоследних.Заказ,
	                      |	ИсторияПечатиПоЗаказамСрезПоследних.Документ
	                      |ИЗ
	                      |	РегистрСведений.ИсторияПечатиПоЗаказам.СрезПоследних(
	                      |			,
	                      |			ТипПечатаемогоДокумента В (&ТипыПечатаемыхДокументов)
	                      |				И Заказ В (&Заказы)) КАК ИсторияПечатиПоЗаказамСрезПоследних
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ИсторияПечатиПоЗаказамСрезПоследних.Заказ,
	                      |	ИсторияПечатиПоЗаказамСрезПоследних.Документ");
	ТипыПечатаемыхДокументов = Новый Массив;
	ТипыПечатаемыхДокументов.Добавить(Перечисления.ТипыПечатаемыхДокументов.УПД);
	ТипыПечатаемыхДокументов.Добавить(Перечисления.ТипыПечатаемыхДокументов.СчетФактура);			
	Запрос.УстановитьПараметр("ТипыПечатаемыхДокументов",ТипыПечатаемыхДокументов);
	Запрос.УстановитьПараметр("Заказы",Объект.ТабЗаказов.Выгрузить(,"Заказ"));
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество()>0 Тогда
		Для Каждого ТекСтрока Из Объект.ТабЗаказов Цикл
			Если ЗначениеЗаполнено(ТекСтрока.Заказ) И ЗначениеЗаполнено(ТекСтрока.ДокументОтгрузки) И Результат.НайтиСтроки(Новый Структура("Заказ,Документ",ТекСтрока.Заказ,ТекСтрока.ДокументОтгрузки)).Количество()>0 Тогда
				ТекСтрока.ТСД = Истина;
			Иначе
				ТекСтрока.ТСД = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// КНОПКИ

&НаКлиенте
Процедура ФормаЗаписать(Команда)
	Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
	ОбновитьОтображение();
КонецПроцедуры

&НаКлиенте
Процедура СвязанныеДокументыПроцессы(Команда)
	текДанные = Элементы.ТабЗаказов.ТекущиеДанные;
	Если текДанные = Неопределено Или НЕ ЗначениеЗаполнено(ТекДанные.Заказ) Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.СвязанныеДокументыПроцессы", Новый Структура("Документ", ТекДанные.Заказ));
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТК(Команда)	
	ВыбКонтора = ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора",Новый Структура("Отбор",Новый Структура("Грузоперевозчик",Истина)),,,,,Новый ОписаниеОповещения("ОбработкаУстановкиТК",ЭтаФорма, Новый Структура()));
КонецПроцедуры
	
&НаКлиенте
Процедура ОбработкаУстановкиТК(Результат, Параметры) Экспорт
	Если Результат <> Неопределено Тогда
	
	Строки = Элементы.ТабЗаказов.ВыделенныеСтроки;
	Если Строки.Количество() Тогда Модифицированность = Истина; КонецЕсли;
	Для Каждого Строка Из Строки Цикл Объект.ТабЗаказов.НайтиПоИдентификатору(Строка).Грузоперевозчик = Результат КонецЦикла; КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура Отменить(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтотОбъект, Ложь),"Отменить наряд на загрузку?",РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтотОбъект, Истина),"Отправляем?",РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	Объект.ЗаказыОтправлены = Параметры;
	Записать(Новый Структура("РежимЗаписи", ?(Параметры=Истина,РежимЗаписиДокумента.Проведение,РежимЗаписиДокумента.ОтменаПроведения)));

	//ОчисткаЖурналаПоЗаказам();

	Модифицированность = Ложь;
	
	ОтправитьПослеЗакрытияВопросаНаСервере(Параметры);
	ОбновитьОтображение();
	//Закрыть();
КонецПроцедуры

&НаСервере
Процедура ОтправитьПослеЗакрытияВопросаНаСервере(ЭтоОтправка)
	Для Каждого ТекСтрока Из Объект.ТабЗаказов Цикл
		//Если не заполнен Заказ или ДокументОтгрузки, то не ищем задач
		Если НЕ ЗначениеЗаполнено(ТекСтрока.ДокументОтгрузки) Или НЕ ЗначениеЗаполнено(ТекСтрока.Заказ) Тогда
			Продолжить;
		КонецЕсли;
		//Задачи для Реализации и Передачи
		Если ТипЗнч(ТекСтрока.ДокументОтгрузки)=Тип("ДокументСсылка.РеализацияТоваров") ИЛИ ТипЗнч(ТекСтрока.ДокументОтгрузки)=Тип("ДокументСсылка.ПередачаТовара") Тогда
			Если НЕ НайтиВыполнитьЗадачу(ТекСтрока.Заказ,ТекСтрока.ДокументОтгрузки,ЭтоОтправка) Тогда
				//Сообщить("Задача уже была выполнена ранее "+ТекСтрока.Заказ+" "+ТекСтрока.ДокументОтгрузки);
			КонецЕсли;
		ИначеЕсли ЭтоОтправка И ТипЗнч(ТекСтрока.ДокументОтгрузки) = Тип("ДокументСсылка.ЗаказНаПеремещение") Тогда
			//Если внутренний заказ, то нужно завершить задачу отправки товара, если она есть
			ВыполнитьЗадачуПеремещения(ТекСтрока);			
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗадачуПеремещения(ТекСтрока)
	Если НЕ ЗначениеЗаполнено(ТекСтрока.ДокументОтгрузки.БПСсылка) Тогда
		Сообщить("Нельзя автоматически выполнить задачу перемещения. "+ТекСтрока.Заказ+" "+ТекСтрока.ДокументОтгрузки+" Старый заказ на перемещение, в котором не заполнен бизнес-процесс.");
		Возврат;
	КонецЕсли;
	Если ФункцииБизнесПроцессов.Перемещение_ЗадачаОтправить_ЕстьПодчиненныеНезавершенныеПроцессы(ТекСтрока.ДокументОтгрузки.БПСсылка) Тогда
		Сообщить("Нельзя автоматически выполнить задачу перемещения. "+ТекСтрока.Заказ+" "+ТекСтрока.ДокументОтгрузки+" По заказу есть подчиненные незавершенные процессы. Автоматически выполнить задачу нельзя.");
		Возврат;
	КонецЕсли;
	ЗадачаПеремещения = НайтиЗадачиПеремещенияПоБП(ТекСтрока.ДокументОтгрузки.БПСсылка);
	Если ЗадачаПеремещения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	стр = ФункцииБизнесПроцессов.Перемещение_ЗадачаОтправить_ЗаполнитьСтруктуру(ЗадачаПеремещения);
	Если 	стр.БыстроеПеремещение И
			стр.СкладПолучатель.Ячеестый И
			стр.Товары.Итог("Количество") И 
			стр.ЯчейкаПолучатель.Пустая() Тогда
		Сообщить("Нельзя автоматически выполнить задачу перемещения. "+ТекСтрока.Заказ+" "+ТекСтрока.ДокументОтгрузки+" В задаче должна быть указана ячейка приёмки. Автоматически выполнить задачу нельзя.");
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		Если ФункцииБизнесПроцессов.Перемещение_ЗадачаОтправить_СформироватьИПровестиОтправкуТовараИПроверитьБП(ЗадачаПеремещения,стр) Тогда
			ЗадОбъект = ЗадачаПеремещения.ПолучитьОбъект();
			ЗадОбъект.ДополнительныеСвойства.Вставить("КонтрольАдресации", Ложь);
			ЗадОбъект.ВыполнитьЗадачу();
			
			ЗафиксироватьТранзакцию();
		Иначе
			ОтменитьТранзакцию();
			Сообщить("Ошибка при выполнении задачи "+ТекСтрока.Заказ+" "+ТекСтрока.ДокументОтгрузки+".");
		КонецЕсли;			
	Исключение
		Сообщить("Ошибка при поиске и выполнении задачи "+ТекСтрока.Заказ+" "+ТекСтрока.ДокументОтгрузки+". "+ОписаниеОшибки());
		ОтменитьТранзакцию();
	КонецПопытки
КонецПроцедуры

&НаСервере
Функция НайтиЗадачиПеремещенияПоБП(БП)
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЗадачаПользователю.Ссылка
	                      |ИЗ
	                      |	Задача.ЗадачаПользователю КАК ЗадачаПользователю
	                      |ГДЕ
	                      |	ЗадачаПользователю.БизнесПроцесс = &БизнесПроцесс
	                      |	И ЗадачаПользователю.ТочкаМаршрута = &ТочкаМаршрута
	                      |	И НЕ ЗадачаПользователю.Выполнена
	                      |	И НЕ ЗадачаПользователю.ПометкаУдаления");
	Запрос.УстановитьПараметр("БизнесПроцесс",БП);
	Запрос.УстановитьПараметр("ТочкаМаршрута",БизнесПроцессы.ПеремещениеТоваров.ТочкиМаршрута.ОтправитьТовар);
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.Ссылка;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

&НаСервере
Функция НайтиВыполнитьЗадачу(Заказ,ДокументОтгрузки,ЭтоОтправка)
	//НачатьТранзакцию();
	//Ищем не завершённый БП ДоставкаЗаказа по документу отгрузки
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ДоставкаЗаказа.Ссылка КАК БП
	                      |ИЗ
	                      |	БизнесПроцесс.ДоставкаЗаказа КАК ДоставкаЗаказа
	                      |ГДЕ
	                      |	ДоставкаЗаказа.Заказ = &Заказ
	                      |	И ДоставкаЗаказа.ДокументОтгрузки = &ДокументОтгрузки
	                      |	И ДоставкаЗаказа.Стартован
	                      |	И НЕ ДоставкаЗаказа.Завершен");
	Запрос.УстановитьПараметр("Заказ",Заказ);
	Запрос.УстановитьПараметр("ДокументОтгрузки",ДокументОтгрузки);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Если ЭтоОтправка Тогда
			//Если такого нет и это отправка, то стартуем его
			БизнесПроцессы.ДоставкаЗаказа.СоздатьНовыйБП(Заказ,ДокументОтгрузки);
		Иначе
			//ОтменитьТранзакцию();
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	Результат = Запрос.Выполнить().Выбрать();
	Если НЕ Результат.Следующий() Тогда
		//ОтменитьТранзакцию();
		Возврат Ложь;
	КонецЕсли;
	//Ищем не выполненную задачу Отправить заказ или доставка заказа по БП
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЗадачаПользователю.Ссылка КАК Задача
	                      |ИЗ
	                      |	Задача.ЗадачаПользователю КАК ЗадачаПользователю
	                      |ГДЕ
	                      |	ЗадачаПользователю.БизнесПроцесс = &БизнесПроцесс
	                      |	И ЗадачаПользователю.ТочкаМаршрута = &ТочкаМаршрута
	                      |	И НЕ ЗадачаПользователю.Выполнена");
	Запрос.УстановитьПараметр("ТочкаМаршрута",?(ЭтоОтправка,БизнесПроцессы.ДоставкаЗаказа.ТочкиМаршрута.ОтправитьЗаказКлиенту,БизнесПроцессы.ДоставкаЗаказа.ТочкиМаршрута.ПодтверждениеДоставкиЗаказа));
	Запрос.УстановитьПараметр("БизнесПроцесс",Результат.БП);
	Результат = Запрос.Выполнить().Выбрать();
	Если НЕ Результат.Следующий() Тогда
		//ОтменитьТранзакцию();
		Возврат Ложь;
	КонецЕсли;
	//Устанавливаем состояние
	Состояние = ?(ЭтоОтправка,"Отправлен","Отгружен");
	Если НЕ Заказы.УстановитьСостояниеЗаказа(Заказ, Перечисления.СостоянияЗаказа[Состояние]) ИЛИ НЕ Заказы.УстановитьСостояниеДокументаОтгрузки(ДокументОтгрузки,Состояние) Тогда
		//ОтменитьТранзакцию();
		Возврат Ложь;
	КонецЕсли;
	Попытка
		//Двигаем задачу
		Задача = Результат.Задача.ПолучитьОбъект();
		Задача.ДополнительныеСвойства.Вставить("КонтрольАдресации", Ложь);
		Задача.ВыполнитьЗадачу();
	Исключение
		//Если ошибка - пишем об ошибке
		Сообщить(ОписаниеОшибки());
		//ОтменитьТранзакцию();
		Возврат Ложь;
	КонецПопытки;
	//ЗафиксироватьТранзакцию();
	Возврат Истина;
КонецФункции

&НаСервере
Процедура ОчисткаЖурналаПоЗаказам()
	Для Каждого Строка Из Объект.ТабЗаказов Цикл Заказы.УстановитьРеквизитЖурнала(Строка.Заказ, Новый Структура("ТранспортноеСредство", Справочники.ТранспортныеСредства.ПустаяСсылка())) КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура Товары(Команда)
	Элементы.ТоварыЗаказа.Видимость = НЕ Элементы.ТоварыЗаказа.Видимость;
КонецПроцедуры

&НаСервере
Процедура ТабЗаказовЗаказПриИзмененииНаСервере()
	ТекСтрока = Элементы.ТабЗаказов.ТекущаяСтрока;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекСтрока = Объект.ТабЗаказов.НайтиПоИдентификатору(ТекСтрока);
	ЗагрузкаВАвтомобильЗаказов.ДобавитьДанныеПоЗаказу(Объект, ТекСтрока,Истина,Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ТабЗаказовЗаказПриИзменении(Элемент)
	ТабЗаказовЗаказПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ТабЗаказовДокументОтгрузкиПриИзмененииНаСервере()
	ТекСтрока = Элементы.ТабЗаказов.ТекущаяСтрока;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекСтрока = Объект.ТабЗаказов.НайтиПоИдентификатору(ТекСтрока);
	ЗагрузкаВАвтомобильЗаказов.ДобавитьДанныеПоСборочнику(Объект,ТекСтрока);
	ЗагрузкаВАвтомобильЗаказов.ЗаполнитьКонтактныеДанные(ТекСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ТабЗаказовДокументОтгрузкиПриИзменении(Элемент)
	ТабЗаказовДокументОтгрузкиПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ТабЗаказовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Объект.ЗаказыОтправлены Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабЗаказовПередНачаломИзменения(Элемент, Отказ)
	Если Элемент.ТекущийЭлемент.Имя = "ТабЗаказовТрекНомер" Тогда
		Если НЕ ЗначениеЗаполнено(Элементы.ТабЗаказов.ТекущиеДанные.ДокументОтгрузки) Тогда
			ПоказатьПредупреждение(,"Для установки трек-номера должен быть задан документ отгрузки");
			Отказ = Истина;
		КонецЕсли;
	ИначеЕсли Объект.ЗаказыОтправлены Тогда
		Если Элемент.ТекущийЭлемент.Имя = "ТабЗаказовЗаказ" Тогда
			ОткрытьЗаявку()
		КонецЕсли;
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабЗаказовПередУдалением(Элемент, Отказ)
	Если Объект.ЗаказыОтправлены Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусы(Команда)
	ОбновитьСтатусыСервер(НЕ Объект.ЗаказыОтправлены);	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусыСервер(ЗаменитьДокументОтгрузки)
	ТипыПечатаемыхДокументов = Новый Массив;
	ТипыПечатаемыхДокументов.Добавить(Перечисления.ТипыПечатаемыхДокументов.УПД);
	ТипыПечатаемыхДокументов.Добавить(Перечисления.ТипыПечатаемыхДокументов.СчетФактура);			
	ТипыПечатаемыхДокументов.Добавить(Перечисления.ТипыПечатаемыхДокументов.АктПриемаПередачи);			
	Для Каждого ТекСтрока Из Объект.ТабЗаказов Цикл
		ТекСтрока.Состояние 		= Неопределено;
		Если ЗначениеЗаполнено(ТекСтрока.Заказ) Тогда
			Если ЗаменитьДокументОтгрузки И Не ЗначениеЗаполнено(ТекСтрока.ДокументОтгрузки) Тогда
				ТекСтрока.ДокументОтгрузки 	= ЗагрузкаВАвтомобильЗаказов.ПолучитьПоследнийДокументОтгрузки(ТекСтрока.Заказ,Объект.МестоОтгрузки);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекСтрока.ДокументОтгрузки) Тогда
				ТекСтрока.Состояние = Заказы.ПолучитьСостояниеДокументаОтгрузки(ТекСтрока.ДокументОтгрузки);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ТекСтрока.Состояние) Тогда
				ТекСтрока.Состояние = Заказы.ПолучитьСостояниеЗаказа(ТекСтрока.Заказ);
			КонецЕсли;
			
			ТекСтрока.ТСД 				= ?(ЗначениеЗаполнено(ПечатьНаСервере.ПолучитьПоследнююПечать(ТекСтрока.Заказ,ТипыПечатаемыхДокументов,?(ЗначениеЗаполнено(ТекСтрока.ДокументОтгрузки),ТекСтрока.ДокументОтгрузки,Неопределено))),Истина,Ложь);
		Иначе
			ТекСтрока.ДокументОтгрузки 	= Неопределено;
			ТекСтрока.ТСД 				= Ложь;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВсеДанные(Команда)
	Если Объект.ЗаказыОтправлены Тогда
		ПоказатьПредупреждение(,"Обновить все данные можно только в неотправленном наряде на загрузку");
		Возврат;
	КонецЕсли;
	ПоказатьВопрос(Новый ОписаниеОповещения("ПослеЗакрытияВопросаОбновитьВсеДанные", ЭтаФорма), "Внимание! Обновятся все введенные вручную данные",РежимДиалогаВопрос.ДаНет);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОбновитьВсеДанные(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	ОбновитьВсеДанныеНаСервере();
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура ОбновитьВсеДанныеНаСервере()
	Для Каждого ТекСтрока Из Объект.ТабЗаказов Цикл
		ЗагрузкаВАвтомобильЗаказов.ДобавитьДанныеПоЗаказу(Объект, ТекСтрока, Истина)
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьЗаказы(Команда)
	Для ц=1 По 10000 Цикл
		Если Объект.ТабЗаказов.НайтиСтроки(Новый Структура("НомерМеста",ц)).Количество()=0 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Для Каждого ТекСтрока Из Элементы.ТабЗаказов.ВыделенныеСтроки Цикл
		Объект.ТабЗаказов.НайтиПоИдентификатору(ТекСтрока).НомерМеста = ц;
	КонецЦикла;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Доставлены(Команда)
	Для Каждого ТекСтрока Из Элементы.ТабЗаказов.ВыделенныеСтроки Цикл
		стр = Объект.ТабЗаказов.НайтиПоИдентификатору(ТекСтрока);
		Если ЗначениеЗаполнено(стр.Заказ) И ЗначениеЗаполнено(стр.ДокументОтгрузки) Тогда
			Если НЕ ДоставленыНаСервере(стр.Заказ,стр.ДокументОтгрузки) Тогда
				Сообщить("Не удалось установить отметку о доставке "+стр.Заказ+" "+стр.ДокументОтгрузки);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ОбновитьСтатусыСервер(Ложь);	
КонецПроцедуры

&НаСервере
Функция ДоставленыНаСервере(Заказ,ДокументОтгрузки)
	//НачатьТранзакцию();
	//Ищем не завершённый БП ДоставкаЗаказа по документу отгрузки
	БП = ПолучитьСоздатьБП(Заказ,ДокументОтгрузки);
	Если БП = Неопределено Тогда Возврат Ложь; КонецЕсли;
	
	ВсеТоварыОтгружаются = Заказы.ВсеТоварыОтгружаются(Заказ);
	
	Если НЕ ПолучитьВыполнитьЗадачу(Заказ,ДокументОтгрузки,БизнесПроцессы.ДоставкаЗаказа.ТочкиМаршрута.ОтправитьЗаказКлиенту,БП,Перечисления.СостоянияЗаказа[?(ВсеТоварыОтгружаются,"Доставлен","ДоставленЧастично")],"Доставлен",Ложь) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ПолучитьВыполнитьЗадачу(Заказ,ДокументОтгрузки,БизнесПроцессы.ДоставкаЗаказа.ТочкиМаршрута.ПодтверждениеДоставкиЗаказа,БП,Перечисления.СостоянияЗаказа[?(ВсеТоварыОтгружаются,"Доставлен","ДоставленЧастично")],"Доставлен",Ложь) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
	//Запрос = Новый Запрос("ВЫБРАТЬ
	//                      |	ЗадачаПользователю.Ссылка КАК Задача
	//                      |ИЗ
	//                      |	Задача.ЗадачаПользователю КАК ЗадачаПользователю
	//                      |ГДЕ
	//                      |	ЗадачаПользователю.БизнесПроцесс = &БизнесПроцесс
	//                      |	И ЗадачаПользователю.ТочкаМаршрута = &ТочкаМаршрута
	//                      |	И НЕ ЗадачаПользователю.Выполнена");
	//Запрос.УстановитьПараметр("ТочкаМаршрута",БизнесПроцессы.ДоставкаЗаказа.ТочкиМаршрута.ОтправитьЗаказКлиенту);
	//Запрос.УстановитьПараметр("БизнесПроцесс",БП);
	////Ищем не выполненную задачу Отправить заказ
	//Результат = Запрос.Выполнить().Выбрать();
	//Если Результат.Следующий() Тогда
	//	//Устанавливаем состояние
	//	Состояние = Перечисления.СостоянияЗаказа[?(ВсеТоварыОтгружаются,"Отправлен","ЧастичноОтправлен")];
	//	Если НЕ Заказы.УстановитьСостояниеЗаказа(Заказ, Состояние) ИЛИ НЕ Заказы.УстановитьСостояниеДокументаОтгрузки(ДокументОтгрузки,"Отправлен") Тогда
	//		//ОтменитьТранзакцию();
	//		Возврат Ложь;
	//	КонецЕсли;
	//	Попытка
	//		//Двигаем задачу
	//		Задача = Результат.Задача.ПолучитьОбъект();
	//		Задача.ВыполнитьЗадачу();
	//	Исключение
	//		//Если ошибка - пишем об ошибке
	//		Сообщить(ОписаниеОшибки());
	//		//ОтменитьТранзакцию();
	//		Возврат Ложь;
	//	КонецПопытки;
	//КонецЕсли;
	//Запрос.УстановитьПараметр("ТочкаМаршрута",БизнесПроцессы.ДоставкаЗаказа.ТочкиМаршрута.ПодтверждениеДоставкиЗаказа);
	////Ищем не выполненную задачу Подтверждение доставки заказа
	//Результат = Запрос.Выполнить().Выбрать();
	//Если Результат.Следующий() Тогда
	//	//Устанавливаем состояние
	//	Состояние = Перечисления.СостоянияЗаказа[?(ВсеТоварыОтгружаются,"Доставлен","ЧастичноДоставлен")];
	//	Если НЕ Заказы.УстановитьСостояниеЗаказа(Заказ, Состояние) ИЛИ НЕ Заказы.УстановитьСостояниеДокументаОтгрузки(ДокументОтгрузки,"Доставлен") Тогда
	//		//ОтменитьТранзакцию();
	//		Возврат Ложь;
	//	КонецЕсли;
	//	Попытка
	//		//Двигаем задачу
	//		Задача = Результат.Задача.ПолучитьОбъект();
	//		Задача.ВыполнитьЗадачу();
	//	Исключение
	//		//Если ошибка - пишем об ошибке
	//		Сообщить(ОписаниеОшибки());
	//		//ОтменитьТранзакцию();
	//		Возврат Ложь;
	//	КонецПопытки;
	//Иначе
	//	//ОтменитьТранзакцию();
	//	Возврат Ложь;
	//КонецЕсли;
	//ЗафиксироватьТранзакцию();
КонецФункции

&НаКлиенте
Процедура НеДоставлены(Команда)
	Для Каждого ТекСтрока Из Элементы.ТабЗаказов.ВыделенныеСтроки Цикл
		стр = Объект.ТабЗаказов.НайтиПоИдентификатору(ТекСтрока);
		Если ЗначениеЗаполнено(стр.Заказ) И ЗначениеЗаполнено(стр.ДокументОтгрузки) Тогда
			Если НЕ НеДоставленыНаСервере(стр.Заказ,стр.ДокументОтгрузки) Тогда
				Сообщить("Не удалось установить отметку о недоставке "+стр.Заказ+" "+стр.ДокументОтгрузки);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ОбновитьСтатусыСервер(Ложь);	
КонецПроцедуры

&НаСервере
Функция НеДоставленыНаСервере(Заказ,ДокументОтгрузки)
	//Ищем не завершённый БП ДоставкаЗаказа по документу отгрузки
	БП = ПолучитьСоздатьБП(Заказ,ДокументОтгрузки);
	Если БП = Неопределено Тогда Возврат Ложь; КонецЕсли;
	
	ВсеТоварыОтгружаются = Заказы.ВсеТоварыОтгружаются(Заказ);
	
	Если НЕ ПолучитьВыполнитьЗадачу(Заказ,ДокументОтгрузки,БизнесПроцессы.ДоставкаЗаказа.ТочкиМаршрута.ПодтверждениеДоставкиЗаказа,БП,Перечисления.СостоянияЗаказа[?(ВсеТоварыОтгружаются,"Отгружен","ОтгруженЧастично")],"Отгружен",Истина) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции

&НаСервере
Функция ПолучитьСоздатьБП(Заказ,ДокументОтгрузки)
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ДоставкаЗаказа.Ссылка КАК БП
	                      |ИЗ
	                      |	БизнесПроцесс.ДоставкаЗаказа КАК ДоставкаЗаказа
	                      |ГДЕ
	                      |	ДоставкаЗаказа.Заказ = &Заказ
	                      |	И ДоставкаЗаказа.ДокументОтгрузки = &ДокументОтгрузки
	                      |	И ДоставкаЗаказа.Стартован
	                      |	И НЕ ДоставкаЗаказа.Завершен");
	Запрос.УстановитьПараметр("Заказ",Заказ);
	Запрос.УстановитьПараметр("ДокументОтгрузки",ДокументОтгрузки);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		БизнесПроцессы.ДоставкаЗаказа.СоздатьНовыйБП(Заказ,ДокументОтгрузки);
	КонецЕсли;
	Результат = Запрос.Выполнить().Выбрать();
	Если НЕ Результат.Следующий() Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат Результат.БП;
КонецФункции

&НаСервере
Функция ПолучитьВыполнитьЗадачу(Заказ,ДокументОтгрузки,ТочкаМаршрута,БП,СостояниеЗаказа,СостояниеОтгрузки,ПоменятьСтатусПолюбому)
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЗадачаПользователю.Ссылка КАК Задача
	                      |ИЗ
	                      |	Задача.ЗадачаПользователю КАК ЗадачаПользователю
	                      |ГДЕ
	                      |	ЗадачаПользователю.БизнесПроцесс = &БизнесПроцесс
	                      |	И ЗадачаПользователю.ТочкаМаршрута = &ТочкаМаршрута
	                      |	И НЕ ЗадачаПользователю.Выполнена");
	Запрос.УстановитьПараметр("ТочкаМаршрута",ТочкаМаршрута);
	Запрос.УстановитьПараметр("БизнесПроцесс",БП);
	//Ищем не выполненную задачу
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		//Устанавливаем состояние
		Если НЕ Заказы.УстановитьСостояниеЗаказа(Заказ, СостояниеЗаказа) ИЛИ НЕ Заказы.УстановитьСостояниеДокументаОтгрузки(ДокументОтгрузки,СостояниеОтгрузки) Тогда
			Возврат Ложь;
		КонецЕсли;
		Попытка
			//Двигаем задачу
			Задача = Результат.Задача.ПолучитьОбъект();
			Задача.ДополнительныеСвойства.Вставить("КонтрольАдресации", Ложь);
			Задача.ВыполнитьЗадачу();
		Исключение
			//Если ошибка - пишем об ошибке
			Сообщить(ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
	ИначеЕсли ПоменятьСтатусПолюбому Тогда
		Если НЕ Заказы.УстановитьСостояниеЗаказа(Заказ, СостояниеЗаказа) ИЛИ НЕ Заказы.УстановитьСостояниеДокументаОтгрузки(ДокументОтгрузки,СостояниеОтгрузки) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура ТабЗаказовЗаказОткрытие(Элемент, СтандартнаяОбработка)
	Если ОткрытьЗаявку() Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ОткрытьЗаявку()
	текДанные = Элементы.ТабЗаказов.ТекущиеДанные;
	Если текДанные = Неопределено Или НЕ ЗначениеЗаполнено(ТекДанные.Заказ) Тогда
		Возврат Ложь;
	КонецЕсли;
	Если ТипЗнч(ТекДанные.Заказ)<>Тип("ДокументСсылка.ЗаказПокупателя")
	   И ТипЗнч(ТекДанные.Заказ)<>Тип("ДокументСсылка.ИнтернетЗаказПокупателя")
	   И ТипЗнч(ТекДанные.Заказ)<>Тип("ДокументСсылка.ВнутреннийЗаказ")
	   И ТипЗнч(ТекДанные.Заказ)<>Тип("ДокументСсылка.ЗаказНаряд") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Процесс = ПолучитьПроцесс(текДанные.Заказ);
	Если Процесс = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыЗапроса = Заказы.ПолучитьПараметрыДляЗапроса(текДанные.Заказ);
	
	//Если ТипЗнч(текДанные.Заказ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
	//	ИмяПроцесса = "ЗаявкаПокупателя";
	//ИначеЕсли ТипЗнч(текДанные.Заказ) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
	//	ИмяПроцесса = "ВнутренняяЗаявка";
	//ИначеЕсли ТипЗнч(текДанные.Заказ) = Тип("ДокументСсылка.ИнтернетЗаказПокупателя") Тогда
	//	ИмяПроцесса = "ИнтернетЗаявка";
	//Иначе
	//	Возврат Ложь;
	//КонецЕсли;
	
	ОткрытьФорму("БизнесПроцесс." + ПараметрыЗапроса.ИмяПроцесса + ".ФормаОбъекта", Новый Структура("Ключ", Процесс), ВладелецФормы);
	Возврат Истина;
КонецФункции

&НаСервере
Функция ПолучитьПроцесс(ЗаказСсылка)
	
	Возврат Заказы.ПолучитьПроцесс(ЗаказСсылка);
	
КонецФункции

#Область ОбработкаПодбора
&НаКлиенте
Процедура Подбор(Команда)
	Форма = ПолучитьФорму("ЖурналДокументов.ЖурналЗаказов.Форма.ФормаШустрого",Новый Структура("РежимВыбора,ЗакрыватьПриВыборе,МножественныйВыбор",Истина,Ложь,Истина),Элементы.ТабЗаказов);
	Форма.Открыть();	
КонецПроцедуры

&НаКлиенте
Процедура ТабЗаказовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	КолДоб = ТабЗаказовОбработкаВыбораНаСервере(ВыбранноеЗначение);
	
	Если КолДоб>0 Тогда Модифицированность = Истина; КонецЕсли;
	
	стрСообщения = ?(КолДоб,
						"Добавлено " + КолДоб + ". Заказов в машине:" + Объект.ТабЗаказов.Количество(),
						"Заказ не добавлен (был отгружен раньше, или на него нет реализации, или он уже в машине). Заказов в машине:" + Объект.ТабЗаказов.Количество());
	ПоказатьОповещениеПользователя("Добавление заказов на погрузку", , стрСообщения, БиблиотекаКартинок.ЗагрузкаЗаказа_Добавление);
КонецПроцедуры

&НаСервере
Функция ТабЗаказовОбработкаВыбораНаСервере(ВыбранноеЗначение)
	КолДоб = 0;
	Для Каждого ТекЗаказ Из ВыбранноеЗначение Цикл Если Объект.ТабЗаказов.НайтиСтроки(Новый Структура("Заказ",ТекЗаказ.Заказ)).Количество()=0 Тогда ЗагрузкаВАвтомобильЗаказов.ДобавитьДанныеПоЗаказу(Объект, Объект.ТабЗаказов.Добавить(), Истина, ТекЗаказ.Заказ); КолДоб = КолДоб + 1; КонецЕсли; КонецЦикла;
	
	Возврат КолДоб;
КонецФункции
#КонецОбласти

#Область ПечатьДокумента
&НаКлиенте
Процедура ДляКлиентаУПД(Команда)
	Пакет = ВернутьПакет("Наряд на загрузку - Для клиента УПД");
	Если ЗначениеЗаполнено(Пакет) Тогда
		
		ПараметрыПакетнойПечати = Новый Структура("Пакет, СпособПечати", Пакет, ?(Предпросмотр,"ПредПросмотр","НаПринтер"));
		
		Для Каждого ТекСтрока Из Элементы.ТабЗаказов.ВыделенныеСтроки Цикл
			ВыбраннаяСтрока = Объект.ТабЗаказов.НайтиПоИдентификатору(ТекСтрока);
			ПараметрыПакетнойПечати.Вставить("ДанныеДляПечати", Новый Структура("Заказ, Реализация", ВыбраннаяСтрока.Заказ, ВыбраннаяСтрока.ДокументОтгрузки));
			ПечатьНаКлиенте.ВыполнитьПакетнуюПечать(ПараметрыПакетнойПечати);
		КонецЦикла;
	КонецЕсли;
	ЗагрузитьПечатьДокументов();
КонецПроцедуры

&НаКлиенте
Процедура ДляКлиентаТорг12(Команда)
	Пакет = ВернутьПакет("Наряд на загрузку - Для клиента Торг12");
	Если ЗначениеЗаполнено(Пакет) Тогда
		
		ПараметрыПакетнойПечати = Новый Структура("Пакет, СпособПечати", Пакет, ?(Предпросмотр,"ПредПросмотр","НаПринтер"));
		
		Для Каждого ТекСтрока Из Элементы.ТабЗаказов.ВыделенныеСтроки Цикл
			ВыбраннаяСтрока = Объект.ТабЗаказов.НайтиПоИдентификатору(ТекСтрока);
			ПараметрыПакетнойПечати.Вставить("ДанныеДляПечати", Новый Структура("Заказ, Реализация", ВыбраннаяСтрока.Заказ, ВыбраннаяСтрока.ДокументОтгрузки));
			ПечатьНаКлиенте.ВыполнитьПакетнуюПечать(ПараметрыПакетнойПечати);
		КонецЦикла;
	КонецЕсли;
	ЗагрузитьПечатьДокументов();
КонецПроцедуры

&НаКлиенте
Процедура ДляТК(Команда)
	Пакет = ВернутьПакет("Наряд на загрузку - Для ТК");
	Если ЗначениеЗаполнено(Пакет) Тогда
		
		ПараметрыПакетнойПечати = Новый Структура("Пакет, СпособПечати", Пакет, ?(Предпросмотр,"ПредПросмотр","НаПринтер"));
		
		Для Каждого ТекСтрока Из Элементы.ТабЗаказов.ВыделенныеСтроки Цикл
			ВыбраннаяСтрока = Объект.ТабЗаказов.НайтиПоИдентификатору(ТекСтрока);
			ПараметрыПакетнойПечати.Вставить("ДанныеДляПечати", Новый Структура("Заказ, Реализация", ВыбраннаяСтрока.Заказ, ВыбраннаяСтрока.ДокументОтгрузки));
			ПечатьНаКлиенте.ВыполнитьПакетнуюПечать(ПараметрыПакетнойПечати);
		КонецЦикла;
	КонецЕсли;
	ЗагрузитьПечатьДокументов();
КонецПроцедуры

&НаКлиенте
Процедура ДляИПР(Команда)
	Пакет = ВернутьПакет("Наряд на загрузку - Для ИПР");
	Если ЗначениеЗаполнено(Пакет) Тогда
		
		ПараметрыПакетнойПечати = Новый Структура("Пакет, СпособПечати", Пакет, ?(Предпросмотр,"ПредПросмотр","НаПринтер"));
		
		Для Каждого ТекСтрока Из Элементы.ТабЗаказов.ВыделенныеСтроки Цикл
			ВыбраннаяСтрока = Объект.ТабЗаказов.НайтиПоИдентификатору(ТекСтрока);
			ПараметрыПакетнойПечати.Вставить("ДанныеДляПечати", Новый Структура("Заказ, Реализация", ВыбраннаяСтрока.Заказ, ВыбраннаяСтрока.ДокументОтгрузки));
			ПечатьНаКлиенте.ВыполнитьПакетнуюПечать(ПараметрыПакетнойПечати);
		КонецЦикла;
	КонецЕсли;
	ЗагрузитьПечатьДокументов();
КонецПроцедуры

&НаСервере
Функция ВернутьПакет(Имя)
	Возврат Справочники.ПакетыПечатныхДокументов.НайтиПоНаименованию(Имя);
КонецФункции

&НаКлиенте
Процедура Предпросмотр(Команда)
	Предпросмотр = НЕ Предпросмотр;
	Если Предпросмотр Тогда
		Элементы.ТабЗаказовПредпросмотр.Картинка = БиблиотекаКартинок.Ок;
	Иначе
		Элементы.ТабЗаказовПредпросмотр.Картинка = Новый Картинка;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабЗаказовТелефонКонтактногоЛицаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекДанные = Элементы.ТабЗаказов.ТекущиеДанные;
	Если ТекДанные = Неопределено Или НЕ ЗначениеЗаполнено(ТекДанные.Контрагент) Тогда
		ПоказатьПредупреждение(,"Нет контактов для выбора");
		Возврат;
	КонецЕсли;
	
	сзКонтактов = ПолучитьСписокТелефонов(ТекДанные.Контрагент,ТекДанные.КонтактноеЛицо,ТекДанные.Заказ,ТекДанные.ДокументОтгрузки);
	Если сзКонтактов.Количество() = 0 Тогда
		ПоказатьПредупреждение(,"Нет контактов для выбора");
		Возврат;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	сзКонтактов.ПоказатьВыборЭлемента(Новый ОписаниеОповещения("ПослеВыбораТелефона", ЭтаФорма, ТекДанные), "Выберите телефон");	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокТелефонов(Контрагент,КонтактноеЛицо,Заказ,ДокументОтгрузки)
	сзКонтактов = Новый СписокЗначений;
	Если ЗначениеЗаполнено(Заказ) И Заказ.Метаданные().Реквизиты.Найти("ТелефонКонтактногоЛицаДоставки")<>Неопределено Тогда
		Если ЗначениеЗаполнено(Заказ.ТелефонКонтактногоЛицаДоставки) Тогда
			сзКонтактов.Добавить(Заказ.ТелефонКонтактногоЛицаДоставки,Заказ.ТелефонКонтактногоЛицаДоставки + " - из Заказа");
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОтгрузки) И ТипЗнч(ДокументОтгрузки) = Тип("ДокументСсылка.ОтгрузкаТоваров") И ЗначениеЗаполнено(ДокументОтгрузки.СкладПолучатель) Тогда
		Если ЗначениеЗаполнено(ДокументОтгрузки.СкладПолучатель.ТелефонКонтактногоЛицаДоставки) Тогда
			сзКонтактов.Добавить(ДокументОтгрузки.СкладПолучатель.ТелефонКонтактногоЛицаДоставки,ДокументОтгрузки.СкладПолучатель.ТелефонКонтактногоЛицаДоставки + " - из Склада получателя");
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ПредставлениеКонтактнойИнформации.Представление
	                      |ИЗ
	                      |	РегистрСведений.ПредставлениеКонтактнойИнформации КАК ПредставлениеКонтактнойИнформации
	                      |ГДЕ
	                      |	ПредставлениеКонтактнойИнформации.Объект = &Объект
	                      |	И ПредставлениеКонтактнойИнформации.Вид В ИЕРАРХИИ (ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.Телефон))");
	Если ЗначениеЗаполнено(КонтактноеЛицо) Тогда
		Запрос.УстановитьПараметр("Объект",КонтактноеЛицо);
		Результат = Запрос.Выполнить().Выбрать();
		Пока Результат.Следующий() Цикл
			Если ЗначениеЗаполнено(Результат.Представление) Тогда
				сзКонтактов.Добавить(Результат.Представление,Результат.Представление + " - из Контактного Лица");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если ЗначениеЗаполнено(Контрагент) Тогда
		Запрос.УстановитьПараметр("Объект",Контрагент);
		Результат = Запрос.Выполнить().Выбрать();
		Пока Результат.Следующий() Цикл
			Если ЗначениеЗаполнено(Результат.Представление) Тогда
				сзКонтактов.Добавить(Результат.Представление,Результат.Представление + " - из Контрагента");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	Возврат сзКонтактов;
КонецФункции

&НаКлиенте
Процедура ПослеВыбораТелефона(ВыбранныйЭлемент, СписокПараметров) Экспорт
    Если ВыбранныйЭлемент = Неопределено Или СписокПараметров = Неопределено Тогда
        Возврат;
	КонецЕсли;

	СписокПараметров.ТелефонКонтактногоЛица = ВыбранныйЭлемент.Значение;
КонецПроцедуры

#КонецОбласти

#Область ИнформацияОТоваре
// ИНФОРМАЦИЯ О ТОВАРЕ

&НаСервере
Процедура ОбработатьОтображениеИнформацииОТоваре() Экспорт
	
	РаботаСНоменклатурой.ОбработатьОтображениеИнформацииОТоваре(ЭтаФорма, "ТоварыЗаказа", "ТоварыЗаказа");
	
КонецПроцедуры

&НаКлиенте
Процедура ИнфТовараТекстHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	РаботаСНоменклатуройКлиент.ИнфТовараТекстHTMLПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка, "ТоварыЗаказа");
	
КонецПроцедуры
&НаКлиенте
Процедура ИнфТовараЗаголовокHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	РаботаСНоменклатуройКлиент.ИнфТовараЗаголовокHTMLПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка, "ТоварыЗаказа", "ТоварыЗаказа");
	
КонецПроцедуры

 &НаКлиенте
Процедура ПоказатьСкрытьИнфОТоваре(Команда)
	
	РаботаСНоменклатуройКлиент.ПоказатьСкрытьИнфОТоваре(ЭтаФорма);
	
КонецПроцедуры
&НаКлиенте
Процедура НастройкаИнфОТоваре(Команда) 
	
	РаботаСНоменклатуройКлиент.НастройкаИнфОТоваре(ЭтаФорма, "ТоварыЗаказа", "ТоварыЗаказа");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЗаказаПриАктивизацииСтроки(Элемент)
	
	// информация о товаре
	ОбработатьОтображениеИнформацииОТоваре();
	
КонецПроцедуры

&НаКлиенте
Процедура ТабЗаказовПриАктивизацииСтроки(Элемент)
	
	// Считаем товары
	
	ТекДанные = Элементы.ТабЗаказов.ТекущиеДанные;
	
	Если ТекДанные <> Неопределено Тогда 
	
		ОбновитьСписокТоваров(ТекДанные.ДокументОтгрузки); КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокТоваров(ДокументОтгрузки)
	
	Запрос = Новый Запрос("ВЫБРАТЬ Номенклатура.Наименование Наименование, Номенклатура, Количество Количество ИЗ РегистрНакопления.ДвижениеТовара ГДЕ Регистратор = &ДокументОтгрузки УПОРЯДОЧИТЬ ПО Наименование");
	Запрос.УстановитьПараметр("ДокументОтгрузки", ДокументОтгрузки);
	ТоварыЗаказа.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

#КонецОбласти
