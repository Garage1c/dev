&НаКлиенте
Процедура ОбщиеРеквизиты(Команда)
	
	ФункцииФормДокументов.ОткрытьОбщиеРеквизиты(ЭтаФорма);
	
КонецПроцедуры

// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Объект.Ссылка.Пустая() И НЕ ЗначениеЗаполнено(Параметры.Основание) Тогда
	
		Объект.Процесс 		= Параметры.Процесс;
		Объект.Касса 		= Параметры.Касса;
		Объект.Сумма		= Параметры.Наличность;
		Объект.Валюта       = ОбщиеФункции.НастройкаПользователя("ПоУмолчанию_Валюта");

		Если НЕ Объект.Касса.Пустая() Тогда
			Объект.Организация	= Объект.Касса.Организация;
			Объект.Валюта		= Объект.Касса.ТипЦЕн.Валюта;
		КонецЕсли;
		
	КонецЕсли;
	УправлениеВидимостю();
	
	УстановитьВидимостьККТ();
КонецПроцедуры

&НаСервере
Процедура УправлениеВидимостю()
	
	ЭтоВозврат = Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПокупателю;
	//ЗаполнитьРасшифровку = ЭтоВозврат И (РольДоступна("ПолныеПрава") Или РольДоступна("ПолныеПраваВОбласти"));
	//Элементы.РасшифровкаСуммы.Видимость = ЗаполнитьРасшифровку;
	//Если НЕ ЗаполнитьРасшифровку Тогда
	//	Объект.РасшифровкаСуммы.Очистить();	КонецЕсли;
	
	ПрочийРасход = Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ПрочийРасход;
	
	//Элементы.Партнер.ОтметкаНезаполненного  = НЕ ПрочийРасход И Объект.Партнер.Пустая();
	
	//Элементы.Партнер.Видимость  = НЕ ПрочийРасход;
	Элементы.Контрагент.Видимость  = НЕ ПрочийРасход;
	
	////Начало изменения (Вера)
	//Объект.Валюта = ОбщиеФункции.НастройкаПользователя("ПоУмолчанию_Валюта");
	////Конец изменения (Вера)
	
	Элементы.РасшифровкаСуммы.Видимость =  Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПокупателю;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Элементы.Сумма.Доступность = ?(РольДоступна("ПолныеПрава") ИЛИ РольДоступна("Бухгалтер") ИЛИ РольДоступна("ПолныеПраваВОбласти"),Истина, Ложь); 
		//Элементы.СтатьяДДС.Доступность = ?(РольДоступна("ПолныеПрава") ИЛИ РольДоступна("Бухгалтер") ИЛИ РольДоступна("ПолныеПраваВОбласти"),Истина, Ложь); 
		//Элементы.СтатьяДДСБух.Доступность = ?(РольДоступна("ПолныеПрава") ИЛИ РольДоступна("Бухгалтер"),Истина, Ложь); 
		Элементы.ВидОперации.Доступность = ?(РольДоступна("ПолныеПрава") ИЛИ РольДоступна("Бухгалтер") ИЛИ РольДоступна("ПолныеПраваВОбласти"),Истина, Ложь); 
		//Элементы.Партнер.Доступность = ?(РольДоступна("ПолныеПрава") ИЛИ РольДоступна("Бухгалтер") ИЛИ РольДоступна("ПолныеПраваВОбласти"),Истина, Ложь); 
		Элементы.Контрагент.Доступность = ?(РольДоступна("ПолныеПрава") ИЛИ РольДоступна("Бухгалтер") ИЛИ РольДоступна("ПолныеПраваВОбласти"),Истина, Ложь); 
		Элементы.Организация.Доступность = ?(РольДоступна("ПолныеПрава") ИЛИ РольДоступна("Бухгалтер") ИЛИ РольДоступна("ПолныеПраваВОбласти"),Истина, Ложь); 
		Элементы.Подразделение.Доступность = ?(РольДоступна("ПолныеПрава") ИЛИ РольДоступна("Бухгалтер") ИЛИ РольДоступна("ПолныеПраваВОбласти"),Истина, Ложь); 
		Элементы.Отдел.Доступность = ?(РольДоступна("ПолныеПрава") ИЛИ РольДоступна("Бухгалтер") ИЛИ РольДоступна("ПолныеПраваВОбласти"),Истина, Ложь); 
		Элементы.ЦФУ.Доступность   = ?(РольДоступна("ПолныеПрава") ИЛИ РольДоступна("Бухгалтер") ИЛИ РольДоступна("ПолныеПраваВОбласти"),Истина, Ложь);
		Элементы.Касса.Доступность = ?(РольДоступна("ПолныеПрава") ИЛИ РольДоступна("Бухгалтер") ИЛИ РольДоступна("ПолныеПраваВОбласти"),Истина, Ложь); 
		Элементы.ОбщиеРеквизиты.Доступность = ?(РольДоступна("ПолныеПрава") ИЛИ РольДоступна("Бухгалтер") ИЛИ РольДоступна("ПолныеПраваВОбласти"),Истина, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция КонтрольАвтозаполненияПартнер()
	
	Возврат Объект.ВидОперации <> Перечисления.ВидыОперацийРКО.ПрочийРасход И Объект.Партнер.Пустая();
	
КонецФункции

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение ИЛИ  ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		Оповестить(СобытияСистемы.Событие_ИзмениласьНаличность(), , ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

//&НаСервере
//Процедура ПартнерПриИзмененииНаСервере()
//	ФункцииФормДокументов.ПартнерПриИзменении(Объект,,Ложь, Новый Структура("Контрагент"));

//КонецПроцедуры

//&НаКлиенте
//Процедура ПартнерПриИзменении(Элемент)
//	
//	ПартнерПриИзмененииНаСервере();
//	Элементы.Партнер.ОтметкаНезаполненного  = КонтрольАвтозаполненияПартнер();

//КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
	Объект.Партнер = Объект.Контрагент.Партнер;
	//ФункцииФормДокументов.КонтрагентПриИзменении(Объект,Ложь, Новый Структура("Партнер"));
	ФункцииФормДокументов.КонтрагентПриИзменении(Объект,Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	  КонтрагентПриИзмененииНаСервере();
КонецПроцедуры



&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ФункцииФормДокументов.ОрганизацияПриИзменении(Объект);
	
КонецПроцедуры


&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	УправлениеВидимостю();
	ВидОперацииПриИзмененииНаСервере();
	ЗаполнитьСтатьиДДС();
	
	//+ККТ
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВозвратПокупателю") И ОбщегоНазначения.НужноПробитиеПоКассе(Объект.Касса) Тогда
		ПоказатьПредупреждение(,"Для пробития по ККТ обязательно заполните реквизит ""Документ отгрузки"" и сумма РКО должна совпадать с суммой документов отгрузки!");
	КонецЕсли;
	//-ККТ
КонецПроцедуры
&НаСервере
Процедура ВидОперацииПриИзмененииНаСервере()
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПокупателю ТОГДА
		Объект.СтатьяДДС = КэшируемыеФункции.ПолучитьСтатьюВозвратПокупателю();
	ИначеЕсли
		Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику ТОГДА
		Объект.СтатьяДДС = КэшируемыеФункции.ПолучитьСтатьюОплатаПоставщику();
	ИначеЕсли
		Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ПрочийРасход ТОГДА
	    Объект.СтатьяДДС = справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура КассаПриИзменении(Элемент)
	КассаПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура КассаПриИзмененииНаСервере()
	Если Объект.Касса.Организация <> Объект.Организация Тогда 
		
		Объект.Организация = Объект.Касса.Организация;
		ОрганизацияПриИзмененииНаСервере();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	ЗаполнитьСтатьиДДС();
	
	// Проверим отдел и подразделение пока тут (потом просто выставить метаданных)
	
	Если Объект.Подразделение.Пустая() Тогда
		ОбщиеФункции.СообщитьТекст("Не заполнено подразделение", "Объект.Подразделение", Объект);
		Отказ = Истина; КонецЕсли;
	
	Если Объект.Подразделение.Пустая() Тогда
		ОбщиеФункции.СообщитьТекст("Не заполнен отдел", "Объект.Отдел", Объект);
		Отказ = Истина; КонецЕсли;
	
КонецПроцедуры
&НаСервере
Процедура ЗаполнитьСтатьиДДС()
	//перенесем
	//Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПокупателю ТОГДА
	//	Объект.СтатьяДДС = КэшируемыеФункции.ПолучитьСтатьюВозвратПокупателю();
	//ИначеЕсли
	//	Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику ТОГДА
	//	Объект.СтатьяДДС = КэшируемыеФункции.ПолучитьСтатьюОплатаПоставщику();
	//ИначеЕсли
	//	Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ПрочийРасход ТОГДА
	//    Объект.СтатьяДДС = справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	//КонецЕсли;
	
	СтатьяДДСПриИзмененииНаСервере(Объект.СтатьяДДС, Объект.СтатьяДДСБух);
		
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииНаСервере();

КонецПроцедуры

#Область СтатьяДДС
&НаСервере
Процедура СтатьяДДСПриИзмененииНаСервере(Ст1, Ст2)
	
	ФункцииФормДокументов.ПриИзмененииСтатьиДДС(Ст1, Ст2);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДДСПриИзменении(Элемент)
	
	СтатьяДДСПриИзмененииНаСервере(Объект.СтатьяДДС, Объект.СтатьяДДСБух);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДДСБухПриИзменении(Элемент)
	
	//ФункцииФормДокументов.ПриИзмененииСтатьиДДС(Объект.СтатьяДДСБух, Объект.СтатьяДДС);
	
КонецПроцедуры

#КонецОбласти



#Область ПодобратьЗаказы

&НаКлиенте
Процедура ПодобратьЗаказы(Команда)

	АдресРасшифровкиСуммы=ПоместитьТЧвВХ();
	стрВозврТабл = ОткрытьФорму("ОбщаяФорма.ПодборЗаказовДляДокументовОплаты", 
			Новый Структура("Контрагент, Сумма, ТекущийДокумент, АдресРасшифровкиСуммы,ЭтоВозвратОплаты", 
					Объект.Контрагент, 
					Объект.Сумма,
					Объект.Ссылка,
					АдресРасшифровкиСуммы,
					Истина),,,,,Новый ОписаниеОповещения("ОбработкаПодбораЗаказов",ЭтаФОрма,));

КонецПроцедуры

&НаСервере
Функция ПоместитьТЧвВХ(); 
	Возврат ПоместитьВоВременноеХранилище(Объект.РасшифровкаСуммы.Выгрузить());
КонецФункции	

&НаКлиенте
Процедура ОбработкаПодбораЗаказов(Результат, Параметры) Экспорт
	Если Результат <> Неопределено Тогда
		ЗаполнитьПодобранныеЗаказы(Результат);
	КонецЕсли;
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьПодобранныеЗаказы(стрВозврТабл)
	
	ТЗ= ЗначениеИзСтрокиВнутр(стрВозврТабл);
	Модифицированность=Истина;	
	Объект.РасшифровкаСуммы.Очистить();
	Объект.РасшифровкаСуммы.Загрузить(ТЗ);
	
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьЗаказыАвтоматом(Команда)
	
	ОтветРобота = ЗаполнитьЗаказыАвтоматомНаСервере();
	ПоказатьОповещениеПользователя(ОтветРобота,,,БиблиотекаКартинок.Робот);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьЗаказыАвтоматомНаСервере()
	
	Парам=Новый Структура("Контрагент,Ссылка,Сумма,НазначениеПлатежа,ВидДокумента",Объект.Контрагент,Объект.Ссылка,Объект.Сумма,Объект.Комментарий,Объект.Ссылка.Метаданные().Имя);
	Рез=ВзаиморасчетыСервер.ПолучитьЗаказыДляПлатежки(Парам);
	ТЗ=Рез.ТабЗаказов;
	ОтветРобота=Рез.ОтветРобота;
	Если ТЗ.Количество() Тогда
		
		Объект.РасшифровкаСуммы.Очистить();
		Объект.РасшифровкаСуммы.Загрузить(ТЗ);
		
		
	КонецЕсли;	
	
	Возврат ОтветРобота;
	
КонецФункции

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ЗапретРедактирования.УстановитьРежимТолькоПросмотрПоДатеЗапрета(ЭтаФорма);

КонецПроцедуры

#КонецОбласти


#Область ККТ
&НаКлиенте
Процедура ККТПровести(Команда)
	Если Модифицированность Тогда
		ПоказатьПредупреждение(,"Перед пробитием по ККТ необходимо записать документ!");
		Возврат;
	КонецЕсли;
	
	ИнкассациюНаФискальномУстройстве();
КонецПроцедуры

&НаКлиенте
Процедура ИнкассациюНаФискальномУстройстве()
	Если НЕ ОбщегоНазначения.НужноПробитиеПоКассе(Объект.Касса) Тогда
		//ПоказатьПредупреждение(,"Не установлен признак необходимости проведения по кассе");
		Возврат;
	КонецЕсли;
	Если Объект.ПроведеноПоККТ Тогда
		ПоказатьПредупреждение(,"Документ уже был проведен по кассе");
		Возврат;
	КонецЕсли;
	Если НЕ Объект.Проведен Тогда
		ПоказатьПредупреждение(,"Для проведения документа по кассе он должен быть проведён в системе");
		Возврат;
	КонецЕсли;
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ПрочийРасход") ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ОплатаПоставщику") Тогда
		//Если НЕ ОбщегоНазначения.НужнаИнкассация(Объект.Касса) Тогда
		//	Возврат;
		//КонецЕсли;
		
		ЭтаФорма.Доступность = Ложь; //При необходимости можно заблокировать интерфейс пользователя.
		
		ТипИнкассации = 0; //  Тип операции (0 - Выемка / 1 - Внесение)
		СуммаОперации = Объект.Сумма; // Сумма внесения/выемки
		ПараметрыОперации = Новый Структура("ТипИнкассации, Сумма", ТипИнкассации, СуммаОперации);
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("ИнкассациюНаФискальномУстройствеЗавершение", ЭтотОбъект);
		МенеджерОборудованияКлиент.НачатьИнкассациюНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, ПараметрыОперации);
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВозвратПокупателю") Тогда
		ПробитьЧекПоКассе();
	Иначе
		ПоказатьПредупреждение(,"Неизвестный вид РКО! Движения по кассе невозможны!");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИнкассациюНаФискальномУстройствеЗавершение(РезультатВыполнения, Параметры) Экспорт

	ЭтаФорма.Доступность = Истина; //При необходимости разблокируем интерфейс пользователя.

	Если НЕ РезультатВыполнения.Результат Тогда
		ПоказатьПредупреждение(,"Внимание! Не удалось провести документ по ККТ! Для проведения - откройте документ и нажмите кнопку ""ККТ Провести"""+Символы.ПС+Символы.ПС+"Техническая информация: "+РезультатВыполнения.ОписаниеОшибки);
		//ТекстСообщения = НСтр("ru = 'При выполнении операции произошла ошибка:""%ОписаниеОшибки%"".'");
		//ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		//Сообщить(ТекстСообщения);
	Иначе
		ОбщегоНазначения.УстановитьРеквизитПроведеноПоККТ(Объект.Ссылка);
		УстановитьВидимостьККТ();
		СобытияСистемы.ОповеститьОПробитииЧека(Объект.Ссылка);
		Если ЭтаФорма.Открыта() Тогда
			Закрыть();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекПоКассе()
	Ошибка = "";
	ОбщиеПараметры = ПолучитьШаблонЧека(Ошибка);
	Если ОбщиеПараметры = Неопределено Тогда
		ПоказатьПредупреждение(,"Невозможно напечатать чек! Возникла ошибка: "+Ошибка);
		Возврат;
	КонецЕсли;
	ЭтаФорма.Доступность = Ложь; //При необходимости можно заблокировать интерфейс пользователя.
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ПечатьЧекаЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьФискализациюЧекаНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, ОбщиеПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЧекаЗавершение(РезультатВыполнения, Параметры) Экспорт
 
	ЭтаФорма.Доступность = Истина; //При необходимости разблокируем интерфейс пользователя.

	Если НЕ РезультатВыполнения.Результат Тогда
		ПоказатьПредупреждение(,"Не удалось пробить чек! Устраните проблему и нажмите кнопку ""ККТ Пробить"", находящуюся наверху."+Символы.ПС+Символы.ПС+"Техническая информация: "+РезультатВыполнения.ОписаниеОшибки);
	Иначе
		ОбщегоНазначения.УстановитьРеквизитПроведеноПоККТ(Объект.Ссылка);
		УстановитьВидимостьККТ();
		СобытияСистемы.ОповеститьОПробитииЧека(Объект.Ссылка);
		Если ЭтаФорма.Открыта() Тогда
			Закрыть();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьШаблонЧека(Ошибка)
	//Товары = ПолучитьНоменклатуруПоЗаказам();
	
	
	// Общие параметры чека
	ОбщиеПараметры = МенеджерОборудованияКлиентСервер.ПараметрыОперацииФискализацииЧека();

	// Параметры установлены по умолчанию.
	ОбщиеПараметры.ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств"); // Перечисление "ТипыРасчетаДенежнымиСредствами"
	ОбщиеПараметры.Электронно = Ложь; // Если Электронно = Истина, то чек будет предоставлен в элетронной форме, без печати.
	ОбщиеПараметры.Отправляет1СSMS   = Ложь; // SMS отправляет средствами 1C.
	ОбщиеПараметры.Отправляет1СEmail = Ложь; // Email отправляет средствами 1C.
	ОбщиеПараметры.ПокупательEmail = Неопределено;
	ОбщиеПараметры.ПокупательНомер = Неопределено;

	// Параметры необходимые для чека ЕНВД на принтере чеков
	ОбщиеПараметры.Кассир = Строка(Объект.Ответственный);
	//ОбщиеПараметры.ОрганизацияНазвание = "ООО ""1C-СОФТ""";
	//ОбщиеПараметры.ОрганизацияИНН = "7709860400";
	//ОбщиеПараметры.ОрганизацияКПП = "770901001";
	//ОбщиеПараметры.НомерКассы = "00001";
	//ОбщиеПараметры.НомерЧека = "1";
	//ОбщиеПараметры.НомерСмены = "1";
	КодСистемы = ОбщегоНазначения.ПолучитьКодСистемыНалогообложения(Объект.Касса,Ошибка);
	Если КодСистемы = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	ОбщиеПараметры.КодСистемыНалогообложения = КодСистемы;

	Если Объект.РасшифровкаСуммы.Количество() = 0 Тогда
		Ошибка = "Нет расшифровки суммы";
		Возврат Неопределено;
	КонецЕсли;
	
	СуммаПоДокументам = ОбщегоНазначения.ККТЗаполнитьНоменклатуру(Объект.Ссылка,ОбщиеПараметры,Ошибка);
	Если ЗначениеЗаполнено(Ошибка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если СуммаПоДокументам<>Объект.Сумма Тогда
		Ошибка = "Сумма по оплате не соответствует сумме по реализациям или реализации не заполнены. Невозможно разнести суммы в чеке.";
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокаОплаты = Новый Структура();
	СтрокаОплаты.Вставить("Сумма", Объект.Сумма);
	СтрокаОплаты.Вставить("Наименование", "Наличная оплата");
	СтрокаОплаты.Вставить("ТипОплаты", 0); 
	ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);

	Возврат ОбщиеПараметры;

КонецФункции

&НаСервере
Процедура УстановитьВидимостьККТ()
	Если Не Объект.Ссылка.Пустая() И Объект.Касса.ПродажаПоККТ И НЕ Объект.ПроведеноПоККТ Тогда
		Элементы.ФормаККТПровести.Видимость = Истина;
	Иначе
		Элементы.ФормаККТПровести.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
