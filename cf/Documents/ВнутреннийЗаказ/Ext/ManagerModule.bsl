Процедура ИницилизироватьДополнительныеДанныеДокумента(Ссылка, ДополнительныеСвойства) Экспорт
	
	Если ТипЗнч(Ссылка.ЗаказЧик) = Тип("БизнесПроцессСсылка.СборкаЗаказа") Тогда
		ДокументРезерва = Ссылка.ЗаказЧик.Заказ;
	Иначе
		ДокументРезерва = Ссылка;
	КонецЕсли;
	
	ЕстьСборкаЗаказа = ТипЗнч(Ссылка.Заказчик) = Тип("БизнесПроцессСсылка.СборкаЗаказа");
	
	Запрос = Новый Запрос(
	
	КэшируемыеФункции.ТектЗапросаПолученияПараметровСистемы() + "
	
	|;
	|ВЫБРАТЬ
	|	Заказчик
	|ИЗ
	|	Документ.ВнутреннийЗаказ
	|ГДЕ
	|	Ссылка = &Ссылка
	|;
	|
	
	// внутренние заказы
	
	|ВЫБРАТЬ
	|	&Период				КАК Период,
	|	ВЫБОР КОГДА Количество < 0 ТОГДА &ВидДвиженияРасход ИНАЧЕ &ВидДвиженияПриход КОНЕЦ	КАК ВидДвижения,
	|	&Ссылка				КАК ВнутреннийЗаказ,
	|	Ссылка.Заказчик		КАК Заказчик,
	|	Размещение	 		КАК Размещение,
	|	Номенклатура,
	|	Упаковка,
	|	СУММА(ВЫБОР КОГДА Количество < 0 ТОГДА -Количество ИНАЧЕ Количество КОНЕЦ)	КАК Количество
    |ИЗ
	|	Документ.ВнутреннийЗаказ.Товары
	|
	|ГДЕ
	|	Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР КОГДА Количество < 0 ТОГДА &ВидДвиженияРасход ИНАЧЕ &ВидДвиженияПриход КОНЕЦ,
	|	Ссылка.Заказчик,
	|	Размещение,
	|	Номенклатура,
	|	Упаковка
	|;
	
	// Резервы
	
	|ВЫБРАТЬ
	|	&Период				Период,
	|	ВЫБОР КОГДА Количество < 0 ТОГДА &ВидДвиженияРасход ИНАЧЕ &ВидДвиженияПриход КОНЕЦ	КАК ВидДвижения,
	|	Размещение 			Размещение,
	|	&ДокументРезерва	ДокументРезерва,
	|	Номенклатура		Номенклатура,
	|	ВЫБОР КОГДА Упаковка = &ПустаяУпаковка Тогда
	|   	СУММА(ВЫБОР КОГДА Количество < 0 ТОГДА -Количество ИНАЧЕ Количество КОНЕЦ)
	|	ИНАЧЕ
	|		СУММА(ВЫБОР КОГДА Количество < 0 ТОГДА -Количество*Упаковка.Коэффициент ИНАЧЕ Количество*Упаковка.Коэффициент КОНЕЦ)
	|   КОНЕЦ КАК Количество
    |ИЗ
	|	Документ.ВнутреннийЗаказ.Товары
	|
	|ГДЕ
	|	Ссылка = &Ссылка И
	|	Размещение ССЫЛКА Справочник.Склады И Размещение <> &ПустойСклад
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР КОГДА Количество < 0 ТОГДА &ВидДвиженияРасход ИНАЧЕ &ВидДвиженияПриход КОНЕЦ,
	|	Номенклатура,
	|	Упаковка,
	|	Размещение
	|;
		
	/// Сборка заказа
	//
	//|ВЫБРАТЬ
	//|	&Период					КАК Период,
	//|	&ВидДвиженияРасход		КАК ВидДвижения,
	//|	Док.Ссылка.Заказчик.Склад 	СкладЯчейка,
	//|	Рег.Сборщик 			КАК Сборщик,
	//|	&ЗаказСборки			КАК Заказ,
	//|	Док.Номенклатура		КАК Номенклатура,
	//|	Док.Упаковка			КАК Упаковка,
	//|	СУММА(Док.Количество)	КАК ВСборке
	//|ИЗ
	//|	Документ.ВнутреннийЗаказ.Товары КАК Док
	//|
	//|ЛЕВОЕ СОЕДИНЕНИЕ
	//|	(
	//|		ВЫБРАТЬ
	//|			Номенклатура,
	//|			Упаковка,
	//|			ВЫБОР КОГДА СкладЯчейка ССЫЛКА Справочник.Ячейки ТОГДА СкладЯчейка.Владелец ИНАЧЕ СкладЯчейка КОНЕЦ Склад,
	//|			МАКСИМУМ(Сборщик) КАК Сборщик
	//|		ИЗ
	//|			РегистрНакопления.СборкаЗаказа.Остатки(,Заказ = &ЗаказСборки)
	//|
	//|		СГРУППИРОВАТЬ ПО
	//|			Номенклатура,
	//|			Упаковка,
	//|			ВЫБОР КОГДА СкладЯчейка ССЫЛКА Справочник.Ячейки ТОГДА СкладЯчейка.Владелец ИНАЧЕ СкладЯчейка КОНЕЦ
	//|
	//|	) КАК Рег
	//|ПО
	//|	Док.Номенклатура 	= Рег.Номенклатура И
	//|	Док.Упаковка 		= Рег.Упаковка И
	//|	Док.Размещение 		= Рег.Склад
	//|
	//|ГДЕ
	//|	Ссылка = &Ссылка И
	//|	Ссылка.Заказчик ССЫЛКА БизнесПроцесс.СборкаЗаказа И
	//|	Ссылка.Заказчик <> &ПустаяСборка И
	//|	Ссылка.Заказчик = &ЗаказЧик И
	//|	Размещение <> &ПустойСклад
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	Док.Номенклатура,
	//|	Док.Упаковка,
	//|	Док.Ссылка.Заказчик.Склад,
	//|	Рег.Сборщик
	
	// РАЗМЕЩЕНИЕ ЗАКАЗОВ
	
	|ВЫБРАТЬ
	|	&Период				КАК Период,
	|	ВЫБОР КОГДА Количество < 0 ТОГДА &ВидДвиженияРасход ИНАЧЕ &ВидДвиженияПриход КОНЕЦ	КАК ВидДвижения,
	|	Размещение 			Очередь,
	|	&Ссылка				КАК Заказ,
	|	Номенклатура,
	|	Упаковка,
	|	СУММА(ВЫБОР КОГДА Количество < 0 ТОГДА -Количество ИНАЧЕ Количество КОНЕЦ)	Количество
    |ИЗ
	|	Документ.ВнутреннийЗаказ.Товары
	|
	|ГДЕ
	|	Ссылка = &Ссылка И
	|	НЕ Размещение ССЫЛКА Справочник.Склады И Размещение <> Неопределено И ЕСТЬNULL(Размещение, 0) <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР КОГДА Количество < 0 ТОГДА &ВидДвиженияРасход ИНАЧЕ &ВидДвиженияПриход КОНЕЦ,
	|	Размещение,
	|	Номенклатура,
	|	Упаковка
	|;
	
	// ОТГРУЖЕННЫЕ ЗАКАЗЫ

	|ВЫБРАТЬ
	|	&Период	Период,
	|	Ссылка 	Заказ,
	|	СУММА(Номенклатура.Вес * ВЫБОР КОГДА Упаковка = &ПустаяУпаковка ТОГДА Количество ИНАЧЕ Количество * Упаковка.Коэффициент КОНЕЦ) 	ВесЗаказа,
	|	СУММА(Номенклатура.Объем * ВЫБОР КОГДА Упаковка = &ПустаяУпаковка ТОГДА Количество ИНАЧЕ Количество * Упаковка.Коэффициент КОНЕЦ) 	ОбъемЗаказа
	|ИЗ
	|	Документ.ВнутреннийЗаказ.Товары
	|ГДЕ
	|	Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Ссылка
	
	|");
	
	//Запрос.УстановитьПараметр("Область", 				ПараметрыСеанса.ТекущаяОбласть);
	Запрос.УстановитьПараметр("Ссылка", 				Ссылка);
	Запрос.УстановитьПараметр("Период", 				Ссылка.Дата);
	Запрос.УстановитьПараметр("ВидДвиженияПриход", 		ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("ВидДвиженияРасход", 		ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("ПустойСклад", 			Справочники.Склады.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСборка", 			БизнесПроцессы.СборкаЗаказа.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяУпаковка", 		Справочники.УпаковкиНоменклатуры.ПустаяСсылка());
	Запрос.УстановитьПараметр("ЗаказЧик", 				Ссылка.Заказчик);
	Запрос.УстановитьПараметр("ДокументРезерва",		ДокументРезерва);
		
	//Если ЕстьСборкаЗаказа Тогда
	//	Запрос.УстановитьПараметр("ЗаказСборки", 			Ссылка.Заказчик.Заказ);
	//КонецЕсли;
	
	Пакет = Запрос.ВыполнитьПакет();
	
	ДополнительныеСвойства.Вставить("ПараметрыСистемы", КонвертацияТипов.ПолучитьСтруктуруИзСТрокиТаблицыЗначений(Пакет[0].Выгрузить()));
	ДополнительныеСвойства.Вставить("Шапка", 			КонвертацияТипов.ПолучитьСтруктуруИзСТрокиТаблицыЗначений(Пакет[1].Выгрузить()));
	ДополнительныеСвойства.Вставить("ВнутренниеЗаказы", Пакет[2].Выгрузить());
	ДополнительныеСвойства.Вставить("ТоварыВРезерве", 	Пакет[3].Выгрузить());
	ДополнительныеСвойства.Вставить("РазмещениеЗаказов",Пакет[4].Выгрузить());
	ДополнительныеСвойства.Вставить("ОтгруженныеЗаказы",Пакет[5].Выгрузить());
	
	//Если ЕстьСборкаЗаказа Тогда
	//	ДополнительныеСвойства.Вставить("СборкаЗаказа", 	Пакет[4].Выгрузить());
	//КонецЕсли;
	
КонецПроцедуры

Процедура Печать_ВнутреннийЗаказ(ТабДокумент, Ссылка) Экспорт
	
	Макет = Документы.ВнутреннийЗаказ.ПолучитьМакет("Заказ");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	Организация,
	|	ПРЕДСТАВЛЕНИЕ(Заказчик)    КАК Заказчик,
	|	Организация КАК Руководители,
	|	Организация КАК Поставщик,
	|	"" КАК Исполнитель,
	|	"" КАК ПодразделениеИсполнитель
	|ИЗ
	|	Документ.ВнутреннийЗаказ КАК ЗаказПокупателя
	|
	|ГДЕ
	|	ЗаказПокупателя.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Номенклатура.Код 			КАК Код,
	|	ВложенныйЗапрос.Номенклатура.Артикул 		КАК Артикул,
	|	СУММА(ВложенныйЗапрос.Количество) 			КАК Количество,
	|	ВложенныйЗапрос.ЕдиницаИзмерения		 	КАК ЕдиницаИзмерения,
	|	МИНИМУМ(ВложенныйЗапрос.НомерСтроки) 		КАК НомерСтроки
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказПокупателя.Номенклатура КАК Номенклатура,
	|		ВЫБОР КОГДА ЗаказПокупателя.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)ТОГДА
	|			ПРЕДСТАВЛЕНИЕ(ЗаказПокупателя.Номенклатура.ЕдиницаИзмерения)
	|		ИНАЧЕ 
	|			ПРЕДСТАВЛЕНИЕ(ЗаказПокупателя.Упаковка)
	|		КОНЕЦ 						 КАК ЕдиницаИзмерения,
	|		ЗаказПокупателя.Количество КАК Количество,
	|		ЗаказПокупателя.НомерСтроки КАК НомерСтроки
	|	ИЗ
	|		Документ.ВнутреннийЗаказ.Товары КАК ЗаказПокупателя
	|	ГДЕ
	|		ЗаказПокупателя.Ссылка = &ТекущийДокумент
	|	) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Номенклатура.Код,
	|	ВложенныйЗапрос.Номенклатура.Артикул,
	|	ВложенныйЗапрос.ЕдиницаИзмерения
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	ЗапросТовары = Запрос.Выполнить().Выгрузить();

	// Выводим шапку накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ФормированиеПечатныхФорм.СформироватьЗаголовокДокумента(Шапка, НСтр("ru = 'Внутренний заказ'"));
	
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Заказчик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеЗаказчика = Шапка.Заказчик;
	ТабДокумент.Вывести(ОбластьМакета);

	ВыводитьКоды = Истина;
	Колонка = "Артикул";

	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);

	ОбластьКолонкаТовар = Макет.Область("Товар");
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");

	Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл 

		Если ВыборкаСтрокТовары.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьНомера.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
		ТабДокумент.Вывести(ОбластьНомера);

		Если ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
			Иначе
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьДанных.Параметры.Товар = ВыборкаСтрокТовары.Номенклатура.НаименованиеПолное;
		ТабДокумент.Присоединить(ОбластьДанных);

	КонецЦикла;

	// Вывести Итого
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + ЗапросТовары.Количество();
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("ПодвалЗаказа");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	//ФИОИсполнитель = ФормированиеПечатныхФорм.ФамилияИнициалыФизЛица(Шапка.Исполнитель);
	//ОбластьМакета.Параметры.ФИОИсполнителя = ПодразделениеИсполнитель.Наименование+?(ЗначениеЗаполнено(ПодразделениеИсполнитель) И ЗначениеЗаполнено(ФИОИсполнитель),"; ","")+ФИОИсполнитель;

	ТабДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры
		
Функция ПолучитьданныеДляТТН(МассивСсылок, _Параметры = Неопределено) Экспорт		
	УстановитьПривилегированныйРежим(Истина);	
	КолонкаКодов = ""; // ФормированиеПечатныхФорм.ИмяДополнительнойКолонки();
	Если Не ЗначениеЗаполнено(КолонкаКодов) Тогда
		КолонкаКодов = "Артикул";
	КонецЕсли;
	
	Ссылка = МассивСсылок[0];
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	Док.Ссылка 	КАК Ссылка,
	               |	Док.Номер 	КАК Номер,
	               |	Док.Дата 	КАК Дата,
	               |	&Грузоотправитель 	КАК Грузоотправитель,
	               |	&Грузополучатель 	КАК Грузополучатель,
	               |	&Организация 		КАК Организация,
				   |	&Валюта,
				   |	ИСТИНА КАК ЦенаВключаетНДС,
				   |	ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка) КАК БанковскийСчетКонтрагента,
				   |	ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка) КАК БанковскийСчетГрузополучателя,
				   |	ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка) КАК БанковскийСчетГрузоотправителя,
				   |	ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка) КАК БанковскийСчеторганизации,
	               |	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент,
	               |	"""""""" КАК Кладовщик,
	               |	"""""""" КАК ДолжностьКладовщика,
	               |	ЕСТЬNULL(Рук.ФизическоеЛицо.Наименование, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) КАК Руководитель,
	               |	ЕСТЬNULL(Рук.Должность, """""""") КАК ДолжностьРуководителя,
	               |	ЕСТЬNULL(Бух.ФизическоеЛицо.Наименование, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) КАК ГлавныйБухгалтер,
	               |	"""""""" КАК ДоверенностьНомер,
	               |	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДоверенностьДата,
	               |	"""""""" КАК ДоверенностьВыдана,
	               |	"""""""" КАК ДоверенностьЛицо,
	               |	ЕСТЬNULL(НаименованияТоваров.Количество,0) КАК КоличествоНаименований
	               |ИЗ
	               |	Документ.ВнутреннийЗаказ КАК Док
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизации.СрезПоследних(
	               |				&Дата,
	               |				Организация = &Организация
	               |					И ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизации.ГлавныйБухгалтер)) КАК Бух
	               |		ПО (ИСТИНА)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизации.СрезПоследних(
	               |				&Дата,
	               |				Организация = &Организация
	               |					И ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизации.Руководитель)) КАК Рук
	               |		ПО (ИСТИНА)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			СУММА(1) КАК Количество
	               |		ИЗ
	               |			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |				РВнутреннийЗаказ.ВнутреннийЗаказ КАК Ссылка,
	               |				РВнутреннийЗаказ.Номенклатура КАК Номенклатура
	               |			ИЗ
	               |				РегистрНакопления.ВнутренниеЗаказы.Обороты(,,,ВнутреннийЗаказ В (&МассивСсылок)) КАК РВнутреннийЗаказ
	               |			ГДЕ
	               |			    РВнутреннийЗаказ.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)) КАК СписокТоваров) КАК НаименованияТоваров
	               |		ПО (ИСТИНА)
	               |ГДЕ
	               |	Док.Ссылка = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
				   |	0 КАК Сумма,
				   |	0 КАК СуммаНДС,
				   |	0 КАК Цена,
				  // |	ИСТИНА КАК ЦенаВключаетНДС,
	               |	Товары.Номенклатура КАК Номенклатура,
	               |	Товары.Номенклатура.Артикул КАК ТоварКод,
	               |	Товары.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	               |	Товары.КоличествоПриход КАК Количество,
	               |	ВЫБОР
	               |		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	               |			ТОГДА Товары.Номенклатура.ЕдиницаИзмерения.Наименование
	               |		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(Товары.Упаковка)
	               |	КОНЕЦ КАК ВидУпаковки,
	               |	ВЫБОР
	               |		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	               |			ТОГДА Товары.Номенклатура.ЕдиницаИзмерения.Наименование
	               |		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(Товары.Упаковка)
	               |	КОНЕЦ КАК БазоваяЕдиницаНаименование,
	               |	0 КАК МассаБрутто,
	               |	Товары.КоличествоПриход * Товары.Номенклатура.Вес КАК МассаНетто,
	               |	0 КАК КоличествоМест,
	               |	ЛОЖЬ КАК Весовой,
	               |	ЛОЖЬ КАК ЭтоВозвратнаяТара
	               |ИЗ
	               |	РегистрНакопления.ВнутренниеЗаказы.Обороты(, , , ВнутреннийЗаказ В (&МассивСсылок)) КАК Товары
	               |ГДЕ
	               |	Товары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)";
	               //|УПОРЯДОЧИТЬ ПО";
	              // |	Товары.НомерСтроки";
	
	Запрос.УстановитьПараметр("Дата", 	Ссылка.Дата);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Запрос.УстановитьПараметр("Организация", _Параметры._Организация);
	Запрос.УстановитьПараметр("Грузоотправитель", ?(ЗначениеЗаполнено(_Параметры._Грузоотправитель), _Параметры._Грузоотправитель, _Параметры._Организация));
	Запрос.УстановитьПараметр("Грузополучатель", _Параметры._Грузополучатель);
	Запрос.УстановитьПараметр("Валюта", Справочники.Валюты.НайтиПоКоду("643"));
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(Ссылка);
	ТаблицаКурсовВалют = Новый ТаблицаЗначений;//ПолучитьТаблицуКурсовВалют(МассивОбъектов);
	
	МассивРезультатов 			= Запрос.ВыполнитьПакет();
	РезультатПоШапке			= МассивРезультатов[0];
	РезультатПоТабличнойЧасти 	= МассивРезультатов[1];
	
	СтруктураДанныхДляПечати 	= Новый Структура("РезультатПоШапке, РезультатПоТабличнойЧасти, ТаблицаКурсовВалют",
												   РезультатПоШапке, РезультатПоТабличнойЧасти, ТаблицаКурсовВалют);
	
	Возврат СтруктураДанныхДляПечати;
		
КонецФункции

Функция ПолучитьДанныеДляПечатитранспортнаяНакладная(Ссылка, _Параметры = Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВнутреннийЗаказ.Ссылка КАК Ссылка,
	|	ВнутреннийЗаказ.Номер КАК Номер,
	|	ВнутреннийЗаказ.Дата КАК Дата,
	|	&Организация КАК Организация,
	|	&Грузополучатель КАК Грузополучатель,
	|	&Грузоотправитель КАК Грузоотправитель,
	//|	&Контрагент КАК Контрагент,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент,
	//|	&ЗаказчикПеревозок,
	|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК ЗаказчикПеревозок,
	|	"""" КАК Кладовщик,
	|	"""" КАК ДолжностьКладовщика
	|ИЗ
	|	Документ.ВнутреннийЗаказ КАК ВнутреннийЗаказ
	|ГДЕ
	|	ВнутреннийЗаказ.Ссылка = &МассивДокументов
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	Запрос.УстановитьПараметр("Организация", _Параметры._Организация);
	Запрос.УстановитьПараметр("Грузополучатель", _Параметры._Грузополучатель);
	Запрос.УстановитьПараметр("Грузоотправитель", _Параметры._Грузоотправитель);
	Запрос.УстановитьПараметр("МассивДокументов", Ссылка);
	//Запрос.УстановитьПараметр("Контрагент", );
	//Запрос.УстановитьПараметр("ЗаказчикПеревозок", );
	ТаблицаРезульта = Запрос.Выполнить().Выгрузить();
		
	Возврат ТаблицаРезульта
КонецФункции

//Функция ПолучитьТаблицуКурсовВалют(МассивДокументов)
//	
//	ВалютаРегламентированногоУчета = ОбщиеФункции.ПолучитьЗначениеКонстантыВОбласти("ВалютаУправленческогоУчета");
//	
//	Запрос = Новый Запрос("
//		|ВЫБРАТЬ РАЗЛИЧНЫЕ
//		|	НАЧАЛОПЕРИОДА(ВнутреннийЗаказ.Дата, ДЕНЬ) КАК Дата,
//		|	ВнутреннийЗаказ.Валюта КАК Валюта
//		|ИЗ
//		|	Документ.РеализацияТоваров КАК РеализацияТоваровУслуг
//		|ГДЕ
//		|	РеализацияТоваровУслуг.Ссылка В(&МассивДокументов)
//		|	И РеализацияТоваровУслуг.Валюта <> &ВалютаРегламентированногоУчета
//		|
//		|УПОРЯДОЧИТЬ ПО
//		|	Валюта,
//		|	Дата
//		|");
//	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
//	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
//	
//	ТаблицаКурсовВалют = Новый ТаблицаЗначений;
//	ТаблицаКурсовВалют.Колонки.Добавить("Валюта",    Новый ОписаниеТипов("СправочникСсылка.Валюты"));
//	ТаблицаКурсовВалют.Колонки.Добавить("Дата",      Новый ОписаниеТипов("Дата"));
//	ТаблицаКурсовВалют.Колонки.Добавить("Курс",      Новый ОписаниеТипов("Число"));
//	ТаблицаКурсовВалют.Колонки.Добавить("Кратность", Новый ОписаниеТипов("Число"));
//	
//	Выборка = Запрос.Выполнить().Выбрать();
//	
//	Пока Выборка.Следующий() Цикл
//		
//		НоваяСтрока = ТаблицаКурсовВалют.Добавить();
//		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
//		
//		КурсыВалюты = ОбщиеФункции.ПолучитьКурсВалюты(Выборка.Валюта, Выборка.Дата);
//		НоваяСтрока.Курс = КурсыВалюты.Курс;
//		НоваяСтрока.Кратность = КурсыВалюты.Кратность;
//		
//	КонецЦикла;
//	
//	Возврат ТаблицаКурсовВалют;
//	
//КонецФункции // ПолучитьТаблицуКурсовВалют()