&НаКлиенте
Перем СтруктураКолонокТовары Экспорт;

&НаКлиенте
Процедура ОбщиеРеквизиты(Команда)
	
	 ФункцииФормДокументов.ОткрытьОбщиеРеквизиты(ЭтаФорма);
	 
	 УправлениеВидимостьюДоступностью();
	 
КонецПроцедуры
&НаСервере
Процедура ПересчитатьСуммыТабличныхЧастей(СтруктураКолонокТовары) Экспорт
	
	ФункцииФормДокументов.ПересчитатьСуммыТабличныхЧастей(Объект.Товары, СтруктураКолонокТовары);
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВидимостьюДоступностью()
	
	Элементы.РезервыРаздатьРезерв.Видимость = Объект.Дата = '00010101' ИЛИ НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата());
	
КонецПроцедуры

&НаСервере
Функция СкладЯчеестый()
	
	Возврат Объект.Склад.Ячеестый;
	
КонецФункции

// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Рассчитаем динамические колонки
	//
	//ФункцииФормДокументов.РассчитатьДинамическиеКолонки(
	//				Объект.Товары,
	//				ФункцииФормДокументов.ПолучитьСтруктуруКолонокТовары(Элементы.Товары, Объект.СуммаВключаетНДС), Объект.СуммаВключаетНДС);
					
	// Значения по умолчанию
				
	Если Объект.Ссылка.Пустая() Тогда
		
		Объект.ОповеститьМенеджеровОПоявленииТовара = Истина;
		
		Если НЕ ЗначениеЗаполнено(Параметры.Основание) Тогда
						
			//ФункцииФормДокументов.ЗаполнитьЗначенияПоУмолчанию(ЭтаФорма, Объект);
			ФункцииФормДокументов.ЗаполнитьЗначенияПоУмолчанию(Объект, ФункцииФормДокументов.ПолучитьРеквизитыДокумента(Документы.РеализацияТоваров.ПустаяСсылка()));
			
		КонецЕсли;
		Объект.Курс=ПолучитьКурсВалютыНаСервере(Объект.Валюта);
	КонецЕсли;
	
	ДолгПартнера = ?(Объект.Ссылка.Пустая(), 0, ДенежныеСредства.ПолучитьДолгПартнера(Объект.Партнер));
	
	// информация о товаре
	РаботаСНоменклатурой.ДобавитьОперативнуюИнформациюОТоваре(ЭтаФорма);
	
	// Рассчитаем динамические колонки
	
	ФункцииФормДокументов.РассчитатьДинамическиеКолонки(
					Объект.Товары,
					ФункцииФормДокументов.ПолучитьСтруктуруКолонокТовары(Элементы.Товары, Объект.СуммаВключаетНДС, Объект.ТипЦен, , , ,Объект.УчитыватьНДС));
					
	//Поля = Элементы.Товары.ОтборСтрок.ПолучитьДоступныеПоля();
		
	ФункцииФормДокументовСервер.УстановитьСвязиГрузополучателя(Объект,Элементы,Новый Структура("Грузополучатель, БанковскийСчетГрузополучателя, Грузоотправитель, БанковскийСчетГрузоотправителя","Объект.Организация","Объект.Грузополучатель","Объект.Контрагент","Объект.Грузоотправитель"));
	
	// прикрепленные файлы
	ОбновитьВидимостьПрикрепленныхФайловНаСервере();
	
	// + neti Муталлапова 25.05.2017
	ЗаполнитьТаблицуХарактеристикНоменклатуры();
	УстановитьДоступностьКолонок();
	// - neti Муталлапова 25.05.2017

КонецПроцедуры

// + neti Муталлапова 25.05.2017
Процедура УстановитьДоступностьКолонок()
	
	Элементы.ТоварыКоличествоПоДокументам.ТолькоПросмотр = Не (РольДоступна("РаботаСЗакупками") Или РольДоступна("КатегорийныйМенеджер") Или РольДоступна("ПолныеПрава"));
	Элементы.Количество.ТолькоПросмотр = Не (РольДоступна("РедактированиеКоличестваВПоступленииТоваров") Или РольДоступна("ПолныеПрава"));
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуХарактеристикНоменклатуры()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура
	|ПОМЕСТИТЬ ВТ_Номенклатура
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Номенклатура.Номенклатура,
	|	ВЫРАЗИТЬ(ВТ_Номенклатура.Номенклатура КАК Справочник.Номенклатура).Вес КАК Вес,
	|	ВЫРАЗИТЬ(ВТ_Номенклатура.Номенклатура КАК Справочник.Номенклатура).Объем КАК Объем,
	|	1 КАК КоличествоВУпаковке
	|ИЗ
	|	ВТ_Номенклатура КАК ВТ_Номенклатура
	|ГДЕ
	|	(ВЫРАЗИТЬ(ВТ_Номенклатура.Номенклатура КАК Справочник.Номенклатура).Вес = 0
	|			ИЛИ ВЫРАЗИТЬ(ВТ_Номенклатура.Номенклатура КАК Справочник.Номенклатура).Объем = 0)";
	
	Запрос.УстановитьПараметр("ТаблицаТоваров", Объект.Товары.Выгрузить(, "Номенклатура,КоличествоВУпаковке"));
	
	ХарактеристикиНоменклатуры.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры
// - neti Муталлапова 25.05.2017

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СтруктураКолонокТовары = ФункцииФормДокументов.ПолучитьСтруктуруКолонокТовары(Элементы.Товары, Объект.СуммаВключаетНДС, Объект.ТипЦен,,, Объект.Валюта, Объект.УчитыватьНДС);
	
	// Видимость ячеек
	
	Элементы.ТоварыЯчейка.Видимость = СкладЯчеестый();
	
	// 	Обновим подвал
	
	ФункцииФормДокументов.ОбновитьПодвал(Объект, Элементы, Сумма, СтруктураКолонокТовары);
	
	// Управление видимостью доступностью
	
	УправлениеВидимостьюДоступностью();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ЗапретРедактирования.УстановитьРежимТолькоПросмотрПоДатеЗапрета(ЭтаФорма);

КонецПроцедуры

// ПОДБОР

&НаСервере
Функция ПоместитьТоварыВХранилище() 
	
	Возврат ПоместитьВоВременноеХранилище(
					Объект.Товары.Выгрузить(), 
					УникальныйИдентификатор);
КонецФункции
&НаКлиенте
Процедура ПодборВыполнить()
	
	ИмяТабличнойЧасти = "Товары";
	
	АдресТоваровВХранилище = ПоместитьТоварыВХранилище();
	ПараметрыПодбора = Новый Структура("АдресТоваровВХранилище", АдресТоваровВХранилище);
	
	ПараметрыПодбора.Вставить("СтруктураКолонокТовары", СтруктураКолонокТовары);
	//ПараметрыПодбора.Вставить("ВидЗапроса", 			"СписокНоменклатуры");
	//ПараметрыПодбора.Вставить("ВидыЗапросов", 			"СписокНоменклатуры");
	ПараметрыПодбора.Вставить("Склад", 					Объект.Склад);
	ПараметрыПодбора.Вставить("ТипЦен", 				Объект.ТипЦен);
	ПараметрыПодбора.Вставить("Валюта", 				Объект.Валюта);
	ПараметрыПодбора.Вставить("ЗаполнитьУпаковкуПоставщика", Истина);

	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаПодбора", ПараметрыПодбора, Элементы.Товары);
	
КонецПроцедуры
&НаСервере
Процедура ПолучитьТоварыИзХранилища(АдресТоваровВХранилище)
	
	Объект.Товары.Загрузить(ПолучитьИзВременногоХранилища(АдресТоваровВХранилище));
	
КонецПроцедуры
&НаКлиенте
Процедура ТоварыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение <> Неопределено Тогда		
		
		ПолучитьТоварыИзХранилища(ВыбранноеЗначение);		// получаем
		УдалитьИзВременногоХранилища(ВыбранноеЗначение); 	// заметаем следы
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// ШАПКА

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	// Обновим видимость ячеек
	
	Элементы.ТоварыЯчейка.Видимость = СкладЯчеестый();
	
КонецПроцедуры

// ОБРАБОТКИ ТАБЛИЧНОЙ ЧАСТИ

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент, КонкретнаяСтрока = Неопределено)

	ФункцииФормДокументов.НоменклатураПриИзменении(
				Элементы.Товары, 
				СтруктураКолонокТовары,
				КонкретнаяСтрока,,, Истина);
			
КонецПроцедуры
&НаКлиенте
Процедура КоличествоПриИзменении(Элемент, КонкретнаяСтрока = Неопределено)
	
	ФункцииФормДокументов.КоличествоПриИзменении(Элементы.Товары, СтруктураКолонокТовары, КонкретнаяСтрока);
	
КонецПроцедуры
&НаКлиенте
Процедура ЦенаПриИзменении(Элемент)
	
	ФункцииФормДокументов.ЦенаПриИзменении(Элементы.Товары, СтруктураКолонокТовары);
	
КонецПроцедуры
&НаКлиенте
Процедура СуммаПриИзменении(Элемент)
	
	ФункцииФормДокументов.СуммаПриИзменении(Элементы.Товары, СтруктураКолонокТовары);
	
КонецПроцедуры
&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент)
	
	ФункцииФормДокументов.СтавкаНДСПриИзменении(Элементы.Товары, СтруктураКолонокТовары);
	
КонецПроцедуры
&НаКлиенте
Процедура УпаковкаПриИзменении(Элемент)
	ФункцииФормДокументов.УпаковкаПриИзменении(
			Элементы.Товары, 
			СтруктураКолонокТовары);
КонецПроцедуры
&НаКлиенте
Процедура СуммаНДСПриИзменении(Элемент)
	
	//ФункцииФормДокументов.СуммаНДСПриИзменении(Элементы.Товары, СтруктураКолонокТовары);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	ФункцииФормДокументов.ОбновитьПодвал(Объект, Элементы, Сумма, СтруктураКолонокТовары);
	
КонецПроцедуры

// РАЗДАЧА РЕЗЕРВА

&НаСервере
Процедура РаздатьРезервНаСервере(СтруктураКолонокТовары)
	
	Объект.Резервы.Очистить();
	ТЗТоваров = Объект.Товары.Выгрузить();
	
	Заказы.ПроставитьЗаказыВПорядкеОчереди(ТЗТоваров, Объект.Резервы, Объект.Склад, СтруктураКолонокТовары, ?(Объект.Ссылка.Проведен, Объект.Дата, Неопределено),,Истина);
				
	//Объект.Резервы.Загрузить(ТЗТоваров);
	
КонецПроцедуры
&НаКлиенте
Процедура РаздатьРезерв(Команда)
	
	СтруктураКолонокРезервов = ФункцииФормДокументов.ПолучитьСтруктуруКолонокТовары(Элементы.Резервы, Объект.СуммаВключаетНДС, Объект.ТипЦен, "Резервы",, Объект.Валюта, Объект.УчитыватьНДС);
	СтруктураКолонокРезервов.Вставить("ЕстьЗаказчик", Истина);
	РаздатьРезервНаСервере(СтруктураКолонокРезервов);
	
КонецПроцедуры

&НаСервере
Функция УведомитьОПоступленииТовараЗамены()
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Номенклатура,
	|	НоменклатураЗамена,
	|   Партнер
	|
	|ПОМЕСТИТЬ ТоварыДляКоторыхПришлаЗамена
	|ИЗ
	| 	РегистрСведений.НоменклатураЗамены.СрезПоследних(, НоменклатураЗамена В (&ТоварыДокумента))
	|ГДЕ
	|   Использование = ИСТИНА
	|;
	|ВЫБРАТЬ
	|	Тов.Заказ 									Заказ,
	|	Тов.Заказ.Партнер							Партнер,
	|	Тов.Заказ.Партнер.ОсновнойМенеджер.Почта   	Почта,
	|	Тов.Номенклатура							Номенклатура,
	|	Тов.Номенклатура.Артикул					Артикул,
	|	&ДеньПоявления								ДеньПоявления
	|ИЗ
	|	РегистрНакопления.РазмещениеЗаказов.Остатки(, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ ТоварыДляКоторыхПришлаЗамена) И Заказ.Партнер В (ВЫБРАТЬ Партнер ИЗ ТоварыДляКоторыхПришлаЗамена)) Тов
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		(ВЫБРАТЬ Номенклатура, Заказ ИЗ РегистрСведений.ОповещенияОПоступленииТовара ГДЕ Оповестил <> &ПустоеПисьмо) Рег
	|		ПО Тов.Номенклатура = Рег.Номенклатура И Тов.Заказ = Рег.Заказ
	|ГДЕ Рег.Заказ ЕСТЬ NULL
	|ИТОГИ МАКСИМУМ(Партнер) ПО Почта, Заказ
	|");
	
	Запрос.УстановитьПараметр("ТоварыДокумента", Объект.Товары.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("ПустоеПисьмо", Документы.Письмо.ПустаяСсылка());
	Запрос.УстановитьПараметр("ДеньПоявления", 	НачалоДня(ТекущаяДата()));

	ТемаПисьма 	= "Поступил товар-замена, для товара ожидающего поступление";
	ТипТекста 	= Перечисления.ТипыТекстовЭлектронныхПисем.HTML;
	КолПисем = 0;	
	ВыборкаПочты = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Пока ВыборкаПочты.Следующий() Цикл
			
			ТекстПисьма = "<P>Здравствуйте, уважаемый(ая) сотрудник ""Гаража""!<BR><BR></p>
						|<p>На склад поступила замена для товаров, которых не хватало в заказе(ах):</p>";
						
			НачатьТранзакцию();
			
			Отказ = Ложь;
			
			// Создадим ссылку на письмо
			
			Письмо = Документы.Письмо.СоздатьДокумент();
			Письмо.Дата = ТекущаяДата();
			
			Попытка
				Письмо.Записать(); КолПисем = КолПисем + 1;
			Исключение
				ОбщиеФункции.СообщитьТекст(ОбщегоНазначенияКлиентСервер.ПолучитьПредставлениеОписанияОшибки(ИнформацияОбОшибке()));
				ОтменитьТранзакцию();
				Возврат "";
			КонецПопытки;
			
			// Начнем выбор заказов
			
			ВыборкаЗаказов = ВыборкаПочты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
			Пока ВыборкаЗаказов.Следующий() Цикл
				
				ТекстПисьма = ТекстПисьма + "<p>
								|" + ВыборкаЗаказов.Заказ + " (" + ВыборкаЗаказов.Партнер + ")<UL>";
								
				// Переберем товары
								
				ВыборкаТоваров = ВыборкаЗаказов.Выбрать();
				Пока ВыборкаТоваров.Следующий() Цикл
					
					ТекстПисьма = ТекстПисьма + "<LI>" + ВыборкаТоваров.Артикул + " " + ВыборкаТоваров.Номенклатура + " <br>";
					
					// Создаем защиту от повторного письма
			
					Если Письмо = Неопределено Тогда Отказ = Истина; Иначе	
						
						// Заполним регистр
						
						НовЗапись = РегистрыСведений.ОповещенияОПоступленииТовара.СоздатьМенеджерЗаписи();
						ЗаполнитьЗначенияСвойств(НовЗапись, ВыборкаТоваров);
						НовЗапись.Оповестил = Письмо.Ссылка;
						
						// Запишем регистр
						
						Попытка
							НовЗапись.Записать();
						Исключение
							стрОшибки = ОписаниеОшибки();
							ОбщиеФункции.СообщитьТекст("Ошибка при записи защиты от повтороного оповещения, оповещаться менеджеры не будут
															|" + стрОшибки);
							ОтменитьТранзакцию();
							Возврат "";
						КонецПопытки;
						
					КонецЕсли;
					
				КонецЦикла;
				
				ТекстПисьма = ТекстПисьма + "</LI></UL></p>";
				
			КонецЦикла;
			
			ТекстПисьма = ТекстПисьма + "</p>";
			
			// Отправим письмо
			
			Письмо = ОбщиеФункции.ОповеститьПоПочте(ВыборкаПочты.Почта, ТемаПисьма, ТекстПисьма, Отказ, ТипТекста, Письмо);
			
			Если Отказ Тогда
				ОтменитьТранзакцию();
				Возврат "";
			Иначе
				ЗафиксироватьТранзакцию();
			КонецЕсли;
			
		КонецЦикла;
	Возврат ?(Не КолПисем, "", ?(КолПисем = 1, "Было отправлено письмо менеджеру о поступлении товара-замены", "Были отправлены письма менеджерам о поступлении товаров-замены"));

КонецФункции



#Область Сортировка_Артикула

&НаСервере
Процедура СортироватьАртикул(Направление)
	
	врТЗ = Объект.Товары.Выгрузить();
	врТЗ.Колонки.Добавить("Артикул", Новый ОписаниеТипов("Строка"));
	КонвертацияТипов.ВыполнитьВыражениеВКаждойСтрокеТаблицы(врТЗ, "Строка.Артикул = Строка.Номенклатура.Артикул");
	врТЗ.Сортировать("Артикул" + Направление);
	
	Объект.Товары.Загрузить(врТЗ);
	
КонецПроцедуры
&НаКлиенте
Процедура СортироватьАртикулПоВозрастанию(Команда)
	
	СортироватьАртикул(" Возр")
	
КонецПроцедуры
&НаКлиенте
Процедура СортироватьАртикулПоУбыванию(Команда)
	
	СортироватьАртикул(" Убыв")
	
КонецПроцедуры

#КонецОбласти

 // ПРИ ИЗМЕНЕНИИ РЕКВИЗИТОВ ШАПКИ
&НаСервере
Функция ОрганизацияПриИзмененииНаСервере()
	Возврат ФункцииФормДокументов.ОрганизацияПриИзменении(Объект);
КонецФункции


&НаКлиенте
Процедура ОбновитьСтруктуруКолонокТовары()
	
	СтруктураКолонокТовары = ФункцииФормДокументов.ПолучитьСтруктуруКолонокТовары(Элементы.Товары, Объект.СуммаВключаетНДС, Объект.ТипЦен,,, Объект.Валюта, Объект.УчитыватьНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	ОбновитьСтруктуруКолонокТовары();	
	ПересчитатьСуммыТабличныхЧастей(СтруктураКолонокТовары);
	
	ДолгПартнера = ДенежныеСредства.ПолучитьДолгПартнера(Объект.Партнер);
	
	Объект.Грузополучатель = ФункцииФормДокументовСервер.ГрузополучательПриИзмененииРеквизита(Объект.Организация);
	Объект.БанковскийСчетГрузополучателя = ФункцииФормДокументовСервер.БанковскийСчетПриИзмененииРеквизита(Объект.Грузополучатель);
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииРеквизитаВлияющегоНаТабличнуюЧасть(СтруктураКолонокТовары)
	
	ФункцииФормДокументов.ПересчитатьСуммыТабличныхЧастей(Объект.Товары, СтруктураКолонокТовары);
	
КонецПроцедуры    

//&НаСервере
//Функция ПартнерПриИзмененииНаСервере()
//	Возврат ФункцииФормДокументов.ПартнерПриИзменении(Объект);
//КонецФункции

//&НаКлиенте
//Процедура ПартнерПриИзменении(Элемент)
//	
//	ДолгПартнера = ДенежныеСредства.ПолучитьДолгПартнера(Объект.Партнер);
//	ПартнерПриИзмененииНаСервере();
//	
//	СтруктураКолонокТовары.Партнер = Объект.Партнер; 
//	СтруктураКолонокТовары.ТипЦен = Объект.ТипЦен;
//	СтруктураКолонокТовары.УчитыватьНДС = Объект.УчитыватьНДС;
//	
//	ПриИзмененииРеквизитаВлияющегоНаТабличнуюЧасть(СтруктураКолонокТовары);
//	
//	СтруктураКолонокТовары.стТипЦен = СтруктураКолонокТовары.ТипЦен;
//	СтруктураКолонокТовары.стУчитыватьНДС = СтруктураКолонокТовары.УчитыватьНДС;
//	
//КонецПроцедуры



&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ДолгПартнера = ДенежныеСредства.ПолучитьДолгПартнера(Объект.Контрагент);
	КонтрагентПриИзмененииНаСервере();
	
	//СтруктураКолонокТовары.Партнер = Объект.Партнер; 
	СтруктураКолонокТовары.Контрагент = Объект.Контрагент;
	СтруктураКолонокТовары.ТипЦен = Объект.ТипЦен;
	СтруктураКолонокТовары.УчитыватьНДС = Объект.УчитыватьНДС;
	
	ПриИзмененииРеквизитаВлияющегоНаТабличнуюЧасть(СтруктураКолонокТовары);
	
	СтруктураКолонокТовары.стТипЦен = СтруктураКолонокТовары.ТипЦен;
	СтруктураКолонокТовары.стУчитыватьНДС = СтруктураКолонокТовары.УчитыватьНДС;
	
	Объект.Грузоотправитель = ФункцииФормДокументовСервер.ГрузополучательПриИзмененииРеквизита(Объект.Контрагент);
	Объект.БанковскийСчетГрузоотправителя = ФункцииФормДокументовСервер.БанковскийСчетПриИзмененииРеквизита(Объект.Грузоотправитель);
	Объект.Грузополучатель = ФункцииФормДокументовСервер.ГрузополучательПриИзмененииРеквизита(Объект.Организация);
	Объект.БанковскийСчетГрузополучателя = ФункцииФормДокументовСервер.БанковскийСчетПриИзмененииРеквизита(Объект.Грузополучатель);
КонецПроцедуры


&НаСервере
Функция КонтрагентПриИзмененииНаСервере()
	Объект.Партнер = Объект.Контрагент.Партнер;
	Возврат ФункцииФормДокументов.КонтрагентПриИзменении(Объект);
КонецФункции



// ИНФОРМАЦИЯ О ТОВАРЕ

&НаСервере
Процедура ОбработатьОтображениеИнформацииОТоваре() Экспорт
	
	РаботаСНоменклатурой.ОбработатьОтображениеИнформацииОТоваре(ЭтаФорма, "Товары", "Объект.Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ИнфТовараТекстHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	РаботаСНоменклатуройКлиент.ИнфТовараТекстHTMLПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка);
	
КонецПроцедуры
&НаКлиенте
Процедура ИнфТовараЗаголовокHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	РаботаСНоменклатуройКлиент.ИнфТовараЗаголовокHTMLПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка, "Товары", "Объект.Товары");
	
КонецПроцедуры

 &НаКлиенте
Процедура ПоказатьСкрытьИнфОТоваре(Команда)
	
	РаботаСНоменклатуройКлиент.ПоказатьСкрытьИнфОТоваре(ЭтаФорма);
	
КонецПроцедуры
&НаКлиенте
Процедура НастройкаИнфОТоваре(Команда) 
	
	РаботаСНоменклатуройКлиент.НастройкаИнфОТоваре(ЭтаФорма, "Товары", "Объект.Товары");
	
КонецПроцедуры


// ЗАПОЛНИТЬ
&НаСервере
Процедура ЗаполнитьКолонкуНаСервере(Имя, Значение)
	
	Таблица = Объект.Товары.Выгрузить();
	Таблица.ЗаполнитьЗначения(Значение, Имя);
	Объект.Товары.Загрузить(Таблица);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьГТД(Команда)
	
	ВыбранноеЗначение = ОткрытьФорму("Справочник.НомераГТД.ФормаВыбора",,ЭтаФорма,,,,Новый ОписаниеОповещения("ОбработкаЗаполненияКолонокНаСервере",ЭтаФорма,Новый Структура("ИмяКолонки", "НомерГТД")));
	
	//Если ВыбранноеЗначение <> Неопределено Тогда
	//	ЗаполнитьКолонкуНаСервере("НомерГТД", ВыбранноеЗначение);	
	//КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтрануПроисхождения(Команда)
	
	ВыбранноеЗначение = ОткрытьФорму("Справочник.Страны.ФормаВыбора",,ЭтаФорма,,,,Новый ОписаниеОповещения("ОбработкаЗаполненияКолонокНаСервере",ЭтаФорма,Новый Структура("ИмяКолонки","СтранаПроисхождения")));
	
	//Если ВыбранноеЗначение <> Неопределено Тогда
	//	ЗаполнитьКолонкуНаСервере("СтранаПроисхождения", ВыбранноеЗначение);	
	//КонецЕсли;

КонецПроцедуры

&НаСервере
Функция КонтрольОстатковВСеансеОтключен()
	Возврат ПараметрыСеанса.КонтрольОстатковВСеансеОтключен;
КонецФункции

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Перем РежимЗаписи;
	
	Если 	Объект.ОповеститьМенеджеровОПоявленииТовара И НЕ КонтрольОстатковВСеансеОтключен() И
			ПараметрыЗаписи.Свойство("РежимЗаписи", РежимЗаписи) И
			РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			
		Сообщение = СообщитьМенеджерамОРезерве();
		Если Не ПустаяСтрока(Сообщение) Тогда
			
			ПоказатьОповещениеПользователя("Автоматическая рассылка",,Сообщение, БиблиотекаКартинок.Почта);
			
		КонецЕсли;
		
		//Сообщение = УведомитьОПоступленииТовараЗамены();
		//Если Не ПустаяСтрока(Сообщение) Тогда
		//	
		//	ПоказатьОповещениеПользователя("Автоматическая рассылка",,Сообщение, БиблиотекаКартинок.Почта);
		//	
		//КонецЕсли;

	КонецЕсли;
	
	Оповестить("ПоступлениеТоваровЗаписан", Объект.Проведен);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЯчейки(Команда)
	
	ВыбЯчейка = ОткрытьФорму("Справочник.Ячейки.ФормаВыбора",Новый Структура("Склад", Объект.Склад),ЭтаФорма,,,,Новый ОписаниеОповещения("ОбработкаЗаполненияКолонокНаСервере",ЭтаФорма,Новый Структура("ИмяКолонки", "Ячейка")));
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаполненияКолонокНаСервере(Результат, Параметры) Экспорт
	Если Результат <> Неопределено Тогда
		ЗаполнитьКолонкуНаСервере(Параметры.ИмяКолонки, Результат);	
	КонецЕсли;	
конецПроцедуры	
&НаКлиенте
Процедура ЗаполнитьСтавкуНДС(Команда)
	
	ДиалогиСПользователем.ЗаполнитьСтавкуНДС(Объект.Товары, СтруктураКолонокТовары);
	ФункцииФормДокументов.ОбновитьПодвал(Объект, Элементы, Сумма, СтруктураКолонокТовары);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	// информация о товаре
	ОбработатьОтображениеИнформацииОТоваре();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКоэффВалюты()
	
	Если Объект.Валюта = Константы.ВалютаУправленческогоУчета.Получить() Тогда
		Возврат 1;
		
	Иначе
		
		СтрКурс = ОбщиеФункции.ПолучитьКурсВалюты(Объект.Валюта, Объект.Дата);
		Курс 	= СтрКурс.Курс * ?(СтрКурс.Кратность, СтрКурс.Кратность, 1);
		Возврат ?(Курс, 1 / Курс, 1); КонецЕсли;
	
КонецФункции
//&НаКлиенте
//Процедура ЗаполнитьПартииКакСумму(РезультатВопроса, КоэффВалюты) Экспорт
//	
//	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
//		Для Каждого Строка Из Объект.Товары Цикл Строка.СуммаПартии = Строка.Всего * КоэффВалюты; КонецЦикла; КонецЕсли;
//	
//КонецПроцедуры
//&НаКлиенте
//Процедура СуммуПартииКакСумму(Команда)
//	
//	КоэффВалюты = ?(Объект.Курс, Объект.Курс, ПолучитьКоэффВалюты());
//	
//	Если КоэффВалюты <> 1 Тогда
//		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПартииКакСумму", ЭтаФорма, КоэффВалюты), "Валюта отличается от валюты управленческого учета. Сумма будет умножена на " + Строка(КоэффВалюты) + " Продолжить?", РежимДиалогаВопрос.ДаНет);
//	Иначе
//		ЗаполнитьПартииКакСумму(КодВозвратаДиалога.Да, КоэффВалюты); КонецЕсли;
//	
//КонецПроцедуры


#Область Корзина

#Если Не ВебКлиент Тогда
&НаСервере
Процедура ДобавитьИзКорзиныНаСервере(ИмяКомпа, СтруктураКолонокТовары, КолСтрок)
	
	МодульКорзины.ПолучитьТоварИзКорзины(Элементы.Товары, Объект.Товары, СтруктураКолонокТовары, ИмяКомпа, КолСтрок);
	
КонецПроцедуры
#КонецЕсли

#Если Не ВебКлиент Тогда
&НаКлиенте
Процедура ВставитьИзКорзины(Команда)
	
	КолСтрок = 0;
	ДобавитьИзКорзиныНаСервере(ИмяКомпьютера(), СтруктураКолонокТовары, КолСтрок);
	
	Если КолСтрок Тогда
		
		МодульКорзины.ОповеститьОВставкеТовараВДокумент(КолСтрок, Объект.Товары.Количество());
		
	Иначе
		
		МодульКорзины.ОповеститьЧтоНечегоДобавлять();
		
	КонецЕсли;
	

КонецПроцедуры
#КонецЕсли

#Если Не ВебКлиент Тогда
&НаСервере
Функция ПоложитьВКорзинуНаСервере(ВыделенныеИндексы, ИмяКомпа, КолВКорзине)
	
	Возврат МодульКорзины.ПоложитьТоварВКорзину(Объект.Товары, ВыделенныеИндексы, ИмяКомпа, КолВКорзине);
	
КонецФункции
#КонецЕсли

#Если Не ВебКлиент Тогда
&НаКлиенте
Процедура ДобавитьВКорзину(Команда)
	
	ВыделенныеИндексы 	= МодульКорзины.ПолучитьВыделенныеСтрокиТоваров(Элементы.Товары, Объект.Товары);
	КолВКорзине 		= 0;
	КолТовара			= ВыделенныеИндексы.Количество();
	
	
	Если КолТовара Тогда
		
		Если ПоложитьВКорзинуНаСервере(ВыделенныеИндексы, ИмяКомпьютера(), КолВКорзине) Тогда
			МодульКорзины.ОповеститьОПомещенииТовара(КолТовара, КолВКорзине);
		КонецЕсли;
		
	Иначе
		
		МодульКорзины.ОповеститьЧтоНечегоДобавлять();
				
	КонецЕсли;

КонецПроцедуры
#КонецЕсли

#Если Не ВебКлиент Тогда
&НаКлиенте
Процедура РедактироватьТоварВКорзине(Команда)
	
	ОткрытьФорму("РегистрСведений.Корзина.Форма.Форма");
	
КонецПроцедуры
#КонецЕсли

#Если Не ВебКлиент Тогда
&НаСервере
Функция ОчиститьНаСервере(ИмяКомпа)
	
	Возврат МодульКорзины.ОчиститьКорзину(ИмяКомпа);
	
КонецФункции
#КонецЕсли

#Если Не ВебКлиент Тогда
&НаКлиенте
Процедура ОчиститьКорзину(Команда)
	
	Если ОчиститьНаСервере(ИмяКомпьютера()) Тогда
		
		МодульКорзины.ОповеститьЧтоКорзинаОчищена();
		
	КонецЕсли;

КонецПроцедуры
#КонецЕсли

#КонецОбласти

// РЕЗЕРВЫ

&НаСервере
Функция СообщитьМенеджерамОРезерве()
	
	// Если все нормально тогда вернет текст для оповещения пользователю
	// если нет тогда пустую строку
	
	КолПисем = 0;
	
	ТипЗаказ 		= Тип("ДокументСсылка.ЗаказПокупателя");
	ТипИнетЗаказ	= Тип("ДокументСсылка.ИнтернетЗаказПокупателя");
	ТипВнЗаказ		= Тип("ДокументСсылка.ВнутреннийЗаказ");
	
	Товары = Объект.Резервы.Выгрузить().СкопироватьКолонки();
	//Товары.Колонки.Добавить("Менеджер", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	Товары.Колонки.Добавить("Почта", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(80)));
	Товары.Колонки.Добавить("Артикул", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(40)));
	
	СписокЗаказов = Новый Массив;
	
	// Построим таблицу товаров для оповещения
	
	Для Каждого Строка Из Объект.Резервы Цикл
		
		Если СписокЗаказов.Найти(Строка.Размещение) = Неопределено Тогда СписокЗаказов.Добавить(Строка.Размещение) КонецЕсли;
		
		Если 	(	ТипЗнч(Строка.Размещение) = ТипЗаказ Или
					ТипЗнч(Строка.Размещение) = ТипИнетЗаказ) И
				Не Строка.Размещение.Партнер.Пустая() И
				Не Строка.Размещение.Партнер.ОсновнойМенеджер.Пустая() И
				Не ПустаяСтрока(Строка.Размещение.Партнер.ОсновнойМенеджер.Почта) Тогда
				
			НовСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
			НовСтрока.Почта 	= Строка.Размещение.Партнер.ОсновнойМенеджер.Почта;
			НовСтрока.Артикул 	= Строка.Номенклатура.Артикул;
			
				
		КонецЕсли;
	КонецЦикла;
	
	// silber { создадим события о резерве
	
	НачатьТранзакцию();
	
	Для Каждого текЗаказ Из СписокЗаказов Цикл
		
		События.ЗарегистрироватьСобытие("РаздачаРезерва",
			Новый Структура("Ссылка, Инициатор, Место, Название, КраткоеОписание, Параметры",
				текЗаказ, 
				Объект.Ссылка,
				Строка(?(ТипЗнч(текЗаказ) = ТипВнЗаказ, текЗаказ.Заказчик, текЗаказ.Склад)),
				"Роздан резерв",
				?(ТипЗнч(текЗаказ) = ТипВнЗаказ,
					"Роздан резерв при поступлении по заказу " + текЗаказ.Номер + " (" + текЗаказ.Заказчик + ")",
					"Роздан резерв при поступлении по заказу " + текЗаказ.Номер + " (" + текЗаказ.Партнер + ") на сумму " + Сумма + " " + текЗаказ.Валюта)),
				Объект); КонецЦикла;
	
	ЗафиксироватьТранзакцию();
				
	// } silber
	
	// Посмотрим кому еще не давали
	
	Если Товары.Количество() Тогда
		
		// Выгрузим таблицу на sql
			
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Табл.Номенклатура 	КАК Номенклатура,
		|	Табл.Артикул 		КАК Артикул,
		|	Табл.Размещение 	КАК Заказ,
		|	Табл.Почта			КАК Почта,
		|	Табл.Количество 	КАК Количество,
		|	&ДеньПоявления 		КАК ДеньПоявления
		|ПОМЕСТИТЬ
		|	Товары
		|ИЗ
		|	&Товары КАК Табл
		|");
			
		МенеджерВременныхТаблиц 		= Новый МенеджерВременныхТаблиц;
		Запрос.МенеджерВременныхТаблиц 	= МенеджерВременныхТаблиц;

		Запрос.УстановитьПараметр("ДеньПоявления", 	НачалоДня(ТекущаяДата()));
		Запрос.УстановитьПараметр("Товары", 		Товары);
		Запрос.Выполнить();
		
		// теперь запросим то что еще не оповещали
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Тов.Почта,
		|	Тов.Заказ,
		|	Тов.Заказ.Партнер Партнер,
		|	Тов.Артикул,
		|	Тов.Номенклатура,
		|	Тов.ДеньПоявления,
		|	МАКСИМУМ(ВЫБОР КОГДА Тов.Количество < Зак.КоличествоОстаток ТОГДА Тов.Количество ИНАЧЕ Зак.КоличествоОстаток КОНЕЦ) Количество
		|ИЗ
		|	Товары КАК Тов
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрНакопления.ЗаказыПокупателей.Остатки(,
		|                           ЗаказПокупателя В(ВЫБРАТЬ Тов.Заказ ИЗ Товары Тов) И
		|							Номенклатура В(ВЫБРАТЬ Тов.Номенклатура ИЗ Товары Тов)) Зак
		|ПО
		|	Тов.Номенклатура 	= Зак.Номенклатура И
		|	Тов.Заказ 			= Зак.ЗаказПокупателя
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	(ВЫБРАТЬ * ИЗ РегистрСведений.ОповещенияОПоступленииТовара ГДЕ Оповестил <> &ПустоеПисьмо) Рег
		|ПО
		|	Тов.Заказ 			= Рег.Заказ И
		|	Тов.Номенклатура 	= Рег.Номенклатура И
		|	Тов.ДеньПоявления 	= Рег.ДеньПоявления
		|
		|ГДЕ
		|	Рег.Заказ ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	Тов.Почта,
		|	Тов.Заказ,
		|	Тов.Заказ.Партнер,
		|	Тов.Артикул,
		|	Тов.Номенклатура,
		|	Тов.ДеньПоявления	
		|
		|Итоги МАКСИМУМ(Партнер) ПО
		|	Тов.Почта, Тов.Заказ
		|";
		
		// Подготовим переменные письма
		
		Запрос.УстановитьПараметр("ПустоеПисьмо", Документы.Письмо.ПустаяСсылка());
		
		ТемаПисьма 	= "Вам автоматически назначен резерв на товары по заказу";
		ТипТекста 	= Перечисления.ТипыТекстовЭлектронныхПисем.HTML;
		
		ВыборкаПочты = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		Пока ВыборкаПочты.Следующий() Цикл
			
			ТекстПисьма = "<P>Здравствуйте, уважаемый(ая) сотрудник ""Гаража""!<BR><BR></p>
						|<p>Товары которых не хватало в заказе(ах), поступили на склад и автоматически зарезервировались под указанные заказы:</p>";
						
			НачатьТранзакцию();
			
			Отказ = Ложь;
			
			// Создадим ссылку на письмо
			
			Письмо = Документы.Письмо.СоздатьДокумент();
			Письмо.Дата = ТекущаяДата();
			
			Попытка
				Письмо.Записать(); КолПисем = КолПисем + 1;
			Исключение
				ОбщиеФункции.СообщитьТекст(ОбщегоНазначенияКлиентСервер.ПолучитьПредставлениеОписанияОшибки(ИнформацияОбОшибке()));
				ОтменитьТранзакцию();
				Возврат "";
			КонецПопытки;
			
			// Начнем выбор заказов
			
			ВыборкаЗаказов = ВыборкаПочты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
			Пока ВыборкаЗаказов.Следующий() Цикл
				
				ТекстПисьма = ТекстПисьма + "<p>
								|" + ВыборкаЗаказов.Заказ + " (" + ВыборкаЗаказов.Партнер + ")<UL>";
								
				// Переберем товары
								
				ВыборкаТоваров = ВыборкаЗаказов.Выбрать();
				Пока ВыборкаТоваров.Следующий() Цикл
					
					ТекстПисьма = ТекстПисьма + "<LI>" + ВыборкаТоваров.Артикул + " " + ВыборкаТоваров.Номенклатура + "  " + ВыборкаТоваров.Количество + "ед. <br>";
					
					// Создаем защиту от повторного письма
			
					Если Письмо = Неопределено Тогда Отказ = Истина; Иначе	
						
						// Заполним регистр
						
						НовЗапись = РегистрыСведений.ОповещенияОПоступленииТовара.СоздатьМенеджерЗаписи();
						ЗаполнитьЗначенияСвойств(НовЗапись, ВыборкаТоваров);
						НовЗапись.Оповестил = Письмо.Ссылка;
						
						// Запишем регистр
						
						Попытка
							НовЗапись.Записать();
						Исключение
							стрОшибки = ОписаниеОшибки();
							ОбщиеФункции.СообщитьТекст("Ошибка при записи защиты от повтороного оповещения, оповещаться менеджеры не будут
															|" + стрОшибки);
							ОтменитьТранзакцию();
							Возврат "";
						КонецПопытки;
						
					КонецЕсли;
					
				КонецЦикла;
				
				ТекстПисьма = ТекстПисьма + "</LI></UL></p>";
				
			КонецЦикла;
			
			ТекстПисьма = ТекстПисьма + "</p>";
			
			// Отправим письмо
			
			Письмо = ОбщиеФункции.ОповеститьПоПочте(ВыборкаПочты.Почта, ТемаПисьма, ТекстПисьма, Отказ, ТипТекста, Письмо);
			
			Если Отказ Тогда
				ОтменитьТранзакцию();
				Возврат "";
			Иначе
				ЗафиксироватьТранзакцию();
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат ?(Не КолПисем, "", ?(КолПисем = 1, "Было отправлено письмо менеджеру об авторезервировании товара", "Были отправлены письма менеджерам об авторезервировании заказов"));
	
КонецФункции

&НаКлиенте
Процедура УчитыватьНДСПриИзменении(Элемент)
	СтруктураКолонокТовары.УчитыватьНДС = Объект.УчитыватьНДС;
КонецПроцедуры

//#Область Партии

//&НаСервере
//Процедура ПерезаполнитьПартииНаСервере(СтруктураКолонокТовары)
//	
//	// Очистим партию
//	
//	//ТовТмп = Объект.Товары.Выгрузить();
//	//ТовТмп.ЗаполнитьЗначения(Неопределено, "Партия");
//	//Объект.Товары.Загрузить(ТовТмп);
//	
//	// Проставим
//	
//	МодульПартий.РазнестиПартииВТаблицеМетодомFIFO(Объект.Товары, Объект.Склад, СтруктураКолонокТовары, ?(Объект.Ссылка.Пустая(), Неопределено, Объект.Дата),,Истина);
//	
//КонецПроцедуры
//&НаКлиенте
//Процедура ПерезаполнитьПартии(Команда)
//	
//	ПерезаполнитьПартииНаСервере(СтруктураКолонокТовары);
//	
//КонецПроцедуры

//#КонецОбласти


&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	Объект.Курс=ПолучитьКурсВалютыНаСервере(Объект.Валюта);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКурсВалютыНаСервере(Валюта)
	Запрос=Новый Запрос("Выбрать Курс,кратность из регистрСведений.КурсыВалют.СрезПоследних(,&Валюта=Валюта)");
	Запрос.УстановитьПараметр("Валюта",Валюта);
	Рез=Запрос.Выполнить();
	Если Не Рез.Пустой() Тогда
		Стр=Рез.Выгрузить()[0];
		Курс=?(Стр.Кратность<>0,Стр.Курс*Стр.Кратность,Стр.Курс);
		Возврат Курс;
	Иначе
		Возврат 1;
	КонецЕсли;	
конецФункции


&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	//Вставить содержимое обработчика
КонецПроцедуры


&НаКлиенте
Процедура ГрузополучательПриИзменении(Элемент)
	Объект.БанковскийСчетГрузополучателя = ФункцииФормДокументовСервер.БанковскийСчетПриИзмененииРеквизита(Объект.Грузополучатель);
КонецПроцедуры

&НаКлиенте
Процедура ГрузоотправительПриИзменении(Элемент)
	Объект.БанковскийСчетГрузоотправителя = ФункцииФормДокументовСервер.БанковскийСчетПриИзмененииРеквизита(Объект.Грузоотправитель);
КонецПроцедуры

#Область Прикрепленные_файлы

&НаКлиенте
Процедура УдалитьПрикрепленныеФайлыНажатие(Элемент)
	
	ПрикрепленныеФайлыКлиент.УдалитьНажатие(Объект.Ссылка, ЭтаФорма, Элемент);
	
КонецПроцедуры
&НаКлиенте
Процедура ПрикрепленныеФайлыНажатиеСкрепка(Элемент)
	
	ПрикрепленныеФайлыКлиент.НажатиеСкрепка(Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПрикрепленныйФайл(Элемент)
	
	ПрикрепленныеФайлыКлиент.ОткрытьПрикрепленныйФайл(Элемент.Имя);
	
КонецПроцедуры
&НаКлиенте
Процедура ПоказатьПрикрееленныеФайлы(Элемент)
	
	ПрикрепленныеФайлыКлиент.ПоказатьПрикрепленныеФайлы(Объект.Ссылка, ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьПрикрепленныхФайловНаСервере()
	
	ПрикрепленныеФайлы.Иницилизировать(Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры
&НаКлиенте
Процедура ОбновитьВидимостьПрикрепленныхФайлов() Экспорт
	
	ОбновитьВидимостьПрикрепленныхФайловНаСервере();
	
КонецПроцедуры

// + neti Муталлапова 26.05.2017
&НаКлиенте
Процедура ХарактеристикиНоменклатурыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущаяСтрокаХарактеристик = Элементы.ХарактеристикиНоменклатуры.ТекущиеДанные;
	
	Если Не ЗначениеЗаполнено(ТекущаяСтрокаХарактеристик.Объем) Тогда 
		ТекущаяСтрокаХарактеристик.Объем = ТекущаяСтрокаХарактеристик.ШиринаУпаковки * ТекущаяСтрокаХарактеристик.ДлинаУпаковки * ТекущаяСтрокаХарактеристик.ВысотаУпаковки;
		
		Если ТекущаяСтрокаХарактеристик.КоличествоВУпаковке > 1 Тогда
			ТекущаяСтрокаХарактеристик.Объем = ТекущаяСтрокаХарактеристик.Объем / ТекущаяСтрокаХарактеристик.КоличествоВУпаковке;
		КонецЕсли;
		
	КонецЕсли;
	
	//Если ТекущаяСтрокаХарактеристик.Вес > 0 Или ТекущаяСтрокаХарактеристик.Объем > 0 Тогда  
		ДанныеНоменклатуры = Новый Структура;
		ДанныеНоменклатуры.Вставить("Номенклатура", ТекущаяСтрокаХарактеристик.Номенклатура);
		ДанныеНоменклатуры.Вставить("Объем", ТекущаяСтрокаХарактеристик.Объем);
		
		Если ТекущаяСтрокаХарактеристик.КоличествоВУпаковке > 1 И ТекущаяСтрокаХарактеристик.ВесУпаковки > 0 Тогда
			ДанныеНоменклатуры.Вставить("Вес", ТекущаяСтрокаХарактеристик.ВесУпаковки / ТекущаяСтрокаХарактеристик.КоличествоВУпаковке);
		Иначе 
			ДанныеНоменклатуры.Вставить("Вес", ?(ЗначениеЗаполнено(ТекущаяСтрокаХарактеристик.Вес), ТекущаяСтрокаХарактеристик.Вес, ТекущаяСтрокаХарактеристик.ВесУпаковки));
		КонецЕсли;
		
		ЗаписатьНоменклатуруНаСервере(ДанныеНоменклатуры);
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНоменклатуруНаСервере(ДанныеНоменклатуры)
	
	НоменклатураИзменена = ИзменитьРеквизитыНоменклатуры(ДанныеНоменклатуры);							
	
	Если ДанныеНоменклатуры.Номенклатура.Вес > 0 И ДанныеНоменклатуры.Номенклатура.Объем > 0 Тогда 
		 СтрокиУдалить = ХарактеристикиНоменклатуры.НайтиСтроки(Новый Структура("Номенклатура", ДанныеНоменклатуры.Номенклатура));
		 
		 Для Каждого Эл Из СтрокиУдалить Цикл 
		 	ХарактеристикиНоменклатуры.Удалить(Эл);
		КонецЦикла;
	КонецЕсли;
	 
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИзменитьРеквизитыНоменклатуры(ДанныеНоменклатуры)
	
	Если ДанныеНоменклатуры.Вес = 0 И ДанныеНоменклатуры.Объем = 0 Тогда 
		Возврат Ложь;
	ИначеЕсли ДанныеНоменклатуры.Вес > 0 И ДанныеНоменклатуры.Номенклатура.Вес = ДанныеНоменклатуры.Вес 
		И ДанныеНоменклатуры.Объем > 0 И ДанныеНоменклатуры.Номенклатура.Объем = ДанныеНоменклатуры.Объем Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НоменклатураОбъект = ДанныеНоменклатуры.Номенклатура.ПолучитьОбъект();
	
	Если ДанныеНоменклатуры.Вес > 0 И ДанныеНоменклатуры.Номенклатура.Вес <> ДанныеНоменклатуры.Вес  Тогда
		НоменклатураОбъект.Вес = ДанныеНоменклатуры.Вес;
	КонецЕсли;
	
	Если ДанныеНоменклатуры.Объем > 0 И ДанныеНоменклатуры.Номенклатура.Объем <> ДанныеНоменклатуры.Объем Тогда
		НоменклатураОбъект.Объем = ДанныеНоменклатуры.Объем;	
	КонецЕсли;
	
	НоменклатураОбъект.ОбменДанными.Загрузка = Истина;
	
	Попытка
		НоменклатураОбъект.Записать();
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение И ТекущийОбъект.Резервы.Количество() = 0 Тогда 	
		СтруктураКолонокРезервов = ФункцииФормДокументов.ПолучитьСтруктуруКолонокТовары(Элементы.Резервы, Объект.СуммаВключаетНДС, Объект.ТипЦен, "Резервы",, Объект.Валюта, Объект.УчитыватьНДС);
		СтруктураКолонокРезервов.Вставить("ЕстьЗаказчик", Истина);
		РаздатьРезервНаСервере(СтруктураКолонокРезервов);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЯчейкиПоОстаткамНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТЧТовары.Номенклатура
	|ПОМЕСТИТЬ ВТ_Номенклатура
	|ИЗ
	|	&ТЧТовары КАК ТЧТовары
	|ГДЕ
	|	ТЧТовары.Ячейка = ЗНАЧЕНИЕ(Справочник.Ячейки.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыНаСкладахОстатки.Номенклатура,
	|	ТоварыНаСкладахОстатки.КоличествоОстаток
	|ПОМЕСТИТЬ ОстаткиНаСкладах
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(
	|			&ДатаДокумента,
	|			Номенклатура В
	|				(ВЫБРАТЬ
	|					ВТ_Номенклатура.Номенклатура
	|				ИЗ
	|					ВТ_Номенклатура КАК ВТ_Номенклатура)) КАК ТоварыНаСкладахОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыВЯчейкахОстатки.Ячейка,
	|	ТоварыВЯчейкахОстатки.Номенклатура,
	|	ТоварыВЯчейкахОстатки.КоличествоОстаток
	|ПОМЕСТИТЬ ОстаткиВЯчейках
	|ИЗ
	|	РегистрНакопления.ТоварыВЯчейках.Остатки(
	|			&ДатаДокумента,
	|			Номенклатура В
	|					(ВЫБРАТЬ
	|						ОстаткиНаСкладах.Номенклатура
	|					ИЗ
	|						ОстаткиНаСкладах КАК ОстаткиНаСкладах)
	|				И НЕ Ячейка.ЗапретитьАвтоматическоеРаспределение) КАК ТоварыВЯчейкахОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиВЯчейках.Номенклатура,
	|	МАКСИМУМ(ОстаткиВЯчейках.КоличествоОстаток) КАК КоличествоОстаток
	|ПОМЕСТИТЬ МаксимальныеОстатки
	|ИЗ
	|	ОстаткиВЯчейках КАК ОстаткиВЯчейках
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиВЯчейках.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиВЯчейках.Номенклатура,
	|	ОстаткиВЯчейках.Ячейка
	|ПОМЕСТИТЬ НоменклатураВНаличии
	|ИЗ
	|	МаксимальныеОстатки КАК МаксимальныеОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиВЯчейках КАК ОстаткиВЯчейках
	|		ПО МаксимальныеОстатки.Номенклатура = ОстаткиВЯчейках.Номенклатура
	|			И МаксимальныеОстатки.КоличествоОстаток = ОстаткиВЯчейках.КоличествоОстаток
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыНаСкладахОбороты.Номенклатура
	|ПОМЕСТИТЬ НоменклатураЗакончилась
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Обороты(
	|			,
	|			&ДатаДокумента,
	|			,
	|			Номенклатура В
	|					(ВЫБРАТЬ
	|						ВТ_Номенклатура.Номенклатура
	|					ИЗ
	|						ВТ_Номенклатура КАК ВТ_Номенклатура)
	|				И НЕ Номенклатура В
	|						(ВЫБРАТЬ
	|							НоменклатураВНаличии.Номенклатура
	|						ИЗ
	|							НоменклатураВНаличии КАК НоменклатураВНаличии)) КАК ТоварыНаСкладахОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыВЯчейкахОбороты.Период,
	|	ТоварыВЯчейкахОбороты.Номенклатура,
	|	ТоварыВЯчейкахОбороты.Ячейка
	|ПОМЕСТИТЬ НаличиеНоменклатурыВЯчейках
	|ИЗ
	|	РегистрНакопления.ТоварыВЯчейках.Обороты(
	|			,
	|			&ДатаДокумента,
	|			Запись,
	|			Номенклатура В
	|					(ВЫБРАТЬ
	|						НоменклатураЗакончилась.Номенклатура
	|					ИЗ
	|						НоменклатураЗакончилась КАК НоменклатураЗакончилась)
	|				И НЕ Ячейка.ЗапретитьАвтоматическоеРаспределение) КАК ТоварыВЯчейкахОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НаличиеНоменклатурыВЯчейках.Номенклатура,
	|	МАКСИМУМ(НаличиеНоменклатурыВЯчейках.Период) КАК Период
	|ПОМЕСТИТЬ ПоследниеНаличияВЯчейках
	|ИЗ
	|	НаличиеНоменклатурыВЯчейках КАК НаличиеНоменклатурыВЯчейках
	|
	|СГРУППИРОВАТЬ ПО
	|	НаличиеНоменклатурыВЯчейках.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоследниеНаличияВЯчейках.Номенклатура,
	|	НаличиеНоменклатурыВЯчейках.Ячейка
	|ПОМЕСТИТЬ НоменклатураБыла
	|ИЗ
	|	ПоследниеНаличияВЯчейках КАК ПоследниеНаличияВЯчейках
	|		ЛЕВОЕ СОЕДИНЕНИЕ НаличиеНоменклатурыВЯчейках КАК НаличиеНоменклатурыВЯчейках
	|		ПО ПоследниеНаличияВЯчейках.Номенклатура = НаличиеНоменклатурыВЯчейках.Номенклатура
	|			И ПоследниеНаличияВЯчейках.Период = НаличиеНоменклатурыВЯчейках.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураБыла.Номенклатура,
	|	НоменклатураБыла.Ячейка,
	|	ЛОЖЬ КАК ЕстьВналичии
	|ИЗ
	|	НоменклатураБыла КАК НоменклатураБыла
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НоменклатураВНаличии.Номенклатура,
	|	НоменклатураВНаличии.Ячейка,
	|	ИСТИНА
	|ИЗ
	|	НоменклатураВНаличии КАК НоменклатураВНаличии
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЕстьВналичии УБЫВ";
	
	Запрос.УстановитьПараметр("ТЧТовары", Объект.Товары.Выгрузить(, "Номенклатура,Ячейка"));
	Запрос.УстановитьПараметр("ДатаДокумента", Новый Граница(Объект.Дата, ВидГраницы.Включая));
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", Выборка.Номенклатура));
		
		Для Каждого Строка Из НайденныеСтроки Цикл 
			Строка.Ячейка = Выборка.Ячейка;	
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЯчейкиПоОстаткам(Команда)
	ЗаполнитьЯчейкиПоОстаткамНаСервере();
КонецПроцедуры
// - neti Муталлапова 26.05.2017

#КонецОбласти
