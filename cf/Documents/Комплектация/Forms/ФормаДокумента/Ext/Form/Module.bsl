&НаКлиенте
Перем СтруктураКолонокТовары Экспорт;
&НаКлиенте
Перем ПовторноеПроведение;

&НаКлиенте
Процедура ОбщиеРеквизиты(Команда)
	
	ФункцииФормДокументов.ОткрытьОбщиеРеквизиты(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция СкладЯчеестый()
	
	Возврат Объект.Склад.Ячеестый;
	
КонецФункции
&НаКлиенте
Процедура ВидимостьЯчееек()
	
	СкладЯчеестый = СкладЯчеестый();
	
	Элементы.Ячейка.Видимость					= СкладЯчеестый;
	Элементы.ТоварыЯчейка.Видимость 			= СкладЯчеестый;
	Элементы.ТоварыЗаполнитьЯчейки.Видимость 	= СкладЯчеестый;
	
	Элементы.ФормаОбщаяКомандаДвиженияПоЯчейкам.Видимость = СкладЯчеестый;
	Элементы.ТоварыОбщаяКомандаДвиженияПоЯчейкам.Видимость = СкладЯчеестый;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеВидимостьюДоступностью()
	
	ЭтоКомплектация = Объект.Операция = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация;
	
	//Элементы.ГруппаПартийШапки.Видимость 	= Объект.Операция <> ЭтоКомплектация;
	//Элементы.Партия.Видимость				= Не ЭтоКомплектация;
	//Элементы.ТоварыПартия.Видимость			= ЭтоКомплектация;
	//Элементы.СуммаПартии.Видимость			= Объект.Операция = ЭтоКомплектация;
	
	//Элементы.ТоварыРасспределитьСуммуПартий.Видимость = Не ЭтоКомплектация;
	
КонецПроцедуры

// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УправлениеВидимостьюДоступностью();
	
	// информация о товаре
	
	РаботаСНоменклатурой.ДобавитьОперативнуюИнформациюОТоваре(ЭтаФорма);
	// Рассчитаем динамические колонки
	
	ФункцииФормДокументов.РассчитатьДинамическиеКолонки(
					Объект.Товары,
					ФункцииФормДокументов.ПолучитьСтруктуруКолонокТовары(Элементы.Товары));
КонецПроцедуры
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПовторноеПроведение = Ложь;		
	СтруктураКолонокТовары = ФункцииФормДокументов.ПолучитьСтруктуруКолонокТовары(Элементы.Товары);
	
	ВидимостьЯчееек();
	// информация о товаре                
	//ОбработатьОтображениеИнформацииОТоваре();
КонецПроцедуры

// ПОДБОР

&НаСервере
Функция ПоместитьТоварыВХранилище() 
	
	Возврат ПоместитьВоВременноеХранилище(
					Объект.Товары.Выгрузить(), 
					УникальныйИдентификатор);
КонецФункции
&НаКлиенте
Процедура ПодборВыполнить()
	
	ИмяТабличнойЧасти = "Товары";
	
	АдресТоваровВХранилище = ПоместитьТоварыВХранилище();
	ПараметрыПодбора = Новый Структура("АдресТоваровВХранилище", АдресТоваровВХранилище);
	
	ПараметрыПодбора.Вставить("СтруктураКолонокТовары", СтруктураКолонокТовары);
	//ПараметрыПодбора.Вставить("ВидЗапроса", 			"СписокНоменклатуры");
	//ПараметрыПодбора.Вставить("ВидыЗапросов", 			"СписокНоменклатуры");
	ПараметрыПодбора.Вставить("Склад", 					Объект.Склад);
	
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаПодбора", ПараметрыПодбора, Элементы.Товары);
	
КонецПроцедуры
&НаСервере
Процедура ПолучитьТоварыИзХранилища(АдресТоваровВХранилище)
	
	Объект.Товары.Загрузить(ПолучитьИзВременногоХранилища(АдресТоваровВХранилище));
	
КонецПроцедуры
&НаКлиенте
Процедура ТоварыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение <> Неопределено Тогда		
		
		ПолучитьТоварыИзХранилища(ВыбранноеЗначение);		// получаем
		УдалитьИзВременногоХранилища(ВыбранноеЗначение); 	// заметаем следы
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры


// ШАПКА

&НаСервере
Процедура ОчиститьЯчейки()
	
	СкладЯчеестый = СкладЯчеестый();
	
	Если НЕ СкладЯчеестый Тогда
		
		ПустаяЯчейка = Справочники.Ячейки.ПустаяСсылка();
		Объект.Ячейка = ПустаяЯчейка;
		Для Каждого Строка ИЗ Объект.Товары Цикл
			Строка.Ячейка = ПустаяЯчейка;
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	ВидимостьЯчееек();
	ОчиститьЯчейки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацияПриИзменении(Элемент)
	
	УправлениеВидимостьюДоступностью()
	
КонецПроцедуры

// ОБРАБОТКИ ТАБЛИЧНОЙ ЧАСТИ

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)

	ФункцииФормДокументов.НоменклатураПриИзменении(Элементы.Товары, СтруктураКолонокТовары);

КонецПроцедуры
&НаКлиенте
Процедура КоличествоПриИзменении(Элемент)
	
	ФункцииФормДокументов.КоличествоПриИзменении(Элементы.Товары, СтруктураКолонокТовары);
	
КонецПроцедуры
&НаКлиенте
Процедура УпаковкаПриИзменении(Элемент)
	
	ФункцииФормДокументов.УпаковкаПриИзменении(Элементы.Товары, СтруктураКолонокТовары);
			
КонецПроцедуры

// ЯЧЕЙКИ

&НаСервере
Процедура ЗаполнитьЯчейкиНаСервере()
	
	ФункцииФормДокументов.ЗаполнитьЯчейки(Объект.Товары,,, Объект.Склад);
	
КонецПроцедуры
&НаКлиенте
Процедура ЗаполнитьЯчейки(Команда)
	
	ЗаполнитьЯчейкиНаСервере();
	
КонецПроцедуры


&НаКлиенте
Процедура УпаковкаШапкаПриИзменении(Элемент)
	
	Объект.КоличествоВУпаковке = РаботаСНоменклатурой.ПолучитьКоэффициентУпаковки(Объект.Упаковка);
	
КонецПроцедуры

#Область Информация_о_товаре

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	// информация о товаре
	ОбработатьОтображениеИнформацииОТоваре();
КонецПроцедуры

&НаСервере
Процедура ОбработатьОтображениеИнформацииОТоваре() Экспорт 
	РаботаСНоменклатурой.ОбработатьОтображениеИнформацииОТоваре(ЭтаФорма, "Товары", "Объект.Товары");
КонецПроцедуры

&НаКлиенте
Процедура ИнфТовараТекстHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	РаботаСНоменклатуройКлиент.ИнфТовараТекстHTMLПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры
&НаКлиенте
Процедура ИнфТовараЗаголовокHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	РаботаСНоменклатуройКлиент.ИнфТовараЗаголовокHTMLПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка, "Товары", "Объект.Товары");
КонецПроцедуры

 &НаКлиенте
Процедура ПоказатьСкрытьИнфОТоваре(Команда)
	РаботаСНоменклатуройКлиент.ПоказатьСкрытьИнфОТоваре(ЭтаФорма);
КонецПроцедуры
&НаКлиенте
Процедура НастройкаИнфОТоваре(Команда) 
	РаботаСНоменклатуройКлиент.НастройкаИнфОТоваре(ЭтаФорма, "Товары", "Объект.Товары");
КонецПроцедуры

#КонецОбласти

#Область Партии

//&НаСервере
//Функция ПолучитьСписокПартийНаСервере(Номенклатура)
//	
//	Возврат МодульПартий.ПолучитьСписокПартийДляВыбора(Номенклатура, Объект.Склад, ?(Объект.Дата = '00010101' Или НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата));
//	
//КонецФункции
//&НаКлиенте
//Процедура ПартияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
//	
//	СтандартнаяОбработка = Ложь;
//	ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ВыборПартии", ЭтаФорма, Новый Структура("ИмяПартия, ИмяСуммаПартии", "Объект.Партия", "Объект.СуммаПартии")), ПолучитьСписокПартийНаСервере(Объект.Номенклатура), Элементы.Партия);
//	
//КонецПроцедуры
//&НаКлиенте
//Процедура ВыборПартии(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
//	
//	Если ВыбранныйЭлемент <> Неопределено Тогда
//		
//		Выполнить(ДополнительныеПараметры.ИмяПартия + " = ВыбранныйЭлемент.Значение.Партия");
//		Выполнить(ДополнительныеПараметры.ИмяСуммаПартии + " = ?(ВыбранныйЭлемент.Значение.Количество = Объект.Количество, ВыбранныйЭлемент.Значение.Сумма, ВыбранныйЭлемент.Значение.Сумма / ВыбранныйЭлемент.Значение.Количество * Объект.Количество)"); КонецЕсли;
//	
//КонецПроцедуры

//&НаСервере
//Функция ПолучитьТипЦенРозница()
//	
//	Возврат Константы.ТипЦенРозница.Получить();
//	
//КонецФункции
//&НаСервере
//Процедура РасспредлитьСуммуПартийПоТипуЦенНаСервере(ВыбТипЦен)
//	
//	текДок = РеквизитФормыВЗначение("Объект");
//	текДок.РасспредлитьСуммуПартийПоТипуЦенНаСервере(ВыбТипЦен);
//	ЗначениеВРеквизитФормы(текДок, "Объект");
//	
//КонецПроцедуры
//&НаКлиенте
//Процедура РасспредлитьСуммуПартийПоТипуЦен(ВыбТипЦен, Параметры) Экспорт
//	
//	Если ВыбТипЦен <> Неопределено Тогда РасспредлитьСуммуПартийПоТипуЦенНаСервере(ВыбТипЦен) КонецЕсли;
//	
//КонецПроцедуры
//&НаКлиенте
//Процедура РасспределитьСуммуПартий(Команда)
//	
//	ПоказатьВводЗначения(Новый ОписаниеОповещения("РасспредлитьСуммуПартийПоТипуЦен", ЭтаФорма), ПолучитьТипЦенРозница());
//	
//КонецПроцедуры
#КонецОбласти


&НаСервере
Функция ПроверитьРозничныеЦены()
	// если есть хотя бы один товар с пустой ценой, нужно об это предупредить
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ Таб.Номенклатура ПОМЕСТИТЬ Товары ИЗ &Таблица Таб;
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Тов.Номенклатура,
	|	Цен.Цена
	|ИЗ
	|Товары Тов
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ТипЦен = &Розница И Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ Товары)) Цен 
	|ПО Тов.Номенклатура = Цен.Номенклатура
	|ГДЕ Цен.Цена ЕСТЬ NULL");
	Запрос.УстановитьПараметр("Таблица", Объект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("Розница", КэшируемыеФункции.ПолучитьТипЦенРозница());
	
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервере
Функция ЭтоРазукомплектация()
	Возврат Объект.Операция = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Разукомплектация;
КонецФункции

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ЭтоРазукомплектация() И НЕ ПовторноеПроведение И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение И НЕ ПроверитьРозничныеЦены() Тогда
		 Отказ = Истина; ПовторноеПроведение = Ложь;
		 ПоказатьВопрос(Новый ОписаниеОповещения("ВопросОбУстанановкеРозничныхЦен", ЭтаФорма), "На некоторые товары не установлены Розничные цены. Выполнить установку сейчас?", РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;

КонецПроцедуры
&НаСервере
Функция ПоместитьВоВременноеХранилищеНаСервере()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.Товары.Выгрузить(), Новый УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ВопросОбУстанановкеРозничныхЦен(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		ПовторноеПроведение = Истина; Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение)); Закрыть();
	ИначеЕсли
		Результат = КодВозвратаДиалога.Отмена Тогда Возврат;
	Иначе 
		ОткрытьФорму("Документ.УстановкаЦенНоменклатуры.ФормаОбъекта", Новый Структура("Основание", Новый Структура("Товары, ТипЦен", ПоместитьВоВременноеХранилищеНаСервере(), КэшируемыеФункции.ПолучитьТипЦенРозница())));
	КонецЕсли;
	
КонецПроцедуры

// КОРЗИНА

#Если Не ВебКлиент Тогда
&НаСервере
Процедура ДобавитьИзКорзиныНаСервере(ИмяКомпа, СтруктураКолонокТовары, КолСтрок)
	
	МодульКорзины.ПолучитьТоварИзКорзины(Элементы.Товары, Объект.Товары, СтруктураКолонокТовары, ИмяКомпа, КолСтрок);
	
КонецПроцедуры
#КонецЕсли

#Если Не ВебКлиент Тогда
&НаКлиенте
Процедура ВставитьИзКорзины(Команда)
	
	КолСтрок = 0;
	ДобавитьИзКорзиныНаСервере(ИмяКомпьютера(), СтруктураКолонокТовары, КолСтрок);
	
	Если КолСтрок Тогда
		
		МодульКорзины.ОповеститьОВставкеТовараВДокумент(КолСтрок, Объект.Товары.Количество());
		
	Иначе
		
		МодульКорзины.ОповеститьЧтоНечегоДобавлять();
		
	КонецЕсли;
	

КонецПроцедуры
#КонецЕсли

#Если Не ВебКлиент Тогда
&НаСервере
Функция ПоложитьВКорзинуНаСервере(ВыделенныеИндексы, ИмяКомпа, КолВКорзине)
	
	Возврат МодульКорзины.ПоложитьТоварВКорзину(Объект.Товары, ВыделенныеИндексы, ИмяКомпа, КолВКорзине);
	
КонецФункции
#КонецЕсли

#Если Не ВебКлиент Тогда
&НаКлиенте
Процедура ДобавитьВКорзину(Команда)
	
	ВыделенныеИндексы 	= МодульКорзины.ПолучитьВыделенныеСтрокиТоваров(Элементы.Товары, Объект.Товары);
	КолВКорзине 		= 0;
	КолТовара			= ВыделенныеИндексы.Количество();
	
	
	Если КолТовара Тогда
		
		Если ПоложитьВКорзинуНаСервере(ВыделенныеИндексы, ИмяКомпьютера(), КолВКорзине) Тогда
			МодульКорзины.ОповеститьОПомещенииТовара(КолТовара, КолВКорзине);
		КонецЕсли;
		
	Иначе
		
		МодульКорзины.ОповеститьЧтоНечегоДобавлять();
				
	КонецЕсли;

КонецПроцедуры
#КонецЕсли

#Если Не ВебКлиент Тогда
&НаКлиенте
Процедура РедактироватьТоварВКорзине(Команда)
	
	ОткрытьФорму("РегистрСведений.Корзина.Форма.Форма");
	
КонецПроцедуры
#КонецЕсли

#Если Не ВебКлиент Тогда
&НаСервере
Функция ОчиститьНаСервере(ИмяКомпа)
	
	Возврат МодульКорзины.ОчиститьКорзину(ИмяКомпа);
	
КонецФункции
#КонецЕсли

#Если Не ВебКлиент Тогда
&НаКлиенте
Процедура ОчиститьКорзину(Команда)
	
	Если ОчиститьНаСервере(ИмяКомпьютера()) Тогда
		
		МодульКорзины.ОповеститьЧтоКорзинаОчищена();
		
	КонецЕсли;

КонецПроцедуры
#КонецЕсли

