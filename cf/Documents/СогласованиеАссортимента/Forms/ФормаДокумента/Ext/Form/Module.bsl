&НаКлиенте
Перем СтруктураКолонокТовары Экспорт;

#Область Картинки

&НаСервере
Процедура СчитатьКоличествоКартинок(ЭтоОктрытие = Ложь)
	
	Запрос = Новый Запрос("ВЫБРАТЬ КОЛИЧЕСТВО(Ссылка) Количество, Владелец Номенклатура ИЗ Справочник.КартинкиНоменклатуры ГДЕ Владелец В(&Товары) СГРУППИРОВАТЬ ПО Владелец");
	Запрос.УстановитьПараметр("Товары", Объект.Товары.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", Выборка.Номенклатура))[0].ЕстьКартинка = Выборка.Количество; КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьКоличествоКартинок(НоменклатураСсылка)
	
	Запрос = Новый Запрос("ВЫБРАТЬ КОЛИЧЕСТВО(Ссылка) Количество ИЗ Справочник.КартинкиНоменклатуры ГДЕ Владелец = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", НоменклатураСсылка);
	
	Выполнение = Запрос.Выполнить();
	Если Выполнение.Пустой() Тогда Возврат 0 КонецЕсли;
	
	Выборка = Выполнение.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Количество;
	
КонецФункции

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекДанные = Элемент.ТекущиеДанные;
	ТекДанные.ЕстьКартинка = ПолучитьКоличествоКартинок(ТекДанные.Номенклатура);
	
КонецПроцедуры


#КонецОбласти


&НаКлиенте
Процедура ВыполнитьПодбор(Команда)
	
	ИмяТабличнойЧасти = "Товары";
	
	АдресТоваровВХранилище = ПоместитьТоварыВХранилище();
	ПараметрыПодбора = Новый Структура("АдресТоваровВХранилище", АдресТоваровВХранилище);
	
	ПараметрыПодбора.Вставить("СтруктураКолонокТовары", СтруктураКолонокТовары);
	//ПараметрыПодбора.Вставить("ВидЗапроса", 			"СписокНоменклатуры");
	//ПараметрыПодбора.Вставить("ВидыЗапросов", 			"СписокНоменклатуры");
	//ПараметрыПодбора.Вставить("Склад", 					Объект.Склад);
	//ПараметрыПодбора.Вставить("ТипЦен", 				Объект.ТипЦен);
	//ПараметрыПодбора.Вставить("Валюта", 				Объект.Валюта);
	//ПараметрыПодбора.Вставить("ЗаполнитьУпаковкуПоставщика", Истина);

	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаПодбора", ПараметрыПодбора, Элементы.Товары);
КонецПроцедуры

&НаСервере
Функция ПоместитьТоварыВХранилище() 
	
	Возврат ПоместитьВоВременноеХранилище(
					Объект.Товары.Выгрузить(), 
					УникальныйИдентификатор);
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	СтруктураКолонокТовары = ФункцииФормДокументов.ПолучитьСтруктуруКолонокТовары(Элементы.Товары,,,,,,);
КонецПроцедуры


&НаСервере
Процедура ПолучитьТоварыИзХранилища(АдресТоваровВХранилище)
	
	Объект.Товары.Загрузить(ПолучитьИзВременногоХранилища(АдресТоваровВХранилище));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение <> Неопределено Тогда		
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда

			ПолучитьТоварыИзХранилища(ВыбранноеЗначение.Товары);		// получаем
			УдалитьИзВременногоХранилища(ВыбранноеЗначение.Товары); 	// заметаем следы
		Иначе
			ПолучитьТоварыИзХранилища(ВыбранноеЗначение);		// получаем
			УдалитьИзВременногоХранилища(ВыбранноеЗначение); 	// заметаем следы
		КонецЕсли;
			
		Модифицированность = Истина;
		
	КонецЕсли;
	
	// Получим количество картинок
	СчитатьКоличествоКартинок();
	
КонецПроцедуры

// КОРЗИНА
#Если Не ВебКлиент Тогда
&НаСервере
Процедура ДобавитьИзКорзиныНаСервере(ИмяКомпа, СтруктураКолонокТовары, КолСтрок)
	
	МодульКорзины.ПолучитьТоварИзКорзины(Элементы.Товары, Объект.Товары, СтруктураКолонокТовары, ИмяКомпа, КолСтрок);
	// Получим количество картинок
	СчитатьКоличествоКартинок();
	
КонецПроцедуры
#КонецЕсли

#Если Не ВебКлиент Тогда
&НаКлиенте
Процедура ВставитьИзКорзины(Команда)
	
	КолСтрок = 0;
	ДобавитьИзКорзиныНаСервере(ИмяКомпьютера(), СтруктураКолонокТовары, КолСтрок);
	
	Если КолСтрок Тогда
		
		МодульКорзины.ОповеститьОВставкеТовараВДокумент(КолСтрок, Объект.Товары.Количество());
		
	Иначе
		
		МодульКорзины.ОповеститьЧтоНечегоДобавлять();
		
	КонецЕсли;
	

КонецПроцедуры
#КонецЕсли

#Если Не ВебКлиент Тогда
&НаСервере
Функция ПоложитьВКорзинуНаСервере(ВыделенныеИндексы, ИмяКомпа, КолВКорзине)
	
	Возврат МодульКорзины.ПоложитьТоварВКорзину(Объект.Товары, ВыделенныеИндексы, ИмяКомпа, КолВКорзине);
	
КонецФункции
#КонецЕсли

#Если Не ВебКлиент Тогда
&НаКлиенте
Процедура ДобавитьВКорзину(Команда)
	
	ВыделенныеИндексы 	= МодульКорзины.ПолучитьВыделенныеСтрокиТоваров(Элементы.Товары, Объект.Товары);
	КолВКорзине 		= 0;
	КолТовара			= ВыделенныеИндексы.Количество();
	
	
	Если КолТовара Тогда
		
		Если ПоложитьВКорзинуНаСервере(ВыделенныеИндексы, ИмяКомпьютера(), КолВКорзине) Тогда
			МодульКорзины.ОповеститьОПомещенииТовара(КолТовара, КолВКорзине);
		КонецЕсли;
		
	Иначе
		
		МодульКорзины.ОповеститьЧтоНечегоДобавлять();
				
	КонецЕсли;

КонецПроцедуры
#КонецЕсли

#Если Не ВебКлиент Тогда
&НаКлиенте
Процедура РедактироватьТоварВКорзине(Команда)
	
	ОткрытьФорму("РегистрСведений.Корзина.Форма.Форма");
	
КонецПроцедуры
#КонецЕсли

#Если Не ВебКлиент Тогда
&НаСервере
Функция ОчиститьНаСервере(ИмяКомпа)
	
	Возврат МодульКорзины.ОчиститьКорзину(ИмяКомпа);
	
КонецФункции
#КонецЕсли

#Если Не ВебКлиент Тогда
&НаКлиенте
Процедура ОчиститьКорзину(Команда)
	
	Если ОчиститьНаСервере(ИмяКомпьютера()) Тогда
		
		МодульКорзины.ОповеститьЧтоКорзинаОчищена();
		
	КонецЕсли;

КонецПроцедуры
#КонецЕсли

// МЕНЮ - "ЗАГРУЗИТЬ"
&НаКлиенте
Процедура ЗагрузитьДанныеExcel(Команда)
	  ЗагрузитьВнешниеДанные(Команда.Имя);
КонецПроцедуры
&НаКлиенте
Процедура ЗагрузитьДанныеТабличногоДокумента(Команда)
	  ЗагрузитьВнешниеДанные(Команда.Имя);
КонецПроцедуры
&НаКлиенте
Процедура ЗагрузитьВнешниеДанные(ИмяКоманды)
	
	АдресТоваровВХранилище = ПоместитьТоварыВХранилище();
	
	ОткрытьФорму("Документ.ЗаказПокупателя.Форма.ЗагрузкаДанных", Новый Структура("Страница, СтруктураКолонокТовары, ИмяТаблицы, АдресТоваровВХранилище", ИмяКоманды, Неопределено, "Объект.Товары", АдресТоваровВХранилище), Элементы.Товары);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Получим количество картинок
	СчитатьКоличествоКартинок();
	
	Контрагенты.ЗагрузитьЗначения(Объект.Контрагенты.Выгрузить().ВыгрузитьКолонку("Контрагент"));
	
	// информация о товаре
	РаботаСНоменклатурой.ДобавитьОперативнуюИнформациюОТоваре(ЭтаФорма);
	
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.Контрагенты.Очистить();
	
	Для каждого Строка Из Контрагенты цикл
		новСтрока = ТекущийОбъект.Контрагенты.Добавить();
		новСтрока.Контрагент = Строка.Значение;
		новСтрока.Партнер = Строка.Значение.Партнер;
	КонецЦикла;
	
		//ТекущийОбъект.Партнеры.ЗагрузитьКолонку(Контрагенты.ВыгрузитьЗначения(), "Контрагент");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуОкончания(Команда)
	
	текДата = ТекущаяДата();
	ВвестиДату(текДата, "Дата окончания", ЧастиДаты.Дата);
	Для Каждого Строка ИЗ Объект.Товары Цикл
		Строка.ДатаОкончания = ТекДата;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДату(Команда)
	ОткрытьФорму("Документ.СогласованиеАссортимента.Форма.ФормаЗаполненияДат",,ЭтаФорма,,,, Новый ОписаниеОповещения("ОкончаниеЗаполненияДат", ЭтаФорма));
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеЗаполненияДат(Результат, Параметры)
	Если Результат <> Неопределено Тогда
		ДатаНачала = Результат.ДатаНачала;
		ДатаОкончания = Результат.ДатаОкончания;
		//Если ДатаНачала <> Неопределено И ДатаОкончания <> Неопределено Тогда
		//Для Каждого Строка ИЗ Объект.Товары Цикл Строка.ДатаОкончания = ДатаОкончания 
		//КонецЦикла;
	 КонецЕсли;
	КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуНачала(Команда)
	текДата = ТекущаяДата();
	ВвестиДату(текДата, "Дата начала", ЧастиДаты.Дата);
	Для Каждого Строка ИЗ Объект.Товары Цикл
		Строка.ДатаНачала = ТекДата;
	КонецЦикла;

КонецПроцедуры


#Область Информация // о товаре

// ИНФОРМАЦИЯ О ТОВАРЕ

&НаСервере
Процедура ОбработатьОтображениеИнформацииОТоваре() Экспорт
	
	РаботаСНоменклатурой.ОбработатьОтображениеИнформацииОТоваре(ЭтаФорма, "Товары", "Объект.Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ИнфТовараТекстHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	РаботаСНоменклатуройКлиент.ИнфТовараТекстHTMLПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка);
	
КонецПроцедуры
&НаКлиенте
Процедура ИнфТовараЗаголовокHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	РаботаСНоменклатуройКлиент.ИнфТовараЗаголовокHTMLПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка, "Товары", "Объект.Товары");
	
КонецПроцедуры

 &НаКлиенте
Процедура ПоказатьСкрытьИнфОТоваре(Команда)
	
	РаботаСНоменклатуройКлиент.ПоказатьСкрытьИнфОТоваре(ЭтаФорма);
	
КонецПроцедуры
&НаКлиенте
Процедура НастройкаИнфОТоваре(Команда) 
	
	РаботаСНоменклатуройКлиент.НастройкаИнфОТоваре(ЭтаФорма, "Товары", "Объект.Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	// информация о товаре
	ОбработатьОтображениеИнформацииОТоваре();

КонецПроцедуры
//&НаСервере
//Функция ПисьмоОРезультатеОбработка()
//	
//	// ищем все открытые заявки, или заявки ожидающие ответа (поступившие на рассмотрение в рамках БП)
//	
//	Запрос = Новый Запрос("
//	|ВЫБРАТЬ Тов.Номенклатура КАК Номенклатура, Тов.ДатаНачала КАК ДатаНачала ПОМЕСТИТЬ Товары ИЗ &Номенклатура КАК Тов
//	|;
//	|ВЫБРАТЬ Пользователь, Номенклатура, Номенклатура.Артикул Артикул 
//	|ИЗ РегистрСведений.ЗапросНаСогласованиеТовара 
//	|ГДЕ Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ Товары ГДЕ ДатаНачала <> ДАТАВРЕМЯ(1,1,1)) И Партнер В (&Партнеры) И (Статус = 1 ИЛИ Статус = 2) 
//	|ИТОГИ ПО Пользователь");
//	
//	Запрос.УстановитьПараметр("Номенклатура", Объект.Товары.Выгрузить());
//	Запрос.УстановитьПараметр("Партнеры", Объект.Партнеры.Выгрузить().ВыгрузитьКолонку("Партнер"));

//	РезультатЗапроса = Запрос.Выполнить();
//	ВыборкаПолучатель = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
//	
//	URLИнтернетМагазин = Константы.ПутьИнтернетМагазин.Получить();
//			
//	Пока ВыборкаПолучатель.Следующий() Цикл
//		
//		ТекстПисьмаТело = "<table>";
//		
//		Получатель = ВыборкаПолучатель.Пользователь;
//		
//		Если ТипЗнч(Получатель) = Тип("СправочникСсылка.ПользователиИнтернет") Тогда
//			
//			Кому = Получатель.ЭлектроннаяПочта;
//			ТекстПисьмаЗаголовок = "Уважаемый(ая) " + Получатель + "!" + "<BR><BR> Мы получили ответ от Вашей коммерческой службы по запрашиваемыми позициям и спешим сообщить Вам, что следующие позиции были согласованы:<BR>";	
//			
//		КонецЕсли;		
//	 
//		ВыборкаТовары = ВыборкаПолучатель.Выбрать();               
//		 
//		Пока ВыборкаТовары.Следующий() Цикл
//			Товар = ВыборкаТовары.Номенклатура;
//		
//			ТекстПисьмаТело = ТекстПисьмаТело + "<tr><td>" + Товар.Артикул + "</td><td><A style=""COLOR: rgb(0,0,204)"" href=" + URLИнтернетМагазин + НРег(Товар.alies) + ">"+ Товар +"</A></td></tr>";
//		КонецЦикла;
//		
//	   	ТемаПисьма = "Заявка на согласование товара рассмотрена коммерческой службой"; 

//		ТекстПисьма = ТекстПисьмаЗаголовок + ТекстПисьмаТело + "</table>" + КэшируемыеФункции.ПолучитьПодвалПисьма();
//		
//		НачатьТранзакцию();

//		Письмо = ОбщиеФункции.ОповеститьПоПочте(Кому, ТемаПисьма, ТекстПисьма, Ложь, Перечисления.ТипыТекстовЭлектронныхПисем.HTML);
//		
//		Если Письмо = Неопределено Тогда
//			ЗаписьЖурналаРегистрации("Данные.Запись", УровеньЖурналаРегистрации.Ошибка, , , 
//				ОписаниеОшибки() + "
//				|получатель = " + Получатель + "
//				|товар = " + Товар);
//			
//			Возврат Ложь; 
//		КонецЕсли;
//	
//		ВыборкаТовары.Сбросить(); 
//		Пока ВыборкаТовары.Следующий() Цикл
//			
//			Товар = ВыборкаТовары.Номенклатура;
//			
//			ТекущийЗапрос = РегистрыСведений.ЗапросНаСогласованиеТовара.СоздатьНаборЗаписей();
//			ТекущийЗапрос.Отбор.Пользователь.Установить(Получатель);
//			ТекущийЗапрос.Отбор.Номенклатура.Установить(Товар);
//			ТекущийЗапрос.Прочитать();
//			//ЗаполнитьЗначенияСвойств(ТекущийЗапрос, ВыборкаТовары);
//			Для Каждого Строка ИЗ ТекущийЗапрос Цикл
//				Строка.ДокументСогласования = Объект.Ссылка;
//				Строка.Статус = 3; КонецЦикла;

//			Попытка
//				ТекущийЗапрос.Записать();
//			Исключение
//				ЗаписьЖурналаРегистрации("Данные.Запись", УровеньЖурналаРегистрации.Ошибка, , , 
//				ОписаниеОшибки() + "
//				|получатель = " + Получатель + "
//				|товар = " + Товар);
//				Возврат Ложь;
//			КонецПопытки;
//		
//		КонецЦикла;
//		
//		ЗафиксироватьТранзакцию();
//		
//	КонецЦикла;

//	Возврат Истина;
//	
//КонецФункции
&НаСервере
Функция КонтрольОстатковВСеансеОтключен()
	Возврат ПараметрыСеанса.КонтрольОстатковВСеансеОтключен;
КонецФункции

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	//Перем РежимЗаписи;
	//
	//Если 	НЕ КонтрольОстатковВСеансеОтключен() И
	//		ПараметрыЗаписи.Свойство("РежимЗаписи", РежимЗаписи) И
	//		РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
	//		
	//	Если Объект.ПисьмоОРезультатеОбработка() Тогда
	//
	//		ПоказатьОповещениеПользователя("Автоматическая рассылка",,"Отправлены письма о согласовании ассортимента", БиблиотекаКартинок.Почта);
	//		
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Перем РежимЗаписи;
	
	Если 	НЕ ПараметрыСеанса.КонтрольОстатковВСеансеОтключен И
			ПараметрыЗаписи.Свойство("РежимЗаписи", РежимЗаписи) И
			РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			
		Документы.СогласованиеАссортимента.ПисьмоОРезультатеОбработка(Объект.Ссылка, Объект.Товары, Объект.Контрагенты);
		
	КонецЕсли;

КонецПроцедуры


#КонецОбласти
