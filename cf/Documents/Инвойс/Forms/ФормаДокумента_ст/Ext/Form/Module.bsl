&НаКлиенте
Перем ВыбДанные;
&НаКлиенте
Перем СтруктураКолонокТовары; 

&НаКлиенте
Перем ПодборБезКоличества, ФормаПодбора;

// ИЗВЛЕЧЕНИЕ данных

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.ГруппаТовары.ТекущаяСтраница = Элементы.ГруппаИнвойс;
	УправлениеВидимостью();
	
	СтруктураКолонокТовары = ФункцииФормДокументов.ПолучитьСтруктуруКолонокТовары(Элементы.Товары, Объект.СуммаВключаетНДС, Объект.ТипЦен);
	ФункцииФормДокументов.ОбновитьПодвал(Объект, Элементы, Сумма, СтруктураКолонокТовары);

КонецПроцедуры
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ФункцииФормДокументов.РассчитатьДинамическиеКолонки(
					Объект.Товары,
					ФункцииФормДокументов.ПолучитьСтруктуруКолонокТовары(Элементы.ИТовары, Объект.СуммаВключаетНДС));
					
	ЗагрузитьТаблицуТовары();				
	
КонецПроцедуры
&НаСервере
Процедура ЗагрузитьТаблицуТовары()
	
	Запрос = Новый Запрос(" ВЫБРАТЬ
							|	Номенклатура.Артикул			Артикул,
							|	Номенклатура,
							|	НоменклатураДляТаможни,
							|	Количество,	
							|	Упаковка, 
							|   ВесНеттоУпаковка,
							|	ВесБруттоУпаковка,
 							|	ВесНеттоТовар,
							|	ВесБруттоТовар,
							|	КоличествоВУпаковке,
							|   КоличествоМест ,
							|	ВесНеттоУпаковка*КоличествоМест  	ВесНеттоИтогУпаковка,																			
							|   ВесБруттоУпаковка*КоличествоМест  	ВесБруттоИтогУпаковка,
							|   ВесНеттоТовар*Количество       		ВесНеттоИтогТовар,
							|	ВесБруттоТовар*Количество     	 	ВесБруттоИтогТовар
							|ИЗ                            	
							|	Документ.Инвойс.ТоварыПакинг
							|ГДЕ
							|	Ссылка = &Ссылка
							|");
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);						
	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда
		Товары.Загрузить(РезультатЗапроса.Выгрузить());
	КонецЕсли;
	
КонецПроцедуры

// заполнение происходит на основании ранее заполненного инвойса
&НаКлиенте
Процедура Заполнить(Команда)
	
	Ответ = Вопрос("Заполненные ранее данные будут потеряны, заполнить пакинг?", РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
	    Возврат;
	КонецЕсли; 

	ЗаполнитьТаблицуТовары();
	
КонецПроцедуры
&НаСервере
Процедура ЗаполнитьТаблицуТовары();
	
	Запрос = Новый Запрос("	ВЫБРАТЬ
							|	МАКСИМУМ(док.Номенклатура.Артикул) 	Артикул,
							|	док.Номенклатура                    Номенклатура,
							|	МАКСИМУМ(док.Количество)			Количество,	
                            |	МАКСИМУМ(рег.НоменклатураДляТаможни)			НоменклатураДляТаможни,
							|	МАКСИМУМ(рег.Упаковка)				Упаковка,
							|	МАКСИМУМ(рег.Упаковка.Коэффициент) 	КоличествоВУпаковке,
							|	МАКСИМУМ(рег.Упаковка.ВесНетто) 	ВесНеттоУпаковка,
							|	МАКСИМУМ(рег.Упаковка.ВесБрутто) 	ВесБруттоУпаковка,
							|	МАКСИМУМ(док.Номенклатура.Вес) 		ВесНеттоТовар,
							|	ЛОЖЬ								Исключение,
							//|	ИСТИНА								Автозаполнение
							|   МАКСИМУМ(док.Количество/рег.Упаковка.Коэффициент) 							КоличествоМест,			
							|	МАКСИМУМ(рег.Упаковка.ВесНетто*(док.Количество/рег.Упаковка.Коэффициент))   ВесНеттоИтогУпаковка,																			
							|   МАКСИМУМ(рег.Упаковка.ВесБрутто*(док.Количество/рег.Упаковка.Коэффициент))  ВесБруттоИтогУпаковка,
							|   МАКСИМУМ(док.Номенклатура.Вес * док.Количество)                             ВесНеттоИтогТовар
							|ПОМЕСТИТЬ Пакинг
							|ИЗ
							|	Документ.Инвойс.Товары Док
							|	ЛЕВОЕ СОЕДИНЕНИЕ
							|		РегистрСведений.НоменклатураДляТаможни Рег
							|	ПО  
							|// соединяем только по номенклатуре если в документе не заполнена упаковка (выбираются все возможные сочетания упаковка-номенклатура)
							|		Рег.Номенклатура = Док.Номенклатура И Док.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
							|		ИЛИ
							|// соединяем и по упаковке и по номенклатуре если упаковка заполнена в документе (однозначное соответствие)
							|		Док.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) И Рег.Номенклатура = Док.Номенклатура И Рег.Упаковка = Док.Упаковка
							|ГДЕ
							|	док.ссылка = &ссылка 
							|СГРУППИРОВАТЬ ПО 
							|	док.Номенклатура
							|ИМЕЮЩИЕ
							|	КОЛИЧЕСТВО(Док.Упаковка) < 2
	                        |;
							|
							//|ВЫБРАТЬ 
							//|	МАКСИМУМ(Зап.Артикул),
							//|	Зап.Номенклатура,
							//|	МАКСИМУМ(Зап.Количество),
							//|	МАКСИМУМ(Зап.НоменклатураДляТаможни),
							//|	Зап.Упаковка,
							//|	МАКСИМУМ(Зап.КоличествоВУпаковке),
							//|	МАКСИМУМ(Зап.ВесНеттоУпаковка),
							//|	МАКСИМУМ(Зап.ВесБруттоУпаковка),
							//|	МАКСИМУМ(Зап.ВесНеттоТовар),
							//|	МАКСИМУМ(Зап.ВПакинг)			ВПакинг
							//|ИЗ
							//|(
							|	
							//|	ВЫБРАТЬ
							//|		Пак.Номенклатура.Артикул	Артикул,
							//|		Пак.Номенклатура			Номенклатура,
							//|		Пак.Количество				Количество,
							//|		Пак.НоменклатураДляТаможни	НоменклатураДляТаможни,
							//|		Пак.Упаковка				Упаковка,
							//|		Пак.Упаковка.Коэффициент	КоличествоВУпаковке,
							//|		Пак.Упаковка.ВесНетто		ВесНеттоУпаковка,
							//|		Пак.Упаковка.ВесБрутто		ВесБруттоУпаковка,
							//|		Пак.Номенклатура.Вес		ВесНеттоТовар,
							//|		Пак.Исключение				Исключение,
							//|		ЛОЖЬ						Автозаполнение
							//|	ИЗ
							//|		Документ.Инвойс.ТоварыПакинг Пак
							//|	ГДЕ 
							//|		Пак.Ссылка = &Ссылка	
							//|
							//|	ОБЪЕДИНИТЬ
							|
							|	ВЫБРАТЬ
							|		Док.Номенклатура.Артикул		Артикул,
							|		Док.Номенклатура				Номенклатура,
							|		Док.Количество					Количество,
							|		рег.НоменклатураДляТаможни		НоменклатураДляТаможни,
							|		рег.Упаковка					Упаковка,
							|		рег.Упаковка.Коэффициент		КоличествоВУпаковке,
							|		рег.Упаковка.ВесНетто			ВесНеттоУпаковка,
							|		рег.Упаковка.ВесБрутто			ВесБруттоУпаковка,
							|		док.Номенклатура.Вес			ВесНеттоТовар,
							|       ИСТИНА							Исключение,
							|   	док.Количество/рег.Упаковка.Коэффициент 							КоличествоМест,			
							|		док.Упаковка.ВесНетто*(док.Количество/рег.Упаковка.Коэффициент)   	ВесНеттоИтогУпаковка,																			
							|   	док.Упаковка.ВесБрутто*(док.Количество/рег.Упаковка.Коэффициент)  	ВесБруттоИтогУпаковка,
							|   	док.Номенклатура.Вес * док.Количество                             	ВесНеттоИтогТовар
							|									//|		ИСТИНА							Автозаполнение
							|	ИЗ
							|		Документ.Инвойс.Товары Док
							| 		ЛЕВОЕ СОЕДИНЕНИЕ
							|			РегистрСведений.НоменклатураДляТаможни Рег
							|		ПО
							|			Рег.Номенклатура = Док.Номенклатура И Док.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
							|			ИЛИ
							|			Док.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) И Рег.Номенклатура = Док.Номенклатура И Рег.Упаковка = Док.Упаковка
							|		ЛЕВОЕ СОЕДИНЕНИЕ
							| 			Пакинг Пак
							| 		ПО Док.Номенклатура = Пак.Номенклатура 
							|	ГДЕ 
							|		Док.Ссылка = &Ссылка И Пак.Номенклатура ЕСТЬ NULL
							|
							|	ОБЪЕДИНИТЬ ВСЕ
							|		
							|		ВЫБРАТЬ * ИЗ Пакинг
							|
							//|) Зап                          
							//|	
							//|СГРУППИРОВАТЬ ПО Зап.Номенклатура, Зап.Упаковка
							//|УПОРЯДОЧИТЬ ПО ВПакинг Убыв
							|
							|");
							
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);						
	Пакет 	= Запрос.ВыполнитьПакет();
	Товары.Очистить();
	Товары.Загрузить(Пакет[1].Выгрузить());
	
КонецПроцедуры

// СОХРАНЕНИЕ данных

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
			
	СохранитьТаблицуТовары(ТекущийОбъект, Отказ);

КонецПроцедуры

&НаСервере
Процедура СохранитьТаблицуТовары(ТекущийОбъект, Отказ);
	
	// проверка заполнения данных в инвойсе
	
	Строки = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", Справочники.Номенклатура.ПустаяСсылка()));
	Если Строки.Количество() > 0 Тогда
		НомерСтроки = Объект.Товары.Индекс(Строки[0]);
		ОбщиеФункции.СообщитьТекст("Не заполнено поле", "Объект.Товары[" + НомерСтроки + "].Номенклатура", Объект.Товары);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Строки = Объект.Товары.НайтиСтроки(Новый Структура("ЗаказПоставщику", Документы.ЗаказПоставщику.ПустаяСсылка()));
	Если Строки.Количество() > 0 Тогда
		НомерСтроки = Объект.Товары.Индекс(Строки[0]);
		ОбщиеФункции.СообщитьТекст("Не заполнено поле", "Объект.Товары[" + НомерСтроки + "].ЗаказПоставщику", Объект.Товары);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Строки = Объект.Товары.НайтиСтроки(Новый Структура("Количество", 0));
	Если Строки.Количество() > 0 Тогда
		НомерСтроки = Объект.Товары.Индекс(Строки[0]);
		ОбщиеФункции.СообщитьТекст("Не заполнено поле", "Объект.Товары[" + НомерСтроки + "].Количество", Объект.Товары);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// сохранить пакинг
	
	ТекущийОбъект.ТоварыПакинг.Очистить();
	ТекущийОбъект.ТоварыПакинг.Загрузить(Товары.Выгрузить());

	
	// зачем его вообще заполнять!!! коментю ->
	
	//// заполняем поле Упаковка в инвойсе: это конечно бред, но не знаю пока как по-другому
	//
	//Для Каждого Строка Из Товары Цикл
	//	
	//	Если НЕ Строка.Исключение Тогда
	//		
	//		Строки = ТекущийОбъект.Товары.НайтиСтроки(Новый Структура("Номенклатура", Строка.Номенклатура));
	//		
	//		Если Строки.Количество() > 0 Тогда
	//			Строки[0].Упаковка = Строка.Упаковка;
	//		КонецЕсли;
	//		
	//	КонецЕсли;
	//	
	//КонецЦикла;  <-
	
	СохранитьДанныеПоУпаковкам();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеПоУпаковкам()
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос("	ВЫБРАТЬ
							|	Товары.Упаковка,
							|   Товары.ВесНеттоУпаковка		ВесНетто,
							|	Товары.ВесБруттоУпаковка    ВесБрутто,
							|	Товары.ВесНеттоТовар		ВесНеттоТовар,
							|   Товары.ВесБруттоТовар		ВесБруттоТовар,
							|	Товары.Номенклатура,
							|	Товары.КоличествоВУпаковке	Коэффициент
							|ПОМЕСТИТЬ
							|	ТоварыДокумента
							|ИЗ
							|	&ВыбТаблица КАК Товары
							|ГДЕ
							|	Товары.ВесНеттоУпаковка <> 0 ИЛИ
							|	Товары.ВесБруттоУпаковка <> 0");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	                                     
	Запрос.УстановитьПараметр("ВыбТаблица", Товары.Выгрузить());
	Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ
					|	Спр.Ссылка,
					|	Табл.Коэффициент,
					|	Табл.Номенклатура 	Владелец,
					|	Табл.ВесНетто,
					|	Табл.ВесБрутто,
					|
					|ИЗ
					|	ТоварыДокумента Табл
					|	ЛЕВОЕ СОЕДИНЕНИЕ
					|		Справочник.УпаковкиНоменклатуры
					|	ПО Табл.Упаковка = Спр.Ссылка
					|ГДЕ
					|	Спр.ВесНетто <> Табл.ВесНетто
					|	ИЛИ Спр.ВесБрутто <> Табл.ВесБрутто
					|;
					|ВЫБРАТЬ
					|	Спр.Ссылка
					|	Табл.ВесНеттоТовар 	ВесНетто,
					|	Табл.ВесБруттоТовар	Вес,
					|ИЗ
					|	ТоварыДокумента Табл
					|	ЛЕВОЕ СОЕДИНЕНИЕ
					|		Справочник.Номенклатура Ном
					|	ПО
					|		Табл.Номенклатура = Ном.Ссылка
					|ГДЕ
					|	Спр.Вес <> Табл.ВесБруттоТовар
					|	ИЛИ Спр.ВесНетто <> Табл.ВесНеттоТовар
					|";
					
					
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);						
	Пакет 	= Запрос.ВыполнитьПакет();

	Если НЕ Пакет[0].Пустой() Тогда
		Выборка = Пакет[0].Выбрать();
		Пока Выборка.Следующий() Цикл
			
				Упаковка = Выборка.Ссылка.ПолучитьОбъект();
				ЗаполнитьЗначенияСвойств(Упаковка, Выборка, , "Ссылка");
				Попытка
					Упаковка.Записать();
				Исключение
					Сообщить("Ошибка при записи упаковки номенклатуры: " + ОписаниеОшибки());
				КонецПопытки;
			
		КонецЦикла;
	КонецЕсли;	
	
	Если НЕ Пакет[1].Пустой() Тогда
		Выборка = Пакет[1].Выбрать();
		Пока Выборка.Следующий() Цикл
			
				Товар = Выборка.Ссылка.ПолучитьОбъект();
				ЗаполнитьЗначенияСвойств(Товар, Выборка, , "Ссылка");
				Попытка
					Товар.Записать();
				Исключение
					Сообщить("Ошибка при записи номенклатуры: " + ОписаниеОшибки());
				КонецПопытки;
			
		КонецЦикла;
	КонецЕсли;		
	//РезультатЗапроса = Запрос.Выполнить();
	//Если НЕ РезультатЗапроса.Пустой() Тогда  // нашлись изменения
	//	Выборка = РезультатЗапроса.Выбрать();
	//	Пока Выборка.Следующий() Цикл
	//		
	//			Упаковка = Выборка.Ссылка.ПолучитьОбъект();
	//			ЗаполнитьЗначенияСвойств(Упаковка, Выборка, , "Ссылка");
	//			Попытка
	//				Упаковка.Записать();
	//			Исключение
	//				Сообщить("Ошибка сохранения изменений весов упаковок: " + ОписаниеОшибки());
	//			КонецПопытки;
	//		
	//	КонецЦикла;
	//КонецЕсли;
													
КонецПроцедуры	
  
// ДОПОЛНИТЕЛЬНЫЙ ФУНКЦИОНАЛ

// . . . . . . . . . | оформление

&НаКлиенте
Процедура РасчетВесаПриИзменении(Элемент)
	УправлениеВидимостьюВидДокумента();
КонецПроцедуры
&НаКлиенте
Процедура УправлениеВидимостью()
	
	Инвойс = Элементы.ГруппаТовары.ТекущаяСтраница.Заголовок = "PAKCING LIST";
	
	// сделаем видимыми/невидимыми колонки пакинг-листа
	
	Элементы.НоменклатураДляТаможни.Видимость = НЕ Инвойс;
	УправлениеВидимостьюВидДокумента(НЕ Инвойс);
	
КонецПроцедуры
&НаКлиенте
Процедура УправлениеВидимостьюВидДокумента(СделатьВидимым = Истина)
	
	РасчетВеса = ?(ЗначениеЗаполнено(Объект.РасчетВеса), ПолучитьРасчетВеса(Объект.РасчетВеса), Ложь); // по-умолчанию видимость по упаковкам	
                           
	Элементы.ВесТовар.Видимость 		= РасчетВеса И СделатьВидимым;
	//Элементы.КоличествоМест.Видимость	= РасчетВеса И СделатьВидимым;
		
	Элементы.ВесУпаковка.Видимость 			= НЕ РасчетВеса И СделатьВидимым;
	Элементы.КоличествоВУпаковке.Видимость	= НЕ РасчетВеса И СделатьВидимым;
	
КонецПроцедуры                              

// . . . . . . . . . | при интерактивном изменении числовых даннных

&НаКлиенте
Процедура ИКоличествоПриИзменении(Элемент)
	
	ФункцииФормДокументов.КоличествоПриИзменении(Элементы.ИТовары, СтруктураКолонокТовары);
	
КонецПроцедуры


&НаКлиенте
Процедура КоличествоПриИзменении(Элемент)
	
	ПриИзмененииКоличества(Элемент)
	
КонецПроцедуры
&НаКлиенте
Процедура ПриИзмененииКоличества(Элемент)

	ПересчитатьКоличества(Элемент.Имя, Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор());
	
	Если ФормаПодбора <> Неопределено И ФормаПодбора.Открыта() Тогда
		
		ИзменениеКоличестваПриПодборе(АдресТоваровВРегистре, Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор());
		ФормаПодбора.Элементы.Список.Обновить();

	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ЦенаПриИзменении(Элемент)
	
	ФункцииФормДокументов.ЦенаПриИзменении(Элементы.ИТовары, СтруктураКолонокТовары);

КонецПроцедуры
&НаКлиенте
Процедура СуммаПриИзменении(Элемент)
	
	ФункцииФормДокументов.СуммаПриИзменении(Элементы.ИТовары, СтруктураКолонокТовары);

КонецПроцедуры
 &НаКлиенте
Процедура ВесПриИзменении(Элемент)
	
	ПересчитатьВеса("Вес", Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор());
		
КонецПроцедуры
&НаКлиенте
Процедура ВесИтогПриИзменении(Элемент)
	
	ПересчитатьВеса("ВесИтог", Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры
 
// . . . . . . . . .  . | пересчеты
                     
&НаСервере
Процедура ПересчитатьКоличества(Изменился, ИсходныеДанные);
	
	ТекущиеДанные = ПолучитьДанныеДляОбработки(ИсходныеДанные);
	
	Количество			= ТекущиеДанные.Количество;
	КоличествоВУпаковке	= ТекущиеДанные.КоличествоВУпаковке;
	КоличествоМест		= ТекущиеДанные.КоличествоМест;
	
	// если значения количества было удалено, удаляются все ранее заполненные количества и пересчитываем веса
	
	Если НЕ ЗначениеЗаполнено(Вычислить(Изменился)) Тогда
		 КоличествоМест = 0;
	     Количество 	= 0;
		 ПересчитатьВеса("Вес", ИсходныеДанные);
		 Возврат;
	КонецЕсли;
		 
	Если Изменился = "КоличествоВУпаковке" Тогда
		
		Если ЗначениеЗаполнено(Количество) Тогда
			КоличествоМест 	= Количество / КоличествоВУпаковке;
		ИначеЕсли ЗначениеЗаполнено(КоличествоМест) Тогда	
        	Количество	 	= КоличествоМест * КоличествоВУпаковке;
		КонецЕсли;
		
	ИначеЕсли  Изменился = "КоличествоМест" Тогда
		
		Количество = КоличествоМест * КоличествоВУпаковке;
		
	ИначеЕсли  Изменился = "Количество" Тогда	
		
		Если ЗначениеЗаполнено(КоличествоВУпаковке) Тогда
			КоличествоМест = Количество / КоличествоВУпаковке;
		КонецЕсли;
		
	КонецЕсли; 
	
	ТекущиеДанные.Количество 			= Количество;
	ТекущиеДанные.КоличествоВУпаковке 	= КоличествоВУпаковке;
	ТекущиеДанные.КоличествоМест 		= КоличествоМест;	
	
	ПересчитатьВеса("Вес", ТекущиеДанные);
	
КонецПроцедуры
&НаСервере
Процедура ПересчитатьВеса(Изменился, ИсходныеДанные)
	
	ТекущиеДанные = ПолучитьДанныеДляОбработки(ИсходныеДанные);
	
	Если Изменился = "Вес" Тогда
	
		ТекущиеДанные.ВесНеттоИтогУпаковка  = ТекущиеДанные.ВесНеттоУпаковка*ТекущиеДанные.КоличествоМест;
		ТекущиеДанные.ВесБруттоИтогУпаковка = ТекущиеДанные.ВесБруттоУпаковка*ТекущиеДанные.КоличествоМест;
		
		ТекущиеДанные.ВесНеттоИтогТовар  = ТекущиеДанные.ВесНеттоТовар*ТекущиеДанные.Количество;
		ТекущиеДанные.ВесБруттоИтогТовар = ТекущиеДанные.ВесБруттоТовар*ТекущиеДанные.Количество;
		
	ИначеЕсли Изменился = "ВесИтог" Тогда
		
		Если ЗначениеЗаполнено(ТекущиеДанные.КоличествоМест) Тогда 
			ТекущиеДанные.ВесНеттоУпаковка 	= ТекущиеДанные.ВесНеттоИтогУпаковка/ТекущиеДанные.КоличествоМест;
       		ТекущиеДанные.ВесБруттоУпаковка = ТекущиеДанные.ВесБруттоИтогУпаковка/ТекущиеДанные.КоличествоМест;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущиеДанные.Количество) Тогда
			ТекущиеДанные.ВесНеттоТовар  = ТекущиеДанные.ВесНеттоИтогТовар/ТекущиеДанные.Количество;
			ТекущиеДанные.ВесБруттоТовар = ТекущиеДанные.ВесБруттоИтогТовар/ТекущиеДанные.Количество;
		КонецЕсли;
		
	КонецЕсли;	
 		
КонецПроцедуры

// . . . . . . . . . . | дополнительно
&НаСервере
Функция ПолучитьРасчетВеса(РасчетВеса)
	Возврат Перечисления.ВидыРасчетаВеса.Индекс(РасчетВеса);	
КонецФункции
&НаСервере
Функция СоздатьВыбранныйЭлемент(Текст, ИмяСправочника, СписокРеквизитов = "") Экспорт
	
	СписокРеквизитов = ?(ЗначениеЗаполнено(СписокРеквизитов), СписокРеквизитов, Новый Структура);	
	
	НовыйСправочник = Справочники[ИмяСправочника].СоздатьЭлемент();
	НовыйСправочник.Наименование = Текст;
	Для Каждого Реквизит Из СписокРеквизитов Цикл
		НовыйСправочник[Реквизит.Ключ] = Реквизит.Значение; 	
	КонецЦикла;
	
	Попытка
		НовыйСправочник.Записать();
	Исключение
		стрОшибки = ОписаниеОшибки();
		ОбщиеФункции.СообщитьТекст("Ошибка при создании нового справочника
										|" + стрОшибки);
		Возврат Неопределено
	КонецПопытки;
	
	Возврат НовыйСправочник.Ссылка;
	
КонецФункции
&НаСервере
Функция ПолучитьДанныеДляОбработки(ИсходныеДанные)
	
	// обрабатывает полученные данные с Клиента - идентификатор текущий строки дерева, с Сервера - ДанныеФормыЭлементДерева

	Возврат ?(ТипЗнч(ИсходныеДанные) = Тип("Число"), Товары.НайтиПоИдентификатору(ИсходныеДанные), ИсходныеДанные)
	
КонецФункции
&НаСервере
Функция ПодробноПоУпаковке(Упаковка = Неопределено)
	
	Если Упаковка = Неопределено Тогда
		Упаковка = Справочники.УпаковкиНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
	Ключ = "Упаковка, КоличествоВУпаковке, ВесНеттоУпаковка, ВесБруттоУпаковка";
    Возврат Новый Структура(Ключ, Упаковка, Упаковка.Коэффициент, Упаковка.ВесНетто, Упаковка.ВесБрутто);
	
КонецФункции
&НаСервере
Функция ПодробноПоТовару(ВыбранноеЗначение)
	Возврат Новый Структура("ВесНеттоТовар", ВыбранноеЗначение.Вес);
КонецФункции

// . . . . . . . . . . | организация быстрого ввода информации по упаковкам

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НЕ НоваяСтрока И НЕ Копирование Тогда
		ВыбДанные = Новый Структура("Упаковка, КоличествоВУпаковке, Вопрос", Элементы.Товары.ТекущиеДанные.Упаковка, Элементы.Товары.ТекущиеДанные.КоличествоВУпаковке, Истина);
	КонецЕсли;

КонецПроцедуры
&НаКлиенте
Процедура КоличествоВУпаковкеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ПодборКоличестваУпаковок(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)

КонецПроцедуры
&НаКлиенте
Процедура ПодборКоличестваУпаковок(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	// проверка на ввод числовых данных
	Попытка 
		Коэффициент = Число(Текст);
	Исключение
		ПоказатьПредупреждение(,"Введите числовые данные",,"Внимание!");
	    Возврат;
	КонецПопытки;
	
	// организзация быстрого выбора упаковки
	
	СписокПодбора = ПолучитьСписокУпаковокПоТексту(Коэффициент, ТекущиеДанные.Номенклатура);
	
	// если вернулась конкретная ссылка на упаковку
	
	Если ТипЗнч(СписокПодбора) = Тип("СправочникСсылка.УпаковкиНоменклатуры") Тогда
		ТекущиеДанные.Упаковка = СписокПодбора;
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПодробноПоУпаковке(СписокПодбора));	
		Возврат;
	КонецЕсли;
	
	// если вернулся список возможных упаковок
	
	// делаем возможность создания новой упаковки по введенному значению или изменения текущего значения упаковки, если значение упаковки заполнено	
	Если ЗначениеЗаполнено(ТекущиеДанные.Упаковка) Тогда
		СписокПодбора.Вставить(0, Неопределено, "Изменить упаковку",, БиблиотекаКартинок.СоздатьЭлементСписка);
		СписокПодбора.Вставить(1, Неопределено, "Новая упаковка на " + Строка(Коэффициент) + " ед.",, БиблиотекаКартинок.СоздатьЭлементСписка);
	Иначе
		СписокПодбора.Вставить(0, Неопределено, "Новая упаковка на " + Строка(Коэффициент) + " ед.",, БиблиотекаКартинок.СоздатьЭлементСписка);
	КонецЕсли;
	
	// вызываем выпадающий список для выбора значения
	Выбор = ЭтаФорма.ВыбратьИзСписка(СписокПодбора, Элемент);
	
	// если не отказались от выбора значения из списка
	
	Если Выбор <> Неопределено Тогда  													
		Реквизиты = Новый Структура("Коэффициент, Владелец", Коэффициент, ТекущиеДанные.Номенклатура);
	
		Если Выбор.Значение = Неопределено Тогда // если было выбрано действие (изменение/создание новой упаковки)
			
			Если Выбор.Представление = "Изменить упаковку" Тогда
				ВыбраннаяУпаковка = ИзменитьУпаковку(Коэффициент, ТекущиеДанные.Упаковка);
				ВыбДанные.Вставить("Вопрос", Ложь);
			Иначе
				ВыбраннаяУпаковка = СоздатьВыбранныйЭлемент(ТекущиеДанные.Номенклатура, "УпаковкиНоменклатуры", Реквизиты);
				Состояние("Создана новая упаковка номенклатуры",,Строка(ТекущиеДанные.Номенклатура) + " " + Строка(Коэффициент) + " ед.", БиблиотекаКартинок.НоваяГруппа);
			КонецЕсли;
		Иначе
			 
			ВыбраннаяУпаковка = Выбор.Значение;
			
		КонецЕсли;	
			
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПодробноПоУпаковке(ВыбраннаяУпаковка));		
		
		Если ВыбДанные.КоличествоВУпаковке <> 0 И ВыбДанные.Вопрос Тогда
		
			Ответ = Вопрос("Удалить упаковку на " + Строка(ВыбДанные.КоличествоВУпаковке) + " ед.", РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
			    Возврат;
			Иначе
				УдалитьУпаковку(ВыбДанные.Упаковка);
			КонецЕсли;
		КонецЕсли;
		
		ПриИзмененииКоличества(Элемент);
		
	КонецЕсли;
КонецПроцедуры
&НаСервере
Функция ПолучитьСписокУпаковокПоТексту(Значение, Товар)
	
	// ищем упаковку с указанным коэффициентом
	
	Ссылка = Справочники.УпаковкиНоменклатуры.НайтиПоРеквизиту("Коэффициент", Значение, , Товар);
	Если Не Ссылка.Пустая() Тогда
		Возврат Ссылка;
	КонецЕсли;
	
	Список = Новый СписокЗначений;
	
	// если такой упаковки нет, выводим список всех доступных для данного товара упаковок (помеченные на удаления для выбора недоступны)
	
	Запрос = Новый Запрос("ВЫБРАТЬ Коэффициент, Ссылка ИЗ Справочник.УпаковкиНоменклатуры ГДЕ Владелец = &Ссылка И ПометкаУдаления = Ложь");
	
	Запрос.УстановитьПараметр("Ссылка", Товар);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Список.Добавить(Выборка.Ссылка, Строка(Выборка.Коэффициент) + " шт");
	КонецЦикла;
	
	Возврат Список;
	
КонецФункции
&НаСервере
Процедура УдалитьУпаковку(Упаковка)
	
	СпрОбъект = Упаковка.ПолучитьОбъект();
	СпрОбъект.УстановитьПометкуУдаления(Истина);
	
КонецПроцедуры
&НаСервере
Функция ИзменитьУпаковку(Коэффициент, Упаковка)
	
	ОбъектУпаковка = Упаковка.ПолучитьОбъект();
	ОбъектУпаковка.Коэффициент = Коэффициент;

	Попытка
		ОбъектУпаковка.Записать();
	Исключение
		Сообщить("Ошибка при изменении данных: " + ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ОбъектУпаковка.Ссылка;
	
КонецФункции

// . . . . . . . . . . | организация быстрого ввода информации по таможенной позиции
 
&НаКлиенте
Процедура НоменклатураДляТаможниОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ПодборНаименованияДляТаможни(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка);
		
КонецПроцедуры
&НаКлиенте
Процедура ПодборНаименованияДляТаможни(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	СписокПодбора = ПолучитьСписокЗначенийПоТексту(Текст, "НоменклатураДляТаможни");
	
	// если найдено точное соответствие
	
	Если ТипЗнч(СписокПодбора) = Тип("СправочникСсылка.НоменклатураДляТаможни") Тогда 
		Возврат;
	КонецЕсли;
	
		
	// организуем выбор значения из найденных подобных
	
    СписокПодбора.Вставить(0, Неопределено, "Создать новый",, БиблиотекаКартинок.СоздатьЭлементСписка);
	
	Выбор = ЭтаФорма.ВыбратьИзСписка(СписокПодбора, Элемент);
	
	Если Выбор <> Неопределено Тогда                     // если не было отказа от выбора
	
		Если Выбор.Значение = Неопределено Тогда        // если была создана новая упаковка
			
			ДанныеВыбора = СоздатьВыбранныйЭлемент(Текст, "НоменклатураДляТаможни");
			Состояние("Создана новая номенклатура для таможни",,Текст, БиблиотекаКартинок.НоваяГруппа); 
		Иначе
			ДанныеВыбора = Выбор.Значение;
		КонецЕсли;
		
		
	КонецЕсли;
	
	Элементы.Товары.ТекущиеДанные.НоменклатураДляТаможни = ДанныеВыбора;
	
КонецПроцедуры
&НаСервере
Функция ПолучитьСписокЗначенийПоТексту(Текст, ИмяСправочника)
	
	// поиск точного сооветствия для искомого значения
	
	Ссылка = Справочники[ИмяСправочника].НайтиПоНаименованию(Текст, Истина);
	
	Если Не Ссылка.Пустая() Тогда
		Возврат Ссылка;
	КонецЕсли;
	
	// поиск подобных значений искомому
	
	Список = Новый СписокЗначений;
	
	Запрос = Новый Запрос("ВЫБРАТЬ Ссылка, Наименование ИЗ Справочник." + ИмяСправочника + " ГДЕ Наименование ПОДОБНО """ + СокрЛП(Текст) + "%""");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Список.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;
	
	Возврат Список;
	
КонецФункции

// . . . . . . . . . . | при изменении номенклатуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)
	
	ПодборЗначений(Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор());
	
	ФункцииФормДокументов.НоменклатураПриИзменении(
				Элементы.Товары, 
				СтруктураКолонокТовары);
	
КонецПроцедуры 
&НаСервере
Процедура ПодборЗначений(ИсходныеДанные)
	
	ТекущиеДанные = ПолучитьДанныеДляОбработки(ИсходныеДанные);
	
	Условие = "";
	
	Запрос = Новый Запрос("	ВЫБРАТЬ
							|	Номенклатура,
							|	Номенклатура.Вес 		ВесНеттоТовар,
							|	НоменклатураДляТаможни,
							|	Упаковка,
							|	Упаковка.Коэффициент 	КоличествоВУпаковке,
							|	Упаковка.ВесНетто		ВесНеттоУпаковка,
							|	Упаковка.ВесБрутто      ВесБруттоУпаковка,
							|	Упаковка.ВесНетто*(&Количество/Упаковка.Коэффициент)   	ВесНеттоИтогУпаковка,																			
							|   Упаковка.ВесБрутто*(&Количество/Упаковка.Коэффициент)  	ВесБруттоИтогУпаковка,
							|   Номенклатура.Вес * &Количество                          ВесНеттоИтогТовар
							|ИЗ
							|	РегистрСведений.НоменклатураДляТаможни
							|ГДЕ
							|	Номенклатура = &Номенклатура
							|");
							
	Если ЗначениеЗаполнено(ТекущиеДанные.Упаковка) Тогда 
		
		Запрос.Текст = Запрос.Текст + "И Упаковка = &Упаковка";
		Запрос.УстановитьПараметр("Упаковка", ТекущиеДанные.Упаковка);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Номенклатура", ТекущиеДанные.Номенклатура);
	Запрос.УстановитьПараметр("Количество", ТекущиеДанные.Количество);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		
		Если ЗначениеЗаполнено(ТекущиеДанные.Упаковка) Тогда 
			Выборка.Следующий();								// единственное сочетание Н-У
		Иначе
			Если Выборка.Количество() > 1 Тогда                // если найдена не одна запись
				
				// заполним данными текущую строку
				Выборка.Следующий();
				ЗаполнитьЗначенияСвойств(ТекущиеДанные, Выборка);
 				
				// добавим и заполним остальные
				Пока Выборка.Следующий() Цикл
					НоваяСтрока = Товары.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				КонецЦикла;
			Иначе
				Выборка.Следующий();
				ЗаполнитьЗначенияСвойств(ТекущиеДанные, Выборка);
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		// если ничего не найдено, сносим инфу по упаковке
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПодробноПоТовару(ТекущиеДанные.Номенклатура));
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПодробноПоУпаковке());
	КонецЕсли;
	
КонецПроцедуры

// РЕАЛИЗАЦИЯ ПОДБОРА

// дополнительно
 
&НаСервере
Функция ПоместитьТоварыВХранилищеДляПодбора() Экспорт
		        
	ВыгружаемыеПоля = "Номенклатура, Количество, ЗаказПоставщику";
	АдресТоваровВРегистре = Подбор.ПоместитьТоварыВРегистрДляПодбора(Объект.Товары, ВыгружаемыеПоля);
	Возврат АдресТоваровВРегистре;
	
КонецФункции

&НаСервере
Процедура ИзменениеКоличестваПриПодборе(Адрес, ИсходныеДанные)
	                	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(ИсходныеДанные);

	Запрос = Новый Запрос(" ВЫБРАТЬ 
							|	Количество 
							|ИЗ 
							|	РегистрСведений.ТоварыВДокументеДляПодбора 
							|ГДЕ 
							|	АдресХранилища 	= """ + Адрес + """ И
							|	Номенклатура 	= &Номенклатура
							|	И ЗаказПоставщику = &ЗаказПоставщику
							|");
					
	Запрос.УстановитьПараметр("ЗаказПоставщику", ТекущиеДанные.ЗаказПоставщику);
	Запрос.УстановитьПараметр("Номенклатура", ТекущиеДанные.Номенклатура);
	
	РезультатЗапроса = Запрос.Выполнить();
	ЕстьЗапись = Не РезультатЗапроса.Пустой();
	
	Если ЕстьЗапись Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ВременнаяТаблица.ИзменитьКоличествоНоменклатуры(Адрес, Новый Структура("Номенклатура, Количество, ЗаказПоставщику", ТекущиеДанные.Номенклатура, ТекущиеДанные.Количество - Выборка.Количество, ТекущиеДанные.ЗаказПоставщику));
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Функция ЗаполнитьСтрокамиИзВыбранногоЗаказа(Заказ, Количество, АдресТоваровВХранилище, СтруктураКолонокТовары, ПодбиратьБезКоличества)
	
	Запрос = Новый Запрос("	ВЫБРАТЬ
							|	Рег.Номенклатура,
							|	&Заказ ЗаказПоставщику,
							|	ВЫБОР КОГДА &Количество = 0 ТОГДА
							|		Рег.КоличествоОстаток - ЕСТЬNULL(ТовДок.Количество,0)
							|	ИНАЧЕ
							|		ВЫБОР КОГДА &Количество < Рег.КоличествоОстаток - ЕСТЬNULL(ТовДок.Количество,0) ТОГДА 
							|			&Количество
							|		ИНАЧЕ
							|			Рег.КоличествоОстаток - ЕСТЬNULL(ТовДок.Количество,0)
							|		КОНЕЦ
							|	КОНЕЦ Количество
							|ИЗ
							|	РегистрНакопления.ЗаказыПоставщикам.Остатки(, ЗаказПоставщику = &Заказ) Рег
							|	ЛЕВОЕ СОЕДИНЕНИЕ
							|(	ВЫБРАТЬ
							|		Номенклатура,
							|		Количество
							|	ИЗ
							|		РегистрСведений.ТоварыВДокументеДляПодбора
							|	ГДЕ
							|		АдресХранилища = &АдресВХранилище
							|) КАК ТовДок
							|ПО
							|		Рег.Номенклатура = ТовДок.Номенклатура
							|ГДЕ
							|		(&ПодбиратьБезКоличества = ИСТИНА И ТовДок.Номенклатура ЕСТЬ NULL) 
							|	ИЛИ
							|		(ЕСТЬNULL(Рег.КоличествоОстаток, 0) - ЕСТЬNULL(ТовДок.Количество, 0) > 0) 
							|");
							
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Запрос.УстановитьПараметр("Количество", Количество);
	Запрос.УстановитьПараметр("АдресВХранилище",	 		АдресТоваровВХранилище);
	Запрос.УстановитьПараметр("ПодбиратьБезКоличества", 	ПодбиратьБезКоличества);
	
	Рез = Запрос.Выполнить();
	Если НЕ Рез.Пустой() Тогда
		Выборка = Рез.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ДобавитьВыбранноеЗначение(Выборка, АдресТоваровВХранилище, СтруктураКолонокТовары);
			
		КонецЦикла;

	КонецЕсли;
	
КонецФункции
&НаСервере
Процедура ДобавитьВыбранноеЗначение(ИсходныеДанные, Адрес, СтруктураКолонокТовары)
	
	ИзменитьТоварыВоВременномХранилище(Адрес, ИсходныеДанные);
	
	Строки = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура, ЗаказПоставщику", ИсходныеДанные.Номенклатура, ИсходныеДанные.ЗаказПоставщику));
	
	Если Строки.Количество() Тогда
		Строка = Строки[0];
		ТекущееКоличество = Строка.Количество;
		
		ЗаполнитьЗначенияСвойств(Строка, ИсходныеДанные);
		Строка.Количество = Строка.Количество + ТекущееКоличество;
		
		ПересчитатьКоличества("Количество", Строка);
	Иначе          
		Если ИсходныеДанные.Количество > 0 Тогда
			Строка = Объект.Товары.Добавить();
			
			ЗаполнитьЗначенияСвойств(Строка, ИсходныеДанные);
			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура ОбработкаВыбранногоЗначения(ИсходныеДанные, ПеремещатьВсеКоличество)
	
	// ИсходныеДанные - Структура 
	
	Количество = ?(ПеремещатьВсеКоличество, 0, 1);
    Цена = 0;
	Если ИсходныеДанные.ЗапрашиватьКоличество ИЛИ ИсходныеДанные.ЗапрашиватьЦену Тогда
						   
		//Если Не ВвестиЧисло(Количество, "Количество:") Тогда
		//	Возврат;
		//КонецЕсли;
		
		Результат = ОткрытьФормуМодально("Документ.Инвойс.Форма.ФормаВводаКоличестваЦены", Новый Структура("Количество, Цена", ИсходныеДанные.ЗапрашиватьКоличество, ИсходныеДанные.ЗапрашиватьЦену));
		Количество = Результат.Количество;
		Цена = Результат.Цена;
		
	КонецЕсли;
	
	Значение = ИсходныеДанные.Строка;
	
	Если ТипЗнч(Значение) = Тип("Структура") Тогда	
	                          
		Номенклатура 		= Значение.Номенклатура;
		СвободныйОстаток	= Значение.СвободныйОстаток;
		Группа				= Значение.ЗаказПоставщику;
		
		Если НЕ Цена Тогда
			Цена = Значение.Цена;
		КонецЕсли;
		
		Если Количество > СвободныйОстаток Тогда
			Количество = СвободныйОстаток;
		КонецЕсли;
		
		ПеремещаемыеДанные = Новый Структура("Номенклатура, ЗаказПоставщику, Количество, Цена", Номенклатура, ?(ЗначениеЗаполнено(Группа), Группа, Неопределено), ?(Количество = 0, Значение.СвободныйОстаток, Количество), Цена);
		
		ДобавитьВыбранноеЗначение(ПеремещаемыеДанные, АдресТоваровВРегистре, СтруктураКолонокТовары);
				
	КонецЕсли;
			
	
	Если ТипЗнч(Значение) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		
		ЗаполнитьСтрокамиИзВыбранногоЗаказа(Значение.Ключ, Количество, АдресТоваровВРегистре, СтруктураКолонокТовары, ИсходныеДанные.ЗапрашиватьКоличество);
				
	КонецЕсли;
	
КонецПроцедуры

&НаСервере                           
Функция ИзменитьТоварыВоВременномХранилище(АдресТоваровВХранилище, Строка)
	
	стрОшибки = "";
	Если ВременнаяТаблица.ИзменитьКоличествоНоменклатуры(АдресТоваровВХранилище, Строка, стрОшибки) Тогда
		
		Возврат Истина;
		
	Иначе
		
		ОбщиеФункции.СообщитьТекст(стрОшибки);
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции


// команда

&НаКлиенте
Процедура Подбор(Команда)
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидЗапроса", "ОстаткиПоЗаказамПоставщику");
	ПараметрыФормы.Вставить("Партнер", Объект.Партнер); 	
	ПараметрыФормы.Вставить("Склад", Объект.Склад);
	ПараметрыФормы.Вставить("ТипЦен", Объект.ТипЦен);
	
	Подбор.Подбор(ЭтаФорма, Элементы.ИТовары, ПараметрыФормы);

КонецПроцедуры

// обработки табличной части

&НаКлиенте
Процедура ТоварыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		//ДобавитьВыбранноеЗначение(Новый Структура("Номенклатура, Количество", ВыбранноеЗначение, 1));
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда 
		
		ОбработкаВыбранногоЗначения(ВыбранноеЗначение, Ложь); // при даблклик добавляем по-одному (по-умолчанию)
		
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;	
	
	Значение = ПараметрыПеретаскивания.Значение;
	
	Если ТипЗнч(Значение) = Тип("Массив") Тогда
		Для Каждого Строка Из Значение Цикл // Строка - структура
			ОбработкаВыбранногоЗначения(Строка, Истина); // при перетаскивании добавляем всё количество (по-умолчанию)	
		КонецЦикла
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
    
    Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Структура") Тогда
       
        ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование;
        
    Иначе
        
        ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
        
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	Если ФормаПодбора <> Неопределено И ФормаПодбора.Открыта() Тогда
		ФормаПодбора.Закрыть();
	КонецЕсли;
КонецПроцедуры




