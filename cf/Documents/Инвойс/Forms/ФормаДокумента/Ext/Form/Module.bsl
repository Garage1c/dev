
&НаКлиенте
Перем ВыбДанные;
&НаКлиенте
Перем СтруктураКолонокТовары Экспорт; 

&НаКлиенте
Перем ПодборБезКоличества, ФормаПодбора;

// ИЗВЛЕЧЕНИЕ данных

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.ГруппаТовары.ТекущаяСтраница = Элементы.ГруппаИнвойс;
	УправлениеВидимостью();
	
	СтруктураКолонокТовары = ФункцииФормДокументов.ПолучитьСтруктуруКолонокТовары(Элементы.ИТовары, Объект.СуммаВключаетНДС, Объект.ТипЦен, "И",,,Объект.УчитыватьНДС);
	ФункцииФормДокументов.ОбновитьПодвал(Объект, Элементы, Сумма, СтруктураКолонокТовары);

	//СуммаВсего = Объект[ИмяТаблицы].Итог("Сумма");
	
	// Автосохранение
	
	Если Не ТолькоПросмотр Тогда 
		Если АвтосохранениеКлиент.ИницилизироватьСохранение(ЭтаФорма) Тогда
			
			ДанныеДляПодбора = "";
			ЗагрузитьДанныеАвтосохранения(ДанныеДляПодбора); 
			Модифицированность = Истина; 
			
			Если Не ПустаяСтрока(ДанныеДляПодбора) Тогда ПодборВыполнить(,Новый Структура("МассивТоваровСтрокой", ДанныеДляПодбора)) КонецЕсли; КонецЕсли; КонецЕсли;


	
КонецПроцедуры
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Объект.Ссылка.Пустая() Тогда
		
		ФункцииФормДокументов.ЗаполнитьЗначенияПоУмолчанию(
					Объект,
					КэшируемыеФункции.ПолучитьРеквизитыДокумента("Инвойс")
					);
		
	КонецЕсли;		
	
	ФункцииФормДокументов.РассчитатьДинамическиеКолонки(
					Объект.Товары,
					ФункцииФормДокументов.ПолучитьСтруктуруКолонокТовары(Элементы.ИТовары, Объект.СуммаВключаетНДС, Объект.ТипЦен));
					
	ЗагрузитьТаблицуТовары();				
	
КонецПроцедуры
&НаКлиенте
Процедура Заполнить(Команда)
	
	Ответ = Вопрос("Заполненные ранее данные будут потеряны, заполнить пакинг?", РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
	    Возврат;
	КонецЕсли; 

	ЗаполнитьТаблицуТовары();
	
КонецПроцедуры

// выгружает данные из табличной части <ТоварыПакинг> в таблицу <Товары> на форме
//
&НаСервере
Процедура ЗагрузитьТаблицуТовары()
	
	Запрос = Новый Запрос();
	
	Запрос.Текст =	"	ВЫБРАТЬ
					|			МАКСИМУМ(Номенклатура.Артикул)			Артикул,
					|			Номенклатура,
					|			МАКСИМУМ(Цена)                          Цена,
					|			МАКСИМУМ(Номенклатура.Наименование)		Наименование,
					|			МАКСИМУМ(НоменклатураДляТаможни),
					|			МАКСИМУМ(Количество),	
					|			МАКСИМУМ(Упаковка), 
					|			МАКСИМУМ(КоличествоВУпаковке),
					|		   	МАКСИМУМ(КоличествоМест), "
					+ ?(Объект.РасчетВеса = Перечисления.ВидыРасчетаВеса.ПоУпаковкам,
							"	МАКСИМУМ(ВесНетто)             			ВесНеттоУпаковка,
							|	МАКСИМУМ(ВесБрутто)           			ВесБруттоУпаковка,
  							|	МАКСИМУМ(ВесНетто*КоличествоМест)  		ВесНеттоИтогУпаковка,																			
							|	МАКСИМУМ(ВесБрутто*КоличествоМест)  	ВесБруттоИтогУпаковка, 	",
							"	МАКСИМУМ(ВесНетто)               		ВесНеттоТовар,
							|	МАКСИМУМ(ВесБрутто)               		ВесБруттоТовар,
							|	МАКСИМУМ(ВесНетто*Количество)       	ВесНеттоИтогТовар,
							|	МАКСИМУМ(ВесБрутто*Количество)     	 	ВесБруттоИтогТовар, 	") +
					"			ЛОЖЬ Исключение
					|		ПОМЕСТИТЬ Пакинг
					|	ИЗ                            	
					|		Документ.Инвойс.ТоварыПакинг
					|		ГДЕ
					|			Ссылка = &Ссылка
					|		СГРУППИРОВАТЬ ПО Номенклатура
					|		ИМЕЮЩИЕ
					|			КОЛИЧЕСТВО(Упаковка) < 2
					|	;
					|		ВЫБРАТЬ * ИЗ Пакинг
					|		ОБЪЕДИНИТЬ ВСЕ
					|		
					|		  ВЫБРАТЬ
					|			Док.Номенклатура.Артикул			Артикул,
					|			Док.Номенклатура,
					|			Док.Цена,
					|			Док.Номенклатура.Наименование		Наименование,
					|			Док.НоменклатураДляТаможни,
					|			Док.Количество,	
					|			Док.Упаковка, 
					|			Док.КоличествоВУпаковке,
					|		   	Док.КоличествоМест, "
					+ ?(Объект.РасчетВеса = Перечисления.ВидыРасчетаВеса.ПоУпаковкам,
							"	Док.ВесНетто              			ВесНеттоУпаковка,
							|	Док.ВесБрутто              			ВесБруттоУпаковка,
							|	Док.ВесНетто*Док.КоличествоМест  	ВесНеттоИтогУпаковка,																			
							|  	Док.ВесБрутто*Док.КоличествоМест  	ВесБруттоИтогУпаковка, ",
							"  	Док.ВесНетто                  		ВесНеттоТовар,
							|	Док.ВесБрутто    					ВесБруттоТовар,
							|	Док.ВесНетто*Док.Количество       	ВесНеттоИтогТовар,
							|	Док.ВесБрутто*Док.Количество     	ВесБруттоИтогТовар, ") +
					"			ИСТИНА Исключение
					|	ИЗ                            	
					|		Документ.Инвойс.ТоварыПакинг Док
					|		ЛЕВОЕ СОЕДИНЕНИЕ
					|			Пакинг	Пак
					|		ПО Пак.Номенклатура = Док.Номенклатура
					|		
					|		ГДЕ	Ссылка = &Ссылка И Пак.Номенклатура ЕСТЬ NULL
					|	УПОРЯДОЧИТЬ ПО Наименование	
					|";	
						
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);						
	Пакет = Запрос.ВыполнитьПакет();

	Если НЕ Пакет[1].Пустой() Тогда
		Товары.Загрузить(Пакет[1].Выгрузить());
	КонецЕсли;
	
КонецПроцедуры

// заполняет таблицу <Товары> на форме, на основании данных из табличной части Инвойса <Товары>
// 		- в табличную часть попадаю все возможные сочетания номенклатура - упаковка
&НаСервере
Процедура ЗаполнитьТаблицуТовары()
	
	Запрос = Новый Запрос("	ВЫБРАТЬ РАЗРЕШЕННЫЕ
							|	Выб.Номенклатура.Артикул КАК Артикул,
							|	Выб.Номенклатура КАК Номенклатура,
							|	Выб.Цена КАК Цена,
							|	Выб.ЗаказПоставщику КАК ЗаказПоставщику,
							|	Выб.Количество КАК Количество,
							|	Выб.НоменклатураДляТаможни КАК НоменклатураДляТаможни,
							|	Выб.Упаковка КАК Упаковка, 
							|	Выб.Упаковка.Коэффициент КАК КоличествоВУпаковке,
							|	Выб.Упаковка.ВесНетто КАК ВесНеттоУпаковка,
							|	Выб.Упаковка.ВесБрутто КАК ВесБруттоУпаковка,
							|	Выб.Номенклатура.Вес КАК ВесБруттоТовар,
							|	Выб.Номенклатура.ВесНетто КАК ВесНеттоТовар,
							|	ЛОЖЬ КАК Исключение,
							|	Выб.Количество / ЕСТЬNULL(Выб.Упаковка.Коэффициент, 1) КАК КоличествоМест,
							|	Выб.Упаковка.ВесНетто * (Выб.Количество / ЕСТЬNULL(Выб.Упаковка.Коэффициент, 1)) КАК ВесНеттоИтогУпаковка,
							|	Выб.Упаковка.ВесБрутто * (Выб.Количество / ЕСТЬNULL(Выб.Упаковка.Коэффициент, 1)) КАК ВесБруттоИтогУпаковка,
							|	Выб.Номенклатура.Вес * Выб.Количество КАК ВесНеттоИтогТовар
							|ПОМЕСТИТЬ Пакинг
							|ИЗ
							|	(ВЫБРАТЬ
							|		Док.Номенклатура КАК Номенклатура,
							|		Док.ЗаказПоставщику КАК ЗаказПоставщику,
							|		МАКСИМУМ(Док.Цена) КАК Цена,
							|		МАКСИМУМ(Док.Количество) КАК Количество,
							|		МАКСИМУМ(Рег.НоменклатураДляТаможни) КАК НоменклатураДляТаможни,
							|		МАКСИМУМ(Рег.Упаковка) КАК Упаковка
							|	ИЗ
							|		Документ.Инвойс.Товары КАК Док
							|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураДляТаможни КАК Рег
							|			ПО (Рег.Номенклатура = Док.Номенклатура)
							|	ГДЕ
							|		Док.Ссылка = &ссылка
							|	
							|	СГРУППИРОВАТЬ ПО
							|		Док.ЗаказПоставщику,
							|		Док.Номенклатура
							|	
							|	ИМЕЮЩИЕ
							|		КОЛИЧЕСТВО(Рег.Упаковка) < 2) КАК Выб  // в выборку попадут товары, для которых существует лишь одна упаковка или не существует совсем
							|;
							|
							|  ВЫБРАТЬ * ИЗ Пакинг
							|
							|	ОБЪЕДИНИТЬ ВСЕ	
							|
							|	ВЫБРАТЬ
							|		Док.Номенклатура.Артикул		Артикул,
							|		Док.Номенклатура				Номенклатура,
							|		Док.Цена						Цена,
							|		Док.ЗаказПоставщику				ЗаказПоставщику,							
							|		Док.Количество					Количество,
							|		рег.НоменклатураДляТаможни		НоменклатураДляТаможни,
							|		рег.Упаковка					Упаковка,
							|		рег.Упаковка.Коэффициент		КоличествоВУпаковке,
							|		рег.Упаковка.ВесНетто			ВесНеттоУпаковка,
							|		рег.Упаковка.ВесБрутто			ВесБруттоУпаковка,
							|		док.Номенклатура.Вес			ВесБруттоТовар,
							|		док.Номенклатура.ВесНетто		ВесНеттоТовар,
							|       ИСТИНА							Исключение,
							|   	док.Количество/ЕСТЬNULL(рег.Упаковка.Коэффициент,1) КоличествоМест, 							
							//| 0 КоличествоМест,			
							|		рег.Упаковка.ВесНетто*(док.Количество/ЕСТЬNULL(рег.Упаковка.Коэффициент,1)) ВесНеттоИтогУпаковка,   	
							//| 0 ВесНеттоИтогУпаковка,																			
							|   	рег.Упаковка.ВесБрутто*(док.Количество/ЕСТЬNULL(рег.Упаковка.Коэффициент,1)) ВесБруттоИтогУпаковка,  	
							//|0 ВесБруттоИтогУпаковка,
							|   	док.Номенклатура.Вес * док.Количество                             	ВесНеттоИтогТовар
							|									//|		ИСТИНА							Автозаполнение
							|	ИЗ
							|		Документ.Инвойс.Товары Док
							| 		ЛЕВОЕ СОЕДИНЕНИЕ
							|			РегистрСведений.НоменклатураДляТаможни Рег
							|		ПО
							|			Рег.Номенклатура = Док.Номенклатура // И Док.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
							//|			ИЛИ
							//|			Док.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) И Рег.Номенклатура = Док.Номенклатура И Рег.Упаковка = Док.Упаковка
							|		ЛЕВОЕ СОЕДИНЕНИЕ
							| 			Пакинг Пак
							| 		ПО Док.Номенклатура = Пак.Номенклатура 
							|	ГДЕ 
							|		Док.Ссылка = &Ссылка И Пак.Номенклатура ЕСТЬ NULL // в выборку попадут записи, которых нет в предыдущем пакете
							|");
							
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);						
	Пакет 	= Запрос.ВыполнитьПакет();
	Товары.Очистить();
	Товары.Загрузить(Пакет[1].Выгрузить());
	
КонецПроцедуры

#Область Сортировка_Артикула

&НаСервере
Процедура СортироватьАртикул(ИмяТабл, Направление, СоздаватьКолонку = Истина)
	
	текТаблица = Вычислить(ИмяТабл);
	врТЗ = текТаблица.Выгрузить();
	Если СоздаватьКолонку Тогда врТЗ.Колонки.Добавить("Артикул", Новый ОписаниеТипов("Строка")) КонецЕсли;
	КонвертацияТипов.ВыполнитьВыражениеВКаждойСтрокеТаблицы(врТЗ, "Строка.Артикул = Строка.Номенклатура.Артикул");
	врТЗ.Сортировать("Артикул" + Направление);
	
	текТаблица.Загрузить(врТЗ);
	
КонецПроцедуры
&НаКлиенте
Процедура СортироватьАртикулПоВозрастанию(Команда)
	
	СортироватьАртикул("Объект.Товары", " Возр")
	
КонецПроцедуры
&НаКлиенте
Процедура СортироватьАртикулПоУбыванию(Команда)
	
	СортироватьАртикул("Объект.Товары", " Убыв")
	
КонецПроцедуры
&НаКлиенте
Процедура СортироватьАртикулПоВозрастанию2(Команда)
	
	СортироватьАртикул("Товары", " Возр", Ложь)
	
КонецПроцедуры
&НаКлиенте
Процедура СортироватьАртикулПоУбыванию2(Команда)
	
	СортироватьАртикул("Товары", " Убыв", Ложь)
	
КонецПроцедуры

#КонецОбласти

#Область Автосохранение

&НаСервере
Процедура ЗагрузитьДанныеАвтосохранения(ДанныеДляПодбора)
	
	АвтосохранениеСервер.СчитатьДанныеФормыИУдалитьСохранение(ЭтаФорма, ДанныеДляПодбора)
	
КонецПроцедуры
&НаСервере
Функция АвтосохранениеСервер(ЕстьДамп)
	
	Возврат АвтосохранениеСервер.СохранитьДампФормы(ЭтаФорма, ЕстьДамп);
	
КонецФункции
&НаКлиенте
Процедура Автосохранение()
	
	Перем ЕстьДамп;
	
	Сохранилось = АвтосохранениеСервер(ЕстьДамп);
	
	АвтосохранениеКлиент.ПроизошлоАвтосохранение(Сохранилось, ЕстьДамп, Объект.Ссылка);
	
КонецПроцедуры
&НаСервере
Функция ПолучитьДамп()
	
	Возврат АвтосохранениеСервер.ПолучитьДамп(ЭтаФорма);

КонецФункции
	
#КонецОбласти

// СОХРАНЕНИЕ данных

&НаСервере
Функция ПроверкаУникальностиНомера(ТекущийОбъект)
	
	Запрос = Новый Запрос("ВЫБРАТЬ ИСТИНА ИЗ Документ.Инвойс ГДЕ НЕ ПометкаУдаления И ВходящийНомер = &Номер И НАЧАЛОПЕРИОДА(Дата, ДЕНЬ) = &Дата И Партнер = &Партнер И Ссылка <> &Ссылка");
	Запрос.УстановитьПараметр("Номер", 		ТекущийОбъект.ВходящийНомер);
	Запрос.УстановитьПараметр("Дата", 		НачалоДня(ТекущийОбъект.Дата));
	Запрос.УстановитьПараметр("Партнер", 	ТекущийОбъект.Партнер);
	Запрос.УстановитьПараметр("Ссылка", 	ТекущийОбъект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат НЕ Выборка.Следующий();
	
КонецФункции

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ ПустаяСтрока(ТекущийОбъект.ВходящийНомер) И НЕ ПроверкаУникальностиНомера(ТекущийОбъект) Тогда
		ОбщиеФункции.СообщитьТекст("Поле ""Входящий номер"" не уникально", "Объект.ВходящийНомер", Объект);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СохранитьТаблицуТовары(ТекущийОбъект, Отказ);
	
	// Автосохранение
	Если Не Отказ И Объект.Ссылка.Пустая() Тогда АвтосохранениеСервер.УдалитьАвтоСохранение(ИмяФормы, Объект.Ссылка) КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СохранитьТаблицуТовары(ТекущийОбъект, Отказ);
	
	// проверка заполнения данных в инвойсе
	
	Строки = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", Справочники.Номенклатура.ПустаяСсылка()));
	Если Строки.Количество() > 0 Тогда
		НомерСтроки = Объект.Товары.Индекс(Строки[0]);
		ОбщиеФункции.СообщитьТекст("Не заполнено поле", "Объект.Товары[" + НомерСтроки + "].Номенклатура", Объект.Товары);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	//Строки = Объект.Товары.НайтиСтроки(Новый Структура("ЗаказПоставщику", Документы.ЗаказПоставщику.ПустаяСсылка()));
	//Если Строки.Количество() > 0 Тогда
	//	НомерСтроки = Объект.Товары.Индекс(Строки[0]);
	//	ОбщиеФункции.СообщитьТекст("Не заполнено поле", "Объект.Товары[" + НомерСтроки + "].ЗаказПоставщику", Объект.Товары);
	//	Отказ = Истина;
	//	Возврат;
	//КонецЕсли;
	
	Строки = Объект.Товары.НайтиСтроки(Новый Структура("Количество", 0));
	Если Строки.Количество() > 0 Тогда
		НомерСтроки = Объект.Товары.Индекс(Строки[0]);
		ОбщиеФункции.СообщитьТекст("Не заполнено поле", "Объект.Товары[" + НомерСтроки + "].Количество", Объект.Товары);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// сохранить пакинг
	
	Таблица = ТекущийОбъект.ТоварыПакинг;
	РасчетВеса = ТекущийОбъект.РасчетВеса;
	
	Таблица.Очистить();
	//ТекущийОбъект.ТоварыПакинг.Загрузить(Товары.Выгрузить());
	Для Каждого Строка Из Товары Цикл
		НоваяСтрока = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
		НоваяСтрока.ВесНетто = ?(РасчетВеса = Перечисления.ВидыРасчетаВеса.ПоУпаковкам, Строка.ВесНеттоУпаковка, Строка.ВесНеттоТовар);
		НоваяСтрока.ВесБрутто = ?(РасчетВеса = Перечисления.ВидыРасчетаВеса.ПоУпаковкам, Строка.ВесБруттоУпаковка, Строка.ВесБруттоТовар);
	КонецЦикла;
	
	// вообщем в ТЧ пакинг записывается как есть + пытаемся сохранить веса по упаковке и веса для товара, если введены
	СохранитьДанныеПоВесам();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеПоВесам()
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос("	ВЫБРАТЬ
							|	Товары.Упаковка,
							|   Товары.ВесНеттоУпаковка		ВесНетто,
							|	Товары.ВесБруттоУпаковка    ВесБрутто,
							|	Товары.ВесНеттоТовар		ВесНеттоТовар,
							|   Товары.ВесБруттоТовар		ВесБруттоТовар,
							|	Товары.Номенклатура,
							|	Товары.КоличествоВУпаковке	Коэффициент
							|ПОМЕСТИТЬ
							|	ТоварыДокумента
							|ИЗ
							|	&ВыбТаблица КАК Товары
							|ГДЕ
							|	Товары.ВесНеттоУпаковка <> 0 ИЛИ
							|	Товары.ВесБруттоУпаковка <> 0");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	                                     
	Запрос.УстановитьПараметр("ВыбТаблица", Товары.Выгрузить());
	Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ
					|	Спр.Ссылка,
					|	Табл.Коэффициент,
					|	Табл.Номенклатура 	Владелец,
					|	Табл.ВесНетто,
					|	Табл.ВесБрутто
					|ИЗ
					|	ТоварыДокумента Табл
					|	ЛЕВОЕ СОЕДИНЕНИЕ
					|		Справочник.УпаковкиНоменклатуры Спр
					|	ПО Табл.Упаковка = Спр.Ссылка
					|ГДЕ
					|	Спр.ВесНетто <> Табл.ВесНетто
					|	ИЛИ Спр.ВесБрутто <> Табл.ВесБрутто
					|;
					|ВЫБРАТЬ
					|	Ном.Ссылка,
					|	Табл.ВесНеттоТовар 	ВесНетто,
					|	Табл.ВесБруттоТовар	Вес
					|ИЗ
					|	ТоварыДокумента Табл
					|	ЛЕВОЕ СОЕДИНЕНИЕ
					|		Справочник.Номенклатура Ном
					|	ПО
					|		Табл.Номенклатура = Ном.Ссылка
					|ГДЕ
					|	Ном.Вес <> Табл.ВесБруттоТовар
					|	ИЛИ Ном.ВесНетто <> Табл.ВесНеттоТовар
					|";
					
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);						
	Пакет 	= Запрос.ВыполнитьПакет();

	// вносим изменения по упаковкам
	
	Если НЕ Пакет[0].Пустой() Тогда
		Выборка = Пакет[0].Выбрать();
		Пока Выборка.Следующий() Цикл
			
				Упаковка = Выборка.Ссылка.ПолучитьОбъект();
				ЗаполнитьЗначенияСвойств(Упаковка, Выборка, , "Ссылка");
				Попытка
					Упаковка.Записать();
				Исключение
					Сообщить("Ошибка при записи упаковки номенклатуры: " + ОписаниеОшибки());
				КонецПопытки;
			
		КонецЦикла;
	КонецЕсли;	
	
	// вносим изменения по товарам
	
	//Если НЕ Пакет[1].Пустой() Тогда
	//	Выборка = Пакет[1].Выбрать();
	//	Пока Выборка.Следующий() Цикл
	//		
	//			Товар = Выборка.Ссылка.ПолучитьОбъект();
	//			ЗаполнитьЗначенияСвойств(Товар, Выборка, , "Ссылка");
	//			Попытка
	//				Товар.Записать();
	//			Исключение
	//				Сообщить("Ошибка при записи номенклатуры: " + ОписаниеОшибки());
	//			КонецПопытки;
	//		
	//	КонецЦикла;
	//КонецЕсли;		
													
КонецПроцедуры	
  
// ДОПОЛНИТЕЛЬНЫЙ ФУНКЦИОНАЛ

// . . . . . . . . . | оформление

&НаКлиенте
Процедура РасчетВесаПриИзменении(Элемент)
	УправлениеВидимостьюВидДокумента();
КонецПроцедуры
&НаКлиенте
Процедура УправлениеВидимостью()
	
	Инвойс = Элементы.ГруппаТовары.ТекущаяСтраница.Заголовок = "PAKCING LIST";
	
	// сделаем видимыми/невидимыми колонки пакинг-листа
	
	Элементы.НоменклатураДляТаможни.Видимость = НЕ Инвойс;
	УправлениеВидимостьюВидДокумента(НЕ Инвойс);
	
КонецПроцедуры
&НаКлиенте
Процедура УправлениеВидимостьюВидДокумента(СделатьВидимым = Истина)
	
	РасчетВеса = ?(ЗначениеЗаполнено(Объект.РасчетВеса), ПолучитьРасчетВеса(Объект.РасчетВеса), Ложь); // по-умолчанию видимость по упаковкам	
                           
	Элементы.ВесТовар.Видимость 		= РасчетВеса И СделатьВидимым;
	//Элементы.КоличествоМест.Видимость	= РасчетВеса И СделатьВидимым;
		
	Элементы.ВесУпаковка.Видимость 			= НЕ РасчетВеса И СделатьВидимым;
	Элементы.КоличествоВУпаковке.Видимость	= НЕ РасчетВеса И СделатьВидимым;
	
КонецПроцедуры                              

// . . . . . . . . . | при интерактивном изменении числовых даннных

&НаКлиенте
Процедура ИКоличествоПриИзменении(Элемент)
	
	ФункцииФормДокументов.КоличествоПриИзменении(Элементы.ИТовары, СтруктураКолонокТовары);
	
КонецПроцедуры

&НаКлиенте
 Процедура ИНоменклатураПриИзменении(Элемент)
	 
	ФункцииФормДокументов.НоменклатураПриИзменении(
			Элементы.ИТовары, 
			СтруктураКолонокТовары,,,, Истина);
			
КонецПроцедуры
&НаКлиенте
Процедура ИУпаковкаПриИзменении(Элемент)
	ФункцииФормДокументов.УпаковкаПриИзменении(
			Элементы.ИТовары, 
			СтруктураКолонокТовары);
КонецПроцедуры

&НаКлиенте
Процедура ИСтавкаНДСПриИзменении(Элемент)
	ФункцииФормДокументов.СтавкаНДСПриИзменении(
			Элементы.ИТовары, 
			СтруктураКолонокТовары);

КонецПроцедуры


&НаКлиенте
Процедура КоличествоПриИзменении(Элемент)
	
	ПриИзмененииКоличества(Элемент)
	
КонецПроцедуры
&НаКлиенте
Процедура ПриИзмененииКоличества(Элемент)

	ПересчитатьКоличества(Элемент.Имя, Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор());
	
	Если ФормаПодбора <> Неопределено И ФормаПодбора.Открыта() Тогда
		
		ИзменениеКоличестваПриПодборе(АдресТоваровВРегистре, Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор());
		ФормаПодбора.Элементы.Список.Обновить();

	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ЦенаПриИзменении(Элемент)
	
	ФункцииФормДокументов.ЦенаПриИзменении(Элементы.ИТовары, СтруктураКолонокТовары);

КонецПроцедуры
&НаКлиенте
Процедура СуммаПриИзменении(Элемент)
	
	ФункцииФормДокументов.СуммаПриИзменении(Элементы.ИТовары, СтруктураКолонокТовары);

КонецПроцедуры
 &НаКлиенте
Процедура ВесПриИзменении(Элемент)
	
	ПересчитатьВеса("Вес", Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор());
		
КонецПроцедуры
&НаКлиенте
Процедура ВесИтогПриИзменении(Элемент)
	
	ПересчитатьВеса("ВесИтог", Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры
 
// . . . . . . . . .  . | пересчеты
                     
&НаСервере
Процедура ПересчитатьКоличества(Изменился, ИсходныеДанные);
	
	ТекущиеДанные = ПолучитьДанныеДляОбработки(ИсходныеДанные);
	
	Количество			= ТекущиеДанные.Количество;
	КоличествоВУпаковке	= ТекущиеДанные.КоличествоВУпаковке;
	КоличествоМест		= ТекущиеДанные.КоличествоМест;
	
	// если значения количества было удалено, удаляются все ранее заполненные количества и пересчитываем веса
	
	Если НЕ ЗначениеЗаполнено(Вычислить(Изменился)) Тогда
		 КоличествоМест = 0;
	     Количество 	= 0;
		 ПересчитатьВеса("Вес", ИсходныеДанные);
		 Возврат;
	КонецЕсли;
		 
	Если Изменился = "КоличествоВУпаковке" Тогда
		
		Если ЗначениеЗаполнено(Количество) Тогда
			КоличествоМест 	= Количество / КоличествоВУпаковке;
		ИначеЕсли ЗначениеЗаполнено(КоличествоМест) Тогда	
        	Количество	 	= КоличествоМест * КоличествоВУпаковке;
		КонецЕсли;
		
	ИначеЕсли  Изменился = "КоличествоМест" Тогда
		
		Количество = КоличествоМест * КоличествоВУпаковке;
		
	ИначеЕсли  Изменился = "Количество" Тогда	
		
		Если ЗначениеЗаполнено(КоличествоВУпаковке) Тогда
			КоличествоМест = Количество / КоличествоВУпаковке;
		КонецЕсли;
		
	КонецЕсли; 
	
	ТекущиеДанные.Количество 			= Количество;
	ТекущиеДанные.КоличествоВУпаковке 	= КоличествоВУпаковке;
	ТекущиеДанные.КоличествоМест 		= КоличествоМест;	
	
	ПересчитатьВеса("Вес", ТекущиеДанные);
	
КонецПроцедуры
&НаСервере
Процедура ПересчитатьВеса(Изменился, ИсходныеДанные) Экспорт
	
	ТекущиеДанные = ПолучитьДанныеДляОбработки(ИсходныеДанные);
	
	Если Изменился = "Вес" Тогда
	
		ТекущиеДанные.ВесНеттоИтогУпаковка  = ТекущиеДанные.ВесНеттоУпаковка*ТекущиеДанные.КоличествоМест;
		ТекущиеДанные.ВесБруттоИтогУпаковка = ТекущиеДанные.ВесБруттоУпаковка*ТекущиеДанные.КоличествоМест;
		
		ТекущиеДанные.ВесНеттоИтогТовар  = ТекущиеДанные.ВесНеттоТовар*ТекущиеДанные.Количество;
		ТекущиеДанные.ВесБруттоИтогТовар = ТекущиеДанные.ВесБруттоТовар*ТекущиеДанные.Количество;
		
	ИначеЕсли Изменился = "ВесИтог" Тогда
		
		Если ЗначениеЗаполнено(ТекущиеДанные.КоличествоМест) Тогда 
			ТекущиеДанные.ВесНеттоУпаковка 	= ТекущиеДанные.ВесНеттоИтогУпаковка/ТекущиеДанные.КоличествоМест;
       		ТекущиеДанные.ВесБруттоУпаковка = ТекущиеДанные.ВесБруттоИтогУпаковка/ТекущиеДанные.КоличествоМест;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущиеДанные.Количество) Тогда
			ТекущиеДанные.ВесНеттоТовар  = ТекущиеДанные.ВесНеттоИтогТовар/ТекущиеДанные.Количество;
			ТекущиеДанные.ВесБруттоТовар = ТекущиеДанные.ВесБруттоИтогТовар/ТекущиеДанные.Количество;
		КонецЕсли;
		
	КонецЕсли;	
 		
КонецПроцедуры

// . . . . . . . . . . | дополнительно
&НаСервере
Функция ПолучитьРасчетВеса(РасчетВеса)
	Возврат Перечисления.ВидыРасчетаВеса.Индекс(РасчетВеса);	
КонецФункции
&НаСервере
Функция СоздатьВыбранныйЭлемент(Текст, ИмяСправочника, СписокРеквизитов = "") Экспорт
	
	СписокРеквизитов = ?(ЗначениеЗаполнено(СписокРеквизитов), СписокРеквизитов, Новый Структура);	
	
	НовыйСправочник = Справочники[ИмяСправочника].СоздатьЭлемент();
	НовыйСправочник.Наименование = Текст;
	Для Каждого Реквизит Из СписокРеквизитов Цикл
		НовыйСправочник[Реквизит.Ключ] = Реквизит.Значение; 	
	КонецЦикла;
	
	Попытка
		НовыйСправочник.Записать();
	Исключение
		стрОшибки = ОписаниеОшибки();
		ОбщиеФункции.СообщитьТекст("Ошибка при создании нового справочника
										|" + стрОшибки);
		Возврат Неопределено
	КонецПопытки;
	
	Возврат НовыйСправочник.Ссылка;
	
КонецФункции
&НаСервере
Функция ПолучитьДанныеДляОбработки(ИсходныеДанные)
	
	// обрабатывает полученные данные с Клиента - идентификатор текущий строки дерева, с Сервера - ДанныеФормыЭлементДерева

	Возврат ?(ТипЗнч(ИсходныеДанные) = Тип("Число"), Товары.НайтиПоИдентификатору(ИсходныеДанные), ИсходныеДанные)
	
КонецФункции
&НаСервере
Функция ПодробноПоУпаковке(Упаковка = Неопределено)
	
	Если Упаковка = Неопределено Тогда
		Упаковка = Справочники.УпаковкиНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
	Ключ = "Упаковка, КоличествоВУпаковке, ВесНеттоУпаковка, ВесБруттоУпаковка";
    Возврат Новый Структура(Ключ, Упаковка, Упаковка.Коэффициент, Упаковка.ВесНетто, Упаковка.ВесБрутто);
	
КонецФункции
&НаСервере
Функция ПодробноПоТовару(ВыбранноеЗначение)
	Возврат Новый Структура("ВесНеттоТовар", ВыбранноеЗначение.Вес);
КонецФункции

// . . . . . . . . . . | организация быстрого ввода информации по упаковке

&НаКлиенте
Процедура КоличествоВУпаковкеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ПодборКоличестваУпаковок(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)

КонецПроцедуры
&НаКлиенте
Процедура ПодборКоличестваУпаковок(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	// проверка на ввод числовых данных
	Попытка 
		Коэффициент = Число(Текст);
	Исключение
		ПоказатьПредупреждение(,"Введите числовые данные",,"Предупреждение");
	    Возврат;
	КонецПопытки;
	
	// организация быстрого выбора упаковки
	
	СписокПодбора = ПолучитьСписокУпаковокПоТексту(Коэффициент, ТекущиеДанные.Номенклатура);
	
	//  . . . если вернулась конкретная ссылка на упаковку
	
	Если ТипЗнч(СписокПодбора) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, СписокПодбора);	
		Возврат;
	КонецЕсли;
	
	//  . . . если вернулся список возможных упаковок
	
	// делаем возможность создания новой упаковки по введенному значению или изменения текущего значения упаковки, если значение упаковки заполнено	
	Если ЗначениеЗаполнено(ТекущиеДанные.Упаковка) Тогда
		СписокПодбора.Вставить(0, Неопределено, "Изменить упаковку",, БиблиотекаКартинок.СоздатьЭлементСписка);
		СписокПодбора.Вставить(1, Неопределено, "Новая упаковка на " + Строка(Коэффициент) + " ед.",, БиблиотекаКартинок.СоздатьЭлементСписка);
	Иначе
		СписокПодбора.Вставить(0, Неопределено, "Новая упаковка на " + Строка(Коэффициент) + " ед.",, БиблиотекаКартинок.СоздатьЭлементСписка);
	КонецЕсли;
	
	// вызываем выпадающий список для выбора значения
	Выбор = ЭтаФорма.ВыбратьИзСписка(СписокПодбора, Элемент);
	
	// если не отказались от выбора значения из списка
	
	Если Выбор <> Неопределено Тогда  													
		Реквизиты = Новый Структура("Коэффициент, Владелец", Коэффициент, ТекущиеДанные.Номенклатура);
	
		Если Выбор.Значение = Неопределено Тогда // если было выбрано действие (изменение/создание новой упаковки)
			
			Если Выбор.Представление = "Изменить упаковку" Тогда
				ВыбраннаяУпаковка = ИзменитьУпаковку(Коэффициент, ТекущиеДанные.Упаковка);
			Иначе
				ВыбраннаяУпаковка = СоздатьВыбранныйЭлемент(ТекущиеДанные.Номенклатура, "УпаковкиНоменклатуры", Реквизиты);
				Состояние("Создана новая упаковка номенклатуры",,Строка(ТекущиеДанные.Номенклатура) + " " + Строка(Коэффициент) + " ед.", БиблиотекаКартинок.НоваяГруппа);
			КонецЕсли;
		Иначе
			 
			ВыбраннаяУпаковка = Выбор.Значение;
			
		КонецЕсли;	
			
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПодробноПоУпаковке(ВыбраннаяУпаковка));
		
		ПриИзмененииКоличества(Элемент);
				
	КонецЕсли;
	
КонецПроцедуры
&НаСервере
Функция ПолучитьСписокУпаковокПоТексту(Значение, Товар)
	
	//// ищем упаковку с указанным коэффициентом
	//
	//Запрос = Новый Запрос("ВЫБРАТЬ Ссылка ИЗ Справочник.УпаковкиНоменклатуры ГДЕ Владелец = &Ссылка И Коэффициент = &Количество И ПометкаУдаления = Ложь");
	//Запрос.УстановитьПараметр("Ссылка", Товар);
	//Запрос.УстановитьПараметр("Количество", Значение);
	//
	//Рез = Запрос.Выполнить();
	//Если НЕ Рез.Пустой() Тогда
	//	Выборка = Рез.Выбрать();
	//	Если Выборка.Количество() = 1 И Выборка.Следующий() Тогда
	//		
	//		Возврат ПодробноПоУпаковке(Выборка.Ссылка);
	//		
	//	КонецЕсли;
	//КонецЕсли;

	//// если упаковка с введенным коэфициентом не одна или ее не существует - выводим список всех доступных для данного товара упаковок (помеченные на удаления для выбора недоступны)

	Список = Новый СписокЗначений;
	
	Запрос = Новый Запрос("ВЫБРАТЬ ВесНетто, ВесБрутто, Коэффициент, Ссылка ИЗ Справочник.УпаковкиНоменклатуры ГДЕ Владелец = &Ссылка И ПометкаУдаления = Ложь");
	Запрос.УстановитьПараметр("Ссылка", Товар);
	
	Рез = Запрос.Выполнить();
	
	Если НЕ Рез.Пустой() Тогда
		Выборка = Рез.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Список.Добавить(Выборка.Ссылка, Строка(Выборка.Коэффициент) + " шт" + " - " + ?(Выборка.ВесНетто - Цел(Выборка.ВесНетто) = 0, Строка(Цел(Выборка.ВесНетто)) + ",0", Строка(Выборка.ВесНетто)) + "/" + ?(Выборка.ВесБрутто - Цел(Выборка.ВесБрутто) = 0, Строка(Цел(Выборка.ВесБрутто)) + ",0", Строка(Выборка.ВесБрутто)) + " кг");
		КонецЦикла;

	КонецЕсли;
		
	Возврат Список;
	
КонецФункции
&НаСервере
Функция ИзменитьУпаковку(Коэффициент, Упаковка)
	
	ОбъектУпаковка = Упаковка.ПолучитьОбъект();
	ОбъектУпаковка.Коэффициент = Коэффициент;

	Попытка
		ОбъектУпаковка.Записать();
	Исключение
		Сообщить("Ошибка при изменении данных: " + ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ОбъектУпаковка.Ссылка;
	
КонецФункции

// . . . . . . . . . . | организация быстрого ввода информации по таможенной позиции
 
&НаКлиенте
Процедура НоменклатураДляТаможниОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ПодборНаименованияДляТаможни(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка);
		
КонецПроцедуры
&НаКлиенте
Процедура ПодборНаименованияДляТаможни(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	СписокПодбора = ПолучитьСписокЗначенийПоТексту(Текст, "НоменклатураДляТаможни");
	
	// если найдено точное соответствие
	
	Если ТипЗнч(СписокПодбора) = Тип("СправочникСсылка.НоменклатураДляТаможни") Тогда 
		Возврат;
	КонецЕсли;
	
	// организуем выбор значения из найденных подобных
	
    СписокПодбора.Вставить(0, Неопределено, "Создать новый",, БиблиотекаКартинок.СоздатьЭлементСписка);
	
	Выбор = ЭтаФорма.ВыбратьИзСписка(СписокПодбора, Элемент);
	
	Если Выбор <> Неопределено Тогда                     // если не было отказа от выбора
	
		Если Выбор.Значение = Неопределено Тогда        // если была создана новая упаковка
			
			ДанныеВыбора = СоздатьВыбранныйЭлемент(Текст, "НоменклатураДляТаможни");
			Состояние("Создана новая номенклатура для таможни",,Текст, БиблиотекаКартинок.НоваяГруппа); 
		Иначе
			ДанныеВыбора = Выбор.Значение;
		КонецЕсли;
		
		
	КонецЕсли;
	
	Элементы.Товары.ТекущиеДанные.НоменклатураДляТаможни = ДанныеВыбора;
	
КонецПроцедуры
&НаСервере
Функция ПолучитьСписокЗначенийПоТексту(Текст, ИмяСправочника)
	
	// поиск точного сооветствия для искомого значения
	
	Ссылка = Справочники[ИмяСправочника].НайтиПоНаименованию(Текст, Истина);
	
	Если Не Ссылка.Пустая() Тогда
		Возврат Ссылка;
	КонецЕсли;
	
	// поиск подобных значений искомому
	
	Список = Новый СписокЗначений;
	
	Запрос = Новый Запрос("ВЫБРАТЬ Ссылка, Наименование ИЗ Справочник." + ИмяСправочника + " ГДЕ Наименование ПОДОБНО """ + СокрЛП(Текст) + "%""");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Список.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;
	
	Возврат Список;
	
КонецФункции

// . . . . . . . . . . | при изменении номенклатуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)
	
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПодборЗначений(ТекДанные.ПолучитьИдентификатор());
	
	ТекДанные.Цена = РаботаСНоменклатурой.ПолучитьЦену(	ТекДанные.Номенклатура, 
																	СтруктураКолонокТовары.ТипЦен,
																	СтруктураКолонокТовары.Валюта);

	//
	//ФункцииФормДокументов.НоменклатураПриИзменении(
	//			Элементы.Товары, 
	//			СтруктураКолонокТовары);
	//
КонецПроцедуры 
&НаСервере
Процедура ПодборЗначений(ИсходныеДанные) экспорт
	
	ТекущиеДанные = ПолучитьДанныеДляОбработки(ИсходныеДанные);
	
	Условие = "";
	
	Запрос = Новый Запрос("	ВЫБРАТЬ
	                        |	Номенклатура.Артикул	Артикул,
							|	Номенклатура,
							|	Номенклатура.Вес 		ВесНеттоТовар,
							|	НоменклатураДляТаможни,
							|	Упаковка,
							|	Упаковка.Коэффициент 	КоличествоВУпаковке,
							|	Упаковка.ВесНетто		ВесНеттоУпаковка,
							|	Упаковка.ВесБрутто      ВесБруттоУпаковка,
							|	Упаковка.ВесНетто*(&Количество/Упаковка.Коэффициент)   	ВесНеттоИтогУпаковка,																			
							|   Упаковка.ВесБрутто*(&Количество/Упаковка.Коэффициент)  	ВесБруттоИтогУпаковка,
							|   Номенклатура.Вес * &Количество                          ВесНеттоИтогТовар
							|ИЗ
							|	РегистрСведений.НоменклатураДляТаможни
							|ГДЕ
							|	Номенклатура = &Номенклатура
							|");
							
	Если ЗначениеЗаполнено(ТекущиеДанные.Упаковка) Тогда 
		
		Запрос.Текст = Запрос.Текст + "И Упаковка = &Упаковка";
		Запрос.УстановитьПараметр("Упаковка", ТекущиеДанные.Упаковка);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Номенклатура", ТекущиеДанные.Номенклатура);
	Запрос.УстановитьПараметр("Количество", ТекущиеДанные.Количество);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		
		Если ЗначениеЗаполнено(ТекущиеДанные.Упаковка) Тогда 
			Выборка.Следующий();								// единственное сочетание Н-У
		Иначе
			Если Выборка.Количество() > 1 Тогда                // если найдена не одна запись
				
				// заполним данными текущую строку
				Выборка.Следующий();
				ЗаполнитьЗначенияСвойств(ТекущиеДанные, Выборка);
 				ТекущиеДанные.Исключение = Истина;
				// добавим и заполним остальные
				Пока Выборка.Следующий() Цикл
					НоваяСтрока = Товары.Добавить();
					НоваяСтрока.Исключение = Истина;
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				КонецЦикла;
			Иначе
				Выборка.Следующий();
				ЗаполнитьЗначенияСвойств(ТекущиеДанные, Выборка);
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		// если ничего не найдено, сносим инфу по упаковке
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПодробноПоТовару(ТекущиеДанные.Номенклатура));
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПодробноПоУпаковке());
	КонецЕсли;
	
КонецПроцедуры

// РЕАЛИЗАЦИЯ ПОДБОРА

// дополнительно
 
&НаСервере
Функция ПоместитьТоварыВХранилищеДляПодбора() Экспорт
		        
	ВыгружаемыеПоля = "Номенклатура, Количество, ЗаказПоставщику";
	АдресТоваровВРегистре = Подбор.ПоместитьТоварыВРегистрДляПодбора(Объект.Товары, ВыгружаемыеПоля);
	Возврат АдресТоваровВРегистре;
	
КонецФункции

&НаСервере
Процедура ИзменениеКоличестваПриПодборе(Адрес, ИсходныеДанные)
	                	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(ИсходныеДанные);

	Запрос = Новый Запрос(" ВЫБРАТЬ 
							|	Количество 
							|ИЗ 
							|	РегистрСведений.ТоварыВДокументеДляПодбора 
							|ГДЕ 
							|	АдресХранилища 	= """ + Адрес + """ И
							|	Номенклатура 	= &Номенклатура
							|	И ЗаказПоставщику = &ЗаказПоставщику
							|");
					
	Запрос.УстановитьПараметр("ЗаказПоставщику", ТекущиеДанные.ЗаказПоставщику);
	Запрос.УстановитьПараметр("Номенклатура", ТекущиеДанные.Номенклатура);
	
	РезультатЗапроса = Запрос.Выполнить();
	ЕстьЗапись = Не РезультатЗапроса.Пустой();
	
	Если ЕстьЗапись Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ВременнаяТаблица.ИзменитьКоличествоНоменклатуры(Адрес, Новый Структура("Номенклатура, Количество, ЗаказПоставщику", ТекущиеДанные.Номенклатура, ТекущиеДанные.Количество - Выборка.Количество, ТекущиеДанные.ЗаказПоставщику));
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Функция ЗаполнитьСтрокамиИзВыбранногоЗаказа(Заказ, Количество, АдресТоваровВХранилище, СтруктураКолонокТовары, ПодбиратьБезКоличества)
	
	Запрос = Новый Запрос("	ВЫБРАТЬ
							|	Рег.Номенклатура,
							|	&Заказ ЗаказПоставщику,
							|	ВЫБОР КОГДА &Количество = 0 ТОГДА
							|		Рег.КоличествоОстаток - ЕСТЬNULL(ТовДок.Количество,0)
							|	ИНАЧЕ
							|		ВЫБОР КОГДА &Количество < Рег.КоличествоОстаток - ЕСТЬNULL(ТовДок.Количество,0) ТОГДА 
							|			&Количество
							|		ИНАЧЕ
							|			Рег.КоличествоОстаток - ЕСТЬNULL(ТовДок.Количество,0)
							|		КОНЕЦ
							|	КОНЕЦ Количество
							|ИЗ
							|	РегистрНакопления.ЗаказыПоставщикам.Остатки(, ЗаказПоставщику = &Заказ) Рег
							|	ЛЕВОЕ СОЕДИНЕНИЕ
							|(	ВЫБРАТЬ
							|		Номенклатура,
							|		Количество
							|	ИЗ
							|		РегистрСведений.ТоварыВДокументеДляПодбора
							|	ГДЕ
							|		АдресХранилища = &АдресВХранилище
							|) КАК ТовДок
							|ПО
							|		Рег.Номенклатура = ТовДок.Номенклатура
							|ГДЕ
							|		(&ПодбиратьБезКоличества = ИСТИНА И ТовДок.Номенклатура ЕСТЬ NULL) 
							|	ИЛИ
							|		(ЕСТЬNULL(Рег.КоличествоОстаток, 0) - ЕСТЬNULL(ТовДок.Количество, 0) > 0) 
							|");
							
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Запрос.УстановитьПараметр("Количество", Количество);
	Запрос.УстановитьПараметр("АдресВХранилище",	 		АдресТоваровВХранилище);
	Запрос.УстановитьПараметр("ПодбиратьБезКоличества", 	ПодбиратьБезКоличества);
	
	Рез = Запрос.Выполнить();
	Если НЕ Рез.Пустой() Тогда
		Выборка = Рез.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ДобавитьВыбранноеЗначение(Выборка, АдресТоваровВХранилище, СтруктураКолонокТовары);
			
		КонецЦикла;

	КонецЕсли;
	
КонецФункции
&НаСервере
Процедура ДобавитьВыбранноеЗначение(ИсходныеДанные, Адрес, СтруктураКолонокТовары)
	
	ИзменитьТоварыВоВременномХранилище(Адрес, ИсходныеДанные);
	
	Строки = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура, ЗаказПоставщику", ИсходныеДанные.Номенклатура, ИсходныеДанные.ЗаказПоставщику));
	
	Если Строки.Количество() Тогда
		Строка = Строки[0];
		ТекущееКоличество = Строка.Количество;
		
		ЗаполнитьЗначенияСвойств(Строка, ИсходныеДанные);
		Строка.Количество = Строка.Количество + ТекущееКоличество;
		
		ПересчитатьКоличества("Количество", Строка);
	Иначе          
		Если ИсходныеДанные.Количество > 0 Тогда
			Строка = Объект.Товары.Добавить();
			
			ЗаполнитьЗначенияСвойств(Строка, ИсходныеДанные);
			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

////not used
&НаКлиенте
Процедура ОбработкаВыбранногоЗначения(ИсходныеДанные, ПеремещатьВсеКоличество)
	
	// ИсходныеДанные - Структура 
	
	Количество = ?(ПеремещатьВсеКоличество, 0, 1);
    Цена = 0;
	Если ИсходныеДанные.ЗапрашиватьКоличество ИЛИ ИсходныеДанные.ЗапрашиватьЦену Тогда
						   
		//Если Не ВвестиЧисло(Количество, "Количество:") Тогда
		//	Возврат;
		//КонецЕсли;
		
		Результат = ОткрытьФормуМодально("Документ.Инвойс.Форма.ФормаВводаКоличестваЦены", Новый Структура("Количество, Цена", ИсходныеДанные.ЗапрашиватьКоличество, ИсходныеДанные.ЗапрашиватьЦену));
		Количество = Результат.Количество;
		Цена = Результат.Цена;
		
	КонецЕсли;
	
	Значение = ИсходныеДанные.Строка;
	
	Если ТипЗнч(Значение) = Тип("Структура") Тогда	
	                          
		Номенклатура 		= Значение.Номенклатура;
		СвободныйОстаток	= Значение.СвободныйОстаток;
		Группа				= Значение.ЗаказПоставщику;
		
		Если НЕ Цена Тогда
			Цена = Значение.Цена;
		КонецЕсли;
		
		Если Количество > СвободныйОстаток Тогда
			Количество = СвободныйОстаток;
		КонецЕсли;
		
		ПеремещаемыеДанные = Новый Структура("Номенклатура, ЗаказПоставщику, Количество, Цена", Номенклатура, ?(ЗначениеЗаполнено(Группа), Группа, Неопределено), ?(Количество = 0, Значение.СвободныйОстаток, Количество), Цена);
		
		ДобавитьВыбранноеЗначение(ПеремещаемыеДанные, АдресТоваровВРегистре, СтруктураКолонокТовары);
				
	КонецЕсли;
			
	
	Если ТипЗнч(Значение) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		
		ЗаполнитьСтрокамиИзВыбранногоЗаказа(Значение.Ключ, Количество, АдресТоваровВРегистре, СтруктураКолонокТовары, ИсходныеДанные.ЗапрашиватьКоличество);
				
	КонецЕсли;
	
КонецПроцедуры
////not used. end
&НаСервере                           
Функция ИзменитьТоварыВоВременномХранилище(АдресТоваровВХранилище, Строка)
	
	стрОшибки = "";
	Если ВременнаяТаблица.ИзменитьКоличествоНоменклатуры(АдресТоваровВХранилище, Строка, стрОшибки) Тогда
		
		Возврат Истина;
		
	Иначе
		
		ОбщиеФункции.СообщитьТекст(стрОшибки);
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции


// команда

// ПОДБОР

&НаСервере
Функция ПоместитьТоварыВХранилище() 
	
	Возврат ПоместитьВоВременноеХранилище(
					Объект.Товары.Выгрузить(), 
					УникальныйИдентификатор);
КонецФункции
&НаКлиенте
Процедура ПодборВыполнить(Кнопка = Неопределено, ДополнительныеПараметрыПодбора = Неопределено)
	
	ИмяТабличнойЧасти = "Товары";
	
	АдресТоваровВХранилище = ПоместитьТоварыВХранилище();
	ПараметрыПодбора = Новый Структура("АдресТоваровВХранилище", АдресТоваровВХранилище);
	
	ПараметрыПодбора.Вставить("СтруктураКолонокТовары", СтруктураКолонокТовары);
	ПараметрыПодбора.Вставить("Партнер", Объект.Партнер);
	
	// Автосохранение
	АвтосохранениеКлиент.ОткрываетсяПодбор(ПараметрыПодбора, Объект.Ссылка, ЭтаФорма, ПолучитьДамп());
	Если ДополнительныеПараметрыПодбора <> Неопределено Тогда
		КонвертацияТипов.ДобавитьВСтруктуруСтруктуру(ПараметрыПодбора, ДополнительныеПараметрыПодбора) КонецЕсли;
	
	ОткрытьФорму("Справочник.Номенклатура.Форма.ПодборЗакупки", ПараметрыПодбора, Элементы.Товары);
	
КонецПроцедуры
&НаСервере
Процедура ПолучитьТоварыИзХранилища(АдресТоваровВХранилище)
	
	Объект.Товары.Загрузить(ПолучитьИзВременногоХранилища(АдресТоваровВХранилище));
	
КонецПроцедуры

// обработки табличной части

&НаКлиенте
Процедура ТоварыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение <> Неопределено Тогда		
		
		ПолучитьТоварыИзХранилища(ВыбранноеЗначение);		// получаем
		УдалитьИзВременногоХранилища(ВыбранноеЗначение); 	// заметаем следы
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ТоварыОбработкаВыбора_Ст(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		//ДобавитьВыбранноеЗначение(Новый Структура("Номенклатура, Количество", ВыбранноеЗначение, 1));
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда 
		
		ОбработкаВыбранногоЗначения(ВыбранноеЗначение, Ложь); // при даблклик добавляем по-одному (по-умолчанию)
		
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;	
	
	Значение = ПараметрыПеретаскивания.Значение;
	
	Если ТипЗнч(Значение) = Тип("Массив") Тогда
		Для Каждого Строка Из Значение Цикл // Строка - структура
			ОбработкаВыбранногоЗначения(Строка, Истина); // при перетаскивании добавляем всё количество (по-умолчанию)	
		КонецЦикла
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
    
    Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Структура") Тогда
       
        ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование;
        
    Иначе
        
        ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
        
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Если ФормаПодбора <> Неопределено И ФормаПодбора.Открыта() Тогда
		ФормаПодбора.Закрыть();
	КонецЕсли;
	
	// Автосохранение
	АвтосохранениеСервер.УдалитьАвтоСохранение(ИмяФормы, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанные(Команда)
	
	ОткрытьФорму("Документ.Инвойс.Форма.ЗагрузкаДанных", , ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРеквизиты(Команда)
	ФункцииФормДокументов.ОткрытьОбщиеРеквизиты(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтавкуНДС(Команда)
	
	ДиалогиСПользователем.ЗаполнитьСтавкуНДС(Объект.Товары, СтруктураКолонокТовары);
	ФункцииФормДокументов.ОбновитьПодвал(Объект, Элементы, Сумма, СтруктураКолонокТовары);

КонецПроцедуры


// КОРЗИНА
#Если Не ВебКлиент Тогда
&НаСервере
Процедура ДобавитьИзКорзиныНаСервере(ИмяКомпа, СтруктураКолонокТовары, КолСтрок)
	
	МодульКорзины.ПолучитьТоварИзКорзины(Элементы.ИТовары, Объект.Товары, СтруктураКолонокТовары, ИмяКомпа, КолСтрок);
	
КонецПроцедуры
#КонецЕсли

#Если Не ВебКлиент Тогда
&НаКлиенте
Процедура ВставитьИзКорзины(Команда)
	
	КолСтрок = 0;
	ДобавитьИзКорзиныНаСервере(ИмяКомпьютера(), СтруктураКолонокТовары, КолСтрок);
	
	Если КолСтрок Тогда
		
		МодульКорзины.ОповеститьОВставкеТовараВДокумент(КолСтрок, Объект.Товары.Количество());
		
	Иначе
		
		МодульКорзины.ОповеститьЧтоНечегоДобавлять();
		
	КонецЕсли;
	

КонецПроцедуры
#КонецЕсли

#Если Не ВебКлиент Тогда
&НаСервере
Функция ПоложитьВКорзинуНаСервере(ВыделенныеИндексы, ИмяКомпа, КолВКорзине)
	
	Возврат МодульКорзины.ПоложитьТоварВКорзину(Объект.Товары, ВыделенныеИндексы, ИмяКомпа, КолВКорзине);
	
КонецФункции
#КонецЕсли

#Если Не ВебКлиент Тогда
&НаКлиенте
Процедура ДобавитьВКорзину(Команда)
	
	ВыделенныеИндексы 	= МодульКорзины.ПолучитьВыделенныеСтрокиТоваров(Элементы.ИТовары, Объект.Товары);
	КолВКорзине 		= 0;
	КолТовара			= ВыделенныеИндексы.Количество();
	
	
	Если КолТовара Тогда
		
		Если ПоложитьВКорзинуНаСервере(ВыделенныеИндексы, ИмяКомпьютера(), КолВКорзине) Тогда
			МодульКорзины.ОповеститьОПомещенииТовара(КолТовара, КолВКорзине);
		КонецЕсли;
		
	Иначе
		
		МодульКорзины.ОповеститьЧтоНечегоДобавлять();
				
	КонецЕсли;

КонецПроцедуры
#КонецЕсли

#Если Не ВебКлиент Тогда
&НаКлиенте
Процедура РедактироватьТоварВКорзине(Команда)
	
	ОткрытьФорму("РегистрСведений.Корзина.Форма.Форма");
	
КонецПроцедуры
#КонецЕсли

#Если Не ВебКлиент Тогда
&НаСервере
Функция ОчиститьНаСервере(ИмяКомпа)
	
	Возврат МодульКорзины.ОчиститьКорзину(ИмяКомпа);
	
КонецФункции
#КонецЕсли

#Если Не ВебКлиент Тогда
&НаКлиенте
Процедура ОчиститьКорзину(Команда)
	
	Если ОчиститьНаСервере(ИмяКомпьютера()) Тогда
		
		МодульКорзины.ОповеститьЧтоКорзинаОчищена();
		
	КонецЕсли;

КонецПроцедуры
#КонецЕсли

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("ИнвойсЗаписан", Объект.Проведен);
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	
КонецПроцедуры


&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	Объект.Партнер=ПолучитьПартнера(Объект.Контрагент);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПартнера(Контрагент)
	Запрос=Новый Запрос("Выбрать Партнер из Справочник.Контрагенты ГДЕ Ссылка=&Ссылка");
	Запрос.УстановитьПараметр("Ссылка",Контрагент);
	Возврат Запрос.Выполнить().Выгрузить()[0].Партнер;
КонецФункции




//&НаСервере
//Процедура УдалитьУпаковку(Упаковка)
//	
//	СпрОбъект = Упаковка.ПолучитьОбъект();
//	СпрОбъект.УстановитьПометкуУдаления(Истина);
//	
//КонецПроцедуры

