&НаКлиенте
Перем СтруктураКолонокТовары Экспорт;

&НаКлиенте
Процедура ОбщиеРеквизиты(Команда)
	
	ФункцииФормДокументов.ОткрытьОбщиеРеквизиты(ЭтаФорма);
	
КонецПроцедуры
Процедура ОбработкаПолученияДанныхИзФормы(Результат, Параметры)  Экспорт
	;
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСуммыТабличныхЧастей(СтруктураКолонокТовары) Экспорт
	
	ФункцииФормДокументов.ПересчитатьСуммыТабличныхЧастей(Объект.Товары, СтруктураКолонокТовары);
	
КонецПроцедуры

&НаСервере
Функция РазрешенаЗапись()
	
	Возврат ФункцииБизнесПроцессов.СтоитНаТочкеМаршрута(БизнесПроцесс, БизнесПроцессы.СборкаЗаказа.ТочкиМаршрута.СкорректироватьЗаказ) ИЛИ РольДоступна("ПолныеПрава") ИЛИ РольДоступна("ПолныеПраваВОбласти") ИЛИ РольДоступна("ЧастичныеПрава")
			
КонецФункции
&НаСервере
Функция РазрешеноПроведение()
	
	Возврат ФункцииБизнесПроцессов.СтоитНаТочкеМаршрута(БизнесПроцесс, БизнесПроцессы.СборкаЗаказа.ТочкиМаршрута.ОтгрузитьЗаказ) ИЛИ РольДоступна("ПолныеПрава") ИЛИ РольДоступна("ПолныеПраваВОбласти") Или РольДоступна("ЧастичныеПрава")
	
КонецФункции

&НаКлиенте
Процедура УправлениеВидимостьюДоступностью() Экспорт
	
	Элементы.ПерейтиНаБизнесПроцесс.Доступность = Не БизнесПроцесс.Пустая();
	
	Если Не БизнесПроцесс.Пустая() Тогда
		
		РазрешенаЗапись 	= РазрешенаЗапись();
		РазрешеноПроведение = РазрешеноПроведение();
		
		// Установим доступность кнопок
		
		Если Элементы.Найти("КнопкаПровестиИЗакрыть") <> Неопределено Тогда
			Элементы.КнопкаПровестиИЗакрыть.Доступность = РазрешеноПроведение;
		КонецЕсли;
		Если Элементы.Найти("КнопкаПровести") <> Неопределено Тогда
			Элементы.КнопкаПровести.Доступность = РазрешеноПроведение;
		КонецЕсли;
		Элементы.КнопкаЗаписать.Доступность 		= РазрешенаЗапись;
		Элементы.КнопкаЗаписатьИЗакрыть.Доступность	= РазрешенаЗапись;
		Элементы.ИзменитьРеквизиты.Доступность		= РазрешенаЗапись;
	КонецЕсли;
	
	Элементы.ИзменитьРеквизиты.Доступность		= НЕ Объект.Ссылка.Пустая();
	ВидимостьЯчееек();
	
	// информация о товаре                
	ОбработатьОтображениеИнформацииОТоваре();
	
КонецПроцедуры

&НаСервере
Функция ОтображатьЯчейки()
	
	Возврат Ложь;
	//Возврат Истина;
	
	Возврат Объект.Склад.Ячеестый И
			Документы.РеализацияТоваров.БизнесПроцесс(Объект.Ссылка).Пустая();
	
КонецФункции
&НаКлиенте
Процедура ВидимостьЯчееек()
	
	СкладЯчеестый = ОтображатьЯчейки();
	Элементы.ТоварыЯчейка.Видимость 			= СкладЯчеестый;
	Элементы.ТоварыЗаполнитьЯчейки.Видимость 	= СкладЯчеестый;
	
КонецПроцедуры

// ВНЕШНИЕ ФУНКЦИИ


// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	
	Если НЕ ПроведенияДокументов.РазрешеноПерепроводитьДокумент(Объект.Ссылка) Тогда
		Сообщить("Данный заказ закрыт. Редактирование документа запрещено.");
		ТолькоПросмотр = Истина;
	КонецЕсли;	
	
	
	Если  ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.ЗаказНаряд") И Лев(Объект.Комментарий, 20) = "Отказаться от записи" Тогда
		
		Сообщить(Объект.Комментарий);
		Отказ = Истина;
		Возврат; КонецЕсли;
	
	// Назначим тип грузоотправителю и грузполучателю				
	
	//ПустойПартнераКонтрагент = Справочники[?(ПолучитьФункциональнуюОпцию("НемецкийУчет"), "Партнеры", "Контрагенты")].ПустаяСсылка();
	
	// Значения по умолчанию
	
	ИсторияПечати.Параметры.УстановитьЗначениеПараметра("Реализация",Объект.Ссылка);
	ИсторияПечати.Параметры.УстановитьЗначениеПараметра("Заказ",Объект.Заказ);
	
	Если Объект.Ссылка.Пустая() Тогда
		
		ФункцииФормДокументов.ЗаполнитьЗначенияПоУмолчанию(Объект, Метаданные.Документы.РеализацияТоваров.Реквизиты);
		Объект.СуммаВключаетНДС = Истина;
		
	Иначе   
		
		// Прикрепим счет-фактуру
		
		Запрос = Новый Запрос("ВЫБРАТЬ Номер, Дата ИЗ РегистрСведений.СчетФактуры ГДЕ Основание = &Основание");
		Запрос.УстановитьПараметр("Основание", Объект.Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ОбновитьЗаголовокСчетФактуры(Выборка.Номер, Выборка.Дата);
		КонецЕсли;
		
		
		// Считаем бизнес процесс если есть
		
		БизнесПроцесс = Документы.РеализацияТоваров.БизнесПроцесс(Объект.Ссылка);
		
		// Проверим возможность редактирования заказа в зависимости от положения БП
		
		Если Не БизнесПроцесс.пустая() Тогда
			
			УстановитьПривилегированныйРежим(Истина);
			
				Если Не ПравоДоступа("ИнтерактивноеИзменениеПроведенных", Объект.Ссылка.Метаданные(), ПользователиИнформационнойБазы.ТекущийПользователь()) Тогда
				//Если БизнесПроцесс.Завершен И НЕ РольДоступна("ПолныеПрава") И Не РольДоступна("ЧастичныеПрава") Тогда
				      
					ТолькоПросмотр = Истина;
					
				//ИначеЕсли Не ФункцииБизнесПроцессов.СтоитНаТочкеМаршрута(БизнесПроцесс, БизнесПроцессы.СборкаЗаказа.ТочкиМаршрута.СобратьЗаказ) И НЕ РольДоступна("ПолныеПрава") И Не РольДоступна("ЧастичныеПрава") Тогда
				ИначеЕсли Не ФункцииБизнесПроцессов.СтоитНаТочкеМаршрута(БизнесПроцесс, БизнесПроцессы.СборкаЗаказа.ТочкиМаршрута.СкорректироватьЗаказ) И Не ПравоДоступа("ИнтерактивноеИзменениеПроведенных", Объект.Ссылка.Метаданные(), ПользователиИнформационнойБазы.ТекущийПользователь())Тогда
					
					Элементы.Товары.ТолькоПросмотр 	= Истина; КонецЕсли;
				
			УстановитьПривилегированныйРежим(Ложь); КонецЕсли; КонецЕсли;
	
	// Уберем колонку размещения нафих
	Если ЗначениеЗаполнено(Объект.Заказ) И Объект.Заказ.СпособРазмещенияБезЗаказа Тогда
		Элементы.ТоварыРазмещение.Видимость = Ложь; КонецЕсли;
	
	// информация о товаре
	
	РаботаСНоменклатурой.ДобавитьОперативнуюИнформациюОТоваре(ЭтаФорма);
	
	// Рассчитаем динамические колонки
	
	ФункцииФормДокументов.РассчитатьДинамическиеКолонки(
					Объект.Товары,
					ФункцииФормДокументов.ПолучитьСтруктуруКолонокТовары(Элементы.Товары, Объект.СуммаВключаетНДС, Объект.ТипЦен));
					
	ФункцииФормДокументовСервер.УстановитьСвязиГрузополучателя(Объект,Элементы,Новый Структура("Грузополучатель, БанковскийСчетГрузополучателя, Грузоотправитель, БанковскийСчетГрузоотправителя","Объект.Контрагент","Объект.Грузополучатель","Объект.Организация","Объект.Грузоотправитель"));
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// Прочитаем оплаты
	
	ДокументыОплаты.ЗагрузитьЗначения(ТекущийОбъект.ПлатежныеДокументы.Выгрузить().ВыгрузитьКолонку("ДокументОплаты"));
	
	ЗапретРедактирования.УстановитьРежимТолькоПросмотрПоДатеЗапрета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	 
	СтруктураКолонокТовары = ФункцииФормДокументов.ПолучитьСтруктуруКолонокТовары(Элементы.Товары, Объект.СуммаВключаетНДС, Объект.ТипЦен, , , Объект.Валюта, Объект.УчитыватьНДС, Объект.Валюта, Объект.СуммаВключаетНДС,,Объект.УчитыватьНДС,,Объект.Контрагент,,Объект.РасчетСкидкиОтЦены);
	
	// 	Обновим подвал
	
	ФункцииФормДокументов.ОбновитьПодвал(Объект, Элементы, Сумма, СтруктураКолонокТовары);
	
	УправлениеВидимостьюДоступностью();
	
КонецПроцедуры
&НаКлиенте
Процедура ПодборВыполнить()
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Перем РежимЗаписи;
	
	Если ПараметрыЗаписи.Свойство("РежимЗаписи", РежимЗаписи ) Тогда
		
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			
			Если Объект.Организация.Пустая() Тогда
				ОбщиеФункции.СообщитьТекст("Не заполнена организация!");
				Отказ = Истина;
			КонецЕсли;
			
			Если Объект.Склад.Пустая() Тогда
				ОбщиеФункции.СообщитьТекст("Не заполнен склад!");
				Отказ = Истина;
			КонецЕсли;
			//
			//Если Объект.Партнер.Пустая() Тогда
			//	ОбщиеФункции.СообщитьТекст("Не заполнен партнер!");
			//	Отказ = Истина;
			//КонецЕсли;
			//	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Сохраним оплаты
	
	Если Не Отказ Тогда
		ТекущийОбъект.ПлатежныеДокументы.Очистить();
		Для Каждого Элемент Из ДокументыОплаты Цикл Если ЗначениеЗаполнено(Элемент.Значение) Тогда ТекущийОбъект.ПлатежныеДокументы.Добавить().ДокументОплаты = Элемент.Значение КонецЕсли; КонецЦикла; КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить(СобытияСистемы.Событие_ЗаписанаРеализация(),Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

#Область Обработка_табличной_части

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)

	ФункцииФормДокументов.НоменклатураПриИзменении(
				Элементы.Товары, 
				СтруктураКолонокТовары);

КонецПроцедуры
&НаКлиенте
Процедура КоличествоПриИзменении(Элемент)
	
	ФункцииФормДокументов.КоличествоПриИзменении(Элементы.Товары, СтруктураКолонокТовары);
	
КонецПроцедуры
&НаКлиенте
Процедура ЦенаПриИзменении(Элемент)
	
	ФункцииФормДокументов.ЦенаПриИзменении(Элементы.Товары, СтруктураКолонокТовары);
	
КонецПроцедуры
&НаКлиенте
Процедура СуммаПриИзменении(Элемент)
	
	ФункцииФормДокументов.СуммаПриИзменении(Элементы.Товары, СтруктураКолонокТовары);
	
КонецПроцедуры
&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент)
	
	ФункцииФормДокументов.СтавкаНДСПриИзменении(Элементы.Товары, СтруктураКолонокТовары);
	
КонецПроцедуры
&НаКлиенте
Процедура УпаковкаПриИзменении(Элемент)
	ФункцииФормДокументов.УпаковкаПриИзменении(
			Элементы.Товары, 
			СтруктураКолонокТовары);
КонецПроцедуры
&НаКлиенте
Процедура СуммаНДСПриИзменении(Элемент)
	
	ФункцииФормДокументов.СуммаНДСПриИзменении(Элементы.Товары, СтруктураКолонокТовары);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцентРучнойСкидкиПриИзменении(Элемент)
	
	ФункцииФормДокументов.ПроцентРучнойСкидкиПриИзменении(Элементы.Товары, СтруктураКолонокТовары);
	
КонецПроцедуры
&НаКлиенте
Процедура ПроцентАвтоматическойСкидкиПриИзменении(Элемент)
	ФункцииФормДокументов.ПроцентАвтоматическойСкидкиПриИзменении(Элементы.Товары, СтруктураКолонокТовары);
КонецПроцедуры

&НаКлиенте
Процедура СуммаРучнойСкидкиПриИзменении(Элемент)
	
	ФункцииФормДокументов.СуммаРучнойСкидкиПриИзменении(Элементы.Товары, СтруктураКолонокТовары);

КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Попытка
		Записать();
	Исключение
		Возврат;
	КонецПопытки;
	
	Закрыть();

КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаБизнесПроцесс(Команда)
	
	Если Не БизнесПроцесс.Пустая() Тогда
		
		ОткрытьФорму("БизнесПроцесс.СборкаЗаказа.ФормаОбъекта", Новый Структура("Ключ", БизнесПроцесс));
		
	КонецЕсли;

КонецПроцедуры

// ШАПКА

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	ВидимостьЯчееек();
	
КонецПроцедуры

// ЯЧЕЙКИ

&НаСервере
Процедура ЗаполнитьЯчейкиНаСервере()
	
	ФункцииФормДокументов.ЗаполнитьЯчейки(Объект.Товары,,,,"Размещение");
	
КонецПроцедуры
&НаКлиенте
Процедура ЗаполнитьЯчейки(Команда)
	
	ЗаполнитьЯчейкиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДисконтнаяКартаПриИзменении(Элемент)
	
	ДисконтнаяКартаПриИзмененииНаСервере(СтруктураКолонокТовары);
	         
КонецПроцедуры

&НаСервере
Процедура ДисконтнаяКартаПриИзмененииНаСервере(СтруктураКолонокТовары = Неопределено)
	
	Если СтруктураКолонокТовары <> Неопределено Тогда
		СтруктураКолонокТовары.ДисконтнаяКарта = Объект.ДисконтнаяКарта;
	КонецЕсли;
	
	Для Каждого Строка Из Объект.Товары Цикл
				
		Строка.ПроцентАвтоматическойСкидки = РаботаСНоменклатурой.ПолучитьПроцентАвтоматическойСкидки(Строка.Номенклатура, Объект.Партнер, Объект.ДисконтнаяКарта, Строка.Акция);
		ФункцииФормДокументов.ПроцентАвтоматическойСкидкиПриИзменении(Элементы.Товары, СтруктураКолонокТовары, Строка);
			
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьТаблицу()
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Объект.Товары.Выгрузить(), УникальныйИдентификатор);
	
	Возврат АдресХранилища;
	
КонецФункции

&НаКлиенте
Процедура ВесОбъем(Команда)
	
	// пока так
	
	АдресХранилища = ПодготовитьТаблицу();
	
	ОткрытьФорму("Документ.ИнтернетЗаказПокупателя.Форма.ФормаВеса", Новый Структура("АдресХранилища", АдресХранилища));
	
КонецПроцедуры

// КОМАНДЫ

&НаКлиенте
Процедура ЗаполнитьРучСкидку(Команда)
	
	ДиалогиСПользователем.ЗаполнитьРучСкидку(Объект.Товары, СтруктураКолонокТовары);
		
КонецПроцедуры
&НаКлиенте
Процедура ЗаполнитьСтавкуНДС(Команда)
	
	ДиалогиСПользователем.ЗаполнитьСтавкуНДС(Объект.Товары, СтруктураКолонокТовары);
	
КонецПроцедуры

#Область Информация_о_товаре


&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	// информация о товаре
	ОбработатьОтображениеИнформацииОТоваре()	
	 	
КонецПроцедуры
&НаСервере
Процедура ОбработатьОтображениеИнформацииОТоваре() Экспорт 
	РаботаСНоменклатурой.ОбработатьОтображениеИнформацииОТоваре(ЭтаФорма, "Товары", "Объект.Товары");
КонецПроцедуры

&НаКлиенте
Процедура ИнфТовараТекстHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	РаботаСНоменклатуройКлиент.ИнфТовараТекстHTMLПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры
&НаКлиенте
Процедура ИнфТовараЗаголовокHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	РаботаСНоменклатуройКлиент.ИнфТовараЗаголовокHTMLПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка, "Товары", "Объект.Товары");
КонецПроцедуры

 &НаКлиенте
Процедура ПоказатьСкрытьИнфОТоваре(Команда)
	РаботаСНоменклатуройКлиент.ПоказатьСкрытьИнфОТоваре(ЭтаФорма);
КонецПроцедуры
&НаКлиенте
Процедура НастройкаИнфОТоваре(Команда) 
	РаботаСНоменклатуройКлиент.НастройкаИнфОТоваре(ЭтаФорма, "Товары", "Объект.Товары");
КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	
	//СтруктураКолонокТовары = ФункцииФормДокументов.ПолучитьСтруктуруКолонокТовары(Элементы.Товары, Объект.СуммаВключаетНДС, Объект.ТипЦен, , Объект.ДисконтнаяКарта, Объект.Валюта, Объект.УчитыватьНДС, ,Объект.Партнер);
	
	//Для Каждого Строка Из Объект.Товары Цикл
	//	
	//	Строка.ПроцентАвтоматическойСкидки = РаботаСНоменклатурой.ПолучитьПроцентАвтоматическойСкидки(Строка.Номенклатура, Объект.Партнер, Объект.ДисконтнаяКарта);
	//	ФункцииФормДокументов.ПроцентАвтоматическойСкидкиПриИзменении(Элементы.Товары, СтруктураКолонокТовары, Строка);
	//		
	//КонецЦикла;

КонецПроцедуры

#КонецОбласти

// АВАНС

&НаСервере
Функция ЗаполнитьДокументыОплатыНаСервере()
	
	ДокФантом = Документы.РеализацияТоваров.СоздатьДокумент();
	ЗаполнитьЗначенияСвойств(ДокФантом, Объект.Ссылка);
	ДокФантом.ЗаполнитьДокументыОплаты(Объект.Ссылка);
	
	ДокументыОплаты.ЗагрузитьЗначения(ДокФантом.ПлатежныеДокументы.Выгрузить().ВыгрузитьКолонку("ДокументОплаты"));
	
КонецФункции
&НаКлиенте
Процедура ЗаполнитьАванс(Команда)
	
	ЗаполнитьДокументыОплатыНаСервере();
	
КонецПроцедуры

// СЧЕТ - ФАКТУРА

Процедура ОбновитьЗаголовокСчетФактуры(НомерСчетФактуры, ДатаСчетФактуры)
	
	Элементы.СФ.Заголовок = "Счет-фактура № " + НомерСчетФактуры + " от " + ДатаСчетФактуры;	
	
КонецПроцедуры

&НаКлиенте
Процедура СФНажатие(Элемент)
	
	Если НЕ Модифицированность Тогда 
		ОткрытьФорму("Документ.РеализацияТоваров.Форма.ФормаСчетФактура", Новый Структура("Основание", Объект.Ссылка), ЭтаФорма);
	Иначе
		Сообщить("Перед вводом счет-фактуры необходимо записать документ");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаписьСФ" И ТипЗнч(Параметр) = Тип("Структура") Тогда
		ОбновитьЗаголовокСчетФактуры(Параметр.Номер, Параметр.Дата);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ИзменитьРеквизитыДокумента(Команда)
	
	ФункцииФормДокументов.ИзменитьРеквизиты(ЭтаФорма);

КонецПроцедуры
&НаКлиенте
Процедура ОбработатьИзмененияРеквизитов(ЗакрытьФорму, Параметры) Экспорт
	
	Если ЗакрытьФорму = Истина Тогда Закрыть() КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОписаниеТиповДокументОплат()
	
	Возврат Метаданные.Документы.РеализацияТоваров.ТабличныеЧасти.ПлатежныеДокументы.Реквизиты.ДокументОплаты.Тип;
	
КонецФункции
&НаКлиенте
Процедура ДокументыОплатыОткрытие(Элемент, СтандартнаяОбработка)
	
	Перем ВыбЗначение;
	
	СтандартнаяОбработка = Ложь;
	
	
	//
	//МассивТипов = Новый Массив;
	//МассивТипов.Добавить(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"));
	//МассивТипов.Добавить(Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее"));
	
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ОбработкаВыбораДокаОплаты", ЭтаФорма), ВыбЗначение, "Выбор типа документа", ПолучитьОписаниеТиповДокументОплат());
	
КонецПроцедуры
&НаКлиенте
Процедура ВыборПлатёжки(ВыбЗнач, Параметры) Экспорт
	
	//Если ВыбЗнач <> Неопределено Тогда
	//	
	//	
	//	
	//КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ДокументыОплатыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//СтандартнаяОбработка = Ложь;
	//
	//ВыбПлатежка = ОткрытьФорму("Документ.ПлатежноеПоручениеВходящее.ФормаВыбора",Новый Структура("Организация, Контрагент, Партнер",Объект.Организация, Объект.Контрагент, Объект.Партнер),ЭтаФорма,,,,Новый ОписаниеОповещения("ОбработкаВыбораДокаОплаты",ЭтаФорма,),);
КонецПроцедуры
Процедура ОбработкаВыбораДокаОплаты(Результат, Параметры) Экспорт							
	Если ДокументыОплаты.НайтиПоЗначению(Результат) = Неопределено Тогда
		ДокументыОплаты.Добавить(Результат);
		Модифицированность = Истина;
	КонецЕсли;	
КонецПроцедуры

//#Область Партии

//&НаСервере
//Процедура ЗаполнитьПартииНаСервере(СтруктураКолонокТовары)
//	
//	МодульПартий.РазнестиПартииВТаблицеМетодомFIFO(Объект.Товары, "Размещение", СтруктураКолонокТовары, ?(Объект.Проведен, Объект.Дата, Неопределено));
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ЗаполнитьПартии(Команда)
//	
//	ЗаполнитьПартииНаСервере(СтруктураКолонокТовары);
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ОчиститьИЗаполнитьПартии(Команда)
//	
//	КонвертацияТипов.ВыполнитьВыражениеВКаждойСтрокеТаблицы(Объект.Товары, "Строка.Партия = Неопределено");
//	ЗаполнитьПартииНаСервере(СтруктураКолонокТовары);
//	
//КонецПроцедуры

//#КонецОбласти

&НаКлиенте
Процедура ПоказатьВсеПоляВТаблице(Команда)
	
	Для Каждого Элемент Из Элементы.Товары.ПодчиненныеЭлементы Цикл
		Если Элемент.Видимость = Ложь Тогда Элемент.Видимость = Истина КонецЕсли; КонецЦикла;
	
КонецПроцедуры

//&НаСервере
//Процедура ПерезаполнитьПартииНаСервере(СтруктураКолонокТовары)
//	
//	МодульПартий.РазнестиПартииВТаблицеМетодомFIFO(Объект.Товары, Объект.Склад, СтруктураКолонокТовары, ?(Объект.Ссылка.Пустая(), Неопределено, Объект.Дата),,Истина);

//КонецПроцедуры

//&НаКлиенте
//Процедура ПерезаполнитьПартии(Команда)
//	ПерезаполнитьПартииНаСервере(СтруктураКолонокТовары);
//КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьНомераГТДНаСервере(СтруктураКолонокТовары)
	ФункцииФормДокументов.ПроставитьНомераГТД(Объект.Товары, СтруктураКолонокТовары, ?(Объект.Ссылка.Пустая(), ТекущаяДата(), Объект.Дата));
	КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьНомераГТД(Команда)
	ПерезаполнитьНомераГТДНаСервере(СтруктураКолонокТовары);
КонецПроцедуры


&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	Объект.Партнер=ПолучитьПартнера(Объект.Контрагент);
	
	СтруктураКолонокТовары = ФункцииФормДокументов.ПолучитьСтруктуруКолонокТовары(Элементы.Товары, Объект.СуммаВключаетНДС, Объект.ТипЦен, , , Объект.Валюта, Объект.УчитыватьНДС, Объект.Валюта, Объект.СуммаВключаетНДС,,Объект.УчитыватьНДС,,Объект.Контрагент,,Объект.РасчетСкидкиОтЦены);
	
	Объект.Грузополучатель = ФункцииФормДокументовСервер.ГрузополучательПриИзмененииРеквизита(Объект.Контрагент);
	Объект.БанковскийСчетГрузополучателя = ФункцииФормДокументовСервер.БанковскийСчетПриИзмененииРеквизита(Объект.Грузополучатель);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПартнера(Контрагент)
	Запрос=Новый Запрос("Выбрать Партнер из Справочник.Контрагенты ГДЕ Ссылка=&Ссылка");
	Запрос.УстановитьПараметр("Ссылка",Контрагент);
	Возврат Запрос.Выполнить().Выгрузить()[0].Партнер;
КонецФункции

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Объект.Грузоотправитель = ФункцииФормДокументовСервер.ГрузополучательПриИзмененииРеквизита(Объект.Организация);
	Объект.БанковскийСчетГрузоотправителя = ФункцииФормДокументовСервер.БанковскийСчетПриИзмененииРеквизита(Объект.Грузоотправитель);
КонецПроцедуры

&НаКлиенте
Процедура ГрузополучательПриИзменении(Элемент)
	Объект.БанковскийСчетГрузополучателя = ФункцииФормДокументовСервер.БанковскийСчетПриИзмененииРеквизита(Объект.Грузополучатель);
КонецПроцедуры

&НаКлиенте
Процедура ГрузоотправительПриИзменении(Элемент)
	Объект.БанковскийСчетГрузоотправителя = ФункцииФормДокументовСервер.БанковскийСчетПриИзмененииРеквизита(Объект.Грузоотправитель);
КонецПроцедуры

//&НаСервере
//Процедура ЗаполнитьПлатежныеДокументыНаСервере()
//	
//	Объект.ПлатежныеДокументы.Загрузить(Документы.РеализацияТоваров.ЗаполнитьПлатежныеДокументы(Объект.Ссылка));	
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ЗаполнитьПлатежныеДокументы(Команда)
//	ЗаполнитьПлатежныеДокументыНаСервере()
//КонецПроцедуры

//&НаСервере
//Функция ПолучитьСуммуОплаты(Документ)
//	
//	Возврат Документ.Сумма;
//	
//КонецФункции

//&НаКлиенте
//Процедура ПлатежныеДокументыДокументОплатыПриИзменении(Элемент)
//	
//	ТекущиеДанные = Элементы.ПлатежныеДокументы.ТекущиеДанные;
//	Если ТекущиеДанные <> Неопределено Тогда
//		ТекущиеДанные.Сумма = ПолучитьСуммуОплаты(ТекущиеДанные.ДокументОплаты);
//	КонецЕсли;
//	
//КонецПроцедуры



