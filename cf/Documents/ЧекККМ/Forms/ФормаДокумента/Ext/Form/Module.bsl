&НаКлиенте
Перем СтруктураКолонокТовары Экспорт;

// ИНФОРМАЦИЯ

&НаКлиенте
Процедура ОбщиеРеквизиты(Команда)
	
	ФункцииФормДокументов.ОткрытьОбщиеРеквизиты(ЭтаФорма);
	
КонецПроцедуры
&НаСервере
Процедура ПересчитатьСуммыТабличныхЧастей(СтруктураКолонокТовары) Экспорт
	
	ФункцииФормДокументов.ПересчитатьСуммыТабличныхЧастей(Объект.Товары, СтруктураКолонокТовары);
	
КонецПроцедуры
&НаСервере
Процедура УправлениеВидимостьюДоступностью()
	
	НеРазрешеноМенять = (Объект.Проведен Или Объект.Процесс.Пустая() Или Объект.Процесс.Завершен) И НЕ (РольДОступна("ПолныеПрава") ИЛи РольДоступна("ПолныеПраваВОбласти"));
	
	ТолькоПросмотр 	= НеРазрешеноМенять;
	ЕстьТовар		= Объект.Товары.Количество();
	
	Элементы.ПодборТоваров.Видимость			= Не НеРазрешеноМенять;
	Элементы.ПробитьНаличными.Видимость 		= Не НеРазрешеноМенять И ЕстьТовар;
	Элементы.ПробитьБанковскойКартой.Видимость 	= Не НеРазрешеноМенять И ЕстьТовар;
	Элементы.ПробитьВсякоРазно.Видимость 		= Не НеРазрешеноМенять И ЕстьТовар;
	
	ЭтоВозврат = Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат;
	Элементы.Основание.Видимость 	= ЭтоВозврат;
	Элементы.ТипЦен.Видимость		= НЕ ЭтоВозврат;
	Элементы.ИзменитьРквизитыДокумента.Доступность	= НЕ Объект.Ссылка.Пустая() И НЕ Объект.Процесс.Завершен;
	
КонецПроцедуры
&НаСервере
Процедура ОбновитьНаличностьВКассе()
	
	НаличностьВКассе = ДенежныеСредства.стрПолучитьПолучитьНаличностьВКассе(Объект.Касса, ?(Объект.Проведен, Объект.Дата, Неопределено));
	
КонецПроцедуры

// ИЗМЕНЕНИЯ РЕКВИЗИТОВ

&НаСервере
Процедура УстановитьСкладПоКассе()
	
	Объект.Склад = Объект.Касса.Склад;
	
КонецПроцедуры
&НаКлиенте
Процедура КассаПриИзменении(Элемент)
	
	УстановитьСкладПоКассе();
	ОбновитьНаличностьВКассе();
	УстановитьОтделПодразделение(Объект.Касса,Объект.Отдел,Объект.Подразделение);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьОтделПодразделение(Касса,Отдел,Подразделение)
	Отдел = Касса.Отдел;
	Подразделение = Отдел.Подразделение;
КонецПроцедуры	



// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Параметры.Основание) И НЕ ЗначениеЗаполнено(Объект.Основание) Тогда
		Сообщить("Возврат можно оформить только на основании документа продажи и текущая смена должна быть открыта");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Проставим параметры
	Если Не Параметры.Процесс.Пустая() Тогда
		
		Объект.Процесс 		= Параметры.Процесс;
		Объект.Касса 		= Объект.Процесс.Касса;
		Объект.Склад 		= Объект.Касса.Склад;
		Объект.ВидОперации 	= Перечисления.ВидыОперацийЧекККМ.Продажа;
		Объект.ТипЦен		= Объект.Касса.ТипЦен;
		Объект.Валюта		= Объект.Касса.ТипЦен.Валюта;
		
		Объект.УчитыватьНДС =  Объект.Касса.Организация.УчитыватьНДС;
		Объект.СуммаВключаетНДС = Параметры.СуммаВключаетНДС;
		
		УстановитьОтделПодразделение(Объект.Касса,Объект.Отдел,Объект.Подразделение);
		
	КонецЕсли;
	
	// Сделаем привязки реквизитов
	
	//НовыйМассив = Новый Массив();
	//НовыйМассив.Добавить(Новый СвязьПараметраВыбора("Отбор.Партнер", "Партнер"));
	//Элементы.БанковскийСчетПартнера.СвязиПараметровВыбора = Новый ФиксированныйМассив(НовыйМассив);
	
	// информация о товаре
	
	РаботаСНоменклатурой.ДобавитьОперативнуюИнформациюОТоваре(ЭтаФорма);
	
	// Рассчитаем динамические колонки
	
	ФункцииФормДокументов.РассчитатьДинамическиеКолонки(
					Объект.Товары,
					ФункцииФормДокументов.ПолучитьСтруктуруКолонокТовары(Элементы.Товары, Объект.СуммаВключаетНДС, Объект.ТипЦен,,,,Объект.УчитыватьНДС,,,Объект.Касса,,,Объект.Контрагент));
					
	// Узнаем скоко бабла
	
	ОбновитьНаличностьВКассе();
	
	// Получим должок
	
	ДолгПартнера = ДенежныеСредства.ПолучитьДолгПартнера(Объект.Контрагент);
	
	УстановитьВидимостьККТ();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Получим структуру колонок
	
	СтруктураКолонокТовары = ФункцииФормДокументов.ПолучитьСтруктуруКолонокТовары(Элементы.Товары, Объект.СуммаВключаетНДС, Объект.ТипЦен,,, Объект.Валюта, Объект.УчитыватьНДС,,, Объект.Касса, Объект.УчитыватьНДС,,Объект.Контрагент);
	
	// Получим кассу
	Если Объект.Процесс.Пустая() Тогда
		ПроставитьРеквизитыПоУмолчанию();
	КонецЕсли;
	
	
	// Установим доступность к элементам
	
	ФункцииФормДокументов.УстановитьДоступностьКолонокТоваров(Элементы.Товары, СтруктураКолонокТовары);
	
	// 	Обновим подвал
	
	ФункцииФормДокументов.ОбновитьПодвал(Объект, Элементы, Объект.Товары.Итог("Сумма"), СтруктураКолонокТовары);
	
	// Обновим видимость доступность
	
	УправлениеВидимостьюДоступностью();
	Элементы.Купоны.Доступность = ПродажаФизЛицу();		
КонецПроцедуры

&НаСервере
Процедура ПроставитьРеквизитыПоУмолчанию()
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	
	Если ТекОбъект.ЭтоНовый() Тогда
		
		// ТИП ЧЕКА
		
		Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа;
		
		// КАССА
		
		Касса = Справочники.Кассы.ПолучитьТекущуюКассу();
		Объект.Касса = Касса;
		
		
		// СКЛАД
		
		Объект.Склад = Касса.Склад;
		
		// ТИП ЦЕН
		
		Объект.ТипЦен = Касса.ТипЦен;
		
		// ВАЛЮТА
		
		Объект.Валюта = Касса.ТипЦен.Валюта;
		
		УстановитьОтделПодразделение(Объект.Касса,Объект.Отдел,Объект.Подразделение);
		
	КонецЕсли;
	
КонецПроцедуры


// ОБРАБОТКИ ТАБЛИЧНОЙ ЧАСТИ

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент, КонкретнаяСтрока = Неопределено)

	ФункцииФормДокументов.НоменклатураПриИзменении(
				Элементы.Товары, 
				СтруктураКолонокТовары,
				КонкретнаяСтрока);

КонецПроцедуры
&НаКлиенте
Процедура КоличествоПриИзменении(Элемент, КонкретнаяСтрока = Неопределено)
	
	ФункцииФормДокументов.КоличествоПриИзменении(Элементы.Товары, СтруктураКолонокТовары, КонкретнаяСтрока);
	
КонецПроцедуры
&НаКлиенте
Процедура ЦенаПриИзменении(Элемент)
	
	ФункцииФормДокументов.ЦенаПриИзменении(Элементы.Товары, СтруктураКолонокТовары);
	
КонецПроцедуры
&НаКлиенте
Процедура СуммаПриИзменении(Элемент)
	
	ФункцииФормДокументов.СуммаПриИзменении(Элементы.Товары, СтруктураКолонокТовары);
	
КонецПроцедуры
&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент)
	
	ФункцииФормДокументов.СтавкаНДСПриИзменении(Элементы.Товары, СтруктураКолонокТовары);
	
КонецПроцедуры
&НаКлиенте
Процедура УпаковкаПриИзменении(Элемент)
	ФункцииФормДокументов.УпаковкаПриИзменении(
			Элементы.Товары, 
			СтруктураКолонокТовары);
КонецПроцедуры
&НаКлиенте
Процедура СуммаНДСПриИзменении(Элемент)
	
	ФункцииФормДокументов.СуммаНДСПриИзменении(Элементы.Товары, СтруктураКолонокТовары);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцентРучнойСкидкиПриИзменении(Элемент)
	
	ФункцииФормДокументов.ПроцентРучнойСкидкиПриИзменении(Элементы.Товары, СтруктураКолонокТовары);

КонецПроцедуры
&НаКлиенте
Процедура СуммаРучнойСкидкиПриИзменении(Элемент)
	
	ФункцииФормДокументов.СуммаРучнойСкидкиПриИзменении(Элементы.Товары, СтруктураКолонокТовары);

КонецПроцедуры

// ПОДБОР

&НаСервере
Функция ПоместитьТоварыВХранилище() 
	
	Возврат ПоместитьВоВременноеХранилище(
					Объект.Товары.Выгрузить(), 
					УникальныйИдентификатор);
КонецФункции
&НаКлиенте
Процедура ПодборВыполнить()
	
	ИдентификаторВремени = ДиалогиСПользователем.НачалоЗамераВремени("Подбор.Открытие", Объект.Ссылка);
	
	ИмяТабличнойЧасти = "Товары";
	
	АдресТоваровВХранилище = ПоместитьТоварыВХранилище();
	ПараметрыПодбора = Новый Структура("АдресТоваровВХранилище", АдресТоваровВХранилище);
	
	ПараметрыПодбора.Вставить("СтруктураКолонокТовары", СтруктураКолонокТовары);
	ПараметрыПодбора.Вставить("ВидЗапроса", 			"ОстаткиНоменклатуры");
	ПараметрыПодбора.Вставить("ВидыЗапросов", 			"СписокНоменклатуры");
	ПараметрыПодбора.Вставить("Склад", 					Объект.Склад);
	ПараметрыПодбора.Вставить("ТипЦен", 				Объект.ТипЦен);
	ПараметрыПодбора.Вставить("Валюта", 				Объект.Валюта);
	
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаПодбора", ПараметрыПодбора, Элементы.Товары,,,,,);
	
	ДиалогиСПользователем.ОкончаниеЗамераВремени(ИдентификаторВремени);
	
КонецПроцедуры
&НаСервере
Процедура ПолучитьТоварыИзХранилища(АдресТоваровВХранилище)
	
	Объект.Товары.Загрузить(ПолучитьИзВременногоХранилища(АдресТоваровВХранилище));
	
КонецПроцедуры
&НаКлиенте
Процедура ТоварыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение <> Неопределено Тогда		
		
		ПолучитьТоварыИзХранилища(ВыбранноеЗначение);		// получаем
		УдалитьИзВременногоХранилища(ВыбранноеЗначение); 	// заметаем следы
		Модифицированность = Истина;
		УправлениеВидимостьюДоступностью();
		
	КонецЕсли;
	
КонецПроцедуры


// ТАБЛИЧНАЯ ЧАСТЬ

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	ФункцииФормДокументов.ОбновитьПодвал(Объект, Элементы, Объект.Товары.Итог("Сумма"), СтруктураКолонокТовары);
	
КонецПроцедуры

&НаСервере
Функция ПреобразоватьМассивШтрихКодовВНоменклатуру(МассивДанных)
	
	Возврат ФункцииФормДокументов.ПреобразоватьМассивШтрихКодовВНоменклатуру(МассивДанных);
	
КонецФункции
&НаКлиенте
Функция ПолученыШтрихКоды(МассивДанных) Экспорт

	МассивНоменклатуры = ПреобразоватьМассивШтрихКодовВНоменклатуру(МассивДанных);
	
	Для Каждого Структура Из МассивНоменклатуры Цикл
		
		//ТоварыОбработкаВыбора(Элементы.Товары, Структура, Ложь);
		
	КонецЦикла;
	
КонецФункции

// ПРОБИТЕ

&НаСервере
Процедура НачатьНовыйЧек()
	
	ДокументОбъект = Документы.ЧекККМ.СоздатьДокумент();
	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры
&НаКлиенте
Процедура ДиалогНачатьНовыйЧек()
	
	Если Вопрос("Начать новый чек?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		НачатьНовыйЧек();
		
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура УстановитьОднотипнуюОплату(ЭтоБезнал)
	
	// ТипОплаты 1 это налик 2 это банк
	
	Объект.Оплаты.Очистить();
	
	НовСтрока = Объект.Оплаты.Добавить();
	НовСтрока.Сумма = Объект.Товары.Итог("Сумма");
	
	Если ЭтоБезнал Тогда
		
		НовСтрока.ТипОплаты = Перечисления.ТипОплаты.БанковскаяКарта;
		//НовСтрока.НомерБанковскойОперации = НомерБанковскойОперации;
	Иначе
		
		НовСтрока.ТипОплаты = Перечисления.ТипОплаты.Наличные;
		//НовСтрока.НомерБанковскойОперации = "";
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЭтоОплатаПоБанковскойКарте(ТипОплаты)
	
	 Возврат ТипОплаты = Перечисления.ТипОплаты.БанковскаяКарта
	
КонецФункции

&НаКлиенте
Функция КонтрольВнесенияНомераБанковскойОперации(ВсякоРазно = Ложь)
	
	//делаем тупо
	ном = 0;
	Для Каждого Строка Из Объект.Оплаты Цикл ном = ном + 1;
		
		Если ЭтоОплатаПоБанковскойКарте(Строка.ТипОплаты) И ПустаяСтрока(Строка.НомерБанковскойОперации) Тогда
			
			// пальцем тычем
			
			Если ВсякоРазно Тогда
				ОбщиеФункции.СообщитьТекст("Не заполнен номер банковской операции",  "Объект.Оплаты[" + (Ном - 1) + "].НомерБанковскойОперации");
			Иначе
				ОбщиеФункции.СообщитьТекст("Не заполнен номер банковской операции", "НомерБанковскойОперации");
			КонецЕсли;
			
			Возврат Ложь;
       КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ПробитьБанковскойКартой(Команда)
	
	Отказ = Ложь;
	
	// уберем пока проверки
	
	//Если БанкКарты.Пустая() Тогда
	//	Отказ = Истина;
	//	ОбщиеФункции.СообщитьТекст("Не выбран банк карты", "БанкКарты", Объект);
	//КонецЕсли;
	//
	//Если ФизЛицоКарты.Пустая() Тогда
	//	Отказ = Истина;
	//	ОбщиеФункции.СообщитьТекст("Не выбран владелец банковской карты", "ФизЛицоКарты", Объект);
	//КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
		
	// Установим в оплаты сумму
		
	УстановитьОднотипнуюОплату(Истина);
	
	//Если НЕ КонтрольВнесенияНомераБанковскойОперации() Тогда
	//	Возврат;
	//КонецЕсли;
	
	// Проведем документ и закроем
	
	Объект.Дата = ТекущаяДата();
	
	ПроверитьИУстановитьХреновуСтатью();
	Если Записать(Новый Структура("РежимЗаписи, РежимПроведения", РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный)) Тогда
			
		СобытияСистемы.ОповеститьОПробитииЧека(Объект.Ссылка);
		Модифицированность = Ложь;
			
		ПоказатьОповещениеПользователя("Пробит чек на сумму " + Объект.Сумма + "
													|по карте: " + ФизЛицоКарты, 
											ПолучитьНавигационнуюСсылку(Объект.Ссылка), 
											Строка(Объект.Ссылка), 
											БиблиотекаКартинок.СменаПробитьЧек);
											
		АктивироватьРеализоватьПодарочнуюКарту();
		ПробитьЧекПоКассе();
		//Закрыть();
			
	КонецЕсли;

КонецПроцедуры
&НаКлиенте
Процедура ПробитьНаличными(Команда)
	
	Если Не Наличные Тогда Наличные = Объект.Товары.Итог("Сумма") КонецЕсли;
	
	Если Объект.Товары.Итог("Сумма") > Наличные Тогда
		
		ПоказатьПредупреждение(,"Получено не достаточно средств!",,"Предупреждение.");
		
	Иначе
		
		// Установим в оплаты сумму
		
		УстановитьОднотипнуюОплату(Ложь);
	
		// Проведем документ и закроем
				
		Сдача 		= Наличные - Объект.Товары.Итог("Сумма");
		Объект.Дата = ТекущаяДата();
		
		ПроверитьИУстановитьХреновуСтатью();
		Если Записать(Новый Структура("РежимЗаписи, РежимПроведения", РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный)) Тогда
		
			СобытияСистемы.ОповеститьОПробитииЧека(Объект.Ссылка);
			Модифицированность = Ложь;
			
			ПоказатьОповещениеПользователя("Пробит чек на сумму " + Объект.Сумма + "
													|" + ?(Сдача, "Сдача - " + Сдача,""), 
											ПолучитьНавигационнуюСсылку(Объект.Ссылка), 
											Строка(Объект.Ссылка), 
											БиблиотекаКартинок.СменаПробитьЧек);

			АктивироватьРеализоватьПодарочнуюКарту();
			ПробитьЧекПоКассе();
			
			//Если заполнен промо код и он не многоразовый - поменяем статус промо кода
			Если ЗначениеЗаполнено(Объект.ПромоКод) Тогда
				ИзменитьПромокод(Объект.ПромоКод);
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;		
КонецПроцедуры
&НаКлиенте
Процедура ПробитьВсякоРазно(Команда)
	
	Если НЕ Объект.Оплаты.Количество() ИЛИ Недостача < 0 Тогда
		ПоказатьПредупреждение(,"Получено не достаточно средств!",,"Предупреждение");
		Возврат;
	КонецЕсли;
	
	Если Недостача > 0 Тогда
		ПоказатьПредупреждение(,"Невозможно выдать сдачу!",,"Предупреждение");
		Возврат;
	КонецЕсли;
	
	//Если НЕ КонтрольВнесенияНомераБанковскойОперации(Истина) Тогда
	//	Возврат;
	//КонецЕсли;
	
	// Проведем документ и закроем
	
	Объект.Дата = ТекущаяДата();
	
	ПроверитьИУстановитьХреновуСтатью();
	Если Записать(Новый Структура("РежимЗаписи, РежимПроведения", РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный)) Тогда
					
		СобытияСистемы.ОповеститьОПробитииЧека(Объект.Ссылка);
		Модифицированность = Ложь;
							
		ПоказатьОповещениеПользователя("Пробит чек на сумму " + Объект.Сумма + "
																	|" + ?(Сдача, "Сдача - " + Сдача,""), 
											ПолучитьНавигационнуюСсылку(Объект.Ссылка), 
											Строка(Объект.Ссылка), 
											БиблиотекаКартинок.СменаПробитьЧек);
		АктивироватьРеализоватьПодарочнуюКарту();
		ПробитьЧекПоКассе();
		//Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИзменитьПромокод(ПромоКодСсылка)
	
	Если НЕ ПромоКодСсылка.Многоразовый Тогда
		ПромоКодОбъект = ПромоКодСсылка.ПолучитьОбъект();
		ПромоКодОбъект.Активен = Ложь;
		ПромоКодОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПолученоПриИзменении(Элемент)
	
	тСдача = Наличные - Объект.Товары.Итог("Сумма");
	Сдача = ?(тСдача > 0, тСдача, 0);
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьПроцентАвтоматическойСкидки(СтруктураКолонокТовары = Неопределено)
	
	Для Каждого Строка Из Объект.Товары Цикл
		Строка.ПроцентАвтоматическойСкидки = РаботаСНоменклатурой.ПолучитьПроцентАвтоматическойСкидки(Строка.Номенклатура, Объект.Контрагент, Объект.ДисконтнаяКарта, Строка.Акция);  

	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВладельцаИнфКарты()
	
	Возврат Объект.ДисконтнаяКарта.Контрагент;
	
КонецФункции
&НаКлиенте
Процедура КартаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
		 Элементы.ПромоКод.Доступность = Ложь;
		 Объект.ПромоКод = Неопределено;
	 Иначе
		 Элементы.ПромоКод.Доступность = Истина;
	КонецЕсли;	
	
	новКонтрагент = ПолучитьВладельцаИнфКарты();
	Если ЗначениеЗаполнено(новКонтрагент) Тогда
		Объект.Контрагент = новКонтрагент;
		//ПартнерПриИзменении(Элементы.Партнер);
		КонтрагентПриИзменении(Элементы.Контрагент);
		
	КонецЕсли;
	
	СтруктураКолонокТовары.ДисконтнаяКарта = Объект.ДисконтнаяКарта;
	ЗаполнитьПроцентАвтоматическойСкидки(СтруктураКолонокТовары);	
	ПриИзмененииРеквизитаВлияющегоНаТабличнуюЧасть(СтруктураКолонокТовары, Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеПромоКода(ПромоКодСсылка)
	
	Структура = Новый Структура;
	Структура.Вставить("Активен", ПромоКодСсылка.Активен);
	Структура.Вставить("СрокПромоКодаДо", ПромоКодСсылка.СрокПромоКодаДо);
	Структура.Вставить("ПроцентСкидки", ПромоКодСсылка.ПроцентСкидки);
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	ПромокодыКаналыПродаж.КаналПродаж.КаналПродажДляРозницы
	                |ИЗ
	                |	Справочник.Промокоды.КаналыПродаж КАК ПромокодыКаналыПродаж
	                |ГДЕ
	                |	ПромокодыКаналыПродаж.Ссылка = &Ссылка
	                |	И НЕ ПромокодыКаналыПродаж.Ссылка.ПометкаУдаления
	                |	И ПромокодыКаналыПродаж.КаналПродаж.КаналПродажДляРозницы
	                |	И НЕ ПромокодыКаналыПродаж.КаналПродаж.ПометкаУдаления";
	Запрос.УстановитьПараметр("Ссылка", ПромоКодСсылка);				
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Структура.Вставить("ДоступенВРознице", Истина);
	Иначе
		Структура.Вставить("ДоступенВРознице", Ложь);
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьЦену(ТипЦенСсылка)
	
	Если ТипЦенСсылка.Код = "000000004" Тогда //Розничная цена HARD CODE
		Возврат Истина;	
	КонецЕсли;	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ПромоКодПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		НСтр("ru = 'Поле ""Тип цен"" не заполнено.'"),
		Объект,
		"Объект.ТипЦен");
		Объект.ПромоКод = Неопределено;			
		Возврат;			
	КонецЕсли;
	
	Если НЕ ПроверитьЦену(Объект.ТипЦен) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		НСтр("ru = 'Установлена цена отличная от ""Розничной"".'"),
		Объект,
		"Объект.ТипЦен");
		Объект.ПромоКод = Неопределено;
		Возврат;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ПромоКод) Тогда
		ДанныеПромоКода = ПолучитьДанныеПромокода(Объект.ПромоКод);
		
		Если ДанныеПромоКода.ДоступенВРознице = Ложь Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Промо код: " +Объект.ПромоКод+ " не может использоваться в рознице.'"),
			Объект,
			"Объект.ПромоКод");
			Объект.ПромоКод = Неопределено;			
			Возврат;
		КонецЕсли;
		
		Если НЕ ДанныеПромоКода.Активен Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Промо код: " +Объект.ПромоКод+ " не активен.'"),
			Объект,
			"Объект.ПромоКод");
			Объект.ПромоКод = Неопределено;			
			Возврат;	
		КонецЕсли;
		
		Если ТекущаяДата() > КонецДня(ДанныеПромоКода.СрокПромоКодаДо)  Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Промо код: " +Объект.ПромоКод+ " действителен до: " +КонецДня(ДанныеПромоКода.СрокПромоКодаДо) + "'"),
			Объект,
			"Объект.ПромоКод");
			Объект.ПромоКод = Неопределено;			
			Возврат;	
		КонецЕсли;		
		
			Для Каждого Строка Из Объект.Товары Цикл
				Строка.ПроцентАвтоматическойСкидки = ДанныеПромоКода.ПроцентСкидки;  
			КонецЦикла;			
	Иначе
		Для Каждого Строка Из Объект.Товары Цикл
			Строка.ПроцентАвтоматическойСкидки = 0;
			Строка.СуммаАвтоматическойСкидки = 0;
		КонецЦикла;
	КонецЕсли;
	ПриИзмененииРеквизитаВлияющегоНаТабличнуюЧасть(СтруктураКолонокТовары, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученоАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	//СтандартнаяОбработка = Ложь;
	//
	//врНаличные = Число(Текст);
	//ПодключитьОбработчикОжидания("ОбработатьВызовСдачи", 2 ,Истина);
	
	//тСдача = Число(Текст) - Объект.Товары.Итог("Сумма");
	//тСдача = врНаличные - Объект.Товары.Итог("Сумма");
	//Сдача = ?(тСдача > 0, тСдача, 0);
	//Наличные = Число(Текст);
		
КонецПроцедуры

//&НаСервере
//Функция НайтиОплатуНаличными()
//	
//	Строки = Объект.Оплаты.НайтиСтроки(Новый Структура("ТипОплаты", Перечисления.ТипОплаты.Наличные));
//	Если Строки.Количество() Тогда
//		Возврат Строки[0].Сумма;
//	КонецЕсли;
//	
//	Возврат Неопределено;
//	
//КонецФункции

&НаКлиенте
Процедура СуммаОплатыПриИзменении()
	Недостача = Объект.Оплаты.Итог("Сумма") - Объект.Товары.Итог("Сумма");	
КонецПроцедуры

&НаКлиенте
Процедура Таблица1СуммаПриИзменении(Элемент)
		
	СуммаОплатыПриИзменении();	
	ПроверитьСертификат();
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатыПослеУдаления(Элемент)
	
	СуммаОплатыПриИзменении();
		
КонецПроцедуры

&НаСервере
Функция ПолучитьНоминалПодарочнойКарты(Карта)
	Возврат Справочники.ПодарочныеКарты.СуммаПоНоминалу(Карта.Номинал);
КонецФункции

&НаКлиенте
Процедура ЗаполнитьРучСкидку(Команда)
	
	ДиалогиСПользователем.ЗаполнитьРучСкидку(Объект.Товары, СтруктураКолонокТовары);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтавкуНДС(Команда)
	
	ДиалогиСПользователем.ЗаполнитьСтавкуНДС(Объект.Товары, СтруктураКолонокТовары);

КонецПроцедуры

// ИЗМЕНЕНИЕ РЕКВИЗИТОВ

&НаСервере
Процедура ПриИзмененииРеквизитаВлияющегоНаТабличнуюЧасть(СтруктураКолонокТовары, ПересчитыватьЦену = Истина)
	
	ФункцииФормДокументов.ПересчитатьСуммыТабличныхЧастей(Объект.Товары, СтруктураКолонокТовары);
	
КонецПроцедуры 
 

//&НаСервере
//Процедура ПартнерПриИзмененииНаСервере(СтруктураКолонокТовары)
//	
//	// заполним зависимые реквизиты
//	СтруктураРеквизитов = ФункцииФормДокументов.ПартнерПриИзменении(Объект,,Ложь);
//		
//	ФункцииФормДокументов.ОбновитьСтруктуруКолонокТоварыПоСтруктуре( 
//			СтруктураКолонокТовары, 
//			СтруктураРеквизитов);

//	Если Объект.Товары.Количество() Тогда
//		// проверим есть ли акционные товары для нового партнера		
//		РаботаСНоменклатурой.ПересчитатьАкциюДляТоваров(Объект.Партнер, Объект.ТипЦен, Объект.Товары, СтруктураКолонокТовары, Объект.Валюта, Ложь);
//		// в соответствии с полученными данными по акции (вариант расчета стал известен) проставим процент скидки
//		ЗаполнитьПроцентАвтоматическойСкидки();
//		// пересчитаем товары
//    	ПриИзмененииРеквизитаВлияющегоНаТабличнуюЧасть(СтруктураКолонокТовары, Ложь); КонецЕсли;
//		
//	ДолгПарнера = ДенежныеСредства.ПолучитьДолгПартнера(Объект.Партнер);
//	
//КонецПроцедуры
//	
//&НаКлиенте
//Процедура ПартнерПриИзменении(Элемент)
//	
//	ПартнерПриИзмененииНаСервере(СтруктураКолонокТовары);
//	СохранитьТекущиеЗначенияПараметров();
//	Элементы.Купоны.Доступность = ПродажаФизЛицу();
//	
//КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере(СтруктураКолонокТовары)
	Объект.Партнер = Объект.Контрагент.Партнер;
	
	СтруктураРеквизитов = ФункцииФормДокументов.КонтрагентПриИзменении(Объект, Ложь);
	
	ФункцииФормДокументов.ОбновитьСтруктуруКолонокТоварыПоСтруктуре( 
			СтруктураКолонокТовары, 
			СтруктураРеквизитов);
	
	Если Объект.Товары.Количество() Тогда
		// проверим есть ли акционные товары для нового партнера		
		РаботаСНоменклатурой.ПересчитатьАкциюДляТоваров(Объект.Контрагент, Объект.ТипЦен, Объект.Товары, СтруктураКолонокТовары, Объект.Валюта, Ложь);
		// в соответствии с полученными данными по акции (вариант расчета стал известен) проставим процент скидки
		ЗаполнитьПроцентАвтоматическойСкидки();
		// пересчитаем товары
    	ПриИзмененииРеквизитаВлияющегоНаТабличнуюЧасть(СтруктураКолонокТовары, Ложь);
	КонецЕсли;
		
	ДолгПартнера = ДенежныеСредства.ПолучитьДолгКонтрагента(Объект.Контрагент);

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииНаСервере(СтруктураКолонокТовары);
	
	СохранитьТекущиеЗначенияПараметров();
	Элементы.Купоны.Доступность = ПродажаФизЛицу();	
КонецПроцедуры

&НаКлиенте
Функция ПродажаФизЛицу()
	
	Возврат Объект.Контрагент.Пустая() ИЛИ КонтрагентФизЛицо();
	
КонецФункции

&НаСервере
Функция КонтрагентФизЛицо()
	
	Возврат Объект.Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо
	
КонецФункции

&НаКлиенте
Процедура СохранитьТекущиеЗначенияПараметров()
	
	// сохраняем текущие значения параметров
	
	СтруктураКолонокТовары.стТипЦен = Объект.ТипЦен;
	СтруктураКолонокТовары.стУчитыватьНДС = Объект.УчитыватьНДС;
	СтруктураКолонокТовары.стСуммаВключаетНДС = СтруктураКолонокТовары.СуммаВключаетНДС;
	СтруктураКолонокТовары.стВалюта = СтруктураКолонокТовары.Валюта;
		
КонецПроцедуры



&НаСервере 
Функция ПолучитьПользовательскиеНастройкиОтчета(ПользовательскиеНастроки, НастройкиОтбора) 
	
	Отчет = Отчеты.ВзаиморасчетыСПартнером.Создать();
	ПользовательскиеНастроки = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки; 
	НастройкиОтбора = Отчет.КомпоновщикНастроек.Настройки.Отбор;
	
КонецФункции 
&НаСервереБезКонтекста 
Процедура УстановитьЗначениеПользовательскойНастройки(Настройки, НастройкиОтбора, Имя, Значение, Использование = Истина)
	
	Для Каждого Элемент ИЗ НастройкиОтбора.Элементы Цикл
			
		Если	Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Имя) Тогда
				настройкаИД = Элемент.ИдентификаторПользовательскойНастройки;
		КонецЕсли;
	КонецЦикла;
		
	Для Каждого Элемент Из Настройки.Элементы Цикл
		Если ТипЗнч(Элемент) = Тип("ЭлементОтбораКомпоновкиДанных") И Элемент.ИдентификаторПользовательскойНастройки = настройкаИД Тогда
			
				Элемент.ПравоеЗначение 	= Значение;
				Элемент.Использование 	= Использование;
		КонецЕсли
	КонецЦикла;

КонецПроцедуры 
&НаКлиенте
Процедура ДолгПартнераНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОтчета = Новый Структура("СформироватьПриОткрытии, ПользовательскиеНастройки", Истина); 
	НастройкиОтбора = "";
	ПолучитьПользовательскиеНастройкиОтчета(ПараметрыОтчета.ПользовательскиеНастройки, НастройкиОтбора); 

	//УстановитьЗначениеПользовательскойНастройки(ПараметрыОтчета.ПользовательскиеНастройки, НастройкиОтбора, "Партнер", 		Объект.Партнер); 
	//УстановитьЗначениеПользовательскойНастройки(ПараметрыОтчета.ПользовательскиеНастройки, НастройкиОтбора, "Организация",	Объект.Касса.Организация, 	Ложь);
	УстановитьЗначениеПользовательскойНастройки(ПараметрыОтчета.ПользовательскиеНастройки, НастройкиОтбора, "Контрагент", 	Объект.Контрагент, 	Ложь);
	
	ОткрытьФорму("Отчет.ВзаиморасчетыСПартнером.Форма", ПараметрыОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	УправлениеВидимостьюДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРквизитыДокумента(Команда)
	
	ОткрытьФорму("Документ.ЧекККМ.Форма.ФормаИзмененияРеквизитов",, 
			ЭтаФорма,,,,,);

КонецПроцедуры

&НаКлиенте
Процедура ТипЦенПриИзменении(Элемент)
	
	СтруктураКолонокТовары.Вставить("ТипЦен", Объект.ТипЦен);
	
	Если ФункцииФормДокументов.ДиалогПриИзмененииТипаЦен(Объект.Товары.Количество(), СтруктураКолонокТовары, Объект.ТипЦен) Тогда
	//Функция ДиалогПриИзмененииТипаЦен(КолСтрокВТаблице = Неопределено, СтруктураКолонокТовары, ТипЦен)	
		ПриИзмененииРеквизитаВлияющегоНаТабличнуюЧасть(СтруктураКолонокТовары);
		
	КонецЕсли;
	
	СтруктураКолонокТовары.Вставить("стТипЦен", Объект.ТипЦен);

КонецПроцедуры

&НаКлиенте
Процедура ПроцентАвтоматическойСкидкиПриИзменении(Элемент)
	ФункцииФормДокументов.ПроцентАвтоматическойСкидкиПриИзменении(Элементы.Товары, СтруктураКолонокТовары);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Получение штрих кода от сканера штрих кода
	
	Если ИмяСобытия = "ПолученШтрихкод" Тогда
		ВнешнееОборудование.ОбработатьДобавлениеШтрихКодаВДокумент(Параметр, Объект.Товары, Элементы.Товары, СтруктураКолонокТовары); КонецЕсли;
	
КонецПроцедуры

// КОРЗИНА
#Если Не ВебКлиент Тогда
&НаСервере
Процедура ДобавитьИзКорзиныНаСервере(ИмяКомпа, СтруктураКолонокТовары, КолСтрок)
	
	МодульКорзины.ПолучитьТоварИзКорзины(Элементы.Товары, Объект.Товары, СтруктураКолонокТовары, ИмяКомпа, КолСтрок);
	
КонецПроцедуры
#КонецЕсли

#Если Не ВебКлиент Тогда
&НаКлиенте
Процедура ВставитьИзКорзины(Команда)
	
	КолСтрок = 0;
	ДобавитьИзКорзиныНаСервере(ИмяКомпьютера(), СтруктураКолонокТовары, КолСтрок);
	
	Если КолСтрок Тогда
		
		МодульКорзины.ОповеститьОВставкеТовараВДокумент(КолСтрок, Объект.Товары.Количество());
		
	Иначе
		
		МодульКорзины.ОповеститьЧтоНечегоДобавлять();
		
	КонецЕсли;
	

КонецПроцедуры
#КонецЕсли

#Если Не ВебКлиент Тогда
&НаСервере
Функция ПоложитьВКорзинуНаСервере(ВыделенныеИндексы, ИмяКомпа, КолВКорзине)
	
	Возврат МодульКорзины.ПоложитьТоварВКорзину(Объект.Товары, ВыделенныеИндексы, ИмяКомпа, КолВКорзине);
	
КонецФункции
#КонецЕсли

#Если Не ВебКлиент Тогда
&НаКлиенте
Процедура ДобавитьВКорзину(Команда)
	
	ВыделенныеИндексы 	= МодульКорзины.ПолучитьВыделенныеСтрокиТоваров(Элементы.Товары, Объект.Товары);
	КолВКорзине 		= 0;
	КолТовара			= ВыделенныеИндексы.Количество();
	
	
	Если КолТовара Тогда
		
		Если ПоложитьВКорзинуНаСервере(ВыделенныеИндексы, ИмяКомпьютера(), КолВКорзине) Тогда
			МодульКорзины.ОповеститьОПомещенииТовара(КолТовара, КолВКорзине);
		КонецЕсли;
		
	Иначе
		
		МодульКорзины.ОповеститьЧтоНечегоДобавлять();
				
	КонецЕсли;

КонецПроцедуры
#КонецЕсли

#Если Не ВебКлиент Тогда
&НаКлиенте
Процедура РедактироватьТоварВКорзине(Команда)
	
	ОткрытьФорму("РегистрСведений.Корзина.Форма.Форма");
	
КонецПроцедуры
#КонецЕсли

#Если Не ВебКлиент Тогда
&НаСервере
Функция ОчиститьНаСервере(ИмяКомпа)
	
	Возврат МодульКорзины.ОчиститьКорзину(ИмяКомпа);
	
КонецФункции
#КонецЕсли

#Если Не ВебКлиент Тогда
&НаКлиенте
Процедура ОчиститьКорзину(Команда)
	
	Если ОчиститьНаСервере(ИмяКомпьютера()) Тогда
		
		МодульКорзины.ОповеститьЧтоКорзинаОчищена();
		
	КонецЕсли;

КонецПроцедуры
#КонецЕсли

&НаСервере
Процедура ПроверитьИУстановитьХреновуСтатью()
	
	Если Объект.СтатьяДДС.Пустая() Тогда
		Объект.СтатьяДДС = ?(Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат, 
			Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("000000014"), 
			Константы.СтатьяУчетаДенежныхСредствПоЧекамККМ.Получить()) КонецЕсли;

	
КонецПроцедуры

&НаКлиенте
Процедура КупонПриИзменении(Элемент)
	ПрименитьКупон();
КонецПроцедуры

&НаСервере
Процедура ПрименитьКупон()
	Запрос = Новый Запрос("
	|:
	|ВЫБРАТЬ
	|	Сумма,
	|	Порог
	|ИЗ
	|	РегистрСведений.СкидкиПоКупонам
	|ГДЕ 
	|	Купон = &Купон И 
	|	ВЫБОР 
	|	КОГДА Товар ССЫЛКА Справочник.Номенклатура 
	|	ТОГДА Товар В (&Товары)
	|						
	|	КОГДА Товар ССЫЛКА Справочник.ЦеновыеГруппы 
	|	ТОГДА Товар В (ВЫБРАТЬ ЦеноваяГруппа ИЗ РегистрСведений.ЦеноваяГруппаТовара ГДЕ Номенклатура В (&Товары))
	|	КОНЕЦ
	|");
	
	Запрос.УстановитьПараметр("Товары", Объект.Товары.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
	
	Выборка = Запрос.Выполнить().Выбрать();	
	
	//Если Выборка.Следующий() Тогда
	//	
	//	Порог = Выборка.Порог;
	//	
	//	Если Объект.Товары.Итог("Сумма") >= Порог Тогда
	//		 СуммаСкидки = Выборка.Сумма;
		
КонецПроцедуры


#Область Информация // о товаре

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	// информация о товаре
	ОбработатьОтображениеИнформацииОТоваре()	
	 	
КонецПроцедуры
&НаСервере
Процедура ОбработатьОтображениеИнформацииОТоваре() Экспорт 
	РаботаСНоменклатурой.ОбработатьОтображениеИнформацииОТоваре(ЭтаФорма, "Товары", "Объект.Товары");
КонецПроцедуры

&НаКлиенте
Процедура ИнфТовараТекстHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	РаботаСНоменклатуройКлиент.ИнфТовараТекстHTMLПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры
&НаКлиенте
Процедура ИнфТовараЗаголовокHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	РаботаСНоменклатуройКлиент.ИнфТовараЗаголовокHTMLПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка, "Товары", "Объект.Товары");
КонецПроцедуры

 &НаКлиенте
Процедура ПоказатьСкрытьИнфОТоваре(Команда)
	РаботаСНоменклатуройКлиент.ПоказатьСкрытьИнфОТоваре(ЭтаФорма);
КонецПроцедуры
&НаКлиенте
Процедура НастройкаИнфОТоваре(Команда) 
	РаботаСНоменклатуройКлиент.НастройкаИнфОТоваре(ЭтаФорма, "Товары", "Объект.Товары");
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Объект.Продавец.Пустая() И НЕ КэшируемыеФункции.ЭтоПолныеПрава() Тогда
		
	 	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Поле ""Продавец"" не заполнено.'"),
					Объект,
					"Объект.Продавец");

		Отказ = Истина;
		
	КонецЕсли;

КонецПроцедуры

//#Область Партии

//&НаСервере
//Процедура ЗаполнитьПартииНаСервере(СтруктураКолонокТовары)
//	
//	МодульПартий.РазнестиПартииВТаблицеМетодомFIFO(Объект.Товары, Объект.Склад, СтруктураКолонокТовары, ?(Объект.Проведен, Объект.Дата, Неопределено));
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ЗаполнитьПартии(Команда)
//	
//	ЗаполнитьПартииНаСервере(СтруктураКолонокТовары);
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ОчиститьИЗаполнитьПартии(Команда)
//	
//	КонвертацияТипов.ВыполнитьВыражениеВКаждойСтрокеТаблицы(Объект.Товары, "Строка.Партия = Неопределено");
//	ЗаполнитьПартииНаСервере(СтруктураКолонокТовары);
//	
//КонецПроцедуры

//#КонецОбласти

#Область СтатьяДДС

&НаКлиенте
Процедура СтатьяДДСПриИзменении(Элемент)
	
	СтатьяДДСПриИзмененииСервер();
	//ФункцииФормДокументов.ПриИзмененииСтатьиДДС(Объект.СтатьяДДС, Объект.СтатьяДДСБух);
	
КонецПроцедуры

&НаСервере
Процедура СтатьяДДСПриИзмененииСервер()
	ФункцииФормДокументов.ПриИзмененииСтатьиДДС(Объект.СтатьяДДС, Объект.СтатьяДДСБух);
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДДСБухПриИзменении(Элемент)
	
	ФункцииФормДокументов.ПриИзмененииСтатьиДДС(Объект.СтатьяДДСБух, Объект.СтатьяДДС);
	
КонецПроцедуры

#КонецОбласти


#Область ККТ

&НаКлиенте
Процедура ККТПробить(Команда)
	ПробитьЧекПоКассе();
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекПоКассе()
	Если НЕ ОбщегоНазначения.НужноПробитиеПоКассе(Объект.Касса) Тогда
		Закрыть();
		Возврат;
	КонецЕсли;
	Если НЕ Объект.Проведен Тогда
		ПоказатьПредупреждение(,"Для проведения чека по кассе он должен быть проведён в системе");
		Возврат;
	КонецЕсли;
	Если Объект.ПроведеноПоККТ Тогда
		ПоказатьПредупреждение(,"Чек уже был пробит по кассе");
		Возврат;
	КонецЕсли;
	
	Ошибка = "";
	ОбщиеПараметры = ПолучитьШаблонЧека(Ошибка);
	Если ОбщиеПараметры = Неопределено Тогда
		ПоказатьПредупреждение(,"Невозможно напечатать чек! Возникла ошибка: "+Ошибка);
		УстановитьВидимостьККТ();
		Возврат;
	КонецЕсли;
	ЭтаФорма.Доступность = Ложь; //При необходимости можно заблокировать интерфейс пользователя.
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ПечатьЧекаЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьФискализациюЧекаНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, ОбщиеПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЧекаЗавершение(РезультатВыполнения, Параметры) Экспорт
 
	ЭтаФорма.Доступность = Истина; //При необходимости разблокируем интерфейс пользователя.

	Если НЕ РезультатВыполнения.Результат Тогда
		ПоказатьПредупреждение(,"Не удалось пробить чек! Устраните проблему и нажмите кнопку ""ККТ Пробить"", находящуюся наверху."+Символы.ПС+Символы.ПС+"Техническая информация: "+РезультатВыполнения.ОписаниеОшибки);
		УправлениеВидимостьюДоступностью();
		УстановитьВидимостьККТ();
	Иначе
		//Получить номер чека и номер смены.
		ОбщегоНазначения.УстановитьРеквизитыЧекаПослеПроведения(Объект.Ссылка,РезультатВыполнения.ВыходныеПараметры[0],РезультатВыполнения.ВыходныеПараметры[1]);
		СобытияСистемы.ОповеститьОПробитииЧека(Объект.Ссылка);
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьШаблонЧека(Ошибка)

	// Общие параметры чека
	ОбщиеПараметры = МенеджерОборудованияКлиентСервер.ПараметрыОперацииФискализацииЧека();

	// Параметры установлены по умолчанию.
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
		ОбщиеПараметры.ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств"); // Перечисление "ТипыРасчетаДенежнымиСредствами"
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
		ОбщиеПараметры.ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств"); // Перечисление "ТипыРасчетаДенежнымиСредствами"
	Иначе
		Ошибка = "Неизвестный вид операции "+Объект.ВидОперации;
		Возврат Неопределено;
	КонецЕсли;
	ОбщиеПараметры.Электронно = Ложь; // Если Электронно = Истина, то чек будет предоставлен в элетронной форме, без печати.
	ОбщиеПараметры.Отправляет1СSMS   = Ложь; // SMS отправляет средствами 1C.
	ОбщиеПараметры.Отправляет1СEmail = Ложь; // Email отправляет средствами 1C.
	ОбщиеПараметры.ПокупательEmail = Неопределено;
	ОбщиеПараметры.ПокупательНомер = Неопределено;

	// Параметры необходимые для чека ЕНВД на принтере чеков
	ОбщиеПараметры.Кассир = Строка(Объект.Продавец);
	//ОбщиеПараметры.ОрганизацияНазвание = "ООО ""1C-СОФТ""";
	//ОбщиеПараметры.ОрганизацияИНН = "7709860400";
	//ОбщиеПараметры.ОрганизацияКПП = "770901001";
	//ОбщиеПараметры.НомерКассы = "00001";
	//ОбщиеПараметры.НомерЧека = "1";
	//ОбщиеПараметры.НомерСмены = "1";
	КодСистемы = ОбщегоНазначения.ПолучитьКодСистемыНалогообложения(Объект.Касса,Ошибка);
	Если КодСистемы = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	ОбщиеПараметры.КодСистемыНалогообложения = КодСистемы;

	Если Объект.Товары.Количество() = 0 Тогда
		Ошибка = "Нет товаров";
		Возврат Неопределено;
	КонецЕсли;
	
	ФункцииФормДокументов.РассчитатьДинамическиеКолонки(
					Объект.Товары,
					ФункцииФормДокументов.ПолучитьСтруктуруКолонокТовары(Элементы.Товары, Объект.СуммаВключаетНДС, Объект.ТипЦен,,,,Объект.УчитыватьНДС,,,Объект.Касса,,,Объект.Контрагент));
					
	Для Каждого ТекТовар Из Объект.Товары Цикл
		СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека(); 
		СтрокаПозицииЧека.Наименование = ПолучитьАртикул(ТекТовар.Номенклатура)+" "+ТекТовар.Номенклатура;
		СтрокаПозицииЧека.Количество = ТекТовар.Количество;
		СтрокаПозицииЧека.Цена = ТекТовар.Цена;
		СтрокаПозицииЧека.Сумма = ТекТовар.Сумма;
		СтрокаПозицииЧека.НомерСекции = ПолучитьНомерСекции(Объект.Касса);
		ТекСтавкаНДС = ОбщегоНазначения.ККТПолучитьСтавкуНДС(ТекТовар.СтавкаНДС,Ошибка);
		Если ТекСтавкаНДС = -1 Тогда
			Возврат Неопределено;
		КонецЕсли;
		СтрокаПозицииЧека.СтавкаНДС = ТекСтавкаНДС;
		ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
	КонецЦикла;
	
	Для Каждого ТекОплата Из Объект.Оплаты Цикл
		Если ТекОплата.Сумма = 0 Тогда Продолжить; КонецЕсли;
		СтрокаОплаты = Новый Структура();
		СтрокаОплаты.Вставить("Сумма", ТекОплата.Сумма);
		Если ТекОплата.ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипОплаты.Наличные") Тогда
			СтрокаОплаты.Вставить("Наименование", "Наличная оплата");
			СтрокаОплаты.Вставить("ТипОплаты", 0); 
		ИначеЕсли ТекОплата.ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипОплаты.БанковскаяКарта") Тогда
			СтрокаОплаты.Вставить("Наименование", "Платежная оплата");
			СтрокаОплаты.Вставить("ТипОплаты", 1); 
		//ИначеЕсли ТекОплата.ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипОплаты.Кредит") Тогда
		//	СтрокаОплаты.Вставить("Наименование", "Кредит");
		//	СтрокаОплаты.Вставить("ТипОплаты", 2); 
		ИначеЕсли ТекОплата.ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипОплаты.ПодарочныйСертификат") Тогда
			СтрокаОплаты.Вставить("Наименование", "Сертификат");
			СтрокаОплаты.Вставить("ТипОплаты", 3); 
		Иначе
			Ошибка = "Неправильно установлен тип оплаты!";
			Возврат Неопределено;
		КонецЕсли;
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЦикла;

	//СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыТекстовойСтрокиЧека("Накопление по карте: 234543443");
	//ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);

	//СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыШтрихкодВСтрокеЧека("EAN13", "2900001462105");
	//ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);

	Возврат ОбщиеПараметры;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьНомерСекции(Касса)
	Если Касса.НомерСекцииККТ>0 Тогда
		Возврат Касса.НомерСекцииККТ;
	Иначе
		Возврат 1;
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьАртикул(Номенклатура)
	Возврат Номенклатура.Артикул;
КонецФункции

&НаСервере
Процедура УстановитьВидимостьККТ()
	Если Не Объект.Ссылка.Пустая() И Объект.Касса.ПродажаПоККТ И НЕ Объект.ПроведеноПоККТ Тогда
		Элементы.ККТПробить.Видимость = Истина;
	Иначе
		Элементы.ККТПробить.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ПодарочныеКарты

&НаКлиенте
Процедура ТаблицаКартКартаПриИзменении(Элемент)
	Если Элементы.ТаблицаКарт.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	РезультатПроверки = ПроверитьКартуСервер(Элементы.ТаблицаКарт.ТекущиеДанные.Карта);
	Если ЗначениеЗаполнено(РезультатПроверки) Тогда
		ПоказатьПредупреждение(,РезультатПроверки);
		Элементы.ТаблицаКарт.ТекущиеДанные.Карта = ПредопределенноеЗначение("Справочник.ПодарочныеКарты.ПустаяСсылка");
		Элементы.ТаблицаКарт.ТекущиеДанные.Сумма = 0;
		Возврат;
	КонецЕсли;
	Элементы.ТаблицаКарт.ТекущиеДанные.Сумма = ТаблицаКартКартаПриИзмененииНаСервере(Элементы.ТаблицаКарт.ТекущиеДанные.Карта);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьКартуСервер(Карта)
	Если Карта.СтатусКарты = Перечисления.ПодарочныеКарты_Статус.Активирована Тогда
		Возврат "Ошибка! Данная карта уже Активирована. Нельзя Активировать карту несколько раз!";
	ИначеЕсли Карта.СтатусКарты = Перечисления.ПодарочныеКарты_Статус.Реализована Тогда
		Возврат "Ошибка! Данная карта уже Реализована. Карту повторно использовать нельзя!";
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция ТаблицаКартКартаПриИзмененииНаСервере(Карта)
	Возврат Справочники.ПодарочныеКарты.СуммаПоНоминалу(Карта.Номинал);
КонецФункции

&НаСервере
Процедура АктивироватьРеализоватьПодарочнуюКарту()
	Для Каждого ТекКарта Из Объект.ПодарочныеКарты Цикл
		текОбъект = ТекКарта.Карта.ПолучитьОбъект();
		текОбъект.ИмяПокупателя = ТекКарта.ИмяПокупателя;
		текОбъект.НомерТелефонаПокупателя = ТекКарта.НомерТелефона;
		текОбъект.ОткудаПришел = ТекКарта.ОткудаПришел;
		текОбъект.ДокументАктивации = Объект.Ссылка;
		текОбъект.ДатаАктивации = ТекущаяДата();
		текОбъект.МестоАктивации = Объект.Касса.Склад;
		текОбъект.СтатусКарты = Перечисления.ПодарочныеКарты_Статус.Активирована;
		текОбъект.Записать();		
	КонецЦикла;
	ОплатыСертификатом = Объект.Оплаты.НайтиСтроки(Новый Структура("ТипОплаты",Перечисления.ТипОплаты.ПодарочныйСертификат));
	Для Каждого ТекКарта Из ОплатыСертификатом Цикл
		текОбъект = ТекКарта.ПодарочныйСертификат.ПолучитьОбъект();
		текОбъект.СтатусКарты = Перечисления.ПодарочныеКарты_Статус.Реализована;
		текОбъект.ДокументРеализации = Объект.Ссылка;
		текОбъект.ДатаРеализации = ТекущаяДата();
		текОбъект.МестоРеализации = Объект.Касса.Склад;
		текОбъект.Записать();
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура Таблица1ВидОплатыПриИзменении(Элемент)
	ТекДанные = Элементы.Оплаты.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТекДанные.ТипОплаты <> ПредопределенноеЗначение("Перечисление.ТипОплаты.ПодарочныйСертификат") И ТекДанные.ПодарочныйСертификат <> ПредопределенноеЗначение("Справочник.ПодарочныеКарты.ПустаяСсылка") Тогда
		ТекДанные.ПодарочныйСертификат = ПредопределенноеЗначение("Справочник.ПодарочныеКарты.ПустаяСсылка");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОплатыПоле1ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Оплаты.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ТипОплаты <> ПредопределенноеЗначение("Перечисление.ТипОплаты.ПодарочныйСертификат") Тогда
		ПоказатьПредупреждение(,"Выбрать подарочную карту можно только при виде оплаты - Подарочный сертификат!");
		ТекущиеДанные.ПодарочныйСертификат = ПредопределенноеЗначение("Справочник.ПодарочныеКарты.ПустаяСсылка");
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Сумма > ПолучитьНоминалПодарочнойКарты(ТекущиеДанные.ПодарочныйСертификат) Тогда
		ПоказатьПредупреждение(,"Указанная сумма "+ТекущиеДанные.Сумма+" превышает номинал карты!",,"Предупреждение");
		ТекущиеДанные.Сумма = ПолучитьНоминалПодарочнойКарты(ТекущиеДанные.ПодарочныйСертификат);
		СуммаОплатыПриИзменении();
		Возврат;
	КонецЕсли;
	Если ТекущиеДанные.Сумма = 0 Тогда 
		ТекущиеДанные.Сумма = ПолучитьНоминалПодарочнойКарты(ТекущиеДанные.ПодарочныйСертификат);
		СуммаОплатыПриИзменении();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСертификат()
	ТекущиеДанные = Элементы.Оплаты.ТекущиеДанные;
	
	Если ТекущиеДанные.ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипОплаты.ПодарочныйСертификат") Тогда
		Если ТекущиеДанные.Сумма > ПолучитьНоминалПодарочнойКарты(ТекущиеДанные.ПодарочныйСертификат) Тогда
			ПоказатьПредупреждение(,"Указанная сумма "+ТекущиеДанные.Сумма+" превышает номинал карты!",,"Предупреждение");
			ТекущиеДанные.Сумма = ПолучитьНоминалПодарочнойКарты(ТекущиеДанные.ПодарочныйСертификат);
			СуммаОплатыПриИзменении();
			Возврат;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти