

&НаКлиенте
Процедура ДополнительныеРеквизиты(Команда)
	ФункцииФормДокументов.ОткрытьОбщиеРеквизиты(ЭтаФорма);
КонецПроцедуры


Процедура ЗполнитьОстаткиПоЯчейкам(Период = Неопределено)
	
	Схема = Документы.Инвентаризация.ПолучитьМакет("МакетЯчейки"); 

	Склад = Схема.Параметры.Найти("Склад");
	Если Склад <> Неопределено Тогда
		Склад.Значение = Объект.Склад;
	КонецЕсли;
	
	АдресСхемыКомпоновкиНовый = ПоместитьВоВременноеХранилище(Схема, ЭтаФорма.УникальныйИдентификатор);
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиНовый);
	
	НовыйКомпоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	НовыйКомпоновщик.Инициализировать(ИсточникНастроек);
	
	НовыйКомпоновщик.ЗагрузитьНастройки(КомпоновщикНастроек.ПолучитьНастройки());
	Если ЗначениеЗаполнено(Период) Тогда
		НовыйКомпоновщик.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Период", Период); КонецЕсли;	
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных; 
   	Макет = КомпоновщикМакета.Выполнить(Схема, НовыйКомпоновщик.Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений")); 

	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных; 
	ПроцессорКомпоновки.Инициализировать(Макет); 

	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений; 
	
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Артикул", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(25)));
	ТЗ.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТЗ.Колонки.Добавить("КоличествоУчет", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ТЗ.Колонки.Добавить("Ячейка", Новый ОписаниеТипов("СправочникСсылка.Ячейки"));
	ТЗ.Колонки.Добавить("Разница", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));

	//ТЗ = РеквизитФормыВЗначение("Товары");
	
	ПроцессорВывода.УстановитьОбъект(ТЗ); 
	ПроцессорВывода.Вывести(ПроцессорКомпоновки); 
	
	Элементы.ТоварыЯчейки.Видимость = Истина;
	
	Объект.Товары.Загрузить(ТЗ);
	//ЗначениеВРеквизитФормы(ТЗ, "Товары");
	
КонецПроцедуры

Процедура ЗаполнитьОстаткиПоСкладам(Период = Неопределено)
	Схема = Документы.Инвентаризация.ПолучитьМакет("Макет"); 
   	
	Склад = Схема.Параметры.Найти("Склад");
	Если Склад <> Неопределено Тогда
		Склад.Значение = Объект.Склад;
	КонецЕсли;
	

	АдресСхемыКомпоновкиНовый = ПоместитьВоВременноеХранилище(Схема, ЭтаФорма.УникальныйИдентификатор);
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиНовый);
	
	НовыйКомпоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	НовыйКомпоновщик.Инициализировать(ИсточникНастроек);
	          
	НовыйКомпоновщик.ЗагрузитьНастройки(КомпоновщикНастроек.ПолучитьНастройки());
	Если ЗначениеЗаполнено(Период) Тогда
		НовыйКомпоновщик.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Период", Период); КонецЕсли;	
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных; 
   	Макет = КомпоновщикМакета.Выполнить(Схема, НовыйКомпоновщик.Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений")); 

	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных; 
	ПроцессорКомпоновки.Инициализировать(Макет); 

	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений; 
	
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Артикул", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(25)));
	ТЗ.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТЗ.Колонки.Добавить("КоличествоУчет", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ТЗ.Колонки.Добавить("Разница", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));

	//ТЗ.Колонки.Добавить("Ячейка", Новый ОписаниеТипов("СправочникСсылка.Ячейки"));
	
	//ТЗ = РеквизитФормыВЗначение("Товары");
	
	ПроцессорВывода.УстановитьОбъект(ТЗ); 
	ПроцессорВывода.Вывести(ПроцессорКомпоновки); 
	
	Элементы.ТоварыЯчейки.Видимость = Ложь;
	
	Объект.Товары.Загрузить(ТЗ);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОстатки(Период = Неопределено)
	
	Если СкладЯчеестый(Объект.Склад) Тогда
		ЗполнитьОстаткиПоЯчейкам(Период);
	Иначе
		ЗаполнитьОстаткиПоСкладам(Период);
	КонецЕсли
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОстаткам(ПоказатьВводДаты = Ложь)

	Если ПоказатьВводДаты Тогда
		ПоказатьВводДаты(Новый ОписаниеОповещения("ВыборДатыЗаполненияОстатков", ЭтаФорма), , "Введите дату");
	Иначе
		ЗаполнитьОстатки();
		
	КонецЕсли;

КонецПроцедуры
&НаКлиенте
Процедура ВыборДатыЗаполненияОстатков(Результат, Параметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		ЗаполнитьОстатки(Результат);
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура Заполнить(Команда, ПоказатьВводДаты = Ложь)
	
	Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда ОбщиеФункции.СообщитьТекст("Для отображения остатков необходимо заполнить поле ""Склад""", "Объект.Склад"); Возврат; КонецЕсли;
	
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		ПоказатьВопрос(Новый ОписаниеОповещения("ОкончаниеВыбораЗаполнитьОстатки", ЭтаФорма, ПоказатьВводДаты), ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		
		ЗаполнитьПоОстаткам(ПоказатьВводДаты);	
		
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ЗаполнитьНаДату(Команда)
	
	Заполнить(Команда, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеВыбораЗаполнитьОстатки(Результат, ПоказатьВводДаты) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ЗаполнитьПоОстаткам(ПоказатьВводДаты);
		
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Функция СкладЯчеестый(Склад)
	
	Возврат Склад.Ячеестый;
	
КонецФункции

&НаСервере
Процедура ИнициализироватьНастройки(Ячейки)
	
	СхемаКомпоновкиДанных = ?(Ячейки, Документы.Инвентаризация.ПолучитьМакет("МакетЯчейки"), Документы.Инвентаризация.ПолучитьМакет("Макет"));		
	
	Настройки = КомпоновщикНастроек.Настройки;
	
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, ЭтаФорма.УникальныйИдентификатор);
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных);
	КомпоновщикНастроек.Инициализировать(ИсточникНастроек);

	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
КонецПроцедуры


&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	ИнициализироватьНастройки(СкладЯчеестый(Объект.Склад));

КонецПроцедуры

&НаСервере
Процедура УстановитьЗначениеНастройкиОтбора(Имя, Значение, Использование = Истина)
		Для Каждого Элемент Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
			Если	Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Имя) Тогда	
					Элемент.ПравоеЗначение 	= Значение;
					Элемент.Использование 	= Использование;
			КонецЕсли
		КонецЦикла;
КонецПроцедуры 

#Область Типовые

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// информация о товаре
	РаботаСНоменклатурой.ДобавитьОперативнуюИнформациюОТоваре(ЭтаФорма);
	     
	ИнициализироватьНастройки(Объект.Склад.Ячеестый);
	
КонецПроцедуры                                                          

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Автосохранение
	
	Если Не ТолькоПросмотр Тогда 
		Если АвтосохранениеКлиент.ИницилизироватьСохранение(ЭтаФорма) Тогда
			
			ЗагрузитьДанныеАвтосохранения(""); 
			Модифицированность = Истина; КонецЕсли; КонецЕсли;
	
	ЗаполнитьДинамическиеКолонки();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Автосохранение
	Если Не Отказ И Объект.Ссылка.Пустая() Тогда АвтосохранениеСервер.УдалитьАвтоСохранение(ИмяФормы, Объект.Ссылка) КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	// Автосохранение
	АвтосохранениеСервер.УдалитьАвтоСохранение(ИмяФормы, Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область Автосохранение

&НаСервере
Процедура ЗагрузитьДанныеАвтосохранения(ДанныеДляПодбора)
	
	АвтосохранениеСервер.СчитатьДанныеФормыИУдалитьСохранение(ЭтаФорма, ДанныеДляПодбора)
	
КонецПроцедуры
&НаСервере
Функция АвтосохранениеСервер(ЕстьДамп)
	
	Возврат АвтосохранениеСервер.СохранитьДампФормы(ЭтаФорма, ЕстьДамп);
	
КонецФункции
&НаКлиенте
Процедура Автосохранение()
	
	Перем ЕстьДамп;
	
	Сохранилось = АвтосохранениеСервер(ЕстьДамп);
	
	АвтосохранениеКлиент.ПроизошлоАвтосохранение(Сохранилось, ЕстьДамп, Объект.Ссылка);
	
КонецПроцедуры
&НаСервере
Функция ПолучитьДамп()
	
	Возврат АвтосохранениеСервер.ПолучитьДамп(ЭтаФорма);

КонецФункции
	
#КонецОбласти

#Область Информация_о_отваре

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	// информация о товаре
	Если ЭтаФорма.ИнфТовраОтображать Тогда
		ОбработатьОтображениеИнформацииОТоваре();
	КонецЕсли;
	 	
КонецПроцедуры
&НаСервере
Процедура ОбработатьОтображениеИнформацииОТоваре() Экспорт
	РаботаСНоменклатурой.ОбработатьОтображениеИнформацииОТоваре(ЭтаФорма, ,"Объект.Товары");
КонецПроцедуры

&НаКлиенте
Процедура ИнфТовараТекстHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	РаботаСНоменклатуройКлиент.ИнфТовараТекстHTMLПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры
&НаКлиенте
Процедура ИнфТовараЗаголовокHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	РаботаСНоменклатуройКлиент.ИнфТовараЗаголовокHTMLПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка, , "Объект.Товары");
КонецПроцедуры

 &НаКлиенте
Процедура ПоказатьСкрытьИнфОТоваре(Команда)
	РаботаСНоменклатуройКлиент.ПоказатьСкрытьИнфОТоваре(ЭтаФорма);
КонецПроцедуры
&НаКлиенте
Процедура НастройкаИнфОТоваре(Команда) 
	РаботаСНоменклатуройКлиент.НастройкаИнфОТоваре(ЭтаФорма, , "Объект.Товары");
КонецПроцедуры

#КонецОбласти

// РАЗНИЦА

&НаКлиенте
Процедура ПересчитатьРазницу(ТекущиеДанные = Неопределено)
	
	Если ТекущиеДанные = Неопределено Тогда	
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	КонецЕсли;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.Разница = ТекущиеДанные.Количество - ТекущиеДанные.КоличествоУчет;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	ПересчитатьРазницу();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУчетПриИзменении(Элемент)
	ПересчитатьРазницу();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДинамическиеКолонки()
	
	Для Каждого Строка Из Объект.Товары Цикл
		ПересчитатьРазницу(Строка);
	КонецЦикла;
	
	ЗаполнитьДинамическиеКолонкиСервер()
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДинамическиеКолонкиСервер()
	
	Для Каждого Строка Из Объект.Товары Цикл
		Строка.Артикул = Строка.Номенклатура.Артикул;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПрочитатьАртикул(Товар)
	Возврат Товар.Артикул;
КонецФункции

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
 	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.Артикул = ПрочитатьАртикул(ТекущиеДанные.Номенклатура);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФактПоУчету(Команда)
	
	Если Вопрос("Заполнить факт по данным учета?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
	
		Для Каждого Строка Из Объект.Товары Цикл
			
			Строка.Количество	= Строка.КоличествоУчет;
			Строка.Разница		= 0;
			
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыРазницаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.Количество = ТекущиеДанные.Разница + ТекущиеДанные.КоличествоУчет;
	КонецЕсли;
КонецПроцедуры




