
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДВ = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДВ.Фильтр =  "Эксель (*.xls)|*.xls*|Электронная таблица (*.ods)|*.ods*";
	
	Если ДВ.Выбрать() Тогда
		
		ИмяФайла = ДВ.ПолноеИмяФайла;
		Если Лев(ИмяФайла, 3) = "X:\" Тогда ИмяФайла = "\\corp\root\Обмен\" + Сред(ИмяФайла, 4); 
		ИначеЕсли Лев(ИмяФайла, 3) = "Z:\" Тогда ИмяФайла = "\\corp\root\Общие документы\" + Сред(ИмяФайла, 4); 
		КонецЕсли;
	КонецЕсли;


КонецПроцедуры
&НаСервере
Функция НайтиНоменклатуру(ЗначениеПолеПоиска, Количество, стрОшибки = "")
	
	Если 	  ПолеПоиска = 0 Тогда  КлючевоеПоле = "Артикул";
    ИначеЕсли ПолеПоиска = 1 Тогда  КлючевоеПоле = "Код";
	ИначеЕсли ПолеПоиска = 2 Тогда  КлючевоеПоле = "Код2";
	ИначеЕсли ПолеПоиска = 3 Тогда  КлючевоеПоле = "Наименование";
	ИначеЕсли ПолеПоиска = 4 Тогда  КлючевоеПоле = "АртикулПоставщика"; КонецЕсли;

	
	Запрос = Новый Запрос("ВЫБРАТЬ Артикул, Ссылка ИЗ Справочник.Номенклатура ГДЕ " + КлючевоеПоле + " = &ПолеПоиска");
	Запрос.УстановитьПараметр("ПолеПоиска", ЗначениеПолеПоиска);
	
	Попытка                      // в попытке, т.к. мало ли что подусунули в поле поиска...
		Рез = Запрос.Выполнить();
	Исключение
		стрОшибки = ОписаниеОшибки();
		Возврат Неопределено;
	КонецПопытки;
	
	Если НЕ Рез.Пустой() Тогда
		
		Выборка = Рез.Выбрать();
		Если Выборка.Следующий() Тогда
			
			Возврат Новый Структура("Номенклатура", Выборка.Ссылка);
		КонецЕсли;
		
	КонецЕсли;
	
	стрОшибки = "Не найдено ни одного товара со значением  " + КлючевоеПоле +  " = """ + ЗначениеПолеПоиска + """ в количестве " + Строка(Количество);
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьДанные(Таблица, Эксель, СтруктураКолонокТовары)
	
	стрОшибки = "";
	ЗагружатьКоличество = КолонкаКоличество > 0 И СтруктураКолонокТовары <> Неопределено И СтруктураКолонокТовары.ЕстьКоличество;
	
	Лист = Эксель.Worksheets(1);
	КолВоСтрок = Лист.Cells(1,1).SpecialCells(11).Row;
	
	Для Сч = 2 По КолВоСтрок Цикл // первая строка - заголовок
		
		СтрокаПолеПоиска = СокрЛП(Лист.Cells(СтрЗаменить(Сч,Символы.НПП,""), КолонкаАртикул).Value);
		
		Если ПустаяСтрока(СтрокаПолеПоиска) Тогда
			СписокСообщений.Добавить("Строка #" + Строка(СтрЗаменить(Сч,Символы.НПП,"")), "Строка #" + Строка(СтрЗаменить(Сч,Символы.НПП,"")) + ": Не указано значение поля поиска товара. Выгрузка данных по этой строке не произведена");
            Продолжить;
		КонецЕсли;
		
		Если ЗагружатьКоличество Тогда
			Попытка 
				СтрокаКоличество = Число(СокрЛП(Лист.Cells(СтрЗаменить(Сч,Символы.НПП,""), КолонкаКоличество).Value));
			Исключение
				СписокСообщений.Добавить("Строка #" + Строка(СтрЗаменить(Сч,Символы.НПП,"")), "Строка #" + Строка(СтрЗаменить(Сч,Символы.НПП,"")) + ": Колонка ""Количество"" - Ошибка преобразования значения ячейки к числовому типу данных: " + СтрокаПолеПоиска);
				Продолжить;
			КонецПопытки;
		КонецЕсли;
		
		Рез = НайтиНоменклатуру(СтрокаПолеПоиска, СтрокаКоличество, стрОшибки);
		Если Рез = Неопределено Тогда
			СписокСообщений.Добавить("Строка #" + Строка(СтрЗаменить(Сч,Символы.НПП,"")), "Строка #" + Строка(СтрЗаменить(Сч,Символы.НПП,"")) + " :" + стрОшибки);
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.Номенклатура= Рез.Номенклатура;
		Если ЗагружатьКоличество Тогда
			НоваяСтрока.Количество	= СтрокаКоличество; КонецЕсли;
		
		Если СтруктураКолонокТовары <> Неопределено Тогда	
			ФункцииФормДокументов.НоменклатураПриИзменении(НоваяСтрока, СтруктураКолонокТовары, НоваяСтрока); КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуExcel(СтруктураКолонокТовары = Неопределено)
	
	Если ПустаяСтрока(ИмяФайла) Тогда
		ОбщиеФункции.СообщитьТекст("Не выбран файл", "ИмяФайла", ЭтаФорма);
		Возврат;
	КонецЕсли;
		
	ЗагрузитьНовымСпособом();
	
	// Получим эксель
	//стрОшибки = "";	         
	//Эксель = COMФункцииДиалогов.ОткрытьФайлЭкселя(ИмяФайла, стрОшибки);
	//
	//Если Эксель = Неопределено Тогда
	//	ОбщиеФункции.СообщитьТекст(стрОшибки);
	//	Возврат;
	//КонецЕсли;
	                      
	//ЗагрузитьДанные(Таблица, Эксель, СтруктураКолонокТовары);
	
	
	//COMФункцииДиалогов.ЗакрытьЭксель(Эксель);
	Сообщить("Данные загружены.");

КонецПроцедуры

&НаКлиенте 
Процедура ЗагрузитьНовымСпособом()
	
	СписокСообщений.Очистить();
		
	ЕстьКоличество = СтруктураКолонокТовары <> Неопределено И СтруктураКолонокТовары.ЕстьКоличество;
	ВыполнитьЗагрузкуТабличногоДокумента(СтруктураКолонокТовары, КолонкаАртикул, КолонкаКоличество);

КонецПроцедуры

&НаСервере
Процедура ПрочитатьНовымСпособом();
	ТЗ = ЗагрузитьМетодом_1C836(ИмяФайла);
	
	//Отрисуем результ в табличном документе
	
	ТабличныйДокумент.Очистить();
	
	Макет = Документы.ЗаказПокупателя.ПолучитьМакет("Excel");
	Область = Макет.ПолучитьОбласть("ЗаголовокТаблицы|Колонка");
	
	Область.Параметры.ИмяКолонки = "Номер";
	ТабличныйДокумент.Вывести(Область);
	Сч = 1;
	Для Каждого Колонка Из ТЗ.Колонки Цикл Сч = Сч+1;
		Область.Параметры.ИмяКолонки = Строка(СтрЗаменить(Сч,Символы.НПП,""));
		ТабличныйДокумент.Присоединить(Область);
	КонецЦикла;
		
	Область = Макет.ПолучитьОбласть("СтрокаТаблицы|Колонка");
	Сч = 0;
	Для Каждого Строка Из ТЗ Цикл Сч = Сч+1;
		Область.Параметры.Значение = Строка(СтрЗаменить(Сч,Символы.НПП,""));
		ТабличныйДокумент.Вывести(Область);
		Для Каждого Колонка ИЗ ТЗ.Колонки Цикл
			Область.Параметры.Значение = Строка[Колонка.Имя];
			ТабличныйДокумент.Присоединить(Область);
	   КонецЦикла;
		
	КонецЦикла;
	КоличествоСтрок = Сч;
	//Если  ЕстьЦена Тогда ТабличныйДокумент.Присоединить(допОбласть); КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьExcel(Команда)
	ПрочитатьНовымСпособом();
КонецПроцедуры


&НаСервере
Процедура ВыполнитьЗагрузкуТабличногоДокумента(СтруктураКолонокТовары = Неопределено, КолонкаАртикул = 2, КолонкаКоличество = 3, КолонкаНомерСтроки = 1, КолонкаЦена = 4)
	
	ТаблицаВход = ПолучитьИзВременногоХранилища(АдресТоваровВХранилище);
	Таблица=ТаблицаВход.Скопировать();
//	УдалитьИзВременногоХранилища(АдресТоваровВХранилище); // сразу очистим память чтобы не занимать
	
	стрОшибки = "";
	ЗагружатьКоличество = СтруктураКолонокТовары <> Неопределено И СтруктураКолонокТовары.ЕстьКоличество;
	ЗагружатьЦену = СтруктураКолонокТовары <> Неопределено И СтруктураКолонокТовары.ЕстьКоличество И ЕстьЦена;
	КолонкаРекомКолич = 4 + Число(ЕстьЦена);
	
	Для Сч = 2 По КоличествоСтрок + 1 Цикл
		
		СтрокаПолеПоиска = ТабличныйДокумент.Область("R"+Строка(СтрЗаменить(Сч,Символы.НПП,""))+"C" + Строка(КолонкаАртикул)).Текст;
		
		Если ПустаяСтрока(СтрокаПолеПоиска) Тогда
			СписокСообщений.Добавить("Строка #" + Строка(СтрЗаменить(Сч-1,Символы.НПП,"")),"Строка #" + Строка(СтрЗаменить(Сч-1,Символы.НПП,"")) + ": Не указано поле поиска товара. Выгрузка данных по этой строке не произведена");
			ТабличныйДокумент.Область("R"+Строка(СтрЗаменить(Сч,Символы.НПП,""))+"C" + Строка(КолонкаНомерСтроки)).ЦветФона = WebЦвета.Красный;
			Продолжить;
		КонецЕсли;
		
		Если ЗагружатьКоличество ИЛИ ЗагрузитьРекомендуемоеКоличество Тогда
			
			Попытка 
				СтрокаКоличество = Число(ТабличныйДокумент.Область("R"+Строка(СтрЗаменить(Сч,Символы.НПП,""))+"C" + Строка(КолонкаКоличество)).Текст);
			Исключение
				//СписокСообщений.Добавить("Строка #" + Строка(Сч-1), "Строка #" + Строка(Сч-1) + ": Колонка ""Количество"" - Ошибка преобразования значения ячейки к числовому типу данных: " + СтрокаПолеПоиска);
				СписокСообщений.Добавить("Строка #" + Строка(СтрЗаменить(Сч-1,Символы.НПП,"")), "Строка #" + Строка(СтрЗаменить(Сч-1,Символы.НПП,"")) + ": Колонка ""Количество"" - Ошибка преобразования значения ячейки к числовому типу данных: " + СтрокаПолеПоиска);
				ТабличныйДокумент.Область("R"+Строка(СтрЗаменить(Сч,Символы.НПП,""))+"C" + Строка(КолонкаКоличество)).ЦветФона = WebЦвета.Красный;
				Продолжить;
			КонецПопытки;
			
		КонецЕсли;
		
		Если ЗагружатьЦену Тогда
			
			Попытка 
				СтрокаЦена = Число(ТабличныйДокумент.Область("R"+Строка(СтрЗаменить(Сч,Символы.НПП,""))+"C" + Строка(КолонкаЦена)).Текст);
			Исключение
				СписокСообщений.Добавить("Строка #" + Строка(СтрЗаменить(Сч-1,Символы.НПП,"")), "Строка #" + Строка(СтрЗаменить(Сч-1,Символы.НПП,"")) + ": Колонка ""Цена"" - Ошибка преобразования значения ячейки к числовому типу данных: " + СтрокаПолеПоиска);
				ТабличныйДокумент.Область("R"+Строка(СтрЗаменить(Сч,Символы.НПП,""))+"C" + Строка(КолонкаЦена)).ЦветФона = WebЦвета.Красный;
				Продолжить;
			КонецПопытки;
			
		КонецЕсли;
		
		Если ЗагрузитьРекомендуемоеКоличество Тогда
			
			Попытка 
				СтрокаРекомКолич = Число(ТабличныйДокумент.Область("R"+Строка(СтрЗаменить(Сч,Символы.НПП,""))+"C" + Строка(КолонкаРекомКолич)).Текст);
			Исключение
				СписокСообщений.Добавить("Строка #" + Строка(СтрЗаменить(Сч-1,Символы.НПП,"")), "Строка #" + Строка(СтрЗаменить(Сч-1,Символы.НПП,"")) + ": Колонка ""Рекомендуемое количество"" - Ошибка преобразования значения ячейки к числовому типу данных: " + СтрокаПолеПоиска);
				ТабличныйДокумент.Область("R"+Строка(СтрЗаменить(Сч,Символы.НПП,""))+"C" + Строка(КолонкаРекомКолич)).ЦветФона = WebЦвета.Красный;
				Продолжить;
			КонецПопытки;
			
		КонецЕсли;
		
    		
		Рез = НайтиНоменклатуру(СтрокаПолеПоиска, СтрокаКоличество, стрОшибки);
		ТоварЭтоТекст = Ложь;
		
		Если Рез = Неопределено Тогда
			
			Если НоменклатураМожетБытьТекстом И Не ПустаяСтрока(СтрокаПолеПоиска) Тогда // silber влез сюда со своим пустым текстом
				Рез = Новый Структура("Номенклатура", СтрокаПолеПоиска);
				ТоварЭтоТекст = Истина;
			Иначе
				СписокСообщений.Добавить("Строка #" + Строка(СтрЗаменить(Сч-1,Символы.НПП,"")), "Строка #" + Строка(СтрЗаменить(Сч-1,Символы.НПП,"")) + " :" + стрОшибки);
				ТабличныйДокумент.Область("R"+Строка(СтрЗаменить(Сч,Символы.НПП,""))+"C" + Строка(КолонкаАртикул)).ЦветФона = WebЦвета.Красный;
				Продолжить; КонецЕсли; КонецЕсли;
		
		Если ИскатьНоменклатуру Тогда
			Строки = Таблица.НайтиСтроки(Новый Структура("Номенклатура", Рез.Номенклатура));
			Если Строки.Количество() Тогда
				НоваяСтрока = Строки[0];
			Иначе
				НоваяСтрока = Таблица.Добавить();
			КонецЕсли;
		Иначе
			НоваяСтрока = Таблица.Добавить();
		КонецЕсли;
		
		НоваяСтрока.Номенклатура= Рез.Номенклатура; 
		Если ЗагружатьКоличество 	Тогда НоваяСтрока[ИмяКолонкиКоличество] = ?(ЗамещатьКоличество, СтрокаКоличество, НоваяСтрока[ИмяКолонкиКоличество] + СтрокаКоличество); КонецЕсли;
		Если ЗагружатьЦену 			Тогда НоваяСтрока[ИмяКолонкиЦена]		= СтрокаЦена; КонецЕсли;
		Если ЗагрузитьРекомендуемоеКоличество Тогда 
			НоваяСтрока["Остаток" + ИдентификаторСклада] = СтрокаКоличество; 
			НоваяСтрока["РекОстаток" + ИдентификаторСклада] = СтрокаРекомКолич; КонецЕсли;
			
		Если СтруктураКолонокТовары <> Неопределено И ЗагружатьКоличество И Не ТоварЭтоТекст Тогда
			ФункцииФормДокументов.НоменклатураПриИзменении(НоваяСтрока, СтруктураКолонокТовары, НоваяСтрока,, НЕ ЗагружатьЦену); КонецЕсли;
		
	КонецЦикла;	 
	
	Если ГруппироватьОдинаковые Тогда
		Таблица.Свернуть("Номенклатура,Цена,Упаковка,Размещение,ПроцентРучнойСкидки,СтавкаНДС,ПроцентАвтоматическойСкидки,Акция,ВариантРасчета,Отгружено,Собрано,КоличествоОтгружено,КоличествоСобрано,КоличествоОтменено",
		"Количество,Сумма,СуммаНДС,СуммаРучнойСкидки,СуммаАвтоматическойСкидки,Всего,СуммаБезСкидки");
	КонецЕсли;	
	
	АдресТоваровВХранилищеВыход = ПоместитьВоВременноеХранилище(Таблица,	УникальныйИдентификатор);
 
КонецПроцедуры


&НаКлиенте
Процедура ВыполнитьЗагрузку(Команда)
	
	СписокСообщений.Очистить();
		
	ЕстьКоличество = СтруктураКолонокТовары <> Неопределено И СтруктураКолонокТовары.ЕстьКоличество;
	//ТаблицаФормы = Вычислить("ВладелецФормы." + ИмяТаблицы);
	
	
	Если Элементы.ВводДанных.ТекущаяСтраница = Элементы.ДанныеExcel Тогда
		ВыполнитьЗагрузкуExcel(СтруктураКолонокТовары);
	Иначе
		ВыполнитьЗагрузкуТабличногоДокумента(СтруктураКолонокТовары);
	КонецЕсли;
	
	Для Каждого Строка Из СписокСообщений Цикл Сообщить(Строка); КонецЦикла;
	
	//ВладелецФормы.Модифицированность = Истина;
	
	ОповеститьОВыборе(Новый Структура("Товары, ПересчитатьЦену", АдресТоваровВХранилищеВыход, НЕ ЕстьЦена));
	
КонецПроцедуры


&НаСервере
Функция ПоместитьТоварыВХранилище() 
	
	//Возврат ПоместитьВоВременноеХранилище(
	//				Товары.Выгрузить(), 
	//				УникальныйИдентификатор);
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЗакрыватьПриВыборе = Ложь;
	Элементы.ВводДанных.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	
	Если Параметры.Страница = "ЗагрузитьДанныеExcel" Тогда
		Элементы.ВводДанных.ТекущаяСтраница = Элементы.ДанныеExcel;
	Иначе
		Элементы.ВводДанных.ТекущаяСтраница = Элементы.ДанныеТабличногоДокумента;
	КонецЕсли;
	
	АдресТоваровВХранилище 				= Параметры.АдресТоваровВХранилище;
	ЗагрузитьРекомендуемоеКоличество 	= Параметры.ЗагрузитьРекомендуемоеКоличество;
	ИдентификаторСклада 				= Параметры.ИдентификаторСклада;
	ЗамещатьКоличество 					= Параметры.ЗамещатьКоличество;
	НоменклатураМожетБытьТекстом		= Параметры.НоменклатураМожетБытьТекстом;
	
	Макет = Документы.ЗаказПокупателя.ПолучитьМакет("Excel");
	Область = Макет.ПолучитьОбласть("Заголовок|Основной");
	областьРекомКолич =  Макет.ПолучитьОбласть("Заголовок|РекомендуемоеКоличество");
	
	Если 	  ПолеПоиска = 0 Тогда  КлючевоеПоле = "Артикул";
    ИначеЕсли ПолеПоиска = 1 Тогда  КлючевоеПоле = "Код";
	ИначеЕсли ПолеПоиска = 2 Тогда  КлючевоеПоле = "Код2"; 
	ИначеЕсли ПолеПоиска = 3 Тогда  КлючевоеПоле = "Наименование";
	ИначеЕсли ПолеПоиска = 4 Тогда  КлючевоеПоле = "АртикулПоставщика"; КонецЕсли;
	
	Область.Параметры.ПолеПоиска = КлючевоеПоле;
	ТабличныйДокумент.Вывести(Область);
	Если ЗагрузитьРекомендуемоеКоличество Тогда ТабличныйДокумент.Присоединить(областьРекомКолич); КонецЕсли;
	
	СтруктураКолонокТовары = Параметры.СтруктураКолонокТовары;
	ИмяТаблицы = Параметры.ИмяТаблицы;
	ЕстьЦена = Ложь;
	
	
	ИмяКолонкиКоличество = ?(ПустаяСтрока(Параметры.ИмяКолонкиКоличество), "Количество", Параметры.ИмяКолонкиКоличество);
	ИмяКолонкиЦена = ?(ПустаяСтрока(Параметры.ИмяКолонкиЦена), "Цена", Параметры.ИмяКолонкиЦена);
	ИскатьНоменклатуру = Параметры.ИскатьНоменклатуру;
	
КонецПроцедуры
&НаСервере
Процедура ЗадатьОбластьТабличногоДокумента()
	
	ТабличныйДокумент.Очистить();
	Макет = Документы.ЗаказПокупателя.ПолучитьМакет("Excel");
	Область = Макет.ПолучитьОбласть("Заголовок|Основной");
	допОбласть = Макет.ПолучитьОбласть("Заголовок|Цена");
	областьРекомКолич =  Макет.ПолучитьОбласть("Заголовок|РекомендуемоеКоличество");
	
	Если 	  ПолеПоиска = 0 Тогда  КлючевоеПоле = "Артикул";
    ИначеЕсли ПолеПоиска = 1 Тогда  КлючевоеПоле = "Код";
	ИначеЕсли ПолеПоиска = 2 Тогда  КлючевоеПоле = "Код2"; 
	ИначеЕсли ПолеПоиска = 3 Тогда  КлючевоеПоле = "Наименование";
	ИначеЕсли ПолеПоиска = 4 Тогда  КлючевоеПоле = "АртикулПоставщика"; КонецЕсли;
	
	Область.Параметры.ПолеПоиска = КлючевоеПоле;
	ТабличныйДокумент.Вывести(Область);
	Если  ЕстьЦена Тогда ТабличныйДокумент.Присоединить(допОбласть); КонецЕсли;
	Если ЗагрузитьРекомендуемоеКоличество Тогда ТабличныйДокумент.Присоединить(областьРекомКолич); КонецЕсли;
	
	Область = Макет.ПолучитьОбласть("Строки|Основной");
	допОбласть = Макет.ПолучитьОбласть("Строки|Цена");
	областьРекомКолич =  Макет.ПолучитьОбласть("Строки|РекомендуемоеКоличество");
	Для Сч = 1 По КоличествоСтрок Цикл
		Область.Параметры.Номер = Сч;
		ТабличныйДокумент.Вывести(Область);
		Если  ЕстьЦена Тогда ТабличныйДокумент.Присоединить(допОбласть); КонецЕсли;
		Если ЗагрузитьРекомендуемоеКоличество Тогда ТабличныйДокумент.Присоединить(областьРекомКолич); КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
&НаКлиенте
Процедура ЗадатьОбласть(Команда)
	
	ЗадатьОбластьТабличногоДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ЕстьЦенаПриИзменении(Элемент)
	 ЗадатьОбластьТабличногоДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ИскатьПоНаименованиюПриИзменении(Элемент)
	ЗадатьОбластьТабличногоДокумента();
КонецПроцедуры
 
 #Область ИпортИзExcel
// Метод "1C836" для файлов EXCEL с расширениями: xlsx, xls, ods.
//
// Параметры:
//         ФайлEXCEL - Полное имя файла (путь к файлу с именем файла и расширением).
//        СтрокаЗаголовка (по умолчанию = 1) - Номер строки файла типа MXL, в которой расположены заголовки колонок.
//            Не используется. 
//      В обработке 1-я строка анализируется для сопоставления колонок файла с реквизитами объектов 1С.
//        НачСтрока (по-умолчанию = 0) - Номер начальной строки, начиная с которой считываются данные из файла.
//        КонСтрока (по-умолчанию = 0) - Номер конечной строки, которой заканчиваются считываемые данные из файла.
//            Если НачСтрока=0 и КонСтрока=0, то считывается вся таблица, находящаяся в файле.
//        КолвоСтрокФайла - Количество строк в файле. Возвращается в вызвавшую процедуру.
//
// Возвращаемые значения:
//         ТаблицаРезультат - Результат считывания данных из файла.
//
&НаСервере
Функция ЗагрузитьМетодом_1C836(Знач ФайлEXCEL, Знач СтрокаЗаголовка = 1, НачСтрока = 0, КонСтрока = 0, КолвоСтрокФайла = 0)
    Перем ТабличныйДокумент, КонечнаяКолонка, ИмяКолонки, Область, ТекущаяОбласть, нСтрока, нКолонка, НоваяСтрокаТФ, ЗначениеЯчейки;
    Перем ТаблицаРезультат;
    
    ТабличныйДокумент = Новый ТабличныйДокумент;
    Попытка
        ТабличныйДокумент.Прочитать(ФайлEXCEL, СпособЧтенияЗначенийТабличногоДокумента.Значение);    // СпособЧтенияЗначенийТабличногоДокумента - новый параметр платформы 8.3.6. Второе значение "Текст".
    Исключение
        Сообщить(ОписаниеОшибки(), СтатусСообщения.Внимание);
        Возврат Новый ТаблицаЗначений;
    КонецПопытки;
    
    КолвоСтрокФайла = ТабличныйДокумент.ВысотаТаблицы;
    КонечнаяКолонка = ТабличныйДокумент.ШиринаТаблицы;    // 8.3.6.1760 некорректно определяет количество колонок (например, >=1025 для xlsx, =256 для xls).
    
    // Проверка заполненности листа.
    Если КолвоСтрокФайла = 0 Тогда
        // Завершение работы.
        // Закрытие Объектов.
        ТабличныйДокумент = Неопределено;
        Возврат Новый ТаблицаЗначений;    // В случае ошибки возвращаем пустую таблицу значений.
    КонецЕсли;
    
    // Создание результирующей таблицы, в которую будут записываться считанные из файла данные.
    ТаблицаРезультат = Новый ТаблицаЗначений;
    
    // Формирование колонок результирующей таблицы.
    
    // "НомерСтроки" - для наглядности и удобства.
    // В зависимости от разрабатываемой обработки.
    // "Сопоставлено" - может быть другим.
    // Здесь же могут быть добавлены другие колонки, не формируемые из содержимого файла.
  //  ТаблицаРезультат.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"), "№", 4);
    //ТаблицаРезультат.Колонки.Добавить("Сопоставлено", Новый ОписаниеТипов("Булево"), "Сопоставлено", 1);
    
    Для ит = 1 ПО КонечнаяКолонка Цикл
        нКолонка = СтрЗаменить(ит, Символы.НПП, "");
        ИмяКолонки = "N" + нКолонка;
        ТаблицаРезультат.Колонки.Добавить(ИмяКолонки);
    КонецЦикла;
    
 	СтруктураЗполненностиКолонок = Новый Структура;
	
	// 1-я строка. Заголовки.
    НоваяСтрокаТФ = ТаблицаРезультат.Добавить();
   // НоваяСтрокаТФ.НомерСтроки = 1;
    Для ит=1 ПО КонечнаяКолонка Цикл
        нКолонка = СтрЗаменить(ит, Символы.НПП, "");
        ИмяКолонки = "N" + нКолонка;
        НоваяСтрокаТФ[ИмяКолонки] = ТабличныйДокумент.ПолучитьОбласть("R1" + "C"+нКолонка).ТекущаяОбласть.Текст;
        
        // Используется при формировании таблицы на форме обработки.
        ШиринаКолонки = ТаблицаРезультат.Колонки[ИмяКолонки].Ширина;
        ДлинаСтроки    = СтрДлина(СокрЛП(НоваяСтрокаТФ[ИмяКолонки]));
        ТаблицаРезультат.Колонки[ИмяКолонки].Ширина = ?(ШиринаКолонки < ДлинаСтроки, ДлинаСтроки, ШиринаКолонки);
		СтруктураЗполненностиКолонок.Вставить(ИмяКолонки, 0);
    КонецЦикла;
    
    НачСтрока = ?(НачСтрока = 0, 2, НачСтрока);
    КонСтрока = ?(КонСтрока = 0, КолвоСтрокФайла, КонСтрока);
	
    Для нСтрока = НачСтрока ПО КонСтрока Цикл
        НоваяСтрокаТФ = ТаблицаРезультат.Добавить();
        НоваяСтрокаТФ[0] = нСтрока;
		Для ит=1 ПО КонечнаяКолонка Цикл

            нКолонка = СтрЗаменить(ит, Символы.НПП, "");
            Область = ТабличныйДокумент.ПолучитьОбласть("R"+нСтрока + "C"+нКолонка);
            ТекущаяОбласть = Область.ТекущаяОбласть;
            Попытка
                ЗначениеЯчейки = ТекущаяОбласть.Значение;        // Число, Дата.
            Исключение
                ЗначениеЯчейки = СокрЛП(ТекущаяОбласть.Текст);    // Строка, Булево. (Булево как строка "ИСТИНА"/"ЛОЖЬ")
                Если ЗначениеЗаполнено(ЗначениеЯчейки) Тогда
                    ЗначениеЯчейки = ПреобразоватьПростоеЗначениеИзСтрокиВТипизованноеЗначение1С(ЗначениеЯчейки);
                    Если ТипЗнч(ЗначениеЯчейки) = Тип("Строка") Тогда
                        ЗначениеЯчейки = СокрЛП(ЗначениеЯчейки);
                    КонецЕсли;
                Иначе
                    ЗначениеЯчейки = Неопределено;
                    Если Область.Рисунки.Количество() > 0 Тогда    // Изображение.
                        ЗначениеЯчейки = ПолучитьЗначениеЯчейкиОбластиТабличногоДокументаСКартинками(Область, нСтрока, нКолонка, "УИД");
                    КонецЕсли;
                КонецЕсли;
            КонецПопытки;
            
            ИмяКолонки = "N" + нКолонка;
            НоваяСтрокаТФ[ИмяКолонки] = ЗначениеЯчейки;
			
			Если ЗначениеЗаполнено(ЗначениеЯчейки) Тогда
				СтруктураЗполненностиКолонок[ИмяКолонки] = СтруктураЗполненностиКолонок[ИмяКолонки] + 1; КонецЕсли;
			            
            // Используется при формировании таблицы на форме обработки.
            ШиринаКолонки = ТаблицаРезультат.Колонки[ИмяКолонки].Ширина;
            ДлинаСтроки    = СтрДлина(СокрЛП(НоваяСтрокаТФ[ИмяКолонки]));
            ТаблицаРезультат.Колонки[ИмяКолонки].Ширина = ?(ШиринаКолонки < ДлинаСтроки, ДлинаСтроки, ШиринаКолонки);
        КонецЦикла;
    КонецЦикла;
    
    // Юзабилити. Удалить пустые колонки.
    УдалитьКолонкиСНулевойШириной(ТаблицаРезультат, СтруктураЗполненностиКолонок);
	
	УдалитьПочтиПустыеКолонки(ТаблицаРезультат, СтруктураЗполненностиКолонок);
	
    Возврат ТаблицаРезультат;
    
КонецФункции

// Если колонка практически не сожержит значений, то она нам не нужна
&НаСервере
Процедура УдалитьПочтиПустыеКолонки(ТаблицаРезультат, СтруктураЗполненностиКолонок)
	 макс = 0;
	// Найдем масимальную заполненность колонок
	Для Каждого Строка ИЗ СтруктураЗполненностиКолонок Цикл
		Если Строка.Значение > макс Тогда макс = Строка.Значение; 	КонецЕсли;
	КонецЦикла;
	
	// Откинем все колонки, где количество заполненных значений меньше половины...
	
	МассивКолонокНаУдаление = Новый Массив;
	
    Для Каждого Колонка ИЗ ТаблицаРезультат.Колонки Цикл Если ЛЕВ(Колонка.Имя, 1) = "N" Тогда
		Если СтруктураЗполненностиКолонок[Колонка.Имя] < Макс/2 Тогда 
	    	МассивКолонокНаУдаление.Добавить(Колонка.Имя) КонецЕсли; КонецЕсли;
	КонецЦикла;
	
    Для Каждого ПустаяКолонка ИЗ МассивКолонокНаУдаление Цикл
        ТаблицаРезультат.Колонки.Удалить(ПустаяКолонка);
    КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьКолонкиСНулевойШириной(ТаблицаРезультат, СтруктураЗполненностиКолонок)
    Перем МассивПустыхКолонок;
    
    // Найдем пустые колонки.
    МассивПустыхКолонок = Новый Массив;
    Для Каждого Колонка ИЗ ТаблицаРезультат.Колонки Цикл
        Если Колонка.Ширина = 0 Тогда
            МассивПустыхКолонок.Добавить(Колонка.Имя);
        КонецЕсли;
    КонецЦикла;
    
    // Удалим пустые колонки.
    Для Каждого ПустаяКолонка ИЗ МассивПустыхКолонок Цикл
		СтруктураЗполненностиКолонок.Удалить(ПустаяКолонка);
        ТаблицаРезультат.Колонки.Удалить(ПустаяКолонка);
    КонецЦикла;

КонецПроцедуры

// ПРЕОБРАЗОВАНИЕ СТРОКИ К ТИПИЗОВАННОМУ ЗНАЧЕНИЮ 1С.

&НаСервере
Функция ПреобразоватьПростоеЗначениеИзСтрокиВТипизованноеЗначение1С(Знач ИсходноеЗначение)
    
    Если НЕ ИсходноеЗначение = "" Тогда
        Если ТолькоЦифрыИЗапятаяВСтроке(ИсходноеЗначение, Истина, Ложь) Тогда
            Попытка
                Возврат Число(ИсходноеЗначение);
            Исключение
                Возврат ИсходноеЗначение
            КонецПопытки;
        Иначе
            Если ВРег(ИсходноеЗначение) = "ИСТИНА" ИЛИ ВРег(ИсходноеЗначение) = ("ИСТИНА"+Символы.ПС) ИЛИ ВРег(ИсходноеЗначение) = "TRUE" ИЛИ ВРег(ИсходноеЗначение) = ("TRUE"+Символы.ПС) Тогда
                Возврат Истина;
            ИначеЕсли ВРег(ИсходноеЗначение) = "ЛОЖЬ" ИЛИ  ВРег(ИсходноеЗначение) = ("ЛОЖЬ"+Символы.ПС) ИЛИ ВРег(ИсходноеЗначение) = "FALSE" ИЛИ ВРег(ИсходноеЗначение) = ("FALSE"+Символы.ПС) Тогда
                Возврат Ложь;
            Иначе
                Возврат ПреобразоватьИзСтрокиВДату(ИсходноеЗначение);
            КонецЕсли;
        КонецЕсли;
    КонецЕсли;
    
    Возврат ИсходноеЗначение
    
КонецФункции

// Проверяет, содержит ли строка только цифры и запятую.
//
// Параметры:
//  СтрокаПроверки          - Строка - Строка для проверки
//  УчитыватьЛидирующиеНули - Булево - Флаг учета лидирующих нулей, если Истина, то ведущие нули пропускаются
//  УчитыватьПробелы        - Булево - Флаг учета пробелов, если Истина, то пробелы при проверке игнорируются
//
// Возвращаемое значение:
//   Булево - Истина - строка содержит только цифры или пустая, Ложь - строка содержит иные символы.
//
&НаСервере
Функция ТолькоЦифрыИЗапятаяВСтроке(Знач СтрокаПроверки, Знач УчитыватьЛидирующиеНули = Истина, Знач УчитыватьПробелы = Истина)
    
    Если ТипЗнч(СтрокаПроверки) <> Тип("Строка") Тогда
        Возврат Ложь;
    КонецЕсли;
    
    Если НЕ УчитыватьПробелы Тогда
        СтрокаПроверки = СтрЗаменить(СтрокаПроверки, " ", "");
    КонецЕсли;
        
    Если ПустаяСтрока(СтрокаПроверки) Тогда
        Возврат Истина;
    КонецЕсли;
    
    Если НЕ УчитыватьЛидирующиеНули Тогда
        Позиция = 1;
        // Взятие символа за границей строки возвращает пустую строку
        Пока Сред(СтрокаПроверки, Позиция, 1) = "0" Цикл
            Позиция = Позиция + 1;
        КонецЦикла;
        СтрокаПроверки = Сред(СтрокаПроверки, Позиция);
    КонецЕсли;
    
    // Если содержит только цифры, то в результате замен должна быть получена пустая строка
    // Проверять при помощи ПустаяСтрока нельзя, так как в исходной строке могут быть пробельные символы
    Возврат СтрДлина(
        СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить(
        СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( 
            СтрокаПроверки, "0", ""), "1", ""), "2", ""), "3", ""), "4", ""), "5", ""), "6", ""), "7", ""), "8", ""), "9", ""), ",", "")
    ) = 0;
    
КонецФункции

// Преобразование строки вида "01.01.13" или "01.01.2013" к значению типа "дата".
// Возможны друние форматы даты в файле EXCEL.
&НаСервере
Функция ПреобразоватьИзСтрокиВДату(Знач СтрокаДаты)
    Перем ScrptCtrl, OutDate;
    
    Попытка
        ScrptCtrl = Новый COMОбъект("MSScriptControl.ScriptControl");
        ScrptCtrl.Language="vbscript";
        OutDate = ScrptCtrl.Eval("CDate(""" + СтрокаДаты + """)");
        Возврат OutDate;
    Исключение
        //Сообщить(ОписаниеОшибки());
    КонецПопытки;
    
    Возврат СтрокаДаты;

КонецФункции 

// ПОЛУЧЕНИЕ ЗНАЧЕНИЯ ДЛЯ РЕКВИЗИТА ТИПА "ФАЙЛ КАРТИНКИ".

&НаСервере
Функция ПолучитьЗначениеЯчейкиОбластиТабличногоДокументаСКартинками(Знач Область, Знач нСтрока, Знач нКолонка, Знач ПравилоИмяФайлаКартинки = "УИД")
    Перем Рисунок, ит, ИмяФайлаРисунка;
    Перем ЗначениеЯчейки;
    
    ит = 0;
    ЗначениеЯчейки = "";
    Для Каждого Рисунок ИЗ Область.Рисунки Цикл
        ит = ит + 1;
        Если ПравилоИмяФайлаКартинки = "УИД" Тогда
            ИмяФайлаРисунка = КаталогВременныхФайлов() + Новый УникальныйИдентификатор() + ".jpg";
        Иначе
            ИмяФайлаРисунка = КаталогВременныхФайлов() + "С" + нСтрока + "К" + нКолонка + ".jpg";
        КонецЕсли;
        Попытка
            Рисунок.Картинка.Записать(ИмяФайлаРисунка);
            ЗначениеЯчейки = ЗначениеЯчейки + ИмяФайлаРисунка + ?(ит < Область.Рисунки.Количество(), Символы.ПС, "");
        Исключение
            // Поле картинки недоступно для чтения.
        КонецПопытки;
    КонецЦикла;
    
    Возврат ЗначениеЯчейки;
    
КонецФункции


&НаКлиенте
Процедура ТабличныйДокумент1Выбор(Элемент, Область, СтандартнаяОбработка)
	ТабличныйДокумент1ВыборНаСервере();
КонецПроцедуры


&НаСервере
Процедура ТабличныйДокумент1ВыборНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры


&НаКлиенте
Процедура ПолеПоиска1ПриИзменении(Элемент)
	
	Если 	  ПолеПоиска = 0 Тогда  КлючевоеПоле = "Артикул";
    ИначеЕсли ПолеПоиска = 1 Тогда  КлючевоеПоле = "Код";
	ИначеЕсли ПолеПоиска = 2 Тогда  КлючевоеПоле = "Код2"; 
	ИначеЕсли ПолеПоиска = 3 Тогда  КлючевоеПоле = "Наименование";
	ИначеЕсли ПолеПоиска = 4 Тогда  КлючевоеПоле = "АртикулПоставщика"; КонецЕсли;
	
	Область = ТабличныйДокумент.Область("R1C2");
	Область.Текст = КлючевоеПоле;

КонецПроцедуры
 #КонецОбласти
