
Функция СформироватьСкладXDTO(ТипСклад, Склад, СкладНаименование)
	
	СкладXDTO = ФабрикаXDTO.Создать(ТипСклад);
	
	СкладXDTO.guid 	= Строка(Склад.УникальныйИдентификатор());
	СкладXDTO.title = СкладНаименование;
	
	Возврат СкладXDTO;
	
КонецФункции

Функция ПреобразоватьЧислоВКвадратики(Число)
	
	Возврат ?(Число,
				?(Не Число % 5, 5,
				?(Не Число % 4, 4,
				?(Не Число % 3, 3,
				?(Не Число % 2, 2, 1)))),0);
КонецФункции

Функция ПреобразоватьAlies(alies, ПорядковыйНомер = 0)
	
	Если ПустаяСтрока(alies) Тогда
	
		Возврат "Товар" + Формат(ПорядковыйНомер,"ЧГ=");
		
	Иначе
		
		Возврат СтрЗаменить(alies," ","_");
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСсылкуXML(Ссылка)
	
	Если Ссылка.пустая() Тогда
		
		Возврат "";
		
	Иначе
		
		Возврат XMLСтрока(Ссылка);
		
	КонецЕсли;
	
КонецФункции

// ОБЩИЕ

Функция ПолучитьТипЦеныСайта()
	
	Возврат Справочники.ТипыЦен.ПолучитьСсылку(Новый УникальныйИдентификатор("a2896017-fe5f-11dc-a014-001731520b3d"));
	
КонецФункции

Функция ЧислоИзСтроки(Число, error = "")
	
	Попытка
		
		чЧисло = Число(Число);
		
	Исключение
		
		стрОшибки = ОписаниеОшибки();
		чЧисло = 0;
		error = error + "
		|Ошибка преобразования строки в число """ + Число + """ " + стрОшибки;
		
	КонецПопытки;

	Возврат чЧисло;
	
КонецФункции



Процедура ДобавитьРодителейНоменклатуры(ТоварWSDL, текРодитель, ВыборкаДопРодители, перебиратьДляКаждого = Ложь, ИмяРодителя = "categories")
	
	Если Не текРодитель.пустая() Тогда
		
		ТоварWSDL[ИмяРодителя].Добавить(XMLСтрока(текРодитель));
		
	КонецЕсли;
	
	Если перебиратьДляКаждого Тогда // перебор таблицы
		
		Для Каждого Строка Из ВыборкаДопРодители Цикл
			
			ТоварWSDL[ИмяРодителя].Добавить(XMLСтрока(Строка.Родитель));
			
		КонецЦикла;
		
	Иначе							// перебор выборки
	
		Выборка = ВыборкаДопРодители.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ТоварWSDL[ИмяРодителя].Добавить(XMLСтрока(Выборка.Родитель));
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьОшибку(ошибка, Текст)
	
	ошибка = ошибка + ?(ПустаяСтрока(ошибка), "", Символы.ПС) + Текст;

КонецПроцедуры

// ФУНКЦИИ ВЫЗОВА ВЕБ СЕРВИСА

Функция ЕстьАналог(СсылкаНоменклатуры)
	
	Запрос = Новый Запрос("
	|ВЫБРАТь ПЕРВЫЕ 1 ИСТИНА КАК ЕстьЭто
	|ИЗ РегистрСведений.АналогиНоменклатуры КАК Табл
	|ГДЕ (Номенклатура1 = &Ссылка Или Номенклатура2 = &Ссылка) И
	|		(Номенклатура1.ВыгружатьНаСайт = ИСТИНА И Номенклатура2.ВыгружатьНаСайт = ИСТИНА)
	|
	|");

	Запрос.УстановитьПараметр("Ссылка", СсылкаНоменклатуры);
	Выполнение = Запрос.Выполнить();
	
	Если Выполнение.Пустой() Тогда
		
		Возврат Ложь;
		
	Иначе
		
		Выборка = Выполнение.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.ЕстьЭто;
		
	КонецЕсли;
	
КонецФункции
Функция ЕстьСопутствующий(СсылкаНоменклатуры)
	
	Запрос = Новый Запрос("
	|ВЫБРАТь ПЕРВЫЕ 1 ИСТИНА КАК ЕстьЭто
	|ИЗ РегистрСведений.СопутствующиеТовары КАК Табл
	|ГДЕ 	(Номенклатура1 = &Ссылка Или Номенклатура2 = &Ссылка) И
	|		(Номенклатура1.ВыгружатьНаСайт = ИСТИНА И Номенклатура2.ВыгружатьНаСайт = ИСТИНА)
	|");
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНоменклатуры);
	Выполнение = Запрос.Выполнить();
	
	Если Выполнение.Пустой() Тогда
		
		Возврат Ложь;
		
	Иначе
		
		Выборка = Выполнение.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.ЕстьЭто;
		
	КонецЕсли;
	
КонецФункции


Функция ДополнитьОписаниеПрикрепленнымиФайлами(ВыборкаПрикрепленныхФайлов)
	
		Стр = "";
		
		Пока ВыборкаПрикрепленныхФайлов.Следующий() Цикл Если ВыборкаПрикрепленныхФайлов.ВыгружатьНаСайт Тогда
		
		//ВыборкаПрикрепленныхФайлов.Выбрать();
		//ПОка ВыборкаПрикрепленныхФайлов.Следующий() Цикл
			
			//Стр = Стр + "<p>" + ВыборкаПрикрепленныхФайлов.URLнаСайте + "</p>";
			Стр = Стр + "<p>" + ВыборкаПрикрепленныхФайлов.URLнаСайте + "</p>";
			
		КонецЕсли;КонецЦикла;
		
		Возврат ?(ПустаяСтрока(Стр),"","<hr>" + Стр);

	
КонецФункции
Функция get_products_count(begin_id, end_id, for_dealers = "false")
	
	ФильтрДляДилеров = Врег(for_dealers) = Врег("true");
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(Ссылка) КАК Количество,
	|	МИНИМУМ(ПорядковыйНомер) КАК МинимальныйИД,
	|	МАКСИМУМ(ПорядковыйНомер) КАК МаксимальныйИД
	|ИЗ 		
	|	Справочник.Номенклатура
	|ГДЕ 
	|	НЕ ЭтоГруппа И
	|	ВыгружатьНаСайт
	|" + ?(ФильтрДляДилеров,"И ДляДилеров","") + "
 	|");

	Выполнение = Запрос.Выполнить();
	Если Выполнение.Пустой() Тогда
		
		begin_id 	= 0;
		end_id 		= 0;
		
		Возврат 0;
		
	Иначе
		
		Выборка = Выполнение.Выбрать();
		Выборка.Следующий();
		
		begin_id 	= ?(ЗначениеЗаполнено(Выборка.МинимальныйИД), Выборка.МинимальныйИД, 0);
		end_id 		= ?(ЗначениеЗаполнено(Выборка.МаксимальныйИД), Выборка.МаксимальныйИД, 0);
		
		Возврат ?(ЗначениеЗаполнено(Выборка.Количество), Выборка.Количество, 0);
		
	КонецЕсли;
	
КонецФункции
Функция get_product(guid, for_dealers = "false", error = "") 		// Получить товар
	
	Если ПустаяСтрока(guid) Тогда
		error = " не указан guid товара ";
		Возврат Неопределено;
	КонецЕсли;
	
	ФильтрДляДилеров = Врег(for_dealers) = Врег("true");
	
	ТоварТип			= ФабрикаXDTO.Тип("http://www.garagetools.ru", "Product");
	СвойствоТип			= ФабрикаXDTO.Тип("http://www.garagetools.ru", "Property");
	ЗначенияСвойстТип	= ФабрикаXDTO.Тип("http://www.garagetools.ru", "Value");
	ТипНаСкладе			= ФабрикаXDTO.Тип("http://www.garagetools.ru", "In_stock_warehouse");
	ТипСклад			= ФабрикаXDTO.Тип("http://www.garagetools.ru", "Warehouse");
	ТипСписокЦен		= ФабрикаXDTO.Тип("http://www.garagetools.ru", "Price");
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1	
	|	Спр.Ссылка 							КАК Ссылка, 
	|	Спр.Родитель						КАК Родитель,
	|	Спр.Наименование 					КАК Наименование, 
	|	Спр.Производитель 					КАК Производитель, 
	|	ВЫБОР КОГДА Спр.ТопТовар ТОГДА 
	|				ЕСТЬNULL(Спр.Ранг,0) 
	|		  ИНАЧЕ 
	|				ЕСТЬNULL(Спр.Производитель.Ранг,0)
	|	КОНЕЦ КАК Ранг, 
	|	ЕСТЬNULL(Спр.ЕдиницаИзмерения.Наименование,"""") 	КАК ЕдиницаИзмеренияНаименование,
	|	Спр.ПорядковыйНомер					КАК ПорядковыйНомер,
	|	Спр.Ожидается,
	|	Спр.ДатаОжидания,
	|	Спр.Код,
	|	Спр.Артикул ,
	|	Спр.ПодЗаказ,
	|	Спр.ТекстСообщенияОПоставкеТовара,
	|	Спр.СсылкиКФайламДляСайта.(URLнаСайте, ВыгружатьНаСайт) СсылкиКФайламДляСайта,
	|	Спр.Вес,
	|	Спр.Объем,
	|	Спр.Новинка						КАК Новинка,
	|	Спр.БольшеНеПоставляется		КАК БольшеНеПоставляется,
	|	Спр.Акция						КАК Акция,
	|	Спр.Распродажа					КАК Распродажа,
	|	Спр.h1							КАК h1,
	|" + ?(ФильтрДляДилеров,"Спр.Описание_дилер","Спр.Описание") + "					Описание,
	|" + ?(ФильтрДляДилеров,"Спр.alies_дилер","Спр.alies") + "							alies,
	|" + ?(ФильтрДляДилеров,"Спр.alies_дилер","Спр.alies_ru") + "						alies_en,
	|" + ?(ФильтрДляДилеров,"Спр.title_дилер","Спр.title") + "							title,
	|" + ?(ФильтрДляДилеров,"Спр.meta_keywords_дилер","Спр.meta_keywords") + "			meta_keywords,
	|" + ?(ФильтрДляДилеров,"Спр.meta_description_дилер","Спр.meta_description") + "	meta_description,
	|	Спр.ПорядковыйНомер 			id_number,
	|	Спр.ДляДилеров 					for_dealers,
	|	ЕСТЬNULL(ШтрихКоды.ШтрихКод,"""")	КАК barcode,
	|	ЕСТЬNULL(Цены.Цена,0) 				КАК Цена,
	|	ЕСТЬNULL(Ост.КоличествоОстаток,0) - ЕСТЬNULL(Рез.КоличествоОстаток,0)	КАК СвободныйОстаток,
	|	ЕСТЬNULL(Картинки.КолКартинок,0) 	КАК КолКартинок
	|	
	|ИЗ 		
	|	Справочник.Номенклатура КАК Спр
	| 
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(	ВЫБРАТЬ
	|			ЦеныНоменклатуры.Номенклатура,
	|			ЕСТЬNULL(Акц.НоваяЦена, ЦеныНоменклатуры.Цена) * (ЕСТЬNULL(ВалЦен.Курс, 1) * ЕСТЬNULL(ВалТипаЦен.Кратность, 1)) / (ЕСТЬNULL(ВалТипаЦен.Курс, 1) * ЕСТЬNULL(ВалЦен.Кратность, 1)) КАК Цена
	|		ИЗ
	|			РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата1, ТипЦен = &ТипЦен И Номенклатура = &Ссылка) ЦеныНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			( 	ВЫБРАТЬ ТипЦен, Номенклатура, НоваяЦена
	|				ИЗ РегистрСведений.Акция.СрезПоследних(&Дата1, ТипЦен = &ТипЦен И Номенклатура = &Ссылка)
	|				ГДЕ Акция <> &ПустаяАкция)  Акц 
	|       ПО 
	|			ЦеныНоменклатуры.Номенклатура = Акц.Номенклатура И ЦеныНоменклатуры.ТипЦен = Акц.ТипЦен
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.КурсыВалют.СрезПоследних(, ) ВалЦен
	|		ПО 
	|			ЦеныНоменклатуры.Валюта = ВалЦен.Валюта
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.КурсыВалют.СрезПоследних(, Валюта = &ВалютаТипаЦен) ВалТипаЦен
	|		ПО 
	|			ИСТИНА
	|	) Цены
	|
	|ПО
	|	Спр.Ссылка = Цены.Номенклатура
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(	ВЫБРАТЬ 		
	|			Владелец КАК Номенклатура, 
	|			КОЛИЧЕСТВО(Ссылка) КАК КолКартинок
	|		ИЗ
	|			Справочник.КартинкиНоменклатуры
	|		ГДЕ
	|			Владелец = &Ссылка
	|			И ВыгружатьНаСайт
	|		СГРУППИРОВАТЬ ПО
	|			Владелец
	|	) КАК Картинки
	|ПО
	|	Картинки.Номенклатура = Спр.Ссылка
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Регистрнакопления.ТоварыНаСкладах.Остатки(,Номенклатура = &Ссылка) КАК Ост
	|ПО
	|	Спр.Ссылка = Ост.Номенклатура
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Регистрнакопления.ТоварыВРезерве.Остатки(,Номенклатура = &Ссылка) КАК Рез
	|ПО
	|	Спр.Ссылка = Рез.Номенклатура
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(	ВЫБРАТЬ Объект Номенклатура, МАКСИМУМ(ШтрихКод) КАК ШтрихКод
	|		ИЗ РегистрСведений.ШтрихКоды 
	|		ГДЕ Объект = &ССылка
	|		СГРУППИРОВАТЬ ПО Объект 
	|	) КАК ШтрихКоды
	|ПО
	|	Спр.Ссылка = ШтрихКоды.Номенклатура
	|
	|ГДЕ 
	|	Спр.ЭтоГруппа = ЛОЖЬ И
	|	Спр.ВыгружатьНаСайт = ИСТИНА И
	|	Спр.Ссылка = &Ссылка
	|" + ?(ФильтрДляДилеров,"И Спр.ДляДилеров = ИСТИНА","") + "
	|;
	
	// Остатки товаров
	
	|ВЫБРАТЬ
	|	Ост.Склад,
	|	Ост.Склад.Наименование КАК СкладНаименование,
	|	Ост.КоличествоОстаток  КАК Остаток,
	|	Ост.КоличествоОстаток - ЕСТЬNULL(Рез.КоличествоОстаток, 0)  КАК СвободныйОстаток,
	|	ЕСТЬNULL(Рез.КоличествоОстаток,0)  КАК Резерв,
	|	0  КАК Ожидается,
	|	0  КАК ВПути
	|ИЗ
	|	Регистрнакопления.ТоварыНаСкладах.Остатки(,Склад <> &ПустойСклад И Номенклатура = &Ссылка) КАК Ост
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Регистрнакопления.ТоварыВРезерве.Остатки(,Размещение <> &ПустойСклад И Номенклатура = &Ссылка) КАК Рез
	|ПО
	|	Ост.Склад 			= Рез.Размещение И
	|	Ост.Номенклатура 	= Рез.Номенклатура
	|;
	
	// Типы цен
	
	|ВЫБРАТЬ
	|	Цены.ТипЦен ТипЦен,
	|	ЕСТЬNULL(Акц.НоваяЦена, Цены.Цена) * (ЕСТЬNULL(ВалЦен.Курс, 1) * ЕСТЬNULL(ВалТипаЦен.Кратность, 1)) / (ЕСТЬNULL(ВалТипаЦен.Курс, 1) * ЕСТЬNULL(ВалЦен.Кратность, 1)) КАК Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата1,Номенклатура = &Ссылка И типЦен.ВыгружатьНаСайт = Истина) КАК Цены
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|			( 	ВЫБРАТЬ ТипЦен, Номенклатура, НоваяЦена
	|				ИЗ РегистрСведений.Акция.СрезПоследних(&Дата1, Номенклатура = &Ссылка И типЦен.ВыгружатьНаСайт = Истина)
	|				ГДЕ Акция <> &ПустаяАкция)  Акц
	|   ПО 
	|		Цены.Номенклатура = Акц.Номенклатура И Цены.ТипЦен = Акц.ТипЦен
	|ЛЕВОЕ СОЕДИНЕНИЕ 
	|	РегистрСведений.КурсыВалют.СрезПоследних(, ) ВалЦен
	|ПО 
	|	Цены.Валюта = ВалЦен.Валюта
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ 
	|	РегистрСведений.КурсыВалют.СрезПоследних(,Валюта = &ВалютаТипаЦен) ВалТипаЦен
	|ПО 
	|	ИСТИНА
	|;
	
	// Картинки
	
	|ВЫБРАТЬ
	|	Ссылка
	|ИЗ
	|	Справочник.КартинкиНоменклатуры
	|ГДЕ
	|	Владелец = &Ссылка
	|	И ВыгружатьНаСайт
	|");
	
	// Установим guid
	
	Ссылка = HTTP.ПолучитьОбъектПоСсылке(Справочники.Номенклатура, guid, error);
	Если Ссылка = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТипЦеныСайта = ПолучитьТипЦеныСайта();
	
	Запрос.УстановитьПараметр("Дата1", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ТипЦен", ТипЦеныСайта);
	Запрос.УстановитьПараметр("ВалютаТипаЦен", ТипЦеныСайта.Валюта);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ПустойСклад", Справочники.Склады.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяАкция", Документы.Акция.ПустаяСсылка());

	
	// Добавим товар в список
	
	Пакет			= Запрос.ВыполнитьПакет();
	Выборка 		= Пакет[0].Выбрать();
	ВыборкаСкладов 	= Пакет[1].Выбрать();
	ВыборкаЦен 		= Пакет[2].Выбрать();
	выборкаКартинок	= Пакет[3].Выбрать();
	
	Товар = ФабрикаXDTO.Создать(ТоварТип);
	
	Если Выборка.Следующий() Тогда
			
		Товар.category 		= ?(Выборка.Родитель.Пустая(), "", Строка(Выборка.Родитель.УникальныйИдентификатор()));
		Товар.manufacturer 	= Строка(Выборка.Производитель.УникальныйИдентификатор());
		Товар.GUID 			= XMLСтрока(Выборка.Ссылка);
		Товар.id_number 	= Выборка.id_number;
		Товар.name	 		= Выборка.Наименование;
		Товар.title 		= Выборка.title; //?(ПустаяСтрока(Выборка.title), Выборка.Наименование, Выборка.title);
		Товар.for_dealers 	= Выборка.for_dealers;
		Товар.price 		= Выборка.Цена;
		Товар.instock 		= Выборка.СвободныйОстаток;
		Товар.weight 		= Выборка.Вес;
		Товар.geometry 		= Выборка.Объем;
		Товар.instockunits	= Выборка.ЕдиницаИзмеренияНаименование;
		Товар.images_count	= Выборка.КолКартинок;
		//Товар.h1			= ?(ПустаяСтрока(Выборка.h1), Выборка.Наименование + " (заголовок)", Выборка.h1);
		Товар.h1			= Выборка.h1;
		Товар.alies			= ПреобразоватьAlies(Выборка.alies ,Выборка.ПорядковыйНомер);
		Товар.alies_en		= ПреобразоватьAlies(?(ЗначениеЗаполнено(Выборка.alies_en), Выборка.alies_en, Выборка.alies) ,Выборка.ПорядковыйНомер);
		
		Товар.expected		= Выборка.Ожидается;
		Товар.date_expected	= Выборка.ДатаОжидания;
		
		Товар.code			= Выборка.Код;
		Товар.product_code	= Выборка.Артикул;
		
		//Товар.dont_supply = Выборка.БольшеНеПоставляется;
		Товар.item_order 	= Выборка.ПодЗаказ;
		Товар.text_supply 	= Выборка.ТекстСообщенияОПоставкеТовара;
		
		Товар.description	= Выборка.Описание + ?(ФильтрДляДилеров,"", ДополнитьОписаниеПрикрепленнымиФайлами(Выборка.СсылкиКФайламДляСайта.Выбрать()));
		
		Товар.manufacture_rank = Выборка.Ранг;
		
		Товар.squares = ПреобразоватьЧислоВКвадратики(Выборка.СвободныйОстаток);		// Добавим остатки
		
		Товар.new 	= Выборка.Новинка;
		Товар.akcii = Выборка.Акция;
		Товар.sale 	= Выборка.Распродажа;       
		
		Если Не ФильтрДляДилеров Тогда
			ПолучитьСписокАналогов(Товар, Выборка.ссылка.УникальныйИдентификатор(), error);
			ПолучитьСписокСопутствующих(Товар, Выборка.ссылка.УникальныйИдентификатор(), error);
		КонецЕсли;
		
		Товар.meta_keywords		= Выборка.meta_keywords;
		Товар.meta_description 	= Выборка.meta_description;
		Товар.barcode 			= Выборка.barcode;
		
		Товар.evaluation = 0; // оценка товара
		
		Пока ВыборкаСкладов.Следующий() Цикл
			
			СтрокаНаСкладе = ФабрикаXDTO.Создать(ТипНаСкладе);
			
			СтрокаНаСкладе.Warehouse = СформироватьСкладXDTO(ТипСклад, ВыборкаСкладов.Склад, ВыборкаСкладов.СкладНаименование);
			СтрокаНаСкладе.instok	= ВыборкаСкладов.Остаток;
			СтрокаНаСкладе.waiting	= ВыборкаСкладов.Ожидается;
			СтрокаНаСкладе.transit	= ВыборкаСкладов.ВПути;
			СтрокаНаСкладе.reserve	= ВыборкаСкладов.Резерв;
			СтрокаНаСкладе.free		= ВыборкаСкладов.СвободныйОстаток;
			СтрокаНаСкладе.squares	= ПреобразоватьЧислоВКвадратики(ВыборкаСкладов.СвободныйОстаток);
			
			Товар.in_stock_warehouses.Добавить(СтрокаНаСкладе);
			
		КонецЦикла;
		
		// Добавим типы цен
		
		Пока ВыборкаЦен.Следующий() Цикл
			
			СтрокаЦен = ФабрикаXDTO.Создать(ТипСписокЦен);
			
			СтрокаЦен.price_guid 	= Строка(ВыборкаЦен.ТипЦен.УникальныйИдентификатор());
			СтрокаЦен.price 		= ВыборкаЦен.Цена;
			
			Товар.prices.Добавить(СтрокаЦен);
			
		КонецЦикла;
		
		// картинки
		
		Пока ВыборкаКартинок.Следующий() Цикл
			
			Товар.images_guids.Добавить(Строка(ВыборкаКартинок.Ссылка.УникальныйИдентификатор()));
			
		КонецЦикла;
							
		// Добавим родителей
		
		ДобавитьРодителейНоменклатуры(Товар, Выборка.Родитель, Выборка.Ссылка.ДополнительныеРодители, Истина);
		
		// Добавим дополнительные свойства
		
		ТаблДопСвойств = РаботаСНоменклатурой.ПолучитьДополнительныеРеквизитыНоменклатуры(Выборка.Ссылка);
		
		Для Каждого Строка Из ТаблДопСвойств Цикл
			
			Значение = ПолучитьУниверсальноеЗначениеXDTO(Строка.Свойство, Строка.Значение, Строка.ОтображатьВСписке, error);
			Если Значение = Неопределено Тогда
				Возврат Неопределено;
			КонецЕсли;
			
			Товар.value.Добавить(Значение);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Товар;
	
КонецФункции
Функция get_products(cat_guid = "", manufacturer_guid = "", begin_id = "", end_id = "", for_dealers = "false", error = "")
	
	ФильтрДляДилеров = Врег(for_dealers) = Врег("true");
	
	текВремя = ТекущаяДата();
	
	ЗаписьЖурналаРегистрации("HTTP.Трассировка.get_products",УровеньЖурналаРегистрации.Информация,,,"Получение метода:
	|cat_guid = " + cat_guid + "
	|manufacturer_guid = " + manufacturer_guid + "
	|begin_id = " + begin_id + "
	|end_id = " + end_id + "
	|cat_guid = " + cat_guid + "
	|");
	
	// cat_guid - идентификатор родителя
	
	СписокТоваровТип	= ФабрикаXDTO.Тип("http://www.garagetools.ru", "List_products");
	ТоварТип			= ФабрикаXDTO.Тип("http://www.garagetools.ru", "Product");
	СвойствоТип			= ФабрикаXDTO.Тип("http://www.garagetools.ru", "Property");
	ЗначенияСвойстТип	= ФабрикаXDTO.Тип("http://www.garagetools.ru", "Value");
	СписокРодителейТип	= ФабрикаXDTO.Тип("http://www.garagetools.ru", "List_categories");
	ТипНаСкладе			= ФабрикаXDTO.Тип("http://www.garagetools.ru", "In_stock_warehouse");
	ТипСклад			= ФабрикаXDTO.Тип("http://www.garagetools.ru", "Warehouse");
	ТипЦена				= ФабрикаXDTO.Тип("http://www.garagetools.ru", "Price");
	
	
	Запрос = Новый Запрос("
	
	// СПИСОК
	
	|ВЫБРАТЬ
	|	Ссылка КАК Номенклатура
	|ПОМЕСТИТЬ
	|	СписокТоваров
	|ИЗ
	|	Справочник.Номенклатура КАК Спр
	|ГДЕ 
	|	ЭтоГруппа = ЛОЖЬ И
	|	ВыгружатьНаСайт = ИСТИНА
	|	// ФильтрРодителей
	|	// ФильтрПроизводителей
	|	// ФильтрОграниченияОт
	|	// ФильтрОграниченияДо
    |;
	
	// ОСНОВНОЙ ЗАПРОС
	
	|ВЫБРАТЬ	
	|	Спр.Ссылка 							КАК Ссылка, 
	|	Спр.Родитель						КАК Родитель,
	|	Спр.Наименование 					КАК Наименование, 
	|	Спр.Производитель 					КАК Производитель, 
	|	ВЫБОР КОГДА Спр.ТопТовар ТОГДА 
	|				ЕСТЬNULL(Спр.Ранг,0) 
	|		  ИНАЧЕ 
	|				ЕСТЬNULL(Спр.Производитель.Ранг,0)
	|	КОНЕЦ КАК Ранг, 
	|	Спр.ПорядковыйНомер					КАК ПорядковыйНомер,
	|	Спр.Ожидается,
	|	Спр.ДатаОжидания,
	|	Спр.Код,
	|	Спр.Артикул,
	|	Спр.ПодЗаказ,
	|	Спр.ТекстСообщенияОПоставкеТовара,
	//|	Спр.СсылкиКФайламДляСайта.(URLнаСайте) СсылкиКФайламДляСайта,
	|	Спр.Вес							КАК Вес,
	|	Спр.Объем						КАК Объем,
	|	Спр.Новинка						КАК Новинка,
	|	Спр.БольшеНеПоставляется		КАК БольшеНеПоставляется,
	|	Спр.Акция						КАК Акция,
	|	Спр.Распродажа					КАК Распродажа,
	|	Спр.h1							КАК h1,
	|" + ?(ФильтрДляДилеров,"Спр.Описание_дилер","Спр.Описание") + "					Описание,
	|" + ?(ФильтрДляДилеров,"Спр.alies_дилер","Спр.alies") + "							alies,
	|" + ?(ФильтрДляДилеров,"Спр.alies_дилер","Спр.alies_ru") + "						alies_en,
	|" + ?(ФильтрДляДилеров,"Спр.title_дилер","Спр.title") + "							title,
	|" + ?(ФильтрДляДилеров,"Спр.meta_keywords_дилер","Спр.meta_keywords") + "			meta_keywords,
	|" + ?(ФильтрДляДилеров,"Спр.meta_description_дилер","Спр.meta_description") + "	meta_description,
	|	Спр.ПорядковыйНомер				КАК id_number,
	|	Спр.ДляДилеров 					for_dealers,
	|	ЕСТЬNULL(ШтрихКоды.ШтрихКод,"""")		КАК barcode,
	|	ЕСТЬNULL(Спр.ЕдиницаИзмерения.Наименование, """") 	КАК ЕдиницаИзмеренияНаименование,
	|	ЕСТЬNULL(Цены.Цена,0) 				КАК Цена,
	|	ЕСТЬNULL(Ост.КоличествоОстаток,0) - ЕСТЬNULL(Рез.КоличествоОстаток,0)	КАК СвободныйОстаток,
	|	ЕСТЬNULL(Картинки.КолКартинок,0)	КАК КолКартинок, 
	|	РегДоп.Свойство, РегДоп.ОтображатьВСписке, РегДоп.Значение
	|
	|ИЗ 		
	|	Справочник.Номенклатура КАК Спр
	| 
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(	ВЫБРАТЬ
	|			ЦеныНоменклатуры.Номенклатура,
	|			ЕСТЬNULL(Акц.НоваяЦена, ЦеныНоменклатуры.Цена) * (ЕСТЬNULL(ВалЦен.Курс, 1) * ЕСТЬNULL(ВалТипаЦен.Кратность, 1)) / (ЕСТЬNULL(ВалТипаЦен.Курс, 1) * ЕСТЬNULL(ВалЦен.Кратность, 1)) КАК Цена
	|		ИЗ
	|			РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата1, ТипЦен = &ТипЦен И Номенклатура  В(ВЫБРАТЬ Номенклатура ИЗ СписокТоваров)) ЦеныНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			( 	ВЫБРАТЬ ТипЦен, Номенклатура, НоваяЦена
	|				ИЗ РегистрСведений.Акция.СрезПоследних(&Дата1, Номенклатура  В(ВЫБРАТЬ Номенклатура ИЗ СписокТоваров) И ТипЦен = &ТипЦен)
	|				ГДЕ Акция <> &ПустаяАкция)  Акц 
	|       ПО 
	|			ЦеныНоменклатуры.Номенклатура = Акц.Номенклатура И ЦеныНоменклатуры.ТипЦен = Акц.ТипЦен
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.КурсыВалют.СрезПоследних(, ) ВалЦен
	|		ПО 
	|			ЦеныНоменклатуры.Валюта = ВалЦен.Валюта
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.КурсыВалют.СрезПоследних(, Валюта = &ВалютаТипаЦен) ВалТипаЦен
	|		ПО 
	|			ИСТИНА
	|		) Цены
	|ПО
	|	Спр.Ссылка = Цены.Номенклатура
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(	ВЫБРАТЬ 		
	|			Владелец КАК Номенклатура, 
	|			КОЛИЧЕСТВО(Ссылка) КАК КолКартинок
	|		ИЗ
	|			Справочник.КартинкиНоменклатуры
	|		ГДЕ
	|			Владелец В (ВЫБРАТЬ Номенклатура ИЗ СписокТоваров)
	|			И ВыгружатьНаСайт
	|		СГРУППИРОВАТЬ ПО
	|			Владелец
	|	) КАК Картинки
	|ПО
	|	Картинки.Номенклатура = Спр.Ссылка
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Регистрнакопления.ТоварыНаСкладах.Остатки(,Номенклатура  В(ВЫБРАТЬ Номенклатура ИЗ СписокТоваров)) КАК Ост
	|ПО
	|	Спр.Ссылка = Ост.Номенклатура
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Регистрнакопления.ТоварыВРезерве.Остатки() КАК Рез
	|ПО
	|	Спр.Ссылка = Рез.Номенклатура
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(	ВЫБРАТЬ Объект Номенклатура, МАКСИМУМ(ШтрихКод) КАК ШтрихКод
	|		ИЗ РегистрСведений.ШтрихКоды 
	|		СГРУППИРОВАТЬ ПО Объект 
	|	) КАК ШтрихКоды
	|ПО
	|	Спр.Ссылка = ШтрихКоды.Номенклатура
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ЗначенияДополнительныхРеквизитовНоменклатуры КАК РегДоп
	|ПО
	|	РегДоп.Номенклатура = Спр.Ссылка
	//|	РегДоп.Номенклатура = Спр.Родитель ИЛИ
	//|	РегДоп.Номенклатура = Спр.Родитель.Родитель ИЛИ
	//|	РегДоп.Номенклатура = Спр.Родитель.Родитель.Родитель ИЛИ
	//|	РегДоп.Номенклатура = Спр.Родитель.Родитель.Родитель.Родитель ИЛИ
	//|	РегДоп.Номенклатура = Спр.Родитель.Родитель.Родитель.Родитель.Родитель ИЛИ
	//|	РегДоп.Номенклатура = Спр.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель ИЛИ
	//|	РегДоп.Номенклатура = Спр.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель
	|
	|ГДЕ 
	|	Спр.Ссылка В(ВЫБРАТЬ Номенклатура ИЗ СписокТоваров)
	|" + ?(ФильтрДляДилеров,"И Спр.ДляДилеров = ИСТИНА","") + "
	|
	|ИТОГИ 
	|	МАКСИМУМ(Родитель),
	|	МАКСИМУМ(Наименование), 
	|	МАКСИМУМ(Производитель), 
	|	МАКСИМУМ(Ранг),
	|	МАКСИМУМ(ЕдиницаИзмеренияНаименование),
	|	МАКСИМУМ(Цена),
	|	МАКСИМУМ(СвободныйОстаток),
	|	МАКСИМУМ(Вес),
	|	МАКСИМУМ(Объем),
	|	МАКСИМУМ(КолКартинок),
	|	МАКСИМУМ(ПорядковыйНомер),
	|	МАКСИМУМ(Ожидается),
	|	МАКСИМУМ(ДатаОжидания),
	|	МАКСИМУМ(Код),
	|	МАКСИМУМ(Артикул),
	|	МАКСИМУМ(БольшеНеПоставляется),
	|	МАКСИМУМ(ПодЗаказ),
	|	МАКСИМУМ(ТекстСообщенияОПоставкеТовара),
	|	МАКСИМУМ(Описание),
	|	МАКСИМУМ(Новинка),
	|	МАКСИМУМ(Акция),
	|	МАКСИМУМ(Распродажа),
	|	МАКСИМУМ(h1),
	|	МАКСИМУМ(title),
	|	МАКСИМУМ(meta_keywords),
	|	МАКСИМУМ(meta_description),
	|	МАКСИМУМ(barcode)
	//|	МАКСИМУМ(СсылкиКФайламДляСайта)
	|ПО
	|	Спр.Ссылка
	|;
	
	// ПО СКЛАДАМ
	
	|ВЫБРАТЬ
	|	Ост.Номенклатура,
	|	Ост.Склад,
	|	Ост.Склад.Наименование КАК СкладНаименование,
	|	Ост.КоличествоОстаток  КАК Остаток,
	|	Ост.КоличествоОстаток - ЕСТЬNULL(Рез.КоличествоОстаток, 0)  КАК СвободныйОстаток,
	|	ЕСТЬNULL(Рез.КоличествоОстаток,0)  КАК Резерв,
	|	0  КАК Ожидается,
	|	0  КАК ВПути
	|ИЗ
	|	Регистрнакопления.ТоварыНаСкладах.Остатки(,Склад <> &ПустойСклад И Номенклатура  В(ВЫБРАТЬ Номенклатура ИЗ СписокТоваров)) КАК Ост
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Регистрнакопления.ТоварыВРезерве.Остатки(,Размещение <> &ПустойСклад И Номенклатура  В(ВЫБРАТЬ Номенклатура ИЗ СписокТоваров)) КАК Рез
	|ПО
	|	Ост.Склад 			= Рез.Размещение И
	|	Ост.Номенклатура 	= Рез.Номенклатура

	|;
	
	// ТИПЫ ЦЕН
	
	|ВЫБРАТЬ
	|	Цены.Номенклатура	Номенклатура,
	|	Цены.ТипЦен 		ТипЦен,
	|	ЕСТЬNULL(Акц.НоваяЦена, Цены.Цена) * (ЕСТЬNULL(ВалЦен.Курс, 1) * ЕСТЬNULL(ВалТипаЦен.Кратность, 1)) / (ЕСТЬNULL(ВалТипаЦен.Курс, 1) * ЕСТЬNULL(ВалЦен.Кратность, 1)) КАК Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата1,Номенклатура  В(ВЫБРАТЬ Номенклатура ИЗ СписокТоваров) И ТипЦен.ВыгружатьНаСайт = Истина) КАК Цены
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|			( 	ВЫБРАТЬ ТипЦен, Номенклатура, НоваяЦена
	|				ИЗ РегистрСведений.Акция.СрезПоследних(&Дата1, Номенклатура  В(ВЫБРАТЬ Номенклатура ИЗ СписокТоваров) И ТипЦен.ВыгружатьНаСайт = Истина)
	|				ГДЕ Акция <> &ПустаяАкция)  Акц 
	|   ПО 
	|		Цены.Номенклатура = Акц.Номенклатура И Цены.ТипЦен = Акц.ТипЦен
	|ЛЕВОЕ СОЕДИНЕНИЕ 
	|	РегистрСведений.КурсыВалют.СрезПоследних(, ) ВалЦен
	|ПО 
	|	Цены.Валюта = ВалЦен.Валюта
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ 
	|	РегистрСведений.КурсыВалют.СрезПоследних(, Валюта = &ВалютаТипаЦен) ВалТипаЦен
	|ПО 
	|	ИСТИНА
	|;
	
	// Картинки
	
	|ВЫБРАТЬ
	|	Ссылка,
	|	Владелец КАК Номенклатура
	|ИЗ
	|	Справочник.КартинкиНоменклатуры
	|ГДЕ
	|	Владелец В(ВЫБРАТЬ Номенклатура ИЗ СписокТоваров)
	|	И ВыгружатьНаСайт
	|;
	
	// Доп родители
	
	|ВЫБРАТЬ
	|	Ссылка КАК Номенклатура,
	|	Родитель
	|ИЗ
	|	Справочник.Номенклатура.ДополнительныеРодители
	|ГДЕ
	|	Ссылка В(ВЫБРАТЬ Номенклатура ИЗ СписокТоваров)
	|");
	
	ТипЦеныСайта = ПолучитьТипЦеныСайта();
	
	Запрос.УстановитьПараметр("Дата1", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ТипЦен", ТипЦеныСайта);
	Запрос.УстановитьПараметр("ВалютаТипаЦен", ТипЦеныСайта.Валюта);
	Запрос.УстановитьПараметр("ПустойСклад", Справочники.Склады.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяАкция", Документы.Акция.ПустаяСсылка());
	
	// Установим guid родителя
	
	Если Не ПустаяСтрока(cat_guid) Тогда
		
		СсылкаРодитель = HTTP.ПолучитьОбъектПоСсылке(Справочники.Номенклатура, cat_guid, error);
		Если СсылкаРодитель = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если СсылкаРодитель.ЭтоГруппа Тогда
		
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "// ФильтрРодителей", " 
			|И (Спр.Ссылка В ИЕРАРХИИ(&СсылкаРодитель) ИЛИ Спр.ДополнительныеРодители.Родитель В ИЕРАРХИИ (&СсылкаРодитель))");
			
			Запрос.УстановитьПараметр("СсылкаРодитель", СсылкаРодитель);
			
		Иначе
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "// ФильтрРодителей", " 
			|И Спр.Ссылка = &Ссылка");
			
			Запрос.УстановитьПараметр("Ссылка", СсылкаРодитель);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Установим guid производителя
	
	Если Не ПустаяСтрока(manufacturer_guid) Тогда
		
		СсылкаПроизводитель = HTTP.ПолучитьОбъектПоСсылке(Справочники.Производители, manufacturer_guid, error);
		Если СсылкаПроизводитель = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "// ФильтрПроизводителей", " И Спр.Производитель = &СсылкаПроизводитель");
		Запрос.УстановитьПараметр("СсылкаПроизводитель", СсылкаПроизводитель);
		
	КонецЕсли;
	
	// Установим ограничение запроса от
	
	Если Не ПустаяСтрока(begin_id) Тогда
		
		Число = ЧислоИзСтроки(begin_id, error);
		
		Если Число Тогда
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "// ФильтрОграниченияОт", " И Спр.ПорядковыйНомер >= &НомерОт");
			Запрос.УстановитьПараметр("НомерОт", Число);
			
		КонецЕсли;
	КонецЕсли;
	
	// Установим ограничение запроса до
	
	Если Не ПустаяСтрока(end_id) Тогда
		
		Число = ЧислоИзСтроки(end_id, error);
		
		Если Число Тогда
		
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "// ФильтрОграниченияДо", " И Спр.ПорядковыйНомер <= &НомерДО");
			Запрос.УстановитьПараметр("НомерДО", Число);
			
		КонецЕсли;
		
	КонецЕсли;
	
	
	// Добавим товар в список
	
	Пакет = Запрос.ВыполнитьПакет();
	
	ТаблицаОстатков = Пакет[2].Выгрузить();
	ТаблицаОстатков.Индексы.Добавить("Номенклатура");
	
	ТаблицаТиповЦен = Пакет[3].Выгрузить();
	ТаблицаТиповЦен.Индексы.Добавить("Номенклатура");
	
	ТаблицаКартинок = Пакет[4].Выгрузить();
	ТаблицаКартинок.Индексы.Добавить("Номенклатура");
	
	таблицаРодителей = Пакет[5].Выгрузить();
	таблицаРодителей.Индексы.Добавить("Номенклатура");
	
	ВыборкаТоваров 	= Пакет[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	СписокТоваров	= ФабрикаXDTO.Создать(СписокТоваровТип);
	
	колЗаписей = 0;
	
	Пока ВыборкаТоваров.Следующий() Цикл
			
		Товар = ФабрикаXDTO.Создать(ТоварТип);
		Товар.category 		= ?(ВыборкаТоваров.Родитель.Пустая(), "", Строка(ВыборкаТоваров.Родитель.УникальныйИдентификатор()));
		Товар.manufacturer 	= Строка(ВыборкаТоваров.Производитель.УникальныйИдентификатор());
		Товар.GUID 			= XMLСтрока(ВыборкаТоваров.Ссылка);
		Товар.id_number 	= ВыборкаТоваров.id_number;
		Товар.name	 		= ВыборкаТоваров.Наименование;
		Товар.title 		= ВыборкаТоваров.title; //?(ПустаяСтрока(ВыборкаТоваров.title), ВыборкаТоваров.Наименование, ВыборкаТоваров.title);
		Товар.for_dealers 	= ВыборкаТоваров.for_dealers;
		Товар.price 		= ВыборкаТоваров.Цена;
		Товар.instock 		= ВыборкаТоваров.СвободныйОстаток;
		Товар.weight 		= ВыборкаТоваров.Вес;
		Товар.geometry 		= ВыборкаТоваров.Объем;
		Товар.instockunits	= ВыборкаТоваров.ЕдиницаИзмеренияНаименование;
		Товар.images_count	= ВыборкаТоваров.КолКартинок;
		//Товар.h1			= ?(ПустаяСтрока(ВыборкаТоваров.h1), ВыборкаТоваров.Наименование + " (заголовок)", ВыборкаТоваров.h1);
		Товар.h1			= ВыборкаТоваров.h1;
		Товар.alies			= ПреобразоватьAlies(ВыборкаТоваров.alies ,ВыборкаТоваров.ПорядковыйНомер);
		Товар.alies_en		= ПреобразоватьAlies(?(ЗначениеЗаполнено(ВыборкаТоваров.alies_en), ВыборкаТоваров.alies_en, ВыборкаТоваров.alies) ,ВыборкаТоваров.ПорядковыйНомер);
		
		Товар.expected		= ВыборкаТоваров.Ожидается;
		Товар.date_expected	= ВыборкаТоваров.ДатаОжидания;
		
		Товар.code			= ВыборкаТоваров.Код;
		Товар.product_code	= ВыборкаТоваров.Артикул;
		
		//Товар.dont_supply = ВыборкаТоваров.БольшеНеПоставляется;
		Товар.item_order 	= ВыборкаТоваров.ПодЗаказ;
		Товар.text_supply 	= ВыборкаТоваров.ТекстСообщенияОПоставкеТовара;
		
		ЗапросПрил = Новый Запрос("ВЫБРАТЬ URLнаСайте, ВыгружатьНаСайт ИЗ Справочник.Номенклатура.СсылкиКФайламДляСайта ГДЕ Ссылка = &Ссылка");
		ЗапросПрил.УстановитьПараметр("Ссылка", ВыборкаТоваров.Ссылка);
		Товар.description	= ВыборкаТоваров.Описание + ?(ФильтрДляДилеров,"", ДополнитьОписаниеПрикрепленнымиФайлами(ЗапросПрил.Выполнить().Выбрать()));
		//Товар.description	= ВыборкаТоваров.Описание;
		
		Товар.manufacture_rank = ВыборкаТоваров.Ранг;
		
		Товар.squares = ПреобразоватьЧислоВКвадратики(ВыборкаТоваров.СвободныйОстаток);		
		
		Товар.new 	= ВыборкаТоваров.Новинка;
		Товар.akcii = ВыборкаТоваров.акция;
		Товар.sale 	= ВыборкаТоваров.Распродажа;
		
		Если Не ФильтрДляДилеров Тогда
			ПолучитьСписокАналогов(Товар, ВыборкаТоваров.ссылка.УникальныйИдентификатор(), error);
			ПолучитьСписокСопутствующих(Товар, ВыборкаТоваров.ссылка.УникальныйИдентификатор(), error);
		КонецЕсли;
		
		Товар.meta_keywords		= ВыборкаТоваров.meta_keywords;
		Товар.meta_description 	= ВыборкаТоваров.meta_description;
		Товар.barcode 			= ВыборкаТоваров.barcode;
		
		Товар.evaluation = 0; // оценка товара
		
		// Добавим остатки
		
		СтрокиОстатков = ТаблицаОстатков.НайтиСтроки(Новый Структура("Номенклатура", ВыборкаТоваров.Ссылка));
		
		Для Каждого Строка Из СтрокиОстатков Цикл
			
			СтрокаНаСкладе = ФабрикаXDTO.Создать(ТипНаСкладе);
			
			СтрокаНаСкладе.warehouse = СформироватьСкладXDTO(ТипСклад, Строка.Склад, Строка.СкладНаименование);
			СтрокаНаСкладе.instok	= Строка.Остаток;
			СтрокаНаСкладе.waiting	= Строка.Ожидается;
			СтрокаНаСкладе.transit	= Строка.ВПути;
			СтрокаНаСкладе.reserve	= Строка.Резерв;
			СтрокаНаСкладе.free		= Строка.СвободныйОстаток;
			СтрокаНаСкладе.squares	= ПреобразоватьЧислоВКвадратики(Строка.СвободныйОстаток);
			
			Товар.in_stock_warehouses.Добавить(СтрокаНаСкладе);
			
		КонецЦикла;
		
		// Добавим типы цен
		
		СтрокиТиповЦен = ТаблицаТиповЦен.НайтиСтроки(Новый Структура("Номенклатура", ВыборкаТоваров.Ссылка));
		
		Для Каждого Строка Из СтрокиТиповЦен Цикл
			
			ЦенаXDTO = ФабрикаXDTO.Создать(ТипЦена);
			ЦенаXDTO.price_guid = Строка(Строка.ТипЦен.УникальныйИдентификатор());
			ЦенаXDTO.price 		= Строка.Цена;
			
			Товар.prices.Добавить(ЦенаXDTO);
			
		КонецЦикла;
		
		// Добавим картинки
		
		СтрокиКартинок = ТаблицаКартинок.НайтиСтроки(Новый Структура("Номенклатура", ВыборкаТоваров.Ссылка));
		
		Для Каждого Строка Из СтрокиКартинок Цикл
			
			Товар.images_guids.Добавить(Строка(Строка.Ссылка.УникальныйИдентификатор()));
			
		КонецЦикла;

		
		// Добавим родителей
		
		ДобавитьРодителейНоменклатуры(	Товар, 
										ВыборкаТоваров.Родитель, 
										таблицаРодителей.НайтиСтроки(
												Новый Структура(	"Номенклатура", 
																	ВыборкаТоваров.Ссылка)), 
										Истина);
		
		// Добавим дополнительные свойства
		
		ВыборкаСвойств = ВыборкаТоваров.Выбрать();
		Пока ВыборкаСвойств.Следующий() Цикл
			Если ЗначениеЗаполнено(ВыборкаСвойств.Свойство) Тогда
			
				Значение = ПолучитьУниверсальноеЗначениеXDTO(ВыборкаСвойств.Свойство, ВыборкаСвойств.Значение, ВыборкаСвойств.ОтображатьВСписке, error);
				Если Значение = Неопределено Тогда
					Возврат Неопределено;
				КонецЕсли;
			
				Товар.value.Добавить(Значение);
				
			КонецЕсли;
		КонецЦикла;
		
		СписокТоваров.product.Добавить(Товар); колЗаписей = колЗаписей + 1;
		
	КонецЦикла;
	
	новВремя = ТекущаяДата();
	
	ЗаписьЖурналаРегистрации("HTTP.Трассировка.get_products",УровеньЖурналаРегистрации.Информация,,,"Окончания метода:
	|Получено элементов в списке " + колЗаписей + "
	|Время работы составило " + Строка(новВремя - текВремя) + " сек.
	|Error = " + error + "
	|");

	
	Возврат СписокТоваров;
	
КонецФункции

Функция ПолучитьЗапросПоГруппамТоваров(СсылкаГруппа = Неопределено, for_dealers = ЛОЖЬ)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Спр.Код, Спр.ДляДилеров for_dealers, Спр.h1, Спр.alies, Спр.alies_ru alies_en, Спр.Ссылка, Спр.ПорядковыйНомер id_number, Спр.title, Спр.meta_keywords, Спр.meta_description, Спр.Наименование,  Спр.Описание, Спр.Родитель, РегДоп.Свойство, РегДоп.Значение, ЕСТЬNULL(Картинки.КолКартинок,0) КАК КолКартинок
	|ИЗ 		
	|	Справочник.Номенклатура КАК Спр
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|(
	|	ВЫБРАТЬ Номенклатура, Свойство, Значение, ОтображатьВСписке
	|	ИЗ 		РегистрСведений.ЗначенияДополнительныхРеквизитовНоменклатуры 
	|	ГДЕ 	Номенклатура.ЭтоГруппа = ИСТИНА
	|) КАК РегДоп
	|
	|ПО
	|	РегДоп.Номенклатура = Спр.Ссылка
	//|	РегДоп.Номенклатура = Спр.Родитель ИЛИ
	//|	РегДоп.Номенклатура = Спр.Родитель.Родитель ИЛИ
	//|	РегДоп.Номенклатура = Спр.Родитель.Родитель.Родитель ИЛИ
	//|	РегДоп.Номенклатура = Спр.Родитель.Родитель.Родитель.Родитель ИЛИ
	//|	РегДоп.Номенклатура = Спр.Родитель.Родитель.Родитель.Родитель.Родитель ИЛИ
	//|	РегДоп.Номенклатура = Спр.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель ИЛИ
	//|	РегДоп.Номенклатура = Спр.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(	ВЫБРАТЬ 		
	|			Владелец КАК Номенклатура, 
	|			КОЛИЧЕСТВО(Ссылка) КАК КолКартинок
	|		ИЗ
	|			Справочник.КартинкиНоменклатуры
	|		ГДЕ
	|			Владелец.ЭтоГруппа = ИСТИНА
	|		СГРУППИРОВАТЬ ПО
	|			Владелец
	|	) КАК Картинки
	|ПО
	|	Картинки.Номенклатура = Спр.Ссылка
	|	
	|ГДЕ
	|" + ?(СсылкаГруппа = Неопределено, "
	|	Спр.ЭтоГруппа = ИСТИНА И
	|	Спр.ВыгружатьНаСайт = ИСТИНА
	|","
	|	Спр.Ссылка = &Ссылка
	|") + "
	|" + ?(for_dealers = ИСТИНА, "И Спр.ДляДилеров = ИСТИНА","") + "
	|
	|ИТОГИ 
	|	МАКСИМУМ(Спр.Наименование), МАКСИМУМ(Спр.Родитель), МАКСИМУМ(КолКартинок)
	|ПО
	|	Спр.Ссылка
	|");
	
	Если СсылкаГруппа <> Неопределено Тогда
		Запрос.УстановитьПараметр("Ссылка", СсылкаГруппа);
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции
Функция ЗаполнитьГруппуТовараВыборкой(КатегорияXDTO, ВыборкаРодителей, error = "")
	
	КатегорияXDTO.code_1c 		= ВыборкаРодителей.Код;
	КатегорияXDTO.parent 		= ?(ВыборкаРодителей.Родитель.Пустая(), 
											"", 
											Строка(ВыборкаРодителей.Родитель.УникальныйИдентификатор()));
	КатегорияXDTO.GUID 			= XMLСтрока(ВыборкаРодителей.Ссылка);
	КатегорияXDTO.id_number		= ВыборкаРодителей.id_number;
	
	КатегорияXDTO.name	 		= ВыборкаРодителей.Наименование;
	КатегорияXDTO.title 		= ?(ПустаяСтрока(ВыборкаРодителей.title), ВыборкаРодителей.Наименование, ВыборкаРодителей.title);
	КатегорияXDTO.for_dealers 	= ВыборкаРодителей.for_dealers;
	
	//КатегорияXDTO.h1			= ?(ПустаяСтрока(ВыборкаРодителей.h1), ВыборкаРодителей.Наименование + " (заголовок)", ВыборкаРодителей.h1);
	КатегорияXDTO.h1			= ВыборкаРодителей.h1;
	КатегорияXDTO.description 	= ВыборкаРодителей.Описание;
	
	КатегорияXDTO.alies 		= ВыборкаРодителей.alies;// "Группа_" + СтрЗаменить(ВыборкаРодителей.Наименование, " ", "_");
	КатегорияXDTO.alies_en 		= ВыборкаРодителей.alies_en;
	
	КатегорияXDTO.images_count	= ВыборкаРодителей.КолКартинок;
	
	КатегорияXDTO.meta_keywords 	= ВыборкаРодителей.meta_keywords;
	КатегорияXDTO.meta_description 	= ВыборкаРодителей.meta_description;
		
	// Добавим родителей
		
	ДобавитьРодителейНоменклатуры(КатегорияXDTO, ВыборкаРодителей.Родитель, ВыборкаРодителей.Ссылка.ДополнительныеРодители, Истина);
	ДобавитьРодителейНоменклатуры(КатегорияXDTO, ВыборкаРодителей.Родитель, ВыборкаРодителей.Ссылка.ДополнительныеРодители, Истина, "parents");
		
	// Добавим свойства
		
	ВыборкаСвойств = ВыборкаРодителей.Выбрать();
	Пока ВыборкаСвойств.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаСвойств.Свойство) Тогда
			
			Свойство = ПолучитьУниверсальноеСвойствоXDTO(ВыборкаСвойств.Свойство, Истина, error);
				
			Если Свойство = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
			
			КатегорияXDTO.property.Добавить(Свойство);
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции
Функция get_categories(for_dealers = "false", error = "")	// Получить всех родителей
	
	ФильтрДляДилеров = Врег(for_dealers) = Врег("true");
	
	СписокРодителейТип 	= ФабрикаXDTO.Тип("http://www.garagetools.ru", "List_categories");
	РодительТип			= ФабрикаXDTO.Тип("http://www.garagetools.ru", "Category");
	СписокРодителей 	= ФабрикаXDTO.Создать(СписокРодителейТип);
	
	// Получим запрос
	
	Запрос = ПолучитьЗапросПоГруппамТоваров(,ФильтрДляДилеров);
	
	// Заполним группу
	
	ВыборкаРодителей = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Пока ВыборкаРодителей.Следующий() Цикл
		
		// Создадим родителя
		
		Родитель = ФабрикаXDTO.Создать(РодительТип);
		
		Если Не ЗаполнитьГруппуТовараВыборкой(Родитель, ВыборкаРодителей, error) Тогда
			Возврат Неопределено
		КонецЕсли;
		
		// Добавим в список
		
		СписокРодителей.Category.Добавить(Родитель);
		
	КонецЦикла;
	
	Возврат СписокРодителей;
	
КонецФункции
Функция get_category(guid, for_dealers = "false", error = "")
	
	ФильтрДляДилеров = Врег(for_dealers) = Врег("true");
	
	РодительТип		= ФабрикаXDTO.Тип("http://www.garagetools.ru", "Category");
	Родитель 		= ФабрикаXDTO.Создать(РодительТип);
	
	// Получим родителя
	
	Ссылка = HTTP.ПолучитьОбъектПоСсылке(Справочники.Номенклатура, guid, error);
	Если Ссылка = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ФильтрДляДилеров И Не Ссылка.ДляДилеров Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Получим запрос
	
	Запрос = ПолучитьЗапросПоГруппамТоваров(Ссылка);
	
	// Заполним группу
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Если Выборка.Следующий() Тогда
		
		// Создадим родителя
		
		Если Не ЗаполнитьГруппуТовараВыборкой(Родитель, Выборка, error) Тогда
			Возврат Неопределено
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Родитель;
	
КонецФункции


Функция get_manufacturers(error = "")				// Получить всех производителей
	
	СписокПроизводителейТип = ФабрикаXDTO.Тип("http://www.garagetools.ru", "List_manufacturers");
	ПроизводительТип		= ФабрикаXDTO.Тип("http://www.garagetools.ru", "Manufacturer");
	СписокПроизводителей 	= ФабрикаXDTO.Создать(СписокПроизводителейТип);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 	Ссылка, Наименование title, ранг manufacture_rank, ЕСТЬNULL(Страна.Наименование,"""") country
	|ИЗ 		Справочник.Производители КАК Спр
	|");
	
	Дерево = Запрос.Выполнить().Выбрать();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
			
		Производитель = ФабрикаXDTO.Создать(ПроизводительТип);
		ЗаполнитьЗначенияСвойств(Производитель, Выборка);
		
		Производитель.GUID 	= XMLСтрока(Выборка.Ссылка);
		
		СписокПроизводителей.manufacturer.Добавить(Производитель);
			
	КонецЦикла;
	
	Возврат СписокПроизводителей;

КонецФункции
Функция get_manufacturer(cat_guid, error = "")		// Получить производителя
	
	ПроизводительТип = ФабрикаXDTO.Тип("http://www.garagetools.ru", "Manufacturer");
	
	Ссылка = HTTP.ПолучитьОбъектПоСсылке(Справочники.Производители, cat_guid, error);
	Если Ссылка = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Производитель = ФабрикаXDTO.Создать(ПроизводительТип);
	Производитель.GUID 				= XMLСтрока(Ссылка);
	Производитель.title				= Ссылка.Наименование;
	Производитель.manufacture_rank 	= Ссылка.Ранг;
	Производитель.country 			= Ссылка.Страна.Наименование;

	Возврат Производитель;

КонецФункции

Функция get_image_product(cat_guid = "", image = "", thumb = Истина,  error = "")		// Получить картинку номенклатуры
	
	//ЗаписьЖурналаРегистрации(
	//		"HTTP.SOAP", 
	//		УровеньЖурналаРегистрации.Информация,
	//		,
	//		,
	//		"Вызов get_image:
	//		|product:" + cat_guid + "
	//		|image:" + image + "
	//		|thumb:" + thumb + "
	//		|Вход в процедуру)");
	
	Если 	ПустаяСтрока(cat_guid) И
			ПустаяСтрока(image) Тогда
			
		error = "нужно задать guid товара или картинки (product = <?>, image = <?>)";
		Возврат "";
			
	КонецЕсли;
	
	Если Не ПустаяСтрока(cat_guid) Тогда
		
		Ссылка = HTTP.ПолучитьОбъектПоСсылке(Справочники.Номенклатура, cat_guid, error);
		Если Ссылка = Неопределено Тогда
			//Возврат Неопределено;
			Возврат "";
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(image) Тогда
		
		СсылкаКартинка = HTTP.ПолучитьОбъектПоСсылке(Справочники.КартинкиНоменклатуры, image, error);
		Если СсылкаКартинка = Неопределено Или СсылкаКартинка.Пустая() Тогда
			error = "Не найдена картинка по guid " + image;
			//Возврат Неопределено;
			Возврат "";
		КонецЕсли;
		
	Иначе
		
		СсылкаКартинка = Картинки.ПолучитьСсылкуОсновногоИзображения(Ссылка);
		
		Если СсылкаКартинка = Неопределено Или СсылкаКартинка.Пустая() Тогда
			error = "Не найдена картинка для товара " + Ссылка;
			//Возврат Неопределено;
			Возврат "";
		КонецЕсли;
		
	КонецЕсли;
	
	//ЗаписьЖурналаРегистрации(
	//		"HTTP.SOAP", 
	//		УровеньЖурналаРегистрации.Информация,
	//		,
	//		,
	//		"Вызов get_image:
	//		|product:" + cat_guid + "
	//		|image:" + image + "
	//		|thumb:" + thumb + "
	//		|перед получением картинки
	//		|картинка - " + строка(СсылкаКартинка));
	
	//desh.avdonin {{06.12.2013#
	Если ЗначениеЗаполнено(СсылкаКартинка.КопияКартинки) Тогда
		СсылкаКартинка = СсылкаКартинка.КопияКартинки;
	КонецЕсли;
	//}}desh.avdonin
	
	Картинка = СсылкаКартинка[?(thumb = Истина,"Аватар","Картинка")];
	
	Если Картинка = Неопределено Тогда
		error = "Пустая картикна в картинках " + СсылкаКартинка + " код - " + СсылкаКартинка.Код;
		//Возврат Неопределено
		Возврат "";
	КонецЕсли;
	
	ДвоичнКартинка = Картинка.Получить();
	
	Если Картинка = Неопределено Тогда
		error = "Пустые двоичнве данные в картинках " + СсылкаКартинка + " код - " + СсылкаКартинка.Код;
		//Возврат Неопределено
		Возврат "";
	КонецЕсли;
	
	Попытка
		
		//ЗаписьЖурналаРегистрации(
		//	"HTTP.SOAP", 
		//	УровеньЖурналаРегистрации.Информация,
		//	,
		//	,
		//	"Вызов get_image:
		//	|product:" + cat_guid + "
		//	|image:" + image + "
		//	|thumb:" + thumb + "
		//	|Возвращаем:
		//	|Тип знч: " + Строка(ТипЗнч(Картинка)) + " размер " + ДвоичнКартинка.Размер() + "
		//	|");			
			
		// Error = "Тип знч: " + Строка(ТипЗнч(Картинка)) + " размер " + ДвоичнКартинка.Размер();
		
		Возврат Base64Строка(ДвоичнКартинка.ПолучитьДвоичныеДанные());
		//Возврат Картинка.ПолучитьДвоичныеДанные();
		
	Исключение
		
		error = ОписаниеОшибки() + "
					|Ошибка получения картинки - " + СсылкаКартинка + " тип - " + ТипЗнч(Картинка);
		//Возврат Неопределено;
		Возврат "";
		
	КонецПопытки;
	
КонецФункции
Функция get_image_small(product, thumb, error)
	
	Если Не ПустаяСтрока(product) Тогда
		
		Ссылка = HTTP.ПолучитьОбъектПоСсылке(Справочники.Номенклатура, product, error);
		Если Ссылка = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	СсылкаКартинка = Картинки.ПолучитьСсылкуОсновногоИзображения(Ссылка, error);
		
	Если СсылкаКартинка = Неопределено Или СсылкаКартинка.Пустая() Тогда
		//error = error +"
		//			|Не найдена картинка для товара " + Ссылка;
		Возврат Неопределено;
	КонецЕсли;
	
	//desh.avdonin {{06.12.2013#
	Если ЗначениеЗаполнено(СсылкаКартинка.КопияКартинки) Тогда
		СсылкаКартинка = СсылкаКартинка.КопияКартинки;
	КонецЕсли;
	//}}desh.avdonin
	
	Картинка = СсылкаКартинка[?(thumb = Истина,"Аватар","Картинка")].Получить();
	
	Если Картинка = Неопределено Тогда
		
		// Если нет большой то вернем маленькую типа как большую
		
		Если Не thumb Тогда
			Картинка = СсылкаКартинка.Аватар.Получить();
		КонецЕсли;
		
		Если Картинка = Неопределено Тогда
			error = "Пустая картикна в картинках " + СсылкаКартинка + " код - " + СсылкаКартинка.Код;
			Возврат Неопределено
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		Возврат Картинка.ПолучитьДвоичныеДанные();
	Исключение
		error = "Ошибка получения картинки - " + СсылкаКартинка + " тип - " + ТипЗнч(Картинка);
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции


Функция get_property_enums(property, error = "")
	
	ТипСписокЗначенийПеречисления 	= ФабрикаXDTO.Тип("http://www.garagetools.ru", "List_property_enums");
	ТипЗначениеПеречисления			= ФабрикаXDTO.Тип("http://www.garagetools.ru", "Property_enum");
	СписокЗначенийПеречисления 		= ФабрикаXDTO.Создать(ТипСписокЗначенийПеречисления);
	
	Ссылка = HTTP.ПолучитьОбъектПоСсылке(ПланыВидовХарактеристик.ДополнительныеРеквизитыНоменклатуры, property, error);
	Если Ссылка = Неопределено Тогда
		Error = "Не найдено свойство по guid " + property;
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 	Ссылка, Наименование
	|ИЗ 		Справочник.ЗначенияДополнительныхРеквизитовНоменклатуры КАК Спр
	|ГДЕ 		Владелец = &Владелец
	|");
	
	Запрос.УстановитьПараметр("Владелец", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
			
		ЗначениеПеречисления = ФабрикаXDTO.Создать(ТипЗначениеПеречисления);
		ЗначениеПеречисления.GUID 		= Строка(Выборка.Ссылка.УникальныйИдентификатор());
		ЗначениеПеречисления.property 	= ПолучитьУниверсальноеСвойствоXDTO(Ссылка, Истина, error);
		ЗначениеПеречисления.title 		= Выборка.Наименование;

		СписокЗначенийПеречисления.property_enum.Добавить(ЗначениеПеречисления);
			
	КонецЦикла;
	
	Возврат СписокЗначенийПеречисления;

КонецФункции


Функция get_prices(price_type = "", category = "", error = "") 	// Получить цены номенклатур
	
	ТипСтрокаТипЦен 	= ФабрикаXDTO.Тип("http://www.garagetools.ru", "Line_product_price");
	ТипСписокТиповЦен 	= ФабрикаXDTO.Тип("http://www.garagetools.ru", "Line_product_price");
	СписокТиповЦен		= ФабрикаXDTO.Создать(ТипСписокТиповЦен);
	
	ЕстьГруппаНоменклатуры 	= ЗначениеЗаполнено(category);
	ЕстьТипЦен 				= ЗначениеЗаполнено(price_type);
	
	// Получим номенклатуру
	
	Если ЕстьгруппаНоменклатуры Тогда
	
		ГруппаНоменклатуры = HTTP.ПолучитьОбъектПоСсылке(Справочники.Номенклатура, category, error);
		Если ГруппаНоменклатуры = Неопределено Тогда
			Error = "Не найдена категория по guid " + category;
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	// Получим тип цен
	
	Если ЕстьТипЦен Тогда
	
		ТипЦен = HTTP.ПолучитьОбъектПоСсылке(Справочники.ТипыЦен, price_type, error);
		Если ТипЦен = Неопределено Тогда
			Error = "Не найдена категория по guid " + price_type;
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	// Запросим в базе
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Номенклатура,
	|	ТипЦен,
	|	Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(,ИСТИНА
	|" + ?(ЕстьТипЦен, " И ТипЦен = ТипЦен", "") + "
	|" + ?(ЕстьГруппаНоменклатуры, " И Номенклатура В ИЕРАРХИИ(&ГруппаНоменклатуры)", "") + "
	|													)
	|");
	
	// Установим параметры
	
	Если ЕстьТипЦен Тогда
		Запрос.УстановитьПараметр("ТипЦен", ТипЦен);
	КонецЕсли;
	Если ЕстьгруппаНоменклатуры Тогда
		Запрос.УстановитьПараметр("ГруппаНоменклатуры", ГруппаНоменклатуры);
	КонецЕсли;
	
	// переберм запрос
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаXDTO = ФабрикаXDTO.Создать(ТипСтрокаТипЦен);
		СтрокаXDTO.price_type 	= Строка(Выборка.ТипЦен.УникальныйИдентификатор());
		СтрокаXDTO.product 		= Строка(Выборка.Номенклатура.УникальныйИдентификатор());
		СтрокаXDTO.price 		= Выборка.Цена;
		
		СписокТиповЦен.line_product_price.Добавить(СтрокаXDTO);
			
	КонецЦикла;
	
	Возврат СписокТиповЦен;

КонецФункции
Функция get_product_price(product, price_type, error = "")		// Получить цену номенклатуры
	
	Номенклатура = HTTP.ПолучитьОбъектПоСсылке(Справочники.Номенклатура, product, error);
	Если Номенклатура = Неопределено Тогда
		Error = "Не найден товар по guid " + product;
		Возврат Неопределено;
	КонецЕсли;
	
	ТипЦен = HTTP.ПолучитьОбъектПоСсылке(Справочники.ТипыЦен, price_type, error);
	Если ТипЦен = Неопределено Тогда
		Error = "Не найдена категория по guid " + price_type;
		Возврат Неопределено;
	КонецЕсли;

	Возврат РаботаСНоменклатурой.ПолучитьЦену(Номенклатура, ТипЦен);
	
КонецФункции

Процедура ПолучитьСписокАналогов(ТоварWSDL, product = "", error = "")
	
	ЕстьФильтр = Не пустаяСтрока(product);
	
	// Возвращает аналоги
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 	РАЗЛИЧНЫЕ Номенклатура
	|ПОМЕСТИТЬ 	СписокНоменклатуры
	|ИЗ
	|(	ВЫБРАТЬ 	Номенклатура1 КАК Номенклатура
	|	ИЗ 			РегистрСведений.АналогиНоменклатуры КАК Табл1
	|	ГДЕ			Номенклатура1.ВыгружатьНаСайт = ИСТИНА
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ 	Номенклатура2
	|	ИЗ 			РегистрСведений.АналогиНоменклатуры КАК Табл1
	|	ГДЕ			Номенклатура2.ВыгружатьНаСайт = ИСТИНА
	|) КАК Запр
	|" + ?(ЕстьФильтр, " ГДЕ Номенклатура = &Номенклатура ", "") + "
	|;
	|
	|ВЫБРАТЬ
	|	Номенклатура,
	|	Аналог
	|ИЗ
	|(
	|	ВЫБРАТЬ
	|		Список.Номенклатура КАК Номенклатура,
	|		Табл.Номенклатура2 	КАК Аналог
	|	ИЗ 	
	|		СписокНоменклатуры КАК Список
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналогиНоменклатуры КАК Табл
	|	ПО
	|		Табл.Номенклатура1 = Список.Номенклатура
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Список.Номенклатура КАК Номенклатура,
	|		Табл.Номенклатура1 	КАК Аналог
	|	ИЗ
	|		СписокНоменклатуры КАК Список
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналогиНоменклатуры КАК Табл
	|	ПО
	|		Табл.Номенклатура2 = Список.Номенклатура
	|) КАК Запрос
	|
	|ГДЕ НЕ Аналог ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура,
	|	Аналог
	|
	|ИТОГИ ПО 
	|	Номенклатура
	|");
	
	Если ЕстьФильтр Тогда
		
		Номенклатура = HTTP.ПолучитьОбъектПоСсылке(Справочники.Номенклатура, product, error);
		
		Если Номенклатура = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		
	КонецЕсли;                                                                                     
	
	ВыборкаНоменклатуры = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Пока ВыборкаНоменклатуры.Следующий() Цикл
		
		//НоваяСтрока = ФабрикаXDTO.Создать(СтрокаСпискаТип);		
		//НоваяСтрока.guid = Строка(ВыборкаНоменклатуры.Номенклатура.УникальныйИдентификатор());
		
		ВыборкаАналогов = ВыборкаНоменклатуры.Выбрать();
		Пока ВыборкаАналогов .Следующий() Цикл
			
			//НоваяСтрока.guids.Добавить(Строка(ВыборкаАналогов.Аналог.УникальныйИдентификатор()));
			ТоварWSDL["analogs"].Добавить(XMLСтрока(ВыборкаАналогов.Аналог));

		КонецЦикла;
		
		//СписокСоответствий.line_comparison.Добавить(НоваяСтрока);
		
	КонецЦикла;
	
КонецПроцедуры
Процедура ПолучитьСписокСопутствующих(ТоварWSDL, product = "", error = "")
	
	// Возвращает сопутствующие товары
	
	ЕстьФильтр = Не пустаяСтрока(product);
	
	// Возвращает аналоги
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 	РАЗЛИЧНЫЕ Номенклатура
	|ПОМЕСТИТЬ 	СписокНоменклатуры
	|ИЗ
	|(	ВЫБРАТЬ 	Номенклатура1 КАК Номенклатура
	|	ИЗ 			РегистрСведений.СопутствующиеТовары КАК Табл1
	|	ГДЕ			Номенклатура1.ВыгружатьНаСайт = ИСТИНА
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ 	Номенклатура2
	|	ИЗ 			РегистрСведений.СопутствующиеТовары КАК Табл1
	|	ГДЕ			Номенклатура2.ВыгружатьНаСайт = ИСТИНА
	|) КАК Запр
	|" + ?(ЕстьФильтр, " ГДЕ Номенклатура = &Номенклатура ", "") + "
	|;
	|
	|ВЫБРАТЬ
	|	Номенклатура,
	|	Аналог
	|ИЗ
	|(
	|	ВЫБРАТЬ
	|		Список.Номенклатура КАК Номенклатура,
	|		Табл.Номенклатура2 	КАК Аналог
	|	ИЗ 	
	|		СписокНоменклатуры КАК Список
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СопутствующиеТовары КАК Табл
	|	ПО
	|		Табл.Номенклатура1 = Список.Номенклатура
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Список.Номенклатура КАК Номенклатура,
	|		Табл.Номенклатура1 	КАК Аналог
	|	ИЗ
	|		СписокНоменклатуры КАК Список
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СопутствующиеТовары КАК Табл
	|	ПО
	|		Табл.Номенклатура2 = Список.Номенклатура
	|) КАК Запрос
	|
	|ГДЕ НЕ Аналог ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура,
	|	Аналог
	|
	|ИТОГИ ПО 
	|	Номенклатура
	|");
	
	Если ЕстьФильтр Тогда
		
		Номенклатура = HTTP.ПолучитьОбъектПоСсылке(Справочники.Номенклатура, product, error);
		
		Если Номенклатура = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		
	КонецЕсли;
	
	ВыборкаНоменклатуры = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Пока ВыборкаНоменклатуры.Следующий() Цикл
		
		//НоваяСтрока = ФабрикаXDTO.Создать(СтрокаСпискаТип);		
		//НоваяСтрока.guid = Строка(ВыборкаНоменклатуры.Номенклатура.УникальныйИдентификатор());
		
		ВыборкаАналогов = ВыборкаНоменклатуры.Выбрать();
		Пока ВыборкаАналогов .Следующий() Цикл
			
			//НоваяСтрока.guids.Добавить(Строка(ВыборкаАналогов.Аналог.УникальныйИдентификатор()));
			ТоварWSDL["related"].Добавить(XMLСтрока(ВыборкаАналогов.Аналог));

		КонецЦикла;
		
		//СписокСоответствий.line_comparison.Добавить(НоваяСтрока);
		
	КонецЦикла;	
	
КонецПроцедуры

Функция get_analog_products(product = "", error = "")
	
КонецФункции
Функция get_related_products(product = "", error = "")

КонецФункции

// СВОЙСТВА

Функция ПолучитьУниверсальноеЗначениеXDTO(Свойство1С, Значение1C, Общее, error = "")
	
	Свойство = ПолучитьУниверсальноеСвойствоXDTO(Свойство1С, Общее, error);
	Если Свойство <> Неопределено Тогда
	
		Значение = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.garagetools.ru", "Value"));
		Значение.property = Свойство;
	
		Тип = ТипЗнч(Значение1C);
		
		Если 	Тип = Тип("СправочникСсылка.Номенклатура") Или
				Тип = Тип("СправочникСсылка.Производители") Тогда
				
			
			Значение.value = Строка(Значение1C.УникальныйИдентификатор());
			
		ИначеЕсли Тип = Тип("СправочникСсылка.ЗначенияДополнительныхРеквизитовНоменклатуры") Тогда
			
			Значение.value = Строка(Значение1C);
			
		ИначеЕсли Тип = Тип("Строка") Тогда
					
			Значение.value = Значение1C;
			
		ИначеЕсли Тип = Тип("Число") Тогда
					
			//Значение.value = Формат(Значение1C, "ЧГ=");
			Значение.value = XMLСтрока(Значение1C);
					
		ИначеЕсли Тип = Тип("Дата") Тогда
					
			//Значение.value = Формат(Значение1C, "ДФ=dd.MM.yyyy ЧЧ:мм:сс");;
			Значение.value = XMLСтрока(Значение1C);
			
		ИначеЕсли Тип = Тип("Булево") Тогда
			
			Значение.value = Число(Значение1C);
			
		Иначе
			
			error = error + ?(error = "","",символы.ПС) + "нет обработчика для преобразования типа " + Строка(Тип);
			Возврат Неопределено;

		КонецЕсли;
		
		Возврат Значение;
	
	КонецЕсли;
	
КонецФункции
Функция ПолучитьУниверсальноеСвойствоXDTO(Свойство1С, Общее, error = "")
	
	Свойство = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.garagetools.ru", "Property"));
	
	Свойство.title 		= Свойство1С.Наименование;
	Свойство.guid 		= Строка(Свойство1С.УникальныйИдентификатор());
	Свойство.public		= Общее;
	
	Тип1С = Свойство1С.ТипЗначения;
	
	Если Тип1С.СодержитТип(Тип("СправочникСсылка.Номенклатура")) Тогда
		
		Свойство.basetype 	= "product";
		
	ИначеЕсли Тип1С.СодержитТип(Тип("СправочникСсылка.Производители")) Тогда
		
		Свойство.basetype 	= "manufacturer";
		
	ИначеЕсли Тип1С.СодержитТип(Тип("СправочникСсылка.ЗначенияДополнительныхРеквизитовНоменклатуры")) Тогда
		
		Свойство.basetype 	= "enum";
		
	ИначеЕсли Тип1С.СодержитТип(Тип("Строка")) Тогда
		
		Свойство.basetype 		= "string";
		
	ИначеЕсли Тип1С.СодержитТип(Тип("Число")) Тогда
		
		Свойство.basetype 		= "float";
		
	ИначеЕсли Тип1С.СодержитТип(Тип("Дата")) Тогда
		
		Свойство.basetype 	= "datetime";
		
	ИначеЕсли Тип1С.СодержитТип(Тип("Булево")) Тогда
		
		Свойство.basetype 	= "boolean";

	Иначе
		
		//error = error + ?(error = "","",символы.ПС) + "нет обработчика для преобразования типа " + Строка(Тип1С);
		error = "нет обработчика для преобразования типа " + Строка(Тип1С);
		Возврат Неопределено;
		
	КонецЕсли;

	Возврат Свойство;
	
КонецФункции

Функция get_properties(guid = "", error = "")
	
	СписокСвойств = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.garagetools.ru", "List_properties"));
	
	// Получим товар
	
	Если Не ПустаяСтрока(guid) Тогда
		
		Свойство = HTTP.ПолучитьОбъектПоСсылке(ПланыВидовХарактеристик.ДополнительныеРеквизитыНоменклатуры, guid, error);
		
		Если Свойство = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Запрос 	= Новый Запрос("
		|ВЫБРАТЬ 	Ссылка КАК Свойство, ЛОЖЬ КАК Общее 
		|ИЗ 		ПланВидовХарактеристик.ДополнительныеРеквизитыНоменклатуры 
		|ГДЕ 		Ссылка = &Свойство");
		
		Запрос.УстановитьПараметр("Свойство", Свойство);
		
	Иначе
		
		Запрос 	= Новый Запрос("
		|ВЫБРАТЬ 	Ссылка КАК Свойство, ЛОЖЬ КАК Общее 
		|ИЗ 		ПланВидовХарактеристик.ДополнительныеРеквизитыНоменклатуры 
		|ГДЕ 		ПометкаУдаления = ЛОЖЬ");
		
	КонецЕсли;
	
	// Получим свойства
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПОка Выборка.Следующий() Цикл
		
		СвойствоXDTO = ПолучитьУниверсальноеСвойствоXDTO(Выборка.Свойство, Выборка.Общее, error);
		Если СвойствоXDTO = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		СписокСвойств.property.Добавить(СвойствоXDTO);
		
	КонецЦикла;
	
	Возврат СписокСвойств;
	
КонецФункции


// ПОЛЬЗОВАТЕЛИ

Процедура ОбновитьРеквизит(Объект, ИмяРеквизита, НовоеЗначение, Изменился)
	
	Если Объект[ИмяРеквизита] <> НовоеЗначение Тогда
		
		Объект[ИмяРеквизита] = НовоеЗначение;
		Изменился = Истина;
		
	КонецЕсли;
	
КонецПроцедуры


Функция ЗаписатьСправочник(СпрОбъект, error = "")
	
	Попытка
		
		СпрОбъект.Записать();
		
	Исключение
		
		стрОшибки = ОписаниеОшибки();
		error = "Ошибка при записи справочника """ + СпрОбъект.Метаданные().Синоним + """
					|" + стрОшибки;
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция ОбновитьСправочникПользовательИнтернет(СпрОбъект, name, surname, patronymic, birthday, email, contact_phone, phone, fax, legal_status, state, payer, consignee, payer_and_consignee_agree, address, bank_name, inn, kpp, okpo, bik, current_account, correspondent_account, director, accountant, error = "")
	
	Изменился = Ложь;
	
	ОбновитьРеквизит(СпрОбъект, "Имя", 					name, 			Изменился);
	ОбновитьРеквизит(СпрОбъект, "Фамилия", 				surname, 		Изменился);
	ОбновитьРеквизит(СпрОбъект, "Отчество", 			patronymic, 	Изменился);
	ОбновитьРеквизит(СпрОбъект, "ДеньРождения", 		birthday, 		Изменился);
	ОбновитьРеквизит(СпрОбъект, "ЭлектроннаяПочта", 	email, 			Изменился);
	ОбновитьРеквизит(СпрОбъект, "КонтактныйТелефон", 	contact_phone, 	Изменился);
	ОбновитьРеквизит(СпрОбъект, "Телефон", 				phone, 			Изменился);
	ОбновитьРеквизит(СпрОбъект, "Факс", 				fax, 			Изменился);
	ОбновитьРеквизит(СпрОбъект, "ЮрФизЛицо", 			legal_status, 	Изменился);
	ОбновитьРеквизит(СпрОбъект, "ШагиПриРегистрации", 	state, 			Изменился);
	ОбновитьРеквизит(СпрОбъект, "Плательшик", 			payer, 			Изменился);
	ОбновитьРеквизит(СпрОбъект, "Грузополучатель", 		consignee, 		Изменился);
	ОбновитьРеквизит(СпрОбъект, "ПлатильщикЯвляетсяГрузополучателем", 	payer_and_consignee_agree, Изменился);
	ОбновитьРеквизит(СпрОбъект, "Адрес", 				address, 		Изменился);
	ОбновитьРеквизит(СпрОбъект, "НаименованиеБанка", 	bank_name, 		Изменился);
	ОбновитьРеквизит(СпрОбъект, "ИНН", 					inn, 			Изменился);
	ОбновитьРеквизит(СпрОбъект, "КПП", 					kpp, 			Изменился);
	ОбновитьРеквизит(СпрОбъект, "ОКПО", 				okpo, 			Изменился);
	ОбновитьРеквизит(СпрОбъект, "Бик", 					bik, 			Изменился);
	ОбновитьРеквизит(СпрОбъект, "РасчетныйСчет", 		current_account,Изменился);
	ОбновитьРеквизит(СпрОбъект, "КорресподентскийСчет", correspondent_account, Изменился);
	ОбновитьРеквизит(СпрОбъект, "Директор", 			director, 		Изменился);
	ОбновитьРеквизит(СпрОбъект, "Бухгалтер", 			accountant, 	Изменился);
	
	Если Изменился Тогда
		
		Возврат ЗаписатьСправочник(СпрОбъект, error);
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции
Функция create_user(name, surname, patronymic, birthday, email, contact_phone, phone, fax, legal_status, state, payer, consignee, payer_and_consignee_agree, address, bank_name, inn, kpp, okpo, bik, current_account, correspondent_account, director, accountant, error = "")
	
	СпрОбъект = Справочники.ПользователиИнтернет.СоздатьЭлемент();
	СпрОбъект.ДатаСоздания = ТекущаяДата();
	
	ЗаписьЖурналаРегистрации(
			"HTTP.Созздание нового пользователя", 
			УровеньЖурналаРегистрации.Информация,
			,,
			"присланные данные:
			|name - " + name + "
			|surname - " + surname + "
			|patronymic - " + patronymic + "
			|email - " + email + "
			|contact_phone - " + contact_phone + "
			|phone - " + phone + "
			|fax - " + fax + "
			|legal_status - " + legal_status + "
			|state - " + state + "
			|payer - " + payer + "
			|consignee - " + consignee + "
			|payer_and_consignee_agree - " + payer_and_consignee_agree + "
			|address - " + address + "
			|bank_name - " + bank_name + "
			|inn - " + inn + "
			|kpp - " + kpp + "
			|okpo - " + okpo + "
			|bik - " + bik + "
			|current_account - " + current_account + "
			|correspondent_account - " + correspondent_account + "
			|director - " + director + "
			|accountant - " + accountant);
	
	Если ОбновитьСправочникПользовательИнтернет(СпрОбъект, name, surname, patronymic, birthday, email, contact_phone, phone, fax, legal_status, state, payer, consignee, payer_and_consignee_agree, address, bank_name, inn, kpp, okpo, bik, current_account, correspondent_account, director, accountant, error) Тогда
		
		Возврат Строка(СпрОбъект.Ссылка.УникальныйИдентификатор());
		
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
			"HTTP.Созздание нового пользователя", 
			УровеньЖурналаРегистрации.Ошибка,
			,,
			"Ошибка при записи пользователя
			|error = " + error);

	
КонецФункции
Функция update_user(user, name, surname, patronymic, birthday, email, contact_phone, phone, fax, legal_status, state, payer, consignee, payer_and_consignee_agree, address, bank_name, inn, kpp, okpo, bik, current_account, correspondent_account, director, accountant, error = "")
	
	ПользовательИнтернета = HTTP.ПолучитьОбъектПоСсылке(Справочники.ПользователиИнтернет, user, error);
	Если ПользовательИнтернета = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СпрОбъект = ПользовательИнтернета.ПолучитьОбъект();
	
	Если ОбновитьСправочникПользовательИнтернет(СпрОбъект, name, surname, patronymic, birthday, email, contact_phone, phone, fax, legal_status, state, payer, consignee, payer_and_consignee_agree, address, bank_name, inn, kpp, okpo, bik, current_account, correspondent_account, director, accountant, error) Тогда
		
		Возврат Строка(СпрОбъект.Ссылка.УникальныйИдентификатор());
		
	КонецЕсли;
	
КонецФункции

Функция ОбновитьСправочникАдресаДоставки(СпрОбъект, user, postcode, region_id, city_id, locality, address, comment, error = "")
	
	ПользовательИнтернета = HTTP.ПолучитьОбъектПоСсылке(Справочники.ПользователиИнтернет, user, error);
	Если ПользовательИнтернета = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Изменился = Ложь;
	
	ОбновитьРеквизит(СпрОбъект, "Владелец", 		ПользовательИнтернета, 	Изменился);
	ОбновитьРеквизит(СпрОбъект, "ПочтовыйИндекс", 	postcode, 				Изменился);
	ОбновитьРеквизит(СпрОбъект, "Регион", 			region_id, 				Изменился);
	ОбновитьРеквизит(СпрОбъект, "Город", 			city_id, 				Изменился);
	ОбновитьРеквизит(СпрОбъект, "Населенныйпункт", 	locality, 				Изменился);
	ОбновитьРеквизит(СпрОбъект, "Адрес", 			address, 				Изменился);
	ОбновитьРеквизит(СпрОбъект, "Комментарий", 		comment, 				Изменился);
	
	Если Изменился Тогда
		
		Возврат ЗаписатьСправочник(СпрОбъект, error);
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции
Функция create_adress(user, postcode, region_id, city_id, locality, address, comment, error = "")
	
	СпрОбъект = Справочники.АдресаДоставкиИнтернет.СоздатьЭлемент();
	
	ЗаписьЖурналаРегистрации(
			"HTTP.Созздание нового адреса доставки", 
			УровеньЖурналаРегистрации.Информация,
			,,
			"присланные данные:
			|user - " + user + "
			|postcode - " + postcode + "
			|region_id - " + region_id + "
			|city_id - " + city_id + "
			|locality - " + locality + "
			|address - " + address + "
			|comment - " + comment);
	
	Если ОбновитьСправочникАдресаДоставки(СпрОбъект, user, postcode, region_id, city_id, locality, address, comment, error) Тогда
		
		Возврат Строка(СпрОбъект.Ссылка.УникальныйИдентификатор());
		
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
			"HTTP.Созздание нового адреса доставки",
			УровеньЖурналаРегистрации.Ошибка,
			,,
			"Ошибка при записи пользователя
			|error = " + error);

	
КонецФункции
Функция update_adress(adress, user, postcode, region_id, city_id, locality, address, comment, error = "")
	
	АдресДоставки = HTTP.ПолучитьОбъектПоСсылке(Справочники.АдресаДоставкиИнтернет, adress, error);
	Если АдресДоставки = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СпрОбъект = АдресДоставки.ПолучитьОбъект();
	
	Если ОбновитьСправочникАдресаДоставки(СпрОбъект, user, postcode, region_id, city_id, locality, address, comment, error) Тогда
		
		Возврат Строка(СпрОбъект.Ссылка.УникальныйИдентификатор());
		
	КонецЕсли;
	
КонецФункции


//Процедура ЗаписатьЛоги(текст)
//	ЗаписьЖурналаРегистрации(
//			"HTTP.Пришло сообщение о напоминание товара", 
//			УровеньЖурналаРегистрации.Информация,
//			,
//			,
//			текст);	
//КонецПроцедуры

Функция inform_poducts(list_emails, error = "")
	
	// Расшифруем
	
	структураЯщиков = Json.UnJSON_silber(list_emails, error);
	Если структураЯщиков = Неопределено Тогда
		
		error = "произошла ошибка парсера Json
			|" + error;
			
		ЗаписьЖурналаРегистрации(
			"HTTP.В сообщение о напоминание товара произошла ошибка", 
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			"Данные:
			|" + list_emails + "
			|
			|Ошибка:
			|" + error);			
			
		Возврат Ложь;
		
	КонецЕсли;
	
	// запишем о том что нам пришло
	
	ЗаписьЖурналаРегистрации(
			"HTTP.Пришло сообщение о напоминание товара", 
			УровеньЖурналаРегистрации.Информация,
			,
			,
			list_emails);
	
	// Получим
	
	Рассылки = РегистрыСведений.РассылкиПользователям;
	
	Ном = 0;
	Для Каждого СтруктураЯщика Из структураЯщиков.list_emails Цикл
		Ном = Ном + 1;
		
		email 		= Неопределено;
		user 		= Неопределено;
		products	= Неопределено;
		
		// Получим почту
		
		Если Не СтруктураЯщика.Свойство("email", email) Тогда
			error = "в строке №" + Ном + " не указана почта ""email""";
			Возврат Ложь;
		КонецЕсли;
		
		// Расшифруем товары
		
		Если Не СтруктураЯщика.Свойство("products", products) Тогда
			error = "в строке №" + Ном + " не указаны товары ""products""";
			Возврат Ложь;
		КонецЕсли;
		
		// Получим пользователя
		
		Если СтруктураЯщика.Свойство("user", user) И user <> Неопределено Тогда
			
			СсылкаИнтернетПользователь = HTTP.ПолучитьОбъектПоСсылке(Справочники.ПользователиИнтернет, user, error);
			Если СсылкаИнтернетПользователь = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
			
		Иначе
			
			СсылкаИнтернетПользователь = Справочники.ПользователиИнтернет.ПустаяСсылка()
			
		КонецЕсли;

		// Создадим рассылку
		
		//Рассылки = РегистрыСведений.РассылкиПользователям;
		
		НомТов = 0;
		Для Каждого ГуидТовара Из products Цикл НомТов = НомТов + 1;
			
			СсылкаНоменклатуры = HTTP.ПолучитьОбъектПоСсылке(Справочники.Номенклатура, ГуидТовара, error);
			
			Если СсылкаНоменклатуры = Неопределено Тогда
				error = "для ящика " + email + "в строке №" + НомТов + " произошла ошибка получения товара
								|" + error;
								
				Возврат Ложь;
			КонецЕсли;
			// Запрос = Новый Запрос("ВЫБРАТЬ ИСТИНА
			//						| ИЗ
			//						|	РегистрСведений.РассылкиПользователям Расслыки
			//						| ГДЕ
			//						|	Расслыки.Номенклатура = &Товар
			//						|	Рассылки.email = """ + email + """ ");
			//					
			//Запрос.УстановитьПараметр("Товар", СсылкаНоменклатуры);
			//Если Запрос.Выполнить().Пустой() Тогда
			
			НоваяРассылка = Рассылки.СоздатьМенеджерЗаписи(); 
	
			НоваяРассылка.Номенклатура = СсылкаНоменклатуры;
			
			Если НЕ СсылкаИнтернетПользователь.Пустая() Тогда
					Получатель = СсылкаИнтернетПользователь;
				Иначе
				    Получатель = email;
				КонецЕсли;
				
			НоваяРассылка.Получатель = Получатель;
				
			НоваяРассылка.Прочитать();
			
			Если Не НоваяРассылка.Выбран() Тогда
					
					НоваяРассылка.Номенклатура = СсылкаНоменклатуры;
					НоваяРассылка.Получатель = Получатель;
			
					Попытка
						НоваяРассылка.Записать();
					Исключение
						стрОшибки = ОписаниеОшибки();
						error = "Ошибка при добавлении записей в регистр """ + НоваяРассылка.Метаданные().Синоним + """
									|" + стрОшибки;
									
						Возврат Ложь;
					КонецПопытки;
					
			КонецЕсли;
				
			КонецЦикла;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// ЗАКАЗЫ

Функция СформироватьОбновитьЗаказ_old(user = Неопределено, order, number = "", type_order = "", status = "", error = "", ЗаказОбъект = Неопределено)
	
	ЕстьЗаказ = ЗаказОбъект <> Неопределено;
	
	Если Не ЕстьЗаказ Тогда
		СсылкаИнтернетПользователь = HTTP.ПолучитьОбъектПоСсылке(Справочники.ПользователиИнтернет, user, error);
		Если СсылкаИнтернетПользователь = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
		
	ЗаписьЖурналаРегистрации("Сайт создал новый заказ", УровеньЖурналаРегистрации.Информация, , , order);
	
	ТипЦен = HTTP.ПолучитьТипЦенПользователяИнтернет(СсылкаИнтернетПользователь);
	
	// Форматнем структуру заказа
	
	ЗаказJson = Json.UnJSON_silber(order, error);
	Если ЗаказJson = Неопределено Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	// Создадим заказ
	
	Если Не ЕстьЗаказ Тогда
		
		Заказ 						= Документы.ИнтернетЗаказПокупателя.СоздатьДокумент();
		Заказ.Дата					= ТекущаяДата();
		Заказ.ПользовательИнтернет 	= СсылкаИнтернетПользователь;
		Заказ.ТипЦен 				= ТипЦен;
		Заказ.Валюта				= ТипЦен.Валюта;
		Заказ.СуммаВключаетНДС		= Истина;
		
	Иначе
		
		Заказ = ЗаказОбъект;
		Заказ.Товары.Очистить();
		
	КонецЕсли;
		
	// Поищем адрес доставки
	
	shipping_address = Неопределено;
	Если ЗаказJson.Свойство("shipping_address", 	shipping_address) Тогда
		
		СсылкаАдресДоставки = HTTP.ПолучитьОбъектПоСсылке(Справочники.АдресаДоставкиИнтернет, shipping_address, error);
		Если СсылкаАдресДоставки = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Заказ.АдресДоставки  = СсылкаАдресДоставки;
		
	КонецЕсли;

	// пошукаем склад
	
	warehouse_guid = Неопределено;
	Если ЗаказJson.Свойство("warehouse_guid", 	warehouse_guid) Тогда
		
		СсылкаСклад = HTTP.ПолучитьОбъектПоСсылке(Справочники.Склады, warehouse_guid, error);
		Если СсылкаСклад = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Заказ.Склад  = СсылкаСклад;
		
	КонецЕсли;
	
	// Заполним шапку
	
	ЭтоЧерновик = Ложь;
	ЗаказJson.Свойство("this_draft", 		ЭтоЧерновик);
	
	ЗаказJson.Свойство("cost_of_delivery", 	Заказ.СуммаДоставки);
	ЗаказJson.Свойство("comment", 			Заказ.Комментарий);
	ЗаказJson.Свойство("to_door", 			Заказ.ДоставкаДоДвери);
	ЗаказJson.Свойство("comment_delivery",	Заказ.КомментарийКДоставке);
	ЗаказJson.Свойство("contact_phone",		Заказ.Телефон);
	ЗаказJson.Свойство("email",				Заказ.Почта);
	ЗаказJson.Свойство("term_delivery",		Заказ.МаксимальныйСрокДоставки);
	ЗаказJson.Свойство("kind_payment_id",	Заказ.ТипОплаты);
	ЗаказJson.Свойство("variant_delivery",	Заказ.ВариантДоставки);
	
	// отформатируем строки
	
	Заказ.Комментарий 			= HTTP.UTFвANSI(Заказ.Комментарий);
	Заказ.КомментарийКДоставке 	= HTTP.UTFвANSI(Заказ.КомментарийКДоставке);
	
	СтрокиТоваровJson = Неопределено;
	Если Не ЗаказJson.Свойство("line_items", СтрокиТоваровJson) Тогда
		
		error = "Ошибка, не обнаружена таблица товаров, свойство ""line_items""";
		Возврат Неопределено
		
	КонецЕсли;
	
	Ном = 0;
	Для Каждого СтруктураСтроки Из СтрокиТоваровJson Цикл Ном = Ном + 1;
		
		// Получим товар
		
		product_guid = Неопределено;
		Если Не СтруктураСтроки.Свойство("product_guid", product_guid) Тогда
			error = "Ошибка, не обнаружен товар в строке №" + Ном + ", свойство ""product_guid""";
			Возврат Неопределено
		КонецЕсли;
		
		СсылкаНоменклатура = HTTP.ПолучитьОбъектПоСсылке(Справочники.Номенклатура, product_guid, error);
		Если СсылкаНоменклатура = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		НовСтрока = Заказ.Товары.Добавить();
		НовСтрока.Номенклатура 	= СсылкаНоменклатура;
		НовСтрока.Цена 			= РаботаСНоменклатурой.ПолучитьЦену(СсылкаНоменклатура, ТипЦен);
		
		СтруктураСтроки.Свойство("quantity", 		НовСтрока.Количество);
		СтруктураСтроки.Свойство("line_item_id", 	НовСтрока.ID_строки);
		
		// пересчитаем строку
		
		НовСтрока.Сумма 		= НовСтрока.Цена * НовСтрока.Количество;
		НовСтрока.СтавкаНДС		= СсылкаНоменклатура.СтавкаНДС;
		НовСтрока.СуммаНДС 		= КэшируемыеФункции.ПолучитьЧислоСтавкиНДС(НовСтрока.СтавкаНДС) * НовСтрока.Сумма * 0.01;
		
	КонецЦикла;
	
	// Запишем заказ
	
	НачатьТранзакцию();
	
	Попытка
		Заказ.УстановитьНовыйНомер();
		Заказ.ОбменДанными.Загрузка = Истина;
		Заказ.Записать();
	Исключение
		стрОшибки = ОписаниеОшибки();
		ОтменитьТранзакцию();
		error = "Ошибка при записи интернет заказа
		|" + стрОшибки;
		Возврат Неопределено;
	КонецПопытки;
	
	// пометим на удаление если это черновик (времмено)
	
	Если ЭтоЧерновик Тогда
		
		Попытка
			Заказ.УстановитьПометкуУдаления(Истина);
		Исключение
			стрОшибки = ОписаниеОшибки();
			ОтменитьТранзакцию();
			error = "Ошибка при записи интернет заказа при переводе в статус черновики
						|" + стрОшибки;
			Возврат Неопределено;
		КонецПопытки;
		
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
	// Установим возвращаемые параметры
	
	type_order 	= HTTP.ПолучитьТипЗаказа(Заказ.Ссылка);
	status		= HTTP.ПолучитьТекстСтатусаЗаказа(Заказ.Ссылка);
	
	number = Заказ.Номер;
	
	Возврат Строка(Заказ.Ссылка.УникальныйИдентификатор());
	
КонецФункции

Функция create_orders(user, order, number = "", type_order = "", status = "", products = "", error = "")
	
//	method нужно удалить, он не нужен. Обязательно нужно указывать пользователя, к которому привязан заказ (что-нибудь типа user_id или user_guid), type_order может иметь только одно из трёх значений:
//1. only_goods_in_stock (Оформить только на товары в наличии)
//2. wait_goods (Оформить только после поступление всех товаров)
//3. good_in_stock_and_good_under_order (доставка два раза)

	ЗаписьЖурналаРегистрации("HTTP.create_order", УровеньЖурналаРегистрации.Информация, , , 
			"user = " + user + "
			|order = " + order);


	Попытка
		Результат = HTTP.СформироватьОбновитьЗаказ(user, order, number, type_order, status, error, products);
	Исключение
		стрОшикби 	= ОписаниеОшибки();
		error 		= стрОшикби;
		ЗаписьЖурналаРегистрации("HTTP.create_order", УровеньЖурналаРегистрации.Ошибка, , , стрОшикби);
		Возврат "";
	КонецПопытки;
	
	Возврат Результат;
		
КонецФункции
Функция update_order(guid, order, number, type_order, status, error, products = "")
	
	ЗаписьЖурналаРегистрации("HTTP.update_order", УровеньЖурналаРегистрации.Информация, , , 
			"guid = " + guid + "
			|order = " + order);
	
	// получим заказ
   
	СсылкаЗаказ = HTTP.ПолучитьОбъектПоСсылке(Документы.ИнтернетЗаказПокупателя, guid, error);
	Если СсылкаЗаказ = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЗаказОбъект = СсылкаЗаказ.ПолучитьОбъект();
	
	Возврат HTTP.СформироватьОбновитьЗаказ(, order, number, type_order, status, error, products, ЗаказОбъект);
	
КонецФункции

Функция remove_order(guid, error)
	
	ЗаписьЖурналаРегистрации("HTTP.remove_order", УровеньЖурналаРегистрации.Информация, , , 
			"guid = " + guid);
	
	// получим заказ
	СсылкаЗаказ = HTTP.ПолучитьОбъектПоСсылке(Документы.ИнтернетЗаказПокупателя, guid, error);
	Если СсылкаЗаказ = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаказОбъект = СсылкаЗаказ.ПолучитьОбъект();
	
	// пометим на удаление
	Попытка
		ЗаказОбъект.УстановитьПометкуУдаления(Истина);
	Исключение
		error = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("HTTP.remove_order", УровеньЖурналаРегистрации.Ошибка, , , error);
		Возврат Ложь;
	КонецПопытки;
	
	// завершим бизнес-процесс
	БизнесПроцесс = HTTP.ПолучитьБизнесПроцесс(ЗаказОбъект.Ссылка, error);
	Если БизнесПроцесс = Неопределено Тогда
		ЗаписьЖурналаРегистрации("HTTP.remove_order", УровеньЖурналаРегистрации.Ошибка, , , error);
		Возврат Ложь;
	КонецЕсли;
	
	ПроцессОбъект = БизнесПроцесс.ПолучитьОбъект();
	//ПроцессОбъект.Статус = Перечисления.СтатусыИнтерентЗаявки.Закрыт;
	Попытка
		ПроцессОбъект.Записать();
	Исключение
		error = "Ошибка при записи бизнес-процесса: " + ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("HTTP.remove_order", УровеньЖурналаРегистрации.Ошибка, , , error);
		Возврат Ложь;
	КонецПопытки;
	
	Если ФункцииБизнесПроцессов.СтоитНаТочкеМаршрута(БизнесПроцесс, БизнесПроцессы.ИнтернетЗаявка.ТочкиМаршрута.ОжиданиеОтвета) Тогда
		Задача = ФункцииБизнесПроцессов.ТекущаяЗадача(БизнесПроцесс);
		ЗадачаОбъект = Задача.ПолучитьОбъект();
		Попытка
			ЗадачаОбъект.ВыполнитьЗадачу();
		Исключение 
			error = "Ошибка при выполнении задачи: " + ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("HTTP.remove_order", УровеньЖурналаРегистрации.Ошибка, , , error);
			Возврат Ложь;
		КонецПопытки;

	КонецЕсли;
	
	
	Возврат Истина;

КонецФункции


Функция create_order_under(order, ЭтоЧерновик, number = "", type_order = "", status = "", error = "")
	
	ЗаписьЖурналаРегистрации("HTTP.create_order_under", УровеньЖурналаРегистрации.Информация, , , 
			"ЭтоЧерновик = " + ЭтоЧерновик + "
			|order = " + order);
	
	
	// получим заказ
   
	СсылкаЗаказ = HTTP.ПолучитьОбъектПоСсылке(Документы.ИнтернетЗаказПокупателя, order, error);
	Если СсылкаЗаказ = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Создадим на основании
	
	Заказ = Документы.ИнтернетЗаказПокупателя.СоздатьДокумент();
	Заказ.Заполнить(СсылкаЗаказ);
	
	Заказ.Дата 				= ТекущаяДата();
	Заказ.ПометкаУдаления 	= ЭтоЧерновик;
	
	// Запишем
	
	НачатьТранзакцию();
	
	Попытка
		Заказ.Записать();
	Исключение
		стрОшибки = ОписаниеОшибки();
		ОтменитьТранзакцию();
		error = "Ошибка при записи интернет заказа
		|" + стрОшибки;
		Возврат Ложь;
	КонецПопытки;
	
	// пометим на удаление если это черновик (времмено)
	
	Если ЭтоЧерновик Тогда
		
		Попытка
			Заказ.УстановитьПометкуУдаления(Истина);
		Исключение
			стрОшибки = ОписаниеОшибки();
			ОтменитьТранзакцию();
			error = "Ошибка при записи интернет заказа при переводе в статус черновики
						|" + стрОшибки;
			Возврат Неопределено;
		КонецПопытки;
		
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
	// Установим возвращаемые параметры
	
	type_order 	= HTTP.ПолучитьТипЗаказа(Заказ.Ссылка);
	status		= HTTP.ПолучитьТекстСтатусаЗаказа(Заказ.Ссылка);
	
	Возврат Строка(Заказ.Ссылка.УникальныйИдентификатор());
	
КонецФункции

Функция get_order(guid, error)
	
	ЗаказТип			= ФабрикаXDTO.Тип("http://www.garagetools.ru", 	"Order");
	ШапкаТип 			= ФабрикаXDTO.Тип("http://www.garagetools.ru", 	"Hat_order");
	СтрокаЗаказаТип		= ФабрикаXDTO.Тип("http://www.garagetools.ru", 	"Line_order");
	ЗаказXDTO			= ФабрикаXDTO.Создать(ЗаказТип);
	ШапкаXDTO			= ФабрикаXDTO.Создать(ШапкаТип);
	
	// получим заказ
   
	СсылкаЗаказ = HTTP.ПолучитьОбъектПоСсылке(Документы.ИнтернетЗаказПокупателя, guid, error);
	Если СсылкаЗаказ = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Состряпаем запрос
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Зак.Ссылка 				КАК Ссылка,
	|	Зак.Номер 				КАК number,
	|	Зак.Дата 				КАК date,
	|	Зак.Сумма		 		КАК total,
	|	Зак.Комментарий 		КАК comment,
	|	Товары.(	Номенклатура 	КАК Ссылка,
	|				Сумма 			КАК sum,
	|				Количество 		КАК quantity) КАК Товары
	|
	|ИЗ
	|	Документ.ИнтернетЗаказПокупателя КАК Зак
	|ГДЕ
	|	Ссылка = &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаЗаказ);
	          
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(ШапкаXDTO, Выборка);
		
		ШапкаXDTO.guid = XMLСтрока(Выборка.Ссылка);
		ШапкаXDTO.method		= "на складе";
		ШапкаXDTO.payment		= "не оплачен";
		ШапкаXDTO.type_order	= HTTP.ПолучитьТипЗаказа(Выборка.Ссылка);
		ШапкаXDTO.status 		= HTTP.ПолучитьТекстСтатусаЗаказа(Выборка.Ссылка);
		
		ВыборкаТоваров = Выборка.Товары.Выбрать();
		Пока ВыборкаТоваров.Следующий() Цикл
			
			СтрокаXDTO = ФабрикаXDTO.Создать(СтрокаЗаказаТип);
			ЗаполнитьЗначенияСвойств(СтрокаXDTO, ВыборкаТоваров);
			СтрокаXDTO.guid = XMLСтрока(ВыборкаТоваров.Ссылка);
			
		КонецЦикла;
		
		ЗаказXDTO.line.Добавить(СтрокаXDTO);
		
	КонецЕсли;
	
	ЗаказXDTO.hat = ШапкаXDTO;

	Возврат ЗаказXDTO;
	
КонецФункции

Функция get_list_orders(user, type_order = "", error = "")
	
	СтрокаШапкиТип 		= ФабрикаXDTO.Тип("http://www.garagetools.ru", "Hat_order");
	СписокЗаказовТип	= ФабрикаXDTO.Тип("http://www.garagetools.ru", "List_orders");
	СписокЗаказов 		= ФабрикаXDTO.Создать(СписокЗаказовТип);
	
	// получим пользователя
   
	СсылкаИнтернетПользователь = HTTP.ПолучитьОбъектПоСсылке(Справочники.ПользователиИнтернет, user, error);
	Если СсылкаИнтернетПользователь = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Состряпаем запрос
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Зак.Ссылка КАК Ссылка,
	|	Зак.Номер КАК number,
	|	Зак.Дата КАК date,
	|	Зак.Сумма КАК total,
	|	Зак.Комментарий КАК comment,
	|	ВЫБОР КОГДА Зак.Проведен = Истина ТОГДА """ + HTTP.ТипЗаказа_отгруженные() + """ КОГДА Зак.ПометкаУдаления = Ложь ТОГДА """ + HTTP.ТипЗаказа_Текущие() + """ ИНАЧЕ """ + HTTP.ТипЗаказа_Черновик() + """ КОНЕЦ КАК type_order
	|
	|ИЗ
	|	Документ.ИнтернетЗаказПокупателя КАК Зак
	|ГДЕ
	|	Зак.ПользовательИнтернет = &ПользовательИнтернет
	//|	Зак.ПометкаУдаления = Ложь
	|");

	// Получим тип заказа
	
	Если Не пустаяСтрока(type_order) Тогда
		
		Если type_order = HTTP.ТипЗаказа_Черновик() Тогда // черновики
			
			Запрос.Текст = Запрос.Текст + "
			|	И Зак.ЭтоЧерновик = Истина";
						
		ИначеЕсли type_order = HTTP.ТипЗаказа_Текущие() Тогда // текущие
			
			Запрос.Текст = Запрос.Текст + "
			|	И Зак.Проведен = Ложь";

		ИначеЕсли type_order = HTTP.ТипЗаказа_отгруженные() Тогда // выполненнын
			
			Запрос.Текст = Запрос.Текст + "
			|	И Зак.Проведен = Истина";
			
		Иначе
			
			error = "Не известный тип заказа, тип - " + type_order;
			Возврат Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПользовательИнтернет", СсылкаИнтернетПользователь);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаШапки = ФабрикаXDTO.Создать(СтрокаШапкиТип);
		
		СтрокаШапки.guid 		= Строка(Выборка.Ссылка.УникальныйИдентификатор());
		СтрокаШапки.number		= Выборка.number;
		СтрокаШапки.date		= Выборка.date;
		СтрокаШапки.total		= Выборка.total;
		СтрокаШапки.method		= "на складе";
		СтрокаШапки.payment		= "не оплачен";
		СтрокаШапки.type_order	= HTTP.ПолучитьТипЗаказа(Выборка.Ссылка);
		СтрокаШапки.status 		= HTTP.ПолучитьТекстСтатусаЗаказа(Выборка.Ссылка);
		СтрокаШапки.comment		= Выборка.comment;
		
		СписокЗаказов.hat.Добавить(СтрокаШапки);
		
	КонецЦикла;
	
	Возврат СписокЗаказов;
	
КонецФункции
Функция get_table_order(order, error = "")

	СтрокаТаблицыТип 	= ФабрикаXDTO.Тип("http://www.garagetools.ru", "Line_order");
	ТаблицаТип			= ФабрикаXDTO.Тип("http://www.garagetools.ru", "Table_order");
	Таблица 			= ФабрикаXDTO.Создать(ТаблицаТип);
	
	
	// получим заказ
   
	СсылкаЗаказ = HTTP.ПолучитьОбъектПоСсылке(Документы.ИнтернетЗаказПокупателя, order, error);
	Если СсылкаЗаказ = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Состряпаем запрос
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Номенклатура,
	|	Сумма,
	|	Количество
	|ИЗ
	|	Документ.ИнтернетЗаказПокупателя.Товары КАК Зак
	|ГДЕ
	|	Ссылка = &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаЗаказ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Строка = ФабрикаXDTO.Создать(СтрокаТаблицыТип);
		
		Строка.guid 		= Строка(Выборка.Номенклатура.УникальныйИдентификатор());
		Строка.sum			= Выборка.Сумма;
		Строка.quantity		= Выборка.Количество;
		
		Таблица.line_order.Добавить(Строка);
		
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции

Функция order_draft_on(order, error = "")
	
	// получим заказ
   
	СсылкаЗаказ = HTTP.ПолучитьОбъектПоСсылке(Документы.ИнтернетЗаказПокупателя, order, error);
	Если СсылкаЗаказ = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Установим стату
	
	Если Не СсылкаЗаказ.ПометкаУдаления Тогда
		
		Заказ = СсылкаЗаказ.ПолучитьОбъект();
		
		Попытка
			Заказ.УстановитьПометкуУдаления(Истина);
		Исключение
			стрОшибки = ОписаниеОшибки();
			ОтменитьТранзакцию();
			error = "Ошибка при записи интернет заказа при переводе в статус черновики
						|" + стрОшибки;
			Возврат Ложь;
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции
Функция order_draft_off(order, error = "")
	
	// получим заказ
   
	СсылкаЗаказ = HTTP.ПолучитьОбъектПоСсылке(Документы.ИнтернетЗаказПокупателя, order, error);
	Если СсылкаЗаказ = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Установим стату
	
	Если СсылкаЗаказ.ПометкаУдаления Тогда
		
		Заказ = СсылкаЗаказ.ПолучитьОбъект();
		
		Попытка
			Заказ.УстановитьПометкуУдаления(Ложь);
		Исключение
			стрОшибки = ОписаниеОшибки();
			ОтменитьТранзакцию();
			error = "Ошибка при записи интернет заказа при переводе из статуса черновики в обычный заказ
						|" + стрОшибки;
			Возврат Ложь;
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// ОТЗЫВЫ

Функция create_blog_comment(article, user, evaluation = "", comment, error = "")
	
	error = "";
	Ошибка = Ложь;
	
	// Получим статью
	
	Статья = HTTP.ПолучитьОбъектПоСсылке(Справочники.ИнтернетСтатьи, article, error);
	Если Статья = Неопределено Тогда
		Ошибка = Истина;
	КонецЕсли;

	// Проверим комментарий
	
	Если ПустаяСтрока(comment) Тогда
		
		ДобавитьОшибку(error, "Не указан комментарий");
		Ошибка = Истина;
		
	КонецЕсли;
	
	// Проверим оценку
	
	Оценка = 0;
	
	Если Не ПустаяСтрока(evaluation) Тогда
		
		Попытка
			
			Оценка = Число(evaluation);
			
			Если Оценка < 0 Или Оценка > 5 Тогда
				ДобавитьОшибку(error, "Оценка статьи не входит в диапозон (1-5), evaluation = " + evaluation);
				Ошибка = Истина;
			КонецЕсли;
			
		Исключение
			ДобавитьОшибку(error, "Ошибка преобразования оценки, evaluation = " + evaluation);
			Ошибка = Истина;
		КонецПопытки;
		
	КонецЕсли;
	

	ош = "";
	Пользователь = HTTP.ПолучитьОбъектПоСсылке(Справочники.ПользователиИнтернет, user, Ош);
	Если Пользователь = Неопределено Тогда
		ДобавитьОшибку(error, Ош);
		Ошибка = Истина;
	КонецЕсли; 

	Если Ошибка Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Создадим комментарий
	
	Отзыв = Справочники.Комментарии.СоздатьЭлемент();
	
	Отзыв.Владелец 			= Статья;
	Отзыв.Пользователь 		= Пользователь;
	Отзыв.Сообщение 		= comment;
	Отзыв.ДатаСообщения 	= ТекущаяДата();
	Отзыв.Оценка 			= Оценка;
	
	// Запишем
	
	Если ЗаписатьСправочник(Отзыв, error) Тогда
		Возврат Строка(Отзыв.Ссылка.УникальныйИдентификатор());
	КонецЕсли;
	
КонецФункции

Функция create_comment(product, user, evaluation = "", comment, error = "")
	
	error = "";
	Ошибка = Ложь;
	
	// Получим номенклатуру
	
	Номенклатура = HTTP.ПолучитьОбъектПоСсылке(Справочники.Номенклатура, product, error);
	Если Номенклатура = Неопределено Тогда
		Ошибка = Истина;
	КонецЕсли;

	// проверим почту
	
	//Если ПустаяСтрока(mail) Тогда
	//	
	//	ДобавитьОшибку(error, "Не указана почта");
	//	Ошибка = Истина;
	//	
	//ИначеЕсли Не Найти(mail, "@") И Не Найти(mail, ".") Тогда
	//	
	//	ДобавитьОшибку(error, "Не верный формат почты");
	//	Ошибка = Истина;
	//	
	//КонецЕсли;
	
	// Проверим комментарий
	
	Если ПустаяСтрока(comment) Тогда
		
		ДобавитьОшибку(error, "Не указан комментарий");
		Ошибка = Истина;
		
	КонецЕсли;
	
	// Проверим оценку
	
	Оценка = 0;
	
	Если Не ПустаяСтрока(evaluation) Тогда
		
		Попытка
			
			Оценка = Число(evaluation);
			
			Если Оценка < 0 Или Оценка > 5 Тогда
				ДобавитьОшибку(error, "Оценка товара не входит в диапозон (1-5), evaluation = " + evaluation);
				Ошибка = Истина;
			КонецЕсли;
			
		Исключение
			ДобавитьОшибку(error, "Ошибка преобразования оценки, evaluation = " + evaluation);
			Ошибка = Истина;
		КонецПопытки;
		
	КонецЕсли;
	
	// Получим пользователя
	
	//Если ПустаяСтрока(user) Тогда
	//	
	//	Пользователь = Справочники.ПользователиИнтернет.ПустаяСсылка();
	//	
	//Иначе
		
		ош = "";
		Пользователь = HTTP.ПолучитьОбъектПоСсылке(Справочники.ПользователиИнтернет, user, Ош);
		Если Пользователь = Неопределено Тогда
			ДобавитьОшибку(error, Ош);
			Ошибка = Истина;
		КонецЕсли; 
		
	//КонецЕсли;
	
	Если Ошибка Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Создадим отзыв
	
	Отзыв = Справочники.ОтзывыОТоваре.СоздатьЭлемент();
	
	Отзыв.Владелец 			= Номенклатура;
	Отзыв.Пользователь 		= Пользователь;
	Отзыв.Сообщение 		= comment;
	Отзыв.ДатаСообщения 	= ТекущаяДата();
	Отзыв.Оценка 			= Оценка;
	//Отзыв.Город 			= city;
	//Отзыв.Почта 			= mail;
	//Отзыв.ИмяПользователя 	= name;
	
	Отзыв.ДополнительныеСвойства.Вставить("Обновление", ЛОЖЬ);
	
	// Запишем
	
	Если ЗаписатьСправочник(Отзыв, error) Тогда
		Возврат XMLСтрока(Отзыв.Ссылка);
	КонецЕсли;
	
КонецФункции

Функция get_list_comments(product, error = "")
	
	СтрокаОтзываТип 	= ФабрикаXDTO.Тип("http://www.garagetools.ru", "Comment");
	СписокОтзывовТип	= ФабрикаXDTO.Тип("http://www.garagetools.ru", "List_comments");
	СписокОтзывов 		= ФабрикаXDTO.Создать(СписокОтзывовТип);
	
	// Получим номенклатуру
	
	Номенклатура = HTTP.ПолучитьОбъектПоСсылке(Справочники.Номенклатура, product, error);
	Если Номенклатура = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	// Состряпаем запрос
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Пользователь,
	|	Сообщение			КАК Comment,
	|	ДатаСообщения		КАК date,
	//|	Город				КАК city,
	|	Оценка
	//|	Почта				КАК mail,
	//|	ИмяПользователя		КАК name
	|ИЗ
	|	Справочник.ОтзывыОТоваре КАК ОтзывыОТоваре
	|ГДЕ
	|	Владелец = &Номенклатура И
	|	Пользователь <> &пустойПользователь
	|");
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("пустойПользователь", Справочники.ПользователиИнтернет.ПустаяСсылка());

	// Добавим
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Отзыв = ФабрикаXDTO.Создать(СтрокаОтзываТип);
		ЗаполнитьЗначенияСвойств(Отзыв, Выборка);
		
		Если Не Выборка.Пользователь.Пустая() Тогда
			Отзыв.user = Строка(Выборка.Пользователь.УникальныйИдентификатор());
		КонецЕсли;
		
		Если Не Выборка.Оценка <> 0 Тогда
			Отзыв.evaluation = Строка(Выборка.Оценка);
		КонецЕсли;
		
		СписокОтзывов.Comment.Добавить(Отзыв);
		
	КонецЦикла;

	Возврат СписокОтзывов;
	
КонецФункции

// ЗАДАТЬ ВОПРОС

Функция create_question(product, user, question, user_name, mail, error)
	
	error = "";
	Ошибка = Ложь;
	
	// Получим номенклатуру
	
	Номенклатура = HTTP.ПолучитьОбъектПоСсылке(Справочники.Номенклатура, product, error);
	Если Номенклатура = Неопределено Тогда
		Ошибка = Истина;
	КонецЕсли;
	
	// Получим пользователя
	
	Если ПустаяСтрока(user) Тогда
		
		Если ПустаяСтрока(user_name) Тогда
			
			ДобавитьОшибку(error, "Не задан пользователь или имя вопросителя");
			Ошибка = Истина;
			
		КонецЕсли;
		
		// проверим почту
	
		Если ПустаяСтрока(mail) Тогда
			
			ДобавитьОшибку(error, "Не указана почта");
			Ошибка = Истина;
			
		ИначеЕсли Не Найти(mail, "@") И Не Найти(mail, ".") Тогда
			
			ДобавитьОшибку(error, "Не верный формат почты");
			Ошибка = Истина;
			
		КонецЕсли;
		
		Пользователь = Справочники.ПользователиИнтернет.ПустаяСсылка();
		
	Иначе
		
		ош = "";
		Пользователь = HTTP.ПолучитьОбъектПоСсылке(Справочники.ПользователиИнтернет, user, Ош);
		Если Пользователь = Неопределено Тогда
			ДобавитьОшибку(error, Ош);
			Ошибка = Истина;
		КонецЕсли; 
		
	КонецЕсли;

	// Проверим комментарий
	
	Если ПустаяСтрока(question) Тогда
		
		ДобавитьОшибку(error, "Не указан вопрос");
		Ошибка = Истина;
		
	КонецЕсли;
	
	Если Ошибка Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Создадим отзыв
	
	Вопрос = Справочники.ВопросыПоТовару.СоздатьЭлемент();
	
	Вопрос.Владелец 		= Номенклатура;
	Вопрос.Пользователь 	= Пользователь;
	Вопрос.Вопрос 			= question;
	Вопрос.ДатаВопроса 		= ТекущаяДата();
	Вопрос.Почта 			= mail;
	Вопрос.ИмяПользователя 	= user_name;
	
	// Запишем
	
	Если ЗаписатьСправочник(Вопрос, error) Тогда
		Возврат Строка(Вопрос.Ссылка.УникальныйИдентификатор());
	КонецЕсли;

	
КонецФункции


// СТАТЬИ

Функция get_news_for_main_page(error)
	
	НовостиГруппа = Константы.НовостиДляГлавнойСтраницы.Получить();
	Если НовостиГруппа.Пустая() Тогда
		
		error = "не заданы какие новости выводить на главной странице в 1с";
		Возврат Неопределено;
		
	КонецЕсли;
	
	//Возврат get_articles_short(XMLСтрока(НовостиГруппа), error = "", 5)
	Возврат get_articles_short(XMLСтрока(НовостиГруппа), error);
	
КонецФункции

Функция get_heading(guid, error)
	
	// Получим руборику
	
	статьяСсылка = HTTP.ПолучитьОбъектПоСсылке(Справочники.ИнтернетСтатьи, guid, error);
	Если статьяСсылка = Неопределено Тогда
		Ошибка = Истина;
	КонецЕсли;
	
	РубрикаТип	= ФабрикаXDTO.Тип("http://www.garagetools.ru", "Heading");
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Ссылка,
	|	Родитель			КАК РодительРубрики,
	|	Наименование		КАК name,
	//|	ВЫБОР КОГДА title = """" ТОГДА Наименование ИНАЧЕ title КОНЕЦ КАК title,
	|	Наименование title,
	|	meta_keywords,
	|	meta_description,
	|	ЭтоНовости 			КАК this_news,
	//|	ВБлог				КАК in_blog,
	|	КраткоеСодержание 	КАК short_text,
	|	Код					КАК code_1c,
	|	alies				КАК alies
	|ИЗ
	|	Справочник.ИнтернетСтатьи КАК ИнтернетСтатьи
	|ГДЕ
	|	Ссылка = &Ссылка 
	|");
	
	Запрос.УстановитьПараметр("Ссылка", статьяСсылка);
	
	Рубрика = ФабрикаXDTO.Создать(РубрикаТип);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(Рубрика, Выборка);
		
		Рубрика.guid	= Строка(Выборка.Ссылка.УникальныйИдентификатор());
		Рубрика.alies 	=?(ПустаяСтрока(Выборка.alies), СтрЗаменить(Выборка.title, " ", ""), Выборка.Alies);
		
		Если Не Выборка.РодительРубрики.пустая() Тогда
			Рубрика.parent = Строка(Выборка.РодительРубрики.УникальныйИдентификатор());
		КонецЕсли;
				
	КонецЕсли;
	
	Возврат Рубрика;
	
КонецФункции
Функция get_headings(error = "")
	
	РубрикаТип			= ФабрикаXDTO.Тип("http://www.garagetools.ru", "Heading");
	СписокРубрикТип 	= ФабрикаXDTO.Тип("http://www.garagetools.ru", "List_headings");
	СписокРубрик 		= ФабрикаXDTO.Создать(СписокРубрикТип);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Ссылка,
	|	Родитель			КАК РодительРубрики,
	|	Наименование		КАК name,
	//|	ВЫБОР КОГДА title = """" ТОГДА Наименование ИНАЧЕ title КОНЕЦ КАК title,
	|	Наименование title,
	|	meta_keywords,
	|	meta_description,
	|	ЭтоНовости 			КАК this_news,
	//|	ВБлог				КАК in_blog,
	|	КраткоеСодержание 	КАК short_text,
	|	Код					КАК code_1c,
	|	alies				КАК alies
	|ИЗ
	|	Справочник.ИнтернетСтатьи КАК ИнтернетСтатьи
	|ГДЕ
	|	ЭтоГруппа = ИСТИНА
	|");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Рубрика = ФабрикаXDTO.Создать(РубрикаТип);
		ЗаполнитьЗначенияСвойств(Рубрика, Выборка);
		
		Рубрика.guid	= Строка(Выборка.Ссылка.УникальныйИдентификатор());
		Рубрика.alies 	= ?(ПустаяСтрока(Выборка.alies), СтрЗаменить(Выборка.title, " ", ""), Выборка.Alies);
		
		Если Не Выборка.РодительРубрики.пустая() Тогда
			Рубрика.parent = Строка(Выборка.РодительРубрики.УникальныйИдентификатор());
		КонецЕсли;
				
		СписокРубрик.heading.Добавить(Рубрика); 
		
	КонецЦикла;
	
	Возврат СписокРубрик;
	
КонецФункции

Функция get_articles_short(heading = "", error = "")
	
	first_record = "";
	
	КороткиеСтатьиТип			= ФабрикаXDTO.Тип("http://www.garagetools.ru", "Article_short");
	СписокКороткихСтатейТип 	= ФабрикаXDTO.Тип("http://www.garagetools.ru", "List_articles_short");
	СписокКороткихСтатей 		= ФабрикаXDTO.Создать(СписокКороткихСтатейТип);
	
	
	МаксимумЗаписей = 0;
	
	Если Не ПустаяСтрока(first_record) Тогда
		
		Попытка
			МаксимумЗаписей = Число(СокрЛП(first_record));
		Исключение
			МаксимумЗаписей = 0;
		КонецПопытки;
		
	КонецЕсли; 
	
	// Текст запроса
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ " + ?(МаксимумЗаписей,"ПЕРВЫЕ " + Формат(МаксимумЗаписей,"ЧГ="),"") + "
	|	Ссылка,
	|	Родитель			КАК РодительСтатьи,
	|	Наименование 		КАК name,
	//|	ВЫБОР КОГДА title = """" ТОГДА Наименование ИНАЧЕ title КОНЕЦ КАК title,
	|	Наименование title,
	|	meta_keywords,
	|	meta_description,
	|	alies КАК alies,
	|	ЕСТЬNULL(КраткоеСодержание,"""") 	КАК short_text,
	|	ДатаСтатьи			КАК data,
	|	Код					КАК code_1c,
	|	ЕстьКартинка		КАК image
	|ИЗ
	|	Справочник.ИнтернетСтатьи КАК ИнтернетСтатьи
	|ГДЕ
	|	ЭтоГруппа = Ложь И
	|	ВыгружатьНаСайт = ИСТИНА
	|
	|");
	                                             	// Получим рубрику
	
	Если Не ПустаяСтрока(heading) Тогда
	
		Рубрика = HTTP.ПолучитьОбъектПоСсылке(Справочники.ИнтернетСтатьи, heading, error);
		Если Рубрика = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + " И Родитель = &Родитель";
		Запрос.УстановитьПараметр("Родитель", Рубрика);
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСтатьи УБЫВ
	|";
	

	// Выберем запрос
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		КороткаяСтатья = ФабрикаXDTO.Создать(КороткиеСтатьиТип);
		ЗаполнитьЗначенияСвойств(КороткаяСтатья, Выборка);
		
		КороткаяСтатья.guid		= Строка(Выборка.Ссылка.УникальныйИдентификатор());
		КороткаяСтатья.heading	= Строка(Выборка.РодительСтатьи.УникальныйИдентификатор());
		КороткаяСтатья.alies 	= ?(ПустаяСтрока(Выборка.alies), СтрЗаменить(Выборка.title, " ", ""), Выборка.Alies);
		
		СписокКороткихСтатей.article_short.Добавить(КороткаяСтатья); 
		
	КонецЦикла;
	
	Возврат СписокКороткихСтатей;
	
КонецФункции
Функция get_article(article, error = "")
	
	СтатьяТип		= ФабрикаXDTO.Тип("http://www.garagetools.ru", "Article");
	СтатьяXDTO 		= ФабрикаXDTO.Создать(СтатьяТип);
	
	// Получим статью
	
	Статья = HTTP.ПолучитьОбъектПоСсылке(Справочники.ИнтернетСтатьи, article, error);
	Если Статья = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Ссылка,
	|	Код									КАК code_1c,
	|	Родитель							КАК РодительСтатьи,
	|	Наименование						КАК	name,
	//|	ВЫБОР КОГДА title = """" ТОГДА Наименование ИНАЧЕ title КОНЕЦ КАК title,
	|	Наименование title,
	|	meta_keywords,
	|	meta_description,
	|	alies 								КАК alies,
	|	КраткоеСодержание 					КАК short_text,
	|	ЕСТЬNULL(ДатаСтатьи, &ПустаяДата)	КАК public_date,
	|	ЕСТЬNULL(ТекстСтатьи, """")			КАК long_text,
	|	ЕСТЬNULL(ЕстьКартинка, ЛОЖЬ)		КАК image
	|ИЗ
	|	Справочник.ИнтернетСтатьи КАК ИнтернетСтатьи
	|ГДЕ
	|	Ссылка = &Ссылка
	//|	ЭТОГруппа = Ложь И 
	//|" + ?(Статья.ЭтоГруппа,"Ссылка В ИЕРАРХИИ(&Ссылка)","Ссылка = &Ссылка") + "
	|");
	
	// Выберем запрос
	
	Запрос.УстановитьПараметр("Ссылка", 	Статья);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
	//	
		ЗаполнитьЗначенияСвойств(СтатьяXDTO, Выборка);
		
		//error = Выборка.title + " " + Строка(ТипЗнч(Выборка.ТекстСтатьи));
		//Возврат СтатьяXDTO;
		
		СтатьяXDTO.guid			= ПолучитьСсылкуXML(Статья);
		род 					= ПолучитьСсылкуXML(Статья.Родитель);
		СтатьяXDTO.parent		= род;
		СтатьяXDTO.heading		= род;
		СтатьяXDTO.alies 		= ?(ПустаяСтрока(Выборка.alies), СтрЗаменить(Статья.Наименование, " ", ""), Выборка.Alies);
		
		//error = Статья.ТекстСтатьи;
		//Возврат СтатьяXDTO;
		
		//СтатьяXDTO.long_text = Статья.ТекстСтатьи;
		
		//Картинка = Статья.Картинка.Получить();
		//Если Картинка <> Неопределено Тогда
		//	СтатьяXDTO.images = Картинка;
		//КонецЕсли;
				
	КонецЕсли;
	
	Возврат СтатьяXDTO;
		
КонецФункции

Функция get_image_article(article, error)
	
	Ссылка = HTTP.ПолучитьОбъектПоСсылке(Справочники.ИнтернетСтатьи, article, error);
	Если Ссылка = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ Картинка ИЗ Справочник.ИнтернетСтатьи ГДЕ Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Картинка = Выборка.Картинка.Получить();
	
		Если Картинка = Неопределено Тогда
			error = "Пустая картинка в статьи или новости " + Строка(Ссылка);
			Возврат Неопределено
		КонецЕсли;
		
		Возврат Картинка;
	
		//Попытка
		//	Возврат Картинка.ПолучитьДвоичныеДанные();
		//Исключение
		//	error = "Ошибка получения картинки статьи или новости - " + Строка(Ссылка) + " тип - " + ТипЗнч(Картинка);
		//	Возврат Неопределено;
		//КонецПопытки;
		
	КонецЕсли;
	
КонецФункции


// СКЛАДЫ

Функция get_warehouses(error = "")
	
	СкладТип			= ФабрикаXDTO.Тип("http://www.garagetools.ru", "Warehouse");
	СписокСкладовТип 	= ФабрикаXDTO.Тип("http://www.garagetools.ru", "List_warehouses");
	СписокСкладов 		= ФабрикаXDTO.Создать(СписокСкладовТип);
	
	// Текст запроса
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Ссылка,
	|	Наименование 				title,
	|	ДополнительноеНаименование 	title_full,
	|	СсылкаНаКарту 				map,
	|	Адрес 						adress,
	|	ОтгрузкаДилерам 			for_dealer,
	|	РазрешеноПолучениеТовараПриСамовывозе for_pickup
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	ПометкаУдаления = Ложь И
	|	ВыгружатьНаСайт = ИСТИНА
	|");
	
	// Выберем запрос
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Склад = ФабрикаXDTO.Создать(СкладТип);
		
		ЗаполнитьЗначенияСвойств(Склад, Выборка);
		
		Склад.guid	= Строка(Выборка.Ссылка.УникальныйИдентификатор());
		
		СписокСкладов.warehouse.Добавить(Склад); 
		
	КонецЦикла;
	
	Возврат СписокСкладов;
	
КонецФункции

Функция get_warehouses_for_pickup(error)
	
	СкладТип			= ФабрикаXDTO.Тип("http://www.garagetools.ru", "Warehouse");
	СписокСкладовТип 	= ФабрикаXDTO.Тип("http://www.garagetools.ru", "List_warehouses");
	СписокСкладов 		= ФабрикаXDTO.Создать(СписокСкладовТип);
	
	// Текст запроса
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Ссылка,
	|	Наименование 				title,
	|	ДополнительноеНаименование 	title_full,
	|	СсылкаНаКарту 				map,
	|	Адрес 						adress,
	|	ОтгрузкаДилерам 			for_dealer,
	|	РазрешеноПолучениеТовараПриСамовывозе for_pickup
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	ПометкаУдаления = Ложь И
	|	ВыгружатьНаСайт = ИСТИНА И
	|	(ОтгрузкаДилерам ИЛИ ОтгрузкаРозничнымКлиентам) И
	|	РазрешеноПолучениеТовараПриСамовывозе = ИСТИНА
	|");
	
	// Выберем запрос
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Склад = ФабрикаXDTO.Создать(СкладТип);
		ЗаполнитьЗначенияСвойств(Склад, Выборка);
		
		Склад.guid	= Строка(Выборка.Ссылка.УникальныйИдентификатор());
		
		СписокСкладов.warehouse.Добавить(Склад); 
		
	КонецЦикла;
	
	Возврат СписокСкладов;
	
КонецФункции


// ОПЛАТЫ

Функция ПолучитьТекущийЭлектронныйКошелек()
	
	Спр = Справочники.ЭлектронныйКошелек.Выбрать();
	Спр.Следующий();
	Возврат Спр.Ссылка;
	
КонецФункции

Функция user_paid(order, state, amount, gateway, response_params, comment = "", error = "")
	
	// получим заказ
   
	СсылкаЗаказ = HTTP.ПолучитьОбъектПоСсылке(Документы.ИнтернетЗаказПокупателя, order, error);
	Если СсылкаЗаказ = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Создадим оплату
	
	Оплата = Документы.ОплатаЭлектроннымиДеньгами.СоздатьДокумент();
	
	// Определим оплата это или нет
	
	Если ПустаяСтрока(state) Тогда
		
		error = "Не указан статус оплаты (state = <?>)";
		Возврат Ложь;
		
	ИначеЕсли ВРЕГ(state) = ВРЕГ("completed") Тогда
		
		Оплата.Оплачен = Истина;
		
	Иначе
		
		error = "Не известный статус (state = " + state + ")
				|необходимо добавить обработчик для данного статуса";
		Возврат Ложь;
		
	КонецЕсли;
	
	// Заполним документ
	
	Оплата.ИнтернетЗаказПокупателя 	= СсылкаЗаказ;
	Оплата.Склад 					= СсылкаЗаказ.Склад;
	
	Оплата.Дата 					= ТекущаяДата();
	Оплата.Сумма					= amount;
	Оплата.ПлатежнаяСистема			= gateway;
	Оплата.СообщениеСистемы			= response_params;
	Оплата.Комментарий				= comment;
	
	Оплата.ЭлектронныйКошелек 		= ПолучитьТекущийЭлектронныйКошелек();
	
	// Сохраним документ
	
	Попытка
		Оплата.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		стрОшибки = ОписаниеОшибки();
		error = "При проведении документа ""Оплата электронными деньгами"" приозошла ошибка
					|" + стрОшибки;
		Возврат Ложь;
	КонецПопытки;
	
	// Все ок
	
	Возврат Истина;
	
КонецФункции

// КОНТАКТЫ

Функция get_headings_contacts(error)
	             	
	ТелефонТип			= ФабрикаXDTO.Тип("http://www.garagetools.ru", "Phone");
	РубрикаТип			= ФабрикаXDTO.Тип("http://www.garagetools.ru", "Heading_contact");
	СписокРубрикТип 	= ФабрикаXDTO.Тип("http://www.garagetools.ru", "List_headings_contacts");
	СписокРубрик 		= ФабрикаXDTO.Создать(СписокРубрикТип);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Ссылка,
	|	Родитель			КАК РодительРубрики,
	|	Наименование		КАК name,
	|	ВЫБОР КОГДА title = """" ТОГДА Наименование ИНАЧЕ title КОНЕЦ КАК title,
	|	alies,
	|	meta_keywords,
	|	meta_description,
	|	Адрес 				КАК adress,
	|	Телефоны.(
	|		ВидТелефона AS Type,
	|		Телефон		AS Number)
	|ИЗ
	|	Справочник.ИнтернетКонтакты КАК ИнтернетСтатьи
	|");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Рубрика = ФабрикаXDTO.Создать(РубрикаТип);
		ЗаполнитьЗначенияСвойств(Рубрика, Выборка);
		
		Рубрика.guid	= Строка(Выборка.Ссылка.УникальныйИдентификатор());
		//Рубрика.alies 	= СтрЗаменить(Выборка.title, " ", "");
		
		Если Не Выборка.РодительРубрики.пустая() Тогда
			Рубрика.parent = Строка(Выборка.РодительРубрики.УникальныйИдентификатор());
		КонецЕсли;
		
		// телефоны
		
		ВыборкаТелефонов = Выборка.Телефоны.Выбрать();
		Пока ВыборкаТелефонов.Следующий() Цикл
			
			ТелефонXDTO = ФабрикаXDTO.Создать(ТелефонТип);
			ЗаполнитьЗначенияСвойств(ТелефонXDTO, ВыборкаТелефонов);
			Рубрика.phones.Добавить(ТелефонXDTO);
			
		КонецЦикла;
		
		СписокРубрик.heading_contact.Добавить(Рубрика); 
		
	КонецЦикла;
	
	Возврат СписокРубрик;
	
КонецФункции

Функция get_contact(contact, error = "")
	
	ТелефонТип		= ФабрикаXDTO.Тип("http://www.garagetools.ru", "Phone");
	MessagerТип		= ФабрикаXDTO.Тип("http://www.garagetools.ru", "Messager");
	КонтактТип		= ФабрикаXDTO.Тип("http://www.garagetools.ru", "Contact");
	СотрудникТип	= ФабрикаXDTO.Тип("http://www.garagetools.ru", "Contact_user");
	КонтактXDTO 	= ФабрикаXDTO.Создать(КонтактТип);
	
	// Получим статью
	
	Контакт = HTTP.ПолучитьОбъектПоСсылке(Справочники.ИнтернетКонтакты, contact, error);
	Если Контакт = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Ссылка,
	|	ЭтоГруппа,
	|	Адрес				КАК Adress,
	|	Код					КАК code_1c,
	|	Изображение,
	|	ЕСТЬNULL(СсылкаНаКарту,"""")		AS Map,
	|   ЕСТЬNULL(ПроизвольныйHTML,"""")		AS text_html,
	|	Родитель			КАК РодительКонтакта,
	|	Наименование		КАК name,
	|	ВЫБОР КОГДА title = """" ТОГДА Наименование ИНАЧЕ title КОНЕЦ КАК title,
	|	alies,
	|	meta_keywords,
	|	meta_description,
	|	Почта.(Почта),
	|	Телефоны.(
	|		ВидТелефона AS Type,
	|		Телефон		AS Number),
	|	СлужбыСообщений.(
	|		ИмяСлужбы	AS Type,
	|		Контакт		AS Number)
	|ИЗ
	|	Справочник.ИнтернетКонтакты
	|
	|ГДЕ
	|	Ссылка = &Ссылка
	|;
	|
	|ВЫБРАТЬ
	|	Ссылка,
	|	Отдел				AS Departament,
	|	Специализация		AS Position,
	|	Изображение,
	|   ПроизвольныйHTML	AS text_html,
	|	Наименование 		КАК Title,
	|	Почта.(Почта),
	|	Телефоны.(
	|		ВидТелефона AS Type,
	|		Телефон		AS Number),
	|	СлужбыСообщений.(
	|		ИмяСлужбы	AS Type,
	|		Контакт		AS Number)
	|ИЗ
	|	Справочник.ИнтернетСотрудникиКонтактов
	|
	|ГДЕ
	|	Владелец = &Ссылка
	|");
	
	// Выберем запрос
	
	Запрос.УстановитьПараметр("Ссылка", Контакт);
	
	Пакет = Запрос.ВыполнитьПакет();
	
	Выборка = Пакет[0].Выбрать();
	Если Выборка.Следующий() Тогда
		
		// Контакт
		
		ЗаполнитьКонтакт(Выборка, КонтактXDTO, ТелефонТип, MessagerТип);
		
		КонтактXDTO.parent		= ПолучитьСсылкуXML(Выборка.РодительКонтакта);
		//КонтактXDTO.alies 		= СтрЗаменить(Выборка.title, " ", "");
		
		Если не Выборка.ЭтоГруппа Тогда
		
			// Юзеры
			
			ВыборкаСотрудников = Пакет[1].Выбрать();
			Пока ВыборкаСотрудников.Следующий() Цикл
				
				СотрудникXDTO = ФабрикаXDTO.Создать(СотрудникТип);
				ЗаполнитьКонтакт(ВыборкаСотрудников, СотрудникXDTO, ТелефонТип, MessagerТип);
				
				КонтактXDTO.users.Добавить(СотрудникXDTO);
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат КонтактXDTO;
		
КонецФункции
Процедура ЗаполнитьКонтакт(Выборка, КонтактXDTO, ТелефонТип, MessagerТип)
	
	ЗаполнитьЗначенияСвойств(КонтактXDTO, Выборка);
	
	// Шапка
		
	КонтактXDTO.guid = Строка(Выборка.Ссылка.УникальныйИдентификатор());
		
	// Картинка
		
	Картинка = Выборка.Изображение.Получить();
	Если Картинка <> Неопределено Тогда
		КонтактXDTO.images = Картинка;
	КонецЕсли;
		
	// Почта
		
	ВыборкаПочты = Выборка.Почта.Выбрать();
	Пока ВыборкаПочты.Следующий() Цикл
			
		КонтактXDTO.emails.Добавить(ВыборкаПочты.Почта);
			
	КонецЦикла;
		
	// Телефон
		
	ВыборкаТелефонов = Выборка.Телефоны.Выбрать();
	Пока ВыборкаТелефонов.Следующий() Цикл
			
		ТелефонXDTO = ФабрикаXDTO.Создать(ТелефонТип);
		ЗаполнитьЗначенияСвойств(ТелефонXDTO, ВыборкаТелефонов);
		КонтактXDTO.phones.Добавить(ТелефонXDTO);
			
	КонецЦикла;
		
	// Сообщалки
	
	ВыборкаСообщалок = Выборка.СлужбыСообщений.Выбрать();
	Пока ВыборкаСообщалок.Следующий() Цикл
			
		СообщалкаXDTO = ФабрикаXDTO.Создать(MessagerТип);
		ЗаполнитьЗначенияСвойств(СообщалкаXDTO, ВыборкаСообщалок);
		КонтактXDTO.messageres.Добавить(СообщалкаXDTO);
			
	КонецЦикла;
	
КонецПроцедуры

// ТИПЫ ЦЕН

Функция get_types_prices(error)
	
	ТипЦенТип			= ФабрикаXDTO.Тип("http://www.garagetools.ru", "Type_price");
	СписокТиповЦенТип 	= ФабрикаXDTO.Тип("http://www.garagetools.ru", "List_types_prices");
	СписокТиповЦен		= ФабрикаXDTO.Создать(СписокТиповЦенТип);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Ссылка,
	|	Наименование 		КАК title
	|ИЗ
	|	Справочник.ТипыЦен
	|ГДЕ
	|	ВыгружатьнаСайт = Истина И
	|	ПометкаУдаления = Ложь
	|");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТипцЦен = ФабрикаXDTO.Создать(ТипЦенТип);
		
		ТипцЦен.guid 	= Строка(Выборка.Ссылка.УникальныйИдентификатор());
		ТипцЦен.title 	= Выборка.title;
		
		СписокТиповЦен.type_price.Добавить(ТипцЦен); 
		
	КонецЦикла;
	
	Возврат СписокТиповЦен;
	
КонецФункции

// СЕРВИС

Функция get_orders_service(user = "", error)
	
	ЗаказНарядТип			= ФабрикаXDTO.Тип("http://www.garagetools.ru", "Order_service");
	СписокЗаказнарядовТип 	= ФабрикаXDTO.Тип("http://www.garagetools.ru", "List_orders_service");
	СписокЗаказНарядов 		= ФабрикаXDTO.Создать(СписокЗаказнарядовТип);
	
	ЕстьПользователь = Не ПустаяСтрока(user);
	
	Если ЕстьПользователь Тогда
		
		СсылкаИнтернетПользователь = HTTP.ПолучитьОбъектПоСсылке(Справочники.ПользователиИнтернет, user, error);
		Если СсылкаИнтернетПользователь = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	// Текст запроса
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Партнер
	|ПОМЕСТИТЬ
	|	СписокПартнеров
	|ИЗ
	|	РегистрСведений.СвязьПартнераСПользователямиИнтернет
	|
	|" + ?(ЕстьПользователь, "ГДЕ ПользовательИнтернет = &ПользовательИнтернет","") + "
	|;
	|
	|ВЫБРАТЬ
	|	Док.Ссылка,
	|	Док.Номер КАК number,
	|	Док.Дата КАК doc_date,
	|	Док.Сумма КАК total,
	|	СвязьПользователей.ПользовательИнтернет,
	|	Док.Комментарий КАК comment,
	|	ВЫБОР 
	|		КОГДА НЕ Завершенные.ЗаказНаряд ЕСТЬ NULL ТОГДА ""Завершено""
	|		КОГДА НЕ ТекущаяЗадача.ЗаказНаряд ЕСТЬ NULL ТОГДА ТекущаяЗадача.Точкамаршрута.Представление
	|		КОГДА Док.Проведен ТОГДА ""Завершено""
	|		ИНАЧЕ ""в процессе""
	|	КОНЕЦ КАК status
	|ИЗ
	|	Документ.ЗаказНаряд КАК Док
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(
	|		ВЫБРАТЬ 
	|			Максимум(ТочкаМаршрута) КАК ТочкаМаршрута,
	|			БизнесПроцесс.ЗаказНаряд КАК ЗаказНаряд
	|		ИЗ 
	|			Задача.ЗадачаПользователю
	|		ГДЕ
	|			БизнесПроцесс Ссылка БизнесПроцесс.РемонтИнструмента И
	|			Выполнена = Ложь И
	|			ПометкаУдаления = Ложь И
	|			БизнесПроцесс.Партнер В(ВЫБРАТЬ Партнер ИЗ СписокПартнеров)
	|
	|		СГРУППИРОВАТЬ ПО
	|			БизнесПроцесс.ЗаказНаряд
	|
	|	) КАК ТекущаяЗадача
	|ПО
	|	ТекущаяЗадача.ЗаказНаряд = Док.Ссылка
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	БизнесПроцесс.РемонтИнструмента КАК Завершенные
	|ПО
	|	Завершенные.ЗаказНаряд = Док.Ссылка И
	|	Завершенные.Завершен = ИСТИНА
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(
	|		ВЫБРАТЬ Партнер, МАКСИМУМ(ПользовательИнтернет) КАК ПользовательИнтернет ИЗ РегистрСведений.СвязьПартнераСПользователямиИнтернет СГРУППИРОВАТЬ ПО Партнер
	|	) КАК СвязьПользователей
	|ПО
	|	Док.Партнер = СвязьПользователей.Партнер
	|
	|ГДЕ
	|	Док.ПометкаУдаления = Ложь И
	|	Док.Партнер В(ВЫБРАТЬ Партнер ИЗ СписокПартнеров)
	|");
	
	// Выберем запрос
	
	Если ЕстьПользователь Тогда
		Запрос.УстановитьПараметр("ПользовательИнтернет", СсылкаИнтернетПользователь);
	КонецЕсли;
	
	Выборка = Запрос.ВыполнитьПакет()[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЗаказНаряд = ФабрикаXDTO.Создать(ЗаказНарядТип);
		ЗаполнитьЗначенияСвойств(ЗаказНаряд, Выборка);
		
		ЗаказНаряд.guid		= Строка(Выборка.Ссылка.УникальныйИдентификатор());
		ЗаказНаряд.user		= Строка(Выборка.ПользовательИнтернет.УникальныйИдентификатор());
		
		СписокЗаказНарядов.order_service.Добавить(ЗаказНаряд); 
		
	КонецЦикла;
	
	Возврат СписокЗаказНарядов;
	
КонецФункции
Функция get_order_service(guid, error)
	
	ЗаказНарядТип 	= ФабрикаXDTO.Тип("http://www.garagetools.ru", "Order_service");
	ЗаказНарядXDTO 	= ФабрикаXDTO.Создать(ЗаказНарядТип);
	
	// Получим заказ
	
	ЗаказСсылка = HTTP.ПолучитьОбъектПоСсылке(Документы.ЗаказНаряд, guid, error);
	Если ЗаказСсылка = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	// Текст запроса
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Док.Ссылка,
	|	Док.Номер КАК number,
	|	Док.Дата КАК doc_date,
	|	Док.Сумма КАК total,
	|	Док.Комментарий КАК comment,
	|	ВЫБОР 
	|		КОГДА НЕ Завершенные.ЗаказНаряд ЕСТЬ NULL ТОГДА ""Завершено""
	|		КОГДА НЕ ТекущаяЗадача.ЗаказНаряд ЕСТЬ NULL ТОГДА ТекущаяЗадача.Точкамаршрута.Представление
	|		КОГДА Док.Проведен ТОГДА ""Завершено""
	|		ИНАЧЕ ""в процессе""
	|	КОНЕЦ КАК status
	|ИЗ
	|	Документ.ЗаказНаряд КАК Док
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(
	|		ВЫБРАТЬ 
	|			Максимум(ТочкаМаршрута) КАК ТочкаМаршрута,
	|			БизнесПроцесс.ЗаказНаряд КАК ЗаказНаряд
	|		ИЗ 
	|			Задача.ЗадачаПользователю
	|		ГДЕ
	|			БизнесПроцесс Ссылка БизнесПроцесс.РемонтИнструмента И
	|			БизнесПроцесс.ЗаказНаряд = &ЗаказНаряд И
	|			Выполнена = Ложь И
	|			ПометкаУдаления = Ложь
	|
	|		СГРУППИРОВАТЬ ПО
	|			БизнесПроцесс.ЗаказНаряд
	|
	|	) КАК ТекущаяЗадача
	|ПО
	|	ТекущаяЗадача.ЗаказНаряд = Док.Ссылка
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	БизнесПроцесс.РемонтИнструмента КАК Завершенные
	|ПО
	|	Завершенные.ЗаказНаряд = Док.Ссылка И
	|	Завершенные.Завершен = ИСТИНА
	|
	|ГДЕ
	|	Док.Ссылка = &ЗаказНаряд
	|");
	
	Запрос.УстановитьПараметр("ЗаказНаряд", ЗаказСсылка);
	
	// Выберем запрос
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(ЗаказНарядXDTO, Выборка);
		
		ЗаказНарядXDTO.guid		= XMLСтрока(Выборка.Ссылка);
		ЗаказНарядXDTO.user		= HTTP.ПолучитьGUIDПользователяИнтернетИзПартнера(ЗаказСсылка.Партнер);
		
	КонецЕсли;
	
	Возврат ЗаказНарядXDTO;
	
КонецФункции

// ВЗАИМОРАСЧЕТЫ

Функция ПолучитьЗапросБилинг(СсылкаПользователь = Неопределено, СсылкаДокумент = Неопределено)
	
	ЕстьПользователь 	= СсылкаПользователь <> Неопределено;
	ЕстьДокумент 		= СсылкаДокумент <> Неопределено;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Ссылка,
	|	ПользовательИнтернет,
	|	Дата 		КАК doc_date,
	|	предстДок 	КАК doc_name,
	|	Приход		КАК in_doc,
	|	Расход 		КАК out_doc
	| ИЗ
	|(
	|	ВЫБРАТЬ
	|		Ссылка,
	|		ПользовательИнтернет,
	|		Дата,
	|		Ссылка.Представление 	КАК предстДок,
	|		0 						КАК Приход,
	|		Сумма		 			КАК Расход
	|	ИЗ
	|		Документ.ИнтернетЗаказПокупателя
	|" + ?(ЕстьПользователь, "ГДЕ ПользовательИнтернет = &ПользовательИнтернет","") + "
	|" + ?(ЕстьДокумент, "ГДЕ Ссылка = &ссылкаДокумент","") + "
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Ссылка,
	|		ИнтернетЗаказПокупателя.ПользовательИнтернет,
	|		Дата,
	|		Ссылка.Представление,
	|		Сумма,
	|		0
	|	ИЗ
	|		Документ.ОплатаЭлектроннымиДеньгами
	|" + ?(ЕстьПользователь, "ГДЕ ИнтернетЗаказПокупателя.ПользовательИнтернет = &ПользовательИнтернет","") + "
	|" + ?(ЕстьДокумент, "ГДЕ Ссылка = &ссылкаДокумент","") + "
	|) КАК Запрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	date
	|");
	
	// Выберем запрос
	
	Если ЕстьПользователь Тогда
		Запрос.УстановитьПараметр("ПользовательИнтернет", СсылкаПользователь);
	КонецЕсли;
	
	Если ЕстьДокумент Тогда
		Запрос.УстановитьПараметр("ссылкаДокумент", СсылкаДокумент);
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции
Функция get_billings(user = "", error)
	
	БилингТип			= ФабрикаXDTO.Тип("http://www.garagetools.ru", "Billing");
	СписокБилингаТип 	= ФабрикаXDTO.Тип("http://www.garagetools.ru", "List_billings");
	СписокБилинга 		= ФабрикаXDTO.Создать(СписокБилингаТип);
	
	ЕстьПользователь = Не ПустаяСтрока(user);
	
	Если ЕстьПользователь Тогда
		
		СсылкаИнтернетПользователь = HTTP.ПолучитьОбъектПоСсылке(Справочники.ПользователиИнтернет, user, error);
		Если СсылкаИнтернетПользователь = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	// Получим запрос
	
	Запрос = ПолучитьЗапросБилинг(СсылкаИнтернетПользователь);
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Билинг = ФабрикаXDTO.Создать(БилингТип);
		ЗаполнитьЗначенияСвойств(Билинг, Выборка);
		
		Билинг.guid	= XMLСтрока(Выборка.ссылка);
		Билинг.user	= XMLСтрока(Выборка.ПользовательИнтернет);
		
		СписокБилинга.billing.Добавить(Билинг); 
		
	КонецЦикла;
	
	Возврат СписокБилинга;
	
КонецФункции
Функция get_billing(guid, error)
	
	БилингТип	= ФабрикаXDTO.Тип("http://www.garagetools.ru", "Billing");
	БилингXDTO	= ФабрикаXDTO.Создать(БилингТип);
	
	Менеджеры = Новый Массив;
	Менеджеры.Добавить(Документы.ИнтернетЗаказПокупателя);
	Менеджеры.Добавить(Документы.ОплатаЭлектроннымиДеньгами);
	
	СсылкаДокумент = HTTP.ПолучитьОдинИзОбъектовПоСсылке(Менеджеры, guid, error);
	Если СсылкаДокумент = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	// Получим запрос
	
	Запрос = ПолучитьЗапросБилинг(,СсылкаДокумент);
		
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(БилингXDTO, Выборка);
		
		БилингXDTO.guid	= XMLСтрока(Выборка.ссылка);
		БилингXDTO.user	= XMLСтрока(Выборка.ПользовательИнтернет);
		
	КонецЕсли;
	
	Возврат БилингXDTO;
	
КонецФункции


// Для главной страницы

Функция ПолучитьСписокТоваровДляГлавнойСтраницы(СписокXDTO, ИмяПризнака)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ Ссылка ИЗ Справочник.Номенклатура ГДЕ ПометкаУдаления = ЛОЖЬ И ВыгружатьНаСайт = ИСТИНА И " + ИмяПризнака + " = ИСТИНА
	|");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СписокXDTO.guid.Добавить(XMLСтрока(Выборка.Ссылка));
		
	КонецЦикла;
	
	Возврат СписокXDTO;
	
КонецФункции

Функция get_latest_offers(error)
	
	ТипСписокXDTO 	= ФабрикаXDTO.Тип("http://www.garagetools.ru", "List_guids");
	СписокXDTO 		= ФабрикаXDTO.Создать(ТипСписокXDTO);
 
	Возврат ПолучитьСписокТоваровДляГлавнойСтраницы(СписокXDTO, "Новинка");
	
КонецФункции


Функция get_best_prices(error)
	
	ТипСписокXDTO 	= ФабрикаXDTO.Тип("http://www.garagetools.ru", "List_guids");
	СписокXDTO 		= ФабрикаXDTO.Создать(ТипСписокXDTO);
 
	Возврат ПолучитьСписокТоваровДляГлавнойСтраницы(СписокXDTO, "Распродажа");
	
КонецФункции


Функция get_offers(error)
	
	ТипСписокXDTO 	= ФабрикаXDTO.Тип("http://www.garagetools.ru", "List_guids");
	СписокXDTO 		= ФабрикаXDTO.Создать(ТипСписокXDTO);
 
	Возврат ПолучитьСписокТоваровДляГлавнойСтраницы(СписокXDTO, "Акция");
	
КонецФункции

Функция get_users(error)

	
	
КонецФункции







