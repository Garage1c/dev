
// Если добавиться новый алгоритм тогда нужно тут прописать его наличие
Функция ПолучитьВсеСуффиксы() Возврат СтрРазделить("АлгоритмПолученияКлюча,АлгоритмОтправленияДанных,АлгоритмПолученияДанных,АлгоритмПолученияЗначения,АлгоритмПреобразованияJSON,АлгоритмПриемаДанных",",") КонецФункции

&НаКлиенте
Функция ПроверитьМодифицированность()
	
	Если Модифицированность Тогда
		
		ПоказатьПредупреждение(,"Необходимо сперва записать");
		Возврат Ложь;
		
	Иначе
		Возврат Истина; КонецЕсли;
	
КонецФункции

#Область Тесты

&НаКлиенте
Процедура ПоказатьРезультат(Заголовок, стрТекст)
	
	Текст = Новый ТекстовыйДокумент;
	Текст.УстановитьТекст(стрТекст);
	Текст.Показать(Заголовок);
	
КонецПроцедуры

&НаСервере
Функция тест_ПолучитьЗначение()
	
	КэшДанные = Новый Соответствие;
	Возврат обм_Среда.ПолучитьСсылкуПоКлючу(XMLСтрока(Объект.СсылкаДляТеста), Объект.Ссылка, КэшДанные);
	
КонецФункции
&НаКлиенте
Процедура ТестПолучениеЗначения(Команда)
	
	Если Не Объект.СсылкаДляТеста.Пустая() Тогда
		
		стрОшибки 	= "";
		Ответ 		= тест_ПолучитьЗначение();
		
		Если Ответ <> Неопределено Тогда
			ПоказатьРезультат("Результат вычисления значения", "Значение = " + Ответ); КонецЕсли; КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция тест_ПолучитьКлюч()
	
	КэшДанные = Новый Соответствие;
	Возврат обм_Среда.ПолучитьКлючПоСсылке(Объект.СсылкаДляТеста, Объект.Ссылка, КэшДанные);
	
КонецФункции
&НаКлиенте
Процедура ТестПолучениеКлюча(Команда)
	
	Если ПроверитьМодифицированность() И ЗначениеЗаполнено(Объект.СсылкаДляТеста) Тогда
		
		стрОшибки 	= "";
		Ответ 		= тест_ПолучитьКлюч();
		
		Если Ответ <> Неопределено Тогда
			ПоказатьРезультат("Результат вычисления ключа", "Ключ = " + Ответ); КонецЕсли; КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция тест_ПолучитьДанные()
	
	Перем Данные;
	Значения = Новый Массив;
	Значения.Добавить(Объект.СсылкаДляТеста);
	
	Попытка		Выполнить(Объект.АлгоритмПолученияДанных);
	Исключение	Сообщить(ОписаниеОшибки()); КонецПопытки;
	
	Если Данные <> Неопределено Тогда
		Запись = Новый ЗаписьJSON();
		Запись.УстановитьСтроку();
		ЗаписатьJSON(Запись, Данные);
		Возврат Запись.Закрыть(); КонецЕсли;
	
КонецФункции
&НаКлиенте
Процедура ТестПолученияДанных(Команда)
	
	Если Не Объект.СсылкаДляТеста.Пустая() Тогда
		
		стрОшибки 	= "";
		Ответ 		= тест_ПолучитьДанные();
		
		Если Ответ <> Неопределено Тогда
			ПоказатьРезультат("Результат вычисления получения данных", Ответ); КонецЕсли; КонецЕсли;
	
КонецПроцедуры

#Конецобласти

#Область Типы

Процедура ОбновитьСтрТипов()
	
	Масс = Новый Массив;
	Для Каждого Элемент Из ОбрабатываемыеТипы Цикл Масс.Добавить(?(ПустаяСтрока(Элемент.Представление), Элемент.Значение, Элемент.Представление)) КонецЦикла;
	
	стрТипы = СтрСоединить(Масс, ";");
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокТипов()
	
	Список = ?(ЭтоФантом, обм_Кэш.ПолучитьМетаСписокДругой(Объект.Владелец), обм_Кэш.ПолучитьМетаСписок());
	Список.ЗаполнитьПометки(Ложь);
	
	// Отметим отмеченные
	
	Для Каждого Элемент ИЗ ОбрабатываемыеТипы Цикл Список.НайтиПоЗначению(Элемент.Значение).Пометка = Истина КонецЦикла;
	
	Возврат Список;
	
КонецФункции
&НаКлиенте
Процедура ОтметкаТипов(Список, Параметры) Экспорт
	
	Если Список <> Неопределено Тогда 
		
		ОбрабатываемыеТипы.Очистить();
	
		Для КАждого Элемент Из Список Цикл
			Если Элемент.Пометка Тогда
				ОбрабатываемыеТипы.Добавить(Элемент.Значение, Элемент.Представление); КонецЕсли; КонецЦикла;
		
		ОбновитьСтрТипов(); КонецЕсли;
		
КонецПроцедуры
&НаКлиенте
Процедура стрТипыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Список = ПолучитьСписокТипов();
	Список.ПоказатьОтметкуЭлементов(Новый ОписаниеОповещения("ОтметкаТипов", ЭтаФорма));
	
КонецПроцедуры

#Конецобласти

#Область Общие_функции_текста

&НаСервере
Функция ПолучитьТекстАлгоритмаИзБиблиотеки(АлгоритмСсылка) 	Возврат АлгоритмСсылка.Алгоритм КонецФункции
&НаКлиенте
Функция ПолучитьСуфиксТекущего() 							Возврат Сред(ТекущийЭлемент.Имя, СтрНайти(ТекущийЭлемент.Имя, "_") + 1) КонецФункции

&НаКлиенте
Процедура СвойАлгоритм(Команда)
	
	Модифицированность = Истина;
	
	Суффикс = ПолучитьСуфиксТекущего();
	Объект[Суффикс + "Ссылка"] = Неопределено;
	Элементы[Суффикс].ТолькоПросмотр = Ложь;
	
	Элементы["СвойАлгоритм_" + Суффикс].Видимость = Ложь;
	Элементы["ВыбратьАлгоритм_" + Суффикс].Видимость = Истина;
		
КонецПроцедуры
&НаКлиенте
Процедура ВыбранАлгоритмИзБиблиотеки(ВыбАлгоритмСсылка, ДополнительныеПараметры) Экспорт
	
	Если ВыбАлгоритмСсылка <> Неопределено Тогда
		
		Модифицированность = Истина;
		
		Суффикс = ПолучитьСуфиксТекущего();
		Элементы[Суффикс].ТолькоПросмотр = Истина;
		Объект[Суффикс + "Ссылка"] = ВыбАлгоритмСсылка;
		ЭтотОбъект[Суффикс] = ПолучитьТекстАлгоритмаИзБиблиотеки(ВыбАлгоритмСсылка);
	
		Элементы["СвойАлгоритм_" + Суффикс].Видимость = Истина;
		Элементы["ВыбратьАлгоритм_" + Суффикс].Видимость = Ложь; КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ВыбратьАлгоритм(Команда)
	
	ОткрытьФорму("Справочник.обм_Алгоритмы.ФормаВыбора",,ЭтаФорма,,,,Новый ОписаниеОповещения("ВыбранАлгоритмИзБиблиотеки", ЭтаФорма));
	
КонецПроцедуры

#Конецобласти

#Область Типовые

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Определим возможно это другие реквизиты из другой базы тогда это будет объект фантом
	
	Если Параметры.ЭтоФантом = Истина Тогда
		
		Элементы.ГруппаВладИТест.Видимость 	= Ложь;
		Элементы.ГруппаИмен.Видимость 		= Ложь;
		
		ЭтоФантом		= Истина;
		ЭтоНовый		= Параметры.ЭтоНовый = Истина;
		АвтоЗаголовок 	= Ложь;
		Заголовок 		= ?(ЭтоНовый, "(новый) ", "") + "другая база: " + Параметры.ДругиеРеквизиты["Наименование"];
		
		// Реквизиты другие
		
		Для Каждого Элемент Из Параметры.ДругиеРеквизиты Цикл 
			Если НРег(Элемент.Ключ) <> "ссылка" Тогда
				Объект[Элемент.Ключ] = Элемент.Значение; КонецЕсли; КонецЦикла; 
		
		// Типы другие
		
		ОбрабатываемыеТипы.ЗагрузитьЗначения(Параметры.ДругиеТипы);
		ОбновитьСтрТипов();
		
	Иначе
	
		// Добавим типы из тек базы
		
		Если ЗначениеЗаполнено(Параметры.ТипыДляДобавления) Тогда
				Для Каждого Элемент Из Параметры.ТипыДляДобавления Цикл ОбрабатываемыеТипы.Добавить(Элемент.Значение, Элемент.Представление) КонецЦикла;
		Иначе	Для Каждого Строка Из Объект.ОбрабатываемыеТипы Цикл Мета = Строка.ПустаяСсылка.Метаданные(); ОбрабатываемыеТипы.Добавить(Мета.ПолноеИмя(), Мета.Синоним); КонецЦикла; КонецЕсли; КонецЕсли;
	
	// Обновим видимость элементов и считаем начальные данные
	
	Для Каждого Суффикс Из ПолучитьВсеСуффиксы() Цикл
		
		СвойАлгоритм = Объект[Суффикс + "Ссылка"].Пустая();
		
		Элементы[Суффикс].ТолькоПросмотр 					= Не СвойАлгоритм;
		Элементы["СвойАлгоритм_" + Суффикс].Видимость 		= Не СвойАлгоритм;
		Элементы["ВыбратьАлгоритм_" + Суффикс].Видимость 	= СвойАлгоритм; 
		
		Если СвойАлгоритм Тогда	ЭтотОбъект[Суффикс] = Объект[Суффикс];
		Иначе 					ЭтотОбъект[Суффикс] = Объект[Суффикс + "Ссылка"].Алгоритм; КонецЕсли; КонецЦикла;
		
	// Многострочные значения по умолчанию
		
	Если ЭтоНовый Или (Не ЭтоФантом И Объект.Ссылка.Пустая()) Тогда
		АлгоритмПриемаДанных = Метаданные.Справочники.обм_НаборыДанных.Реквизиты.АлгоритмПриемаДанных.Подсказка; КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ЭтоФантом Тогда
		
		Отказ 				= Истина;
		Модифицированность 	= Ложь;
		стрОшибки 			= "";
		
		Если СохранитьВДругойБазе(стрОшибки) Тогда
		
			ПоказатьОповещениеПользователя("Данные сохранены в другой базе",,Заголовок);
			Закрыть(); 
		Иначе
			Сообщить(стрОшибки); КонецЕсли; КонецЕсли;
	
КонецПроцедуры
&НаСервере
Функция СохранитьВДругойБазе(стрОшибки)
	
	// Сохраним настройки в другой базе
	
	Структура 	= Новый Структура("Наименование, Активно, ПоляДат", Объект.Наименование, Объект.Активно, Объект.ПоляДат);
	Суффиксы 	= ПолучитьВсеСуффиксы();
	
	Для КАждого Суфффикс Из Суффиксы Цикл Структура.Вставить(Суфффикс, ЭтаФорма[Суфффикс]); КонецЦикла;
	Возврат обм_Обмен.СохранитьНаборВДругойБазе(Объект.Владелец, Объект.Наименование, Новый Структура("Реквизиты, Типы", Структура, ОбрабатываемыеТипы.ВыгрузитьЗначения()), стрОшибки, ЭтоНовый);
	
КонецФункции
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ЭтоФантом Тогда Отказ = Истина Иначе
	
		// Сохраним типы
		
		ТекущийОбъект.ОбрабатываемыеТипы.Очистить();
		
		Для КАждого Элемент Из ОбрабатываемыеТипы Цикл
			ПозТочка = СтрНайти(Элемент.Значение, ".");
			Описание = Новый ОписаниеТипов(Лев(Элемент.Значение, ПозТочка - 1) + "Ссылка" + Сред(Элемент.Значение, ПозТочка));
			ТекущийОбъект.ОбрабатываемыеТипы.Добавить().ПустаяСсылка = Описание.ПривестиЗначение(); КонецЦикла;
		
		ТекущийОбъект.СтрТипы = стрТипы;
		
		// Сохраним свои алгоритмы
		
		Для Каждого Суффикс Из ПолучитьВсеСуффиксы() Цикл
			
			Если ТекущийОбъект[Суффикс + "Ссылка"].Пустая() Тогда
				ТекущийОбъект[Суффикс] = ЭтотОбъект[Суффикс]; КонецЕсли; КонецЦикла; КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьСтрТипов();
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОткрытьНаборВДругойБазе(Команда)
	
	ПоказатьПредупреждение(,"Еще не придумал как");
	
	//СтандартнаяОбработка = Ложь;
	//
	//НаборСсылка = НаборыДругие.НайтиПоИдентификатору(ВыбраннаяСтрока).Значение;
	//Набор 		= ПолучитьНаборПоСсылке(НаборСсылка, НастройкиДругие);
	//
	//ОткрытьФорму("Справочник.обм_НаборыДанных.ФормаОбъекта", 
	//		Новый Структура("ЭтоФантом, ДругиеТипы, ДругиеРеквизиты, Основание", 
	//					Истина, Набор["МетаДанные"], Набор["Реквизиты"], Обмен), 
	//		ЭтаФорма,,,,Новый ОписаниеОповещения("ЗарытаФормаНабораДругойБазы", ЭтаФорма, Новый Структура("Гуид, Ключ", НаборСсылка, Набор["Реквизиты"]["Наименование"])));
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("обм_ЗаписанНабор", Объект.Ссылка, ВладелецФормы);
	
КонецПроцедуры
