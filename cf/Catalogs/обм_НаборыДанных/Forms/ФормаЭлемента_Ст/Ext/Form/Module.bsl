
// Если добавиться новый алгоритм тогда нужно тут прописать его наличие
Функция ПолучитьВсеСуффиксы() Возврат СтрРазделить("АлгоритмПолученияКлюча,АлгоритмОтправленияДанных,АлгоритмПолученияДанных,АлгоритмПолученияЗначения,АлгоритмПреобразованияJSON,АлгоритмПриемаДанных",",") КонецФункции

&НаКлиенте
Функция ПроверитьМодифицированность()
	
	Если Модифицированность Тогда
		
		ПоказатьПредупреждение(,"Необходимо сперва записать");
		Возврат Ложь;
		
	Иначе
		Возврат Истина; КонецЕсли;
	
КонецФункции

#Область Тесты

&НаКлиенте
Процедура ПоказатьРезультат(Заголовок, стрТекст)
	
	Текст = Новый ТекстовыйДокумент;
	Текст.УстановитьТекст(стрТекст);
	Текст.Показать(Заголовок);
	
КонецПроцедуры

&НаСервере
Функция тест_ПолучитьЗначение()
	
	КэшДанные = Новый Соответствие;
	Возврат обм_Среда.ПолучитьСсылкуПоКлючу(XMLСтрока(Объект.СсылкаДляТеста), Объект.Ссылка, КэшДанные);
	
КонецФункции
&НаКлиенте
Процедура ТестПолучениеЗначения(Команда)
	
	Если Не Объект.СсылкаДляТеста.Пустая() Тогда
		
		стрОшибки 	= "";
		Ответ 		= тест_ПолучитьЗначение();
		
		Если Ответ <> Неопределено Тогда
			ПоказатьРезультат("Результат вычисления значения", "Значение = " + Ответ); КонецЕсли; КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция тест_ПолучитьКлюч()
	
	КэшДанные = Новый Соответствие;
	Возврат обм_Среда.ПолучитьКлючПоСсылке(Объект.СсылкаДляТеста, Объект.Ссылка, КэшДанные);
	
КонецФункции
&НаКлиенте
Процедура ТестПолучениеКлюча(Команда)
	
	Если ПроверитьМодифицированность() И ЗначениеЗаполнено(Объект.СсылкаДляТеста) Тогда
		
		стрОшибки 	= "";
		Ответ 		= тест_ПолучитьКлюч();
		
		Если Ответ <> Неопределено Тогда
			ПоказатьРезультат("Результат вычисления ключа", "Ключ = " + Ответ); КонецЕсли; КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция тест_ПолучитьДанные()
	
	Перем Данные;
	Значения = Новый Массив;
	Значения.Добавить(Объект.СсылкаДляТеста);
	
	Попытка		Выполнить(Объект.АлгоритмПолученияДанных);
	Исключение	Сообщить(ОписаниеОшибки()); КонецПопытки;
	
	Если Данные <> Неопределено Тогда
		Запись = Новый ЗаписьJSON();
		Запись.УстановитьСтроку();
		ЗаписатьJSON(Запись, Данные);
		Возврат Запись.Закрыть(); КонецЕсли;
	
КонецФункции
&НаКлиенте
Процедура ТестПолученияДанных(Команда)
	
	Если Не Объект.СсылкаДляТеста.Пустая() Тогда
		
		стрОшибки 	= "";
		Ответ 		= тест_ПолучитьДанные();
		
		Если Ответ <> Неопределено Тогда
			ПоказатьРезультат("Результат вычисления получения данных", Ответ); КонецЕсли; КонецЕсли;
	
КонецПроцедуры

#Конецобласти

#Область Типы

&НаСервере
Функция ПолучитьСписокТипов()
	
	Список = Новый СписокЗначений;
	
	// Получим метаданные
	
	Для КАждого Справочник Из Метаданные.Справочники Цикл Список.Добавить(Справочник.ПолноеИмя()) КонецЦикла;
	Для КАждого Документ Из Метаданные.Документы Цикл Список.Добавить(Документ.ПолноеИмя()) КонецЦикла;
	
	// Отметим отмеченные
	
	Для КАждого Строка ИЗ Объект.ОбрабатываемыеТипы Цикл Список.НайтиПоЗначению(Метаданные.НайтиПоТипу(ТипЗнч(Строка.ПустаяСсылка)).ПолноеИмя()).Пометка = Истина; КонецЦикла;
	
	Возврат Список;
	
КонецФункции
&НаСервере
Процедура ОбновитьТипыНаСервере(Список)
	
	Объект.ОбрабатываемыеТипы.Очистить();
	
	Для КАждого Элемент Из Список Цикл
		Если Элемент.Пометка Тогда
			Мета 		= Метаданные.НайтиПоПолномуИмени(Элемент.Значение);
			Менеджер 	= ?(Метаданные.Справочники.Содержит(Мета), Справочники, Документы);
			Объект.ОбрабатываемыеТипы.Добавить().ПустаяСсылка = Менеджер[Мета.Имя].ПустаяСсылка(); КонецЕсли; КонецЦикла;
	
	// Обновим стр
	
	текОбъект = РеквизитФормыВЗначение("Объект");
	текОбъект.ОбновитьТип(текОбъект);
	Объект.стрТипы = текОбъект.стрТипы;
	
КонецПроцедуры
&НаКлиенте
Процедура ОтметкаТипов(Список, Параметры) Экспорт
	
	Если Список <> Неопределено Тогда ОбновитьТипыНаСервере(Список); КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура стрТипыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Список = ПолучитьСписокТипов();
	Список.ПоказатьОтметкуЭлементов(Новый ОписаниеОповещения("ОтметкаТипов", ЭтаФорма));
	
КонецПроцедуры

#Конецобласти

#Область Общие_функции_текста

&НаСервере
Функция ПолучитьТекстАлгоритмаИзБиблиотеки(АлгоритмСсылка) 	Возврат АлгоритмСсылка.Алгоритм КонецФункции
&НаКлиенте
Функция ПолучитьСуфиксТекущего() 							Возврат Сред(ТекущийЭлемент.Имя, СтрНайти(ТекущийЭлемент.Имя, "_") + 1) КонецФункции

&НаКлиенте
Процедура СвойАлгоритм(Команда)
	
	Модифицированность = Истина;
	
	Суффикс = ПолучитьСуфиксТекущего();
	Объект[Суффикс + "Ссылка"] = Неопределено;
	Элементы[Суффикс].ТолькоПросмотр = Ложь;
	
	Элементы["СвойАлгоритм_" + Суффикс].Видимость = Ложь;
	Элементы["ВыбратьАлгоритм_" + Суффикс].Видимость = Истина;
		
КонецПроцедуры
&НаКлиенте
Процедура ВыбранАлгоритмИзБиблиотеки(ВыбАлгоритмСсылка, ДополнительныеПараметры) Экспорт
	
	Если ВыбАлгоритмСсылка <> Неопределено Тогда
		
		Модифицированность = Истина;
		
		Суффикс = ПолучитьСуфиксТекущего();
		Элементы[Суффикс].ТолькоПросмотр = Истина;
		Объект[Суффикс + "Ссылка"] = ВыбАлгоритмСсылка;
		ЭтотОбъект[Суффикс] = ПолучитьТекстАлгоритмаИзБиблиотеки(ВыбАлгоритмСсылка);
	
		Элементы["СвойАлгоритм_" + Суффикс].Видимость = Истина;
		Элементы["ВыбратьАлгоритм_" + Суффикс].Видимость = Ложь; КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ВыбратьАлгоритм(Команда)
	
	ОткрытьФорму("Справочник.обм_Алгоритмы.ФормаВыбора",,ЭтаФорма,,,,Новый ОписаниеОповещения("ВыбранАлгоритмИзБиблиотеки", ЭтаФорма));
	
КонецПроцедуры

#Конецобласти

#Область Типовые

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Определим возможно это другие реквизиты из другой базы тогда это будет объект фантом
	
	Если ЗначениеЗаполнено(Параметры.ДругиеРеквизиты) Тогда
		
		АвтоЗаголовок 	= Ложь;
		Заголовок 		= "Другая база: " + Параметры.ДругиеРеквизиты["Наименование"];
		
		ЗаполнитьЗначенияСвойств(Объект, Параметры.ДругиеРеквизиты); КонецЕсли;
	
	// Добавим новые типы если просят
	
	Если ЗначениеЗаполнено(Параметры.ТипыДляДобавления) Тогда
		Для Каждого ОпТипа Из Параметры.ТипыДляДобавления Цикл
			НовСтрока = Объект.ОбрабатываемыеТипы.Добавить();
			НовСтрока.ПустаяСсылка = ОпТипа.ПривестиЗначение(НовСтрока.ПустаяСсылка); КонецЦикла; КонецЕсли;
	
	// Обновим вилимость элементов и считаем начальные данные
	
	Для Каждого Суффикс Из ПолучитьВсеСуффиксы() Цикл
		
		СвойАлгоритм = Объект[Суффикс + "Ссылка"].Пустая();
		
		Элементы[Суффикс].ТолькоПросмотр 					= Не СвойАлгоритм;
		Элементы["СвойАлгоритм_" + Суффикс].Видимость 		= Не СвойАлгоритм;
		Элементы["ВыбратьАлгоритм_" + Суффикс].Видимость 	= СвойАлгоритм; 
		
		Если СвойАлгоритм Тогда	ЭтотОбъект[Суффикс] = Объект[Суффикс];
		Иначе 					ЭтотОбъект[Суффикс] = Объект[Суффикс + "Ссылка"].Алгоритм; КонецЕсли; КонецЦикла;
		
КонецПроцедуры
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Сохраним свои алгоритмы
	
	Для Каждого Суффикс Из ПолучитьВсеСуффиксы() Цикл
		
		Если ТекущийОбъект[Суффикс + "Ссылка"].Пустая() Тогда
			ТекущийОбъект[Суффикс] = ЭтотОбъект[Суффикс]; КонецЕсли; КонецЦикла;
	
КонецПроцедуры

#КонецОбласти