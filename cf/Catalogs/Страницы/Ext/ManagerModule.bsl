
Функция РазрешенныеСимволы()

	Возврат "_1234567890ABCDEIFGHIJKLMNOPQRSTUVWXYZАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯЁ"

КонецФункции

Функция ОбозначениеВставкиИерархии() Экспорт
	
	Возврат "<Иерархия>";
	
КонецФункции

Функция ПолучитьЗацикленыйБлок(Таблица, Строка, текБлоки)
	
	// Проверим че в этой строке
	
	Для Каждого текСтрока Из Строка.Блоки Цикл
		Если текБлоки[текСтрока.Страница] = Истина Тогда
			Возврат текСтрока.Страница 
		Иначе
			текБлоки.Вставить(текСтрока.Страница, Истина); КонецЕсли; КонецЦикла;
	
	// Проверим остальных выше по уровню
	
	Строки = Таблица.НайтиСтроки(Новый Структура("Ссылка", Строка.Родитель));
	Для Каждого текСтрока Из Строки Цикл
		Блок = ПолучитьЗацикленыйБлок(Таблица, текСтрока, текБлоки);
		Если Блок <> Неопределено Тогда
			Возврат Блок; КонецЕсли; КонецЦикла;
	
КонецФункции

Функция ПолучитьСлоВнутриСкобок(Текст, ЗакрывающийСимвол)
	
	стрДлина 	= стрДлина(Текст);
	РазрСимволы = РазрешенныеСимволы();
	Слово 		= "";
	
	Для Ном = 1 По стрДлина Цикл 
		
		Символ = Сред(Текст, Ном, 1);
		
		Если Символ = ЗакрывающийСимвол Тогда
			Возврат Слово;
		ИначеЕсли Найти(РазрСимволы, ВРег(Символ)) Тогда
			Слово = Слово + Символ;
		Иначе
			ОбщиеФункции.СообщитьТекст("Не корректный символ """ + Символ + """");
			Возврат Неопределено; КонецЕсли; КонецЦикла;
	
	ОбщиеФункции.СообщитьТекст("Не найден закрывающий символ """ + ЗакрывающийСимвол + """");
	
КонецФункции

Функция ПолучитьПодТекст_Ст(Строка, ОтработанныеБлоки, стрОшибки)
	
	//Текст = "";
	//
	//// Проверим чтобы блок не попадал второй раз в рекурсии
	//
	//Если ОтработанныеБлоки[Строка.Ссылка] = Истина Тогда
	//	стрОшибки = "Обнаружено зацикливание блока: " + Строка.Ссылка;
	//	Возврат Неопределено; КонецЕсли;
	//
	//ОтработанныеБлоки.Вставить(Строка.Ссылка, Истина); // запомним блок
	//
	//// Получим внутренности
	//
	//Для Каждого ПодСтрока Из Строка.Строки Цикл
	//	
	//	ПодТекст = ПолучитьПодТекст(ПодСтрока, ОтработанныеБлоки, стрОшибки);
	//	Если ПодТекст = Неопределено Тогда Возврат Неопределено КонецЕсли;
	//	
	//	Текст = Текст + ПодТекст; КонецЦикла;
	//
	//// Определим кто ето
	//
	//Если Строка.ЭтоКаталог Или Строка.ЭтоФайл Тогда Возврат "" КонецЕсли;
	//
	//// Это текст
	//
	////Выполним замену блоков
	//
	//Для Каждого СтрокаБлока Из Строка.Блоки Цикл
	//	
	//	ТекстБлока = ПолучитьТекст(СтрокаБлока.Страница, стрОшибки, ОтработанныеБлоки);
	//	Если ТекстБлока = Неопределено Тогда Возврат Неопределено КонецЕсли;
	//	
	//	Текст = СтрЗаменить(Текст, "<" + СтрокаБлока.ИмяВТексте + ">", ТекстБлока); КонецЦикла;
	//
	//// Выполним замену замен
	//
	//Для Каждого СтрокаЗамены ИЗ Строка.Замены Цикл Текст = СтрЗаменить(Текст, СтрокаЗамены.Что, СтрокаЗамены.НаЧто) КонецЦикла;
	//
	//// Вернем
	//
	//Возврат Текст;
	
КонецФункции
Функция ПолучитьПодТекст_Ст2(Выборка, ОтработанныеБлоки, стрОшибки)
	
	//новТекст = "";
	//
	//Пока Выборка.Следующий() Цикл
	//
	//	// Проверим чтобы блок не попадал второй раз в рекурсии
	//	
	//	Если ОтработанныеБлоки[Выборка.Ссылка] = Истина Тогда
	//		стрОшибки = "Обнаружено зацикливание блока: " + Выборка.Ссылка;
	//		Возврат Неопределено; КонецЕсли;
	//	
	//	ОтработанныеБлоки.Вставить(Выборка.Ссылка, Истина); // запомним блок
	//	
	//	// Получим внутренности
	//	
	//	ПодТекст = ПолучитьПодТекст(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией), ОтработанныеБлоки, стрОшибки);
	//	Если ПодТекст = Неопределено Тогда Возврат Неопределено КонецЕсли;
	//	Текст = Текст + ПодТекст;
	//	
	//	// Определим кто ето
	//	
	//	Если Выборка.ЭтоКаталог Или Выборка.ЭтоФайл Тогда Возврат "" КонецЕсли;
	//	
	//	// Это текст
	//	
	//	//Выполним замену блоков
	//	
	//	ВыборкаБлоков = Выборка.Блоки.Выбрать();
	//	Пока ВыборкаБлоков.Следующий() Цикл
	//		
	//		ТекстБлока = ПолучитьТекст(ВыборкаБлоков.Страница, стрОшибки, ОтработанныеБлоки);
	//		Если ТекстБлока = Неопределено Тогда Возврат Неопределено КонецЕсли;
	//		
	//		Текст = СтрЗаменить(Текст, "<" + ВыборкаБлоков.ИмяВТексте + ">", ТекстБлока); КонецЦикла;
	//	
	//	// Выполним замену замен
	//	
	//	ВыборкаЗамен = Выборка.Замены.Выбрать();
	//	ПОка ВыборкаЗамен.Следующий() Цикл Текст = СтрЗаменить(Текст, ВыборкаЗамен.Что, ВыборкаЗамен.НаЧто) КонецЦикла;
	//	
	//	// Запомним
	//	
	//	новТекст = новТекст + Текст;КонецЦикла;
	//	
	//	// Вернем
	//
	//Возврат новТекст;
	
КонецФункции
Функция ПолучитьПодТекст_Ст3(Таблица, Родитель, стрОшибки)
	
	новТекст 		= "";
	СтрокиУровня 	= Таблица.НайтиСтроки(Новый Структура("Родитель", Родитель));
	
	Для Каждого Строка Из СтрокиУровня Цикл
		
		// Определим кто ето
		
		Если Строка.ЭтоКаталог Или Строка.ЭтоФайл Тогда Возврат "" КонецЕсли;
		
		// Определим куда вставлять подчиненный текст
		
		Текст = Строка.Текст;
		
		Если Найти(Текст, ОбозначениеВставкиИерархии()) Тогда 
		
			// Проверим чтобы блок не попадал второй раз в рекурсии
			
			ЗацикленныйБлок = ПолучитьЗацикленыйБлок(Таблица, Строка, Новый Соответствие);
			Если ЗацикленныйБлок <> Неопределено Тогда
				стрОшибки = "Обнаружено зацикливание блока: " + ЗацикленныйБлок;
				Возврат Неопределено; КонецЕсли;
			
			// Получим внутренности
			
			ПодТекст = ПолучитьПодТекст(Таблица, Строка.Ссылка, стрОшибки);
			Если ПодТекст = Неопределено Тогда Возврат Неопределено КонецЕсли;
			
			// Вставим внутренности иерархии
			
			Текст = СтрЗаменить(Текст, ОбозначениеВставкиИерархии(), ПодТекст);
			
			//Выполним замену блоков
			
			Для Каждого СтрокаБлока Из Строка.Блоки ЦИкл
				
				ТекстБлока = ПолучитьТекст(СтрокаБлока.Страница, стрОшибки);
				Если ТекстБлока = Неопределено Тогда Возврат Неопределено КонецЕсли;
				
				Текст = СтрЗаменить(Текст, "<" + СтрокаБлока.ИмяВТексте + ">", ТекстБлока); КонецЦикла;
			
			// Выполним замену замен
			
			Для Каждого СтрокаЗамены Из Строка.Замены Цикл Текст = СтрЗаменить(Текст, СтрокаЗамены.Что, СтрокаЗамены.НаЧто) КонецЦикла; КонецЕсли;
		
			// Запомним
			
		новТекст = новТекст + Текст;КонецЦикла;
		
		// Вернем
	
	Возврат новТекст;
	
КонецФункции
Функция ПолучитьПодТекст(Таблица, Родитель, стрОшибки)
	
	//новТекст 		= "";
	//СтрокиУровня 	= Таблица.НайтиСтроки(Новый Структура("Родитель", Родитель));
	//
	//РазСимволыСлов = РазрешенныеСимволы();
	//
	//Для Каждого Строка Из СтрокиУровня Цикл
	//	
	//	// Определим кто ето
	//	
	//	Если Строка.ЭтоКаталог Или Строка.ЭтоФайл Тогда Возврат "" КонецЕсли;
	//	
	//	// Блоки затащим в структуру для быстрого поиска
	//	
	//	Блоки = Новый Структура;
	//	Для Каждого СтрокаБлока Из Строка.Блоки Цикл Блоки.Вставить(ВРЕГ(СтрокаБлока.ИмяВТексте), Страница) КонецЦикла;
	//	
	//	Текст 		= Строка.Текст;
	//	КолСтрок 	= СтрЧислоСтрок(Текст, КолСтрок);
	//	
	//	Для НомСтроки = 1 По КолСтрок Цикл текСтрока = СтрПолучитьСтроку(Текст, НомСтроки);
	//		
	//		стрДлина 	= стрДлина(текСтрока);
	//		ПолучТекст 	= "";
	//		ТекСлово  	= "";
	//	
	//		Для Поз = 1 По стрДлина Цикл
	//			
	//			текСимвол = Сред(Текст, Поз, 1);
	//			
	//			// Сперва отсеем исключения
	//			
	//			Если Сред(Текст, Поз, 2) = "<<" Тогда
	//				текСимвол = "<"; Поз = Поз + 1; 
	//				
	//			ИначеЕсли текСимвол = ">>" Тогда
	//				текСимвол = ">"; Поз = Поз + 1;
	//				
	//			ИначеЕсли текСимвол = ">" Тогда
	//				ОбщиеФункции.СообщитьТекст("Обнаружено внезапное завершение блока "">"" (" + НомСтроки + "," + Поз + ")");
	//				Возврат Неопределено;
	//				
	//			ИначеЕсли текСимвол = "<" Тогда 
	//				
	//				ТекстВнутри = ПолучитьТекстВнутриСкобок(Сред(Текст, Поз + 1), ">");
	//				Если ТекстВнутри = Неопределено Тогда
	//					ОбщиеФункции.СообщитьТекст("Ошибка определения имени блока");
	//					Возврат Неопределено; КонецЕсли;
	//					
	//				// Найдем блок
	//				
	//				СтраницаБлок = Неопределено;
	//				Если Не Блоки.Свойство(ВРег(ТекстВнутри, СтраницаБлок) Тогда
	//					ОбщиеФункции.СообщитьТекст("Не найдена блок по имени """ + ТекстВнутри + """");
	//					Возврат Неопределено; КонецЕсли;
	//					
	//				
	//				Для Каждого СтрокаБлока Из Строка.Блоки Цикл 
	//				
	//			КонецЕсли;
	//		
	//		// Соберем слово
	//		
	//		Если Найти(РазСимволыСлов, ВРег(текСимвол)) Тогда
	//			ТекСлово = ТекСлово + Врег(текСимвол);
	//		ИначеЕсли ТекСлово <> "" Тогда
	//			
	//			// Получено слово определим системное оно или нет
	//			
	//			
	//		Иначе ТекСлово = "" КонецЕсли;
	//		
	//		ТекСлово = 
	//		
	//		ПолучТекст = ПолучТекст + ;
	//	
	//	
	//	Если Найти(Текст, ОбозначениеВставкиИерархии()) Тогда 
	//	
	//		// Проверим чтобы блок не попадал второй раз в рекурсии
	//		
	//		ЗацикленныйБлок = ПолучитьЗацикленыйБлок(Таблица, Строка, Новый Соответствие);
	//		Если ЗацикленныйБлок <> Неопределено Тогда
	//			стрОшибки = "Обнаружено зацикливание блока: " + ЗацикленныйБлок;
	//			Возврат Неопределено; КонецЕсли;
	//		
	//		// Получим внутренности
	//		
	//		ПодТекст = ПолучитьПодТекст(Таблица, Строка.Ссылка, стрОшибки);
	//		Если ПодТекст = Неопределено Тогда Возврат Неопределено КонецЕсли;
	//		
	//		// Вставим внутренности иерархии
	//		
	//		Текст = СтрЗаменить(Текст, ОбозначениеВставкиИерархии(), ПодТекст);
	//		
	//		//Выполним замену блоков
	//		
	//		Для Каждого СтрокаБлока Из Строка.Блоки ЦИкл
	//			
	//			ТекстБлока = ПолучитьТекст(СтрокаБлока.Страница, стрОшибки);
	//			Если ТекстБлока = Неопределено Тогда Возврат Неопределено КонецЕсли;
	//			
	//			Текст = СтрЗаменить(Текст, "<" + СтрокаБлока.ИмяВТексте + ">", ТекстБлока); КонецЦикла;
	//		
	//		// Выполним замену замен
	//		
	//		Для Каждого СтрокаЗамены Из Строка.Замены Цикл Текст = СтрЗаменить(Текст, СтрокаЗамены.Что, СтрокаЗамены.НаЧто) КонецЦикла; КонецЕсли;
	//	
	//		// Запомним
	//		
	//	новТекст = новТекст + Текст;КонецЦикла;
	//	
	//	// Вернем
	//
	//Возврат новТекст;
	
КонецФункции

Функция ПолучитьТекст(Ссылка, стрОшибки = "") Экспорт
	
	Результат = "";
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 
	|	Ссылка, Родитель,
	|	ЭтоФайл, ЭтоКаталог, Публичный,
	|	ИмяФайла, Текст,
	|	Блоки.(ИмяВТексте,Страница),
	|	Замены.(Что, НаЧто, УчитыватьРегистр)
	|ИЗ
	|	Справочник.Страницы
	|ГДЕ
	|	НЕ ПометкаУдаления И
	|	Ссылка В ИЕРАРХИИ(&Ссылка)
	|
	|Упорядочить ПО Ссылка ИЕРАРХИЯ, Код
	|");
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Таблица = Запрос.Выполнить().Выгрузить();
	Таблица.Индексы.Добавить("Родитель");
	
	Если Таблица.Количество() Тогда
		Текст = ПолучитьПодТекст(Таблица, Таблица[0].Родитель, стрОшибки);
		Если Текст = Неопределено Тогда Возврат Неопределено КонецЕсли;КонецЕсли;
		
	Возврат Текст;
	
КонецФункции

