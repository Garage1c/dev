
&НаКлиенте
Перем ТекущийПользователь, ЭтоПолныеПрава;


&НаСервере
Функция ПолучитьНастройкиСервера()
	
	Возврат Новый Структура("ТекущийПользователь, ЭтоПолныеПрава", ПараметрыСеанса.ТекущийПользователь, РольДоступна("ПолныеПрава") Или РольДоступна("ПолныеПраваВОбласти"));
	
КонецФункции

&НаКлиенте
Процедура УправлениеВидимостьюДоступностью()
	                      
	ЕстьЗапрос = Объект.ТипИсточникаДанных = 1;
	
	Элементы.ИсточникДанных.Видимость 	= Не ЕстьЗапрос;
	Элементы.ТекстЗапроса.Видимость 	= ЕстьЗапрос;
	Элементы.ГруппаЗапрос.Видимость 	= ЕстьЗапрос;
	
	Элементы.СтраницаНастройка.Видимость = ЭтоПолныеПрава Или Объект.Ссылка.Пустая() Или Объект.Автор = ТекущийПользователь;
	
КонецПроцедуры

#Область Работа_с_компоновщиком

&НаСервере
Функция ПолучитьСхему()
	
	Если Объект.ТипИсточникаДанных = 0 Тогда
	
		МетаМакет = Метаданные.НайтиПоПолномуИмени(Объект.ИсточникДанных);
		Возврат Отчеты[МетаМакет.Родитель().Имя].ПолучитьМакет(МетаМакет.Имя);
		
	ИначеЕсли Объект.ТипИсточникаДанных = 1 Тогда
		
		СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
		
		источникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
        источникДанных.Имя 					= "ИсточникДанных";
        источникДанных.ТипИсточникаДанных 	= "Local"; 
		
		Набор = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
		
		Набор.Имя 							= "НаборДанных";
		Набор.ИсточникДанных 				= источникДанных.Имя;
		Набор.Запрос 						= Объект.ТекстЗапроса;
        Набор.АвтоЗаполнениеДоступныхПолей 	= Истина;  
		
		Возврат СхемаКомпоновкиДанных;
		
	Иначе
		
		ВызватьИсключение "Не известный тип источника данных " + Объект.ТипИсточникаДанных;
		
	КонецЕсли;
	     // ВЫБРАТЬ Ссылка Из Справочник.Склады
КонецФункции

&НаСервере
Процедура ЗагрузитьСписокРесурсовВНастройку()
	
	//ы = 2;
	
	//КомпоновщикОтчета.Настройки.
	
	//Для Каждого Поле Из КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок.Элементы Цикл
	//		Если Поле.ТипЗначения.СодержитТип(Тип("Число")) Тогда
		//		Элементы.СписокРесурсов.СписокВыбора.Добавить(Поле.Заголовок); 
		
КонецПроцедуры
&НаСервере
Процедура ЗагрузитьСхему(ТекстЗапроса = Неопределено)
	
	Схема = ПолучитьСхему();
	
	// //Из схемы возьмем настройки по умолчанию
	//ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);

	//КомпоновщикОтчета.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	//КомпоновщикОтчета.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	//КомпоновщикОтчета.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.Полное);
	
	//Настройки = Схема.ВариантыНастроек.Основной.Настройки;
	
	Настройки = Схема.НастройкиПоУмолчанию;
    КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	
	// Загрузим список возможных полей ресурсов
	
		//Для Каждого Элемент ИЗ СписокРесурсов Цикл
		//	
		//	ПолеРесурса = Схема.ПоляИтога.Добавить();
		//	ПолеРесурса.ПутьКДанным = Элемент.Значение;
		//	ПолеРесурса.Выражение = "Сумма(" + Элемент.Значение + ")"; 
		//	ПолеРесурса.Группировки.Добавить("ОбщийИтог"); КонецЦикла;
		
		СписокРесурсов.Очистить();
		
		Для Каждого Строка ИЗ Объект.Итоги Цикл
			
			СписокРесурсов.Добавить(Строка.ПутьКДанным);
			
			ПолеРесурса = Схема.ПоляИтога.Добавить();
			ЗаполнитьЗначенияСвойств(ПолеРесурса, Строка);
			
			СтрокиГруппировки = Объект.ГруппировкиИтога.НайтиСтроки(Новый Структура("ПутьКДанным", Строка.ПутьКДанным));
			Для Каждого СтрокаГруппировки ИЗ СтрокиГруппировки Цикл
				ПолеРесурса.Группировки.Добавить(СтрокаГруппировки.Группировка); КонецЦикла; КонецЦикла;
	
	// Отправим на загрузку схему
	
    АдресСхемы = ПоместитьВоВременноеХранилище(Схема, УникальныйИдентификатор); 
	
	Попытка
   		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));
	Исключение
		ОбщиеФункции.СообщитьТекст(ОписаниеОшибки()); Возврат;
	КонецПопытки;
	
	// Пихнем настройки
	
    КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	КомпоновщикНастроек.ЗагрузитьФиксированныеНастройки(Настройки);
    КомпоновщикОтчета = КомпоновщикНастроек;
	
	
	// спрячем или нет пользовательские настройки
	
	Элементы.КомпоновщикОтчетаПользовательскиеНастройки.Видимость = КомпоновщикОтчета.ПользовательскиеНастройки.Элементы.Количество();
	
	
	//КомпоновщикОтчета.ЗагрузитьФиксированныеНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	//Объект.КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Схема));
	
	//КомпоновщикОтчета.Настройки = Схема.НастройкиПоУмолчанию;
	//КомпоновщикОтчета.Восстановить();
	
	//Получаем схему из макета
	//СхемаКомпоновкиДанных = Обработки.РабочийСтолРуководителя.ПолучитьМакет("Взаиморасчеты");

		////Из схемы возьмем настройки по умолчанию
		//Настройки = Схема.НастройкиПоУмолчанию;
		//
		////Помещаем в переменную данные о расшифровке данных
		//НовыеДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
		//
		////Формируем макет, с помощью компоновщика макета
		//КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;

		////Передаем в макет компоновки схему, настройки и данные расшифровки
		//МакетКомпоновки 	= КомпоновщикМакета.Выполнить(Схема, Настройки, НовыеДанныеРасшифровки);
		//ДанныеРасшифровки 	= ПоместитьВоВременноеХранилище(НовыеДанныеРасшифровки, УникальныйИдентификатор);
		//
		////Выполним компоновку с помощью процессора компоновки
		//ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		//ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,, НовыеДанныеРасшифровки);
		//
		////Очищаем поле табличного документа
		////Взаиморасчеты.Очистить();

		////Выводим результат в табличный документ
		////ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		////ПроцессорВывода.УстановитьДокумент(Взаиморасчеты);

		//КомпоновщикОтчета.ЗагрузитьНастройки(Настройки);
		//
		////ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	
КонецПроцедуры
&НаСервере
Процедура ЗагрузитьНастройки()
	
	Запрос = Новый Запрос("ВЫБРАТЬ Настройки ИЗ Справочник.ОтчетыПользователей ГДЕ Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		текНастройки = Выборка.Настройки.Получить();
		Если текНастройки <> Неопределено Тогда
			КомпоновщикОтчета.ЗагрузитьНастройки(текНастройки); КонецЕсли;КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокМакетов()
	
	Список		= Новый СписокЗначений;
	ТипСхема 	= Метаданные.СвойстваОбъектов.ТипМакета.СхемаКомпоновкиДанных;
	
	Для Каждого Отчет Из Метаданные.Отчеты Цикл Для Каждого Макет Из Отчет.Макеты Цикл Если Макет.ТипМакета = ТипСхема Тогда Список.Добавить(Макет.ПолноеИмя(), Отчет.Синоним + " (" + Макет.Синоним + ")"); КонецЕсли; КонецЦикла;КонецЦикла;
		
	Возврат Список;
	
КонецФункции

&НаКлиенте
Процедура ИсточникДанныхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка 	= Ложь;
	СписокМакетов 			= ПолучитьСписокМакетов();
	Выбор = ВыбратьИзСписка(СписокМакетов);
	
	Если Выбор <> Неопределено Тогда
		
		Объект.ИсточникДанных 	= Выбор.Значение;
		стрИсточникДанных 		= Выбор.Представление;
		
		ЗагрузитьСхему(); 
		Модифицированность = Истина; КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьНаСервере(Настройки = Неопределено)
	
	СхемаКомпоновкиДанных = ПолучитьСхему();

	//Из схемы возьмем настройки по умолчанию
	//Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	Если Настройки = Неопределено Тогда Настройки = КомпоновщикОтчета.Настройки КонецЕсли;

	//Помещаем в переменную данные о расшифровке данных
	НовыеДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;

	//Формируем макет, с помощью компоновщика макета
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	
	// Загрузим пользовтельские настройки которые ввыел пользователь совсем недавно
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(КомпоновщикОтчета.ПользовательскиеНастройки);
	
	// 
	//КомпоновщикОтчета.ПользовательскиеНастройки.

	//Передаем в макет компоновки схему, настройки и данные расшифровки
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), НовыеДанныеРасшифровки);
	
	//Выполним компоновку с помощью процессора компоновки
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,,НовыеДанныеРасшифровки);
	
	ДанныеРасшифровки = ПоместитьВоВременноеХранилище(НовыеДанныеРасшифровки, УникальныйИдентификатор);
	
	//Очищаем поле табличного документа
	Результат.Очистить();

	//Выводим результат в табличный документ
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(Результат);

	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
КонецПроцедуры
&НаКлиенте
Процедура Сформировать(Команда)
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВыводРезультата;
	СформироватьНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область Расшифровка

&НаСервере                                                                                                                                                             	
Процедура РасшифроватьНаСервере(Расшифровка)
	
	ДанныеРасшифровкиСКД = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
	КоллекцияПолей = ДанныеРасшифровкиСКД.Элементы[Расшифровка].ПолучитьПоля();
    
	Если КоллекцияПолей.Количество() = 1 Тогда 
		
		ОбработкаРасшифровкиКД 	= Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровки, Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));
		Настройки = ОбработкаРасшифровкиКД.Расшифровать(Расшифровка, Новый ПолеКомпоновкиДанных(КоллекцияПолей[0].Поле));
		
		СформироватьНаСервере(Настройки);  КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	Перем ВыполненноеДействие, ПараметрДействия;
	
	СтандартнаяОбработка 	= Ложь;      
	ИсточникНастроек 		= Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы);
	ОбработкаРасшифровкиКД 	= Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровки, ИсточникНастроек);            
	
	ОбработкаРасшифровкиКД.ВыбратьДействие(Расшифровка, ВыполненноеДействие, ПараметрДействия);            
	Если ВыполненноеДействие <> ДействиеОбработкиРасшифровкиКомпоновкиДанных.Нет Тогда                        
		Если ВыполненноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение Тогда                                    
			
			ОткрытьЗначение(ПараметрДействия); 
			
		ИначеЕсли ВыполненноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.Расшифровать Тогда
			
			РасшифроватьНаСервере(Расшифровка);
			
		//Иначе
			//Описание = Новый ОписаниеОбработкиРасшифровкиКомпоновкиДанных(ДанныеРасшифровки, Расшифровка, ПараметрДействия); КонецЕсли; КонецЕсли;       
			
		Иначе СтандартнаяОбработка = Истина КонецЕсли; КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Типовые

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	СсылкаНаОбъект = Объект.Ссылка;
	
КонецПроцедуры
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.Настройки = Новый ХранилищеЗначения(КомпоновщикОтчета.Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//Получаем схему из макета
	Если Объект.ТипИсточникаДанных = 1 И Не ЗапросПроверкуПрошел() Тогда Объект.ТипИсточникаДанных = 0 КонецЕсли; // если запрос сломан то сборсим его
	
	Если Не ПустаяСтрока(Параметры.ИсточникДанных) Тогда // Копирование
		
		Объект.ИсточникДанных = Параметры.ИсточникДанных;
		стрИсточникДанных = Метаданные.НайтиПоПолномуИмени(Объект.ИсточникДанных).Синоним;
		ЗагрузитьСхему();
		КомпоновщикОтчета.ЗагрузитьНастройки(ПолучитьИзВременногоХранилища(Параметры.АдресНастроек).Получить());
		
	ИначеЕсли Не ПустаяСтрока(Объект.ИсточникДанных) Тогда // Считывание записанного
		
		стрИсточникДанных = Метаданные.НайтиПоПолномуИмени(Объект.ИсточникДанных).Синоним;
		
		ЗагрузитьСхему();
	 	ЗагрузитьНастройки(); 
		
	ИначеЕсли Объект.ТипИсточникаДанных = 1 Тогда
		
		ЗагрузитьСхему();
		Если ПустаяСтрока(Параметры.АдресНастроек) Тогда
			ЗагрузитьНастройки();
		Иначе
			КомпоновщикОтчета.ЗагрузитьНастройки(ПолучитьИзВременногоХранилища(Параметры.АдресНастроек).Получить()); КонецЕсли; КонецЕсли;
	
	Если Параметры.СформироватьПриОткрытии Тогда // Выведем отчет сразу
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВыводРезультата;
		СформироватьНаСервере(); КонецЕсли;
	
	текТекстЗапроса = Объект.ТекстЗапроса;
	СсылкаНаОбъект 	= Объект.Ссылка;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОповеститьОЗаписиНового(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Настройки = ПолучитьНастройкиСервера();
	ТекущийПользователь = Настройки.ТекущийПользователь;
	ЭтоПолныеПрава 		= Настройки.ЭтоПолныеПрава;
	
	ИсточникСчитыванияДанных = ?(ПустаяСтрока(Объект.ТекстЗапроса), "Запрос", "Метаданные");
	
	ОбновитьИнформациюОДоступе();
	УправлениеВидимостьюДоступностью();

КонецПроцедуры

#КонецОбласти

#Область Коммментарии

&НаКлиенте
Процедура КомментарийHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	HTMLОбработкаКлиент.ТекстHTMLПриНажатии(ДанныеСобытия, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКомментарий()
	
	КомментарийHTML = Комментарии.ПолучитьКомментарииHTMLКОбъекту(СсылкаНаОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.СтраницаКомментарий Тогда ОбновитьКомментарий() КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	ОбновитьКомментарий();
	ОповеститьОЗаписиНового(НовыйОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область Доступ

&НаКлиенте
Функция ПолучитьТекстДоПробела(Текст)
	
	ПолПробела = Найти(Текст, " ");
	Возврат ?(ПолПробела, СокрП(Лев(Текст, ПолПробела)), Текст);
	
КонецФункции
&НаКлиенте
Функция ПолучитьСтрСписокЛюдей(ИмяТаблицы, ДоступУстановлен, ВсемМожно, Неопределилось)
	
	стр = "";
	Для КАждого Строка Из Объект[ИмяТаблицы] Цикл Неопределилось = Ложь; ДоступУстановлен = Истина; Если Строка.Пользователь = Неопределено Тогда стр = "<a style=color:green>Всем</a>"; ВсемМожно = Истина; Прервать; КонецЕсли; стр = стр + ?(стр = "","","; ") + ПолучитьТекстДоПробела(Строка(Строка.Пользователь)); КонецЦикла;
	
	Возврат ?(стр = "", "<a style=color:red>неопределено</a>", стр);
	
КонецФункции
&НаКлиенте
Процедура ОбновитьИнформациюОДоступе()
	
	ДоступУстановлен = Ложь; ВсемРазрешено = Ложь; ВсемЗапрещено = Ложь; НеопределилосьРазрешено = Истина; НеопределилосьЗапрещено = Истина;
	ТекстРазрешено = ПолучитьСтрСписокЛюдей("Разрешено", ДоступУстановлен, ВсемРазрешено, НеопределилосьРазрешено);
	ТекстЗапрещено = ПолучитьСтрСписокЛюдей("Запрещено", ДоступУстановлен, ВсемЗапрещено, НеопределилосьЗапрещено);
	
	ДоступHTML = "<!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Strict//EN"" ""http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"">
			|<html xmlns=""http://www.w3.org/1999/xhtml"" xml:lang=""ru"">
			|<head>
			|	<meta http-equiv=""Content-Type"" content=""text/html"" />
			|	<style>
			|		.headtable{
			|				background:#EDF2F0; 
        	|			}
			|		.open{
			|				color:#004328;
        	|			}
			|		.close{
            |               color:#620000;
         	|			}
            |	height:20px;}
			|	</style>
			|</head>
			|<body>
			|<p style=color:gray><em>Запрет имеет выше приоритет чем разрешение. Например: если разрешить всем, а Иванову запретить, тогда Иванов не увидет этот отчет. Или если всем разрешить и всем запретить, тогда никто не увидет отчет.</em></p>
			|" + ?(ДоступУстановлен, "", "<p>Сейчас никто кроме вас, не видит отчет. Если нужно показать отчет другим, установите разрешения просматривать ниже.</p>") + "
			|<table width=100%>
			|	<tr class=headtable>
			|		<th style=text-align:left>
			|			Кому разрешено:
			|		</th>
			|		<th style=text-align:left>
			|			Кому Запрещено:
			|		</th>
			|	</tr>
			|	<tr>
			|		<th class=open>
			|			" + ТекстРазрешено + " <a href='V8:ВЫПОЛНИТЬ КОД:ЭтаФорма.КомуДоступИзменить(""Разрешено"")'>Изменить</a>
			|		</th>
			|		<th class=close>
			|			" + ТекстЗапрещено + " <a href='V8:ВЫПОЛНИТЬ КОД:ЭтаФорма.КомуДоступИзменить(""Запрещено"")'>Изменить</a>
			|		</th>
			|		</tr>
			|</table>
			|</html>
			|";
			
	// Сформируем заголовок
	
	Если Не ДоступУстановлен Или ВсемЗапрещено Тогда
		
		Текст = "(частный) никто кроме вас не видит отчет";
		
	ИначеЕсли ВсемРазрешено И НеопределилосьЗапрещено Тогда
		
		Текст = "(публичный) все видят отчет";
		
	Иначе 
		
		Текст = "(частично публикуемый) отдельные сотрудники видят отчет";
		
	КонецЕсли;
	
	Элементы.ГруппаДоступ.Заголовок = "Кто видит отчет: " + Текст;
	
КонецПроцедуры
&НаКлиенте
Процедура КомуДоступИзменить(ИмяТаблицы) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	// Соберем список
	
	Список = Новый СписокЗначений;
	Для Каждого Строка Из Объект[ИмяТаблицы] Цикл Список.Добавить(Строка.Пользователь) КонецЦикла;
	
	// Откроем
	
	ОткрытьФорму("ОбщаяФорма.ОтметитьПользователей", Новый Структура("СписокОтмеченных", Список), ЭтаФорма,,,, Новый ОписаниеОповещения("ПолучитьОтмеченныхПользователей", ЭтаФорма, ИмяТаблицы));
	
КонецПроцедуры
&НаКлиенте
Процедура ПолучитьОтмеченныхПользователей(Результат, Параметры) Экспорт
	
	Если Результат <> Неопределено Тогда
	
		Таблица = Объект[Параметры];
		Таблица.Очистить();
		
		Для Каждого Пользователь Из Результат Цикл Таблица.Добавить().Пользователь = Пользователь КонецЦикла; 
	
		ОбновитьИнформациюОДоступе(); КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ДоступHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	HTMLОбработкаКлиент.ТекстHTMLПриНажатии(ДанныеСобытия, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область Почта

&НаКлиенте
Функция ПолучитьРасширениеДляФайлаПоТипу(ФорматФайла)
	
	Если ФорматФайла = "XLS97" Тогда
		Возврат "xls";
	Иначе
		Возврат НРег(ФорматФайла); КонецЕсли;
	
КонецФункции
&НаКлиенте
Процедура ОтправитьНаЭлектроннуюПочту(Команда = Неопределено)
	
	Если ПустаяСтрока(ФорматФайла) Тогда
		ПоказатьОповещениеПользователя("Ошибка",,"Не выбран формат файла xls или pdf");
	Иначе
		
		Расширение 		= ПолучитьРасширениеДляФайлаПоТипу(ФорматФайла);
		ИмяФайла 		= Объект.Наименование + "." + Расширение;
		ПолноеИмяФайла 	= КаталогВременныхФайлов() + ИмяФайла;
		Результат.Записать(ПолноеИмяФайла, ТипФайлаТабличногоДокумента[Расширение]);
		
		Вложения = Новый Массив;
		Вложения.Добавить(Новый Структура("ИмяФайла, ПолноеИмяФайла", ИмяФайла, ПолноеИмяФайла));
	
		ОткрытьФорму("Документ.Письмо.Форма.Письмо2", Новый Структура("Вложения, УдалитьФайлыПослеОтправки", Вложения, Истина)); КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВПочтуPDF(Команда)
	
	ФорматФайла = "PDF";
	ОтправитьНаЭлектроннуюПочту();
	
КонецПроцедуры
&НаКлиенте
Процедура ОтправитьВПочтуXLS(Команда)
	
	ФорматФайла = "XLS97";
	ОтправитьНаЭлектроннуюПочту();
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ЗапросПроверкуПрошел()
	
	Запрос = Новый ПостроительЗапроса;
	
	Попытка Запрос.Текст = Объект.ТекстЗапроса;
	Исключение
		стрОшибки = ОписаниеОшибки();
		стрОшибки = Сред(стрОшибки, Найти(стрОшибки, ")}:") + 3);
		стрОшибки = Сред(стрОшибки, Найти(стрОшибки, ")}:") + 3);
		ОбщиеФункции.СообщитьТекст(стрОшибки);
		Возврат Ложь; КонецПопытки;
	
	Возврат Истина;
	
КонецФункции
&НаКлиенте
Процедура ПрименитьЗапрос(Команда)
	
	// Проверим запрос
	
	Если ЗапросПроверкуПрошел() Тогда ЗагрузитьСхему() КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникСчитыванияДанныхПриИзменении(Элемент)
	 
	УправлениеВидимостьюДоступностью();
	
КонецПроцедуры

#Область Конструктор

&НаКлиенте
Процедура текКонструктор(Команда)
	
	Конструктор = Новый КонструкторЗапроса(Объект.ТекстЗапроса);
	Конструктор.Показать(Новый ОписаниеОповещения("ОбработатьКонструктор", ЭтаФорма));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьКонструктор(Текст, Свойства) Экспорт
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		Объект.ТекстЗапроса = Текст;
		ЗагрузитьСхему(); КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтмеченыРесурсыПользователем(Список, ДополнительныеПараметры) Экспорт
	
	Если Список <> Неопределено тОгда
		
		СписокРесурсов.Очистить();
		КонвертацияТипов.ДобавитьСписокВКонецСписка(СписокРесурсов, Список, Истина);
		
		// Поместим в объект
		
		Объект.Итоги.Очистить();
		Объект.ГруппировкиИтога.Очистить();
		
		Для Каждого Элемент Из Список Цикл
			Если Элемент.Пометка Тогда
				
				НовСтрока = Объект.Итоги.Добавить();
				НовСтрока.ПутьКДанным 	= Элемент.Значение;
				НовСтрока.Выражение 	= "Сумма(" + Элемент.Значение + ")";
				
				// Теперь добавим группировки
				
				Для Каждого Поле Из КомпоновщикОтчета.Настройки.ДоступныеПоляГруппировок.Элементы Цикл
					Если Не Поле.ТипЗначения.СодержитТип(Тип("Число")) Тогда
						НовГруппировка = Объект.ГруппировкиИтога.Добавить();
						НовГруппировка.ПутьКДанным = Элемент.Значение;
						НовГруппировка.Группировка = Поле.Заголовок; КонецЕсли; КонецЦикла;
				
				НовГруппировка = Объект.ГруппировкиИтога.Добавить();
				НовГруппировка.ПутьКДанным = Элемент.Значение;
				НовГруппировка.Группировка = "ОбщийИтог"; КонецЕсли; КонецЦикла; КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура СписокРесурсовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Список = Новый СписокЗначений;
	
	Для Каждого Поле Из КомпоновщикОтчета.Настройки.ДоступныеПоляГруппировок.Элементы Цикл
		Если Поле.ТипЗначения.СодержитТип(Тип("Число")) Тогда
			Список.Добавить(Поле.Заголовок,,СписокРесурсов.НайтиПоЗначению(Поле.Заголовок) <> Неопределено); КонецЕсли; КонецЦикла;
	
		Список.ПоказатьОтметкуЭлементов(Новый ОписаниеОповещения("ОтмеченыРесурсыПользователем", ЭтаФорма), "Ресурсы");
	
КонецПроцедуры

#КонецОбласти