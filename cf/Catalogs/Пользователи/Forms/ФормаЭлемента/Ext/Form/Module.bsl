
#Область Управлени_конфигуратором

&НаСервере
Процедура ОбновитьВидимостьКонфигуратора()
	
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Объект.ПользовательИБ);
	
	ЕстьВКонфигураторе 	= ПользовательИБ <> Неопределено;
	ЭтоНовый 			= Объект.Ссылка.Пустая();
	
	Элементы.ГруппаЕстьВКонфигураторе.Видимость = Не ЭтоНовый И ЕстьВКонфигураторе;
	Элементы.ГруппаНетВКонфигураторе.Видимость 	= Не ЭтоНовый И Не ЕстьВКонфигураторе;
	
	Если ЕстьВКонфигураторе Тогда
		
		ВходРазрешен 	= ПользовательИБ.АутентификацияСтандартная ИЛи ПользовательИБ.АутентификацияОС Или ПользовательИБ.АутентификацияOpenID;
		ИмяВхода 		= ПользовательИБ.Имя; КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьНовыйПароль(Пароль)
	
	ПользИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Объект.ПользовательИБ);
	ПользИБ.Пароль = Пароль;
	Возврат ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(ПользИБ);

КонецФункции
&НаКлиенте
Процедура ПарольВведен(Пароль, ДопПараметры) Экспорт
	
	Если Пароль <> Неопределено И Не ПустаяСтрока(Пароль) И ЗаписатьНовыйПароль(Пароль) Тогда
		ПоказатьОповещениеПользователя("пароль установлен"); КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура УстановитьПароль(Команда)
	
	ПоказатьВводСтроки(Новый ОписаниеОповещения("ПарольВведен", ЭтаФорма), "123456", "новый пароль");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовогоПользователяПоПаролю(Пароль, ДопПараметры) Экспорт
	
	Если Не ПустаяСтрока(Пароль) И СоздатьПользователяНаСервере(Пароль) Тогда
		ПоказатьОповещениеПользователя("Пользователь создан"); КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ИмяВходаДляНовгоПользователяИБ(новИмяВхода, ДопПараметры) Экспорт
	
	Если новИмяВхода <> Неопределено И Не ПустаяСтрока(новИмяВхода) Тогда
		ИмяВхода = новИмяВхода;
		ПоказатьВводСтроки(Новый ОписаниеОповещения("СоздатьНовогоПользователяПоПаролю", ЭтаФорма), "123456","Пароль"); КонецЕсли;
	
КонецПроцедуры
&НаСервере
Функция СоздатьПользователяНаСервере(Пароль)
	
	ПользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
	ПользовательИБ.АутентификацияСтандартная = Истина;
	ПользовательИБ.Имя 			= ИмяВхода;
	ПользовательИБ.Пароль 		= Пароль;
	ПользовательИБ.ПолноеИмя 	= ?(Объект.ФизЛицо.Пустая(), Объект.Наименование, Объект.ФизЛицо.Наименование);
	
	НачатьТранзакцию();
	
	Если Не ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(ПользовательИБ) Тогда
		ОтменитьТранзакцию();
		Возврат Ложь; КонецЕсли;
	
	Объект.ПользовательИБ = ПользовательИБ.УникальныйИдентификатор;
	
	Если Не Записать() Тогда 
		ОтменитьТранзакцию(); 
		Возврат Ложь; КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
	ОбновитьВидимостьКонфигуратора();
	Возврат Истина;
	
КонецФункции
&НаКлиенте
Процедура СоздатьПользователя(Команда)
	
	ПоказатьВводСтроки(Новый ОписаниеОповещения("ИмяВходаДляНовгоПользователяИБ", ЭтаФорма), СтрЗаменить(СтрЗаменить(Объект.Наименование, ".", ""), " ", ""),"Имя входа в базу");
	
КонецПроцедуры

&НаСервере
Функция ИзменитьИмяВхода()
	
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Объект.ПользовательИБ);
	ПользовательИБ.Имя = ИмяВхода;
	
	Возврат ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(ПользовательИБ);
	
КонецФункции
&НаКлиенте
Процедура ИмяВходаПриИзменении(Элемент)
	
	Если ИзменитьИмяВхода() Тогда
		ПоказатьОповещениеПользователя("Имя входа изменено") КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ИзменитьРазрешенияВходаНаСервере()
	
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Объект.ПользовательИБ);
	
	Если ВходРазрешен Тогда
		ПользовательИБ.АутентификацияСтандартная = Истина;
	Иначе
		ПользовательИБ.АутентификацияСтандартная 	= Ложь;
		ПользовательИБ.АутентификацияОС 			= Ложь;
		ПользовательИБ.АутентификацияOpenID 		= Ложь; КонецЕсли;
	
	Возврат ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(ПользовательИБ);
	
КонецФункции
&НаКлиенте
Процедура ВходРазрешенПриИзменении(Элемент)
	
	Если ИзменитьРазрешенияВходаНаСервере() Тогда
		ПоказатьОповещениеПользователя("Пользователь " + ?(ВходРазрешен, "активирован", "заблокирован")); КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Загрузим настройки
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ Профиль ИЗ РегистрСведений.ПрофилиПользователей ГДЕ Пользователь = &Ссылка;
	|ВЫБРАТЬ РАЗЛИЧНЫЕ Ссылка ИЗ Справочник.ГруппыПользователей.Состав ГДЕ Пользователь = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Пакет = Запрос.ВыполнитьПакет();
	
	ПодклПрофили.ЗагрузитьЗначения(Пакет[0].Выгрузить().ВыгрузитьКолонку("Профиль"));
	ГруппыПользователя.ЗагрузитьЗначения(Пакет[1].Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	// Обновим видимость фигулин конфигуратора
	
	ОбновитьВидимостьКонфигуратора();
		
КонецПроцедуры
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбновитьВидимостьКонфигуратора();
	
КонецПроцедуры


&НаКлиенте
Процедура ОткрытьСт(Команда)
	
	ОткрытьФорму("Справочник.Пользователи.Форма.ФормаЭлемента_Ст", Новый Структура("Ключ", Объект.Ссылка), ВладелецФормы, УникальныйИдентификатор, Окно);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Отбор = Новый Структура("Пользователь", ТекущийОбъект.Ссылка);
	
	// Запиишем профили
	
	НаборПроф = РегистрыСведений.ПрофилиПользователей.СоздатьНаборЗаписей();
	НаборПроф.Отбор.Пользователь.Установить(ТекущийОбъект.Ссылка);
	
	Для Каждого Элемент ИЗ ПодклПрофили Цикл 
		НовЗапись = НаборПроф.Добавить();
		НовЗапись.Пользователь 	= Отбор.Пользователь;
		НовЗапись.Профиль 		= Элемент.Значение; КонецЦикла;
	
	Если Не ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(НаборПроф) Тогда
		Отказ = Истина; КонецЕсли;
	
	// Запишем группы
	
	Запрос = Новый Запрос(	// Удалить
	"ВЫБРАТЬ РАЗЛИЧНЫЕ Ссылка ИЗ Справочник.ГруппыПользователей.Состав ГДЕ Пользователь = &Ссылка И НЕ Ссылка В(&ТекГруппы);
							// Добавить
	|ВЫБРАТЬ РАЗЛИЧНЫЕ Ссылка ИЗ Справочник.ГруппыПользователей.Состав ГДЕ Пользователь <> &Ссылка И Ссылка В(&ТекГруппы)");
	
	Запрос.УстановитьПараметр("ТекГруппы", 	ГруппыПользователя.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("Ссылка", 	Отбор.Пользователь);
	Пакет = Запрос.ВыполнитьПакет();
	
	// Удалим из старых групп
	
	Удаленные = Пакет[0].Выбрать();
	Пока Удаленные.Следующий() Цикл
		
		СпрОб = Удаленные.Ссылка.ПолучитьОбъект();
		КонвертацияТипов.УдалитьСтрокиТЗ(СпрОб.Состав, Отбор);
		Если Не ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(СпрОб) Тогда Отказ = Истина КонецЕсли; КонецЦикла;
	
	// Добавим в новые группы
	
	Добавленные = Пакет[1].Выбрать();
	Пока Добавленные.Следующий() Цикл
		
		СпрОб = Добавленные.Ссылка.ПолучитьОбъект();
		СпрОб.Состав.Добавить().Пользователь = ТекущийОбъект.Ссылка;
		Если Не ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(СпрОб) Тогда Отказ = Истина КонецЕсли; КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьИзПрофилейнаСервере()
	
	Масс = Новый Массив;
	Масс.Добавить(Объект.Ссылка);
	
	Возврат НастройкиПользователя.УстановитьПрофилиНаПользователей(Масс, ПодклПрофили.ВыгрузитьЗначения());
	
КонецФункции
&НаКлиенте
Процедура ДобавитьИзПрофилей(Команда)
	
	Если Модифицированность Тогда
		ПоказатьПредупреждение(,"Сперва нужно записать");
		Возврат; КонецЕсли;
	
	Если ПодклПрофили.Количество() И ДобавитьИзПрофилейнаСервере() Тогда
		ПоказатьОповещениеПользователя("Настройки установлены",,"Записано");
		Закрыть(); КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбнулитьПользователяНаСервере()
	
	Массив = Новый Массив;
	Массив.Добавить(Объект.Ссылка); 
	
	Возврат НастройкиПользователя.ОчиститьИУстановитьПрофилиПользователей(Массив, ПодклПрофили.ВыгрузитьЗначения());
	
КонецФункции
&НаКлиенте
Процедура ПользовательРешилОбнулиться(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да И ОбнулитьПользователяНаСервере() Тогда
		ПоказатьОповещениеПользователя("Настройки сброшены и установлены из профиля",,"Обнудение пользователя"); 
		Закрыть(); КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура УдалитьИДобавитьИзПрофилей(Команда)
	
	Если Модифицированность Тогда
		ПоказатьПредупреждение(,"Сперва нужно записать");
		Возврат; КонецЕсли;
	
	Если ПодклПрофили.Количество() Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ПользовательРешилОбнулиться", ЭтаФорма), "Будут очищены все настройки и назначены только из профиля, Продожить?", РежимДиалогаВопрос.ДаНет) КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если 	ИмяСобытия = "СохраненыНастройкиПрофиля" И
			Параметр.Пользователь = Объект.Ссылка Тогда
			
		Закрыть(); КонецЕсли;
	
КонецПроцедуры




