
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьМенеджерОбъектов(Команда)
	
	ОткрытьФорму("Справочник.обм_ОбменДанными.Форма.МенеджерОбъектовБазы");
	
КонецПроцедуры
&НаКлиенте
Процедура БуферОбмена(Команда)
	
	ОткрытьФорму("РегистрСведений.обм_Буфер.ФормаСписка");
	
КонецПроцедуры
&НаКлиенте
Процедура Логи(Команда)
	
	ОткрытьФорму("РегистрСведений.обм_ЛогЗапросов.ФормаСписка");
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Объект.Ссылка.Пустая() Тогда
		
		Элементы.ГруппаУправления.Видимость = Ложь; 
		// Получим расписание из регл задания
		
		Объект.РасписаниеВыгрузки = РасписаниеВСтроку(ПолучитьРасписание());
		
	Иначе
		ВидимостьРоботов(); КонецЕсли;
	
КонецПроцедуры

#Область РоботоТехника

&НаСервере
Функция ПолучитьКлючПоискаРоботов()
	
	Возврат Новый Структура("Ключ, Метаданные, Использование", XMLСтрока(Объект.Ссылка), "обм_Обмен", Истина);
	
КонецФункции

&НаСервере
Функция ЗапуститьРобота()
	
	Задание = РегламентныеЗадания.СоздатьРегламентноеЗадание("обм_Обмен");
	
	текПараметры = Новый Массив;
	текПараметры.Добавить(Объект.Ссылка);
	
	Задание.Использование 	= Истина;
	Задание.Параметры 		= текПараметры;
	Задание.Ключ 			= XMLСтрока(Объект.Ссылка);
	Задание.Наименование 	= "[Обмен] Выгрузка данных (" + Объект.Наименование + ")";
			
	Задание.Расписание 		= ПолучитьРасписание();
		
	Попытка 	Задание.Записать(); 
	Исключение 	Сообщить("Ошибка записи задания " + ОписаниеОшибки());
				Возврат Ложь; КонецПопытки;
			
	ВидимостьРоботов();
	Возврат Истина;
	
КонецФункции
&НаСервере
Функция УдалитьРоботов()
	
	Задания = РегламентныеЗадания.ПолучитьРегламентныеЗадания(ПолучитьКлючПоискаРоботов());
	Для Каждого Задание Из Задания Цикл
		
		Попытка 	Задание.Удалить();
		Исключение	Сообщить("Ошибка при удалении автоматической выгрузки " + ОписаниеОшибки());
					Возврат Ложь; КонецПопытки;	КонецЦикла;
			
	ВидимостьРоботов();
	Возврат Истина;
	
КонецФункции
&НаСервере
Функция ОбновитьРасписаниеРоботов()
	
	Задания = РегламентныеЗадания.ПолучитьРегламентныеЗадания(ПолучитьКлючПоискаРоботов());
	Для Каждого Задание Из Задания Цикл
		
		Задание.Расписание = ПолучитьРасписание();
		
		Попытка 	Задание.Записать(); 
		Исключение 	Сообщить("Ошибка обновления задания " + ОписаниеОшибки());
					Возврат Ложь; КонецПопытки; КонецЦикла;
			
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ВидимостьРоботов()
	
	ЕстьЗадание = РегламентныеЗадания.ПолучитьРегламентныеЗадания(ПолучитьКлючПоискаРоботов()).Количество();
	Элементы.ГруппаАктивировать.Видимость 	= Не ЕстьЗадание;
	Элементы.ГруппаДеАктивировать.Видимость = ЕстьЗадание;
	
КонецПроцедуры

&НаКлиенте
Процедура АктивироватьВыгрузку(Команда)
	
	Если ЗапуститьРобота() Тогда
		ПоказатьОповещениеПользователя("Автоматическая выгрузка запущена",,"Запущена и активирована согласно расписанию", БиблиотекаКартинок.РегламентноеЗадание); КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ВыключитьОбмен(Команда)
	
	УдалитьРоботов();
	
КонецПроцедуры

&НаСервере
Функция РасписаниеВСтроку(Расписание)
	
	Возврат ЗначениеВСтрокуВнутр(Расписание);
	
КонецФункции
&НаСервере
Функция ПолучитьРасписание()
	
	Попытка	Расписание = ЗначениеИзСтрокиВнутр(Объект.РасписаниеВыгрузки);
	Исключение КонецПопытки;
	
	Если ТипЗнч(Расписание) <> Тип("РасписаниеРегламентногоЗадания") Тогда
		НовЗадание = РегламентныеЗадания.СоздатьРегламентноеЗадание(Метаданные.РегламентныеЗадания.обм_Обмен);
		Возврат НовЗадание.Расписание; 
	Иначе
		Возврат Расписание; КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура УстановленоРасписаниеПользователем(Расписание, ДополнительныеПараметры) Экспорт
	
	Если Расписание <> Неопределено Тогда
		
		Объект.РасписаниеВыгрузки = РасписаниеВСтроку(Расписание);
		
		Если ОбновитьРасписаниеРоботов() Тогда
			Модифицированность = Истина;
			ПоказатьОповещениеПользователя("Расписание обновлено",,, БиблиотекаКартинок.РегламентноеЗадание); КонецЕсли; КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура Декорация3Нажатие(Элемент)
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(ПолучитьРасписание());
	Диалог.Показать(Новый ОписаниеОповещения("УстановленоРасписаниеПользователем", ЭтаФорма));
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьСейчасНаСервере()
	
	обм_Обмен.обм_Обмен(Объект.Ссылка);
	
КонецПроцедуры
&НаКлиенте
Процедура ВыгрузитьСейчас(Команда)
	
	ПоказатьОповещениеПользователя("Отправлена команада на сервер",,"Выгрузить объекты накопденные в буфере");
	ВыгрузитьСейчасНаСервере();
	
КонецПроцедуры

#КонецОбласти