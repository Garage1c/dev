&НаКлиенте
Перем НастройкиСвои;
&НаКлиенте
Перем НастройкиДругие;

&НаКлиенте
Процедура ОбновитьМетаданные(Список, Источник, ВерхнУровень = Неопределено)
	
	// Если верхний заполнен значит проваливаемся ниже, если пустой то первый уровень
	
	Список.Очистить();
	ТипМассив = Тип("Массив");
	
	Для КАждого Элемент Из Источник Цикл Список.Добавить(Элемент.Ключ, Элемент.Ключ + ?(Элемент.Значение["Наборы"] = Неопределено Или Не Элемент.Значение["Наборы"].Количество(), "", " [" + Элемент.Значение["Наборы"].Количество() + "]")) КонецЦикла;
		
	Список.СортироватьПоЗначению();
	//Список.СортироватьПоПредставлению();
	
	Если ВерхнУровень <> Неопределено Тогда Список.Вставить(0, Неопределено, ВерхнУровень + " << назад") КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СчитатьСвоиДанныеИзБазы();
	
	ОбновитьМетаданные(МетаСвои, НастройкиСвои["МетаДанные"]);
		
КонецПроцедуры

&НаКлиенте
Процедура ОбменПриИзменении(Элемент)
	
	СчитатьСвоиДанныеИзБазы();
	ПоказатьОповещениеПользователя("Обновление",,"Прочитаны настройки текущей базы", БиблиотекаКартинок.Обновить);
	ОбновитьМетаданные(МетаСвои, НастройкиСвои["МетаДанные"]);
	
КонецПроцедуры
&НаКлиенте
Процедура ОбновитьДругуюБазу(Команда)
	
	Если СчитатьДругиеДанныеИзБазы() Тогда
		ПоказатьОповещениеПользователя("Обновление",,"Прочитаны настройки другой базы", БиблиотекаКартинок.Обновить);
		ОбновитьМетаданные(МетаДругие, НастройкиДругие["МетаДанные"]); КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСвоиДанныеИзБазыНаСервере()  Возврат обм_Обмен.ПолучитьСтруктуруКонфигурации(Обмен) КонецФункции
&НаКлиенте
Процедура СчитатьСвоиДанныеИзБазы() НастройкиСвои = ПолучитьСвоиДанныеИзБазыНаСервере() КонецПроцедуры

&НаСервере
Функция ПолучитьДругиеДанныеИзБазыНаСервере() 
	
	Connect 	= обм_Обмен.ПолучитьHTTPСоединение(Обмен);
	HTTPRequest	= обм_Обмен.ПолучитьHTTPЗапрос_Метаданные(Обмен);
	
	Попытка		HTTPResponse = Connect.GET(HTTPRequest);
	Исключение	
				стрОшибки = ОписаниеОшибки();
				Сообщить("Ошибка инициализации соединения: " + стрОшибки); 
				Возврат Неопределено; КонецПопытки;
			
	СтрокаВозврата = HTTPResponse.GetBodyAsString();
	
	Если HTTPResponse.StatusCode <> 200 Тогда
		Сообщить("Ошибка в другой базе (" + HTTPResponse.StatusCode + "): " + СтрокаВозврата);
		Возврат Неопределено; КонецЕсли;
	
	стрОшибки = "";
	НастройкиДругие = обм_Обмен.ПреобразоватьИзJSON(HTTPResponse.GetBodyAsString(), стрОшибки, Истина);
	Если стрОшибки <> "" Тогда
		Сообщить("Ошибка преобразования из JSON строки: " + стрОшибки); 
		Возврат Неопределено; КонецЕсли;
			
	Возврат НастройкиДругие;
	
КонецФункции
&НаСервере
Функция ПолучитьОбновленныйНаборДругойБазы(КлючНабора)
	
	Connect 	= обм_Обмен.ПолучитьHTTPСоединение(Обмен);
	HTTPRequest	= обм_Обмен.ПолучитьHTTPЗапрос_ПолученияНабора(Обмен, КлючНабора);
	
	// Получим из базы
	
	Попытка		HTTPResponse = Connect.GET(HTTPRequest);
	Исключение	
				стрОшибки = ОписаниеОшибки();
				Сообщить("Ошибка инициализации соединения: " + стрОшибки); 
				Возврат Неопределено; КонецПопытки;
			
	// Преобразуем в структуру
			
	стрОшибки = "";
	НастройкиДругие = обм_Обмен.ПреобразоватьИзJSON(HTTPResponse.GetBodyAsString(), стрОшибки, Истина);
	Если стрОшибки <> "" Тогда
		Сообщить("Ошибка преобразования из JSON строки: " + стрОшибки); 
		Возврат Неопределено; КонецЕсли;
	
	// Воткнем в настройки

	//Инд = НастройкиДругие["Наборы"].Найти(ГуидНабора);
	//НастройкиДругие["Наборы"][Инд]["Реквизиты"] = новНастройкиДругие["Наборы"][0]["Реквизиты"];
	
	Возврат НастройкиДругие;
	
КонецФункции

&НаКлиенте
Функция СчитатьДругиеДанныеИзБазы() 
	
	дрНастр = ПолучитьДругиеДанныеИзБазыНаСервере();
	Если дрНастр <> Неопределено Тогда	НастройкиДругие = дрНастр;
										Возврат Истина;
	Иначе Возврат Ложь; КонецЕсли;
		
КонецФункции

&НаКлиенте
Функция ПолучитьСуффикс(ИмяЭлемента) Возврат Сред(ИмяЭлемента, 5) КонецФункции  // Свои или Другие
&НаКлиенте
Процедура МетаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Перем Структура;
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбраннаяСтрока <> Неопределено Тогда
	
		Суффикс 	= ПолучитьСуффикс(Элемент.Имя);
		Список 		= ЭтаФорма[Элемент.Имя];
		Настройки	= Вычислить("Настройки" + Суффикс);
		ВыбЭлемент 	= Список.НайтиПоИдентификатору(ВыбраннаяСтрока);
		
		Если ВыбЭлемент.Значение = Неопределено Тогда  
																	// К верхнему уровню
			ОбновитьМетаданные(Список, Настройки["МетаДанные"]);
		
		ИначеЕсли Не СтрНайти(ВыбЭлемент.Значение, ".") Тогда  		// Ниже
			
			ОбновитьМетаданные(Список, Настройки["МетаДанные"][ВыбЭлемент.Значение]["МетаДанные"], ВыбЭлемент.Значение); 
			
		Иначе 														// Ткнули в метаобъект, откроем метообъект если он 1
			
			//НаборыСвои.((
			
			//Вычислить(
			НаборыДругиеВыбор(Элементы.Найти("Наборы" + Суффикс), ВыбраннаяСтрока, Поле, СтандартнаяОбработка);

			Наборы = Вычислить("Наборы" + Суффикс);
			Если Наборы.Количество() = 1 Тогда ПоказатьЗначение(,Наборы[0].Значение) КонецЕсли; КонецЕсли; КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура МетаПриАктивизацииСтроки(Элемент)
	
	Перем Структура;
	
	ВыбраннаяСтрока = Элемент.ТекущаяСтрока;
	Если ВыбраннаяСтрока <> Неопределено Тогда
	
		Суффикс 		= ПолучитьСуффикс(Элемент.Имя);
		Список 			= ЭтаФорма[Элемент.Имя];
		СписокНаборов 	= ЭтаФорма["Наборы" + Суффикс];
		ВыбЭлемент 		= Список.НайтиПоИдентификатору(ВыбраннаяСтрока);
		Настройки		= Вычислить("Настройки" + Суффикс);
		
		Если ВыбЭлемент.Значение <> Неопределено Тогда
		
			СписокНаборов.Очистить();
			
			ЭлементСоотв = ПолучитьЭлементСоотвМета(ВыбЭлемент.Значение, Настройки["МетаДанные"]);
			Массив = ЭлементСоотв["Наборы"];
			Если Массив <> Неопределено Тогда 
				Для каждого Набор Из Массив Цикл
					СписокНаборов.Добавить(Набор, ПолучитьНаборПоСсылке(Набор, Настройки)["Реквизиты"]["Наименование"]); КонецЦикла; КонецЕсли; КонецЕсли; КонецЕсли;
					
	
КонецПроцедуры
&НаКлиенте
Функция ПолучитьЭлементСоотвМета(Ключ, Соотв)
	
	текЭлемент = Соотв[Ключ];
	
	// Найдем сразу
	
	Если текЭлемент <> Неопределено Тогда Возврат текЭлемент; 
		
	// Поищем у подчиненых рекурсивно
		
	ИначеЕсли Соотв <> Неопределено Тогда
		
		Для Каждого Элемент Из Соотв Цикл
			Состав = Элемент.Значение["МетаДанные"];
			Если Состав <> Неопределено Тогда
				ВозврЭл = ПолучитьЭлементСоотвМета(Ключ, Состав);
				Если ВозврЭл <> Неопределено Тогда
					Возврат ВозврЭл КонецЕсли; КонецЕсли; КонецЦикла; КонецЕсли;
КонецФункции

&НаКлиенте
Функция ПолучитьНаборПоСсылке(НаборСсылка, Настройки)
	
	текНабор = Неопределено;
	Для Каждого СоотвНабор Из Настройки["Наборы"] Цикл Если СоотвНабор["Реквизиты"]["Ссылка"] = НаборСсылка Тогда текНабор = СоотвНабор; Прервать; КонецЕсли; КонецЦикла;
	
	Возврат текНабор;
	
КонецФункции

#Область управление_другими_наборами

&НаКлиенте
Процедура НаборыДругиеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НаборСсылка = НаборыДругие.НайтиПоИдентификатору(ВыбраннаяСтрока).Значение;
	Набор 		= ПолучитьНаборПоСсылке(НаборСсылка, НастройкиДругие);
	
	ОткрытьФорму("Справочник.обм_НаборыДанных.ФормаОбъекта", 
			Новый Структура("ЭтоФантом, ДругиеТипы, ДругиеРеквизиты, Основание", 
						Истина, Набор["МетаДанные"], Набор["Реквизиты"], Обмен), 
			ЭтаФорма,,,,Новый ОписаниеОповещения("ЗарытаФормаНабораДругойБазы", ЭтаФорма, Новый Структура("Гуид, Ключ", НаборСсылка, Набор["Реквизиты"]["Наименование"])));
	
КонецПроцедуры
&НаКлиенте
Процедура ЗарытаФормаНабораДругойБазы(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	// Получим новые настройки из другой базы
	новНастройки = ПолучитьОбновленныйНаборДругойБазы(ДополнительныеПараметры.Ключ);
	Если новНастройки <> Неопределено Тогда
		
		новНабор = новНастройки["Наборы"][0];
		
		// Установим новые настройки
		
		Если Не ДополнительныеПараметры.Свойство("Гуид") Тогда 
			
			Набор = Новый Соответствие;
			Набор.Вставить("Реквизиты", новНабор["Реквизиты"]);
			Набор.Вставить("МетаДанные",новНабор["МетаДанные"]);
			НастройкиДругие["Наборы"].Добавить(Набор);
			МетаПриАктивизацииСтроки(Элементы.МетаДругие);
			
		Иначе
			
			Набор = ПолучитьНаборПоСсылке(ДополнительныеПараметры.Гуид, НастройкиДругие);
			Набор["Реквизиты"] 	= новНабор["Реквизиты"];
			Набор["МетаДанные"] = новНабор["МетаДанные"]; КонецЕсли; КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДлинуИмениНабора() Возврат Метаданные.Справочники.обм_НаборыДанных.ДлинаНаименования КонецФункции
&НаКлиенте
Процедура ВведеноИмяНабораДругойБазы(Строка, ДопПараметры) Экспорт
	
	Если Строка <> Неопределено Тогда
		
		Если ПустаяСтрока(Строка) Тогда 
			ПоказатьПредупреждение(,"Нужно задавать имя набора, для добавлении точно такое же как будет у связанной базы");
			Возврат; КонецЕсли;
		
		ДругиеРеквизиты = Новый Соответствие;
		ДругиеРеквизиты.Вставить("Активно", 		Истина);
		ДругиеРеквизиты.Вставить("Наименование", 	Строка);
	
		ОткрытьФорму("Справочник.обм_НаборыДанных.ФормаОбъекта", 
				Новый Структура("ЭтоФантом, ЭтоНовый, Основание, ДругиеТипы, ДругиеРеквизиты",  Истина, Истина, Обмен, ДопПараметры.ДругиеТипы, ДругиеРеквизиты), 
				ЭтаФорма,,,,Новый ОписаниеОповещения("ЗарытаФормаНабораДругойБазы", ЭтаФорма, Новый Структура("Ключ", Строка))); КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура НаборыДругиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	текСвоихСтрока = Элементы.НаборыСвои.ТекущаяСтрока;
	предлСтрока = ?(текСвоихСтрока = Неопределено, "", НаборыСвои.НайтиПоИдентификатору(текСвоихСтрока).Значение);
	
	ТекИнд = Элементы.МетаДругие.ТекущаяСтрока;
	Если ТекИнд <> Неопределено Тогда
		
		СписокОп = ПолучитьСписокВыделенныхДругихТипов();
		ПоказатьВводСтроки(Новый ОписаниеОповещения("ВведеноИмяНабораДругойБазы", ЭтаФорма, Новый Структура("ДругиеТипы", СписокОп.ВыгрузитьЗначения())), предлСтрока, "Имя набора в другой базе", ПолучитьДлинуИмениНабора()); КонецЕсли;
		
		//ОткрытьФорму("Справочник.обм_НаборыДанных.ФормаОбъекта", 
		//		Новый Структура("Основание, ТипыДляДобавления",  Обмен, СписокОп), 
		//		ЭтаФорма,,,,Новый ОписаниеОповещения("ЗарытаФормаНабораДругойБазы", ЭтаФорма, Новый Структура("Гуид, Ключ", НаборСсылка, Набор["Реквизиты"]["Наименование"])));
	
КонецПроцедуры
	
#КонецОбласти

#Область управление_свои_наборами

&НаКлиенте
Процедура НаборыСвоиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(,НаборыСвои.НайтиПоИдентификатору(ВыбраннаяСтрока).Значение);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокВыделенныхДругихТипов()
	
	СписокОп = Новый СписокЗначений;
	
	Для Каждого Ид Из Элементы.МетаДругие.ВыделенныеСтроки Цикл
			
		текметаПуть = МетаДругие.НайтиПоИдентификатору(Ид).Значение;
		ПозТочка = СтрНайти(текметаПуть, ".");
		Если ПозТочка Тогда СписокОп.Добавить(текМетаПуть); КонецЕсли; КонецЦикла;
	
	Возврат СписокОп;
	
КонецФункции
&НаСервере
Функция ПолучитьСписокВыделенныхСвоихТипов()
	
	СписокОп = Новый СписокЗначений;
	
	Для Каждого Ид Из Элементы.МетаСвои.ВыделенныеСтроки Цикл
			
		текметаПуть = МетаСвои.НайтиПоИдентификатору(Ид).Значение;
		ПозТочка = СтрНайти(текметаПуть, ".");
		Мета = Метаданные.НайтиПоПолномуИмени(текметаПуть);
		Если ПозТочка Тогда СписокОп.Добавить(текМетаПуть, обм_Обмен.ПолучитьПредставлениеМетаДанного(Мета.ПолноеИмя(), Мета.Синоним)) КонецЕсли; КонецЦикла;
	
	Возврат СписокОп;
	
КонецФункции
&НаКлиенте
Процедура НаборыСвоиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	ТекИнд = Элементы.МетаСвои.ТекущаяСтрока;
	Если ТекИнд <> Неопределено Тогда
		
		ПараметрыДляПер = Новый Структура("Основание", Обмен);
		
		СписокОп = ПолучитьСписокВыделенныхСвоихТипов();
		Если СписокОп.Количество() Тогда ПараметрыДляПер.Вставить("ТипыДляДобавления", СписокОп); КонецЕсли;
		
		ОткрытьФорму("Справочник.обм_НаборыДанных.ФормаОбъекта", ПараметрыДляПер, ЭтаФорма); КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СохранениеЗагрузкаВФайлНастроек

Функция ВерсияЗагрузки() Возврат "1.0" КонецФункции

&НаСервере
Функция ПреобразоватьЗначениеJSONПриВыгрузкеНастроек(Свойство, Значение, ДополнительныеПараметры, Отказ) Экспорт
	
	Если обм_Среда.ЭтоСсылочныйТип(Значение) Тогда
			Возврат ?(СтрНайти(Значение.Метаданные().ПолноеИмя(), "Справочник") = 1, Значение.Наименование, XMLСтрока(Значение));
	Иначе	Возврат XMLСтрока(Значение) КонецЕсли;
	
КонецФункции
&НаСервере
Функция ПолучитьНастройкиДляВыгрузкиJSONСтрокой()
	
	НастройкиСвои 	= обм_Обмен.ПолучитьСтруктуруКонфигурации(Обмен);
	НастройкиДругие = ПолучитьДругиеДанныеИзБазыНаСервере();
	
	Выгрузка = Новый Соответствие;
	Выгрузка.Вставить("Версия", 		ВерсияЗагрузки());
	Выгрузка.Вставить("НаборыСвои", 	НастройкиСвои["Наборы"]);
	Выгрузка.Вставить("АлгоритмыСвои", 	НастройкиСвои["АлгоритмыСвои"]);
	Выгрузка.Вставить("НаборыДругие", 	НастройкиДругие["Наборы"]);
	Выгрузка.Вставить("АлгоритмыДругие",НастройкиДругие["АлгоритмыДругие"]);
	
	Запись = Новый ЗаписьJSON();
	Запись.ПроверятьСтруктуру = Ложь;
	Запись.УстановитьСтроку();
	
	ЗаписатьJSON(Запись, Выгрузка,,"ПреобразоватьЗначениеJSONПриВыгрузкеНастроек", ЭтаФорма);
	Возврат Запись.Закрыть();
	
КонецФункции
&НаКлиенте
Процедура СохранитьНастройкиВФайл(Команда)
	
	#Если ВебКлиент Тогда
		
		// НИЗЯ. НАЙН!
		ПоказатьПредупреждение(,"В веб клиенте данная функция не доступна!",,																																		"Жопа");
		
	#Иначе
	
		ДВ = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ДВ.Заголовок = "Сохранение настроек в файл";
		ДВ.Фильтр = "Настройка обмена (*.1c_exch)|*.1c_exch";
		
		Если ДВ.Выбрать() Тогда
			
			Текст = Новый ТекстовыйДокумент;
			Текст.УстановитьТекст(ПолучитьНастройкиДляВыгрузкиJSONСтрокой());
			Текст.Записать(Дв.ПолноеИмяФайла); 
			
			ПоказатьОповещениеПользователя("Настройки сохранены",,Дв.ПолноеИмяФайла, БиблиотекаКартинок.Сохранить); КонецЕсли;
	
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Функция СохранитьНастройкиНаСервере(СтрокаJSON)
	
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(СтрокаJSON);
	
	Структура = ПрочитатьJSON(Чтение);
	Чтение.Закрыть();
	
	Если Структура.Версия <> ВерсияЗагрузки() Тогда
		Сообщить("Версия загрузки не совпадает, с файлом");
		Возврат Ложь; КонецЕсли;
	
	// Сохраним свои наборы
	
	Для Каждого стрНабор Из Структура.НаборыСвои Цикл
		
		Изменился = Ложь;
		
		// Ищем набор
		
		НаборСсылка = Справочники.обм_НаборыДанных.НайтиПоНаименованию(стрНабор.Реквизиты.Наименование, Истина,, Обмен);
		//НаборОбъект = ?(НаборСсылка.Пустая(), обм_Среда.ПолучитьСправочникОбъектПоГуиду(Справочники.обм_НаборыДанных, стрНабор.Реквизиты.Ссылка), НаборСсылка.ПолучитьОбъект());
		
		Если НаборСсылка.Пустая() Тогда
			НаборОбъект 			= Справочники.обм_НаборыДанных.СоздатьЭлемент();
			НаборОбъект.Владелец 	= Обмен;
			Изменился 				= Истина;
		Иначе
			НаборОбъект = НаборСсылка.ПолучитьОбъект(); КонецЕсли;
		
		// Установим реквизиты
		
		Для Каждого Элемент Из стрНабор.Реквизиты Цикл
			
			Если 	Не СтрНайти(Элемент.Ключ, "Ссылка") И 
					НаборОбъект[Элемент.Ключ] <> Элемент.Значение Тогда
					
				Изменился = Истина;
				НаборОбъект[Элемент.Ключ] = Элемент.Значение; КонецЕсли; КонецЦикла;
		
		// Установим метаданные
		
		Если Не Изменился Тогда
			Если стрНабор.Метаданные.Количество() <> НаборОбъект.ОбрабатываемыеТипы.Количество() Тогда
				Изменился = Истина; 
			Иначе
				Инд = -1;
				Для Каждого Путь Из стрНабор.Метаданные Цикл Инд = Инд + 1;
					Если НаборОбъект.ОбрабатываемыеТипы[Инд].ПустаяСсылка.Метаданные().ПолноеИмя() <> Путь Тогда
						Изменился = Истина;
						Прервать; КонецЕсли; КонецЦикла; КонецЕсли; КонецЕсли;
		
		Если Изменился Тогда
			
			НаборОбъект.ОбрабатываемыеТипы.Очистить();
			Для Каждого Путь Из стрНабор.Метаданные Цикл
				НаборОбъект.ОбрабатываемыеТипы.Добавить().ПустаяСсылка = обм_Среда.ПолучитьПустуюСсылкуПоПолномуПути(Путь); КонецЦикла;
			
			// Запишем
			
			НаборОбъект.Записать(); КонецЕсли; КонецЦикла;
	
	// Установим другие настройки
	
	//врДругиеНастройки = ПолучитьДругиеДанныеИзБазыНаСервере();
	// Будем 
	
	Connect 	= обм_Обмен.ПолучитьHTTPСоединение(Обмен);
	HTTPRequest	= обм_Обмен.ПолучитьHTTPЗапрос_ПолученияНабора(Обмен, Обмен.Наименование);
	
	HTTPRequest.УстановитьТелоКакСтроку();
	
	Попытка		HTTPResponse = Connect.ВызватьHTTPМетод("PATCH", HTTPRequest);
	Исключение	
				стрОшибки = ОписаниеОшибки();
				Сообщить("Ошибка инициализации соединения: " + стрОшибки); 
				Возврат Неопределено; КонецПопытки;
	
	Возврат Истина;
	
КонецФункции
&НаКлиенте
Процедура ЗагрузитьНастройки(Команда)
	
	#Если ВебКлиент Тогда
		
		// НИЗЯ. НАЙН!
		ПоказатьПредупреждение(,"В веб клиенте данная функция не доступна!",,																												"Жопа");
		
	#Иначе
	
		ДВ = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДВ.Заголовок = "Сохранение настроек в файл";
		ДВ.Фильтр = "Настройка обмена (*.1c_exch)|*.1c_exch";
		
		Если ДВ.Выбрать() Тогда
			
			Текст = Новый ТекстовыйДокумент;
			Текст.Прочитать(Дв.ПолноеИмяФайла);
			Если СохранитьНастройкиНаСервере(Текст.ПолучитьТекст()) Тогда
			
				ПоказатьОповещениеПользователя("Загрузка",,"Загружены настройки текущей базы", БиблиотекаКартинок.ОткрытьФайл);
				СчитатьСвоиДанныеИзБазы();
				ОбновитьМетаданные(МетаСвои, НастройкиСвои["МетаДанные"]); КонецЕсли; КонецЕсли;
	
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранНаборДругой(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		
		
		
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ВыбратьИзСпискаДругие(Команда)
	
	Список = НастройкиДругие["Наборы"];
	ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ВыбранНаборДругой", ЭтаФорма), Список, Команда);
	
КонецПроцедуры


#КонецОбласти

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "обм_ЗаписанНабор" Тогда
		
		Если Параметр.Пустая() Тогда
			Если ОбновлятьПриЗаписиДругие Тогда
				текСтрока = Элементы.МетаДругие.ТекущаяСтрока;
				СчитатьДругиеДанныеИзБазы();
				ОбновитьМетаданные(МетаДругие, 	НастройкиДругие["МетаДанные"]);
				Если текСтрока <> Неопределено Тогда Элементы.МетаДругие.ТекущаяСтрока = текСтрока КонецЕсли; КонецЕсли;
		Иначе	
			Если ОбновлятьПриЗаписиСвои Тогда
				
				текСтрока = Элементы.МетаСвои.ТекущаяСтрока;
				//МетаСвои[0];
				
				//ПолучитьЭлементСоотвМета("Справочник.Валюты", МетаСвои)
				
				//МетаСвои.НайтиПоИдентификатору(текСтрока);
				
				СчитатьСвоиДанныеИзБазы();
				//ОбновитьМетаданные(МетаСвои, 	НастройкиСвои["МетаДанные"][Элементы.МетаСвои.ТекущиеДанные.Значение]); 
				//Если текСтрока <> Неопределено Тогда Элементы.МетаСвои.ТекущаяСтрока = текСтрока КонецЕсли;
									КонецЕсли;  КонецЕсли; КонецЕсли;
	
КонецПроцедуры
