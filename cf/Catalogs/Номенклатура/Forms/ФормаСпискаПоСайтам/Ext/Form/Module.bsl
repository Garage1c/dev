
&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ОбработатьОтображениеИнформацииОТоваре();
	ОбработатьОтображениеАналоговТовара();
КонецПроцедуры

 // ПРЕДОПРЕДЕЛЕНННЫЕ

 &НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьСайт();
	
КонецПроцедуры
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Предупреждать = Истина;
	Список.Параметры.УстановитьЗначениеПараметра("текРодитель", 			Неопределено);
	//Список.Параметры.УстановитьЗначениеПараметра("текРодительНоменклатуры", Неопределено);
	
	
	ЗагрузитьСписокСайтов();
	
//	Список.Параметры.УстановитьЗначениеПараметра("Дата1", 	НачалоДня(ТекущаяДата()));
//	Список.Параметры.УстановитьЗначениеПараметра("ТипЦен", 	ОбщиеФункции.ПолучитьЗначениеКонстантыВОбласти("ТипЦенРозница"));
	
	// Подключим языки
	//Список.Параметры.УстановитьЗначениеПараметра("ТекущийЯзык", ПараметрыСеанса.ТекущийЯзык);
		
	// информация о товаре
	РаботаСНоменклатурой.ДобавитьОперативнуюИнформациюОТоваре(ЭтаФорма);
	РаботаСНоменклатурой.ДобавитьИнформациюОбАналогах(ЭтаФорма);
	 
	// Языки
	
	//Translation.ИницилизироватьПараметрыДинамическогоСписка(Список.Параметры);
	
	//типыЦен = Новый Массив;
	//типыЦен.Добавить(Справочники.ТипыЦен.ПустаяСсылка());
	//типыЦен.Добавить(Константы.ТипЦенРозница.Получить());
	//типыЦен.Добавить(Справочники.ТипыЦен.ПолучитьСсылку(Новый УникальныйИдентификатор("fd3c0f1a-335f-11e4-80d8-0cc47a0493f0")));  // СеверСталь
	
	//Список.Параметры.УстановитьЗначениеПараметра("ТипыЦен", типыЦен);
	
	//Список.Параметры.УстановитьЗначениеПараметра("ТипЦенРозница", ОбщиеФункции.ПолучитьЗначениеКонстантыВОбласти("ТипЦенРозница"));
	//Список.Параметры.УстановитьЗначениеПараметра("ПустойТипЦен", Справочники.ТипыЦен.ПустаяСсылка());
	
КонецПроцедуры


// ИНФОРМАЦИЯ О ТОВАРЕ

&НаСервере
Процедура ОбработатьОтображениеИнформацииОТоваре() Экспорт
	РаботаСНоменклатурой.ОбработатьОтображениеИнформацииОТоваре(ЭтаФорма, "Список");
КонецПроцедуры

&НаКлиенте
Процедура ИнфТовараТекстHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	РаботаСНоменклатуройКлиент.ИнфТовараТекстHTMLПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка, "Список");
КонецПроцедуры
&НаКлиенте
Процедура ИнфТовараЗаголовокHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	РаботаСНоменклатуройКлиент.ИнфТовараЗаголовокHTMLПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка, "Список");
	
КонецПроцедуры

 &НаКлиенте
Процедура ПоказатьСкрытьИнфОТоваре(Команда)
	РаботаСНоменклатуройКлиент.ПоказатьСкрытьИнфОТоваре(ЭтаФорма);
КонецПроцедуры
&НаКлиенте
Процедура НастройкаИнфОТоваре(Команда) 
	
	РаботаСНоменклатуройКлиент.НастройкаИнфОТоваре(ЭтаФорма, "Список");
	
КонецПроцедуры
// АНАЛОГИ
&НаСервере
Процедура ОбработатьОтображениеАналоговТовара() Экспорт
	РаботаСНоменклатурой.ОбработатьОтображениеАналоговТовара(ЭтаФорма, "Список");
КонецПроцедуры
&НаКлиенте
Процедура ПоказатьСкрытьАналогиТовара(Команда)
	РаботаСНоменклатуройКлиент.ПоказатьСкрытьАналогиТовара(ЭтаФорма);
КонецПроцедуры
&НаКлиенте
Процедура ИнфАналогиТекстHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	РаботаСНоменклатуройКлиент.ИнфАналогиТекстHTMLПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка, "Список");
КонецПроцедуры



// МОДУЛЬ КОРЗИНЫ

#Если Не ВебКлиент Тогда
&НаСервере
Функция ПоложитьВКорзинуНаСервере(СсылкиТовара, ИмяКомпа, КолВКорзине)
	
	Инексы 	= Новый Массив;
	Таблица = Новый ТаблицаЗначений;
	Инд		= -1;
	
	Таблица.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Таблица.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	
	Для Каждого Ссылка Из СсылкиТовара Цикл Инд = Инд + 1;Инексы.Добавить(Инд);
		
		НовСтрока = Таблица.Добавить();
		НовСтрока.Номенклатура 	= Ссылка;
		НовСтрока.Количество 	= 1;
		
	КонецЦикла;
	
	Возврат МодульКорзины.ПоложитьТоварВКорзину(Таблица, Инексы, ИмяКомпа, КолВКорзине);
	
КонецФункции
#КонецЕсли

#Если Не ВебКлиент Тогда
&НаКлиенте
Процедура ПоложитьВКорзину(Команда)
	
	СсылкиТовара	 	= Элементы.Список.ВыделенныеСтроки;
	КолВКорзине 		= 0;
	КолТовара			= СсылкиТовара.Количество();
	
	Если КолТовара Тогда
		
		Если ПоложитьВКорзинуНаСервере(СсылкиТовара, ИмяКомпьютера(), КолВКорзине) Тогда
			МодульКорзины.ОповеститьОПомещенииТовара(КолТовара, КолВКорзине);
		КонецЕсли;
		
	Иначе
		
		МодульКорзины.ОповеститьЧтоНечегоДобавлять();
				
	КонецЕсли;
	
КонецПроцедуры
#КонецЕсли

#Если Не ВебКлиент Тогда
&НаКлиенте
Процедура РедактироватьТоварВКорзине(Команда)
	
	ОткрытьФорму("РегистрСведений.Корзина.Форма.Форма");
	
КонецПроцедуры
#КонецЕсли

#Если Не ВебКлиент Тогда
&НаСервере
Функция ОчиститьНаСервере(ИмяКомпа)
	
	Возврат МодульКорзины.ОчиститьКорзину(ИмяКомпа);
	
КонецФункции
#КонецЕсли

#Если Не ВебКлиент Тогда
&НаКлиенте
Процедура ОчиститьКорзину(Команда)
	
	Если ОчиститьНаСервере(ИмяКомпьютера()) Тогда
		
		МодульКорзины.ОповеститьЧтоКорзинаОчищена();
		
	КонецЕсли;
	
КонецПроцедуры
#КонецЕсли

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ПолученШтрихкод" Тогда
		
		СсылкаНаТовар = ШтрихКоды.ПолучитьОбъектПоШтрихКоду(Параметр);
		Если ТипЗнч(СсылкаНаТовар) = Тип("СправочникСсылка.Номенклатура") Тогда
			
			Элементы.Список.ТекущаяСтрока = СсылкаНаТовар;КонецЕсли;КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасширенныйСписок(Команда)
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаСписка_жирная",,,, Окно);
КонецПроцедуры


#Область Управление_сайтом

&НаСервере
Процедура ЗагрузитьСписокСайтов()
	
	// такая конструкция преобразований нужна так как в кэш попадает "основной" и потом глючит
	МассСайтов = КонвертацияТипов.ПолучитьМассивИзСтроки(КонвертацияТипов.ПолучитьСтрокуИзМассива(КэшируемыеФункции.ПолучитьМассивСайтовНоменклатуры()));
	МассСайтов.Вставить(0, РаботаСНоменклатурой.ИмяОсновногоСайта());
	
	Элементы.ТекущийСайт.СписокВыбора.ЗагрузитьЗначения(МассСайтов);
	Элементы.СайтКопия.СписокВыбора.ЗагрузитьЗначения(МассСайтов);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСайт()
	
	Текст = "";
	
	Если РаботаСНоменклатурой.ЭтотСайтОсновной(ТекущийСайт) Тогда
		
		Текст = Текст + "Родитель = &текРодитель";
		СписокГрупп.ОсновнаяТаблица = "Справочник.Номенклатура";
	
	Иначе
		
		Текст = Текст + "
		//|Родитель = &текРодительНоменклатуры ИЛИ
		|Родитель" + ТекущийСайт + " = &текРодитель";
		СписокГрупп.ОсновнаяТаблица = "Справочник.НоменклатураСайт" + ТекущийСайт;  КонецЕсли;
	
	Список.ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	Ссылка Наименование, Код, Артикул, Вес, ВесНетто, ВыгружатьНаСайт, ДляДилеров, ДатаСоздания, 
	|	ЕдиницаИзмерения, Объем, Производитель, СтранаПроисхождения, ТипНоменклатуры, Сертификат
	|ИЗ
	|	Справочник.Номенклатура Спр
	|ГДЕ НЕ Спр.ЭтоГруппа И
	|(" + Текст + ")";
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийСайтПриИзменении(Элемент)
	
	ОбновитьСайт();
	СписокГруппПриАктивизацииСтроки(Элементы.СписокГрупп);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыСпискаГрупп(Ссылка)
	
	Список.Параметры.УстановитьЗначениеПараметра("текРодитель", Ссылка);
	
	//Если Не РаботаСНоменклатурой.ЭтотСайтОсновной(ТекущийСайт) Тогда 
	//	Список.Параметры.УстановитьЗначениеПараметра("текРодительНоменклатуры", Ссылка.НоменклатураКопия) КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура СписокГруппПриАктивизацииСтроки(Элемент)
	
	Ссылка = Элементы.СписокГрупп.ТекущаяСтрока;
	Если Ссылка <> Неопределено Тогда УстановитьПараметрыСпискаГрупп(Ссылка); КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СкопироватьСайтНаСервере(Ссылка)
	
	СкопированныеРодители = Новый Соответствие; // тут будем хранить ссылки на родителей чтобы передавь в номенклатуру при переносе товара
	
	Если КопироватьИерархию Тогда
		
		//Запрос = Новый Запрос("ВЫБРАТЬ Ссылка ИЗ Справочник.Номенклатура" + ?(РаботаСНоменклатурой.ЭтотСайтОсновной(ТекущийСайт), "", "Сайт" + ТекущийСайт) + " ГДЕ ЭтоГруппа И Ссылка В ИЕРАРХИИ(&Ссылка) УПОРЯДОЧИТЬ ПО Ссылка ИЕРАРХИЯ");
		Запрос = Новый Запрос("ВЫБРАТЬ Ссылка, Родитель, ЭтоГруппа ИЗ Справочник.Номенклатура" + ?(РаботаСНоменклатурой.ЭтотСайтОсновной(ТекущийСайт), "", "Сайт" + ТекущийСайт) + " ГДЕ Ссылка В ИЕРАРХИИ(&Ссылка) УПОРЯДОЧИТЬ ПО Ссылка ИЕРАРХИЯ");
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		
		НачатьТранзакцию(); // >>
		
		Пока Выборка.Следующий() Цикл 
			
			Если Выборка.ЭтоГруппа Тогда
				
				// Скопируем группу
				
				новСсылка = Неопределено;
				Если Не Справочники.Номенклатура.СоздатьКопиюСправочникаСайта(Выборка.Ссылка, СайтКопия, Истина, новСсылка) Тогда
					ОтменитьТранзакцию();
					Возврат Ложь; КонецЕсли; 
				
				СкопированныеРодители.Вставить(Выборка.Ссылка, новСсылка);
				
			Иначе
				
				// Скопируем товар
				
				Если Не СкопироватьВОсновнуюГруппу(СкопированныеРодители[Выборка.Родитель], Выборка.Ссылка, ПолучитьСуфиксРеквизитаСайта(СайтКопия)) Тогда
					ОтменитьТранзакцию();
					Возврат Ложь; КонецЕсли; КонецЕсли; КонецЦикла;
		
		ЗафиксироватьТранзакцию(); // <<
		Возврат Истина;
		
	Иначе
		Возврат Справочники.Номенклатура.СоздатьКопиюСправочникаСайта(Ссылка, СайтКопия); КонецЕсли;
	
КонецФункции
&НаКлиенте
Процедура СкопироватьПапки(РезультатВопроса, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
	
		Строки 	= Элементы.СписокГрупп.ВыделенныеСтроки;
		Кол 	= Строки.Количество(); Ном = 0; Ошибка = Ложь;
		
		Для Каждого Строка ИЗ Элементы.СписокГрупп.ВыделенныеСтроки Цикл Ном = Ном + 1;
			
			Если Кол > 1 Тогда Состояние("Создаем папки", Ном / Кол * 100, Строка, БиблиотекаКартинок.СохранитьФайл); КонецЕсли;
			
			Если Не СкопироватьСайтНаСервере(Строка) Тогда
				Ошибка = Истина;
				Прервать; КонецЕсли; КонецЦикла;
		
		Если Не Ошибка И Кол Тогда
			ПоказатьОповещениеПользователя("Успешное копирование",,"Папк" + ?(Кол > 1, "и", "а") + " скопирован" + ?(Кол > 1, "ы", "а"), БиблиотекаКартинок.СохранитьФайл); КонецЕсли; КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ДекорацияКопироватьНажатие(Элемент)
	
	Если СайтКопия = ТекущийСайт Тогда
		ПоказатьПредупреждение(,"Нельзя копировать в себя",,"Корявая настройка");
	Иначе
		
		Если Предупреждать Тогда
				ПоказатьВопрос(Новый ОписаниеОповещения("СкопироватьПапки", ЭтаФорма), "Скопировать выбранные папки из " + ТекущийСайт + " в " + СайтКопия + "?", РежимДиалогаВопрос.ДаНет,);
		Иначе	СкопироватьПапки(КодВозвратаДиалога.Да); КонецЕсли; КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УстановитьВыгружатьНаСайт(ВыгружатьНаСайт)
	
	НачатьТранзакцию();
	
	Для Каждого Ссылка Из Элементы.СписокГрупп.ВыделенныеСтроки Цикл
		Если Ссылка.ВыгружатьНаСайт <> ВыгружатьНаСайт Тогда
		
			СпрОб = Ссылка.ПолучитьОбъект();
			СпрОб.ВыгружатьНаСайт = ВыгружатьНаСайт;
			Если Не ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(СпрОб) Тогда
				ОтменитьТранзакцию();
				Возврат Ложь; КонецЕсли; КонецЕсли; КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	Возврат ИСтина;
	
КонецФункции
&НаКлиенте
Процедура ВыгружатьНаСайт(Команда)
	
	Если УстановитьВыгружатьНаСайт(Истина) Тогда Элементы.СписокГрупп.Обновить() КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура НеВыгружатьНаСайт(Команда)
	
	Если УстановитьВыгружатьНаСайт(Ложь) Тогда Элементы.СписокГрупп.Обновить() КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСуфиксРеквизитаСайта(ИмяСайта) Возврат ?(ИмяСайта = "" Или ТРег(ИмяСайта) = "Основной", "", ИмяСайта) КонецФункции

Функция СкопироватьВОсновнуюГруппу(Родитель, Ссылка, Суфикс, КолЗаписанных = 0)
	
	// Вычисли родителя
	
	Если Ссылка["Родитель" + Суфикс] <> Родитель Тогда  КолЗаписанных = КолЗаписанных + 1;
	
		СпрОб = Ссылка.ПолучитьОбъект();
		СпрОб["Родитель" + Суфикс] = Родитель;
		СпрОб.ОбменДанными.Загрузка = Истина;
		
		Возврат ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(СпрОб); КонецЕсли;

	Возврат ИСтина;
	
КонецФункции
Функция СкопироватьВДополнительнуюГруппу(Родитель, Ссылка, КолЗаписанных = 0)
	
	Запрос = Новый Запрос("ВЫБРАТЬ ИСТИНА ИЗ Справочник.Номенклатура.ДополнительныеРодители ГДЕ Ссылка = &Ссылка И Родитель = &Родитель");
	Запрос.УстановитьПараметр("Ссылка", 	Ссылка);
	Запрос.УстановитьПараметр("Родитель", 	Родитель);
	
	Если Запрос.Выполнить().Пустой() Тогда КолЗаписанных = КолЗаписанных + 1;
		СпрОб = Ссылка.ПолучитьОбъект();
		СпрОб.ДополнительныеРодители.Добавить().Родитель = Родитель;
		СпрОб.ОбменДанными.Загрузка = Истина;
		
		Возврат ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(СпрОб); КонецЕсли;
	
	Возврат Истина;
	
КонецФункции
&НаКлиенте
Процедура СкопироватьТоварыВГруппу(ВыбРодитель, ВидГруппы) Экспорт
	
	Если ВыбРодитель <> Неопределено Тогда
		Строки 	= Элементы.Список.ВыделенныеСтроки;
		Кол 	= Строки.Количество(); Ном = 0; Ошибка = Ложь; КолЗаписанных = 0;
		
		Для Каждого Строка ИЗ Элементы.Список.ВыделенныеСтроки Цикл Ном = Ном + 1;
			
			Если Кол > 1 Тогда Состояние("Привязываем товары ", Ном / Кол * 100, Строка, БиблиотекаКартинок.Сохранить); КонецЕсли;
			
			Если НЕ ((	ВидГруппы = "ВОсновную" И 
						СкопироватьВОсновнуюГруппу(ВыбРодитель, Строка, ПолучитьСуфиксРеквизитаСайта(СайтКопия), КолЗаписанных)) ИЛИ 
							СкопироватьВДополнительнуюГруппу(ВыбРодитель, Строка, КолЗаписанных)) Тогда
				Ошибка = Истина;
				Прервать; КонецЕсли; КонецЦикла;
		
		Если Не Ошибка И КолЗаписанных Тогда
			Если Кол = 0 Тогда
					ПоказатьОповещениеПользователя("Нет товаров",,"Товары не привязаны", БиблиотекаКартинок.СохранитьФайл);
			ИначеЕсли Кол = 1 Тогда
					ПоказатьОповещениеПользователя("Товар привязан", ПолучитьНавигационнуюСсылку(Строка), Строка, БиблиотекаКартинок.СохранитьФайл);
			Иначе	ПоказатьОповещениеПользователя("Товары привязаны",,	"всего привязано (" + КолЗаписанных + ")",	БиблиотекаКартинок.СохранитьФайл); КонецЕсли; КонецЕсли; КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ДекорацияСкопироватьВГруппуНажатие(Элемент)
	
	Суффикс = ПолучитьСуфиксРеквизитаСайта(СайтКопия);
	ОткрытьФорму("Справочник.Номенклатура" + ?(Суффикс = "","","Сайт" + Суффикс) + ".ФормаВыбораГруппы",,ЭтаФорма,,,,Новый ОписаниеОповещения("СкопироватьТоварыВГруппу", ЭтаФорма, "ВОсновную"));
	
КонецПроцедуры
&НаКлиенте
Процедура ДекорацияСкопироватьВДопГруппуНажатие(Элемент)
	
	Суффикс = ПолучитьСуфиксРеквизитаСайта(СайтКопия);
	ОткрытьФорму("Справочник.Номенклатура" + ?(Суффикс = "","","Сайт" + Суффикс) + ".ФормаВыбораГруппы",,ЭтаФорма,,,,Новый ОписаниеОповещения("СкопироватьТоварыВГруппу", ЭтаФорма, "ВДополнительную"));
	
КонецПроцедуры


#КонецОбласти