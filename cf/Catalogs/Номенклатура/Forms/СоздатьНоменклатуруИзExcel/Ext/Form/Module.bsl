
&НаСервере
Перем Менеджер;

&НаСервере
Функция НоменклатураСоздать(Артикул, Наименование, Производитель, ГруппаТовара, Код, Код2, Комментарий, КатегорияТовара)
	
	НовыйСпр = Менеджер.СоздатьЭлемент();
	НовыйСпр.Код = Код;
	НовыйСпр.Код2 = Код2;
	НовыйСпр.Наименование = Наименование;
	НовыйСпр.НаименованиеПолное = Наименование;
	НовыйСпр.Артикул		= Артикул;
	НовыйСпр.Производитель	= Производитель;
	НовыйСпр.ТипНоменклатуры 	= ТипНоменклатуры;
	НовыйСпр.ЕдиницаИзмерения 	= ЕдиницаИзмерения;
	НовыйСпр.СтавкаНДС	= СтавкаНДС;
	НовыйСпр.Родитель	= ГруппаТовара;
	НовыйСпр.Комментарий = Комментарий;	
	НовыйСпр.КатегорияТовара = КатегорияТовара;
	
	НовыйСпр.ДополнительныеСвойства.Вставить("Обновление", ОбновлятьСайт);
	
	Попытка
		НовыйСпр.Записать();
	Исключение
		стрОшибки = ОписаниеОшибки();
		ОбщиеФункции.СообщитьТекст("Ошибка при создании нового справочника:
										|" + стрОшибки);
									
		Возврат Неопределено;

	КонецПопытки;
		
	Возврат НовыйСпр.Ссылка;
	
КонецФункции

&НаСервере
Процедура ВыполнитьНаСервере()
	
//	
//	Менеджер 	= Справочники.Номенклатура;
//	
//	Спр = Неопределено;
//	
//	Для Каждого Строка Из Таблица Цикл
//	Если Строка.Пометка Тогда
//		
//		Если 	НЕ ПустаяСтрока(Строка.Артикул) Тогда 
//	        	Спр = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул", Строка.Артикул);
//			
//		ИначеЕсли 
//			 	ИскатьПоНаименованию Тогда
//		     	Спр = Справочники.Номенклатура.НайтиПоНаименованию(Строка.Наименование, Истина);
//		Иначе
//		 		Строка.ЕстьОшибка = Истина; Продолжить; КонецЕсли;
//		
//		
//		Если Спр = Неопределено Тогда Строка.ЕстьОшибка = Истина; Продолжить; КонецЕсли;
//		
//		Если 	Спр.Пустая() Тогда
//				Строка.ЭтоНовый = Истина;
//				Строка.Номенклатура = НоменклатураСоздать(Строка.Артикул, Строка.Наименование, Строка.Производитель, Строка.ГруппаТовара, Строка.Код, Строка.Код2, Строка.Комментарий, Строка.КатегорияТовара); 
//				Если Строка.Номенклатура.Пустая() Тогда Строка.ЕстьОшибка = Истина; Продолжить; КонецЕсли;
//		Иначе
//				Строка.Номенклатура = Спр; КонецЕсли;
//		
//	КонецЕсли;
//	КонецЦикла;
//ЗадатьУсловноеОформление();
КонецПроцедуры
&НаСервере
Процедура СоздатьНаСервере(ИндСтроки)
	
	Строка = Таблица[ИндСтроки];
	Менеджер 	= Справочники.Номенклатура;
	
	Спр = Неопределено;
	Если Строка.Пометка Тогда
		
		Если 	НЕ ПустаяСтрока(Строка.Артикул) Тогда 
	        	Спр = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул", Строка.Артикул);
			
		ИначеЕсли 
			 	ИскатьПоНаименованию Тогда
		     	Спр = Справочники.Номенклатура.НайтиПоНаименованию(Строка.Наименование, Истина);
		Иначе
		 		Строка.ЕстьОшибка = Истина; Возврат; КонецЕсли;
		
		Если Спр = Неопределено Тогда Строка.ЕстьОшибка = Истина; Возврат; КонецЕсли;
		
		Если 	Спр.Пустая() Тогда
				Строка.ЭтоНовый = Истина;
				Строка.Номенклатура = НоменклатураСоздать(Строка.Артикул, Строка.Наименование, Строка.Производитель, Строка.ГруппаТовара, Строка.Код, Строка.Код2, Строка.Комментарий, Строка.КатегорияТовара); 
				Если Строка.Номенклатура.Пустая() Тогда Строка.ЕстьОшибка = Истина; Возврат; КонецЕсли;
		Иначе
				Строка.Номенклатура = Спр; КонецЕсли;
		
	КонецЕсли;
	
	ЗадатьУсловноеОформление();
	
КонецПроцедуры

&НаСервере
Процедура ЗадатьУсловноеОформление()
	
	ЭтаФорма.УсловноеОформление.Элементы.Очистить();
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Таблица");
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Таблица.ЕстьОшибка");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;//Справочники.Номенклатура.ПустаяСсылка();//Новый ПолеКомпоновкиДанных("Цены.ТипценСравненияЦена");
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Красный);

	
	
КонецПроцедуры

&НаКлиенте
Функция ЧислоЭксель(стрЭксель)
	
	//СтрЗаменить(СокрЛП(Лист.Cells(Сч, 16).Value),Символы.НПП,"");
	
	Стр = СокрЛП(стрЭксель);
	Если ПустаяСтрока(Стр) Тогда Возврат 0 КонецЕсли;
	
	Стр = СтрЗаменить(Стр,Символы.НПП,"");
	
	Попытка		Возврат Число(Стр)
	Исключение 	Возврат 0 КонецПопытки;
	
КонецФункции
&НаКлиенте
Функция СтрокаЭксель(стрЭксель)
	
	Возврат СтрЗаменить(СокрЛП(стрЭксель),Символы.НПП,"")
	
КонецФункции

&НаКлиенте
Процедура Выгрузить(Эксель)
	
	Лист = Эксель.Worksheets(ЛистТаблицы);
    КолВоСтрок = Лист.Cells(1,1).SpecialCells(11).Row;
	Ном = 0;
	
	Для Сч = 1 По КолВоСтрок Цикл Ном = Ном + 1; ОбработкаПрерыванияПользователя();
		
		Артикул 		= СтрокаЭксель(Лист.Cells(Сч, 1).Value);
		Наименование 	= СтрокаЭксель(Лист.Cells(Сч, 2).Value);
		Состояние("Загрузка из файла", Ном / КолВоСтрок * 100, Артикул + " " + Наименование, БиблиотекаКартинок.Эксель);
				
        СтрокаТаблицы = Таблица.Добавить();
		СтрокаТаблицы.Артикул				= Артикул;
		СтрокаТаблицы.Наименование 			= Наименование;
        СтрокаТаблицы.КодПроизводителя 		= СтрокаЭксель(Лист.Cells(Сч, 3).Value);
		СтрокаТаблицы.КодГруппыТоваров 		= СтрокаЭксель(Лист.Cells(Сч, 4).Value);
		СтрокаТаблицы.КодГруппыТоваров2 	= СтрокаЭксель(Лист.Cells(Сч, 5).Value);
		СтрокаТаблицы.Код					= СтрокаЭксель(Лист.Cells(Сч, 6).Value);
		СтрокаТаблицы.Код2					= СтрокаЭксель(Лист.Cells(Сч, 7).Value);
		СтрокаТаблицы.Комментарий			= СтрокаЭксель(Лист.Cells(Сч, 8).Value);
		СтрокаТаблицы.КодКатегорииТовара	= СтрокаЭксель(Лист.Cells(Сч, 9).Value);
		
		СтрокаТаблицы.КодПоставщика			= СтрокаЭксель(Лист.Cells(Сч, 10).Value);
		СтрокаТаблицы.АртикулПоставщика		= СтрокаЭксель(Лист.Cells(Сч, 11).Value);
		СтрокаТаблицы.СрокПроизводства		= ЧислоЭксель(Лист.Cells(Сч, 12).Value);
		СтрокаТаблицы.СрокДоставки			= ЧислоЭксель(Лист.Cells(Сч, 13).Value);
		СтрокаТаблицы.КомментарийКПоставке	= СтрокаЭксель(Лист.Cells(Сч, 14).Value);
		СтрокаТаблицы.ЦенаЗакупки			= ЧислоЭксель(Лист.Cells(Сч, 15).Value);
		СтрокаТаблицы.КодВалютыЗакупки		= СтрокаЭксель(Лист.Cells(Сч, 16).Value);
		СтрокаТаблицы.Себестоимость			= ЧислоЭксель(Лист.Cells(Сч, 17).Value);
		СтрокаТаблицы.ЦенаРозница			= ЧислоЭксель(Лист.Cells(Сч, 18).Value);
		СтрокаТаблицы.СпецЦена				= ЧислоЭксель(Лист.Cells(Сч, 19).Value); КонецЦикла;
	
	ЗаполнитьСсылочныеДанные();
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСсылочныеДанные()
	
	КолВоСтрок = Таблица.Количество();
	Для Ном = 1 По КолВоСтрок Цикл ОбработкаПрерыванияПользователя();
		
		Состояние("Обработка файла", Ном / КолВоСтрок * 100, Таблица[Ном - 1].Артикул + " " + Таблица[Ном - 1].Наименование, БиблиотекаКартинок.Эксель);
		ЗаполнитьСсылочныеДанныеСтроки(Ном - 1); КонецЦикла;
	
КонецПроцедуры
&НаСервере
Процедура ЗаполнитьСсылочныеДанныеСтроки(Ид)
	
	
	Строка = Таблица[Ид];
	
	Строка.Пометка = Истина;	
	КодПроизводителя = Строка.КодПроизводителя;
	Если НЕ ПустаяСтрока(КодПроизводителя) Тогда
		
		Производитель = ИзКэша("Производители", КодПроизводителя);
		Если Производитель = Неопределено Тогда
			Производитель = Справочники.Производители.НайтиПоКоду(КодПроизводителя);
			ВКэш("Производители", КодПроизводителя, Производитель); КонецЕсли;
		
		Строка.Производитель = Производитель; КонецЕсли;
	
	КодГруппыТоваров = Строка.КодГруппыТоваров;
	Если НЕ ПустаяСтрока(КодГруппыТоваров) Тогда
		ГруппаТовара = ИзКэша("ГруппыТоваров", КодГруппыТоваров);
		Если ГруппаТовара = Неопределено Тогда
			ГруппаТовара = Справочники.Номенклатура.НайтиПоКоду(КодГруппыТоваров);
			Если ГруппаТовара = Справочники.Номенклатура.ПустаяСсылка() Тогда
				//поиск по доп. коду
				Запрос = Новый Запрос("Выбрать Ссылка из Справочник.Номенклатура.ДополнительныеКоды ГДЕ Код = &Код");
				Запрос.УстановитьПараметр("Код",КодГруппыТоваров);
				ТЗ=Запрос.Выполнить().Выгрузить();
				Если ТЗ.Количество()=0 Тогда
					Сообщить("Группа с кодом "+КодГруппыТоваров+" не найдена!");
				Иначе
					ГруппаТовара = ТЗ[0].Ссылка;
				КонецЕсли;
			КонецЕсли;	
			
			ВКэш("ГруппыТоваров", КодГруппыТоваров, ГруппаТовара); КонецЕсли;
	Иначе
		// может заполнен Код2 - попробуем по нему поискать
		КодГруппыТоваров2 = Строка.КодГруппыТоваров2;
		Если НЕ ПустаяСтрока(КодГруппыТоваров2) Тогда
			ГруппаТовара2 = ИзКэша("ГруппыТоваров", КодГруппыТоваров2);
			Если ГруппаТовара2 = Неопределено Тогда
				ГруппаТовара = Справочники.Номенклатура.НайтиПоРеквизиту("Код2", КодГруппыТоваров2);
				ВКэш("ГруппыТоваров", КодГруппыТоваров2, ГруппаТовара2); КонецЕсли;
		Иначе
			
			// если оба кода не заполнены - берем из поля "Группа"
			ГруппаТовара = Группа;
		КонецЕсли;			
		
	КонецЕсли;
	Строка.ГруппаТовара = ГруппаТовара;		
				
	КодКатегорииТовара = Строка.КодКатегорииТовара;
	Если НЕ ПустаяСтрока(КодКатегорииТовара) Тогда
		КатегорияТовара = ИзКэша("КатегорииТоваров", КодКатегорииТовара);
		Если КатегорияТовара = Неопределено Тогда
			КатегорияТовара = Справочники.КатегорииТоваров.НайтиПоКоду(КодКатегорииТовара);
			ВКэш("КатегорииТоваров", КодКатегорииТовара, КатегорияТовара);
		КонецЕсли;
		Строка.КатегорияТовара = КатегорияТовара;	
	КонецЕсли;
	
	УстановитьСсылку("Валюта", 		"КодВалютыЗакупки", "Валюты", 	 "Валюты",		Строка);
	УстановитьСсылку("Поставщик", 	"КодПоставщика", 	"Партнеры",  "Партнеры",	Строка);
	
КонецПроцедуры
&НаСервере
Процедура ЗаполнитьСсылочныеДанные_Ст()
	
	//Производители 		= Новый Соответствие;
	//ГруппыТоваров 		= Новый Соответствие;
	//КатегорииТоваров 	= Новый Соответствие;
	//Поставщики 			= Новый Соответствие;
	//Валюты				= Новый Соответствие;
	//
	//Спр = Неопределено;
	//
	//Для Каждого Строка Из Таблица Цикл 
	//	
	//	Строка.Пометка = Истина;	
	//	КодПроизводителя = Строка.КодПроизводителя;
	//	Если НЕ ПустаяСтрока(КодПроизводителя) Тогда
	//		
	//		Производитель = Производители.Получить(КодПроизводителя);
	//		Если Производитель = Неопределено Тогда
	//			Производитель = Справочники.Производители.НайтиПоКоду(КодПроизводителя);
	//			Производители.Вставить(КодПроизводителя, Производитель); КонецЕсли;
	//		
	//		Строка.Производитель = Производитель; КонецЕсли;
	//	
	//	
	//	КодГруппыТоваров = Строка.КодГруппыТоваров;
	//	Если НЕ ПустаяСтрока(КодГруппыТоваров) Тогда
	//		ГруппаТовара = ГруппыТоваров.Получить(КодГруппыТоваров);
	//		Если ГруппаТовара = Неопределено Тогда
	//			ГруппаТовара = Справочники.Номенклатура.НайтиПоКоду(КодГруппыТоваров);
	//			Если ГруппаТовара = Справочники.Номенклатура.ПустаяСсылка() Тогда
	//				//поиск по доп. коду
	//				Запрос = Новый Запрос("Выбрать Ссылка из Справочник.Номенклатура.ДополнительныеКоды ГДЕ Код = &Код");
	//				Запрос.УстановитьПараметр("Код",КодГруппыТоваров);
	//				ТЗ=Запрос.Выполнить().Выгрузить();
	//				Если ТЗ.Количество()=0 Тогда
	//					Сообщить("Группа с кодом "+КодГруппыТоваров+" не найдена!");
	//				Иначе
	//					ГруппаТовара = ТЗ[0].Ссылка;
	//				КонецЕсли;
	//			КонецЕсли;	
	//			
	//			ГруппыТоваров.Вставить(КодГруппыТоваров, ГруппаТовара); КонецЕсли;
	//	Иначе
	//		// может заполнен Код2 - попробуем по нему поискать
	//		КодГруппыТоваров2 = Строка.КодГруппыТоваров2;
	//		Если НЕ ПустаяСтрока(КодГруппыТоваров2) Тогда
	//			ГруппаТовара2 = ГруппыТоваров.Получить(КодГруппыТоваров2);
	//			Если ГруппаТовара2 = Неопределено Тогда
	//				ГруппаТовара = Справочники.Номенклатура.НайтиПоРеквизиту("Код2", КодГруппыТоваров2);
	//				ГруппыТоваров.Вставить(КодГруппыТоваров2, ГруппаТовара2); КонецЕсли;
	//		Иначе
	//			
	//			// если оба кода не заполнены - берем из поля "Группа"
	//			ГруппаТовара = Группа;
	//		КонецЕсли;			
	//		
	//	КонецЕсли;
	//	Строка.ГруппаТовара = ГруппаТовара;		
	//				
	//	КодКатегорииТовара = Строка.КодКатегорииТовара;
	//	Если НЕ ПустаяСтрока(КодКатегорииТовара) Тогда
	//		КатегорияТовара = КатегорииТоваров.Получить(КодКатегорииТовара);
	//		Если КатегорияТовара = Неопределено Тогда
	//			КатегорияТовара = Справочники.КатегорииТоваров.НайтиПоКоду(КодКатегорииТовара);
	//			КатегорииТоваров.Вставить(КодКатегорииТовара, КатегорияТовара);
	//		КонецЕсли;
	//		Строка.КатегорияТовара = КатегорияТовара;	
	//	КонецЕсли;
	//	
	//	УстановитьСсылку("Валюта", 		"КодВалюты", 		"Валюты", 	Валюты,		Строка);
	//	УстановитьСсылку("Поставщик", 	"КодПоставщика", 	"Партнеры", Поставщики,	Строка); КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВКэш(Тип, Ключ, Ссылка)
	
	Строки = Кэш.НайтиСтроки(Новый Структура("Тип, Ключ", Тип, Клавиша));
	Строка = ?(Строки.Количество(), Строки[0], Кэш.Добавить());
	
	Строка.Ключ 	= Ключ;
	Строка.Тип 		= Тип;
	Строка.Ссылка 	= Ссылка;
	
КонецПроцедуры
&НаСервере
Функция ИзКэша(Тип, Ключ)
	
	Строки = Кэш.НайтиСтроки(Новый Структура("Тип, Ключ", Тип, Клавиша));
	Если Строки.Количество() Тогда Возврат Строки[0].Ссылка КонецЕсли;
	
КонецФункции
&НаСервере
Процедура УстановитьСсылку(ИмяСсылки, ИмяКода, ИмяСпр, ТипКэша, Строка)
	
	Если Не ПустаяСтрока(Строка[ИмяКода]) Тогда
		
		Ссылка = ИзКэша(ТипКэша, Строка[ИмяКода]);
		Если Ссылка = Неопределено Тогда
			Ссылка = ПолучитьСправочникПоКоду(Строка[ИмяКода], ИмяСпр); 
			Если Ссылка <> Неопределено Тогда
				ВКэш(ТипКэша, Строка[ИмяКода], Ссылка); КонецЕсли; КонецЕсли;
		
		Строка[ИмяСсылки] = Ссылка; КонецЕсли;
	
КонецПроцедуры
&НаСервере
Функция ПолучитьСправочникПоКоду(Код, ИмяСпр)
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка ИЗ Справочник.Партнеры ГДЕ Код = """ + Код + """");
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Ссылка;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьОбработку(Команда)
	
	Таблица.Очистить();
		
	Если ПустаяСтрока(ИмяФайла) Тогда
		ОбщиеФункции.СообщитьТекст("Не выбран файл", "ИмяФайла", Объект);
		Возврат;
	КонецЕсли;
		
	// Получим эксель
	стрОшибки = "";	         
	Эксель = COMФункцииДиалогов.ОткрытьФайлЭкселя(ИмяФайла, стрОшибки);
	
	Если Эксель = Неопределено Тогда
		ОбщиеФункции.СообщитьТекст(стрОшибки);
		Возврат;
	КонецЕсли;
	
	Выгрузить(Эксель);
	
	COMФункцииДиалогов.ЗакрытьЭксель(Эксель);
	ОбщиеФункции.СообщитьТекст("Данные загружены.");

КонецПроцедуры

&НаКлиенте
Процедура ПутьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДВ = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДВ.Фильтр =  "Эксель (*.xls)|*.xls*";
	
	Если ДВ.Выбрать() Тогда
		
		ИмяФайла = ДВ.ПолноеИмяФайла;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ЗагрузитьЦеныНаСервере()
	
	//Товары = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент().Товары.Выгрузить();
	//
	//Для Каждого Строка Из Таблица Цикл
	//	Если 	Не Строка.Номенклатура.Пустая() И 
	//			(Строка.ЦенаЗакупки Или Строка.Себестоимость Или Строка.ЦенаРозница Или Строка.СпецЦена) Тогда
	//			
	//		НовСтрока = Товары.Добавить();
	//		НовСтрока.Номенклатура = Строка.Номенклатура;
	//		НовСтрока.ТипЦен = Строка.Номенклатура;
	//		НовСтрока.Цена = Строка.Номенклатура;
	//		НовСтрока.ДатаНачала
	//		НовСтрока.Валюта
	//	
	//КонецЦикла;
	
КонецФункции
&НаКлиенте
Процедура СоздатьТовары(Команда)
	
	Кол = Таблица.Количество();
	Для Ном = 1 По Кол Цикл ОбработкаПрерыванияПользователя();
		Состояние("Создание товаров", Ном / Кол * 100, Таблица[Ном - 1].Артикул + " " + Таблица[Ном - 1].Наименование, БиблиотекаКартинок.Добавить);
		СоздатьНаСервере(Ном - 1);  КонецЦикла;
	
	// Создадим цены
	
	
	ПоказатьОповещениеПользователя("Загрузка цен",,"Формируем документ ""Установка цен""", БиблиотекаКартинок.Ценообразование);
	ЗагрузитьЦеныНаСервере();
	
	//МассивЦен = Новый Массив;
	//
	//Кол = Таблица.Количество();
	//Для Ном = 1 По Кол Цикл ОбработкаПрерыванияПользователя();
	//	Строка = Таблица[Ном - 1];
	//	Если 	Не Строка.Номенклатура.Пустая() И 
	//			(Строка.ЦенаЗакупки Или Строка.Себестоимость Или Строка.ЦенаРозница Или Строка.СпецЦена) Тогда
	//			
	//		
	//			
	//		Состояние("Создание Цен", Ном / Кол * 100, Таблица[Ном - 1].Артикул + " " + Таблица[Ном - 1].Наименование, БиблиотекаКартинок.Добавить);
	//		
	//		
	//		СоздатьНаСервере(Ном - 1);  КонецЦикла;
	
	ЗадатьУсловноеОформление();
	//ВыполнитьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если НЕ ЛистТаблицы Тогда ЛистТаблицы = 1; КонецЕсли;
	
	// Загрузим список
	
	КонвертацияТипов.ДобавитьСписокВКонецСписка(Элементы.Матрица.СписокВыбора, РаботаСНоменклатурой.СписокМатриц());
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если ТипЦенРозничный.Пустая() Тогда
		ТипЦенРозничный = Константы.ТипЦенРозница.Получить(); КонецЕсли;
	
	Если ТипЦенСебестоимость.Пустая() Тогда
		ТипЦенСебестоимость = Константы.ТипЦенСебестоимостьДляРасчетаЗП.Получить(); КонецЕсли;
	
	Если ТипЦенСпецЦена.Пустая() Тогда
		ТипЦенСпецЦена = Справочники.ТипыЦен.НайтиПоНаименованию("СЦ"); КонецЕсли;
	
	Если ТипЦенЗакпуки.Пустая() Тогда
		ТипЦенЗакпуки = Константы.ТипЦенЗакупочный.Получить(); КонецЕсли;
	
КонецПроцедуры
