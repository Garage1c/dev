
&НаКлиенте
Перем кэшНомГрупп, мНомГруппы;

&НаСервере
Процедура ПрочитатьИнформациюпоСкладам()
	
	текСтрока = Элементы.Список.ТекущаяСтрока;
	
	Если 	текСтрока <> Неопределено И
			Не текСтрока.ЭтоГруппа Тогда
		
		ТаблицаПоСкладм.Параметры.УстановитьЗначениеПараметра("Номенклатура", текСтрока);
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСправочник()

	Элементы.Список.Обновить();
	Элементы.Дерево.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПоКодуНаСервере(КодНоменклатуры)
	
	стрОшибки = "";
	
	Если Не COMServer.ЗагрузитьНоменклатуруПоКоду(КодНоменклатуры, стрОшибки) Тогда
		
		ОбщиеФункции.СообщитьТекст(стрОшибки);
		
	Иначе
		
		ОбщиеФункции.СообщитьТекст("Номенклатура загружена");
		
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ЗагрузитьПоКоду(Команда)
	
	Код = "";
	
	Если ВвестиСтроку(Код, "Код номенклатуры:") Тогда
		
		ЗагрузитьПоКодуНаСервере(Код);
		ОбновитьСправочник();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьГруппуПоНаименованиюНаСервере(Наименование)
	
	стрОшибки = "";
	
	Если Не COMServer.ЗагрузитьГруппуНоменклатурыПоНаименованию(Наименование, стрОшибки) Тогда
		
		ОбщиеФункции.СообщитьТекст(стрОшибки);
		
	Иначе
		
		ОбщиеФункции.СообщитьТекст("Номенклатура загружена");
		
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ЗагрузитьГруппуПоНаименованию(Команда)
	
	Наименование = "";
	
	Если ВвестиСтроку(Наименование, "Наименование группы:") Тогда
		
		ЗагрузитьГруппуПоНаименованиюНаСервере(Наименование);
		ОбновитьСправочник();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТекущуюПозициюНаСеревере(СсылкаНоменклатура)
	
	стрОшибки = "";
	
	Если Не COMServer.ОбновитьСсылкуНоменклатуры(СсылкаНоменклатура, стрОшибки) Тогда
		
		ОбщиеФункции.СообщитьТекст(стрОшибки);
		
	Иначе
		
		ОбщиеФункции.СообщитьТекст("Номенклатура обновлена");
		
	КонецЕсли;

	
КонецПроцедуры
&НаКлиенте
Процедура ОбновитьТекущуюПозицию(Команда)
	
	Если Элементы.Список.ТекущаяСтрока <> Неопределено Тогда
		
		ОбновитьТекущуюПозициюНаСеревере(Элементы.Список.ТекущаяСтрока);
		ОбновитьСправочник();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьВсеНаСервере()
	
	стрОшибки = "";
	
	Если Не COMServer.ЗагрузитьОбъекты(Справочники.ПравилаОбмена.Номенклатура,, стрОшибки) Тогда
		
		ОбщиеФункции.СообщитьТекст(стрОшибки);
		
	Иначе
		
		ОбщиеФункции.СообщитьТекст("Вся номенклатура загружена");
		
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ЗагрузитьВсе(Команда)
	
	ЗагрузитьВсеНаСервере();
	ОбновитьСправочник();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьВсеЧтоНаОстаткахНаСервере()
	
	стрОшибки = "";
	
	Если Не COMServer.ЗагрузитьОбъекты(Справочники.ПравилаОбмена.Номенклатура,, стрОшибки, "
			|ВЫБРАТЬ 
			|	Номенклатура КАК Ссылка, 
			|	Номенклатура.ПометкаУдаления, Номенклатура.НаименованиеПолное КАК НаименованиеПолное, Номенклатура.Артикул КАК Артикул, Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору КАК ЕдиницаИзмерения, Номенклатура.СтранаПроисхождения КАК СтранаПроисхождения, Номенклатура.НомерГТД КАК НомерГТД, Номенклатура.СтавкаНДС КАК СтавкаНДС, Номенклатура.Наименование КАК Наименование, Номенклатура.Родитель КАК Родитель 
			|	,Номенклатура.ЭтоГруппа КАК ЭтоГруппа
			|ИЗ 
			|	РегистрНакопления.ТоварыНаСкладах.Остатки
			|") Тогда
		
		ОбщиеФункции.СообщитьТекст(стрОшибки);
		
	Иначе
		
		ОбщиеФункции.СообщитьТекст("Вся номенклатура на остатках загружена");
		
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ЗагрузитьВсеЧтоНаОстатках(Команда)
	
	ЗагрузитьВсеЧтоНаОстаткахНаСервере();
	ОбновитьСправочник();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТипЦен()
	
	Список.Параметры.УстановитьЗначениеПараметра("ТипЦен", ТипЦен);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ТекДанные = Элементы.Список.ТекущаяСтрока;
	
	Если ТекДанные <> Неопределено Тогда
		
		//Если ОтборажатьКартинку Тогда
		//
		//	АдресКартинки = Картинки.ПолучитьНавигационнуюСсылкуОсновногоИзображения(ТекДанные);
		//	
		//КонецЕсли;
		
		Если РасшифровкаПоСкладам Тогда
		
			ПрочитатьИнформациюпоСкладам();
			
		КонецЕсли;
		
		ПрочитатьНоменклатурныеГруппы();
		
	КонецЕсли;
	
	ОбработатьОтображениеИнформацииОТоваре();

КонецПроцедуры

&НаКлиенте
Процедура ТипЦенПриИзменении(Элемент)
	
	УстановитьТипЦен();
	
КонецПроцедуры


&НаКлиенте
Процедура КартинкаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФорму("Справочник.КартинкиНоменклатуры.Форма.СписокКартинокПоВладельцу", 
										Новый Структура("Владелец", Элементы.Список.ТекущаяСтрока),
										ЭтаФорма);
КонецПроцедуры


&НаКлиенте
Процедура ПоказатьДвижениеТовара(Команда)
	
	ТекНоменклатура = Элементы.Список.ТекущаяСтрока;
	
	Если ТекНоменклатура <> Неопределено Тогда
		
		ПараметрыФормы = Новый Структура("Отбор, КлючНазначенияИспользования, СформироватьПриОткрытии", 
		 							Новый Структура("Номенклатура", 
												ТекНоменклатура),,
									Истина);
									
		ОткрытьФорму("Отчет.ВедомостьОдногоТовара.ФормаОбъекта", ПараметрыФормы);

					
	КонецЕсли;
				
КонецПроцедуры

// ПРЕДОПРЕДЕЛЕНННЫЕ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
//	Валюта = Константы.ВалютаУправленческогоУчета.Получить();
	
	// информация о товаре
	РаботаСНоменклатурой.ДобавитьОперативнуюИнформациюОТоваре(ЭтаФорма);
	
	
	ОтборажатьКартинку = Истина;
	
	// Получим значение по умолчанию
	
	ТипЦен = ОбщиеФункции.НастройкаПользователя("ПоУмолчанию_ТипЦен");
	
	// прочтем номенклатурные группы
	
	ПрочитатьНоменклатурныеГруппыБезУчетаНоменклатуры();
	
	// Прочитаем склады
	
	УстановитьПараметрыЗапросаИВидимостьКолонок();
	
	// Установим чтобы не ругался
	
	ТаблицаПоСкладм.Параметры.УстановитьЗначениеПараметра("Номенклатура", Справочники.Номенклатура.ПустаяСсылка());
	
	УстановитьТипЦен();
	Список.Параметры.УстановитьЗначениеПараметра("Дата1", НачалоДня(ТекущаяДата()));
	
КонецПроцедуры
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Иницилизировать_мНомГруппы();
	
КонецПроцедуры

// ПО САЙТУ

&НаСервере
Процедура ИзменитьВыгружатьНаСайт(Флаг, ИмяСвойства = "ВыгружатьНаСайт")
	
	НачатьТранзакцию();
	
	Для Каждого Ссылка Из Элементы.Список.ВыделенныеСтроки Цикл
		
		СправочникОбъект = Ссылка.ПолучитьОбъект();
		СправочникОбъект[ИмяСвойства] = Флаг;
		
		Попытка
			СправочникОбъект.Записать();
		Исключение
			ОбщиеФункции.СообщитьТекст(ОписаниеОшибки());
			ОтменитьТранзакцию();
			Возврат;
		КонецПопытки;
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры
&НаКлиенте
Процедура УстановитьВыгружатьНаСайт(Команда)
	
	ИзменитьВыгружатьНаСайт(Истина);
	Элементы.Список.Обновить();
	
КонецПроцедуры
&НаКлиенте
Процедура СнятьВыгружатьНаСайт(Команда)
	
	ИзменитьВыгружатьНаСайт(Ложь);
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВыгружатьВыгружатьДляДилеров(Команда)
	
	ИзменитьВыгружатьНаСайт(Ложь, "ДляДилеров");
	Элементы.Список.Обновить();
	
КонецПроцедуры
&НаКлиенте
Процедура УстановитьВыгружатьДляДилеров(Команда)
	
	ИзменитьВыгружатьНаСайт(Истина, "ДляДилеров");
	Элементы.Список.Обновить();
	
КонецПроцедуры

// Выбор Групп для выделенных элементов списка номенклатуры

&НаСервере
Процедура ЗагрузитьСписокГруппКВыбору()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Номенклатура.Ссылка
	                      |ИЗ
	                      |	Справочник.Номенклатура КАК Номен
	                      |ГДЕ
	                      |	Номенклатура.ЭтоГруппа = ИСТИНА
	                      |	И Номенклатура.ПометкаУдаления = ЛОЖЬ");
	
	СписокВыбораГруппы.Очистить();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СписокВыбораГруппы.Добавить(Выборка.Ссылка,,0);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПрисвоитьГруппу(МассивСтрок)
	
	ТаблицаГрупп = Новый ТаблицаЗначений;
	ТаблицаГрупп.Колонки.Добавить("Родитель");
		
	Для Каждого Элемент Из СписокВыбораГруппы Цикл
			
		Если Элемент.Пометка Тогда
			ТаблицаГрупп.Добавить().Родитель = Элемент.Значение;
		КонецЕсли;
			
	КонецЦикла;
	
	НачатьТранзакцию();	
		
	Для Каждого ТоварСсылка Из МассивСтрок Цикл
		
		ТоварОбъект = ТоварСсылка.ПолучитьОбъект();
		
		//ТоварОбъект.ДополнительныеРодители.Очистить();
		
		ТекТаблица = ТоварОбъект.ДополнительныеРодители.Выгрузить();
		Для Каждого Строка Из ТаблицаГрупп Цикл
			ТекРодитель = Строка.Родитель;
			ИскомаяГруппа = ТекТаблица.Найти(ТекРодитель, "Родитель");		
			Если ИскомаяГруппа = Неопределено Тогда // добавляемая группа не найдена в табличной части
				ТоварОбъект.ДополнительныеРодители.Добавить().Родитель =ТекРодитель;			
			КонецЕсли;
			//ТоварОбъект.ДополнительныеРодители.Загрузить(ТаблицаГрупп);
			ТоварОбъект.Записать();
		КонецЦикла;
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецФункции              


&НаКлиенте
Процедура ВыбратьГруппы(Команда)
	
	МассивСтрок = Элементы.Список.ВыделенныеСтроки;
	
	ЗагрузитьСписокГруппКВыбору();

	Если СписокВыбораГруппы.ОтметитьЭлементы("Отметить дополнительные группы:") Тогда
		
		ПрисвоитьГруппу(МассивСтрок);
	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьПоставщика(Команда)
	
	ВыбТовары = Новый СписокЗначений;
	ВыбТовары.ЗагрузитьЗначения(Элементы.Список.ВыделенныеСтроки);
	
	СтруктураПараметров = Новый Структура("ВыбранныеТовары");
	СтруктураПараметров.Вставить("ВыбранныеТовары", ВыбТовары);
	
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаВыборПроизводителя", СтруктураПараметров, , , ); 	
	
КонецПроцедуры
Функция УстановитьСтрануНаСервере(Ссылка, Страна)
	
	СпрОбъект = Ссылка.ПолучитьОбъект();
	СпрОбъект.СтранаПроисхождения = Страна;
	
	Возврат ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(СпрОбъект);
	
КонецФункции
&НаКлиенте
Процедура НазначитьСтрану(Команда)
	
	Страна = ОткрытьФорму("Справочник.Страны.ФормаВыбора",,ЭтаФорма,,,,Новый ОписаниеОповещения("ОбработкаВыбораСтраны",ЭтаФОрма,),);
	
КонецПроцедуры
&НаКлиенте
Процедура ОбработкаВыбораСтраны(Результат, Параметры) Экспорт
	 Если Результат <> Неопределено Тогда
		
		Всего 	= Элементы.Список.ВыделенныеСтроки.Количество();
		Ном 	= 0;
		
		Для Каждого Элемент Из Элементы.Список.ВыделенныеСтроки Цикл Ном = Ном + 1;
						
			Если Не УстановитьСтрануНаСервере(Элемент, Результат) Тогда 
				Возврат 
			КонецЕсли; 
			Состояние("Назначаем - " + Результат, Ном / Всего * 100, Элемент); 
		КонецЦикла; 
	КонецЕсли;	
КонецПроцедуры


&НаКлиенте
Процедура ОткрытьРасшифровкуПоСкладам(Команда)
	
	ТекНоменклатура = Элементы.Список.ТекущаяСтрока;
	
	Если ТекНоменклатура <> Неопределено Тогда
	
		Форма = ПолучитьФорму("ОбщаяФорма.РасшифровкаТовара", Новый Структура("Номенклатура", ТекНоменклатура), ЭтаФорма);
		Форма.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

// НОМЕНКЛАТУРНЫЕ ГРУППЫ

&НаКлиенте
Процедура НоменклатурныеГруппыПометкаПриИзменении(Элемент)
	
	Если Не  УстановитьНоменклатурныеГруппы() Тогда
		
		ПрочитатьНоменклатурныеГруппы();
		
	КонецЕсли;
		
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивПоГруппе(СсылкаРодителя)
	
	Запрос = Новый Запрос("ВЫБРАТЬ Ссылка ИЗ Справочник.Номенклатура ГДЕ Ссылка В ИЕРАРХИИ(&Ссылка)");
	Запрос.УстановитьПараметр("Ссылка", СсылкаРодителя);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции
&НаСервере
Функция ПолучитьВыбранныеТовары(ПроваливатьсяВнутрьГруппы = Ложь)
	
	МассивТоваров = Новый Массив;
	
	ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
	Для Каждого Ссылка Из ВыделенныеСтроки Цикл
		
		Если 	ПроваливатьсяВнутрьГруппы И
				Ссылка.ЭтоГруппа Тогда
			
			КонвертацияТипов.ДобавитьМассивВКонецМассива(МассивТоваров, ПолучитьМассивПоГруппе(Ссылка));
			
		Иначе
			
			МассивТоваров.Добавить(Ссылка);
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивТоваров;
	
КонецФункции

&НаСервере
Функция УстановитьНоменклатурныеГруппы()
	
	ВОЗВРАТ ИСТИНА;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ Ссылка Номенклатура ПОМЕСТИТЬ ВыбНоменклатура ИЗ Справочник.Номенклатура ГДЕ Ссылка В(&ВыбранныеТовары)
	|;
	|ВЫБРАТЬ 
	|	Сос.Ссылка НоменклатурнаяГруппа, ЕСТЬNULL(ВыбНом.Номенклатура, Сос.Номенклатура) Номенклатура
	|ИЗ 
	|	Справочник.НоменклатурныеГруппы.Состав Сос
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	ВыбНоменклатура КАК ВыбНом
	|ПО
	|	ИСТИНА
	|ГДЕ
	|	Сос.Ссылка В(&УстановленныеГруппы)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ 
	|	Сос.Ссылка, ЕСТЬNULL(ВыбНом.Номенклатура, Сос.Номенклатура) Номенклатура
	|ИЗ 
	|	Справочник.НоменклатурныеГруппы.Состав Сос
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	ВыбНоменклатура КАК ВыбНом
	|ПО
	|	ВыбНом.Номенклатура = Сос.Номенклатура
	|ГДЕ
	|	Сос.Ссылка В(&ОтмененныеГруппы)
	|
	|ИТОГИ ПО
	|	НоменклатурнаяГруппа
	|");
	
	НомГруппыТЗ = НоменклатурныеГруппы.Выгрузить();
	
	Запрос.УстановитьПараметр("ВыбранныеТовары", 		ПолучитьВыбранныеТовары());
	Запрос.УстановитьПараметр("УстановленныеГруппы", 	КонвертацияТипов.ПолучитьМассивОтмеченныхЗначенийИзТаблица(НоменклатурныеГруппы,"НоменклатурнаяГруппа", 1));
	Запрос.УстановитьПараметр("ОтмененныеГруппы", 		КонвертацияТипов.ПолучитьМассивОтмеченныхЗначенийИзТаблица(НоменклатурныеГруппы,"НоменклатурнаяГруппа", 0));
	
	ВыборкаГрупп = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Пока ВыборкаГрупп.Следующий() Цикл
		
		НомГруппа = ВыборкаГрупп.НоменклатурнаяГруппа.ПолучитьОбъект();
		НомГруппа.Состав.Очистить();
		
		Выборка = ВыборкаГрупп.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НомГруппа.Состав.Добавить().Номенклатура = Выборка.Номенклатура;
			
		КонецЦикла;
		
		Попытка
			НомГруппа.Записать();
		Исключение
			стрОшибки = ОписаниеОшибки();
			ОбщиеФункции.СообщитьТекст("Ошибка при записи номенклатурной группы " + ВыборкаГрупп.НоменклатурнаяГруппа + "
											|" + стрОшибки);
			Возврат Ложь;										
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции
&НаСервере
Функция ПолучитьНоменклатурныеГруппыТовара(Товар)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 	РАЗЛИЧНЫЕ Ссылка 
	|ИЗ 		Справочник.НоменклатурныеГруппы.Состав
	|ГДЕ 		Номенклатура = &Номенклатура
	|");
	
	Запрос.УстановитьПараметр("Номенклатура", Товар);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
    	
КонецФункции

&НаСервере
Процедура ПрочитатьНоменклатурныеГруппыБезУчетаНоменклатуры()
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 	
	|	Ссылка НоменклатурнаяГруппа,
	|	ВЫБОР 
	|		КОГДА ПометкаУдаления = ИСТИНА 
	|		ТОГДА 2 
	|		ИНАЧЕ 1 
	|	КОНЕЦ Картинка,
	|   Ложь Пометка
	|
	|ИЗ	
	|	Справочник.НоменклатурныеГруппы
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование
	|");
	
	НоменклатурныеГруппы.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры
&НаКлиенте
Процедура ПрочитатьНоменклатурныеГруппы_Ст()
	
	//ВОЗВРАТ;
	
	// Готовим группы
	
	ВыбТовары 			= ПолучитьВыбранныеТовары();
	НеОтмеченныеГруппы 	= Новый Массив;
	ОтмеченныеГруппы 	= Новый Массив;
	СерыеГруппы			= Новый Массив;
	
	Для Каждого Строка Из НоменклатурныеГруппы Цикл
		
		Если Строка.Пометка = 1 Тогда
			ОтмеченныеГруппы.Добавить(Строка.НоменклатурнаяГруппа);			
		ИначеЕсли Строка.Пометка = 2 Тогда
			СерыеГруппы.Добавить(Строка.НоменклатурнаяГруппа);
		Иначе
			НеОтмеченныеГруппы.Добавить(Строка.НоменклатурнаяГруппа);
		КонецЕсли;
		
		// Отменим все пометки
		
		Строка.Пометка = 0;
		
	КонецЦикла;
	
	// Начнем поиск
	
	Для Каждого Товар Из ВыбТовары Цикл
		
		НомГруппы = кэшНомГрупп[Товар];
		Если НомГруппы = Неопределено Тогда
			НомГруппы = ПолучитьНоменклатурныеГруппыТовара(Товар); // считываем с базы данных
		КонецЕсли;
		
		Для Каждого Группа Из НомГруппы Цикл
			
			// Серые группы пропускаем
		
			Если СерыеГруппы.Найти(Группа) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			// Не отмеченные отмечаем
			
			Инд = НеОтмеченныеГруппы.Найти(Группа);
			Если Инд <> Неопределено Тогда
				НомГруппы.Добавить(Группа); // кэш
				ОтмеченныеГруппы.Добавить(Группа);
				НеОтмеченныеГруппы.Удалить(Инд);
			КонецЕсли;
			
		КонецЦикла;
		
		// Отмеченные не отработанные группы делаем серыми
		
		Для Каждого отмГруппа Из ОтмеченныеГруппы Цикл
			Инд = ОтмеченныеГруппы.Найти(отмГруппа);
			Если Инд = Неопределено Тогда
				СерыеГруппы.Добавить(отмГруппа);
				ОтмеченныеГруппы.Удалить(Инд);
			КонецЕсли;
		КонецЦикла;
		
		// отмененные группы удаляем из кэша
		
		Для Каждого Группа Из НеОтмеченныеГруппы Цикл
			Инд = НомГруппы.Найти(Группа);
			Если Инд <> Неопределено Тогда
				НомГруппы.Удалить(Инд); // кэш
			КонецЕсли;
		КонецЦикла;
		
		// Запишем в кэш
		
		кэшНомГрупп.Вставить(Товар, НомГруппы);
		
	КонецЦикла;
	
	// Установим отработанным группам галочки
	
	Для Каждого Строка Из НоменклатурныеГруппы Цикл
		Если ОтмеченныеГруппы.Найти(Строка.НоменклатурнаяГруппа) <> Неопределено Тогда
			Строка.Пометка = 1;
		ИначеЕсли СерыеГруппы.Найти(Строка.НоменклатурнаяГруппа) <> Неопределено Тогда
			Строка.Пометка = 2;
		КонецЕсли;
	КонецЦикла;
	
	// Запишем кэш
	
КонецПроцедуры
&НаКлиенте
Процедура ПрочитатьНоменклатурныеГруппы()
	
	Если мНомГруппы <> Неопределено Тогда
		
		ВыбТовары = ПолучитьВыбранныеТовары();
		
		Для Каждого Строка Из НоменклатурныеГруппы Цикл
			
			НомГруппа 	= мНомГруппы[Строка.НоменклатурнаяГруппа];
			КолЕсть 	= 0;
			КолНеть 	= 0;
			
			Для Каждого Товар Из ВыбТовары Цикл
				
				Есть = НомГруппа[Товар] <> Неопределено;
				КолЕсть = КолЕсть + Число(Есть);
				КолНеть = КолНеть + Число(Не Есть); КонецЦикла;
			
			Строка.Пометка = ?(КолЕсть И Не КолНеть, 1, ?(Не КолЕсть, 0, 2)); КонецЦикла; КонецЕсли;
		
КонецПроцедуры
&НаСервере
Процедура ПрочитатьНоменклатурныеГруппы_Ст2()
	
	//// Готовим группы
	//
	//Для Каждого Ссылка Из кэшНомГрупп
	//
	//
	Запрос = Новый Запрос("
	|ВЫБРАТЬ Ссылка Номенклатура ПОМЕСТИТЬ ВыбНоменклатура ИЗ Справочник.Номенклатура ГДЕ Ссылка В(&ВыбранныеТовары)
	|;
	|ВЫБРАТЬ 	
	|	Группы.Ссылка НоменклатурнаяГруппа,
	|	ВЫБОР 
	|		КОГДА ПометкаУдаления = ИСТИНА 
	|		ТОГДА 2 
	|		ИНАЧЕ 1 
	|	КОНЕЦ Картинка,
	|   ВЫБОР
	|		КОГДА КолНом.Количество = КолВыбНом.Количество ТОГДА 1
	|		КОГДА КолВыбНом.Количество > 0 ТОГДА 2
	|		ИНАЧЕ 0
	|	КОНЕЦ Пометка
	|
	|ИЗ	
	|	Справочник.НоменклатурныеГруппы Группы
	
	// Получим количество в нмоменклатурной группе
	
	|ЛЕВОЕ СОЕДИНЕНИЕ 
	|(
	|	ВЫБРАТЬ Ссылка,Количество(Номенклатура) Количество
	|	ИЗ		Справочник.НоменклатурныеГруппы.Состав
	|	СГРУППИРОВАТЬ ПО Ссылка
	|
	|) КолНом
	|ПО
	|	Группы.Ссылка = КолНом.Ссылка
	
	// Получим количество в выбранной номенклатуре
	
	|ЛЕВОЕ СОЕДИНЕНИЕ 
	|(
	|	ВЫБРАТЬ Ссылка,Количество(Сос.Номенклатура) Количество
	|	ИЗ		Справочник.НоменклатурныеГруппы.Состав Сос
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВыбНоменклатура ВыбНом 
	|	ПО	Сос.Номенклатура = ВыбНом.Номенклатура
	|	СГРУППИРОВАТЬ ПО Ссылка
	|		
	|) КолВыбНом
	|ПО
	|	Группы.Ссылка = КолВыбНом.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование
 	|");
	
	Запрос.УстановитьПараметр("ВыбранныеТовары", ПолучитьВыбранныеТовары());
	НоменклатурныеГруппы.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаСервере
Функция Получить_мНомГруппыНаСервере()
	
	СоответствиеГрупп = Новый Соответствие;;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ Ссылка, Состав.(Номенклатура)
	|ИЗ Справочник.НоменклатурныеГруппы
	|");
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Для Каждого Строка Из Таблица Цикл
		
		СоответствиеГрупп.Вставить(
			Строка.Ссылка,
			КонвертацияТипов.ПолучитьСоответствиеИзТаблицыЗначений(Строка.Состав, "Номенклатура"));
		
	КонецЦикла;
	
	Возврат СоответствиеГрупп;
	
КонецФункции
&НаКлиенте
Процедура Иницилизировать_мНомГруппы()
	
	мНомГруппы = Получить_мНомГруппыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатурныеГруппыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник.НоменклатурныеГруппы.ФормаОбъекта", Новый Структура("Ключ", Элемент.ТекущиеДанные.НоменклатурнаяГруппа), ЭтаФорма);
	
КонецПроцедуры

// СКЛАДЫ ОСТАТКИ

Процедура УстановитьПараметрыЗапросаИВидимостьКолонок()
	
	// Прочитаем склады из настроек
	
	Настройки 			= ХранилищеНастроекДанныхФорм.Загрузить("ОбщиеФормы.НастройкаОперативнойИнформацииОТоваре", "НастройкиИнфТовара");
	ВыбрСклады 			= Новый Массив;
	ПоказыватьОстаток 	= Истина;
	ПоказыватьЦену		= Истина;
	
	Если Настройки <> Неопределено Тогда
		
		ПоказыватьЦену 		= Настройки["Цены"];
		ПоказыватьОстаток 	= Настройки["Остатки"];
		НастрСклады 		= Настройки.Получить("Склады");
		
		Если НастрСклады <> Неопределено И НастрСклады.Количество() Тогда
			
			Для Каждого ВыбСклад Из НастрСклады Цикл
				Если ВыбСклад.Пометка Тогда
					
					ВыбрСклады.Добавить(ВыбСклад.Значение);
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	// Установим фильтр
	
	Список.Параметры.УстановитьЗначениеПараметра("ПоказыватьОстаток", 	ПоказыватьОстаток);
	Список.Параметры.УстановитьЗначениеПараметра("ПоказыватьЦену", 		ПоказыватьЦену);
	Список.Параметры.УстановитьЗначениеПараметра("ВыбСклады", 			ВыбрСклады);
	Список.Параметры.УстановитьЗначениеПараметра("ТипЦен", 				ТипЦен);
	
	// и сразу видимость
	
	Элементы.Остаток.Видимость 				= ПоказыватьОстаток = Истина;
	Элементы.Цена.Видимость 				= ПоказыватьЦену = Истина;
	Элементы.КнопкаВыбратьТипЦен.Видимость 	= ПоказыватьЦену = Истина;
	
КонецПроцедуры


// ИНФОРМАЦИЯ О ТОВАРЕ

&НаСервере
Процедура ОбработатьОтображениеИнформацииОТоваре() Экспорт
	РаботаСНоменклатурой.ОбработатьОтображениеИнформацииОТоваре(ЭтаФорма, "Список");
КонецПроцедуры

&НаКлиенте
Процедура ИнфТовараТекстHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	РаботаСНоменклатуройКлиент.ИнфТовараТекстHTMLПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка, "Список");
КонецПроцедуры
&НаКлиенте
Процедура ИнфТовараЗаголовокHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	РаботаСНоменклатуройКлиент.ИнфТовараЗаголовокHTMLПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка, "Список");
	УстановитьПараметрыЗапросаИВидимостьКолонок();
КонецПроцедуры

 &НаКлиенте
Процедура ПоказатьСкрытьИнфОТоваре(Команда)
	РаботаСНоменклатуройКлиент.ПоказатьСкрытьИнфОТоваре(ЭтаФорма);
КонецПроцедуры
&НаКлиенте
Процедура НастройкаИнфОТоваре(Команда) 
	
	РаботаСНоменклатуройКлиент.НастройкаИнфОТоваре(ЭтаФорма, "Список");
	
	// Обновим параметры складов
	
	УстановитьПараметрыЗапросаИВидимостьКолонок();
	
	//Настройки = ХранилищеНастроекДанныхФорм.Загрузить("ОбщиеФормы.НастройкаОперативнойИнформацииОТоваре", "НастройкиИнфТовара");
	//		 			   
	//Если Настройки <> Неопределено Тогда
	//	Склады 	= Настройки.Получить("Склады");
	//	Если Склады = Неопределено ИЛИ НЕ Склады.Количество() Тогда
	//		ЗаполнитьСписокСкладов();
	//	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьТипЦен(Команда)
	
	ВыбрЦена = ОткрытьФорму("Справочник.ТипыЦен.ФормаВыбора",,ЭтаФорма,,,,Новый ОписаниеОповещения("ОбработкаВыбораТипаЦен", ЭтаФорма,),);
	
КонецПроцедуры

&НаКлиенте
ПроцеДура ОбработкаВыбораТипаЦен(Результат, Параметры) Экспорт
	Если Результат <> Неопределено Тогда
		
		ТипЦен = Результат;
		УстановитьПараметрыЗапросаИВидимостьКолонок();
		
	КонецЕсли;
конецПроцеДуры

// МОДУЛЬ КОРЗИНЫ
#Если Не ВебКлиент Тогда
&НаСервере
Функция ПоложитьВКорзинуНаСервере(СсылкиТовара, ИмяКомпа, КолВКорзине)
	
	Инексы 	= Новый Массив;
	Таблица = Новый ТаблицаЗначений;
	Инд		= -1;
	
	Таблица.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Таблица.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	
	Для Каждого Ссылка Из СсылкиТовара Цикл Инд = Инд + 1;Инексы.Добавить(Инд);
		
		НовСтрока = Таблица.Добавить();
		НовСтрока.Номенклатура 	= Ссылка;
		НовСтрока.Количество 	= 1;
		
	КонецЦикла;
	
	Возврат МодульКорзины.ПоложитьТоварВКорзину(Таблица, Инексы, ИмяКомпа, КолВКорзине);
	
КонецФункции
#КонецЕсли

#Если Не ВебКлиент Тогда
&НаКлиенте
Процедура ПоложитьВКорзину(Команда)
	
	СсылкиТовара	 	= Элементы.Список.ВыделенныеСтроки;
	КолВКорзине 		= 0;
	КолТовара			= СсылкиТовара.Количество();
	
	Если КолТовара Тогда
		
		Если ПоложитьВКорзинуНаСервере(СсылкиТовара, ИмяКомпьютера(), КолВКорзине) Тогда
			МодульКорзины.ОповеститьОПомещенииТовара(КолТовара, КолВКорзине);
		КонецЕсли;
		
	Иначе
		
		МодульКорзины.ОповеститьЧтоНечегоДобавлять();
				
	КонецЕсли;
	
КонецПроцедуры
#КонецЕсли

#Если Не ВебКлиент Тогда
&НаКлиенте
Процедура РедактироватьТоварВКорзине(Команда)
	
	ОткрытьФорму("РегистрСведений.Корзина.Форма.Форма");
	
КонецПроцедуры
#КонецЕсли

#Если Не ВебКлиент Тогда
&НаСервере
Функция ОчиститьНаСервере(ИмяКомпа)
	
	Возврат МодульКорзины.ОчиститьКорзину(ИмяКомпа);
	
КонецФункции
#КонецЕсли

#Если Не ВебКлиент Тогда
&НаКлиенте
Процедура ОчиститьКорзину(Команда)
	
	Если ОчиститьНаСервере(ИмяКомпьютера()) Тогда
		
		МодульКорзины.ОповеститьЧтоКорзинаОчищена();
		
	КонецЕсли;
	
КонецПроцедуры
#КонецЕсли

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ПолученШтрихкод" Тогда
		
		СсылкаНаТовар = ШтрихКоды.ПолучитьОбъектПоШтрихКоду(Параметр);
		Если ТипЗнч(СсылкаНаТовар) = Тип("СправочникСсылка.Номенклатура") Тогда
			
			Элементы.Список.ТекущаяСтрока = СсылкаНаТовар;КонецЕсли;КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОкончанияВыбораРодителя(Результат, Параметры) экспорт
	
	Если Результат <> Неопределено Тогда
	
	НачатьТранзакцию();	
		
	Для Каждого ТоварСсылка Из Параметры Цикл
		
		ТоварОбъект = ТоварСсылка.ПолучитьОбъект();
		
		ТоварОбъект.Родитель = Результат; 
		
		ТоварОбъект.Записать();
			
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НазначитьРодителя(Команда)
	МассивСтрок = Элементы.Список.ВыделенныеСтроки;
	
	ОткрытьФорму("Справочник.Номенклатура.ФормаВыбораГруппы",,ЭтаФорма,,,, Новый ОписаниеОповещения("ОкончанияВыбораРодителя",ЭтаФорма, МассивСтрок));
КонецПроцедуры





кэшНомГрупп = Новый Соответствие;