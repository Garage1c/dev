
&НаКлиенте
Перем мФормаВыбораТекстHTML, мФормаВыбораТекст, мФормаВыбораТекстHTMLДилера, мФормаВыбораСертификата;

&НаСервере
Процедура ПрочитатьУпаковки()
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	рег.штрихКод КАК штрихКод,
	|	Спр.Ссылка КАК Упаковка,
	|	Спр.ВерсияДанных,
	|	Спр.ПометкаУдаления,
	|	Спр.Предопределенный,
	|	Спр.Владелец,
	|	Спр.Наименование,
	|	Спр.ЕдиницаИзмерения,
	|	Спр.Коэффициент,
	|	Спр.КоличествоВУпаковке,
	|	Спр.КоличествоКоробок,
	|	Спр.Высота,
	|	Спр.Длина,
	|	Спр.Вес,
	|	Спр.Объем,
	|	Спр.ВесНетто,
	|	Спр.Представление
	|ИЗ
	|	Справочник.УпаковкиНоменклатуры КАК Спр
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ШтрихКоды КАК Рег
	|ПО
	|	Рег.Упаковка = Спр.Ссылка
	|
	|ГДЕ
	|	Владелец = &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Упаковки.Загрузить(Запрос.Выполнить().Выгрузить());

КонецПроцедуры
&НаСервере
Функция ПолучитьСоостветствияУпаковок()
	
	Запрос = Новый Запрос("ВЫБРАТЬ Ссылка ИЗ Справочник.УпаковкиНоменклатуры ГДЕ Владелец = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	//КонвертацияТипов.ПолучитьСоответствиеСкладовККодамВнешнихПрограмм(

	
КонецФункции

&НаСервере
Функция МожетРаботатьСоШтрихКодом()
	
	Возврат РольДоступна("ПолныеПрава") Или РольДоступна("ГенерацияШтрихКодаТовары") Или РольДоступна("ПолныеПраваВОбласти");
	
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ПолученШтрихкод" И МожетРаботатьСоШтрихКодом() Тогда
		
		Если Не ПустаяСтрока(ШтрихКод) И Вопрос("Заменить текущий штрих код на этот
			|" + ШтрихКод + " -> " + Параметр + "
			|" + Объект.Ссылка, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда Возврат; КонецЕсли;
		
		// Запишем и закроем под полными правами
		
		ДругойВладелец 	= Неопределено;
		ШтрихКод 		= Параметр; 
		Если Не ЗаписатьШтрихКод(,ДругойВладелец) Тогда
			
			Если ДругойВладелец <> Неопределено И
					Вопрос("Штрих код относится к другому объекту
					|" + ДругойВладелец + "
					|Назначить штрих код текущему товару, а у другого штрих код убрать?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда 
						ШтрихКод = ""; Возврат; КонецЕсли;
					
			Если ЗаписатьШтрихКод(Истина) Тогда 
					Закрыть(); КонецЕсли; 
				
		Иначе Закрыть(); КонецЕсли; КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УпаковкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если НЕ Копирование Тогда
		Отказ = Истина;
		
		СтруктураПараметров = Новый Структура("Владелец", Объект.Ссылка);	
		Форма = ПолучитьФорму("Справочник.УпаковкиНоменклатуры.Форма.ФормаЭлемента", СтруктураПараметров);
		Форма.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры



#Область Предопределенные

&НаКлиенте
Процедура ОбновитьHTML()
	
	ОписаниеHTML 		= ДиалогиСПользователем.СформироватьТекстHTML(Объект.Описание);
	ОписаниеHTML_Дилер 	= ДиалогиСПользователем.СформироватьТекстHTML(Объект.Описание_Дилер);
	
КонецПроцедуры
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
 	ДополнительныеРеквизиты.Загрузить(РаботаСНоменклатурой.ПолучитьДополнительныеРеквизитыНоменклатуры(Объект.Ссылка));
	
	// Считаем упаковки
	
	Упаковки.Параметры.УстановитьЗначениеПараметра("Ссылка", Объект.Ссылка);
	
	// Считаем штрих коды
	
	//ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(ШтрихКоды, "Объект", Объект.Ссылка, Истина);
	текШтрихКод = ШтрихКоды.ПолучитьШтрихКодыОбъекта(Объект.Ссылка);
	Если текШтрихКод.Количество() Тогда ШтрихКод = текШтрихКод[0]; КонецЕсли;
	
	// Установим права на генерацию штрих кода
	
	Элементы.СгенерироватьШтрихКод.Видимость = МожетРаботатьСоШтрихКодом();
	
	// Считаем аналоги
	
	Аналоги.Параметры.УстановитьЗначениеПараметра("Ссылка", Объект.Ссылка);
	
	// Считаем сопутствующие
	
	Сопутствующие.Параметры.УстановитьЗначениеПараметра("Ссылка", Объект.Ссылка);
	
	// Считаем теги
	
	Теги.Параметры.УстановитьЗначениеПараметра("Ссылка", Объект.Ссылка);
	
	//Считаем Мин\Макс
	МинМакс.Параметры.УстановитьЗначениеПараметра("Ссылка", Объект.Ссылка);
	
	// Номенклатуры для таможни
	
	ЗагрузитьТаможню();
	
	// Считатаем сайты
	
	ЗагрузитьДопГруппы();
	
	// Считаем номенклатуру покупателей
	
	ЗагрузитьНоменклатуруПартнеров();
	
	Если Не ЕстьПравоЗаписиНоменклатурыПартнеров() Тогда // Если нет прав тогда не разрешим редактировать
		Элементы.НоменклатураПартнеров.ТолькоПросмотр = Истина; КонецЕсли;
	
	// HTML
	
	ОписаниеHTML 		= ДиалогиСПользователем.СформироватьТекстHTML(Объект.Описание);
	ОписаниеHTML_Дилер 	= ДиалогиСПользователем.СформироватьТекстHTML(Объект.Описание_Дилер);
	
	//// Языки
	//Translation.ИницилизироватьФорму(ЭтаФорма);
	
	//
	
	GUID = Объект.Ссылка.УникальныйИдентификатор();
	Элементы.ПартионныйУчет.ТолькоПросмотр = Не РольДоступна("ПолныеПрава");
	Элементы.ТаблицаАналоги.Доступность = НЕ Объект.НетАналога;

	ПутьИнструкция = ПолучитьПутьКИнструкции();
	Сертификат = ?(Объект.Сертификат.Пустая(), "Новый", Объект.Сертификат); 
	Элементы.ДекорацияСертификат.Видимость = НЕ Объект.Сертификат.Пустая(); 
	
КонецПроцедуры
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьВидимостьЭлементов();
	
	//ОбновитьHTML();
	
	ОбновитьКартинку();
	
КонецПроцедуры
&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Сохраним поставщиков
	
	Если ЕстьПравоЗаписиНоменклатурыПартнеров() И Не СохранитьНоменклатуруПартнеров() Тогда
		Отказ = Истина;
		Возврат; КонецЕсли;
	
	//Номенклатура для таможни
	
	Если НЕ ЗаписатьТаможню() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	// Сохраним новые значения свойств
	
	//Если ТекущийОбъект.Родитель <> Справочники.Номенклатура.ПустаяСсылка() Тогда
	//	Для Каждого ТекСвойство Из ДополнительныеРеквизиты Цикл
	//		Если ТекСвойство.Наследовать И ТекСвойство.Владелец = ТекущийОбъект.Родитель Тогда
	//			Сообщить("Это свойство текущего родителя");
	//		ИначеЕсли ТекСвойство.Наследовать И ТекСвойство.Владелец <> ТекущийОбъект.Родитель Тогда
	//				Сообщить("Это совйство " + ТекСвойство.Свойство + "унаследовано неизвестно откуда, " + ТекСвойство.Владелец);
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли;
	стрОшибки = "";
	Если Не (РаботаСНоменклатурой.СохранитьДополнительныеРеквизиты(
						ТекущийОбъект.Ссылка, 
						ДополнительныеРеквизиты.Выгрузить(),, стрОшибки) И
	// Сохраним меню
	
			СохранитьМеню()) Тогда
			
		Отказ = Истина; Если НЕ ПустаяСтрока(стрОшибки) Тогда Сообщить(стрОшибки); КонецЕсли; КонецЕсли;
	
	//ТекущийОбъект.ДополнительныеПараметры.Загрузить(ДополнительныеРеквизиты.Выгрузить());
	
КонецПроцедуры
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// Считаем штрих коды
	
	//ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(ШтрихКоды, "Номенклатура", Объект.Ссылка, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если БылоИзмененоHTMLОписание Тогда ТекущийОбъект.Описание = СокрЛП(КонвертацияТипов.ПолучитьТекстHTMLВнутри_Body(ОписаниеHTML)) КонецЕсли;
	Если БылоИзмененоHTMLОписаниеДилера Тогда ТекущийОбъект.Описание_Дилер = СокрЛП(КонвертацияТипов.ПолучитьТекстHTMLВнутри_Body(ОписаниеHTML_Дилер)) КонецЕсли;
	
	//СохранитьДопГруппы();
	ТекущийОбъект.ДополнительныеРодители.Загрузить(Группы.Выгрузить());
	ТекущийОбъект.ДополнительныеРеквизитыНоменклатуры.Загрузить(ДополнительныеРеквизиты.Выгрузить());

	// Сохраним наши свойства которые будут записаны в базу
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("БудутЗаписаны", 
			Новый Структура("Меню, Свойства", ТаблицаМеню.Выгрузить(), ДополнительныеРеквизиты.Выгрузить()));
	//ТекущийОбъект.ДополнительныеРеквизитыНоменклатуры.Загрузить(ДополнительныеРеквизиты.Выгрузить());
	//ТекущийОбъект.ДополнительныеСвойства.Вставить("ИзмененныеРеквизиты",Новый Структура("ДополнительныеРеквизитыНоменклатуры",КонвертацияТипов.ПолучитьМассивИзТаблицыЗначений(ТекущийОбъект.ДополнительныеРеквизитыНоменклатуры.Выгрузить())));
КонецПроцедуры

#КонецОбласти

#Область Свойства

&НаКлиенте
Процедура ОбновитьВидимостьЭлементов()

	Элементы.ДополнительныеРеквизиты.ИзменятьПорядокСтрок 	= Объект.СортировкаДопРеквизитов;
	Элементы.ДекорацияДопРекв_СорттировкаВкл.Доступность 	= Не Объект.СортировкаДопРеквизитов;
	Элементы.ДекорацияДопРекв_СорттировкаВыкл.Доступность 	= Объект.СортировкаДопРеквизитов;
	Элементы.Ранг.Доступность = Объект.ТопТовар;
	ВидимостьТаможни();
	
	Элементы.Декорация1.Видимость = НЕ ПустаяСтрока(ПутьИнструкция);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияДопРекв_СорттировкаВклНажатие(Элемент)
	
	Объект.СортировкаДопРеквизитов = Истина;
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры
&НаКлиенте
Процедура ДекорацияДопРекв_СорттировкаВыклНажатие(Элемент)
	
	Объект.СортировкаДопРеквизитов = Ложь;
	ОбновитьВидимостьЭлементов();
 
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРеквизитыПриАктивизацииСтроки(Элемент)
	
	ТекДанные = Элементы.ДополнительныеРеквизиты.ТекущиеДанные;
	
	// Определим доступность колонок таблицы
	
	Если ТекДанные <> Неопределено Тогда
	
		ЭтоСтрокаРодителя = Не ТекДанные.Владелец.Пустая() И ТекДанные.Владелец <> Объект.Ссылка;
		
		Элементы.ДополнительныеРеквизитыСвойство.ТолькоПросмотр = ЭтоСтрокаРодителя;
		
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область Дополнительные_группы

&НаСервере
Процедура ЗагрузитьСписокгруппКВыбору()
	
	Список = Новый СписокЗначений;
	Для Каждого Строка Из Объект.ДополнительныеРодители Цикл
		Список.Добавить(Строка.Родитель);
	КонецЦикла;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Ссылка,
	|	ВЫБОР КОГДА Ссылка В(&ВыбранныеГруппы) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК Пометка
	|ИЗ
	|	Справочник.Номенклатура
	|ГДЕ
	|	ЭтоГруппа 		= ИСТИНА И
	|	ПометкаУдаления = ЛОЖЬ И
	|	Ссылка <> &ОсновнаяГруппа
	|");
	
	Запрос.УстановитьПараметр("ОсновнаяГруппа", 	Объект.Родитель);
	Запрос.УстановитьПараметр("ВыбранныеГруппы", 	Список);
	
	СписокВыбораГруппы.Очистить();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СписокВыбораГруппы.Добавить(Выборка.Ссылка,,Выборка.Пометка);
		
	КонецЦикла;
	
КонецПроцедуры
&НаКлиенте
Процедура ВыбратьГруппы(Команда)
	
	ЗагрузитьСписокгруппКВыбору();
	
	Если СписокВыбораГруппы.ОтметитьЭлементы("Отметить дополнительные группы:") Тогда
		
		Объект.ДополнительныеРодители.Очистить();
		
		Для Каждого Элемент Из СписокВыбораГруппы Цикл
			Если Элемент.Пометка Тогда
			
				Объект.ДополнительныеРодители.Добавить().Родитель = Элемент.Значение;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область Картинки

&НаКлиенте
Процедура ОбновитьКартинку()
	
	//АдресКартинки = Картинки.ПолучитьНавигационнуюСсылкуОсновногоИзображения(Объект.Ссылка);
	АдресКартинки = "<html>
	|<head>
	|	<meta http-equiv=""X-UA-Compatible"" content=""IE=9"">
	|<style>
	|	html { overflow:  hidden; }
	|	img{width:100%; filter: progid:DXImageTransform.Microsoft.Shadow(color=#aaaaaa,direction=125,strength=3);} </style></head>
	|<body>
	|	<img src='" + Картинки.ПолучитьURLКартинкиВОблаке(Объект.Ссылка) + "'>
	|</body></html>";
	
КонецПроцедуры
&НаКлиенте
Процедура АватарНажатие1(Элемент, СтандартнаяОбработка)
	
	//СтандартнаяОбработка = Ложь;
	//
	//// Выберем картинку
	//
	//ДВ = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	//
	//Если ДВ.Выбрать() Тогда
	//	
	//	стрОшибки 	= "";
	//	ИмяФайла 	= Сред(ДВ.ПолноеИмяФайла, СтрДлина(ДВ.Каталог) + 1);
	//	
	//	Если Картинки.ОбновитьКартинкуОсновногоИзображения(	Новый Картинка(ДВ.ПолноеИмяФайла),
	//														Объект.Ссылка,,,стрОшибки) Тогда
	//		ОбновитьКартинку();
	//		//ЭтаФорма.ОбновитьОтображениеДанных();
	//		
	//	Иначе
	//		
	//		ОбщиеФункции.СообщитьТекст(стрОшибки);
	//		
	//	КонецЕсли;
	//КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ОписаниеПриИзменении(Элемент)
	
	ОбновитьHTML();
	
КонецПроцедуры
&НаКлиенте
Процедура СоздатьШтрихКод(Команда)
	
	ОткрытьФорму("РегистрСведений.ШтрихКоды.Форма.ФормаЗаписи", Новый Структура("Номенклатура", Объект.Ссылка), ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область Аналоги_и_сопутствующие

#Область Аналоги

&НаСервере
Процедура ДобавитьАналогНаСервере(АналогСсылка)
	
	// Сперва найдем
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 	ИСТИНА 
	|ИЗ 		РегистрСведений.АналогиНоменклатуры
	|ГДЕ 	Номенклатура1 = &Ссылка И Номенклатура2 = &Аналог ИЛИ
	|		Номенклатура2 = &Ссылка И Номенклатура1 = &Аналог
	|");
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Аналог", АналогСсылка);
	
	Выполнение = Запрос.Выполнить();
	
	Если Выполнение.Пустой() Тогда
		
		Запись = РегистрыСведений.АналогиНоменклатуры.СоздатьМенеджерЗаписи();
		Запись.Номенклатура1 = Объект.Ссылка;
		Запись.Номенклатура2 = АналогСсылка;
		
		Попытка
			Запись.Записать();
		Исключение
			стрОшибки = ОписаниеОшибки();
			ОбщиеФункции.СообщитьТекст("Ошибка при записи аналога
											|" + стрОшибки);
		КонецПопытки;
										
	КонецЕсли;
	
КонецПроцедуры
&НаСервере
Процедура УдалитьАналогНаСервере(АналогСсылка)
	
	// Сперва найдем
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 	Номенклатура1, Номенклатура2 
	|ИЗ 		РегистрСведений.АналогиНоменклатуры
	|ГДЕ 	Номенклатура1 = &Ссылка И Номенклатура2 = &Аналог ИЛИ
	|		Номенклатура2 = &Ссылка И Номенклатура1 = &Аналог
	|");
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Аналог", АналогСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Менеджер = РегистрыСведений.АналогиНоменклатуры.СоздатьМенеджерЗаписи();
		Менеджер.Номенклатура1 = Выборка.Номенклатура1;
		Менеджер.Номенклатура2 = Выборка.Номенклатура2;
		
		Попытка
			Менеджер.Удалить();
		Исключение
			стрОшибки = ОписаниеОшибки();
			ОбщиеФункции.СообщитьТекст("Ошибка при удалении аналога
											|" + стрОшибки);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьАналог(Команда)
	
	ВыборНоменклатуры = ПолучитьФорму("Справочник.Номенклатура.ФормаВыбора").ОткрытьМодально();
	Если ВыборНоменклатуры <> Неопределено Тогда
		
		ДобавитьАналогНаСервере(ВыборНоменклатуры);
		
		Элементы.ТаблицаАналоги.Обновить();
		
		//Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура УдалитьАналог(Команда)

	ТекДанные = Элементы.ТаблицаАналоги.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		
		УдалитьАналогНаСервере(ТекДанные.Номенклатура);
		
		Элементы.ТаблицаАналоги.Обновить();
		
		//Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаАналогиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.Аналог Тогда
		ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта", Новый Структура("Ключ", Элементы.ТаблицаАналоги.ТекущиеДанные.Номенклатура));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
#Область Основной_аналог

&НаСервере
Процедура СделатьОсновнымАналогом(АналогПроизводитель, АналогНоменклатура)
	
	// найдем основной аналог с указанным производителем
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 	Номенклатура1, Номенклатура2 
	|ИЗ 		РегистрСведений.АналогиНоменклатуры
	|ГДЕ 	(Номенклатура1 = &Ссылка И Номенклатура2.Производитель = &Производитель ИЛИ
	|		Номенклатура2 = &Ссылка И Номенклатура1.Производитель = &Производитель) И Основной = Истина
	|");
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Производитель", АналогПроизводитель);
	
	Выполнение = Запрос.Выполнить();
	
	Если НЕ Выполнение.Пустой() Тогда

		// уберем признак основной с найденной записи
		Выборка = Выполнение.Выбрать();
		Выборка.Следующий();
		
		УстановитьПризнакОсновного(Выборка.Номенклатура1, Выборка.Номенклатура2, Ложь);					
	        
	КонецЕсли;
	
	// сделаем текущую запись основной
	Запись = НайтиЗапись(Объект.Ссылка, АналогНоменклатура);
	Если Запись <> Неопределено Тогда
		УстановитьПризнакОсновного(Запись.Номенклатура1, Запись.Номенклатура2, Истина);
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура УстановитьПризнакОсновного(Номенклатура, Аналог, Основной)
	
	Запись = РегистрыСведений.АналогиНоменклатуры.СоздатьМенеджерЗаписи();
	Запись.Номенклатура1 	= Номенклатура;
	Запись.Номенклатура2 	= Аналог;
	Запись.Основной	 		= Основной;
	Попытка
		Запись.Записать();
	Исключение
		стрОшибки = ОписаниеОшибки();
		ОбщиеФункции.СообщитьТекст("Ошибка при записи аналога
											|" + стрОшибки);
	КонецПопытки;

КонецПроцедуры

&НаСервере
Функция НайтиЗапись(Ссылка, Аналог)
	 
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 	Номенклатура1, Номенклатура2 
	|ИЗ 		РегистрСведений.АналогиНоменклатуры
	|ГДЕ 	(Номенклатура1 = &Ссылка И Номенклатура2 = &Аналог ИЛИ
	|		Номенклатура1 = &Аналог И Номенклатура2 = &Ссылка)
	|");
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Аналог", Аналог);
	
	Рез = Запрос.Выполнить();
	Если НЕ Рез.Пустой() Тогда
		
		//Выборка = Рез.Выбрать();
		//Выборка.Следующий();
	
		Возврат КонвертацияТипов.ПолучитьСтруктуруИзСТрокиТаблицыЗначений(Рез.Выгрузить()); 
		
	КонецЕсли;
	
	Возврат Неопределено;
	 
КонецФункции

&НаКлиенте
Процедура НазначитьОсновнымАналогом(Команда)
	
	ТекущиеДанные = Элементы.ТаблицаАналоги.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Производитель) Тогда 
		
		ОбщиеФункции.СообщитьТекст("Не указан производитель для выбираемой в качестве основного аналога номенклатуры");
		
	ИначеЕсли НЕ ТекущиеДанные.Основной Тогда // если текущий аналог еще не основной
	
		СделатьОсновнымАналогом(ТекущиеДанные.Производитель, ТекущиеДанные.Номенклатура);
		Элементы.ТаблицаАналоги.Обновить();
	Иначе
		// убираем признак основного
		Запись = НайтиЗапись(Объект.Ссылка, ТекущиеДанные.Номенклатура);
		Если Запись <> Неопределено Тогда
			УстановитьПризнакОсновного(Запись.Номенклатура1, Запись.Номенклатура2, Ложь);
		КонецЕсли;
	    Элементы.ТаблицаАналоги.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьИнструкцияНажатие(Элемент, СтандартнаяОбработка)
	КонецПроцедуры

&НаКлиенте
Процедура Декорация1Нажатие(Элемент)
	
	СтандартнаяОбработка = Ложь;
	РасширениеПодключено = Истина;
	
	#Если ВебКлиент Тогда
		УстановитьРасширениеРаботыСФайлами(); 
		РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами(); 
	#КонецЕсли
	
	Если РасширениеПодключено Тогда 	
		ЗапуститьПриложение("\\GARAGE-SERVER\" + ПутьИнструкция);
	Иначе 
		Предупреждение(НСтр("ru = 'В Веб-клиенте без установленного расширения работы с файлами добавление файлов не поддерживается.'")); 
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПолучитьПутьКИнструкции()
	
	Если Объект.СсылкиКФайламДляСайта.Количество() Тогда 
	
		Возврат Сред(Константы.ПутьКПрикрепленнымФайламНоменклатуры.Получить(),4) + Объект.СсылкиКФайламДляСайта[0].ИмяФайла;
	КонецЕсли;
	
	Возврат "";

КонецФункции

&НаКлиенте
Процедура СсылкиКФайламДляСайтаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	ПутьИнструкция = ПолучитьПутьКИнструкции();
	ОбновитьВидимостьЭлементов();

КонецПроцедуры

#КонецОбласти

#Область Сопутствующие

&НаСервере
Процедура ДобавитьСопутствующиеНаСервере(СопутствующиеСсылка)
	
	// Сперва найдем
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 	ИСТИНА 
	|ИЗ 		РегистрСведений.СопутствующиеТовары
	|ГДЕ 	Номенклатура1 = &Ссылка И Номенклатура2 = &Сопутствующие ИЛИ
	|		Номенклатура2 = &Ссылка И Номенклатура1 = &Сопутствующие
	|");
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Сопутствующие", СопутствующиеСсылка);
	
	Выполнение = Запрос.Выполнить();
	
	Если Выполнение.Пустой() Тогда
		
		Запись = РегистрыСведений.СопутствующиеТовары.СоздатьМенеджерЗаписи();
		Запись.Номенклатура1 = Объект.Ссылка;
		Запись.Номенклатура2 = СопутствующиеСсылка;
		
		Попытка
			Запись.Записать();
		Исключение
			стрОшибки = ОписаниеОшибки();
			ОбщиеФункции.СообщитьТекст("Ошибка при записи сопутствующего товара
											|" + стрОшибки);
		КонецПопытки;
										
	КонецЕсли;
	
КонецПроцедуры
&НаСервере
Процедура УдалитьСопутствующийНаСервере(СопутствующиеСсылка)
	
	// Сперва найдем
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 	Номенклатура1, Номенклатура2 
	|ИЗ 		РегистрСведений.СопутствующиеТовары
	|ГДЕ 	Номенклатура1 = &Ссылка И Номенклатура2 = &Сопутствующие ИЛИ
	|		Номенклатура2 = &Ссылка И Номенклатура1 = &Сопутствующие
	|");
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Сопутствующие", СопутствующиеСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Менеджер = РегистрыСведений.СопутствующиеТовары.СоздатьМенеджерЗаписи();
		Менеджер.Номенклатура1 = Выборка.Номенклатура1;
		Менеджер.Номенклатура2 = Выборка.Номенклатура2;
		
		Попытка
			Менеджер.Удалить();
		Исключение
			стрОшибки = ОписаниеОшибки();
			ОбщиеФункции.СообщитьТекст("Ошибка при удалении сопутствующего товара
											|" + стрОшибки);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСопутствующий(Команда)
	
	ВыборНоменклатуры = ПолучитьФорму("Справочник.Номенклатура.ФормаВыбора").ОткрытьМодально();
	Если ВыборНоменклатуры <> Неопределено Тогда
		
		ДобавитьСопутствующиеНаСервере(ВыборНоменклатуры);
		
		Элементы.ТаблицаСопутствующие.Обновить();
		
		//Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура УдалитьСопутствующий(Команда)

	ТекДанные = Элементы.ТаблицаСопутствующие.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		
		УдалитьСопутствующийНаСервере(ТекДанные.Номенклатура);
		
		Элементы.ТаблицаСопутствующие.Обновить();
		
		//Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСопутствующиеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта", Новый Структура("Ключ", Элементы.ТаблицаСопутствующие.ТекущиеДанные.Номенклатура));
	
КонецПроцедуры

&НаКлиенте
Процедура ТопТоварПриИзменении(Элемент)
	
	Элементы.Ранг.Доступность = Объект.ТопТовар;
	Объект.Ранг = ?(Объект.ТопТовар, Объект.Ранг, 0);
	
КонецПроцедуры

#КонецОбласти

#Область Подбор_аналогов

  &НаСервере
Процедура ПолучитьАналогиИзХранилища(АдресТоваровВХранилище)
	
	НовыеАналоги = ПолучитьИзВременногоХранилища(АдресТоваровВХранилище);
	Для Каждого НовыйАналог ИЗ НовыеАналоги Цикл
		ДобавитьАналогНаСервере(НовыйАналог.Номенклатура);
	КонецЦикла;
		
	Элементы.ТаблицаАналоги.Обновить();
			
КонецПроцедуры


&НаСервере
Функция ПоместитьАналогиВХранилище() 
	
	Возврат ПоместитьВоВременноеХранилище(
					КонвертацияТипов.ПолучитьВыборкуИзДинамическогоСписка(Аналоги).Выгрузить(), 
					УникальныйИдентификатор);
					
КонецФункции

&НаКлиенте
Процедура ПодборАналогов(Команда)
	
	ПараметрыПодбора = Новый Структура("АдресТоваровВХранилище", ПоместитьАналогиВХранилище());

	ПараметрыПодбора.Вставить("СтруктураКолонокТовары", ФункцииФормДокументов.ПолучитьСтруктуруКолонокТовары(Элементы.ТаблицаАналоги));
	//ПараметрыПодбора.Вставить("ВидЗапроса", 	"СписокНоменклатуры");
	//ПараметрыПодбора.Вставить("ВидыЗапросов",	"СписокНоменклатуры");
	
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаПодбора", ПараметрыПодбора, Элементы.ТаблицаАналоги);

КонецПроцедуры


&НаКлиенте
Процедура ТаблицаАналогиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение <> Неопределено Тогда		
		
		ПолучитьАналогиИзХранилища(ВыбранноеЗначение);		// получаем
		УдалитьИзВременногоХранилища(ВыбранноеЗначение); 	// заметаем следы
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти
#Область Подбор_сопутствующих

 // ПОДБОР СОПУТСТВУЮЩИХ
 
&НаСервере
Функция ПоместитьСопутствующиеВХранилище() 
	
	Возврат ПоместитьВоВременноеХранилище(
					КонвертацияТипов.ПолучитьВыборкуИзДинамическогоСписка(Сопутствующие).Выгрузить(), 
					УникальныйИдентификатор);
					
КонецФункции

&НаКлиенте
Процедура ПодборСопутствующего(Команда)
	
	ПараметрыПодбора = Новый Структура("АдресТоваровВХранилище", ПоместитьСопутствующиеВХранилище());
	
	ПараметрыПодбора.Вставить("СтруктураКолонокТовары", ФункцииФормДокументов.ПолучитьСтруктуруКолонокТовары(Элементы.ТаблицаСопутствующие));
	//ПараметрыПодбора.Вставить("ВидЗапроса", 	"СписокНоменклатуры");
	//ПараметрыПодбора.Вставить("ВидыЗапросов",	"СписокНоменклатуры");
	
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаПодбора", ПараметрыПодбора, Элементы.ТаблицаСопутствующие);
	
КонецПроцедуры

  &НаСервере
Процедура ПолучитьСопутствующиеИзХранилища(АдресТоваровВХранилище)
	
	НовыеСопутствующие = ПолучитьИзВременногоХранилища(АдресТоваровВХранилище);
	Для Каждого НовыйСопутствующий ИЗ НовыеСопутствующие Цикл
		ДобавитьСопутствующиеНаСервере(НовыйСопутствующий.Номенклатура);
	КонецЦикла;
		
	Элементы.ТаблицаСопутствующие.Обновить();
			
КонецПроцедуры


&НаКлиенте
Процедура ТаблицаСопутствующиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение <> Неопределено Тогда		
		
		ПолучитьСопутствующиеИзХранилища(ВыбранноеЗначение);		// получаем
		УдалитьИзВременногоХранилища(ВыбранноеЗначение); 			// заметаем следы
		
	КонецЕсли;


КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Таможня

&НаКлиенте
Процедура ВидимостьТаможни()
	
	Элементы.ГруппаТаможня.ТекущаяСтраница = Элементы.ГруппаТаможня.ПодчиненныеЭлементы.Получить(Число(НоменклатураДляТаможниСписком));
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьТаможню()
	
	Запрос = Новый Запрос("	ВЫБРАТЬ РАЗРЕШЕННЫЕ
							|	Рег.Номенклатура			Номенклатура,
							|	Рег.НоменклатураДляТаможни	НоменклатураДляТаможни,
							|	Рег.Упаковка				Упаковка
							|ИЗ
							|	РегистрСведений.НоменклатураДляТаможни Рег
							|ГДЕ
							|	Рег.Номенклатура = &Ссылка");
							
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Таможня.Загрузить(РезультатЗапроса.Выгрузить());
	КонецЕсли;
	
	Если Таможня.Количество() > 1 Тогда
		
		НоменклатураДляТаможниСписком = Истина;
  	
	ИначеЕсли Таможня.Количество() > 0 Тогда
		
		НоменклатураДляТаможни = Таможня.Получить(0).НоменклатураДляТаможни;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ЗаписатьТаможню()
	
	Набор = РегистрыСведений.НоменклатураДляТаможни.СоздатьНаборЗаписей();
	Набор.Отбор.Номенклатура.Установить(Объект.Ссылка);
		
	Если Таможня.Количество() > 0 Тогда
 		Набор.Загрузить(Таможня.Выгрузить());
	КонецЕсли;
	
	Попытка
		Набор.Записать();
	Исключение
		стрОшибки = ОписаниеОшибки();
		ОбщиеФункции.СообщитьТекст("Ошибка при записи наименований для таможни
				|" + стрОшибки);
		Возврат Ложь;		
	КонецПопытки;
    	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ОбновитьТаможню(Значение, Упаковка = Неопределено)

	Таможня.Очистить();
	Если Значение <> Справочники.НоменклатураДляТаможни.ПустаяСсылка() Тогда	
		НоваяТаможня = Таможня.Добавить();
		НоваяТаможня.Номенклатура = Объект.Ссылка;
		НоваяТаможня.НоменклатураДляТаможни = Значение;
		НоваяТаможня.Упаковка = ?(Упаковка = Неопределено, Справочники.УпаковкиНоменклатуры.ПустаяСсылка(), Упаковка) ;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура НоменклатураДляТаможниСпискомПриИзменении(Элемент)
	
	ИзменитьВидимость = Истина;
	
	Если Таможня.Количество() > 1 Тогда
	
		Режим = РежимДиалогаВопрос.ДаНет;
		Текст = "Все строки наименований для таможни, кроме первой, будут удалены" + Символы.ПС + "Продолжить?";
		Ответ = Вопрос(Текст, Режим, 0);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			СтрокаТаможни = Таможня.Получить(0);
			НоменклатураДляТаможни = СтрокаТаможни.НоменклатураДляТаможни;
			ОбновитьТаможню(НоменклатураДляТаможни, СтрокаТаможни.Упаковка);
		Иначе
			ИзменитьВидимость = Ложь;
		КонецЕсли;
		
	ИначеЕсли Таможня.Количество() > 0 Тогда
		
		НоменклатураДляТаможни = Таможня.Получить(0).НоменклатураДляТаможни;
	Иначе
		НоменклатураДляТаможни = "";
		
	КонецЕсли;
	
	Если ИзменитьВидимость Тогда
		ВидимостьТаможни();
	КонецЕсли;
	   
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураДляТаможниПриИзменении(Элемент)
	
	ОбновитьТаможню(НоменклатураДляТаможни);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаможняПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элементы.Таможня.ТекущиеДанные.Номенклатура = Объект.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаможняПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ЗначениеЗаполнено(Элементы.Таможня.ТекущиеДанные.НоменклатураДляТаможни) И НЕ ЗначениеЗаполнено(Элементы.Таможня.ТекущиеДанные.Упаковка) Тогда
		Таможня.Удалить(Таможня.Индекс(Элементы.Таможня.ТекущиеДанные));
		ОтменаРедактирования = Истина;
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область Поставщики

&НаСервере
Функция ЕстьПравоЗаписиНоменклатурыПартнеров()
	
	Возврат ПравоДоступа("Изменение", Метаданные.РегистрыСведений.НоменклатураПартнеров);
	
КонецФункции

Процедура ЗагрузитьНоменклатуруПартнеров()
	
	Запрос = Новый Запрос("ВЫБРАТЬ * ИЗ РегистрСведений.НоменклатураПартнеров ГДЕ Номенклатура = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	НоменклатураПартнеров.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры
Функция СохранитьНоменклатуруПартнеров()
	
	Набор = РегистрыСведений.НоменклатураПартнеров.СоздатьНаборЗаписей();
	Набор.Отбор.Номенклатура.Установить(Объект.Ссылка);
	
	ТЗ = НоменклатураПартнеров.Выгрузить();
	ТЗ.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТЗ.ЗаполнитьЗначения(Объект.Ссылка, "Номенклатура");
	
	Набор.Загрузить(ТЗ);
	Возврат ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(Набор);
	
КонецФункции

&НаКлиенте
Процедура НоменклатураПартнеровПриИзменении(Элемент)
	
	// Проверим чтобы было соответствие в шапке
	
	Строки = НоменклатураПартнеров.НайтиСтроки(Новый Структура("Основной", Истина));
	Если Строки.Количество() = 1 Тогда // эт одна единственные
		Строка = Строки[0];
		
	ИначеЕсли Строки.Количество() > 1 Тогда // это чет много строк, оставим текущую основной
		
		Строка = НоменклатураПартнеров.НайтиПоИдентификатору(Элементы.НоменклатураПартнеров.ТекущаяСтрока);
		Для Каждого текСтр Из Строки Цикл текСтр.Основной = текСтр = Строка КонецЦикла;
		
	ИначеЕсли НоменклатураПартнеров.Количество() Тогда // нет ни кого значит назначен первую строку сами
		
		Строка = НоменклатураПартнеров[0];
		Строка.Основной = Истина; 
		
	Иначе Возврат КонецЕсли;
		
	Объект.Поставщик 			= Строка.Контрагент;
	Объект.КомментарийПоставщика= Строка.Комментарий;
	Объект.АртикулПоставщика	= Строка.АртикулПоставщика;
	Объект.СрокПроизводства 	= Строка.СрокПроизводства;
	Объект.СрокДоставки 		= Строка.СрокДоставки; 
	
КонецПроцедуры


#КонецОбласти

#Область Прикрепление_файлов

&НаСервере
Функция СкопироватьПрикрепленныйФайлНаСервере()
	
	ДвоичныеДанные 	= ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	ПолноеИмя 		= Константы.ПутьКПрикрепленнымФайламНоменклатуры.Получить() + ИмяПрикрепленногоФайла;
	URL 			= Константы.ПутьHTTPКПрикрепленнымФайламНоменклатуры.Получить();
	
	Попытка
		ДвоичныеДанные.Записать(ПолноеИмя);
	Исключение
		стрОшибки = ОписаниеОшибки();
		УдалитьИзВременногоХранилища(АдресВременногоХранилища);
		ОбщиеФункции.СообщитьТекст("Не удалось записать файл на сервере
											|" + стрОшибки);
		Возврат Ложь;
	КонецПопытки;
	
	УдалитьИзВременногоХранилища(АдресВременногоХранилища);
	
	НовСтрока = Объект.СсылкиКФайламДляСайта.Добавить();
	НовСтрока.ИмяФайла 		= ИмяПрикрепленногоФайла;
	НовСтрока.URLнаСайте 	= "<a href=""" + URL + ИмяПрикрепленногоФайла + """>" + НазваниеПрикрепленногоФайла + "</a>";
	
	// а теперь еще нужно записать спраочник чтобы он пошел на сайт
	
	Попытка
		Записать();
	Исключение
		стрОшибки = ОписаниеОшибки();
		ОбщиеФункции.СообщитьТекст("Ошибка при записи текущего справочник, при этом файлы скопировались в каталог, нужно повторить попытку
											|" + стрОшибки);
	КонецПопытки;
										
	Возврат Истина;
	
КонецФункции
&НаКлиенте
Процедура ПрикрепитьФайл(Команда)
	
	Если ПодключитьРасширениеРаботыСФайлами() Тогда
	
		// Выберем файл
		
		ДВ = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДВ.МножественныйВыбор = Ложь;
		
		Если ДВ.Выбрать() Тогда
			
			ПолноеИмя 						= ДВ.ВыбранныеФайлы[0];
			ДлинаКаталога 					= СтрДлина(ДВ.Каталог);
			ИмяПрикрепленногоФайла 			= Сред(ПолноеИмя, ДлинаКаталога + 1);
			//АдресВременногоХранилища		= "";

			Если ВвестиСтроку(НазваниеПрикрепленногоФайла, "Как отображать текст") Тогда
				
				ПоместитьФайл(АдресВременногоХранилища, ПолноеИмя,, Ложь);
				СкопироватьПрикрепленныйФайлНаСервере();
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура УдалитьПрикрепленныйФайлНаСервере(ИмяФайла)
	
	УдалитьФайлы(Константы.ПутьКПрикрепленнымФайламНоменклатуры.Получить() + ИмяФайла);
	
КонецПроцедуры
&НаКлиенте
Процедура ОткрепитьФайл(Команда)
	
	ТекДанные = Элементы.СсылкиКФайламДляСайта.ТекущиеДанные;
	
	Если ТекДанные <> Неопределено Тогда
		
		УдалитьПрикрепленныйФайлНаСервере(ТекДанные.ИмяФайла);
		
		Объект.СсылкиКФайламДляСайта.Удалить(
			Объект.СсылкиКФайламДляСайта.НайтиПоИдентификатору(
			ТекДанные.ПолучитьИдентификатор()));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Штрих_код

&НаСервере
Процедура СгенерироватьШтрихКодНаСервере()

	ШтрихКод = ШтрихКоды.СгенерироватьШтрихКод(Объект.Ссылка);
	//Модифицированность = Истина;
	
	// Сохраним штрих код
	
	//ШтрихКодыОбъекта = ШтрихКоды.ПолучитьШтрихКодыОбъекта(Объект.Ссылка);
	//Если ШтрихКодыОбъекта.Найти(ШтрихКод) = Неопределено Тогда
	ШтрихКоды.УстановитьШтрихКод(ШтрихКод, Объект.Ссылка, Ложь);

КонецПроцедуры
&НаКлиенте
Процедура СгенерироватьШтрихКод(Команда)
	
	Если ПустаяСтрока(ШтрихКод) И Не Объект.Ссылка.Пустая() Тогда
		СгенерироватьШтрихКодНаСервере();
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ЗаписатьШтрихКод(Принудительно = Ложь, ДругойВладелец = Неопределено)
	
	Запись = РегистрыСведений.ШтрихКоды.СоздатьМенеджерЗаписи();
	Запись.ШтрихКод = ШтрихКод;
	
	// Проверим
	
	Если Не Принудительно Тогда
		
		Запись.Прочитать();
		Если ЗначениеЗаполнено(Запись.Объект) Тогда
			ОбщиеФункции.СообщитьТекст("Штрих код уже принадлежит " + Запись.Объект); ДругойВладелец = Запись.Объект; Возврат Ложь; КонецЕсли;КонецЕсли;
		
	// Заполним
	
	Запись.ШтрихКод 	= ШтрихКод;
	Запись.Объект 		= Объект.Ссылка;
	Запись.ТипШтрихКода = Перечисления.ТипыШтрихКодов.EAN13;
	
	// Запишем
	
	Возврат ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(Запись);
	
КонецФункции

#КонецОбласти

#Область Информация_о_товаре

// ИНФОРМАЦИЯ О ТОВАРЕ

&НаСервере
Процедура ОбработатьОтображениеИнформацииОТоваре()
	
	Массив = Новый Массив;
	Массив.Добавить(Объект.Ссылка);
	
	ИнфОТоваре = РаботаСНоменклатурой.ПолучитьИнформациюHTMLОТоваре(Массив, КэшируемыеФункции.ВалютаУправленческогоУчета());
	ИнфОТовареHTML = ИнфОТоваре.ТекстHTML;
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.Информация Тогда
		
		ОбработатьОтображениеИнформацииОТоваре();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнфОТовареHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	РаботаСНоменклатуройКлиент.ИнфТовараТекстHTMLПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка,,Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти


#Область HTML_описание_товара

// HTML описание товара

&НаКлиенте
Процедура РедактироватьОписаниеHTML(Команда)
	
	мФормаВыбораТекстHTML = ОткрытьФорму("ОбщаяФорма.РедактированияТекстаHTML", Новый Структура("ЗакрыватьПриВыборе, Текст, НеПоказыватьЗаголовокHTML", Истина, ОписаниеHTML, Истина), ЭтаФорма);
	
КонецПроцедуры
&НаКлиенте
Процедура РедактироватьОписаниеДилеров(Команда)
	
	мФормаВыбораТекстHTMLДилера = ОткрытьФорму("ОбщаяФорма.РедактированияТекстаHTML", Новый Структура("ЗакрыватьПриВыборе, Текст, НеПоказыватьЗаголовокHTML", Истина, ОписаниеHTML_Дилер, Истина), ЭтаФорма);
	
КонецПроцедуры
&НаКлиенте
Процедура РедактироватьОписаниеТекстом(Команда)
	
	мФормаВыбораТекст = ОткрытьФорму("ОбщаяФорма.РедактированияТекстаHTMLВФорматированномДокументе", Новый Структура("ЗакрыватьПриВыборе, Текст", Истина, ОписаниеHTML), ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора = мФормаВыбораТекстHTML Тогда
		
		ОписаниеHTML = ВыбранноеЗначение; 
		Модифицированность = Истина;
		БылоИзмененоHTMLОписание = Истина;
		
	ИначеЕсли ИсточникВыбора = мФормаВыбораТекст Тогда
		
		ОписаниеHTML = ВыбранноеЗначение; 
		Модифицированность = Истина; 
		БылоИзмененоHTMLОписание = Истина; 
		
	ИначеЕсли  ИсточникВыбора = мФормаВыбораТекстHTMLДилера Тогда
		
		ОписаниеHTML_Дилер = ВыбранноеЗначение; 
		Модифицированность = Истина;
		БылоИзмененоHTMLОписаниеДилера = Истина; 
		
	ИначеЕсли  ИсточникВыбора = мФормаВыбораСертификата Тогда
		
		Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СертификатыНоменклатуры") Тогда
			Сертификат = ВыбранноеЗначение; 
			Объект.Сертификат = ВыбранноеЗначение; 
			Модифицированность = Истина; 
			Элементы.ДекорацияСертификат.Видимость = НЕ Объект.Сертификат.Пустая();	КонецЕсли; КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Меню

&НаСервере
Процедура ПрочитатьМеню()
	
	Запрос = Новый Запрос("ВЫБРАТЬ * ИЗ РегистрСведений.ЧастныеСвойстваМенюОбъекта ГДЕ Объект = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	ТаблицаМеню.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаСервере
Функция СохранитьМеню()
	
	ВрТаблица = ТаблицаМеню.Выгрузить();
	ВрТаблица.Колонки.Добавить("Объект", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ВрТаблица.ЗаполнитьЗначения(Объект.Ссылка, "Объект");
	
	Набор = РегистрыСведений.ЧастныеСвойстваМенюОбъекта.СоздатьНаборЗаписей();
	Набор.Отбор.Объект.Установить(Объект.Ссылка);
	Набор.Загрузить(ВрТаблица);
	
	Возврат ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(Набор);
	
КонецФункции

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПрочитатьМеню();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаМенюПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	// Вставить содержимое обработчика.
КонецПроцедуры

#КонецОбласти

&НаСервереБезКонтекста
Функция ПолучитьПустоеКраткоеОписание() Возврат Справочники.КраткиеОписания.ПустаяСсылка() КонецФункции
&НаКлиенте
Процедура КороткоеОписаниеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элементы.КороткоеОписание.ТекущиеДанные.Описание = ПолучитьПустоеКраткоеОписание(); КонецЕсли;
	
КонецПроцедуры	
&НаКлиенте
Процедура КороткоеОписаниеОписаниеПриИзменении(Элемент)
	КороткоеОписаниеОписаниеПриИзмененииНаСервере();
КонецПроцедуры
&НаСервере
Процедура КороткоеОписаниеОписаниеПриИзмененииНаСервере()
	текСтрока = Объект.КороткоеОписание.НайтиПоИдентификатору(Элементы.КороткоеОписание.ТекущаяСтрока);
	Если ТипЗнч(текСтрока.Описание) = Тип("СправочникСсылка.КраткиеОписания") Тогда
		текСтрока.Картинка = текСтрока.Описание.Картинка; КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТег(Команда)
	Если ЗначениеЗаполнено(НовыйТег) Тогда
		ДобавитьТегНаСервере(НовыйТег);
		
		Элементы.Теги.Обновить();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДобавитьТегНаСервере(пНовыйТег)
	// Сперва найдем
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 	ИСТИНА 
	|ИЗ 		РегистрСведений.ТегиНоменклатуры
	|ГДЕ 	Номенклатура = &Ссылка И Тег = &Тег
	|");
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Тег", пНовыйТег);
	
	Выполнение = Запрос.Выполнить();
	
	Если Выполнение.Пустой() Тогда
		
		Запись = РегистрыСведений.ТегиНоменклатуры.СоздатьМенеджерЗаписи();
		Запись.Номенклатура = Объект.Ссылка;
		Запись.Тег 			= пНовыйТег;
		
		Попытка
			Запись.Записать();
		Исключение
			стрОшибки = ОписаниеОшибки();
			ОбщиеФункции.СообщитьТекст("Ошибка при записи тега товара
											|" + стрОшибки);
		КонецПопытки;
										
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СсылкаURLОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если НЕ ПустаяСтрока(Объект.СсылкаURL) Тогда
		ЗапуститьПриложение(Объект.СсылкаURL);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НетАналогаПриИзменении(Элемент)
	Элементы.ТаблицаАналоги.Доступность = НЕ Объект.НетАналога;
КонецПроцедуры


&НаКлиенте
Процедура СертификатНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	Если Объект.Сертификат.Пустая() Тогда
		ОткрытьФорму("Справочник.СертификатыНоменклатуры.ФормаОбъекта",,ЭтаФорма);
	
	Иначе
		
		НачатьПолучениеКаталогаВременныхФайлов(Новый ОписаниеОповещения("ПолученКаталогВременныхФайлов", ЭтаФорма));
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПолучитьИмяСертификата()
  Возврат Объект.Сертификат.Наименование;
КонецФункции
  
&НаКлиенте
Процедура ПолученКаталогВременныхФайлов(ИмяКаталогаВременныхФайлов, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ИмяКаталогаВременныхФайлов) Тогда
		
		Адрес = ПолучитьНавигационнуюСсылку(Объект.Сертификат, "Файл");
		 		
		// Достанем сам файл
		
		ПередаваемыеФайлы = Новый Массив;
		Описание = Новый ОписаниеПередаваемогоФайла(ПолучитьИмяСертификата(), Адрес);
		ПередаваемыеФайлы.Добавить(Описание);
		
		НачатьПолучениеФайлов(Новый ОписаниеОповещения("ОткрытьФайлДляПросмотра", ЭтаФорма, ДополнительныеПараметры), ПередаваемыеФайлы, ИмяКаталогаВременныхФайлов, Ложь);
		
	Иначе
		ПоказатьПредупреждение(,"не удалось определить каталог временных файлов"); КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ЗапущеноПриложение(КодВозврата, ДополнительныеПараметры) Экспорт
	Возврат;	
КонецПроцедуры
&НаКлиенте
Процедура ОткрытьФайлДляПросмотра(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПолученныеФайлы <> Неопределено Тогда
		
		//ДополнительныеПараметры.Вставить("ПолученныйФайл", ПолученныеФайлы[0]);
		НачатьЗапускПриложения(Новый ОписаниеОповещения("ЗапущеноПриложение", ЭтаФорма, ДополнительныеПараметры), ПолученныеФайлы[0].Имя); КонецЕсли;
				
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	Если ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.СертификатыНоменклатуры") Тогда
		Сертификат = НовыйОбъект; 
		Объект.Сертификат = НовыйОбъект; 
		Модифицированность = Истина; 
		Элементы.ДекорацияСертификат.Видимость = НЕ Объект.Сертификат.Пустая();	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Декорация3Нажатие(Элемент)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник.СертификатыНоменклатуры.ФормаОбъекта",,ЭтаФорма);
	
КонецПроцедуры


&НаКлиенте
Процедура Декорация4Нажатие(Элемент)
	СтандартнаяОбработка = Ложь;
	мФормаВыбораСертификата = ОткрытьФорму("Справочник.СертификатыНоменклатуры.ФормаВыбора", ,ЭтаФорма);
КонецПроцедуры


&НаКлиенте
Процедура ШаблонСвойствПриИзменении(Элемент)
	ШаблонСвойствПриИзмененииНаСервере();
КонецПроцедуры


&НаСервере
Процедура ШаблонСвойствПриИзмененииНаСервере()
	
	//Если ДополнительныеРеквизиты.Количество() Тогда
	//	времТЗ = ДополнительныеРеквизиты.Выгрузить();
	//	времТЗ.Сортировать("Сортировка Убыв");
	//	Инд = времТЗ[0].Сортировка; КонецЕсли;
	
	СвойстваТовара = ШаблонСвойств.ПараметрыНомеклатуры;
	
	Для Каждого Строка Из СвойстваТовара Цикл
		Строки = ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", Строка.Свойство));
		Если НЕ Строки.Количество() Тогда
			новСтрока = ДополнительныеРеквизиты.Добавить();
			новСтрока.Свойство = Строка.Свойство; КонецЕсли; КонецЦикла;
		
КонецПроцедуры


#Область Дополнительные_группы

&НаСервере
Процедура ЗагрузитьДопГруппы()
	
	Для Каждого строка Из Объект.ДополнительныеРодители Цикл
		НовСтрока = Группы.Добавить();
		НовСтрока.Родитель 	= Строка.Родитель;
		НовСтрока.Сайт 		= РаботаСНоменклатурой.ИмяСайтаИзТипаОбъекта(Строка.Родитель); КонецЦикла;
	
КонецПроцедуры
&НаСервере
Процедура СохранитьДопГруппы()
	
	Объект.ДополнительныеРодители.Загрузить(Группы.Выгрузить());
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИмяСайтаПоНоменклатуре(Ссылка)
	
	Возврат РаботаСНоменклатурой.ИмяСайтаИзТипаОбъекта(Ссылка);
	
КонецФункции
&НаКлиенте
Процедура Группы1РодительПриИзменении(Элемент)
	
	текДанные = Элементы.ГруппыДоп.ТекущиеДанные;
	Если текДанные <> Неопределено Тогда
		текДанные.Сайт = ПолучитьИмяСайтаПоНоменклатуре(текДанные.Родитель); КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АватарПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	ОткрытьФорму("Справочник.КартинкиНоменклатуры.ФормаСписка", Новый Структура("ТекущаяСтрока", Объект.Ссылка));
	
КонецПроцедуры

&НаКлиенте
Процедура Комплектация1ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.Товар = ""; КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область МинМакс
&НаКлиенте
Процедура МинМаксВвестиЗначения(Команда)
	ОткрытьФорму("Документ.УстановкаМинимальногоОстатка.Форма.ФормаДокумента");
КонецПроцедуры

#КонецОбласти


	