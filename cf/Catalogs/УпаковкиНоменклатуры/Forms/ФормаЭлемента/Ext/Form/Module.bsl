
&НаСервере
Процедура ПрочитатьТаблицыУпаковок()
	
	// Загрузим владелцев
	
	Запрос = Новый Запрос("ВЫБРАТЬ Владелец КАК Упаковка, Количество, Вес ИЗ РегистрСведений.СоставУпаковок ГДЕ Элемент = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	ВходитВУпаковки.Загрузить(Запрос.Выполнить().Выгрузить());
	
	// Загрузим подчиненных
	
	Запрос = Новый Запрос("ВЫБРАТЬ Элемент КАК Упаковка, Количество, Вес ИЗ РегистрСведений.СоставУпаковок ГДЕ Владелец = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	МогутВходитьУпаковки.Загрузить(Запрос.Выполнить().Выгрузить());
		
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПрочитатьТаблицыУпаковок();
	
	Если ЗначениеЗаполнено(Параметры.Владелец) Тогда
		Объект.Владелец = Параметры.Владелец;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.Наименование = ?(Объект.Автонаименование, СформироватьАвтоНаименование(), Объект.Наименование);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВходитВУпаковкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	//Отказ = Истина;
	//
	//ОткрытьФорму("Справочник.Упаковки.ФормаВыбора",Новый Структура("Владелец", Объект.Ссылка),ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокВладельцев()
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ Ссылка 
	|ИЗ Справочник.УпаковкиНоменклатуры 
	|ГДЕ 	Владелец = &Владелец И 
	|		Ссылка <> &Ссылка И
	|		Не Ссылка В(ВЫБРАТЬ Элемент ИЗ РегистрСведений.СоставУпаковок ГДЕ Владелец = &Ссылка)");
	
	Запрос.УстановитьПараметр("Владелец", 	Объект.Владелец);
	Запрос.УстановитьПараметр("Ссылка", 	Объект.Ссылка);
	
	Список = Новый СписокЗначений;
	Список.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Возврат Список;
		
КонецФункции
&НаСервере
Функция ПолучитьСписокПодчиненных()
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ Ссылка 
	|ИЗ Справочник.УпаковкиНоменклатуры 
	|ГДЕ 	Владелец = &Владелец И 
	|		Ссылка <> &Ссылка И
	|		Не Ссылка В(ВЫБРАТЬ Владелец ИЗ РегистрСведений.СоставУпаковок ГДЕ Элемент = &Ссылка)");
	
	Запрос.УстановитьПараметр("Владелец", 	Объект.Владелец);
	Запрос.УстановитьПараметр("Ссылка", 	Объект.Ссылка);
	
	Список = Новый СписокЗначений;
	Список.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Возврат Список;
		
КонецФункции

&НаКлиенте
Процедура ОбновитьДоступностьУпаковок()
	
	//СписокПодчиненных 	= ПолучитьСписокПодчиненных();
	//СписокВладельцев 	= ПолучитьСписокВладельцев();
	
	//Элементы.ВходитВУпаковки.ТолькоПросмотр 		= Не СписокВладельцев.Количество();
	//Элементы.МогутВходитьУпаковки.ТолькоПросмотр 	= Не СписокПодчиненных.Количество();
	
КонецПроцедуры
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьДоступностьУпаковок();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Запишем владельцев
	
	Набор = РегистрыСведений.СоставУпаковок.СоздатьНаборЗаписей();
	Набор.Отбор.Элемент.Установить(Объект.Ссылка);
	
	Для Каждого Строка Из ВходитВУпаковки Цикл
		Если Строка.Упаковка <> Объект.Ссылка Тогда
		
			Запись = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Строка);
			
			Запись.Владелец = Строка.Упаковка;
			Запись.Элемент 	= Объект.Ссылка;
			
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		Набор.Записать();
	Исключение
		стрОшибки 	= ОписаниеОшибки();
		Отказ 		= Истина;
		ОбщиеФункции.СообщитьТекст("Ошибка при записи верхней упаковки
							|" + стрОшибки);
	КонецПопытки;
	
	// Запишем подчиненных
	
	Набор = РегистрыСведений.СоставУпаковок.СоздатьНаборЗаписей();
	Набор.Отбор.Владелец.Установить(Объект.Ссылка);
	
	Для Каждого Строка Из МогутВходитьУпаковки Цикл
		Если Строка.Упаковка <> Объект.Ссылка Тогда
		
			Запись = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Строка);
			                 
			Запись.Владелец = Объект.Ссылка;
			Запись.Элемент 	= Строка.Упаковка;
			
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		Набор.Записать();
	Исключение
		стрОшибки 	= ОписаниеОшибки();
		Отказ 		= Истина;
		ОбщиеФункции.СообщитьТекст("Ошибка при записи входящих упаковок
								|" + стрОшибки);
	КонецПопытки;
	
КонецПроцедуры

Функция СформироватьАвтоНаименование()
		
	//СтрокаНаименования = ?(Объект.Коэффициент > 0 И ЗначениеЗаполнено(Объект.Владелец.ЕдиницаИзмерения), Строка(Объект.Коэффициент) + " " + Строка(Объект.Владелец.ЕдиницаИзмерения) + " в уп.", "");		

	//Возврат Лев(СтрокаНаименования, 150);
	
	Возврат Справочники.УпаковкиНоменклатуры.СформироватьАвтоНаименование(Объект);
	
КонецФункции

&НаКлиенте
Процедура КоэффициентПриИзменении(Элемент)
	Объект.Наименование = ?(Объект.Автонаименование, СформироватьАвтоНаименование(), Объект.Наименование);
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	// включаем автонаименование если текущее значение наименования совпадает с автоматическим, иначе считаем что автонаименование отключено
	Объект.Автонаименование = Объект.Наименование = СформироватьАвтоНаименование();
		
КонецПроцедуры
