
&НаКлиенте
Процедура УправлениеВидимостьюДоступностью()
	
	//Элементы.ПоясненияГалкиКонтрагента.Видимость = Объект.ЭтоКонтрагентБухгалтерии;
	
	///Антон
	Если ЗначениеЗаполнено(Объект.НомерКлиента) Тогда
		Элементы.ПрисвоитьНомерКлиенту.Доступность = Ложь;	
	Иначе
		Элементы.ПрисвоитьНомерКлиенту.Доступность = Истина;
	КонецЕсли;
	//desh.avdonin {{11.03.2015#
	Элементы.СтатьяДвиженияДенежныхСредств.Видимость = Объект.Поставщик;	
	//}}desh.avdonin
	
	КатегорияПриИзменении("");
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
&НаСервереБезКонтекста
Функция ПолучитьТочкиПродажПартнера(Знач Ссылка)
	Запрос = Новый Запрос("ВЫБРАТЬ Ссылка ИЗ Справочник.ТочкиПродаж ГДЕ НЕ ПометкаУдаления И Владелец = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// RLS проверим что есть доступ к конттрагенту
	
	Если Не ПолныеПрава.ДоступныВсеПартнеры() Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 ИСТИНА ИЗ Справочник.Партнеры
		|ГДЕ 
		|Ссылка = &Ссылка И
	    |(	ОсновнойМенеджер В (&ДоступныеПользователи) ИЛИ 
	    |	Ссылка В( ВЫБРАТЬ Партнер
	    |			ИЗ      РегистрСведений.ПравоПросмотраПартнеров
	    |			ГДЕ     Пользователь В(&ДоступныеПользователи)))");
		
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		Запрос.УстановитьПараметр("ДоступныеПользователи", ПараметрыСеанса.ДоступныеПользователи);
		
		Если Запрос.Выполнить().Пустой() Тогда
			Отказ = Истина;
			ОбщиеФункции.СообщитьТекст("Запрещен доступ: " + Объект.Ссылка);
			Возврат; КонецЕсли; КонецЕсли;
			
	//
	//ЭлементОтбора = ТочкиПродаж.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));

	//ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Владелец");
	//ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//ЭлементОтбора.Использование = Истина;
	//ЭлементОтбора.ПравоеЗначение = Объект.Ссылка;

	ТочкиПродаж = ПолучитьТочкиПродажПартнера(Объект.Ссылка);
	СтрокаТочкиПродаж = ?(ТочкиПродаж.Количество(), КонвертацияТипов.ПолучитьСтрокуИзМассива(ТочкиПродаж), "Заполнить");
	
	// belova 08.12.2014 { отключаем старый механизм КИ
		// Обработчик механизма "Контактная информация"
		// УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтаФорма, Объект.Ссылка);
	// } belova 08.12.2014
	
	//установить признаки создаваемого партнера по параметрам
	Если Параметры.Ключ = Справочники.Партнеры.ПустаяСсылка() Тогда
		Если Параметры.Свойство("НовыйКлиент") Тогда
			Объект.Клиент = Истина;
		КонецЕсли;
		Если Параметры.Свойство("НовыйПоставщик") Тогда
			Объект.Поставщик = Истина;
		КонецЕсли;
		Если Параметры.Свойство("НовыйКонкурент") Тогда
			Объект.Конкурент = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Установим права на галку поменять контрагента бух
	
	Элементы.СвязатьСКонтрагентомБух.ТолькоПросмотр = Не (РольДоступна("ПолныеПрава") Или РольДоступна("Бухгалтер"));
	
	// Установим права на изменение партнера контрагента
	
	МенятьМенеджера =  РольДоступна("ПолныеПрава") Или РольДоступна("ПолныеПраваВОбласти") 
	Или РольДоступна("РазрешеноМенятьМенеджераЗаказа")
	//Или Объект.ОсновнойМенеджер.Пустая() 
	Или Объект.ОсновнойМенеджер = ПараметрыСеанса.ТекущийПользователь;

	Элементы.ОсновнойМенеджер.ТолькоПросмотр =	НЕ МенятьМенеджера;
	Элементы.ДекорацияИсторияМенеджеров.Видимость =	МенятьМенеджера; 
	// На количество дней отсрочки
	
	Элементы.ДнейОтсрочки.ТолькоПросмотр = 
				Константы.ЗапретитьПросроченнуюОтгрузку.Получить() И 
				Не (РольДоступна("РазрешеноИзменятьКоличествоДнейОтсрочки") Или РольДоступна("ПолныеПрава") Или РольДоступна("ПолныеПраваВОбласти") Или РольДоступна("Бухгалтер"));
	
	// Установим контрагентов
	
	
	//ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(Контрагенты, "Партнер", Объект.Ссылка, Истина);
	//ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(ПользователиИнтернет, "Партнер", Объект.Ссылка, Истина);
	
	//КонтактныеЛица.Параметры.УстановитьЗначениеПараметра("Владелец", Объект.Ссылка);
	
	//Контрагенты.Параметры.УстановитьЗначениеПараметра("Партнер", Объект.Ссылка);
	//ДокументыПартнера.Параметры.УстановитьЗначениеПараметра("Партнер", Объект.Ссылка);
	
	
	ЕстьСтраницаСБрендами = Объект.СтраницыСайта.Количество();
	

	Элементы.АдресСайта.Видимость = Объект.ЕстьСайт;
	Элементы.ЕстьСтраницаСБрендами.Видимость = Объект.ЕстьСайт;
	Элементы.КонтактыСЦ.Видимость = Объект.ЕстьСервисныйЦентр;
	Элементы.СЦСертифицирован.Видимость = Объект.ЕстьСервисныйЦентр;
	Элементы.СтраницыСайта.Видимость = ЕстьСтраницаСБрендами;
	Элементы.ЕстьБрендыНаГлавнойСтранице.Видимость = Объект.ЕстьСайт;
	
	
	Договора.Параметры.УстановитьЗначениеПараметра("Ссылка",Объект.Ссылка);
	
	ОтборыСписковКлиентСервер.УстановитьЭлементОтбораСписка(МенеджерыКатегорий, "Партнер", Объект.Ссылка);
	
	текРегион = ПрочитатьРегионыПредставление();
	Если ЗначениеЗаполнено(текРегион) Тогда
		РегионыПредставление=текРегион;
	Иначе
		РегионыПредставление=Справочники.Регионы.ПустаяСсылка();
		Элементы.РегионыПредставление.КнопкаОткрытия=Ложь;
		Элементы.РегионыПредставление.КнопкаВыбора=Истина;
		Элементы.РегионыПредставление.РедактированиеТекста=Истина;
	КонецЕсли;	
	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// КОНТАКТНЫЕ ЛИЦА

//&НаКлиенте
//Процедура КонтактныеЛицаПриАктивизацииСтроки(Элемент)
//	
//	//КонтактныеЛицаИнформация.Параметры.УстановитьЗначениеПараметра("Ссылка", Элементы.КонтактныеЛица.ТекущаяСтрока);
//	
//	Если Элементы.КонтактныеЛица.ТекущаяСтрока <> Неопределено Тогда
//		КарточкаКЛ = УправлениеКонтактнойИнформацией.ПолучитьКарточкуКонтактаHTML(Элементы.КонтактныеЛица.ТекущаяСтрока, "КонтактныеЛица");
//	КонецЕсли;
//КонецПроцедуры
//&НаКлиенте
//Процедура КонтактныеЛицаПриИзменении(Элемент)
//	КарточкаКЛ = УправлениеКонтактнойИнформацией.ПолучитьКарточкуКонтактаHTML(Элементы.КонтактныеЛица.ТекущаяСтрока, "КонтактныеЛица");
//КонецПроцедуры

//&НаКлиенте
//Процедура КонтактныеЛицаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
//	
//	Отказ = Истина;
//	
//	Если Объект.Ссылка.Пустая() Тогда
//	
//	Ответ = Вопрос("Данные еще не записаны" + Символы.ПС + 
//					"Переход к заполнению Контактных Лиц возможен только после записи данных" + Символы.ПС +
//					"Данные будут записаны", РежимДиалогаВопрос.ОКОтмена, 0);
//	Если Ответ = КодВозвратаДиалога.Отмена Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если НЕ ЗаписатьЭтотОбъект() Тогда
//		Возврат;
//	КонецЕсли;

//	КонецЕсли;
//	
//	СтруктураПараметров = Новый Структура ("Владелец", Объект.Ссылка);	
//	Форма = ПолучитьФорму("Справочник.КонтактныеЛица.Форма.ФормаЭлемента", СтруктураПараметров);
//	Форма.Открыть();
//	
//КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// КОНТАКТНАЯ ИНФОРМАЦИЯ

&НаКлиенте
Процедура КонтактнаяИнформацияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	УправлениеКонтактнойИнформациейКлиент.ПриНачалеРедактирования(ЭтаФорма, Объект.Ссылка, НоваяСтрока, Копирование);

КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.ПредставлениеНачалоВыбора(ЭтаФорма, Объект.Ссылка, Модифицированность, СтандартнаяОбработка);
	
КонецПроцедуры

Функция ЗаписатьЭтотОбъект() Экспорт
	
	Попытка
		Рез = Записать();
	Исключение
		Сообщить("Ошибка сохранения данных: " + ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;

	Возврат Рез;
	
КонецФункции
 
&НаКлиенте
Процедура КонтактнаяИнформацияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Объект.Ссылка.Пустая() Тогда
	
	Ответ = Вопрос("Данные еще не записаны" + Символы.ПС + 
					"Переход к заполнению Контактной Информации возможен только после записи данных" + Символы.ПС +
					"Данные будут записаны", РежимДиалогаВопрос.ОКОтмена, 0);
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
	   Отказ = Истина; 
	   Возврат;
	КонецЕсли;
	
	Если НЕ ЗаписатьЭтотОбъект() Тогда
		Возврат;
	КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура КонтактнаяИнформацияПередУдалением(Элемент, Отказ)
	УправлениеКонтактнойИнформациейКлиент.ПередУдалением(ЭтаФорма, Объект.Ссылка, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура СвязатьСКонтрагентомБухПриИзменении(Элемент)
	
	УправлениеВидимостьюДоступностью();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УправлениеВидимостьюДоступностью();
	
КонецПроцедуры

// РЕГИОНЫ

&НаСервере
Функция ПрочитатьРегионыПредставление()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ Регионы Из РегистрСведений.РегионыПартнераПредставление ГДЕ Партнер = &Партнер");
		Запрос.УстановитьПараметр("Партнер", Объект.Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Возврат ?(Выборка.Следующий(), Выборка.Регионы, "");
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции
&НаСервере
Функция ПрочитатьОсновнойРегион()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 Регион Из РегистрСведений.РегионыПартнера ГДЕ Партнер = &Партнер УПОРЯДОЧИТЬ ПО Основной Убыв");
		Запрос.УстановитьПараметр("Партнер", Объект.Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Возврат ?(Выборка.Следующий(), Выборка.Регион, Неопределено);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции


&НаКлиенте 
Процедура ОповещениеОЗакрытииФормыВыбораРегионов(РезультатЗакрытия,ДополнительныеПараметры) Экспорт
	РегионыПредставление = ПрочитатьРегионыПредставление();
КонецПроцедуры	


&НаКлиенте
Процедура ТекстКонтактнойИнформацииНажатие(Элемент)
	
	Если Объект.Ссылка.Пустая() Тогда
		
		ПоказатьПредупреждение(,"Необходимо сперва сохранить партнера");
		
	Иначе
	
		//Вставить содержимое обработчика.                                                                     
		//ОткрытьФорму("Обработка.КонтактнаяИнформация.Форма", ПараметрыФормы, ПараметрыВыполненияКоманды.Источник, ПараметрыВыполненияКоманды.Уникальность, ПараметрыВыполненияКоманды.Окно, ПараметрыВыполненияКоманды.НавигационнаяСсылка);
		ОткрытьФорму("Обработка.КонтактнаяИнформация.Форма.ФормаГлавная", Новый Структура("Контакт, ЗакрыватьПриЗакрытииВладельца", Объект.Ссылка, Истина), ЭтаФорма, УникальныйИдентификатор); КонецЕсли;
	
КонецПроцедуры
///Антон
&НаКлиенте
Процедура ПрисвоитьНомерКлиенту(Команда)
	ПрисвоитьНомерКлиентуНаСервере();
	Модифицированность = Истина;
КонецПроцедуры
//Антон
&НаСервере
Процедура ПрисвоитьНомерКлиентуНаСервере()
	Если Не ПолучитьФункциональнуюОпцию("НемецкийУчет") Тогда Возврат КонецЕсли;
	ВерхнийПределГруппы = 0;
	НижнийПределГруппы = 0;
	ГраницаНумерации = 69999;
	////
	//СтрокиДляЗамены = Новый Массив;
	//СтрокиДляЗамены.Добавить("GmbH");
	//СтрокиДляЗамены.Добавить("Einzelunternehmen");
	//СтрокиДляЗамены.Добавить("e. K");
	//СтрокиДляЗамены.Добавить("GbR");
	//СтрокиДляЗамены.Добавить("OHG");
	//СтрокиДляЗамены.Добавить("KG");
	//СтрокиДляЗамены.Добавить("AG");
	//СтрокиДляЗамены.Добавить("e. Kfm.");
	//СтрокиДляЗамены.Добавить("e. Kffr.");
	//СтрокиДляЗамены.Добавить("");
	///Область данных
	НачалаНумерации = Новый Структура;
	НачалаНумерации.Вставить("a", 10000); //97  //a  //10000 - 12219
	НачалаНумерации.Вставить("b", 12220); //98  //b  //12220 - 14439
	НачалаНумерации.Вставить("c", 14440); //99  //c  //14440 - 16659
	НачалаНумерации.Вставить("d", 16660); //100 //d  //16660 - 16659
	НачалаНумерации.Вставить("e", 18880); //101 //e  //18880 - 21099
	НачалаНумерации.Вставить("f", 21100); //102 //f  //21100 - 23319
	НачалаНумерации.Вставить("g", 23320); //103 //g  //23320 - 25539
	НачалаНумерации.Вставить("h", 25540); //104 //h  //25540 - 27759
	НачалаНумерации.Вставить("i", 27760); //105 //i  //27760 - 29979
	НачалаНумерации.Вставить("j", 29980); //106 //j  //29980 - 32199
	НачалаНумерации.Вставить("k", 32200); //107 //k  //32200 - 34219
	НачалаНумерации.Вставить("l", 34220); //108 //l  //34220 - 36639
	НачалаНумерации.Вставить("m", 36640); //109 //m  //36640 - 38859
	НачалаНумерации.Вставить("n", 38860); //110 //n  //38860 - 41079
	НачалаНумерации.Вставить("o", 41080); //111 //o  //41080 - 43299
	НачалаНумерации.Вставить("p", 43300); //112 //p  //43300 - 45519
	НачалаНумерации.Вставить("q", 45520); //113 //q  //45520 - 47739
	НачалаНумерации.Вставить("r", 47740); //114 //r  //47740 - 49959
	НачалаНумерации.Вставить("s", 49960); //115 //s  //49960 - 52179
	НачалаНумерации.Вставить("t", 52180); //116 //t  //52180 - 54399
	НачалаНумерации.Вставить("u", 54400); //117 //u  //54400 - 56619
	НачалаНумерации.Вставить("v", 56620); //118 //v  //56620 - 58839   
	НачалаНумерации.Вставить("w", 58840); //119 //w  //58840 - 61059
	НачалаНумерации.Вставить("x", 61060); //120 //x  //61060 - 63279
	НачалаНумерации.Вставить("y", 63280); //121 //y  //63280 - 65499
	НачалаНумерации.Вставить("z", 65500); //122 //z  //65500 - 67719
	НачалаНумерации.Вставить("res",67720); //reserve
	///////////////////////////////////////////////////
	//Получим границы номеров для некой буквы
	ПерваяБуква = НРег(Лев(СокрЛП(Объект.Наименование), 1));
	НижнийПредел = НачалаНумерации.Свойство(ПерваяБуква, НижнийПределГруппы);
	Если КодСимвола(ПерваяБуква) = 122 Тогда
		ВерхнийПределГруппы = 67719;
	Иначе
		ВерхнийПредел = НачалаНумерации.Свойство(Символ(КодСимвола(ПерваяБуква)+1), ВерхнийПределГруппы);
	КонецЕсли;
	ВрехнийПределГруппы = ВерхнийПределГруппы - 1;
	///Получим номер
	НомерДляПрисвоения = ПолучитьСледующийНомер(ВрехнийПределГруппы, НижнийПределГруппы, ГраницаНумерации);
	Если НомерДляПрисвоения < 0 Тогда
		//ПоказатьПредупреждение("Номера кончились!");
		Возврат;
	КонецЕсли;
	Если НомерДляПрисвоения > ВерхнийПределГруппы Тогда
		НачалаНумерации.Свойство("res", НижнийПределГруппы);
		НомерДляПрисвоения = ПолучитьСледующийНомер(ГраницаНумерации, НижнийПределГруппы, ГраницаНумерации);
		///Надо взять номер из резерва
	КонецЕсли;
	Объект.НомерКлиента = НомерДляПрисвоения;
КонецПроцедуры
///Антон
&НаСервере
Функция ПолучитьСледующийНомер(ВерхнийПредел, НижнийПредел, Граница)
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ЕСТЬNULL(МАКСИМУМ(Партнеры.НомерКлиента), &НижнийПредел) КАК Номер,
	               |	ЕСТЬNULL(МАКСИМУМ(Партнеры.Ссылка), 0) КАК Клиент
	               |ПОМЕСТИТЬ Табл
	               |ИЗ
	               |	Справочник.Партнеры КАК Партнеры
	               |ГДЕ
	               |	Партнеры.НомерКлиента >= &НижнийПредел
	               |	И Партнеры.НомерКлиента <= &ВерхнийПредел
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА Табл.Клиент = 0
	               |			ТОГДА Табл.Номер
	               |		ИНАЧЕ Табл.Номер + 1
	               |	КОНЕЦ КАК Номер
	               |ИЗ
	               |	Табл КАК Табл";
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НижнийПредел", НижнийПредел);
	Запрос.УстановитьПараметр("ВерхнийПредел", ВерхнийПредел);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	НомерДляПрисвоения = Выборка.Номер;
	Если НомерДляПрисвоения > Граница Тогда
		Возврат -1;
	КонецЕсли;
	Возврат НомерДляПрисвоения;
КонецФункции

&НаКлиенте
Процедура ПоставщикПриИзменении(Элемент)
	УправлениеВидимостьюДоступностью();	
КонецПроцедуры

&НаКлиенте
Процедура ЕстьСтраницаСБрендамиПриИзменении(Элемент)
	
	Элементы.СтраницыСайта.Видимость = ЕстьСтраницаСБрендами;
	
	Если ЕстьСтраницаСБрендами Тогда
		ЗаполнитьБренды();
	Иначе
		Объект.СтраницыСайта.Очистить();
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьБренды()
	Запрос = Новый Запрос("ВЫБРАТЬ Ссылка Бренд ИЗ Справочник.Производители ГДЕ НашБренд И НЕ ПометкаУдаления");
	Бренды = Запрос.Выполнить().Выгрузить();
	Объект.СтраницыСайта.Загрузить(Бренды);
	
	Элементы.Бренд.СписокВыбора.ЗагрузитьЗначения(Бренды.ВыгрузитьКолонку("Бренд")); 
	
КонецПроцедуры

&НаКлиенте
Процедура ЕстьСервисныйЦентрПриИзменении(Элемент)
	Элементы.КонтактыСЦ.Видимость = Объект.ЕстьСервисныйЦентр;
	Элементы.СЦСертифицирован.Видимость = Объект.ЕстьСервисныйЦентр;
КонецПроцедуры

&НаКлиенте
Процедура ЕстьСайтПриИзменении(Элемент)
	Элементы.АдресСайта.Видимость = Объект.ЕстьСайт;
	Элементы.ЕстьБрендыНаГлавнойСтранице.Видимость = Объект.ЕстьСайт;
	Если НЕ Объект.ЕстьСайт Тогда
		ЕстьСтраницаСБрендами = Ложь;
	КонецЕсли;
	Элементы.ЕстьСтраницаСБрендами.Видимость = Объект.ЕстьСайт;
	
	ЕстьСтраницаСБрендамиПриИзменении(Элементы.ЕстьСтраницаСБрендами);

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКаналыПродаж(Команда)
	СписокКаналовПродаж = ПодготовитьСписокКаналовПродаж();
	Оповещение = Новый ОписаниеОповещения("ПослеВыборкаКаналовПродаж", ЭтаФорма);
	СписокКаналовПродаж.ПоказатьОтметкуЭлементов(Оповещение, "Выберите необходимые каналы продаж."); 

КонецПроцедуры

&НаКлиенте
Процедура ПослеВыборкаКаналовПродаж(Результат, Параметры) Экспорт 
	
	Для Каждого Строка Из Результат Цикл
		Если Строка.Пометка Тогда
			НоваяСтрока = Объект.КаналыПродаж.Добавить();
			НоваяСтрока.КаналПродаж = Строка.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПодготовитьСписокКаналовПродаж()
	
	Запрос = Новый Запрос("ВЫБРАТЬ Ссылка ИЗ Справочник.КаналыПродаж ГДЕ НЕ ПометкаУдаления");
	Массив = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Список = Новый СписокЗначений;
	Список.ЗагрузитьЗначения(Массив);
	Возврат Список;
КонецФункции

&НаКлиенте
Процедура ТочкиПродажНажатие(Элемент)
	ОткрытьФорму("Справочник.ТочкиПродаж.ФормаСписка",Новый Структура("Отбор", Новый Структура("Владелец", Объект.Ссылка)), ЭтаФорма); 
КонецПроцедуры

&НаКлиенте
Процедура СтрокаТочкиПродажНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник.ТочкиПродаж.ФормаСписка",Новый Структура("Отбор", Новый Структура("Владелец", Объект.Ссылка)), ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СтраницыСайтаСтраницаОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если НЕ ПустаяСтрока(Элементы.СтраницыСайта.ТекущиеДанные.Страница) Тогда
		ЗапуститьПриложение(Элементы.СтраницыСайта.ТекущиеДанные.Страница);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АдресСайтаОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если НЕ ПустаяСтрока(Объект.АдресСайта) Тогда
		ЗапуститьПриложение(Объект.АдресСайта);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КатегорияПриИзменении(Элемент)
	
	Элементы.РазделТорговогоПартнера.Видимость = ЭтоТорговыйПартнер(Объект.Категория); 
	
	Если Объект.Клиент Тогда
		Если Объект.Категория = ПредопределенноеЗначение("Справочник.КатегорииПартнеров.ФизическоеЛицо") Тогда
			Элементы.РегионыПредставление.АвтоОтметкаНезаполненного=Ложь;
			Элементы.РегионыПредставление.ОтметкаНезаполненного=Ложь;
		Иначе
			Элементы.РегионыПредставление.АвтоОтметкаНезаполненного=Истина;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоТорговыйПартнер(категория)
	ТП = ПредопределенноеЗначение("Справочник.КатегорииПартнеров.ТорговыйПартнер");
	Возврат Категория = ТП ИЛИ Категория.Родитель = ТП; 
КонецФункции	

&НаКлиенте
Процедура МенеджерыКатегорийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	
	Если Объект.Ссылка.Пустая() Тогда
		ПоказатьПредупреждение(,"Необходимо сперва записать партнера!",,"Предупреждение");
	Иначе
		ОткрытьФорму("РегистрСведений.МенеджерыКатегорийТоваров.ФормаЗаписи", Новый Структура("Партнер", Объект.Ссылка)); КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РегионыПредставлениеОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	
	ОповещениеВыборРегиона=Новый ОписаниеОповещения("ОповещениеОЗакрытииФормыВыбораРегионов",ЭтаФорма);
	
	//ОткрытьФорму("Справочник.Регионы.Форма.ФормаВыбораРегионовДляПартнера", Новый Структура("Партнер", Объект.Ссылка),,,,,ОповещениеВыборРегиона);
	Отбор = Новый Структура("Партнер", Объект.Ссылка);
	Парам=Новый Структура("Отбор",Отбор);
	ОткрытьФорму("РегистрСведений.РегионыПартнера.Форма.ФормаПодбора", Парам,,,,,ОповещениеВыборРегиона);
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	//запишем регион
	//если тип значения "Справочник. регионы" значит это первоначальное заполнение
	если ТипЗнч(РегионыПредставление)=Тип("СправочникСсылка.Регионы") Тогда
		Если ЗначениеЗаполнено(РегионыПредставление) Тогда
			Мен=РегистрыСведений.РегионыПартнера.СоздатьМенеджерЗаписи();
			Мен.Партнер=ТекущийОбъект.Ссылка;
			Мен.Регион = РегионыПредставление;
			Попытка
				Мен.Записать();
			Исключение
				Сообщить("Не удалось записать регион в регистр сведений. "+ОписаниеОшибки());
				Отказ=Истина;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;	

КонецПроцедуры


&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект)
	
	Если Объект.КаналыПродаж.Количество() > 1  Тогда
	   	ВТ = Объект.КаналыПродаж.Выгрузить();
	   	ВТ.Сортировать("Оценка Убыв");
	   	Если ВТ[0].Оценка = ВТ[1].Оценка Тогда
			МассивСтрок = Объект.КаналыПродаж.НайтиСтроки(Новый Структура("КаналПродаж", ВТ[0].КаналПродаж));
		  	ОбщиеФункции.СообщитьТекст("Максимальная оценка может быть только у одного канала продаж", "Объект.КаналыПродаж[" + МассивСтрок[0].ПолучитьИдентификатор() + "].Оценка", объект.КаналыПродаж);
			Отказ = Истина;	
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(РегионыПредставление)=Тип("СправочникСсылка.Регионы") Тогда
		
		ТекущийОбъект.ОсновнойРегион = РегионыПредставление;
	Иначе
		ТекущийОбъект.ОсновнойРегион = ПрочитатьОсновнойРегион();
	КонецЕсли;	

	// belova 08.12.2014 { отключаем старый механизм КИ
		// Обработчик механизма "Контактная информация"
		//УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект.Ссылка, Отказ);
	// } belova 08.12.2014

КонецПроцедуры


&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	//Вставить содержимое обработчика
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДоговор(Команда)
	ТекКонтр = ПолучитьТекущегоКонтрагента(Объект.Ссылка);
	ЗначенияЗаполнения = Новый Структура("Владелец",ТекКонтр);
	Парам = Новый Структура("ЗначенияЗаполнения",ЗначенияЗаполнения);
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта",Парам);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТекущегоКонтрагента(Партнер)
	Запрос = Новый Запрос("Выбрать Ссылка из Справочник.Контрагенты ГДЕ Партнер=&Партнер Упорядочить по ЗначениеПоУмолчанию УБЫВ");
	Запрос.УстановитьПараметр("Партнер",Партнер);
	Рез=Запрос.Выполнить();
	Если НЕ Рез.Пустой() Тогда
		Возврат Рез.Выгрузить()[0].Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
КонецФункции	

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Не Объект.Клиент И Не Объект.Поставщик И Не Объект.Дилер и Не Объект.Конкурент и Не Объект.ПрочиеОтношения и Не Объект.Грузоперевозчик Тогда
		Сообщить("Установите хотя бы один из признаков взаимоотношений (клиент, поставщик и т.д.)");
		Отказ=Истина;
	КонецЕсли;	
	
	Если Объект.Клиент Тогда
		Если Не ЗначениеЗаполнено(Объект.Категория) Тогда
			Сообщить("Категория не заполнена!");
			Отказ=Истина;
		ИначеЕсли НЕ Объект.Категория = ПредопределенноеЗначение("Справочник.КатегорииПартнеров.ФизическоеЛицо") Тогда
			Если Не ЗначениеЗаполнено(РегионыПредставление) Тогда
				Сообщить("Для категорий отличных от физ лиц обязательно заполнение региона!");
				Отказ=Истина;
			КонецЕсли;	
		КонецЕсли	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентПриИзменении(Элемент)
	
	Если Объект.Клиент Тогда
		Элементы.Категория.АвтоОтметкаНезаполненного=Истина;
	Иначе
		Элементы.Категория.АвтоОтметкаНезаполненного=Ложь;
		Элементы.Категория.ОтметкаНезаполненного=Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗапрещеноВыбиратьТипЦенВДокументах(ВыбранноеЗначение)
	Возврат ФункцииФормДокументов.ЗапрещеноВыбиратьТипЦенВДокументах(ВыбранноеЗначение);
КонецФункции		

&НаКлиенте
Процедура ТипЦенОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ЗапрещеноВыбиратьТипЦенВДокументах(ВыбранноеЗначение) Тогда
		ПоказатьПредупреждение(,"Данный тип цен запрещен к выбору");
		СтандартнаяОбработка=Ложь;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура Декорация2Нажатие(Элемент)
	ОткрытьФорму("РегистрСведений.ОсновнойМенеджерПартнера.ФормаСписка", Новый Структура("Отбор, ТолькоПросмотр", Новый Структура("Партнер", Объект.Ссылка), Истина), ЭтаФорма,,ВариантОткрытияОкна.ОтдельноеОкно);
КонецПроцедуры
	


////////////////////////////////////////////////////////////////////////////////
// КОНТРАГЕНТЫ

//&НаКлиенте
//Процедура КонтрагентыПриАктивизацииСтроки(Элемент)
//	
//	Если Элементы.Контрагенты.ТекущаяСтрока <> Неопределено Тогда
//		КарточкаКонтрагента = УправлениеКонтактнойИнформацией.ПолучитьКарточкуКонтактаHTML(Элементы.Контрагенты.ТекущаяСтрока, "Контрагенты");
//	КонецЕсли;

//КонецПроцедуры
//&НаКлиенте
//Процедура КонтрагентыПриИзменении(Элемент)
//	КарточкаКонтрагента = УправлениеКонтактнойИнформацией.ПолучитьКарточкуКонтактаHTML(Элементы.Контрагенты.ТекущаяСтрока, "Контрагенты");
//КонецПроцедуры

//&НаКлиенте
//Процедура КонтрагентыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
//	
//	Отказ = Истина;

//	Если Объект.Ссылка.Пустая() Тогда
//	
//	Ответ = Вопрос("Данные еще не записаны" + Символы.ПС + 
//					"Переход к заполнению Контрагентов возможен только после записи данных" + Символы.ПС +
//					"Данные будут записаны", РежимДиалогаВопрос.ОКОтмена, 0);
//	Если Ответ = КодВозвратаДиалога.Отмена Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если НЕ ЗаписатьЭтотОбъект() Тогда
//		Возврат;
//	КонецЕсли;
//	
//	КонецЕсли;

//	СтруктураПараметров = Новый Структура ("Партнер", Объект.Ссылка);	
//	Форма = ПолучитьФорму("Справочник.Контрагенты.Форма.ФормаЭлемента", СтруктураПараметров);
//	Форма.Открыть();
//	
//КонецПроцедуры





