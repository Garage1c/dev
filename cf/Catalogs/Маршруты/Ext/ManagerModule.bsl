
Функция ПолучитьПоследовательность(Ссылка) Экспорт
	
	// Возвращает массив последовательно выстроенных складов
	// каждый элемент массива это другой массив мкладов одного уровня
	
	Массив = Новый Массив;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ Склад ИЗ Справочник.Маршруты.СкладыОтправители ГДЕ Ссылка = &Ссылка;
	|ВЫБРАТЬ Склад ИЗ Справочник.Маршруты.ТранзитныеСклады ГДЕ Ссылка = &Ссылка;
	|ВЫБРАТЬ Склад ИЗ Справочник.Маршруты.СкладыЗаказчики ГДЕ Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Выборки = Запрос.ВыполнитьПакет();
	
	// Вытащим отправителей
	Выгрузка = Выборки[0].Выгрузить(); Если Выгрузка.Количество() Тогда Массив.Добавить(Выгрузка.ВыгрузитьКолонку("Склад")); КонецЕсли;
	
	// Вытащим транзитеров
	Выборка = Выборки[1].Выбрать();
	Пока Выборка.Следующий() Цикл новМассив = Новый Массив; новМассив.Добавить(Выборка.Склад); Массив.Добавить(новМассив); КонецЦикла;
	
	// Вытащим получателей
	Выгрузка = Выборки[2].Выгрузить(); Если Выгрузка.Количество() Тогда Массив.Добавить(Выгрузка.ВыгрузитьКолонку("Склад")); КонецЕсли;
	
	Возврат Массив;
	
КонецФункции

Функция ПолучитьТабЭтапов(СкладОтправитель,СкладПолучатель,Маршрут) Экспорт
	
	Этапы = Новый ТаблицаЗначений;
	Этапы.Колонки.Добавить("Номер");
	Этапы.Колонки.Добавить("СкладОтправитель");
	Этапы.Колонки.Добавить("СкладПолучатель");
	
	Если Не ЗначениеЗаполнено(Маршрут) ИЛИ Маршрут.ТранзитныеСклады.Количество()=0 Тогда
		Стр=Этапы.Добавить();
		Стр.Номер=1;
		Стр.СкладОтправитель = СкладОтправитель;
		Стр.СкладПолучатель = СкладПолучатель;
		Возврат Этапы;
	КонецЕсли;	
	
	Номер=1;
	ПредСклад=СкладОтправитель;
	Для Каждого ТранзитныйСклад Из Маршрут.ТранзитныеСклады Цикл
		Стр=Этапы.Добавить();
		Стр.Номер=Номер;
		Стр.СкладОтправитель = ПредСклад;
		Стр.СкладПолучатель = ТранзитныйСклад.Склад;
		
		ПредСклад = Стр.СкладПолучатель;
		Номер=Номер+1;
	КонецЦикла;	
	
	//
	Стр=Этапы.Добавить();
	Стр.Номер=Номер;
	Стр.СкладОтправитель = ПредСклад;
	Стр.СкладПолучатель = СкладПолучатель;
	
	Возврат Этапы;
	
КонецФункции	

Процедура ЗаполнитьМаршрутыВТаблице(Таб,СкладПолучатель) Экспорт

	Если Таб.Колонки.Найти("Маршрут")=Неопределено Тогда
		Таб.Колонки.Добавить("Маршрут",Новый ОписаниеТипов("Справочник.Маршруты"));
	КонецЕсли;	

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СкладПолучатель",СкладПолучатель);
	
	Запрос.Текст="
	//отбираем получателей
	|выбрать ссылка 
	|Поместить МаршрутыПоПолучателю
	|из справочник.Маршруты.СкладыЗаказчики ГДЕ Склад = &СкладПолучатель И Ссылка.Активный
	|;
	//отбираем отправителей по получателям
	|выбрать ссылка,склад 
	|из справочник.Маршруты.СкладыОтправители ГДЕ Ссылка в (выбрать ссылка из МаршрутыПоПолучателю) и Ссылка.Активный
	|";
	
	Маршруты = Запрос.Выполнить().Выгрузить();
	
	//nested loops
	Для Каждого Стр из Таб Цикл
		Отбор=Новый Структура("Склад",Стр.Размещение);
		ММ = Маршруты.НайтиСтроки(Отбор);
		Если ММ.Количество() Тогда
			Стр.Маршрут = ММ[0].Ссылка;     //берем первый попавшийся маршрут подходящий под условие
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры


Функция ПолучитьМаршрут(СкладОтправитель,СкладПолучатель) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СкладОтправитель",СкладОтправитель);
	Запрос.УстановитьПараметр("СкладПолучатель",СкладПолучатель);
	
	Запрос.Текст="
	//отбираем получателей
	|выбрать ссылка 
	|Поместить МаршрутыПоПолучателю
	|из справочник.Маршруты.СкладыЗаказчики ГДЕ Склад = &СкладПолучатель И Ссылка.Активный
	|;
	//отбираем по отправителю и получателю
	|выбрать ссылка 
	|из справочник.Маршруты.СкладыОтправители ГДЕ Ссылка в (выбрать ссылка из МаршрутыПоПолучателю) и Склад = &СкладОтправитель и Ссылка.Активный
	|";
	
	Маршруты = Запрос.Выполнить().Выгрузить();
	
	Если Маршруты.Количество() Тогда
		Возврат Маршруты[0].Ссылка;
	Иначе	
	   Возврат Неопределено;
	КонецЕсли;   
	
КонецФункции



//массивТаблТоваров - массив таблиц значений. Таблица Товары разбитая на несколько по признаку одинакового размещения
//
Процедура СоздатьПеремещенияПоМаршрутам(массивТаблТоваров,СкладПолучатель,Заказ,Сборка,Отказ) Экспорт
	
	//алгоритм:
	//Получаем этапы перемещений согласно маршрутам
	//При создании каждого перемещения записываем в нему в ТЧ все предыдущие перемещения в цепочке
	//При наличии двух перемещений по одинаковому участку маршрута - объединяем
	
	массивПеремещений = Новый Массив;
	
	//цикл по таблицам товаров. В каждой таблице должно быть одинаковое размещение
	Для Каждого Товары из массивТаблТоваров Цикл
		
		Если Товары.Количество()=0 Тогда Продолжить; КонецЕсли;
		
		СкладОтправитель = Товары[0].Размещение; 
		
		Если СкладОтправитель <> СкладПолучатель Тогда //наш клиент!
			
			Маршрут = ПолучитьМаршрут(СкладОтправитель,СкладПолучатель);
			
			//перемещение без маршрута
			Если Маршрут = Неопределено Тогда
				
				БПСсылка = БизнесПроцессы.ПеремещениеТоваров.ПолучитьСсылку(Новый УникальныйИдентификатор());
				
				Струк = Новый Структура("БПСсылка,Заказ,Заказчик,СкладОтправитель,СкладПолучатель, ПредшествующиеПеремещения,Товары",
										БПСсылка, Заказ,Сборка,  СкладОтправитель,СкладПолучатель, Новый ТаблицаЗначений,	 Товары.Скопировать());
				массивПеремещений.Добавить(Струк);
				
			//перемещение по маршруту	
			Иначе			
				Этапы = ПолучитьТабЭтапов(СкладОтправитель,СкладПолучатель,Маршрут);	
				
				//таблица созданных БП Перемещение. Записывается в ТЧ "Ожидающие перемещения" накопительным итогом по каждому маршруту
				ПредшествующиеПеремещения = Новый ТаблицаЗначений;
				ПредшествующиеПеремещения.Колонки.Добавить("Процесс");
				
				//цикл по этапам маршрута
				Для Каждого Этап из Этапы Цикл
					
					Параллельная = ?(Этап.Номер<>1,Истина,Ложь);
					
					//проверим нет ли готового перемещения по тому же участку
					НетПеремещенийПоДанномуУчастку=Истина;
					
					Для Каждого струк из массивПеремещений Цикл
						Если струк.СкладОтправитель=Этап.СкладОтправитель и струк.СкладПолучатель=Этап.СкладПолучатель Тогда
							НетПеремещенийПоДанномуУчастку = Ложь;
							Прервать;  //В Струк остается ссылка на нужную структуру
						КонецЕсли;
					КонецЦикла;	
					
					
					Если НетПеремещенийПоДанномуУчастку Тогда
						
						БПСсылка = БизнесПроцессы.ПеремещениеТоваров.ПолучитьСсылку(Новый УникальныйИдентификатор());
						
						Струк = Новый Структура("БПСсылка,Заказ,Заказчик,СкладОтправитель,     СкладПолучатель,	  Маршрут,	Параллельная, ПредшествующиеПеремещения,			     Товары",
												БПСсылка,Заказ,Сборка,  Этап.СкладОтправитель,Этап.СкладПолучатель,Маршрут,  Параллельная,ПредшествующиеПеремещения.Скопировать(),Товары.Скопировать());
						
						массивПеремещений.Добавить(Струк);
						
					Иначе//если перемещение по данному участку уже есть, то 
						
						//1. добавим товары в нему в ТЧ
						Для каждого стр из Товары Цикл
							НовСтр = Струк.Товары.Добавить();
							ЗаполнитьЗначенияСвойств(НовСтр,Стр);
						КонецЦикла;
						
						//2. добавим к нему в ТЧ предшествуюшие перемещения 
						Для каждого стр из ПредшествующиеПеремещения Цикл
							НовСтр=струк.ПредшествующиеПеремещения.Добавить();
							НовСтр.Процесс=стр.Процесс;
						КонецЦикла;
						
						БПСсылка = Струк.БПСсылка;
						
					КонецЕсли;
					
					НовСтр = ПредшествующиеПеремещения.Добавить();
					НовСтр.Процесс=БПСсылка;
					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
	//создаем документы
	Для Каждого струк из массивПеремещений Цикл
		
		Если НЕ ДобавитьПеремещение(струк) Тогда
			Отказ=Истина;
			Возврат;
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры	


//Создает перемещения с текущего размещения на один этап согласно маршрутам
//ТЧ Предшествующие перемещения не заполняется
//
//массивТаблТоваров - массив таблиц значений. Таблица Товары разбитая на несколько по признаку одинакового размещения
//
Процедура СоздатьПеремещенияПоПервымЭтапамМаршрутов(массивТаблТоваров,СкладПолучатель,Заказ,Сборка,Отказ) Экспорт
	
	массивПеремещений = Новый Массив;
	
	//цикл по таблицам товаров. В каждой таблице должно быть одинаковое размещение
	Для Каждого Товары из массивТаблТоваров Цикл
		
		Если Товары.Количество()=0 Тогда Продолжить; КонецЕсли;
		
		СкладОтправитель = Товары[0].Размещение; 
		
		Если СкладОтправитель <> СкладПолучатель Тогда 
			
			Маршрут = ПолучитьМаршрут(СкладОтправитель,СкладПолучатель);
			
			//перемещение без маршрута
			Если Маршрут = Неопределено Тогда
				
				БПСсылка = БизнесПроцессы.ПеремещениеТоваров.ПолучитьСсылку(Новый УникальныйИдентификатор());
				
				Струк = Новый Структура("БПСсылка,Заказ,Заказчик,СкладОтправитель,СкладПолучатель, ПредшествующиеПеремещения,Товары",
										БПСсылка, Заказ,Сборка,  СкладОтправитель,СкладПолучатель, Новый ТаблицаЗначений,	 Товары.Скопировать());
				массивПеремещений.Добавить(Струк);
				
			//перемещение по маршруту на один этап	
			Иначе			
				Этапы = ПолучитьТабЭтапов(СкладОтправитель,СкладПолучатель,Маршрут);	
				Этап = Этапы[0];
				
				БПСсылка = БизнесПроцессы.ПеремещениеТоваров.ПолучитьСсылку(Новый УникальныйИдентификатор());
				
				Струк = Новый Структура("БПСсылка,Заказ,Заказчик,СкладОтправитель,СкладПолучатель,		ПредшествующиеПеремещения,Товары",
										 БПСсылка,Заказ,Сборка,  СкладОтправитель,Этап.СкладПолучатель, Новый ТаблицаЗначений,	  Товары.Скопировать());
				
				массивПеремещений.Добавить(Струк);
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
	//создаем документы
	Для Каждого струк из массивПеремещений Цикл
		
		Если НЕ ДобавитьПеремещение(струк) Тогда
			Отказ=Истина;
			Возврат;
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры	




Функция ДобавитьПеремещение(Струк) Экспорт
	
	ЗаказНаПеремещение = Документы.ЗаказНаПеремещение.СоздатьДокумент();
	ЗаказНаПеремещение.Заполнить(Новый Структура("Шапка, Товары", Струк, Струк.Товары)); 
	
	Если Не ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(ЗаказНаПеремещение, РежимЗаписиДокумента.Проведение) Тогда 
		Возврат Ложь; 
	КонецЕсли; 
	
	БППеремещения = БизнесПроцессы.ПеремещениеТоваров.СоздатьБизнесПроцесс();
	БППеремещения.УстановитьСсылкуНового(Струк.БПСсылка);
	БППеремещения.Заполнить(Новый Структура("Шапка, ОжидающиеПеремещения", Струк, Струк.ПредшествующиеПеремещения)); 
	Если Струк.Свойство("ПараллельнаяЗадача") Тогда БППеремещения.ДополнительныеСвойства.Вставить("ПараллельнаяЗадача", Струк.ПараллельнаяЗадача); КонецЕсли;
	
	Если Не ОбщиеФункции.СтартоватьБПИСообщитьЕслиОшибка(БППеремещения) Тогда
		Возврат Ложь; 
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции


