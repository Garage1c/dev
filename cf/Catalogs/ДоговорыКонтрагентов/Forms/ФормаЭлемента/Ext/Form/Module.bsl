

&НаКлиенте
Процедура ЗагрузитьФайлы(Команда)
	
	#Если ВебКлиент Тогда
		// Подключаем расширение работы с файлами
		Если НЕ ПодключитьРасширениеРаботыСФайлами() Тогда
			// Если подключить расширение не удалось - устанавливаем его
			УстановитьРасширениеРаботыСФайлами();
			// и подключаем
			ПодключитьРасширениеРаботыСФайлами();
		КонецЕсли;
	#КонецЕсли
	
	
	ДВ = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДВ.Фильтр = "Текстовый документ(*.txt)|*.txt|Word(*.doc)|*.doc|Текстовый документ(*.pdf)|*.pdf|Текстовый документ с расширением txt в любом регистре|*.[tT][xX][tT]";
	ДВ.МножественныйВыбор = Истина;	
	НачатьПомещениеФайлов(Новый ОписаниеОповещения("ПриемФайлов",ЭтаФорма),,ДВ,Истина,УникальныйИдентификатор);
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриемФайлов(ПомещенныеФайлы, ДополнительныеПараметры)  Экспорт
	
	Если ПомещенныеФайлы = Неопределено Тогда Возврат; 
	КонецЕсли;
	
	Для Каждого ИмяФайла Из ПомещенныеФайлы Цикл
	//	НачатьПолучениеРазмера(Новый ОписаниеОповещения("ПолучитьРазмерФайла",ЭтаФорма));
		
		НовыйАдресФайла = СписокФайлов.Добавить();
		НовыйАдресФайла.АдресФайла     = ИмяФайла.Хранение;
		НовыйАдресФайла.ПолноеИмяФайла = ИмяФайла.Имя;
		МассивНаш = СтрРазделить(ИмяФайла.Имя,"\",);
		
		НовыйАдресФайла.Имя = МассивНаш[МассивНаш.ВГраница()];
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьРазмерФайла(Размер, ДополнительныеПараметры)  Экспорт
	Если Размер = 0 Тогда Возврат;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Для Каждого ИмяФайла Из СписокФайлов Цикл
		Если ИмяФайла.Ссылка.Пустая() Тогда	
			НовыйФайл = Справочники.ХранилищеФайловДоговоров.СоздатьЭлемент();
			НовыйФайл.ИмяФайла  = ИмяФайла.ПолноеИмяФайла;
			НовыйФайл.Хранилище = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(ИмяФайла.АдресФайла));
			НовыйФайл.Владелец  = ТекущийОбъект.Ссылка;
			Если НЕ ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(НовыйФайл) Тогда Отказ = Истина КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ХранилищеФайловДоговоров.ИмяФайла КАК Имя,
	               |	ХранилищеФайловДоговоров.Ссылка,
	               |	ХранилищеФайловДоговоров.Хранилище
	               |ИЗ
	               |	Справочник.ХранилищеФайловДоговоров КАК ХранилищеФайловДоговоров
	               |ГДЕ
	               |	ХранилищеФайловДоговоров.Владелец = &Владелец
	               |	И ХранилищеФайловДоговоров.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("Владелец",Объект.Ссылка);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для каждого Стр из Результат Цикл
		НоваяЗапись = СписокФайлов.Добавить();
		НоваяЗапись.АдресФайла =  ПоместитьВоВременноеХранилище(Стр.Хранилище.Получить(), УникальныйИдентификатор);
		НоваяЗапись.ПолноеИмяФайла = Стр.Имя;
		МассивНаш = СтрРазделить(Стр.Имя,"\",);
		НоваяЗапись.Имя        =  МассивНаш[МассивНаш.ВГраница()];
		НоваяЗапись.Ссылка     =  Стр.Ссылка;
	КонецЦикла;
	
	Если РольДоступна("ПолныеПрава") или РольДоступна("ДоговорСменаСтатуса") Тогда
		Элементы.СтатусДоговора.Доступность = Истина;
	Иначе
	    Элементы.СтатусДоговора.Доступность = Ложь;
	КонецЕсли;
	
	// + neti Муталлапова 21.04.2017
	ЗаполнитьСписокВыбораВариантовДоставки();
	УстановитьВидимостьЭлементовФормы();
	// - neti Муталлапова 21.04.2017

КонецПроцедуры

// + neti Муталлапова 21.04.2017
//заполняет список выбора способов доставки в зависимости от типа контргаента
&НаСервере
Процедура ЗаполнитьСписокВыбораВариантовДоставки()
	
	СписокПоляВыбора = Элементы.ВариантДоставки.СписокВыбора;
	Если Объект.ВидДоговора = Справочники.ВидыДоговоров.НайтиПоКоду("000000002") Тогда 
		Если Объект.Импорт Тогда 
			СписокПоляВыбора.Очистить();
			СписокПоляВыбора.Добавить(Перечисления.ВариантДоставки.СамовывозСТерминала, Строка(Перечисления.ВариантДоставки.СамовывозСТерминала));
			Объект.ВариантДоставки = Перечисления.ВариантДоставки.СамовывозСТерминала; 
		Иначе 
			РаботаСКонтрагентами.ЗаполнитьСписокВариантовДоставкиДляПокупки(СписокПоляВыбора);
		КонецЕсли;
	ИначеЕсли Объект.ВидДоговора = Справочники.ВидыДоговоров.НайтиПоКоду("000000001") Тогда 
		РаботаСКонтрагентами.ЗаполнитьСписокВариантовДоставкиДляПродажки(СписокПоляВыбора);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовФормы()
	
	УстановитьВидимостьИмпорта();
	УстановитьВидимостьПролонгации();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПролонгации()
	Элементы.Пролонгация.Видимость = Объект.ДоговорПролонгируется;	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьИмпорта()
	
	Элементы.Импорт.Видимость = (Объект.ВидДоговора = Справочники.ВидыДоговоров.НайтиПоКоду("000000002"));
	
КонецПроцедуры
// - neti Муталлапова 21.04.2017

&НаКлиенте
Процедура ПрочитатьФайл(ПолученныеФайлы, ДополнительныеПараметры)  Экспорт
	
	Если ПолученныеФайлы = Неопределено Тогда Возврат; 
	КонецЕсли;
	
	Для Каждого Стр Из ПолученныеФайлы Цикл
		НачатьЗапускПриложения(Новый ОписаниеОповещения("ОткрытьВыбранныйФайл",ЭтаФорма),Стр.Имя,,);
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВыбранныйФайл(КодВозврата, ДополнительныеПараметры)  Экспорт
	
	Если КодВозврата = Неопределено Тогда Возврат; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьФайл(Команда)
	
	#Если ВебКлиент Тогда
		// Подключаем расширение работы с файлами
		Если НЕ ПодключитьРасширениеРаботыСФайлами() Тогда
			// Если подключить расширение не удалось - устанавливаем его
			УстановитьРасширениеРаботыСФайлами();
			// и подключаем
			ПодключитьРасширениеРаботыСФайлами();
		КонецЕсли;
	#КонецЕсли
	
	ТекДанные = Элементы.СписокФайлов.ТекущиеДанные;
	
	ПередаваемыеФайлы = Новый Массив;
	Описание = Новый ОписаниеПередаваемогоФайла(ТекДанные.Имя,ТекДанные.АдресФайла);
	ПередаваемыеФайлы.Добавить(Описание);
	
	ДВ = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДВ.Фильтр = "Текстовый документ(*.txt)|*.txt|Word(*.doc)|*.doc|Текстовый документ(*.pdf)|*.pdf|Текстовый документ с расширением txt в любом регистре|*.[tT][xX][tT]";
	НачатьПолучениеФайлов(Новый ОписаниеОповещения("ПрочитатьИСохранитьФайл",ЭтаФорма),ПередаваемыеФайлы,ДВ,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьФайл(Команда)
	
	ТекДанные = Элементы.СписокФайлов.ТекущиеДанные;
	ПометитьФайлНаУдаление(ТекДанные.Ссылка);
	СписокФайлов.Удалить(ТекДанные);
 
КонецПроцедуры

&НаСервере
Процедура ПометитьФайлНаУдаление(СсылкаНаФайл)
	
	ОбъектФайл = СсылкаНаФайл.ПолучитьОбъект();
	ОбъектФайл.УстановитьПометкуУдаления(Истина);
		
КонецПроцедуры	


&НаКлиенте
Процедура ПрочитатьИСохранитьФайл(ПолученныеФайлы, ДополнительныеПараметры)  Экспорт
	
	Если ПолученныеФайлы = Неопределено Тогда Возврат; 
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура СписокФайловВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	#Если ВебКлиент Тогда
		// Подключаем расширение работы с файлами
		Если НЕ ПодключитьРасширениеРаботыСФайлами() Тогда
			// Если подключить расширение не удалось - устанавливаем его
			УстановитьРасширениеРаботыСФайлами();
			// и подключаем
			ПодключитьРасширениеРаботыСФайлами();
		КонецЕсли;
	#КонецЕсли
	
	ТекДанные = Элемент.ТекущиеДанные;
	
	ПередаваемыеФайлы = Новый Массив;
	//Описание = Новый ОписаниеПередаваемогоФайла(ТекДанные.ПолноеИмяФайла,ПолучитьНавигационнуюСсылку(ТекДанные.Ссылка, "Хранилище"));
	//Описание = Новый ОписаниеПередаваемогоФайла(ТекДанные.ПолноеИмяФайла,ТекДанные.АдресФайла);
	Описание = Новый ОписаниеПередаваемогоФайла(ТекДанные.Имя ,ТекДанные.АдресФайла);            

	ПередаваемыеФайлы.Добавить(Описание);
	
	НачатьПолучениеФайлов(Новый ОписаниеОповещения("ПрочитатьФайл",ЭтаФорма),ПередаваемыеФайлы, КаталогВременныхФайлов(), Ложь);//,,"ФайловаяОшибка",ЭтаФорма),ПередаваемыеФайлы, , Ложь);
	
КонецПроцедуры
&НаКлиенте
Процедура ФайловаяОшибка (ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
    Сообщить("При выполнении файловой операции обнаружена ошибка: " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
КонецПроцедуры


&НаСервереБезКонтекста
Функция НовыйНомерДоговора(Контрагент, Организация, ДатаНачала)
	Возврат Справочники.Контрагенты.ПолучитьДинамическийНомерДоговора(Контрагент.Код, Организация, ДатаНачала);
КонецФункции

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
			
		Объект.Наименование = НовыйНомерДоговора(Объект.Владелец, Объект.Организация, Объект.ДатаНачала); 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СрокДействияСПриИзменении(Элемент)
	Объект.Наименование = НовыйНомерДоговора(Объект.Владелец, Объект.Организация, Объект.ДатаНачала); 
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	ПараметрыФоры = Новый Структура;
	ПараметрыФоры.Вставить("Владелец", Объект.Владелец);
	ПараметрыФоры.Вставить("НуженОсновнойДоговор", Истина);
	// + neti Муталлапова 24.04.2017
	//Договоры с периодом действия, пересекающимся с текущим
	СписокПересекающихПериод = СписокДоговровСПересекающимсяПериодом(Объект.ДатаНачала, 
																		Объект.ДатаОкончания,
																		Объект.Владелец,
																		Объект.Ссылка);
	ПараметрыФоры.Вставить("СписокДопустимыхСсылок", СписокПересекающихПериод);
	
	// - neti Муталлапова 24.04.2017
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.Форма.ФормаВыбора", ПараметрыФоры, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура УтверждениеДоговора(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если Модифицированность = Ложь Тогда
			Если НЕ ПроверитьЗаполнениеРеквизитовДоговора() Тогда
				Возврат;
			КонецЕсли;
			
			Если ПроверитьУжеЗапущенныйБП(Объект.Ссылка) Тогда
				УтверждениеДоговораНаСервере(Объект.Ссылка);
				ОткрытьФорму("БизнесПроцесс.УтверждениеДоговора.Форма.ФормаСпискаЗадач");
			КонецЕсли;
		Иначе 
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Договор изменен. Перед запуском процесса утверждения договора его необходимо записать";
			Сообщение.УстановитьДанные(ЭтаФорма);
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьЗаполнениеРеквизитовДоговора()
	
	ПроверкаРеквизитов = Истина;
	
	Если НЕ ЗначениеЗаполнено(Объект.УсловияОплаты) Тогда 	
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не заполнены условия оплаты";
		Сообщение.Поле = "Объект.УсловияОплаты";
		Сообщение.УстановитьДанные(ЭтаФорма);
		Сообщение.Сообщить();	
		
		ПроверкаРеквизитов = Ложь;	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ПредметДоговора) Тогда 	
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не заполнен предмент договора";
		Сообщение.Поле = "Объект.ПредметДоговора";
		Сообщение.УстановитьДанные(ЭтаФорма);
		Сообщение.Сообщить();	
		
		ПроверкаРеквизитов = Ложь;	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидДоговора) Тогда 	
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не заполнен вид договора";
		Сообщение.Поле = "Объект.ВидДоговора";
		Сообщение.УстановитьДанные(ЭтаФорма);
		Сообщение.Сообщить();	
		
		ПроверкаРеквизитов = Ложь;	
	КонецЕсли;
	
	Возврат ПроверкаРеквизитов;
	
КонецФункции

// + neti Муталлапова 24.04.2017
&НаСервереБезКонтекста
Функция СписокДоговровСПересекающимсяПериодом(ДатаНачала, ДатаОкончания, Владелец, Ссылка) 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	&ДатаНачалаДействия = ДАТАВРЕМЯ(1, 1, 1)
	|	И &ДатаОкончанияДействия = ДАТАВРЕМЯ(1, 1, 1)
	|	И ДоговорыКонтрагентов.Владелец = &Владелец
	|	И ДоговорыКонтрагентов.Ссылка <> &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	&ДатаНачалаДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|	И &ДатаОкончанияДействия = ДАТАВРЕМЯ(1, 1, 1)
	|	И ДоговорыКонтрагентов.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)
	|	И ДоговорыКонтрагентов.ДатаОкончания >= &ДатаНачалаДействия
	|	И ДоговорыКонтрагентов.Владелец = &Владелец
	|	И ДоговорыКонтрагентов.Ссылка <> &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	&ДатаНачалаДействия = ДАТАВРЕМЯ(1, 1, 1)
	|	И &ДатаОкончанияДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|	И ДоговорыКонтрагентов.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|	И ДоговорыКонтрагентов.ДатаНачала < &ДатаОкончанияДействия
	|	И ДоговорыКонтрагентов.Владелец = &Владелец
	|	И ДоговорыКонтрагентов.Ссылка <> &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	&ДатаНачалаДействия = ДАТАВРЕМЯ(1, 1, 1)
	|	И &ДатаОкончанияДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|	И ДоговорыКонтрагентов.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)
	|	И ДоговорыКонтрагентов.ДатаНачала <= &ДатаОкончанияДействия
	|	И ДоговорыКонтрагентов.Владелец = &Владелец
	|	И ДоговорыКонтрагентов.Ссылка <> &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	&ДатаНачалаДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|	И &ДатаОкончанияДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|	И ДоговорыКонтрагентов.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)
	|	И ДоговорыКонтрагентов.ДатаНачала <= &ДатаОкончанияДействия
	|	И ДоговорыКонтрагентов.ДатаОкончания >= &ДатаНачалаДействия
	|	И ДоговорыКонтрагентов.Владелец = &Владелец
	|	И ДоговорыКонтрагентов.Ссылка <> &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	&ДатаНачалаДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|	И &ДатаОкончанияДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|	И ДоговорыКонтрагентов.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|	И ДоговорыКонтрагентов.ДатаНачала <= &ДатаОкончанияДействия
	|	И ДоговорыКонтрагентов.Владелец = &Владелец
	|	И ДоговорыКонтрагентов.Ссылка <> &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	&ДатаНачалаДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|	И &ДатаОкончанияДействия = ДАТАВРЕМЯ(1, 1, 1)
	|	И ДоговорыКонтрагентов.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|	И ДоговорыКонтрагентов.Владелец = &Владелец
	|	И ДоговорыКонтрагентов.Ссылка <> &Ссылка";
	
	Запрос.УстановитьПараметр("ДатаНачалаДействия", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончанияДействия", ДатаОкончания);
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции
// - neti Муталлапова 24.04.2017

&НаСервереБезКонтекста
Процедура УтверждениеДоговораНаСервере(Договор)
	
	Процесс = БизнесПроцессы.УтверждениеДоговора.СоздатьБизнесПроцесс();
	Процесс.Дата = ТекущаяДата();
	Процесс.Договор = Договор;
	Процесс.Записать();
	Процесс.Старт();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьУжеЗапущенныйБП(Договор)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(УтверждениеДоговора.Ссылка) КАК УтверждениеДоговораПредставление
	|ИЗ
	|	БизнесПроцесс.УтверждениеДоговора КАК УтверждениеДоговора
	|ГДЕ
	|	УтверждениеДоговора.Стартован
	|	И НЕ УтверждениеДоговора.Завершен
	|	И УтверждениеДоговора.Договор = &Договор" ;
	
	Запрос.УстановитьПараметр("Договор" , Договор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
	 	Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "У договора: " + Договор + " есть незавершенный бизнес процесс: " + Выборка.УтверждениеДоговораПредставление;
		Сообщение.Сообщить();
	Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции	

&НаСервере
Процедура УсловияОплатыПриИзмененииНаСервере()
	
	Объект.ДнейОтсрочки = Объект.УсловияОплаты.КоличествоДнейОтсрочки;

КонецПроцедуры

// + neti Муталлапова 25.04.2017
&НаКлиенте
Процедура neti_УстановитьЗначениеУровняПредоплаты()
	
	Если Объект.УсловияОплаты = ПредопределенноеЗначение("Справочник.УсловияОплаты.Предоплата") Тогда 
		Объект.УровеньПредоплаты = 100;
	Иначе 
		Объект.УровеньПредоплаты = 0;
	КонецЕсли;
	
КонецПроцедуры
// - neti Муталлапова 25.04.2017

&НаКлиенте
Процедура УсловияОплатыПриИзменении(Элемент)
	
	УсловияОплатыПриИзмененииНаСервере();
	
	// + neti Муталлапова 25.04.2017
	neti_УстановитьЗначениеУровняПредоплаты();
	neti_УстановитьДоступностьУровняПредоплаты();
	// - neti Муталлапова 25.04.2017

КонецПроцедуры

&НаКлиенте
Процедура ВидДоговораПриИзменении(Элемент)
	
	ВидДоговораПриИзмененииНаСервере();
	
КонецПроцедуры

// + neti Муталлапова 21.04.2017
&НаСервере
Процедура ВидДоговораПриИзмененииНаСервере()
	
	УстановитьВидимостьИмпорта();
	
	Если Объект.ВидДоговора = Справочники.ВидыДоговоров.НайтиПоКоду("000000001") Тогда
		Объект.Импорт = Ложь;
	КонецЕсли;
	
	ЗаполнитьСписокВыбораВариантовДоставки();
	
КонецПроцедуры


&НаКлиенте
Процедура ИмпортПриИзменении(Элемент)
	
	ЗаполнитьСписокВыбораВариантовДоставки();
	
КонецПроцедуры


&НаКлиенте
Процедура ДоговорПролонгируетсяПриИзменении(Элемент)
	УстановитьВидимостьПролонгации();
КонецПроцедуры

// + neti Муталлапова 23.05.2017
&НаКлиенте
Процедура ОбновитьЛогистическуюСпецификацию(Команда)
	
	ДанныеЛогСпецификации = Новый Структура("Поставщик,Импорт,СпособДоставки", Объект.Владелец, Объект.Импорт, Объект.ВариантДоставки);
	СсылкаНаЛогСпецификацию = ЛогСпецификацияНаСервере(ДанныеЛогСпецификации);
	
	Если ЗначениеЗаполнено(СсылкаНаЛогСпецификацию) Тогда 
		ПоказатьЗначение(, СсылкаНаЛогСпецификацию);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЛогСпецификацияНаСервере(ДанныеЛогСпецификации)
	
	Возврат Справочники.ЛогистическиеСпецификации.ПеренестиДанныеВЛогистическуюСпецификацию(ДанныеЛогСпецификации);
	
КонецФункции
// - neti Муталлапова 23.05.2017

// + neti Муталлапова 25.05.2017
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	neti_УстановитьДоступностьУровняПредоплаты();
КонецПроцедуры

&НаКлиенте
Процедура neti_УстановитьДоступностьУровняПредоплаты()
	Элементы.УровеньПредоплаты.ТолькоПросмотр = (Объект.УсловияОплаты <> ПредопределенноеЗначение("Справочник.УсловияОплаты.ЧастичнаяОплата"));	
КонецПроцедуры
// - neti Муталлапова 25.05.2017