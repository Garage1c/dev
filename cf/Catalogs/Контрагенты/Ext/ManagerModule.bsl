 // Функция определяет значения реквизитов выбранного контрагента.
//
// Параметры:
//  Контрагент - СправочникСсылка.Контрагенты - Ссылка на контрагента
//
// Возвращаемое значение:
//	Структура - реквизиты выбранного контрагента
//
Функция ПолучитьРеквизитыКонтрагента(Контрагент) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Контрагенты.Наименование КАК Наименование,
	|	ВЫРАЗИТЬ(Контрагенты.НаименованиеПолное КАК Строка(1000)) КАК НаименованиеПолное,
	|	Контрагенты.ИНН КАК ИНН,
	|	Контрагенты.КПП КАК КПП,
	|	Контрагенты.КодПоОКПО КАК КодПоОКПО,
	|	Контрагенты.ЮрФизЛицо КАК ЮрФизЛицо
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Ссылка = &Контрагент
	|");
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Представление	= ?(Не ПустаяСтрока(Выборка.НаименованиеПолное), Выборка.НаименованиеПолное, Выборка.Наименование);
		Наименование	= ?(Не ПустаяСтрока(Выборка.НаименованиеПолное), Выборка.НаименованиеПолное, Выборка.Наименование);
		ИНН				= Выборка.ИНН;
		КПП				= Выборка.КПП;
		КодПоОКПО		= Выборка.КодПоОКПО;
		ЮрФизЛицо		= Выборка.ЮрФизЛицо;
	Иначе
		Представление	= "";
		Наименование	= "";
		ИНН				= "";
		КПП				= "";
		КодПоОКПО		= "";
		ЮрФизЛицо		= Перечисления.ЮрФизЛицо.ПустаяСсылка();
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура("Представление, НаименованиеПолное, ИНН, КПП, КодПоОКПО, ЮрФизЛицо",
		Представление,
		Наименование,
		ИНН,
		КПП,
		КодПоОКПО,
		ЮрФизЛицо
	);
	
	Возврат СтруктураРеквизитов;

КонецФункции // ПолучитьРеквизитыКонтрагента()

Процедура Печать_АктСверки(ТабличныйДокумент, ПараметрыПечати) Экспорт
	
	Организация = ПараметрыПечати.Организация;
	Контрагент = ПараметрыПечати.Контрагент;
	ДатаНачала = ПараметрыПечати.НачалоПериода;
	ДатаОкончания =  ПараметрыПечати.КонецПериода;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала",        ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",     КонецДня(ДатаОкончания));
	Запрос.УстановитьПараметр("Организация",       Организация);
	Запрос.УстановитьПараметр("Контрагент",        Контрагент);
	//Запрос.УстановитьПараметр("Валюта",             ВалютаДокумента);
	//Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	//Запрос.УстановитьПараметр("Сделка",             Сделка);
	
	ТекстФильтра = "
	|		Организация = &Организация И Контрагент = &Контрагент ";
	//Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
	//	ТекстФильтра = ТекстФильтра + " И ДоговорКонтрагента = &ДоговорКонтрагента ";
	//Иначе
	//	ТекстФильтра = ТекстФильтра + " И ДоговорКонтрагента.ВалютаВзаиморасчетов = &Валюта ";
	//КонецЕсли;
	
	//Если ЗначениеЗаполнено(Сделка) Тогда
	//	ТекстФильтра = ТекстФильтра + " И Сделка = &Сделка ";
	//КонецЕсли;
	//
	// Остатки
	
	Запрос.Текст = 
	"ВЫБРАТЬ 
	|	ЕСТЬNULL(Взаиморасчеты.СуммаНачальныйОстаток, 0) КАК ОстатокНаНачало,
	|	ЕСТЬNULL(Взаиморасчеты.СуммаКонечныйОстаток, 0)  КАК ОстатокНаКонец
	|ИЗ 
	|	РегистрНакопления.Взаиморасчеты.ОстаткиИОбороты(&ДатаНачала, &ДатаОкончания, , ,"	+ ТекстФильтра + ") КАК Взаиморасчеты";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
	
		ОстатокНаНачало = 0;
		ОстатокНаКонец  = 0;
	
	Иначе
	
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ОстатокНаНачало = Выборка.ОстатокНаНачало;
		ОстатокНаКонец  = Выборка.ОстатокНаКонец;
	
	КонецЕсли;
	
	// Обороты
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Взаиморасчеты.Период КАК Дата,
	|	Взаиморасчеты.Регистратор КАК ДокументРегистратор,
	|	ВЫБОР
	|		КОГДА Взаиморасчеты.СуммаПриход - Взаиморасчеты.СуммаРасход > 0
	|			ТОГДА Взаиморасчеты.СуммаПриход - Взаиморасчеты.СуммаРасход
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Дебет,
	|	ВЫБОР
	|		КОГДА Взаиморасчеты.СуммаПриход - Взаиморасчеты.СуммаРасход < 0
	|			ТОГДА -(Взаиморасчеты.СуммаПриход - Взаиморасчеты.СуммаРасход)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Кредит
	|ИЗ
	|	РегистрНакопления.Взаиморасчеты.Обороты(&ДатаНачала, &ДатаОкончания, Регистратор," + ТекстФильтра + ") КАК Взаиморасчеты
	|ГДЕ
	|	Взаиморасчеты.СуммаПриход <> Взаиморасчеты.СуммаРасход";
	
	Результат = Запрос.Выполнить();
	ТаблицаРезультата = Результат.Выгрузить();
	
	// ПЕЧАТНАЯ ФОРМА
	
	Макет  = Справочники.Контрагенты.ПолучитьМакет("АктСверки");

	ОбластьЗаголовок    = Макет.ПолучитьОбласть("Заголовок");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьНачОстатки   = Макет.ПолучитьОбласть("НачОстатки");
	ОбластьОбороты      = Макет.ПолучитьОбласть("Обороты");
	ОбластьОборотыИтог  = Макет.ПолучитьОбласть("ОборотыИтог");
	ОбластьКонОстатки   = Макет.ПолучитьОбласть("КонОстатки");
	ОбластьПодвал       = Макет.ПолучитьОбласть("Подвал");
	
	НазваниеОрганизации = Организация.НаименованиеПолное;
	Если ПустаяСтрока(НазваниеОрганизации) Тогда
		НазваниеОрганизации = Организация;
	КонецЕсли;
	
	НаименованиеКонтрагента = Контрагент.НаименованиеПолное;
	Если ПустаяСтрока(НаименованиеКонтрагента) Тогда
		НаименованиеКонтрагента = Контрагент;
	КонецЕсли;
	
	ОбластьЗаголовок.Параметры.НазваниеОрганизации = НазваниеОрганизации;
	ОбластьЗаголовок.Параметры.НаименованиеКонтрагента = НаименованиеКонтрагента;
	ИмяПредставителяОрганизации = ""; //ПредставительОрганизации;
	ИмяПредсатвителяКонтрагента = ""; //ПредставительКонтрагента;
	
	ДолжностьПредставителяОрганизации = "";

	ДолжностьПредставителяКонтрагента = "";
	
	ДатаНачалаПериода = ДатаНачала;
	
	ТекстЗаголовка = "взаимных расчетов за период с " + Формат(ДатаНачалаПериода, "ДФ=dd.MM.yyyy") + " по " + Формат(ДатаОкончания, "ДФ=dd.MM.yyyy") + Символы.ПС
					+ "между " + НазваниеОрганизации + Символы.ПС + "и " + НаименованиеКонтрагента;
	ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
	
	ФИОПредставителя = "" + ИмяПредставителяОрганизации;	
	СтрЗаголовокТаблица = "Мы, нижеподписавшиеся, "
				+ ?(ДолжностьПредставителяОрганизации<>"",ДолжностьПредставителяОрганизации,"_______________________")+" "
				+ НазваниеОрганизации 
				+ " " + ?(ФИОПредставителя<>"",ФИОПредставителя,"__________________________________________") + ", с одной стороны, "
				+ "и " + ?(ДолжностьПредставителяКонтрагента<>"",ДолжностьПредставителяКонтрагента,"___________________________") 
				+ " " + НаименованиеКонтрагента + " " 
				+ ?(НЕ ЗначениеЗаполнено(ИмяПредсатвителяКонтрагента),"_____________________________________________",ИмяПредсатвителяКонтрагента) + ", с другой стороны, "
				+ "составили настоящий акт сверки в том, что состояние взаимных расчетов по данным учета следующее:";
	
	ОбластьЗаголовок.Параметры.СтрЗаголовокТаблица = СтрЗаголовокТаблица;
	ОбластьЗаголовок.Параметры.ВалютаДокумента = ОбщиеФункции.ПолучитьЗначениеКонстантыВОбласти("ВалютаУправленческогоУчета");
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);
	ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
	
	ИтСуммаОборотДт      = 0;
	ИтСуммаОборотКт      = 0;
	ИтСуммаОборотДтКонтр = 0;
	ИтСуммаОборотКтКонтр = 0;
	
	НачОстДебет  = ?(ОстатокНаНачало > 0, ОстатокНаНачало, 0);
	НачОстКредит = ?(ОстатокНаНачало < 0, -ОстатокНаНачало, 0);
	
	//ОстатокНаКонец = ОстатокНаНачало + ПоДаннымОрганизации.Итог("Дебет") -  ПоДаннымОрганизации.Итог("Кредит");
	//
	//КонОстДебет  = ?(ОстатокНаКонец > 0, ОстатокНаКонец, 0);
	//КонОстКредит = ?(ОстатокНаКонец < 0, -ОстатокНаКонец, 0);
	//
	//ОстатокНаКонецК = -ОстатокНаНачало + ПоДаннымКонтрагента.Итог("Дебет") -  ПоДаннымКонтрагента.Итог("Кредит");
	//
	//КонОстДебетК  = ?(ОстатокНаКонецК > 0, ОстатокНаКонецК, 0);
	//КонОстКредитК = ?(ОстатокНаКонецК < 0, -ОстатокНаКонецК, 0);
	//
	ОбластьНачОстатки.Параметры.СуммаНачальныйОстатокДт = НачОстДебет;
	ОбластьНачОстатки.Параметры.СуммаНачальныйОстатокКт = НачОстКредит;
	ТабличныйДокумент.Вывести(ОбластьНачОстатки);
	//
	//ТабДок.НачатьАвтогруппировкуСтрок();
	//
	//МаксИндекс = Макс(ПоДаннымОрганизации.Количество(), ПоДаннымКонтрагента.Количество()) - 1;
	//Для Инд = 0 По МаксИндекс Цикл
	//	Если Инд < ПоДаннымОрганизации.Количество() Тогда
	//		СтрокаОрганизации = ПоДаннымОрганизации[Инд];
	//		Регистратор = 	СтрокаОрганизации.Представление;
	//		СуммаОборотДт = СтрокаОрганизации.Дебет;
	//		СуммаОборотКт = СтрокаОрганизации.Кредит;
	//		ОбластьОбороты.Параметры.СуммаОборотДт = СуммаОборотДт;
	//		ОбластьОбороты.Параметры.СуммаОборотКт = СуммаОборотКт;
	//		ИтСуммаОборотДт = ИтСуммаОборотДт + СуммаОборотДт;
	//		ИтСуммаОборотКт = ИтСуммаОборотКт + СуммаОборотКт;
	//		ОбластьОбороты.Параметры.РегистраторПредставление = СтрокаОрганизации.Представление;
	//		ОбластьОбороты.Параметры.Регистратор = СтрокаОрганизации.ДокументРегистратор;
	//		ОбластьОбороты.Параметры.ДатаДокумента = Формат(СтрокаОрганизации.Дата,"ЧЦ=21; ЧДЦ=2; ДФ=dd.MM.yy");
	//	Иначе
	//		ОбластьОбороты.Параметры.СуммаОборотДт = "";
	//		ОбластьОбороты.Параметры.СуммаОборотКт = "";
	//		ОбластьОбороты.Параметры.РегистраторПредставление = "";
	//		ОбластьОбороты.Параметры.Регистратор = "";
	//		ОбластьОбороты.Параметры.ДатаДокумента = "";
	//	КонецЕсли;
	//	Если Инд < ПоДаннымКонтрагента.Количество() Тогда
	//		СтрокаОрганизации = ПоДаннымКонтрагента[Инд];
	//		Регистратор = 	СтрокаОрганизации.Представление;
	//		СуммаОборотДт = СтрокаОрганизации.Дебет;
	//		СуммаОборотКт = СтрокаОрганизации.Кредит;
	//		ОбластьОбороты.Параметры.СуммаОборотДтКонтр = СуммаОборотДт;
	//		ОбластьОбороты.Параметры.СуммаОборотКтКонтр = СуммаОборотКт;
	//		ИтСуммаОборотДтКонтр = ИтСуммаОборотДтКонтр + СуммаОборотДт;
	//		ИтСуммаОборотКтКонтр = ИтСуммаОборотКтКонтр + СуммаОборотКт;
	//		ОбластьОбороты.Параметры.РегистраторПредставлениеКонтр = СтрокаОрганизации.Представление;
	//		ОбластьОбороты.Параметры.ДатаДокументаКонтр = Формат(СтрокаОрганизации.Дата,"ЧЦ=21; ЧДЦ=2; ДФ=dd.MM.yy");
	//	Иначе
	//		ОбластьОбороты.Параметры.СуммаОборотДтКонтр = "";
	//		ОбластьОбороты.Параметры.СуммаОборотКтКонтр = "";
	//		ОбластьОбороты.Параметры.РегистраторПредставлениеКонтр = "";
	//		ОбластьОбороты.Параметры.ДатаДокументаКонтр = "";
	//	КонецЕсли;
	//	ТабДок.Вывести(ОбластьОбороты);
	//КонецЦикла;
	//
	//ТабДок.ЗакончитьАвтогруппировкуСтрок();
	//
	//ОбластьОборотыИтог.Параметры.СуммаОборотДт      = ИтСуммаОборотДт;
	//ОбластьОборотыИтог.Параметры.СуммаОборотКт      = ИтСуммаОборотКт;
	//Если СверкаСогласована тогда
	//	ОбластьОборотыИтог.Параметры.СуммаОборотДтКонтр = ИтСуммаОборотДтКонтр;
	//	ОбластьОборотыИтог.Параметры.СуммаОборотКтКонтр = ИтСуммаОборотКтКонтр;
	//КонецЕсли;
	//ТабДок.Вывести(ОбластьОборотыИтог);
	//
	//ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокДт = КонОстДебет;
	//ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокКт = КонОстКредит;
	//
	//Если СверкаСогласована тогда
	//	ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокДтКонтр = КонОстДебетК;
	//	ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокКтКонтр = КонОстКредитК;
	//КонецЕсли;
	//
	//ТабДок.Вывести(ОбластьКонОстатки);
	//
	//// Результаты сверки
	//
	//   Если ПоДаннымОрганизации.Количество() = 0 и ОстатокНаНачало = 0 Тогда
	//	   РезультатыСверки = "<сверка не проведена>";
	//  ИначеЕсли НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
	//	   РезультатыСверки = "<не указана дата сверки>";
	//   ИначеЕсли НЕ ЗначениеЗаполнено(Контрагент) Тогда
	//	   РезультатыСверки = "<не указан контрагент>";
	//   Иначе
	//	РезультатыСверки = "на " + Формат(ДатаОкончания, "ДФ=dd.MM.yyyy") + " задолженность ";
	//		
	//   	Если ОстатокНаКонец > 0 Тогда
	//		РезультатыСверки = РезультатыСверки + "в пользу " + СокрЛП(НазваниеОрганизации) + " " + Формат(ОстатокНаКонец, "ЧЦ=21; ЧДЦ=2") + " " + строка(ВалютаДокумента);
	//
	//   	ИначеЕсли ОстатокНаКонец < 0 Тогда
	//		РезультатыСверки = РезультатыСверки + "в пользу " + СокрЛП(НаименованиеКонтрагента) + " " + Формат(-ОстатокНаКонец, "ЧЦ=21; ЧДЦ=2") + " " + строка(ВалютаДокумента);
	//
	//   	Иначе
	//   		РезультатыСверки = РезультатыСверки + "отсутствует.";
	//   	КонецЕсли;
	//КонецЕсли;
	//ОбластьПодвал.Параметры.РезультатыСверки = РезультатыСверки;
	//
	//Если СверкаСогласована тогда
	//	ОбластьПодвал.Параметры.ПоДаннымКонтрагента = "По данным " + СокрЛП(НаименованиеКонтрагента);
	//	
	//   	Если ПоДаннымКонтрагента.Количество() = 0 и ОстатокНаНачало = 0 Тогда
	//   		РезультатыСверки = "<сверка не проведена>";
	//  	ИначеЕсли НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
	//   		РезультатыСверки = "<не указана дата сверки>";
	//   	ИначеЕсли НЕ ЗначениеЗаполнено(Контрагент) Тогда
	//   		РезультатыСверки = "<не указан контрагент>";
	//   	Иначе
	//		РезультатыСверки = "на " + Формат(ДатаОкончания, "ДФ=dd.MM.yyyy") + " задолженность ";
	//			
	//	   	Если ОстатокНаКонецК < 0 Тогда
	//			РезультатыСверки = РезультатыСверки + "в пользу " + СокрЛП(НазваниеОрганизации) + " " + Формат(-ОстатокНаКонецК, "ЧЦ=21; ЧДЦ=2") + " " + строка(ВалютаДокумента);
	//	
	//	   	ИначеЕсли ОстатокНаКонецК > 0 Тогда
	//			РезультатыСверки = РезультатыСверки + "в пользу " + СокрЛП(НаименованиеКонтрагента) + " " + Формат(ОстатокНаКонецК, "ЧЦ=21; ЧДЦ=2") + " " + строка(ВалютаДокумента);
	//	
	//	   	Иначе
	//	   		РезультатыСверки = РезультатыСверки + "отсутствует.";
	//	   	КонецЕсли;
	//   	КонецЕсли;
	//	
	//	ОбластьПодвал.Параметры.РезультатыСверкиК = РезультатыСверки;
	//	
	//	Если ОстатокНаКонец+ОстатокНаКонецК<>0 Тогда
	//		 ИтогСверки = "В результате сверки выявлено расхождение информации о состоянии расчетов в размере "+Формат(?(ОстатокНаКонец+ОстатокНаКонецК>0,1,-1)*(ОстатокНаКонец+ОстатокНаКонецК), "ЧЦ=21; ЧДЦ=2") +" "+ Строка(ВалютаДокумента);
	//		 ОбластьПодвал.Параметры.ИтогСверки = Символы.ПС+ ИтогСверки+Символы.ПС+" ";
	//	КонецЕсли; 
	//КонецЕсли;
	//
	//ОбластьПодвал.Параметры.НазваниеОрганизации = СокрЛП(НазваниеОрганизации);
	//ОбластьПодвал.Параметры.НаименованиеКонтрагента = СокрЛП(НаименованиеКонтрагента);
	//
	//ОбластьПодвал.Параметры.Должность = "________________";
	//ОбластьПодвал.Параметры.ДолжностьК ="________________";
	//
	//ОбластьПодвал.Параметры.ФИОПредставителя  = "("+ ФИОПредставителя +")";
	//ОбластьПодвал.Параметры.ФИОПредставителяК = "("+?(НЕ ЗначениеЗаполнено(ПредставительКонтрагента),"_______________________",ПредставительКонтрагента)+")";
	//
	//ТабДок.Вывести(ОбластьПодвал);
	//
	//Возврат ТабДок;
	//


	
КонецПроцедуры

Функция ОсновнаяОрганизацияКонтрагента(Ссылка) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 Организация
	|ИЗ
	|	Справочник.Контрагенты.Организации
	|ГДЕ
	|	Ссылка = &Ссылка
	|УПОРЯДОЧИТЬ ПО ЗначениеПоУмолчанию Убыв
	|");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Организация;
	КонецЕсли;
	Возврат Справочники.Организации.ПустаяСсылка();
КонецФункции 

Функция ПолучитьПартнераКонтрагента(Ссылка) Экспорт
	Возврат Ссылка.Партнер;
КонецФункции

Функция КонтрагентРаботаетСОрганизацией(Ссылка, Организация) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ ЗначениеПоУмолчанию ИЗ Справочник.Контрагенты.Организации ГДЕ Ссылка = &Ссылка И Организация = &Организация");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция КонтрагентОтноситсяКПартнеру(Ссылка, Партнер) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
    |	ВЫБОР
    |		КОГДА Табл.УПартнераОдинКонтрагент
    |		ТОГДА ИСТИНА
    |		ИНАЧЕ Спр.ЗначениеПоУмолчанию
    |	КОНЕЦ КАК ЗначениеПоУмолчанию
    |ИЗ
    |(
	|	ВЫБРАТЬ
    |		ПартнерСправочник.Ссылка КАК Партнер,
    |		ВЫБОР
    |			КОГДА КОЛИЧЕСТВО(КонтрСправочник.Ссылка) = 1
    |			ТОГДА ИСТИНА
    |			ИНАЧЕ ЛОЖЬ
    |		КОНЕЦ КАК УПартнераОдинКонтрагент
    |	ИЗ
    |		Справочник.Партнеры КАК ПартнерСправочник
    |			
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			Справочник.Контрагенты КАК КонтрСправочник
    |		ПО  ПартнерСправочник.Ссылка = КонтрСправочник.Партнер
    |	ГДЕ
    |		ПартнерСправочник.Ссылка = &Партнер
    |	
    |	СГРУППИРОВАТЬ ПО
    |		ПартнерСправочник.Ссылка
	|) Табл
    |	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		Справочник.Контрагенты КАК Спр
    |	ПО  Табл.Партнер = Спр.Партнер
    |ГДЕ
    |	Спр.Ссылка = &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Партнер", Партнер);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьДинамическийНомерДоговора(Код, Организация, ДатаНачала) Экспорт
	
	
	Возврат Прав(Код,6) + "/" + Организация.ПрефиксКНомеруДоговора + "-" + Формат(ДатаНачала,"ДФ=yy");
	
КонецФункции



Функция ПолучитьЭлектроннуюПочтуПартнера(Ссылка) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 Представление ИЗ РегистрСведений.ПредставлениеКонтактнойИнформации ГДЕ Объект = &Ссылка и Вид В ИЕРАРХИИ (ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресЭлектроннойПочты)) УПОРЯДОЧИТЬ ПО ЗначениеПоУмолчанию Убыв");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда Возврат Выборка.Представление; КонецЕсли;
	
	Возврат "";
	
КонецФункции


Функция ПолучитьОсновногоМенеджераПартнера(Дата, Контрагент) Экспорт
	
	Если Дата = ТекущаяДата() Тогда Возврат Контрагент.ОсновнойМенеджер;
	Иначе
		Запрос = Новый Запрос ("ВЫБРАТЬ Менеджер ИЗ РегистрСведений.ОсновнойМенеджерПартнера.СрезПоследних(&Период, Контрагент = &Контрагент)");
		Запрос.УстановитьПараметр("Период", Дата);
		Запрос.УстановитьПараметр("Контрагент", Контрагент);

		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Менеджер;
		Иначе
			Возврат Контрагент.ОсновнойМенеджер;
		КонецЕсли;
	КонецЕсли;

КонецФункции


