
Процедура УстановитьФлагПараллельныхЗадач(ПроцессСборка, Параллельность = Ложь, ТекЗадачаСсылка = Неопределено) Экспорт
	
	ВОЗВРАТ;
	
	// Устанавливает/снимает флаг паралелльности для задач по указанному БП
	
	ПаралелльныеМаршруты = Новый Массив;
	//ПаралелльныеМаршруты.Добавить(БизнесПроцессы.СборкаЗаказа.ТочкиМаршрута.СобратьТовары);
	//ПаралелльныеМаршруты.Добавить(БизнесПроцессы.СборкаЗаказа.ТочкиМаршрута.Переместить);
	//ПаралелльныеМаршруты.Добавить(БизнесПроцессы.СборкаЗаказа.ТочкиМаршрута.ВложеннаяСборка);
	//ПаралелльныеМаршруты.Добавить(БизнесПроцессы.СборкаЗаказа.ТочкиМаршрута.ВложеннаяСборка2);
	
	Сборки = Новый Массив;
	БизнесПроцессы.СборкаЗаказа.ДобавитьВложенныеСборки(ПроцессСборка, 	Сборки);
	БизнесПроцессы.СборкаЗаказа.ДобавитьСборкиРодители(ПроцессСборка, 	Сборки);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ Ссылка ИЗ
	|	Задача.ЗадачаПользователю
	|ГДЕ
	|	БизнесПроцесс В(&Процессы) И
	|	Не Выполнена И
	|	Ссылка <> &ТекЗадачаСсылка И
	|	ТочкаМаршрута В(&ПаралелльныеМаршруты)
	|;
	|ВЫБРАТЬ Ссылка, Параллельная ИЗ
	|	Задача.ЗадачаПользователю
	|ГДЕ
	|	Не Выполнена И
	|	Ссылка <> &ТекЗадачаСсылка И
	|	БизнесПроцесс В(&Процессы) И
	|	ТочкаМаршрута = &ТочкаСкорректироватьЗаказ
	|");
	
	Запрос.УстановитьПараметр("ТочкаСкорректироватьЗаказ", 	БизнесПроцессы.СборкаЗаказа.ТочкиМаршрута.СкорректироватьЗаказ);
	Запрос.УстановитьПараметр("Процессы", 					Сборки);
	Запрос.УстановитьПараметр("ПаралелльныеМаршруты",		ПаралелльныеМаршруты);
	Запрос.УстановитьПараметр("ТекЗадачаСсылка",			ТекЗадачаСсылка);
	
	Пакет = Запрос.ВыполнитьПакет();
	Параллельность = Не Пакет[0].Пустой();
	
	Выборка = Пакет[1].Выбрать();
	Пока Выборка.Следующий() Цикл Если Выборка.Параллельная <> Параллельность Тогда
		
		ЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗадачаОбъект.Параллельная = Параллельность;
		
		ЗадачаОбъект.Записать(); КонецЕсли; КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьСобытиеФормированияПечатнойФормы(ЗадачаСсылка) Экспорт
	
	ИсторияПечатиМенеджер = РегистрыСведений.ИсторияПечатиСборочногоЛиста.СоздатьМенеджерЗаписи();
	ИсторияПечатиМенеджер.Период = ТекущаяДата();
	ИсторияПечатиМенеджер.ЗадачаПользователю = ЗадачаСсылка;
	ИсторияПечатиМенеджер.Пользователь = ПараметрыСеанса.ТекущийПользователь;
	ИсторияПечатиМенеджер.Записать();
	
КонецПроцедуры

Функция ПолучитьСтрокуПризнакаПечати(ЗадачаСсылка) Экспорт
	
	СтрокаПризнакаПечати = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИсторияПечатиСборочногоЛистаСрезПоследних.Период,
	|	ПРЕДСТАВЛЕНИЕ(ИсторияПечатиСборочногоЛистаСрезПоследних.Пользователь)
	|ИЗ
	|	РегистрСведений.ИсторияПечатиСборочногоЛиста.СрезПоследних(, ЗадачаПользователю = &ЗадачаПользователю) КАК ИсторияПечатиСборочногоЛистаСрезПоследних";
	
	Запрос.УстановитьПараметр("ЗадачаПользователю", ЗадачаСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		
		СтрокаПризнакаПечати = "Последняя печать выполнена пользователем " 
								+ Выборка.ПользовательПредставление
								+ " "
								+ Формат(Выборка.Период, "");
	КонецЕсли;
							
	Возврат СтрокаПризнакаПечати;
	
КонецФункции