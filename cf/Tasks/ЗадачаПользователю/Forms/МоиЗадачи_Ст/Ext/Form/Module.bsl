
&НаСервере
Функция ПолучитьДоверяющихМне(выбПользователь)
	
	ДоверяющиеМне = Новый Массив;
	
	Запрос = Новый Запрос("ВЫБРАТЬ Пользователь ИЗ РегистрСведений.ДоверенныеЛицаПользователя ГДЕ ДоверенноеЛицо = &Пользователь И ВидитСписокМоихЗадач = ИСТИНА"); 
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	Рез = Запрос.Выполнить();
	Если НЕ Рез.Пустой() Тогда
		ДоверяющиеМне = Рез.Выгрузить().ВыгрузитьКолонку("Пользователь");
	КонецЕсли;
	
	Возврат ДоверяющиеМне;
	
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Внешнее оборудование
	
	КнопкаТСД = Элементы.Найти("ЗагрузитьИзТСД");
	Если КнопкаТСД <> Неопределено И Не ВнешнееОборудование.ЕстьУстановленныйСканер() Тогда
		Элементы.ЗагрузитьИзТСД.Видимость = Ложь; КонецЕсли;
	
КонецПроцедуры
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Пользователь = ПараметрыСеанса.ТекущийПользователь; 
   	
	СписокТекущих.Параметры.УстановитьЗначениеПараметра("ПараллельныеЗадачи", 	Ложь);
	
	СписокТекущих.Параметры.УстановитьЗначениеПараметра("ТекущийПользователь", 	Пользователь);
	СписокТекущих.Параметры.УстановитьЗначениеПараметра("ПустойПользователь", 	Справочники.Пользователи.ПустаяСсылка());
	
	СписокТекущих.Параметры.УстановитьЗначениеПараметра("ЕстьФильтрДовернныеМнеЗадачи", ДоверенныеМнеЗадачи);
	СписокТекущих.Параметры.УстановитьЗначениеПараметра("ДоверяющиеМне", ПолучитьДоверяющихМне(Пользователь));
	
	СписокТекущих.Параметры.УстановитьЗначениеПараметра("ПустойСклад", 		Справочники.Склады.ПустаяСсылка());
	СписокТекущих.Параметры.УстановитьЗначениеПараметра("МоиСклады", 		КэшируемыеФункции.ПолучитьМоиСклады());
	
	СписокТекущих.Параметры.УстановитьЗначениеПараметра("ПустаяРоль",		Справочники.Роли.ПустаяСсылка());
	СписокТекущих.Параметры.УстановитьЗначениеПараметра("МоиРоли", 			ПараметрыСеанса.ТекущиеРоли);
	
		//СписокТекущих.Параметры.УстановитьЗначениеПараметра("ПустаяВажность", 		Справочники.ВажностиЗадач.ПустаяСсылка());
		//СписокТекущих.Параметры.УстановитьЗначениеПараметра("ОбычнаяВажность", 		Справочники.ВажностиЗадач.Обычная);
		//СписокТекущих.Параметры.УстановитьЗначениеПараметра("РангОбычнойВажности", 	Справочники.ВажностиЗадач.Обычная.Ранг);
	
	СписокТекущих.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", 	ТекущаяДата());
	СписокТекущих.Параметры.УстановитьЗначениеПараметра("ПустаяДата", 	'00010101');
	
	НеПоказыватьТочки = Новый Массив;
	НеПоказыватьТочки.Добавить(БизнесПроцессы.ИнтернетЗаявка.ТочкиМаршрута.СборкаЗаказа);
	НеПоказыватьТочки.Добавить(БизнесПроцессы.ИнтернетЗаявка.ТочкиМаршрута.ОжиданиеОплаты);
	НеПоказыватьТочки.Добавить(БизнесПроцессы.ИнтернетЗаявка.ТочкиМаршрута.ОжиданиеОтвета);
	НеПоказыватьТочки.Добавить(БизнесПроцессы.ЗаявкаПокупателя.ТочкиМаршрута.СборкаЗаказа);
	НеПоказыватьТочки.Добавить(БизнесПроцессы.ЗаявкаПокупателя.ТочкиМаршрута.ПеремещениеТоваров);
	НеПоказыватьТочки.Добавить(БизнесПроцессы.СборкаЗаказа.ТочкиМаршрута.Переместить);
	НеПоказыватьТочки.Добавить(БизнесПроцессы.СборкаЗаказа.ТочкиМаршрута.ПереместитьКогдаСобран);
	СписокТекущих.Параметры.УстановитьЗначениеПараметра("НеПоказыватьТочки", 			НеПоказыватьТочки);
	
	СписокВыполненных.Параметры.УстановитьЗначениеПараметра("СборкаИнтернетЗаказа", 		БизнесПроцессы.ИнтернетЗаявка.ТочкиМаршрута.СборкаЗаказа);
	СписокВыполненных.Параметры.УстановитьЗначениеПараметра("СборкаЗаказаПокупателя", 		БизнесПроцессы.ЗаявкаПокупателя.ТочкиМаршрута.СборкаЗаказа);
	СписокВыполненных.Параметры.УстановитьЗначениеПараметра("Перемещение1", 				БизнесПроцессы.ЗаявкаПокупателя.ТочкиМаршрута.ПеремещениеТоваров);
	СписокВыполненных.Параметры.УстановитьЗначениеПараметра("Перемещение2", 				БизнесПроцессы.СборкаЗаказа.ТочкиМаршрута.Переместить);
	
	
	СписокВыполненных.Параметры.УстановитьЗначениеПараметра("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
	СписокВыполненных.Параметры.УстановитьЗначениеПараметра("СборкаЗаказа", 	БизнесПроцессы.ИнтернетЗаявка.ТочкиМаршрута.СборкаЗаказа);
	
	// Иницилизируем фильтры
	
	СписокТекущих.Параметры.УстановитьЗначениеПараметра("ПустаяОчередь", 	Справочники.ПредставлениеОчередиСборкиЗаказа.ПустаяСсылка());
	СписокТекущих.Параметры.УстановитьЗначениеПараметра("ПустаяДата", 		'00010101');
	СписокТекущих.Параметры.УстановитьЗначениеПараметра("ПустойПартнер",	Справочники.Партнеры.ПустаяСсылка());
	СписокТекущих.Параметры.УстановитьЗначениеПараметра("ЕстьФильтрРоль",	Ложь);
	СписокТекущих.Параметры.УстановитьЗначениеПараметра("Роль", 			Неопределено);
	
	ОбновитьБыстрыеФильтры();
	
	// Заполним список выбора маршрута
	
	Список = Элементы.ТочкаМаршрутаФильтр.СписокВыбора;
	Список.Добавить(БизнесПроцессы.ЗаявкаПокупателя.ТочкиМаршрута.ФормированиеЗаказа);
	Список.Добавить(БизнесПроцессы.ИнтернетЗаявка.ТочкиМаршрута.ОбработатьЗаказ);
	Список.Добавить(БизнесПроцессы.СборкаЗаказа.ТочкиМаршрута.СкорректироватьЗаказ);
	Список.Добавить(БизнесПроцессы.СборкаЗаказа.ТочкиМаршрута.СобратьЗаказ);
	Список.Добавить(БизнесПроцессы.ПеремещениеТоваров.ТочкиМаршрута.ОтправитьТовар);
	Список.Добавить(БизнесПроцессы.ПеремещениеТоваров.ТочкиМаршрута.ПринятьТовар);
	Список.Добавить(БизнесПроцессы.СборкаЗаказа.ТочкиМаршрута.ОтгрузитьЗаказ);
	
	РолиПользователя.ЗагрузитьЗначения(ПолучитьРолиПользователя(Пользователь));
	
	// 
	
	УстановитьПользователя(Пользователь.Ссылка);  // эта строка вставлена, иначе если заходить под семеновым то у него задачи не обновляются пока не пперевыбереш его
	
КонецПроцедуры
&НаСервере
Процедура ОбновитьБыстрыеФильтры()
	
	СписокТекущих.Параметры.УстановитьЗначениеПараметра("НомерЗаказа", 		НомерЗаказа);
	СписокТекущих.Параметры.УстановитьЗначениеПараметра("Партнер", 			Партнер);
	//СписокТекущих.Параметры.УстановитьЗначениеПараметра("ТочкаМаршрута", 	ТочкаМаршрута);
	СписокТекущих.Параметры.УстановитьЗначениеПараметра("Очередь", 			Очередь);
	СписокТекущих.Параметры.УстановитьЗначениеПараметра("ПланируемаяДатаОтгрузки", ПланируемаяДатаОтгрузки);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМоиРоли()
	МассивРолей = Новый Массив;
	Для Каждого Элемент ИЗ ПараметрыСеанса.ТекущиеРоли Цикл
		МассивРолей.Добавить(Элемент);
	КонецЦикла;
	Возврат МассивРолей;
КонецФункции


&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если 	ИмяСобытия = СобытияСистемы.Событие_ЗаписанаЗадача() Или
			ИмяСобытия = СобытияСистемы.Событие_ЗаписанБизнесПроцесс() Тогда
		
		Элементы.СписокВыполненных.Обновить();
		Элементы.СписокТекущих.Обновить();
				
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПолучитьИмяБП(ИмяСписка)
	
	ТекСтрока = Элементы.Найти(ИмяСписка).ТекущаяСтрока;
	
	Если 	ТекСтрока <> Неопределено И 
			Метаданные.БизнесПроцессы.Содержит(Метаданные.НайтиПоТипу(ТипЗнч(ТекСтрока.БизнесПроцесс)))Тогда
			
		Возврат Метаданные.НайтиПоТипу(ТипЗнч(ТекСтрока.БизнесПроцесс)).Имя;
			
	КонецЕсли;
	
	Возврат "";	
		
КонецФункции

&НаСервере
Процедура ПолучитьЗадачу(Задача)
	  а=1;
КонецПроцедуры

&НаКлиенте
Процедура СписокТекущихВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	//ПолучитьЗадачу(ВыбраннаяСтрока);
	
	Если ТипЗнч(Элемент.ТекущиеДанные.БизнесПроцесс) = Тип("БизнесПроцессСсылка.ЗадачаРазработчику") Тогда
		
		СтандартнаяОбработка 	= Ложь;
		ТекДанные 				= Элемент.ТекущиеДанные;
		
		Если 	ТекДанные.РодительскаяГруппировкаСтроки <> Неопределено Тогда
			
			ТекИмяФормы = ПолучитьИмяБП("СписокТекущих");
			
			Если ТекИмяФормы <> "" Тогда
			
				ОткрытьФорму("БизнесПроцесс." + ТекИмяФормы + ".ФормаОбъекта", 
								Новый Структура("Ключ", ТекДанные.БизнесПроцесс));
								
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура СписокВыполненныхВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	//ТекДанные = Элемент.ТекущиеДанные;
	//
	//Если ОткрыватьБП("СписокВыполненных") Тогда
	//	
	//	СтандартнаяОбработка = Ложь;
	//	
	//	ОткрытьФорму("БизнесПроцесс.ЗадачаРазработчику.ФормаОбъекта", 
	//						Новый Структура("Ключ", ТекДанные.БизнесПроцесс));
	//	
	//КонецЕсли;
	
КонецПроцедуры


// БЫСТРЫЕ ФИЛЬТРЫ

&НаСервере
Функция ПолучитьСкладыПользователя(выбПользователь) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ Склад ИЗ РегистрСведений.СкладыПользователя ГДЕ Пользователь = &ТекПользователь");	
	Запрос.УстановитьПараметр("ТекПользователь", выбПользователь);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Склад");
	
КонецФункции
&НаСервере
Функция ПолучитьРолиПользователя(ВыбПользователь)
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ 	Роль 
		|ПОМЕСТИТЬ 	СписокРолей
		|ИЗ 		РегистрСведений.РолиПользователей 
		|ГДЕ 		Пользователь = &Пользователь
		|;
		|ВЫБРАТЬ 	Ссылка КАК Роль
		|ИЗ 		Справочник.Роли
		|ГДЕ		Ссылка В ИЕРАРХИИ(ВЫБРАТЬ Роль ИЗ СписокРолей КАК СписокРолей)
		|");
		
	Запрос.УстановитьПараметр("Пользователь", ВыбПользователь);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Роль");
					
КонецФункции

&НаСервере
Функция УстановитьПользователя(выбПользователь = Неопределено)
	
	Если выбПользователь = Неопределено Тогда
		выбПользователь = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
	СписокТекущих.Параметры.УстановитьЗначениеПараметра("ТекущийПользователь", 	выбПользователь);
	СписокТекущих.Параметры.УстановитьЗначениеПараметра("МоиСклады", 			ПолучитьСкладыПользователя(выбПользователь));
	СписокТекущих.Параметры.УстановитьЗначениеПараметра("МоиРоли", 				ПолучитьРолиПользователя(выбПользователь));
	
	// обновим фильтр по ролям
	РолиПользователя.ЗагрузитьЗначения(ПолучитьРолиПользователя(Пользователь));
	СписокТекущих.Параметры.УстановитьЗначениеПараметра("Роль", 				ПолучитьРолиПользователя(выбПользователь));
	
КонецФункции

&НаКлиенте
Процедура ОчиститьВсеФильтры(Команда)
	
	НомерЗаказа 	= "";
	Партнер 		= Неопределено;
	ТочкаМаршрута	= Неопределено;
	РолиПользователя.ЗагрузитьЗначения(ПолучитьРолиПользователя(Пользователь));
	СписокТекущих.Параметры.УстановитьЗначениеПараметра("ЕстьФильтрРоль", Ложь);
	Очередь			= Неопределено;
	ПланируемаяДатаОтгрузки = '00010101';
	
	ОбновитьБыстрыеФильтры();
	
КонецПроцедуры

&НаКлиенте
Процедура ДрПользовательПриИзменении(Элемент)
	
	УстановитьПользователя(Пользователь);
	
КонецПроцедуры
&НаКлиенте
Процедура ДрПользовательОчистка(Элемент, СтандартнаяОбработка)
	
	УстановитьПользователя();
	
КонецПроцедуры

&НаКлиенте
Процедура РолиПользователяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Роли = ПолучитьРолиПользователя(Пользователь);
		
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.ЗагрузитьЗначения(Роли);
	
	// Проставим имеющиеся пометки
    Для Каждого ЭлементСписка Из СписокВыбора Цикл
		
		ЭлементСписка.Пометка = РолиПользователя.НайтиПоЗначению(ЭлементСписка.Значение) <> Неопределено;
		
	КонецЦикла;
	
	// Выберем новые пометки
	
	Если СписокВыбора.ОтметитьЭлементы("Роли пользователя") Тогда
		
		// Перезапишем список значения ролей
		
		РолиПользователя.Очистить();
		Для Каждого ЭлементСписка Из СписокВыбора Цикл
			Если ЭлементСписка.Пометка Тогда
			
				РолиПользователя.Добавить(ЭлементСписка.Значение);
				
			КонецЕсли;
		КонецЦикла;
		
		СписокТекущих.Параметры.УстановитьЗначениеПараметра("ЕстьФильтрРоль", Истина);
		СписокТекущих.Параметры.УстановитьЗначениеПараметра("Роль", РолиПользователя);
	
	КонецЕсли;

КонецПроцедуры
&НаКлиенте
Процедура РолиПользователяОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокТекущих.Параметры.УстановитьЗначениеПараметра("ЕстьФильтрРоль", Ложь);
	
	// вернуть МоиРоли
	РолиПользователя.ЗагрузитьЗначения(ПолучитьРолиПользователя(Пользователь));
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииЭлементаФильтра(Элемент, СтандартнаяОбработка = Истина)
	
	ИмяФильтра = Лев(Элемент.Имя, Найти(Элемент.Имя, "Фильтр") - 1);
	СписокТекущих.Параметры.УстановитьЗначениеПараметра(ИмяФильтра, ЭтаФорма[ИмяФильтра]);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараллельныеЗадачиПриИзменении(Элемент)
	
	СписокТекущих.Параметры.УстановитьЗначениеПараметра("ПараллельныеЗадачи", ПараллельныеЗадачи);
	
КонецПроцедуры

&НаКлиенте
Процедура ДовернныеМнеЗадачиПриИзменении(Элемент)
	СписокТекущих.Параметры.УстановитьЗначениеПараметра("ЕстьФильтрДовернныеМнеЗадачи", ДоверенныеМнеЗадачи);
КонецПроцедуры

