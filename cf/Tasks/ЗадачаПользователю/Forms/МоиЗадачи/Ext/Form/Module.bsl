
&НаСервере
Процедура ОбновитьСписокЗадач()
	
	текПользователи = Новый Массив;
	текПользователи.Добавить(Справочники.Пользователи.ПустаяСсылка());
	текПользователи.Добавить(Пользователь);
	
	текРоли = РолиПользователя.ВыгрузитьЗначения();
	//текРоли.Добавить(Справочники.Роли.ПустаяСсылка());  // Круглов: из за этих пустышек запрос тормозит
	
	текСклады = ВыбранныеСклады.ВыгрузитьЗначения();
	//текСклады.Добавить(Справочники.Склады.ПустаяСсылка());
	
	СписокТекущих.Параметры.УстановитьЗначениеПараметра("ТочкаМаршрутаСкорректироватьЗаказ", БизнесПроцессы.СборкаЗаказа.ТочкиМаршрута.СкорректироватьЗаказ);
	
	СписокТекущих.Параметры.УстановитьЗначениеПараметра("ТекущийПользователь", 	Пользователь);
	СписокТекущих.Параметры.УстановитьЗначениеПараметра("Склады", 				текСклады);
	СписокТекущих.Параметры.УстановитьЗначениеПараметра("Роли", 				текРоли);
	СписокТекущих.Параметры.УстановитьЗначениеПараметра("Пользователи", 		текПользователи);
	
	СписокТекущих.Параметры.УстановитьЗначениеПараметра("ТочкиМаршрута", 		ВыбранныеТочкиМаршрута.ВыгрузитьЗначения());
	
КонецПроцедуры
Процедура ПерезаполнитьНастройкиПользователя()
	
	РолиПользователя.ЗагрузитьЗначения(ПолучитьРолиПользователя(Пользователь));
	ВыбранныеСклады.ЗагрузитьЗначения(ПолучитьСкладыПользователя(Пользователь));
	ВыбранныеТочкиМаршрута.ЗагрузитьЗначения(ПолучитьТочкиМаршрутаВыбранныхРолей());
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ОбновитьДинамическийЗапрос();
	
КонецПроцедуры
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СписокТекущих.Параметры.УстановитьЗначениеПараметра("ПустаяДата", '00010101');
	ШаблонТекстЗапроса = СписокТекущих.ТекстЗапроса;
	
	Пользователь = ПараметрыСеанса.ТекущийПользователь; 
	ПерезаполнитьНастройкиПользователя();
	
	// Проверим на работе или нет чел
	
	Если Parsec.ПользовательУчаствуетВКонтролеРабочегоВремени() Тогда
		
		Элементы.ГруппаParsec.Видимость = Истина;
		Элементы.КтоНаРаботе.Видимость 	= Parsec.ПользовательМожетПросматриватьИнформациюОПосещениях();
		ОбновитьСостояниеНаРабочемМесте(); 
		
	Иначе Элементы.ГруппаParsec.Видимость = Ложь; КонецЕсли;
	
	Элементы.ЗаявкиСервисаОжидаютОтветаМенеджера.Видимость = РолиПользователя.НайтиПоЗначению(Справочники.Роли.Менеджер) <> Неопределено;
	//Элементы.СписокТекущихФильтрЗадачиСегодня.Видимость = РолиПользователя.НайтиПоЗначению(Справочники.Роли.Логист) <> Неопределено;
	
	//ЭтоКладовщик = РолиПользователя.НайтиПоЗначению(Справочники.Роли.Кладовщик) <> Неопределено ИЛИ РольДоступна("ПолныеПраваВОбласти") ИЛИ РольДоступна("ПолныеПрава");
	//Элементы.СписокТекущихПечатьОбъедененногоСборочного.Видимость 	= ЭтоКладовщик;
	//Элементы.СписокТекущихДобавитьВСборочныйЛист.Видимость 			= ЭтоКладовщик;
	//Элементы.СписокТекущихУдалитьИзСборочногоЛиста.Видимость 		= ЭтоКладовщик;
	
	ОбновитьСписокЗадач();
	
КонецПроцедуры


&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если 	ИмяСобытия = СобытияСистемы.Событие_ЗаписанаЗадача() Или
			ИмяСобытия = СобытияСистемы.Событие_ЗаписанБизнесПроцесс() Или
			ИмяСобытия = СобытияСистемы.СобытиеИзмениласьОчередьСборкиЗаказа() Тогда
			
		Элементы.СписокТекущих.Обновить(); КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПолучитьИмяБП(ИмяСписка)
	
	ТекСтрока = Элементы.Найти(ИмяСписка).ТекущаяСтрока;
	
	Если 	ТекСтрока <> Неопределено И 
			Метаданные.БизнесПроцессы.Содержит(Метаданные.НайтиПоТипу(ТипЗнч(ТекСтрока.БизнесПроцесс)))Тогда
			
		Возврат Метаданные.НайтиПоТипу(ТипЗнч(ТекСтрока.БизнесПроцесс)).Имя;
			
	КонецЕсли;
	
	Возврат "";	
		
КонецФункции

&НаКлиенте
Процедура СписокТекущихВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	//Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.ОбъедененнаяСборка) Тогда
	//	
	//	СтандартнаяОбработка = Ложь;
	//	
	//	ОткрытьФорму("Справочник.ОбъедененнаяСборка.ФормаОбъекта", 
	//			Новый Структура("Ключ", Элемент.ТекущиеДанные.ОбъедененнаяСборка));
	//							
	//КонецЕсли;
			
	Если ТипЗнч(Элемент.ТекущиеДанные.БизнесПроцесс) = Тип("БизнесПроцессСсылка.ЗадачаРазработчику") Тогда
		
		СтандартнаяОбработка 	= Ложь;
		ТекДанные 				= Элемент.ТекущиеДанные;
		
		Если 	ТекДанные.РодительскаяГруппировкаСтроки <> Неопределено Тогда
			
			ТекИмяФормы = ПолучитьИмяБП("СписокТекущих");
			
			Если ТекИмяФормы <> "" Тогда
	
				
				ОткрытьФорму("БизнесПроцесс." + ТекИмяФормы + ".ФормаОбъекта", 
								Новый Структура("Ключ", ТекДанные.БизнесПроцесс));
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВыполненныеЗадачи(Команда)
	
	ОткрытьФорму("Задача.ЗадачаПользователю.Форма.ВыполненныеЗадачи");
	
КонецПроцедуры

#Область parsec

&НаСервере
Процедура ОбновитьСостояниеНаРабочемМесте()
	
	Если Parsec.ПодключитьКПарсек() Тогда
		
		Элементы.ДекорацияНетСвязи.Видимость 	= Ложь;
		Элементы.ГрафикРаботы.Видимость 		= Истина;
	
		Если Parsec.ПользовательНаРаботеИлиБылВЭтотДень() Тогда
			
			Элементы.ДекорацияВремяПосещения.Видимость 	= Истина;
			Элементы.ДекорацияВасНет.Видимость 			= Ложь;
			
			Посещения 	= Parsec.ПолучитьТаблицуВходовВыходовЗаДеньПоСотрудникам(ТекущаяДата(), ПараметрыСеанса.ТекущийПользователь.ФизЛицо);
			Если Посещения.Количество() Тогда
				Выход = Посещения[Посещения.Количество() - 1].Выход;
				Элементы.ДекорацияВремяПосещения.Заголовок = "вход " + Формат(Посещения[0].Вход,"ДЛФ=T") + " - " + ?(Выход = '00010101', "не выходил(а)",Формат(Выход,"ДЛФ=T")); КонецЕсли;
		Иначе
			
			Элементы.ДекорацияВремяПосещения.Видимость 	= Ложь;
			Элементы.ДекорацияВасНет.Видимость 			= Истина; КонецЕсли; 
	Иначе
		
		Элементы.ДекорацияНетСвязи.Видимость = Истина;
		     
		Элементы.ДекорацияВремяПосещения.Видимость 	= Ложь;
		Элементы.ДекорацияВасНет.Видимость 			= Ложь;
		Элементы.ГрафикРаботы.Видимость 			= Ложь; КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура КтоНаРаботеНажатие(Элемент)
	
	ОткрытьФорму("ОбщаяФорма.ИнформацияОПосещенииРабочегоМеста");
	
КонецПроцедуры
&НаКлиенте
Процедура ОбновитьParsec(Команда)
	
	ОбновитьСостояниеНаРабочемМесте();
	
КонецПроцедуры


&НаСервере
Функция ПолучитьТаблицуРаботы()
	
	Возврат Parsec.ПолучитьТабличныйДокументПосещенияСотрудника(ПараметрыСеанса.ТекущийПользователь.ФизЛицо);
	
КонецФункции
&НаКлиенте
Процедура ГрафикРаботы(Команда)
	
	Слежение.Записать("Информация. Просмотр своего времени посещения", "Задача.ЗадачаПользователю", "МоиЗадачи");
	ПолучитьТаблицуРаботы().Показать();
	
КонецПроцедуры


&НаКлиенте
Процедура ЗаявкиСервисаОжидаютОтветаМенеджераНажатие(Элемент)
	ОткрытьФорму("БизнесПроцесс.РемонтИнструмента.Форма.ФормаМенеджера", Новый Структура("Пользователь", Пользователь), ЭтаФорма);
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ФильтрЗадачиСегодня(Команда)

	Элементы.СписокТекущихФильтрЗадачиСегодня.Пометка = НЕ Элементы.СписокТекущихФильтрЗадачиСегодня.Пометка;
	
	Если Элементы.СписокТекущихФильтрЗадачиСегодня.Пометка Тогда
	
	ЭлементОтбора = СписокТекущих.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));

	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Дата");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ПравоеЗначение = НачалоДня(ТекущаяДата());	
		
	ЭлементОтбора = СписокТекущих.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));

	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗадачаПоДедлайну");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ПравоеЗначение = 1;	
	Иначе
	
         Для Каждого ЭлементОтбора Из СписокТекущих.Отбор.Элементы Цикл
			 Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Дата") ИЛИ
				  ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗадачаПоДедлайну") Тогда
				  
				  СписокТекущих.Отбор.Элементы.Удалить(ЭлементОтбора);
				  
              КонецЕсли;
		 КонецЦикла;	
		  
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПечатьОбъедененногоСборочного(Команда)
	
	МассивЗадач = Элементы.СписокТекущих.ВыделенныеСтроки;
	стрОшибки = "";
	Если МассивЗадач.Количество() И ПроверкаВыбораЗадач(МассивЗадач, стрОшибки) Тогда
		
		//ОткрытьФорму("БизнесПроцесс.СборкаЗаказа.Форма.ОбщийСборочныйЛист", Новый Структура("МассивЗадач", Элементы.СписокТекущих.ВыделенныеСтроки));
		ОткрытьФорму("Справочник.ОбъедененнаяСборка.ФормаОбъекта", Новый Структура("МассивЗадач", Элементы.СписокТекущих.ВыделенныеСтроки));
		
	ИначеЕсли НЕ ПустаяСтрока(стрОшибки) Тогда
		Сообщить(стрОшибки);
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверкаВыбораЗадач(МассивЗадач, стрОшибки = "", СсылкаОС = Неопределено)
	
	МассивДопустимыхТипов  = Новый Массив;
	Если СсылкаОС = Неопределено Тогда
		МассивДопустимыхТипов.Добавить(БизнесПроцессы.СборкаЗаказа.ТочкиМаршрута.СобратьЗаказ);
		МассивДопустимыхТипов.Добавить(БизнесПроцессы.СборкаЗаказа.ТочкиМаршрута.СобратьЗаказ1);
		МассивДопустимыхТипов.Добавить(БизнесПроцессы.ПеремещениеТоваров.ТочкиМаршрута.ОтправитьТовар);
		МассивДопустимыхТипов.Добавить(БизнесПроцессы.ПеремещениеТоваров.ТочкиМаршрута.ПринятьТовар);
	ИначеЕсли 
		СтрНайти(СсылкаОС.ВидЗадач.Имя, "СобратьЗаказ") Тогда
		МассивДопустимыхТипов.Добавить(БизнесПроцессы.СборкаЗаказа.ТочкиМаршрута.СобратьЗаказ);
		МассивДопустимыхТипов.Добавить(БизнесПроцессы.СборкаЗаказа.ТочкиМаршрута.СобратьЗаказ1);
	Иначе		
		МассивДопустимыхТипов.Добавить(СсылкаОС.ВидЗадач);
	КонецЕсли;	

	текТочка = МассивЗадач[0].ТочкаМаршрута;
	текСклад = МассивЗадач[0].Склад; 
	//текСкладПолучатель = ?(ТипЗнч(МассивЗадач[0].БизнесПроцесс) = Тип("БизнесПроцессСсылка.ПеремещениеТоваров"), МассивЗадач[0].БизнесПроцесс.СкладПолучатель, Неопределено);

	Для Каждого Задач ИЗ МассивЗадач Цикл
		
		Если МассивДопустимыхТипов.Найти(Задач.ТочкаМаршрута) = Неопределено Тогда
			стрОшибки = "Задача данного вида """ + Строка(Задач) + """ не может быть добавлена в общий сборочный лист" + ?(СсылкаОС = Неопределено, "", ": " + Строка(СсылкаОС));
			Возврат Ложь;
		КонецЕсли;

		Если Задач.ТочкаМаршрута <> текТочка Тогда стрОшибки = "Вы выбрали разного вида задачи. Для печати общего сборочного листа задачи должны быть одного вида."; Возврат Ложь; КонецЕсли;
		
		Если Задач.Склад <> текСклад Тогда стрОшибки = "Нельзя объединить задачи для разных складов в общий сборочный лист"; КонецЕсли;
		
		//Если Задач.БизнесПроцесс.СкладПолучатель <> текСкладПолучатель Тогда  стрОшибки = "Нельзя объединить задачи для разных складов-получателей в общий сборочный лист"; КонецЕсли;
		
		//текСклад = Задач.Склад;
		//текТочка = Задач.ТочкаМаршрута;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьЗадачу(Команда)
	ОткрытьФорму("Задача.ЗадачаПользователю.ФормаОбъекта", Новый Структура("Ключ", Элементы.СписокТекущих.ТекущаяСтрока));
КонецПроцедуры

#Область Объединенная_сборка

&НаКлиенте
Процедура ДобавитьВСборочныйЛист(Команда)
	
	ОткрытьФорму("Справочник.ОбъедененнаяСборка.ФормаВыбора",, ЭтаФорма,,,, Новый ОписаниеОповещения("ОкончаниеВыбораОбъедененнойСборки",ЭтаФорма, Элементы.СписокТекущих.ВыделенныеСтроки));
	
КонецПроцедуры
&НаСервере 
Процедура ДобавитьЗадачуВОбСборку(СсылкаОС, ВыделенныеСтроки)
	
	Для Каждого Элемент ИЗ ВыделенныеСтроки Цикл
	
		Запись = РегистрыСведений.СборочныеЛисты.СоздатьМенеджерЗаписи();
		Запись.Код = СсылкаОС.Код;
		Запись.ОбъедененнаяСборка = СсылкаОС;
		Запись.Задача = Элемент;
		Запись.Использование = Истина;
		
		Попытка
			Запись.Записать();
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;	
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеВыбораОбъедененнойСборки(Результат, Параметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		стрОшибки = "";
		Если НЕ ПроверкаВыбораЗадач(Параметры, стрОшибки, Результат) Тогда
			Сообщить(стрОшибки);
			Возврат;
		КонецЕсли;
		
		ДобавитьЗадачуВОбСборку(Результат, Параметры);
		Элементы.СписокТекущих.Обновить();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция УдалитьИзСборочногоЛистаНаСервере(ВыделенныеСтроки)
	
	Для Каждого Элемент ИЗ ВыделенныеСтроки Цикл
	
		Запись = РегистрыСведений.СборочныеЛисты.СоздатьМенеджерЗаписи();
		Запись.Задача = Элемент;
		Запись.Прочитать();
		Попытка
			Запись.Удалить();
		Исключение
			Сообщить(ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;	
	КонецЦикла;
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура УдалитьИзСборочногоЛиста(Команда)
	МассивЗадач = Элементы.СписокТекущих.ВыделенныеСтроки;
	Если УдалитьИзСборочногоЛистаНаСервере(МассивЗадач) Тогда
		Элементы.СписокТекущих.Обновить();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Фильтры

&НаСервере
Функция ПолучитьТочкиМаршрутаВыбранныхРолей() Экспорт
	
	Точки = Новый Массив;
	
	Точки.Добавить(БизнесПроцессы.ЗаявкаПокупателя.ТочкиМаршрута.ФормированиеЗаказа);
	Точки.Добавить(БизнесПроцессы.ИнтернетЗаявка.ТочкиМаршрута.ОбработатьЗаказ);
	Точки.Добавить(БизнесПроцессы.СборкаЗаказа.ТочкиМаршрута.СкорректироватьЗаказ);
	Точки.Добавить(БизнесПроцессы.СборкаТовара.ТочкиМаршрута.СобратьТовар);
	Точки.Добавить(БизнесПроцессы.ПеремещениеТоваров.ТочкиМаршрута.ОтправитьТовар);
	Точки.Добавить(БизнесПроцессы.ПеремещениеТоваров.ТочкиМаршрута.ПринятьТовар);
	Точки.Добавить(БизнесПроцессы.СборкаЗаказа.ТочкиМаршрута.ОтгрузитьЗаказ);
	Точки.Добавить(БизнесПроцессы.ОтменаСборки.ТочкиМаршрута.Разобрать);
	Точки.Добавить(БизнесПроцессы.ДоставкаЗаказа.ТочкиМаршрута.ОтправитьЗаказКлиенту);
	Точки.Добавить(БизнесПроцессы.ДоставкаЗаказа.ТочкиМаршрута.ПодтверждениеДоставкиЗаказа);
	
	Возврат Точки;
	
КонецФункции
&НаСервере
Функция ПолучитьСкладыПользователя(выбПользователь) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ Склад ИЗ РегистрСведений.СкладыПользователя ГДЕ Пользователь = &ТекПользователь");	
	Запрос.УстановитьПараметр("ТекПользователь", выбПользователь);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Склад");
	
КонецФункции
&НаСервере
Функция ПолучитьРолиПользователя(ВыбПользователь)
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ 	Роль 
		|ПОМЕСТИТЬ 	СписокРолей
		|ИЗ 		РегистрСведений.РолиПользователей 
		|ГДЕ 		Пользователь = &Пользователь
		|;
		|ВЫБРАТЬ 	Ссылка КАК Роль
		|ИЗ 		Справочник.Роли
		|ГДЕ		Ссылка В ИЕРАРХИИ(ВЫБРАТЬ Роль ИЗ СписокРолей КАК СписокРолей)
		|");
		
	Запрос.УстановитьПараметр("Пользователь", ВыбПользователь);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Роль");
					
КонецФункции

&НаКлиенте
Процедура ЗагрузитьВСписокЗначенияОтмеченныйСписок(Список, СписокСОтметками)
	
	// Загружает в список значения
	
	Список.Очистить();
	Для Каждого Элемент Из СписокСОтметками Цикл Если Элемент.Пометка Тогда Список.Добавить(Элемент.Значение) КонецЕсли; КонецЦикла;
	
КонецПроцедуры
&НаКлиенте
Функция ПолучитьСписокСУстановленнымиОтметками(Список, МассивЗначений)
	
	// Возвращает список с отмеченными элементами
	// Создается новый список и заполняет его МассивЗначений
	// дальше выставляется галки тем элементам которые есть в списке и массиве или только в массиве
	
	новСписок = Новый СписокЗначений;
	Для Каждого Значение Из МассивЗначений Цикл новСписок.Добавить(Значение,,Список.НайтиПоЗначению(Значение) <> Неопределено) КонецЦикла;
	
	Возврат новСписок;
	
КонецФункции
&НаКлиенте
Процедура ОтмеченСписок(Список, ДопПараметры) Экспорт
	
	Если Список <> Неопределено Тогда
		
		текСписок = ЭтотОбъект[ДопПараметры.Список];
		текСписок.Очистить();
		Для Каждого Элемент Из Список Цикл Если Элемент.Пометка Тогда текСписок.Добавить(Элемент.Значение) КонецЕсли; КонецЦикла; 
		
		ОбновитьСписокЗадач(); КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РолиПользователяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("ОбщаяФорма.ОтметитьСписок", 
		Новый Структура("Список", ПолучитьСписокСУстановленнымиОтметками(РолиПользователя, ПолучитьРолиПользователя(Пользователь))), 
		ЭтаФорма,,,, Новый ОписаниеОповещения("ОтмеченСписок", ЭтаФорма, Новый Структура("Список", "РолиПользователя")));
						
КонецПроцедуры
&НаКлиенте
Процедура ВыбранныеТочкиМаршрутаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("ОбщаяФорма.ОтметитьСписок", 
		Новый Структура("Список", ПолучитьСписокСУстановленнымиОтметками(ВыбранныеТочкиМаршрута, ПолучитьТочкиМаршрутаВыбранныхРолей())), 
		ЭтаФорма,,,, Новый ОписаниеОповещения("ОтмеченСписок", ЭтаФорма, Новый Структура("Список", "ВыбранныеТочкиМаршрута")));
		
КонецПроцедуры
&НаКлиенте
Процедура ВыбранныеСкладыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("ОбщаяФорма.ОтметитьСписок", 
		Новый Структура("Список", ПолучитьСписокСУстановленнымиОтметками(ВыбранныеСклады, ПолучитьСкладыПользователя(Пользователь))), 
		ЭтаФорма,,,, Новый ОписаниеОповещения("ОтмеченСписок", ЭтаФорма, Новый Структура("Список", "ВыбранныеСклады")));
КонецПроцедуры

&НаКлиенте
Процедура ДрПользовательПриИзменении(Элемент)
	
	//ЗагрузитьВСписокЗначенияОтмеченныйСписок(РолиПользователя, ПолучитьСписокСУстановленнымиОтметками(РолиПользователя, ПолучитьРолиПользователя(Пользователь)));
	
	ПерезаполнитьНастройкиПользователя();
	ОбновитьСписокЗадач();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмяФильтра(ПолноеИмя) Возврат СтрЗаменить(СтрЗаменить(ПолноеИмя, "Фильтр", ""), "Подобно", "") КонецФункции
&НаСервереБезКонтекста
Функция БлижайшийПробелИлиТаб(Строка)
	
	ПозПробела 	= СтрНайти(Строка, " ");
	ПозТаба 	= СтрНайти(Строка, Символы.Таб);
	
	Возврат ?(ПозТаба > 0 И ПозТаба < ПозПробела, ПозТаба, ПозПробела);
	
КонецФункции
&НаСервере
Функция ОбработатьСтрокуЗапросаИУстановитьПараметры(Строка, ПараметрыЗапроса)
	
	СимволФильтра 	= "// Фильтр";
	ДлинаФильтра 	= СтрДлина(СимволФильтра);
	
	Если СтрНачинаетсяС(СокрЛ(Строка), СимволФильтра) Тогда
		
		НачФильтра		= СтрНайти(Строка, СимволФильтра);
		СтрНачФильтра 	= Сред(Строка, НачФильтра);
		ПозПробела		= БлижайшийПробелИлиТаб(Сред(СтрНачФильтра, ДлинаФильтра));
		ИмяПараметра 	= СокрЛП(Сред(Строка, НачФильтра + ДлинаФильтра,  ПозПробела - НачФильтра));
		
		Значение = ЭтаФорма[ИмяПараметра];
		Если ЗначениеЗаполнено(Значение) Тогда
			Если НРег(ИмяПараметра) = "очередь" Тогда Значение = Значение.Код КонецЕсли;
			ПараметрыЗапроса.Добавить(Новый Структура("Имя, Значение", ИмяПараметра, Значение));
			Возврат Сред(СтрНачФильтра, ДлинаФильтра + ПозПробела); КонецЕсли; КонецЕсли;
		
	Возврат Строка;
	
КонецФункции
&НаСервере
Процедура СформироватьТекстЗапроса(ПараметрыЗапроса)
	
	Кол 		= СтрЧислоСтрок(ШаблонТекстЗапроса);
	новТекст 	= "";
	
	Для Ном = 1 По Кол Цикл новТекст = новТекст + "
		|" + ОбработатьСтрокуЗапросаИУстановитьПараметры(СтрПолучитьСтроку(ШаблонТекстЗапроса, Ном), ПараметрыЗапроса); КонецЦикла;
	
	СписокТекущих.ТекстЗапроса = новТекст;
	
КонецПроцедуры
&НаСервере
Процедура УстановитьПараметрыЗапроса(ПараметрыЗапроса)
	
	Для Каждого Параметр Из ПараметрыЗапроса Цикл
			СписокТекущих.Параметры.УстановитьЗначениеПараметра(Параметр.Имя, Параметр.Значение);КонецЦикла;
	
	КонецПроцедуры
&НаСервере
Процедура ОбновитьДинамическийЗапрос()
	
	ПараметрыЗапроса 	= Новый Массив;
	СформироватьТекстЗапроса(ПараметрыЗапроса);
	УстановитьПараметрыЗапроса(ПараметрыЗапроса);
	
КонецПроцедуры
&НаКлиенте
Процедура ФильтрПриИзменении(Элемент)
	
	ОбновитьДинамическийЗапрос();
	
КонецПроцедуры


#КонецОбласти