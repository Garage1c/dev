&НаСервере
Функция ПолучитьДоверяющихМне(выбПользователь)
	
	ДоверяющиеМне = Новый Массив;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ Пользователь ИЗ РегистрСведений.ДоверенныеЛицаПользователя ГДЕ ДоверенноеЛицо = &Пользователь И ВидитСписокМоихЗадач = ИСТИНА"); 
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	Рез = Запрос.Выполнить();
	Если НЕ Рез.Пустой() Тогда
		ДоверяющиеМне = Рез.Выгрузить().ВыгрузитьКолонку("Пользователь");
	КонецЕсли;
	
	Возврат ДоверяющиеМне;
	
КонецФункции

&НаСервере
Процедура ОбновитьСписокЗадач()
	
	СписокТекущих.Параметры.УстановитьЗначениеПараметра("ПараллельныеЗадачи", 	Ложь);
	
	СписокТекущих.Параметры.УстановитьЗначениеПараметра("ТекущийПользователь", 	Пользователь);
	//СписокТекущих.Параметры.УстановитьЗначениеПараметра("ПустойПользователь", 	Справочники.Пользователи.ПустаяСсылка());
	
	СписокТекущих.Параметры.УстановитьЗначениеПараметра("ЕстьФильтрДовернныеМнеЗадачи", ДоверенныеМнеЗадачи);
	СписокТекущих.Параметры.УстановитьЗначениеПараметра("ДоверяющиеМне", ПолучитьДоверяющихМне(Пользователь));
	
	//СписокТекущих.Параметры.УстановитьЗначениеПараметра("ПустойСклад", 		Справочники.Склады.ПустаяСсылка());
	СписокТекущих.Параметры.УстановитьЗначениеПараметра("МоиСклады", 		КэшируемыеФункции.ПолучитьМоиСклады());
	
	//СписокТекущих.Параметры.УстановитьЗначениеПараметра("ПустаяРоль",		Справочники.Роли.ПустаяСсылка());
	СписокТекущих.Параметры.УстановитьЗначениеПараметра("МоиРоли", 			ПараметрыСеанса.ТекущиеРоли);
	
	//СписокТекущих.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", 		ТекущаяДата());
	//СписокТекущих.Параметры.УстановитьЗначениеПараметра("ПустаяДата",	 	'00010101');
	//СписокТекущих.Параметры.УстановитьЗначениеПараметра("НачалоИсчесления", '20120401');
	
	//СписокТекущих.Параметры.УстановитьЗначениеПараметра("ПустаяОчередь", 	Справочники.ПредставлениеОчередиСборкиЗаказа.ПустаяСсылка());
	//СписокТекущих.Параметры.УстановитьЗначениеПараметра("ПустаяДата", 		'00010101');
	//СписокТекущих.Параметры.УстановитьЗначениеПараметра("ПустойПартнер",	Справочники.Партнеры.ПустаяСсылка());
	СписокТекущих.Параметры.УстановитьЗначениеПараметра("ЕстьФильтрРоль",	Ложь);
	СписокТекущих.Параметры.УстановитьЗначениеПараметра("Роль", 			Неопределено);

	// Иницилизируем фильтры
	
	ОбновитьБыстрыеФильтры();
	
	// Закладки
	
	ОбновитьФильтрЗакладок();
	
КонецПроцедуры
&НаСервере
Процедура ОбновитьФильтрЗакладок()
	
	текстПоумолчанию 	= "Все задачи";
	ЗагрНастройки 		= ХранилищеОбщихНастроек.Загрузить("Фильтр закладок пользователя");
	
	Если 	ТипЗнч(ЗагрНастройки) = Тип("Структура") И
			ЗагрНастройки.Свойство("ОтмеченныеЗакладки") Тогда
			
		Запрос = Новый Запрос("ВЫБРАТЬ Ссылка ИЗ Справочник.ЗакладкиЗадач ГДЕ Пользователь = &ТекущийПользователь");
		Запрос.УстановитьПараметр("ТекущийПользователь", Пользователь);
		КолВыбрЗакладок 	= ЗагрНастройки.ОтмеченныеЗакладки.Количество();
		ЗакладкиВключены 	= КолВыбрЗакладок И Запрос.Выполнить().Выбрать().Количество() <> КолВыбрЗакладок - 1; // 1 - это справочник "без закладок"
		
		Элементы.КнопкаОтборЗакладок.Заголовок = ?(ЗакладкиВключены, "Фильтры (" + КолВыбрЗакладок + ")", текстПоумолчанию);
		//Элементы.КнопкаОтборЗакладок.ЦветТекста = ?(ЗакладкиВключены, Новый Цвет(0,0,128), Новый Цвет());
		
		СписокТекущих.Параметры.УстановитьЗначениеПараметра("ЗакладкиВключены",	ЗакладкиВключены);
		СписокТекущих.Параметры.УстановитьЗначениеПараметра("Закладки",			ЗагрНастройки.ОтмеченныеЗакладки);
	
	Иначе
		
		Элементы.КнопкаОтборЗакладок.Заголовок = текстПоумолчанию;
		//Элементы.КнопкаОтборЗакладок.ЦветТекста = Новый Цвет();
		
		СписокТекущих.Параметры.УстановитьЗначениеПараметра("ЗакладкиВключены",	Ложь);
		СписокТекущих.Параметры.УстановитьЗначениеПараметра("Закладки",			Новый Массив); КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	#Если НЕ ВебКлиент Тогда
	
	// Внешнее оборудование
	
	КнопкаТСД = Элементы.Найти("ЗагрузитьИзТСД");
	Если КнопкаТСД <> Неопределено И Не ВнешнееОборудование.ЕстьУстановленныйСканер() Тогда
		Элементы.ЗагрузитьИзТСД.Видимость = Ложь; КонецЕсли;
	
	#КонецЕсли
	
	// ОткрытьФорму("БизнесПроцесс.РемонтИнструмента.Форма.ФормаМенеджера",  Новый Структура("Пользователь", Пользователь), ЭтаФорма);
	
	//ФоновыйРоботЖивет = 20; // секунд
	//
	//глСтДатаЗапускаМгновСообщений = ТекущаяДата();
	//глАдресТекущихСообщений = События.ЗапуститьРоботаСканераСообщенийДляПользователя(ФоновыйРоботЖивет, УникальныйИдентификатор);
	//ПодключитьОбработчикОжидания("ПросканироватьНовыеСообщения", 3, Ложь);	// Запустим сканирование новых сообщений
	
КонецПроцедуры
//&НаКлиенте
//Процедура ПросканироватьПоявлениеНовыхСообщений() Экспорт
//	
//	ФоновыйРоботЖивет = 20; // секунд
//	
//	// Проверим сообщения для вывода
//	
//	~ПроверкаСообщений:
//	Сообщения = ПолучитьИзВременногоХранилища(глАдресТекущихСообщений);
//	Если Сообщения <> Неопределено Тогда
//		
//		Если Сообщения.Количество() Тогда
//			
//			// Покажем
//			
//			Сообщение = Сообщения[0];
//			ПоказатьОповещениеПользователя(Сообщения[0].Название, ?(Сообщение.Свойство("Ссылка"), ПолучитьНавигационнуюСсылку(Сообщение.Ссылка), Неопределено), Сообщения.КраткоеОписание, ПолучитьНавигационнуюСсылку(Сообщение.Событие, "Картинка"));
//			
//			// Удалим
//			
//			Сообщения.Удалить(0);
//			ПоместитьВоВременноеХранилище(Сообщения, глАдресТекущихСообщений); КонецЕсли;
//		
//		// Проверим не пора ли запустить нового робота
//		
//		Если ТекущаяДата() - глСтДатаЗапускаМгновСообщений > ФоновыйРоботЖивет И Не Сообщения.Количество() Тогда
//			
//			// Удалим хлам
//			УдалитьИзВременногоХранилища(глАдресТекущихСообщений);
//			
//			глАдресТекущихСообщений = События.ЗапуститьРоботаСканераСообщенийДляПользователя(ФоновыйРоботЖивет, УникальныйИдентификатор);
//			глСтДатаЗапускаМгновСообщений = ТекущаяДата(); КонецЕсли; 
//	КонецЕсли;
//	
//КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Пользователь = ПараметрыСеанса.ТекущийПользователь; 
	
	СписокТекущих.Параметры.УстановитьЗначениеПараметра("ПустойПользователь", 	Справочники.Пользователи.ПустаяСсылка());
	
	СписокТекущих.Параметры.УстановитьЗначениеПараметра("ПустойСклад", 		Справочники.Склады.ПустаяСсылка());
	
	СписокТекущих.Параметры.УстановитьЗначениеПараметра("ПустаяРоль",		Справочники.Роли.ПустаяСсылка());
	
	//СписокТекущих.Параметры.УстановитьЗначениеПараметра("ПустаяДата",	 	'00010101');
	//СписокТекущих.Параметры.УстановитьЗначениеПараметра("НачалоИсчесления", '20120401');
	
	//СписокТекущих.Параметры.УстановитьЗначениеПараметра("ПустаяОчередь", 	Справочники.ПредставлениеОчередиСборкиЗаказа.ПустаяСсылка());
	//СписокТекущих.Параметры.УстановитьЗначениеПараметра("ПустаяДата", 		'00010101');
	СписокТекущих.Параметры.УстановитьЗначениеПараметра("ПустойКонтрагент",	Справочники.Контрагенты.ПустаяСсылка());
	СписокТекущих.Параметры.УстановитьЗначениеПараметра("ПустойОсновнойМенеджер",		Справочники.Пользователи.ПустаяСсылка());

	СписокТекущих.Параметры.УстановитьЗначениеПараметра("БезЗакладки",		Справочники.ЗакладкиЗадач.НеУказана);
	
	СписокТекущих.Параметры.УстановитьЗначениеПараметра("ТочкаМаршрутаСкорректироватьЗаказ", БизнесПроцессы.СборкаЗаказа.ТочкиМаршрута.СкорректироватьЗаказ);
	
	Дедлайн =  КэшируемыеФункции.ПолучитьДедлайнНаОтправкуВСборку();
	СписокТекущих.Параметры.УстановитьЗначениеПараметра("ДедлайнНачало", Дедлайн.Начало);
	СписокТекущих.Параметры.УстановитьЗначениеПараметра("ДедлайнОкончание", Дедлайн.Окончание);
	
	ОбновитьСписокЗадач();
   	
		//СписокТекущих.Параметры.УстановитьЗначениеПараметра("ПустаяВажность", 		Справочники.ВажностиЗадач.ПустаяСсылка());
		//СписокТекущих.Параметры.УстановитьЗначениеПараметра("ОбычнаяВажность", 		Справочники.ВажностиЗадач.Обычная);
		//СписокТекущих.Параметры.УстановитьЗначениеПараметра("РангОбычнойВажности", 	Справочники.ВажностиЗадач.Обычная.Ранг);
	
	
	
		//НеПоказыватьТочки = Новый Массив;
		//НеПоказыватьТочки.Добавить(БизнесПроцессы.ИнтернетЗаявка.ТочкиМаршрута.СборкаЗаказа);
		//НеПоказыватьТочки.Добавить(БизнесПроцессы.ИнтернетЗаявка.ТочкиМаршрута.ОжиданиеОплаты);
		//НеПоказыватьТочки.Добавить(БизнесПроцессы.ИнтернетЗаявка.ТочкиМаршрута.ОжиданиеОтвета);
		//НеПоказыватьТочки.Добавить(БизнесПроцессы.ЗаявкаПокупателя.ТочкиМаршрута.СборкаЗаказа);
		//НеПоказыватьТочки.Добавить(БизнесПроцессы.ЗаявкаПокупателя.ТочкиМаршрута.ПеремещениеТоваров);
		//НеПоказыватьТочки.Добавить(БизнесПроцессы.СборкаЗаказа.ТочкиМаршрута.Переместить);
		//НеПоказыватьТочки.Добавить(БизнесПроцессы.СборкаЗаказа.ТочкиМаршрута.ПереместитьКогдаСобран);
		//СписокТекущих.Параметры.УстановитьЗначениеПараметра("НеПоказыватьТочки", 			НеПоказыватьТочки);
	
	//СписокВыполненных.Параметры.УстановитьЗначениеПараметра("СборкаИнтернетЗаказа", 		БизнесПроцессы.ИнтернетЗаявка.ТочкиМаршрута.СборкаЗаказа);
	//СписокВыполненных.Параметры.УстановитьЗначениеПараметра("СборкаЗаказаПокупателя", 		БизнесПроцессы.ЗаявкаПокупателя.ТочкиМаршрута.СборкаЗаказа);
	//СписокВыполненных.Параметры.УстановитьЗначениеПараметра("Перемещение1", 				БизнесПроцессы.ЗаявкаПокупателя.ТочкиМаршрута.ПеремещениеТоваров);
	//СписокВыполненных.Параметры.УстановитьЗначениеПараметра("Перемещение2", 				БизнесПроцессы.СборкаЗаказа.ТочкиМаршрута.Переместить);
	
	
	//СписокВыполненных.Параметры.УстановитьЗначениеПараметра("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
	//СписокВыполненных.Параметры.УстановитьЗначениеПараметра("СборкаЗаказа", 	БизнесПроцессы.ИнтернетЗаявка.ТочкиМаршрута.СборкаЗаказа);
	
	
	// Заполним список выбора маршрута
	
	Список = Элементы.ТочкаМаршрутаФильтр.СписокВыбора;
	Список.Добавить(БизнесПроцессы.ЗаявкаПокупателя.ТочкиМаршрута.ФормированиеЗаказа);
	Список.Добавить(БизнесПроцессы.ИнтернетЗаявка.ТочкиМаршрута.ОбработатьЗаказ);
	Список.Добавить(БизнесПроцессы.СборкаЗаказа.ТочкиМаршрута.СкорректироватьЗаказ);
	Список.Добавить(БизнесПроцессы.СборкаЗаказа.ТочкиМаршрута.СобратьЗаказ);
	Список.Добавить(БизнесПроцессы.ПеремещениеТоваров.ТочкиМаршрута.ОтправитьТовар);
	Список.Добавить(БизнесПроцессы.ПеремещениеТоваров.ТочкиМаршрута.ПринятьТовар);
	Список.Добавить(БизнесПроцессы.СборкаЗаказа.ТочкиМаршрута.ОтгрузитьЗаказ);
	Список.Добавить(БизнесПроцессы.ОтменаСборки.ТочкиМаршрута.ОтменитьСборку);

	
	МассивРолей = ПолучитьРолиПользователя(Пользователь);
	РолиПользователя.ЗагрузитьЗначения(МассивРолей);
	
	// 
	
	УстановитьПользователя(Пользователь.Ссылка);  // эта строка вставлена, иначе если заходить под семеновым то у него задачи не обновляются пока не пперевыбереш его
	
	// Добавим точки доступа
	
	МассивЗадачСРасширеннымПредставлением.Добавить(БизнесПроцессы.РемонтИнструмента.ТочкиМаршрута.ОжиданиеОплаты);
	МассивЗадачСРасширеннымПредставлением.Добавить(БизнесПроцессы.РемонтИнструмента.ТочкиМаршрута.ОжиданиеОплаты1);
	МассивЗадачСРасширеннымПредставлением.Добавить(БизнесПроцессы.ИнтернетЗаявка.ТочкиМаршрута.ОжиданиеОплаты);

	МассивЗадачСРасширеннымПредставлением.Добавить(БизнесПроцессы.ЗаявкаПокупателя.ТочкиМаршрута.ФормированиеЗаказа);
	МассивЗадачСРасширеннымПредставлением.Добавить(БизнесПроцессы.ВнутренняяЗаявка.ТочкиМаршрута.ФормированиеЗаказа);

	МассивЗадачОтключенныхПоУмолчанию.Добавить(БизнесПроцессы.ИнтернетЗаявка.ТочкиМаршрута.ОжиданиеОтвета);
 	
	ОбновитьСоставФильтровТочекМаршрута();
	ОбновитьПараметрыФильтровТочекМаршрута();
	
	// Проверим на работе или нет чел
	
	Если Parsec.ПользовательУчаствуетВКонтролеРабочегоВремени() Тогда
		
		Элементы.ГруппаParsec.Видимость = Истина;
		Элементы.КтоНаРаботе.Видимость 	= Parsec.ПользовательМожетПросматриватьИнформациюОПосещениях();
		ОбновитьСостояниеНаРабочемМесте(); 
		
	Иначе Элементы.ГруппаParsec.Видимость = Ложь; КонецЕсли;
	
	Элементы.ЗаявкиСервисаОжидаютОтветаМенеджера.Видимость = РолиПользователя.НайтиПоЗначению(Справочники.Роли.Менеджер) <> Неопределено;
	
	Элементы.СписокТекущихФильтрЗадачиСегодня.Видимость = МассивРолей.Найти(Справочники.Роли.Логист)<> Неопределено;
	
	ЭтоКладовщик = МассивРолей.Найти(Справочники.Роли.Кладовщик) <> Неопределено ИЛИ РольДоступна("ПолныеПраваВОбласти") ИЛИ РольДоступна("ПолныеПрава");
	Элементы.СписокТекущихПечатьОбъедененногоСборочного.Видимость = ЭтоКладовщик;
	Элементы.СписокТекущихДобавитьВСборочныйЛист.Видимость = ЭтоКладовщик;
	Элементы.СписокТекущихУдалитьИзСборочногоЛиста.Видимость = ЭтоКладовщик;

КонецПроцедуры
&НаСервере
Процедура ОбновитьБыстрыеФильтры()
	
	СписокТекущих.Параметры.УстановитьЗначениеПараметра("НомерЗаказа", 		НомерЗаказа);
	СписокТекущих.Параметры.УстановитьЗначениеПараметра("Контрагент", 			Контрагент);
    СписокТекущих.Параметры.УстановитьЗначениеПараметра("ОсновнойМенеджер",	ОсновнойМенеджер);	
	//СписокТекущих.Параметры.УстановитьЗначениеПараметра("ТочкаМаршрута", 	ТочкаМаршрута);
	//СписокТекущих.Параметры.УстановитьЗначениеПараметра("Очередь", 			Очередь);
	//СписокТекущих.Параметры.УстановитьЗначениеПараметра("ПланируемаяДатаОтгрузки", ПланируемаяДатаОтгрузки);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМоиРоли()
	МассивРолей = Новый Массив;
	Для Каждого Элемент ИЗ ПараметрыСеанса.ТекущиеРоли Цикл
		МассивРолей.Добавить(Элемент);
	КонецЦикла;
	Возврат МассивРолей;
КонецФункции
&НаСервере
Функция ОбновитьСоставФильтровТочекМаршрута()
	
	ВидДействие = ВидТочкиМаршрутаБизнесПроцесса.Действие;
	
	// Очистим
	ВыбранныеТочкиМаршрута.Очистить();
	
	// Соберем
	Для Каждого БП Из Метаданные.БизнесПроцессы Цикл 
		Для Каждого Точка из БизнесПроцессы[БП.Имя].ТочкиМаршрута Цикл 
			Если Точка.Вид = ВидДействие И РолиПользователя.НайтиПоЗначению(Точка.Роль) <> Неопределено Тогда 
				
				ДобавитьИмяБП = МассивЗадачСРасширеннымПредставлением.НайтиПоЗначению(Точка) <> Неопределено; 
				ПометитьЭлемент = МассивЗадачОтключенныхПоУмолчанию.НайтиПоЗначению(Точка) = Неопределено; 
				Элемент = ВыбранныеТочкиМаршрута.Добавить(Точка, ?(ДобавитьИмяБП, Точка.НаименованиеЗадачи + " (" + БП.Имя + ")", ""),ПометитьЭлемент); КонецЕсли; КонецЦикла; КонецЦикла;
	
	// Отсортируем
	ВыбранныеТочкиМаршрута.СортироватьПоЗначению();
	
КонецФункции
&НаСервере
Функция ОбновитьПараметрыФильтровТочекМаршрута()
	
	Массив = Новый Массив;
	Для Каждого Элемент Из ВыбранныеТочкиМаршрута Цикл Если Элемент.Пометка Тогда Массив.Добавить(Элемент.Значение); КонецЕсли; КонецЦикла;
		
	СписокТекущих.Параметры.УстановитьЗначениеПараметра("ТочкиМаршрута", Массив);
	
КонецФункции
&НаСервере
Процедура ОбновитьСостояниеНаРабочемМесте()
	
	Если Parsec.ПодключитьКПарсек() Тогда
		
		Элементы.ДекорацияНетСвязи.Видимость 	= Ложь;
		Элементы.ГрафикРаботы.Видимость 		= Истина;
	
		Если Parsec.ПользовательНаРаботеИлиБылВЭтотДень() Тогда
			
			Элементы.ДекорацияВремяПосещения.Видимость 	= Истина;
			Элементы.ДекорацияВасНет.Видимость 			= Ложь;
			
			Посещения 	= Parsec.ПолучитьТаблицуВходовВыходовЗаДеньПоСотрудникам(ТекущаяДата(), ПараметрыСеанса.ТекущийПользователь.ФизЛицо);
			Если Посещения.Количество() Тогда
				Выход = Посещения[Посещения.Количество() - 1].Выход;
				Элементы.ДекорацияВремяПосещения.Заголовок = "вход " + Формат(Посещения[0].Вход,"ДЛФ=T") + " - " + ?(Выход = '00010101', "не выходил(а)",Формат(Выход,"ДЛФ=T")); КонецЕсли;
		Иначе
			
			Элементы.ДекорацияВремяПосещения.Видимость 	= Ложь;
			Элементы.ДекорацияВасНет.Видимость 			= Истина; КонецЕсли; 
	Иначе
		
		Элементы.ДекорацияНетСвязи.Видимость = Истина;
		     
		Элементы.ДекорацияВремяПосещения.Видимость 	= Ложь;
		Элементы.ДекорацияВасНет.Видимость 			= Ложь;
		Элементы.ГрафикРаботы.Видимость 			= Ложь; КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если 	ИмяСобытия = СобытияСистемы.Событие_ЗаписанаЗадача() Или
			ИмяСобытия = СобытияСистемы.Событие_ЗаписанБизнесПроцесс() Тогда
			
		
		//Элементы.СписокВыполненных.Обновить();
		Элементы.СписокТекущих.Обновить();
		
	ИначеЕсли ИмяСобытия = СобытияСистемы.Событие_ИзменилисьФильтрыЗакладокЗадач() Тогда
		
		ОбновитьФильтрЗакладок(); КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПолучитьИмяБП(ИмяСписка)
	
	ТекСтрока = Элементы.Найти(ИмяСписка).ТекущаяСтрока;
	
	Если 	ТекСтрока <> Неопределено И 
			Метаданные.БизнесПроцессы.Содержит(Метаданные.НайтиПоТипу(ТипЗнч(ТекСтрока.БизнесПроцесс)))Тогда
			
		Возврат Метаданные.НайтиПоТипу(ТипЗнч(ТекСтрока.БизнесПроцесс)).Имя;
			
	КонецЕсли;
	
	Возврат "";	
		
КонецФункции

&НаСервере
Процедура ПолучитьЗадачу(Задача)
	  а=1;
КонецПроцедуры

&НаКлиенте
Процедура СписокТекущихВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	//ПолучитьЗадачу(ВыбраннаяСтрока);
	Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.ОбъедененнаяСборка) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ОткрытьФорму("Справочник.ОбъедененнаяСборка.ФормаОбъекта", 
				Новый Структура("Ключ", Элемент.ТекущиеДанные.ОбъедененнаяСборка));
								
	КонецЕсли;
			
	Если ТипЗнч(Элемент.ТекущиеДанные.БизнесПроцесс) = Тип("БизнесПроцессСсылка.ЗадачаРазработчику") Тогда
		
		СтандартнаяОбработка 	= Ложь;
		ТекДанные 				= Элемент.ТекущиеДанные;
		
		Если 	ТекДанные.РодительскаяГруппировкаСтроки <> Неопределено Тогда
			
			ТекИмяФормы = ПолучитьИмяБП("СписокТекущих");
			
			Если ТекИмяФормы <> "" Тогда
	
				
				ОткрытьФорму("БизнесПроцесс." + ТекИмяФормы + ".ФормаОбъекта", 
								Новый Структура("Ключ", ТекДанные.БизнесПроцесс));
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура СписокВыполненныхВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	//ТекДанные = Элемент.ТекущиеДанные;
	//
	//Если ОткрыватьБП("СписокВыполненных") Тогда
	//	
	//	СтандартнаяОбработка = Ложь;
	//	
	//	ОткрытьФорму("БизнесПроцесс.ЗадачаРазработчику.ФормаОбъекта", 
	//						Новый Структура("Ключ", ТекДанные.БизнесПроцесс));
	//	
	//КонецЕсли;
	
КонецПроцедуры


// БЫСТРЫЕ ФИЛЬТРЫ

&НаСервере
Функция ПолучитьСкладыПользователя(выбПользователь) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ Склад ИЗ РегистрСведений.СкладыПользователя ГДЕ Пользователь = &ТекПользователь");	
	Запрос.УстановитьПараметр("ТекПользователь", выбПользователь);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Склад");
	
КонецФункции
&НаСервере
Функция ПолучитьРолиПользователя(ВыбПользователь)
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ 	Роль 
		|ПОМЕСТИТЬ 	СписокРолей
		|ИЗ 		РегистрСведений.РолиПользователей 
		|ГДЕ 		Пользователь = &Пользователь
		|;
		|ВЫБРАТЬ 	Ссылка КАК Роль
		|ИЗ 		Справочник.Роли
		|ГДЕ		Ссылка В ИЕРАРХИИ(ВЫБРАТЬ Роль ИЗ СписокРолей КАК СписокРолей)
		|");
		
	Запрос.УстановитьПараметр("Пользователь", ВыбПользователь);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Роль");
					
КонецФункции

&НаСервере
Функция УстановитьПользователя(выбПользователь = Неопределено)
	
	Если выбПользователь = Неопределено Тогда
		выбПользователь = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
	МассивРолей = ПолучитьРолиПользователя(выбПользователь);	
	СписокТекущих.Параметры.УстановитьЗначениеПараметра("ТекущийПользователь", 	выбПользователь);
	СписокТекущих.Параметры.УстановитьЗначениеПараметра("МоиСклады", 			ПолучитьСкладыПользователя(выбПользователь));
	СписокТекущих.Параметры.УстановитьЗначениеПараметра("МоиРоли", 				МассивРолей);
	
	// обновим фильтр по ролям
	РолиПользователя.ЗагрузитьЗначения(МассивРолей);
	СписокТекущих.Параметры.УстановитьЗначениеПараметра("Роль", 				МассивРолей);
	
	// Обновим точки
	ОбновитьСоставФильтровТочекМаршрута();
	ОбновитьПараметрыФильтровТочекМаршрута();
	
	// видимости
	Элементы.СписокТекущихОтнестиКЗакладке.Видимость = выбПользователь = ПараметрыСеанса.ТекущийПользователь;
	Элементы.СписокТекущихФильтрЗадачиСегодня.Видимость = МассивРолей.Найти(Справочники.Роли.Логист)<> Неопределено;
	
	ЭтоКладовщик = МассивРолей.Найти(Справочники.Роли.Кладовщик) <> Неопределено ИЛИ РольДоступна("ПолныеПраваВОбласти") ИЛИ РольДоступна("ПолныеПрава");
	Элементы.СписокТекущихПечатьОбъедененногоСборочного.Видимость = ЭтоКладовщик;
	Элементы.СписокТекущихДобавитьВСборочныйЛист.Видимость = ЭтоКладовщик;
	Элементы.СписокТекущихУдалитьИзСборочногоЛиста.Видимость = ЭтоКладовщик;
	
КонецФункции

&НаКлиенте
Процедура ОчиститьВсеФильтры(Команда)
	
	НомерЗаказа 	= "";
	Контрагент 		= Неопределено;
	ТочкаМаршрута	= Неопределено;
	ОсновнойМенеджер = Неопределено;

	РолиПользователя.ЗагрузитьЗначения(ПолучитьРолиПользователя(Пользователь));
	СписокТекущих.Параметры.УстановитьЗначениеПараметра("ЕстьФильтрРоль", Ложь);
	Очередь			= Неопределено;
	ПланируемаяДатаОтгрузки = '00010101';
	
	ОбновитьБыстрыеФильтры();
	
	СписокТекущих.Отбор.Элементы.Очистить();
	
	// Обновим точки
	ОбновитьСоставФильтровТочекМаршрута();
	ОбновитьПараметрыФильтровТочекМаршрута();
	
КонецПроцедуры

&НаКлиенте
Процедура ДрПользовательПриИзменении(Элемент)
	
	УстановитьПользователя(Пользователь);
	
КонецПроцедуры
&НаКлиенте
Процедура ДрПользовательОчистка(Элемент, СтандартнаяОбработка)
	
	УстановитьПользователя();
	
КонецПроцедуры

&НаКлиенте
Процедура РолиПользователяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Роли = ПолучитьРолиПользователя(Пользователь);
		
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.ЗагрузитьЗначения(Роли);
	
	// Проставим имеющиеся пометки
    Для Каждого ЭлементСписка Из СписокВыбора Цикл
		
		ЭлементСписка.Пометка = РолиПользователя.НайтиПоЗначению(ЭлементСписка.Значение) <> Неопределено;
		
	КонецЦикла;
	
	// Выберем новые пометки
	
	Если СписокВыбора.ОтметитьЭлементы("Роли пользователя") Тогда
		
		// Перезапишем список значения ролей
		
		РолиПользователя.Очистить();
		Для Каждого ЭлементСписка Из СписокВыбора Цикл
			Если ЭлементСписка.Пометка Тогда
			
				РолиПользователя.Добавить(ЭлементСписка.Значение);
				
			КонецЕсли;
		КонецЦикла;
		
		СписокТекущих.Параметры.УстановитьЗначениеПараметра("ЕстьФильтрРоль", Истина);
		СписокТекущих.Параметры.УстановитьЗначениеПараметра("Роль", РолиПользователя);
		
		// Обновим точки
		ОбновитьСоставФильтровТочекМаршрута();
		ОбновитьПараметрыФильтровТочекМаршрута();
	
	КонецЕсли;

КонецПроцедуры
&НаКлиенте
Процедура РолиПользователяОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокТекущих.Параметры.УстановитьЗначениеПараметра("ЕстьФильтрРоль", Ложь);
	
	// вернуть МоиРоли
	РолиПользователя.ЗагрузитьЗначения(ПолучитьРолиПользователя(Пользователь));
	
	// Обновим точки
	ОбновитьСоставФильтровТочекМаршрута();
	ОбновитьПараметрыФильтровТочекМаршрута();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииЭлементаФильтра(Элемент, СтандартнаяОбработка = Истина)
	
	ИмяФильтра = Лев(Элемент.Имя, Найти(Элемент.Имя, "Фильтр") - 1);
	СписокТекущих.Параметры.УстановитьЗначениеПараметра(ИмяФильтра, ЭтаФорма[ИмяФильтра]);
	
КонецПроцедуры

&НаКлиенте
Процедура НомерЗаказаФильтрПриИзменении(Элемент)
	
	// очищаем отборы для данного фильтра	
	Для Каждого ЭлементОтбора Из СписокТекущих.Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") И ЭлементОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли И ЭлементОтбора.Представление = "МассивЗаказов" ИЛИ
			
			 ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") И ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НомерЗаказа")  Тогда
			 
			СписокТекущих.Отбор.Элементы.Удалить(ЭлементОтбора);
	     КонецЕсли;
	КонецЦикла;				
	
	// получаем из строки массив номеров
	
	МассивНомеров = КонвертацияТипов.ПолучитьМассивИзСтроки(НомерЗаказа);
	
	Если МассивНомеров.Количество() > 1 Тогда
		
		// если указано несколько номеров - делаем группу условий "ИЛИ"
		ГруппаОтбора =  СписокТекущих.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных")); 
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		ГруппаОтбора.Представление = "МассивЗаказов";
		ГруппаОтбора.Использование = Истина;
	Иначе
		ГруппаОтбора = СписокТекущих.Отбор;
	КонецЕсли;
	
	// прописываем условия отбора
	
	Для Каждого текНомер Из МассивНомеров Цикл 
		
		ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НомерЗаказа");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Подобно;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ПравоеЗначение = "%" + текНомер + "%";	
	КонецЦикла;		
			
		
КонецПроцедуры
&НаКлиенте
Процедура НомерЗаказаФильтрОчистка(Элемент, СтандартнаяОбработка)
	
	// очищаем отборы для данного фильтра	
	
	Для Каждого ЭлементОтбора Из СписокТекущих.Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") И ЭлементОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли И ЭлементОтбора.Представление = "МассивЗаказов" ИЛИ
			
			 ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") И ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НомерЗаказа")  Тогда
			 
			СписокТекущих.Отбор.Элементы.Удалить(ЭлементОтбора);
	     КонецЕсли;
	КонецЦикла;		
КонецПроцедуры

&НаКлиенте
Процедура СборочныйЛистПриИзменении(Элемент)
	
	// очистим отбор по текущему фильтру
	
	Для Каждого ЭлементОтбора Из СписокТекущих.Отбор.Элементы Цикл
    	Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КодОбъедененнойСборки") Тогда
        	СписокТекущих.Отбор.Элементы.Удалить(ЭлементОтбора);	
		КонецЕсли;	
	КонецЦикла;			 
		 
	Если НЕ ПустаяСтрока(СборочныйЛист) Тогда
		 
		ЭлементОтбора = СписокТекущих.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));

		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КодОбъедененнойСборки");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Подобно;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ПравоеЗначение = "%" + СборочныйЛист + "%";	
			
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СборочныйЛистОчистка(Элемент, СтандартнаяОбработка)
        Для Каждого ЭлементОтбора Из СписокТекущих.Отбор.Элементы Цикл
             Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КодОбъедененнойСборки") Тогда
                   СписокТекущих.Отбор.Элементы.Удалить(ЭлементОтбора);
             КонецЕсли;
        КонецЦикла;	
КонецПроцедуры


&НаКлиенте
Процедура ПараллельныеЗадачиПриИзменении(Элемент)
	
	СписокТекущих.Параметры.УстановитьЗначениеПараметра("ПараллельныеЗадачи", ПараллельныеЗадачи);
	
КонецПроцедуры

&НаКлиенте
Процедура ДовернныеМнеЗадачиПриИзменении(Элемент)
	СписокТекущих.Параметры.УстановитьЗначениеПараметра("ЕстьФильтрДовернныеМнеЗадачи", ДоверенныеМнеЗадачи);
КонецПроцедуры


&НаКлиенте
Процедура ОткрытьВыполненныеЗадачи(Команда)
	
	ОткрытьФорму("Задача.ЗадачаПользователю.Форма.ВыполненныеЗадачи");
	
КонецПроцедуры


&НаКлиенте
Процедура ВыбранныеТочкиМаршрутаПометкаПриИзменении(Элемент)
	
	
КонецПроцедуры
&НаКлиенте
Процедура ПрименитьТочкиМаршрута(Команда)
	
	ОбновитьПараметрыФильтровТочекМаршрута();
	
КонецПроцедуры

// parsec

&НаКлиенте
Процедура КтоНаРаботеНажатие(Элемент)
	
	ОткрытьФорму("ОбщаяФорма.ИнформацияОПосещенииРабочегоМеста");
	
КонецПроцедуры
&НаКлиенте
Процедура ОбновитьParsec(Команда)
	
	ОбновитьСостояниеНаРабочемМесте();
	
КонецПроцедуры


&НаСервере
Функция ПолучитьТаблицуРаботы()
	
	Возврат Parsec.ПолучитьТабличныйДокументПосещенияСотрудника(ПараметрыСеанса.ТекущийПользователь.ФизЛицо);
	
КонецФункции
&НаКлиенте
Процедура ГрафикРаботы(Команда)
	
	Слежение.Записать("Информация. Просмотр своего времени посещения", "Задача.ЗадачаПользователю", "МоиЗадачи");
	ПолучитьТаблицуРаботы().Показать();
	
КонецПроцедуры


&НаКлиенте
Процедура ЗаявкиСервисаОжидаютОтветаМенеджераНажатие(Элемент)
	ОткрытьФорму("БизнесПроцесс.РемонтИнструмента.Форма.ФормаМенеджера", Новый Структура("Пользователь", Пользователь), ЭтаФорма);
КонецПроцедуры

// ЗАКЛАДКИ

&НаСервере 
Функция текПользователь()
	
	Возврат ПараметрыСеанса.ТекущийПользователь;
	
КонецФункции
&НаКлиенте
Процедура ОтборПоЗакладкам(Команда)
	
	ОткрытьФорму("Справочник.ЗакладкиЗадач.Форма.ФормаФильтраЗакладок", 
			Новый Структура("Пользователь, ЗапретитьРедактировать", 
					Пользователь, 
					Пользователь <> текПользователь()));
	
КонецПроцедуры
&НаСервере
Функция ПолучитьСписокЗакладок()
	
	// Получим закладки
	
	СписокЗакладок = Новый СписокЗначений;
	
	Запрос = Новый Запрос("ВЫБРАТЬ Ссылка ИЗ Справочник.ЗакладкиЗадач ГДЕ Пользователь = &текПользователь");
	Запрос.УстановитьПараметр("текПользователь", ПараметрыСеанса.ТекущийПользователь);
	СписокЗакладок.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	СписокЗакладок.СортироватьПоЗначению();
	СписокЗакладок.Вставить(0, Справочники.ЗакладкиЗадач.ПустаяСсылка(),".. Создать новую закладку ..");
	СписокЗакладок.Вставить(1, Справочники.ЗакладкиЗадач.НеУказана);

	Возврат СписокЗакладок;
	
КонецФункции

&НаСервере
Функция ОтнестиЗадачиКЗакладкам(ЗакладкаСсылка, Знач ЗадачиСсылки)
	
	НачатьТранзакцию();
	БезЗакладки = Справочники.ЗакладкиЗадач.НеУказана;
	
	Для Каждого ЗадачаСсылка Из ЗадачиСсылки Цикл
		
		Запись = РегистрыСведений.ЗакладкиЗадач.СоздатьМенеджерЗаписи();
		Запись.Пользователь = ПараметрыСеанса.ТекущийПользователь;
		Запись.Задача 		= ЗадачаСсылка;
		Запись.Закладка 	= ЗакладкаСсылка; 
		
		Если ЗакладкаСсылка = БезЗакладки Тогда
			
			Если Не ОбщиеФункции.УдалитьОбъектИСообщитьЕслиОшибка(Запись) Тогда
				ОтменитьТранзакцию();
				Возврат Ложь; КонецЕсли;
		Иначе
			Если Не ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(Запись) Тогда
				ОтменитьТранзакцию();
				Возврат Ложь; КонецЕсли; КонецЕсли; КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	Возврат Истина;
	
КонецФункции
&НаСервере
Функция ДлинаНазванияЗакладки()
	
	Возврат Метаданные.Справочники.ЗакладкиЗадач.ДлинаНаименования;
	
КонецФункции
&НаСервере
Функция ПолучитьНовуюЗакладку(НазвЗакладки, ЗаклСсылка)
	
	Спр = Справочники.ЗакладкиЗадач.СоздатьЭлемент();
	Спр.Наименование = НазвЗакладки;
	Спр.Пользователь = ПараметрыСеанса.ТекущийПользователь;
	
	Если Не ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(Спр) Тогда
		Возврат Ложь;
		
	Иначе
		ЗаклСсылка = СПр.Ссылка;
		Возврат Истина; КонецЕсли;
	
КонецФункции
&НаКлиенте
Процедура ОтнестиКЗакладке(Команда)
	
	СписокЗакладок 	= ПолучитьСписокЗакладок();
	ВыбрЭлемент		= СписокЗакладок.ВыбратьЭлемент("К какой закладке?");
	
	Если ВыбрЭлемент <> Неопределено Тогда
		
		Если ВыбрЭлемент.Значение.Пустая() Тогда
			
			// Новая закладка
			
			НазвЗакладки 	= "";
			ЗаклСсылка 		= Неопределено;
			Если 	Не ВвестиСтроку(НазвЗакладки, "Название закладки", ДлинаНазванияЗакладки()) Или
					Не ПолучитьНовуюЗакладку(НазвЗакладки, ЗаклСсылка) Тогда
				Возврат КонецЕсли;
			
		Иначе // Выбранная закладка
					
			ЗаклСсылка = ВыбрЭлемент.Значение; КонецЕсли;
		
		// Привяжем закладку
		
		Если ОтнестиЗадачиКЗакладкам(ЗаклСсылка, Элементы.СписокТекущих.ВыделенныеСтроки) Тогда
			Элементы.СписокТекущих.Обновить();КонецЕсли; КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФильтрЗадачиСегодня(Команда)

	Элементы.СписокТекущихФильтрЗадачиСегодня.Пометка = НЕ Элементы.СписокТекущихФильтрЗадачиСегодня.Пометка;
	
	Если Элементы.СписокТекущихФильтрЗадачиСегодня.Пометка Тогда
	
	ЭлементОтбора = СписокТекущих.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));

	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Дата");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ПравоеЗначение = НачалоДня(ТекущаяДата());	
		
	ЭлементОтбора = СписокТекущих.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));

	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗадачаПоДедлайну");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ПравоеЗначение = 1;	
	Иначе
	
         Для Каждого ЭлементОтбора Из СписокТекущих.Отбор.Элементы Цикл
			 Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Дата") ИЛИ
				  ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗадачаПоДедлайну") Тогда
				  
				  СписокТекущих.Отбор.Элементы.Удалить(ЭлементОтбора);
				  
              КонецЕсли;
		 КонецЦикла;	
		  
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПечатьОбъедененногоСборочного(Команда)
	
	МассивЗадач = Элементы.СписокТекущих.ВыделенныеСтроки;
	стрОшибки = "";
	Если МассивЗадач.Количество() И ПроверкаВыбораЗадач(МассивЗадач, стрОшибки) Тогда
		
		//ОткрытьФорму("БизнесПроцесс.СборкаЗаказа.Форма.ОбщийСборочныйЛист", Новый Структура("МассивЗадач", Элементы.СписокТекущих.ВыделенныеСтроки));
		ОткрытьФорму("Справочник.ОбъедененнаяСборка.ФормаОбъекта", Новый Структура("МассивЗадач", Элементы.СписокТекущих.ВыделенныеСтроки));
		
	ИначеЕсли НЕ ПустаяСтрока(стрОшибки) Тогда
		Сообщить(стрОшибки);
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверкаВыбораЗадач(МассивЗадач, стрОшибки = "", СсылкаОС = Неопределено)
	
	МассивДопустимыхТипов  = Новый Массив;
	Если СсылкаОС = Неопределено Тогда
		МассивДопустимыхТипов.Добавить(БизнесПроцессы.СборкаЗаказа.ТочкиМаршрута.СобратьЗаказ);
		МассивДопустимыхТипов.Добавить(БизнесПроцессы.СборкаЗаказа.ТочкиМаршрута.СобратьЗаказ1);
		МассивДопустимыхТипов.Добавить(БизнесПроцессы.ПеремещениеТоваров.ТочкиМаршрута.ОтправитьТовар);
		МассивДопустимыхТипов.Добавить(БизнесПроцессы.ПеремещениеТоваров.ТочкиМаршрута.ПринятьТовар);
	ИначеЕсли 
		СтрНайти(СсылкаОС.ВидЗадач.Имя, "СобратьЗаказ") Тогда
		МассивДопустимыхТипов.Добавить(БизнесПроцессы.СборкаЗаказа.ТочкиМаршрута.СобратьЗаказ);
		МассивДопустимыхТипов.Добавить(БизнесПроцессы.СборкаЗаказа.ТочкиМаршрута.СобратьЗаказ1);
	Иначе		
		МассивДопустимыхТипов.Добавить(СсылкаОС.ВидЗадач);
	КонецЕсли;	

	текТочка = МассивЗадач[0].ТочкаМаршрута;
	текСклад = МассивЗадач[0].Склад; 
	//текСкладПолучатель = ?(ТипЗнч(МассивЗадач[0].БизнесПроцесс) = Тип("БизнесПроцессСсылка.ПеремещениеТоваров"), МассивЗадач[0].БизнесПроцесс.СкладПолучатель, Неопределено);

	Для Каждого Задач ИЗ МассивЗадач Цикл
		
		Если МассивДопустимыхТипов.Найти(Задач.ТочкаМаршрута) = Неопределено Тогда
			стрОшибки = "Задача данного вида """ + Строка(Задач) + """ не может быть добавлена в общий сборочный лист" + ?(СсылкаОС = Неопределено, "", ": " + Строка(СсылкаОС));
			Возврат Ложь;
		КонецЕсли;

		Если Задач.ТочкаМаршрута <> текТочка Тогда стрОшибки = "Вы выбрали разного вида задачи. Для печати общего сборочного листа задачи должны быть одного вида."; Возврат Ложь; КонецЕсли;
		
		Если Задач.Склад <> текСклад Тогда стрОшибки = "Нельзя объединить задачи для разных складов в общий сборочный лист"; КонецЕсли;
		
		//Если Задач.БизнесПроцесс.СкладПолучатель <> текСкладПолучатель Тогда  стрОшибки = "Нельзя объединить задачи для разных складов-получателей в общий сборочный лист"; КонецЕсли;
		
		//текСклад = Задач.Склад;
		//текТочка = Задач.ТочкаМаршрута;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьЗадачу(Команда)
	ОткрытьФорму("Задача.ЗадачаПользователю.ФормаОбъекта", Новый Структура("Ключ", Элементы.СписокТекущих.ТекущаяСтрока));
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВСборочныйЛист(Команда)
	
	ОткрытьФорму("Справочник.ОбъедененнаяСборка.ФормаВыбора",, ЭтаФорма,,,, Новый ОписаниеОповещения("ОкончаниеВыбораОбъедененнойСборки",ЭтаФорма, Элементы.СписокТекущих.ВыделенныеСтроки));
	
КонецПроцедуры
&НаСервере 
Процедура ДобавитьЗадачуВОбСборку(СсылкаОС, ВыделенныеСтроки)
	
	Для Каждого Элемент ИЗ ВыделенныеСтроки Цикл
	
		Запись = РегистрыСведений.СборочныеЛисты.СоздатьМенеджерЗаписи();
		Запись.Код = СсылкаОС.Код;
		Запись.ОбъедененнаяСборка = СсылкаОС;
		Запись.Задача = Элемент;
		Запись.Использование = Истина;
		
		Попытка
			Запись.Записать();
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;	
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеВыбораОбъедененнойСборки(Результат, Параметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		стрОшибки = "";
		Если НЕ ПроверкаВыбораЗадач(Параметры, стрОшибки, Результат) Тогда
			Сообщить(стрОшибки);
			Возврат;
		КонецЕсли;
		
		ДобавитьЗадачуВОбСборку(Результат, Параметры);
		Элементы.СписокТекущих.Обновить();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция УдалитьИзСборочногоЛистаНаСервере(ВыделенныеСтроки)
	
	Для Каждого Элемент ИЗ ВыделенныеСтроки Цикл
	
		Запись = РегистрыСведений.СборочныеЛисты.СоздатьМенеджерЗаписи();
		Запись.Задача = Элемент;
		Запись.Прочитать();
		Попытка
			Запись.Удалить();
		Исключение
			Сообщить(ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;	
	КонецЦикла;
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура УдалитьИзСборочногоЛиста(Команда)
	МассивЗадач = Элементы.СписокТекущих.ВыделенныеСтроки;
	Если УдалитьИзСборочногоЛистаНаСервере(МассивЗадач) Тогда
		Элементы.СписокТекущих.Обновить();
	КонецЕсли;
КонецПроцедуры



