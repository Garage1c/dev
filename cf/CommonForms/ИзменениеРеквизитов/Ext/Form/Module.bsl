&НаКлиенте
Перем Изменения, Версия, ЗакрытьВладельца;

&НаСервере
Процедура УправлениеВидимостью()
	ПравоНаИсторию = РольДоступна("ПолныеПрава") Или РольДоступна("ПолныеПраваВОбласти");
	Элементы.ПолучитьИсторию.Видимость = ПравоНаИсторию;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Контрагент"));
	Элементы.БанковскийСчетПартнера.СвязиПараметровВыбора = Новый ФиксированныйМассив(НовыйМассив);
	
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Грузоотправитель"));
	Элементы.БанковскийСчетГрузоотправителя.СвязиПараметровВыбора = Новый ФиксированныйМассив(НовыйМассив);
	
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Грузополучатель"));
	Элементы.БанковскийСчетГрузополучателя.СвязиПараметровВыбора = Новый ФиксированныйМассив(НовыйМассив);
	
	Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаРеквизиты;
	
	ОтветственныйЗаИзменения = ПараметрыСеанса.ТекущийПользователь;
	УправлениеВидимостью();
	
КонецПроцедуры
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Версия = 1; // Формат Значение-НовоеЗначение
	Изменения = Новый Структура;
	ЗакрытьВладельца = Ложь;
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, ВладелецФормы.Объект);
	ДокументыОплаты.ЗагрузитьЗначения(ВладелецФормы.ДокументыОплаты.ВыгрузитьЗначения());
	ОплатыПоДокументу.ЗагрузитьЗначения(ВладелецФормы.ДокументыОплаты.ВыгрузитьЗначения());
	//ОбновитьОтображениеДанных();
	
	Если НЕ ЗначениеЗаполнено(Грузополучатель)  Тогда Грузополучатель  = ПредопределенноеЗначение("Справочник.Грузополучатели.ПустаяСсылка"); КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Грузоотправитель) Тогда Грузоотправитель = ПредопределенноеЗначение("Справочник.Грузополучатели.ПустаяСсылка"); КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	// если были несохраненные изменения
	Если ЕстьИзменения() Тогда
		Ответ = Вопрос("Сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена);
		Если  Ответ = КодВозвратаДиалога.Да Тогда
			Отказ = НЕ ВыполнитьЗаписьДанных();
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// закрываем владельца, только в случаее изменения реквизитов
	//Если ЗакрытьВладельца Тогда
	//	ВладелецФормы.Закрыть();
	//КонецЕсли;
	
КонецПроцедуры


&НаСервере
Функция СохранитьИзменения(Изменения)
	
	Менеджер = РегистрыСведений.ИзмененияРеквизитов;
	МоментИзменения = ТекущаяДата();
	
	РежимЗаписи = Истина;
	
	Если Изменения.Свойство("Организация") ИЛИ Изменения.Свойство("Контрагент") Тогда
		РежимЗаписи = Ложь; КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	НачатьТранзакцию();
	
	//пишем в заказ, если он есть и есть изменения реквизитов
	
	ЗаказСсылка = Ссылка.Заказ;
	Если Изменения.Количество() И ЗаказСсылка <> Неопределено И НЕ ЗаказСсылка.Пустая() Тогда
		
		Заказ = ЗаказСсылка.ПолучитьОбъект();
		
		Для Каждого Строка ИЗ Изменения Цикл
			Попытка
				Заказ[Строка.Ключ] = Строка.Значение.НовоеЗначение;
			Исключение 
				Продолжить; КонецПопытки; КонецЦикла;	
			
		Попытка
			Заказ.Записать(?(РежимЗаписи, РежимЗаписиДокумента.Запись, РежимЗаписиДокумента.Проведение));
		Исключение
			ОтменитьТранзакцию();
			Сообщить("Ошибка сохранения данных");
			Возврат Ложь;
		КонецПопытки;
		
		Если НЕ РежимЗаписи Тогда
		
			//Ищем все корректировки и перепроводим
			
			Запрос = Новый Запрос("
				|ВЫБРАТЬ Ссылка ИЗ Документ.КорректировкаЗаказаПокупателя ГДЕ Заказ = &Заказ
				|ОБЪЕДИНИТЬ ВСЕ
				|ВЫБРАТЬ Ссылка ИЗ Документ.КорректировкаИнтернетЗаказа ГДЕ Заказ = &Заказ
				|");
			Запрос.УстановитьПараметр("Заказ", ЗаказСсылка);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				
				КорЗаказ = Выборка.Ссылка.ПолучитьОбъект();
				Попытка
					КорЗаказ.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
					ОтменитьТранзакцию();
					Сообщить("Ошибка сохранения данных");
					Возврат Ложь;
				КонецПопытки;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	// пишем в реализацию
	
    Источник = Ссылка.ПолучитьОбъект();
	Для Каждого Строка ИЗ Изменения Цикл
		Источник[Строка.Ключ] = Строка.Значение.НовоеЗначение;
	КонецЦикла;

	Источник.ПлатежныеДокументы.Очистить();
	КонвертацияТипов.ЗагрузитьСписокЗначенийВТаблицу(Источник.ПлатежныеДокументы, ДокументыОплаты, "ДокументОплаты");
	
	Попытка
		Источник.Записать(?(РежимЗаписи, РежимЗаписиДокумента.Запись,РежимЗаписиДокумента.Проведение));
	Исключение
		ОтменитьТранзакцию();
		Сообщить("Ошибка сохранения данных");
		Возврат Ложь;
	КонецПопытки;
	
	// пишем в регистр историю
	
	Для Каждого Строка ИЗ Изменения Цикл
		Запись = Менеджер.СоздатьМенеджерЗаписи();
		Запись.Период 	= МоментИзменения;
		Запись.Документ = Ссылка;
		Запись.Реквизит = Строка.Ключ;
		Запись.Значение = Новый ХранилищеЗначения(Строка.Значение);
		Попытка
			Запись.Записать();
		Исключение
			ОтменитьТранзакцию();
			Сообщить("Ошибка сохранения данных");
			Возврат Ложь;
		КонецПопытки;
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	ОплатыПоДокументу.ЗагрузитьЗначения(Ссылка.ПлатежныеДокументы.Выгрузить().ВыгрузитьКолонку("ДокументОплаты"));

    Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ЕстьИзменения() 
	Возврат Изменения.Количество() ИЛИ НЕ СравнитьОплаты()
КонецФункции

&НаКлиенте
Функция ВыполнитьЗаписьДанных()
	
	ЕстьЧтоМенять = ЕстьИзменения();
	
	// есть что менять и замена выполнена корректно
	Если ЕстьЧтоМенять И СохранитьИзменения(Изменения) Тогда
			Изменения.Очистить();
			ВладелецФормы.ОтобразитьИзменениеДанных(Ссылка, ВидИзмененияДанных.Изменение);
			ЗакрытьВладельца = Истина;
			Возврат Истина;
	КонецЕсли;
	
	// нечего менять
	Если НЕ ЕстьЧтоМенять Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции


&НаКлиенте
Процедура ЗаписатьДанные(Команда)	
	
	// данные записаны, сообщаем об этом
	Если ВыполнитьЗаписьДанных() Тогда
		ПоказатьПредупреждение(,"Данные успешно записаны",,"Предупреждение");
	КонецЕсли;
	
КонецПроцедуры  
&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	// данные записаны корректно, закрываем форму
	Если ВыполнитьЗаписьДанных() Тогда
		Закрыть(ЗакрытьВладельца);
	КонецЕсли;

КонецПроцедуры

// ИСТОРИЯ

&НаСервере
Процедура ПолучитьИсториюНаСервере()

	История.Очистить();
	
	Запрос = Новый Запрос("ВЫБРАТЬ Реквизит, Значение, Период ИЗ РегистрСведений.ИзмененияРеквизитов ГДЕ Документ = &Ссылка УПОРЯДОЧИТЬ ПО Период, Реквизит");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = История.Добавить();
		НоваяСтрока.Дата = Выборка.Период;
		НоваяСтрока.Реквизит = Выборка.Реквизит;
		Хранилище = Выборка.Значение.Получить();
		Если Хранилище.Версия = 1 Тогда
			НоваяСтрока.ЗначениеДо = Хранилище.Значение;
			НоваяСтрока.ЗначениеПосле = Хранилище.НовоеЗначение;
			НоваяСтрока.Ответственный = Хранилище.Ответственный;
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры
&НаКлиенте
Процедура ПолучитьИсторию(Команда)
	ПолучитьИсториюНаСервере();
	Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаИстория;
КонецПроцедуры
&НаКлиенте
Процедура НазадКРеквизитам(Команда)
	Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаРеквизиты;
КонецПроцедуры

// ЭЛЕМЕНТЫ

&НаКлиенте
Процедура ЭлементПриИзменении(Имя)
	
	Источник = ВладелецФормы.Объект;
	
	Попытка
		Значение = Источник[Имя];
		НовоеЗначение = ЭтаФорма[Имя];
	Исключение
		Возврат;
	КонецПопытки;

	Если Значение <> НовоеЗначение Тогда
		Изменения.Вставить(Имя, Новый Структура("Версия, Значение, НовоеЗначение, Ответственный", Версия, Значение, НовоеЗначение, ОтветственныйЗаИзменения));
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция КонтрагентПриИзмененииНаСервере()
	Возврат ФункцииФормДокументов.КонтрагентПриИзменении(ЭтаФорма);
КонецФункции

&НаСервере
Функция КонтрагентРаботаетСОрганизацией(НовыйКонтрагент, Организация)
	Возврат Справочники.Контрагенты.КонтрагентРаботаетСОрганизацией( НовыйКонтрагент, Организация);
КонецФункции

&НаКлиенте
Функция ПроверитьНаСоответствиеОсновнойОрганизации(НовыйКонтрагент)
	
	ОрганизацияПоДокументу = ВладелецФормы.Объект.Организация; 
	
	ЭтоОрганизацияПоУмолчанию = КонтрагентРаботаетСОрганизацией(НовыйКонтрагент, ОрганизацияПоДокументу);
	
	Если ЭтоОрганизацияПоУмолчанию = Неопределено Тогда
		ПоказатьПредупреждение(,"Контрагент не работает с """ + ОрганизацияПоДокументу + """",,"Сообщение!");
		Возврат Ложь;
	ИначеЕсли ЭтоОрганизацияПоУмолчанию = Ложь Тогда
		Если Вопрос("Основная организация контрагента отличается от организации в документе,
				|Поменять контрагента?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВернутьПредыдущееЗначениеКонтрагента()
	
	Перем стКонтрагент;
	
	Если Изменения.Свойство("Контрагент", стКонтрагент) И стКонтрагент <> Неопределено Тогда
		Контрагент = стКонтрагент.НовоеЗначение;
	Иначе
		Контрагент = ВладелецФормы.Объект.Контрагент;
	КонецЕсли;
	
	КонтрагентПриИзмененииНаКлиенте();
	
КонецПроцедуры


&НаКлиенте
Процедура КонтрагентПриИзмененииНаКлиенте()
	
	СтруктураРеквизитов = КонтрагентПриИзмененииНаСервере();
	ЭлементПриИзменении("Контрагент");
	
	Для Каждого Строка ИЗ СтруктураРеквизитов Цикл
		ЭлементПриИзменении(Строка.Ключ);
	КонецЦикла;
	
КонецПроцедуры
&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	Если НЕ ПроверитьНаСоответствиеОсновнойОрганизации(Контрагент) Тогда
		ВернутьПредыдущееЗначениеКонтрагента();
		Возврат;
	КонецЕсли;
	
	КонтрагентПриИзмененииНаКлиенте();
	
КонецПроцедуры

&НаСервере
Функция ГрузоотправительПриИзмененииНаСервере()
	Возврат ФункцииФормДокументов.ГрузоотправительПриИзменении(ЭтаФорма);
КонецФункции
&НаСервере
Функция ГрузополучательПриИзмененииНаСервере()
	Возврат ФункцииФормДокументов.ГрузополучательПриИзменении(ЭтаФорма);
КонецФункции

&НаКлиенте
Процедура ГрузоотправительПриИзменении(Элемент)
	СтруктураРеквизитов = ГрузоотправительПриИзмененииНаСервере();
	ЭлементПриИзменении(Элемент.Имя);
	
	Для Каждого Строка ИЗ СтруктураРеквизитов Цикл
		ЭлементПриИзменении(Строка.Ключ);
	КонецЦикла;

КонецПроцедуры
&НаКлиенте
Процедура ГрузополучательПриИзменении(Элемент)
	СтруктураРеквизитов = ГрузополучательПриИзмененииНаСервере();
	ЭлементПриИзменении(Элемент.Имя);

	Для Каждого Строка ИЗ СтруктураРеквизитов Цикл
		ЭлементПриИзменении(Строка.Ключ);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПлательщикПриИзменении(Элемент)
	ЭлементПриИзменении(Элемент.Имя);
КонецПроцедуры
&НаКлиенте
Процедура БанковскийСчетПартнераПриИзменении(Элемент)
	ЭлементПриИзменении(Элемент.Имя);
КонецПроцедуры
&НаКлиенте
Процедура БанковскийСчетГрузоотправителяПриИзменении(Элемент)
	ЭлементПриИзменении(Элемент.Имя);
КонецПроцедуры
&НаКлиенте
Процедура БанковскийСчетГрузополучателяПриИзменении(Элемент)
	ЭлементПриИзменении(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАванс(Команда)
	ЗаполнитьДокументыОплатыНаСервере();
КонецПроцедуры


&НаСервере
Функция СравнитьОплаты()
	
	ОплатыПоДокументу.СортироватьПоЗначению();
	Строка1 = КонвертацияТипов.ПолучитьСтрокуИзМассива(ОплатыПоДокументу.ВыгрузитьЗначения());
	
	ДокументыОплаты.СортироватьПоЗначению();
	Строка2 = КонвертацияТипов.ПолучитьСтрокуИзМассива(ДокументыОплаты.ВыгрузитьЗначения());
	
	Возврат Строка1 = Строка2;
	
КонецФункции

&НаСервере
Функция ЗаполнитьДокументыОплатыНаСервере()
	
	ДокФантом = Документы.РеализацияТоваров.СоздатьДокумент();
	ЗаполнитьЗначенияСвойств(ДокФантом, Ссылка);
	ДокФантом.ЗаполнитьДокументыОплаты(Ссылка);
	
	ДокументыОплаты.ЗагрузитьЗначения(ДокФантом.ПлатежныеДокументы.Выгрузить().ВыгрузитьКолонку("ДокументОплаты"));
	
КонецФункции

&НаКлиенте
Процедура ДокументыОплатыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыбПлатежка = ОткрытьФорму("Документ.ПлатежноеПоручениеВходящее.ФормаВыбора", 
						Новый Структура("Организация, Контрагент",
						ВладелецФормы.Объект.Организация, Контрагент),
						ЭтаФорма,,,,Новый ОписаниеОповещения("ОбработкаОткрытияФормыВыбораДокумента",ЭтаФорма,));
						
	//Если ДокументыОплаты.НайтиПоЗначению(ВыбПлатежка) = Неопределено Тогда
	//	ДокументыОплаты.Добавить(ВыбПлатежка);
	//	Модифицированность = Истина;
	//КонецЕсли;

КонецПроцедуры
&НаКлиенте
Процедура ОбработкаОткрытияФормыВыбораДокумента(Результат, Параметры)Экспорт
	Если ДокументыОплаты.НайтиПоЗначению(Результат) = Неопределено Тогда
		ДокументыОплаты.Добавить(Результат);
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры
&НаСервере
Функция ПолучитьОписаниеТиповДокументОплат()
	
	Возврат Метаданные.Документы.РеализацияТоваров.ТабличныеЧасти.ПлатежныеДокументы.Реквизиты.ДокументОплаты.Тип;
	
КонецФункции

&НаКлиенте
Процедура ДокументыОплатыОткрытие(Элемент, СтандартнаяОбработка)
	Перем ВыбЗначение;
	
	СтандартнаяОбработка = Ложь;
		
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ОбработкаВыбораДокаОплаты", ЭтаФорма), ВыбЗначение, "Выбор типа документа", ПолучитьОписаниеТиповДокументОплат());

КонецПроцедуры
Процедура ОбработкаВыбораДокаОплаты(Результат, Параметры) Экспорт							
	Если ДокументыОплаты.НайтиПоЗначению(Результат) = Неопределено Тогда
		ДокументыОплаты.Добавить(Результат);
		Модифицированность = Истина;
	КонецЕсли;	
КонецПроцедуры
