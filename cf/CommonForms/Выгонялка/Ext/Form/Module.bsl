
// ОБНОВЛЕНИЕ

&НаСервере
Процедура ОбновитьДанные()
	
	АктивныеПользователи.Очистить();
	
	// Получим сеансы
	
	//пока не решили глюк с зависанием - все отключаем
	
	//СеансыИБ = ПолучитьСеансыИнформационнойБазы();
	//
	//Если СеансыИБ <> Неопределено Тогда
	//	Для Каждого СеансИБ Из СеансыИБ Цикл Стр = АктивныеПользователи.Добавить(); Стр.Пользователь = СеансИБ.Пользователь.Имя; Стр.ИмяКомпьютера = СеансИБ.ИмяКомпьютера; Стр.НомерСеанса = СеансИБ.НомерСеанса; стр.ИмяПриложения  = СеансИБ.ИмяПриложения ; КонецЦикла; КонецЕсли;

	// Проставим согласие
	
	Запрещенные = "Designer, BackgroundJob, WSConnection";
	Запрос 		= Новый Запрос("ВЫБРАТЬ НомерСеанса, Готов ИЗ РегистрСведений.ГотовностьКВыходу");
	Выгрузка 	= Запрос.Выполнить().Выгрузить();
	
	Для Каждого стр Из АктивныеПользователи Цикл текСтр = Выгрузка.Найти(стр.НомерСеанса, "НомерСеанса"); Стр.Готов = ?(Найти(Запрещенные, Стр.ИмяПриложения), 2, Число(текСтр <> Неопределено И текСтр.Готов)); КонецЦикла;
	
	// Отсортируем
	
	АктивныеПользователи.Сортировать("Пользователь");
	
	// Получим параметры
	
	ПараметрыВыхода 	= Выгонялка_Сервер.ПолучитьПараметрыВремени();
	СекундДоЗавершения 	= ?(ПараметрыВыхода.ТекущийРежим < 2 Или ПараметрыВыхода.ВремяЗавершения = '00010101', 0, ПараметрыВыхода.ВремяЗавершения - ТекущаяДата());
	
	Если ПараметрыВыхода.ТекущийРежим = 0 Тогда
		
		Элементы.Информация.Заголовок = "Нет заданий для перезагрузки системы";
		
	ИначеЕсли ПараметрыВыхода.ТекущийРежим = 1 Тогда
		
		Если ПараметрыВыхода.ВремяЗавершения <> '00010101' Тогда
			СекундДоЗавершения = ПараметрыВыхода.ВремяЗавершения - ТекущаяДата(); КонецЕсли;
		
		Текст = "";
		Если ПараметрыВыхода.КонфигурацияИзменена Тогда
			Текст = "Изменена конфигурация базы данных" + Символы.ПС; КонецЕсли;
		
		Элементы.Информация.Заголовок = Текст + "Запланирован принудительный перезапуск системы
		|Время перезапуска: " + Формат(ПараметрыВыхода.ВремяЗавершения,"ДЛФ=DDT") + ?(ПараметрыВыхода.КонфигурацияИзменена,"","
		|Начало напоминаний: " + Формат(ПараметрыВыхода.ВремяНачалаНапоминания,"ДЛФ=DDT"));
		
	ИначеЕсли ПараметрыВыхода.ТекущийРежим = 2 Тогда
		
		Текст = "";
		Если ПараметрыВыхода.КонфигурацияИзменена Тогда
			Текст = "Изменена конфигурация базы данных" + Символы.ПС; КонецЕсли;
		
		Элементы.Информация.Заголовок = Текст + "Система ожидает выхода из программы всех пользователей"
				+ ?(ПараметрыВыхода.ВремяЗавершения = '00010101',
						"","
						|Принудительный перезапуск: " + Формат(ПараметрыВыхода.ВремяЗавершения,"ДЛФ=DDT"));
	
	ИначеЕсли ПараметрыВыхода.ТекущийРежим = 3 Тогда
		
		Элементы.Информация.Заголовок = "Система требует выхода, все пользователи вышли";
		
	КонецЕсли;
	
	// Установим видимость элементов
	
	// пока глюк с сеансами
	//текСтрока 	= АктивныеПользователи.НайтиСтроки(Новый Структура("НомерСеанса", НомерСеансаИнформационнойБазы()))[0];
	//текГотов	= текСтрока.Готов;
	
	//Элементы.ГотовКВыходу.Видимость 	= Не текГотов;
	//Элементы.НеГотовКВыходу.Видимость 	= текГотов;
	
КонецПроцедуры
&НаКлиенте
Процедура ОбновитьДанныеНаКлиенте()

	// Обновим данные на сервере
	
	ОбновитьДанные();
	
	// Запустим часы
	
	Если 	СекундДоЗавершения И // Включили
			Не ЧасыЗапущены Тогда
			
		ЧасыЗапущены 				= Истина;
		ВремяЗавершенияРаботы 		= ТекущаяДата() + СекундДоЗавершения;
		ПодключитьОбработчикОжидания("ОбновлениеЧасов",1);
		Элементы.Секунды.Видимость 	= Истина;
		
	ИначеЕсли 	Не СекундДоЗавершения И // Отключили
				ЧасыЗапущены Тогда
				
		ЧасыЗапущены 				= Ложь;
		Элементы.Секунды.Видимость 	= Ложь;
		ВремяЗавершенияРаботы 		= '00010101';
		ОтключитьОбработчикОжидания("ОбновлениеЧасов"); КонецЕсли;
	
	// Кнопки
	
	Элементы.Запустить.Видимость 	= Не СекундДоЗавершения;
	Элементы.Остановить.Видимость 	= СекундДоЗавершения;
	Элементы.перезапуск_3Минуты.Видимость 	= Не СекундДоЗавершения;
	Элементы.перезапуск_5Минут.Видимость 	= Не СекундДоЗавершения;
	
КонецПроцедуры
&НаКлиенте
Процедура ОбновлениеЧасов()
	
	СекундДоЗавершенияКлиент 	= ВремяЗавершенияРаботы - ТекущаяДата();
	Элементы.Секунды.Заголовок 	= ?(СекундДоЗавершенияКлиент < 0, "%(", СекундДоЗавершенияКлиент);
	
КонецПроцедуры

// ТИПОВЫЕ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьПривилегированныйРежим(Истина);
		
	ВремяЗавершенияРаботы 			= Константы.ВремяЗавершенияРаботыПользователей.Получить();
	ВремяНачалаНапоминания 			= Константы.ВремяНачалаНапоминанияОЗавершении.Получить();
	//ОбновитьКонфигурациюИзХранилища = Константы.ОбновитьКонфигурациюИзХранилища.Получить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ДлительностьБлокировки=60;
	
	Если Параметры.ЭтаФормаОткрыласьАвтоматически Тогда
		Элементы.ГруппаНастройкиИзгнания.Видимость = Ложь; КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьДанныеНаКлиенте();
	
КонецПроцедуры
&НаКлиенте
Процедура ПриПовторномОткрытии()
	
	ОбновитьДанныеНаКлиенте();
	
КонецПроцедуры

// ГОТОВНОСТЬ ПОЛЬЗОВАТЕЛЯ

&НаКлиенте
Процедура ГотовностьКВыходу(Команда)
	
	ОткрытьФорму("РегистрСведений.ГотовностьКВыходу.ФормаСписка");
	
КонецПроцедуры

&НаСервере
Функция УстановитьГотовностьКВыходуНаСервере(Готовность = Истина)
	
	Запись = РегистрыСведений.ГотовностьКВыходу.СоздатьМенеджерЗаписи();
	Запись.НомерСеанса = НомерСеансаИнформационнойБазы();
	Запись.Готов = Готовность;
	
	Возврат ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(Запись);
	
КонецФункции
&НаКлиенте
Процедура ГотовКВыходу(Команда)
	
	УстановитьГотовностьКВыходуНаСервере();
	ОбновитьДанныеНаКлиенте();
	
КонецПроцедуры
&НаКлиенте
Процедура НеГотовКВыходу(Команда)
	
	УстановитьГотовностьКВыходуНаСервере(Ложь);
	ОбновитьДанныеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРаботуНажатие(Команда)
	
	Если УстановитьГотовностьКВыходуНаСервере() Тогда
		
		ЗавершитьРаботуЧерезСекунду();
		Закрыть();
		
	Иначе
		
		ПоказатьПредупреждение(,"Не удалось установить режим готовности к выходу",,"Предупреждение"); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьДанныеНаКлиенте();
	
КонецПроцедуры

// КНОПКИ АДМИНА

&НаСервере
Функция ЗапуститьНаСервере()
	
	//Если ПустаяСтрока(Пользователь) Тогда ОбщиеФункции.СообщитьТекст("Не заполнен пользователь"); Возврат Ложь; КонецЕсли;
	
	Если ПустаяСтрока(КодРазрешения) Тогда КодРазрешения = 123 КонецЕсли;
	
	// Установим все записи соединений
	
	//пока не решили проблему с зависанием сеансов - отключаем
	
	//СеансыИБ 	= ПолучитьСеансыИнформационнойБазы();
	//Набор 		= РегистрыСведений.ГотовностьКВыходу.СоздатьНаборЗаписей();
	//Запрещенные = "Designer, BackgroundJob";
	//
	//Для Каждого СеансИБ Из СеансыИБ Цикл Если Не Найти(Запрещенные, СеансИБ.ИмяПриложения) Тогда Набор.Добавить().НомерСеанса = СеансИБ.НомерСеанса; КонецЕсли; КонецЦикла;
	
	НачатьТранзакцию();
	
	Попытка		//Набор.Записать();
				Константы.ВремяЗавершенияРаботыПользователей.Установить(ВремяЗавершенияРаботы);
				Константы.ВремяНачалаНапоминанияОЗавершении.Установить(ВремяНачалаНапоминания);
				
	Исключение	ОтменитьТранзакцию();
				Возврат Ложь; КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
	ВремяОкончанияБлокировки = ВремяЗавершенияРаботы + ДлительностьБлокировки;
	
	//ЗаблокироватьРегламентныеЗадания();
	
	//фонПараметры = Новый Массив;
	//фонПараметры.Добавить(КодРазрешения);
	//фонПараметры.Добавить(Пользователь); 
	//фонПараметры.Добавить(Пароль); 
	//
	//ФоновыеЗадания.Выполнить("Выгонялка_Сервер.ДождатьсяВремениИобновить", фонПараметры,"удалялкаКлюч","Ожидания запуска обновления " + Формат(ВремяЗавершенияРаботы, "ДФ='dd.MM hh:mm:ss'"));
	
	//Соед = новый БлокировкаУстановкиСоединений;
	//Соед.КодРазрешения	= КодРазрешения;
	//Соед.Сообщение		= "С "+ВремяЗавершенияРаботы+" по "+ВремяОкончанияБлокировки+" будет произведено обновление информационной базы.";
	//Соед.Начало			= ВремяЗавершенияРаботы;
	//Соед.Конец			= ВремяОкончанияБлокировки;
	//Соед.Установлена	= Истина;
	//
	//УстановитьБлокировкуУстановкиСоединений(Соед);
	
	БлокировкаСеансов = Новый БлокировкаСеансов;
	БлокировкаСеансов.КодРазрешения=КодРазрешения;
	БлокировкаСеансов.Сообщение="С "+ВремяЗавершенияРаботы+" по "+ВремяОкончанияБлокировки+" будет произведено обновление информационной базы.";
	БлокировкаСеансов.Начало=ВремяЗавершенияРаботы;
	БлокировкаСеансов.Конец=ВремяОкончанияБлокировки;
	БлокировкаСеансов.Установлена=Истина;
	
	УстановитьБлокировкуСеансов(БлокировкаСеансов);
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВключитьОбновлялкуНаКлиенте()
	
	ОтключитьОбработчикКонтроляРаботы(); // отключим что не нароком не отрубился выход перед обновлением
	ПодключитьОбработчикОжидания("ОбновитьБазу", ВремяЗавершенияРаботы - ТекущаяДата(), Истина);
	Элементы.Декорация2.Видимость = Истина;
	
КонецПроцедуры
&НаКлиенте
Процедура ОбновитьБазу() Экспорт
	
	ПрекратитьРаботуСистемы(Ложь); Возврат;
	
	ПрекратитьРаботуСистемы(Истина, "DESIGNER /Outc:\temp\Log1cUpd.txt /DisableStartupMessages" + 
		//" /s" + ПолучитьПутьКБазеИзСтрокиПодключения() + " /n" + Пользователь + " /p" + Пароль +
		" /ConfigurationRepositoryF tcp://localhost/garage /ConfigurationRepositoryNvesna /ConfigurationRepositoryP123456 /ConfigurationRepositoryUpdateCfg -force" +
		" /UpdateDBCfg -Dynamic- -Server -BackgroundStart");

	//ЗаписьЖурналаРегистрации("Обновление",УровеньЖурналаРегистрации.Информация,,,"Запускаем обовлялку:
	//|" + Текст);
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура Запустить(Команда)
	
	Если ЗапуститьНаСервере() Тогда
		Элементы.Декорация2.Видимость = Истина;
		ВключитьОбновлялкуНаКлиенте();
		ОбновитьДанныеНаКлиенте(); КонецЕсли;
	
КонецПроцедуры
&НаСервере
Функция ОстановитьНаСервере()
	
	Набор = РегистрыСведений.ГотовностьКВыходу.СоздатьНаборЗаписей();
	
	НачатьТранзакцию();
	
	Попытка
		Набор.Записать();
		Константы.ВремяЗавершенияРаботыПользователей.Установить('00010101');
		Константы.ВремяНачалаНапоминанияОЗавершении.Установить('00010101');
	Исключение
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
	ВремяЗавершенияРаботы 	= '00010101';
	ВремяНачалаНапоминания 	= '00010101';
		
	Возврат Истина;
	
КонецФункции
&НаКлиенте
Процедура Остановить(Команда)
	
	Если ОстановитьНаСервере() Тогда 
		ОстановитьЗапланированныйВыходИзПрогаммы();
		ОбновитьДанныеНаКлиенте(); КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура перезапуск_5МинутНажатие(Элемент)
	
	ВремяНачалаНапоминания 	= Выгонялка_Сервер.ПолучитьПараметрыВремени().ВремяНаСервере;
	ВремяЗавершенияРаботы 	= ВремяНачалаНапоминания + 5 * 60;
	Если ЗапуститьНаСервере() Тогда
		ВключитьОбновлялкуНаКлиенте();
		ОбновитьДанныеНаКлиенте(); КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура перезапуск_3МинутыНажатие(Элемент)
	
	ВремяНачалаНапоминания 	= Выгонялка_Сервер.ПолучитьПараметрыВремени().ВремяНаСервере;
	ВремяЗавершенияРаботы 	= ВремяНачалаНапоминания + 3 * 60;
	Если ЗапуститьНаСервере() Тогда
		ВключитьОбновлялкуНаКлиенте();
		ОбновитьДанныеНаКлиенте(); КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура перезапуск_1МинНажатие(Элемент)
	ВремяНачалаНапоминания 	= Выгонялка_Сервер.ПолучитьПараметрыВремени().ВремяНаСервере;
	ВремяЗавершенияРаботы 	= ВремяНачалаНапоминания + 1 * 60;
	Если ЗапуститьНаСервере() Тогда
		ВключитьОбновлялкуНаКлиенте();
		ОбновитьДанныеНаКлиенте(); КонецЕсли;
КонецПроцедуры

// МЕНЯЕМ ДАТУ

&НаКлиенте
Процедура ВремяЗавершенияРаботыПриИзменении(Элемент)
	
	Если 	ВремяЗавершенияРаботы < ВремяНачалаНапоминания Или 
			(ВремяНачалаНапоминания = '00010101' И ВремяЗавершенияРаботы <> '00010101') Тогда
			
		ВремяНачалаНапоминания = ВремяЗавершенияРаботы - 3 * 60; КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ВремяНачалаНапоминанияПриИзменении(Элемент)
	
	Если 	ВремяЗавершенияРаботы < ВремяНачалаНапоминания Или
			(ВремяНачалаНапоминания <> '00010101' И ВремяЗавершенияРаботы = '00010101') Тогда
		
		ВремяЗавершенияРаботы = ВремяНачалаНапоминания + 3 * 60; КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ОбновитьКонфигурациюИзХранилищаПриИзменении(Элемент)
	
	Если ОбновитьКонфигурациюИзХранилища <> '00010101' Тогда
	
		ВремяЗавершенияРаботы = ОбновитьКонфигурациюИзХранилища - 60;
		ВремяНачалаНапоминания = ОбновитьКонфигурациюИзХранилища - 3 * 60; КонецЕсли;
	
КонецПроцедуры



