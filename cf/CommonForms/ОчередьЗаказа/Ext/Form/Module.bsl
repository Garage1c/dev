
Функция ЧислоЗаказовПрописьюБезКопеек(Кол)

	Результат = ЧислоПрописью(
					Кол, 
					"Л = ru_RU; НП = Истина", 
					"заказ, заказа, заказов, м,,,,,0");
					
	Возврат Строка(Кол) + " " + Сред(Результат, Найти(Результат, "заказ"));
			
КонецФункции			

&НаСервере
Функция ПолучитьМассивСостоянийЗаказовУчаствующихВОчереде()
	
	Возврат Заказы.ПолучитьМассивСостоянийЗаказовУчаствующихВОчереде();
	
КонецФункции
&НаСервере
Процедура УправлениеВидимостьюДоступностью()
	
	//МожетУправлятьОчередью = РольДоступна("ПолныеПрава") Или ПараметрыСеанса.ТекущиеРоли.Найти(Справочники.Роли.Логист) <> Неопределено;
	МожетУправлятьОчередью = Истина;
	
	СостоянияЗаказа = ПолучитьМассивСостоянийЗаказовУчаствующихВОчереде();

	ЗаказВРаботе = СостоянияЗаказа.Найти(СостояниеЗаказа) <> Неопределено;
	
	Элементы.КнопкаНазначить.Видимость 					= МожетУправлятьОчередью И ЗаказВРаботе И ЕстьЧтоЗаписать();
	Элементы.КнопкаОтменить.Видимость 					= МожетУправлятьОчередью И ЗаказВРаботе И ЕстьЧтоУдалять();
	Элементы.ОчередьСборки.ТолькоПросмотр 				= Не ЗаказВРаботе;
	Элементы.ПланируемаяДатаОтгрузки.ТолькоПросмотр 	= Не ЗаказВРаботе;
	
	Элементы.ФактическаяДатаОтгрузки.Видимость = Не ЗаказВРаботе;
	
	// Сформируем информацию по очереди
	
	Если 	ЗаказВРаботе И
			Не ОчередьСборки.Пустая() Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Один,
		|	МАКСИМУМ(КолЗаказовВсего) 		КолЗаказовВсего,
		|	МАКСИМУМ(КолЗаказовВТекОчереди) КолЗаказовВТекОчереди,
		|	МАКСИМУМ(КолЗаказовВпереди) 	КолЗаказовВпереди
		|ИЗ
		|(
		|	ВЫБРАТЬ
		|		1						Один,
		|		0 						КолЗаказовВсего,
		|		0				 		КолЗаказовВТекОчереди,
		|		Количество(Оч.Заказ) 	КолЗаказовВпереди
		|	ИЗ	РегистрСведений.ОчередьСборкиЗаказов Оч
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
		|		РегистрСведений.СостоянияЗаказовТекущее Сос
		|	ПО
		|		Сос.Заказ = Оч.Заказ
		|
		|	ГДЕ	ВесВОчереде <> 0 И ВесВОчереде <= &ТекущийКод И
		|		Сос.Состояние В(&СостояниеРабочегоЗаказа)
		|
		|	ОБЪЕДИНИТЬ 
		|
		|	ВЫБРАТЬ
		|		1,
		|		0,
		|		Количество(Оч.Заказ),
		|		0
		|	ИЗ	РегистрСведений.ОчередьСборкиЗаказов Оч
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
		|		РегистрСведений.СостоянияЗаказовТекущее Сос
		|	ПО
		|		Сос.Заказ = Оч.Заказ
		|
		|	ГДЕ	ВесВОчереде <> 0 И ВесВОчереде = &ТекущийКод И
		|		Сос.Состояние В(&СостояниеРабочегоЗаказа)
		|
		|	ОБЪЕДИНИТЬ 
		|
		|	ВЫБРАТЬ
		|		1,
		|		Количество(Оч.Заказ),
		|		0,
		|		0
		|	ИЗ	РегистрСведений.ОчередьСборкиЗаказов Оч
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
		|		РегистрСведений.СостоянияЗаказовТекущее Сос
		|	ПО
		|		Сос.Заказ = Оч.Заказ
		|
		|	ГДЕ	Оч.ВесВОчереде <> 0 И
		|		Сос.Состояние В(&СостояниеРабочегоЗаказа)
		|
		|) Запрос
		|
		|СГРУППИРОВАТЬ ПО
		|	Один
		|");
		
		Запрос.УстановитьПараметр("ТекущийКод", ОчередьСборки.Код);
		Запрос.УстановитьПараметр("СостояниеРабочегоЗаказа", Заказы.ПолучитьМассивСостоянийЗаказовУчаствующихВОчереде());
		Выполнение = Запрос.Выполнить();
		
		Текст = "";
		
		Если Выполнение.Пустой() Тогда
			
			Текст = "Нет ни одного заказа в очереде";
			Элементы.ИнформацияПоОчереди.Видимость = Ложь;
			
		Иначе
			
			Выборка = Выполнение.Выбрать();
			Выборка.Следующий();
			
			Если Выборка.КолЗаказовВсего Тогда
			
				Если Не Выборка.КолЗаказовВпереди Тогда
					
					Текст = "Заказ первый в очереди";
					
				Иначе
					
					Текст = "В очереди находится " + ЧислоЗаказовПрописьюБезКопеек(Выборка.КолЗаказовВпереди);
					
					Если Выборка.КолЗаказовВТекОчереди Тогда
						Текст = Текст + "
						|из них " + Выборка.КолЗаказовВТекОчереди + " в текущей";
					КонецЕсли;
				КонецЕсли;
				
				Текст = Текст + "
				|-----------------   -----------------   -----------------
				|общее количество ожидающих сборки " + Выборка.КолЗаказовВсего;
				
				Элементы.ИнформацияПоОчереди.Заголовок = Текст;
				Элементы.ИнформацияПоОчереди.Видимость = Истина;
			
			Иначе
				
				Элементы.ИнформацияПоОчереди.Видимость = Ложь;
			
			КонецЕсли;
		КонецЕсли;
		
	Иначе // Не в состоянии заказ значит спрятать
		
		Элементы.ИнформацияПоОчереди.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Заказ = Параметры.Заказ;
	СостояниеЗаказа = Заказы.ПолучитьСостояниеЗаказа(Заказ);
	
	Заголовок = Строка(Заказ);
	
	// Считаем данные из регистра
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Рег.ПланируемаяДатаОтгрузки,
	|	Рег.ДатаФактическойОтгрузки,
	|	Рег.Ответственный,
	|	Рег.ДатаИзменения,
	|	Спр.Ссылка ОчередьСборки
	|ИЗ
	|	РегистрСведений.ОчередьСборкиЗаказов Рег
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.ПредставлениеОчередиСборкиЗаказа Спр
	|ПО
	|	Рег.ВесВОчереде = Спр.Код
	|
	|ГДЕ
	|	Рег.Заказ = &Заказ
	|");
	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Выборка);
	
	УправлениеВидимостьюДоступностью();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Заказ = Неопределено Тогда
		
		Отказ = Истина;
		ПоказатьПредупреждение(,"Не выбран заказ!",,"Предупреждение");
		
	КонецЕсли;
	
КонецПроцедуры

// Кнопочки

&НаСервере
Функция ЗаписатьЗапись(Запись)
	
	Попытка
		
		Запись.Записать();
		
	Исключение
		
		стрОшибки = ОписаниеОшибки();
		ОбщиеФункции.СообщитьТекст("Ошибка при записи очереди заказа
								|" + стрОшибки);
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЕстьЧтоУдалять()
	
	Запрос = Новый Запрос("ВЫБРАТЬ ИСТИНА ИЗ РегистрСведений.ОчередьСборкиЗаказов ГДЕ Заказ = &Заказ И (ПланируемаяДатаОтгрузки <> &ПустаяДата ИЛИ ВесВОчереде <> 0)");
	Запрос.УстановитьПараметр("Заказ", 		Заказ);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции
&НаСервере
Функция ЕстьЧтоЗаписать()
	
	Возврат НЕ (ОчередьСборки.Пустая() И
				ПланируемаяДатаОтгрузки = '00010101');
	
КонецФункции

&НаСервере
Функция ЗаписатьНаСервере()
	
	Запись = РегистрыСведений.ОчередьСборкиЗаказов.СоздатьМенеджерЗаписи();
	Запись.Заказ 					= Заказ;
	Запись.ВесВОчереде 				= ОчередьСборки.Код;
	Запись.ПланируемаяДатаОтгрузки 	= ПланируемаяДатаОтгрузки;
	Запись.Ответственный 			= ПараметрыСеанса.ТекущийПользователь;
	Запись.ДатаИзменения 			= ТекущаяДата();
	
	Возврат ЗаписатьЗапись(Запись);
	
КонецФункции
&НаКлиенте
Процедура Назначить(Команда)
	
	Если ЕстьЧтоЗаписать() Тогда
			
		Если ЗаписатьНаСервере() Тогда
			СобытияСистемы.ОповеститьОбИзмененииОчередиСборкиЗаказа(Заказ);
			Закрыть();
		КонецЕсли;
		
	Иначе
	
		ПоказатьПредупреждение(,"Устанавливать очередность имеет смысл когда выбрана очередь или планируемая дата отгрузки",,"Предупреждение");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УдалитьНаСервере()
	
	Запись = РегистрыСведений.ОчередьСборкиЗаказов.СоздатьМенеджерЗаписи();
	Запись.Заказ 					= Заказ;
	Запись.ВесВОчереде 				= 0;
	Запись.Ответственный 			= ПараметрыСеанса.ТекущийПользователь;
	Запись.ДатаИзменения 			= ТекущаяДата();
	
	Возврат ЗаписатьЗапись(Запись);
	
КонецФункции
&НаКлиенте
Процедура Отменить(Команда)
	
	Если ЕстьЧтоУдалять() Тогда
	
		Если УдалитьНаСервере() Тогда
			СобытияСистемы.ОповеститьОбИзмененииОчередиСборкиЗаказа(Заказ);
			Закрыть();
		КонецЕсли;
		
	Иначе
		
		ПоказатьПредупреждение(,"Очередь еще не была назначена, чтобы ее останавливать",,"Предупреждение");
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ОчередьСборкиПриИзменении(Элемент)
	
	УправлениеВидимостьюДоступностью();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСамуюБольшуюОчередь()
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1 Код
	|ИЗ Справочник.ПредставлениеОчередиСборкиЗаказа
	|УПОРЯДОЧИТЬ ПО Код Убыв
	|");
	
	Выполнение = Запрос.Выполнить();
	Если Выполнение.Пустой() Тогда
		
		Возврат Справочники.ПредставлениеОчередиСборкиЗаказа.ПустаяСсылка();
		
	Иначе
		
		Выборка = Выполнение.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Код;
		
	КонецЕсли;
	
КонецФункции
&НаКлиенте
Процедура ПланируемаяДатаОтгрузкиПриИзменении(Элемент)
	
	УправлениеВидимостьюДоступностью();
	
	//Если ОчередьСборки.Пустая() Тогда
	//	
	//	ОчередьСборки = ПолучитьСамуюБольшуюОчередь();
	//	
	//КонецЕсли;
	//
	
	
КонецПроцедуры


&НаКлиенте
Процедура Показать(Команда)
	
	ПараметрыФормы = Новый Структура("Отбор, КлючНазначенияИспользования, СформироватьПриОткрытии", 
										,,Истина);
								
	ОткрытьФорму("Отчет.ОчередностьЗаказов.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаЧасовНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура("Отбор, КлючНазначенияИспользования, СформироватьПриОткрытии", 
										Новый Структура("СостояниеРабочегоЗаказа", ПолучитьМассивСостоянийЗаказовУчаствующихВОчереде()),
										,
										Истина);
								
	ОткрытьФорму("Отчет.ОчередностьЗаказов.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

