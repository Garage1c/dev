
&НаКлиенте
Перем текКонтрагент;


&НаСервере
Процедура ПодобратьПартнераИзБухгалтерии()
	
	СписокПохожих.Очистить();
	
	СтрОшибки = "";
	Connector = КэшируемыеФункции.ИницилизироватьCOMConnectorБухгалтерии(,стрОшибки);
	Если Connector <> Неопределено Тогда
		
		//МассивСлов = КонвертацияТипов.ПолучитьМассивИзСтроки(ЧтоИщем, " ");
		ТекстУсловия = "";
		//Если МассивСлов.Количество() > 1 Тогда 
		//	
		//	ТекстФильтра = "";
		//	ТекстУсловия  = ТекстУсловия + " ОБЪЕДИНИТЬ ВЫБРАТЬ Наименование, 3 Релевантность ИЗ Справочник.Контрагенты ГДЕ ";	
		//	Для Каждого Элемент ИЗ МассивСлов Цикл
		//		ТекстФильтра = ?(ПустаяСтрока(ТекстФильтра), ТекстУсловия, ТекстФильтра + " И ");

		//		ТекстФильтра  = ТекстФильтра + " Наименование ПОДОБНО ""%" + Элемент + "%"" ";	
		//	КонецЦикла;
		//	ТекстУсловия = ТекстФильтра;
		//КонецЕсли;
		//
		//Если МассивСлов.Количество() > 1 Тогда 
		//	Для Каждого Элемент ИЗ МассивСлов Цикл
		//		ТекстУсловия  = ТекстУсловия + " ОБЪЕДИНИТЬ ВЫБРАТЬ Наименование, 4 Релевантность ИЗ Справочник.Контрагенты ГДЕ Наименование ПОДОБНО ""%" + Элемент + "%"" ";	
		//	КонецЦикла;
		//КонецЕсли;

		СтрокаПоиска = СтрЗаменить(ЧтоИщем, " ", "%");

		ТекстЗапроса = "ВЫБРАТЬ
						//|	Наименование,
						//|	1 Релевантность
						//|ИЗ
						//|	Справочник.Контрагенты
						//|ГДЕ
						//|	Наименование ПОДОБНО """ + ЧтоИщем + """	
						//|ОБЪЕДИНИТЬ
						//|ВЫБРАТЬ
						|	Ссылка,
						|	Наименование,
						|	2 Релевантность
						|ИЗ
						|	Справочник.Контрагенты
						|ГДЕ
						|	Наименование ПОДОБНО ""%" + СтрокаПоиска + "%""							
						//|" + ТекстУсловия + " 
						|УПОРЯДОЧИТЬ ПО Релевантность, Наименование
						|";

		РезультатЗапроса = COMServer.ПолучитьВыполнениеЗапроса81(ТекстЗапроса,,,, Connector);
		Если РезультатЗапроса <> Неопределено Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				ЕстьВТорговле = Ложь;
				ГУИД = Connector.String(Выборка.Ссылка.УникальныйИдентификатор());
				СпрСсылка = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД));
	
				Если НЕ СпрСсылка.Пустая() И СпрСсылка.ПолучитьОбъект() <> Неопределено Тогда				
					ЕстьВТорговле = Истина;	
				КонецЕсли;
				
				СписокПохожих.Добавить(ГУИД, Выборка.Наименование, ЕстьВТорговле);

			КонецЦикла;
				
		КонецЕсли;
	
	Иначе
		Сообщить(СтрОшибки);
	КонецЕсли;
	
КонецПроцедуры


// КОМАНДЫ
&НаКлиенте
Процедура НайтиВБухгалтерии(Команда)
	ПодобратьПартнераИзБухгалтерии();
КонецПроцедуры
&НаКлиенте
Процедура СоздатьКонтрагента(Команда)
	
	Если текКонтрагент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПерезаписыватьНайденные = Ложь;
	СпрСсылка = Неопределено;
	
	Если НЕ текКонтрагент.ЕстьВТорговле И Вопрос("Контрагент """ + текКонтрагент.Имя + """ отсутствует в торговле.
				|Создать нового, копированием из бухгалтерии?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
				
		СпрСсылка = ПолучитьНовогоПартнера(текКонтрагент.ГУИД);
		Если СпрСсылка <> Неопределено Тогда
			Сообщить("Новый контрагент успешно создан", СтатусСообщения.Информация);	
		КонецЕсли;

	ИначеЕсли текКонтрагент.ЕстьВТорговле И Вопрос("Контрагент """ + текКонтрагент.Имя + """ уже создан в тоговле.
				|Обновить существующего?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		ПерезаписыватьНайденные = Истина;		
		СпрСсылка = ПолучитьНовогоПартнера(текКонтрагент.ГУИД);
		Если СпрСсылка <> Неопределено Тогда
			Сообщить("Контрагент успешно обновлен", СтатусСообщения.Информация);		
		КонецЕсли;
	КонецЕсли;
	
	Закрыть(СпрСсылка);
	
КонецПроцедуры


&НаКлиенте
Процедура СписокПохожихПриАктивизацииСтроки(Элемент)
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		текКонтрагент = Новый Структура("Имя, ГУИД, ЕстьВТорговле",  ТекДанные.Представление, ТекДанные.Значение, ТекДанные.Пометка);
	КонецЕсли;
КонецПроцедуры
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	текКонтрагент = Неопределено;
	ЧтоИщем = Параметры.Контрагент;
	Если НЕ ПустаяСтрока(ЧтоИщем) Тогда
		ПодобратьПартнераИзБухгалтерии();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПолучитьСправочникКонтактныеЛица(Ссылка81, Connector, Контрагент)
	
	ТекстЗапроса = "ВЫБРАТЬ
		|	Ссылка						КонтактноеЛицо,
		|	Фамилия,    	
		|	Имя,
		|	Отчество,
		|	Наименование,
		|	ПометкаУдаления,
		|	ПРЕДСТАВЛЕНИЕ(Роль)	 		РольКонтактногоЛица,
		|   Описание,
		|	Должность,
		|	ВЫБОР КОГДА Ссылка = ОбъектВладелец.ОсновноеКонтактноеЛицо  ТОГДА
		|		ИСТИНА
		|	ИНАЧЕ
		|		ЛОЖЬ
		|	КОНЕЦ						КонтактноеЛицоПоУмолчанию
		|ИЗ
		|	Справочник.КонтактныеЛица
		|ГДЕ
		|	ОбъектВладелец = &Ссылка
		|";
				
	СтруктураПараметров	= Новый Структура("Ссылка", Ссылка81);
	РезультатЗапроса = COMServer.ПолучитьВыполнениеЗапроса81(ТекстЗапроса,,СтруктураПараметров,, Connector);
	 
	Если РезультатЗапроса <> Неопределено Тогда
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл

			кЛицоСсылка = Справочники.КонтактныеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(Connector.String(Выборка.КонтактноеЛицо.УникальныйИдентификатор())));
			Если кЛицоСсылка.ПолучитьОбъект() = Неопределено И НЕ кЛицоСсылка.Пустая() Тогда
				СпрЛицо = Справочники.КонтактныеЛица.СоздатьЭлемент(); 
		  		СпрЛицо.УстановитьСсылкуНового(кЛицоСсылка);
			ИначеЕсли ПерезаписыватьНайденные И НЕ кЛицоСсылка.Пустая() Тогда
				СпрЛицо = кЛицоСсылка.ПолучитьОбъект();
			Иначе
				Возврат;
			КонецЕсли;					
				
			ЗаполнитьЗначенияСвойств(СпрЛицо, Выборка, "Наименование, Должность");
			СпрЛицо.Комментарий =   Выборка.Фамилия + " " + Выборка.Имя + " " + Выборка.Отчество +
									?(ПустаяСтрока(Выборка.Описание),			 "", Символы.ПС + "Описание: " + Выборка.Описание) +
									?(ПустаяСтрока(Выборка.РольКонтактногоЛица), "", Символы.ПС + "Роль: " + Выборка.РольКонтактногоЛица);
			СпрЛицо.ЗначениеПоУмолчанию = Выборка.КонтактноеЛицоПоУмолчанию;
			СпрЛицо.Владелец = Контрагент;
			
			Попытка
				СпрЛицо.Записать();
			Исключение
				Сообщить("Не удалось записать объект """ + СпрЛицо + """!
						  |" + ОписаниеОшибки());
			КонецПопытки;
					  
			СпрЛицо.УстановитьПометкуУдаления(Выборка.ПометкаУдаления);

			Если НЕ ПерезаписыватьНайденные Тогда 
				стрОшибки = "";
				COMServer.ВыполнитьСинхронизациюКонтактнойИнформации("Справочник.КонтактныеЛица", Выборка.КонтактноеЛицо, стрОшибки, Connector);
			КонецЕсли;
			
	  	КонецЦикла;                                                         
	КонецЕсли;
	
КонецПроцедуры
&НаСервере
Процедура ПолучитьСправочникБанковскиеСчета(Ссылка81, Connector, Контрагент)
	
	ТекстЗапроса = "ВЫБРАТЬ
		|	Ссылка						БанковскийСчет,
		|	Наименование,
		|	ПометкаУдаления,
		|   Банк.Код				БанкБИК,
		|	НомерСчета,    	
		|	БанкДляРасчетов.Код 	БанкДляРасчетовБИК,
		|	ТекстКорреспондента,
		|	ТекстНазначения,
		|	ВалютаДенежныхСредств,
		|   НомерИДатаРазрешения,
		|	ДатаОткрытия,
		|	ДатаЗакрытия,
		|	МесяцПрописью,
		|	СуммаБезКопеек,
		|	ВЫБОР КОГДА Ссылка = Владелец.ОсновнойБанковскийСчет  ТОГДА
		|		ИСТИНА
		|	ИНАЧЕ
		|		ЛОЖЬ
		|	КОНЕЦ						БанковскийСчетПоУмолчанию
		|ИЗ
		|	Справочник.БанковскиеСчета
		|ГДЕ
		|	Владелец = &Ссылка
		|";
				
	СтруктураПараметров	= Новый Структура("Ссылка", Ссылка81);
	РезультатЗапроса = COMServer.ПолучитьВыполнениеЗапроса81(ТекстЗапроса,,СтруктураПараметров,, Connector);
	 
			
	Если РезультатЗапроса <> Неопределено Тогда
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл

			бСчетСсылка = Справочники.БанковскиеСчета.ПолучитьСсылку(Новый УникальныйИдентификатор(Connector.String(Выборка.БанковскийСчет.УникальныйИдентификатор())));
			Если бСчетСсылка.ПолучитьОбъект() = Неопределено И НЕ бСчетСсылка.Пустая() Тогда
				СпрСчет = Справочники.БанковскиеСчета.СоздатьЭлемент(); 
		  		СпрСчет.УстановитьСсылкуНового(бСчетСсылка);
			ИначеЕсли ПерезаписыватьНайденные И НЕ бСчетСсылка.Пустая() Тогда
				СпрСчет = бСчетСсылка.ПолучитьОбъект();
			Иначе
				Возврат;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(СпрСчет, Выборка, , "ПометкаУдаления, ВалютаДенежныхСредств, Owner");
			СпрСчет.Владелец = Контрагент;
			СпрСчет.ЗначениеПоУмолчанию = Выборка.БанковскийСчетПоУмолчанию;
			
 			СпрСчет.Банк 					= Справочники.Банки.НайтиПоКоду(Выборка.БанкБИК);
			// для непрямых расчетов
			Если ЗначениеЗаполнено(Выборка.БанкДляРасчетовБИК) Тогда
				СпрСчет.БанкДляРасчетов 	= Справочники.Банки.НайтиПоКоду(Выборка.БанкДляРасчетовБИК);
			КонецЕсли;
			СпрСчет.ВалютаДенежныхСредств 	= Справочники.Валюты.ПолучитьСсылку(Новый УникальныйИдентификатор(Connector.String(Выборка.ВалютаДенежныхСредств.УникальныйИдентификатор())));

			Попытка
				СпрСчет.Записать();
			Исключение
				Сообщить("Не удалось записать объект """ + СпрСчет + """!
						  |" + ОписаниеОшибки());
			КонецПопытки;
					  
			СпрСчет.УстановитьПометкуУдаления(Выборка.ПометкаУдаления);
		
 	  	КонецЦикла;                                                         
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНовогоПартнера(ГУИД)
	
	//УстановитьПривилегированныйРежим(Истина); 
	
	Возврат СоздатьНовогоПартнера(ГУИД);	
	
	//Если ПривилегированныйРежим() Тогда
	//	УстановитьПривилегированныйРежим(Ложь);
	//КонецЕсли;

	
КонецФункции

&НаСервере
Функция СоздатьНовогоПартнера(ГУИД, Connector = Неопределено)
	
	Менеджер = Справочники["Контрагенты"];
	СпрСсылка = Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД));
	
	Если НЕ СпрСсылка.Пустая() И (СпрСсылка.ПолучитьОбъект() = Неопределено ИЛИ ПерезаписыватьНайденные) Тогда
	
		СтрОшибки = "";
		Если Connector  = Неопределено Тогда
			Connector = КэшируемыеФункции.ИницилизироватьCOMConnectorБухгалтерии(,стрОшибки);
		КонецЕсли;
		
		Если Connector <> Неопределено Тогда
			
			Менеджер81 	= Connector.Справочники["Контрагенты"];
			Ссылка81 	= Менеджер81.ПолучитьСсылку(Connector.NewObject("УникальныйИдентификатор", ГУИД));

			ТекстЗапроса = "ВЫБРАТЬ
				|	Контр.Ссылка	 			Контрагент,
				|	Контр.ЭтоГруппа,
				|	Контр.Наименование,
				|	Контр.Родитель				ГруппаКонтрагент,
				|	Контр.ПометкаУдаления,
				|   Контр.Комментарий
				|" + ?(Ссылка81.ЭтоГруппа, "" , ",
				|	Контр.НаименованиеПолное,
				|	Контр.ИНН,
				|	Контр.КПП,
				|	Контр.КодПоОКПО,
				|	Контр.ЮрФизЛицо,
				| 	ЕСТЬNULL(Дог.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))  			Организация,
				|	ЕСТЬNULL(Дог.Код, 0)											  					НомерДоговора,
				|	ВЫБОР КОГДА Дог.Ссылка = Контр.ОсновнойДоговорКонтрагента ТОГДА
				|		ИСТИНА
				|	ИНАЧЕ
				|		ЛОЖЬ
				|	КОНЕЦ ОрганизацияПоУмолчанию
				| " ) + "
				|ИЗ
				|	Справочник.Контрагенты Контр
				|" + ?(Ссылка81.ЭтоГруппа, "" , "	
				|	ЛЕВОЕ СОЕДИНЕНИЕ
				|		Справочник.ДоговорыКонтрагентов Дог
				|	ПО
				|		Дог.Владелец = Контр.Ссылка И НЕ Дог.ПометкаУдаления
				| " ) + "
				|ГДЕ
				|	Контр.Ссылка = &Ссылка							
				|УПОРЯДОЧИТЬ ПО Контрагент" + ?(Ссылка81.ЭтоГруппа, "" , ", Организация, ОрганизацияПоУмолчанию Убыв");
						
			СтруктураПараметров	= Новый Структура("Ссылка", Ссылка81);
			РезультатЗапроса = COMServer.ПолучитьВыполнениеЗапроса81(ТекстЗапроса,,СтруктураПараметров,, Connector);
		
					
			Если РезультатЗапроса <> Неопределено Тогда
				Выборка = РезультатЗапроса.Выбрать();
				Пока Выборка.СледующийПоЗначениюПоля("Контрагент") Цикл

			        Если СпрСсылка.ПолучитьОбъект() = Неопределено Тогда
						Спр = ?(Выборка.ЭтоГруппа, Менеджер.СоздатьГруппу(),Менеджер.СоздатьЭлемент()); 
			      		Спр.УстановитьСсылкуНового(СпрСсылка);
					ИначеЕсли ПерезаписыватьНайденные Тогда
						Спр = СпрСсылка.ПолучитьОбъект();
					Иначе
						Возврат Неопределено; 
					КонецЕсли;
					
					ЗаполнитьЗначенияСвойств(Спр, Выборка, "Наименование, Комментарий");
					
					Если НЕ Выборка.ЭтоГруппа Тогда
						Спр.НаименованиеПолное = Выборка.НаименованиеПолное;
					КонецЕсли;
					ГруппаГУИД = Connector.String(Выборка.ГруппаКонтрагент.УникальныйИдентификатор());
					Спр.Родитель = СоздатьНовогоПартнера(ГруппаГУИД, Connector);
					
					Попытка
						Спр.Записать();
					Исключение
						Сообщить("Не удалось записать объект """ + Спр + """!
								  |" + ОписаниеОшибки());
					КонецПопытки;
							  
					Спр.УстановитьПометкуУдаления(Выборка.ПометкаУдаления);
					
					Если Спр.ЭтоГруппа Тогда
						Возврат Спр.Ссылка;
					КонецЕсли;
					
					// КОНТАКТНАЯ ИНФОРМАЦИЯ (при перезаписи объекта, перезапись его контатной информации не происходит)
									
					Если НЕ ПерезаписыватьНайденные Тогда 
						COMServer.ВыполнитьСинхронизациюКонтактнойИнформации("Справочник.Контрагенты", Выборка.Контрагент, стрОшибки, Connector);
					КонецЕсли;
					
					// СОЗДАДИМ КОНТРАГЕНТА 
					
					// КОНТАКТНЫЕ ЛИЦА
					ПолучитьСправочникКонтактныеЛица(Ссылка81, Connector, Спр.Ссылка);
                    					             	
	            	// БАНКОВСКИЕ СЧЕТА
					ПолучитьСправочникБанковскиеСчета(Ссылка81, Connector, Спр.Ссылка);
	   
				КонецЦикла;
	
				Возврат Спр.Ссылка;
			КонецЕсли;	//	РезультатЗапроса <> Неопределено
			
		КонецЕсли; //	Если Connector <> Неопределено		
	
	Иначе
		Возврат СпрСсылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции


















