
&НаКлиенте
Перем РеквизитыВладельца;
&НаСервере
Функция ПолучитьРеквизитыДокумента(Ссылка)
	Возврат ФункцииФормДокументов.ПолучитьРеквизитыДокумента(Ссылка);
КонецФункции

&НаКлиенте
Процедура УстановитьВидимость(РеквизитыВладельца)
	
	ТипГруппа = Тип("ГруппаФормы");
	ТипДекорация = Тип("ДекорацияФормы");
	
	Для Каждого Элемент Из Элементы Цикл ТипЭлемента = ТипЗнч(Элемент);
		Если ТипЭлемента <> ТипГруппа И ТипЭлемента <> ТипДекорация  Тогда
			Элемент.Видимость = РеквизитыВладельца.Найти(Элемент.Имя) <> Неопределено; КонецЕсли; КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВидимостью()
	
	Элементы.СуммаВключаетНДС.Видимость = УчитыватьНДС;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	                                                                                                                           
	РеквизитыВладельца = ПолучитьРеквизитыДокумента(ВладелецФормы.Объект.Ссылка);
	//РеквизитыВладельца.Добавить("Область"); // типа документы всегда делим
	
	Для Каждого Имя Из РеквизитыВладельца Цикл
		Если Элементы.Найти(Имя) <> Неопределено Тогда
			ЭтаФорма[Имя] = ВладелецФормы.Объект[Имя]; КонецЕсли; КонецЦикла;
	
	Если РеквизитыВладельца.Найти("Контаргент") <> Неопределено И Элементы.Найти("Контаргент") <> Неопределено Тогда
		НовыйПараметр = Новый ПараметрВыбора("Отбор.Контаргент", ВладелецФормы.Объект.Контаргент);
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		Элементы.Контрагент.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассив); КонецЕсли;
	
	УстановитьВидимость(РеквизитыВладельца);
	
	УстановитьЗаголовок();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовок()
	
	//текОбъект = РеквизитФормыВЗначение("Объект");
	//
	//Заголовок = "Общие рекквизиты " + текОбъект;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИмяТабличнойЧасти = ?(ЗначениеЗаполнено(Параметры.ИмяТабличнойЧасти), Параметры.ИмяТабличнойЧасти, "Товары");
		
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Организация"));
	Элементы.БанковскийСчетОрганизации.СвязиПараметровВыбора  = Новый ФиксированныйМассив(НовыйМассив);
	
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Контрагент"));
	Элементы.БанковскийСчетПартнера.СвязиПараметровВыбора = Новый ФиксированныйМассив(НовыйМассив);
	
	Элементы.Автор.ТолькоПросмотр = НЕ (РольДоступна("ПолныеПрава") Или РольДоступна("ПолныеПраваВОбласти"));
	
КонецПроцедуры 

&НаКлиенте
Процедура РеквизитПриИзменении(Имя, Значение, ОбновитьТовары = Истина)
	
	Попытка
		ВладелецФормы.Объект[Имя] 			= Значение;
	Исключение
		Возврат;
	КонецПопытки;
	ВладелецФормы.Модифицированность 	= Истина;
	
	Попытка
		Если ВладелецФормы.СтруктураКолонокТовары.Свойство(Имя) Тогда	
			ВладелецФормы.СтруктураКолонокТовары[Имя] = Значение;
		КонецЕсли;
	Исключение
		Возврат;
	КонецПопытки;
	
	Если ОбновитьТовары Тогда
		ПересчитатьТоварыПоНовымДанным();
	КонецЕсли;
	
	// silber { попробуем установит СТ
	Если ВладелецФормы.СтруктураКолонокТовары.Свойство("ст" + Имя) Тогда
		ВладелецФормы.СтруктураКолонокТовары["ст" + Имя] = Значение;
	КонецЕсли;
	// } silber
	
	ВладелецФормы.ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлементПриИзменении(Элемент)
	
	Имя 		= Элемент.Имя;
	Значение 	= ЭтаФорма[Имя];
	
	РеквизитПриИзменении(Имя, Значение);
	
	//УправлениеВидимостью();

КонецПроцедуры

&НаКлиенте
Функция ПересчитатьТоварыПоНовымДанным(Имя = "")
	
	Если Вопрос("Пересчитать товары по новым данным?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		Попытка
			ВладелецФормы.ПересчитатьСуммыТабличныхЧастей(ВладелецФормы.СтруктураКолонокТовары);
			
			// если необходимо запоминать старые значения свойств, запомним их
			Если НЕ ПустаяСтрока(Имя) И ВладелецФормы.СтруктураКолонокТовары.Свойство("ст" + Имя) Тогда
				ВладелецФормы.СтруктураКолонокТовары["ст" + Имя] = ВладелецФормы.СтруктураКолонокТовары[Имя];	
			КонецЕсли;
			
			Возврат Истина;
			
		Исключение
			Сообщить("Для данного вида документа изменение основных реквизитов временно невозможно");
		КонецПопытки;
	КонецЕсли;

	Возврат Ложь;
	
КонецФункции


&НаСервере
Функция ОрганизацияПриИзмененииНаСервере()
	Возврат ФункцииФормДокументов.ОрганизацияПриИзменении(ЭтаФорма);
КонецФункции
&НаСервере
Функция КонтрагентПриИзмененииНаСервере()
	Возврат ФункцииФормДокументов.КонтрагентПриИзменении(ЭтаФорма);
КонецФункции



&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	СтруктураРеквизитов = ОрганизацияПриИзмененииНаСервере();
	
	Для Каждого Строка ИЗ СтруктураРеквизитов Цикл
		РеквизитПриИзменении(Строка.Ключ, Строка.Значение, Ложь);
	КонецЦикла;

    Если ПересчитатьТоварыПоНовымДанным() Тогда
	    // если был пересчет, сохраним предыдущие значения
		Для Каждого Строка ИЗ СтруктураРеквизитов Цикл
			Имя = Строка.Ключ;
			Если ВладелецФормы.СтруктураКолонокТовары.Свойство("ст" + Имя) Тогда
				ВладелецФормы.СтруктураКолонокТовары["ст" + Имя] = ВладелецФормы.СтруктураКолонокТовары[Имя];	
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	УправлениеВидимостью();	

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	//Если ВладелецФормы.Элементы.Найти("Контрагент") = Неопределено Тогда
	//	Возврат;
	//КонецЕсли;
	//
	ВладелецФормы.Объект.Контрагент = Контрагент;

	СтруктураРеквизитов = КонтрагентПриИзмененииНаСервере();
	
	Для Каждого Строка ИЗ СтруктураРеквизитов Цикл
		РеквизитПриИзменении(Строка.Ключ, Строка.Значение, Ложь);
	КонецЦикла;
	
    //ПересчитатьТоварыПоНовымДанным();
	
    // сохраним предыдущие значения
	попытка 
		а=ВладелецФормы.СтруктураКолонокТовары;
		
		Для Каждого Строка ИЗ СтруктураРеквизитов Цикл
			Имя = Строка.Ключ;
			Если ВладелецФормы.СтруктураКолонокТовары.Свойство("ст" + Имя) Тогда
				ВладелецФормы.СтруктураКолонокТовары["ст" + Имя] = ВладелецФормы.СтруктураКолонокТовары[Имя];	
			КонецЕсли;
		КонецЦикла;
		
	Исключение
	КонецПопытки;
		
    УправлениеВидимостью();

КонецПроцедуры


&НаКлиенте
Процедура АвторПриИзменении(Элемент)
	
	Имя 		= Элемент.Имя;
	Значение 	= ЭтаФорма[Имя];
	
	РеквизитПриИзменении(Имя, Значение, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	
	Имя 		= Элемент.Имя;
	Значение 	= ЭтаФорма[Имя];
	
	РеквизитПриИзменении(Имя, Значение, Ложь);

КонецПроцедуры



