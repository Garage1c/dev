

Функция ВернутьОшибку_ст(Ответ, стрОшибки)
	
	//Ответ.КодСостояния = 500;
	//Ответ.УстановитьТелоИзСтроки(стрОшибки);
	//
	//Возврат Ответ;
	
КонецФункции

Функция ПолучитьПередачиТовараPOST(Запрос)
	
	Rest.ЛогЗапроса(Запрос,,РегистрыСведений.ЛогМатаМата);
	
	Ответ = МатаМата.ПолучитьПередачиТовараPOST(Запрос);
	
	Rest.ЛогОтвета(Ответ,,РегистрыСведений.ЛогМатаМата);
	
	Возврат Ответ;
	
КонецФункции

Функция ПолучитьПередачиТовараPOST_ст(Запрос)
	//УстановитьПривилегированныйРежим(Истина);
	//стрОшибки = "";
	//
	//Ответ = Новый HTTPСервисОтвет(200);
	//ПереданныеДанные = Запрос.ПолучитьТелоКакСтроку();
	//
	//Если ПустаяСтрока(ПереданныеДанные) Тогда УстановитьПривилегированныйРежим(Ложь); Возврат ВернутьОшибку(Ответ, "Нет данных документа в json формате" + ПереданныеДанные+ "__") КонецЕсли;
	//
	//СтруктураЗапроса = w1_Json.UnJSON(ПереданныеДанные);
	//Если ТипЗнч(СтруктураЗапроса) <> Тип("Структура") Тогда УстановитьПривилегированныйРежим(Ложь); Возврат ВернутьОшибку(Ответ, "Не верный тип (должно быть структура)") КонецЕсли;
	////обязательые поля, проверим структуру
	//
	//ТекПользователь   = ПараметрыСеанса.ТекущийПользователь;
	//ПартнерСсылка     = ТекПользователь.Партнер;
	//ПартнерИнфСистема = ПартнерСсылка.ИнформационнаяСистемаПартнера;
	//Если ПартнерСсылка = Справочники.Партнеры.ПустаяСсылка()  Тогда УстановитьПривилегированныйРежим(Ложь); Возврат ВернутьОшибку(Ответ, "Нет данных о партнере, для текущего пользователя не указан партнер") КонецЕсли;
	//	 
	//ДатаНачала = Неопределено; ДатаКонца = Неопределено;  //как пустую дату отправят?
	//
	////Если НЕ СтруктураЗапроса.Свойство("partner_id",Партнер) Тогда УстановитьПривилегированныйРежим(Ложь); Возврат ВернутьОшибку(Ответ, "Нет данных о партнере, свойство partner_id") КонецЕсли;
	//Если НЕ СтруктураЗапроса.Свойство("data_begin") Тогда УстановитьПривилегированныйРежим(Ложь); Возврат ВернутьОшибку(Ответ, "Не указана дата начала для отбора данных, свойство data_begin") КонецЕсли;
	//Если НЕ СтруктураЗапроса.Свойство("data_end") Тогда УстановитьПривилегированныйРежим(Ложь); Возврат ВернутьОшибку(Ответ,"Не указана дата окончания для отбора данных, свойство data_end") КонецЕсли;
	//	
	////Партнер    = HTTP.ПолучитьОбъектПоСсылке(Справочники.Партнеры,    СтруктураЗапроса.partner_id,        стрОшибки);
	////ПартнерСсылка = Партнер.Ссылка;
	//ДатаНачала = XMLЗначение(Тип("Дата"), СтруктураЗапроса.data_begin); 
	//ДатаКонца  = XMLЗначение(Тип("Дата"), СтруктураЗапроса.data_end);
	//	
	//МВЗ 	= ?(СтруктураЗапроса.Свойство("mvz"), 	СтруктураЗапроса.mvz, 	Неопределено);
	//Если ЗначениеЗаполнено(МВЗ) Тогда МВЗ = HTTP.ПолучитьОбъектПоСсылке(Справочники.МВЗ,    СтруктураЗапроса.mvz,       стрОшибки); МВЗСсылка = МВЗ.Ссылка;
	//Если СтрОшибки = "" Тогда Запрос.УстановитьПараметр("МВЗ",МВЗСсылка);КонецЕсли;КонецЕсли;
	//
	//ДокументПередачи	= ?(СтруктураЗапроса.Свойство("transaction_id"), 	СтруктураЗапроса.transaction_id, 	Неопределено);
	//Если ЗначениеЗаполнено(ДокументПередачи) Тогда ДокументПередачи = HTTP.ПолучитьОбъектПоСсылке(Документы.ПередачаТовара,    СтруктураЗапроса.transaction_id,  стрОшибки); ДокументПередачиСсылка = ДокументПередачи.Ссылка;	 
	//Если СтрОшибки = "" Тогда Запрос.УстановитьПараметр("ДокументПередачи",ДокументПередачиСсылка);КонецЕсли;КонецЕсли;
	//
	//ОтветственноеЛицо	= ?(СтруктураЗапроса.Свойство("partner_user_id"), 	СтруктураЗапроса.partner_user_id, 	Неопределено);
	//Если ЗначениеЗаполнено(ОтветственноеЛицо) Тогда ОтветственноеЛицо = HTTP.ПолучитьОбъектПоСсылке(Справочники.ФизическиеЛица,    СтруктураЗапроса.partner_user_id,  стрОшибки); ОтветственноеЛицоСсылка = ОтветственноеЛицо.Ссылка;	 
	//Если СтрОшибки = "" Тогда Запрос.УстановитьПараметр("ОтветственноеЛицо",ОтветственноеЛицоСсылка);КонецЕсли;КонецЕсли;
	//
	//Подробно = Ложь;
	//
	//Если СтруктураЗапроса.Свойство("detail") и СтруктураЗапроса.detail = Истина Тогда Подробно = Истина КонецЕсли;

	//
	//Запрос = Новый Запрос();
	//
	//Если Подробно Тогда
	//
	//				   
	//  Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	//                 |	ПередачаТоваровОбороты.ДокументПередачи.ОтветственноеЛицо
	//                 |ПОМЕСТИТЬ СписокОтветственных
	//                 |ИЗ
	//                 |	РегистрНакопления.ПередачаТоваров.Обороты(&ДатаНачала, &ДатаКонца, , Партнер = &Партнер {(&МВЗ), (&ДокументПередачи)}) КАК ПередачаТоваровОбороты
	//                 |;
	//                 |
	//                 |////////////////////////////////////////////////////////////////////////////////
	//                 |ВЫБРАТЬ
	//                 |	Почта.Представление,
	//                 |	СписокОтветственных.ДокументПередачиОтветственноеЛицо
	//                 |ПОМЕСТИТЬ ПочтаОтветственныхЛиц
	//                 |ИЗ
	//                 |	СписокОтветственных КАК СписокОтветственных
	//                 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредставлениеКонтактнойИнформации КАК Почта
	//                 |		ПО СписокОтветственных.ДокументПередачиОтветственноеЛицо = Почта.Объект
	//                 |ГДЕ
	//                 |	Почта.Вид В ИЕРАРХИИ(&Вид)
	//                 |;
	//                 |
	//                 |////////////////////////////////////////////////////////////////////////////////
	//                 |ВЫБРАТЬ
	//                 |	СоответствиеТоваровПартнеров.Номенклатура,
	//                 |	СоответствиеТоваровПартнеров.ИнформационнаяСистема,
	//                 |	СоответствиеТоваровПартнеров.КодНоменклатуры
	//                 |ПОМЕСТИТЬ НомИнфСистПартнера
	//                 |ИЗ
	//                 |	РегистрСведений.СоответствиеТоваровПартнеров КАК СоответствиеТоваровПартнеров
	//                 |ГДЕ
	//                 |	СоответствиеТоваровПартнеров.ИнформационнаяСистема = &ПартнерИнфСистема
	//                 |;
	//                 |
	//                 |////////////////////////////////////////////////////////////////////////////////
	//                 |ВЫБРАТЬ
	//                 |	ПередачаТоваровОбороты.ДокументПередачи КАК transaction_id,
	//                 |	ПередачаТоваровОбороты.ДокументПередачи.ОтветственноеЛицо КАК partner_user_id,
	//                 |	ПередачаТоваровОбороты.Номенклатура КАК product_id,
	//                 |	ПередачаТоваровОбороты.КоличествоПриход КАК quantity,
	//                 |	ПередачаТоваровОбороты.СуммаПриход КАК sum,
	//                 |	ПередачаТоваровОбороты.ДокументПередачи.Дата КАК data,
	//                 |	ПередачаТоваровОбороты.ДокументПередачи.Номер КАК number,
	//                 |	ПередачаТоваровОбороты.Инициатор КАК mvz,
	//                 |	ПередачаТоваровОбороты.Инициатор.Код КАК mvz_kod,
	//                 |	ПередачаТоваровОбороты.ДокументПередачи.ОтветственноеЛицо.Представление КАК FIO,
	//                 |	ПередачаТоваровОбороты.Номенклатура.Наименование КАК name,
	//                 |	ПередачаТоваровОбороты.Номенклатура.Артикул КАК art,
	//                 |	ПередачаТоваровОбороты.Номенклатура.Код КАК kod,
	//                 |	НомИнфСистПартнера.КодНоменклатуры КАК kod_partner,
	//                 |	ПередачаТоваровОбороты.Номенклатура.ЕдиницаИзмерения КАК unit,
	//                 |	ПочтаОтветственныхЛиц.Представление КАК mail
	//                 |ИЗ
	//                 |	РегистрНакопления.ПередачаТоваров.Обороты(&ДатаНачала, &ДатаКонца, , Партнер = &Партнер {(&МВЗ), (&ДокументПередачи)}) КАК ПередачаТоваровОбороты
	//                 |		ЛЕВОЕ СОЕДИНЕНИЕ ПочтаОтветственныхЛиц КАК ПочтаОтветственныхЛиц
	//                 |		ПО ПередачаТоваровОбороты.ДокументПередачи.ОтветственноеЛицо = ПочтаОтветственныхЛиц.ДокументПередачиОтветственноеЛицо
	//                 |		ЛЕВОЕ СОЕДИНЕНИЕ НомИнфСистПартнера КАК НомИнфСистПартнера
	//                 |		ПО ПередачаТоваровОбороты.Номенклатура = НомИнфСистПартнера.Номенклатура
	//                 |			И ПередачаТоваровОбороты.Партнер.ИнформационнаяСистемаПартнера = НомИнфСистПартнера.ИнформационнаяСистема
	//				 |" + ?(ЗначениеЗаполнено(ОтветственноеЛицо), " Где ПередачаТоваровОбороты.ДокументПередачи.ОтветственноеЛицо = &ОтветственноеЛицо", "");

	//			   
	//			   Запрос.УстановитьПараметр("Вид",Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочты);
	//Иначе			   
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	СоответствиеТоваровПартнеров.Номенклатура,
	//               |	СоответствиеТоваровПартнеров.ИнформационнаяСистема,
	//               |	СоответствиеТоваровПартнеров.КодНоменклатуры
	//               |ПОМЕСТИТЬ НомИнфСистПартнера
	//               |ИЗ
	//               |	РегистрСведений.СоответствиеТоваровПартнеров КАК СоответствиеТоваровПартнеров
	//               |ГДЕ
	//               |	СоответствиеТоваровПартнеров.ИнформационнаяСистема = &ПартнерИнфСистема
	//               |;
	//               |
	//               |////////////////////////////////////////////////////////////////////////////////
	//               |ВЫБРАТЬ
	//               |	ПередачаТоваровОбороты.ДокументПередачи КАК transaction_id,
	//               |	ПередачаТоваровОбороты.ДокументПередачи.ОтветственноеЛицо КАК partner_user_id,
	//               |	ПередачаТоваровОбороты.Номенклатура КАК product_id,
	//               |	НомИнфСистПартнера.КодНоменклатуры КАК product_kod_partner,
	//               |	ПередачаТоваровОбороты.КоличествоПриход КАК quantity,
	//               |	ПередачаТоваровОбороты.СуммаПриход КАК sum
	//               |ИЗ
	//               |	РегистрНакопления.ПередачаТоваров.Обороты(&ДатаНачала, &ДатаКонца, , Партнер = &Партнер {(&МВЗ), (&ДокументПередачи)}) КАК ПередачаТоваровОбороты
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ НомИнфСистПартнера КАК НомИнфСистПартнера
	//               |		ПО ПередачаТоваровОбороты.Номенклатура = НомИнфСистПартнера.Номенклатура
	//               |			И ПередачаТоваровОбороты.Партнер.ИнформационнаяСистемаПартнера = НомИнфСистПартнера.ИнформационнаяСистема
	//			   |" + ?(ЗначениеЗаполнено(ОтветственноеЛицо), " Где ПередачаТоваровОбороты.ДокументПередачи.ОтветственноеЛицо = &ОтветственноеЛицо", "");
	//			   
	//              
	//		        			   
	//КонецЕсли;
	//		   
	//			   
	//Запрос.УстановитьПараметр("Партнер",ПартнерСсылка);
	//Запрос.УстановитьПараметр("ПартнерИнфСистема",ПартнерИнфСистема);

	//Запрос.УстановитьПараметр("ДатаНачала",ДатаНачала);
	//Запрос.УстановитьПараметр("ДатаКонца",ДатаКонца);
	//
	//ТаблицаЗначений = Запрос.Выполнить().Выгрузить();
	//
	//МассивОтвета = Новый Массив;
	//	
	//Если Подробно Тогда
	//	Для Каждого Строка ИЗ ТаблицаЗначений Цикл 
	//	МассивОтвета.Добавить(Новый Структура("transaction_id,partner_user_id,product_id,quantity,sum",новый Структура("id,data,number,mvz,mvz_kod",Строка.transaction_id,Строка.data,Строка.number,Строка.mvz,Строка.mvz_kod),Новый Структура("id,FIO,mail",Строка.partner_user_id,Строка.FIO,Строка.mail),новый Структура("id,name,art,kod,kod_partner,unit",Строка.product_id,Строка.name,Строка.art,Строка.kod,Строка.kod_partner,Строка.unit),Строка.quantity,Строка.sum));КонецЦикла;
	//Иначе  Для Каждого Строка ИЗ ТаблицаЗначений Цикл 
	//	МассивОтвета.Добавить(КонвертацияТипов.ПолучитьСтруктуруИзСТрокиТаблицыЗначений(ТаблицаЗначений, ТаблицаЗначений.Индекс(Строка))) КонецЦикла;КонецЕсли;
	//	
	//Ответ.УстановитьТелоИзСтроки(w1_Json.JSON(МассивОтвета, Истина));
	//УстановитьПривилегированныйРежим(Ложь);
	//Возврат Ответ;

КонецФункции
Функция ПолучитьСсылкуСправочника_Ст(Менеджер, Структура, стрОшибки = "")
	
	//Ссылка = Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(Структура.Ссылка));
	//Если Ссылка.ПолучитьОбъект() = Неопределено Тогда
	//	
	//	СпрОбъект = Менеджер.СоздатьЭлемент();
	//	СпрОбъект.Наименование = Структура.Наименование;
	//	Если ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(СпрОбъект,,стрОшибки, Ложь) Тогда
	//		Возврат СпрОбъект.Ссылка КонецЕсли;
	//	
	//Иначе
	//	
	//	Возврат Ссылка; КонецЕсли;
	
КонецФункции

