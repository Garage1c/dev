&НаКлиенте
Перем МассивКомментариев Экспорт;

Функция Заказы() Экспорт
	
	// Возвращает массив уникальных заказов
	
	текЗаказы = Новый Массив;
	Для Каждого Строка Из Товары Цикл Если текЗаказы.Найти(Строка.Заказ) = Неопределено Тогда текЗаказы.Добавить(Строка.Заказ) КонецЕсли; КонецЦикла;
	
	Возврат текЗаказы;
	
КонецФункции

&НаСервере
Функция СформироватьПровестиСборкуИВыполнитьЗадачу()
	
	НачатьТранзакцию();
	
	// Запишем документ
	
	//Сборка = ?(Объект.БизнесПроцесс.СборочныйЛист.Пустая(), Документы.СборочныйЛист.СоздатьДокумент(), Объект.БизнесПроцесс.СборочныйЛист.ПолучитьОбъект());
	//Сборка.Заполнить(Новый Структура("Шапка, Товары, ТоварыУсловие, ТоварыАлгоритм", 
	//			Новый Структура("Заказ, Склад, Вес, Объем, КоличествоПозиций", Заказ, Склад, Вес, Объем, КоличествоПозиций),
	//			Товары,
	//			" Строка.Состояние <> Перечисления.СостояниеСборкиЗаказа.Собрано И Строка.Количество > 0",
	//			"НовСтрока.Количество = Строка.Собрано; НовСтрока.Собрать = Строка.Количество;"));
	//			
	//Если 	Сборка.Товары.Количество() И
	//		Не ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(Сборка, РежимЗаписиДокумента.Проведение) Тогда
	//			ОтменитьТранзакцию();
	//			Возврат Ложь; КонецЕсли;
			
	// Запишем задачу
	
	//Если Не Записать(Новый Структура("ВыполнитьЗадачу, НеСоздаватьСборку", Истина, Истина)) Тогда
	
	
	Если Не Записать(Новый Структура("ВыполнитьЗадачу", Истина)) Тогда
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецЕсли;
	
	ЗаказыМассив = Заказы();
	
	Для Каждого текЗаказ Из ЗаказыМассив Цикл // silber
		//Нэти-Начало Гашников Александр 24.05.2017, заявка 73
		Если ТипЗнч(текЗаказ) = Тип("ДокументСсылка.ИнтернетЗаказПокупателя") Или ТипЗнч(текЗаказ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда 
			Если Не ЗначениеЗаполнено(текЗаказ.МВЗ) Тогда 						
				Если ЗначениеЗаполнено(текЗаказ.МенеджерЗаказа.Почта) Или ЗначениеЗаполнено(текЗаказ.Контрагент.ОсновнойМенеджер.Почта) Тогда 
					ОтправитьПисьмоОНенайденномТоваре(текЗаказ);
				КонецЕсли;                          		
			КонецЕсли;
		КонецЕсли;
		//Нэти-Конец
	КонецЦикла;
	
	// Установим статус
		
	//Заказы.УстановитьСостояниеЗаказа(Заказ, Перечисления.СостоянияЗаказа[
	ЗаказыКоллекция.УстановитьСостояниеЗаказов(ЗаказыМассив, Перечисления.СостоянияЗаказа[
			//?(Сборка.Товары.Количество(),
			?(Объект.БизнесПроцесс.СборочныйЛист.Товары.Количество(),
					//?(Заказы.ЗаказЧастичноСобран(Объект.БизнесПроцесс), "СобранЧастично","Собран"),
					?(ЗаказыКоллекция.ЕстьЗаказКоторыйЧастичноСобран(Объект.БизнесПроцесс), "СобранЧастично","Собран"),
					"ВОчередиНаСкладПовторно")]);
						
	ЗафиксироватьТранзакцию();
	
	Возврат Истина;
	
КонецФункции

//Нэти-Начало Гашников Александр 24.05.2017, заявка 73	
Процедура ОтправитьПисьмоОНенайденномТоваре(текЗаказ)
			
	Кому = "";
	Кому = текЗаказ.МенеджерЗаказа.Почта;
	МенеджерЗаказа = текЗаказ.МенеджерЗаказа;
	
	Если Не ЗначениеЗаполнено(Кому) Тогда 
		Кому = текЗаказ.Контрагент.ОсновнойМенеджер.Почта;
		МенеджерЗаказа = текЗаказ.Контрагент.ОсновнойМенеджер; 
	КонецЕсли;	
			
	Копия = "";
	
	тзТовары = Товары.Выгрузить(, "Номенклатура, Количество, Собрано, Ненайдено");
	
	мДляУдаления = Новый Массив;
	Для Каждого Строка Из тзТовары Цикл 
		
		Если Строка.Ненайдено = 0 Тогда 
			мДляУдаления.Добавить(Строка);
			Продолжить;
		КонецЕсли;
		
		ПочтаКМ = Строка.Номенклатура.КатегорияТовара.КатегорийныйМенеджер.Почта;
		Если ЗначениеЗаполнено(ПочтаКМ) Тогда 
			Если СтрНайти(Копия, ПочтаКМ, НаправлениеПоиска.СНачала, 1) = 0 Тогда 
				Копия = Копия + ПочтаКМ + ";" ;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// убриаем последнюю ";"
	Копия = Сред(Копия, 1, СтрДлина(Копия) - 1);
	
	Кому = Кому + ";" + Копия;
	
	Для Каждого СтрокаУдаления Из мДляУдаления Цикл 
		тзТовары.Удалить(СтрокаУдаления);		
	КонецЦикла;
	
	Если тзТовары.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	ТоварыЕстьВНаличии(тзТовары);
	
	ТемаПисьма = "Оповещение о несобранном товаре";
	ТекстПисьмаЗаголовок = "Уважаемый(ая) " + МенеджерЗаказа + "!" + "<BR><BR> Спешим сообщить Вам, что следующие позиции были ненайдены в заказе № " + текЗаказ.Номер + ":<BR><BR>";	
	ТекстПисьмаТело = "";
	
	ТекстПисьмаТело = 
	"
	|<table width=""100%"" border=""0"" cellspacing=""0"" cellpadding=""0"">
	|<tr>
	|<td align=""center"" valign=""top"">
	|<table width=""640"" cellspacing=""0"" cellpadding=""0"" border=""0"">
	|<tr>
	|<td align=""center"" style=""width:138px;"" ><a href="""" /></a></td>
	|<td align=""center"" style=""width:295px;""></td>		
	|</tr>                                                                
	|<tr>
	|<td colspan=""3"" bgcolor=""#008000"" align=""center"" style=""font-family: Verdana,Geneva,sans-serif;font-size:14px;color:#008000;"">.</td> 
	|</tr>
	|<tr>
	|<td align=""left"" colspan=""3"" style=""font-family: Verdana,Geneva,sans-serif;font-size:14px;color:#333333;padding:10px 0;"">	 
	|" + ТекстПисьмаЗаголовок + "<BR></P></td>
	|</tr>		
	|</table>
	|<table width=""800"" cellspacing=""0"" cellpadding=""0"" border=""0"" style=""margin:10px 0 0"">
	|<thead>
	|<th style=""background-color:#333333; text-align:center;color:#fff;font-weight:400;line-height:30px;font-family: Verdana,Geneva,sans-serif;font-size:11px;border-bottom:1px solid #bbbbbb;width: 110px;"">Артикул</th>
	|<th style=""background-color:#333333; text-align:center;color:#fff;font-weight:400;line-height:30px;font-family: Verdana,Geneva,sans-serif;font-size:11px;border-bottom:1px solid #bbbbbb;"">Наименование</th>
	|<th style=""width:120px;background-color:#333333; text-align:center;color:#fff;font-weight:400;line-height:30px;font-family: Verdana,Geneva,sans-serif;font-size:11px;border-bottom:1px solid #bbbbbb;"">Количество</th>
	|<th style=""background-color:#333333; text-align:center;color:#fff;font-weight:400;line-height:30px;font-family: Verdana,Geneva,sans-serif;font-size:11px;border-bottom:1px solid #bbbbbb;"">Собрано</th>
	|<th style=""width:120px;background-color:#333333; text-align:center;color:#fff;font-weight:400;line-height:30px;font-family: Verdana,Geneva,sans-serif;font-size:11px;border-bottom:1px solid #bbbbbb;"">Ненайдено</th>
	|<th style=""width:120px;background-color:#333333; text-align:center;color:#fff;font-weight:400;line-height:30px;font-family: Verdana,Geneva,sans-serif;font-size:11px;border-bottom:1px solid #bbbbbb;width: 300px;"">Остатки</th>
	|</tr>
	|</thead>
	|<tbody>";
	
	Для Каждого Строка Из тзТовары Цикл 
		
		ТекстПисьмаТело = ТекстПисьмаТело + 			
		"
		|<tr>
		|<td align=""left"" valign=""top"" style=""padding:10px 5px;font-family: Verdana,Geneva,sans-serif;font-size:12px;color:#333333;border-bottom:1px solid #bbbbbb;"">" + Строка.Номенклатура.Артикул + "</td>
		|<td align=""left"" valign=""top"" style=""padding: 10px 5px;border-bottom:1px solid #bbbbbb;"">
		|<a style=""font-family: Verdana,Geneva,sans-serif;font-size:12px;color:#333333;"" href="""" title=""Товар"">" + Строка.Номенклатура + "</a></td>
		|<td align=""center"" valign=""top"" style=""padding: 10px 5px;font-family: Verdana,Geneva,sans-serif;font-size:12px;color:#333333;border-bottom:1px solid #bbbbbb;"">" + Строка.Количество + "</td>
		|<td align=""left"" valign=""top"" style=""padding: 10px 5px;font-family: Verdana,Geneva,sans-serif;font-size:12px;color:#333333;border-bottom:1px solid #bbbbbb;"">" + Строка.Собрано +"</td>
		|<td align=""center"" valign=""top"" style=""padding: 10px 5px;font-family: Verdana,Geneva,sans-serif;font-size:12px;color:#006644;border-bottom:1px solid #bbbbbb;"">" + Строка.Ненайдено + "</td>
		|<td align=""left"" valign=""top"" style=""padding: 10px 5px;font-family: Verdana,Geneva,sans-serif;font-size:12px;color:#006644;border-bottom:1px solid #bbbbbb;"">" + Строка.Остатки + "</td>
		|</tr>";
		
	КонецЦикла;
	
	ТекстПисьма = ТекстПисьмаТело;		
	
	Письмо = ОбщиеФункции.ОповеститьПоПочте(Кому, ТемаПисьма, ТекстПисьма, Ложь, Перечисления.ТипыТекстовЭлектронныхПисем.HTML, , , , Копия);	
	
КонецПроцедуры

Функция ТоварыЕстьВНаличии(ТаблицаТоваров)
	
	ТаблицаТоваров.Колонки.Добавить("Остатки");		
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаТоваров.Номенклатура
	               |ПОМЕСТИТЬ ВТ_Товары
	               |ИЗ
	               |	&ТаблицаТоваров КАК ТаблицаТоваров
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Товары.Номенклатура КАК Номенклатура,
	               |	ТоварыНаСкладахОстатки.Склад,
	               |	ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) КАК Остаток
	               |ПОМЕСТИТЬ ВТ_ТоварыНаСкладах
	               |ИЗ
	               |	ВТ_Товары КАК ВТ_Товары
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(&Период, НЕ Склад.ПередачаТовараМВЗ) КАК ТоварыНаСкладахОстатки
	               |		ПО ВТ_Товары.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
	               |ГДЕ
	               |	ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) > 0
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ТоварыНаСкладах.Номенклатура КАК Номенклатура,
	               |	ВТ_ТоварыНаСкладах.Склад,
	               |	ВТ_ТоварыНаСкладах.Остаток - ЕСТЬNULL(ТоварыВРезервеОстатки.КоличествоОстаток, 0) КАК Остаток
	               |ИЗ
	               |	ВТ_ТоварыНаСкладах КАК ВТ_ТоварыНаСкладах
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВРезерве.Остатки(&Период, НЕ Размещение.ПередачаТовараМВЗ) КАК ТоварыВРезервеОстатки
	               |		ПО ВТ_ТоварыНаСкладах.Номенклатура = ТоварыВРезервеОстатки.Номенклатура
	               |			И ВТ_ТоварыНаСкладах.Склад = ТоварыВРезервеОстатки.Размещение
	               |ГДЕ
	               |	ВТ_ТоварыНаСкладах.Остаток - ЕСТЬNULL(ТоварыВРезервеОстатки.КоличествоОстаток, 0) > 0
	               |ИТОГИ ПО
	               |	Номенклатура";
	
	Запрос.УстановитьПараметр("ТаблицаТоваров" , ТаблицаТоваров);
	Запрос.УстановитьПараметр("Период" ,         КонецДня(ТекущаяДата()));
	
	ВыборкаНоменклатура = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаНоменклатура.Следующий() Цикл 
		
		Остатки = "";
		ВыборкаСклад = ВыборкаНоменклатура.Выбрать();
		
		Пока ВыборкаСклад.Следующий() Цикл 
			Остатки = Остатки + """" + ВыборкаСклад.Склад + """: " + ВыборкаСклад.Остаток + ";<BR>";			
		КонецЦикла;
		
		НайденнаяСтрока = ТаблицаТоваров.Найти(ВыборкаНоменклатура.Номенклатура, "Номенклатура");
		Если НайденнаяСтрока <> Неопределено Тогда 
			НайденнаяСтрока.Остатки = Остатки;
		КонецЕсли;
		
	КонецЦикла;		
	
КонецФункции

//Нэти-Конец

// ТИПОВЫЕ

&НаКлиенте
Процедура ПоказатьСкрытьАдресацию(Команда)
	
	// Реверснем
	
	КоманднаяПанель.ПодчиненныеЭлементы.ПоказатьСкрытьАдресацию.Пометка = Не КоманднаяПанель.ПодчиненныеЭлементы.ПоказатьСкрытьАдресацию.Пометка;
	
	// Обновим видимость
	
	ФункцииФормЗадач.ВидимостьАдресации(ЭтаФорма);
	
КонецПроцедуры
&НаСервере
Процедура ПрочитатьРеквизиты()
	
	Склад = Объект.БизнесПроцесс.Склад;
	
	ФункцииБизнесПроцессов.ЗаполнитьДанные(ЭтаФорма, 
		Объект.Ссылка.БизнесПроцесс, 
		Объект.Ссылка);
		
	// Объединение сборочников
	ОбновитьПредставлениеРеквизитовОбъединенныхЭлементов();
		
	// Добавим ячейки из буфера
	
	//Если Склад.Ячеестый Тогда
	//	ФункцииФормДокументов.ЗаполнитьСохраненныеЯчейкиЗадачи2(Объект.Ссылка, Товары, Перечисления.СостояниеСборкиЗаказа.Собирается); КонецЕсли;
	
	// Добавим макс количество
	
	КонвертацияТипов.ВыполнитьВыражениеВКаждойСтрокеТаблицы(Товары, "
		|Строка.МаксимальноеКоличество = Строка.Количество;
	    |Строка.Артикул = Строка.Номенклатура.Артикул");
	
КонецПроцедуры
&НаСервере
Процедура УправлениеВидимостьюДоступностью()
	
	//ЭтоТекущаяЗадача = ФункцииБизнесПроцессов.ТекущаяЗадача(Объект.БизнесПроцесс) = Объект.Ссылка;
	ЭтоТекущаяЗадача = Не Объект.Выполнена;
		
	Элементы.ТоварыСобрано.Видимость	= ЭтоТекущаяЗадача;
	Элементы.ТоварыСборщик.Видимость 	= ЭтоТекущаяЗадача;
	
	Элементы.КнопкаСобратьИЗакрыть.Видимость = ЭтоТекущаяЗадача;
	
	Элементы.ТоварыЯчейка.Видимость 			= Склад.Ячеестый;
	Элементы.ГруппаЗаполненияЯчеек.Видимость 	= Склад.Ячеестый;
	
	Элементы.ГруппаСборочныйЛист.Видимость = Не Объект.Выполнена;
	
	Элементы.ТоварыТоварыПоказатьРассположениеВчейках.Видимость = Склад.Ячеестый;
		
КонецПроцедуры

&НаСервере
Функция ПроверитьСборщиков()
	
	Отказ = Ложь;
	
	Если НЕ Склад.УчетПоСбощикамЗаказов Тогда
		Возврат Не Отказ; КонецЕсли;
	
	Инд = -1;
	Для Каждого Строка Из Товары Цикл Инд = Инд + 1;
		Если 	Строка.Собрано И
				Строка.Сборщик.Пустая() Тогда
					
			Отказ = Истина;
			ОбщиеФункции.СообщитьТекст("Не выбран сборщик позиции!","Товары[" + Формат(Инд,"ЧГ=") + "].Сборщик"); КонецЕсли; КонецЦикла;
	
	Возврат Не Отказ;
	
КонецФункции
&НаСервере
Функция ПроверитьЯчейки()
	
	Отказ = Ложь;
	
	Если Склад.Ячеестый Тогда
	
		Инд = -1;
		Для Каждого Строка Из Товары Цикл Инд = Инд + 1;
			Если 	Строка.Собрано И
					Строка.Ячейка.Пустая() Тогда
					
				Отказ = Истина;
				ОбщиеФункции.СообщитьТекст("Не заполнена ячейка","Товары[" + Формат(Инд,"ЧГ=") + "].Ячейка"); КонецЕсли; КонецЦикла; КонецЕсли;
	
	Возврат Не Отказ;
	
КонецФункции
&НаСервере
Функция ПроверитьЗаполнениеСборки() Экспорт
	
	// Проверяет заполнен или обязательные поля сборки заказов	
	// если заказ это требует
	
	Отказ = Ложь;
	
	Если Склад.ОбязательноСборочныйЛист Тогда
	
		Если Вес = 0 Тогда Отказ = Истина; ОбщиеФункции.СообщитьТекст("не заполнен вес", "Вес"); КонецЕсли;
		Если ЯчейкаСобранногоТовара.Пустая() Тогда Отказ = Истина; ОбщиеФункции.СообщитьТекст("не заполнена ячейка собранного товара", "ЯчейкаСобранногоТовара"); КонецЕсли;
		//Если Объем = 0 Тогда Отказ = Истина; ОбщиеФункции.СообщитьТекст("не заполнен объем", "Объем"); КонецЕсли;
		Если КоличествоМест = 0 Тогда Отказ = Истина; ОбщиеФункции.СообщитьТекст("не заполнено количество позиций", "КоличествоМест"); КонецЕсли; КонецЕсли;
		
	Возврат не Отказ;
	
КонецФункции

// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПодготовитьТаблицу()
	
	Для Каждого Строка Из Товары Цикл 
		Если Склад = Строка.Размещение И Строка.Состояние = Перечисления.СостояниеСборкиЗаказа.Собирается Тогда 
			Строка.Собрано 		= Строка.Количество; 
		Иначе	Строка.Количество 	= 0; КонецЕсли; КонецЦикла;
	
КонецПроцедуры
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// прикрепленные файлы
	ОбновитьВидимостьПрикрепленныхФайловНаСервере();
	
	// информация о товаре
	РаботаСНоменклатурой.ДобавитьОперативнуюИнформациюОТоваре(ЭтаФорма);
	
	// комментарии
	ФункцииБизнесПроцессов.ДобавитьРаботуСКомментариями(ЭтаФорма);

	ПрочитатьРеквизиты();
	
	// Теперь если токо открыли тогда весь статус собран
	
	Если Не Объект.Выполнена И Не Объект.Ссылка.БизнесПроцесс.СборочныйЛист.Проведен Тогда
		ПодготовитьТаблицу(); КонецЕсли;
	
	// Расчитаем параметры сборочного листа
	
	ФункцииФормЗадач.ЗаполнитьПоСборочномуЛисту(ЭтаФорма, Объект, Товары);
	
	// Обновим очередь
	
	Элементы.ДекорацияИнфоОчередь.Заголовок = Заказы.ИнформацияОбОчереди(Заказ).ТекстОчередь1Строка;
	
	// Спрячем
	
	УправлениеВидимостьюДоступностью();
	
	// Установим признак печати
	ОбновитьПризнакПечати();
	
	// Проверим статус VIP у контрагента
	ПроверитьVIPКонтрагента();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьVIPКонтрагента()
	
	Если РольДоступна("УправлениеСборкойЗаказа") или РольДоступна("ПолныеПрава") Или РольДоступна("ПолныеПраваВОбласти") Тогда
		Элементы.VIP.Доступность = Истина;	
	Иначе
		Элементы.VIP.Доступность = Ложь;	
	КонецЕсли;	
	
	СтатусVIP = Ложь;
	Если ПроверитьКонтролеру Тогда //Если статус ПроверитьКонтролеру уже установлен
		Элементы.Контролер.Доступность = Истина;
		Возврат;
	КонецЕсли;
	
	Если Объект.БизнесПроцесс.СборочныйЛист.Пустая() Тогда  // Если документ сборочный лист еще не записан
		Элементы.Контролер.Доступность = Ложь;
		Элементы.VIP.Доступность = Ложь;
	КонецЕсли;	
	
	Если НЕ Контрагент.VIP Тогда
		СтатусVIP = Справочники.УсловияКонтроляЗаказа.ПроверитьУсловияКонтроляЗаказа(Объект.БизнесПроцесс.Заказ);
		ПроверитьКонтролеру = СтатусVIP;
		Элементы.Контролер.Доступность = СтатусVIP;
	Иначе 
		ПроверитьКонтролеру = Истина;
	КонецЕсли;
	
КонецПроцедуры	

 &НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// комментарии
	ФункцииБизнесПроцессовКлиент.ПолучитьМассивКомментариев(ЭтаФорма, Объект.БизнесПроцесс);

	ФункцииФормЗадач.ПриОткрытии(Объект, ЭтаФорма, Отказ);
	
	// Объединенная сборка
	Если Не Объект.Выполнена Тогда ПроверитьЧтобыЗаказНеОказалсяВДругойЗадаче() КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ФункцииФормЗадач.ПослеЗаписи(Объект, ЭтаФорма, ПараметрыЗаписи);
	УправлениеВидимостьюДоступностью();
	ПроверитьVIPКонтрагента();
	
КонецПроцедуры
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ВыполнитьЗадачу = Ложь;
	ПараметрыЗаписи.Свойство("ВыполнитьЗадачу", ВыполнитьЗадачу);
	Если ВыполнитьЗадачу = Истина Тогда
		ТипСборочногоЛиста = Перечисления.ТипыСборочныхЛистов.Сборка;
		ДатаСборки = ТекущаяДата();
	Иначе
		ТипСборочногоЛиста = Перечисления.ТипыСборочныхЛистов.ФиксацияЯчеек;
	КонецЕсли;	
	
	НовСборка = Объект.БизнесПроцесс.СборочныйЛист.Пустая();
	
	Сборка = ?(НовСборка, Документы.СборочныйЛист.СоздатьДокумент(), Объект.БизнесПроцесс.СборочныйЛист.ПолучитьОбъект());
	Сборка.Заполнить(Новый Структура("Шапка, Товары, ТоварыУсловие, ТоварыАлгоритм", 
			Новый Структура("Заказ, Склад, Вес, Объем, КоличествоПозиций, ТипСборочногоЛиста, ЯчейкаСобранногоТовара, КоличествоМест, ДатаСборки, Контролер", Заказ, Склад, Вес, Объем, КоличествоПозиций, ТипСборочногоЛиста, ЯчейкаСобранногоТовара, КоличествоМест, ДатаСборки, Контролер),
			Товары,
			" Строка.Состояние <> Перечисления.СостояниеСборкиЗаказа.Собрано И Строка.Количество > 0",
			"НовСтрока.Количество = Строка.Собрано; НовСтрока.Собрать = Строка.Количество;")); 
			
	Если Не ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(Сборка, РежимЗаписиДокумента.Проведение) Тогда
		Отказ = Истина; КонецЕсли; // КонецЕсли;
		
	БПОбъект = Объект.БизнесПроцесс.ПолучитьОбъект();
	//БПМодифицирован = ЗаказыКоллекция.ЗаполнитьТаблицуЗаказовЕслиНеСопадает(ЭтаФорма, БПОбъект);
		
	Если НовСборка Тогда
		БПОбъект.СборочныйЛист = Сборка.Ссылка;
		БПМодифицирован = Истина; КонецЕсли;
		
	Если БПМодифицирован = Истина И Не ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(БПОбъект) Тогда
		Отказ = Истина; КонецЕсли;
			
КонецПроцедуры

// ТОВАРЫ

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Откза = Истина; // низя добавлять
	
КонецПроцедуры
&НаКлиенте
Процедура ТоварыПередНачаломИзменения(Элемент, Отказ)
	
	// Определим колонку и строку
	
	ТекКолонка 		= Элементы.Товары.ТекущийЭлемент.Имя;
	ТекДанные 		= Элементы.Товары.ТекущиеДанные;
	
	// Дадим доступ если не собрано
	
	//Если 	(
	//			//ТекКолонка = "ТоварыСобрано" И
	//			//Не ТекущаяСтрокаСобирается(ТекДанные.Состояние)
	//			
	//		) ИЛИ
	//		
	//		(
	//			//ТекКолонка = "ТоварыСборщик" И
	//			//Не ТекДанные.Собрано
	//		)
	//		Тогда
	//		
	//	Отказ = Истина;
	//	Возврат;
	//	
	//КонецЕсли; 	
	
	// Не дадим писать больше чем в заказе
	
	Элементы.ТоварыКоличество.МаксимальноеЗначение = ТекДанные.МаксимальноеКоличество;
	Элементы.ТоварыНеСобрано.МаксимальноеЗначение = ТекДанные.МаксимальноеКоличество;
	
	//Если ТекКолонка = "ТоварыКоличество" И Не ТекДанные.Собрано Тогда
	//	Отказ = Истина;
	//	Возврат;
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТекущаяСтрокаСобирается(ТекущееСостояние)
	
	Возврат ТекущееСостояние = Перечисления.СостояниеСборкиЗаказа.Собирается;
	
КонецФункции
&НаСервере
Функция ПеречислениеСостояниеСобирается()
	
	Возврат Перечисления.СостояниеСборкиЗаказа.Собирается;
	
КонецФункции

// КОМАНДЫ

&НаКлиенте
Процедура УстановитьЗначениеДляВсех(Значение = Неопределено, ИмяКолонки, ТолькоСобранные = Ложь, Выражение = "")
	
	//Строки = Товары.НайтиСтроки(Новый Структура("Состояние",ПеречислениеСостояниеСобирается()));
	Для Каждого Строка Из товары Цикл 
		Если Не ТолькоСобранные Или Строка.Собрано Тогда 
			Если Выражение = "" Тогда
				Строка[ИмяКолонки] = Значение;
			Иначе
				Выполнить(Выражение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
&НаКлиенте
Процедура УстановитьЗначениеДляВыделенных(Значение, ИмяКолонки, ТолькоСобранные = Ложь)
	
	Собирается = ПеречислениеСостояниеСобирается();
	Для каждого ИдСтроки Из Элементы.Товары.ВыделенныеСтроки Цикл Строка = Товары.НайтиПоИдентификатору(ИдСтроки);
		//Если 
		//	Строка.Состояние = Собирается И 
		//	(Не ТолькоСобранные Или Строка.Собрано)
		//	Тогда
			Строка[ИмяКолонки] = Значение;
		//КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
&НаКлиенте
Процедура ВыбратьЭлементДляВсех(ПутьКОбъекту, ИмяКолонки)
	
	ВыбранныйЭлемент = ОткрытьФормуМодально(ПутьКОбъекту,,ЭтаФорма);
	Если ВыбранныйЭлемент <> Неопределено Тогда
		
		УстановитьЗначениеДляВсех(ВыбранныйЭлемент, ИмяКолонки);
		
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ВыбратьСостояние(Команда)
	
	ВыбратьЭлементДляВсех("Перечисление.ДействияПоСборкеЗаказа.ФормаВыбора", "Состояние");
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокСборщиков()
	
	Возврат ДиалогиСПользователем.ПолучитьСписокСборщиков();
	
КонецФункции
&НаКлиенте
Процедура ВыбСборщик(Элемент, ДопПараметры) Экспорт
	
	Если Элемент <> Неопределено Тогда
		
		Если Элементы.Товары.ВыделенныеСтроки.Количество() > 1 Тогда
				УстановитьЗначениеДляВыделенных(Элемент.Значение, "Сборщик", Истина);
		Иначе	УстановитьЗначениеДляВсех(Элемент.Значение, "Сборщик", Истина) КонецЕсли; КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ВыбратьСборщика(Команда)
	
	ПоказатьВыборИзМеню(Новый ОписаниеОповещения("ВыбСборщик", ЭтаФорма), ПолучитьСписокСборщиков(), Команда);

КонецПроцедуры

&НаКлиенте
Процедура ВсеСобрано(Команда)
	
	УстановитьЗначениеДляВсех(,"Собрано", Ложь, "Строка.Собрано = Строка.Количество; Строка.НеНайдено = 0;");
	Модифицированность = Истина;
	
КонецПроцедуры
&НаКлиенте
Процедура НичегоНеСобрано(Команда)
	
	УстановитьЗначениеДляВсех(, "Собрано", Ложь, "Строка.Собрано = 0; Строка.НеНайдено = 0;");
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЯчейки(Команда)
	
	УстановитьЗначениеДляВсех(, "Ячейка", Ложь, "Строка.Ячейка = Неопределено");
	Модифицированность = Истина;
	
КонецПроцедуры


// Проверяет, содержит ли строка только цифры. (Не используется, сорировка идет по полю "Сортировка" в ячейке)
//
// Параметры:
//  Значение                - Строка - проверяемая строка.
//  УчитыватьЛидирующиеНули - Булево - флаг учета лидирующих нулей, если Истина, то ведущие нули пропускаются.
//  УчитыватьПробелы        - Булево - флаг учета пробелов, если Истина, то пробелы при проверке игнорируются.
//
// Возвращаемое значение:
//   Булево - Истина - строка содержит только цифры или пустая, Ложь - строка содержит иные символы.
//
&НаСервереБезКонтекста
Функция ТолькоЦифрыВСтроке(Знач Значение, Знач УчитыватьЛидирующиеНули = Истина, Знач УчитыватьПробелы = Истина) Экспорт
	
	Если ТипЗнч(Значение) <> Тип("Строка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не УчитыватьПробелы Тогда
		Значение = СтрЗаменить(Значение, " ", "");
	КонецЕсли;
	
	Значение = СтрЗаменить(Значение, ".", "");
	
	Если СтрДлина(Значение) = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Не УчитыватьЛидирующиеНули Тогда
		Позиция = 1;
		// Взятие символа за границей строки возвращает пустую строку.
		Пока Сред(Значение, Позиция, 1) = "0" Цикл
			Позиция = Позиция + 1;
		КонецЦикла;
		Значение = Сред(Значение, Позиция);
	КонецЕсли;
	
	// Если содержит только цифры, то в результате замен должна быть получена пустая строка.
	// Проверять при помощи ПустаяСтрока нельзя, так как в исходной строке могут быть пробельные символы.
	Возврат СтрДлина(
	СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить(
	СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( 
	Значение, "0", ""), "1", ""), "2", ""), "3", ""), "4", ""), "5", ""), "6", ""), "7", ""), "8", ""), "9", "")) = 0;
	
КонецФункции


&НаСервере
Процедура ЗаполнитьЯчейкиНаСервере()
	
	НовТовары = ФункцииФормДокументов.РазбитьПоЯчейкам(Товары.Выгрузить(), Объект.Склад, Объект.БизнесПроцесс.СборочныйЛист);
		
	Товары.Загрузить(НовТовары);
	
	//НовТовары = Товары.Выгрузить();
	//НовТовары.Колонки.Добавить("ЭтотТоварСобран", Новый ОписаниеТипов("Булево"));
	//КонвертацияТипов.ВыполнитьВыражениеВКаждойСтрокеТаблицы(НовТовары, "Строка.ЭтотТоварСобран = Строка.Собрано > 0");
	//ФункцииФормДокументов.ЗаполнитьЯчейки(НовТовары,,,Склад,,,,Истина,Объект.Ссылка, Новый Структура("ЭтотТоварСобран", Истина));
	//Товары.Загрузить(НовТовары);
	
	//ФункцииФормДокументов.ЗаполнитьЯчейки(Товары,,,Склад,,,,Истина,Объект.Ссылка, Новый Структура("Собрано", Истина));
	
КонецПроцедуры
&НаКлиенте
Процедура ЗаполнитьЯчейки(Команда)
	
	ЗаполнитьЯчейкиНаСервере();
	Модифицированность = Истина;
	
КонецПроцедуры


&НаКлиенте
Процедура СобратьИЗакрыть(Команда)
	
	Отказ = Ложь;
	
	// Проверим заполнение сборочного листа
	Если Не ПроверитьЗаполнениеСборки() Тогда Отказ = Истина; КонецЕсли;
	
	// Проверим что ячейки заполнены
	Если Не ПроверитьЯчейки() Тогда Отказ = Истина; Возврат; КонецЕсли;
	
	// Проверим что ячейки заполнены
	Если Не ПроверитьСборщиков() Тогда Отказ = Истина; Возврат; КонецЕсли;
	
	// Создадим сборку проведем и закроем форму
	Если Не Отказ И СформироватьПровестиСборкуИВыполнитьЗадачу() Тогда
		Закрыть() КонецЕсли;
	
КонецПроцедуры


// ИНФОРМАЦИЯ О ТОВАРЕ

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	// информация о товаре
	ОбработатьОтображениеИнформацииОТоваре()	
	 	
КонецПроцедуры
&НаСервере
Процедура ОбработатьОтображениеИнформацииОТоваре() Экспорт
	РаботаСНоменклатурой.ОбработатьОтображениеИнформацииОТоваре(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ИнфТовараТекстHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	РаботаСНоменклатуройКлиент.ИнфТовараТекстHTMLПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры
&НаКлиенте
Процедура ИнфТовараЗаголовокHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	РаботаСНоменклатуройКлиент.ИнфТовараЗаголовокHTMLПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры

 &НаКлиенте
Процедура ПоказатьСкрытьИнфОТоваре(Команда)
	РаботаСНоменклатуройКлиент.ПоказатьСкрытьИнфОТоваре(ЭтаФорма);
КонецПроцедуры
&НаКлиенте
Процедура НастройкаИнфОТоваре(Команда) 
	РаботаСНоменклатуройКлиент.НастройкаИнфОТоваре(ЭтаФорма);
КонецПроцедуры

// КОММЕНТАРИИ

&НаКлиенте
Процедура КомандаПоказатьКомментарий(Команда)
	ФункцииБизнесПроцессовКлиент.КомандаПоказатьКомментарий(ЭтаФорма);
КонецПроцедуры

// ПЕЧАТЬ СБОРОЧНОГО ЛИСТА

&НаСервере
Функция ПолучитьТабличныйДокумент(ВыводитьПомеченные = Ложь, Сортировка = "Ячейка")
	
	ТабДокумент 	= Новый ТабличныйДокумент;
	Макет 			= ПолучитьОбщийМакет("СборочныйЛист");

	ОбластьШапка 			= Макет.ПолучитьОбласть("Шапка");
	ОбластьКомментарий		= Макет.ПолучитьОбласть("Комментарий");
	ОбластьЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ОбластьИтого 			= Макет.ПолучитьОбласть("Итого");
	ОбластьСтрока 			= Макет.ПолучитьОбласть("Строка");
	
	// Шапка
	
	Если ТипЗнч(Объект.БизнесПроцесс.Заказ) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
		
		ОбластьШапка.Параметры.ПредставлениеКонтрагента = Объект.БизнесПроцесс.Заказ.Заказчик;
		
	//ИначеЕсли ТипЗнч(Объект.БизнесПроцесс.Заказ) = Тип("ДокументСсылка.ИнтернетЗаказПокупателя") Тогда

	Иначе
		
		Представление = ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Объект.БизнесПроцесс.Заказ.Контрагент, ТекущаяДата()), "ПолноеНаименование,ЮридическийАдрес",,Символы.ПС);
		Если ПустаяСтрока(Представление) Тогда
			Представление = ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Объект.БизнесПроцесс.Заказ.Партнер, ТекущаяДата()), "ПолноеНаименование,ЮридическийАдрес",,Символы.ПС);
		КонецЕсли;
		ОбластьШапка.Параметры.ПредставлениеКонтрагента = Представление;
		
	КонецЕсли;
		
	ОбластьШапка.Параметры.Номер 			= Объект.БизнесПроцесс.Заказ.Номер;
	ОбластьШапка.Параметры.Дата 			= Объект.БизнесПроцесс.Заказ.Дата;
	ОбластьШапка.Параметры.СинонимДокумента = "Сборочный лист";
	ОбластьШапка.Параметры.Склад			= Объект.Склад;
	
	// Установим штрих код
	
	//мШтрихКоды = ШтрихКоды.ПолучитьШтрихКодыОбъекта(Заказ); Если мШтрихКоды.Количество() Тогда
	//	ШтрихКоды.УстановитьШтрихКодВМакете(ОбластьШапка, мШтрихКоды[мШтрихКоды.ВГраница()]);КонецЕсли;
	
	Попытка
		ОбластьЗаголовокТаблицы.Параметры.ТипЦен 	= Строка(Объект.БизнесПроцесс.Заказ.ТипЦен);
		ОбластьЗаголовокТаблицы.Параметры.Цена 		= "Цена, " + Строка(Объект.БизнесПроцесс.Заказ.Валюта);
	Исключение
		ОбластьЗаголовокТаблицы.Параметры.ТипЦен 	= "";
		ОбластьЗаголовокТаблицы.Параметры.Цена 		= "Цена";
	КонецПопытки;
	
	ТабДокумент.Вывести(ОбластьШапка);
	
	// Сформируем комментарий
	
	Комменты = БизнесПроцессы.СборкаЗаказа.ПолучитьМассивКомментариев(Объект.БизнесПроцесс);
	Для Каждого Коммент Из Комменты Цикл
		ОбластьКомментарий.Параметры.Заполнить(Коммент);
		Если Коммент.Исполнитель.Пустая() Тогда
			ОбластьКомментарий.Параметры.Исполнитель = Коммент.Заголовок; //"Последний комментарий:";
		Иначе
			ОбластьКомментарий.Параметры.Исполнитель = Строка(Коммент.Исполнитель) + " (" + Формат(Коммент.ДатаВыполнения,"ДЛФ=DDT") + "):";
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьКомментарий);
	КонецЦикла;
	
	ТабДокумент.Вывести(ОбластьЗаголовокТаблицы);
	
	
	// Отсортируем чтобы бегали быстрее	
	ТаблВывода = Товары.Выгрузить();
	ТаблВывода.Сортировать(Сортировка);
	
	/////////CUSTOM SHOP СОРТИРОВКА ДЛЯ АНДРЕИЧА////////////////////////////////////////////////                                                                                            
	                                                  
	//нет размещения - 1                                                                        
	//магазин софийский - 2                                                                     
	//магазин Пискаревский - 3                                                                  
	//сервис - 4                                                                                
	//склад 2 - 5                                                                               
	//Новый склад - 6                                                                           
	//все остальное - 7
	ТаблВывода.Колонки.Добавить("Сортировка");
	ТаблВывода.Колонки.Добавить("СортировкаПоУмолчанию", Новый ОписаниеТипов("Строка"));

	СортировкаПоСкладам = Новый СписокЗначений;
	///магазины
	СортировкаПоСкладам.Добавить(Справочники.Склады.НайтиПоКоду("СОФ"), "2");                   
	СортировкаПоСкладам.Добавить(Справочники.Склады.НайтиПоКоду("ПСК"), "3");
	СортировкаПоСкладам.Добавить(Справочники.Склады.НайтиПоКоду("ММ1"), "4");
	///сервис
	СортировкаПоСкладам.Добавить(Справочники.Склады.НайтиПоКоду("СРВ"), "5");                   
	///склад 2
	СортировкаПоСкладам.Добавить(Справочники.Склады.НайтиПоКоду("СК2"), "1");                   
	///
	СортировкаПоСкладам.Добавить(Справочники.Склады.НайтиПоКоду("СКЛ"), "7");                   
	                                                                                            
	Для Каждого Строка Из ТаблВывода Цикл                                                                                    
		Если ЗначениеЗаполнено(Строка.СкладЯчейка) Тогда                                                              
			тмп = СортировкаПоСкладам.НайтиПоЗначению(Строка.СкладЯчейка);                                             
		    Строка.Сортировка = ?(тмп = Неопределено, 8, Число(тмп.Представление));             
		Иначе                                                                                   
			Строка.Сортировка = 9;
			Строка.СортировкаПоУмолчанию = Строка.Ячейка.Сортировка;
		КонецЕсли;		                                                                        
	КонецЦикла;
	ТаблВывода.Сортировать("Сортировка ВОЗР, СортировкаПоУмолчанию, " + Сортировка);
	//////////////////////////////////////////////////////////////////////////////////////////////
	
	Если ВыводитьПомеченные Тогда
		СтрокиВывода = ТаблВывода.СкопироватьКолонки();
		Для Каждого Строка ИЗ ТаблВывода Цикл Если Строка.Количество Тогда ЗаполнитьЗначенияСвойств(СтрокиВывода.Добавить(), Строка) КонецЕсли; КонецЦикла;
	Иначе
		СтрокиВывода = ТаблВывода;
	КонецЕсли;
	// Выводим в таблицу
	
	Ном = 0;
	ПустаяУпаковка = Справочники.УпаковкиНоменклатуры.ПустаяСсылка();
	Для каждого Строка Из СтрокиВывода Цикл Ном = Ном + 1;
		

		ОбластьСтрока.Параметры.Заполнить(Строка);
		ОбластьСтрока.Параметры.Номер 		= Ном;
		ОбластьСтрока.Параметры.Артикул 	= Строка.Номенклатура.Артикул;
		
		ОбластьСтрока.Параметры.ЕдиницаИзмерения = ?(Строка.Упаковка  = ПустаяУпаковка, Строка.Номенклатура.ЕдиницаИзмерения, Строка.Упаковка);
		ОбластьСтрока.Параметры.Ячейка = Строка.Ячейка;

		Если Строка.Ячейка.Пустая() Тогда 
			ОбластьСтрока.Параметры.Ячейка = ?(ЗначениеЗаполнено(Строка.СкладЯчейка), Строка.СкладЯчейка ,Строка.Размещение); КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьСтрока); КонецЦикла; 
	
	ОбластьИтого.Параметры.ДатаФормирования = Формат(ТекущаяДата(),"ДЛФ=DDT");
	ТабДокумент.Вывести(ОбластьИтого);
	
	// Настрим просмотры
	
	ТабДокумент.ТолькоПросмотр 	= Истина;
	ТабДокумент.ОтображатьСетку = Ложь;
	
	Возврат ТабДокумент;
	
КонецФункции
&НаКлиенте
Процедура ПечатьСборочногоЛиста(Команда) 			ПолучитьТабличныйДокумент().Показать() КонецПроцедуры
&НаКлиенте
Процедура ПечатьСборочногоЛистаВыборочная(Команда) 	ПолучитьТабличныйДокумент(Истина).Показать() КонецПроцедуры
&НаКлиенте
Процедура ПечатьСборочногоЛистаСортАртикул(Команда) ПолучитьТабличныйДокумент(, "Артикул").Показать() КонецПроцедуры


#Область Прикрепленные_файлы

&НаКлиенте
Процедура УдалитьПрикрепленныеФайлыНажатие(Элемент)
	
	ПрикрепленныеФайлыКлиент.УдалитьНажатие(Объект.Заказ, ЭтаФорма, Элемент);
	
КонецПроцедуры
&НаКлиенте
Процедура ПрикрепленныеФайлыНажатиеСкрепка(Элемент)
	
	ПрикрепленныеФайлыКлиент.НажатиеСкрепка(Объект.Заказ, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПрикрепленныйФайл(Элемент)
	
	ПрикрепленныеФайлыКлиент.ОткрытьПрикрепленныйФайл(Элемент.Имя);
	
КонецПроцедуры
&НаКлиенте
Процедура ПоказатьПрикрееленныеФайлы(Элемент)
	
	ПрикрепленныеФайлыКлиент.ПоказатьПрикрепленныеФайлы(Объект.Заказ, ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьПрикрепленныхФайловНаСервере()
	
	ПрикрепленныеФайлы.Иницилизировать(Объект.Заказ, ЭтаФорма);
	
КонецПроцедуры
&НаКлиенте
Процедура ОбновитьВидимостьПрикрепленныхФайлов() Экспорт
	
	ОбновитьВидимостьПрикрепленныхФайловНаСервере();
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ТоварыСобраноПриИзменении(Элемент)
	стр = Элементы.Товары.ТекущиеДанные;
	ПроверкаКоличества(стр);
	стр.НеНайдено = ?(стр.Количество > стр.Собрано, стр.Количество - стр.Собрано, 0);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНеСобраноПриИзменении(Элемент)
	стр = Элементы.Товары.ТекущиеДанные;
	ПроверкаКоличества(стр);
	стр.НеНайдено = ?(стр.Количество > стр.Собрано, стр.Количество - стр.Собрано, 0);
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаКоличества(стр,Отказ=Ложь)
	
	Если стр.Количество < стр.Собрано + стр.НеНайдено Тогда
		ОбщиеФункции.СообщитьТекст("Собрать не может быть меньше чем сумма собранного и не найденного", "Товары[" + Формат(Товары.Индекс(Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока)), "ЧГ=;ЧН=0") + "].Собрано",ЭтаФорма);
		Отказ = Истина; 
	КонецЕсли;
	
	//Нэти-Начало Гашников Александр 24.05.2017, заявка 74
	//стр.НеНайдено = ?(стр.Количество > стр.Собрано, стр.Количество - стр.Собрано, 0);
	//Нэти-Конец
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Для Каждого стр из Товары Цикл
		ПроверкаКоличества(стр,Отказ);
	КонецЦикла;
	
	Если ПроверитьКонтролеру и НЕ ЗначениеЗаполнено(Контролер) Тогда
		ПоказатьПредупреждение(,"Перед записью сборочного листа VIP контрагента необходимо заполнить контролера"); 
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоказатьРассположениеВчейках(Команда)
	
	ФильтрТовары = Новый Массив;
	Для Каждого Строка ИЗ Элементы.Товары.ВыделенныеСтроки Цикл ФильтрТовары.Добавить(Товары.НайтиПоИдентификатору(Строка).Номенклатура) КонецЦикла;
	
	Если ФильтрТовары.Количество() Тогда
		ОткрытьФорму("Обработка.РабочийСтолСклада.Форма.ВизуальныйТабличныйДокумент", 
		Новый Структура("Склад, Номенклатура", Склад, ФильтрТовары)); КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьНовогоСборочногоЛиста(Команда)
	Если Модифицированность Или Объект.Ссылка.Пустая() Тогда
		ПоказатьПредупреждение(,"Перед печатью сборочного листа необходимо записать документ");
		Возврат;
	КонецЕсли;
	
	Если ПроверитьКонтролеру и НЕ ЗначениеЗаполнено(Контролер) Тогда
		ПоказатьПредупреждение(,"Перед печатью сборочного листа VIP контрагента необходимо заполнить контролера");
		Возврат;
	КонецЕсли;
	
	ПечатьНаСервере.ПолучитьСборочныйЛист(Объект.БизнесПроцесс,,,ПроверитьКонтролеру).Показать();
	ПризнакПечатиНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПризнакПечатиНаСервере()
	ЗаписатьСобытиеФормированияПечатнойФормы(Объект.Ссылка);
	ОбновитьПризнакПечати();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьСобытиеФормированияПечатнойФормы(ОбъектСсылка)
	Задачи.ЗадачаПользователю.ЗаписатьСобытиеФормированияПечатнойФормы(ОбъектСсылка);	
КонецПроцедуры


&НаСервере
Процедура ОбновитьПризнакПечати()
	Элементы.ДекорацияПризнакПечати.Заголовок = Задачи.ЗадачаПользователю.ПолучитьСтрокуПризнакаПечати(Объект.Ссылка);	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтролераПриИзменении(Элемент)
	Если НЕ ПроверитьКонтролеру Тогда
		Контролер = Неопределено;
		Модифицированность = Истина;
		Элементы.Контролер.Доступность = Ложь;
	Иначе
		Контролер = ВернутьКонтролераНаСервере();
		Элементы.Контролер.Доступность = Истина;
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Функция ВернутьКонтролераНаСервере()
	  Возврат Объект.БизнесПроцесс.СборочныйЛист.Контролер;
КонецФункции	

#Область ОбъединениеЗаказов

&НаСервере
Процедура ОбновитьДанныеПоТоварамНаСервере()
	
	ЗаказыКоллекцияСервер.ОбновитьТаблицуТоваров(Товары, Заказы());
	ПодготовитьТаблицу();
	ОбновитьПредставлениеРеквизитовОбъединенныхЭлементов();
	
КонецПроцедуры
&НаКлиенте
Процедура ОбновитьДанныеПоТоварам() Экспорт
	
	ОбновитьДанныеПоТоварамНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗаказыКоллекция.ВыбратьЗаказыДляОбъединения(ЭтаФорма, Новый Структура("ТекстФильтраЗароса, Параметры",
						"И (ЕСТЬNULL(НЕ БизнесПроцесс.СборочныйЛист.Проведен, ИСТИНА) ИЛИ БизнесПроцесс.СборочныйЛист = &СборочныйЛист)",
						Новый Структура("СборочныйЛист", СборочныйЛист)));
КонецПроцедуры

&НаСервере
Функция ПолучитьЗадачуГдеЗаказУжеИспользуетсяВДругомСборочнике()
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка ИЗ Задача.ЗадачаПользователю
	|ГДЕ 
	|	БизнесПроцесс.СборочныйЛист В(
	|		ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка ИЗ Документ.СборочныйЛист.Товары
	|		ГДЕ Ссылка.Проведен И Заказ В(&Заказы) И Ссылка <> &СборочныйЛист И Ссылка.ТипСборочногоЛиста = &ТипФиксация)
	|");
	
	Запрос.УстановитьПараметр("ТипФиксация",	Перечисления.ТипыСборочныхЛистов.ФиксацияЯчеек);
	Запрос.УстановитьПараметр("Заказы",			Заказы());
	Запрос.УстановитьПараметр("СборочныйЛист", 	Объект.БизнесПроцесс.СборочныйЛист);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
	Иначе	Возврат Задачи.ЗадачаПользователю.ПустаяСсылка() КонецЕсли;
	
КонецФункции
&НаКлиенте
Процедура ПроверитьЧтобыЗаказНеОказалсяВДругойЗадаче()

	СсылкаЗадачи = ПолучитьЗадачуГдеЗаказУжеИспользуетсяВДругомСборочнике();
	Если Не СсылкаЗадачи.Пустая() Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ПользовательРешаетПерейтиВДругуюЗадачуИлинет", ЭтаФорма, СсылкаЗадачи), "Этот заказ уже используется в объединении сборончного листа, открыть другую задачу, где используется данный заказ?", РежимДиалогаВопрос.ДаНет); КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ПользовательРешаетПерейтиВДругуюЗадачуИлинет(Ответ, СсылкаЗадачи) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПоказатьЗначение(,СсылкаЗадачи); КонецЕсли;
		
	Закрыть(); 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеРеквизитовОбъединенныхЭлементов()
	
	ТипВнутренний 	= Тип("ДокументСсылка.ВнутреннийЗаказ");
	текКонтры		= Новый Массив;
	текЗаказы 		= Заказы();
	
	Для Каждого текЗаказ Из текЗаказы Цикл Если ТипЗнч(текЗаказ) <> ТипВнутренний И текКонтры.Найти(текЗаказ.Контрагент) = Неопределено Тогда текКонтры.Добавить(текЗаказ.Контрагент) КонецЕсли; КонецЦикла;
	
	ЗаказСтр 		= ЗаказыКоллекция.ПолучитьПредставлениеЗаказов(текЗаказы);
	КонтрагентСтр	= СтрСоединить(текКонтры, "; ");
	
КонецПроцедуры

#КонецОбласти