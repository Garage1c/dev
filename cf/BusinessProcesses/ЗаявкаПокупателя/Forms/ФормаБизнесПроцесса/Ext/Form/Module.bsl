
&НаКлиенте
//Перем СтруктураКолонокТовары Экспорт;
&НаКлиенте
Перем ОрганизацияПоДокументу, КонтрагентПоДокументу;

&НаКлиенте
Перем МассивКомментариев Экспорт;

&НаКлиенте
Перем мСтСтрокаРедактирования;

&НаКлиенте
Перем мВремяОткрытия;

// ДОПОЛНИТЕЛЬНО
&НаСервере
Функция КонтрагентРаботаетСОрганизацией()
	Возврат Справочники.Контрагенты.КонтрагентРаботаетСОрганизацией(Контрагент, Организация);
КонецФункции

// Прочее
&НаСервере
Процедура СуммаБезНДС(Всего, ВсегоНДС)
	ВсегоБезНДС = Всего - ВсегоНДС;
КонецПроцедуры


// ОБОРУДОВАНИЕ

&НаКлиенте
Процедура ДобавитьСТСД(Команда)
	
	МассивНоменклатуры = ВнешнееОборудование.СкачатьДанныеСТерминала();
	Если МассивНоменклатуры <> Неопределено Тогда
		
		Для Каждого Элемент Из МассивНоменклатуры Цикл
		
			НовСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, Элемент);
			
			НовСтрока.Цена = РаботаСНоменклатурой.ПолучитьЦену(	НовСтрока.Номенклатура, 
																	СтруктураКолонокТовары.ТипЦен,
																	СтруктураКолонокТовары.Валюта,
																	НовСтрока.Упаковка);
			//ФункцииФормДокументов.РассчитатьСуммыТабличныхЧастей(НовСтрока, СтруктураКолонокТовары);
			ФункцииФормДокументов.РассчитатьСуммыСтрокиОтЦены(НовСтрока, СтруктураКолонокТовары);
		
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры


#Область Поток

&НаСервере
Функция ИнформацияПоДолгуПолучена()
	
	СтруктураДолга = ПолучитьИзВременногоХранилища(АдресИнфДолга);
	Если СтруктураДолга = Неопределено Тогда
		Возврат Ложь;
		
	Иначе
		
		Если СтруктураДолга.Состояние = Поток.СостояниеВыполнено() Тогда
			
			ИнфСтр1 = СтруктураДолга.Результат.Инф1;
			ИнфСтр2 = СтруктураДолга.Результат.Инф2;
			ИнфСтр3 = СтруктураДолга.Результат.Инф3; 
			
			Элементы.ГруппаИнфоТовара.Видимость = Истина;
			
		ИначеЕсли СтруктураДолга.Состояние = Поток.СостояниеОшибка() Тогда
			
			ОбщиеФункции.СообщитьТекст(СтруктураДолга.стрОшибки); КонецЕсли;
		
		Возврат Истина; КонецЕсли;
	
КонецФункции
&НаКлиенте
Процедура ПолучитьИнфОДолгеПостоянно()
	
	Если ИнформацияПоДолгуПолучена() Тогда
		ОтключитьОбработчикОжидания("ПолучитьИнфОДолгеПостоянно"); КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ПолучитьИнфОДолге()
	
	Если Не ИнформацияПоДолгуПолучена() Тогда
		ПодключитьОбработчикОжидания("ПолучитьИнфОДолгеПостоянно", 1) КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ОбновитьИнформациюОДолге()
	
	//CRMКлиент.ИнформацияОДолгеНачало(ИнфСтр1, ИнфСтр2, ИнфСтр3);
	//
	//АдресИнфДолга = Поток.СобратьИнформациюОДолгеВФоне(Контрагент, УникальныйИдентификатор);
	//ПодключитьОбработчикОжидания("ПолучитьИнфОДолге", 0.1, Истина);
	
	
	  СтруктураДолга = Поток.СобратьИнформациюОДолге(Контрагент);
	  
	  ИнфСтр1 = СтруктураДолга.Инф1;
	  ИнфСтр2 = СтруктураДолга.Инф2;
	  ИнфСтр3 = СтруктураДолга.Инф3; 
	  
КонецПроцедуры
&НаКлиенте
Процедура ИнфСтрОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	CRMКлиент.ОбработатьНавигационнуюСсылку(НавигационнаяСсылка, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область Обновление

&НаСервере
Процедура ПроверитьУстановитьАвтораНаСервере()
	
	Если Автор.Пустая() Тогда
		
		Автор = ПараметрыСеанса.ТекущийПользователь;
		
	КонецЕсли;
	
КонецПроцедуры
&Наклиенте
Процедура ПроверитьУстановитьАвтора_уд()
	
	ПроверитьУстановитьАвтораНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовок()
	
	//Заголовок = ФункцииБизнесПроцессов.ПолучитьЗаголовокБП(Объект.Ссылка);
	Заголовок = БизнесПроцессы.ЗаявкаПокупателя.ПолучитьЗаголовокБП(Объект.Ссылка);
	
КонецПроцедуры
&НаСервере
Функция ТребуетПеремещения()
	
	Если Объект.Заказ.Пустая() Или Объект.Заказ.СпособРазмещенияБезЗаказа Тогда
		
		Возврат  РазмещениеТоваров.Количество() <> РазмещениеТоваров.НайтиСтроки(Новый Структура("Размещение", Склад)).Количество();
		
	Иначе
		Возврат Товары.НайтиСтроки(Новый Структура("Размещение", Справочники.Склады.ПустаяСсылка())).Количество() +
				Товары.НайтиСтроки(Новый Структура("Размещение", Склад)).Количество() <> Товары.Количество(); КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция РазрешеноРедактировать(Стартован,Ссылка)
	
	Возврат Не Стартован ИЛИ
								(	Стартован И 
									ФункцииБизнесПроцессов.СтоитНаТочкеМаршрута(
											Ссылка, 
											БизнесПроцессы.ЗаявкаПокупателя.ТочкиМаршрута.ФормированиеЗаказа));
	
КонецФункции
&НаСервере
Процедура УправлениеВидимостьюДоступностью() Экспорт
	
	СостояниеЗаказа = Заказы.ПолучитьСостояниеЗаказа(Объект.Заказ);
	
	РазрешеноРедактировать = РазрешеноРедактировать(Объект.Стартован,Объект.Ссылка);
											
	ТребуетПеремещения 	= ТребуетПеремещения();
	ЕстьРазмещение 		= Не Товары.НайтиСтроки(Новый Структура("Размещение", Справочники.Склады.ПустаяСсылка())).Количество() = Товары.Количество();
	ЕстьОтгруженные 	= Булево(Товары.НайтиСтроки(Новый Структура("Отгружено", Истина)).Количество());
	
	// ВИДИМОСТЬ РЕКВИЗИТОВ ШАПКИ
	
	Если ВариантДоставкиНов = ПредопределенноеЗначение("Перечисление.ВариантДоставки.СамовывозСНашегоСклада") Тогда
		Элементы.ЗаЧейСчетДоставка.Видимость 	= Ложь;
		Элементы.Грузоперевозчик.Видимость 		= Ложь;		
	Иначе
		Элементы.ЗаЧейСчетДоставка.Видимость 	= Истина;
		Элементы.Грузоперевозчик.Видимость 		= Истина;
	КонецЕсли;
	
	Элементы.Заказ.Видимость 		= Не Объект.Стартован;
	Элементы.ДанныеДляПередачи.Видимость	= Склад.ПередачаТовараМВЗ;
	
	Элементы.Автор.ТолькоПросмотр 	= Не (РольДоступна("ПолныеПрава") ИЛИ РольДоступна("ПолныеПраваВОбласти")) И Не Автор.Пустая(); // И Автор <> ПараметрыСеанса.ТекущийПользователь;
	
	Элементы.НомерЗаказаКлиента.ТолькоПросмотр 	= Не РазрешеноРедактировать;
	Элементы.ДатаЗаказаКлиента.ТолькоПросмотр 	= Не РазрешеноРедактировать;
	Элементы.КонтактноеЛицо.ТолькоПросмотр 		= Не РазрешеноРедактировать;
	Элементы.ДатаАктуальности.ТолькоПросмотр 	= Не РазрешеноРедактировать;
	Элементы.ДатаПоставки.	ТолькоПросмотр 		= Не РазрешеноРедактировать;
	
	Элементы.Организация.	ТолькоПросмотр = Не РазрешеноРедактировать ИЛИ ЕстьОтгруженные;
	Элементы.Контрагент.	ТолькоПросмотр = Не РазрешеноРедактировать ИЛИ ЕстьОтгруженные;
	Элементы.Склад.			ТолькоПросмотр = Не РазрешеноРедактировать;
	Элементы.ТипЦен.		ТолькоПросмотр = Не РазрешеноРедактировать;   
	Элементы.Валюта.		ТолькоПросмотр = Не РазрешеноРедактировать;
	Элементы.СуммаВключаетНДС.	ТолькоПросмотр = Не РазрешеноРедактировать ИЛИ ЕстьОтгруженные;
	Элементы.УчитыватьНДС.		ТолькоПросмотр = Не РазрешеноРедактировать ИЛИ ЕстьОтгруженные;
	Элементы.Грузоотправитель.	ТолькоПросмотр = Не РазрешеноРедактировать;
	Элементы.Грузополучатель.	ТолькоПросмотр = Не РазрешеноРедактировать;
	Элементы.Плательщик.		ТолькоПросмотр = Не РазрешеноРедактировать;
	Элементы.ДисконтнаяКарта.	ТолькоПросмотр = Не РазрешеноРедактировать;
	Элементы.БанковскийСчетОрганизации.	ТолькоПросмотр = Не РазрешеноРедактировать;
	Элементы.БанковскийСчетПартнера.	ТолькоПросмотр = Не РазрешеноРедактировать;
	Элементы.Касса.ТолькоПросмотр 		= Не РазрешеноРедактировать;
	Элементы.Продавец.ТолькоПросмотр 	= Не РазрешеноРедактировать;
	Элементы.Продавец.ТолькоПросмотр 	= Не РазрешеноРедактировать;
	Элементы.МенеджерЗаказа.ТолькоПросмотр = Не РазрешеноРедактировать;
	Элементы.ВариантОплаты.ТолькоПросмотр 					 = Не РазрешеноРедактировать;
	Элементы.ВариантДоставкиНов.ТолькоПросмотр				 = Не РазрешеноРедактировать;
	Элементы.ЗаЧейСчетДоставка.ТолькоПросмотр				 = Не РазрешеноРедактировать;
	Элементы.ВремяДоставкиС.ТолькоПросмотр					 = Не РазрешеноРедактировать;
	Элементы.ВремяДоставкиПо.ТолькоПросмотр					 = Не РазрешеноРедактировать;
	Элементы.АдресДоставкиНов.ТолькоПросмотр				 = Не РазрешеноРедактировать;
	Элементы.ТелефонКонтактногоЛицаДоставки.ТолькоПросмотр	 = Не РазрешеноРедактировать;
	Элементы.ДатаДоставки.ТолькоПросмотр					 = Не РазрешеноРедактировать;
	Элементы.Грузоперевозчик.ТолькоПросмотр					 = Не РазрешеноРедактировать;
	Элементы.ЧастичнаяОтгрузка.ТолькоПросмотр				 = Не РазрешеноРедактировать;
	
	// ВИДИМОСТЬ ТАБЛИЧНОЙ ЧАСТИ
	
	Элементы.Товары.ТолькоПросмотр 				= Не РазрешеноРедактировать;
	Элементы.ГруппаСобраноОтгружено.Видимость 	= СпособРазмещенияБезЗаказа;

	// ВИДИМОСТЬ КОМАНД ОБЪЕКТА

    Элементы.КнопкаСтартоватьИЗакрыть.	Видимость 	= РазрешеноРедактировать И Не ТребуетПеремещения;
	Элементы.КнопкаПереместитьИЗакрыть.	Видимость 	= РазрешеноРедактировать И ТребуетПеремещения;
	Элементы.ПровестиЗаказ.				Видимость	= РазрешеноРедактировать;
	Элементы.КнопкаЗаписать.			Видимость 	= РазрешеноРедактировать;	
	Элементы.КнопкаСохранитьЧерновик.	Видимость 	= Не Объект.Стартован;	
	Элементы.КнопкаОтменитьЗаказ.		Видимость 	= Объект.Стартован И РазрешеноРедактировать;// И Не ЕстьОтгруженные;
	//Элементы.КнопкаОтменитьЧтоОсталось.	Видимость 	= Объект.Стартован И РазрешеноРедактировать И ЕстьОтгруженные;
	
	
	Элементы.КнопкаОтобратьЗаказУЛогиста.Видимость = 
			(СостояниеЗаказа = Перечисления.СостоянияЗаказа.ВОчередиНаСклад ИЛИ СостояниеЗаказа = Перечисления.СостоянияЗаказа.ВОчередиНаСкладПовторно)
			И Заказы.ПользователюРазрешеноРаботатьСЗаказом(Объект.Заказ) И Заказы.МожноПрименитьОленя(Объект.Заказ);
	//Если 	СостояниеЗаказа = Перечисления.СостоянияЗаказа.ВОчередиНаСклад ИЛИ 
	//		СостояниеЗаказа = Перечисления.СостоянияЗаказа.ВОчередиНаСкладПовторно Тогда
	//	Элементы.КнопкаОтобратьЗаказУЛогиста.Видимость 	= Заказы.ПользователюРазрешеноРаботатьСЗаказом(Объект.Заказ);
	//Иначе
	//	Элементы.КнопкаОтобратьЗаказУЛогиста.Видимость 	= Ложь КонецЕсли;
	
	// ВИДИМОСТЬ КОМАНД ТАБЛИЧНОЙ ЧАСТИ
	
	Элементы.КнопкаРазместить.	Видимость	= РазрешеноРедактировать И Товары.Количество();  
	Элементы.КнопкаПодбор.		Видимость 	= РазрешеноРедактировать;
	Элементы.ЗаполнитьРучСкидку.Доступность	= РазрешеноРедактировать И Товары.Количество();
	Элементы.ЗаполнитьСтавкуНДС.Доступность = РазрешеноРедактировать И Товары.Количество();
	Элементы.КнопкаПроверитьНаСоответствиеАссортименту.Видимость = Склад.ПередачаТовараМВЗ;
	
	// ЗАГОЛОВКИ
	
	Элементы.ДекорацияСтатусЗаказа.Заголовок = СостояниеЗаказа;
	
	Элементы.Инициатор.Видимость = Склад.ПередачаТовараМВЗ;
	 Элементы.ОтветственноеЛицо.Видимость = Склад.ПередачаТовараМВЗ;
	 Элементы.ГруппаПоляРозничнойЗаявки.Видимость = НЕ Склад.ПередачаТовараМВЗ;
	 
	 Элементы.ГруппаВариантОтгрузки.Видимость = ПередачаТовара;
	 
 КонецПроцедуры

&НаСервере
Процедура УстановитьСтатусОплатыЗаказа()
	НемецкийЯзык = ПолучитьФункциональнуюОпцию("НемецкийУчет");
	Процент = Заказы.ПолучитьПроцентОплатыЗаказа(Объект.Заказ);
	ЕстьОтгруженные 	= Булево(Товары.НайтиСтроки(Новый Структура("Отгружено", Истина)).Количество());

	Если Не Процент Тогда
		Элементы.ДекорацияНадписьОплаты.Заголовок = ?(Не НемецкийЯзык, "не оплачен", "nicht bezahlt"); //Антон
		Элементы.ДекорацияНадписьОплаты.ЦветТекста = Новый Цвет(?(ЕстьОтгруженные,255,0),0,0);
	ИначеЕсли Процент = 100 Тогда
		Элементы.ДекорацияНадписьОплаты.Заголовок = ?(НЕ НемецкийЯзык, "оплачен", "beglichen"); //Антон
		Элементы.ДекорацияНадписьОплаты.ЦветТекста = Новый Цвет(0,157,0);
	ИначеЕсли Процент > 100 Тогда
		Элементы.ДекорацияНадписьОплаты.Заголовок = ?(Не НемецкийЯзык, "Переплачен", ""); //Антон
		Элементы.ДекорацияНадписьОплаты.ЦветТекста = Новый Цвет(113,0,0);
	Иначе
		Элементы.ДекорацияНадписьОплаты.Заголовок = ?(Не НемецкийЯзык, "оплата", "Zahlungsnachverfolgung") + Формат(Процент,"ЧГ=") + " %";  //Антон
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьРеквизиты()
	
	Если НЕ Объект.Ссылка.Пустая() Тогда 
		
		ФункцииБизнесПроцессов.ЗаполнитьДанные(ЭтаФорма, Объект.Ссылка);
		
	ИначеЕсли Не Объект.Заказ.Пустая() Тогда
		
		ПеречитатьРеквизитыПоЗаказу();
		
		ФункцииФормДокументов.РассчитатьДинамическиеКолонки(
					Товары,
					ФункцииФормДокументов.ПолучитьСтруктуруКолонокТовары(Элементы.Товары, СуммаВключаетНДС, ТипЦен, , , Валюта, УчитыватьНДС, Валюта, СуммаВключаетНДС,,УчитыватьНДС,,Контрагент));
					
	Иначе
		
		ФункцииФормДокументов.ЗаполнитьЗначенияПоУмолчанию(ЭтаФорма, ЭтаФорма.Элементы, , "ПоУмолчанию_Касса");

	КонецЕсли;
	
	//Элементы.ЗадачиПроцесса.Обновить();
	//Элементы.ДокументыПроцесса.Обновить();
	
	
	УправлениеВидимостьюДоступностью();
	
КонецПроцедуры
&НаСервере
Процедура ПеречитатьРеквизитыПоЗаказу()
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 	
	|	Организация, БанковскийСчетОрганизации, БанковскийСчетПартнера, Склад, КонтактноеЛицо, Контрагент, ТипЦен, ВЫБОР КОГДА Грузополучатель В (Неопределено,ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка),Значение(Справочник.Грузополучатели.ПустаяСсылка)) ТОГДА Значение(Справочник.Грузополучатели.ПустаяСсылка) Иначе Грузополучатель Конец КАК Грузополучатель, ВЫБОР КОГДА Грузоотправитель В (Неопределено,ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка),Значение(Справочник.Грузополучатели.ПустаяСсылка)) Тогда Значение(Справочник.Грузополучатели.ПустаяСсылка) Иначе Грузоотправитель КОНЕЦ КАК Грузоотправитель, СуммаВключаетНДС, Валюта, УчитыватьНДС, СрокПоставки, СпособДоставки, ВариантОплаты, ВариантДоставки, Касса, Продавец, РозничнаяЗаявка, ЗакупитьНедостающее,Плательщик, МенеджерЗаказа
	|ИЗ
	|	Документ.ЗаказПокупателя
	|ГДЕ
	|	Ссылка = &Заказ
	|;
	|ВЫБРАТЬ
	|	Номенклатура,
	|	Цена,
	|	Упаковка,
	|	Размещение,
	|	ПроцентРучнойСкидки,
	|	ПроцентАвтоматическойСкидки,
	|	СтавкаНДС,
	|	КоличествоОстаток Количество,
	|	СуммаОстаток Сумма
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(,ЗаказПокупателя = &Заказ)
	|");
	
	Запрос.УстановитьПараметр("Заказ", Объект.Заказ);
	Выгрузка = Запрос.ВыполнитьПакет();
	
	Если Выгрузка.Количество() Тогда

		ЗаполнитьЗначенияСвойств(ЭтаФорма,  Выгрузка[0].Выгрузить()[0]);
		Товары.Загрузить(Выгрузка[1].Выгрузить());
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИтоги(СтруктураКолонокТовары)
	
	ФункцииФормДокументов.ОбновитьПодвал(ЭтаФорма, Элементы, Всего, СтруктураКолонокТовары,,  "ВсегоНДС", ВсегоНДС);
	СуммаБезНДС(Всего, ВсегоНДС);
	
КонецПроцедуры

#КонецОбласти

#Область Типовые_события_формы

Функция СохранитьПорядокСтрок()
	
	// сохраним порядок строк
	
	Возврат РаботаСНоменклатурой.СохранитьПорядокСтрок(Объект.Заказ, Товары.Выгрузить(,"Номенклатура, Количество"));
	
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Прочитаем товары
	
	ПрочитатьРеквизиты();
	
	Если Объект.Ссылка.Пустая() Тогда
		
		
		Если Не Параметры.Контрагент.Пустая() Тогда
			
			Контрагент = Параметры.Контрагент;
			КонтрагентПриИзмененииНаСервере(); 
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			Грузополучатель = ФункцииФормДокументовСервер.ГрузополучательПриИзмененииРеквизита(Контрагент);
			БанковскийСчетГрузополучателя = ФункцииФормДокументовСервер.БанковскийСчетПриИзмененииРеквизита(Грузополучатель);
			МенеджерЗаказа = ФункцииФормДокументовСервер.МенеджерЗаказаПриИзмененииРеквизита(Контрагент,Грузополучатель);
		КонецЕсли;
		
		Если Не Параметры.ТипЦен.Пустая() Тогда 		ТипЦен = Параметры.ТипЦен КонецЕсли;
		Если Не Параметры.Валюта.Пустая() Тогда 		Валюта = Параметры.Валюта КонецЕсли;
		Если Не Параметры.Организация.Пустая() Тогда 	Организация = Параметры.Организация КонецЕсли;
		
		// Загрузим из параметров
		
		Если ЗначениеЗаполнено(Параметры.Товары) Тогда
			
			СтруктураКолонокТовары = ФункцииФормДокументов.ПолучитьСтруктуруКолонокТовары(Элементы.Товары, СуммаВключаетНДС, ТипЦен, , , Валюта, УчитыватьНДС, Валюта, СуммаВключаетНДС,,УчитыватьНДС,,Контрагент, Истина);
			
			Для Каждого Строка Из Параметры.Товары Цикл
				НовСтрока = Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрока, Строка); 
				НовСтрока.Цена = РаботаСНоменклатурой.ПолучитьЦену(НовСтрока.Номенклатура, ТипЦен,Валюта,, Контрагент);
				ФункцииФормДокументов.РассчитатьСуммыСтрокиОтЦены(НовСтрока, СтруктураКолонокТовары, Ложь); КонецЦикла; КонецЕсли; КонецЕсли;
	
	// прикрепленные файлы
	ОбновитьВидимостьПрикрепленныхФайловНаСервере();
	
	// Оповещения
	События.ИницилизироватьСобытияОбъектаНаФорме(ЭтаФорма, Объект.Заказ);
	
	// информация о товаре
	РаботаСНоменклатурой.ДобавитьОперативнуюИнформациюОТоваре(ЭтаФорма);
	
	// комментарии
	ФункцииБизнесПроцессов.ДобавитьРаботуСКомментариями(ЭтаФорма);
	
	// Оператор
	Элементы.Оператор.РежимВыбораИзСписка = Истина;
    Элементы.Оператор.СписокВыбора.ЗагрузитьЗначения(ПолучитьСписокПоРоли(Справочники.Роли.НайтиПоНаименованию("Менеджер  интернет")));
	
	// установим параметр
	
	//ЗадачиПроцесса.Параметры.УстановитьЗначениеПараметра("Ссылка", 		Объект.Ссылка);
	//ДокументыПроцесса.Параметры.УстановитьЗначениеПараметра("Ссылка", 	Объект.Ссылка);
	//ДокументыПроцесса.Параметры.УстановитьЗначениеПараметра("Заказ", 	Объект.Заказ);
	
	
#Область Способ_размещения

	// Установим кто он - старый или новый

	СпособРазмещенияБезЗаказа = Объект.Ссылка.Пустая() Или Объект.Заказ.СпособРазмещенияБезЗаказа;
	
	// Если это старый черновик, тогда очистим размещения и сделаем его новым заказом
	
	Если Не СпособРазмещенияБезЗаказа И Не Объект.Заказ.Проведен Тогда
		СпособРазмещенияБезЗаказа = Истина;
		КонвертацияТипов.ВыполнитьВыражениеВКаждойСтрокеТаблицы(Товары, "Строка.Размещение = Неопределено"); КонецЕсли;
	
	//запрещаем изменять старые заказы
	Если СпособРазмещенияБезЗаказа=Ложь Тогда
		Сообщить("Этот заказа оформлен по старой системе резеревирования. Редактирование невозможно.");
		Элементы.Товары.ТолькоПросмотр=Истина;
	КонецЕсли;	
	
#КонецОбласти

	ДолгПарнера = ?(Объект.Ссылка.Пустая(), 0, ДенежныеСредства.ПолучитьДолгКонтрагента(Контрагент));
	УстановитьСтатусОплатыЗаказа();	

	// Управление видимостью доступностью
	
	УправлениеВидимостьюДоступностью();
	
	Элементы.Касса.Видимость = РозничнаяЗаявка;
	Элементы.Продавец.Видимость = РозничнаяЗаявка;
		
	// Обновим заголовок
	
	УстановитьЗаголовок();
	
	// ФИЛЬТРЫ
	
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Организация"));
	Элементы.БанковскийСчетОрганизации.СвязиПараметровВыбора  = Новый ФиксированныйМассив(НовыйМассив);
	
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Контрагент"));
	Элементы.БанковскийСчетПартнера.СвязиПараметровВыбора = Новый ФиксированныйМассив(НовыйМассив);
	
	ФункцииФормДокументовСервер.УстановитьСвязиГрузополучателя(Объект,Элементы,Новый Структура("Грузополучатель, БанковскийСчетГрузополучателя, Грузоотправитель, БанковскийСчетГрузоотправителя","Контрагент","Грузополучатель","Организация","Грузоотправитель"));
	
	ПустойКонтрагент = Справочники[?(ПолучитьФункциональнуюОпцию("НемецкийУчет"), "Контрагент", "Грузополучатели")].ПустаяСсылка();
	Если НЕ ЗначениеЗаполнено(Грузоотправитель) Тогда Грузоотправитель	= ПустойКонтрагент КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Грузополучатель)  Тогда Грузополучатель	= ПустойКонтрагент КонецЕсли;
	
	ОбновитьСостояниеТоваровНаСервере();
	
	ТрекНомера.Параметры.УстановитьЗначениеПараметра("Заказ",Объект.Заказ);
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.Заказ="";
	КонецЕсли;	
	
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СтруктураКолонокТовары = ФункцииФормДокументов.ПолучитьСтруктуруКолонокТовары(Элементы.Товары, СуммаВключаетНДС, ТипЦен, , , Валюта, УчитыватьНДС, Валюта, СуммаВключаетНДС,,УчитыватьНДС,,Контрагент, Истина, РасчетСкидкиОтЦены);
	
	ФункцииФормДокументов.УстановитьДоступностьКолонокТоваров(Элементы.Товары, СтруктураКолонокТовары);

	РазрешеноРедактировать = РазрешеноРедактировать(Объект.Стартован,Объект.Ссылка);
	
	// комментарии
	ФункцииБизнесПроцессовКлиент.ПолучитьМассивКомментариев(ЭтаФорма, Объект.Ссылка);
	
	// Пересчитаем строки если заказ был добавлен
	
	//ФункцииФормДокументов.РассчитатьДинамическиеКолонки(Товары, СтруктураКолонокТовары);
	ФункцииФормДокументов.ОбновитьПодвал(ЭтаФорма, Элементы, Всего, СтруктураКолонокТовары,,  "ВсегоНДС", ВсегоНДС);
	ВсегоБезНДС = Всего - ВсегоНДС;
	
	ОрганизацияПоДокументу = Организация;
	КонтрагентПоДокументу = Контрагент;
   
  	Список 		= ПолучитьСписокОтветственных(МВЗ);
	Элементы.ОтветственноеЛицо.СписокВыбора.ЗагрузитьЗначения(Список);
	
	Список = ПолучитьСписокМВЗ(ОтветственноеЛицо);
	Элементы.Инициатор.СписокВыбора.ЗагрузитьЗначения(Список);
	
   // Автосохранение
	
	Если РазрешеноРедактировать Тогда 
		Если АвтосохранениеКлиент.ИницилизироватьСохранение(ЭтаФорма) Тогда
			
			ДанныеДляПодбора = "";
			ЗагрузитьДанныеАвтосохранения(ДанныеДляПодбора); 
			Модифицированность = Истина; 
			
			Если Не ПустаяСтрока(ДанныеДляПодбора) Тогда ПодборВыполнить(,Новый Структура("МассивТоваровСтрокой", ДанныеДляПодбора)) КонецЕсли; КонецЕсли; КонецЕсли;
	
	// Внешнее оборудование
	
	ЕстьТСД = ВнешнееОборудование.ЕстьУстановленныйСканер();
	Элементы.ТоварыДобавитьСТСД.Видимость = ЕстьТСД;
	
	//// Запустим обработку потока
	//
	//ПодключитьОбработчикОжидания("ОбработкаПотока", 1);
	
	// Запустим в фоне определения долга
	
	ОбновитьИнформациюОДолге();
	
	// Запустим в фоне определения кнопок автоснятия резервирова
	
	ОбновитьИнформациюОСнятииРезерва();
	
	// Обновим видимость автоматического резервирования
	
	//Если АвтоматическоеСнятиеРезервовВключено() Тогда
	//	Список = СформироватьСписокСроков();
	//	Элементы.ПродлитьРезервНа.СписокВыбора.ЗагрузитьЗначения(Список);
	//КонецЕсли;
	
	
	// ---
	мВремяОткрытия = ТекущаяДата();
	Слежение.Записать("Открытие. Заявка покупателя", "БизнесПроцесс.ЗаявкаПокупателя","ФормаБизнесПроцесса", Объект.Ссылка, "Состояние: " + Элементы.ДекорацияСтатусЗаказа.Заголовок);
	УправлениеВидимостьюДоступностьюНаКлиенте();	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	//ПроверитьУстановитьАвтора();
	//
	//Если НЕ ЕстьПраваСохранитьЗаказ() Тогда
	//	ОбщиеФункции.СообщитьТекст("Вам запрещено вносить изменения в заявку");
	//КонецЕсли;

КонецПроцедуры
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	СохранитьИзменения = Истина;	
	Если ПараметрыЗаписи.Свойство("СохранитьИзменения") Тогда СохранитьИзменения = ПараметрыЗаписи.СохранитьИзменения; КонецЕсли;
	
	// Проверим, если стоит флаг ЗакупитьНедостающие, а товара недостающего нет, обнулим флаг.
	Если Оператор  = Справочники.Пользователи.ПустаяСсылка() Тогда Оператор =  ПараметрыСеанса.ТекущийПользователь; КонецЕсли;
	
	Если СохранитьИзменения Тогда
		
		Если НЕ  СоздатьОбновитьЗаказПокупателя(ТекущийОбъект, Ложь, Истина) Тогда
			Отказ = Истина; КонецЕсли;
			
		КонецЕсли;
	
	//СтартБП = Ложь;
	//ПараметрыЗаписи.Свойство("Старт", СтартБП);
	//Стартует = СтартБП = Истина;
	//
	//// если закакз проводится, размещение должно быть корректным	
	//Если Стартует ИЛИ (НЕ ТекущийОбъект.Заказ.Пустая() И ТекущийОбъект.Заказ.Проведен) Тогда
	//		
	//	ПроверкаРазмещения = Истина; 
	//	Если ПараметрыЗаписи.Свойство("ПроверкаРазмещения") Тогда ПроверкаРазмещения = ПараметрыЗаписи.ПроверкаРазмещения КонецЕсли;
	//	Если ПроверкаРазмещения = Истина Тогда
	//		Если НЕ ПроверкаТаблицыРазмещения() Тогда Отказ = Истина; Возврат; КонецЕсли;
	//	КонецЕсли;
	//	
	//КонецЕсли;
	//
	//БыстраяПродажа = Ложь;
	//ПараметрыЗаписи.Свойство("БыстраяПродажа", БыстраяПродажа);
	//ЭтоБыстраяПродажа 				= БыстраяПродажа = Истина;
	//ТекущийОбъект.ЭтоБыстраяПродажа = ЭтоБыстраяПродажа;
	//
	//Если 	Не ТекущийОбъект.Заказ.Пустая() И
	//		ТекущийОбъект.Заказ.Проведен Тогда // если это старый проведенный заказ тогда делаем на него корректировку

	//		
	//	Если Не СоздатьИПровестиКорректировкуЗаказа() Тогда
	//		Отказ = Истина;
	//		Возврат; КонецЕсли;
	//			
	//Иначе 
	//
	//	НовДокумент = ПолучитьЗаполненныйЗаказПокупателя(Стартует);
	//	Если НЕ НовДокумент.ПроверитьЗаполнение() Тогда
	//		Объект.Заказ = Документы.ЗаказПокупателя.ПустаяСсылка();
	//		Отказ = Истина;
	//		Возврат; КонецЕсли;
	//	
	//	Если Не ПроведенияДокументов.ПровестиДокумент(НовДокумент,,,
	//					?(Стартует, 
	//							РежимЗаписиДокумента.Проведение,
	//							РежимЗаписиДокумента.Запись)) Тогда
	//		Объект.Заказ = Документы.ЗаказПокупателя.ПустаяСсылка();
	//		
	//		Отказ = Истина;
	//		Возврат; КонецЕсли;
	//	
	//	ТекущийОбъект.Заказ = НовДокумент.Ссылка;
	//	
	//КонецЕсли;
	//
	// // если это быстрая продажа - делаем реализацию
	//Если 	ЭтоБыстраяПродажа И 
	//		Не СохранитьИПровестиРеализацию(ТекущийОбъект.Заказ,,Истина) Тогда
	//		
	//	Отказ = Истина;
	//	Возврат; КонецЕсли; 	
	//	
	// Автосохранение
	Если Не Отказ И Объект.Ссылка.Пустая() Тогда АвтосохранениеСервер.УдалитьАвтоСохранение(ИмяФормы, Объект.Ссылка) КонецЕсли;
	
КонецПроцедуры
&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// сохраним порядок строк
	
	Если Не РаботаСНоменклатурой.СохранитьПорядокСтрок(ТекущийОбъект.Заказ, Товары.Выгрузить(,"Номенклатура, Количество")) Тогда
		Отказ = Истина; КонецЕсли;
	
КонецПроцедуры
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	УстановитьСтатусОплатыЗаказа();
КонецПроцедуры
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	СобытияСистемы.ОповеститьОЗаписиБизнесПроцесса(Объект.Ссылка, ЭтаФорма);
КонецПроцедуры
&НаКлиенте
Процедура ПриЗакрытии()
	
	// Автосохранение
	Попытка АвтосохранениеСервер.УдалитьАвтоСохранение(ИмяФормы, Объект.Ссылка);
	Исключение КонецПопытки;
	
	// ---
	//Слежение.Записать("Закрытие. Заявка покупателя", "БизнесПроцесс.ЗаявкаПокупателя","ФормаБизнесПроцесса", Объект.Ссылка,"Время работы " + Строка(ТекущаяДата() - мВремяОткрытия) + " сек. Состояние: " + Элементы.ДекорацияСтатусЗаказа.Заголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если 	Не Модифицированность И
			(	ИмяСобытия = СобытияСистемы.Событие_ЗаписанаЗадача() ИЛИ
				ИмяСобытия = СобытияСистемы.Событие_ЗаписанБизнесПроцесс()
			) Тогда
		
		ПрочитатьРеквизиты();
   	ИначеЕсли
		ИмяСобытия = СобытияСистемы.Событие_ЗаписанКонтрагент() Тогда
		
		КонтрагентПриИзмененииНаСервере(СтруктураКолонокТовары);
		
		ОрганизацияПоДокументу = Организация;
		КонтрагентПоДокументу = Контрагент;
	КонецЕсли;

КонецПроцедуры
&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВыбранноеЗначение <> Неопределено И ВыбранноеЗначение = "ВнешниеДанныеЗагружены" Тогда
		
		УправлениеВидимостьюДоступностью();
	
		ФункцииФормДокументов.ОбновитьПодвал(ЭтаФорма, Элементы, Всего, СтруктураКолонокТовары,,  "ВсегоНДС", ВсегоНДС);
		СуммаБезНДС(Всего, ВсегоНДС);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Запись_заказа_документов

&НаСервере
Функция РабочииТовары_Ст(ПроверятьСобраные = Истина, СтруктураКолонокТовары, ИгнорироватьБезКоличества = Ложь, ФильтрСклад = Неопределено)
	
	//// Параметры:
	//// Если указан ФильтрСклад, тогда будут возвращены только товары для указанного склада
	////
	//
	//Если СпособРазмещенияБезЗаказа Тогда
	//	
	//	// Разобъем строки подошьем вычтем
	//	
	//	ТзТов = Товары.Выгрузить().СкопироватьКолонки();
	//	
	//	Для Каждого Строка Из Товары Цикл 
	//		
	//		// Определим сколько реально количества по данному складу
	//		РазницаВРазмещении 	= ?(ФильтрСклад = Неопределено, 0, Строка.Количество - КонвертацияТипов.ПолучитьСуммуКолонкиПоУсловию(РазмещениеТоваров, "Количество", Новый Структура("Размещение", ФильтрСклад));
	//		СтрокаСтруктура 	= Новый Структура("Количество, КоличествоСобрано, КоличествоОтгружено",
	//									Строка.Количество - РазницаВРазмещении, Строка.КоличествоСобрано - РазницаВРазмещении, Строка.КоличествоОтгружено - РазницаВРазмещении);
	//		
	//		Если СтрокаСтруктура.Количество Тогда
	//		
	//			Отнимаем = СтрокаСтруктура.КоличествоОтгружено + СтрокаСтруктура.КоличествоСобрано * ПроверятьСобраные;
	//			Если Не ИгнорироватьБезКоличества Или СтрокаСтруктура.Количество > Отнимаем Тогда
	//				Если Отнимаем Тогда
	//					
	//					//Если Строка.Количество - Отнимаем Тогда
	//					
	//						// Разобъем таблицу и подсчитаем суммы
	//						
	//						РазбТЗ = ТзТов.СкопироватьКолонки();
	//						СтруктураСвертки = Новый Структура("Сумма, СуммаРучнойСкидки, СуммаНДС, СуммаАвтоматическойСкидки, СуммаБезСкидки, Всего");
	//						ЗаполнитьЗначенияСвойств(СтруктураСвертки, Строка);
	//						
	//						Строка1 = РазбТЗ.Добавить(); ЗаполнитьЗначенияСвойств(Строка1, Строка);
	//						Строка1.Количество = Отнимаем;
	//						ФункцииФормДокументов.РассчитатьСуммыСтрокиОтЦены(Строка1, СтруктураКолонокТовары, Ложь);
	//						
	//						Строка2 = РазбТЗ.Добавить(); ЗаполнитьЗначенияСвойств(Строка2, Строка);
	//						Строка2.Количество = Строка.Количество - Отнимаем;
	//						ФункцииФормДокументов.РассчитатьСуммыСтрокиОтЦены(Строка2, СтруктураКолонокТовары, Ложь);
	//						
	//						КонвертацияТипов.РаздатьКопейкиНуждающимся_Колонкам(РазбТЗ, СтруктураСвертки);
	//						
	//						// Теперь в последнем меньше не копеку а в верхнем больше, возмем нижний
	//						
	//						ЗаполнитьЗначенияСвойств(ТзТов.Добавить(), Строка2); //КонецЕсли;
	//				Иначе
	//					ЗаполнитьЗначенияСвойств(ТзТов.Добавить(), Строка); КонецЕсли; КонецЕсли; КонецЕсли; КонецЦикла;
	//	Возврат ТзТов;
	//Иначе
	//	Возврат КонвертацияТипов.ПолучитьТаблицуИзНайденныхСтрокТаблицыЗначений(
	//			Товары.Выгрузить(), 
	//				?(ПроверятьСобраные, 
	//					Новый Структура("Отгружено, Собрано", Ложь, Ложь),
	//					Новый Структура("Отгружено", Ложь))); КонецЕсли;
	
КонецФункции
&НаСервере                                                                                                                                                            
Функция РабочииТовары(ПроверятьСобраные = Истина, СтруктураКолонокТовары, ИгнорироватьБезКоличества = Ложь, ФильтрСклад = Неопределено, БезДублей = Истина)
	
	// Параметры:
	// Если указан ФильтрСклад, тогда будут возвращены только товары для указанного склада
	//
	
	Если СпособРазмещенияБезЗаказа Тогда
		
		// Разобъем строки подошьем вычтем
		
		ТзТов = Товары.Выгрузить().СкопироватьКолонки();
		
	 //#ВозможностьДублейСтрок
	  ТоварыПром = Товары.Выгрузить();
	  
	  Если БезДублей Тогда
		  ТоварыПром.Свернуть("Номенклатура, НоменклатураУчет, Цена, Упаковка,Размещение,ПроцентРучнойСкидки,СтавкаНДС,ПроцентАвтоматическойСкидки,Отгружено,Собрано,Акция,ВариантРасчета,ТоварНеСогласован,","Количество,Сумма,СуммаРучнойСкидки,СуммаНДС,СуммаАвтоматическойСкидки,Всего,СуммаБезСкидки,КоличествоОтгружено,КоличествоСобрано,КоличествоМинимум");
	  КонецЕсли; 
	  
	  Для Каждого Строка Из ТоварыПром Цикл		
		
		//Для Каждого Строка Из Товары Цикл 
			Если Строка.Количество Тогда
				
				
 			 	//#ВозможностьДублейСтрок - Теперь расчет производим исходя из общего количества
   			 	НеНаЭтомСкладе  = ?(ФильтрСклад = Неопределено, 0, Строка.Количество - КонвертацияТипов.ПолучитьСуммуКолонкиПоУсловию(РазмещениеТоваров, "Количество", Новый Структура("Номенклатура, Размещение", Строка.Номенклатура, ФильтрСклад)));
				Если БезДублей Тогда
					КолВо = Строка.Количество;
				Иначе
					КолВо = ДиалогиСПользователем.ПолучитьКоличествоСДублями(Товары,Строка.Номенклатура);
				КонецЕсли; 
				
				НеНаЭтомСкладе  = ?(ФильтрСклад = Неопределено, 0, КолВо - КонвертацияТипов.ПолучитьСуммуКолонкиПоУсловию(РазмещениеТоваров, "Количество", Новый Структура("Номенклатура, Размещение", Строка.Номенклатура, ФильтрСклад)));
				
				Отнимаем = Строка.КоличествоОтгружено + Строка.КоличествоСобрано * ПроверятьСобраные + НеНаЭтомСкладе;
				
				Если Не ИгнорироватьБезКоличества Или Строка.Количество > Отнимаем Тогда
					Если Отнимаем Тогда
						
						Если ФильтрСклад <> Неопределено Или Строка.Количество - Отнимаем Тогда
						
							// Разобъем таблицу и подсчитаем суммы
							
							РазбТЗ = ТзТов.СкопироватьКолонки();
							СтруктураСвертки = Новый Структура("Сумма, СуммаРучнойСкидки, СуммаНДС, СуммаАвтоматическойСкидки, СуммаБезСкидки, Всего");
							ЗаполнитьЗначенияСвойств(СтруктураСвертки, Строка);
							
							Строка1 = РазбТЗ.Добавить(); ЗаполнитьЗначенияСвойств(Строка1, Строка);
							Строка1.Количество = Отнимаем;
							ФункцииФормДокументов.РассчитатьСуммыСтрокиОтЦены(Строка1, СтруктураКолонокТовары, Ложь);
							
							Строка2 = РазбТЗ.Добавить(); ЗаполнитьЗначенияСвойств(Строка2, Строка);
							Строка2.Количество = Строка.Количество - Отнимаем;
							ФункцииФормДокументов.РассчитатьСуммыСтрокиОтЦены(Строка2, СтруктураКолонокТовары, Ложь);
							
							КонвертацияТипов.РаздатьКопейкиНуждающимся_Колонкам(РазбТЗ, СтруктураСвертки);
							
							// Теперь в последнем меньше не копеку а в верхнем больше, возмем нижний
							
							ЗаполнитьЗначенияСвойств(ТзТов.Добавить(), Строка2); КонецЕсли;
					Иначе
						ЗаполнитьЗначенияСвойств(ТзТов.Добавить(), Строка); КонецЕсли; КонецЕсли; КонецЕсли; КонецЦикла;
		Возврат ТзТов;
	Иначе
		Возврат КонвертацияТипов.ПолучитьТаблицуИзНайденныхСтрокТаблицыЗначений(
				Товары.Выгрузить(), 
					?(ПроверятьСобраные, 
						Новый Структура("Отгружено, Собрано", Ложь, Ложь),
						Новый Структура("Отгружено", Ложь))); КонецЕсли;
КонецФункции
&НаСервере
Процедура СклеитьТаблицыТоваров(ДобТаблица, СтруктураКолонокТовары = Неопределено, ПересчитатьЦену = Истина)
	
	Если СпособРазмещенияБезЗаказа Тогда // по новому
		
		КоличествоВРаботе = Товары.Итог("КоличествоСобрано") + Товары.Итог("КоличествоОтгружено") + Товары.Итог("КоличествоОтменено");
		
		Если КоличествоВРаботе>0 Тогда  //если документ уже в работе, то подбор проводим по старому со сверткой
			
			// Удалим не собранные и не отгруженные
			
			КолСтрок = Товары.Количество();
			Для Ном = 1 По КолСтрок Цикл; Строка = Товары[КолСтрок - Ном]; 
				Если Строка.КоличествоОтгружено Или Строка.КоличествоСобрано Тогда
					Строка.Количество = Строка.КоличествоОтгружено + Строка.КоличествоСобрано;
				Иначе
					Товары.Удалить(Строка);
				КонецЕсли; 
			КонецЦикла;
			
			// Добавим вновь поступившее количество
			
			Для Каждого Строка Из ДобТаблица Цикл
				Если Строка.Количество Тогда
					
					Строки = Товары.НайтиСтроки(Новый Структура("Номенклатура", Строка.Номенклатура));
					Если Строки.Количество() Тогда   // Запомним количество и вернем
						НовСтрока = Строки[0];
						текКоличество = НовСтрока.Количество;
						ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
						НовСтрока.Количество = текКоличество;
						
					Иначе
						НовСтрока = Товары.Добавить();
						ЗаполнитьЗначенияСвойств(НовСтрока, Строка); 
						НовСтрока.Количество = 0;	
					КонецЕсли;
					
					НовСтрока.Количество = НовСтрока.Количество + Строка.Количество;
					НовСтрока.Размещение = ДиалогиСПользователем.ПолучитьПредставлениеРазмещения(НовСтрока.Количество, РазмещениеТоваров.НайтиСтроки(Новый Структура("Номенклатура", НовСтрока.Номенклатура)),,НовСтрока.КоличествоОтгружено,ДиалогиСПользователем.ПолучитьКоличествоСДублями(Товары, Строка.Номенклатура));
					
					// Рассчитаем сумму
					
					Если СтруктураКолонокТовары <> Неопределено Тогда
						ФункцииФормДокументов.РассчитатьСуммыСтрокиОтЦены(Строка, СтруктураКолонокТовары, ПересчитатьЦену); 
					КонецЕсли; 
				КонецЕсли; 
			КонецЦикла;
			
		Иначе//если документ еще не в работе, то подбор по новому, с дублями
			
			// Удалим не собранные и не отгруженные
			
			КолСтрок = Товары.Количество();
			Для Ном = 1 По КолСтрок Цикл; Строка = Товары[КолСтрок - Ном]; 
				Если Строка.КоличествоОтгружено Или Строка.КоличествоСобрано Тогда
					Строка.Количество = Строка.КоличествоОтгружено + Строка.КоличествоСобрано;
				Иначе
					Товары.Удалить(Строка);
				КонецЕсли; 
			КонецЦикла;
			
			// Добавим вновь поступившее количество
			
			Для Каждого Строка Из ДобТаблица Цикл
				Если Строка.Количество Тогда
					
					НовСтрока = Товары.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтрока, Строка); 
					
					// Рассчитаем сумму
					
					Если СтруктураКолонокТовары <> Неопределено Тогда
						ФункцииФормДокументов.РассчитатьСуммыСтрокиОтЦены(НовСтрока, СтруктураКолонокТовары, ПересчитатьЦену); 
					КонецЕсли; 
				КонецЕсли; 
			КонецЦикла;
			
			//Представление размещения получаем после заполнения таблицы, так как необходимо видеть общее количество с учетом дублей строк.
			Для Каждого НовСтрока Из Товары Цикл
				НовСтрока.Размещение = ДиалогиСПользователем.ПолучитьПредставлениеРазмещения(НовСтрока.Количество, РазмещениеТоваров.НайтиСтроки(Новый Структура("Номенклатура", НовСтрока.Номенклатура)),,НовСтрока.КоличествоОтгружено,ДиалогиСПользователем.ПолучитьКоличествоСДублями(Товары, НовСтрока.Номенклатура));
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе // по старому
		
		КонвертацияТипов.УдалитьСтрокиТЗ(Товары, Новый Структура("Отгружено, Собрано", Ложь, Ложь));
		КонвертацияТипов.ДобавитьТаблицуКДругойТаблице(Товары, ДобТаблица);	 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЕстьРазмещение()
	
	Возврат Товары.НайтиСтроки(
				Новый Структура(
						"Размещение", 
						Справочники.Склады.ПустаяСсылка()
								)).Количество() < Товары.Количество();
КонецФункции
&НаСервере
Функция РазрешенаБыстраяПродажа()
	
	Возврат 	Склад.РазрешенаБыстраяПродажа И
				//Не ТребуетПеремещения() И
				КэшируемыеФункции.ПользователюРазрешенаБыстраяПродажа();
	
КонецФункции
&НаКлиенте
Функция ЕстьТоварПодЗаказ(СтруктураКолонокТовары = Неопределено)
	
	Если СпособРазмещенияБезЗаказа Тогда
		ТипЧисло = Тип("Число");
		Для Каждого Строка Из РазмещениеТоваров Цикл Если ТипЗнч(Строка.Размещение) = ТипЧисло Тогда Возврат Истина КонецЕсли; КонецЦикла;
	Иначе
		//ТЗТоваров 	= РабочииТовары(,СтруктураКолонокТовары);   //атата низя така
		Для Каждого Строка Из Товары Цикл Если ТипЗнч(Строка.Размещение) = Тип("Число") Тогда Возврат Истина; КонецЕсли;	КонецЦикла;
	КонецЕсли;	
	
	Возврат Ложь;	
	
КонецФункции

&НаСервере
Функция ПолучитьЗаполненныйЗаказПокупателя(УстановитьТекущуюДату)
	
	Если Объект.Заказ.Пустая() Тогда
			Заказ = Документы.ЗаказПокупателя.СоздатьДокумент();
			Заказ.Дата = ТекущаяДата();
	Иначе	Заказ = Объект.Заказ.ПолучитьОбъект(); КонецЕсли;
	
	Заказ.ДатаАктуальности			= ДатаАктуальности;
	Заказ.НомерЗаказаКлиента 		= НомерЗаказаКлиента;
	Заказ.ДатаЗаказаКлиента 		= ДатаЗаказаКлиента;
	Заказ.ДатаПоставки 				= ДатаПоставки;
	
	Заказ.КонтактноеЛицо			= КонтактноеЛицо;
	Заказ.Контрагент 				= Контрагент;
	Заказ.Склад 					= Склад;
	Заказ.Автор         			= Автор;
	Заказ.ТипЦен 					= ТипЦен;
	Заказ.Валюта 					= Валюта;
	Заказ.Организация   			= Организация;
	Заказ.БанковскийСчетОрганизации = БанковскийСчетОрганизации;
	Заказ.БанковскийСчетПартнера	= БанковскийСчетПартнера;
	Заказ.Грузоотправитель 			= Грузоотправитель;
	Заказ.Грузополучатель 			= Грузополучатель;
	Заказ.СуммаВключаетНДС 			= СуммаВключаетНДС;
	Заказ.УчитыватьНДС 				= УчитыватьНДС;
	Заказ.ДисконтнаяКарта			= ДисконтнаяКарта;
	Заказ.БанковскийСчетГрузополучателя = БанковскийСчетГрузополучателя;
	Заказ.БанковскийСчетГрузоотправителя = БанковскийСчетГрузоотправителя;
	Заказ.МВЗ 						= МВЗ;
	Заказ.ПередачаТовара 			= ПередачаТовара;
	Заказ.ОтветственноеЛицо 		= ОтветственноеЛицо;
	Заказ.СрокПоставки 				= СрокПоставки;
	Заказ.СпособДоставки 			= СпособДоставки;
	Заказ.ВариантОплаты 			= ВариантОплаты;
	Заказ.ВариантДоставки 			= ВариантДоставки;
	Заказ.Касса 					= Касса;
	Заказ.Продавец 					= Продавец;
	Заказ.РозничнаяЗаявка 			= РозничнаяЗаявка;
	Заказ.ЗакупитьНедостающее 		= ЗакупитьНедостающее;
	Заказ.РасчетСкидкиОтЦены 		= РасчетСкидкиОтЦены;
	Заказ.МенеджерЗаказа			= МенеджерЗаказа;
	
	Заказ.Оператор = Оператор;
	
	Заказ.ВариантДоставкиНов				= ВариантДоставкиНов;
	Заказ.ЗаЧейСчетДоставка					= ЗаЧейСчетДоставка;
	Заказ.ДатаДоставки						= ДатаДоставки;
	Заказ.ВремяДоставкиС					= ВремяДоставкиС;
	Заказ.ВремяДоставкиПо					= ВремяДоставкиПо;
	Заказ.АдресДоставкиНов					= АдресДоставкиНов;
	Заказ.Грузоперевозчик			 		= Грузоперевозчик;
	Заказ.ТелефонКонтактногоЛицаДоставки 	= ТелефонКонтактногоЛицаДоставки;
	Заказ.ЧастичнаяОтгрузка					= ЧастичнаяОтгрузка;
	
	//врТовары = РабочииТовары();
	врТовары = Товары.Выгрузить();
	
	// Загрузим таблицу
	
	Заказ.Товары.Загрузить(врТовары);
	Заказ.РазмещениеТоваров.Загрузить(РазмещениеТоваров.Выгрузить());
	
	// Установим посленим дату
	
	Если УстановитьТекущуюДату Тогда Заказ.Дата = ТекущаяДата() КонецЕсли;
	
	Возврат Заказ;
	
КонецФункции

&НаСервере
Функция УстановитьСуществующемуПроцессуБыструюПродажу2_уд()

	Процесс = Объект.Ссылка.ПолучитьОбъект();
	Процесс.ЭтоБыстраяПродажа = Истина;
	
	Попытка
		Процесс.Записать();
	Исключение
		стрОшибки = ОписаниеОшибки();
		ОбщиеФункции.СообщитьТекст("Ошибка записи быстрой продажи
										|" + стрОшибки);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции
&НаСервере
Функция СохранитьИзмененияРеквизитовЗаказа(ЕстьТранзакция = Ложь)
	
	ЗаказСсылка = Объект.Заказ;
	МассивРеквизитовФормы  = ПолучитьРеквизиты();
	МассивРеквизитов = КэшируемыеФункции.ПолучитьРеквизитыДокумента("ЗаказПокупателя");
	
	Изменения = Новый Структура;
	Для Каждого Реквизит Из МассивРеквизитовФормы Цикл
		Элемент = МассивРеквизитов.Найти(Реквизит.Имя);
		Если Элемент <> Неопределено И ЗаказСсылка[Реквизит.Имя] <> ЭтаФорма[Реквизит.Имя] Тогда
			Изменения.Вставить(Реквизит.Имя, ЭтаФорма[Реквизит.Имя]); КонецЕсли; КонецЦикла;
	
	// Новый способ заказа
	Если Не ЗаказСсылка.Проведен И ЗаказСсылка.СпособРазмещенияБезЗаказа Тогда
		Изменения.Вставить("СпособРазмещенияБезЗаказа", Истина); КонецЕсли;
	
	//новая методика: сохраняем изменения ТЧ "товары" в заказе (только для заказов с галкой)
	ИзмененияТЧ = Новый Структура;
	Если ЗаказСсылка.СпособРазмещенияБезЗаказа Тогда
		ИзмененияТЧ.Вставить("Товары",Товары.Выгрузить());
	КонецЕсли;
	
	Если Изменения.Количество() ИЛИ ИзмененияТЧ.Количество()  Тогда
		
		ТранзакцияОткрыта = Ложь;

		Если НЕ ЕстьТранзакция Тогда
			НачатьТранзакцию();
			ТранзакцияОткрыта = Истина;
		КонецЕсли; 
		
		Если Заказы.СохранитьИзмененияРеквизитовЗаказа(ЗаказСсылка, Изменения, ИзмененияТЧ) Тогда
			
			Если ТранзакцияОткрыта Тогда
				ЗафиксироватьТранзакцию(); КонецЕсли;
	
		Иначе
			Если ТранзакцияОткрыта Тогда 
				ОтменитьТранзакцию(); КонецЕсли;
			
			Возврат Ложь; КонецЕсли;
	  	
	КонецЕсли;
	
	Возврат Истина; 
	
КонецФункции
&НаСервере
Функция СоздатьИПровестиКорректировкуЗаказа(ЕстьТранзакция = Ложь)
		
	// Работаем в текущей транзакции или открываем новую
	
	ТранзакцияОткрыта = Ложь;
	Если НЕ ЕстьТранзакция Тогда НачатьТранзакцию(); ТранзакцияОткрыта = Истина; КонецЕсли;

	//сохраним изменившиеся реквизиты
	
	Если НЕ СохранитьИзмененияРеквизитовЗаказа(ЕстьТранзакция ИЛИ ТранзакцияОткрыта) Тогда
		
		Если ТранзакцияОткрыта Тогда ОтменитьТранзакцию(); КонецЕсли;
		Возврат Ложь; КонецЕсли;
	
	
	//Круглов
	//по новой методике измененную ТЧ пишем в ТЧ Заказа, в ТЧ Товары Корректировки ничего не пишем.
	//изменения ТЧ пишем в процедуре СохранитьИзмененияРеквизитовЗаказа
	
	//ТаблицаИзменений = КонвертацияТипов.ПолучитьТаблицуРазницуДокументаИРегистраОстатков(
	//						//РабочииТовары(Ложь, СтруктураКолонокТовары,,Склад), 
	//						РабочииТовары(Ложь, СтруктураКолонокТовары),
	//						"ЗаказыПокупателей",
	//						?(СпособРазмещенияБезЗаказа,
	//							"Номенклатура, Упаковка, Цена, ПроцентРучнойСкидки, ПроцентАвтоматическойСкидки, СтавкаНДС, Акция",
	//							"Номенклатура, Упаковка, Цена, Размещение, ПроцентРучнойСкидки, ПроцентАвтоматическойСкидки, СтавкаНДС, Акция"),
	//						"Количество, Сумма",
	//						Новый Структура("ЗаказПокупателя", Объект.Заказ));
	
	
	
	// В резервах
							
	//ТипСклад 			= Тип("СправочникСсылка.Склады");
	//ТипЗакПоставщику 	= Тип("ДокументСсылка.ЗаказПоставщику");
	
	табРезервов 	= РазмещениеТоваров.Выгрузить();
	
	//ТабРазмещений 	= табРезервов.Скопировать();
	//ТабПоставщиков	= ТабРазмещений.Скопировать();
	
	//Для Каждого Строка Из РазмещениеТоваров Цикл 
	//	Если 		ТипЗнч(Строка.Размещение) = ТипСклад Тогда 			ЗаполнитьЗначенияСвойств(табРезервов.Добавить(), 	Строка);
	//	ИначеЕсли 	ТипЗнч(Строка.Размещение) = ТипЗакПоставщику Тогда	ЗаполнитьЗначенияСвойств(ТабПоставщиков.Добавить(), Строка);
	//	Иначе															ЗаполнитьЗначенияСвойств(ТабРазмещений.Добавить(), 	Строка); КонецЕсли; КонецЦикла;
		
	Если СпособРазмещенияБезЗаказа Тогда
		
		// belova 17.02.2016 ->
		
		//ТабИзмененийРезервов = КонвертацияТипов.ПолучитьТаблицуРазницуДокументаИРегистраОстатков(
		//						табРезервов, "ТоварыВРезерве", "Номенклатура, Размещение", "Количество",
		//						Новый Структура("ДокументРезерва", Объект.Заказ));
		
		// belova <-
		
		// belova 17.02.2016 ->
		
		ТабИзмененийРезервов = Заказы.ПодготовитьРезревыКСписанию(табРезервов, Объект.Заказ);					
		// belova <-				
		
		// Удлим строки которые не относятся к размещению
		
		// belova 17.02.2016 ->

		//ТипЧисло = Тип("Число");
		//КолСтрок = ТабРазмещений.Количество();
		//Для Инд = -КолСтрок + 1 По 0 Цикл Если ТипЗнч(ТабРазмещений[Инд * -1].Размещение) <> ТипЧисло Тогда ТабРазмещений.Удалить(Инд * -1) КонецЕсли; КонецЦикла;
		//	
		//ТабРазмещений.Колонки.Размещение.Имя = "Очередь";
		//ТабИзмененийРазмещений = КонвертацияТипов.ПолучитьТаблицуРазницуДокументаИРегистраОстатков(
		//						ТабРазмещений, "РазмещениеЗаказов", "Номенклатура, Очередь", "Количество",
		//						Новый Структура("Заказ", Объект.Заказ));
		//						
		//ТабИзмененийРазмещений.Колонки.Очередь.Имя = "Размещение";
		//
		//// Заказы поставщикам
		//
		//ТабПоставщиков.Колонки.Размещение.Имя = "ЗаказПоставщику";
		//ТабПоставщиков.Колонки.Добавить("Размещение", Новый ОписаниеТипов("ДокументСсылка." + Объект.Заказ.Метаданные().Имя));
		//КонвертацияТипов.ВыполнитьВыражениеВКаждойСтрокеТаблицы(ТабПоставщиков, "Строка.Размещение = Параметры", Объект.Заказ);
		//ТабИзмененийПоставщиков = КонвертацияТипов.ПолучитьТаблицуРазницуДокументаИРегистраОстатков(
		//						ТабПоставщиков, "РазмещениеЗаказовВПути", "Номенклатура, Размещение, ЗаказПоставщику", "Количество",
		//						Новый Структура("Размещение", Объект.Заказ));
		//ТабИзмененийПоставщиков.Колонки.Размещение.Имя = "УдаленнаяКолонка";
		//ТабИзмененийПоставщиков.Колонки.ЗаказПоставщику.Имя = "Размещение";
		
		// belova <-

	Иначе
		ТабИзмененийРезервов 	= Новый ТаблицаЗначений; 
		// belova 17.02.2016 ->
		//ТабИзмененийРазмещений	= Новый ТаблицаЗначений; 
		//ТабИзмененийПоставщиков	= Новый ТаблицаЗначений;
		// belova <-

	КонецЕсли;
							
	// если есть изменения по таблице товаров, создадим корректировку
	
	Если ТабИзмененийРезервов.Количество() Тогда
		
		// belova 17.02.2016 -> Или ТабИзмененийРазмещений.Количество() Или ТабИзмененийПоставщиков.Количество() Тогда // belova <-
	
		// Шапка
		
		НовДок = Документы.КорректировкаЗаказаПокупателя.СоздатьДокумент();
		НовДок.Заказ 	= Объект.Заказ;
		НовДок.Дата 	= ТекущаяДата();
		
		// Таблица
		
		//по новой методике ничего не грузим в Тч товары
		//а для заказов без галки (старые)
		//НовДок.Товары.Загрузить(ТаблицаИзменений);
		
		// belova 17.02.2016 ->

		НовДок.РазмещениеТоваров.Загрузить(ТабИзмененийРезервов);
		
		// belova <-
		
		// belova 17.02.2016 ->
		
		//Для Каждого Строка Из ТабИзмененийРезервов Цикл ЗаполнитьЗначенияСвойств(НовДок.РазмещениеТоваров.Добавить(), Строка) КонецЦикла;
		//Для Каждого Строка Из ТабИзмененийРазмещений Цикл ЗаполнитьЗначенияСвойств(НовДок.РазмещениеТоваров.Добавить(), Строка) КонецЦикла;
		//Для Каждого Строка Из ТабИзмененийПоставщиков Цикл ЗаполнитьЗначенияСвойств(НовДок.РазмещениеТоваров.Добавить(), Строка) КонецЦикла;
		
		// belova <-
		
		// Проведение
		
		Если НЕ ПроведенияДокументов.ПровестиДокумент(НовДок) Тогда
			Если ТранзакцияОткрыта Тогда 
				ОтменитьТранзакцию(); КонецЕсли;
			
			Возврат Ложь; КонецЕсли;КонецЕсли;	
	
	// если открывали транзакцию, зафиксируем ее
	
	Если ТранзакцияОткрыта Тогда  ЗафиксироватьТранзакцию() КонецЕсли;
	
	Возврат Истина;

КонецФункции
&НаСервере
Функция СохранитьИПровестиРеализацию(текЗаказ, РеализацияСсылка = Неопределено, ЭтоБыстраяПродажа = Ложь, Экстренно = Ложь, БезДублей = Истина)
	
	Если Товары.Количество() Тогда
		
		// Если есть собрано или отгружено тогда мы не проводим такую реализацию
		//Если Товары.Итог("КоличествоСобрано") Или Товары.Итог("КоличествоОтгружено") Тогда
		//	ОбщиеФункции.СообщитьТекст("Когда часть заказа собрана или отгружена, тогда быстро создать реализацию не получиться. Отправляйте опять ""ВСборку""");
		//	Возврат Ложь; КонецЕсли;
		
		
		//Круглов
		//запрет быстрой продажи только если часть собрана. Если часть отгружена - это не является препятствием, чтобы быстро отгрузить остальное.
		Если Товары.Итог("КоличествоСобрано") Тогда
			ОбщиеФункции.СообщитьТекст("Когда часть заказа собрана, тогда быстро создать реализацию не получиться. Отправляйте опять ""ВСборку""");
			Возврат Ложь; 
		КонецЕсли;
		
		
		
		Если Склад.ПередачаТовараМВЗ ИЛИ НЕ МВЗ.Пустая() ИЛИ ПередачаТовара Тогда
			Реализация = Документы.ПередачаТовара.СоздатьДокумент();
			Реализация.МВЗ = МВЗ;
			Если ТипЗнч(текЗаказ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				Реализация.ОтветственноеЛицо = текЗаказ.ОтветственноеЛицо;
			ИначеЕсли
				ТипЗнч(текЗаказ) = Тип("ДокументСсылка.ИнтернетЗаказПокупателя") Тогда
				Реализация.ОтветственноеЛицо = текЗаказ.ПользовательИнтернет.ФизЛицо;
			КонецЕсли;
					
		Иначе
			// Определим источник
	
			Реализация = Документы.РеализацияТоваров.СоздатьДокумент();
			Реализация.ЭтоБыстраяПродажа = ЭтоБыстраяПродажа;
		КонецЕсли;
		
		Реализация.Дата = ТекущаяДата() + 1; // низя чтобы дата заказа совпадал с реализацие иначе долги по оплате не пойдут
		
		// Забъем реквизиты по запросу
		
		ЗаполнитьЗначенияСвойств(Реализация, Заказы.ПолучитьРеквизитыЗаказаДляЗаполненияШапкиДокумента(текЗаказ));
		Если СпособРазмещенияБезЗаказа Тогда Реализация.СниматьРезервИзШапки = Истина КонецЕсли;
				
		// Вытащим товары
		
		ТипыЗаказа = Новый Массив;
		ТипыЗаказа.Добавить(ТипЗнч(текЗаказ));
		
		ТЗТов = РабочииТовары(Ложь, СтруктураКолонокТовары, Истина,?(СпособРазмещенияБезЗаказа, Склад, Неопределено), БезДублей);
		ТЗТов.Колонки.Добавить("Заказ", Новый ОписаниеТипов(ТипыЗаказа));
		ТЗТов.ЗаполнитьЗначения(текЗаказ, "Заказ");
		
		ТЗТов.Колонки.Добавить("НомерГТД", Новый ОписаниеТипов("СправочникСсылка.НомераГТД"));
		Заказы.ПроставитьНомерГТД(ТЗТов);

		Реализация.Товары.Загрузить(ТЗТов);
		
		Если Не Реализация.ПроверитьЗаполнение() Тогда
			Отказ = Истина; Возврат Ложь; КонецЕсли;
		
		// Если розничная заявка

		// Убираем временно контроль оплаты, они там не могут разобраться нужен он или нет
		
		//Если РозничнаяЗаявка Тогда
		//	ПараметрыРозница = Новый Массив;
		//	//Если НЕ Заказы.ЗаказОплачен(текЗаказ, ПараметрыРозница, ТЗТов.Итог("Всего")) Тогда
		//	//	ОбщиеФункции.СообщитьТекст("Заказ не оплачен, поэтому не может быть отгружен");	Возврат Ложь; КонецЕсли; 
		//	
		//	Если ПараметрыРозница <> Неопределено Тогда
		//		Для Каждого Парам ИЗ ПараметрыРозница Цикл НовСтрока = Реализация.ПлатежныеДокументы.Добавить();
		//			НовСтрока.ДокументОплаты = Парам.ДокументОплаты;
		//			НовСтрока.Сумма = Парам.Сумма; КонецЦикла; КонецЕсли;
		//КонецЕсли;
		
		// Установим заказ который еще не может быть прочитан
		
		Реализация.ДополнительныеСвойства.Вставить("ОперативныйЗаказ", текЗаказ);
		
		Если Не ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(Реализация, РежимЗаписиДокумента.Проведение) Тогда
			Возврат Ложь; КонецЕсли;
		
		РеализацияСсылка = Реализация.Ссылка;
		
		//+Андриянов 25.05.2017 устанавливаем статус для заказа и реализации - Доставлен
		Заказы.УстановитьСостояниеЗаказа(текЗаказ, Перечисления.СостоянияЗаказа[?(Заказы.ВсеТоварыОтгружаются(текЗаказ),"Доставлен","ДоставленЧастично")]);
		Заказы.УстановитьСостояниеДокументаОтгрузки(РеализацияСсылка,"Доставлен");
		//-Андриянов
	КонецЕсли;
	РеализацияТоваров = РеализацияСсылка;
		
	Возврат Истина;

КонецФункции
//&НаСервере
//Функция СохранитьКорректировкуИРеализациюОдноТРанзацией(РеализацияСсылка = Неопределено, ЭтоБыстраяПродажа = Ложь)
//	
//	НачатьТранзакцию();
//	
//	Если Не СоздатьИПровестиКорректировкуЗаказа(Истина) Или Не СохранитьИПровестиРеализацию(Объект.Заказ, РеализацияСсылка, ЭтоБыстраяПродажа) Тогда
//		ОтменитьТранзакцию(); Возврат Ложь; КонецЕсли;
//	
//	ЗафиксироватьТранзакцию(); Возврат Истина;
//	
//КонецФункции

&НаСервере
Функция СразуВыполнитьПервуюЗадачу_уд(БыстраяПродажа = Ложь, ВыполнитьЗадачу = Истина)
	
	НачатьТранзакцию();
	
	Если Не Записать(Новый Структура("Старт, БыстраяПродажа", Истина, БыстраяПродажа)) Тогда
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецЕсли;
	
	// Получим итеперь задачу
	
	ЗадачаСсылка = ФункцииБизнесПроцессов.ТекущаяЗадача(Объект.Ссылка);
	
	Если Не ЗначениеЗаполнено(ЗадачаСсылка) Тогда
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецЕсли;
	
	Если ВыполнитьЗадачу Тогда
	
		ЗадачаОбъект = ЗадачаСсылка.ПолучитьОбъект();
		ЗадачаОбъект.Комментарий = Объект.Комментарий;
		
		Попытка
			ЗадачаОбъект.ВыполнитьЗадачу();
		Исключение
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецПопытки; КонецЕсли;

	ЗафиксироватьТранзакцию();
	
	Модифицированность = Ложь;
	
	Возврат Истина;
	
КонецФункции
&НаСервере
Функция ВыполнитьЗадачуФормированияЗаказа_уд(БыстраяПродажа = Ложь, РеализацияСсылка = Неопределено, Экстренно = Ложь)
	
	СсылкаЗадачи = ФункцииБизнесПроцессов.ТекущаяЗадача(Объект.Ссылка);
	
	Если СсылкаЗадачи.ТочкаМаршрута <> БизнесПроцессы.ЗаявкаПокупателя.ТочкиМаршрута.ФормированиеЗаказа Тогда
		
		ОбщиеФункции.СообщитьТекст("Текущая задача не ""формирование заказа"". Выполнить задачу не возможно.");
		Возврат Ложь;
		
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Если БыстраяПродажа И НЕ УстановитьСуществующемуПроцессуБыструюПродажу2_уд() Тогда ОтменитьТранзакцию(); Возврат Ложь; КонецЕсли;
	
	Если Не СоздатьИПровестиКорректировкуЗаказа(Истина) Тогда
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецЕсли;
	
	Если БыстраяПродажа И Не СохранитьИПровестиРеализацию(Объект.Заказ, РеализацияСсылка, Истина, Экстренно) Тогда ОтменитьТранзакцию();	Возврат Ложь;
	КонецЕсли;
	
	ЗадачаОбъект = СсылкаЗадачи.ПолучитьОбъект();
	ЗадачаОбъект.Комментарий = Объект.Комментарий;
	
	Попытка
		ЗадачаОбъект.ВыполнитьЗадачу();
	Исключение
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
	Модифицированность = Ложь;
	Возврат Истина;
	
КонецФункции


Функция СоздатьОбновитьЗаказПокупателя(ТекОбъект = Неопределено, Стартует = Ложь, ЭтоТранзакцияЗаписи = Ложь, НовыйДокумент = Ложь, ЕстьТранзакция = Ложь)
	
	// заполняем поле Автор
	
	ПроверитьУстановитьАвтораНаСервере();
	
	// проверяем адресацию
	
	Если НЕ ЕстьПраваСохранитьЗаказ() Тогда
		
		ОбщиеФункции.СообщитьТекст("Вам запрещено вносить изменения в заявку");
		Возврат Ложь; КонецЕсли;
	
		
	// если закаказ проводится, размещение должно быть корректным	
	
	Если Стартует ИЛИ (НЕ Объект.Заказ.Пустая() И Объект.Заказ.Проведен) Тогда
			
		Если НЕ ПроверкаТаблицыРазмещения() Тогда 			
			
			Возврат Ложь; КонецЕсли;
		
	КонецЕсли;
	
	
	Если НЕ ЭтоТранзакцияЗаписи Тогда НачатьТранзакцию(); ЕстьТранзакция = Истина; КонецЕсли;	
	
	
	Если 	Не Объект.Заказ.Пустая() И
			Объект.Заказ.Проведен Тогда // если это старый проведенный заказ тогда делаем на него корректировку

		Если Не СоздатьИПровестиКорректировкуЗаказа() Тогда
			
			Возврат Ложь; КонецЕсли;

				
	Иначе 
	
		НовДокумент = ПолучитьЗаполненныйЗаказПокупателя(Стартует);
		Если НЕ НовДокумент.ПроверитьЗаполнение() Тогда
			
			Возврат Ложь; КонецЕсли;

		Если Не ПроведенияДокументов.ПровестиДокумент(НовДокумент,,,
						?(Стартует, 
								РежимЗаписиДокумента.Проведение,
								РежимЗаписиДокумента.Запись)) Тогда
			
			Возврат Ложь; КонецЕсли;
		
		Если ТекОбъект.Заказ.Пустая() Тогда ТекОбъект.Заказ = НовДокумент.Ссылка; НовыйДокумент = Истина; КонецЕсли;
		Если ЗначениеЗаполнено(ТекОбъект.Комментарий) Тогда ФункцииБизнесПроцессов.ЗаписатьКомментарийВРегистр(ТекОбъект.Заказ,ТекОбъект.Комментарий); КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Универсальная функция сохранения изменения в заявке (великая и мудрая)
//
// БыстраяПродажа 	- если флаг Истина - формируется реализация товаров и сохраняется признак БыстраяПродажа в Бизнес-Процессе
// Старт 			- если флаг Истина - выполняется старт Бизнес-Процесса и формирование документа ЗаказПокупателя
// ВыполнитьЗадачу 	- если флаг Истина - выполняется текущая задача ФормированиеЗаказа, БизнесПроцесс переходит на новую точку маршрута
Функция СохранитьИзмененияЗаявки(БыстраяПродажа = Ложь, Старт = Ложь, ВыполнитьЗадачу = Ложь, БезДублей = Истина)
	Если НЕ ЗначениеЗаполнено(МенеджерЗаказа) Тогда ОбщиеФункции.СообщитьТекст("Не выбран Менеджер заказа. Выберите менеджера заказа для продолжения."); Возврат Ложь; КонецЕсли;
	
	Стартует 			= Старт = Истина;
	ЭтоБыстраяПродажа 	= БыстраяПродажа = Истина;
	Объект.ЭтоБыстраяПродажа = ЭтоБыстраяПродажа;
	
	НовыйДокумент	= Ложь;	
	ЕстьТранзакция 	= Ложь;
	
	Если НЕ СоздатьОбновитьЗаказПокупателя(Объект, Стартует,, НовыйДокумент, ЕстьТранзакция) Тогда
		
		Если ЕстьТранзакция Тогда  ОтменитьТранзакцию(); КонецЕсли; Возврат Ложь;  КОнецЕсли;
	
	
	// сохраним БП если это БыстраяПродажа или Старт БП и если это новый БП и если мы не находимся в Транзакции записи
	// флаг СохранитьИзменения - строго содержит значение ЛОЖЬ, иначе будет повторно записан заказ
	
	
	Если Объект.Ссылка.Пустая() ИЛИ ЭтоБыстраяПродажа ИЛИ Стартует ИЛИ НовыйДокумент Тогда
		
		Записать(Новый Структура("Старт, СохранитьИзменения", Стартует, Ложь)); КонецЕсли;

	
	 // если это быстрая продажа - делаем реализацию
	Если 	ЭтоБыстраяПродажа И 
			Не СохранитьИПровестиРеализацию(Объект.Заказ,,Истина,, БезДублей) Тогда
			
			ОтменитьТранзакцию();
			Возврат Ложь; КонецЕсли;
		
	Если ВыполнитьЗадачу Тогда
	
	// убедимся что текущая задача - формирование заказа
	
	Если НЕ Объект.Ссылка.Пустая() И Объект.Стартован Тогда
	
		СсылкаЗадачи = ФункцииБизнесПроцессов.ТекущаяЗадача(Объект.Ссылка);
		
		Если СсылкаЗадачи.ТочкаМаршрута <> БизнесПроцессы.ЗаявкаПокупателя.ТочкиМаршрута.ФормированиеЗаказа Тогда
			
			ОбщиеФункции.СообщитьТекст("Текущая задача не ""формирование заказа"". Выполнить задачу не возможно.");
			Возврат Ложь;
			
		КонецЕсли; КонецЕсли;
		
		ЗадачаОбъект = СсылкаЗадачи.ПолучитьОбъект();
		ЗадачаОбъект.Комментарий = Объект.Комментарий;
		
		Попытка
			ЗадачаОбъект.ВыполнитьЗадачу();
		Исключение
			Сообщить(ОписаниеОшибки());
			ОтменитьТранзакцию();
			Возврат Ложь;

		КонецПопытки;
		
	КонецЕсли;

	ЗафиксироватьТранзакцию();
	
	Модифицированность = Ложь;
	Возврат Истина;
		
КонецФункции

&НаКлиенте
Функция ПроверитьРазмещениеВсегоТовара()
	
	Если Не РазмещениеТоваров.Количество() Тогда
		ПоказатьПредупреждение(,"Нет размещения...");
		Возврат Ложь;
	Иначе
		Возврат Истина; КонецЕсли;
	
	//ТипСтрока	= Тип("Строка");
	//Отказ 		= Ложь;
	
	//Инд = -1;
	//Для Каждого Строка Из Товары Цикл Инд = Инд + 1;
	//	Если Не ЗначениеЗаполнено(Строка.Размещение) Тогда
	//		
	//		Отказ = Истина;
	//		ОбщиеФункции.СообщитьТекст("Нет размещения", "Товары[" + Инд + "].Размещение", Объект);
	//		
	//	ИначеЕсли 	ТипЗнч(Строка.Размещение) = ТипСтрока И 
	//			(	Найти(Строка.Размещение, "?") Или Найти(Строка.Размещение, "ребор")) Тогда
	//		
	//		Отказ = Истина; ОбщиеФункции.СообщитьТекст("Ошибка размещения
	//			|" + Строка.Номенклатура, "Товары[" + Инд + "].Размещение", Объект); КонецЕсли; КонецЦикла;
	
	//Возврат Не Отказ;
	
КонецФункции


&НаСервере
Функция ПроверкаТаблицыРазмещения()
	// Проверим корректность размещения складов
	
	Если Не ДиалогиСПользователямиСервер.РазрешеноДанноеРазмещениеПользователю(Склад, Товары) Тогда  Возврат Ложь; КонецЕсли;
	
	// Очистим левые размещения
	ДиалогиСПользователем.ОчиститьНеактуальноеРазмещение(Товары, РазмещениеТоваров);
	
	// Проверим нет ли перебора по размещению
	Если НЕ Заказы.ПроверитьНаПереборВРазмещении(Товары, РазмещениеТоваров) Тогда Возврат Ложь; КонецЕсли;
	
	
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура ПровестиЗаказИЗакрыть(Команда, ПроеверитьНулевыеЦены = Истина)
	//+Андриянов 13.06.2017 Проверяем размещение товаров, которые нельзя заказывать, в очереди
	Если ПроверитьРазмещение() Тогда Возврат; КонецЕсли;
	//-Андриянов
	
	//ПроверитьУстановитьАвтора();
	
	// Спросим вариант
	
	МожетБыстроПродавать 	= РазрешенаБыстраяПродажа();
	ЕстьПеремещения 		= ТребуетПеремещения();
	ЕстьВТекСкладе 			= ?(СпособРазмещенияБезЗаказа, 
										Булево(РазмещениеТоваров.НайтиСтроки(Новый Структура("Размещение", Склад)).Количество()),
										Булево(Товары.НайтиСтроки(Новый Структура("Отгружено, Размещение", Ложь, Склад)).Количество()));
	БыстраяПродажа 	= Ложь;
	ИмяДиалога 		= ?(МожетБыстроПродавать И ЕстьВТекСкладе, ?(ЕстьПеремещения, "ДиалогОтгрузкиСЧастичнойРеализацией", "ДиалогОтгрузкиСРеализацией"), "ДиалогОтгрузки");
	
	ПараметрыФормы = Новый Структура;
	
	ЕстьТоварПодЗаказ =  ЕстьТоварПодЗаказ(СтруктураКолонокТовары);
	
	// если недостающих позиций уже нет, то обнулим флаг, он больше не нужен
	Если ЗакупитьНедостающее И НЕ ЕстьТоварПодЗаказ Тогда ЗакупитьНедостающее = Ложь; КонецЕсли;
	
	// если есть недостающие позиции и флаг обнулен, тогда спросим в диалоге
	Если ЕстьТоварПодЗаказ И НЕ ЗакупитьНедостающее Тогда ПараметрыФормы.Вставить("ЕстьТоварПодЗаказ", Истина); КонецЕсли;
		
	ПараметрыФормы.Вставить("ЗакупитьНедостающее", ЗакупитьНедостающее);
	ПараметрыФормы.Вставить("ПередачаТовара", ПередачаТовара);
	ПараметрыФормы.Вставить("Заказ", Объект.Заказ);
	
	ОткрытьФорму("БизнесПроцесс.ЗаявкаПокупателя.Форма." + ИмяДиалога, ПараметрыФормы,ЭтаФорма,,,,Новый ОписаниеОповещения("ПослеВыбораВариантаПроведения", ЭтаФорма, Новый Структура("ЕстьТоварПодЗаказ", ЕстьТоварПодЗаказ)), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры
&НаКлиенте
Процедура ПослеВыбораВариантаПроведения(Результат, ПараметрыОповещения) Экспорт
	
	Если СтрНачинаетсяС(Результат,"ВСборку")
		или Результат = "Продать" 
		или Результат = "СохранитьИЗакупить" Тогда
		
		Если СтрНачинаетсяС(Результат,"ВСборку") Тогда
			Если НЕ ПроверитьРеквизиты() Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;	
		
		//Если 	СтрНачинаетсяС(Результат,"ВСборку") И
		//		Не ПроверитьРазмещениеВсегоТовара() Тогда 
		//	Возврат; КонецЕсли;
		
		НеоптимальныеРазмещения = НеоптимальныеРазмещения(ЭтаФорма.РазмещениеТоваров,ЭтаФорма.Склад); 
		
		Если  НеоптимальныеРазмещения.Количество() Тогда
			Для Каждого Элем Из НеоптимальныеРазмещения Цикл
				Сообщить(Элем);
			КонецЦикла;
			
			ПараметрыОповещения.Вставить("НеоптимальныеРазмещения",НеоптимальныеРазмещения);
			ПараметрыОповещения.Вставить("ВариантПроведения",Результат);
			Оповещ=Новый ОписаниеОповещения("ОбработкаВопросаОптимальностиРазмещения",ЭтаФорма,ПараметрыОповещения);
			ПоказатьВопрос(Оповещ,"Внимание! Размещение товара не оптимально. Вернуться к работе с заказом?",РежимДиалогаВопрос.ДаНет);
			Возврат
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработкаВыбораВариантаПроведения(Результат, ПараметрыОповещения);
	
КонецПроцедуры	
&НаКлиенте
Функция ПроверитьРеквизиты()
	
	ПроверкаРеквизитов = Истина;
	
	Если НЕ ЗначениеЗаполнено(ВариантДоставкиНов) Тогда
		ОбщиеФункции.СообщитьТекст("Не заполнен вариант доставки","ВариантДоставкиНов"); ПроверкаРеквизитов = Ложь; 
	Иначе
		
		Если ВариантДоставкиНов=ПредопределенноеЗначение("Перечисление.ВариантДоставки.ДоставкаДоКлиента") Тогда
			
			Если НЕ ЗначениеЗаполнено(ЗаЧейСчетДоставка) Тогда
				ОбщиеФункции.СообщитьТекст("Не заполнено за чей счет доставка","ЗаЧейСчетДоставка"); ПроверкаРеквизитов = Ложь; КонецЕсли; 
			
			Если НЕ ЗначениеЗаполнено(Грузоперевозчик) Тогда
				ОбщиеФункции.СообщитьТекст("Не заполнен грузоперевозчик","Грузоперевозчик"); ПроверкаРеквизитов = Ложь; КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(АдресДоставкиНов) Тогда
				ОбщиеФункции.СообщитьТекст("Не заполнен адрес доставки","АдресДоставкиНов"); ПроверкаРеквизитов = Ложь; КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(КонтактноеЛицо) Тогда
				ОбщиеФункции.СообщитьТекст("Не заполнено контактное лицо","КонтактноеЛицо"); ПроверкаРеквизитов = Ложь; КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ТелефонКонтактногоЛицаДоставки) Тогда
				ОбщиеФункции.СообщитьТекст("Не заполнен телефон контактного лица","ТелефонКонтактногоЛицаДоставки"); ПроверкаРеквизитов = Ложь; КонецЕсли;
				
		ИначеЕсли ВариантДоставкиНов=ПредопределенноеЗначение("Перечисление.ВариантДоставки.ДоставкаДоГрузоперевозчика") Тогда
			
			Если НЕ ЗначениеЗаполнено(ЗаЧейСчетДоставка) Тогда
				ОбщиеФункции.СообщитьТекст("Не заполнено за чей счет доставка","ЗаЧейСчетДоставка"); ПроверкаРеквизитов = Ложь; КонецЕсли;
				
			Если НЕ ЗначениеЗаполнено(АдресДоставкиНов) Тогда
				ОбщиеФункции.СообщитьТекст("Не заполнен адрес доставки","АдресДоставкиНов"); ПроверкаРеквизитов = Ложь; КонецЕсли;

			
			Если НЕ ЗначениеЗаполнено(Грузоперевозчик) Тогда
				ОбщиеФункции.СообщитьТекст("Не заполнен грузоперевозчик","Грузоперевозчик"); ПроверкаРеквизитов = Ложь; КонецЕсли;
			
		ИначеЕсли ВариантДоставкиНов=ПредопределенноеЗначение("Перечисление.ВариантДоставки.ДоставкаДоКлиентаНашимиСилами") Тогда
			
			Если НЕ ЗначениеЗаполнено(ЗаЧейСчетДоставка) Тогда
				ОбщиеФункции.СообщитьТекст("Не заполнено за чей счет доставка","ЗаЧейСчетДоставка"); ПроверкаРеквизитов = Ложь; КонецЕсли;
				
			Если НЕ ЗначениеЗаполнено(ДатаДоставки) Тогда
				ОбщиеФункции.СообщитьТекст("Не заполнена дата доставки","ДатаДоставки"); ПроверкаРеквизитов = Ложь; КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(АдресДоставкиНов) Тогда
				ОбщиеФункции.СообщитьТекст("Не заполнен адрес доставки","АдресДоставкиНов"); ПроверкаРеквизитов = Ложь; КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(КонтактноеЛицо) Тогда
				ОбщиеФункции.СообщитьТекст("Не заполнено контактное лицо","КонтактноеЛицо"); ПроверкаРеквизитов = Ложь; КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ТелефонКонтактногоЛицаДоставки) Тогда
				ОбщиеФункции.СообщитьТекст("Не заполнен телефон контактного лица","ТелефонКонтактногоЛицаДоставки"); ПроверкаРеквизитов = Ложь; КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПроверкаРеквизитов;
	
КонецФункции	

//+Андриянов 13.06.2017 проверяем размещение
&НаКлиенте
Функция ПроверитьРазмещение()
	ТоварыБольшеНеПоставляются = Товары.НайтиСтроки(Новый Структура("БольшеНеПоставляется",Истина));
	Если ТоварыБольшеНеПоставляются.Количество()>0 Тогда
		Для Каждого ТекСтрока Из ТоварыБольшеНеПоставляются Цикл
			ТекРазмещение = РазмещениеТоваров.НайтиСтроки(Новый Структура("Номенклатура",ТекСтрока.Номенклатура));
			Для Каждого ТекСтрокаРазмещение Из ТекРазмещение Цикл
				Если ТипЗнч(ТекСтрокаРазмещение.Размещение) = Тип("Число") Тогда
					ПоказатьПредупреждение(,"Товар """+ТекСтрока.Номенклатура+""" больше не поставляется, но размещён в очереди. Такой заказ проводить нельзя.");
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	Возврат Ложь;
КонецФункции
//-Андриянов

&НаСервере
Функция НеоптимальныеРазмещения(Знач Товары,Знач Склад)
	Возврат Заказы.НеоптимальныеРазмещения(Товары.Выгрузить(),Склад);
КонецФункции	


&НаКлиенте
Процедура ОбработкаВопросаОптимальностиРазмещения(ОтветНаВопрос, ПараметрыОповещения) Экспорт
	Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
		ОбработкаВыбораВариантаПроведения(ПараметрыОповещения.ВариантПроведения,ПараметрыОповещения);
	Иначе
		//продолжаем работу с заявкой
	КонецЕсли;	
КонецПроцедуры	

&НаКлиенте
Процедура ИВотЧтоНамОтветилиПроНулевыеЦены(Ответ, ПараметрыОповещения) Экспорт
	
	Если Ответ = Истина Тогда // это пофигизм
		ПослеВыбораВариантаПроведения(ПараметрыОповещения.ИмяРезультат + "СНулевымиЦенами", ПараметрыОповещения);
		
	ИначеЕсли Ответ <> Неопределено Тогда // это товар
		
		Элементы.Товары.ТекущаяСтрока = Товары.Индекс(Товары.НайтиСтроки(Новый Структура("Номенклатура", Ответ))[0]); КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ОбработкаВыбораВариантаПроведения(Результат, ПараметрыОповещения) Экспорт
	
	// Проверим есть или нет нулевых цен если это не внутренний заказ
	
	Если СтрЗаканчиваетсяНа(Результат, "СНулевымиЦенами") Тогда 
		Результат = Лев(Результат, СтрНайти(Результат, "СНулевымиЦенами") - 1);
		
	ИначеЕсли 	Результат = "ВСборку" Или 
				Результат = "Продать" Или 
				Результат = "ПродатьЧастично" Или 
				Результат = "Экстренно" Тогда  // это какие чтуки будут вызывать проверку нулевых цен
	
		Строки = Товары.НайтиСтроки(Новый Структура("Цена", 0));
		Если Строки.Количество() Тогда
					
			Массив = Новый Массив;
			Для Каждого Строка Из Строки Цикл Массив.Добавить(Новый Структура("Товар", Строка.Номенклатура)) КонецЦикла;
			
			ПараметрыОповещения.Вставить("ИмяРезультат", Результат);
			ОткрытьФорму("БизнесПроцесс.ЗаявкаПокупателя.Форма.УВасНулевыеЦены",Новый Структура("Товары", Массив),ЭтаФорма,,,,Новый ОписаниеОповещения("ИВотЧтоНамОтветилиПроНулевыеЦены", ЭтаФорма, ПараметрыОповещения));
			Возврат; КонецЕсли; 
		
		// Проверим стоп продажи
		
		Если РаботаСНоменклатуройКлиент.ЕстьСтопПродажи(Товары) Тогда Возврат КонецЕсли; КонецЕсли;
	
	//Если НЕ ПроверкаТаблицыРазмещения() Тогда Возврат; КонецЕсли;
	
	//РеализацияСсылка = Неопределено;
	
	БыстраяПродажа 	= Ложь;
	Старт 			= НЕ Объект.Стартован;
	ВыполнитьЗадачу = Ложь;
	ЗакрытьЗаявку 	= Ложь;
	БезДублей 		= Истина;
	ЗакрытьБезВопросов = Ложь;
	
	Если Результат = Неопределено Тогда 
		
		Возврат; 
				
	ИначеЕсли Результат = "Экстренно" Тогда  Возврат;
			
	ИначеЕсли 
		Результат = "Продать" Тогда   // Продать - Это быстрая продажа
		
		Если РаботаСНоменклатуройКлиент.ЕстьСтопПродажи(Товары) Тогда Возврат КонецЕсли;
		
		// Выполним задачу и установим флаг что это быстрая продажа БП и закроем его
		
		БыстраяПродажа 	= Истина;
		ВыполнитьЗадачу = Истина;
		ЗакрытьЗаявку	= Истина;
		БезДублей 		= Ложь;
		
		//Если СохранитьИзмененияЗаявки(Объект, Истина, НЕ Объект.Стартован, Истина) Тогда
		//		ОткрытьФорму(Заказы.ПолучитьИмяФормы(РеализацияТоваров), Новый Структура("Ключ", РеализацияТоваров)); Закрыть(); КонецЕсли;			
		//	
		
		//Если Не Объект.Стартован Тогда			
		//	Если СразуВыполнитьПервуюЗадачу(Истина) Тогда Закрыть();КонецЕсли;
		//	
		//Иначе 
		//		Если  ВыполнитьЗадачуФормированияЗаказа(Истина, РеализацияСсылка) Тогда
		//			ОткрытьФорму(Заказы.ПолучитьИмяФормы(РеализацияСсылка), Новый Структура("Ключ", РеализацияСсылка)); Закрыть(); КонецЕсли; КонецЕсли;
		//
		//Возврат;		
		
	ИначеЕсли 
		Результат = "ПродатьЧастично" Тогда // Частично быстрая продажа
		
		Если РаботаСНоменклатуройКлиент.ЕстьСтопПродажи(Товары) Тогда Возврат КонецЕсли;
		
		БыстраяПродажа 	= Истина;
		ВыполнитьЗадачу = Ложь;
		ЗакрытьЗаявку	= Истина;
		
		ЗакрытьБезВопросов = Истина; //после частичной быстрой продажи форма бизнес-процесса не обновляется, из за этого дальнейший процесс сборки будет некорректным. Поэтому принудительно закрываем форму.
		
		
		// Сформируем реализацию на то что есть и не будем выполнять задачу
		// Перед этим сохраним заказ и корректировку если нужны изменения
		
		//Если Не Объект.Стартован Тогда			
		//	Если Не СразуВыполнитьПервуюЗадачу(Истина, Ложь) Тогда 
		//		Возврат; КонецЕсли;КонецЕсли;
		
		//Если Не СохранитьКорректировкуИРеализациюОдноТРанзацией(РеализацияСсылка, Истина) Тогда 
		//	Возврат КонецЕсли;
		//
		
		
		//Если СохранитьИзмененияЗаявки(Истина, НЕ Объект.Стартован, Ложь) Тогда
		//		ОткрытьФорму(Заказы.ПолучитьИмяФормы(РеализацияТоваров), Новый Структура("Ключ", РеализацияТоваров)); Возврат; КонецЕсли;			
			
				
	ИначеЕсли Результат = "СохранитьИЗакупить" Тогда
		ЗакупитьНедостающее = Истина;	
		
	Иначе // Отправим в сборку логистам
		
		ДопТекст = ?(Результат = "ВСборку", "Передать логисту для сбора?
											|(логист зарезервирует товар сам)","Продолжить?
											|(зарезервировать можно будет позже)");
											
		//Если Не ПроверитьРазмещениеВсегоТовара() Тогда Отказ = Истина; Возврат;КонецЕсли;
		
		
		Если Результат = "ВСборку" Тогда
			
			
			БыстраяПродажа 	= Ложь;
			ВыполнитьЗадачу = Истина;
			ЗакрытьЗаявку	= Истина;

			
			// если товар отправлен в сборку и там есть недостающие позиции, поставим флаг
			Если НЕ ЗакупитьНедостающее И ПараметрыОповещения.ЕстьТоварПодЗаказ Тогда ЗакупитьНедостающее = Истина; КонецЕсли;	
			
			// Сказал записать и в сборку сразу на склад
			
			//Если СохранитьИзмененияЗаявки(Ложь, НЕ Объект.Стартован, Истина) Тогда
			//	 Если Не СохранитьПорядокСтрок() Тогда Возврат; КонецЕсли; Закрыть();КонецЕсли;
			
			//Если Не Объект.Стартован Тогда
			//	Если СразуВыполнитьПервуюЗадачу() Тогда Модифицированность = Ложь; Закрыть();КонецЕсли;
			//	
			//Иначе
			//	Если ВыполнитьЗадачуФормированияЗаказа() Тогда Модифицированность = Ложь; Если Не СохранитьПорядокСтрок() Тогда Возврат; КонецЕсли; Закрыть();КонецЕсли;КонецЕсли;
			//	
			//Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Запустим если новый или просто запишем если старый, проверку размещения выключим, т.к. делали вначале функции
	//
	//Если Не Объект.Стартован и Не Записать(Новый Структура("Старт, ПроверкаРазмещения", Истина, Ложь)) Тогда 
	//	Возврат;
	//ИначеЕсли Не Записать(Новый Структура("ПроверкаРазмещения", Ложь)) Тогда 
	//	Возврат;КонецЕсли;
	
	
	Если БыстраяПродажа ИЛИ Результат = "ВСборку" Тогда
		
		Если Не ПроверитьРазмещениеВсегоТовара() Тогда Возврат; КонецЕсли; КонецЕсли;
	
	 Если СохранитьИзмененияЗаявки(БыстраяПродажа, Старт, ВыполнитьЗадачу, БезДублей) Тогда
		 Модифицированность = Ложь;

		Если БыстраяПродажа Тогда  
			ОткрытьФорму(Заказы.ПолучитьИмяФормы(РеализацияТоваров), Новый Структура("Ключ", РеализацияТоваров)); КонецЕсли; КонецЕсли;			
			
	
	// Сохраним изменения в заказе                                 
	
	// {belova 19.04.16} - убираю, т.к. выше методом Записать() сохраняются изменения (получается сохрнялось дважды) // Если НЕ СохранитьИзмененияРеквизитовЗаказа() Тогда  Возврат; КонецЕсли;
	
	// Закроем форму
	
	Если Открыта() И ЗакрытьБезВопросов Тогда Закрыть() КонецЕсли;
	Если Открыта() Тогда ПоказатьВопрос(Новый ОписаниеОповещения("ПользовательХочетЗакрытьФорму", ЭтаФорма), "Закрыть форму заявки?", РежимДиалогаВопрос.ДаНет) КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательХочетЗакрытьФорму(Ответ, ДопПараметры) Экспорт
	
	Если Ответ =КодВозвратаДиалога.Да Тогда Закрыть() КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЕстьПраваСохранитьЗаказ()
	
	Если НЕ Объект.Заказ.Пустая() Тогда // если заказ уже создан, никто без соответствующего разрешения его менять не может
		
		Пользователь = Объект.Заказ.Автор; // если задача еще не создана, проверять будем только на автора
		Роль = Неопределено;
		
		Если Объект.Стартован Тогда
			
			СсылкаЗадачи = ФункцииБизнесПроцессов.ТекущаяЗадача(Объект.Ссылка);
			
			Если СсылкаЗадачи.ТочкаМаршрута = БизнесПроцессы.ЗаявкаПокупателя.ТочкиМаршрута.ФормированиеЗаказа Тогда
				
				Пользователь = СсылкаЗадачи.Пользователь;
				Роль = СсылкаЗадачи.Роль;
			КонецЕсли;
		КонецЕсли;
		
		Возврат ФункцииБизнесПроцессов.ФормированиеЗаказаРазрешеноКВыполнению(ПараметрыСеанса.ТекущийПользователь, Пользователь, Объект.Заказ, Роль);
			
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	//Если Записать() Тогда
	//	
	//	Закрыть();
	//	
	//КонецЕсли;
	
	
	Если СохранитьИзмененияЗаявки() Тогда
		Закрыть() КонецЕсли;			
			

КонецПроцедуры
&НаКлиенте
Процедура ПровестиЗаказ(Команда)
		
	// записываем/стартуем бизнес-процесс
	
	//Если  Не Записать(Новый Структура("Старт", Не Объект.Стартован)) Тогда
	//		
	//	Возврат;
	//			
	//КонецЕсли;
	
	
	СохранитьИзмененияЗаявки(,Не Объект.Стартован);			
			
	
	
	// внесем изменения в документ-основание
	// {belova 19.04.16} - убираю, т.к. выше методом Записать() сохраняются изменения (получается сохрнялось дважды) 
	//Если НЕ СохранитьИзмененияРеквизитовЗаказа() Тогда
	//	Возврат;
	//КонецЕсли;
		
	//Модифицированность = Ложь;

КонецПроцедуры


#КонецОбласти

#Область Команды_формы
&НаКлиенте
Процедура ОбщиеРеквизиты(Команда)
	ФункцииФормДокументов.ОткрытьОбщиеРеквизитыБП(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ВесОбъем(Команда)
		
	АдресХранилища = ПоместитьТоварыВХранилище(Ложь);
	                                                                                                               
	ОткрытьФорму("Документ.ИнтернетЗаказПокупателя.Форма.ФормаВеса", Новый Структура("АдресХранилища", АдресХранилища));

КонецПроцедуры

&НаКлиенте
Процедура КомандаПоказатьКомментарий(Команда)
	ФункцииБизнесПроцессовКлиент.КомандаПоказатьКомментарий(ЭтаФорма);
КонецПроцедуры


&НаСервереБезКонтекста
Функция ПроверитьНаличиеСобранного(Заказ)	
	//Если есть товар в сборке то запрещаем закрытие
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заказ",Заказ);
	Запрос.Текст = "
	|Выбрать *  из РегистрНакопления.ТоварыСобранные.Остатки(,Заказ = &Заказ)
	|";
	Рез = Запрос.Выполнить();
	Возврат Рез.Пустой();
КонецФункции	


&НаКлиенте
Процедура ОтменитьЗаказ(Команда)
	
	Если  ПроверитьНаличиеСобранного(Объект.Заказ) = Ложь Тогда
		ПоказатьПредупреждение(,"Невозможно закрытие заказа так как есть собранный товар. Необходимо сначала отгрузить его.");
		Возврат;
	КонецЕсли;	
	
	Если 	Вопрос("Отменить заказ?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да И
			ОтменитьЗаказНаСервере() Тогда
		
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ОтменитьЧтоОсталось(Команда)
	
	Если 	Вопрос("Отменить неотгруженные позиции, а заказ закрыть?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да И
			ОтменитьЗаказНаСервере() Тогда
		
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры
&НаСервере
Функция ОтменитьЗаказНаСервере()
	
	СсылкаЗадачи = ФункцииБизнесПроцессов.ТекущаяЗадача(Объект.Ссылка);
	
	НачатьТранзакцию();
	
	Если Не Заказы.УстановитьСостояниеЗаказа(Объект.Заказ, Перечисления.СостоянияЗаказа.Отменен) Тогда
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецЕсли;
	
	ЗадачаОбъект = СсылкаЗадачи.ПолучитьОбъект();
	ЗадачаОбъект.Комментарий = Объект.Комментарий;
	
	Попытка
		ЗадачаОбъект.ВыполнитьЗадачу();
	Исключение
		ОбщиеФункции.СообщитьТекст(ОписаниеОшибки());
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
	Модифицированность = Ложь;
	Возврат Истина;
	
КонецФункции


&НаКлиенте
Процедура Разместить(Команда)
	
	СпособРазмещения = ОткрытьФорму("ОбщаяФорма.ДиалогРазмещения", Новый Структура("ТекущийСклад", Склад),,,,,Новый ОписаниеОповещения("ОбработкаРазмещения",ЭтаФорма,));
	
КонецПроцедуры
&НаКлиенте
Процедура ОбработкаРазмещения(Результат, Параметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		РазместитьНаСервере(Результат, СтруктураКолонокТовары);
		Модифицированность = Истина; КонецЕсли;
	
КонецПроцедуры
&НаСервере
Процедура РазместитьНаСервере(СпособРазмещения, СтруктураКолонокТовары)

	Перем ОчередностьСкладов;
	
	РазмещатьБезЗаказа = Объект.Заказ.Пустая() Или СпособРазмещенияБезЗаказа;
	
	ТЗТоваров 				= РабочииТовары(,СтруктураКолонокТовары);
	ИспользоватьОчередность = СпособРазмещения.Свойство("ВыбранныеПриоритеты", ОчередностьСкладов);
	
	Заказы.ПроставитьРазмещениеВТаблицеТоваров(
				ТЗТоваров, 
				?(ИспользоватьОчередность, ОчередностьСкладов, Склад),,
				Объект.Заказ,,  //не меняет размещение резерва если уже зарезервировано
				СпособРазмещения,
				Ложь,
				?(РазмещатьБезЗаказа, РазмещениеТоваров, Неопределено),
				Истина);
				
	Если ТЗТоваров.Количество() Тогда
		
		Если РазмещатьБезЗаказа Тогда 
			Заказы.ПроставитьРазмещение(Товары, РазмещениеТоваров);
		Иначе
			ФункцииФормДокументов.РассчитатьСуммыТабличныхЧастейВоВсехСтроках(ТЗТоваров, СтруктураКолонокТовары);
			СклеитьТаблицыТоваров(ТЗТоваров); КонецЕсли;
		
		УправлениеВидимостьюДоступностью(); КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьПоЗаказу(Команда)
	
	ВыбранноеЗначение = ОткрытьФорму("БизнесПроцесс.ЗаявкаПокупателя.ФормаВыбора",,,,,,Новый ОписаниеОповещения("ОбработкаЗаполнитьПоЗаказу",ЭтаФорма,),);

КонецПроцедуры
&НаКлиенте
Процедура ОбработкаЗаполнитьПоЗаказу(Результат, Параметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ДобавитьТовары(Результат, СтруктураКолонокТовары); КонецЕсли;
	
КонецПроцедуры
&НаСервере
Процедура ДобавитьТовары(Ссылка, СтруктураКолонокТовары)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	Док.Номенклатура                        КАК Номенклатура,
		|	Док.Номенклатура.Код                    КАК Код,
		|	Док.Номенклатура.Артикул                КАК Артикул,
		|	ПОДСТРОКА(Док.Номенклатура.НаименованиеПолное,1, 100)     КАК НаименованиеПолное,
		|	Док.Упаковка							КАК Упаковка,
		|	Док.Цена                        	КАК Цена,
		|	СУММА(Док.КоличествоПриход)				КАК Количество,
		|	СУММА(Док.СуммаПриход)						КАК Сумма,
		|	Док.СтавкаНДС			        		КАК СтавкаНДС  
		|	
		|ИЗ
		|	РегистрНакопления.ЗаказыПокупателей.ОстаткиИОбороты(,&ДатаВыполнения,,,ЗаказПокупателя = &Ссылка) Док
		|СГРУППИРОВАТЬ ПО Док.Номенклатура, Док.Упаковка, Док.Цена, Док.СтавкаНДС");
		
  	ДатаВыполнения = ТекущаяДата();
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка.Заказ);
	Запрос.УстановитьПараметр("ДатаВыполнения", ДатаВыполнения);

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураПоиска = Новый Структура("Номенклатура, Цена, Упаковка");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
		Строки = Товары.НайтиСтроки(СтруктураПоиска);
		
				
		Если Не Строки.Количество() Тогда
			// Отработаем новую строку

			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
  			//ФункцииФормДокументов.РассчитатьСуммыТабличныхЧастей(НоваяСтрока, СтруктураКолонокТовары);
			ФункцииФормДокументов.РассчитатьСуммыСтрокиОтЦены(НоваяСтрока, СтруктураКолонокТовары);
		Иначе
		// Обработаем найденную
		
			Строка = Строки[0];
			Строка.Количество = Строка.Количество + Выборка.Количество;
			//ФункцииФормДокументов.РассчитатьСуммыТабличныхЧастей(Строка, СтруктураКолонокТовары);
			ФункцииФормДокументов.РассчитатьСуммыСтрокиОтЦены(Строка, СтруктураКолонокТовары)
		
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры	


&НаКлиенте
Процедура ДекорацияНадписьОплатыНажатие(Элемент)
	
	ОткрытьФорму("Обработка.ДолгиПоОплате_Управление.Форма.Управление", Новый Структура("Организация, Контрагент", Организация, Контрагент));
	
КонецПроцедуры
&НаКлиенте
Процедура ДолгПарнераНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("Отбор, КлючНазначенияИспользования, СформироватьПриОткрытии", 
	 							Новый Структура("Контрагент", 
											Контрагент),,
								Истина);
								
	ОткрытьФорму("Отчет.ВзаиморасчетыПоПартнеру.ФормаОбъекта", ПараметрыФормы); 

КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьРучСкидку(Команда)
	
	//ДиалогиСПользователем.ЗаполнитьРучСкидку(Товары, СтруктураКолонокТовары,"Не Строка.Отгружено И Не Строка.Собрано");
	ДиалогиСПользователем.ЗаполнитьРучСкидку(Товары, СтруктураКолонокТовары,"Не Строка.Отгружено");
	//УправлениеВидимостьюДоступностью();
	ФункцииФормДокументов.ОбновитьПодвал(ЭтаФорма, Элементы, Всего, СтруктураКолонокТовары,,  "ВсегоНДС", ВсегоНДС);
	СуммаБезНДС(Всего, ВсегоНДС);
КонецПроцедуры
&НаКлиенте
Процедура ЗаполнитьСтавкуНДС(Команда)
	
	//ДиалогиСПользователем.ЗаполнитьСтавкуНДС(Товары, СтруктураКолонокТовары, "Не Строка.Отгружено И Не Строка.Собрано");
	ДиалогиСПользователем.ЗаполнитьСтавкуНДС(Товары, СтруктураКолонокТовары, "Не Строка.Отгружено");
	//УправлениеВидимостьюДоступностью();
	ФункцииФормДокументов.ОбновитьПодвал(ЭтаФорма, Элементы, Всего, СтруктураКолонокТовары,,  "ВсегоНДС", ВсегоНДС);
	СуммаБезНДС(Всего, ВсегоНДС);
КонецПроцедуры


#КонецОбласти

#Область Обработки_табличной_части

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)

	ФункцииФормДокументов.НоменклатураПриИзменении(
				Элементы.Товары, 
				СтруктураКолонокТовары);

	ДиалогиСПользователем.ОчиститьНеактуальноеРазмещение(Товары,РазмещениеТоваров);
	ТекДанные=Элементы.Товары.ТекущиеДанные;
	ТекДанные.Размещение = ДиалогиСПользователем.ПолучитьПредставлениеРазмещения(ТекДанные.Количество, ДиалогиСПользователем.ПолучитьмассивРазмещенийТоваров(РазмещениеТоваров, ТекДанные.Номенклатура),,?(СтруктураКолонокТовары.ЕстьКоличествоОтгружено, ТекДанные.КоличествоОтгружено, 0));
КонецПроцедуры
&НаКлиенте
Процедура КоличествоПриИзменении(Элемент)
	
	ФункцииФормДокументов.КоличествоПриИзменении(Элементы.Товары, СтруктураКолонокТовары,,РазмещениеТоваров, Склад);
	
КонецПроцедуры
&НаКлиенте
Процедура ЦенаПриИзменении(Элемент)
	
	ФункцииФормДокументов.ЦенаПриИзменении(Элементы.Товары, СтруктураКолонокТовары);
	
КонецПроцедуры
&НаКлиенте
Процедура СуммаПриИзменении(Элемент)
	
	ФункцииФормДокументов.СуммаПриИзменении(Элементы.Товары, СтруктураКолонокТовары);
	
КонецПроцедуры
&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент)
	
	ФункцииФормДокументов.СтавкаНДСПриИзменении(Элементы.Товары, СтруктураКолонокТовары);
	
КонецПроцедуры
&НаКлиенте
Процедура УпаковкаПриИзменении(Элемент)
	
	ФункцииФормДокументов.УпаковкаПриИзменении(
			Элементы.Товары, 
			СтруктураКолонокТовары);
			
КонецПроцедуры
&НаКлиенте
Процедура СуммаНДСПриИзменении(Элемент)
	
	ФункцииФормДокументов.СуммаНДСПриИзменении(Элементы.Товары, СтруктураКолонокТовары);
	
КонецПроцедуры
&НаКлиенте
Процедура ВсегоПриИзменении(Элемент)
	
	ФункцииФормДокументов.ВсегоПриИзменении(Элементы.Товары, СтруктураКолонокТовары);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцентРучнойСкидкиПриИзменении(Элемент)
	
	ФункцииФормДокументов.ПроцентРучнойСкидкиПриИзменении(Элементы.Товары, СтруктураКолонокТовары);
	
КонецПроцедуры
&НаКлиенте
Процедура ПроцентАвтоматическойСкидкиПриИзменении(Элемент)
	ФункцииФормДокументов.ПроцентАвтоматическойСкидкиПриИзменении(Элементы.Товары, СтруктураКолонокТовары);
КонецПроцедуры

&НаКлиенте
Процедура СуммаРучнойСкидкиПриИзменении(Элемент)
	
	ФункцииФормДокументов.СуммаРучнойСкидкиПриИзменении(Элементы.Товары, СтруктураКолонокТовары);

КонецПроцедуры
&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	УправлениеВидимостьюДоступностью();
	ФункцииФормДокументов.ОбновитьПодвал(ЭтаФорма, Элементы, Всего, СтруктураКолонокТовары,,  "ВсегоНДС", ВсегоНДС);
	СуммаБезНДС(Всего, ВсегоНДС);
	ДиалогиСПользователем.ОчиститьНеактуальноеРазмещение(Товары,РазмещениеТоваров);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДоступностьРедактированияСТроки(текДанные, Отказ)
	
	ИмяЭлемента = Элементы.Товары.ТекущийЭлемент.Имя;
		
	Если текДанные.Отгружено И ИмяЭлемента <> "Размещение" И ИмяЭлемента <> "Количество" Тогда // для этих двух полей свои проверки, для остального запрет
		
		Отказ = Истина;
		
	КонецЕсли;
	
	
	// из старого механизма работы, убираю {belova 26.10.2016}
	//Если текДанные.Отгружено Тогда
	//	
	//	//Отказ = Истина;
	//	ОбщиеФункции.СообщитьТекст("Товар уже отгружен, изменять его запрещено");
	//	
	//ИначеЕсли текДанные.Собрано Тогда
	//	
	//	ИмяЭлемента = Элементы.Товары.ТекущийЭлемент.Имя;
	//	
	//	Если 	ИмяЭлемента = "Количество" Или 
	//			ИмяЭлемента = "Номенклатура" Или
	//			ИмяЭлемента = "Размещение" Или
	//			ИмяЭлемента = "Упаковка" Тогда
	//	
	//		//Отказ = Истина;
	//		ОбщиеФункции.СообщитьТекст("Товар уже собран, изменять его запрещено"); КонецЕсли; КонецЕсли;	
	
КонецПроцедуры
&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	ПроверитьДоступностьРедактированияСтроки(Элемент.ТекущиеДанные, Отказ);
	
	Если Элемент.ТекущиеДанные.КоличествоМинимум Тогда 
		ПоказатьОповещениеПользователя("Товар не удалить",,Элемент.ТекущиеДанные.Номенклатура, БиблиотекаКартинок.Отмена);
		Отказ = Истина; КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ТоварыПередНачаломИзменения(Элемент, Отказ)
	
	текДанные = Элемент.ТекущиеДанные;
	
	// запомним текущую строку
	
	мСтСтрокаРедактирования = Новый Структура("Номенклатура, Упаковка, Размещение, Количество",
										текДанные.Номенклатура, текДанные.Упаковка, текДанные.Размещение, текДанные.Количество);
	// Проверим
	
	ПроверитьДоступностьРедактированияСтроки(Элемент.ТекущиеДанные, Отказ);
	
	// Установим минимальное количество
	
	Элементы.Количество.МинимальноеЗначение = текДанные.КоличествоМинимум;
	
КонецПроцедуры
&НаКлиенте
Процедура ТоварыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	текДанные = Элемент.ТекущиеДанные;
	
	// Проверим если изменили че низя тогда им кердык
	
	Если Не НоваяСтрока И текДанные.Собрано Тогда
	
		Для Каждого Элемент Из мСтСтрокаРедактирования Цикл
			Если Элемент.Значение <> текДанные[Элемент.Ключ] Тогда
				
				Если Вопрос("Изменились реквизиты которые изменять запрещено
					|вернуть как было?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
					
					ОтменаРедактирования = Истина;
					Для Каждого Элемент Из мСтСтрокаРедактирования Цикл текДанные[Элемент.Ключ] = Элемент.Значение; КонецЦикла;
					//ФункцииФормДокументов.РассчитатьСуммыТабличныхЧастей(ТекДанные, СтруктураКолонокТовары);
					ФункцииФормДокументов.РассчитатьСуммыСтрокиОтЦены(текДанные, СтруктураКолонокТовары);
					
				Иначе Отказ = Истина; КонецЕсли; Прервать;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ФункцииФормДокументов.ОбновитьПодвал(ЭтаФорма, Элементы, Всего, СтруктураКолонокТовары,,  "ВсегоНДС", ВсегоНДС);
	СуммаБезНДС(Всего, ВсегоНДС);
КонецПроцедуры

&НаКлиенте
Процедура РазмещениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если СпособРазмещенияБезЗаказа Тогда
		ДиалогиСПользователем.НачалоВыбораРазмещения(ЭтаФорма, Элемент, Объект.Заказ, Склад, СтандартнаяОбработка) КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура РазмещениеОчистка(Элемент, СтандартнаяОбработка)
	
	Если СпособРазмещенияБезЗаказа Тогда
		ДиалогиСПользователем.ОчиститьРазмещениеВСтроке(Элементы.Товары.ТекущиеДанные, РазмещениеТоваров, СтандартнаяОбработка); КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРазмещениеТоваров(Элемент)
	
	Элементы.РазмещениеТоваров.Видимость = Не Элементы.РазмещениеТоваров.Видимость;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрекНомераВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекДанные = Элементы.ТрекНомера.ТекущиеДанные;
	Если ТекДанные<>Неопределено И ЗначениеЗаполнено(ТекДанные.ДокументОтгрузки) Тогда
		ПоказатьЗначение(,ТекДанные.ДокументОтгрузки);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Основные_реквизиты_шапки

&НаКлиенте
Процедура СохранитьТекущиеЗначенияПараметров()
	
	// сохраняем текущие значения параметров
	
	СтруктураКолонокТовары.стТипЦен = ТипЦен;
	СтруктураКолонокТовары.стУчитыватьНДС = УчитыватьНДС;
	СтруктураКолонокТовары.стСуммаВключаетНДС = СтруктураКолонокТовары.СуммаВключаетНДС;
	СтруктураКолонокТовары.стВалюта = СтруктураКолонокТовары.Валюта;
	СтруктураКолонокТовары.стРасчетСкидкиОтЦены = СтруктураКолонокТовары.РасчетСкидкиОтЦены;
	
	ОрганизацияПоДокументу = Организация;
	КонтрагентПоДокументу = Контрагент;
	
КонецПроцедуры
&НаСервере
Процедура ОбновитьСтруктуруКолонокТовары(СтруктураКолонокТовары)
	
	
	СтруктураКолонокТовары.Контрагент = Контрагент;
	
	СтруктураКолонокТовары.Валюта = Валюта;
	СтруктураКолонокТовары.ТипЦен = ТипЦен;
	СтруктураКолонокТовары.УчитыватьНДС = УчитыватьНДС;
	СтруктураКолонокТовары.СуммаВключаетНДС = СуммаВключаетНДС;

	СтруктураКолонокТовары.ДисконтнаяКарта = ДисконтнаяКарта;

КонецПроцедуры
&НаСервере
Процедура ПриИзмененииРеквизитаВлияющегоНаТабличнуюЧасть(СтруктураКолонокТовары, ОбновитьСтруктуру = Истина, ПересчитатьЦену = Ложь)
	
	Если ОбновитьСтруктуру Тогда
		ФункцииФормДокументов.ОбновитьСтруктуруКолонокТовары(
				ЭтаФорма, 
				СтруктураКолонокТовары, 
				КэшируемыеФункции.ПолучитьРеквизитыДокумента("ЗаказПокупателя"));
			КонецЕсли;
			
	ФункцииФормДокументов.ЗаполнитьСтавкуНДС(Товары,СтруктураКолонокТовары);
		
	////////Временный кусок/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//Если СтруктураКолонокТовары.УчитыватьНДС Тогда                                                                                                                                                                                                                                                //
	//	ДиалогиСПользователем.ОбработатьВыборСтавкиНДС(?(ПолучитьФункциональнуюОпцию("НемецкийУчет"),Перечисления.СтавкиНДС.НДС19,Перечисления.СтавкиНДС.НДС18), Новый Структура("Таблица, СтруктураКолонокТовары, ВыражениеФильтра", Товары, СтруктураКолонокТовары, "Не Строка.Отгружено"));    //
	//ИначеЕсли НЕ СтруктураКолонокТовары.УчитыватьНДС Тогда                                                                                                                                                                                                                                        //
	//	ДиалогиСПользователем.ОбработатьВыборСтавкиНДС(Перечисления.СтавкиНДС.НДС18, Новый Структура("Таблица, СтруктураКолонокТовары, ВыражениеФильтра", Товары, СтруктураКолонокТовары, "Не Строка.Отгружено"));                                                                                //
	//конецЕсли;                                                                                                                                                                                                                                                                                    //
	////////Конец///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	СтрокиВРаботе = Товары.НайтиСтроки(Новый Структура("Отгружено", Ложь));
	
	ФункцииФормДокументов.ПересчитатьСуммыТабличныхЧастей(СтрокиВРаботе, СтруктураКолонокТовары, ПересчитатьЦену, ТипЦен.ЦенаВключаетНДС);
	
	ФункцииФормДокументов.ОбновитьПодвал(ЭтаФорма, Элементы, Всего, СтруктураКолонокТовары,,  "ВсегоНДС", ВсегоНДС);
	СуммаБезНДС(Всего, ВсегоНДС);
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьПроцентАвтоматическойСкидки()
	
	Для Каждого Строка Из Товары Цикл
		Строка.ПроцентАвтоматическойСкидки = РаботаСНоменклатурой.ПолучитьПроцентАвтоматическойСкидки(Строка.Номенклатура, Контрагент, ДисконтнаяКарта, Строка.Акция); 
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказПриИзменении(Элемент)
	
	ПеречитатьРеквизитыПоЗаказу();
	КонтрагентПриИзменении(Элементы.Контрагент);
	
	Для КАждого Строка Из Товары Цикл
			
		//ФункцииФормДокументов.РассчитатьСуммыТабличныхЧастей(Строка, СтруктураКолонокТовары);
		ФункцииФормДокументов.РассчитатьСуммыСтрокиОтЦены(Строка, СтруктураКолонокТовары);
			
	КонецЦикла;
	
	УправлениеВидимостьюДоступностью();
	УстановитьЗаголовок();
	
КонецПроцедуры

&НаСервере
Функция ПартнерРаботаетПоПередаче(Контрагент)
	Возврат Контрагент.ПередачаТовара;
КонецФункции
&НаКлиенте
Процедура ВыборПередачаТовара(Результат, Параметры) Экспорт
	Если Результат <> Неопределено Тогда ПередачаТовара = Результат = КодВозвратаДиалога.Да; Элементы.ГруппаВариантОтгрузки.Видимость = ПередачаТовара; КонецЕсли;	
КонецПроцедуры
&НаКлиенте
Процедура ИзменениеНастройкиСуммаВключаетНДС(Результат, Параметр) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СуммаВключаетНДС = Ложь;
		СтруктураКолонокТовары.СуммаВключаетНДС = СуммаВключаетНДС;
	КонецЕсли;
	
	ПриИзмененииРеквизитаВлияющегоНаТабличнуюЧасть(СтруктураКолонокТовары,,СтруктураКолонокТовары.СуммаВключаетНДС <> СтруктураКолонокТовары.стСуммаВключаетНДС);
	
	СохранитьТекущиеЗначенияПараметров();	
КонецПроцедуры


&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере(СтруктураКолонокТовары)
	
	// проставим зависимые реквизиты
	ФункцииФормДокументов.ОрганизацияПриИзменении(ЭтаФорма);
	
	// обновим табличную часть
	//ОбновитьСтруктуруКолонокТовары(СтруктураКолонокТовары);
	ПриИзмененииРеквизитаВлияющегоНаТабличнуюЧасть(СтруктураКолонокТовары);
	
КонецПроцедуры



&НаСервере
Процедура КонтрагентПриИзмененииНаСервере(СтруктураКолонокТовары = Неопределено, СуммаВключаетНДС_ПоУмолчанию = Ложь)
	

	// заполним зависимые реквизиты
	ФункцииФормДокументов.КонтрагентПриИзменении(ЭтаФорма);
	
	// обновим табличную часть
	Если СтруктураКолонокТовары <> Неопределено Тогда 
		
		ФункцииФормДокументов.ОбновитьСтруктуруКолонокТовары(
			ЭтаФорма, 
			СтруктураКолонокТовары, 
			КэшируемыеФункции.ПолучитьРеквизитыДокумента("ЗаказПокупателя"));	


		Если Товары.Количество() Тогда
			РаботаСНоменклатурой.ПересчитатьАкциюДляТоваров(Контрагент, ТипЦен, Товары, СтруктураКолонокТовары, Валюта, Ложь); 
		КонецЕсли;
	
		ЗаполнитьПроцентАвтоматическойСкидки();
	    		
        ПриИзмененииРеквизитаВлияющегоНаТабличнуюЧасть(СтруктураКолонокТовары,,СтруктураКолонокТовары.ТипЦен <> СтруктураКолонокТовары.стТипЦен);
	КонецЕсли;

	СуммаВключаетНДС_ПоУмолчанию = НЕ Контрагент.ЦенаБезНДС;

	Грузополучатель = ФункцииФормДокументовСервер.ГрузополучательПриИзмененииРеквизита(Контрагент);
	БанковскийСчетГрузополучателя = ФункцииФормДокументовСервер.БанковскийСчетПриИзмененииРеквизита(Грузополучатель);
	МенеджерЗаказа = ФункцииФормДокументовСервер.МенеджерЗаказаПриИзмененииРеквизита(Контрагент,Грузополучатель);
	
	СтруктураДанныхКонтрагента = ПолучитьСтруктуруЗначенийДоставкиКонтрагентаНаСервере(Контрагент);
	ВариантДоставкиНов = СтруктураДанныхКонтрагента.ВариантДоставкиНов;
	ЗаЧейСчетДоставка = СтруктураДанныхКонтрагента.ЗаЧейСчетДоставка;
	Грузоперевозчик = СтруктураДанныхКонтрагента.ОсновнойГрузоперевозчик;
	ЧастичнаяОтгрузка = СтруктураДанныхКонтрагента.ЧастичнаяОтгрузка;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруЗначенийДоставкиКонтрагентаНаСервере(Контрагент)
	Структура = Новый Структура;
	Структура.Вставить("ВариантДоставкиНов" , Контрагент.ВариантДоставки);
	Структура.Вставить("ЗаЧейСчетДоставка" , Контрагент.ЗаЧейСчетДоставка);
	Структура.Вставить("ОсновнойГрузоперевозчик", Контрагент.ОсновнойГрузоперевозчик);
	Структура.Вставить("ЧастичнаяОтгрузка", Контрагент.ЧастичнаяОтгрузка);

	Возврат Структура;
КонецФункции

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	
	СуммаВключаетНДС_ПоУмолчанию = Ложь;
		
	КонтрагентПриИзмененииНаСервере(СтруктураКолонокТовары, СуммаВключаетНДС_ПоУмолчанию);
	СохранитьТекущиеЗначенияПараметров();
	
	ОбновитьИнформациюОДолге();
	
	Если ПартнерРаботаетПоПередаче(Контрагент) Тогда	
		ПоказатьВопрос(Новый ОписаниеОповещения("ВыборПередачаТовара", ЭтаФорма), "Для Контрагента выбран вид отгрузки - Перадача товара. Применить для данного заказа?", РежимДиалогаВопрос.ДаНет);
	Иначе ПередачаТовара = Ложь; Элементы.ГруппаВариантОтгрузки.Видимость = ПередачаТовара;	
	КонецЕсли;
	
	Если СуммаВключаетНДС_ПоУмолчанию = Ложь И СуммаВключаетНДС_ПоУмолчанию <> СуммаВключаетНДС Тогда	
		ПоказатьВопрос(Новый ОписаниеОповещения("ИзменениеНастройкиСуммаВключаетНДС", ЭтаФорма), "Для Контрагента настроено оформление заявки с Ценами Без НДС. Применить для данного заказа?", РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
	ОтветственноеЛицо=Неопределено;
	МВЗ=Неопределено;
	
	УправлениеВидимостьюДоступностьюНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВидимостьюДоступностьюНаКлиенте()
	
	Если ВариантДоставкиНов=ПредопределенноеЗначение("Перечисление.ВариантДоставки.СамовывозСНашегоСклада") Тогда
		Элементы.ЗаЧейСчетДоставка.Видимость				 = Ложь;
		Элементы.Грузоперевозчик.Видимость					 = Истина;
		Элементы.ДатаДоставки.Видимость						 = Истина;
		Элементы.ВремяДоставкиС.Видимость					 = Истина;
		Элементы.ВремяДоставкиПо.Видимость					 = Истина;
		Элементы.АдресДоставкиНов.Видимость					 = Ложь;
		Элементы.КонтактноеЛицо.Видимость					 = Ложь;
		Элементы.ТелефонКонтактногоЛицаДоставки.Видимость	 = Ложь;
	ИначеЕсли ВариантДоставкиНов=ПредопределенноеЗначение("Перечисление.ВариантДоставки.ДоставкаДоКлиента") Тогда
		Элементы.ЗаЧейСчетДоставка.Видимость				 = Истина;
		Элементы.Грузоперевозчик.Видимость					 = Истина;
		Элементы.ДатаДоставки.Видимость						 = Истина;
		Элементы.ВремяДоставкиС.Видимость					 = Истина;
		Элементы.ВремяДоставкиПо.Видимость					 = Истина;
		Элементы.АдресДоставкиНов.Видимость					 = Истина;
		Элементы.КонтактноеЛицо.Видимость					 = Истина;
		Элементы.ТелефонКонтактногоЛицаДоставки.Видимость	 = Истина;
	ИначеЕсли ВариантДоставкиНов=ПредопределенноеЗначение("Перечисление.ВариантДоставки.ДоставкаДоГрузоперевозчика") Тогда
		Элементы.ЗаЧейСчетДоставка.Видимость				 = Истина;
		Элементы.Грузоперевозчик.Видимость					 = Истина;
		Элементы.ДатаДоставки.Видимость						 = Ложь;
		Элементы.ВремяДоставкиС.Видимость					 = Ложь;
		Элементы.ВремяДоставкиПо.Видимость					 = Ложь;
		Элементы.АдресДоставкиНов.Видимость					 = Истина;
		Элементы.КонтактноеЛицо.Видимость					 = Истина;
		Элементы.ТелефонКонтактногоЛицаДоставки.Видимость	 = Истина;
	ИначеЕсли ВариантДоставкиНов=ПредопределенноеЗначение("Перечисление.ВариантДоставки.ДоставкаДоКлиентаНашимиСилами") Тогда
		Элементы.ЗаЧейСчетДоставка.Видимость				 = Истина;
		Элементы.Грузоперевозчик.Видимость					 = Ложь;
		Элементы.ДатаДоставки.Видимость						 = Истина;
		Элементы.ВремяДоставкиС.Видимость					 = Истина;
		Элементы.ВремяДоставкиПо.Видимость					 = Истина;
		Элементы.АдресДоставкиНов.Видимость					 = Истина;
		Элементы.КонтактноеЛицо.Видимость					 = Истина;
		Элементы.ТелефонКонтактногоЛицаДоставки.Видимость	 = Истина;
	Иначе
		Элементы.ЗаЧейСчетДоставка.Видимость				 = Истина;
		Элементы.Грузоперевозчик.Видимость					 = Истина;
		Элементы.ДатаДоставки.Видимость						 = Истина;
		Элементы.ВремяДоставкиС.Видимость					 = Истина;
		Элементы.ВремяДоставкиПо.Видимость					 = Истина;
		Элементы.АдресДоставкиНов.Видимость					 = Истина;
		Элементы.КонтактноеЛицо.Видимость					 = Истина;
		Элементы.ТелефонКонтактногоЛицаДоставки.Видимость	 = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	
	Если НЕ ДиалогиСПользователем.ПроверитьНаСоответствиеОсновнойОрганизации(
				Контрагент, 
				Организация, 
				КонтрагентРаботаетСОрганизацией()) Тогда
		
		Организация = ОрганизацияПоДокументу;
	
	КонецЕсли;
	
	//Если Организация <> ОрганизацияПоДокументу И НЕ ПроверитьОтгрузкиПоЗаказу() Тогда
	//	
	//	Организация = ОрганизацияПоДокументу;
	//	
	//КонецЕсли;
	
	ОрганизацияПриИзмененииНаСервере(СтруктураКолонокТовары);
	СохранитьТекущиеЗначенияПараметров();
	
	ОбновитьИнформациюОДолге();
	
	Грузоотправитель = ФункцииФормДокументовСервер.ГрузополучательПриИзмененииРеквизита(Организация);
	БанковскийСчетГрузоотправителя = ФункцииФормДокументовСервер.БанковскийСчетПриИзмененииРеквизита(Грузоотправитель);
КонецПроцедуры

&НаКлиенте
Функция ПроверитьОтгрузкиПоЗаказу()
	
	Если ПолучитьОтгрузкиПоЗаказу() И Вопрос("Заказ частично отгружен. Изменения коснуться всех отгрузок по данному заказу. 
		|Внести изменения?", РежимДиалогаВопрос.ДаНетОтмена) = КодВозвратаДиалога.Да Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции
&НаСервере
Функция ПолучитьОтгрузкиПоЗаказу()
	
	Запрос = Новый Запрос("ВЫБРАТЬ Регистратор ИЗ РегистрНакопления.Продажи.Обороты(,, Регистратор, Заказ = &Заказ)");
	Запрос.УстановитьПараметр("Заказ", Объект.Заказ);
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

#КонецОбласти

#Область Простые_реквизиты_шапки

&НаКлиенте
Процедура ТипЦенПриИзменении(Элемент)
		
	Если ФункцииФормДокументов.ДиалогПриИзмененииТипаЦен(Товары.Количество(), СтруктураКолонокТовары, ТипЦен) Тогда
		
		ПриИзмененииРеквизитаВлияющегоНаТабличнуюЧасть(СтруктураКолонокТовары,,Истина);
		
	КонецЕсли;
	
	СохранитьТекущиеЗначенияПараметров();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗапрещеноВыбиратьТипЦенВДокументах(ВыбранноеЗначение)
	Возврат ФункцииФормДокументов.ЗапрещеноВыбиратьТипЦенВДокументах(ВыбранноеЗначение);
КонецФункции		

&НаКлиенте
Процедура ТипЦенОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ЗапрещеноВыбиратьТипЦенВДокументах(ВыбранноеЗначение) Тогда
		ПоказатьПредупреждение(,"Данный тип цен запрещен к выбору");
		СтандартнаяОбработка=Ложь;
	КонецЕсли;	
КонецПроцедуры
	
&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	Если ФункцииФормДокументов.ДиалогПриИзмененииВалюты(Товары.Количество(), СтруктураКолонокТовары, Валюта) Тогда
		ПриИзмененииРеквизитаВлияющегоНаТабличнуюЧасть(СтруктураКолонокТовары,,Истина);
	КонецЕсли;

	СохранитьТекущиеЗначенияПараметров();

КонецПроцедуры
&НаКлиенте
Процедура УчитыватьНДСПриИзменении(Элемент)
	
	//Элементы.ВсегоНДС.Заголовок = ?(НЕ УчитыватьНДС, "Без налога (НДС)", "");
	
	Если ФункцииФормДокументов.ДиалогПриИзмененииУчитыватьНДС(УчитыватьНДС, Товары.Количество(), СтруктураКолонокТовары) Тогда
		ПриИзмененииРеквизитаВлияющегоНаТабличнуюЧасть(СтруктураКолонокТовары);
	КонецЕсли;
	
	СохранитьТекущиеЗначенияПараметров();

КонецПроцедуры
&НаКлиенте
Процедура СуммаВключаетНДСПриИзменении(Элемент)
	
	//Элементы.ВсегоНДС.Заголовок = ?(СуммаВключаетНДС, "В т.ч. НДС", "Сумма НДС");
	
	Если ФункцииФормДокументов.ДиалогПриИзмененииСуммаВключаетНДС(СуммаВключаетНДС, Товары.Количество(), СтруктураКолонокТовары) Тогда
		ПриИзмененииРеквизитаВлияющегоНаТабличнуюЧасть(СтруктураКолонокТовары,,СтруктураКолонокТовары.СуммаВключаетНДС <> СтруктураКолонокТовары.стСуммаВключаетНДС);
	КонецЕсли;

	СохранитьТекущиеЗначенияПараметров();	

КонецПроцедуры
&НаКлиенте
Процедура ДисконтнаяКартаПриИзменении(Элемент)
	
	// вставить проверку на владельца
	ЗаполнитьПроцентАвтоматическойСкидки();
    ПриИзмененииРеквизитаВлияющегоНаТабличнуюЧасть(СтруктураКолонокТовары);//ДисконтнаяКартаПриИзмененииНаСервере(СтруктураКолонокТовары);
	
КонецПроцедуры
&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	// Очистим размещение
	
	Для Каждого Строка Из Товары Цикл Если Не Строка.Отгружено И Не Строка.Собрано Тогда Строка.Размещение = Неопределено КонецЕсли КонецЦикла;
	
	УправлениеВидимостьюДоступностью();
	
	СкладПриИзмененииНаСервере();
	
КонецПроцедуры
Процедура СкладПриИзмененииНаСервере()
	
	Если РозничнаяЗаявка И Склад.ПередачаТовараМВЗ Тогда РозничнаяЗаявка = Ложь; РозничнаяЗаявкаПриИзмененииНаСервере(); КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетСкидкиОтЦеныПриИзменении(Элемент)
	
	ФункцииФормДокументов.ДиалогПриИзмененииРасчетСкидкиОтЦены(РасчетСкидкиОтЦены, Товары.Количество(), СтруктураКолонокТовары, ЭтаФорма, Новый Структура("ИмяРеквизита, УчитыватьПересчетЦены", Элемент.Имя, Истина));

КонецПроцедуры

&НаКлиенте
Функция ПослеОтветаНаВопросВДиалоге(Результат, Параметры) Экспорт
	
	УчитыватьПересчетЦены = Ложь;
	Если Параметры.Свойство("УчитыватьПересчетЦены") Тогда УчитыватьПересчетЦены = Параметры.УчитыватьПересчетЦены; КонецЕсли;
	
	ИмяРеквизита = Параметры.ИмяРеквизита;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
	    ПересчитатьЦену = УчитыватьПересчетЦены И (СтруктураКолонокТовары[ИмяРеквизита] <> СтруктураКолонокТовары["ст" + ИмяРеквизита]);
		ПриИзмененииРеквизитаВлияющегоНаТабличнуюЧасть(СтруктураКолонокТовары,, ПересчитатьЦену); КонецЕсли;

	СохранитьТекущиеЗначенияПараметров();	
КонецФункции


#КонецОбласти

#Область Реквизиты_печати
 
&НаКлиенте
Процедура ГрузополучательПриИзменении(Элемент)
	БанковскийСчетГрузополучателя = ФункцииФормДокументовСервер.БанковскийСчетПриИзмененииРеквизита(Грузополучатель);
	МенеджерЗаказа = ФункцииФормДокументовСервер.МенеджерЗаказаПриИзмененииРеквизита(Контрагент,Грузополучатель);
КонецПроцедуры

&НаКлиенте
Процедура ГрузоотправительПриИзменении(Элемент)
	БанковскийСчетГрузоотправителя = ФункцииФормДокументовСервер.БанковскийСчетПриИзмененииРеквизита(Грузоотправитель);
 КонецПроцедуры

#КонецОбласти

#Область Меню_загрузить_табличные_данные

&НаКлиенте
Процедура ЗагрузитьДанныеExcel(Команда)
	  ЗагрузитьВнешниеДанные(Команда.Имя);
КонецПроцедуры
&НаКлиенте
Процедура ЗагрузитьДанныеТабличногоДокумента(Команда)
	  ЗагрузитьВнешниеДанные(Команда.Имя);
КонецПроцедуры
&НаКлиенте
Процедура ЗагрузитьВнешниеДанные(ИмяКоманды)
	
	АдресТоваровВХранилище = ПоместитьТоварыВХранилище();
	
	ОткрытьФорму("Документ.ЗаказПокупателя.Форма.ЗагрузкаДанных", Новый Структура("Страница, СтруктураКолонокТовары, ИмяТаблицы, АдресТоваровВХранилище", ИмяКоманды, СтруктураКолонокТовары, "Товары", АдресТоваровВХранилище), Элементы.Товары);
	
КонецПроцедуры
#КонецОбласти

#Область Олень

&НаСервере
Функция ОтобратьУМенеджера()
	
	Возврат БизнесПроцессы.СборкаЗаказа.ОтобратьУМенеджера(Объект.Заказ);
	
КонецФункции
&НаКлиенте
Процедура ЧтоСказатьПроОленя(Ответ, ДопРекв) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да И ОтобратьУМенеджера() Тогда
		ПрочитатьРеквизиты(); КонецЕсли; 
	
КонецПроцедуры
&НаКлиенте
Процедура ОтобратьЗаказУЛогиста(Команда)

	ПоказатьВопрос(Новый ОписаниеОповещения("ЧтоСказатьПроОленя", ЭтаФорма), "Отменить очередь сборки заказа у логиста, для того чтобы отредактировать заказ?", РежимДиалогаВопрос.ДаНет,,,"Как мне оправдываться перед логистом");
	
КонецПроцедуры

#КонецОбласти

#Область Согласование_ассортимента

&НаСервере
Процедура ПроверитьНаСоответствиеАссортиментуНаСервере(выбКонтрагент)
	
	Таблица = Заказы.ПроверитьНаСоответствиеАссортимента(Товары.Выгрузить(), выбКонтрагент);
	Если Таблица.Найти(Истина, "ТоварНеСогласован") <> Неопределено Тогда
		Товары.Загрузить(Таблица); КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаСоответствиеАссортименту(Команда)
	
	ПроверитьНаСоответствиеАссортиментуНаСервере(Контрагент);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокОтветственных(МВЗ)
	
	Возврат Справочники.МВЗ.ПолучитьСписокОтветственных(МВЗ);
	
КонецФункции


&НаКлиенте
Процедура ИнициаторПриИзменении(Элемент)
	
	Список 		= ПолучитьСписокОтветственных(МВЗ);
	Элементы.ОтветственноеЛицо.СписокВыбора.ЗагрузитьЗначения(Список);
	
КонецПроцедуры
&НаКлиенте
Процедура ОтветственноеЛицоПриИзменении(Элемент)
	
	стКонтрагент = Контрагент;
	
	ОтветственноеЛицоПриИзмененииНаСервере(СтруктураКолонокТовары);
	СохранитьТекущиеЗначенияПараметров();
	
	Если стКонтрагент <> Контрагент Тогда
		ОбновитьИнформациюОДолге();
	КонецЕсли;

	//////
	Список = ПолучитьСписокМВЗ(ОтветственноеЛицо);
	Элементы.Инициатор.СписокВыбора.ЗагрузитьЗначения(Список);
	
КонецПроцедуры

&НаСервере
Функция ОтветственноеЛицоПриИзмененииНаСервере(СтруктураКолонокТовары)
	
	Контрагент = ОтветственноеЛицо.Контрагент;
	КонтрагентПриИзмененииНаСервере(СтруктураКолонокТовары);	
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокМВЗ(Инициатор)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ МВЗ Из РегистрСведений.ОтветственныеЛица ГДЕ ОтветственноеЛицо = &Инициатор Упорядочить по МВЗ.Наименование");
	Запрос.УстановитьПараметр("Инициатор", Инициатор);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("МВЗ");
	
КонецФункции

#КонецОбласти

#Область Автоматическое_снятие_резервов

&НаКлиенте
Процедура ПродлитьРезерв(Команда)
	
	Если ПродлитьРезервНа.Пустая() Тогда
		ПоказатьПредупреждение(,"Продлять на сколько?");
	Иначе
		Если ПродлитьРезервНаСервере() Тогда
			ОбновитьРезервНаСервереНепосредственно(); 
			Закрыть(); КонецЕсли; КонецЕсли;
	
КонецПроцедуры
&НаСервере
Функция ПродлитьРезервНаСервере()
	
	Запись = РегистрыСведений.ОтсрочкаСнятияРезервов.СоздатьМенеджерЗаписи();
	Запись.Период 				= ТекущаяДата();
	Запись.Заказ 				= Объект.Заказ;
	Запись.Ответсвенный 		= ПараметрыСеанса.ТекущийПользователь;
	Запись.ДатаСнятияРезерва 	= НачалоДня(ТекущаяДата()) + 86400 * ПродлитьРезервНа.Срок;
	
	Возврат ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(Запись);
	
КонецФункции

&НаСервере
Функция ИнформацияПоРезервуПолученаИОбновленыЭлементы()
	
	СтруктураРезерва = ПолучитьИзВременногоХранилища(АдресИнфОРезерве);
	Если СтруктураРезерва = Неопределено Тогда
		Возврат Ложь;
		
	Иначе
		
		Если СтруктураРезерва.Состояние = Поток.СостояниеОшибка() Тогда
			ВызватьИсключение СтруктураРезерва.СтрОшибки; КонецЕсли;
		
		Если СтруктураРезерва.Результат.СтатусЗаказаПозволяет Тогда
		
			// Получим данные
			
			ДатаУстановкиРезерва = СтруктураРезерва.Результат.ДатаУстановкиРезерва;
			
			// Установим видимость
			
			Элементы.ГруппаРезервы.Видимость 			= ДатаУстановкиРезерва <> '00010101';
			Элементы.ГруппаПродлитьРезерв.Видимость 	= СтруктураРезерва.Результат.ВозможноПродление;
			
			Если СтруктураРезерва.Результат.ЕстьРезервНаСегодня Тогда
				НадписьРезервДействетДо	= ?(НачалоДня(СтруктураРезерва.Результат.ПоследнийДеньРезерва) > НачалоДня(ТекущаяДата()), Новый ФорматированнаяСтрока("Резерв действет до " + Формат(СтруктураРезерва.Результат.ПоследнийДеньРезерва, "ДЛФ=DD")), Новый ФорматированнаяСтрока("Сегодня резерв будет снят",,WebЦвета.Красный));
			Иначе
				НадписьРезервДействетДо	= Новый ФорматированнаяСтрока("Резерв действовал до " + Формат(СтруктураРезерва.Результат.ПоследнийДеньРезерва, "ДЛФ=DD"),,WebЦвета.ТемноСерый); КонецЕсли; КонецЕсли;
		
		Возврат Истина; КонецЕсли;
	
КонецФункции
&НаСервере
Процедура ОбновитьРезервНаСервереНепосредственно()
	
	// скроем все с глаз
	
	Элементы.ГруппаРезервы.Видимость 		= Ложь;
	Элементы.ГруппаПродлитьРезерв.Видимость = Ложь;
	
	// Обновим и пусть с видимостью режают там
	
	АдресИнфОРезерве = ПоместитьВоВременноеХранилище(Новый Структура("Состояние, Результат", Поток.СостояниеВыполнено(), Поток.ИнформацияОАвтоСнятияРезерва(Объект.Заказ)));
	ИнформацияПоРезервуПолученаИОбновленыЭлементы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИнфОРезервеПостоянно()

	Если ИнформацияПоРезервуПолученаИОбновленыЭлементы() Тогда
		ОтключитьОбработчикОжидания("ПолучитьИнфОРезервеПостоянно"); КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ПолучитьИнфОРезерве()
	
	Если Не ИнформацияПоРезервуПолученаИОбновленыЭлементы() Тогда
		ПодключитьОбработчикОжидания("ПолучитьИнфОРезервеПостоянно", 1) КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ОбновитьИнформациюОСнятииРезерва()
	
	//АдресИнфОРезерве = Поток.ПолучитьИнформациюОВозможностиАвтоснятияРезерваТекПользователя(Объект.Заказ, УникальныйИдентификатор);
	//ПодключитьОбработчикОжидания("ПолучитьИнфОРезерве", 0.1, Истина);
	
	
	Результат = Поток.ИнформацияОАвтоСнятияРезерва(Объект.Заказ);
	
	ДатаУстановкиРезерва = Результат.ДатаУстановкиРезерва;
	
	Элементы.ГруппаРезервы.Видимость 			= ДатаУстановкиРезерва <> '00010101';
	Элементы.ГруппаПродлитьРезерв.Видимость 	= Результат.ВозможноПродление;
	
	Если Результат.ЕстьРезервНаСегодня Тогда
		НадписьРезервДействетДо	= ?(НачалоДня(Результат.ПоследнийДеньРезерва) > НачалоДня(ТекущаяДата()), Новый ФорматированнаяСтрока("Резерв действет до " + Формат(Результат.ПоследнийДеньРезерва, "ДЛФ=DD")), Новый ФорматированнаяСтрока("Сегодня резерв будет снят",,WebЦвета.Красный));
	Иначе
		НадписьРезервДействетДо	= Новый ФорматированнаяСтрока("Резерв действовал до " + Формат(Результат.ПоследнийДеньРезерва, "ДЛФ=DD"),,WebЦвета.ТемноСерый); 
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРезерв(Команда)
	
	ОбновитьРезервНаСервереНепосредственно();
	
КонецПроцедуры

#КонецОбласти

#Область Розничная_заявка

&НаКлиенте
Процедура РозничнаяЗаявкаПриИзменении(Элемент)
	РозничнаяЗаявкаПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура РозничнаяЗаявкаПриИзмененииНаСервере()
	
	Элементы.Касса.Видимость = РозничнаяЗаявка;
	Элементы.Продавец.Видимость = РозничнаяЗаявка;
	
	Касса = ?(РозничнаяЗаявка, ОбщиеФункции.НастройкаПользователя("ПоУмолчанию_Касса"), Неопределено);
	
    Продавец = Неопределено;
	
	ПриИзмененииРеквизитаВлияющегоНаТабличнуюЧасть(СтруктураКолонокТовары,,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КассаПриИзменении(Элемент)
	ПриИзмененииРеквизитаВлияющегоНаТабличнуюЧасть(СтруктураКолонокТовары,,Истина);
КонецПроцедуры

#КонецОбласти

#Область Подбор

&НаСервере
Функция ПоместитьТоварыВХранилище(ТолькоРабочие = Истина) 
	
	
	Возврат ПоместитьВоВременноеХранилище(?(ТолькоРабочие, РабочииТовары(,СтруктураКолонокТовары, Истина), Товары.Выгрузить()), УникальныйИдентификатор);
	
КонецФункции
&НаКлиенте
Процедура ПодборВыполнить(Кнопка = Неопределено, ДополнительныеПараметрыПодбора = Неопределено)
	
	ИдентификаторВремени = ДиалогиСПользователем.НачалоЗамераВремени("Подбор.Открытие", Объект.Ссылка);
	
	ИмяТабличнойЧасти = "Товары";
	
	//ВозможностьДублейСтрок
	КоличествоВРаботе = Товары.Итог("КоличествоСобрано") + Товары.Итог("КоличествоОтгружено") + Товары.Итог("КоличествоОтменено");
	АдресТоваровВХранилище = ПоместитьТоварыВХранилище(?(КоличествоВРаботе>0,Истина,Ложь));
	//АдресТоваровВХранилище = ПоместитьТоварыВХранилище();
	
	ПараметрыПодбора = Новый Структура("АдресТоваровВХранилище", АдресТоваровВХранилище);
	
	ПараметрыПодбора.Вставить("СтруктураКолонокТовары", СтруктураКолонокТовары);
	//ПараметрыПодбора.Вставить("ВидЗапроса", "ОстаткиНоменклатуры");
	//ПараметрыПодбора.Вставить("ВидыЗапросов", "СписокНоменклатуры");
	ПараметрыПодбора.Вставить("Контрагент", 		Контрагент); 	
	ПараметрыПодбора.Вставить("Склад", 			Склад);
	ПараметрыПодбора.Вставить("ТипЦен", 		ТипЦен);
   	ПараметрыПодбора.Вставить("Валюта", 		Валюта);
	ПараметрыПодбора.Вставить("ЦенаВключаетНДС", СуммаВключаетНДС);
	ПараметрыПодбора.Вставить("ГруппироватьОдинаковые", ?(КоличествоВРаботе>0,Истина,Ложь));
	
	// Автосохранение
	АвтосохранениеКлиент.ОткрываетсяПодбор(ПараметрыПодбора, Объект.Ссылка, ЭтаФорма, ПолучитьДамп());
	Если ДополнительныеПараметрыПодбора <> Неопределено Тогда
		КонвертацияТипов.ДобавитьВСтруктуруСтруктуру(ПараметрыПодбора, ДополнительныеПараметрыПодбора) КонецЕсли;
	
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаПодбора", ПараметрыПодбора, Элементы.Товары);
	
	ДиалогиСПользователем.ОкончаниеЗамераВремени(ИдентификаторВремени);
	
КонецПроцедуры
&НаКлиенте
Процедура ТоварыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение <> Неопределено Тогда		
		
		// получаем

		Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
			ПолучитьТоварыИзХранилища(ВыбранноеЗначение.Товары, СтруктураКолонокТовары, ВыбранноеЗначение.ПересчитатьЦену);				
			УдалитьИзВременногоХранилища(ВыбранноеЗначение.Товары); 	// заметаем следы
		Иначе
			ПолучитьТоварыИзХранилища(ВыбранноеЗначение, СтруктураКолонокТовары);	
			УдалитьИзВременногоХранилища(ВыбранноеЗначение); 	// заметаем следы
		КонецЕсли;
		

		Модифицированность = Истина;
		УправлениеВидимостьюДоступностью();
		
		ФункцииФормДокументов.ОбновитьПодвал(ЭтаФорма, Элементы, Всего, СтруктураКолонокТовары,,  "ВсегоНДС", ВсегоНДС);
		СуммаБезНДС(Всего, ВсегоНДС);
	КонецЕсли;
	
КонецПроцедуры
&НаСервере
Процедура ПолучитьТоварыИзХранилища(АдресТоваровВХранилище, СтруктураКолонокТовары, ПересчитатьЦену = Истина)
	
	СклеитьТаблицыТоваров(ПолучитьИзВременногоХранилища(АдресТоваровВХранилище), СтруктураКолонокТовары, ПересчитатьЦену);
				
КонецПроцедуры

#КонецОбласти

#Область Информация_о_товаре

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	текДанные = Элемент.ТекущиеДанные;
	Если текДанные <> Неопределено Тогда
	
		// Если минимальное значение больше нуля значит изменять товар уже нельзя
		Элементы.Номенклатура.ТолькоПросмотр = Элемент.ТекущиеДанные.КоличествоМинимум;

		
		// информация о товаре
		ОбработатьОтображениеИнформацииОТоваре(); КонецЕсли;
	 	
КонецПроцедуры
&НаКлиенте
Процедура ОбработатьОтображениеИнформацииОТоваре() Экспорт
	РаботаСНоменклатуройКлиент.ОбработатьОтображениеИнформацииОТоваре(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ИнфТовараТекстHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	РаботаСНоменклатуройКлиент.ИнфТовараТекстHTMLПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры
&НаКлиенте
Процедура ИнфТовараЗаголовокHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	РаботаСНоменклатуройКлиент.ИнфТовараЗаголовокHTMLПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры

 &НаКлиенте
Процедура ПоказатьСкрытьИнфОТоваре(Команда)
	РаботаСНоменклатуройКлиент.ПоказатьСкрытьИнфОТоваре(ЭтаФорма);
КонецПроцедуры
&НаКлиенте
Процедура НастройкаИнфОТоваре(Команда) 
	РаботаСНоменклатуройКлиент.НастройкаИнфОТоваре(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкуОИТ(Команда)
	ОткрытьФорму("ОбщаяФорма.НастройкаОперативнойИнформацииОТоваре", , ЭтаФорма);
КонецПроцедуры

#КонецОбласти

#Область Корзина

#Если Не ВебКлиент Тогда
&НаСервере
Функция ПоложитьВКорзинуНаСервере(ВыделенныеИндексы, ИмяКомпа, КолВКорзине)
	
	Возврат МодульКорзины.ПоложитьТоварВКорзину(Товары, ВыделенныеИндексы, ИмяКомпа, КолВКорзине);
	
КонецФункции
#КонецЕсли

#Если Не ВебКлиент Тогда
&НаКлиенте
Процедура ДобавитьВКорзину(Команда)
	
	ВыделенныеИндексы 	= МодульКорзины.ПолучитьВыделенныеСтрокиТоваров(Элементы.Товары, Товары);
	КолВКорзине 		= 0;
	КолТовара			= ВыделенныеИндексы.Количество();
	
	
	Если КолТовара Тогда
		
		Если ПоложитьВКорзинуНаСервере(ВыделенныеИндексы, ИмяКомпьютера(), КолВКорзине) Тогда
			МодульКорзины.ОповеститьОПомещенииТовара(КолТовара, КолВКорзине);
		КонецЕсли;
		
	Иначе
		
		МодульКорзины.ОповеститьЧтоНечегоДобавлять();
				
	КонецЕсли;
	
КонецПроцедуры
#КонецЕсли

#Если Не ВебКлиент Тогда
&НаСервере
Процедура ДобавитьИзКорзиныНаСервере(ИмяКомпа, СтруктураКолонокТовары, КолСтрок, ПересчитатьЦену = Истина)
	
	МодульКорзины.ПолучитьТоварИзКорзины(Элементы.Товары, Товары, СтруктураКолонокТовары, ИмяКомпа, КолСтрок, ПересчитатьЦену, СпособРазмещенияБезЗаказа);
	
КонецПроцедуры
#КонецЕсли

#Если Не ВебКлиент Тогда
&НаКлиенте
Процедура ВставитьИзКорзины(Команда)
	
	Если СтруктураКолонокТовары.ЕстьЦена Тогда ПоказатьВопрос(Новый ОписаниеОповещения("ВставитьИзКорзиныПослеОтвета", ЭтаФорма), "Расчитать цену для товара?", РежимДиалогаВопрос.ДаНет); КонецЕсли;

КонецПроцедуры
#КонецЕсли

#Если Не ВебКлиент Тогда
&НаКлиенте
Процедура ВставитьИзКорзиныПослеОтвета(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда Возврат; КонецЕсли;
	
	КолСтрок = 0;
	ДобавитьИзКорзиныНаСервере(ИмяКомпьютера(), СтруктураКолонокТовары, КолСтрок, Результат = КодВозвратаДиалога.Да);
	
	Если КолСтрок Тогда
		
		МодульКорзины.ОповеститьОВставкеТовараВДокумент(КолСтрок, Товары.Количество());
		
	Иначе
		
		МодульКорзины.ОповеститьЧтоНечегоДобавлять();
		
	КонецЕсли;
	
	Модифицированность = Истина;
	УправлениеВидимостьюДоступностью();
	
	ФункцииФормДокументов.ОбновитьПодвал(ЭтаФорма, Элементы, Всего, СтруктураКолонокТовары,,  "ВсегоНДС", ВсегоНДС);
	СуммаБезНДС(Всего, ВсегоНДС);	
	
КонецПроцедуры
#КонецЕсли

#Если Не ВебКлиент Тогда
&НаКлиенте
Процедура РедактироватьТоварВКорзине(Команда)
	
	ОткрытьФорму("РегистрСведений.Корзина.Форма.Форма");
	
КонецПроцедуры
#КонецЕсли

#Если Не ВебКлиент Тогда
&НаСервере
Функция ОчиститьНаСервере(ИмяКомпа)
	
	Возврат МодульКорзины.ОчиститьКорзину(ИмяКомпа);
	
КонецФункции
#КонецЕсли

#Если Не ВебКлиент Тогда
&НаКлиенте
Процедура ОчиститьКорзину(Команда)
	
	Если ОчиститьНаСервере(ИмяКомпьютера()) Тогда
		
		МодульКорзины.ОповеститьЧтоКорзинаОчищена();
		
	КонецЕсли;
	
КонецПроцедуры
#КонецЕсли

#КонецОбласти

#Область Автосохранение

&НаСервере
Процедура ЗагрузитьДанныеАвтосохранения(ДанныеДляПодбора)
	
	АвтосохранениеСервер.СчитатьДанныеФормыИУдалитьСохранение(ЭтаФорма, ДанныеДляПодбора)
	
КонецПроцедуры
&НаСервере
Функция АвтосохранениеСервер(ЕстьДамп)
	
	Возврат АвтосохранениеСервер.СохранитьДампФормы(ЭтаФорма, ЕстьДамп);
	
КонецФункции
&НаКлиенте
Процедура Автосохранение()
	
	Перем ЕстьДамп;
	
	Сохранилось = АвтосохранениеСервер(ЕстьДамп);
	
	АвтосохранениеКлиент.ПроизошлоАвтосохранение(Сохранилось, ЕстьДамп, Объект.Ссылка);
	
КонецПроцедуры
&НаСервере
Функция ПолучитьДамп()
	
	Возврат АвтосохранениеСервер.ПолучитьДамп(ЭтаФорма);

КонецФункции


#КонецОбласти

#Область Прикрепленные_файлы

&НаКлиенте
Процедура УдалитьПрикрепленныеФайлыНажатие(Элемент)
	
	ПрикрепленныеФайлыКлиент.УдалитьНажатие(Объект.Заказ, ЭтаФорма, Элемент);
	
КонецПроцедуры
&НаКлиенте
Процедура ПрикрепленныеФайлыНажатиеСкрепка(Элемент)
	
	ПрикрепленныеФайлыКлиент.НажатиеСкрепка(Объект.Заказ, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПрикрепленныйФайл(Элемент)
	
	ПрикрепленныеФайлыКлиент.ОткрытьПрикрепленныйФайл(Элемент.Имя);
	
КонецПроцедуры
&НаКлиенте
Процедура ПоказатьПрикрееленныеФайлы(Элемент)
	
	ПрикрепленныеФайлыКлиент.ПоказатьПрикрепленныеФайлы(Объект.Заказ, ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьПрикрепленныхФайловНаСервере()
	
	ПрикрепленныеФайлы.Иницилизировать(Объект.Заказ, ЭтаФорма);
	
КонецПроцедуры
&НаКлиенте
Процедура ОбновитьВидимостьПрикрепленныхФайлов() Экспорт
	
	ОбновитьВидимостьПрикрепленныхФайловНаСервере();
	
КонецПроцедуры


#КонецОбласти

#Область Оповещения

&НаКлиенте
Процедура УправлениеПодпискойОповещений(Элемент)
	
	СобытияКлиент.УправлениеПодпискойСФормыОбъектаНажатие(ЭтаФорма, Элемент, "Заказ", Объект.Заказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстПодпискиНажатие(Элемент)
	
	СобытияКлиент.ТекстПодпискиФормыОбъектаНажатие(ЭтаФорма, Элемент, Объект.Заказ);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТекстОповещенийНаСервере()
	
	События.ОбновитьТекстПодпискиНаФорме(ЭтаФорма, Объект.Заказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТекстОповещений() Экспорт
	
	ОбновитьТекстОповещенийНаСервере()
	
КонецПроцедуры
&НаКлиенте
Процедура ТекстПодпискиЗакрытиеФормы(РезЗакрытия, ДопПараметры) Экспорт
	
	ОбновитьТекстОповещенийНаСервере()
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьЦенуНаПроцентНаСервере()
	КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЦенуНаПроцент(Команда)
	
	АдресТоваровВХранилище = ПоместитьТоварыВХранилище(Истина);
	ОткрытьФорму("Документ.ЗаказПокупателя.Форма.ФормаИзменитьЦенуНаПроцент", Новый Структура("АдресТоваровВХранилище", АдресТоваровВХранилище), ЭтаФорма,,,, Новый ОписаниеОповещения("ИзменитьЦенуНаПроцентОкончаниеВыбора", ЭтаФорма));	


КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьЦены(АдресТоваровВХранилище, СтруктураКолонокТовары)
	
	Таблица = ПолучитьИзВременногоХранилища(АдресТоваровВХранилище);
	
	Для Каждого Строка ИЗ Таблица Цикл
		
		Строки = Товары.НайтиСтроки(Новый Структура("Номенклатура, Цена", Строка.Номенклатура, Строка.ЦенаСтарая));
		Для Каждого СтрокаТовары ИЗ Строки Цикл
			
			СтрокаТовары.Цена = Строка.Цена;
			ФункцииФормДокументов.ЦенаПриИзменении(Элементы.Товары, СтруктураКолонокТовары, СтрокаТовары);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ФункцииФормДокументов.ОбновитьПодвал(ЭтаФорма, Элементы, Всего, СтруктураКолонокТовары,, "ВсегоНДС", ВсегоНДС);
	СуммаБезНДС(Всего, ВсегоНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЦенуНаПроцентОкончаниеВыбора(Результат, Параметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		ПерезаполнитьЦены(Результат, СтруктураКолонокТовары);
		
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область Остатки

&НаСервере
Функция ПолучитьСписокСкладовСОстатками()
	
	Возврат РаботаСНоменклатурой.ПолучитьСписокСкладовСОстатками(Товары.Выгрузить(,"Номенклатура").ВыгрузитьКолонку("Номенклатура"), Объект.Заказ);
	
КонецФункции
&НаКлиенте
Процедура Остатки(Команда)
	
	ПолучитьСписокСкладовСОстатками().ПоказатьОтметкуЭлементов(Новый ОписаниеОповещения("ОтмеченыСкладыОстатков", ЭтаФорма), "Выбор складов");
	
КонецПроцедуры
&НаСервере
Процедура ЗаполнитьОстатки(Склады)
	
	РаботаСНоменклатурой.ЗаполнитьОстатки(Склады, Товары.Выгрузить(,"Номенклатура").ВыгрузитьКолонку("Номенклатура"), Объект.Заказ, Товары);
	
КонецПроцедуры
&НаКлиенте
Процедура ОтмеченыСкладыОстатков(Список, ДопПараметры) Экспорт
	
	Если Список <> Неопределено Тогда
		
		Склады = КонвертацияТипов.ПолучитьОтмеченныеЗначенияСписка(Список);
		Если Склады.Количество() Тогда
		
			ЗаполнитьОстатки(Склады); КонецЕсли; КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОператорПриИзменении(Элемент)
	ОператорПриИзмененииНаСервере();
КонецПроцедуры
&НаСервере
Процедура ОператорПриИзмененииНаСервере()
	
	ВОЗВРАТ; // фиг вам (silber)
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь",Оператор);
	Запрос.УстановитьПараметр("Настройка",ПланыВидовХарактеристик.НастройкиПользователя.ПоУмолчанию_Грузоотправитель);
	Запрос.Текст="ВЫБРАТЬ
	             |	ЗначенияНастроекПользователя.Значение 
	             |ИЗ
	             |	РегистрСведений.ЗначенияНастроекПользователя КАК ЗначенияНастроекПользователя
	             |ГДЕ
	             |	ЗначенияНастроекПользователя.Пользователь = &Пользователь
	             |	И ЗначенияНастроекПользователя.Настройка = &Настройка";
	Рез=Запрос.Выполнить();
	Если Не Рез.Пустой() Тогда
		а=Рез.Выгрузить()[0];
		Грузоотправитель = а.Значение;
	КонецЕсли;
	
КонецПроцедуры
Функция ПолучитьСписокПоРоли(Роль)
   Запрос = Новый Запрос();
   Запрос.Текст =  "ВЫБРАТЬ
                   |	РолиПользователей.Пользователь
                   |ИЗ
                   |	РегистрСведений.РолиПользователей КАК РолиПользователей
                   |ГДЕ
                   |	РолиПользователей.Роль = &Роль";
   Запрос.УстановитьПараметр("Роль", Роль);	
   ТаблицаПродавцов = Запрос.Выполнить().Выгрузить();
   Возврат ТаблицаПродавцов.ВыгрузитьКолонку("Пользователь");	
КонецФункции


&НаКлиенте
Процедура АдресДоставкиНовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	ОповещениеВыбора=Новый ОписаниеОповещения("ОповещениеОЗакрытииФормыВыбораАдреса",ЭтаФорма);
	МассивВидовКИ=ПолучитьМассивВидовКИ("Адрес");
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(Контрагент);
	МассивОбъектов.Добавить(Грузополучатель);
	Отбор = Новый Структура("Объект,Вид", МассивОбъектов, МассивВидовКИ);
	Парам=Новый Структура("Отбор,ОсновнойОбъект",Отбор,Контрагент);
	ОткрытьФорму("РегистрСведений.ПредставлениеКонтактнойИнформации.Форма.ФормаВыбора", Парам,,,,,ОповещениеВыбора);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМассивВидовКИ(Вид)
	Запрос=Новый Запрос;
	Запрос.Текст="выбрать ссылка из Справочник.ВидыКонтактнойИнформации ГДЕ Ссылка в иерархии(Значение(Справочник.ВидыКонтактнойИнформации."+Вид+"))";
	МассивВидовКИ=Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Возврат МассивВидовКИ;
КонецФункции

&НаКлиенте 
Процедура ОповещениеОЗакрытииФормыВыбораАдреса(РезультатЗакрытия,ДополнительныеПараметры) Экспорт
	Если Не РезультатЗакрытия = Неопределено Тогда
		ВыборАдресаДоставкиНов(РезультатЗакрытия);
	КонецЕсли;	
КонецПроцедуры

&НаСервере 
Процедура ВыборАдресаДоставкиНов(РезультатЗакрытия) Экспорт
	МЗ = РегистрыСведений.ПредставлениеКонтактнойИнформации.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МЗ,РезультатЗакрытия);
	МЗ.Прочитать();
	АдресДоставкиНов = МЗ.Представление;
КонецПроцедуры	

&НаКлиенте
Процедура ТелефонКонтактногоЛицаДоставкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	ОповещениеВыбора=Новый ОписаниеОповещения("ОповещениеОЗакрытииФормыВыбораТелефона",ЭтаФорма);
	МассивВидовКИ=ПолучитьМассивВидовКИ("Телефон");
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(Контрагент);
	МассивОбъектов.Добавить(Грузополучатель);
	МассивОбъектов.Добавить(КонтактноеЛицо);
	Отбор = Новый Структура("Объект,Вид", МассивОбъектов, МассивВидовКИ);
	Парам=Новый Структура("Отбор,ОсновнойОбъект",Отбор,КонтактноеЛицо);
	ОткрытьФорму("РегистрСведений.ПредставлениеКонтактнойИнформации.Форма.ФормаВыбора", Парам,,,,,ОповещениеВыбора);

КонецПроцедуры

&НаКлиенте 
Процедура ОповещениеОЗакрытииФормыВыбораТелефона(РезультатЗакрытия,ДополнительныеПараметры) Экспорт
	Если Не РезультатЗакрытия = Неопределено Тогда
		ВыборТелефонаКонтактногоЛица(РезультатЗакрытия);
	КонецЕсли;	
КонецПроцедуры

&НаСервере 
Процедура ВыборТелефонаКонтактногоЛица(РезультатЗакрытия) Экспорт
	МЗ = РегистрыСведений.ПредставлениеКонтактнойИнформации.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МЗ,РезультатЗакрытия);
	МЗ.Прочитать();
	ТелефонКонтактногоЛицаДоставки = МЗ.Представление;
КонецПроцедуры


&НаКлиенте
Процедура ВариантДоставкиНовПриИзменении(Элемент)
	УправлениеВидимостьюДоступностьюНаКлиенте();	
КонецПроцедуры


&НаКлиенте
Процедура ОбновитьСостояниеТоваров(Команда)
	ОбновитьСостояниеТоваровНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостояниеТоваровНаСервере()
	ТЗ = Заказы.ПолучитьСостояниеТоваров(Объект.Заказ);
	ТЗ.Сортировать("Артикул");
	СостоянияТоваров.Загрузить(ТЗ);
КонецПроцедуры	

