// f

Функция ПредставлениеЗадачи(Задача)
	
	Заказ = Задача.БизнесПроцесс.Заказ;
    
	НомерЗаказа   = СокрЛП(Заказ.Номер);
	Пока Лев(НомерЗаказа, 1)="0" Цикл   			  // удаление ведущих нулей
		НомерЗаказа = Сред(НомерЗаказа, 2);
	КонецЦикла;

	Возврат Задача.Наименование + " № "  + НомерЗаказа + " (" + Формат(Заказ.Сумма, "Ч15.2,") + ") " + ?(ТипЗнч(Заказ) = Тип("ДокументСсылка.ИнтернетЗаказПокупателя"), Заказ.ПользовательИнтернет, ?(Заказ.ОтветственноеЛицо.Пустая(), Заказ.Контрагент, Заказ.ОтветственноеЛицо));
	
КонецФункции  


Процедура СтартПередСтартом(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	Если Не Заказы.УстановитьСостояниеЗаказа(Заказ, Перечисления.СостоянияЗаказа.Черновик) Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ФормированиеЗаказаПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	Если Не Заказы.УстановитьСостояниеЗаказа(Заказ, Перечисления.СостоянияЗаказа.ВРаботе) Тогда
			
		Отказ = Истина;
			
	КонецЕсли;
	
	// Если впереди уже есть невыполненая задача сборки тогда установим ей статус выполненной
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	СУММА(ВЫБОР КОГДА Выполнена ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) Выполненных,
	|	СУММА(ВЫБОР КОГДА Выполнена ТОГДА 0 ИНАЧЕ 1 КОНЕЦ) НеВыполненных
	|ИЗ			Задача.ЗадачаПользователю
	|ГДЕ		БизнесПроцесс = &БизнесПроцесс
	//|	Не Выполнена И
	//|	Не ПометкаУдаления И
	//|	ТочкаМаршрута = &ТочкаСборкаЗаказа
	|");
	
	Запрос.УстановитьПараметр("БизнесПроцесс", 		Ссылка);
	//Запрос.УстановитьПараметр("ТочкаСборкаЗаказа", 	БизнесПроцессы.ЗаявкаПокупателя.ТочкиМаршрута.СборкаЗаказа);
	//Запрос.УстановитьПараметр("ТочкаСборкаЗаказа", 	БизнесПроцессы.ЗаявкаПокупателя.ТочкиМаршрута.ФормированиеЗаказа);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если 	Выборка.Следующий() И
			Выборка.Выполненных = 1 И
			Выборка.НеВыполненных = 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		ФормируемыеЗадачи.Очистить();
		
	КонецЕсли;
	
КонецПроцедуры
Процедура ФормированиеЗаказаПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	
	COMПользователь = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор("9178cb51-1157-11df-94a9-0015175303fd"));
	
	Для Каждого Задача Из ФормируемыеЗадачи Цикл
		
		Задача.Наименование = ПредставлениеЗадачи(Задача);
		Задача.Пользователь = ?(Заказ.Автор = COMПользователь, ПараметрыСеанса.ТекущийПользователь, Заказ.Автор);
		
	КонецЦикла;
	
КонецПроцедуры


Процедура ПеремещениеТоваровПередСозданиемВложенныхБизнесПроцессов(ТочкаМаршрутаБизнесПроцесса, ФормируемыеБизнесПроцессы, Отказ)
	
	ТаблицаПеремещений = БизнесПроцессы.ЗаявкаПокупателя.ПолучитьТаблицуТоваров(Ссылка);
	ТаблицаПеремещений.Свернуть("Размещение");
	
	Склад = Заказ.Склад;
	
	Для Каждого СтрокаСклада Из ТаблицаПеремещений Цикл
		Если СтрокаСклада.Размещение <> Склад Тогда
		
			// Создадим нам личные процессы
			
			НовПроцесс = БизнесПроцессы.ПеремещениеТоваров.СоздатьБизнесПроцесс();
			НовПроцесс.Дата 			= ТекущаяДата();
			НовПроцесс.СкладОтправитель = СтрокаСклада.Размещение;
			НовПроцесс.СкладПолучатель 	= Склад;
			НовПроцесс.Заказчик 		= Ссылка;
			
			ФормируемыеБизнесПроцессы.Добавить(НовПроцесс);
			
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// ТИПОВЫЕ

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// проверим что заказ не отностится больше ни к какому другому бизнес процессу
	
	Если Не Заказ.Пустая() Тогда
	
		ТекстОшибки = "";
		
		Запрос = Новый Запрос("ВЫБРАТЬ Ссылка ИЗ БизнесПроцесс.ЗаявкаПокупателя ГДЕ Ссылка <> &Ссылка И Заказ = &Заказ");
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("Заказ", 	Заказ);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ТекстОшибки = ТекстОшибки + ?(ТекстОшибки = "","",", ") + Выборка.Ссылка;
			
		КонецЦикла;
		
		Если ТекстОшибки <> "" Тогда
			ОбщиеФункции.СообщитьТекст("Не возможно записать
				|Данный заказ уже относится к " + ТекстОшибки);
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанных = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанных = Тип("ДокументСсылка.КоммерческоеПредложение") Тогда
		
		Запрос = Новый Запрос("
	
		// Шапка
	
		|ВЫБРАТЬ 	Номер, Дата, Контрагент, Ответственный, СуммаВключаетНДС, Валюта, Организация
		|ИЗ			Документ.КоммерческоеПредложение
		|ГДЕ		Ссылка  = &Ссылка
		|;
	
		// Таблица
	
		|ВЫБРАТЬ	
		|	Ссылка, 
		|	НомерСтроки, 
		|	Всего, 
		|	ВЫБОР КОГДА Ссылка.СуммаВключаетНДС ТОГДА Сумма - СуммаНДС ИНАЧЕ Сумма КОНЕЦ СуммаБезНДС, 
		|	Номенклатура, 
		|	Цена, 
		|	Количество, 
		|	Сумма, 
		|	СуммаНДС
		|ИЗ
		|	Документ.КоммерческоеПредложение.Товары 
		|ГДЕ 
		|	Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО НомерСтроки
		|");
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
		Пакет = Запрос.ВыполнитьПакет();
		
		// Шапка
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, КонвертацияТипов.ПолучитьСтруктуруИзСТрокиТаблицыЗначений(Пакет[0].Выгрузить()));
		
		// Таблица
		
		//ТипТовар 	= Тип("СправочникСсылка.Номенклатура");
		//Выборка 	= Пакет[1].Выбрать();
		//Пока Выборка.Следующий() Цикл
		//	
		//	Если ТипЗнч(Выборка.Номенклатура) <> ТипТовар Тогда
		//		ОбщиеФункции.СообщитьТекст("Строка №" + Выборка.НомерСтроки + ": товар пропущен так как это текст - " + Выборка.Номенклатура);
		//	Иначе
		//		
		//		
		//		
		//	КонецЕсли;
		//	
		//КонецЦикла;

		
	ИначеЕсли ТипДанных = Тип("ДокументСсылка.ЗаказПокупателя") Тогда

		Заказ = ДанныеЗаполнения;
		
	//	Запрос = Новый Запрос("
	//	|ВЫБРАТЬ 	
	//	|	Организация, 
	//	|	БанковскийСчетОрганизации, 
	//	|	БанковскийСчетПартнера, 
	//	|	Склад, 
	//	|	Партнер, 
	//	|	Контрагент, 
	//	|	ТипЦен, 
	//	|	Грузополучатель, 
	//	|	Грузоотправитель
	//	|ИЗ
	//	|	Документ.ЗаказПокупателя
	//	|ГДЕ
	//	|	Ссылка = &Заказ
	//	|");
	//
	//	Запрос.УстановитьПараметр("Заказ", ДанныеЗаполнения);
	//	ЗаполнитьЗначенияСвойств(ЭтотОбъект,Запрос.Выполнить().Выгрузить());

	КонецЕсли;
	
КонецПроцедуры


// СБОРКА

Процедура СборкаЗаказаПередСозданиемВложенныхБизнесПроцессов(ТочкаМаршрутаБизнесПроцесса, ФормируемыеБизнесПроцессы, Отказ)
		
	НовПроцесс = БизнесПроцессы.СборкаЗаказа.СоздатьБизнесПроцесс();
	НовПроцесс.Дата 			= ТекущаяДата();
	//НовПроцесс.ДатаПервойСборки = БизнесПроцессы.СборкаЗаказа.ПолучитьДатуПервойСборкиЗаказа(Заказ);
	НовПроцесс.Заказ 			= Заказ;
	НовПроцесс.Склад 			= Заказ.Склад;
	НовПроцесс.ЯчеистаяСборка 	= Заказ.Склад.Ячеестый;
	
	ФормируемыеБизнесПроцессы.Добавить(НовПроцесс);
	
КонецПроцедуры


// УСЛОВИЯ

Процедура УсловиеСобранПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = Истина;
	
КонецПроцедуры
Процедура УсловиеОтменыПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = Заказы.ПолучитьСостояниеЗаказа(Заказ) = Перечисления.СостоянияЗаказа.Отменен;
	
КонецПроцедуры
Процедура УсловиеЗаказОтгруженПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = Заказы.ЗаказОтработал(Заказ);
	
	Если Результат Тогда
	
		Заказы.УстановитьСостояниеЗаказа(Заказ, Перечисления.СостоянияЗаказа.Отгружен);
		
	КонецЕсли;
	
КонецПроцедуры
Процедура УсловиеБыстраяПродажаПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	//Результат = ЭтоБыстраяПродажа;
	
	//этот флаг ставится в 2-х случаях: либо если сразу была полная отгрузка (тогда условие корректно) либо если была частичная быстрая продажа.
	//для второго случая такое условие некорректно. Процесс необходимо завершать только если была полная отгрузка.
	
	Результат = ВсёОтгружено();
	
КонецПроцедуры

Функция ВсёОтгружено()
	
	Запрос = Новый Запрос("Выбрать КоличествоОстаток,СуммаОстаток из РегистрНакопления.ЗаказыПокупателей.Остатки ГДЕ ЗаказПокупателя=&ЗаказПокупателя");
	Запрос.УстановитьПараметр("ЗаказПокупателя",Заказ);
	Рез=Запрос.Выполнить();
	Возврат ?(Рез.Пустой(),Истина, Ложь);
	
КонецФункции	

Процедура ТребуютсяПеремещенияПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = ЛОЖЬ;
	ВОЗВРАТ;
	
	// ОТКЛЮЧЕНО
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 	ЗаказПокупателя 
	|ИЗ 		РегистрНакопления.ЗаказыПокупателей.Остатки(,
	|					ЗаказПокупателя = &Заказ И
	|					Размещение <> &ПустойСклад И
	|					Размещение <> &Склад
	|														)
	|");
	
	Запрос.УстановитьПараметр("ПустойСклад", 	Справочники.Склады.ПустаяСсылка());
	Запрос.УстановитьПараметр("Склад", 			Заказ.Склад);
	Запрос.УстановитьПараметр("Заказ", 			Заказ);
	
	Результат = Не Запрос.Выполнить().Пустой();
	
КонецПроцедуры


Процедура ПриЗаписи(Отказ)
	
	// Проверим чтобы заказ был привязан токо к одномк процессу
	
	Запрос = Новый Запрос("ВЫБРАТЬ ИСТИНА ИЗ БизнесПроцесс.ЗаявкаПокупателя ГДЕ Заказ = &Заказ И Ссылка <> &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Заказ", 	Заказ);
	
	Если Не Запрос.Выполнить().Пустой() Тогда
		
		ОбщиеФункции.СообщитьТекст("Заказ не может быть привязан к новому БП, он уже связан с другим БП");
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Завершение2ПриЗавершении(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	Если Не Заказы.УстановитьСостояниеЗаказа(Заказ, Перечисления.СостоянияЗаказа.Отгружен) Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗакрытиеЗаказаОбработка(ТочкаМаршрутаБизнесПроцесса)
	
	//Закрытие заказа всегда делаем корректировкой вне зависимости от типа "старый" или "новый", чтобы был виден оригинал и можно было его восстановить
	
	ДокПризрак = Документы.ЗаказПокупателя.СоздатьДокумент();
	
	
	ТаблицаИзменений = КонвертацияТипов.ПолучитьТаблицуРазницуДокументаИРегистраОстатков(
								ДокПризрак.Товары.Выгрузить(), 
								"ЗаказыПокупателей",
								"Номенклатура, Упаковка, Цена, Размещение, ПроцентРучнойСкидки, ПроцентАвтоматическойСкидки, СтавкаНДС, Акция",
								"Количество, Сумма",
								Новый Структура("ЗаказПокупателя", Заказ));
		
							
	ТаблицаИзмененийРез = Заказы.ПодготовитьРезревыКСписанию(ДокПризрак.РазмещениеТоваров.Выгрузить(), Заказ);							
	
	Если ТаблицаИзменений.Количество() Или ТаблицаИзмененийРез.Количество() Тогда
		
		ТаблицаСостоянияТоваров = Заказы.ПолучитьСостояниеТоваров(Ссылка);
		
		// Шапка
		
		НовДок = Документы.КорректировкаЗаказаПокупателя.СоздатьДокумент();
		НовДок.Комментарий = "Заказ закрыт "+ТекущаяДата();
		НовДок.ЭтоЗакрытиеЗаказа=истина;
		НовДок.Заказ 	= Заказ;
		НовДок.Дата 	= ТекущаяДата();
		
		// Таблица
		
		НовДок.Товары.Загрузить(ТаблицаИзменений);
		
		//таблица Размещение заполняется только для новый заказов
		Если Заказ.СпособРазмещенияБезЗаказа Тогда
			НовДок.РазмещениеТоваров.Загрузить(ТаблицаИзмененийРез);
		КонецЕсли;	
		
		
		// Проведение
		
		НАЧАТЬТРАНЗАКЦИЮ();
		
		
		//Корректировка
		Если Не ПроведенияДокументов.ПровестиДокумент(НовДок) Тогда
			
			ОТМЕНИТЬТРАНЗАКЦИЮ();
			ВызватьИсключение
			"Ошибка формирования закрывающей корректировки заказа!"; КонецЕсли;
		
		// Закроем сборки
		//закрытие перенесено в Задача_ОтменитьСборку
		
		//Запрос = Новый Запрос;
		//Запрос.Текст = "Выбрать Склад, СборочныйЛист, Номенклатура, КоличествоОстаток Собрано из РегистрНакопления.ТоварыСобранные.Остатки(, Заказ = &Заказ) Итоги По СборочныйЛист,Склад";
		//Запрос.УстановитьПараметр("Заказ", Заказ);
		//Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		//
		//Пока Выборка.Следующий() Цикл
		//	Выборка2 = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		//	Пока Выборка2.Следующий() Цикл
		//		
		//		Сборка = Документы.ОтменаСборки.СоздатьДокумент();
		//		Сборка.Дата 	= ТекущаяДата();
		//		Сборка.Заказ 	= Заказ;
		//		Сборка.Склад 	= Выборка2.Склад;
		//		Сборка.СборочныйЛист = Выборка2.СборочныйЛист;
		//		
		//		ВыборкаНом = Выборка2.Выбрать();
		//		Пока ВыборкаНом.Следующий() Цикл
		//			Стр = Сборка.Товары.Добавить();
		//			ЗаполнитьЗначенияСвойств(Стр,ВыборкаНом);
		//		КонецЦикла;
		//	КонецЦикла;
		//КонецЦикла;
		
		
		
		//Сборка = Документы.ОтменаСборки.СоздатьДокумент();
		//Сборка.Дата 	= ТекущаяДата();
		//Сборка.Заказ 	= Заказ;
		//Сборка.Склад 	= Заказ.Склад;
		//
		//СостояниеСобирается = Перечисления.СостояниеСборкиЗаказа.Собирается;
		//СостояниеСобрано 	= Перечисления.СостояниеСборкиЗаказа.Собрано;
		//ТаблицаСборки 		= ТаблицаСостоянияТоваров.СкопироватьКолонки();
		//
		//// Соберем таблицу сборки
		//
		//Для Каждого Строка Из ТаблицаСостоянияТоваров Цикл
		//	
		//	ИмяПоля = ?(Строка.Состояние = СостояниеСобирается, "ВСборке", ?(Строка.Состояние = СостояниеСобрано,"Собрано", Неопределено));
		//	
		//	Если ИмяПоля <> Неопределено Тогда
		//		НовСтрока = Сборка.Товары.Добавить();
		//		ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
		//		НовСтрока[ИмяПоля] = Строка.Количество; КонецЕсли; КонецЦикла;
		
		// Запишем сборку
		//
		//Если 	Сборка.Товары.Количество() И
		//		Не ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(Сборка, РежимЗаписиДокумента.Проведение) Тогда
		//		
		//		ОТМЕНИТЬТРАНЗАКЦИЮ();
		//		ВызватьИсключение
		//		"Ошибка отмены собранного товара!"; КонецЕсли;
		
		// Если были отгруженные товары тогда сделаем их отгруженными
		
		Если 	(	Заказ.СпособРазмещенияБезЗаказа И
					Заказы.ПолучитьСостояниеТоваров(Ссылка).Найти(Перечисления.СостояниеСборкиЗаказа.Отгружен, "Состояние") <> Неопределено) ИЛИ
				(	Не Заказ.СпособРазмещенияБезЗаказа И
					БизнесПроцессы.ЗаявкаПокупателя.ПолучитьТаблицуТоваров(Ссылка).Найти(Истина, "Отгружено") <> Неопределено) Тогда
					
			Заказы.УстановитьСостояниеЗаказа(Заказ, Перечисления.СостоянияЗаказа.Отгружен); КонецЕсли;
		
		ЗАФИКСИРОВАТЬТРАНЗАКЦИЮ(); КонецЕсли;						
	
КонецПроцедуры

Процедура ЕстьЧтоОтменитьВСборкеПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "Выбрать Склад, СборочныйЛист, Номенклатура, КоличествоОстаток Собрано из РегистрНакопления.ТоварыСобранные.Остатки(, Заказ = &Заказ)";
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Рез = Запрос.Выполнить();
	
	Результат = НЕ Рез.Пустой();
	
	//Результат = Заказы.ПолучитьСостояниеТоваровПоСтатусу(Ссылка,,Перечисления.СостояниеСборкиЗаказа.ОтменаСборки).Количество();
	
КонецПроцедуры

Процедура ОтменаСборкиПриСозданииВложенныхБизнесПроцессов(ТочкаМаршрутаБизнесПроцесса, ФормируемыеБизнесПроцессы, Отказ)
	
	Запрос 	= Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка ИЗ БизнесПроцесс.СборкаЗаказа ГДЕ Заказ = &Заказ");
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Для Каждого Процесс Из ФормируемыеБизнесПроцессы Цикл
		
		Процесс.Сборка	= Выборка.Ссылка; // первая попавшиеся, пофигу какая лижбы заказ был
		Процесс.Заказ 	= Заказ; КонецЦикла;
	
КонецПроцедуры






