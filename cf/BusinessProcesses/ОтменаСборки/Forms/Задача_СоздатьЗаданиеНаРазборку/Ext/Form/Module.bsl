&НаКлиенте
Перем МассивКомментариев Экспорт;


&НаСервере
Функция УстановитьСостояниеИВыполнитьЗадачу(ИмяСостояния)
	
	Если Заказы.УстановитьСостояниеЗаказа(Объект.Заказ, Перечисления.СостоянияЗаказа[ИмяСостояния]) Тогда
	
		Возврат Записать(Новый Структура("ВыполнитьЗадачу",Истина));
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции


// ТИПОВЫЕ

&НаКлиенте
Процедура ДекорацияДобавитьКомментарийНажатие(Элемент)
	
	Элементы.ГруппаДобавитьКомментарий.Видимость 		= Ложь;
	Элементы.ГруппаРедактированиеКомментария.Видимость 	= Истина;

КонецПроцедуры
&НаКлиенте
Процедура ПоказатьСкрытьАдресацию(Команда)
	
	КоманднаяПанель.ПодчиненныеЭлементы.ПоказатьСкрытьАдресацию.Пометка = Не КоманднаяПанель.ПодчиненныеЭлементы.ПоказатьСкрытьАдресацию.Пометка;
	
	// Обновим видимость
	
	ФункцииФормЗадач.ВидимостьАдресации(ЭтаФорма);

КонецПроцедуры
&НаСервере
Процедура ПрочитатьРеквизиты()
	
	ФункцииБизнесПроцессов.ЗаполнитьДанные(ЭтаФорма, 
		Объект.Ссылка.БизнесПроцесс, 
		Объект.Ссылка);
	
КонецПроцедуры
&НаСервере
Процедура УправлениеВидимостьюДоступностью()
	
	//Элементы.Кнопка_ТоварОтправлен.Видимость		= Не ТолькоПросмотр;
	
КонецПроцедуры

//&НаСервере
//Функция СоздатьОтменыСборок()
//	
//	Успех = Истина;
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = "Выбрать Склад, СборочныйЛист, Номенклатура, КоличествоОстаток Собрано из РегистрНакопления.ТоварыСобранные.Остатки(, Заказ = &Заказ) Итоги По СборочныйЛист,Склад";
//	Запрос.УстановитьПараметр("Заказ", Объект.Заказ);
//	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//	
//	Пока Выборка.Следующий() Цикл
//		Выборка2 = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//		Пока Выборка2.Следующий() Цикл
//			
//			Сборка = Документы.ОтменаСборки.СоздатьДокумент();
//			Сборка.Дата 	= ТекущаяДата();
//			Сборка.Заказ 	= Объект.Заказ;
//			Сборка.Склад 	= Выборка2.Склад;
//			Сборка.СборочныйЛист = Выборка2.СборочныйЛист;
//			
//			ВыборкаНом = Выборка2.Выбрать();
//			Пока ВыборкаНом.Следующий() Цикл
//				Стр = Сборка.Товары.Добавить();
//				ЗаполнитьЗначенияСвойств(Стр,ВыборкаНом);
//			КонецЦикла;
//			
//			Успех = Успех и ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(Сборка, РежимЗаписиДокумента.Проведение);
//			
//		КонецЦикла;
//	КонецЦикла;
//	
//	Возврат Успех;
//	
//КонецФункции

// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// комментарии
	ФункцииБизнесПроцессовКлиент.ПолучитьМассивКомментариев(ЭтаФорма, Объект.БизнесПроцесс);
	
	ФункцииФормЗадач.ПриОткрытии(Объект, ЭтаФорма, Отказ); // видимость адресации и комментария, доступность формы
	
КонецПроцедуры
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// информация о товаре
	РаботаСНоменклатурой.ДобавитьОперативнуюИнформациюОТоваре(ЭтаФорма);
	
	// комментарии
	ФункцииБизнесПроцессов.ДобавитьРаботуСКомментариями(ЭтаФорма);
	
	ПрочитатьРеквизиты();
	
	УправлениеВидимостьюДоступностью();

КонецПроцедуры
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ФункцииФормЗадач.ПослеЗаписи(Объект, ЭтаФорма, ПараметрыЗаписи);
	
	УправлениеВидимостьюДоступностью();
	
КонецПроцедуры





&НаСервере
Функция СформироватьЗаказНаРазборкуИВыполнитьЗадачу() 
	
	НачатьТранзакцию();
	
	Записать(Новый Структура("ВыполнитьЗадачу",Истина));
	
	Если Товары.Количество() Тогда
		Док = Документы.СборкаЗаказа.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств(Док,ЭтаФорма);
		ЗаполнитьЗначенияСвойств(Док,Объект);
		Док.Дата = ТекущаяДата();
		Док.ТипЗаказаНаСборку = Перечисления.ТипыЗаказовНаСборку.ЗаказНаРазборку;
		
		Док.Товары.Загрузить(Товары.Выгрузить());
		//Такой вот костылёк
		Для Каждого Стр из Товары Цикл
			Стр.ВСборке = -Стр.Количество;
		КонецЦикла;	
		Док.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
	Возврат Истина;
	
КонецФУнкции


// КОМАНДЫ



&НаКлиенте
Процедура ВРазборку(Команда)
	
	Если СформироватьЗаказНаРазборкуИВыполнитьЗадачу() Тогда
		Закрыть();
	КонецЕсли;	
	
КонецПроцедуры


&НаКлиенте
Процедура УстановитьЗначениеДляВсех(Значение = Неопределено, ИмяКолонки, ТолькоСобранные = Ложь, Выражение = "")
	
	//Строки = Товары.НайтиСтроки(Новый Структура("Состояние",ПеречислениеСостояниеСобирается()));
	Для Каждого Строка Из товары Цикл 
		Если Не ТолькоСобранные Или Строка.Количество Тогда 
			Если Выражение = "" Тогда
				Строка[ИмяКолонки] = Значение;
			Иначе
				Выполнить(Выражение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
&НаКлиенте
Процедура УстановитьЗначениеДляВыделенных(Значение, ИмяКолонки, ТолькоСобранные = Ложь)
	
	//Собирается = ПеречислениеСостояниеСобирается();
	Для каждого ИдСтроки Из Элементы.Товары.ВыделенныеСтроки Цикл Строка = Товары.НайтиПоИдентификатору(ИдСтроки);
		//Если 
		//	Строка.Состояние = Собирается И 
		//	(Не ТолькоСобранные Или Строка.Собрано)
		//	Тогда
			Строка[ИмяКолонки] = Значение;
		//КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


// КОММЕНТАРИИ

&НаКлиенте
Процедура КомандаПоказатьКомментарий(Команда)
	ФункцииБизнесПроцессовКлиент.КомандаПоказатьКомментарий(ЭтаФорма);
КонецПроцедуры

// ИНФОРМАЦИЯ О ТОВАРЕ

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	// информация о товаре
	ОбработатьОтображениеИнформацииОТоваре()	
	 	
КонецПроцедуры
&НаСервере
Процедура ОбработатьОтображениеИнформацииОТоваре() Экспорт
	РаботаСНоменклатурой.ОбработатьОтображениеИнформацииОТоваре(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ИнфТовараТекстHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	РаботаСНоменклатуройКлиент.ИнфТовараТекстHTMLПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры
&НаКлиенте
Процедура ИнфТовараЗаголовокHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	РаботаСНоменклатуройКлиент.ИнфТовараЗаголовокHTMLПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры

 &НаКлиенте
Процедура ПоказатьСкрытьИнфОТоваре(Команда)
	РаботаСНоменклатуройКлиент.ПоказатьСкрытьИнфОТоваре(ЭтаФорма);
КонецПроцедуры
&НаКлиенте
Процедура НастройкаИнфОТоваре(Команда) 
	РаботаСНоменклатуройКлиент.НастройкаИнфОТоваре(ЭтаФорма);
КонецПроцедуры



