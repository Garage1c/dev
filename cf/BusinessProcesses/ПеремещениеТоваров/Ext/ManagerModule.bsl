
Функция ПолучитьЗаголовокБП(СсылкаПроцесс) Экспорт
	
	Если СсылкаПроцесс.Пустая() Тогда
		
		Возврат "Создание";
		
	Иначе
		
		Если СсылкаПроцесс.Заказчик.Пустая() Тогда
			
			Возврат Строка(СсылкаПроцесс);
			
		Иначе
			
			Если ТипЗнч(СсылкаПроцесс.Заказчик) = Тип("БизнесПроцессСсылка.ЗаявкаПокупателя") Тогда
				
				Возврат "Перемещения ""Заказ"" " + СсылкаПроцесс.Заказчик.Заказ.Номер + " от " + СсылкаПроцесс.Заказчик.Заказ.Дата;
				
			ИначеЕсли ТипЗнч(СсылкаПроцесс.Заказчик) = Тип("БизнесПроцессСсылка.ИнтернетЗаявка") Тогда
				
				Возврат "Перемещения ""Интернет заказ"" " + СсылкаПроцесс.Заказчик.Заказ.Номер + " от " + СсылкаПроцесс.Заказчик.Заказ.Дата;
				
			Иначе
			
				метаЗак = СсылкаПроцесс.Заказчик.Метаданные();
				Возврат "Перемещения """ + метаЗак.Синоним + """ " + СсылкаПроцесс.Заказчик.Номер + " от " + СсылкаПроцесс.Заказчик.Дата;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецФункции


Функция ПолучитьЗаказ(СсылкаПроцесса) Экспорт
	
	Если ЗначениеЗаполнено(СсылкаПроцесса) Тогда
	
		ТипЗаказчика = ТипЗнч(СсылкаПроцесса.Заказчик);
		
		Если 	ТипЗаказчика = Тип("ДокументСсылка.ВнутреннийЗаказ") И
				ТипЗнч(СсылкаПроцесса.Заказчик.Заказчик) = Тип("БизнесПроцессСсылка.СборкаЗаказа") Тогда
		
			Возврат СсылкаПроцесса.Заказчик.Заказчик.Заказ;			
			
		ИначеЕсли 	ТипЗаказчика = Тип("БизнесПроцессСсылка.ЗаявкаПокупателя") ИЛИ
			 		ТипЗаказчика = Тип("БизнесПроцессСсылка.СборкаЗаказа") Тогда
					
			Возврат СсылкаПроцесса.Заказчик.Заказ;
			
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ЭтоСборкаВнутреннегоЗаказа(СсылкаПроцесса, Заказ = Неопределено) Экспорт
	
	// значит что сборка работает на внутренний заказ и это перемещение вместо реализации
	
	Если Заказ = Неопределено Тогда
		Заказ = ПолучитьЗаказ(СсылкаПроцесса);
	КонецЕсли;
	
	Возврат ТипЗнч(Заказ) = Тип("ДокументСсылка.ВнутреннийЗаказ") И СсылкаПроцесса.Заказчик.Заказ = Заказ;
	
КонецФункции

Функция ПроверитьСкладПолучатель_Ст(Строка, ЭтоВнутрПеремещение, СсылкаПроцесса)
	
	НаСклад1 = ?(ТипЗнч(Строка.СкладЯчейка) = Тип("СправочникСсылка.Склады"),
						?(Строка.СкладЯчейка.Родитель.Пустая(),
							Строка[?(ЭтоВнутрПеремещение И 
											Строка.СкладЯчейка = Строка.Склад,
												"СкладЗаказчик",
												"Склад")],
							Строка.СкладЯчейка.Родитель),
						Строка.СкладЯчейка);
						
	НаСклад2 = Строка[?(ЭтоВнутрПеремещение И 
					Строка.СкладЯчейка = Строка.Склад,
						"СкладЗаказчик",
						"Склад")];
							
	Возврат НаСклад1 = СсылкаПроцесса.СкладПолучатель Или 
			НаСклад2 = СсылкаПроцесса.СкладПолучатель;
	
КонецФункции
Функция ПроверитьСкладПолучатель(Строка, ЭтоВнутрПеремещение, СсылкаПроцесса, кэшМаршрутов, СпособРазмещенияБезЗаказа, СкладЗаказчик = Неопределено)
	
	Если Не СпособРазмещенияБезЗаказа И СкладЗаказчик = Неопределено 
		И не ЭтоВнутрПеремещение //#НовыйМегазапрос
		Тогда
		СкладЗаказчик = Строка[?(ЭтоВнутрПеремещение И 
						?(ТипЗнч(Строка.СкладЯчейка) = Тип("СправочникСсылка.Ячейки"), Строка.СкладЯчейка.Владелец, Строка.СкладЯчейка) = Строка.Склад,
							"СкладЗаказчик",
							"Склад")]; 
	КонецЕсли;
							
	Если Строка.Маршрут.Пустая() Тогда // это обычная проверка без маршрута
		Возврат СсылкаПроцесса.СкладПолучатель = СкладЗаказчик;
		
	Иначе
		
		// Определим склады в последоватьельности маршрутов
		
		послМаршрутов = кэшМаршрутов[Строка.Маршрут];
		Если послМаршрутов = Неопределено Тогда
			послМаршрутов = Справочники.Маршруты.ПолучитьПоследовательность(Строка.Маршрут); кэшМаршрутов.Вставить(Строка.Маршрут, послМаршрутов); КонецЕсли;
		
		ОтправительБыл = Ложь;
		Для Каждого ЭтапМаршрута Из послМаршрутов Цикл
			
			Если ОтправительБыл Тогда // следующий склад должен быть точно получателем
				Возврат ЭтапМаршрута.Найти(СсылкаПроцесса.СкладПолучатель) <> Неопределено; КонецЕсли;
				
			Если ЭтапМаршрута.Найти(СсылкаПроцесса.СкладОтправитель) <> Неопределено Тогда
					ОтправительБыл = Истина; КонецЕсли; КонецЦикла; КонецЕсли;
	
	Возврат Ложь; // если дошел до сюда то просто так побегал
	
КонецФункции


Функция ПолучитьСостояниеТоваровПоЗаказчику(СсылкаПроцесса, ДатаСостояния = Неопределено) Экспорт
	
	//СостояниеОжидаетПеремещения = Перечисления.СостояниеСборкиЗаказа.ОжидаетПеремещения;
	//СостояниеПеремещается 		= Перечисления.СостояниеСборкиЗаказа.Перемещается;
	//СостояниеСобран 			= Перечисления.СостояниеСборкиЗаказа.Собрано;
	
	// Получим состояние процесса
	
	//текЗадача = ФункцииБизнесПроцессов.ТекущаяЗадача(СсылкаПроцесса, ДатаСостояния);
	
	Заказ 		= ПолучитьЗаказ(СсылкаПроцесса);
	ТекстДаты 	= ?(ДатаСостояния = Неопределено, "", "&ДатаПросмотра");
	ТипЗаказа 	= ТипЗнч(Заказ);
	
	Если 	ТипЗаказа = Тип("ДокументСсылка.ЗаказПокупателя") Или 
			ТипЗаказа = Тип("ДокументСсылка.ИнтернетЗаказПокупателя") Или 
			ТипЗаказа = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
			
		// Получим состояние сборки из мегазапроса
			
		Табл = Заказы.ПолучитьСостояниеТоваров(СсылкаПроцесса);
		
		//Заполним маршруты		
		Заказы.ЗаполнитьМаршрутыВТаблицеСостояний(СсылкаПроцесса,Табл);		
		//Заполним маршруты		
		
		мСост = Новый Массив;
		мСост.Добавить(Перечисления.СостояниеСборкиЗаказа.ОжидаетПеремещения);
		мСост.Добавить(Перечисления.СостояниеСборкиЗаказа.Перемещается);
		мСост.Добавить(Перечисления.СостояниеСборкиЗаказа.Собрано);
		
		НовТабл 			= Табл.СкопироватьКолонки();
		НовТабл.Колонки.Добавить("ДокументРезерва");
		Для Каждого Строка Из Табл Цикл
			
			Если НЕ мСост.Найти(Строка.состояние)=Неопределено
				И Строка.Размещение = СсылкаПроцесса.СкладОтправитель Тогда
				
				НовСтрока = НовТабл.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
				НовСтрока.ДокументРезерва = Заказ;
			КонецЕсли;	
				
		КонецЦикла;
		
		
		
		//ЭтоВнутрПеремещение = ЭтоСборкаВнутреннегоЗаказа(СсылкаПроцесса, Заказ);
		//кэшМаршрутов 		= Новый Соответствие; // для ускарения поиска маршрутов
		//
		//СпособРазмещенияБезЗаказа = Заказ.СпособРазмещенияБезЗаказа;
		//
		//Для Каждого Строка Из Табл Цикл
		//	
		//	// Проверим проходят строки по фильтру или их убрать
		//	
		//	Если	(	Строка.Состояние = СостояниеОжидаетПеремещения Или
		//				Строка.Состояние = СостояниеПеремещается Или
		//				(ЭтоВнутрПеремещение И Строка.Состояние = СостояниеСобран)) 
		//				
		//			//И ПроверитьСкладПолучатель(Строка, ЭтоВнутрПеремещение, СсылкаПроцесса, кэшМаршрутов, СпособРазмещенияБезЗаказа, Заказ.Склад) И
		//			И ПроверитьСкладПолучатель(Строка, ЭтоВнутрПеремещение, СсылкаПроцесса, кэшМаршрутов, СпособРазмещенияБезЗаказа, ?(ЭтоВнутрПеремещение, Неопределено, Заказ.Склад))
		//			И ((	ЭтоВнутрПеремещение И  ?(Не СпособРазмещенияБезЗаказа И ТипЗнч(Строка.СкладЯчейка) = Тип("СправочникСсылка.Ячейки"), Строка.СкладЯчейка.Владелец, Строка[?(СпособРазмещенияБезЗаказа, "Размещение","СкладЯчейка")]) = СсылкаПроцесса.СкладОтправитель)
		//			//((	ЭтоВнутрПеремещение И  Строка.Склад = СсылкаПроцесса.СкладОтправитель) 
		//			ИЛИ (	Не ЭтоВнутрПеремещение 
		//					И ПроверитьСкладПолучатель(Строка, ЭтоВнутрПеремещение, СсылкаПроцесса, кэшМаршрутов, СпособРазмещенияБезЗаказа, Заказ.Склад)
		//					И Строка[?(СпособРазмещенияБезЗаказа, "Размещение", "СкладЯчейка")] = СсылкаПроцесса.СкладОтправитель)) 
		//						Тогда
		//				
		//		НовСтрока = НовТабл.Добавить();
		//		ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
		//		
		//		// Для внутреннего заказа укажем документ резерва сам внутренний заказ
		//		
		//		Если ЭтоВнутрПеремещение Тогда
		//			НовСтрока.ДокументРезерва = Заказ; 
		//		КонецЕсли; 
		//		
		//	КонецЕсли; 
		//КонецЦикла;
		
		
		//// Заполним всегда документ резерва
		//Заказ = ПолучитьЗаказ(СсылкаПроцесс);
		//Если Заказ.СпособРазмещенияБезЗаказа Тогда
		//	КонвертацияТипов.ВыполнитьВыражениеВКаждойСтрокеТаблицы(Форма.Товары, "Строка.ДокументРезерва = Параметры.Заказ", Новый Структура("Заказ", Заказ)); 
		//КонецЕсли; 
		
		Возврат НовТабл;
		
	Иначе
		
		Запрос = Новый Запрос("
		
		// Основной запрос
		
		|ВЫБРАТЬ	Маршрут, Номенклатура, Упаковка, МИНИМУМ(Статус) Статус, СУММА(Количество) / СУММА(Источник) КАК Количество
		|ИЗ
		|(
		
		// Таблица по перемещениям
		
		|	ВЫБРАТЬ
		|		1 Источник,
		|		Маршрут,
		|		Номенклатура,
		|		Упаковка,
		|		&СтатусПеремещается Статус,
		|		КоличествоОстаток 	КАК Количество
		|	ИЗ
		|		РегистрНакопления.ТоварыВПути.Остатки(" + ТекстДаты + ", 
		|			Заказчик = &Заказчик И
		|			СкладОтправитель = &СкладОтправитель И
		|			СкладПолучатель = &СкладПолучатель)
		
		// Таблица по внутреннему заказу
		
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		1,
		|		&ПустойМаршрут Маршрут,
		|		Номенклатура,
		|		Упаковка,
		|		&СтатусОжидаетПеремещения,
		|		КоличествоОстаток 	КАК Количество
		|		
		|	ИЗ
		|		РегистрНакопления.ВнутренниеЗаказы.Остатки(" + ТекстДаты + ", 
		|			Заказчик 	= &Заказчик
		|			И ВнутреннийЗаказ.Склад = &СкладОтправитель)
		|
		|) Запрос
		|
		|СГРУППИРОВАТЬ ПО	Номенклатура,Упаковка	
		|");
		
		Запрос.УстановитьПараметр("Заказ", 				Заказ);
		Запрос.УстановитьПараметр("Заказчик", 			СсылкаПроцесса.Заказчик);
		Запрос.УстановитьПараметр("СкладОтправитель", 	СсылкаПроцесса.СкладОтправитель);
		Запрос.УстановитьПараметр("СкладПолучатель", 	СсылкаПроцесса.СкладПолучатель);
		Запрос.УстановитьПараметр("ДатаПросмотра", 		ДатаСостояния);
		Запрос.УстановитьПараметр("ПустойМаршрут", 		Справочники.Маршруты.ПустаяСсылка());
		
		Запрос.УстановитьПараметр("СтатусОжидаетПеремещения", 	Перечисления.СостояниеСборкиЗаказа.ОжидаетПеремещения);
		Запрос.УстановитьПараметр("СтатусПеремещается", 		Перечисления.СостояниеСборкиЗаказа.Перемещается);
		
		Возврат Запрос.Выполнить().Выгрузить(); КонецЕсли;
		
КонецФункции

Функция ПолучитьОстаткиТоваровВПути(БП_Сборка, СкладОтправитель, СкладПолучатель)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заказчик",БП_Сборка);
	Запрос.УстановитьПараметр("СкладОтправитель",СкладОтправитель);
	Запрос.УстановитьПараметр("СкладПолучатель" ,СкладПолучатель );
	Запрос.Текст = "Выбрать Номенклатура, Упаковка, КоличествоОстаток Принять, КоличествоОстаток Количество, КоличествоОстаток МаксимальноеКоличество из РегистрНакопления.ТоварыВПути.Остатки(,Заказчик = &Заказчик и СкладОтправитель = &СкладОтправитель и СкладПолучатель = &СкладПолучатель)";
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ЗаполнитьФормуПоБП(Форма, СсылкаПроцесс, СсылкаЗадача = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(СсылкаПроцесс) Тогда
		
		Запрос = Новый Запрос("
		
		// Условия
		
		|ВЫБРАТЬ 	
		|	Заказчик, СкладОтправитель, СкладПолучатель, Маршрут, Заказчик.ПродолжатьСобирать ОтправитьВСборку, БыстроеПеремещение, Заказчик.Заказ.Контрагент Контрагент
		|ПОМЕСТИТЬ
		|	Шапка
		|ИЗ
		|	БизнесПроцесс.ПеремещениеТоваров КАК Процесс
		|ГДЕ
		|	Ссылка = &СсылкаБП
		|;
		
		// Шапка
		
		|ВЫБРАТЬ 	
		|	Заказчик, СкладОтправитель, СкладПолучатель, Маршрут, ОтправитьВСборку, БыстроеПеремещение, Контрагент
		|ИЗ
		|	Шапка
		|");
		
		Запрос.УстановитьПараметр("СсылкаБП", СсылкаПроцесс);
		Результаты = Запрос.ВыполнитьПакет();
		
		// Заполним шапку
		
		ВыборкаШапки = Результаты[1].Выбрать();
		ВыборкаШапки.Следующий();
		
		ЗаполнитьЗначенияСвойств(Форма, ВыборкаШапки);	

		// Заполним таблицу
		
		Если Форма.ИмяФормы	= "БизнесПроцесс.ПеремещениеТоваров.Форма.Задача_ПринятьТовар"	Тогда
			//24.05.17
			//сделал отдельную процедуру для принятия так как старая заполняла без учета заказчика, потом такую задачу невоможно выполнить
			Форма.Товары.Загрузить(ПолучитьОстаткиТоваровВПути(СсылкаПроцесс.Заказчик, СсылкаПроцесс.СкладОтправитель, СсылкаПроцесс.СкладПолучатель));
		Иначе
			//+Андриянов 16.06.2017 для автовыполнения задач используем заполнение структуры, в структуре это ТЗ, а не ТЧ, поэтому добавляем проверку
			Если Форма.Товары = Неопределено Тогда
				Форма.Товары = ПолучитьСостояниеТоваровПоЗаказчику(СсылкаПроцесс);
			Иначе
			//-Андриянов
				Форма.Товары.Загрузить(ПолучитьСостояниеТоваровПоЗаказчику(СсылкаПроцесс));
			КонецЕсли;
		КонецЕсли;	
		
		////07.12.15 теперь новый порядок, как выставил менеджер Форма.Товары.Сортировать("Номенклатура");
		
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьМассивКомментариев(СсылкаПроцесс) Экспорт
	
	ЕстБП = ТипЗнч(СсылкаПроцесс.Заказчик) = Тип("БизнесПроцессСсылка.СборкаЗаказа");
	
	Массив = Новый Массив;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Комментарий, Заголовок, ДатаВыполнения, Исполнитель
	|ИЗ
	|(	
		// коменты из задач данного БП
	|" + ?(ЕстБП, "
	//|	ВЫБРАТЬ
	//|		Комментарий, Наименование Заголовок, ДатаВыполнения, Исполнитель
	//|	ИЗ
	//|		Задача.ЗадачаПользователю
	//|	ГДЕ
	//|		БизнесПроцесс = &Ссылка ИЛИ
	//|		БизнесПроцесс = &Заказчик ИЛИ
	//|		БизнесПроцесс В (ВЫБРАТЬ Ссылка ИЗ БизнесПроцесс.ЗаявкаПокупателя ГДЕ Заказ = &Заказ) ИЛИ
	//|		БизнесПроцесс В (ВЫБРАТЬ Ссылка ИЗ БизнесПроцесс.ИнтернетЗаявка ГДЕ Заказ = &Заказ)
	
	|	ВЫБРАТЬ
	|		Комментарий, Наименование Заголовок, ДатаВыполнения, Исполнитель
	|	ИЗ
	|		Задача.ЗадачаПользователю
	|	ГДЕ
	|		БизнесПроцесс = &Ссылка	
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Комментарий, Наименование Заголовок, ДатаВыполнения, Исполнитель
	|	ИЗ
	|		Задача.ЗадачаПользователю
	|	ГДЕ
	|		БизнесПроцесс = &Заказчик	
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Комментарий, Наименование Заголовок, ДатаВыполнения, Исполнитель
	|	ИЗ
	|		Задача.ЗадачаПользователю
	|	ГДЕ
	|		БизнесПроцесс в (ВЫБРАТЬ Ссылка ИЗ   БизнесПроцесс.ИнтернетЗаявка   ГДЕ Заказ = &Заказ)	
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Комментарий, Наименование Заголовок, ДатаВыполнения, Исполнитель
	|	ИЗ
	|		Задача.ЗадачаПользователю
	|	ГДЕ
	|		БизнесПроцесс в (ВЫБРАТЬ Ссылка ИЗ БизнесПроцесс.ЗаявкаПокупателя ГДЕ Заказ = &Заказ)	
	
	
		// коменты из документа отгрузки
	
	|	ОБЪЕДИНИТЬ ВСЕ
	|","") + "
	
	|	ВЫБРАТЬ
	|		Комментарий, ""Отгрузка товара"" Заголовок, Дата ДатаВыполнения, Ответственный Исполнитель
	|	ИЗ
	|		Документ.ОтгрузкаТоваров
	|	ГДЕ
	|		Процесс = &Ссылка
	
		// коменты из документа приемки
	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Комментарий, ""Прием товаров"", Дата, Ответственный
	|	ИЗ
	|		Документ.ПриемТоваров
	|	ГДЕ
	|		Процесс = &Ссылка
	
		// коменты из самого БП
	
	|	ОБЪЕДИНИТЬ ВСЕ   	
	|	ВЫБРАТЬ
	|		Комментарий, ""Перемещение товаров"", Дата, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|	ИЗ
	|		БизнесПроцесс.ПеремещениеТоваров
	|	ГДЕ
	|		Ссылка = &Ссылка
	|
	
		// коменты заявки
	
	|" + ?(ЕстБП, "
	|
	|	ОБЪЕДИНИТЬ ВСЕ   
	|
	|	ВЫБРАТЬ
	|		Комментарий, ""Заявка покупателя"", Дата, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|	ИЗ
	|		БизнесПроцесс.ЗаявкаПокупателя
	|	ГДЕ
	|		Заказ = &Заказ
	|","") + "
	|) Запрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаВыполнения
	|");
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаПроцесс);
	Запрос.УстановитьПараметр("Заказчик", СсылкаПроцесс.Заказчик);
	
	Если ЕстБП Тогда
		Запрос.УстановитьПараметр("Заказ", СсылкаПроцесс.Заказчик.Заказ);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Не ПустаяСтрока(Выборка.Комментарий) Тогда
		
			Массив.Добавить(Новый Структура("Комментарий, Заголовок, ДатаВыполнения, Исполнитель",
									Выборка.Комментарий, Выборка.Заголовок, Выборка.ДатаВыполнения, Выборка.Исполнитель));
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции


Функция ПолучитьПроцессРодитель(Ссылка) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка ИЗ БизнесПроцесс.ПеремещениеТоваров.ОжидающиеПеремещения ГДЕ Процесс = &Ссылка И НЕ Ссылка.ПометкаУдаления");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка; КонецЕсли;
	
КонецФункции

Функция ОтправитьВСборку(Заказ, Склад, ТоварыТЗ) Экспорт
	
	НачатьТранзакцию();
	
	Сборка = Документы.СборочныйЛист.СоздатьДокумент();
	Сборка.УстановитьСсылкуНового(Документы.СборочныйЛист.ПолучитьСсылку(Новый УникальныйИдентификатор));
			
	Шапка = Новый Структура("Заказ, Склад, СборочныйЛист, ТипСборочногоЛиста", Заказ, Склад, Сборка.ПолучитьСсылкуНового(), Перечисления.ТипыСборочныхЛистов.ФиксацияЯчеек);
			
	Если Не БизнесПроцессы.СборкаЗаказа.СоздатьСборку(Новый Структура("Шапка, Товары, ТоварыАлгоритм",  Шапка, ТоварыТЗ, "НовСтрока.ВСборке = Строка.Количество")) Тогда
		ОтменитьТранзакцию();
		Возврат Ложь; КонецЕсли;
				
	Сборка.Заполнить(Новый Структура("Шапка, Товары, ТоварыАлгоритм", Шапка, ТоварыТЗ, "НовСтрока.Собрать = Строка.Количество"));
	Если Не ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(Сборка, РежимЗаписиДокумента.Проведение) Тогда
		ОтменитьТранзакцию();
		Возврат Ложь; КонецЕсли;

	ЗафиксироватьТранзакцию();
	Возврат Истина;

КонецФункции

