&НаКлиенте
Перем МассивКомментариев Экспорт;

&НаСервере
Функция СформироватьИПровестиПриемТовара()
	
	Если Товары.Количество() Тогда
		
		// подготовим документ
		
		НовДок = Документы.ПриемТоваров.СоздатьДокумент();
		
		НовДок.Дата 				= ТекущаяДата();
		НовДок.СкладОтправитель 	= СкладОтправитель;
		НовДок.СкладПолучатель 		= СкладПолучатель;
		НовДок.Маршрут 				= Маршрут;
		НовДок.Процесс				= Объект.БизнесПроцесс;
		
		
		//расставляем флаги 
		Запрос = Новый Запрос("Выбрать Процесс из БизнесПроцесс.ПеремещениеТоваров.ОжидающиеПеремещения ГДЕ Процесс=&БП и ссылка.ПометкаУдаления=Ложь");
		Запрос.УстановитьПараметр("БП",Объект.БизнесПроцесс);
		Рез = Запрос.Выполнить();
		Если Рез.Пустой() Тогда // этот БП Перемещение - последний в маршрутной цепочке. Это значит, что его никто не ждет. То есть его нет в ТЧ ОжидающиеПеремещения других БП
			
			НовДок.ЗакрытьЗаказ 			= Истина;
			
			Если ТипЗнч(Объект.Заказ) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
			Иначе	
				НовДок.ОтправитьВСборку 	= Истина;
				НовДок.ПоставитьВРезерв     = Истина;
			КонецЕсли;
		Иначе
			
			НовДок.ПоставитьВРезерв     = Истина;
			
		КонецЕсли;

		// Вытащим товары
		
		ТоварыТЗ = Товары.Выгрузить();
		
		КонвертацияТипов.УдалитьСтрокиТЗ(ТоварыТЗ, Новый Структура("Количество, Принять", 0,0));
		
		Если ТоварыТЗ.Количество() Тогда
		
			// Добавим товары
			
			НовДок.Товары.Загрузить(ТоварыТЗ);
			
			НачатьТранзакцию();
			
			// Запишем с проведением
			
			Если Не ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(НовДок, РежимЗаписиДокумента.Проведение) Тогда
				ОтменитьТранзакцию();
				Возврат Ложь; КонецЕсли;
			
			// Запишем задачи для сборки
			
			Если ОтправитьВСборку Тогда
				
				Если Не БизнесПроцессы.ПеремещениеТоваров.ОтправитьВСборку(Заказчик.Заказ, СкладПолучатель, ТоварыТЗ) Тогда
				
			//	Сборка = Документы.СборочныйЛист.СоздатьДокумент();
			//	Сборка.УстановитьСсылкуНового(Документы.СборочныйЛист.ПолучитьСсылку(Новый УникальныйИдентификатор));
			//
			//	Шапка = Новый Структура("Заказ, Склад, СборочныйЛист, ТипСборочногоЛиста", Заказчик.Заказ, СкладПолучатель, Сборка.ПолучитьСсылкуНового(), Перечисления.ТипыСборочныхЛистов.ФиксацияЯчеек);
			//
			//	Если Не БизнесПроцессы.СборкаЗаказа.СоздатьСборку(Новый Структура("Шапка, Товары, ТоварыАлгоритм",  Шапка, ТоварыТЗ, "НовСтрока.ВСборке = Строка.Количество")) Тогда
			//		ОтменитьТранзакцию();
			//		Возврат Ложь; КонецЕсли;
			//	
			//	Сборка.Заполнить(Новый Структура("Шапка, Товары, ТоварыАлгоритм", Шапка, ТоварыТЗ, "НовСтрока.Собрать = Строка.Количество"));
			//	Если Не ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(Сборка, РежимЗаписиДокумента.Проведение) Тогда
			//		ОтменитьТранзакцию();
					Возврат Ложь; КонецЕсли; КонецЕсли; 
			
			ЗафиксироватьТранзакцию(); КонецЕсли; КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

//&НаСервере
//Функция СпособРазмещенияБезЗаказа()
//	
//	Возврат БизнесПроцессы.ПеремещениеТоваров.ПолучитьЗаказ(Объект.БизнесПроцесс).СпособРазмещенияБезЗаказа;
//	
//КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеЗаказНаСервере(ПроцессСсылка)
	
	Заказ=БизнесПроцессы.ПеремещениеТоваров.ПолучитьЗаказ(ПроцессСсылка);
		
	Возврат Новый Структура("СпособРазмещенияБезЗаказа,ИмяДокумента", Заказ.СпособРазмещенияБезЗаказа,Заказ.Метаданные().Имя);
	
КонецФункции

// ТИПОВЫЕ

&НаКлиенте
Процедура ПоказатьСкрытьАдресацию(Команда)
	
	// Реверснем
	
	КоманднаяПанель.ПодчиненныеЭлементы.ПоказатьСкрытьАдресацию.Пометка = Не КоманднаяПанель.ПодчиненныеЭлементы.ПоказатьСкрытьАдресацию.Пометка;
	
	// Обновим видимость
	
	ФункцииФормЗадач.ВидимостьАдресации(ЭтаФорма);
	
КонецПроцедуры


&НаСервере
Процедура ПрочитатьРеквизиты()
	
	Заказчик = Объект.БизнесПроцесс.Заказчик;
	
	ФункцииБизнесПроцессов.ЗаполнитьДанные(ЭтаФорма, 
		Объект.Ссылка.БизнесПроцесс, 
		Объект.Ссылка);
		
	
	// Удалим состояние левые
	
	//// 25.04.17 вот внизу закоментарил и написал 1 строку всего , 1 строку Карл!
	//таблТова = КонвертацияТипов.ПолучитьТаблицуИзНайденныхСтрокТаблицыЗначений(Товары.Выгрузить(), Новый Структура("Состояние", Перечисления.СостояниеСборкиЗаказа.Перемещается));
	//
	//	//СостояниеОтправитьТовар = Перечисления.СостояниеСборкиЗаказа.Перемещается;
	//	//таблТова = Товары.Выгрузить();
	//	//
	//	//Инд = -1;
	//	//КолСтрок = Товары.Количество();
	//	//Для Ном = 1 По КолСтрок Цикл Инд = КолСтрок - Ном;
	//	//	Строка = таблТова[Инд];
	//	//	Если Строка.Состояние <> СостояниеОтправитьТовар Тогда
	//	//		таблТова.Удалить(Инд);
	//	//	КонецЕсли;
	//	//КонецЦикла;
	//
	//// Добавим макс количество
	//таблТова.ЗагрузитьКолонку(таблТова.ВыгрузитьКолонку("Количество"), "МаксимальноеКоличество");
	//таблТова.ЗагрузитьКолонку(таблТова.ВыгрузитьКолонку("Количество"), "Принять");
	//
	//Товары.Загрузить(таблТова);
	
		
КонецПроцедуры

&НаСервере
Процедура УправлениеВидимостьюДоступностью()
	
	Выполнена = Объект.Выполнена;
	
	Ячеестый = СкладПолучатель.Ячеестый;
	Элементы.ТоварыЯчейка.Видимость 					= Ячеестый;
	Элементы.КнопкаУстановитьЯчейкуДляВсех.Видимость 	= Ячеестый;
	Элементы.КнопкаПринятьТовар.Видимость				= Не Выполнена;
	//Элементы.ОтправитьВСборку.Видимость					= ТипЗнч(Заказчик) = Тип("БизнесПроцессСсылка.СборкаЗаказа") И СкладПолучатель = Заказчик.Склад;
		
КонецПроцедуры




// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// прикрепленные файлы
	ОбновитьВидимостьПрикрепленныхФайловНаСервере();
	
	// информация о товаре
	
	РаботаСНоменклатурой.ДобавитьОперативнуюИнформациюОТоваре(ЭтаФорма);
	
	// комментарии
	
	ФункцииБизнесПроцессов.ДобавитьРаботуСКомментариями(ЭтаФорма);

	ПрочитатьРеквизиты();
	
	// спрячем сразу в сборку если это подчиненный БП или если склад получатель промежуточный склад маршрута
	
	//Если (ТипЗнч(Заказчик) = Тип("БизнесПроцессСсылка.СборкаЗаказа") И СкладПолучатель <> Заказчик.Склад) ИЛИ (
	//		СкладПолучатель.Ячеестый И БизнесПроцессы.ПеремещениеТоваров.ПолучитьПроцессРодитель(Объект.БизнесПроцесс) <> Неопределено) Тогда
	//		
	//	Элементы.ОтправитьВСборку.Видимость = Ложь; КонецЕсли;
	
	// Установим ячейку перемещения
	
	Если СкладПолучатель.Ячеестый Тогда
		
		ЯчейкаПоУмолчанию = СкладПолучатель.ЯчейкаПеремещенияПоУмолчанию;
		Если Не ЯчейкаПоУмолчанию.Пустая() Тогда
		
			НеЗаполненные = Товары.НайтиСтроки(Новый Структура("Ячейка", Справочники.Ячейки.ПустаяСсылка()));
		Для Каждого Строка Из НеЗаполненные Цикл Строка.Ячейка = ЯчейкаПоУмолчанию; КонецЦикла; КонецЕсли; КонецЕсли;
		
	ОтправитьВСборку = НЕ (ТипЗнч(Заказчик.Заказ) = Тип("ДокументСсылка.ВнутреннийЗаказ") И СкладПолучатель = Заказчик.Заказ.Заказчик);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ДанныеЗаказа = ПолучитьДанныеЗаказНаСервере(Объект.БизнесПроцесс);
	
	//ДОЛОЙ все эти старые формы!
	
	//// Если это по старому тогда откроем форму по старому
	//Если Не ДанныеЗаказа.СпособРазмещенияБезЗаказа И НЕ ДанныеЗаказа.ИмяДокумента = "ВнутреннийЗаказ" Тогда
	//	Отказ = Истина;
	//	ОткрытьФорму("БизнесПроцесс.ПеремещениеТоваров.Форма.Задача_ПринятьТовар_СЗаказом",  Новый Структура("Ключ", Параметры.Ключ), ВладелецФормы, Окно,, ОписаниеОповещенияОЗакрытии);
	//	Возврат; 
	//КонецЕсли;
	
	
	
	// комментарии
	
	ФункцииБизнесПроцессовКлиент.ПолучитьМассивКомментариев(ЭтаФорма, Объект.БизнесПроцесс);
			
	ФункцииФормЗадач.ПриОткрытии(Объект, ЭтаФорма, Отказ);
	
	УправлениеВидимостьюДоступностью();
		
КонецПроцедуры
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ФункцииФормЗадач.ПослеЗаписи(Объект, ЭтаФорма, ПараметрыЗаписи);
	
	УправлениеВидимостьюДоступностью();
	
КонецПроцедуры

// КОМАНДЫ
                                                                                     
&НаСервере
Процедура УстановитьЯчейкуДляВсехНаСервере(Ячейка)
	
	Табл = Товары.Выгрузить();
	Табл.ЗаполнитьЗначения(Ячейка, "Ячейка");
	Товары.Загрузить(Табл);
			
КонецПроцедуры
&НаКлиенте
Процедура УстановитьЯчейкуДляВсех(Команда)
	
	ВыбрЯчейка = ОткрытьФорму("Справочник.Ячейки.ФормаВыбора", Новый Структура("Склад", СкладПолучатель),,,,,Новый ОписаниеОповещения("ОбработкаВыбораЯчейки",ЭтаФорма,));
	
КонецПроцедуры
&НаКлиенте
Процедура ОбработкаВыбораЯчейки(Результат, Параметры) Экспорт
	Если Результат <> Неопределено Тогда
		УстановитьЯчейкуДляВсехНаСервере(Результат);
	КонецЕсли;	
КонецПроцедуры
&НаСервере
Функция ПроверитьСборщиков()
	
	Возврат ИСТИНА; // всегда можно не указывать сборщиков
	
	Отказ = Ложь;
	
	Если НЕ СкладПолучатель.УчетПоСбощикамЗаказов Тогда
		Возврат Не Отказ;
	КонецЕсли;
	
	Инд = -1;
	Для Каждого Строка Из Товары Цикл Инд = Инд + 1;
		Если 	Строка.Сборщик.Пустая() Тогда
					
			Отказ = Истина;
			ОбщиеФункции.СообщитьТекст("Не выбран сборщик позиции!","Товары[" + Формат(Инд,"ЧГ=") + "].Сборщик");
					
		КонецЕсли;
	КонецЦикла;
	
	Возврат Не Отказ;
	
КонецФункции

&НаКлиенте
Процедура ПринятьТовар(Команда)
	
	Если Не ПроверитьСборщиков() Тогда
		Возврат;
	КонецЕсли;

	Если  ПринятьТоварНаСервере() Тогда
			
		Закрыть();
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПринятьТоварНаСервере()
	
	НачатьТранзакцию();
	
	Если СформироватьИПровестиПриемТовара() И Записать(Новый Структура("ВыполнитьЗадачу",Истина)) Тогда
		ЗафиксироватьТранзакцию();
		Возврат Истина;
	Иначе
		ОтменитьТранзакцию();
		Возврат Ложь;
	 КонецЕсли;
	 
КонецФункции


&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	//ВыполнитьЗадачу = ПараметрыЗаписи.Свойство("ВыполнитьЗадачу");
	
	//Если 	ВыполнитьЗадачу = Истина И 
	//		Не СформироватьИПровестиПриемТовара() Тогда
	//		
	//	Отказ = Истина;
	//	
	//КонецЕсли;
	
КонецПроцедуры



&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если СкладПолучатель.Ячеестый Тогда
		
		Инд = -1;
		Для Каждого Строка Из Товары Цикл Инд = Инд + 1;
			Если Строка.Ячейка.Пустая() Тогда
			
				БылОтказ 	= Истина;
				Отказ 		= Истина;
				ОбщиеФункции.СообщитьТекст("Не заполнена ячейка", "Товары[" + Инд + "].Ячейка", Объект);
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	//Если БылОтказ Тогда
	//	БылОтказ 	= Ложь;
	//	Отказ 		= Истина;
	//КонецЕсли;
	
КонецПроцедуры


// ИНФОРМАЦИЯ О ТОВАРЕ

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	// информация о товаре
	ОбработатьОтображениеИнформацииОТоваре()	
	 	
КонецПроцедуры
&НаСервере
Процедура ОбработатьОтображениеИнформацииОТоваре() Экспорт
	РаботаСНоменклатурой.ОбработатьОтображениеИнформацииОТоваре(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ИнфТовараТекстHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	РаботаСНоменклатуройКлиент.ИнфТовараТекстHTMLПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры
&НаКлиенте
Процедура ИнфТовараЗаголовокHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	РаботаСНоменклатуройКлиент.ИнфТовараЗаголовокHTMLПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры

 &НаКлиенте
Процедура ПоказатьСкрытьИнфОТоваре(Команда)
	РаботаСНоменклатуройКлиент.ПоказатьСкрытьИнфОТоваре(ЭтаФорма);
КонецПроцедуры
&НаКлиенте
Процедура НастройкаИнфОТоваре(Команда) 
	РаботаСНоменклатуройКлиент.НастройкаИнфОТоваре(ЭтаФорма);
КонецПроцедуры

// КОММЕНТАРИИ

&НаКлиенте
Процедура КомандаПоказатьКомментарий(Команда)
	ФункцииБизнесПроцессовКлиент.КомандаПоказатьКомментарий(ЭтаФорма);
КонецПроцедуры

// ПЕЧАТЬ СБОРОЧНОГО ЛИСТА

&НаКлиенте
Процедура ПечатьСборочныйЛист(Команда)
	ПолучитьТабличныйДокумент().Показать();
КонецПроцедуры

&НаСервере
Функция ПолучитьТабличныйДокумент(СНаличием = Ложь)
	
	ТабДокумент 	= Новый ТабличныйДокумент;
	Макет 			= ПолучитьОбщийМакет("СборочныйЛист");
	
	ОбластьШапка 			= Макет.ПолучитьОбласть("Шапка");
	ОбластьКомментарий		= Макет.ПолучитьОбласть("Комментарий");
	ОбластьЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ОбластьСтрока 			= ?(СНаличием, Макет.ПолучитьОбласть("СтрокаСНаличием"), Макет.ПолучитьОбласть("Строка"));
	ОбластьИтого 			= Макет.ПолучитьОбласть("Итого");
	
	// Шапка
	
	Если ТипЗнч(Объект.БизнесПроцесс.Заказчик.Заказ) <> Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
		ОбластьШапка.Параметры.ПредставлениеКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Объект.БизнесПроцесс.Заказчик.Заказ.Контрагент, ТекущаяДата()), "ПолноеНаименование,ЮридическийАдрес",,Символы.ПС);
	Иначе
		ОбластьШапка.Параметры.ПредставлениеКонтрагента = Объект.БизнесПроцесс.Заказчик.Заказ;
	КонецЕсли;
	
	ОбластьШапка.Параметры.Номер 			= Объект.БизнесПроцесс.Заказчик.Заказ.Номер;
	ОбластьШапка.Параметры.Дата 			= Объект.Дата;
	ОбластьШапка.Параметры.СинонимДокумента = "Сборочный лист";
	ОбластьШапка.Параметры.Склад	= Объект.БизнесПроцесс.СкладПолучатель;
	
	//Попытка
	//	ОбластьЗаголовокТаблицы.Параметры.ТипЦен 	= Строка(Объект.БизнесПроцесс.Заказчик.Заказ.ТипЦен);
	//	ОбластьЗаголовокТаблицы.Параметры.Цена 		= "Цена, " + Строка(Объект.БизнесПроцесс.Заказчик.Заказ.Валюта);
	//Исключение
	//	ОбластьЗаголовокТаблицы.Параметры.ТипЦен 	= "";
	//	ОбластьЗаголовокТаблицы.Параметры.Цена 		= "Цена";
	//КонецПопытки;
	
	ТабДокумент.Вывести(ОбластьШапка);
	
	// Сформируем комментарий
	
	Комменты = БизнесПроцессы.ПеремещениеТоваров.ПолучитьМассивКомментариев(Объект.БизнесПроцесс);
	Для Каждого Коммент Из Комменты Цикл
		ОбластьКомментарий.Параметры.Заполнить(Коммент);
		Если Коммент.Исполнитель.Пустая() Тогда
			ОбластьКомментарий.Параметры.Исполнитель = "Последний комментарий:";
		Иначе
			ОбластьКомментарий.Параметры.Исполнитель = Строка(Коммент.Исполнитель) + " (" + Формат(Коммент.ДатаВыполнения,"ДЛФ=DDT") + "):";
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьКомментарий);
	КонецЦикла;
	
	ТабДокумент.Вывести(ОбластьЗаголовокТаблицы);
	
	// Отсортируем чтобы бегали быстрее
	
	ТаблВывода = Товары.Выгрузить();
	//ТаблВывода.Колонки.Добавить("Артикул", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(25)));
	//Для Каждого Строка Из ТаблВывода Цикл Строка.Артикул = Строка.Номенклатура.Артикул; КонецЦикла;
	//ТаблВывода.Сортировать("Ячейка, Артикул");
	ТаблВывода.Сортировать("Ячейка");
	
	Если СНаличием Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ Номенклатура ИЗ РегистрНакопления.ТоварыНаСкладах.Остатки(, Склад = &Склад И Номенклатура В(&Товары))");
		
		Запрос.УстановитьПараметр("Товары", ТаблВывода.ВыгрузитьКолонку("Номенклатура"));
		Запрос.УстановитьПараметр("Склад", СкладПолучатель);
		         
		ТоварыВНаличии = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура"); КонецЕсли;
	
	// Выводим в таблицу
	
	Ном = 0;
	//ИтогПроход 	= 0;
	//ИтогСекция 	= 0;
	//ИтогЯрус 	= 0;
	//ИтогПоддон 	= 0;
	ПустаяУпаковка = Справочники.УпаковкиНоменклатуры.ПустаяСсылка();
	Для каждого Строка Из ТаблВывода Цикл Ном = Ном + 1;
	
		ОбластьСтрока.Параметры.Заполнить(Строка);
		ОбластьСтрока.Параметры.Номер 		= Ном;
		ОбластьСтрока.Параметры.Артикул 	= Строка.Номенклатура.Артикул;
		//ОбластьСтрока.Параметры.Артикул 	= Строка.Артикул;
		
		Если Строка.Упаковка  = ПустаяУпаковка Тогда
			ЕдиницаИзмерения = Строка.Номенклатура.ЕдиницаИзмерения;
		Иначе
			ЕдиницаИзмерения = Строка.Упаковка;
		КонецЕсли;
		
		ОбластьСтрока.Параметры.ЕдиницаИзмерения = ЕдиницаИзмерения; 
		
		Если СНаличием Тогда ОбластьСтрока.Параметры.ВНаличии = ?(ТоварыВНаличии.Найти(Строка.Номенклатура) = Неопределено, "-", "+");  КонецЕсли;	
		
		//Если Строка.Ячейка.Пустая() Тогда
		//	
		//	ОбластьСтрока.Параметры.Ячейка = Строка.СкладЯчейка;
		//	
		//КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьСтрока);
		
		// Подсчитаем итоги
		
		//ИтогПроход 	= ИтогПроход + ПодсчитатьИтогЯчейки(ОтрПроход, Строка.Проход);
		//ИтогСекция 	= ИтогСекция + ПодсчитатьИтогЯчейки(ОтрСекция, Строка.Проход + "." + Строка.Секция);
		//ИтогЯрус 	= ИтогЯрус + ПодсчитатьИтогЯчейки(ОтрЯрус, Строка.Проход + "." + Строка.Секция + "." + Строка.Ярус);
		//ИтогПоддон 	= ИтогПоддон + ПодсчитатьИтогЯчейки(ОтрПоддон, Строка.Проход + "." + Строка.Секция + "." + Строка.Ярус + "." + Строка.Поддон);
		
	КонецЦикла; 
	
	ОбластьИтого.Параметры.ДатаФормирования = Формат(ТекущаяДата(),"ДЛФ=DDT");
	//ОбластьИтого.Параметры.КолЯчеек		 	= Строка(ИтогПроход) + "." + Строка(ИтогСекция) + "." + Строка(ИтогЯрус) + "." + Строка(ИтогПоддон);
	//ОбластьИтого.Параметры.КолНоменклатура 	= ВсегоКол;
	ТабДокумент.Вывести(ОбластьИтого);
	
	// Настрим просмотры
	
	ТабДокумент.ТолькоПросмотр 	= Истина;
	ТабДокумент.ОтображатьСетку = Ложь;
	ТабДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабДокумент;
	
КонецФункции

&НаКлиенте
Процедура ТоварыПередНачаломИзменения(Элемент, Отказ)
	
	Элементы.ТоварыКоличество.МаксимальноеЗначение = Элемент.ТекущиеДанные.МаксимальноеКоличество;
	
КонецПроцедуры

// СБОРЩИК

&НаКлиенте
Процедура УстановитьЗначениеДляВсех(Значение, ИмяКолонки)
	
	Для Каждого Строка Из Товары Цикл
		Строка[ИмяКолонки] = Значение;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЭлементДляВсех(ПутьКОбъекту, ИмяКолонки)
	
	ВыбранныйЭлемент = ОткрытьФорму(ПутьКОбъекту,,ЭтаФорма,,,,Новый ОписаниеОповещения("ОбработкаПослеЗакрытияФормы",ЭтаФорма,Новый Структура("ИмяКолонки", ИмяКолонки)));
	
КонецПроцедуры
&НаКлиенте 
Процедура ОбработкаПослеЗакрытияФормы(Результат, Параметры) Экспорт
	Если Результат <> Неопределено Тогда
		
		УстановитьЗначениеДляВсех(Результат, Параметры.ИмяКолонки);
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокСборщиков()
	
	Возврат ДиалогиСПользователем.ПолучитьСписокСборщиков();
	
КонецФункции
&НаКлиенте
Процедура ВыбСборщик(Элемент, ДопПараметры) Экспорт
	
	Если Элемент <> Неопределено Тогда
		УстановитьЗначениеДляВсех(Элемент.Значение, "Сборщик") КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ВыбратьСборщика(Команда)
	
	ПоказатьВыборИзМеню(Новый ОписаниеОповещения("ВыбСборщик", ЭтаФорма), ПолучитьСписокСборщиков(), Элементы.ФормаВыбратьСборщика);

КонецПроцедуры

&НаКлиенте
Процедура ВыбПриемщика(Элемент, ДопПараметры) Экспорт
	
	Если Элемент <> Неопределено Тогда
		УстановитьЗначениеДляВсех(Элемент.Значение, "Приемщик") КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ВыбратьПриемщика(Команда)
	ПоказатьВыборИзМеню(Новый ОписаниеОповещения("ВыбПриемщика", ЭтаФорма), ПолучитьСписокСборщиков(), Элементы.ФормаВыбратьСборщика);
КонецПроцедуры


// ---

&НаКлиенте
Процедура ПоказатьЯчейки(Команда)
	
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекДанные <> Неопределено Тогда
		
		ПараметрыФормы = Новый Структура("Отбор, КлючНазначенияИспользования, СформироватьПриОткрытии", 
							Новый Структура("Номенклатура", 
											ТекДанные.Номенклатура),,
								Истина);
								
		ОткрытьФорму("Отчет.ОстаткиЯчеек.Форма.ДвижениеПоЯчейкам", ПараметрыФормы);
		
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ПоказатьДвижение(Команда)
	
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекДанные <> Неопределено Тогда
		
		ПараметрыФормы = Новый Структура("Отбор, КлючНазначенияИспользования, СформироватьПриОткрытии", 
	 							Новый Структура("Номенклатура", 
											ТекДанные.Номенклатура),,
								Истина);
								
		ОткрытьФорму("Отчет.ВедомостьОдногоТовара.ФормаОбъекта", ПараметрыФормы);
		
	КонецЕсли;
					
КонецПроцедуры

&НаКлиенте
Процедура ПечатьСборочныйсНаличием(Команда)
	ПолучитьТабличныйДокумент(Истина).Показать();

КонецПроцедуры

&НаКлиенте
Процедура ПечатьЦенников(Команда)
	
	ФормаЦенников = ПолучитьФорму("Обработка.ПечатьЦенников.Форма.Форма", Новый Структура("МассивТоваров", ПолучитьМассивТоваров()));
	ФормаЦенников.Открыть();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивТоваров()
	
	Возврат КонвертацияТипов.ПолучитьМассивИзТаблицыЗначений(Товары.Выгрузить(, "Номенклатура, Количество, Упаковка"));
	
КонецФункции

#Область Прикрепленные_файлы

&НаКлиенте
Процедура УдалитьПрикрепленныеФайлыНажатие(Элемент)
	
	ПрикрепленныеФайлыКлиент.УдалитьНажатие(Объект.Заказ, ЭтаФорма, Элемент);
	
КонецПроцедуры
&НаКлиенте
Процедура ПрикрепленныеФайлыНажатиеСкрепка(Элемент)
	
	ПрикрепленныеФайлыКлиент.НажатиеСкрепка(Объект.Заказ, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПрикрепленныйФайл(Элемент)
	
	ПрикрепленныеФайлыКлиент.ОткрытьПрикрепленныйФайл(Элемент.Имя);
	
КонецПроцедуры
&НаКлиенте
Процедура ПоказатьПрикрееленныеФайлы(Элемент)
	
	ПрикрепленныеФайлыКлиент.ПоказатьПрикрепленныеФайлы(Объект.Заказ, ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьПрикрепленныхФайловНаСервере()
	
	ПрикрепленныеФайлы.Иницилизировать(Объект.Заказ, ЭтаФорма);
	
КонецПроцедуры
&НаКлиенте
Процедура ОбновитьВидимостьПрикрепленныхФайлов() Экспорт
	
	ОбновитьВидимостьПрикрепленныхФайловНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	Стр = Элементы.Товары.ТекущиеДанные;
	Стр.Потеряно = Стр.Принять - Стр.Количество;
КонецПроцедуры


#КонецОбласти

