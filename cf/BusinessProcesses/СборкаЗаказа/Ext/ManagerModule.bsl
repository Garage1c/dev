
Функция ЕстьОткрытыйБПСборкиТовара(Заказ, Склад)
	
	// Определяет есть или нет БП сборки товара по текущим реквизитам (Заказ, Склад)
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 ИСТИНА ИЗ БизнесПроцесс.СборкаТовара ГДЕ Заказ = &Заказ И Склад = &Склад И НЕ Завершен");
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Запрос.УстановитьПараметр("Склад", Склад);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции
Функция СоздатьСборку(СтруктураЗаполнения, СоздаватьБП = Истина) Экспорт
	
	НачатьТранзакцию();
	
	// создаем документ СборкаЗаказа по всем складам.
	
	Сборка = Документы.СборкаЗаказа.СоздатьДокумент();
	Сборка.Заполнить(СтруктураЗаполнения);
	
	Если Не Сборка.ПроверитьЗаполнение() Или Не ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(Сборка, РежимЗаписиДокумента.Проведение) Тогда 
		ОтменитьТранзакцию(); 
		Возврат Ложь; КонецЕсли; 
				
	//Создаем БП СборкаТовара только по нашему складу и если нет активного БП сборки, 
	// остальные создадутся во вложенном БП к Перемещению
	//Если СоздаватьБП И НЕ ЕстьОткрытыйБПСборкиТовара(СтруктураЗаполнения.Шапка.Заказ, СтруктураЗаполнения.Шапка.Склад) Тогда
	Если СоздаватьБП  Тогда
				
		БПСборкаТоваров = БизнесПроцессы.СборкаТовара.СоздатьБизнесПроцесс();
		БПСборкаТоваров.Заполнить(Новый Структура("Шапка", СтруктураЗаполнения.Шапка));
		Если Не ОбщиеФункции.СтартоватьБПИСообщитьЕслиОшибка(БПСборкаТоваров) Тогда
			ОтменитьТранзакцию(); 
			Возврат Ложь; КонецЕсли; КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
	Возврат Истина;
	
КонецФункции

// ИЕРАРХИЯ

Процедура ДобавитьВложенныеСборки(СсылкаСборки, Сборки) Экспорт
	
	Сборки.Добавить(СсылкаСборки);
	
	Запрос = Новый Запрос("ВЫБРАТЬ Ссылка ИЗ БизнесПроцесс.СборкаЗаказа ГДЕ ВедущаяЗадача.БизнесПроцесс = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", СсылкаСборки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДобавитьВложенныеСборки(Выборка.Ссылка, Сборки);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьСборкиРодители(СсылкаСборки, Сборки) Экспорт
	
	Если ЗначениеЗаполнено(СсылкаСборки) Тогда
		
		РодПроцесс = СсылкаСборки.ВедущаяЗадача.БизнесПроцесс;
		
		Если ТипЗнч(РодПроцесс) = Тип("БизнесПроцессСсылка.СборкаЗаказа") Тогда
		
			Сборки.Добавить(РодПроцесс);
			ДобавитьСборкиРодители(РодПроцесс, Сборки);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДатуПервойСборкиЗаказа(Заказ) Экспорт
	
	// Возвращает первую дату сборки
	
	Запрос = Новый Запрос("ВЫБРАТЬ МИНИМУМ(Дата) Дата ИЗ БизнесПроцесс.СборкаЗаказа ГДЕ Заказ = &Заказ");
	Запрос.УстановитьПараметр("Заказ", Заказ);
	
	Выполнение = Запрос.Выполнить();
	Если Выполнение.Пустой() Тогда Возврат ТекущаяДата() КонецЕсли;
	
	Выборка = Выполнение.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Дата;
	
КонецФункции

// СТАНДАРТНЫЙ ИНТЕРФЕЙС

Процедура ЗаполнитьФормуПоБП(Форма, СсылкаПроцесс, СсылкаЗадача = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(СсылкаПроцесс) Тогда
		
		Запрос = Новый Запрос("
		
		// Условия
		
		|ВЫБРАТЬ 	
		|	Заказ, Заказ.Контрагент Контрагент, Склад, РеализацияТоваров, ЯчеистаяСборка, ПродолжатьСобирать
		|ПОМЕСТИТЬ
		|	Шапка
		|ИЗ
		|	БизнесПроцесс.СборкаЗаказа КАК Процесс
		|ГДЕ
		|	Ссылка = &СсылкаБП
		|;
		
		// Шапка
		
		|ВЫБРАТЬ 	
		|	Заказ, Контрагент, Склад, РеализацияТоваров, ЯчеистаяСборка, ПродолжатьСобирать
		|ИЗ
		|	Шапка
		|");
		
		Запрос.УстановитьПараметр("СсылкаБП", СсылкаПроцесс);
		Результаты = Запрос.ВыполнитьПакет();
		
		// Заполним шапку
		
		ВыборкаШапки = Результаты[1].Выбрать();
		ВыборкаШапки.Следующий();
		
		ЗаполнитьЗначенияСвойств(Форма, ВыборкаШапки);	

		// Заполним таблицу
		
		//Форма.Товары.Загрузить(Заказы.ПолучитьТаблицуТоваровПоЗаказуСРаставленнымРазмещениемБезСумм(СсылкаПроцесс.Заказ));
		
		ТабТов=Заказы.ПолучитьСостояниеТоваров(СсылкаПроцесс,
					?(СсылкаЗадача <> Неопределено И СсылкаЗадача.Выполнена, 
								СсылкаЗадача.ДатаВыполнения, 
								ТекущаяДата()),
				//Истина
				);
				
				
		//Заполним маршруты	
		Заказы.ЗаполнитьМаршрутыВТаблицеСостояний(СсылкаПроцесс,ТабТов);		
		
		
		//Круглов: поскольку фунция возвращает всегда разные колонки с дублями из за размещения в разных ячейках - делаем вот такое вот извращение
		КолонкиСтр="";
		Для Каждого Кол из ТабТов.Колонки Цикл
			Если Кол.Имя="Количество" Тогда Продолжить; КонецЕсли;
			Если Не КолонкиСтр="" Тогда 
				КолонкиСтр=КолонкиСтр+",";
			КонецЕсли;	
			КолонкиСтр=КолонкиСтр+Кол.Имя;
		КонецЦикла;	
		ТабТов.Свернуть(КолонкиСтр,"Количество");	
		//Круглов
		
		
		Форма.Товары.Загрузить(ТабТов);
				
		//07.12.15 теперь новый порядок, как выставил менеджер Форма.Товары.Сортировать("Номенклатура"); 
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьЗаголовокБП(СсылкаПроцесс) Экспорт
	
	Если СсылкаПроцесс.Пустая() Тогда
		
		Возврат "Создание";
		
	Иначе
		
		Если СсылкаПроцесс.Заказ.Пустая() Тогда
			
			Возврат Строка(СсылкаПроцесс);
			
		Иначе
			
			расшЗаказа = "";
			Если ТипЗнч(СсылкаПроцесс.Заказ) = Тип("ДокументСсылка.ИнтернетЗаказПокупателя") Тогда
				расшЗаказа = "интернет ";
			ИначеЕсли ТипЗнч(СсылкаПроцесс.Заказ) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
				расшЗаказа = "внутреннего ";
			КонецЕсли;
			
			Возврат "Сборка " + расшЗаказа + "заказа № " + СсылкаПроцесс.Заказ.Номер + " от " + СсылкаПроцесс.Заказ.Дата + " БП(" + СсылкаПроцесс.Номер + ")";
				
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьМассивКомментариев_Ст(СсылкаПроцесс) Экспорт
	
	//Массив = Новый Массив;
	//
	//Запрос = Новый Запрос("
	//|
	//|ВЫБРАТЬ
	//|	Комментарий, Заголовок, ДатаВыполнения, Исполнитель
	//|ИЗ
	//|(
	//|	ВЫБРАТЬ
	//|		Комментарий, Наименование Заголовок, ДатаВыполнения, Исполнитель
	//|	ИЗ
	//|		Задача.ЗадачаПользователю
	//|	ГДЕ
	//|		БизнесПроцесс = &Ссылка	
	//|
	//|	ОБЪЕДИНИТЬ ВСЕ
	//|
	//|	ВЫБРАТЬ
	//|		Комментарий, Наименование Заголовок, ДатаВыполнения, Исполнитель
	//|	ИЗ
	//|		Задача.ЗадачаПользователю
	//|	ГДЕ
	//|		БизнесПроцесс в (ВЫБРАТЬ Ссылка ИЗ   БизнесПроцесс.ЗаявкаПокупателя   ГДЕ Заказ = &Заказ)	
	//|
	//|	ОБЪЕДИНИТЬ ВСЕ
	//|
	//|	ВЫБРАТЬ
	//|		Комментарий, Наименование Заголовок, ДатаВыполнения, Исполнитель
	//|	ИЗ
	//|		Задача.ЗадачаПользователю
	//|	ГДЕ
	//|		БизнесПроцесс в (ВЫБРАТЬ Ссылка ИЗ   БизнесПроцесс.ИнтернетЗаявка   ГДЕ Заказ = &Заказ)	
	//|
	//|	ОБЪЕДИНИТЬ ВСЕ
	//|
	//|	ВЫБРАТЬ
	//|		Комментарий, Наименование Заголовок, ДатаВыполнения, Исполнитель
	//|	ИЗ
	//|		Задача.ЗадачаПользователю
	//|	ГДЕ
	//|		БизнесПроцесс в (ВЫБРАТЬ Ссылка ИЗ   БизнесПроцесс.СборкаТовара   ГДЕ Заказ = &Заказ)	
	//|
	//|	ОБЪЕДИНИТЬ ВСЕ
	//|
	//|	ВЫБРАТЬ
	//|		Комментарий, Наименование Заголовок, ДатаВыполнения, Исполнитель
	//|	ИЗ
	//|		Задача.ЗадачаПользователю
	//|	ГДЕ
	//|		БизнесПроцесс в (ВЫБРАТЬ Ссылка ИЗ   БизнесПроцесс.ПеремещениеТоваров   ГДЕ Заказ = &Заказ)	
	//|
	//|	ОБЪЕДИНИТЬ ВСЕ
	//|
	//|	ВЫБРАТЬ
	//|		Комментарий, ""Заказ покупателя"", Дата, Ответственный
	//|	ИЗ
	//|		Документ.ЗаказПокупателя
	//|	ГДЕ
	//|		Ссылка = &Заказ
	//|	ОБЪЕДИНИТЬ ВСЕ
	//|
	//|	ВЫБРАТЬ
	//|		КомментарийКДоставке, ""Комментарий к доставке"", Дата, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	//|	ИЗ
	//|		Документ.ИнтернетЗаказПокупателя
	//|	ГДЕ
	//|		Ссылка = &Заказ
	//|
	//|	ОБЪЕДИНИТЬ ВСЕ
	//|
	//|	ВЫБРАТЬ
	//|		Комментарий, ""Внутренний заказ"", Дата, Ответственный
	//|	ИЗ
	//|		Документ.ВнутреннийЗаказ
	//|	ГДЕ
	//|		Ссылка = &Заказ
	//|
	//|	ОБЪЕДИНИТЬ ВСЕ
	//|
	//|	ВЫБРАТЬ
	//|		Комментарий, ""Реализация товаров"", Дата, Ответственный
	//|	ИЗ
	//|		Документ.РеализацияТоваров
	//|	ГДЕ
	//|		Ссылка = &Реализация
	//|
	//|	ОБЪЕДИНИТЬ ВСЕ
	//|
	//|	ВЫБРАТЬ
	//|		Комментарий, ""Сборка заказа"", Дата, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	//|	ИЗ
	//|		БизнесПроцесс.СборкаЗаказа
	//|	ГДЕ
	//|		Ссылка = &Ссылка
	//|	ОБЪЕДИНИТЬ ВСЕ
	//|
	//|	ВЫБРАТЬ
	//|		Комментарий, ""Заявка покупателя"", Дата, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	//|	ИЗ
	//|		БизнесПроцесс.ЗаявкаПокупателя
	//|	ГДЕ
	//|		Заказ = &Заказ
	//|	ОБЪЕДИНИТЬ ВСЕ
	//|
	//|	ВЫБРАТЬ
	//|		Комментарий, ""Интернет заявка"", Дата, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	//|	ИЗ
	//|		БизнесПроцесс.ИнтернетЗаявка
	//|	ГДЕ
	//|		Заказ = &Заказ
	//|) Запрос
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	ДатаВыполнения
	//|");
	//
	//Запрос.УстановитьПараметр("Ссылка", СсылкаПроцесс);
	//Запрос.УстановитьПараметр("Заказ", 	СсылкаПроцесс.Заказ);
	//Запрос.УстановитьПараметр("Реализация", СсылкаПроцесс.РеализацияТоваров);
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	Если Не ПустаяСтрока(Выборка.Комментарий) Тогда
	//	
	//		Массив.Добавить(Новый Структура("Комментарий, Заголовок, ДатаВыполнения, Исполнитель",
	//								Выборка.Комментарий, Выборка.Заголовок, Выборка.ДатаВыполнения, Выборка.Исполнитель));
	//		
	//	КонецЕсли;
	//КонецЦикла;
	//
	//Возврат Массив;
	
КонецФункции
Функция ПолучитьМассивКомментариев(СсылкаПроцесс) Экспорт
	
	Массив = Новый Массив;
	
	Запрос = Новый Запрос("
	|
	|ВЫБРАТЬ
	|	Комментарий, Заголовок, ДатаВыполнения, Исполнитель
	|ИЗ
	|(
	|	ВЫБРАТЬ
	|		Комментарий, Наименование Заголовок, ДатаВыполнения, Исполнитель
	|	ИЗ
	|		Задача.ЗадачаПользователю
	|	ГДЕ
	|		БизнесПроцесс = &Ссылка	
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Комментарий, Наименование Заголовок, ДатаВыполнения, Исполнитель
	|	ИЗ
	|		Задача.ЗадачаПользователю
	|	ГДЕ
	|		БизнесПроцесс в (ВЫБРАТЬ Ссылка ИЗ   БизнесПроцесс.ЗаявкаПокупателя   ГДЕ Заказ = &Заказ)	
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Комментарий, Наименование Заголовок, ДатаВыполнения, Исполнитель
	|	ИЗ
	|		Задача.ЗадачаПользователю
	|	ГДЕ
	|		БизнесПроцесс в (ВЫБРАТЬ Ссылка ИЗ   БизнесПроцесс.ИнтернетЗаявка   ГДЕ Заказ = &Заказ)	
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Комментарий, Наименование Заголовок, ДатаВыполнения, Исполнитель
	|	ИЗ
	|		Задача.ЗадачаПользователю
	|	ГДЕ
	|		БизнесПроцесс в (ВЫБРАТЬ Ссылка ИЗ   БизнесПроцесс.СборкаТовара   ГДЕ Заказ = &Заказ)	
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Комментарий, Наименование Заголовок, ДатаВыполнения, Исполнитель
	|	ИЗ
	|		Задача.ЗадачаПользователю
	|	ГДЕ
	|		БизнесПроцесс в (ВЫБРАТЬ Ссылка ИЗ   БизнесПроцесс.ПеремещениеТоваров   ГДЕ Заказ = &Заказ)	
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Комментарий, ""Заказ покупателя"", Дата, Ответственный
	|	ИЗ
	|		Документ.ЗаказПокупателя
	|	ГДЕ
	|		Ссылка = &Заказ
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		КомментарийКДоставке, ""Комментарий к доставке"", Дата, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|	ИЗ
	|		Документ.ИнтернетЗаказПокупателя
	|	ГДЕ
	|		Ссылка = &Заказ
    |
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Комментарий, ""Внутренний заказ"", Дата, Ответственный
	|	ИЗ
	|		Документ.ВнутреннийЗаказ
	|	ГДЕ
	|		Ссылка = &Заказ
    |
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Комментарий, ""Сборка заказа"", Дата, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|	ИЗ
	|		БизнесПроцесс.СборкаЗаказа
	|	ГДЕ
	|		Ссылка = &Ссылка
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Комментарий, ""Заявка покупателя"", Дата, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|	ИЗ
	|		БизнесПроцесс.ЗаявкаПокупателя
	|	ГДЕ
	|		Заказ = &Заказ
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Комментарий, ""Интернет заявка"", Дата, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|	ИЗ
	|		БизнесПроцесс.ИнтернетЗаявка
	|	ГДЕ
	|		Заказ = &Заказ
	|) Запрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаВыполнения
	|");
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаПроцесс);
	Запрос.УстановитьПараметр("Заказ", 	СсылкаПроцесс.Заказ);
	//Запрос.УстановитьПараметр("Реализация", СсылкаПроцесс.РеализацияТоваров);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Не ПустаяСтрока(Выборка.Комментарий) Тогда
		
			Массив.Добавить(Новый Структура("Комментарий, Заголовок, ДатаВыполнения, Исполнитель",
									Выборка.Комментарий, Выборка.Заголовок, Выборка.ДатаВыполнения, Выборка.Исполнитель));
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции


// ОТБОР ЗАКАЗА

Функция СоздатьСборочныйЛистКоторыйЗакроетСборкуЗаказа(Заказ, Склад) Экспорт
	
	// Закрывает сборочные листы не начавшиеся собираться, путем сосздания сборочных листов
	
	Запрос = Новый Запрос("ВЫБРАТЬ Номенклатура, Упаковка, КоличествоОстаток Собрать ИЗ РегистрНакопления.ТоварыВСборке.Остатки(,Заказ = &Заказ И Склад = &Склад)");
	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Запрос.УстановитьПараметр("Склад", Склад);
	
	Товары = Запрос.Выполнить().Выгрузить();
	Если Товары.Количество() Тогда
	
		докСборЛист = Документы.СборочныйЛист.СоздатьДокумент();
		докСборЛист.Заполнить(Новый Структура("Шапка, Товары", Новый Структура("Заказ, Склад", Заказ, Склад), Товары));
		
		Возврат ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(докСборЛист, РежимЗаписиДокумента.Проведение);  КонецЕсли;
		
	Возврат Истина;
		
КонецФункции
Функция СоздатьЗаказНаПеремещениеКотораяЗакроетЗаказ(Заказ, СкладОтправитель, СкладПолучатель) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ Зак.Номенклатура, Зак.Упаковка, -КоличествоОстаток + ЕСТЬNULL(Количество, 0) Количество
	|ИЗ РегистрНакопления.ЗаказыНаПеремещения.Остатки(,Заказ = &Заказ И СкладОтправитель = &Склад) Зак
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(	ВЫБРАТЬ Номенклатура, Упаковка, СУММА(КоличествоОстаток) Количество
	|		ИЗ РегистрНакопления.ТоварыСобранные.Остатки(, Заказ = &Заказ И Склад = &Склад) 
	|		СГРУППИРОВАТЬ ПО Номенклатура, Упаковка
	|	) Собр
	|ПО
	|	Зак.Номенклатура 	= Собр.Номенклатура И
	|	Зак.Упаковка 		= Собр.Упаковка
	|");
	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Запрос.УстановитьПараметр("Склад", СкладОтправитель);
	
	Товары = Запрос.Выполнить().Выгрузить();
	Если Товары.Количество() Тогда
		
		ДокОбъект = Документы.ЗаказНаПеремещение.СоздатьДокумент();
		ДокОбъект.Заполнить(Новый Структура("Шапка, Товары", 
			Новый Структура("Заказ, СкладОтправитель, СкладПолучатель", 
				Заказ, СкладОтправитель, СкладПолучатель), 
			Товары));
		Возврат ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(ДокОбъект, РежимЗаписиДокумента.Проведение);  КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

Функция ОтобратьУМенеджера(ЗаказСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина); // выключаться будет при выходе (не явно)
	
	СобратьТовар = БизнесПроцессы.СборкаТовара.ТочкиМаршрута.СобратьТовар;
	
	// Получим задачу корректировки заказа
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 	Ссылка, ТочкаМаршрута, Склад, БизнесПроцесс.СкладПолучатель СкладПолучатель
	|ИЗ 		Задача.ЗадачаПользователю 
	|ГДЕ 	(ТочкаМаршрута = &ТочкаСкорректироватьЗаказ ИЛИ ТочкаМаршрута = &ТочкаСобратьТовар) И 
	|		НЕ ПометкаУдаления И НЕ Выполнена И Заказ = &Заказ");
	
	Запрос.УстановитьПараметр("ТочкаСкорректироватьЗаказ", 	БизнесПроцессы.СборкаЗаказа.ТочкиМаршрута.СкорректироватьЗаказ);
	Запрос.УстановитьПараметр("ТочкаСобратьТовар", 			СобратьТовар);
	Запрос.УстановитьПараметр("Заказ", 						ЗаказСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не Выборка.Количество() Тогда 
		ОбщиеФункции.СообщитьТекст("Не найдены задачи по сборке товаров"); 
		Возврат Ложь;
	//	
	//ИначеЕсли Выборка.Количество() > 1 Тогда 
	//	ОбщиеФункции.СообщитьТекст("Найдено несколько задач ""Скорректировать заказ"" относящиеся к данному заказу"); 
	//	Возврат Ложь; 
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Пока Выборка.Следующий() Цикл
		
		ЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		// Зароем документы
		
		Если 	Выборка.ТочкаМаршрута = СобратьТовар И
				Не СоздатьЗаказНаПеремещениеКотораяЗакроетЗаказ(ЗаказСсылка, Выборка.Склад, Выборка.СкладПолучатель) Тогда
			Возврат Ложь; КонецЕсли;
			
		Если Не СоздатьСборочныйЛистКоторыйЗакроетСборкуЗаказа(ЗаказСсылка, Выборка.Склад) Тогда
			Возврат Ложь КонецЕсли;
		
		// Установим статус
		
		Если Не Заказы.УстановитьСостояниеЗаказа(ЗаказСсылка, Перечисления.СостоянияЗаказа.ВРаботе) Тогда
			Возврат Ложь;
			ОтменитьТранзакцию(); КонецЕсли;
		
		// Выполним задачу
		
		ЗадачаОбъект.ДополнительныеСвойства.Вставить("КонтрольАдресации", Ложь);
		Если Не ОбщиеФункции.ВыполнитьЗадачуИСообщитьЕслиОшибка(ЗадачаОбъект) Тогда
			ОтменитьТранзакцию(); 
			Возврат Ложь; КонецЕсли; КонецЦикла;
	
	// Все ок фиксируем
	
	ЗафиксироватьТранзакцию(); 
	Возврат Истина;

КонецФункции


Функция СформироватьИПровестиСборкуИперемещения(Заказ, ПроцессСборка, СкладПолучатель, Таблица) Экспорт
	
	// разобъем их по складам
							
	ТаблРазмещений = КонвертацияТипов.ПолучитьНесколькоТаблицПоПолюРазделителю(Таблица, "Размещение", "ЗначениеЗаполнено(Строка.Размещение)");
	НачатьТранзакцию();
	
	Если ТаблРазмещений.Количество() Тогда
	
		// Создадим таблицу по строкам размещениям строкам
		
		Для Каждого ТабРазмещения Из ТаблРазмещений Цикл
			
			СкладРазмещения = ТабРазмещения[0].Размещение;
			Если ЗначениеЗаполнено(СкладРазмещения) Тогда
				
				Если Не СоздатьСборку(Новый Структура("Шапка, Товары, ТоварыАлгоритм", 
								Новый Структура("Заказ, Склад", Заказ, СкладРазмещения), 
								ТабРазмещения, 
								"НовСтрока.ВСборке = Строка.Количество"),
							СкладПолучатель = СкладРазмещения) Тогда
					ОтменитьТранзакцию();
					Возврат Ложь; КонецЕсли; КонецЕсли; КонецЦикла;
		
		//создадим перемещеиня по маршрутам
		
		Отказ = Ложь;
		Справочники.Маршруты.СоздатьПеремещенияПоПервымЭтапамМаршрутов(таблРазмещений, СкладПолучатель, Заказ, ПроцессСборка, Отказ);
		Если Отказ Тогда
			ОтменитьТранзакцию();
			Возврат Ложь; КонецЕсли; КонецЕсли;
	
	// Все закругляемся
	
	ЗафиксироватьТранзакцию();
	Возврат Истина;
	
КонецФункции