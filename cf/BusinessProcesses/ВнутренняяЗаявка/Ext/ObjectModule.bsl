
Функция ПредставлениеЗадачи(Задача)
	
	Заказ = Задача.БизнесПроцесс.Заказ;
    
	НомерЗаказа   = СокрЛП(Заказ.Номер);
	Пока Лев(НомерЗаказа, 1)="0" Цикл   			  // удаление ведущих нулей
		НомерЗаказа = Сред(НомерЗаказа, 2);
	КонецЦикла;

	Возврат Задача.Наименование + " № "  + НомерЗаказа + " (переместить " + Заказ.Склад + " -> " + Заказ.Заказчик + ")";
	
КонецФункции  


Процедура СтартПередСтартом(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	Если Не Заказы.УстановитьСостояниеЗаказа(Заказ, Перечисления.СостоянияЗаказа.Черновик) Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ФормированиеЗаказаПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	Если Не Заказы.УстановитьСостояниеЗаказа(Заказ, Перечисления.СостоянияЗаказа.ВРаботе) Тогда
			
		Отказ = Истина;
			
	КонецЕсли;
	
	// Если впереди уже есть невыполненая задача сборки тогда установим ей статус выполненной
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	СУММА(ВЫБОР КОГДА Выполнена ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) Выполненных,
	|	СУММА(ВЫБОР КОГДА Выполнена ТОГДА 0 ИНАЧЕ 1 КОНЕЦ) НеВыполненных
	|ИЗ			Задача.ЗадачаПользователю
	|ГДЕ		БизнесПроцесс = &БизнесПроцесс
	//|	Не Выполнена И
	//|	Не ПометкаУдаления И
	//|	ТочкаМаршрута = &ТочкаСборкаЗаказа
	|");
	
	Запрос.УстановитьПараметр("БизнесПроцесс", 		Ссылка);
	//Запрос.УстановитьПараметр("ТочкаСборкаЗаказа", 	БизнесПроцессы.ЗаявкаПокупателя.ТочкиМаршрута.СборкаЗаказа);
	//Запрос.УстановитьПараметр("ТочкаСборкаЗаказа", 	БизнесПроцессы.ЗаявкаПокупателя.ТочкиМаршрута.ФормированиеЗаказа);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если 	Выборка.Следующий() И
			Выборка.Выполненных = 1 И
			Выборка.НеВыполненных = 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		ФормируемыеЗадачи.Очистить();
		
	КонецЕсли;
	
КонецПроцедуры
Процедура ФормированиеЗаказаПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	
	COMПользователь = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор("9178cb51-1157-11df-94a9-0015175303fd"));
	
	Для Каждого Задача Из ФормируемыеЗадачи Цикл
		
		Задача.Наименование = ПредставлениеЗадачи(Задача);
		Задача.Пользователь = ?(Заказ.Автор = COMПользователь, ПараметрыСеанса.ТекущийПользователь, Заказ.Автор);
		
	КонецЦикла;
	
КонецПроцедуры

// УСЛОВИЯ

Процедура УсловиеОтменыПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = Заказы.ПолучитьСостояниеЗаказа(Заказ) = Перечисления.СостоянияЗаказа.Отменен;
	
КонецПроцедуры
Процедура УсловиеЗаказОтгруженПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = Заказы.ЗаказОтработал(Заказ);
	
	Если Результат Тогда
	
		Заказы.УстановитьСостояниеЗаказа(Заказ, Перечисления.СостоянияЗаказа.Отгружен);
		
	КонецЕсли;
	
КонецПроцедуры

// ЗАКРЫТИЕ

Процедура ЗакрытиеЗаказаОбработка(ТочкаМаршрутаБизнесПроцесса)
	
	// Делаем корректировку на все что осталось недозаказано
	
	//ТаблицаИзменений = КонвертацияТипов.ПолучитьТаблицуРазницуДокументаИРегистраОстатков(
	//						Документы.ВнутреннийЗаказ.СоздатьДокумент().Товары.Выгрузить(), 
	//						"ВнутренниеЗаказы",
	//						"Номенклатура, Упаковка, Размещение",
	//						"Количество",
	//						Новый Структура("ВнутреннийЗаказ", Заказ));
							
	
	
	//Новый алгоритм:
		
	
	
	// берем остатки резервов  
	// добавляем разницу между остатками заказа и резервами
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заказ",Заказ);
	Запрос.Текст = "
	|Выбрать Номенклатура, Размещение, -КоличествоОстаток Количество из РегистрНакопления.ТоварыВРезерве.Остатки(,ДокументРезерва = &Заказ) 
	|
	|Объединить все
	|
	|Выбрать Зак.Номенклатура, Неопределено , -Зак.КоличествоОстаток + isnull(Рез.КоличествоОстаток,0)  из РегистрНакопления.ВнутренниеЗаказы.Остатки(,ВнутреннийЗаказ = &Заказ) Зак
	|Левое соединение
	|РегистрНакопления.ТоварыВРезерве.Остатки(,ДокументРезерва = &Заказ) Рез
	|По Зак.Номенклатура = Рез.Номенклатура
	|Где Зак.КоличествоОстаток - isnull(Рез.КоличествоОстаток,0) > 0
	|";
	
	
	ТаблицаИзменений = Запрос.Выполнить().Выгрузить();
	
	
	
	Если ТаблицаИзменений.Количество() Тогда
		
		// Шапка
		
		НовДок = Документы.КорректировкаВнутреннегоЗаказа.СоздатьДокумент();
		НовДок.Заказ 	= Заказ;
		НовДок.Дата 	= ТекущаяДата();
		
		// Таблица
		
		НовДок.Товары.Загрузить(ТаблицаИзменений);
		
		// Проведение
		
		Если Не ПроведенияДокументов.ПровестиДокумент(НовДок) Тогда
			
			ВызватьИсключение
			"Ошибка формирования закрывающей корректировки заказа!";
			
		КонецЕсли;
		
		// Если были отгруженные товары тогда сделаем их отгруженными
		
		Если БизнесПроцессы.ВнутренняяЗаявка.ПолучитьТаблицуТоваров(Ссылка).Найти(Истина, "Отгружено") <> Неопределено Тогда
			Заказы.УстановитьСостояниеЗаказа(Заказ, Перечисления.СостоянияЗаказа.Отгружен);
		КонецЕсли;
		
	КонецЕсли;						
	
КонецПроцедуры

// СБОРКА

Процедура СборкаЗаказаПередСозданиемВложенныхБизнесПроцессов(ТочкаМаршрутаБизнесПроцесса, ФормируемыеБизнесПроцессы, Отказ)
	
	НовПроцесс = БизнесПроцессы.СборкаЗаказа.СоздатьБизнесПроцесс();
	НовПроцесс.Дата 			= ТекущаяДата();
	//НовПроцесс.ДатаПервойСборки = БизнесПроцессы.СборкаЗаказа.ПолучитьДатуПервойСборкиЗаказа(Заказ);
	НовПроцесс.Заказ 			= Заказ;
	НовПроцесс.Склад 			= Заказ.Склад;
	НовПроцесс.ЯчеистаяСборка 	= Заказ.Склад.Ячеестый;
	
	ФормируемыеБизнесПроцессы.Добавить(НовПроцесс);
	
КонецПроцедуры

//Антон
////////////////////////////////////////
//Хитрая функция чтоб макет получить
Функция ПолучитьСхемуКомпоновки() Экспорт
	Возврат ПолучитьМакет("Схема");
КонецФункции
