

&НаКлиенте
Перем СтруктураКолонокТовары Экспорт;

&НаКлиенте
Перем МассивКомментариев Экспорт;

&НаКлиенте
Перем мВремяОткрытия;

// ОБНОВЛЕНИЕ

&НаСервере
Процедура ПроверитьУстановитьАвтораНаСервере()
	
	Если Автор.Пустая() Тогда
		
		Автор = ПараметрыСеанса.ТекущийПользователь;
		
	КонецЕсли;
	
КонецПроцедуры
&Наклиенте
Процедура ПроверитьУстановитьАвтора()
	
	ПроверитьУстановитьАвтораНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовок()
	
	//Заголовок = ФункцииБизнесПроцессов.ПолучитьЗаголовокБП(Объект.Ссылка);
	Заголовок = БизнесПроцессы.ЗаявкаПокупателя.ПолучитьЗаголовокБП(Объект.Ссылка);
	
КонецПроцедуры
&НаСервере
Функция ТребуетПеремещения()
	
	Возврат Товары.НайтиСтроки(Новый Структура("Размещение", Справочники.Склады.ПустаяСсылка())).Количество() +
			Товары.НайтиСтроки(Новый Структура("Размещение", СкладОтправитель)).Количество() <> Товары.Количество();
	
КонецФункции
&НаСервере
Процедура УправлениеВидимостьюДоступностью() Экспорт
	
	РазрешеноРедактировать 	= 	РазрешеноРедактировать();
	
	ТребуетПеремещения 	= ТребуетПеремещения();
	ЕстьРазмещение 		= Не Товары.НайтиСтроки(Новый Структура("Размещение", Справочники.Склады.ПустаяСсылка())).Количество() = Товары.Количество();
	ЕстьОтгруженные 	= Булево(Товары.НайтиСтроки(Новый Структура("Отгружено", Истина)).Количество());
			
	// ВИДИМОСТЬ РЕКВИЗИТОВ ШАПКИ
	
	Элементы.Заказ.Видимость 		= Не Объект.Стартован;
	//Элементы.Автор.ТолькоПросмотр 	= Не РольДоступна("ПолныеПрава") И Не Автор.Пустая() И Автор <> ПараметрыСеанса.ТекущийПользователь;
	
	Элементы.СкладОтправитель.ТолькоПросмотр = Не РазрешеноРедактировать;
	Элементы.СкладПолучатель.ТолькоПросмотр = Не РазрешеноРедактировать;
	
	// ВИДИМОСТЬ ТАБЛИЧНОЙ ЧАСТИ
	
	Элементы.Товары.ТолькоПросмотр 		= Не РазрешеноРедактировать;

	// ВИДИМОСТЬ КОМАНД ОБЪЕКТА

    Элементы.КнопкаСтартоватьИЗакрыть.	Видимость 	= РазрешеноРедактировать И Не ТребуетПеремещения;
	Элементы.КнопкаПереместитьИЗакрыть.	Видимость 	= РазрешеноРедактировать И ТребуетПеремещения;
	Элементы.ПровестиЗаказ.				Видимость	= РазрешеноРедактировать;
	Элементы.КнопкаЗаписать.			Видимость 	= РазрешеноРедактировать;	
	Элементы.КнопкаСохранитьЧерновик.	Видимость 	= Не Объект.Стартован;	
	Элементы.КнопкаОтменитьЗаказ.		Видимость 	= Объект.Стартован И РазрешеноРедактировать И Не ЕстьОтгруженные;
	Элементы.КнопкаОтменитьЧтоОсталось.	Видимость 	= Объект.Стартован И РазрешеноРедактировать И ЕстьОтгруженные;
	
	// ВИДИМОСТЬ КОМАНД ТАБЛИЧНОЙ ЧАСТИ
	
	Элементы.КнопкаРазместить.	Видимость	= РазрешеноРедактировать И Товары.Количество();  
	Элементы.КнопкаПодбор.		Видимость 	= РазрешеноРедактировать;
	
	// ЗАГОЛОВКИ
	
	Элементы.ДекорацияСтатусЗаказа.Заголовок = Заказы.ПолучитьСостояниеЗаказаСтрокой(Объект.Заказ);
	/////
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//видимость доступна
	//для автора, ответственного, основного менеджера партнера и для того, у кого главные права в области.
	ПользователиУправляющиеРезервом = Новый Массив;
	ПользователиУправляющиеРезервом.Добавить(Объект.Заказ.Автор);
	ПользователиУправляющиеРезервом.Добавить(Объект.Заказ.Ответственный);
	//ПользователиУправляющиеРезервом.Добавить(Объект.заказ.Партнер.ОсновнойМенеджер);
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ДоверенныеЛицаПользователя.ДоверенноеЛицо
	                      |ИЗ
	                      |	РегистрСведений.ДоверенныеЛицаПользователя КАК ДоверенныеЛицаПользователя
	                      |ГДЕ
	                      |	ДоверенныеЛицаПользователя.Пользователь В (&Пользователи)");
	Запрос.УстановитьПараметр("Пользователи", ПользователиУправляющиеРезервом);
	ДоверенныеЛица = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ДоверенноеЛицо");	
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	////////////////////////////////////////////////////////////////////////////
	//ВклАвтоматическоеСнятиеРезервов = Константы.ВклАвтоматическоеСнятиеРезервов.Получить();
	Если АвтоматическоеСнятиеРезервовВключено() И (РольДоступна("ПолныеПраваВОбласти") ИЛИ РольДоступна("ПолныеПрава") ИЛИ (ПользователиУправляющиеРезервом.Найти(ТекущийПользователь)<>Неопределено) ИЛИ (ДоверенныеЛица.Найти(ТекущийПользователь)<>Неопределено))  Тогда
		Элементы.ГруппаРезервы.Видимость = Истина;
		Элементы.ДатаАктуальностиРезерва.Видимость = Истина;
		Элементы.кнопкаПродлитьРезерв.Видимость = Истина;
		Элементы.ПродлитьРезервНа.Видимость = Истина;
		ПолучитьДатуАктуальностиРезерва();
	Иначе
		Элементы.ГруппаРезервы.Видимость = Ложь;
		Элементы.ДатаАктуальностиРезерва.Видимость = Ложь;
		Элементы.кнопкаПродлитьРезерв.Видимость = Ложь;
		Элементы.ПродлитьРезервНа.Видимость = Ложь;
	КонецЕсли;
	//ОСНОВАНИЕ ВЫДАЧИ ИНСТРУМЕНТА
	ОснованиеВыдачиИнструментаУстановитьДоступность();
	УстановитьДоступностьДляЭлементовВводаНаОсновании(Объект.Заказ);
	////
КонецПроцедуры

&НаСервере
Процедура ОснованиеВыдачиИнструментаУстановитьДоступность()
	СогласованиеДоступно = СогласованиеДоступно();
	Элементы.Статус.Доступность = СогласованиеДоступно И НЕ ОснованиеВыдачиИнструмента.Пустая();
	Если Не СогласованиеДоступно И Статус = Перечисления.СтатусыВнутреннегоЗаказа.Согласовано Тогда
		Элементы.ОснованиеВыдачиИнструмента.Доступность = Ложь		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьДляЭлементовВводаНаОсновании(Заказ)
	Если Элементы.Найти("ДокументВыдачаНаМОЛСоздатьНаОсновании") = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Состояние = РегистрыСведений.СостоянияЗаказовТекущее.Получить(Новый Структура("Заказ",Заказ)).Состояние;
	Если Заказ.Статус = Перечисления.СтатусыВнутреннегоЗаказа.Согласовано И НЕ Заказ.ОснованиеВыдачиИнструмента.Пустая() 
		И Состояние = Перечисления.СостоянияЗаказа.Отгружен Тогда
		ФлагДоступность = Истина;
	Иначе
		ФлагДоступность = Ложь;
	КонецЕсли;
	Элементы.ДокументВыдачаНаМОЛСоздатьНаОсновании.Доступность = ФлагДоступность;
КонецПроцедуры

&НаСервере
Процедура ПрочитатьРеквизиты()
	
	Если НЕ Объект.Ссылка.Пустая() Тогда 
		
		ФункцииБизнесПроцессов.ЗаполнитьДанные(ЭтаФорма, Объект.Ссылка);
		
	ИначеЕсли Не Объект.Заказ.Пустая() Тогда
		
		ПеречитатьРеквизитыПоЗаказу();
		
	Иначе
		
		ФункцииФормДокументов.ЗаполнитьЗначенияПоУмолчанию(ЭтаФорма, ЭтаФорма.Элементы);

	КонецЕсли;
	
	//Элементы.ЗадачиПроцесса.Обновить();
	//Элементы.ДокументыПроцесса.Обновить();
	
	УправлениеВидимостьюДоступностью();
	
КонецПроцедуры

&НаСервере
Функция РазрешеноРедактировать()
	
	Возврат Не Объект.Стартован ИЛИ
								(	Объект.Стартован И 
									ФункцииБизнесПроцессов.СтоитНаТочкеМаршрута(
											Объект.Ссылка, 
											БизнесПроцессы.ВнутренняяЗаявка.ТочкиМаршрута.ФормированиеЗаказа
															)
									);
КонецФункции

// ТИПОВЫЕ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// прикрепленные файлы
	ОбновитьВидимостьПрикрепленныхФайловНаСервере();
	
	// Оповещения
	События.ИницилизироватьСобытияОбъектаНаФорме(ЭтаФорма, Объект.Заказ);
		
	// информация о товаре
	РаботаСНоменклатурой.ДобавитьОперативнуюИнформациюОТоваре(ЭтаФорма);
	
	// комментарии
	ФункцииБизнесПроцессов.ДобавитьРаботуСКомментариями(ЭтаФорма);
	
	// установим параметр
	
	ЗадачиПроцесса.Параметры.УстановитьЗначениеПараметра("Ссылка", 		Объект.Ссылка);
	ДокументыПроцесса.Параметры.УстановитьЗначениеПараметра("Ссылка", 	Объект.Ссылка);
	ДокументыПроцесса.Параметры.УстановитьЗначениеПараметра("Заказ", 	Объект.Заказ);
	
	// Прочитаем товары
	
	ПрочитатьРеквизиты();
	ФункцииФормДокументов.РассчитатьДинамическиеКолонки(
					Товары,
					ФункцииФормДокументов.ПолучитьСтруктуруКолонокТовары(Элементы.Товары));
					
	Если Объект.Заказ.Пустая() Тогда
		
		НовыйСклад 		= Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор("d41ff055-98b3-11e0-9ab8-0015175303fd"));
		СкладПолучатель = ОбщиеФункции.НастройкаПользователя("ПоУмолчанию_Склад");
		
		Если НовыйСклад <> СкладПолучатель Тогда
			СкладОтправитель = НовыйСклад;
		КонецЕсли;
		
	КонецЕсли;
					
	// Управление видимостью доступностью
	
	УправлениеВидимостьюДоступностью();
	
	// Обновим заголовок
	
	УстановитьЗаголовок();
	
	ОбновитьСостояниеТоваровНаСервере();
	
	ТрекНомера.Параметры.УстановитьЗначениеПараметра("Заказ",Объект.Заказ);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	
	РазрешеноРедактировать = РазрешеноРедактировать();
	
	СтруктураКолонокТовары = ФункцииФормДокументов.ПолучитьСтруктуруКолонокТовары(Элементы.Товары);
	
	ФункцииФормДокументов.УстановитьДоступностьКолонокТоваров(Элементы.Товары, СтруктураКолонокТовары);

	// комментарии
	ФункцииБизнесПроцессовКлиент.ПолучитьМассивКомментариев(ЭтаФорма, Объект.Ссылка);
	
	// Пересчитаем строки если заказ был добавлен
	
	//ФункцииФормДокументов.РассчитатьДинамическиеКолонки(Товары, СтруктураКолонокТовары);
	
	// Автосохранение
	
	  // Автосохранение
	
	Если РазрешеноРедактировать Тогда 
		Если АвтосохранениеКлиент.ИницилизироватьСохранение(ЭтаФорма) Тогда
			
			ДанныеДляПодбора = "";
			ЗагрузитьДанныеАвтосохранения(ДанныеДляПодбора); 
			Модифицированность = Истина; 
			
		Если Не ПустаяСтрока(ДанныеДляПодбора) Тогда ПодборВыполнить(,Новый Структура("МассивТоваровСтрокой", ДанныеДляПодбора)) КонецЕсли; КонецЕсли; КонецЕсли;
		
	// ---
	мВремяОткрытия = ТекущаяДата();
	Слежение.Записать("Открытие. Внутренняя заявка", "БизнесПроцесс.ВнутренняяЗаявка","ФормаБизнесПроцесса", Объект.Ссылка, "Состояние: " + Элементы.ДекорацияСтатусЗаказа.Заголовок);
	////
	Если АвтоматическоеСнятиеРезервовВключено() Тогда
		Список = СформироватьСписокСроков();
		Элементы.ПродлитьРезервНа.СписокВыбора.ЗагрузитьЗначения(Список);
	КонецЕсли;	
КонецПроцедуры
&НаКлиенте
Процедура ПриЗакрытии()
	
	// Автосохранение
	Попытка АвтосохранениеСервер.УдалитьАвтоСохранение(ИмяФормы, Объект.Ссылка);
	Исключение КонецПопытки;
		
	// ---
	//Слежение.Записать("Закрытие. Внутренняя заявка", "БизнесПроцесс.ВнутренняяЗаявка","ФормаБизнесПроцесса", Объект.Ссылка,"Время работы " + Строка(ТекущаяДата() - мВремяОткрытия) + " сек. Состояние: " + Элементы.ДекорацияСтатусЗаказа.Заголовок);
	
КонецПроцедуры
&НаКлиенте
Процедура ОбщиеРеквизитыНажатие(Элемент)
	
	ФункцииФормДокументов.ОткрытьОбщиеРеквизитыБП(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если 	Не Модифицированность И
			(	ИмяСобытия = СобытияСистемы.Событие_ЗаписанаЗадача() ИЛИ
				ИмяСобытия = СобытияСистемы.Событие_ЗаписанБизнесПроцесс()
			) Тогда
		
		ПрочитатьРеквизиты();
		
   	КонецЕсли;
	
	Если  ИмяСобытия = "УстановленОтборДляРазмещения"  Тогда
		Если Параметр <> Неопределено Тогда

			ПараметрыОткрытияФормы = Новый Структура();
			ПараметрыОткрытияФормы.Вставить("ТекущийСклад", СкладОтправитель);
			ПараметрыОткрытияФормы.Вставить("СписокСкладов", Параметр.СписокСкладов);
			ОткрытьФорму("ОбщаяФорма.ДиалогРазмещения", ПараметрыОткрытияФормы,ЭтаФорма,,,,Новый ОписаниеОповещения("ОбработкаРазмещения",ЭтаФорма,),);
		КонецЕсли;
		//ОткрытьФормуРазмещения(ПараметрыОткрытияФормы);
		
	КонецЕсли;

КонецПроцедуры
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	СобытияСистемы.ОповеститьОЗаписиБизнесПроцесса(Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Функция ОбязательныеРеквизитыЗаполнены()
	
	Заполнены = Истина;
	
	Если СкладОтправитель.Пустая() Тогда
		Заполнены = Ложь;
		ОбщиеФункции.СообщитьТекст("Склад отправитель не заполнен", "СкладОтправитель"); КонецЕсли;
	
	Если СкладПолучатель.Пустая() Тогда
		Заполнены = Ложь;
		ОбщиеФункции.СообщитьТекст("Склад получатель не заполнен", "СкладПолучатель"); КонецЕсли;
	
	Возврат Заполнены;
	
КонецФункции
&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Не ОбязательныеРеквизитыЗаполнены() Тогда Отказ = Истина; КонецЕсли;
	
КонецПроцедуры
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Стартует = Ложь;
	ПараметрыЗаписи.Свойство("Старт", Стартует);
	Стартует = Стартует = Истина;
	        
	Если 	Не ТекущийОбъект.Заказ.Пустая() И
			ТекущийОбъект.Заказ.Проведен Тогда // если это старый проведенный заказ тогда делаем на него корректировку
		
		Если Не СоздатьИПровестиКорректировкуЗаказа() Тогда
			
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;
		
	Иначе 
	
		НовДокумент = ПолучитьЗаполненныйЗаказ(Стартует);
		
		Если Не ПроведенияДокументов.ПровестиДокумент(НовДокумент,,,
						?(Стартует, 
								РежимЗаписиДокумента.Проведение,
								РежимЗаписиДокумента.Запись)) Тогда
								
			Объект.Заказ = Документы.ВнутреннийЗаказ.ПустаяСсылка();
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;
		
		ТекущийОбъект.Заказ = НовДокумент.Ссылка;
		
	КонецЕсли;
	
	// Автосохранение
	Если Не Отказ И Объект.Ссылка.Пустая() Тогда АвтосохранениеСервер.УдалитьАвтоСохранение(ИмяФормы, Объект.Ссылка) КонецЕсли;
	
КонецПроцедуры
&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// сохраним порядок строк
	времТЗ = Товары.Выгрузить(,"Номенклатура");
	времТЗ.Свернуть("Номенклатура");
	времТЗ.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	
	Если Не РаботаСНоменклатурой.СохранитьПорядокСтрок(Объект.Заказ, времТЗ) Тогда
		Отказ = Истина; КонецЕсли;
	
КонецПроцедуры
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	Если Не ОснованиеВыдачиИнструмента.Пустая() Тогда
		ПроверяемыеРеквизиты.Добавить("Статус");
	КонецЕсли;
КонецПроцедуры


#Область Автосохранение

&НаСервере
Процедура ЗагрузитьДанныеАвтосохранения(ДанныеДляПодбора)
	
	АвтосохранениеСервер.СчитатьДанныеФормыИУдалитьСохранение(ЭтаФорма, ДанныеДляПодбора)
	
КонецПроцедуры
&НаСервере
Функция АвтосохранениеСервер(ЕстьДамп)
	
	Возврат АвтосохранениеСервер.СохранитьДампФормы(ЭтаФорма, ЕстьДамп);
	
КонецФункции
&НаКлиенте
Процедура Автосохранение()
	
	Перем ЕстьДамп;
	
	Сохранилось = АвтосохранениеСервер(ЕстьДамп);
	
	АвтосохранениеКлиент.ПроизошлоАвтосохранение(Сохранилось, ЕстьДамп, Объект.Ссылка);
	
КонецПроцедуры
&НаСервере
Функция ПолучитьДамп()
	
	Возврат АвтосохранениеСервер.ПолучитьДамп(ЭтаФорма);

КонецФункции
	
#КонецОбласти

// СОБЫТИЯ ЭЛЕМЕНТОВ

&НаСервере
Функция ОтменитьЗаказНаСервере()
	
	СсылкаЗадачи = ФункцииБизнесПроцессов.ТекущаяЗадача(Объект.Ссылка);
	
	НачатьТранзакцию();
	
	Если Не Заказы.УстановитьСостояниеЗаказа(Объект.Заказ, Перечисления.СостоянияЗаказа.Отменен) Тогда
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецЕсли;
	
	ЗадачаОбъект = СсылкаЗадачи.ПолучитьОбъект();
	ЗадачаОбъект.Комментарий = Объект.Комментарий;
	
	Попытка
		ЗадачаОбъект.ВыполнитьЗадачу();
	Исключение
		ОбщиеФункции.СообщитьТекст(ОписаниеОшибки());
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
	Модифицированность = Ложь;
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьНаличиеСобранного(Заказ)	
	//Если есть товар в сборке то запрещаем закрытие
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заказ",Заказ);
	Запрос.Текст = "
	|Выбрать *  из РегистрНакопления.ТоварыСобранные.Остатки(,Заказ = &Заказ)
	|";
	Рез = Запрос.Выполнить();
	Возврат Рез.Пустой();
КонецФункции	

&НаКлиенте
Процедура ОтменитьЗаказ(Команда)
	
	Если  ПроверитьНаличиеСобранного(Объект.Заказ) = Ложь Тогда
		ПоказатьПредупреждение(,"Невозможно закрытие заказа так как есть собранный товар. Необходимо сначала отгрузить его.");
		Возврат;
	КонецЕсли;	
	
	Если 	Вопрос("Отменить заказ?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да И
			ОтменитьЗаказНаСервере() Тогда
		
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ОтменитьЧтоОсталось(Команда)
	
	Если Не ОбязательныеРеквизитыЗаполнены() Тогда Возврат КонецЕсли;
	
	Если 	Вопрос("Отменить неотгруженные позиции, а заказ закрыть?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да И
			ОтменитьЗаказНаСервере() Тогда
		
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПеречитатьРеквизитыПоЗаказу()
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 	
	|	Заказчик СкладПолучатель, Склад СкладОтправитель, ЗакупитьНедостающее
	|ИЗ
	|	Документ.ВнутреннийЗаказ
	|ГДЕ
	|	Ссылка = &Заказ
	|;
	|ВЫБРАТЬ
	|	Номенклатура,
	|	Упаковка,
	|	Размещение,
	|	КоличествоОстаток Количество
	|ИЗ
	|	РегистрНакопления.ВнутренниеЗаказы.Остатки(,ВнутреннийЗаказ = &Заказ)
	|");
	
	Запрос.УстановитьПараметр("Заказ", Объект.Заказ);
	Выгрузка = Запрос.ВыполнитьПакет();
	
	Если Выгрузка.Количество() Тогда

		ЗаполнитьЗначенияСвойств(ЭтаФорма,  Выгрузка[0].Выгрузить()[0]);
		Товары.Загрузить(Выгрузка[1].Выгрузить());
		
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ЗаказПриИзменении(Элемент)
	
	ПеречитатьРеквизитыПоЗаказу();
	УправлениеВидимостьюДоступностью();
	УстановитьЗаголовок();
	
КонецПроцедуры
&НаКлиенте
Процедура НадписьРедактироватьЗаказНажатие(Элемент)
	
	ОткрытьФорму("Задача.ЗадачаПользователю.ФормаОбъекта", Новый Структура("Ключ",ФункцииБизнесПроцессов.ТекущаяЗадача(Объект.Ссылка)));
	
КонецПроцедуры

&НаСервере
Процедура РазместитьНаСервере(СпособРазмещения, СтруктураКолонокТовары)

	ТЗТоваров = РабочииТовары();
	
	Заказы.ПроставитьРазмещениеВТаблицеТоваров(
				ТЗТоваров, 
				СпособРазмещения.ВыбранныеПриоритеты,,
				Объект.Заказ,,
				СпособРазмещения);
				
	Если ТЗТоваров.Количество() Тогда
		
		ФункцииФормДокументов.РассчитатьСуммыТабличныхЧастейВоВсехСтроках(ТЗТоваров, СтруктураКолонокТовары);
		СклеитьТаблицыТоваров(ТЗТоваров);
		УправлениеВидимостьюДоступностью();
		
	КонецЕсли;
	
КонецПроцедуры
//////////
&НаКлиенте
Процедура Разместить(Команда)
	
	ОткрытьФорму("ОбщаяФорма.ДиалогРазмещения",Новый Структура("ТекущийСклад", СкладОтправитель),ЭтаФорма,,,,Новый ОписаниеОповещения("ОбработкаРазмещения",ЭтаФорма));
	
	//ПараметрыОткрытияФормы = Новый Структура();
	//ПараметрыОткрытияФормы.Вставить("ТекущийСклад", СкладОтправитель);
	//
	//ОткрытьФормуРазмещения(ПараметрыОткрытияФормы);
	
КонецПроцедуры
&НаКлиенте
Процедура ОбработкаРазмещения(Результат, Параметры) Экспорт
	Если Результат <> Неопределено Тогда
		
		РазместитьНаСервере(Результат, СтруктураКолонокТовары);
		Модифицированность = Истина;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРазмещенияПослеЗаполнения(Результат, Параметры) Экспорт
	
	//Если Результат <> Неопределено Тогда

	//	ПараметрыОткрытияФормы = Новый Структура();
	//	ПараметрыОткрытияФормы.Вставить("ТекущийСклад", СкладОтправитель);
	//	ПараметрыОткрытияФормы.Вставить("СписокСкладов", Результат.СписокСкладов);
	//	ОткрытьФорму("ОбщаяФорма.ДиалогРазмещения", ПараметрыОткрытияФормы,ЭтаФорма,,,,Новый ОписаниеОповещения("ОбработкаРазмещения",ЭтаФорма,),);

	//	//ОткрытьФормуРазмещения(ПараметрыОткрытияФормы);
	//	
	//КонецЕсли;


КонецПроцедуры
////////////////
&НаКлиенте
Процедура ДокументыПроцессаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекДанные = Элемент.ТекущиеДанные;
	
	Если ТекДанные.ВидДокумента = "ВнутреннийЗаказ" Тогда
		
		ОткрытьФорму("Документ.ВнутреннийЗаказ.ФормаОбъекта", Новый Структура("Ключ, НеОткрыватьДругуюФорму", ТекДанные.Документ, Истина), ЭтаФорма);
		
	Иначе
		
		ОткрытьФорму("Документ." + ТекДанные.ВидДокумента + ".ФормаОбъекта", Новый Структура("Ключ", ТекДанные.Документ), ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

// ЗАПИСЬ ЗАКАЗА

&НаСервере
Функция РабочииТовары()
	
	Возврат КонвертацияТипов.ПолучитьТаблицуИзНайденныхСтрокТаблицыЗначений(Товары.Выгрузить(), Новый Структура("Отгружено", Ложь));
	
КонецФункции
&НаСервере
Процедура СклеитьТаблицыТоваров(ДобТаблица)
	
	КонвертацияТипов.УдалитьСтрокиТЗ(Товары, Новый Структура("Отгружено", Ложь));
	КонвертацияТипов.ДобавитьТаблицуКДругойТаблице(Товары, ДобТаблица);	
	
КонецПроцедуры

&НаСервере
Функция СохранитьИзмененияРеквизитовЗаказа(ЕстьТранзакция = Ложь, ВТранзакции = Ложь)
	
	// поменяем реквизиты
	// делаем тупо
	
	Если	СкладОтправитель <> Объект.Заказ.Склад ИЛИ 
			СкладПолучатель <> Объект.Заказ.Заказчик ИЛИ
			Автор <> Объект.Заказ.Автор ИЛИ
			ЗакупитьНедостающее <> Объект.Заказ.ЗакупитьНедостающее ИЛИ
			ОснованиеВыдачиИнструмента <> Объект.Заказ.ОснованиеВыдачиИнструмента ИЛИ
			Статус <> Объект.Заказ.Статус ИЛИ 
			ФИО <> Объект.Заказ.ФИО		Тогда
			
		ЗаказОбъект = Объект.Заказ.ПолучитьОбъект();
		
		ЗаполнитьЗначенияСвойств(ЗаказОбъект, ЭтаФорма, , "Товары");
		
		ЗаказОбъект.Склад 		= СкладОтправитель;
		ЗаказОбъект.Заказчик 	= СкладПолучатель;
		ЗаказОбъект.ЗакупитьНедостающее = ЗакупитьНедостающее;
		ЗаказОбъект.ОснованиеВыдачиИнструмента = ОснованиеВыдачиИнструмента;
		ЗаказОбъект.Статус = Статус;
		ЗаказОбъект.ФИО = ФИО;
		Если ВТранзакции Тогда
			НачатьТранзакцию();
			ЕстьТранзакция = Истина;
		КонецЕсли;
		
		//ЗаказОбъект.ОбменДанными.Загрузка = Истина;
		Если Не ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(ЗаказОбъект) Тогда
			Если ВТранзакции Тогда ОтменитьТранзакцию(); КонецЕсли;
			Возврат Ложь; КонецЕсли; КонецЕсли;
	
	Возврат Истина; 
	
КонецФункции

&НаСервере
Функция СоздатьИПровестиКорректировкуЗаказа()
	// Проверим запихаем только то что изменилось
	
	ТаблицаИзменений = КонвертацияТипов.ПолучитьТаблицуРазницуДокументаИРегистраОстатков(
							РабочииТовары(), 
							"ВнутренниеЗаказы",
							"Номенклатура, Упаковка, Размещение",
							"Количество",
							Новый Структура("ВнутреннийЗаказ", Объект.Заказ));
	
	ЕстьТранзакция = Ложь; // были ли зафиксированы изменения реквизитов заказа, и соответственно начата транзакция
							
	Если НЕ СохранитьИзмененияРеквизитовЗаказа(ЕстьТранзакция, Истина) Тогда
		 Возврат Ложь;
	КонецЕсли;
	
	
	// Проведение
	
	Если ЕстьТранзакция ИЛИ ТаблицаИзменений.Количество() Тогда
		
		// Шапка
		
		НовДок = Документы.КорректировкаВнутреннегоЗаказа.СоздатьДокумент();
		НовДок.Заказ 	= Объект.Заказ;
		НовДок.Дата 	= ТекущаяДата();
		
		// Таблица

		Если ТаблицаИзменений.Количество() Тогда 					
			НовДок.Товары.Загрузить(ТаблицаИзменений);
		КонецЕсли;
		
		Если НЕ ПроведенияДокументов.ПровестиДокумент(НовДок) Тогда
			Если ЕстьТранзакция Тогда 
				ОтменитьТранзакцию(); 
			КонецЕсли;
			
			Возврат Ложь;
		КонецЕсли;
		
		Если ЕстьТранзакция Тогда 
			ЗафиксироватьТранзакцию();
		КонецЕсли;
	КонецЕсли;	
	
	Возврат Истина;	
	
КонецФункции
&НаСервере
Функция СохранитьИПровестиРеализацию(текЗаказ)
	
	//Если Товары.Количество() Тогда
	//						
	//	// Определим источник
	//
	//	Реализация = Документы.РеализацияТоваров.СоздатьДокумент();
	//	Реализация.Дата	= ТекущаяДата() + 1; // низя чтобы дата заказа совпадал с реализацие иначе долги по оплате не пойдут
	//	
	//	// Забъем реквизиты по запросу
	//	
	//	ЗаполнитьЗначенияСвойств(Реализация, Заказы.ПолучитьРеквизитыЗаказаДляЗаполненияШапкиДокумента(текЗаказ));
	//	
	//	// Вытащим товары
	//	
	//	ТипыЗаказа = Новый Массив;
	//	ТипыЗаказа.Добавить(ТипЗнч(текЗаказ));
	//	
	//	ТЗТов = РабочииТовары();
	//	ТЗТов.Колонки.Добавить("Заказ", Новый ОписаниеТипов(ТипыЗаказа));
	//	ТЗТов.ЗаполнитьЗначения(текЗаказ, "Заказ");
	//	
	//	Реализация.Товары.Загрузить(ТЗТов);
	//	
	//	Если Не Реализация.ПроверитьЗаполнение() Тогда
	//		Отказ = Истина;
	//		Возврат Ложь;
	//	КонецЕсли;
	//	
	//	// Установим заказ который еще не может быть прочитан
	//	
	//	Реализация.ДополнительныеСвойства.Вставить("ОперативныйЗаказ", текЗаказ);
	//	
	//	Попытка
	//		Реализация.Записать(РежимЗаписиДокумента.Проведение);
	//	Исключение
	//		стрОшибки = ОписаниеОшибки();
	//		ОбщиеФункции.СообщитьТекст("Ошибка при проведении реализации товаров
	//								|" + стрОшибки);
	//		Возврат Ложь;
	//	КонецПопытки;
	//	
	//КонецЕсли;
	//
	//Возврат Истина;

КонецФункции
&НаСервере
Функция ПолучитьЗаполненныйЗаказ(УстановитьТекущуюДату)
	
	Если Объект.Заказ.Пустая() Тогда
			
		Заказ = Документы.ВнутреннийЗаказ.СоздатьДокумент();
		Заказ.Дата = ТекущаяДата();
		
	Иначе
		
		Заказ = Объект.Заказ.ПолучитьОбъект();
			
	КонецЕсли;
	
	Заказ.Заказчик 		= СкладПолучатель;
	Заказ.Склад 		= СкладОтправитель;
	Заказ.Автор         = Автор;
	Заказ.ЗакупитьНедостающее = ЗакупитьНедостающее;
	Заказ.ОснованиеВыдачиИнструмента = ОснованиеВыдачиИнструмента;
	Заказ.Статус = Статус;
	Заказ.ФИО = ФИО;
	врТовары = РабочииТовары();
	
	// Загрузим таблицу
	
	Заказ.Товары.Загрузить(врТовары);
	
	// Установим посленим дату
	
	Если УстановитьТекущуюДату Тогда
		Заказ.Дата = ТекущаяДата();
	КонецЕсли;
	
	Возврат Заказ;
	
КонецФункции
&НаСервере
Функция ЕстьРазмещение()
	
	Возврат Товары.НайтиСтроки(
				Новый Структура(
						"Размещение", 
						Справочники.Склады.ПустаяСсылка()
								)).Количество() < Товары.Количество();
КонецФункции

&НаСервере
Функция СразуВыполнитьПервуюЗадачу(БыстраяПродажа = Ложь)
	
	НачатьТранзакцию();
	
	Если Не Записать(Новый Структура("Старт", Истина)) Тогда
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецЕсли;
	
	// Получим итеперь задачу
	
	ЗадачаСсылка = ФункцииБизнесПроцессов.ТекущаяЗадача(Объект.Ссылка);
	
	Если Не ЗначениеЗаполнено(ЗадачаСсылка) Тогда
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецЕсли;
	
	ЗадачаОбъект = ЗадачаСсылка.ПолучитьОбъект();
	ЗадачаОбъект.Комментарий = Объект.Комментарий;
	
	Попытка
		ЗадачаОбъект.ВыполнитьЗадачу();
	Исключение
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецПопытки;

	ЗафиксироватьТранзакцию();
	
	Модифицированность = Ложь;
	
	Возврат Истина;
	
КонецФункции
&НаСервере
Функция ВыполнитьЗадачуФормированияЗаказа(БыстраяПродажа = Ложь)
	
	СсылкаЗадачи = ФункцииБизнесПроцессов.ТекущаяЗадача(Объект.Ссылка);
	
	Если СсылкаЗадачи.ТочкаМаршрута <> БизнесПроцессы.ВнутренняяЗаявка.ТочкиМаршрута.ФормированиеЗаказа Тогда
		
		ОбщиеФункции.СообщитьТекст("Текущая задача не ""формирование заказа"". Выполнить задачу не возможно.");
		Возврат Ложь;
		
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Если Не СоздатьИПровестиКорректировкуЗаказа() Тогда
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецЕсли;
	
	ЗадачаОбъект = СсылкаЗадачи.ПолучитьОбъект();
	ЗадачаОбъект.Комментарий = Объект.Комментарий;
	
	Попытка
		ЗадачаОбъект.ВыполнитьЗадачу();
	Исключение
		ОбщиеФункции.СообщитьТекст(ОписаниеОшибки());
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
	Модифицированность = Ложь;
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ПровестиЗаказ(Команда)
	
	Если Не ОбязательныеРеквизитыЗаполнены() Тогда Возврат КонецЕсли;
	ПроверитьУстановитьАвтора();
	
	Если 	Не ПроверитьРазмещениеВсегоТовара() Тогда
				
			Отказ = Истина;
			Возврат;
			
	КонецЕсли;
	
	// записываем/стартуем бизнес-процесс
	
	Если 	Не Объект.Стартован и 
			Не Записать(Новый Структура("Старт", Истина)) Тогда
			
		Возврат;
		
	ИначеЕсли Не Записать() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// внесем изменения в документ-основание
	
	Если НЕ СохранитьИзмененияРеквизитовЗаказа() Тогда
		Возврат;
	КонецЕсли;
		
	Модифицированность = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ПровестиЗаказИЗакрыть_ст(Команда)
	
	Если Не ОбязательныеРеквизитыЗаполнены() Тогда Возврат КонецЕсли;
	
	ПроверитьУстановитьАвтора();
	
	//Модифицированность = Ложь;
	
	// Спросим вариант
	
	Ответ = ОткрытьФормуМодально("БизнесПроцесс.ЗаявкаПокупателя.Форма.ДиалогОтгрузки");
	
	Если Ответ = Неопределено Тогда
		
		// Сказал отменить
		
		Возврат;
		
	КонецЕсли;
	
	Если Ответ = "Продать" Тогда   // Продать - Это быстрая продажа
		
		Если Не Объект.Стартован Тогда
			
			//Если СразуВыполнитьПервуюЗадачу(Истина) И Открыта() Тогда
			Если СразуВыполнитьПервуюЗадачу(Истина) Тогда
				Закрыть();
			КонецЕсли;
			
		Иначе
			
			
		КонецЕсли;
		
		Возврат;
		
	Иначе
		
		ДопТекст = ?(Ответ = "ВСборку", "Передать логисту для сбора?
											|(логист зарезервирует товар сам)","Продолжить?
											|(зарезервировать можно будет позже)");
		
		Если 	Не ПроверитьРазмещениеВсегоТовара() //И
				//Вопрос("Не размещен товар.
				//		|" + ДопТекст, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет 
				Тогда
				
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;
		
		Если Ответ = "ВСборку" Тогда
			
			// Сказал записать и в сборку сразу на склад
			
			Если Не Объект.Стартован Тогда
			
				//Объект.СразуВыполнитьПервуюЗадачу = Истина;
				Если СразуВыполнитьПервуюЗадачу() Тогда
					Модифицированность = Ложь;
					//Попытка
						Закрыть();
					//Исключение
					//КонецПопытки;
				КонецЕсли;
				
			Иначе
				
				Если ВыполнитьЗадачуФормированияЗаказа() Тогда
					Модифицированность = Ложь;
					//Попытка
						Закрыть();
					//Исключение
					//КонецПопытки;
				КонецЕсли;
				
			КонецЕсли;
			
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	Если 	Не Объект.Стартован и 
			Не Записать(Новый Структура("Старт", Истина)) Тогда
			
		Возврат;
		
	ИначеЕсли Не Записать() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ СохранитьИзмененияРеквизитовЗаказа() Тогда
		Возврат;
	КонецЕсли;
		
	Модифицированность = Ложь;
	Если Открыта() Тогда
		Если Вопрос("Закрыть форму заявки?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ПровестиЗаказИЗакрыть(Команда)
	
	Если Не ОбязательныеРеквизитыЗаполнены() Тогда Возврат КонецЕсли;
	
	ПроверитьУстановитьАвтора();
	
	//Модифицированность = Ложь;
	
	// Спросим вариант
	ПараметрыФормы = Новый Структура;
	ЕстьТоварПодЗаказ =  ЕстьТоварПодЗаказ();
	// если недостающих позиций уже нет, то обнулим флаг, он больше не нужен
	Если ЗакупитьНедостающее И НЕ ЕстьТоварПодЗаказ Тогда ЗакупитьНедостающее = Ложь; КонецЕсли;
	// если есть недостающие позиции и флаг обнулен, тогда спросим в диалоге
	Если ЕстьТоварПодЗаказ И НЕ ЗакупитьНедостающее Тогда ПараметрыФормы.Вставить("ЕстьТоварПодЗаказ", Истина); КонецЕсли;
		
	ПараметрыФормы.Вставить("ЗакупитьНедостающее", ЗакупитьНедостающее);
	ПараметрыФормы.Вставить("Заказ", Объект.Ссылка);
	
	//Ограничиваем доступность группы "ГруппаВСборку" на форме  
	Если Статус = ПредопределенноеЗначение("Перечисление.СтатусыВнутреннегоЗаказа.Согласовано") И Не ОснованиеВыдачиИнструмента.Пустая() 
		ИЛИ Не ЗначениеЗаполнено(Статус)  И ОснованиеВыдачиИнструмента.Пустая() Тогда
	Иначе
		ПараметрыФормы.Вставить("ГруппаВСборкуДоступность", Ложь);
	КонецЕсли;
	ОткрытьФорму("БизнесПроцесс.ЗаявкаПокупателя.Форма.ДиалогОтгрузки", ПараметрыФормы,ЭтаФорма,,,,Новый ОписаниеОповещения("ПослеВыбораВариантаПроведения", ЭтаФорма, Новый Структура("ЕстьТоварПодЗаказ", ЕстьТоварПодЗаказ)), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры
&НаКлиенте
Процедура ПослеВыбораВариантаПроведения(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		
		// Сказал отменить
		
		Возврат;
		
	КонецЕсли;
	
	Если Результат = "Продать" Тогда   // Продать - Это быстрая продажа
		
		Если Не Объект.Стартован Тогда
			
			//Если СразуВыполнитьПервуюЗадачу(Истина) И Открыта() Тогда
			Если СразуВыполнитьПервуюЗадачу(Истина) Тогда
				Закрыть();
			КонецЕсли;
			
		Иначе
			
			
		КонецЕсли;
		
		Возврат;
		
	ИначеЕсли Результат = "СохранитьИЗакупить" Тогда
		ЗакупитьНедостающее = Истина;	
	
	Иначе
		
		ДопТекст = ?(Результат = "ВСборку", "Передать логисту для сбора?
											|(логист зарезервирует товар сам)","Продолжить?
											|(зарезервировать можно будет позже)");
		
		Если 	Не ПроверитьРазмещениеВсегоТовара() //И
				//Вопрос("Не размещен товар.
				//		|" + ДопТекст, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет 
				Тогда
				
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;
		
		Если Результат = "ВСборку" Тогда
			
			// если товар отправлен в сборку и там есть недостающие позиции, поставим флаг
			Если НЕ ЗакупитьНедостающее И Параметры.ЕстьТоварПодЗаказ Тогда ЗакупитьНедостающее = Истина; КонецЕсли;	
			
			// Сказал записать и в сборку сразу на склад
			
			Если Не Объект.Стартован Тогда
			
				//Объект.СразуВыполнитьПервуюЗадачу = Истина;
				Если СразуВыполнитьПервуюЗадачу() Тогда
					Модифицированность = Ложь;
					//Попытка
						Закрыть();
					//Исключение
					//КонецПопытки;
				КонецЕсли;
				
			Иначе
				
				Если ВыполнитьЗадачуФормированияЗаказа() Тогда
					Модифицированность = Ложь;
					//Попытка
						Закрыть();
					//Исключение
					//КонецПопытки;
				КонецЕсли;
				
			КонецЕсли;
			
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	Если 	Не Объект.Стартован и 
			Не Записать(Новый Структура("Старт", Истина)) Тогда
			
		Возврат;
		
	ИначеЕсли Не Записать() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ СохранитьИзмененияРеквизитовЗаказа() Тогда
		Возврат;
	КонецЕсли;
		
	Модифицированность = Ложь;
	Если Открыта() Тогда
		Если Вопрос("Закрыть форму заявки?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Функция ПроверитьРазмещениеВсегоТовара()
	
	Отказ = Ложь;
	
	Инд = -1;
	Для Каждого Строка Из Товары Цикл Инд = Инд + 1;
		Если Не ЗначениеЗаполнено(Строка.Размещение) Тогда
			
			Отказ = Истина;
			ОбщиеФункции.СообщитьТекст("Нет размещения", "Товары[" + Инд + "].Размещение", Объект);
				
		КонецЕсли;
	КонецЦикла;
	
	Возврат Не Отказ;
	
КонецФункции
&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ПроверитьУстановитьАвтора();
	
	Если Записать() Тогда
		
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры


// ОБРАБОТКИ ТАБЛИЧНОЙ ЧАСТИ


&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)

	ФункцииФормДокументов.НоменклатураПриИзменении(
				Элементы.Товары, 
				СтруктураКолонокТовары);

КонецПроцедуры
&НаКлиенте
Процедура КоличествоПриИзменении(Элемент)
	
	ФункцииФормДокументов.КоличествоПриИзменении(Элементы.Товары, СтруктураКолонокТовары);
	
КонецПроцедуры
&НаКлиенте
Процедура УпаковкаПриИзменении(Элемент)
	
	ФункцииФормДокументов.УпаковкаПриИзменении(
			Элементы.Товары, 
			СтруктураКолонокТовары);
			
КонецПроцедуры
&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	УправлениеВидимостьюДоступностью();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДоступностьРедактированияСТроки(текДанные, Отказ)
	
	Если текДанные.Отгружено Тогда
		
		Отказ = Истина;
		ОбщиеФункции.СообщитьТекст("Товар уже отгружен, изменять его запрещено");
		
	ИначеЕсли текДанные.Собрано Тогда
		
		Отказ = Истина;
		ОбщиеФункции.СообщитьТекст("Товар уже собран, изменять его запрещено");
		
	КонецЕсли;	
	
КонецПроцедуры
&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	ПроверитьДоступностьРедактированияСтроки(Элемент.ТекущиеДанные, Отказ);
	
КонецПроцедуры
&НаКлиенте
Процедура ТоварыПередНачаломИзменения(Элемент, Отказ)
	
	ПроверитьДоступностьРедактированияСтроки(Элемент.ТекущиеДанные, Отказ);
	
КонецПроцедуры


&НаКлиенте
Процедура ТрекНомераВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекДанные = Элементы.ТрекНомера.ТекущиеДанные;
	Если ТекДанные<>Неопределено И ЗначениеЗаполнено(ТекДанные.ДокументОтгрузки) Тогда
		ПоказатьЗначение(,ТекДанные.ДокументОтгрузки);
	КонецЕсли;
КонецПроцедуры

// ЗАПОЛНЕНИЕ ТАБЛИЧНОЙ ЧАСТИ

&НаСервере
Процедура ЗаполнитьПоРекомендуемымОстаткамНаСервере(АдресТабл,СписокСкладов = Неопределено) Экспорт
	//Включить в случае пожара\\\\\
	//Запрос = Новый Запрос("
	//
	//// Узнаем скоко они всегда хотят
	//
	//|ВЫБРАТЬ	Товар Номенклатура, МинимальныйОстаток Мин, РекомендуемыйОстаток Рек
	//|ПОМЕСТИТЬ 	СписокЭталона
	//|ИЗ			РегистрСведений.МинимальныеОстаткиНаСкладе.СрезПоследних(,Склад = &СкладПолучатель);
	//
	//// Узнаем скоко всего есть у отправителя
	//
	//|ВЫБРАТЬ 	Ост.Номенклатура, Ост.КоличествоОстаток - ЕСТЬNULL(Рез.КоличествоОстаток,0) Остаток
	//|ПОМЕСТИТЬ 	ОстаткиОтправителя
	//|ИЗ 		РегистрНакопления.ТоварыНаСкладах.Остатки(,Склад = &СкладОтправитель И Номенклатура В(ВЫБРАТЬ Номенклатура ИЗ СписокЭталона)) Ост
	//
	//|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВРезерве.Остатки(,Размещение = &СкладОтправитель И Номенклатура В(ВЫБРАТЬ Номенклатура ИЗ СписокЭталона)) Рез
	//|ПО Ост.Номенклатура = Рез.Номенклатура;
	//
	//// Узнаем скоко всего есть у получателя
	//
	//|ВЫБРАТЬ 	Ост.Номенклатура, Ост.КоличествоОстаток - ЕСТЬNULL(Рез.КоличествоОстаток,0) Остаток
	//|ПОМЕСТИТЬ 	ОстаткиПолучателя
	//|ИЗ 		РегистрНакопления.ТоварыНаСкладах.Остатки(,Склад = &СкладПолучатель И Номенклатура В(ВЫБРАТЬ Номенклатура ИЗ СписокЭталона)) Ост
	//
	//|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВРезерве.Остатки(,Размещение = &СкладПолучатель И Номенклатура В(ВЫБРАТЬ Номенклатура ИЗ СписокЭталона)) Рез
	//|ПО Ост.Номенклатура = Рез.Номенклатура;
	//
	//// Посчитаем
	//
	//|ВЫБРАТЬ 	Эталон.Номенклатура, &СкладОтправитель Размещение, ВЫБОР КОГДА Отпр.Остаток < Эталон.Рек - ЕСТЬNULL(Получ.Остаток,0) Тогда Отпр.Остаток ИНАЧЕ Эталон.Рек - ЕСТЬNULL(Получ.Остаток,0) КОНЕЦ Количество
	//|ИЗ 		СписокЭталона Эталон
	//
	//|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиОтправителя Отпр
	//|ПО Эталон.Номенклатура = Отпр.Номенклатура
	//|
	//|ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиПолучателя Получ
	//|ПО Эталон.Номенклатура = Получ.Номенклатура
	//|
	//|ГДЕ
	//|	Эталон.Мин > ЕСТЬNULL(Получ.Остаток,0) И
	//|	Отпр.Остаток > 0
	//|");
	//
	//Запрос.УстановитьПараметр("СкладОтправитель", СкладОтправитель);
	//Запрос.УстановитьПараметр("СкладПолучатель", СкладПолучатель);	
	//Товары.Загрузить(Запрос.Выполнить().Выгрузить());
	Табл = ПолучитьИзВременногоХранилища(АдресТабл);
	Товары.Загрузить(Табл);
	
	УправлениеВидимостьюДоступностью();	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРазмещения(ПараметрыОткрытияФормы)
	
	ОткрытьФорму("ОбщаяФорма.ДиалогРазмещения",ПараметрыОткрытияФормы,ЭтаФорма,,,,Новый ОписаниеОповещения("ОбработкаРазмещения",ЭтаФорма,),);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоРекомендуемымОстаткам(Команда)
	
	// Проверим
	
	Если СкладПолучатель.Пустая() Тогда
		ПоказатьПредупреждение(,"Не выбран склад получатель",,"Предупреждение"); Возврат; КонецЕсли;
	
	Если СкладОтправитель.Пустая() Тогда
		ПоказатьПредупреждение(,"Не выбран склад отправитель",,"Предупреждение"); Возврат; КонецЕсли;
	
	Если Товары.Количество() И Вопрос("Будет очищена табличная часть, Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат КонецЕсли;
	
	// Заполним
	/////Это было до//////////////////////////////////
	//Включить в случае пожара                      //
	//ЗаполнитьПоРекомендуемымОстаткамНаСервере();  
	//////////////////////////////////////////////////
	ОткрытьФорму("БизнесПроцесс.ВнутренняяЗаявка.Форма.ФормаОтбора", Новый Структура("СкладОтправитель, СкладПолучатель, ГУИДВладельца", СкладОтправитель, СкладПолучатель, УникальныйИдентификатор),ЭтаФорма,,,,Новый ОписаниеОповещения("ОбработкаРазмещенияПослеЗаполнения",ЭтаФорма,),);
	
КонецПроцедуры

// ПОДБОР

&НаСервере
Функция ПоместитьТоварыВХранилище() 
	
	Возврат ПоместитьВоВременноеХранилище(
					РабочииТовары(), 
					УникальныйИдентификатор);
КонецФункции
&НаКлиенте
Процедура ПодборВыполнить(Кнопка = Неопределено, ДополнительныеПараметрыПодбора = Неопределено)
	
	ИдентификаторВремени = ДиалогиСПользователем.НачалоЗамераВремени("Подбор.Открытие", Объект.Ссылка);
	
	ИмяТабличнойЧасти = "Товары";
	
	АдресТоваровВХранилище = ПоместитьТоварыВХранилище();
	ПараметрыПодбора = Новый Структура("АдресТоваровВХранилище", АдресТоваровВХранилище);
	
	ПараметрыПодбора.Вставить("СтруктураКолонокТовары", СтруктураКолонокТовары);
	ПараметрыПодбора.Вставить("ВидЗапроса", 	"ОстаткиНоменклатуры");
	ПараметрыПодбора.Вставить("ВидыЗапросов", 	"СписокНоменклатуры");
	ПараметрыПодбора.Вставить("Склад", 			СкладОтправитель);
	
	// Автосохранение
	АвтосохранениеКлиент.ОткрываетсяПодбор(ПараметрыПодбора, Объект.Ссылка, ЭтаФорма, ПолучитьДамп());
	Если ДополнительныеПараметрыПодбора <> Неопределено Тогда
		КонвертацияТипов.ДобавитьВСтруктуруСтруктуру(ПараметрыПодбора, ДополнительныеПараметрыПодбора) КонецЕсли;
	
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаПодбора", ПараметрыПодбора, Элементы.Товары);
	
	ДиалогиСПользователем.ОкончаниеЗамераВремени(ИдентификаторВремени);
	
КонецПроцедуры
&НаКлиенте
Процедура ТоварыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение <> Неопределено Тогда		
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда

			ПолучитьТоварыИзХранилища(ВыбранноеЗначение.Товары); // получаем
			УдалитьИзВременногоХранилища(ВыбранноеЗначение.Товары); 	// заметаем следы
		Иначе
			ПолучитьТоварыИзХранилища(ВыбранноеЗначение); // получаем
			УдалитьИзВременногоХранилища(ВыбранноеЗначение); 	// заметаем следы
		КонецЕсли;

		Модифицированность = Истина;
		УправлениеВидимостьюДоступностью();
		
	КонецЕсли;
	
КонецПроцедуры
&НаСервере
Процедура ПолучитьТоварыИзХранилища(АдресТоваровВХранилище)
	
	СклеитьТаблицыТоваров(ПолучитьИзВременногоХранилища(АдресТоваровВХранилище));
				
КонецПроцедуры



// ИНФОРМАЦИЯ О ТОВАРЕ

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	// информация о товаре
	ОбработатьОтображениеИнформацииОТоваре()	
	 	
КонецПроцедуры
&НаКлиенте
Процедура ОбработатьОтображениеИнформацииОТоваре() Экспорт
	РаботаСНоменклатуройКлиент.ОбработатьОтображениеИнформацииОТоваре(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ИнфТовараТекстHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	РаботаСНоменклатуройКлиент.ИнфТовараТекстHTMLПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры
&НаКлиенте
Процедура ИнфТовараЗаголовокHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	РаботаСНоменклатуройКлиент.ИнфТовараЗаголовокHTMLПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры

 &НаКлиенте
Процедура ПоказатьСкрытьИнфОТоваре(Команда)
	РаботаСНоменклатуройКлиент.ПоказатьСкрытьИнфОТоваре(ЭтаФорма);
КонецПроцедуры
&НаКлиенте
Процедура НастройкаИнфОТоваре(Команда) 
	РаботаСНоменклатуройКлиент.НастройкаИнфОТоваре(ЭтаФорма);
КонецПроцедуры

// КОММЕНТАРИИ

&НаКлиенте
Процедура КомандаПоказатьКомментарий(Команда)
	ФункцииБизнесПроцессовКлиент.КомандаПоказатьКомментарий(ЭтаФорма);
КонецПроцедуры


// ПРОСТЫЕ РЕКВИЗИТЫ ШАПКИ

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	УправлениеВидимостьюДоступностью();
	
КонецПроцедуры
&НаКлиенте
Процедура СкладПолучательПриИзменении(Элемент)
	
	УправлениеВидимостьюДоступностью();
	
КонецПроцедуры

// МЕНЮ - "ВЕС И ОБЪЕМ"

&НаСервере
Функция ПодготовитьТаблицу()
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Товары.Выгрузить(), УникальныйИдентификатор);
	
	Возврат АдресХранилища;
	
КонецФункции
&НаКлиенте
Процедура ВесОбъем(Команда)
	
	// пока так
	
	АдресХранилища = ПодготовитьТаблицу();
	                                                                                                               
	ОткрытьФорму("Документ.ИнтернетЗаказПокупателя.Форма.ФормаВеса", Новый Структура("АдресХранилища", АдресХранилища));

КонецПроцедуры

 // МЕНЮ - "ЗАПОЛНИТЬ ТОВАРЫ ИЗ ЗАКАЗА"
&НаСервере
Процедура ДобавитьТовар(Ссылка, СтруктураКолонокТовары)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	Док.Номенклатура                        КАК Номенклатура,
		|	Док.Номенклатура.Код                    КАК Код,
		|	Док.Номенклатура.Артикул                КАК Артикул,
		|	ПОДСТРОКА(Док.Номенклатура.НаименованиеПолное,1, 100)     КАК НаименованиеПолное,
		|	Док.Упаковка							КАК Упаковка,
		|	СУММА(Док.КоличествоПриход)				КАК Количество
		|	
		|ИЗ
		|	РегистрНакопления.ВнутренниеЗаказы.ОстаткиИОбороты(,&ДатаВыполнения,,,ВнутреннийЗаказ = &Ссылка) Док
		|СГРУППИРОВАТЬ ПО Док.Номенклатура, Док.Упаковка");
		
  	ДатаВыполнения = ТекущаяДата();
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка.Заказ);
	Запрос.УстановитьПараметр("ДатаВыполнения", ДатаВыполнения);

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураПоиска = Новый Структура("Номенклатура, Упаковка");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
		Строки = Товары.НайтиСтроки(СтруктураПоиска);
		
				
		Если Не Строки.Количество() Тогда
			// Отработаем новую строку

			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
  			//ФункцииФормДокументов.РассчитатьСуммыТабличныхЧастей(НоваяСтрока, СтруктураКолонокТовары);
			ФункцииФормДокументов.РассчитатьСуммыСтрокиОтЦены(НоваяСтрока, СтруктураКолонокТовары);
		Иначе
		// Обработаем найденную
		
			Строка = Строки[0];
			Строка.Количество = Строка.Количество + Выборка.Количество;
			//ФункцииФормДокументов.РассчитатьСуммыТабличныхЧастей(Строка, СтруктураКолонокТовары);
			ФункцииФормДокументов.РассчитатьСуммыСтрокиОтЦены(Строка, СтруктураКолонокТовары);
		
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры	
&НаКлиенте
Процедура ЗаполнитьПоЗаказу(Команда)
	  ВыбранноеЗначение = ОткрытьФорму("БизнесПроцесс.ВнутренняяЗаявка.ФормаВыбора",,,,,,Новый ОписаниеОповещения("ОбработкаЗаполненияПоЗаказу",ЭтаФорма,Новый Структура),);
КонецПроцедуры
&НаКлиенте
Процедура ОбработкаЗаполненияПоЗаказу(Результат, Параметры) Экспорт
	Если Результат <> Неопределено Тогда
		ДобавитьТовар(Результат, СтруктураКолонокТовары);
	КонецЕсли;
КонецПроцедуры

// МЕНЮ - "ЗАГРУЗИТЬ"
&НаКлиенте
Процедура ЗагрузитьДанныеExcel(Команда)
	         
	ОткрытьФорму("Документ.ЗаказПокупателя.Форма.ЗагрузкаДанных", Новый Структура("Страница", Команда.Имя),ЭтаФорма);

КонецПроцедуры
&НаКлиенте
Процедура ЗагрузитьДанныеТабличногоДокумента(Команда)
	
	ОткрытьФорму("Документ.ЗаказПокупателя.Форма.ЗагрузкаДанных", Новый Структура("Страница", Команда.Имя),ЭтаФорма);

КонецПроцедуры

// МОДУЛЬ КОРЗИНЫ

#Если Не ВебКлиент Тогда
	
	&НаСервере
	Функция ПоложитьВКорзинуНаСервере(ВыделенныеИндексы, ИмяКомпа, КолВКорзине)
		
		Возврат МодульКорзины.ПоложитьТоварВКорзину(Товары, ВыделенныеИндексы, ИмяКомпа, КолВКорзине);
		
	КонецФункции
	&НаКлиенте
	Процедура ДобавитьВКорзину(Команда)
		
		ВыделенныеИндексы 	= МодульКорзины.ПолучитьВыделенныеСтрокиТоваров(Элементы.Товары, Товары);
		КолВКорзине 		= 0;
		КолТовара			= ВыделенныеИндексы.Количество();
		
		
		Если КолТовара Тогда
			
			Если ПоложитьВКорзинуНаСервере(ВыделенныеИндексы, ИмяКомпьютера(), КолВКорзине) Тогда
				МодульКорзины.ОповеститьОПомещенииТовара(КолТовара, КолВКорзине);
			КонецЕсли;
			
		Иначе
			
			МодульКорзины.ОповеститьЧтоНечегоДобавлять();
					
		КонецЕсли;
		
	КонецПроцедуры
	&НаСервере
	Процедура ДобавитьИзКорзиныНаСервере(ИмяКомпа, СтруктураКолонокТовары, КолСтрок)
		
		МодульКорзины.ПолучитьТоварИзКорзины(Элементы.Товары, Товары, СтруктураКолонокТовары, ИмяКомпа, КолСтрок);
		
	КонецПроцедуры
	&НаКлиенте
	Процедура ВставитьИзКорзины(Команда)
		
		КолСтрок = 0;
		ДобавитьИзКорзиныНаСервере(ИмяКомпьютера(), СтруктураКолонокТовары, КолСтрок);
		
		Если КолСтрок Тогда
			
			МодульКорзины.ОповеститьОВставкеТовараВДокумент(КолСтрок, Товары.Количество());
			
		Иначе
			
			МодульКорзины.ОповеститьЧтоНечегоДобавлять();
			
		КонецЕсли;
		
	КонецПроцедуры
	&НаКлиенте
	Процедура РедактироватьТоварВКорзине(Команда)
		
		ОткрытьФорму("РегистрСведений.Корзина.Форма.Форма");
		
	КонецПроцедуры
	&НаСервере
	Функция ОчиститьНаСервере(ИмяКомпа)
		
		Возврат МодульКорзины.ОчиститьКорзину(ИмяКомпа);
		
	КонецФункции
	&НаКлиенте
	Процедура ОчиститьКорзину(Команда)
		
		Если ОчиститьНаСервере(ИмяКомпьютера()) Тогда
			
			МодульКорзины.ОповеститьЧтоКорзинаОчищена();
			
		КонецЕсли;
		
	КонецПроцедуры

#КонецЕсли

&НаКлиенте
Процедура ЗагрузитьИзТабличногоДокумента(Команда)
	АдресТоваровВХранилище = ПоместитьТоварыВХранилище();

	ОткрытьФорму("Документ.ЗаказПокупателя.Форма.ЗагрузкаДанных", Новый Структура("Страница, СтруктураКолонокТовары, ИмяТаблицы,АдресТоваровВХранилище", Команда.Имя, СтруктураКолонокТовары, "Товары",АдресТоваровВХранилище),Элементы.Товары);///ЭтаФорма);

КонецПроцедуры


// СОГЛАСОВАНИЕ АССОРТИМЕНТА

&НаСервере
Процедура ПроверитьНаСоответствиеАссортиментуНаСервере(выбКонтрагент)
	
	Таблица = Заказы.ПроверитьНаСоответствиеАссортимента(Товары.Выгрузить(), выбКонтрагент);
	Если Таблица.Найти(Истина, "ТоварНеСогласован") <> Неопределено Тогда
		Товары.Загрузить(Таблица); КонецЕсли;

КонецПроцедуры

&НаСервере
Функция КонтрагентДляПользователя(Заказ)
	
	Если ТипЗнч(Заказ.Заказчик) = Тип("СправочникСписок.Склады") Тогда
		Возврат Заказ.Заказчик.Контрагент;
	Иначе
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;	
		
КонецФункции

&НаКлиенте
Процедура ПроверитьНаСоответствиеАссортименту(Команда)
	
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ПослеВыбораКонтрагента", ЭтаФорма), КонтрагентДляПользователя(Объект.Заказ), 
	 "Введите контрагента, чей ассортимент необходимо проверить", Новый ОписаниеТипов("СправочникСсылка.Контрагенты")); 

КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораКонтрагента(ВыбЗнач, Параметры) Экспорт
	
	Если ВыбЗнач <> Неопределено Тогда
		
		ПроверитьНаСоответствиеАссортиментуНаСервере(ВыбЗнач);
	
	КонецЕсли;
	
КонецПроцедуры


/////////////// резервы///////////////////////////////////////////////
/////////////// резервы///////////////////////////////////////////////
&НаКлиенте
Процедура ПродлитьРезерв(Команда)
	//Прежде чем продлять резерв, нужно проверить есть ли он вообще
	///слишком рано резервы продлевать тоже не стоит
	Если НЕ РезервМожноПродлевать(ДатаАктуальностиРезерва) Тогда 
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Резерв в продлении не нуждается!";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	////
	Если НЕ ЕстьРезервыПоДанномуЗаказу(Объект.Заказ) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Данный заказ резервов не имеет! Тут нечего продлять!";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	///
	Если НЕ ЗначениеЗаполнено(ПродлитьРезервНа) Тогда 
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Укажите срок продления резерва!";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	/////////////////////////////////////////////////
	//СниматьРезервыБезПредупрежденияСтарше = 30;
	//Если (СниматьРезервыБезПредупрежденияСтарше <> 0) И (ДатаАктуальностиРезерва+60*60*24*СниматьРезервыБезПредупрежденияСтарше) Тогда
	//	ПоказатьПредупреждение(,"Резервы старше "+СниматьРезервыБезПредупрежденияСтарше+" дней продливать нельзя!",,);
	//	Возврат;
	//КонецЕсли;
	///////////////////////////////////////////////////
	Если (ДатаАктуальностиРезерва+60*60*24*СрокПродления) < ТекущаяДата() Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработкаОтвета", ЭтаФорма, Новый Структура("Заказ, ДатаАктуальности, СрокПродления", Объект.Заказ, ДатаАктуальностиРезерва, СрокПродления)), "Данный резерв слишком старый. Вы можете указать больший срок или продлить на указанный с текущей даты. Продлить с текущей даты?", РежимДиалогаВопрос.ДаНет,,,,);
	Иначе
		ПродлитьРезервНаСервере(Объект.Заказ, ДатаАктуальностиРезерва, СрокПродления);
		ПолучитьДатуАктуальностиРезерва();
	КонецЕсли;
	
	//ОткрытьФорму("ОбщаяФорма.ФормаПродленияРезерва",Новый Структура("Заказ, ДатаАктуальностиРезерва",Объект.Заказ, ДатаАктуальностиРезерва), ЭтаФорма,,,,Новый ОписаниеОповещения("ОбработкаОткрытияФормыПродленияЗаказа", ЭтаФорма,));
КонецПроцедуры
&НаКлиенте
Процедура ОбработкаОтвета(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	Иначе
		ПродлитьРезервНаСервере(Параметры.Заказ, ТекущаяДата(), Параметры.СрокПродления);
		ПолучитьДатуАктуальностиРезерва();
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Функция СформироватьСписокСроков()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СрокиПродленияРезервов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СрокиПродленияРезервов КАК СрокиПродленияРезервов
	|ГДЕ
	|	СрокиПродленияРезервов.ПометкаУдаления = Ложь";
	Результат = Запрос.Выполнить().Выгрузить();
	Колонка = Результат.ВыгрузитьКолонку("Ссылка");
	Возврат Колонка;
КонецФункции

&НаСервере
Процедура ПродлитьРезервНаСервере(Заказ, ДатаАктуальностиРезерва, СрокПродления)
	НоваяДатаАктуальностиРезерва = ДатаАктуальностиРезерва+(60*60*24*СрокПродления);
	/////
	Таб = Новый ТаблицаЗначений;
	Таб.Колонки.Добавить("Заказ");
	Таб.Колонки.Добавить("ДатаСнятияРезерва");
	Таб.Колонки.Добавить("СрокПродления");
	/////
	Нстр = Таб.Добавить();
	Нстр.Заказ = Заказ;
	Нстр.ДатаСнятияРезерва = НоваяДатаАктуальностиРезерва;
	Нстр.СрокПродления = СрокПродления;
	/////
	НаборЗаписей = РегистрыСведений.ОтсрочкаСнятияРезервов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Заказ.Установить(Заказ);
	НаборЗаписей.Загрузить(Таб);
	НаборЗаписей.Записать();
КонецПроцедуры



&НаСервере
Функция РезервМожноПродлевать(ДатаАктуальностиРезерва)
	Если Дата(ДатаАктуальностиРезерва - (60*60*24*Константы.ПредупреждатьОСнятииРезерваЗа.Получить())) > ТекущаяДата() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ЕстьРезервыПоДанномуЗаказу(Заказ)
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ТоварыВРезервеОстатки.ДокументРезерва КАК ДокументЗаказ
	|ИЗ
	|	РегистрНакопления.ТоварыВРезерве.Остатки(&Период, ДокументРезерва = &Заказ) КАК ТоварыВРезервеОстатки
	|ГДЕ
	|	ТоварыВРезервеОстатки.КоличествоОстаток <> 0
	|	И ТИПЗНАЧЕНИЯ(ТоварыВРезервеОстатки.ДокументРезерва) <> ТИП(Документ.ЗаказНаряд)
	|	И ТоварыВРезервеОстатки.ДокументРезерва <> НЕОПРЕДЕЛЕНО");
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Если Запрос.Выполнить().Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции

&НаСервере
Процедура ПолучитьДатуАктуальностиРезерва()
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЕСТЬNULL(МАКСИМУМ(ОтсрочкаСнятияРезервов.ДатаСнятияРезерва), 0) КАК ДатаСнятияРезерва
	                      |ИЗ
	                      |	РегистрСведений.ОтсрочкаСнятияРезервов КАК ОтсрочкаСнятияРезервов
	                      |ГДЕ
	                      | ОтсрочкаСнятияРезервов.Заказ = &Заказ");
	Запрос.УстановитьПараметр("Заказ", Объект.Заказ);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	РезультатЗапроса.Следующий();
	ДатаАктуальностиРезерва = ?(РезультатЗапроса.ДатаСнятияРезерва = 0, Объект.Дата + 60*60*24*Константы.СрокРезервированияТовара.Получить(), РезультатЗапроса.ДатаСнятияРезерва);	
КонецПроцедуры

&НаСервере
Функция АвтоматическоеСнятиеРезервовВключено()
	Если НЕ Константы.ВклАвтоматическоеСнятиеРезервов.Получить() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
КонецФункции
/////////////////////////////////////////////////////////////////////


Функция ЕстьТоварПодЗаказ()
	
	ТЗТоваров 	= РабочииТовары();
	Для Каждого Строка Из ТЗТоваров Цикл
		Если ТипЗнч(Строка.Размещение) = Тип("Число") Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;	
	
КонецФункции



#Область Прикрепленные_файлы

&НаКлиенте
Процедура УдалитьПрикрепленныеФайлыНажатие(Элемент)
	
	ПрикрепленныеФайлыКлиент.УдалитьНажатие(Объект.Заказ, ЭтаФорма, Элемент);
	
КонецПроцедуры
&НаКлиенте
Процедура ПрикрепленныеФайлыНажатиеСкрепка(Элемент)
	
	ПрикрепленныеФайлыКлиент.НажатиеСкрепка(Объект.Заказ, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПрикрепленныйФайл(Элемент)
	
	ПрикрепленныеФайлыКлиент.ОткрытьПрикрепленныйФайл(Элемент.Имя);
	
КонецПроцедуры
&НаКлиенте
Процедура ПоказатьПрикрееленныеФайлы(Элемент)
	
	ПрикрепленныеФайлыКлиент.ПоказатьПрикрепленныеФайлы(Объект.Заказ, ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьПрикрепленныхФайловНаСервере()
	
	ПрикрепленныеФайлы.Иницилизировать(Объект.Заказ, ЭтаФорма);
	
КонецПроцедуры
&НаКлиенте
Процедура ОбновитьВидимостьПрикрепленныхФайлов() Экспорт
	
	ОбновитьВидимостьПрикрепленныхФайловНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область Оповещения

&НаКлиенте
Процедура УправлениеПодпискойОповещений(Элемент)
	
	СобытияКлиент.УправлениеПодпискойСФормыОбъектаНажатие(ЭтаФорма, Элемент, "ВнутреннийЗаказ", Объект.Заказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстПодпискиНажатие(Элемент)
	
	СобытияКлиент.ТекстПодпискиФормыОбъектаНажатие(ЭтаФорма, Элемент, Объект.Заказ);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТекстОповещенийНаСервере()
	
	События.ОбновитьТекстПодпискиНаФорме(ЭтаФорма, Объект.Заказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТекстОповещений() Экспорт
	
	ОбновитьТекстОповещенийНаСервере()
	
КонецПроцедуры
&НаКлиенте
Процедура ТекстПодпискиЗакрытиеФормы(РезЗакрытия, ДопПараметры) Экспорт
	
	ОбновитьТекстОповещенийНаСервере()
	
КонецПроцедуры

#КонецОбласти


//ОСНОВАНИЕ ВЫДАЧИ ИНСТРУМЕНТА
&НаСервере
Функция СогласованиеДоступно()
	Возврат РольДоступна("Руководитель");
КонецФункции

&НаКлиенте
Процедура ОснованиеВыдачиИнструментаПриИзменении(Элемент)
	ФИО = "";
	Статус = ?(ОснованиеВыдачиИнструмента.Пустая(), "", ПредопределенноеЗначение("Перечисление.СтатусыВнутреннегоЗаказа.НеСогласовано"));
	ОснованиеВыдачиИнструментаУстановитьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	ФИО = ?(Статус = ПредопределенноеЗначение("Перечисление.СтатусыВнутреннегоЗаказа.Согласовано"),
					ПолучитьТекущегоПользователя(),"");	
КонецПроцедуры
				
&НаСервереБезКонтекста
Функция ПолучитьТекущегоПользователя()
	 Возврат ПараметрыСеанса.ТекущийПользователь;
КонецФункции	


&НаКлиенте
Процедура ОбновитьСостояниеТоваров(Команда)
	ОбновитьСостояниеТоваровНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостояниеТоваровНаСервере()
	ТЗ = Заказы.ПолучитьСостояниеТоваров(Объект.Заказ);
	ТЗ.Сортировать("Артикул");
	СостоянияТоваров.Загрузить(ТЗ);
КонецПроцедуры	

