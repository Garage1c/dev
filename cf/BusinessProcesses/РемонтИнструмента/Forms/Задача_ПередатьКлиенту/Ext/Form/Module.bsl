&НаКлиенте
Перем МассивКомментариев Экспорт;

&НаСервере
Функция ЗаказНарядПроведен()
	
	Возврат Не ЗаказНаряд.Пустая() И
			ЗаказНаряд.Проведен;
	
КонецФункции

// ПЕЧАТЬ

&НаСервере
Процедура ПечататьЗаказнаряднаСервере(ТабДок)
	
	Документы.ЗаказНаряд.Печать_ЗаказНаряд(ТабДок, ЗаказНаряд);
	
КонецПроцедуры
&НаКлиенте
Процедура ПечататьЗаказНаряд(Команда)
	
	ТабДок = Новый ТабличныйДокумент;
	ПечататьЗаказнаряднаСервере(ТабДок);

	ФункцииФормДокументов.УстановитьНастройкиТабличногоДокумента(ТабДок);
	
	ТабДок.Показать();
	
КонецПроцедуры

// ТИПОВЫЕ

&НаКлиенте
Процедура ПоказатьСкрытьАдресацию(Команда)
	
	// Реверснем
	
	Элементы.ПоказатьСкрытьАдресацию.Пометка = Не Элементы.ПоказатьСкрытьАдресацию.Пометка;
	
	// Обновим видимость
	
	ФункцииФормЗадач.ВидимостьАдресации(ЭтаФорма);
	
КонецПроцедуры
&НаКлиенте
Процедура ВидимостьДоступность()
	
	Элементы.СкладПолучатель.ТолькоПросмотр	 = ТолькоПросмотр;	
	Элементы.ОсновныеДействия.Доступность 	 = Не ТолькоПросмотр;
	
	ЕстьПроведенныйЗаказ = ЗаказНарядПроведен();
	ЭтоКонечныйСклад = СкладПолучатель = Объект.Склад;
	Оплатить = ЭтоКонечныйСклад И ЕстьПроведенныйЗаказ И ВсегоПоЗаказу <> 0;
	
	Элементы.ПечатьЗаказНаряда.Видимость = ЕстьПроведенныйЗаказ;
	Элементы.ЗаказНаряд.Видимость = Не ЗаказНаряд.Пустая();                                   
		
	Элементы.ФормаПередатьИнструмент.Заголовок = ?(ЭтоКонечныйСклад, "Передать инструмент клиенту", "Передать инструмент на склад выдачи");
	Элементы.Суммы.Видимость = ЭтоКонечныйСклад И ЕстьПроведенныйЗаказ;
	
	// Если инструмент на складе выдачи и был выдан заменный инструмент, тогда надо про это напомнить
	
	Элементы.ГруппаЗаменныйИнструмент.Видимость = ЭтоКонечныйСклад И НЕ ЗаменныйИнструмент.Пустая();

	// Если инструмент на складе выдачи и требуется оплата, но менеджер не назначен
	
	НуженКонтрольОплаты = Оплатить И Менеджер.Пустая();
	
	Элементы.ДекорацияОплата.Видимость = НуженКонтрольОплаты;
	Элементы.ФормаПередатьИнструментПроверитьОплату.Видимость = НуженКонтрольОплаты;
	Элементы.ФормаРемонтОплаченПередатьИнструмент.Видимость = НуженКонтрольОплаты;
	
	Элементы.ФормаПередатьИнструмент.Видимость = НЕ НуженКонтрольОплаты; 
	
 	// Если инструмент на складе выдачи и требуется оплата, есть менеджер, тогда нам нужен его ответ

	НуженОтветМенеджера = Оплатить И НЕ Менеджер.Пустая();
	Элементы.ГруппаУсловияОплаты.Видимость = НуженОтветМенеджера;

КонецПроцедуры
 &НаСервере
Процедура ПрочитатьРеквизиты()
	
	ФункцииБизнесПроцессов.ЗаполнитьДанные(ЭтаФорма, Объект.БизнесПроцесс, Объект.Ссылка);
		
КонецПроцедуры


Процедура УстановитьСтатусОплатыЗаказа()
	
	ПроцентОплаты = Заказы.ПолучитьПроцентОплатыЗаказа(Объект.Заказ);

	Если Не ПроцентОплаты Тогда
		Элементы.ИнформацияПоОплате.Заголовок = "не оплачен";
		Элементы.ИнформацияПоОплате.ЦветТекста = Новый Цвет(255,0,0);
	ИначеЕсли ПроцентОплаты = 100 Тогда
		Элементы.ИнформацияПоОплате.Заголовок = "оплачен";
		Элементы.ИнформацияПоОплате.ЦветТекста = Новый Цвет(0,157,0);
	ИначеЕсли ПроцентОплаты > 100 Тогда
		Элементы.ИнформацияПоОплате.Заголовок = "переплачен";
		Элементы.ИнформацияПоОплате.ЦветТекста = Новый Цвет(113,0,0);
	Иначе
		Элементы.ИнформацияПоОплате.Заголовок = "оплата " + Формат(ПроцентОплаты,"ЧГ=") + " %";
	КонецЕсли;
	
КонецПроцедуры

// ОБРАБОТЧИКИ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	                    
	ПрочитатьРеквизиты();
	// комментарии
	ФункцииБизнесПроцессов.ДобавитьРаботуСКомментариями(ЭтаФорма);
	
	УстановитьСтатусОплатыЗаказа();
	
	Если ОтветМенеджераЧисло = 1 Тогда
		Элементы.УсловияОплаты.Картинка = БиблиотекаКартинок.Предоплата;
	ИначеЕсли
		ОтветМенеджераЧисло = 2 Тогда
		Элементы.УсловияОплаты.Картинка = БиблиотекаКартинок.Отсрочка;
	ИначеЕсли
		ОтветМенеджераЧисло = 0 Тогда
		Элементы.УсловияОплаты.Картинка = БиблиотекаКартинок.Вопрос;
	КонецЕсли;
	
	Элементы.ИнформацияОтказ.Видимость = НЕ ЗаказНаряд.Проведен;
	
	Элементы.Организация.СписокВыбора.ЗагрузитьЗначения(Контрагент.Организации.ВыгрузитьКолонку("Организация"));

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ФункцииФормЗадач.ПриОткрытии(Объект, ЭтаФорма, Отказ);
	// комментарии
	ФункцииБизнесПроцессовКлиент.ПолучитьМассивКомментариев(ЭтаФорма, Объект.БизнесПроцесс);
	
	Элементы.ДекорацияМенеджер.Заголовок = "/" + Менеджер + "/";
	ВидимостьДоступность();
		
КонецПроцедуры
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Реализация = Неопределено;
	ПечататьАкт = Ложь;
	
	Если ПараметрыЗаписи.Свойство("ПечататьАкт", ПечататьАкт) И ПечататьАкт Тогда
		Реализация = ТекущаяРеализация();
	КонецЕсли;
	
	Если Реализация <> Неопределено Тогда
		//ПечатьАкта(Реализация);
		ОткрытьФорму(Заказы.ПолучитьИмяФормы(Реализация), Новый Структура("Ключ", Реализация))
	КонецЕсли;
	
	ФункцииФормЗадач.ПослеЗаписи(Объект, ЭтаФорма, ПараметрыЗаписи);
	
	ВидимостьДоступность();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ОжидатьОплату = Ложь;
	Если ПараметрыЗаписи.Свойство("ОжидатьОплату") Тогда
		ОжидатьОплату = ПараметрыЗаписи.ОжидатьОплату;
	КонецЕсли;
	
	Если НЕ СохранитьДанныеЗадачи(ОжидатьОплату) Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция СохранитьДанныеЗадачи(ОжидатьОплату)
	
	НачатьТранзакцию();
	
	Если НЕ ПоменятьОрганизациюВЗаказНаряде() Тогда
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ СохранитьИзменения(ОжидатьОплату) Тогда
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	Возврат Истина;
	
КонецФункции

// ДЕЙСТВИЯ

&НаСервере
Функция СохранитьИзменения(ПроверитьОплату = Ложь)	
		
	Процесс = Объект.БизнесПроцесс.ПолучитьОбъект();
    Изменился = Ложь;
	
	// При изменении склада выдачи
	
	Если СкладПолучатель <> Процесс.СкладПолучатель Тогда
				
		Процесс.СкладПолучатель = СкладПолучатель;
		Изменился = Истина;
	КонецЕсли;
	
	// При смене организации
	
	Если Организация <> Процесс.Организация Тогда
		Процесс.Организация = Организация;
		Изменился = Истина;
	КонецЕсли;

	
	Если Процесс.ПроверитьОплату <> ПроверитьОплату Тогда
		Процесс.ПроверитьОплату = ПроверитьОплату; 
		Изменился = Истина;
	КонецЕсли;
	
	// Товары
	
	//Инд = -1;
	//Для Каждого Строка Из Процесс.Товары Цикл Инд = Инд + 1;
	//	СтрокаТут = Товары[Инд];
	//	Если 	Строка.Выдан И НЕ СтрокаТут.Выдан Или
	//			НЕ Строка.Выдан И СтрокаТут.Выдан Тогда
	//			
	//		Процесс.Товары.Загрузить(Товары.Выгрузить());	
	//		Изменился = Истина;
	//		Прервать;
	//		
	//	КонецЕсли;
	//КонецЦикла;
		
	Если Изменился Тогда		
		
		Попытка
			Процесс.Записать();
		Исключение
			стрОшибки = ОписаниеОшибки();
			ОбщиеФункции.СообщитьТекст("Ошибка при записи бизнес процесса
							|" + стрОшибки);
			Возврат Ложь;
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции
//&НаКлиенте
//Процедура ПередатьИнструментКлиенту(ПроверитьОплату = Ложь)
//	
//	Если  	СохранитьИзменения(ПроверитьОплату) И
//			ВыполнитьЗадачуНаСервере() Тогда
//			
//		Модифицированность = Ложь;
//		ФункцииФормЗадач.ПослеЗаписи(Объект, ЭтаФорма, Новый Структура);
//		Закрыть();
//				
//	КонецЕсли;
// 
//КонецПроцедуры
&НаКлиенте
Функция ПроверитьКорректностьЗаполненияДанных()
	
	Если СкладПолучатель.Пустая() Тогда
		ОбщиеФункции.СообщитьТекст("Не заполнен склад выдачи", "СкладПолучатель");
		Возврат Ложь;
	КонецЕсли;
	
	Если СкладПолучатель = Объект.Склад И НЕ ЗаменныйИнструмент.Пустая() И НЕ КлиентВернулЗаменныйИнструмент Тогда
		ОбщиеФункции.СообщитьТекст("Инструмент не может быть выдан. Клиент не вернул заменный инструмент", "КлиентВернулЗаменныйИнструмент");
		Возврат Ложь;
	КонецЕсли;	
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗакрытьПараллельнуюЗадачу()
	
	ЗадачаСсылка = ФункцииБизнесПроцессов.ТекущаяЗадача(Объект.БизнесПроцесс, БизнесПроцессы.РемонтИнструмента.ТочкиМаршрута.ОжиданиеОплаты);
	Если ЗадачаСсылка = Неопределено Тогда
		// Если нет текущей параллельной задачи то и закрывать не будем
		Возврат Истина;
	КонецЕсли;
		
	ЗадачаОбъект = ЗадачаСсылка.ПолучитьОбъект();
	ЗадачаОбъект.ДополнительныеСвойства.Вставить("КонтрольАдресации", Ложь);
	
	ЗадачаОбъект.Выполнена = Истина;
		
	Попытка
		ЗадачаОбъект.Записать();
	Исключение
		стрОшибки = ОписаниеОшибки();
		ВызватьИсключение "Ошибка при записи задачи
						|" + стрОшибки;
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ПередатьИнструмент(Команда)
	
	Если НЕ ПроверитьКорректностьЗаполненияДанных() Тогда
		Возврат;
	КонецЕсли;
	
	// Если адресация задачи НЕ совпала со складом выдачи, адресуем новую задачу
	
	ЭтоКонечныйСклад = СкладПолучатель = Объект.Склад;
	
	Если 	НЕ ЭтоКонечныйСклад
			И Вопрос("Инструмент будет передан на склад """ + Строка(СкладПолучатель) + """?", РежимДиалогаВопрос.ОКОтмена) = КодВозвратаДиалога.Отмена Тогда
			
			Возврат;
	КонецЕсли;
	
	// Если менеджер не дал свой ответ, сервис-менеджер в праве отдать инстурмент
	
	НуженОтветМенеджера = ЭтоКонечныйСклад И ЗаказНарядПроведен() И ВсегоПоЗаказу <> 0 И НЕ Менеджер.Пустая();
	
	Если НуженОтветМенеджера И ОтветМенеджераЧисло = 0 Тогда
		
		Если	 Вопрос("Я подтверждаю, что """ + Строка(Менеджер) + """ предоставил(а) информацию по оплате" , РежимДиалогаВопрос.ОКОтмена) = КодВозвратаДиалога.Отмена ИЛИ
		         НЕ ЗакрытьПараллельнуюЗадачу() Тогда
				 
				 Возврат;
		КонецЕсли;
			
	КонецЕсли;
	
	Если  	Записать(Новый Структура("ВыполнитьЗадачу, ОжидатьОплату, ПечататьАкт", Истина, Ложь, ЭтоКонечныйСклад)) Тогда
			
		ФункцииФормЗадач.ПослеЗаписи(Объект, ЭтаФорма, Новый Структура);
		
		Закрыть();
	
	КонецЕсли;


КонецПроцедуры

&НаСервере
Функция НайтиПоследнююРеализацию()
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка, Дата ИЗ Документ.РеализацияТоваров ГДЕ Заказ = &Заказ УПОРЯДОЧИТЬ ПО Дата Убыв");
	
	Запрос.УстановитьПараметр("Заказ", ЗаказНаряд);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка; КонецЕсли;
	
КонецФункции


&НаКлиенте
Процедура РемонтОплаченПередатьИнструмент(Команда)
		
	Если НЕ ПроверитьКорректностьЗаполненияДанных() Тогда
		Возврат;
	КонецЕсли;
	
	Если  Записать(Новый Структура("ВыполнитьЗадачу, ОжидатьОплату, ПечататьАкт", Истина, Ложь, Истина)) Тогда
			
		ФункцииФормЗадач.ПослеЗаписи(Объект, ЭтаФорма, Новый Структура);
		Закрыть();
				
	КонецЕсли;

КонецПроцедуры
&НаКлиенте
Процедура ПередатьИнструментПроверитьОплату(Команда)
	
	Если НЕ ПроверитьКорректностьЗаполненияДанных() Тогда
		Возврат;
	КонецЕсли;
		
	Если  	Записать(Новый Структура("ВыполнитьЗадачу, ОжидатьОплату, ПечататьАкт", Истина, Истина, Истина)) Тогда
			
		ФункцииФормЗадач.ПослеЗаписи(Объект, ЭтаФорма, Новый Структура);
		Закрыть();
				
	КонецЕсли;


КонецПроцедуры

&НаКлиенте
Процедура СкладПолучательПриИзменении(Элемент)
	ВидимостьДоступность();
КонецПроцедуры

// КОММЕНТАРИИ

&НаКлиенте
Процедура КомандаПоказатьКомментарий(Команда)
	ФункцииБизнесПроцессовКлиент.КомандаПоказатьКомментарий(ЭтаФорма);
КонецПроцедуры


&НаКлиенте
Процедура ИнформацияПоОплатеНажатие(Элемент)
	ОткрытьФорму("Обработка.ДолгиПоОплате_Управление.Форма.Управление", Новый Структура("Организация, Контрагент", Организация, Контрагент));
КонецПроцедуры

&НаСервере
Функция ТекущаяРеализация()
	
	Запрос = Новый Запрос("ВЫБРАТЬ Ссылка ИЗ Документ.РеализацияТоваров ГДЕ Заказ = &ЗаказНаряд");
	Запрос.УстановитьПараметр("ЗаказНаряд", ЗаказНаряд);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;

	Возврат Неопределено;

КонецФункции


&НаКлиенте
Процедура ПечатьАкта(Ссылка)
	
	ТабДок = Новый ТабличныйДокумент;
	ПечатьНаСервере(ТабДок, Ссылка);

	ФункцииФормДокументов.УстановитьНастройкиТабличногоДокумента(ТабДок);
	
	ТабДок.АвтоМасштаб = Истина;
	
	Если ТабДок.Области.Количество() Тогда
		ТабДок.Показать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПечатьНаСервере(ТабДок, Ссылка)
	
	Документы.РеализацияТоваров.Печать_Акт(ТабДок, Ссылка);
			
КонецПроцедуры
Функция ПоменятьОрганизациюВЗаказНаряде()
	
	Если ЗаказНаряд.Пустая() ИЛИ Организация = ЗаказНаряд.Организация Тогда
		Возврат Истина;
	КонецЕсли;
		
	ЗаказОбъект = ЗаказНаряд.ПолучитьОбъект();
	ЗаказОбъект.Организация = Организация;
    ЗаказОбъект.УчитыватьНДС = Организация.УчитыватьНДС;
	
	Таблица = ЗаказОбъект.Товары;
	
	Если Организация.УчитыватьНДС <> ЗаказНаряд.УчитыватьНДС Тогда
	
		СтруктураКолонокТовары = Новый Структура("ЕстьКоличество, ЕстьЦена, ЕстьСуммаБезСкидки, ЕстьСумма, ЕстьСуммаАвтоматическойСкидки, ЕстьСуммаРучнойСкидки, ЕстьСтавкаНДС, ЕстьСуммаНДС, ЕстьВсего, УчитыватьНДС, стУчитыватьНДС",
													Истина, Ложь, Ложь, Истина, Ложь, Ложь, Истина, Истина, Ложь, Организация.УчитыватьНДС, ЗаказНаряд.УчитыватьНДС);
		//***											
		//Заменим ФункцииФормДокументов.ПересчитатьСуммыТабличныхЧастей(Таблица, СтруктураКолонокТовары); на следующую строку 
		Для Каждого Строка Из Таблица Цикл ФункцииФормДокументов.РассчитатьСуммыТабличныхЧастей(Строка, СтруктураКолонокТовары) КонецЦикла;
		//***
	КонецЕсли;
				
	Попытка
		ЗаказОбъект.Записать(?(ЗаказОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
	Исключение
		стрОшибки = ОписаниеОшибки();
		ОбщиеФункции.СообщитьТекст("Ошибка при записи заказ-наряда
								|" + стрОшибки);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура КлиентОтказался(Команда)
	Если 	ПустаяСтрока(Объект.Комментарий) И
			Не ВвестиСтроку(Объект.Комментарий, "Причина отказа",,Истина) Тогда
			
		Возврат;
	КонецЕсли;
	
	// Отменим задачу
        Если	 НЕ ЗакрытьПараллельнуюЗадачу() Тогда
				 
				 Возврат;
		КонецЕсли;
	
	
	Если 	ОтменитьЗадачуНаСервере() И ПометитьНаУдалениеЗаказИВыполнитьЗадачуНаСервере()  Тогда//и Записать(Новый Структура("ВыполнитьЗадачу, ОжидатьОплату", Истина, Истина)) Тогда
			
		Модифицированность = Ложь;
		ФункцииФормЗадач.ПослеЗаписи(Объект, ЭтаФорма, Новый Структура);
		Закрыть();
				
	КонецЕсли;

КонецПроцедуры


&НаСервере
Функция ОтменитьЗадачуНаСервере()
	
	Процесс = Объект.БизнесПроцесс.ПолучитьОбъект();
	Процесс.ОтказКлиента = Истина;
	
	Попытка
		Процесс.Записать();
	Исключение
		стрОшибки = ОписаниеОшибки();
		ОбщиеФункции.СообщитьТекст("Ошибка при записи бизнес процесса
						|" + стрОшибки);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат истина;
	
КонецФункции



&НаСервере
Функция ПометитьНаУдалениеЗаказИВыполнитьЗадачуНаСервере()
	
	НачатьТранзакцию();
	 	 
	// Пометим заказ на удаление
	
	стрОшибки = "";
	
	
		ДокументОбъект = ЗаказНаряд.ПолучитьОбъект();
		
		Попытка
		ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		ДокументОбъект.ПометкаУдаления  = Истина;
		ДокументОбъект.Отменен = Истина;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		Исключение
		ОтменитьТранзакцию();		
		ОбщиеФункции.СообщитьТекст("Ошибка при проведении заказ наряда
			|" + стрОшибки);
		Возврат Ложь;	
		КонецПопытки;	
		
	// Выполним задачу
	
	ЗадачаОбъект = РеквизитФормыВЗначение("Объект");
	
		
	Попытка
		ЗадачаОбъект.ВыполнитьЗадачу();
	Исключение
		стрОшибки = ОписаниеОшибки();
		ОтменитьТранзакцию();
		ОбщиеФункции.СообщитьТекст("Ошибка при выполнении задачи
						|" + стрОшибки);
		Возврат Ложь;
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
	Возврат Истина;
	
КонецФункции










