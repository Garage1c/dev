
&НаКлиенте
Перем МассивКомментариев Экспорт;

// ТИПОВЫЕ

&НаСервере
Процедура ПрочитатьРеквизиты()
	
	ФункцииБизнесПроцессов.ЗаполнитьДанные(ЭтаФорма, Объект.БизнесПроцесс, Объект.Ссылка);
	
КонецПроцедуры
&НаКлиенте
Процедура ПоказатьСкрытьАдресацию(Команда)
	
	// Реверснем
	
	КоманднаяПанель.ПодчиненныеЭлементы.ПоказатьСкрытьАдресацию.Пометка = Не КоманднаяПанель.ПодчиненныеЭлементы.ПоказатьСкрытьАдресацию.Пометка;
	
	// Обновим видимость
	
	ФункцииФормЗадач.ВидимостьАдресации(ЭтаФорма);
	
КонецПроцедуры
&НаКлиенте
Процедура ВидимостьДоступность()
	
	Элементы.ОсновныеДействия.Доступность 		= Не ТолькоПросмотр;	
	
	ЕстьЗаказ = Не ЗаказНаряд.Пустая();
	//Элементы.Информация.Заголовок = ?(ЗаказНаряд.Пустая(), "Отказ от ремонта. Необходимо согласовать с клиентом принятое решение", 
	//	"Дефектовка завершена. Согласовать с клиентом результат дефектовки");
	
	Элементы.ЗаказНаряд.Видимость = ЕстьЗаказ;
	Элементы.ИтогоHTML.Видимость = ЕстьЗаказ;
	
	// Видимость кнопок
	
	//Элементы.КлиентСогласен.Видимость 	= ЕстьЗаказ;
	//Элементы.КлиентОтказался.Видимость 	= НЕ ЕстьЗаказ;
	Элементы.ТоварыОтметка.Доступность = ЕстьЗаказ;
	
КонецПроцедуры
&НаКлиенте
Процедура ОперативнаяВидимость()
	СтрокиОтметки = Товары.НайтиСтроки(Новый Структура("Отметка", Истина));
	Элементы.КлиентСогласен.Видимость 	= СтрокиОтметки.Количество();
	Элементы.КлиентОтказался.Видимость 	= НЕ СтрокиОтметки.Количество();
	
КонецПроцедуры

// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПрочитатьРеквизиты();
	// комментарии
	ФункцииБизнесПроцессов.ДобавитьРаботуСКомментариями(ЭтаФорма);
		
КонецПроцедуры
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ФункцииФормЗадач.ПриОткрытии(Объект, ЭтаФорма, Отказ);
	// комментарии
	ФункцииБизнесПроцессовКлиент.ПолучитьМассивКомментариев(ЭтаФорма, Объект.БизнесПроцесс);
	
	ВидимостьДоступность();
		
КонецПроцедуры
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ФункцииФормЗадач.ПослеЗаписи(Объект, ЭтаФорма, ПараметрыЗаписи);
	
	ВидимостьДоступность();
	
КонецПроцедуры

// КОМАНДЫ ДЕЙСТИЙ НАД ЗАДАЧЕЙ
Функция УберемНесогласованныеДанные()
	
	ЗаказОбъект = ЗаказНаряд.ПолучитьОбъект();
	Запчасти = ЗаказОбъект.Запчасти;
	Работы	 = ЗаказОбъект.Работы;
	ТоварыЗаказа = ЗаказОбъект.Товары;
	
	Дефектация = Справочники.Номенклатура.НайтиПоКоду("y00002084                     ");
	
	СуммаВключаетНДС = ЗаказОбъект.СуммаВключаетНДС;
	
	СтрокиНеОтмечены = Товары.НайтиСтроки(Новый Структура("Отметка", Ложь));
	
	Для Каждого Строка Из СтрокиНеОтмечены Цикл
		
		ИндексСтроки	= Товары.Индекс(Строка);
		ФильтрПоИндексу = Новый Структура("ИндексСтрокиНоменклатуры", ИндексСтроки);
		
		// найдем какие запчасти удалить
		СтрокиЗапчасти	= Запчасти.НайтиСтроки(ФильтрПоИндексу);		
		// найдем какие работы удалить
		СтрокиРаботы	= Работы.НайтиСтроки(ФильтрПоИндексу);

		// подкорректируем итоговые суммы в строке товаров
		СтрокаТоварыЗаказа = ТоварыЗаказа[ИндексСтроки];
		СтрокаТоварыЗаказа.Сумма = Строка.НоваяСумма; 
		СтрокаТоварыЗаказа.СуммаАвтоматическойСкидки = Строка.НоваяСуммаСкидки;
		
		СтавкаНДС = КэшируемыеФункции.ПолучитьЧислоСтавкиНДС(СтрокаТоварыЗаказа.СтавкаНДС);
		Если СуммаВключаетНДС Тогда	
			СтрокаТоварыЗаказа.СуммаНДС = СтавкаНДС * СтрокаТоварыЗаказа.Сумма / (СтавкаНДС + 100);
		Иначе
			СтрокаТоварыЗаказа.СуммаНДС = СтавкаНДС * СтрокаТоварыЗаказа.Сумма / 100;
		КонецЕсли;	
		
		// удалим найденные запчасти
		Для Каждого Строка Из СтрокиЗапчасти Цикл
			Запчасти.Удалить(Строка);
		КонецЦикла;
		
		// удалим найденные работы
		Для Каждого Строка Из СтрокиРаботы Цикл
			Если Строка.Номенклатура <> Дефектация Тогда
				Работы.Удалить(Строка);
			КонецЕсли;
		КонецЦикла;
                            
	КонецЦикла;

	Попытка
		ЗаказОбъект.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		Сообщить("Ошибка записи данных
			|" + ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПровестиЗаказИВыполнитьЗадачуНаСервере()
	
	НачатьТранзакцию();
	
	Если НЕ УберемНесогласованныеДанные() Тогда
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецЕсли;
	 
	// Проведем заказ на сервере
	
	стрОшибки = "";
	Если Не ПолныеПрава.ПровестиДокумент(ЗаказНаряд.ПолучитьОбъект(), РежимПроведенияДокумента.Неоперативный, стрОшибки) Тогда
		
		ОтменитьТранзакцию();		
		ОбщиеФункции.СообщитьТекст("Ошибка при проведении заказ наряда
			|" + стрОшибки);
		Возврат Ложь;	
			
	КонецЕсли;
	
	// Выполним задачу
	
	ЗадачаОбъект = РеквизитФормыВЗначение("Объект");
	
	//ЗадачаОбъект.ДополнительныеСвойства.Вставить("НеПроверятьПроведениеЗаказа", Истина);
	
	Попытка
		ЗадачаОбъект.ВыполнитьЗадачу();
	Исключение
		стрОшибки = ОписаниеОшибки();
		ОтменитьТранзакцию();
		ОбщиеФункции.СообщитьТекст("Ошибка при выполнении задачи
						|" + стрОшибки);
		Возврат Ложь;
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура УстановитьОтветственногоПоОплате(Процесс)
	
	Если ЗаказНаряд.Сумма = 0 ИЛИ Контрагент.ОсновнойМенеджер.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	// Сохраним значение основного менеджера, дальнейшее изменение значения ОсновнойМенеджер у Контрагента не должно повлиять на ход БизнесПроцесса
	
	Процесс.Менеджер = Контрагент.ОсновнойМенеджер
	
КонецПроцедуры


&НаСервере
Функция СохранитьДанныеЗадачи(ВариантСогласования)
	
	Процесс 	= Объект.БизнесПроцесс.ПолучитьОбъект();
	
	// если клиент отказался от ремонта или согласился с условиями, запишем ему менеджера (если сумма заказ не нулевая и контрагенту назначен менеджер)
	// если клиент отказался от ремонта и сумма дефектовки не нулевая, он должен заплатить за оказанные ему услуги
	Если ВариантСогласования > 0  Тогда
		УстановитьОтветственногоПоОплате(Процесс);
	КонецЕсли;
		
	// Внести согласования
	
	Строка = Процесс.СогласованияСКлиентом.Добавить();
	
	Строка.ДатаВыполнения 	= ТекущаяДата();
	Строка.ВариантОтвета 	= ВариантСогласования;

	Попытка
		Процесс.Записать();
	Исключение
		стрОшибки = ОписаниеОшибки();
		ОбщиеФункции.СообщитьТекст("Ошибка при записи реквизитов бизнес процесса
							|" + стрОшибки);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции
&НаСервере
Функция ВыполнитьЗадачуНаСервере()
	
	ЗадачаОбъект = РеквизитФормыВЗначение("Объект");
		
	Попытка
		ЗадачаОбъект.ВыполнитьЗадачу();
	Исключение
		стрОшибки = ОписаниеОшибки();
		ОбщиеФункции.СообщитьТекст("Ошибка при выполнении задачи
						|" + стрОшибки);
		Возврат Ложь;
	КонецПопытки;
		
	Возврат истина;

КонецФункции

&НаКлиенте
Процедура ОтменитьИнструмент(Команда)
	
	// Проверим комментарий
	
	Если 	ПустаяСтрока(Объект.Комментарий) И
			Не ВвестиСтроку(Объект.Комментарий, "Причина отказа",,Истина) Тогда
			
		Возврат;
	КонецЕсли;
	
	
	// Отменим задачу
			
	Если 	СохранитьДанныеЗадачи(2) И
			ПровестиЗаказИВыполнитьЗадачуНаСервере() Тогда
			
		Модифицированность = Ложь;
		ФункцииФормЗадач.ПослеЗаписи(Объект, ЭтаФорма, Новый Структура);
		Закрыть();
				
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура Доработать(Команда)
	
	// Проверим комментарий
	
	Если 	ПустаяСтрока(Объект.Комментарий) И
			Не ВвестиСтроку(Объект.Комментарий, "Что доработать",,Истина) Тогда
			
		Возврат;
	КонецЕсли;
	
	// Перешлем задачу
			
	Если 	СохранитьДанныеЗадачи(0) И
			ВыполнитьЗадачуНаСервере() Тогда
			
		Модифицированность = Ложь;
		ФункцииФормЗадач.ПослеЗаписи(Объект, ЭтаФорма, Новый Структура);
		Закрыть();
				
	КонецЕсли;

	
КонецПроцедуры
&НаКлиенте
Процедура КлиентСогласен(Команда)
	
	Если ВсегоПоЗаказу = 0 И Скидка = 0 Тогда
		Ответ = Вопрос("Сумма оплаты не определена. Оформить заказ-наряд?", РежимДиалогаВопрос.ДаНетОтмена);
		Если Ответ = КодВозвратаДиалога.Нет ИЛИ Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Выполним задачу
	
	Если 	СохранитьДанныеЗадачи(1) И
			ПровестиЗаказИВыполнитьЗадачуНаСервере() Тогда
				
		Модифицированность = Ложь;
		ФункцииФормЗадач.ПослеЗаписи(Объект, ЭтаФорма, Новый Структура);
		Закрыть();
					
	КонецЕсли;
  	
КонецПроцедуры


// КОММЕНТАРИИ

&НаКлиенте
Процедура КомандаПоказатьКомментарий(Команда)
	ФункцииБизнесПроцессовКлиент.КомандаПоказатьКомментарий(ЭтаФорма);
КонецПроцедуры


Функция ПолучитьСуммуДефектовки(ТекущийИндекс)
	
	СуммаДефектации = 0;
	
	Дефектация = Справочники.Номенклатура.НайтиПоКоду("y00002084                     ");	// дефектация
	СтрокиДефектации = ЗаказНаряд.Работы.НайтиСтроки(Новый Структура("ИндексСтрокиНоменклатуры, Номенклатура", ТекущийИндекс, Дефектация));
	
	Для Каждого Строка Из СтрокиДефектации Цикл
		
		СуммаДефектации = СуммаДефектации + Строка.Сумма;
		
	КонецЦикла;
	
	Возврат СуммаДефектации;
	
КонецФункции

Процедура ОбновитьПодвал()
	
	ВсегоПоЗаказу = Товары.Итог("НоваяСумма");
	Скидка = Товары.Итог("НоваяСуммаСкидки");
	
	ИтогоHTML = БизнесПроцессы.РемонтИнструмента.СформироватьИтоговуюНадпись(ВсегоПоЗаказу, Скидка);	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОтметкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.НоваяСумма = ?(ТекущиеДанные.Гарантия, 0, ?(ТекущиеДанные.Отметка,ТекущиеДанные.Сумма, ПолучитьСуммуДефектовки(Элементы.Товары.ТекущаяСтрока)));
		ТекущиеДанные.НоваяСуммаСкидки = ?(ТекущиеДанные.Гарантия, ?(ТекущиеДанные.Отметка, ТекущиеДанные.СуммаАтоматическойСкидки, ПолучитьСуммуДефектовки(Элементы.Товары.ТекущаяСтрока)), 0); 
		ОбновитьПодвал();
	КонецЕсли;
	
	//ОперативнаяВидимость();
КонецПроцедуры
 