&НаКлиенте
Перем текИндексСтроки, Запчасть;  
&НаКлиенте
Перем ОрганизацияПоДокументу, КонтрагентПоДокументу, ПартнерПоДокументу;
&НаКлиенте
Перем МассивКомментариев Экспорт;


&НаКлиенте
Перем СтруктураКолонокЗапчасти Экспорт;
&НаКлиенте
Перем СтруктураКолонокРаботы Экспорт;
&НаКлиенте
Перем СтруктураКолонокТовары Экспорт;

// ТИПОВЫЕ
&НаСервере
Процедура ПрочитатьРеквизиты()
	
	ФункцииБизнесПроцессов.ЗаполнитьДанные(ЭтаФорма, Объект.БизнесПроцесс, Объект.Ссылка);
			
КонецПроцедуры
&НаКлиенте
Процедура ПоказатьСкрытьАдресацию(Команда)
	
	// Реверснем
	
	КоманднаяПанель.ПодчиненныеЭлементы.ПоказатьСкрытьАдресацию.Пометка = Не КоманднаяПанель.ПодчиненныеЭлементы.ПоказатьСкрытьАдресацию.Пометка;
	
	// Обновим видимость
	
	ФункцииФормЗадач.ВидимостьАдресации(ЭтаФорма);
	
КонецПроцедуры
&НаКлиенте
Процедура ВидимостьДоступность()
	
	Элементы.ОсновныеДействия.Доступность	= Не ТолькоПросмотр;
	Элементы.Шапка.ТолькоПросмотр 		= ТолькоПросмотр;	
	Элементы.Товары.ТолькоПросмотр 		= ТолькоПросмотр;
	Элементы.Расшифровка.ТолькоПросмотр	= ТолькоПросмотр;
	
	Элементы.Контрагент.ТолькоПросмотр = Партнер.Пустая() ИЛИ ПолучитьКоличествоКонтрагентовПартнера() < 2;
	
КонецПроцедуры
&НаСервере
Функция ТоварыСтрокой()
	
	ТоварыЗаказы = Документы.ЗаказНаряд.СоздатьДокумент().Товары.Выгрузить();
	
	Для Каждого Строка Из Товары Цикл
		
		НовСтрока = ТоварыЗаказы.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
		
		// Скидка
		
		Если НовСтрока.Гарантия Тогда
			
			НовСтрока.СуммаАвтоматическойСкидки = НовСтрока.Сумма;
			НовСтрока.Сумма = 0;

		КонецЕсли;
		
				
		// Установим ставку
		
		НовСтрока.СтавкаНДС = РаботаСНоменклатурой.ПолучитьСтавкуНДСНоменклатуры(НовСтрока.Номенклатура);
		
		// Пересчитаем сумму со ставкой
		
		НовСтрока.ЦенаЗаЧас = РаботаСНоменклатурой.ПолучитьЦенуЗаЧасРемонтаИнструмента(НовСтрока.Номенклатура);
		
	КонецЦикла;
	
	Возврат ЗначениеВСтрокуВнутр(ТоварыЗаказы);
	
КонецФункции


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПрочитатьРеквизиты();
	
	Если ЗаказНаряд.Пустая() Тогда
		
		ТипЦен = Партнер.ТипЦен;//берем из партнера, если нет из настроек пользователя
		Валюта = Партнер.ТипЦен.Валюта;
		
 		ФункцииФормДокументов.ЗаполнитьЗначенияПоУмолчанию(ЭтаФорма, ЭтаФорма.Элементы, Ложь);
		
		СуммаВключаетНДС = Истина;
		УчитыватьНДС = Организация.УчитыватьНДС;
		
		Услуга = Константы.УслугаРемонтПоУмолч.Получить();
		
		Для Каждого СтрокаТовара Из Товары Цикл
			
			СтрокаТовара.ЦенаЗаЧас = РаботаСНоменклатурой.ПолучитьЦенуЗаЧасРемонтаИнструмента(СтрокаТовара.Номенклатура);
			Если УчитыватьНДС Тогда
				СтрокаТовара.СтавкаНДС = РаботаСНоменклатурой.ПолучитьСтавкуНДСНоменклатуры(СтрокаТовара.Номенклатура);
			Иначе
				СтрокаТовара.СтавкаНДС = РаботаСНоменклатурой.ПолучитьСтавкуНДСНоменклатуры();
			КонецЕсли;

		КонецЦикла;
	Иначе
		ЗаполнитьЗначенияСвойств(ЭтаФорма, ЗаказНаряд,, "Товары, Запчасти, Работы");
		
	КонецЕсли;
	
	// информация о товаре
	РаботаСНоменклатурой.ДобавитьОперативнуюИнформациюОТоваре(ЭтаФорма);
	// комментарии
	ФункцииБизнесПроцессов.ДобавитьРаботуСКомментариями(ЭтаФорма);
	
	
	ФункцииФормДокументов.РассчитатьДинамическиеКолонки(
					Товары,
					ФункцииФормДокументов.ПолучитьСтруктуруКолонокТовары(Элементы.Товары, СуммаВключаетНДС, ТипЦен, "Товары",, Валюта, УчитыватьНДС));
					
	ОбновитьИнформационныеНадписи();	
КонецПроцедуры
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ФункцииФормЗадач.ПриОткрытии(Объект, ЭтаФорма, Отказ);
	// комментарии
	ФункцииБизнесПроцессовКлиент.ПолучитьМассивКомментариев(ЭтаФорма, Объект.БизнесПроцесс);
	
	СтруктураКолонокЗапчасти 	= ФункцииФормДокументов.ПолучитьСтруктуруКолонокТовары(Элементы.Запчасти, СуммаВключаетНДС, ТипЦен, "Запчасти",,Валюта, УчитыватьНДС);
	СтруктураКолонокРаботы 		= ФункцииФормДокументов.ПолучитьСтруктуруКолонокТовары(Элементы.Работы, СуммаВключаетНДС, ТипЦен, "Работы",,Валюта, УчитыватьНДС);
	СтруктураКолонокТовары		= ФункцииФормДокументов.ПолучитьСтруктуруКолонокТовары(Элементы.Товары, СуммаВключаетНДС, ТипЦен, "Товары",, Валюта, УчитыватьНДС);
	
	СохранитьТекущиеЗначенияПараметров();
	ВидимостьДоступность();
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ФункцииФормЗадач.ПослеЗаписи(Объект, ЭтаФорма, ПараметрыЗаписи);
	
	ВидимостьДоступность();
	
КонецПроцедуры
&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ЗапомнитьТаблицы(текИндексСтроки);

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ СохранитьДефектовку() Тогда
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = СобытияСистемы.Событие_ЗаписанЗаказНаряд() Тогда
		
		ПрочитатьРеквизиты();
		ОбновитьОтображениеДанных();
		ВидимостьДоступность();
		
	КонецЕсли;
	
КонецПроцедуры

// ДЕЙСТВИЯ

Функция СохранитьДефектовку()
	
	НачатьТранзакцию();
	
	Если НЕ СохранитьЗаказНаряд() Тогда
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ СохранитьИзменения() Тогда
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
	Возврат Истина;
		
КонецФункции
&НаСервере
Функция СохранитьИзменения(ЭтоНовый = Ложь)
	
	// Сохраним специфические реквизиты в бизнес процессе
	
	Процесс 	= Объект.БизнесПроцесс.ПолучитьОбъект();
	Изменился 	= Ложь;
	
	Если Процесс.ЗаказНаряд <> ЗаказНаряд Тогда
		
		Процесс.ЗаказНаряд = ЗаказНаряд;
		Изменился = Истина;
		
	КонецЕсли;
	
	// Партнер
	
	Если Процесс.Партнер <> Партнер Тогда
		
		Процесс.Партнер = Партнер;
		Изменился 		= Истина;
		
	КонецЕсли;
	
	// Контрагент
	
	Если Процесс.Контрагент <> Контрагент Тогда
		
		Процесс.Контрагент = Контрагент;
		Изменился 		= Истина;
		
	КонецЕсли;
	
	// Организация
	
	Если Процесс.Организация <> Организация Тогда
		
		Процесс.Организация = Организация;
		Изменился 		= Истина;
		
	КонецЕсли;
	
	Если Процесс.ЧисткаГрязногоИнструмента <> ЧисткаГрязногоИнструмента Тогда
		Процесс.ЧисткаГрязногоИнструмента = ЧисткаГрязногоИнструмента;
		Изменился = Истина;
	КонецЕсли;

	
	Если Процесс.ДоверенноеЛицо <> ДоверенноеЛицо Тогда
		Процесс.ДоверенноеЛицо = ДоверенноеЛицо;
		Изменился = Истина;
	КонецЕсли;

	// Товары
	
	Если Процесс.Товары.Количество() = Товары.Количество() Тогда
		
		Инд = -1;
		Для Каждого Строка Из Процесс.Товары Цикл Инд = Инд + 1;
			СтрокаТут = Товары[Инд];
			Если 	Строка.Номенклатура <> СтрокаТут.Номенклатура Или
					Строка.Количество <> СтрокаТут.Количество ИЛИ
					Строка.Гарантия <> СтрокаТут.Гарантия Тогда
					
					Процесс.Товары.Загрузить(Товары.Выгрузить());
					Изменился = Истина;
					Прервать;
					
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		Процесс.Товары.Загрузить(Товары.Выгрузить());
		Изменился = Истина;

	КонецЕсли;
	
	
	// Запишем процесс
	
	Если Изменился Тогда
		
		Попытка
			Процесс.Записать();
		Исключение
			стрОшибки = ОписаниеОшибки();
			ОбщиеФункции.СообщитьТекст("Ошибка при записи реквизитов бизнес процесса
								|" + стрОшибки);
			Возврат Ложь;
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции
&НаСервере
Функция СохранитьЗаказНаряд()
		
	Если ЗаказНаряд.Пустая() Тогда
		ДокументОбъект = Документы.ЗаказНаряд.СоздатьДокумент();
	Иначе
		ДокументОбъект = ЗаказНаряд.ПолучитьОбъект();
	КонецЕсли;
	
	Если ДокументОбъект <> Неопределено Тогда
		
		ЗаполнитьЗначенияСвойств(ДокументОбъект, ЭтаФорма,,"Товары, Работы, Запчасти");
		
		ДокументОбъект.Товары.Загрузить(Товары.Выгрузить());
		ДокументОбъект.Запчасти.Загрузить(ЗапчастиЗаказа.Выгрузить());
		ДокументОбъект.Работы.Загрузить(РаботыЗаказа.Выгрузить());
		
		Если ДокументОбъект.Ссылка.Пустая() Тогда
			ДокументОбъект.Дата = ТекущаяДата();
		КонецЕсли;
		
		Попытка
			ДокументОбъект.Записать();
		Исключение
			Сообщить("Ошибка записи документа: 
			|" + ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
		
		ЗаказНаряд = ДокументОбъект.Ссылка;

		Возврат Истина;

	КонецЕсли;
	
	Возврат Ложь;	
		
КонецФункции

&НаКлиенте
Процедура ВыполнитьДефектовку(Команда)
	
	Если Записать(Новый Структура("ВыполнитьЗадачу", Истина)) Тогда
			
		ФункцииФормЗадач.ПослеЗаписи(Объект, ЭтаФорма, Новый Структура);
		Закрыть();
				
	КонецЕсли;

КонецПроцедуры
//&НаКлиенте
//Процедура ОтказатьсяОтДеффектовки(Команда)
//	
//	Если Модифицированность Тогда
//		
//		Ответ = Вопрос("Данные были изменены. Сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена);
//		
//		Если Ответ = КодВозвратаДиалога.Да Тогда
//			
//			ЗапомнитьТаблицы(текИндексСтроки);
//			
//			Если ЗаказНаряд.Пустая() Тогда
//				Записано = СохранитьИзменения();
//			Иначе
//				Записано = СохранитьДефектовку();
//			КонецЕсли;
//		ИначеЕсли 
//			Ответ = КодВозвратаДиалога.Отмена Тогда
//			Возврат;
//		Иначе
//			Записано = Истина;
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//	// Отменим задачу
//			
//	Если 	Записано И
//			ВыполнитьЗадачуНаСервере() Тогда
//			
//		Модифицированность = Ложь;
//		ФункцииФормЗадач.ПослеЗаписи(Объект, ЭтаФорма, Новый Структура);
//		Закрыть();
//				
//	КонецЕсли;
//	
//КонецПроцедуры


// ОСНОВНЫЕ РЕКВИЗИТЫ ШАПКИ

&НаСервере
Процедура ОбновитьИнформационныеНадписи()
	
	Сумма 		= Товары.Итог("Всего");
	СуммаНДС 	= Товары.Итог("СуммаНДС");
	Скидка		= Товары.Итог("СуммаАвтоматическойСкидки");
	
КонецПроцедуры
&НаКлиенте
Процедура СохранитьТекущиеЗначенияПараметров()
	
	// сохраняем текущие значения параметров
	
	СтруктураКолонокТовары.стТипЦен = ТипЦен;
	СтруктураКолонокТовары.стУчитыватьНДС = УчитыватьНДС;
	СтруктураКолонокТовары.стСуммаВключаетНДС = СтруктураКолонокТовары.СуммаВключаетНДС;
	СтруктураКолонокТовары.стВалюта = СтруктураКолонокТовары.Валюта;
	
	СтруктураКолонокЗапчасти.стТипЦен = ТипЦен;
	СтруктураКолонокЗапчасти.стУчитыватьНДС = УчитыватьНДС;
	СтруктураКолонокЗапчасти.стСуммаВключаетНДС = СтруктураКолонокЗапчасти.СуммаВключаетНДС;
	СтруктураКолонокЗапчасти.стВалюта = СтруктураКолонокЗапчасти.Валюта;
	
	//СтруктураКолонокРаботы.стТипЦен = ТипЦен; у работ пр изменении типа цен ничего не происходит
	СтруктураКолонокРаботы.стУчитыватьНДС = УчитыватьНДС;
	СтруктураКолонокРаботы.стСуммаВключаетНДС = СтруктураКолонокРаботы.СуммаВключаетНДС;
	СтруктураКолонокРаботы.стВалюта = СтруктураКолонокРаботы.Валюта;

	ПартнерПоДокументу		= Партнер;
	ОрганизацияПоДокументу 	= Организация;
	КонтрагентПоДокументу 	= Контрагент;
	
КонецПроцедуры


&НаКлиенте
Процедура ПриИзмененииРеквизитаВлияющегоНаТабличнуюЧасть(ОбновитьСтруктуру = Истина)
	
	ЗапомнитьТаблицы(текИндексСтроки);
	
	ПриИзмененииРеквизитаВлияющегоНаТабличнуюЧастьНаСервере(СтруктураКолонокТовары, СтруктураКолонокЗапчасти, СтруктураКолонокРаботы, ОбновитьСтруктуру);	
	
	ПрочитатьТаблицы(текИндексСтроки);

КонецПроцедуры
&НаСервере
Процедура ПересчитатьСуммыТаблицыТоваров(СтруктураКолонокТовары, СтруктураКолонокЗапчасти, СтруктураКолонокРаботы);
	
	Для Каждого Строка Из Товары Цикл
		
		текИндекс = Товары.Индекс(Строка);
		ПрочитатьТаблицы(текИндекс);
			
		Для Каждого СтрокаЗапчасти Из Запчасти Цикл
				
			//ФункцииФормДокументов.РассчитатьСуммыТабличныхЧастей(
			//		СтрокаЗапчасти, 
			//		СтруктураКолонокЗапчасти);
			ФункцииФормДокументов.РассчитатьСуммыСтрокиОтЦены(
					СтрокаЗапчасти, 
					СтруктураКолонокЗапчасти);
		КонецЦикла;
		
		Для Каждого СтрокаРабота Из Работы Цикл
			
			СтрокаРабота.Сумма = СтрокаРабота.Количество * Строка.ЦенаЗаЧас;

			//	
			//ФункцииФормДокументов.РассчитатьСуммыТабличныхЧастей(
			//		СтрокаРабота, 
			//		СтруктураКолонокРаботы);
			//ФункцииФормДокументов.РассчитатьСуммыСтрокиОтЦены(
			//		СтрокаРабота, 
			//		СтруктураКолонокРаботы, Ложь);
		КонецЦикла;
		
		
		ЗапомнитьТаблицы(текИндекс);
			
		// при изменении строк запчастей пересчитываем строку товара		
		ПересчитатьСтрокуТовара(текИндекс, СтруктураКолонокТовары);
 					
	КонецЦикла;
		
КонецПроцедуры
&НаСервере
Процедура ПриИзмененииРеквизитаВлияющегоНаТабличнуюЧастьНаСервере(СтруктураКолонокТовары, СтруктураКолонокЗапчасти, СтруктураКолонокРаботы, ОбновитьСтруктуру)
	
	//ОбновитьЗаголовки();
	
	Если ОбновитьСтруктуру Тогда
		
		МассивРеквизитов = КэшируемыеФункции.ПолучитьРеквизитыДокумента("ЗаказНаряд");
		
		ФункцииФормДокументов.ОбновитьСтруктуруКолонокТовары(
				ЭтаФорма, 
				СтруктураКолонокТовары, 
				МассивРеквизитов);
				
		ФункцииФормДокументов.ОбновитьСтруктуруКолонокТовары(
				ЭтаФорма, 
				СтруктураКолонокЗапчасти, 
				МассивРеквизитов);
				
		СтруктураКолонокРаботы.УчитыватьНДС = УчитыватьНДС;
		СтруктураКолонокРаботы.СуммаВключаетНДС = СуммаВключаетНДС;
		СтруктураКолонокРаботы.Валюта = Валюта;
		
	КонецЕсли;
	
	ПересчитатьСуммыТаблицыТоваров(СтруктураКолонокТовары, СтруктураКолонокЗапчасти, СтруктураКолонокРаботы);
	
	ОбновитьИнформационныеНадписи();
	
КонецПроцедуры 



&НаСервере
Функция КонтрагентРаботаетСОрганизацией(НовыйКонтрагент = Неопределено)
	Возврат Справочники.Контрагенты.КонтрагентРаботаетСОрганизацией(?(НовыйКонтрагент = Неопределено, Контрагент, НовыйКонтрагент), Организация);
КонецФункции
&НаСервере
Функция ПолучитьКоличествоКонтрагентовПартнера()
	Возврат Справочники.Партнеры.ПолучитьКоличествоКонтрагентовПартнера(Партнер);
КонецФункции
 &НаСервере
Функция НайтиПодходящегоКонтрагента()
	
	Возврат Справочники.Партнеры.НайтиКонтрагентаРаботающегоСОрганизацией(Партнер, Организация);
	
КонецФункции

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	// проставим зависимые реквизиты
	ФункцииФормДокументов.ОрганизацияПриИзменении(ЭтаФорма);
	
КонецПроцедуры
&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
	
	// заполним зависимые реквизиты
	ФункцииФормДокументов.КонтрагентПриИзменении(ЭтаФорма, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
		
	Если НЕ Организация.Пустая() И НЕ ДиалогиСПользователем.ПроверитьНаСоответствиеОсновнойОрганизации(
				Контрагент, 
				Организация, 
				?(КонтрагентРаботаетСОрганизацией() = Неопределено, Неопределено, Истина)) Тогда
		
		Организация = ОрганизацияПоДокументу;
	Иначе
		
		ОрганизацияПриИзмененииНаСервере();
		ПриИзмененииРеквизитаВлияющегоНаТабличнуюЧасть();
		СохранитьТекущиеЗначенияПараметров();
		
	КонецЕсли;

КонецПроцедуры
&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	Партнер = Контрагент.Партнер;
	
	Если НЕ Контрагент.Пустая() И НЕ ДиалогиСПользователем.ПроверитьНаСоответствиеОсновнойОрганизации(
				Контрагент, 
				Организация, 
				?(КонтрагентРаботаетСОрганизацией() = Неопределено, Неопределено, Истина)) Тогда
			
		Контрагент = КонтрагентПоДокументу;
	Иначе
		
		// заполним зависимые реквизиты
		КонтрагентПриИзмененииНаСервере();
		ПриИзмененииРеквизитаВлияющегоНаТабличнуюЧасть();
		СохранитьТекущиеЗначенияПараметров();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	
	Если Партнер.Пустая() Тогда
		
		Контрагент = Неопределено;
		
		КонтрагентПриИзмененииНаСервере();
		ПриИзмененииРеквизитаВлияющегоНаТабличнуюЧасть();
		
	Иначе
		
		НовыйКонтрагент = НайтиПодходящегоКонтрагента();

		Если НовыйКонтрагент = Неопределено Тогда
			
			Предупреждение("Партнер не работает с """ + Организация + """");
			Партнер = ПартнерПоДокументу;
			
		Иначе
	    	Контрагент = НовыйКонтрагент;
			
   			КонтрагентПриИзмененииНаСервере();
			ПриИзмененииРеквизитаВлияющегоНаТабличнуюЧасть();
		
		КонецЕсли;
	КонецЕсли;   
	
    ВидимостьДоступность();	
	СохранитьТекущиеЗначенияПараметров();	
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка =Ложь;
	
	Значение = ОткрытьФорму("Справочник.Валюты.ФормаВыбора",,,,,,Новый ОписаниеОповещения("ОбработкаНажатияВалюты",ЭтаФорма,),);
	
КонецПроцедуры
&НаКлиенте
Процедура ОбработкаНажатияВалюты(Результат, Параметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	Валюта = Результат;
	Модифицированность = Истина;
	
	Если ФункцииФормДокументов.ДиалогПриИзмененииВалюты(Товары.Количество(),СтруктураКолонокТовары,ТипЦен) Тогда
		ПриИзмененииРеквизитаВлияющегоНаТабличнуюЧасть();
	КонецЕсли;

	СохранитьТекущиеЗначенияПараметров();		
КонецПроцедуры
&НаКлиенте
Процедура ТипЦенНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка =Ложь;
	
	Значение = ОткрытьФорму("Справочник.ТипыЦен.ФормаВыбора",,,,,,Новый ОписаниеОповещения("ОбработкаТипЦенНажатие", ЭтаФорма),);
	//Если Значение = Неопределено Тогда
	//	Возврат;	
	//КонецЕсли;
	//
	//ТипЦен = Значение;
	//Модифицированность = Истина;
	//
	//Если ФункцииФормДокументов.ДиалогПриИзмененииТипаЦен(Товары.Количество()) Тогда
	//	
	//	ПриИзмененииРеквизитаВлияющегоНаТабличнуюЧасть();
	//	
	//КонецЕсли;
	//	
	//СохранитьТекущиеЗначенияПараметров();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаТипЦенНажатие(Результат, Параметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
    ТипЦен = Результат;
	Модифицированность = Истина;
	
	Если ФункцииФормДокументов.ДиалогПриИзмененииТипаЦен(Товары.Количество(),СтруктураКолонокТовары,ТипЦен) Тогда
		
		ПриИзмененииРеквизитаВлияющегоНаТабличнуюЧасть();
		
	КонецЕсли;
		
	СохранитьТекущиеЗначенияПараметров();

КонецПроцедуры
// ТАБЛИЦА

&НаКлиенте
Процедура ОбновитьТаблицы()
	
	новИндекс = Товары.Индекс(Элементы.Товары.ТекущиеДанные);
	
	Если новИндекс <> текИндексСтроки Тогда
		
		//стМодифицированность = Модифицированность;
		
		// Запомним старые
		ЗапомнитьТаблицы(текИндексСтроки);
	
		// Прочитаем новые
		текИндексСтроки = новИндекс;
	
		ПрочитатьТаблицы(текИндексСтроки);
		
		//Модифицированность = стМодифицированность;
		
	КонецЕсли;
	
КонецПроцедуры
&НаСервере
Процедура ПересчитатьСтрокуТовара(текИндекс, СтруктураКолонок)
			
	Если СтруктураКолонок <> Неопределено И текИндекс <> Неопределено Тогда
		
		СтрокаТовара = Товары[текИндекс];
		
		СтрокаТовара.Сумма 		= Запчасти.Итог("Сумма") + Работы.Итог("Сумма");		
		СтрокаТовара.СуммаАвтоматическойСкидки = ?(СтрокаТовара.Гарантия, СтрокаТовара.Сумма, 0);
		
		ФункцииФормДокументов.РассчитатьСуммыТабличныхЧастей(СтрокаТовара, СтруктураКолонок);
		
		ОбновитьИнформационныеНадписи();
		
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ПрочитатьТаблицы(ИндексСтрокиНоменклатуры)
	
	// Получим из формы
	
	ТаблицаЗапчасти = ДанныеФормыВЗначение(Запчасти, Тип("ТаблицаЗначений"));
	ТаблицаРаботы 	= ДанныеФормыВЗначение(Работы, Тип("ТаблицаЗначений"));
	
	// Прочитаем запчасти
	
	ТаблицаЗапчасти.Очистить();
	
	КонвертацияТипов.ДобавитьТаблицуКДругойТаблице(
					ТаблицаЗапчасти,
					ЗапчастиЗаказа.НайтиСтроки(Новый Структура("ИндексСтрокиНоменклатуры", ИндексСтрокиНоменклатуры))
													);
	// Прочитаем работы
	
	ТаблицаРаботы.Очистить();
	
	КонвертацияТипов.ДобавитьТаблицуКДругойТаблице(
					ТаблицаРаботы,
					РаботыЗаказа.НайтиСтроки(Новый Структура("ИндексСтрокиНоменклатуры", ИндексСтрокиНоменклатуры))
													);
	
	// Перешлем в форму
													
	ЗначениеВДанныеФормы(ТаблицаЗапчасти, 	Запчасти);
	ЗначениеВДанныеФормы(ТаблицаРаботы, 	Работы);
	
КонецПроцедуры
&НаСервере
Процедура ЗапомнитьТаблицы(ИндексСтрокиНоменклатуры)
	
	Если ИндексСтрокиНоменклатуры <> Неопределено Тогда
		
		// Получим из формы
	
		ТаблицаЗапчасти = ДанныеФормыВЗначение(Запчасти, Тип("ТаблицаЗначений"));
		ТаблицаРаботы 	= ДанныеФормыВЗначение(Работы, Тип("ТаблицаЗначений"));
		
		// Сохраним запчасти
		
		ЗапомнитьТаблицу(ТаблицаЗапчасти, ЗапчастиЗаказа, ИндексСтрокиНоменклатуры);
		
		// Сохраним работы
		
		ЗапомнитьТаблицу(ТаблицаРаботы, РаботыЗаказа, ИндексСтрокиНоменклатуры);
			
	КонецЕсли;
	
КонецПроцедуры
&НаСервере
Процедура ЗапомнитьТаблицу(Таблица, ТаблицаОбъекта, ИндексСтрокиНоменклатуры)
	
	// Удалим из объекта все записи таблицы
	
	СтрокиВОбъекте = ТаблицаОбъекта.НайтиСтроки(Новый Структура("ИндексСтрокиНоменклатуры", ИндексСтрокиНоменклатуры));
	КолУдСтрок = СтрокиВОбъекте.Количество();
	Для ном = 1 По КолУдСтрок Цикл
		ТаблицаОбъекта.Удалить(СтрокиВОбъекте[КолУдСтрок - Ном]);
	КонецЦикла;
	
	// Добавим записи в таблицу
	
	Для Каждого Строка Из Таблица Цикл
		новСтрока = ТаблицаОбъекта.Добавить();
		ЗаполнитьЗначенияСвойств(новСтрока, Строка);
		новСтрока.ИндексСтрокиНоменклатуры = ИндексСтрокиНоменклатуры;
	КонецЦикла;
						
КонецПроцедуры
&НаКлиенте
Процедура СместитьИндексыТаблицНаОднуВниз(ИндексСтрокиНоменклатуры, Таблица)
	
	Для Каждого Строка Из Таблица Цикл
		
		Если Строка.ИндексСтрокиНоменклатуры > ИндексСтрокиНоменклатуры Тогда
			Строка.ИндексСтрокиНоменклатуры = Строка.ИндексСтрокиНоменклатуры - 1;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	ОбновитьТаблицы();
КонецПроцедуры
&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	Запчасти.Очистить();
	Работы.Очистить();
	
	ЗапомнитьТаблицы(текИндексСтроки);
	
	// Нужно сместить все индексы таблиц на одну единицу
	СместитьИндексыТаблицНаОднуВниз(текИндексСтроки, ЗапчастиЗаказа);
	СместитьИндексыТаблицНаОднуВниз(текИндексСтроки, РаботыЗаказа);
	
	// Прочитаем новые значения
	ПрочитатьТаблицы(текИндексСтроки);
КонецПроцедуры
&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	ОбновитьТаблицы();
КонецПроцедуры


&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	// Установим цену за час
	
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	ТекДанные.ЦенаЗаЧас = РаботаСНоменклатурой.ПолучитьЦенуЗаЧасРемонтаИнструмента(ТекДанные.Номенклатура);
	
	// Устаовим количество
	
	Если Не ТекДанные.Количество Тогда
		ТекДанные.Количество = 1;
	КонецЕсли;
	
	// пересичтаем строку
	
	ФункцииФормДокументов.НоменклатураПриИзменении(
				Элементы.Товары, 
				СтруктураКолонокТовары);

КонецПроцедуры
&НаКлиенте
Процедура ТоварыНеисправностьОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	ФункцииФормДокументов.ОкончанияВводаТекстаНеисправности(ЭтаФорма, Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка);

КонецПроцедуры
&НаКлиенте
Процедура ТоварыГарантияПриИзменении(Элемент)
	ПересчитатьСтрокуТовара(текИндексСтроки, СтруктураКолонокТовары);

КонецПроцедуры
&НаКлиенте
Процедура ТоварыКомментарийОткрытие(Элемент, СтандартнаяОбработка)
		ТекДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекДанные <> Неопределено Тогда
		
		СтандартнаяОбработка = Ложь;
	
		Форма = ПолучитьФорму("ОбщаяФорма.РедактированияВыражения", 
	                  Новый Структура("Выражение, ТекстПомощи", 
					  	 ТекДанные.Комментарий, 
						 "Комментарий для товара"), 
					Элемент);
					
		Форма.Заголовок = ТекДанные.Номенклатура;
		
		Форма.ОткрытьМодально();
		
	КонецЕсли;

КонецПроцедуры
&НаКлиенте
Процедура ТоварыКомментарийОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
		СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		
		Элементы.Товары.ТекущиеДанные.Комментарий = ВыбранноеЗначение;
		
	КонецЕсли;


КонецПроцедуры
&НаКлиенте
Процедура ТоварыЦенаЗаЧасПриИзменении(Элемент)
	
	// Изменим цену у всех работ
	
	ТекДанные 	= Элементы.Товары.ТекущиеДанные;
	Индекс 		= Товары.Индекс(ТекДанные);
	ЦенаЗаЧас	= ТекДанные.ЦенаЗаЧас;
	
	//СтрокиРабот = Работы.НайтиСтроки(Новый Структура("ИндексСтрокиНоменклатуры", Индекс));
	Для Каждого Строка Из Работы Цикл
		Строка.Цена = ЦенаЗаЧас;
		Строка.Сумма = Строка.Количество * Строка.Цена;
		//ФункцииФормДокументов.РассчитатьСуммыТабличныхЧастей(Строка, СтруктураКолонокРаботы);
	КонецЦикла;
	
	// пересчитаем изменившиюся сумму
	
	ПересчитатьСтрокуТовара(текИндексСтроки, СтруктураКолонокТовары);

КонецПроцедуры
&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
		ФункцииФормДокументов.СтавкаНДСПриИзменении(
				Элементы.Товары, 
				СтруктураКолонокТовары);

КонецПроцедуры


// ЗАПЧАСТИ

&НаКлиенте
Процедура ЗапчастиПриАктивизацииСтроки(Элемент)
	
	// информация о товаре
	ОбработатьОтображениеИнформацииОТоваре();
	
КонецПроцедуры
&НаКлиенте
Процедура ЗапчастиПослеУдаления(Элемент)
	
	ПересчитатьСтрокуТовара(текИндексСтроки, СтруктураКолонокТовары);

КонецПроцедуры

&НаКлиенте
Процедура ЗапчастиНоменклатураПриИзменении(Элемент)
	
	// Установим количество
	
	текСтрока = Элементы.Запчасти.ТекущиеДанные;
	
	Если Не текСтрока.Количество Тогда
		текСтрока.Количество = 1;
	КонецЕсли;
	
	
	ФункцииФормДокументов.НоменклатураПриИзменении(
				Элементы.Запчасти, 
				СтруктураКолонокЗапчасти);
				
				
	ПересчитатьСтрокуТовара(текИндексСтроки, СтруктураКолонокТовары);

КонецПроцедуры
&НаКлиенте
Процедура ЗапчастиЦенаПриИзменении(Элемент)
	
	ФункцииФормДокументов.ЦенаПриИзменении(
				 Элементы.Запчасти, 
				СтруктураКолонокЗапчасти);
				
	ПересчитатьСтрокуТовара(текИндексСтроки, СтруктураКолонокТовары);

КонецПроцедуры
&НаКлиенте
Процедура ЗапчастиКоличествоПриИзменении(Элемент)
		ФункцииФормДокументов.КоличествоПриИзменении(
				Элементы.Запчасти, 
				СтруктураКолонокЗапчасти);
				
	ПересчитатьСтрокуТовара(текИндексСтроки, СтруктураКолонокТовары);

КонецПроцедуры
&НаКлиенте
Процедура ЗапчастиСуммаПриИзменении(Элемент)
	
	ФункцииФормДокументов.СуммаПриИзменении(
				Элементы.Запчасти, 
				СтруктураКолонокЗапчасти);
				
	ПересчитатьСтрокуТовара(текИндексСтроки, СтруктураКолонокТовары);

КонецПроцедуры

// РАБОТЫ

&НаКлиенте
Процедура РаботыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	// установим стоимость работы
	
	Если НоваяСтрока Тогда
	
		ТекДанные = Элементы.Товары.ТекущиеДанные;
		Если ТекДанные <> Неопределено Тогда
			
			Элемент.ТекущиеДанные.Цена = ТекДанные.ЦенаЗаЧас;
			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры
&НаКлиенте
Процедура РаботыПослеУдаления(Элемент)
	
	ПересчитатьСтрокуТовара(текИндексСтроки, СтруктураКолонокТовары);

КонецПроцедуры

&НаКлиенте
Процедура РаботыНоменклатураПриИзменении(Элемент)
		
	ФункцииФормДокументов.НоменклатураПриИзменении(
				Элементы.Работы, 
				СтруктураКолонокРаботы);
				
	ПересчитатьСтрокуТовара(текИндексСтроки, СтруктураКолонокТовары);

КонецПроцедуры
&НаКлиенте
Процедура РаботыКоличествоПриИзменении(Элемент)
	
	ТекДанные = Элементы.Работы.ТекущиеДанные;
	
	Если ТекДанные <> Неопределено Тогда
		
		ТекДанные.Сумма = ТекДанные.Количество * Товары[текИндексСтроки].ЦенаЗаЧас;
			
	КонецЕсли;
	
	ПересчитатьСтрокуТовара(текИндексСтроки, СтруктураКолонокТовары);

КонецПроцедуры

&НаКлиенте
Процедура РаботыСуммаПриИзменении(Элемент)
	
	ФункцииФормДокументов.СуммаПриИзменении(
				Элементы.Работы, 
				СтруктураКолонокРаботы);
				
	ПересчитатьСтрокуТовара(текИндексСтроки, СтруктураКолонокТовары);

КонецПроцедуры


// ИНФОРМАЦИЯ О ТОВАРЕ

&НаСервере
Процедура ОбработатьОтображениеИнформацииОТоваре() Экспорт
	
	РаботаСНоменклатурой.ОбработатьОтображениеИнформацииОТоваре(ЭтаФорма, "Запчасти", "Запчасти");
	
КонецПроцедуры

&НаКлиенте
Процедура ИнфТовараТекстHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	РаботаСНоменклатуройКлиент.ИнфТовараТекстHTMLПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка, "Запчасти");
	
КонецПроцедуры
&НаКлиенте
Процедура ИнфТовараЗаголовокHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	РаботаСНоменклатуройКлиент.ИнфТовараЗаголовокHTMLПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка, "Запчасти", "Запчасти");
	
КонецПроцедуры

 &НаКлиенте
Процедура ПоказатьСкрытьИнфОТоваре(Команда)
	
	РаботаСНоменклатуройКлиент.ПоказатьСкрытьИнфОТоваре(ЭтаФорма);
	
КонецПроцедуры
&НаКлиенте
Процедура НастройкаИнфОТоваре(Команда) 
	
	РаботаСНоменклатуройКлиент.НастройкаИнфОТоваре(ЭтаФорма, "Запчасти", "Объект.Запчасти");
	
КонецПроцедуры

// КОММЕНТАРИИ

&НаКлиенте
Процедура КомандаПоказатьКомментарий(Команда)
	ФункцииБизнесПроцессовКлиент.КомандаПоказатьКомментарий(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Если Копирование Тогда
		Элементы.Товары.ТекущиеДанные.Сумма = 0;
	КонецЕсли;
КонецПроцедуры

#Область Подбор

&НаСервере
Функция ПоместитьТоварыВХранилище() 
	
	Возврат ПоместитьВоВременноеХранилище(
					Запчасти.Выгрузить(), 
					УникальныйИдентификатор);
КонецФункции
&НаКлиенте
Процедура ПодборВыполнить(Кнопка = Неопределено)
	
	АдресТоваровВХранилище = ПоместитьТоварыВХранилище();
	ПараметрыПодбора = Новый Структура("АдресТоваровВХранилище", АдресТоваровВХранилище);
	
	ПараметрыПодбора.Вставить("СтруктураКолонокТовары", СтруктураКолонокЗапчасти);
	//ПараметрыПодбора.Вставить("ВидЗапроса", 	"ОстаткиНоменклатуры");
	//ПараметрыПодбора.Вставить("ВидыЗапросов", 	"СписокНоменклатуры");
	ПараметрыПодбора.Вставить("Склад", 			Склад);
	ПараметрыПодбора.Вставить("ТипЦен", 		ТипЦен);
   	ПараметрыПодбора.Вставить("Валюта", 		Валюта);
	
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаПодбора", ПараметрыПодбора, Элементы.Запчасти);
	
КонецПроцедуры
&НаКлиенте
Процедура ЗапчастиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение <> Неопределено Тогда		
		
		ПолучитьТоварыИзХранилища(ВыбранноеЗначение);		// получаем
		УдалитьИзВременногоХранилища(ВыбранноеЗначение); 	// заметаем следы
		Модифицированность = Истина;
		
		ПересчитатьСтрокуТовара(текИндексСтроки, СтруктураКолонокТовары);
				
	КонецЕсли;
	
КонецПроцедуры
&НаСервере
Процедура ПолучитьТоварыИзХранилища(АдресТоваровВХранилище)
	
	Запчасти.Загрузить(ПолучитьИзВременногоХранилища(АдресТоваровВХранилище));
				
КонецПроцедуры

#КонецОбласти



