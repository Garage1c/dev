&НаКлиенте
Перем МассивКомментариев Экспорт;

&НаКлиенте
Перем ОрганизацияПоДокументу, ПартнерПоДокументу, КонтрагентПоДокументу;

// ТИПОВЫЕ

&НаКлиенте
Процедура ПоказатьСкрытьАдресацию(Команда)
	
	// Реверснем
	
	КоманднаяПанель.ПодчиненныеЭлементы.ПоказатьСкрытьАдресацию.Пометка = Не КоманднаяПанель.ПодчиненныеЭлементы.ПоказатьСкрытьАдресацию.Пометка;
	
	// Обновим видимость
	
	ФункцииФормЗадач.ВидимостьАдресации(ЭтаФорма);
	
КонецПроцедуры
&НаСервере
Процедура ПрочитатьРеквизиты()
	
	ФункцииБизнесПроцессов.ЗаполнитьДанные(ЭтаФорма, Объект.БизнесПроцесс, Объект.Ссылка);
	
КонецПроцедуры
&НаСервере
Процедура ВидимостьДоступность()
	
	Элементы.ОсновныеДействия.Доступность = Не ТолькоПросмотр;
	
	Элементы.Товары.ТолькоПросмотр = ТолькоПросмотр;
	Элементы.РеквизитыЗадачи.ТолькоПросмотр = ТолькоПросмотр;
	
	Элементы.Контрагент.ТолькоПросмотр = Партнер.Пустая() ИЛИ ПолучитьКоличествоКонтрагентовПартнера() < 2;
	Элементы.Расчет.Заголовок = ?(Организация.Пустая(), "", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("оплата за %1 расчет", Организация.Расчет));
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	ПрочитатьРеквизиты();

	// заполним по-умолчанию
	
	Если Объект.Ссылка.Пустая() Тогда
		Организация = ОбщиеФункции.НастройкаПользователя("ПоУмолчанию_Организация");
	КонецЕсли;
	
	// комментарии
	ФункцииБизнесПроцессов.ДобавитьРаботуСКомментариями(ЭтаФорма);
	
	Элементы.ИнформацияОтказ.Видимость = НЕ Объект.БизнесПроцесс.ИнструментПринят;
	
КонецПроцедуры
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ФункцииФормЗадач.ПриОткрытии(Объект, ЭтаФорма, Отказ);
	// комментарии
	ФункцииБизнесПроцессовКлиент.ПолучитьМассивКомментариев(ЭтаФорма, Объект.БизнесПроцесс);
	
	СохранитьТекущиеЗначения();
	
	ВидимостьДоступность();

	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПринятьИнструмент = Ложь;
	
	Если ПараметрыЗаписи.Свойство("ПринятьИнструмент") Тогда
		ПринятьИнструмент = ПараметрыЗаписи.ПринятьИнструмент;
	КонецЕсли;
	
	Если НЕ СохранитьИзменения(ПринятьИнструмент) Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ФункцииФормЗадач.ПослеЗаписи(Объект, ЭтаФорма, ПараметрыЗаписи);
	
	ВидимостьДоступность();
	
КонецПроцедуры
&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)

	Ном = 0; Отказаться = Ложь;
	Для Каждого Строка Из Товары Цикл Ном = Ном + 1;
		
		Если Строка.Номенклатура.Пустая() Тогда
			ОбщиеФункции.СообщитьТекст("в строке №" + Ном + " не выбран инструмент", "Товары[" + (Ном - 1) + "].Номенклатура");
			Отказаться = Истина;
		КонецЕсли;
		
		Если Не Строка.Количество Тогда
			ОбщиеФункции.СообщитьТекст("в строке №" + Ном + " не выбрано количество инструмента", "Товары[" + (Ном - 1) + "].Количество");
			Отказаться = Истина;
		КонецЕсли;
		
		Если Строка.Неисправность.Пустая() Тогда
			ОбщиеФункции.СообщитьТекст("в строке №" + Ном + " не указана информация о неисправности", "Товары[" + (Ном - 1) + "].Неисправность");
			Отказаться = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Отказаться Тогда Отказ = Истина; КонецЕсли;
	
КонецПроцедуры



// ДЕЙСТВИЯ

&НаСервере
Функция СохранитьИзменения(ПринятьИнструмент = Ложь)
	
	// Сохраним специфические реквизиты в бизнес процессе

	Процесс 	= Объект.БизнесПроцесс.ПолучитьОбъект();
	Изменился 	= Ложь;
	
	// Повторно отправим инструмент
	
	Если ПринятьИнструмент И НЕ Процесс.ИнструментПринят Тогда
		Процесс.ИнструментПринят = Истина;
		Изменился = Истина;
	КонецЕсли;
		
	// Контактные данные
	
	Если Лев(Процесс.Комментарий, 255) <> Телефон Тогда
		Процесс.Комментарий = Телефон;
		Изменился 		= Истина;
	КонецЕсли;
	
	// Партнер
	
	Если Процесс.Партнер <> Партнер Тогда
		Процесс.Партнер = Партнер;
		Изменился 		= Истина;
	КонецЕсли;
	
	// Контрагент
	
	Если Процесс.Контрагент <> Контрагент Тогда
		Процесс.Контрагент = Контрагент;
		Изменился 		= Истина;
	КонецЕсли;
	
	// Организация
	
	Если Процесс.Организация <> Организация Тогда
		Процесс.Организация = Организация;
		Изменился 		= Истина;
	КонецЕсли;
	
	// Склад ремонта
	
	Если Процесс.Склад <> Склад Тогда
		Процесс.Склад = Склад;
		Изменился 		= Истина;
	КонецЕсли;
	
	// Склад выдачи
	
	Если Процесс.СкладПолучатель <> СкладПолучатель Тогда
		Процесс.СкладПолучатель = СкладПолучатель;
		Изменился 		= Истина;
	КонецЕсли;
	
	// Заменный инструмент
	
	Если Процесс.ЗаменныйИнструмент <> ЗаменныйИнструмент Тогда
		Процесс.ЗаменныйИнструмент = ЗаменныйИнструмент;
		Изменился = Истина;
	КонецЕсли;
	
	// Товары

	Если Процесс.Товары.Количество() = Товары.Количество() Тогда
		
		Инд = -1;
		Для Каждого Строка Из Процесс.Товары Цикл Инд = Инд + 1;
			СтрокаТут = Товары[Инд];
			Если 	Строка.Номенклатура <> СтрокаТут.Номенклатура Или
					Строка.Количество <> СтрокаТут.Количество Тогда
		
					Процесс.Товары.Загрузить(Товары.Выгрузить());
					Изменился = Истина;
					
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		Процесс.Товары.Загрузить(Товары.Выгрузить());
		Изменился = Истина;
	КонецЕсли;
			
	// Запишем процесс
	
	Если Изменился Тогда
		
		Попытка
			Процесс.Записать();
		Исключение
			стрОшибки = ОписаниеОшибки();
			ОбщиеФункции.СообщитьТекст("Ошибка при записи реквизитов бизнес процесса
								|" + стрОшибки);
			Возврат Ложь;
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ПередатьИнструмент(Команда)
		
  	Если Записать(Новый Структура("ВыполнитьЗадачу, ПринятьИнструмент", Истина, Истина)) Тогда
			
		Закрыть();
				
    КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьЗадачуНаСервере() Экспорт
	
	ЗадачаОбъект = РеквизитФормыВЗначение("Объект");
	
	Попытка
		ЗадачаОбъект.ВыполнитьЗадачу();
	Исключение
		стрОшибки = ОписаниеОшибки();
		ОбщиеФункции.СообщитьТекст("Ошибка при выполнении задачи
						|" + стрОшибки);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции
&НаСервере
Функция ОтменитьЗаявку()
	
	Процесс 	= Объект.БизнесПроцесс.ПолучитьОбъект();
	Изменился = Ложь;
	
	Если Процесс.ИнструментПринят Тогда
		
		Процесс.ИнструментПринят = Ложь;
		Изменился = Истина;
		
	КонецЕсли;
	
	Если Изменился Тогда
		
		Попытка
			Процесс.Записать();
		Исключение
			стрОшибки = ОписаниеОшибки();
			ОбщиеФункции.СообщитьТекст("Ошибка при записи реквизитов бизнес процесса
									|" + стрОшибки);
			Возврат Ложь;
		КонецПопытки;
		
	КонецЕсли;

	Возврат Истина;
	
КонецФункции
&НаКлиенте
Процедура Отменить(Команда)
	
	Если Вопрос("Отменить заявку на ремонт?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Если 	ОтменитьЗаявку() И
			ВыполнитьЗадачуНаСервере() Тогда
			
		Модифицированность = Ложь;
		ФункцииФормЗадач.ПослеЗаписи(Объект, ЭтаФорма, Новый Структура);
		Закрыть();
				
	КонецЕсли;

КонецПроцедуры

 
 // ОСНОВНЫЕ РЕКВИЗИТЫ ШАПКИ

&НаСервере
Функция КонтрагентРаботаетСОрганизацией(НовыйКонтрагент = Неопределено)
	Возврат Справочники.Контрагенты.КонтрагентРаботаетСОрганизацией(?(НовыйКонтрагент = Неопределено, Контрагент, НовыйКонтрагент), Организация);
КонецФункции
&НаСервере
Функция ПолучитьКоличествоКонтрагентовПартнера()
	Возврат Справочники.Партнеры.ПолучитьКоличествоКонтрагентовПартнера(Партнер);
КонецФункции
 &НаСервере
Функция НайтиПодходящегоКонтрагента()
	
	Возврат Справочники.Партнеры.НайтиКонтрагентаРаботающегоСОрганизацией(Партнер, Организация);
	
КонецФункции

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
		
	Если НЕ Организация.Пустая() И НЕ ДиалогиСПользователем.ПроверитьНаСоответствиеОсновнойОрганизации(
				Контрагент, 
				Организация, 
				?(КонтрагентРаботаетСОрганизацией() = Неопределено, Неопределено, Истина)) Тогда
		
		Организация = ОрганизацияПоДокументу;
	
	КонецЕсли;
	
	ВидимостьДоступность();	
	СохранитьТекущиеЗначения();	

КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	
	Если Партнер.Пустая() Тогда
		
		Контрагент = Неопределено;
	Иначе
		
		НовыйКонтрагент = НайтиПодходящегоКонтрагента();

		Если НовыйКонтрагент = Неопределено Тогда
			
			Сообщить("Партнер не работает с """ + Организация + """",СтатусСообщения.Внимание);
			Партнер = ПартнерПоДокументу;
			
		Иначе
	    	Контрагент = НовыйКонтрагент;
			ВидимостьДоступность();		
		КонецЕсли;
	КонецЕсли;

	СохранитьТекущиеЗначения();	
	
КонецПроцедуры
&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	Если НЕ Контрагент.Пустая() И НЕ ДиалогиСПользователем.ПроверитьНаСоответствиеОсновнойОрганизации(
				Контрагент, 
				Организация, 
				?(КонтрагентРаботаетСОрганизацией() = Неопределено, Неопределено, Истина)) Тогда
			
		Контрагент = КонтрагентПоДокументу;
			
	КонецЕсли;
 	
	СохранитьТекущиеЗначения();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьТекущиеЗначения()
	
	ОрганизацияПоДокументу = Организация;
	ПартнерПоДокументу = Партнер;
	КонтрагентПоДокументу = Контрагент;
		
КонецПроцедуры

// ОБРАБОТКИ ТАБЛИЧНОЙ ЧАСТИ

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	текДанные = Элементы.Товары.ТекущиеДанные;
	Если Не текДанные.Количество Тогда
		
		текДанные.Количество = 1;
		
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ТоварыНеисправностьОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ФункцииФормДокументов.ОкончанияВводаТекстаНеисправности(ЭтаФорма, Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

// ПЕЧАТЬ

&НаСервере
Процедура ПечататьБланкНаСервере(ТабДок)
	
	БизнесПроцессы.РемонтИнструмента.ПечатьБланкЗаявки(ТабДок, Объект.БизнесПроцесс, Новый Структура("Партнер", Партнер));
	
КонецПроцедуры
&НаКлиенте
Процедура ПечататьБланк(Команда)
	
	Если Модифицированность Тогда
		
		Отказ = Ложь;
		Отказ = НЕ СохранитьИзменения();
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		Попытка
			Записать();
		Исключение
			Возврат;
		КонецПопытки;
		
	КонецЕсли;
	
	ТабДок = Новый ТабличныйДокумент;
	ПечататьБланкНаСервере(ТабДок);

	ФункцииФормДокументов.УстановитьНастройкиТабличногоДокумента(ТабДок);
	
	ТабДок.АвтоМасштаб = Истина;
	
	ТабДок.Показать();
	
КонецПроцедуры

// КОММЕНТАРИИ

&НаКлиенте
Процедура КомандаПоказатьКомментарий(Команда)
	ФункцииБизнесПроцессовКлиент.КомандаПоказатьКомментарий(ЭтаФорма);
КонецПроцедуры





