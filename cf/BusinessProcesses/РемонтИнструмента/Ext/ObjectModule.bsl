
Функция ПредставлениеЗадачи(Задача)
	
	Заказ = Задача.БизнесПроцесс.ЗаказНаряд;
    
	НомерЗаказа   = СокрЛП(Заказ.Номер);
	Пока Лев(НомерЗаказа, 1)="0" Цикл   			  // удаление ведущих нулей
		НомерЗаказа = Сред(НомерЗаказа, 2);
	КонецЦикла;

	Возврат Задача.Наименование + " № "  + НомерЗаказа + " (" + Формат(Заказ.Сумма, "Ч15.2,") + ") " + ?(ТипЗнч(Заказ) = Тип("ДокументСсылка.ИнтернетЗаказПокупателя"), Заказ.ПользовательИнтернет, Заказ.Контрагент);
	
КонецФункции  
Процедура ПередЗаписью(Отказ)
	
	КоличествоКартинок = ЭтотОбъект.Картинки.Количество();
	
	// Если есть хоть одна гарантия значит гарантия
	
	ЕстьГарантия = Товары.Найти(Истина, "Гарантия") <> Неопределено;
	
КонецПроцедуры

// ДОПОЛНИТЕЛЬНО

Функция СообщитьМенеджеруОЗадаче(Задача)
	
	// Если все нормально тогда вернет текст для оповещения пользователю
	// если нет тогда пустую строку
	
	ТемаПисьма 	= "Контроль оплаты за ремонт инструмента";
	
	ТипТекста 	= Перечисления.ТипыТекстовЭлектронныхПисем.HTML;
			
	ТекстПисьма = "Вам назначена задача """ + Строка(Задача) + """
				|Необходимо проконтролировать оплату клиента """ + Строка(Контрагент) + """ по """ + Строка(ЗаказНаряд) + """" ;
				
	НачатьТранзакцию();
			
	// Создадим ссылку на письмо
			
	Письмо = Документы.Письмо.СоздатьДокумент();
	Письмо.Дата = ТекущаяДата();
			
	Попытка
		Письмо.Записать(); 
	Исключение
		ОбщиеФункции.СообщитьТекст(ОбщегоНазначенияКлиентСервер.ПолучитьПредставлениеОписанияОшибки(ИнформацияОбОшибке()));
		ОтменитьТранзакцию();
		Возврат "";
	КонецПопытки;
						
	// Отправим письмо
	Отказ = Ложь;		
	Письмо = ОбщиеФункции.ОповеститьПоПочте(Контрагент.ОсновнойМенеджер.Почта, ТемаПисьма, ТекстПисьма, , ТипТекста, Письмо);
			
	Если Отказ Тогда
		ОтменитьТранзакцию();
		Возврат "";
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	Возврат "Было отправлено письмо менеджеру с формой счета для котроля оплаты ремонта";
	
КонецФункции
Функция СоздатьИПровестиРеализацию()

	Если НЕ ЗаказНаряд.Проведен ИЛИ ЗаказНаряд.Сумма = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	// пока будем проверять, может уже есть реализация для этого З-Н
	
	Запрос = Новый Запрос("ВЫБРАТЬ Ссылка ИЗ Документ.РеализацияТоваров ГДЕ Заказ = &ЗаказНаряд");
	Запрос.УстановитьПараметр("ЗаказНаряд", ЗаказНаряд);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		РеализацияТоваров = Выборка.Ссылка;
		Возврат Истина;
	КонецЕсли;
	
	Реализация = Документы.РеализацияТоваров.СоздатьДокумент();
	Реализация.Дата	= ТекущаяДата();
	
	Реализация.Заполнить(ЗаказНаряд);
	
	Попытка
		Реализация.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		стрОшибки = ОписаниеОшибки();
		ОбщиеФункции.СообщитьТекст("Ошибка при записи реализации товаров
								|" + стрОшибки);
		Возврат Ложь;
	КонецПопытки;
	
	// Заполним оплаты
	
	Реализация.ЗаполнитьДокументыОплаты(Реализация.Ссылка);
	
	Попытка
		Реализация.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		стрОшибки = ОписаниеОшибки();
		ОбщиеФункции.СообщитьТекст("Ошибка при проведении реализации товаров
								|" + стрОшибки);
		Возврат Ложь;
	КонецПопытки;
	
	РеализацияТоваров = Реализация.Ссылка;
	
	Возврат Истина;
		
КонецФункции
Функция ПоменятьОрганизациюВЗаказНаряде() Экспорт
	
	Если ЗаказНаряд.Пустая() ИЛИ Организация = ЗаказНаряд.Организация Тогда
		Возврат Истина;
	КонецЕсли;
		
	ЗаказОбъект = ЗаказНаряд.ПолучитьОбъект();
	ЗаказОбъект.Организация = Организация;

	Таблица = ЗаказОбъект.Товары;
	
	Если Организация.УчитыватьНДС <> ЗаказНаряд.УчитыватьНДС Тогда
	
		СтруктураКолонокТовары = Новый Структура("ЕстьКоличество, ЕстьЦена, ЕстьСуммаБезСкидки, ЕстьСумма, ЕстьСуммаАвтоматическойСкидки, ЕстьСуммаРучнойСкидки, ЕстьСтавкаНДС, ЕстьСуммаНДС, ЕстьВсего, УчитыватьНДС, стУчитыватьНДС",
													Истина, Ложь, Ложь, Истина, Истина, Ложь, Истина, Истина, Ложь, Организация.УчитыватьНДС, ЗаказНаряд.УчитыватьНДС);
		ФункцииФормДокументов.ПересчитатьСуммыТабличныхЧастей(Таблица, СтруктураКолонокТовары);
		
	КонецЕсли;
				
	Попытка
		ЗаказОбъект.Записать(?(ЗаказОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
	Исключение
		стрОшибки = ОписаниеОшибки();
		ОбщиеФункции.СообщитьТекст("Ошибка при записи заказ-наряда
								|" + стрОшибки);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции
Функция ПолучитьПоследнююЗадачу(ТочкаМаршрута = Неопределено)
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	|	Ссылка
	|ИЗ
	|	Задача.ЗадачаПользователю
	|ГДЕ
	|	БизнесПроцесс = &БизнесПроцесс И " + ?(ТочкаМаршрута = Неопределено, "" , "
	|	ТочкаМаршрута = &ТочкаМаршрута И ") + "
	|	Выполнена И
	|	Не ПометкаУдаления 
	|УПОРЯДОЧИТЬ ПО Дата Убыв");
	
	Запрос.УстановитьПараметр("БизнесПроцесс", Ссылка);
	Запрос.УстановитьПараметр("ТочкаМаршрута", ТочкаМаршрута);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда	Возврат Выборка.Ссылка; КонецЕсли;
		
	Возврат Неопределено;
	
КонецФункции


// Процедура РемонтПередВыполнением(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
//	
//	//НеПроверятьПроведениеЗаказа = Ложь;
//	//ДополнительныеСвойства.Свойство("НеПроверятьПроведениеЗаказа", НеПроверятьПроведениеЗаказа);
//	
//	Если ЗаказНаряд.ПометкаУдаления Тогда
//		
//		Отказ = Истина;
//		ОбщиеФункции.СообщитьТекст("Заказ наряд помечен на удаление");
//		
//	ИначеЕсли //Не НеПроверятьПроведениеЗаказа И 
//		не ЗаказНаряд.Проведен Тогда
//		
//		Отказ = Истина;
//		ОбщиеФункции.СообщитьТекст("Заказ наряд не проведен");
//		
//	КонецЕсли;
//		
//КонецПроцедуры


Процедура ПроизвестиДеффектовкуПередВыполнением(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	

	//Если ЗаказНаряд.Пустая() И ИнструментПринят Тогда
	//	
	//	Отказ = Истина;
	//	ОбщиеФункции.СообщитьТекст("Не создан заказ наряд");
		
	Если ЗаказНаряд.ПометкаУдаления Тогда
		
		Отказ = Истина;
		ОбщиеФункции.СообщитьТекст("Заказ наряд помечен на удаление");
		
	ИначеЕсли НЕ ЗаказНаряд.Пустая() Тогда
		
		// Проверим что все в заказ наряде заполненно и не будет ругатся при проведении
		
		стрОшибки = "";
		Если Не ФункцииФормДокументов.ПроверитьДокументНаКорректностьЗаполнения(ЗаказНаряд, стрОшибки) Тогда
			
			Отказ = Истина;
			ОбщиеФункции.СообщитьТекст("Ошибка в заполнении заказ наряда №" + ЗаказНаряд.Номер  + " от " + Формат(ЗаказНаряд.Дата, "ДЛФ=DD") + "
				|" + стрОшибки);
			
		КонецЕсли;
		
	КонецЕсли;
			
КонецПроцедуры

Процедура ПередатьКлиентуПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	
	//Если НЕ ПоменятьОрганизациюВЗаказНаряде() Тогда
	//	Отказ = Истина;
	//КонецЕсли;  	
	
	// отгружаем клиенту
	
	Если Задача.Склад = СкладПолучатель Тогда
		СоздатьИПровестиРеализацию();
	КонецЕсли;
	
КонецПроцедуры
 

// ОБРАБОТКИ

Процедура ЗавершитьРемонтОбработка(ТочкаМаршрутаБизнесПроцесса)

	СоздатьИПровестиРеализацию();
	
КонецПроцедуры

// НАЗНАЧЕНИЕ СКЛАДОВ
Процедура ОформитьЗаявкуПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	
	Для Каждого Задача Из ФормируемыеЗадачи Цикл Задача.Склад = СкладПолучатель КонецЦикла;
	Если Не Заказы.УстановитьСостояниеЗаказа(Ссылка, Перечисления.СостоянияЗаказа.ПринятьИнструмент) Тогда Отказ = Истина КонецЕсли;
	
КонецПроцедуры

Процедура ПринятьИнструментПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	
	Для Каждого Задача Из ФормируемыеЗадачи Цикл Задача.Склад = Склад КонецЦикла;
	Если Не Заказы.УстановитьСостояниеЗаказа(Ссылка, Перечисления.СостоянияЗаказа.ОформитьЗаявку) Тогда Отказ = Истина КонецЕсли;

КонецПроцедуры
Процедура СогласоватьГарантиюПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	
	Если Не Заказы.УстановитьСостояниеЗаказа(Ссылка, Перечисления.СостоянияЗаказа.СогласоватьГарантию) Тогда Отказ = Истина КонецЕсли;
	
	//Для Каждого Задача Из ФормируемыеЗадачи Цикл
	//	
	//	Задача.Склад = Склад;
	//	
	//КонецЦикла;

КонецПроцедуры

Процедура ПроизвестиДефектовкуПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	
	Для Каждого Задача Из ФормируемыеЗадачи Цикл Задача.Склад = Склад КонецЦикла;
	Если Не Заказы.УстановитьСостояниеЗаказа(Ссылка, Перечисления.СостоянияЗаказа.ПроизвестиДефектовку) Тогда Отказ = Истина КонецЕсли;

КонецПроцедуры

Процедура СогласоватьСКлиентомПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	
	Для Каждого Задача Из ФормируемыеЗадачи Цикл Задача.Склад = Склад КонецЦикла;
	Если Не Заказы.УстановитьСостояниеЗаказа(Ссылка, Перечисления.СостоянияЗаказа.СогласоватьСКлиентом) Тогда Отказ = Истина КонецЕсли;
	
КонецПроцедуры
Процедура ПредупредитьКлиентаПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	
	Для Каждого Задача Из ФормируемыеЗадачи Цикл Задача.Склад = Склад КонецЦикла;
	Если Не Заказы.УстановитьСостояниеЗаказа(Ссылка, Перечисления.СостоянияЗаказа.ПредупредитьКлиента) Тогда Отказ = Истина КонецЕсли;
	
КонецПроцедуры

Процедура ОжиданиеОплатыПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	
	Для Каждого Задача Из ФормируемыеЗадачи Цикл
		
		Задача.Пользователь = Менеджер;
		
		Сообщение = СообщитьМенеджеруОЗадаче(Задача);
		Если Не ПустаяСтрока(Сообщение) Тогда
				
				//ПоказатьОповещениеПользователя("Автоматическая рассылка",, Сообщение, БиблиотекаКартинок.Почта);
				
		КонецЕсли;
  					
	КонецЦикла;
	
	Если Не Заказы.УстановитьСостояниеЗаказа(Ссылка, Перечисления.СостоянияЗаказа.ОжиданиеОплаты) Тогда Отказ = Истина КонецЕсли;

КонецПроцедуры
Процедура ПередатьКлиентуПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	
	Для Каждого Задача Из ФормируемыеЗадачи Цикл
		Если ПолучитьПоследнююЗадачу(ТочкаМаршрутаБизнесПроцесса) = Неопределено Тогда
			Задача.Склад = Склад;
		Иначе
			Задача.Склад = СкладПолучатель;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не Заказы.УстановитьСостояниеЗаказа(Ссылка, Перечисления.СостоянияЗаказа.ПередатьКлиенту) Тогда Отказ = Истина КонецЕсли;
	
КонецПроцедуры
Процедура ОжиданиеОплаты1ПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	
	Для Каждого Задача Из ФормируемыеЗадачи Цикл Задача.Склад = СкладПолучатель КонецЦикла;
	Если Не Заказы.УстановитьСостояниеЗаказа(Ссылка, Перечисления.СостоянияЗаказа.ОжиданиеОплаты) Тогда Отказ = Истина КонецЕсли;

КонецПроцедуры


// УСЛОВИЯ

Процедура РемонтОтмененПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	Результат = НЕ ИнструментПринят;
КонецПроцедуры
Процедура УдаленныйСкладПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	Результат = Склад <> СкладПолучатель;
КонецПроцедуры

Процедура ИнструментПринятПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = ИнструментПринят;
	
КонецПроцедуры
Процедура ЕстьГарантийныеИнструментыПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)	
	
	Результат = Булево(Товары.НайтиСтроки(Новый Структура("Гарантия", Истина)).Количество());
	
КонецПроцедуры
Процедура ГарантияСогласованаПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	Результат = ГарантияСогласована;

КонецПроцедуры

Процедура СогласованиеСКлиентомОбработкаВыбораВарианта(ТочкаВыбораВарианта, Результат)
	
	Ответ 		= 0;
	Кол 		= СогласованияСКлиентом.Количество();
	
	Если Кол Тогда
		
		Ответ = СогласованияСКлиентом[Кол - 1].ВариантОтвета;
		
	КонецЕсли;
	
	Результат = ТочкаВыбораВарианта.Варианты[Ответ];
	
КонецПроцедуры

Процедура ТребуетсяОплатаПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	// 	Если требуется оплата (это не полная гарантия и заказ-наряд не нулевой),
	//	а также известен основной менеджер партнера, то именно он будет контролировать оплату
	
	Результат = ЗаказНаряд.Проведен И ЗаказНаряд.Сумма <> 0 И 
				НЕ Менеджер.Пустая();
КонецПроцедуры
Процедура УдаленныйСкладВыдачиПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	Результат = ПолучитьПоследнююЗадачу(БизнесПроцессы.РемонтИнструмента.ТочкиМаршрута.ПередатьКлиенту).Склад <> СкладПолучатель;
КонецПроцедуры
Процедура ПроверитьОплатуПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	// Стартуем ОжиданиеОплаты1 для случая, когда партнеру не назначен основной менеджер.
	// Поскольку до конца не известно какой именно склад будет контроливарот оплату, мы не можем использовать параллельную задачу ОжиданиеОплаты.
	
	Результат = ПроверитьОплату; 

КонецПроцедуры

Процедура Завершение2ПриЗавершении(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	Если Не Заказы.УстановитьСостояниеЗаказа(Ссылка, Перечисления.СостоянияЗаказа.Отменен) Тогда Отказ = Истина КонецЕсли;
	
КонецПроцедуры
Процедура ЗавершениеПриЗавершении(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	Если Не Заказы.УстановитьСостояниеЗаказа(Ссылка, Перечисления.СостоянияЗаказа.Отгружен) Тогда Отказ = Истина КонецЕсли;
	
КонецПроцедуры

Процедура ОтказКлиентаПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	Результат = ОтказКлиента;
КонецПроцедуры

Процедура ОтказКлиента2ПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	Результат = ОтказКлиента;
КонецПроцедуры































