//&НаКлиенте
//Перем СтруктураКолонокТовары;
&НаКлиенте
Перем МассивКомментариев Экспорт;

&НаКлиенте
Перем мВремяОткрытия;

&НаСервере
Функция РабочииТовары_ст()
	
	Возврат КонвертацияТипов.ПолучитьТаблицуИзНайденныхСтрокТаблицыЗначений(Товары.Выгрузить(), Новый Структура("Отгружено", Ложь));
	
КонецФункции

&НаСервере
Функция РабочииТовары(ПроверятьСобраные = Истина, СтруктураКолонокТовары, ИгнорироватьБезКоличества = Ложь, ФильтрСклад = Неопределено, БезДублей=Истина)
	
	// Параметры:
	// Если указан ФильтрСклад, тогда будут возвращены только товары для указанного склада
	//
	
	Если СпособРазмещенияБезЗаказа Тогда
		
		// Разобъем строки подошьем вычтем
		
		ТзТов = Товары.Выгрузить().СкопироватьКолонки();
		
	 //#ВозможностьДублейСтрок
	  ТоварыПром = Товары.Выгрузить();
	  Если БезДублей Тогда
		  ТоварыПром.Свернуть("Номенклатура, НоменклатураУчет, Цена, Упаковка,Размещение,ПроцентРучнойСкидки,СтавкаНДС,ПроцентАвтоматическойСкидки,Отгружено,Собрано,Акция,ВариантРасчета","Количество,Сумма,СуммаРучнойСкидки,СуммаНДС,СуммаАвтоматическойСкидки,Всего,СуммаБезСкидки,КоличествоОтгружено,КоличествоСобрано,КоличествоМинимум");
	  КонецЕсли; 
		
		Для Каждого Строка Из ТоварыПром Цикл 
			Если Строка.Количество Тогда
				
	 			//#ВозможностьДублейСтрок
				//НеНаЭтомСкладе 	= ?(ФильтрСклад = Неопределено, 0, Строка.Количество - КонвертацияТипов.ПолучитьСуммуКолонкиПоУсловию(РазмещениеТоваров, "Количество", Новый Структура("Номенклатура, Размещение", Строка.Номенклатура, ФильтрСклад)));
				Если БезДублей Тогда
					КолВо = Строка.Количество;
				Иначе
					КолВо = ДиалогиСПользователем.ПолучитьКоличествоСДублями(Товары,Строка.Номенклатура);
				КонецЕсли; 
				НеНаЭтомСкладе  = ?(ФильтрСклад = Неопределено, 0, КолВо - КонвертацияТипов.ПолучитьСуммуКолонкиПоУсловию(РазмещениеТоваров, "Количество", Новый Структура("Номенклатура, Размещение", Строка.Номенклатура, ФильтрСклад)));
				
				
				Отнимаем 		= Строка.КоличествоОтгружено + Строка.КоличествоСобрано * ПроверятьСобраные + НеНаЭтомСкладе;
				
				Если Не ИгнорироватьБезКоличества Или Строка.Количество > Отнимаем Тогда
					Если Отнимаем Тогда
						
						Если ФильтрСклад <> Неопределено И Строка.Количество - Отнимаем Тогда
						
							// Разобъем таблицу и подсчитаем суммы
							
							РазбТЗ = ТзТов.СкопироватьКолонки();
							СтруктураСвертки = Новый Структура("Сумма, СуммаРучнойСкидки, СуммаНДС, СуммаАвтоматическойСкидки, СуммаБезСкидки, Всего");
							ЗаполнитьЗначенияСвойств(СтруктураСвертки, Строка);
							
							Строка1 = РазбТЗ.Добавить(); ЗаполнитьЗначенияСвойств(Строка1, Строка);
							Строка1.Количество = Отнимаем;
							ФункцииФормДокументов.РассчитатьСуммыСтрокиОтЦены(Строка1, СтруктураКолонокТовары, Ложь);
							
							Строка2 = РазбТЗ.Добавить(); ЗаполнитьЗначенияСвойств(Строка2, Строка);
							Строка2.Количество = Строка.Количество - Отнимаем;
							ФункцииФормДокументов.РассчитатьСуммыСтрокиОтЦены(Строка2, СтруктураКолонокТовары, Ложь);
							
							КонвертацияТипов.РаздатьКопейкиНуждающимся_Колонкам(РазбТЗ, СтруктураСвертки);
							
							// Теперь в последнем меньше не копеку а в верхнем больше, возмем нижний
							
							ЗаполнитьЗначенияСвойств(ТзТов.Добавить(), Строка2); КонецЕсли;
					Иначе
						ЗаполнитьЗначенияСвойств(ТзТов.Добавить(), Строка); КонецЕсли; КонецЕсли; КонецЕсли; КонецЦикла;
		Возврат ТзТов;
	Иначе
		Возврат КонвертацияТипов.ПолучитьТаблицуИзНайденныхСтрокТаблицыЗначений(
				Товары.Выгрузить(), 
					?(ПроверятьСобраные, 
						Новый Структура("Отгружено, Собрано", Ложь, Ложь),
						Новый Структура("Отгружено", Ложь))); КонецЕсли;
	
КонецФункции

&НаСервере
Процедура СклеитьТаблицыТоваров(ДобТаблица)
	
	//КонвертацияТипов.УдалитьСтрокиТЗ(Товары, Новый Структура("Отгружено", Ложь));
	//КонвертацияТипов.ДобавитьТаблицуКДругойТаблице(Товары, ДобТаблица, Истина);	
	
	Если СпособРазмещенияБезЗаказа Тогда // по новому
		
		// Удалим не собранные и не отгруженные
		
		КолСтрок = Товары.Количество();
		Для Ном = 1 По КолСтрок Цикл; Строка = Товары[КолСтрок - Ном]; 
			Если Строка.КоличествоОтгружено Или Строка.КоличествоСобрано Тогда
				Строка.Количество = Строка.КоличествоОтгружено + Строка.КоличествоСобрано;
			Иначе
				Товары.Удалить(Строка);КонецЕсли; КонецЦикла;
		
		// Добавим вновь поступившее количество
		
		Для Каждого Строка Из ДобТаблица Цикл
			Если Строка.Количество Тогда
				
				Строки = Товары.НайтиСтроки(Новый Структура("Номенклатура", Строка.Номенклатура));
				Если Строки.Количество() Тогда   // Запомним количество и вернем
					НовСтрока = Строки[0];
					текКоличество = НовСтрока.Количество;
					ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
					НовСтрока.Количество = текКоличество;
					
				Иначе
					НовСтрока = Товары.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтрока, Строка); 
					НовСтрока.Количество = 0;	КонецЕсли;
				
				НовСтрока.Количество = НовСтрока.Количество + Строка.Количество;
				НовСтрока.Размещение = ДиалогиСПользователем.ПолучитьПредставлениеРазмещения(НовСтрока.Количество, РазмещениеТоваров.НайтиСтроки(Новый Структура("Номенклатура", НовСтрока.Номенклатура)),,НовСтрока.КоличествоОтгружено);
				
				// Рассчитаем сумму
				
				Если СтруктураКолонокТовары <> Неопределено Тогда
					ФункцииФормДокументов.РассчитатьСуммыСтрокиОтЦены(Строка, СтруктураКолонокТовары); КонецЕсли; КонецЕсли; КонецЦикла;
	
	Иначе // по старому
		
		КонвертацияТипов.УдалитьСтрокиТЗ(Товары, Новый Структура("Отгружено, Собрано", Ложь, Ложь));
		КонвертацияТипов.ДобавитьТаблицуКДругойТаблице(Товары, ДобТаблица);	 КонецЕсли;
	
КонецПроцедуры

#Область Обновление

&НаСервере
Процедура УстановитьЗаголовок()
	
	Заголовок = ФункцииБизнесПроцессов.ПолучитьЗаголовокБП(Объект.Ссылка);
	
КонецПроцедуры
&НаСервере
Функция ТребуетПеремещения()
	
	//Возврат Товары.НайтиСтроки(Новый Структура("Размещение", Справочники.Склады.ПустаяСсылка())).Количество() +
	//		Товары.НайтиСтроки(Новый Структура("Размещение", Склад)).Количество() <> Товары.Количество();    
			
	Если Объект.Заказ.Пустая() Или СпособРазмещенияБезЗаказа Тогда
		
		Возврат  РазмещениеТоваров.Количество() <> РазмещениеТоваров.НайтиСтроки(Новый Структура("Размещение", Склад)).Количество();
		
	Иначе
		Возврат Товары.НайтиСтроки(Новый Структура("Размещение", Справочники.Склады.ПустаяСсылка())).Количество() +
				Товары.НайтиСтроки(Новый Структура("Размещение", Склад)).Количество() <> Товары.Количество(); КонецЕсли;

	
КонецФункции
&НаСервере
Функция РазрешенаБыстраяПродажа()
	
	Возврат 	Склад.РазрешенаБыстраяПродажа И
				
				КэшируемыеФункции.ПользователюРазрешенаБыстраяПродажа();
	
КонецФункции

&НаСервере
Процедура УправлениеВидимостьюДоступностью()
	
	СостояниеЗаказа = Заказы.ПолучитьСостояниеЗаказа(Объект.Заказ);
	
	Элементы.ДекорацияСтатусЗаказа.Заголовок = Заказы.ПолучитьСостояниеЗаказаСтрокой(Объект.Заказ);
	ВсегоПоЗаказу = Товары.Итог("Всего"); // + Объект.Заказ.СуммаДоставки;
	
	ТребуетПеремещения = ТребуетПеремещения();
	
	// Определим где стоит 
	
	ВПроцессе	 = Объект.Стартован И Не Объект.Завершен;
	
	Отбор = Новый Структура("Заказ",Объект.Заказ);
	БПОтменен = Ложь;
	ЗаписьСостоянияБП = РегистрыСведений.СостоянияЗаказов.ПолучитьПоследнее(ТекущаяДата(),Отбор);
	
Если ЗаписьСостоянияБП.Состояние = Перечисления.СостоянияЗаказа.Отменен Тогда
	БПОтменен = Истина;	
КонецЕсли;

//*************Начало изменения 

    БыстраяПродажа = Ложь;
	МожетБыстроПродавать 	= РазрешенаБыстраяПродажа();
		//ЕстьВТекСкладе 			= Товары.НайтиСтроки(Новый Структура("Отгружено, Размещение", Ложь, Склад)).Количество();
	ЕстьВТекСкладе = ?(СпособРазмещенияБезЗаказа, 
				РазмещениеТоваров.НайтиСтроки(Новый Структура("Размещение, КоличествоМинимум", Склад, 0)).Количество(),
				Товары.НайтиСтроки(Новый Структура("Отгружено, Размещение", Ложь, Склад)).Количество());
	ВозможнаБыстраяПродажа          = ?(МожетБыстроПродавать И ЕстьВТекСкладе,Истина, Ложь);
	
    текРоли = ПараметрыСеанса.ТекущиеРоли;
	Если текРоли.Найти("Продавец") = Неопределено Тогда
		 РОльПродавецДОступна = ИСтина;
	 ИНаче
		 РОльПродавецДОступна = ЛОжь;
    КонецЕсли;
///****  конец изменения 

	СсылкаЗадачи = ФункцииБизнесПроцессов.ТекущаяЗадача(Объект.Ссылка);
	
	Если СсылкаЗадачи <> Неопределено Тогда
 		ЕстьДоступ 		= ВПроцессе И ФункцииБизнесПроцессов.РазрешенаЗадачаКВыполнению(СсылкаЗадачи);
		
		СтоитНаОжидОтвета 	= ВПроцессе И СсылкаЗадачи.ТочкаМаршрута = БизнесПроцессы.ИнтернетЗаявка.ТочкиМаршрута.ОжиданиеОтвета;
		СтоитНаОбработать 	= ВПроцессе И СсылкаЗадачи.ТочкаМаршрута = БизнесПроцессы.ИнтернетЗаявка.ТочкиМаршрута.ОбработатьЗаказ;
		СтоитНаПодтвердить 	= ВПроцессе И СсылкаЗадачи.ТочкаМаршрута = БизнесПроцессы.ИнтернетЗаявка.ТочкиМаршрута.ПодтверждениеЗаказа;
		СтоитНаОплатить 	= ВПроцессе И СсылкаЗадачи.ТочкаМаршрута = БизнесПроцессы.ИнтернетЗаявка.ТочкиМаршрута.ОжиданиеОплаты;
		
		МожноРедактировать = ЕстьДоступ И (СтоитНаОжидОтвета Или СтоитНаОбработать Или СтоитНаПодтвердить Или СтоитНаОплатить);  
			
		СтоитНаОжидОтветаИПроведен = СтоитНаОжидОтвета И Объект.Заказ.Проведен;
		
		МожетНазначитьЗадачуДругому  = СтоитНаОбработать И МожноРедактировать;
		ВозможнаБыстраяПродажа       = ВозможнаБыстраяПродажа И СтоитНаОбработать И Объект.Заказ.Проведен и ВПроцессе и  (ЕстьДоступ или РОльПродавецДОступна);  
		КнопкаЗаказОбработанДоступна = СтоитНаОбработать  И Объект.Заказ.Проведен и ЕстьДоступ и ЗаписьСостоянияБП.Состояние = Перечисления.СостоянияЗаказа.Открыт;
		КнопкаОткрытьЗаказДоступна   = СтоитНаОжидОтвета и ЕстьДоступ;
	Иначе
		
		ЕстьДоступ 				 	 = Ложь;
		СтоитНаОжидОтвета		 	 = Ложь;
		СтоитНаОбработать		 	 = Ложь;
		СтоитНаПодтвердить		 	 = Ложь;
		СтоитНаОплатить				 = Ложь;
		МожноРедактировать			 = Истина;
		СтоитНаОжидОтветаИПроведен	 = Ложь;
		МожетНазначитьЗадачуДругому  = Ложь; 
		ВозможнаБыстраяПродажа 	     = Ложь;  
		КнопкаЗаказОбработанДоступна = Ложь;  
		КнопкаОткрытьЗаказДоступна   = Ложь;
	КонецЕсли;
	
	Элементы.КнопкаЗаписать.Видимость 				= МожноРедактировать и (НЕ СтоитНаОжидОтвета);
	Элементы.КнопкаВСборку.Видимость 				= ЕстьДоступ И (СтоитНаОбработать Или СтоитНаПодтвердить) И Объект.Заказ.Проведен;
	Элементы.КнопкаОтказ.Видимость 					= МожноРедактировать;
	Элементы.КнопкаОжидатьОплату.Видимость 			= ЕстьДоступ И СтоитНаОбработать  И НЕ Склад.ПередачаТовараМВЗ И Объект.Заказ.Проведен;
	Элементы.КнопкаОжидатьПодтверждения.Видимость 	= ЕстьДоступ И СтоитНаОбработать  И НЕ Склад.ПередачаТовараМВЗ И Объект.Заказ.Проведен;
	Элементы.КнопкаПодтвердитьОплату.Видимость 		= ЕстьДоступ И СтоитНаОплатить;
	Элементы.КнопкаИзменитьАдресацию.Видимость		= МожетНазначитьЗадачуДругому;
	
	Элементы.СтраницаДополнительно.ТолькоПросмотр = Не МожноРедактировать;
	Элементы.Контрагент.ТолькоПросмотр 	= Не МожноРедактировать;
	Элементы.Склад.ТолькоПросмотр 		= Не МожноРедактировать;
	Элементы.Организация.ТолькоПросмотр = Не МожноРедактировать;
	Элементы.ТипЦен.ТолькоПросмотр 		= Не МожноРедактировать;
	Элементы.Товары.ТолькоПросмотр 		= Не МожноРедактировать;
	Элементы.КнопкаПодбор.Видимость 	= МожноРедактировать;
	Элементы.КнопкаРазместить.Видимость = МожноРедактировать;
	
	Элементы.ГруппаСобраноОтгружено.Видимость 	= СпособРазмещенияБезЗаказа;
	
	Если 	СостояниеЗаказа = Перечисления.СостоянияЗаказа.ВОчередиНаСклад ИЛИ 
			СостояниеЗаказа = Перечисления.СостоянияЗаказа.ВОчередиНаСкладПовторно Тогда
		Элементы.КнопкаОтобратьЗаказУЛогиста.Видимость 	= Заказы.ПользователюРазрешеноРаботатьСЗаказом(Объект.Заказ);
	Иначе
		Элементы.КнопкаОтобратьЗаказУЛогиста.Видимость 	= Ложь КонецЕсли;
	
	ЕстьТоварПодЗаказ = ЕстьТоварПодЗаказ();
	Элементы.ЗаписатьИЗакрытьЗакупитьНедостающие.Видимость = ЕстьТоварПодЗаказ И НЕ ЗакупитьНедостающее и (НЕ СтоитНаОжидОтвета);
	Элементы.ГруппаНедостающиеПозицииВЗакупке.Видимость    = ЗакупитьНедостающее;
	Элементы.ГруппаВариантОтгрузки.Видимость = ПередачаТовара;
	
	Элементы.БыстроПродатьСвое.Видимость     = ТребуетПеремещения и ВозможнаБыстраяПродажа; //настя
	Элементы.БыстроПродать.Видимость         = (НЕ ТребуетПеремещения) и ВозможнаБыстраяПродажа;   //настя
	
	Элементы.КнопкаСоздатьПартнера.Видимость = МожноРедактировать И Контрагент.Пустая();
	Элементы.КнопкаВосстановить.Видимость    = БПОтменен;
	Элементы.ЗаказОбработан.Видимость 		 = КнопкаЗаказОбработанДоступна;
    Элементы.ОткрытьЗаказ.Видимость          = КнопкаОткрытьЗаказДоступна;
    	
	Если Объект.Заказ.СайтИсточник = Перечисления.Сайты.licota Тогда
	Элементы.ОтправитьСсылку.Видимость       = Ложь КонецЕсли;

	
КонецПроцедуры
&НаСервереБезКонтекста
Функция ПолучитьДолгПартнера(СсылкаКонтрагент)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ СуммаУпрОстаток СуммаДолга ИЗ РегистрНакопления.Взаиморасчеты.Остатки(, Контрагент = &Контрагент)");

	Запрос.УстановитьПараметр("Контрагент", СсылкаКонтрагент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СуммаДолга;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции
&НаСервере
Процедура ПрочитатьРеквизиты()
	
	ФункцииБизнесПроцессов.ЗаполнитьДанные(ЭтаФорма, Объект.Ссылка);
	ФункцииФормДокументов.РассчитатьДинамическиеКолонки(
					Товары,
					ФункцииФормДокументов.ПолучитьСтруктуруКолонокТовары(Элементы.Товары, СуммаВключаетНДС, ТипЦен, , , Валюта, УчитыватьНДС, Валюта, СуммаВключаетНДС,,УчитыватьНДС,,Контрагент));
	
	ПользовательИнтернет = ПолучитьПользователяИнтернет();
	Телефон = 	ПользовательИнтернет.Телефон  + 
				?(ПустаяСтрока(ПользовательИнтернет.Телефон), "", ?(ПустаяСтрока(ПользовательИнтернет.КонтактныйТелефон),"" ," ; ")) + ПользовательИнтернет.КонтактныйТелефон + 
				?(ПустаяСтрока(ПользовательИнтернет.Факс), "", " ф. " +  ПользовательИнтернет.Факс);
	АдресОтправкиПисьма = ?(Объект.Заказ.АдресОтправкиПисьма = "", ПользовательИнтернет.ЭлектроннаяПочта,Объект.Заказ.АдресОтправкиПисьма);
	Оператор = Объект.Заказ.Оператор;
 	УправлениеВидимостьюДоступностью();
	
КонецПроцедуры

#КонецОбласти

#Область Поток

&НаСервере
Функция ИнформацияПоДолгуПолучена()
	
	СтруктураДолга = ПолучитьИзВременногоХранилища(АдресИнфДолга);
	Если СтруктураДолга = Неопределено Тогда
		Возврат Ложь;
		
	Иначе
		
		Если СтруктураДолга.Состояние = Поток.СостояниеВыполнено() Тогда
			
			ИнфСтр1 = СтруктураДолга.Результат.Инф1;
			ИнфСтр2 = СтруктураДолга.Результат.Инф2;
			ИнфСтр3 = СтруктураДолга.Результат.Инф3; 
			
			Элементы.ГруппаИнфоТовара.Видимость = Истина;
			
		ИначеЕсли СтруктураДолга.Состояние = Поток.СостояниеОшибка() Тогда
			
			ОбщиеФункции.СообщитьТекст(СтруктураДолга.стрОшибки); КонецЕсли;
		
		Возврат Истина; КонецЕсли;
	
КонецФункции
&НаКлиенте
Процедура ПолучитьИнфОДолгеПостоянно()
	
	Если ИнформацияПоДолгуПолучена() Тогда
		ОтключитьОбработчикОжидания("ПолучитьИнфОДолгеПостоянно"); КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ПолучитьИнфОДолге()
	
	Если Не ИнформацияПоДолгуПолучена() Тогда
		ПодключитьОбработчикОжидания("ПолучитьИнфОДолгеПостоянно", 1) КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ОбновитьИнформациюОДолге()
	
	CRMКлиент.ИнформацияОДолгеНачало(ИнфСтр1, ИнфСтр2, ИнфСтр3);
	
	АдресИнфДолга = Поток.СобратьИнформациюОДолгеВФоне(Контрагент, УникальныйИдентификатор);
	ПодключитьОбработчикОжидания("ПолучитьИнфОДолге", 0.1, Истина);
	
КонецПроцедуры
&НаКлиенте
Процедура ИнфСтрОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	CRMКлиент.ОбработатьНавигационнуюСсылку(НавигационнаяСсылка, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры


#КонецОбласти

#Область Типовые

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СпособРазмещенияБезЗаказа = Объект.Ссылка.Пустая() Или Объект.Заказ.СпособРазмещенияБезЗаказа;
	
	// прикрепленные файлы
	ОбновитьВидимостьПрикрепленныхФайловНаСервере();
	
	// Оповещения
	События.ИницилизироватьСобытияОбъектаНаФорме(ЭтаФорма, Объект.Заказ);
		
	// информация о товаре
	РаботаСНоменклатурой.ДобавитьОперативнуюИнформациюОТоваре(ЭтаФорма);
	
	// комментарии
	ФункцииБизнесПроцессов.ДобавитьРаботуСКомментариями(ЭтаФорма);
	
	// установим параметр
	
	ЗадачиПроцесса.Параметры.УстановитьЗначениеПараметра("Ссылка", 		Объект.Ссылка);
	ДокументыПроцесса.Параметры.УстановитьЗначениеПараметра("Ссылка", 	Объект.Ссылка);
	ДокументыПроцесса.Параметры.УстановитьЗначениеПараметра("Заказ", 	Объект.Заказ);
	
	// Прочитаем товары
	
	//СсылкаПослЗадачи = ФункцииБизнесПроцессов.ТекущаяЗадача(Объект.Ссылка);
	
	ПрочитатьРеквизиты();
	
	// Управление видимостью доступностью
		
	УправлениеВидимостьюДоступностью();
	
	// Обновим заголовок
	
	УстановитьЗаголовок();
	//
	Элементы.Оператор.РежимВыбораИзСписка = Истина;
    Элементы.Оператор.СписокВыбора.ЗагрузитьЗначения(ПолучитьСписокПоРоли(Справочники.Роли.НайтиПоНаименованию("Менеджер  интернет")));

	//запрещаем изменять старые заказы
	Если СпособРазмещенияБезЗаказа=Ложь Тогда
		Сообщить("Этот заказа оформлен по старой системе резеревирования. Редактирование невозможно.");
		Элементы.Товары.ТолькоПросмотр=Истина;
	КонецЕсли;	
	
	ФункцииФормДокументовСервер.УстановитьСвязиГрузополучателя(Объект,Элементы,Новый Структура("Грузополучатель, Грузоотправитель","Контрагент","Организация"));
	
	ПустойПартнераКонтрагент = Справочники[?(ПолучитьФункциональнуюОпцию("НемецкийУчет"), "Партнеры", "Грузополучатели")].ПустаяСсылка();
	Если НЕ ЗначениеЗаполнено(Грузоотправитель) Тогда Грузоотправитель	= ПустойПартнераКонтрагент КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Грузополучатель)  Тогда Грузополучатель	= ПустойПартнераКонтрагент КонецЕсли;
КонецПроцедуры
Функция ПолучитьСписокПоРоли(Роль)
   Запрос = Новый Запрос();
   Запрос.Текст =  "ВЫБРАТЬ
                   |	РолиПользователей.Пользователь
                   |ИЗ
                   |	РегистрСведений.РолиПользователей КАК РолиПользователей
                   |ГДЕ
                   |	РолиПользователей.Роль = &Роль";
   Запрос.УстановитьПараметр("Роль", Роль);	
   ТаблицаПродавцов = Запрос.Выполнить().Выгрузить();
   Возврат ТаблицаПродавцов.ВыгрузитьКолонку("Пользователь");	
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СтруктураКолонокТовары = ФункцииФормДокументов.ПолучитьСтруктуруКолонокТовары(Элементы.Товары, СуммаВключаетНДС, ТипЦен, , , Валюта, УчитыватьНДС, Валюта, СуммаВключаетНДС,,УчитыватьНДС,,Контрагент, Истина);
	//СтруктураКолонокТовары = ФункцииФормДокументов.ПолучитьСтруктуруКолонокТовары(Элементы.Товары, СуммаВключаетНДС, ТипЦен,,,Валюта,УчитыватьНДС,,,,,,Партнер);
	
	// комментарии
	ФункцииБизнесПроцессовКлиент.ПолучитьМассивКомментариев(ЭтаФорма, Объект.Ссылка);
	
	// Запустим в фоне определения долга
	
	ОбновитьИнформациюОДолге();
	
	// Запустим в фоне определения кнопок автоснятия резервирова
	
	ОбновитьИнформациюОСнятииРезерва();
	
	// ---
	мВремяОткрытия = ТекущаяДата();
	Слежение.Записать("Открытие. Интернет заявка", "БизнесПроцесс.ИнтернетЗаявка","ФормаБизнесПроцесса", Объект.Ссылка, "Состояние: " + Элементы.ДекорацияСтатусЗаказа.Заголовок);
	//////
	//Если АвтоматическоеСнятиеРезервовВключено() Тогда
	//	Список = СформироватьСписокСроков();
	//	Элементы.ПродлитьРезервНа.СписокВыбора.ЗагрузитьЗначения(Список);
	//КонецЕсли;
	
	ВариантДоставкиНовПриИзменении("");

КонецПроцедуры


&НаКлиенте
Процедура ПриЗакрытии()
	
	// ---
	//Слежение.Записать("Закрытие. Интернет заявка", "БизнесПроцесс.ИнтернетЗаявка","ФормаБизнесПроцесса", Объект.Ссылка,"Время работы " + Строка(ТекущаяДата() - мВремяОткрытия) + " сек. Состояние: " + Элементы.ДекорацияСтатусЗаказа.Заголовок);
	
КонецПроцедуры
&НаКлиенте
Процедура ОбщиеРеквизитыНажатие(Элемент)
	
	ФункцииФормДокументов.ОткрытьОбщиеРеквизитыБП(ЭтаФорма);

КонецПроцедуры
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Не Модифицированность И
			(	ИмяСобытия = СобытияСистемы.Событие_ЗаписанаЗадача() Или
				ИмяСобытия = СобытияСистемы.Событие_ЗаписанБизнесПроцесс()) Тогда
		
		//БизнесПроцессЗадачи = Неопределено;
		//Если Параметр.Свойство("БизнесПроцесс", БизнесПроцессЗадачи) Тогда
		//	
		//	Если БизнесПроцессЗадачи = Объект.Ссылка Тогда
				
				ПрочитатьРеквизиты();

		//	КонецЕсли;
		//КонецЕсли;
				
	КонецЕсли;

КонецПроцедуры
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	СобытияСистемы.ОповеститьОЗаписиБизнесПроцесса(Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры
&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// сохраним порядок строк
	
	Если Не РаботаСНоменклатурой.СохранитьПорядокСтрок(Объект.Заказ, Товары.Выгрузить(,"Номенклатура, Количество")) Тогда
		Отказ = Истина; КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область События_элементов

&НаСервере
Процедура ПеречитатьРеквизитыПоЗаказу()
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ 	
	|	Склад, Партнер, Контрагент, ТипЦен,
	|	Товары.(
	|		Номенклатура,
	|		Цена,
	|		Упаковка,
	|		Размещение,
	|		Количество,
	|		Сумма) Товары
	|ИЗ
	|	Документ.НеподтвержденнаяЗаявка
	|ГДЕ
	|	Ссылка = &Заказ
	|");
	
	Запрос.УстановитьПараметр("Заказ", Объект.Заказ);
	Выгрузка = Запрос.Выполнить().Выгрузить();
	
	Если Выгрузка.Количество() Тогда
		
		ЗаполнитьЗначенияСвойств(Объект, Выгрузка[0]);
		Товары.Загрузить(Выгрузка[0].Товары);
		
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ЗаказПриИзменении(Элемент)
	
	ПеречитатьРеквизитыПоЗаказу();
	УправлениеВидимостьюДоступностью();
	УстановитьЗаголовок();
	
КонецПроцедуры

&НаСервере
Процедура РазместитьНаСервере(СпособРазмещения, СтруктураКолонокТовары)
	
	Перем ОчередностьСкладов;
	
	РазмещатьБезЗаказа = Объект.Заказ.Пустая() Или СпособРазмещенияБезЗаказа;
	
	ТЗТоваров 				= РабочииТовары(,СтруктураКолонокТовары);
	ИспользоватьОчередность = СпособРазмещения.Свойство("ВыбранныеПриоритеты", ОчередностьСкладов);
	
	Заказы.ПроставитьРазмещениеВТаблицеТоваров(
				ТЗТоваров, 
				?(ИспользоватьОчередность, ОчередностьСкладов, Склад),,
				Объект.Заказ,,  //не меняет размещение резерва если уже зарезервировано
				СпособРазмещения,
				Ложь,
				?(РазмещатьБезЗаказа, РазмещениеТоваров, Неопределено),
				Истина);
				
	Если ТЗТоваров.Количество() Тогда
		
		Если РазмещатьБезЗаказа Тогда 
			Заказы.ПроставитьРазмещение(Товары, РазмещениеТоваров);
		Иначе
			ФункцииФормДокументов.РассчитатьСуммыТабличныхЧастейВоВсехСтроках(ТЗТоваров, СтруктураКолонокТовары);
			СклеитьТаблицыТоваров(ТЗТоваров); КонецЕсли;
		
		УправлениеВидимостьюДоступностью(); КонецЕсли;

	//ТЗТоваров = РабочииТовары();
	//
	//Заказы.ПроставитьРазмещениеВТаблицеТоваров(
	//			ТЗТоваров, 
	//			Склад,,
	//			Объект.Заказ,,
	//			СпособРазмещения,
	//			Ложь);
	//			
	//Если ТЗТоваров.Количество() Тогда
	//	
	//	ФункцииФормДокументов.РассчитатьСуммыТабличныхЧастейВоВсехСтроках(ТЗТоваров, СтруктураКолонокТовары);
	//	СклеитьТаблицыТоваров(ТЗТоваров);
	//	УправлениеВидимостьюДоступностью();
	//	
	//КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура Разместить(Команда)
	
	ФункцииФормДокументов.ОбновитьСтруктуруКолонокТовары(ЭтаФорма, СтруктураКолонокТовары, КэшируемыеФункции.ПолучитьРеквизитыДокумента("НеподтвержденнаяЗаявка"));
	СпособРазмещения = ОткрытьФорму("ОбщаяФорма.ДиалогРазмещения", Новый Структура("ТекущийСклад", Склад),,,,,Новый ОписаниеОповещения("ОбработкаРазмещения",ЭтаФорма,),);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРазмещения(Результат, Параметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		РазместитьНаСервере(Результат, СтруктураКолонокТовары);
		Модифицированность = Истина; КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыПроцессаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекДанные = Элемент.ТекущиеДанные;
	ОткрытьФорму("Документ." + ТекДанные.ВидДокумента + ".ФормаОбъекта", Новый Структура("Ключ", ТекДанные.Документ, ЭтаФорма));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРучСкидку(Команда)
	ФункцииФормДокументов.ОбновитьСтруктуруКолонокТовары(ЭтаФорма, СтруктураКолонокТовары, КэшируемыеФункции.ПолучитьРеквизитыДокумента("НеподтвержденнаяЗаявка"));

	ДиалогиСПользователем.ЗаполнитьРучСкидку(Товары, СтруктураКолонокТовары);
	УправлениеВидимостьюДоступностью();
		
КонецПроцедуры
&НаКлиенте
Процедура ЗаполнитьСтавкуНДС(Команда)
	ФункцииФормДокументов.ОбновитьСтруктуруКолонокТовары(ЭтаФорма, СтруктураКолонокТовары, КэшируемыеФункции.ПолучитьРеквизитыДокумента("НеподтвержденнаяЗаявка"));

	ДиалогиСПользователем.ЗаполнитьСтавкуНДС(Товары, СтруктураКолонокТовары);
	УправлениеВидимостьюДоступностью();
	
КонецПроцедуры
&НаСервере
Функция ПодготовитьТаблицу()
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Товары.Выгрузить(), УникальныйИдентификатор);
	
	Возврат АдресХранилища;
	
КонецФункции
&НаКлиенте
Процедура ВесОбъем(Команда)
	
	// пока так
	
	АдресХранилища = ПодготовитьТаблицу();
	                                                                                                               
	ОткрытьФорму("Документ.НеподтвержденнаяЗаявка.Форма.ФормаВеса", Новый Структура("АдресХранилища", АдресХранилища));

КонецПроцедуры

&НаСервереБезКонтекста 
Процедура УстановитьЗначениеПользовательскойНастройки(Настройки, НастройкиОтбора, Имя, Значение, Использование = Истина)
		Для Каждого Элемент ИЗ НастройкиОтбора.Элементы Цикл
			
			Если	Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Имя) Тогда
					настройкаИД = Элемент.ИдентификаторПользовательскойНастройки;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Элемент Из Настройки.Элементы Цикл
			Если ТипЗнч(Элемент) = Тип("ЭлементОтбораКомпоновкиДанных") И Элемент.ИдентификаторПользовательскойНастройки = настройкаИД Тогда
				
					Элемент.ПравоеЗначение 	= Значение;
					Элемент.Использование 	= Использование;
			КонецЕсли
		КонецЦикла;

КонецПроцедуры 
&НаСервере 
Функция ПолучитьПользовательскиеНастройкиОтчета(ПользовательскиеНастроки, НастройкиОтбора) 
	
	Отчет = Отчеты.ВзаиморасчетыСПартнером.Создать();
	ПользовательскиеНастроки = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки; 
	НастройкиОтбора = Отчет.КомпоновщикНастроек.Настройки.Отбор;
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Попытка
		Записать();
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	//Закрыть();
	
КонецПроцедуры

#КонецОбласти

// СОЗДАНИЕ ПАРТНЕРА

&НаСервере
Функция ПолучитьПользователяИнтернет()
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 ПользовательИнтернет ИЗ Документ.НеподтвержденнаяЗаявка ГДЕ Ссылка = &Заказ");
	Запрос.УстановитьПараметр("Заказ", Объект.Заказ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Возврат Выборка.ПользовательИнтернет;
		
	КонецЕсли;
	
	Возврат Справочники.ПользователиИнтернет.ПустаяСсылка();
	
КонецФункции

//&НаКлиенте
//Процедура СоздатьПартнера(Команда)
//	
//	ВозврПартнер = ОткрытьФорму("БизнесПроцесс.ИнтернетЗаявка.Форма.СозданиеКонтрагента", Новый Структура("ПользовательИнтернет", ПолучитьПользователяИнтернет()),ЭтаФорма,,,,Новый ОписаниеОповещения("ОбработкаСозданияКонтрагента",ЭтаФорма),);
//										
//КонецПроцедуры

&НаКлиенте
Процедура СоздатьКонтрагента(Команда)
	
	ВозврКонтрагент = ОткрытьФорму("БизнесПроцесс.ИнтернетЗаявка.Форма.СозданиеКонтрагента", Новый Структура("ПользовательИнтернет", ПолучитьПользователяИнтернет()),ЭтаФорма,,,,Новый ОписаниеОповещения("ОбработкаСозданияКонтрагента",ЭтаФорма),);
										
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСозданияКонтрагента(Результат, Параметры) Экспорт
	Если Результат <> Неопределено Тогда
		
		Контрагент = Результат;
		
		КонтрагентПриИзмененииНаСервере();
		УправлениеВидимостьюДоступностью();
		
	КонецЕсли;	
КонецПроцедуры


// ВЫПОЛНЕНИЕ ЗАДАЧ

&НаСервере
Функция ВыполнитьЗадачу(ИмяСтатуса)
	
	СуммаДоставкиВкл = Товары.Итог("Доставка");
	Если СуммаДоставкиВкл > 0 И СуммаДоставкиВкл <> СуммаДоставки Тогда
		ОбщиеФункции.СообщитьТекст("Общая сумма доставки не совпадает с суммой доставки в таблице");
		Возврат Ложь;
	КонецЕсли;
	
	СсылкаЗадачи = ФункцииБизнесПроцессов.ТекущаяЗадача(Объект.Ссылка);
	
	// Сформруем счет PDF для ссылок в html для писем юзероф
	
	Если 	ИмяСтатуса = "ОжиданиеПодтверждения" Или
			ИмяСтатуса = "ОжиданиеОплаты" Тогда
	
		стрОшибки = "";
		
		Если Объект.Заказ.ВидОплаты = Справочники.ВидОплатыИнтернетЗаказа.НайтиПоКоду("000000002") или Объект.Заказ.ВидОплаты = Справочники.ВидОплатыИнтернетЗаказа.НайтиПоКоду("000000008") Тогда //Объект.Заказ.Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
			Если Не Заказы.СохранитьКвитанциюНаДискСервераВPDF(Объект.Заказ, стрОшибки) Тогда
			ОбщиеФункции.СообщитьТекст("Ошибка при формировании счета PDF на сервере
											|" + стрОшибки);
			Возврат Ложь; 
		КонецЕсли;

			ИначеЕсли Объект.Заказ.ВидОплаты = Справочники.ВидОплатыИнтернетЗаказа.НайтиПоКоду("000000003") Тогда
		Если Не Заказы.СохранитьСчетНаДискСервераВPDF(Объект.Заказ, стрОшибки) Тогда
			ОбщиеФункции.СообщитьТекст("Ошибка при формировании счета PDF на сервере
											|" + стрОшибки);
			Возврат Ложь; 
		КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Начнемс
	
	НачатьТранзакцию();
	
	Если Объект.Заказ.Проведен Тогда	
		
		Если Не СоздатьИПровестиКорректировкуЗаказа() Тогда
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецЕсли;
		
		
		Если Не Заказы.УстановитьСостояниеЗаказа(Объект.Заказ, Перечисления.СостоянияЗаказа[ИмяСтатуса]) Тогда
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли ИмяСтатуса = "Отменен" Тогда // заявка зависла в состоянии ОжиданиеОтвета и мы ее отменяем
					
		ЗаказОбъект = Объект.Заказ.ПолучитьОбъект();
		ЗаказОбъект.УстановитьПометкуУдаления(Истина);
		
		ЗаказОбъект.ОбменДанными.Загрузка = Истина;
		Попытка
			ЗаказОбъект.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			Возврат Ложь;
		КонецПопытки;
		
	КонецЕсли;
	
	ЗадачаОбъект = СсылкаЗадачи.ПолучитьОбъект();
	ЗадачаОбъект.Комментарий = Объект.Комментарий;	
	
	Попытка
		ЗадачаОбъект.ВыполнитьЗадачу();
	Исключение
		Сообщить(ОписаниеОшибки());
	//	ОтменитьТранзакцию();
		Возврат Ложь;
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
	//Если Модифицированность Тогда
	//	Записать();
	//КонецЕсли;
	
	Модифицированность = Ложь;
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ПроверитьРеквизитыЗаказа()
	
	Отказ = Ложь;
	
	Если ТипЦен.Пустая() Тогда
		ОбщиеФункции.СообщитьТекст("Не заполнен тип цен","ТипЦен"); Отказ = Истина; КонецЕсли;
	
	Если Контрагент.Пустая() Тогда
		ОбщиеФункции.СообщитьТекст("Не заполнен Контрагент","Контрагент"); Отказ = Истина; КонецЕсли;
	
	Если Склад.Пустая() Тогда
		ОбщиеФункции.СообщитьТекст("Не заполнен склад","Склад"); Отказ = Истина; КонецЕсли;
	
	Инд = -1;
	Для Каждого Строка Из Товары Цикл Инд = Инд + 1;
		
		Если Не ЗначениеЗаполнено(Строка.Номенклатура) Тогда
			ОбщиеФункции.СообщитьТекст("Не заполнена Номенклатура", "Товары[" + Формат(Инд,"ЧГ=") + "].Номенклатура"); Отказ = Истина; КонецЕсли;
		
		Если Не Строка.Количество Тогда
			ОбщиеФункции.СообщитьТекст("Не заполнено количество", "Товары[" + Формат(Инд,"ЧГ=") + "].Количество");Отказ = Истина; КонецЕсли;
		
		//Если Не Строка.Цена Тогда
		//	ОбщиеФункции.СообщитьТекст("Не заполнена цена", "Товары[" + Формат(Инд,"ЧГ=") + "].Цена"); Отказ = Истина; КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Строка.Размещение) Тогда
			ОбщиеФункции.СообщитьТекст("Не заполнено размещение", "Товары[" + Формат(Инд,"ЧГ=") + "].Размещение"); Отказ = Истина; КонецЕсли;
		
		Если 	УчитыватьНДС И
				Не ЗначениеЗаполнено(Строка.СтавкаНДС) Тогда
				
			ОбщиеФункции.СообщитьТекст("Не заполнена ставка НДС", "Товары[" + Формат(Инд,"ЧГ=") + "].СтавкаНДС"); Отказ = Истина; КонецЕсли; КонецЦикла;
	
	Возврат Не Отказ;
	
КонецФункции
&НаКлиенте
Процедура ВСборку(Команда)
	
	Если РаботаСНоменклатуройКлиент.ЕстьСтопПродажи(Товары) Тогда Возврат КонецЕсли;
	
	//ИдентификаторВремени = ДиалогиСПользователем.НачалоЗамераВремени("ИнтернетЗаявка.ВОчередиНаСклад", Объект.Ссылка);
	Если НЕ ЗакупитьНедостающее И ЕстьТоварПодЗаказ() Тогда ЗакупитьНедостающее = Истина; КонецЕсли;
	
	Если 	ПроверитьРеквизитыЗаказа() Тогда
		
		// silber {
		Если ПроверитьНаНулевыеЦеныИДалееПоПлану("ВОчередиНаСклад") Тогда
			Возврат; КонецЕсли;
		// silber {
		
		ПроверитьОптимальностРазмещенияИВыполнитьЗадачу("ВОчередиНаСклад");
		
		//Если ВыполнитьЗадачу("ВОчередиНаСклад") Тогда
		//	ДиалогиСПользователем.ОкончаниеЗамераВремени(ИдентификаторВремени, 10);
		//	Закрыть();
		//КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ПодтвердитьОплату(Команда)
	
	//ИдентификаторВремени = ДиалогиСПользователем.НачалоЗамераВремени("ИнтернетЗаявка.ВРаботе", Объект.Ссылка);
	Если НЕ ЗакупитьНедостающее И ЕстьТоварПодЗаказ() Тогда ЗакупитьНедостающее = Истина; КонецЕсли;
	
	ПроверитьОптимальностРазмещенияИВыполнитьЗадачу("ВРаботе");
	
	//Если ВыполнитьЗадачу("ВРаботе") Тогда
	//	ДиалогиСПользователем.ОкончаниеЗамераВремени(ИдентификаторВремени, 10);
	//	Закрыть();
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьНаНулевыеЦеныИДалееПоПлану(ОсновнойПараметр)
	
	Строки = Товары.НайтиСтроки(Новый Структура("Цена", 0));
	Если Строки.Количество() Тогда
					
		Массив = Новый Массив;
		Для Каждого Строка Из Строки Цикл Массив.Добавить(Новый Структура("Товар", Строка.Номенклатура)) КонецЦикла;
		
		ОткрытьФорму("БизнесПроцесс.ЗаявкаПокупателя.Форма.УВасНулевыеЦены",Новый Структура("Товары", Массив),ЭтаФорма,,,,Новый ОписаниеОповещения("ИВотЧтоНамОтветилиПроНулевыеЦены", ЭтаФорма, ОсновнойПараметр));
		Возврат Истина; КонецЕсли; 

	Возврат Ложь;
	
КонецФункции
&НаКлиенте
Процедура ИВотЧтоНамОтветилиПроНулевыеЦены(Ответ, ОсновнойПараметр) Экспорт
	
	Если Ответ = Истина Тогда // это пофигизм
		ПроверитьОптимальностРазмещенияИВыполнитьЗадачу(ОсновнойПараметр);
		
	ИначеЕсли Ответ <> Неопределено Тогда // это товар
		
		Элементы.Товары.ТекущаяСтрока = Товары.Индекс(Товары.НайтиСтроки(Новый Структура("Номенклатура", Ответ))[0]); КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОптимальностРазмещенияИВыполнитьЗадачу(ОсновнойПараметр)
	
	НеоптимальныеРазмещения = НеоптимальныеРазмещения(); 
	
	Если  НеоптимальныеРазмещения.Количество() Тогда
		Парам=Новый Структура("НеоптимальныеРазмещения,ОсновнойПараметр",НеоптимальныеРазмещения,ОсновнойПараметр);
		Оповещ=Новый ОписаниеОповещения("ОбработкаВопросаАктуальностиРазмещения",ЭтаФорма,Парам);
		ПоказатьВопрос(оповещ,"Внимание! Размещение товара не оптимально. Вернуться к работе с заказом?",РежимДиалогаВопрос.ДаНет);
	Иначе
		Если ВыполнитьЗадачу(ОсновнойПараметр) Тогда
			Закрыть();
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ОбработкаВопросаАктуальностиРазмещения(Рез,Парам) Экспорт
	НеоптимальныеРазмещения = Парам.НеоптимальныеРазмещения;
	ОсновнойПараметр = Парам.ОсновнойПараметр;
	Если рез = КодВозвратаДиалога.Нет Тогда
		ВыполнитьЗадачу(ОсновнойПараметр);
		Закрыть();
	Иначе
		Для Каждого Элем Из неоптимальныеРазмещения Цикл
			Сообщить(Элем);
		КонецЦикла;	
	КонецЕсли;	
КонецПроцедуры	

&НаСервере
Функция НеоптимальныеРазмещения()
	Возврат Заказы.НеоптимальныеРазмещения(РазмещениеТоваров.Выгрузить(),Склад);
КонецФункции	

&НаКлиенте
Процедура ОжидатьПодтверждения(Команда)
	
	ИдентификаторВремени = ДиалогиСПользователем.НачалоЗамераВремени("ИнтернетЗаявка.ОжиданиеПодтверждения", Объект.Ссылка);
	
	Если НЕ Записать() Тогда Возврат; КонецЕсли;
	
	Если ВыполнитьЗадачу("ОжиданиеПодтверждения") Тогда
		
		ДиалогиСПользователем.ОкончаниеЗамераВремени(ИдентификаторВремени, 10);
		
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ОжидатьОплату(Команда)
	
	ИдентификаторВремени = ДиалогиСПользователем.НачалоЗамераВремени("ИнтернетЗаявка.ОжиданиеОплаты", Объект.Ссылка);
	
	Если НЕ Записать() Тогда Возврат; КонецЕсли;
		
	Если ВыполнитьЗадачу("ОжиданиеОплаты") Тогда
		
		ДиалогиСПользователем.ОкончаниеЗамераВремени(ИдентификаторВремени, 10);
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура Отказ(Команда)
	
	Перем ПричинаОтказа;
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПричинаОтказаЗавершениеВыбора", ЭтаФорма);
	ПоказатьВводЗначения(ОповещениеОЗакрытии,ПричинаОтказа,"Причина отказа", Тип("СправочникСсылка.ПричиныОтказов"));
			
КонецПроцедуры

&НаСервере
Функция ЗафиксироватьПричинуОтказа(ПричинаОтказа)
	
	Возврат Заказы.УстановитьРеквизитЖурнала(Объект.Заказ, Новый Структура("ПричинаОтказа", ПричинаОтказа))
	
КонецФункции

&НаКлиенте
Процедура ПричинаОтказаЗавершениеВыбора(ПричинаОтказа, Параметры) Экспорт
	
	Если ПричинаОтказа <> Неопределено И ЗафиксироватьПричинуОтказа(ПричинаОтказа) Тогда
		
		Если ВыполнитьЗадачу("Отменен") Тогда
			
			Закрыть();
			
	КонецЕсли;КонецЕсли;
	
КонецПроцедуры

#Область Запись_заказа

Функция СохранитьИзмененияРеквизитовЗаказа(ЕстьТранзакция = Ложь)
	
	ЗаказСсылка = Объект.Заказ;
	МассивРеквизитовФормы  = ПолучитьРеквизиты();
	МассивРеквизитов = КэшируемыеФункции.ПолучитьРеквизитыДокумента("НеподтвержденнаяЗаявка");
	
	// Таблица доставки
		
	времДок = Документы.НеподтвержденнаяЗаявка.СоздатьДокумент();	
	ТаблицаДоставка = времДок.Доставка;
		
	Для Каждого Строка Из Товары Цикл
		Если Строка.Доставка > 0 Тогда
			НовСтрока = ТаблицаДоставка.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, Строка); КонецЕсли; КонецЦикла;
	
	
	ИзмененияТЧ = Новый Структура("Доставка", ТаблицаДоставка.Выгрузить()); 
	
	Изменения = Новый Структура;
	Для Каждого Реквизит Из МассивРеквизитовФормы Цикл
		Элемент = МассивРеквизитов.Найти(Реквизит.Имя);
		Если Элемент <> Неопределено И ЗаказСсылка[Реквизит.Имя] <> ЭтаФорма[Реквизит.Имя] Тогда
			Изменения.Вставить(Реквизит.Имя, ЭтаФорма[Реквизит.Имя]); КонецЕсли; КонецЦикла;
	
	//новая методика: сохраняем изменения ТЧ "товары" в заказе (только для заказов с галкой)
	Если ЗаказСсылка.СпособРазмещенияБезЗаказа Тогда
		ИзмененияТЧ.Вставить("Товары",Товары.Выгрузить());
	КонецЕсли;
	
	
	Если Изменения.Количество() ИЛИ ИзмененияТЧ.Количество() Тогда
		
		ТранзакцияОткрыта = Ложь;

		Если НЕ ЕстьТранзакция Тогда
			НачатьТранзакцию();
			ТранзакцияОткрыта = Истина;
		КонецЕсли;
		
 		Если Заказы.СохранитьИзмененияРеквизитовЗаказа(ЗаказСсылка, Изменения, ИзмененияТЧ) Тогда
			
			Если ТранзакцияОткрыта Тогда
				ЗафиксироватьТранзакцию(); КонецЕсли;
	
		Иначе
			Если ТранзакцияОткрыта Тогда 
				ОтменитьТранзакцию(); КонецЕсли;
			
			Возврат Ложь; КонецЕсли; КонецЕсли;
	
	Возврат Истина; 
	
КонецФункции


&НаСервере
Функция СоздатьИПровестиКорректировкуЗаказа(ЕстьТранзакция = Ложь)   
		
	ТранзакцияОткрыта = Ложь;							
	
	// Работаем в текущей транзакции или открываем новую
	
	Если НЕ ЕстьТранзакция Тогда
		НачатьТранзакцию();
		ТранзакцияОткрыта = Истина;
	КонецЕсли;

	//сохраним изменившиеся реквизиты в документе и перепроведем корректировки если изменились значимые реквизиты
	
	Если НЕ СохранитьИзмененияРеквизитовЗаказа(ЕстьТранзакция ИЛИ ТранзакцияОткрыта) Тогда
		
		Если ТранзакцияОткрыта Тогда
			ОтменитьТранзакцию(); КонецЕсли;
		Возврат Ложь; КонецЕсли;
		
	//Круглов
	//по новой методике измененную ТЧ пишем в ТЧ Заказа, в ТЧ Товары Корректировки ничего не пишем.
	//изменения ТЧ пишем в процедуре СохранитьИзмененияРеквизитовЗаказа
	//ТаблицаИзменений = КонвертацияТипов.ПолучитьТаблицуРазницуДокументаИРегистраОстатков(
	//						РабочииТовары(Ложь, СтруктураКолонокТовары), 
	//						"ИнтернетЗаказПокупателя",
	//						?(СпособРазмещенияБезЗаказа,
	//							"Номенклатура, Упаковка, Цена, ПроцентРучнойСкидки, ПроцентАвтоматическойСкидки, СтавкаНДС, Акция",
	//							"Номенклатура, Упаковка, Цена, Размещение, ПроцентРучнойСкидки, ПроцентАвтоматическойСкидки, СтавкаНДС, Акция"),
	//						"Количество, Сумма",
	//						Новый Структура("ИнтернетЗаказ", Объект.Заказ));
	
	// В резервах
							
	ТипСклад 			= Тип("СправочникСсылка.Склады");
	ТипЗакПоставщику 	= Тип("ДокументСсылка.ЗаказПоставщику");
	
	табРезервов 	= РазмещениеТоваров.Выгрузить();
	
	//табРезервов 	= РазмещениеТоваров.Выгрузить().СкопироватьКолонки();
	//ТабРазмещений 	= табРезервов.Скопировать();
	//ТабПоставщиков	= ТабРазмещений.Скопировать();
	//
	//Для Каждого Строка Из РазмещениеТоваров Цикл 
	//	Если 		ТипЗнч(Строка.Размещение) = ТипСклад Тогда 			ЗаполнитьЗначенияСвойств(табРезервов.Добавить(), 	Строка);
	//	ИначеЕсли 	ТипЗнч(Строка.Размещение) = ТипЗакПоставщику Тогда	ЗаполнитьЗначенияСвойств(ТабПоставщиков.Добавить(), Строка);
	//	Иначе															ЗаполнитьЗначенияСвойств(ТабРазмещений.Добавить(), 	Строка); КонецЕсли; КонецЦикла;
	//
	Если СпособРазмещенияБезЗаказа Тогда
		
		
		ТабИзмененийРезервов = Заказы.ПодготовитьРезревыКСписанию(табРезервов, Объект.Заказ);
		
		//// Резервы
		//
		//ТабИзмененийРезервов = КонвертацияТипов.ПолучитьТаблицуРазницуДокументаИРегистраОстатков(
		//						табРезервов, "ТоварыВРезерве", "Номенклатура, Размещение", "Количество",
		//						Новый Структура("ДокументРезерва", Объект.Заказ));
		//// Очередь
		//
		//ТипЧисло = Тип("Число");
		//КолСтрок = ТабРазмещений.Количество();
		//Для Инд = -КолСтрок + 1 По 0 Цикл Если ТипЗнч(ТабРазмещений[Инд * -1].Размещение) <> ТипЧисло Тогда ТабРазмещений.Удалить(Инд * -1) КонецЕсли; КонецЦикла;
		//
		//ТабРазмещений.Колонки.Размещение.Имя = "Очередь";
		//ТабИзмененийРазмещений = КонвертацияТипов.ПолучитьТаблицуРазницуДокументаИРегистраОстатков(
		//						ТабРазмещений, "РазмещениеЗаказов", "Номенклатура, Очередь", "Количество",
		//						Новый Структура("Заказ", Объект.Заказ));
		//ТабИзмененийРазмещений.Колонки.Очередь.Имя = "Размещение";
		//
		//// Заказы поставщикам
		//
		//ТабПоставщиков.Колонки.Размещение.Имя = "ЗаказПоставщику";
		//ТабПоставщиков.Колонки.Добавить("Размещение", Новый ОписаниеТипов("ДокументСсылка." + Объект.Заказ.Метаданные().Имя));
		//КонвертацияТипов.ВыполнитьВыражениеВКаждойСтрокеТаблицы(ТабПоставщиков, "Строка.Размещение = Параметры", Объект.Заказ);
		//ТабИзмененийПоставщиков = КонвертацияТипов.ПолучитьТаблицуРазницуДокументаИРегистраОстатков(
		//						ТабПоставщиков, "РазмещениеЗаказовВПути", "Номенклатура, Размещение, ЗаказПоставщику", "Количество",
		//						Новый Структура("Размещение", Объект.Заказ));
		//ТабИзмененийПоставщиков.Колонки.Размещение.Имя = "УдаленнаяКолонка";
		//ТабИзмененийПоставщиков.Колонки.ЗаказПоставщику.Имя = "Размещение";
		
	Иначе
		ТабИзмененийРезервов 	= Новый ТаблицаЗначений; 
		//ТабИзмененийРазмещений	= Новый ТаблицаЗначений; 
		//ТабИзмененийПоставщиков = Новый ТаблицаЗначений; 
	КонецЕсли;

	//Если ТаблицаИзменений.Количество() Или  ТабИзмененийРезервов.Количество() Тогда
	Если  ТабИзмененийРезервов.Количество() Тогда
		//Или ТабИзмененийРазмещений.Количество() Или ТабИзмененийПоставщиков.Количество() Тогда
	
		// Шапка
		
		НовДок = Документы.КорректировкаИнтернетЗаказа.СоздатьДокумент();
		НовДок.Заказ 	= Объект.Заказ;
		НовДок.Дата 	= ТекущаяДата();
		
		// Таблица
		
		//по новой методике ничего не грузим в Тч товары
		//НовДок.Товары.Загрузить(ТаблицаИзменений);
		
		// belova 17.02.2016 ->

		НовДок.РазмещениеТоваров.Загрузить(ТабИзмененийРезервов);
		
		// belova <-
		
		
		//Для Каждого Строка Из ТабИзмененийРезервов Цикл ЗаполнитьЗначенияСвойств(НовДок.РазмещениеТоваров.Добавить(), Строка) КонецЦикла;
		//Для Каждого Строка Из ТабИзмененийРазмещений Цикл ЗаполнитьЗначенияСвойств(НовДок.РазмещениеТоваров.Добавить(), Строка) КонецЦикла;
		//Для Каждого Строка Из ТабИзмененийПоставщиков Цикл ЗаполнитьЗначенияСвойств(НовДок.РазмещениеТоваров.Добавить(), Строка) КонецЦикла;
		//
		// Проведение
		
		Если НЕ ПроведенияДокументов.ПровестиДокумент(НовДок) Тогда
			Если ТранзакцияОткрыта Тогда 
				ОтменитьТранзакцию(); КонецЕсли;
			
			Возврат Ложь; КонецЕсли;КонецЕсли;	
	
	// если открывали транзакцию, зафиксируем ее
	
	Если ТранзакцияОткрыта Тогда 
		ЗафиксироватьТранзакцию();КонецЕсли;
		
	Возврат Истина;

КонецФункции

&НаСервере
Функция ПолучитьСсылкуТекущегоОбъекта(ТекущийОбъект)
	
	Если ТекущийОбъект.ЭтоНовый() Тогда
		
		ТекущийОбъект.УстановитьСсылкуНового(
				БизнесПроцессы.ИнтернетЗаявка.ПолучитьСсылку(
						Новый УникальныйИдентификатор()));
		Возврат ТекущийОбъект.ПолучитьСсылкуНового();
		
	Иначе
		
		Возврат ТекущийОбъект.Ссылка;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьЗаполненныйЗаказПокупателя()
	
	Заказ = Объект.Заказ.ПолучитьОбъект();
			
	Заказ.Партнер 		= Партнер;
	Заказ.Контрагент 	= Контрагент;
	Заказ.Склад 		= Склад;
	Заказ.ТипЦен 		= ТипЦен;
	Заказ.Валюта 		= Валюта;
	Заказ.Организация   = Организация;
	Заказ.БанковскийСчетОрганизации = БанковскийСчетОрганизации;
	Заказ.БанковскийСчетПартнера	= БанковскийСчетПартнера;
	Заказ.Грузоотправитель = Грузоотправитель;
	Заказ.Грузополучатель = Грузополучатель;
	Заказ.СуммаВключаетНДС = СуммаВключаетНДС;
	Заказ.УчитыватьНДС 		= УчитыватьНДС;
	Заказ.СуммаДоставкиРасход = СуммаДоставкиРасход;
	Заказ.ЗакупитьНедостающее = ЗакупитьНедостающее;
	Заказ.АдресОтправкиПисьма = АдресОтправкиПисьма;
	Заказ.МестоположениеСтр = МестоположениеСтр;
	Заказ.Оператор = Оператор;
	Заказ.ПередачаТовара = ПередачаТовара;
	Заказ.КтоОформилЗаказ = КтоОформилЗаказ;
	Заказ.МенеджерЗаказа = МенеджерЗаказа;
	
	
	врТовары = РабочииТовары(,СтруктураКолонокТовары);
	
	// Установим ставку НДС
	
	//врТовары.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	//врТовары.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число"));
	//
	//СтавкаНДС 		= Перечисления.СтавкиНДС.НДС18;
	//СтавкаНДСЧисло 	= КэшируемыеФункции.ПолучитьЧислоСтавкиНДС(СтавкаНДС);
	//
	//Для Каждого Строка Из врТовары Цикл
	//	Строка.СтавкаНДС 	= СтавкаНДС;
	//	Строка.СуммаНДС 	= СтавкаНДСЧисло * Строка.Сумма * 0.01;
	//КонецЦикла;
	//
	// Загрузим таблицу
	
	Заказ.Товары.Загрузить(врТовары);
	
	Если НачалоДня(Заказ.Дата) <> НачалоДня(ТекущаяДата()) Тогда
		Заказ.Дата = ТекущаяДата();
	КонецЕсли;
	
	Возврат Заказ;
	
КонецФункции
&НаСервере
Функция СразуВыполнитьПервуюЗадачу(БыстраяПродажа = Ложь, ВыполнитьЗадачу = Истина)         //настя
	
	НачатьТранзакцию();
	
	Если Не Записать() Тогда//Не Записать(Новый Структура("Старт, БыстраяПродажа", Истина, БыстраяПродажа)) Тогда
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецЕсли;
	
	// Получим итеперь задачу
	
	ЗадачаСсылка = ФункцииБизнесПроцессов.ТекущаяЗадача(Объект.Ссылка);
	
	Если Не ЗначениеЗаполнено(ЗадачаСсылка) Тогда
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецЕсли;
	
	Если ВыполнитьЗадачу Тогда
	
		ЗадачаОбъект = ЗадачаСсылка.ПолучитьОбъект();
		ЗадачаОбъект.Комментарий = Объект.Комментарий;
		
		Попытка
			ЗадачаОбъект.ВыполнитьЗадачу();
		Исключение
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецПопытки; КонецЕсли;

	ЗафиксироватьТранзакцию();
	
	Модифицированность = Ложь;
	
	Возврат Истина;
	
КонецФункции
&НаСервере
Функция СохранитьИПровестиРеализацию(текЗаказ, РеализацияСсылка = Неопределено, ЭтоБыстраяПродажа = Ложь, Экстренно = Ложь, БезДублей=Истина)   //настя
	
	Если Товары.Количество() Тогда
		
		// Если есть собрано или отгружено тогда мы не проводим такую реализацию
		Если Товары.Итог("КоличествоСобрано") Или Товары.Итог("КоличествоОтгружено") Тогда
			ОбщиеФункции.СообщитьТекст("Когда часть заказа собрана или отгружена, тогда быстро создать реализацию не получиться. Отправляйте заказ опять ""ВСборку""");
			Возврат Ложь; КонецЕсли;
	
		Если Склад.ПередачаТовараМВЗ ИЛИ НЕ МВЗ.Пустая() ИЛИ ПередачаТовара Тогда
			Реализация = Документы.ПередачаТовара.СоздатьДокумент();
			Реализация.МВЗ = МВЗ;
			Если ЗначениеЗаполнено(текЗаказ.ОтветственноеЛицо) Тогда
				Реализация.ОтветственноеЛицо = текЗаказ.ОтветственноеЛицо;
			ИначеЕсли ЗначениеЗаполнено(текЗаказ.ПользовательИнтернет) Тогда
				 Реализация.ОтветственноеЛицо = текЗаказ.ПользовательИнтернет.ФизЛицо;
			КонецЕсли;
		Иначе
			// Определим источник
	
			Реализация = Документы.РеализацияТоваров.СоздатьДокумент();
			Реализация.ЭтоБыстраяПродажа 	= ЭтоБыстраяПродажа;
		КонецЕсли;
		
		Реализация.Дата					= ТекущаяДата() + 1; // низя чтобы дата заказа совпадал с реализацие иначе долги по оплате не пойдут
		
		// Забъем реквизиты по запросу
		
		ЗаполнитьЗначенияСвойств(Реализация, Заказы.ПолучитьРеквизитыЗаказаДляЗаполненияШапкиДокумента(текЗаказ));
		Если СпособРазмещенияБезЗаказа Тогда Реализация.СниматьРезервИзШапки = Истина КонецЕсли;
				
		// Вытащим товары
		
		ТипыЗаказа = Новый Массив;
		ТипыЗаказа.Добавить(ТипЗнч(текЗаказ));
		
		ТЗТов = РабочииТовары(Ложь, СтруктураКолонокТовары,,?(СпособРазмещенияБезЗаказа, Склад, Неопределено), БезДублей);
		ТЗТов.Колонки.Добавить("Заказ", Новый ОписаниеТипов(ТипыЗаказа));
		ТЗТов.ЗаполнитьЗначения(текЗаказ, "Заказ");
		
		ТЗТов.Колонки.Добавить("НомерГТД", Новый ОписаниеТипов("СправочникСсылка.НомераГТД"));
		Заказы.ПроставитьНомерГТД(ТЗТов);
		
		//Реализация.Товары.Загрузить(?(Экстренно, ТЗТов, КонвертацияТипов.ПолучитьТаблицуИзНайденныхСтрокТаблицыЗначений(ТЗТов,Новый Структура("Размещение", Склад))));
		Реализация.Товары.Загрузить(ТЗТов);
		
		Если Не Реализация.ПроверитьЗаполнение() Тогда
			Отказ = Истина; Возврат Ложь;КонецЕсли;
		
		// Если розничная заявка
		
// Важно! реквизит РозничнаяЗаявка берется из заказа, нужно ли мне проверять что заказ оплачен???

		//Если РозничнаяЗаявка Тогда
		//	ПараметрыРозница = Новый Массив;
		//	Если НЕ Заказы.ЗаказОплачен(текЗаказ, ПараметрыРозница, ТЗТов.Итог("Всего")) Тогда
		//		ОбщиеФункции.СообщитьТекст("Заказ не оплачен, поэтому не может быть отгружен");	Возврат Ложь; КонецЕсли; 
		//	
		//	Если ПараметрыРозница <> Неопределено Тогда
		//		Для Каждого Парам ИЗ ПараметрыРозница Цикл НовСтрока = Реализация.ПлатежныеДокументы.Добавить();
		//			НовСтрока.ДокументОплаты = Парам.ДокументОплаты;
		//			НовСтрока.Сумма = Парам.Сумма; КонецЦикла; КонецЕсли;
		//КонецЕсли;
		
		// Установим заказ который еще не может быть прочитан
		
		Реализация.ДополнительныеСвойства.Вставить("ОперативныйЗаказ", текЗаказ);
		
		Попытка
			Реализация.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			стрОшибки = ОписаниеОшибки();
			ОбщиеФункции.СообщитьТекст("Ошибка при проведении реализации товаров
									|" + стрОшибки);
			Возврат Ложь;
		КонецПопытки;
		
		РеализацияСсылка = Реализация.Ссылка;КонецЕсли; 
	
	Возврат Истина;

КонецФункции

&НаСервере
Функция СохранитьКорректировкуИРеализациюОдноТРанзацией(РеализацияСсылка = Неопределено, ЭтоБыстраяПродажа = Ложь)  //настя
	
	НачатьТранзакцию();
	
	Если Не СоздатьИПровестиКорректировкуЗаказа(Истина) Или Не СохранитьИПровестиРеализацию(Объект.Заказ, РеализацияСсылка, ЭтоБыстраяПродажа) Тогда
		ОтменитьТранзакцию(); Возврат Ложь; КонецЕсли;
	
	ЗафиксироватьТранзакцию(); Возврат Истина;
	
КонецФункции


&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Проверим, если стоит флаг ЗакупитьНедостающие, а товара недостающего нет, обнулим флаг.
	Если Оператор  = Справочники.Пользователи.ПустаяСсылка() Тогда Оператор =  ПараметрыСеанса.ТекущийПользователь; КонецЕсли;

	Если ЗакупитьНедостающее И НЕ ЕстьТоварПодЗаказ() Тогда ЗакупитьНедостающее = Ложь; КонецЕсли;
	
	// Проверим корректность размещения складов
	
	Если Не ДиалогиСПользователямиСервер.РазрешеноДанноеРазмещениеПользователю(Склад, Товары) Тогда
		Отказ = Истина; Возврат КонецЕсли;
	
	// Очистим левые размещения
	ДиалогиСПользователем.ОчиститьНеактуальноеРазмещение(Товары, РазмещениеТоваров);
	
	// Проверим нет ли перебора по размещению
	Если НЕ Заказы.ПроверитьНаПереборВРазмещении(Товары, РазмещениеТоваров) Тогда
		Отказ = Истина; Возврат; КонецЕсли;
	
	Если ТекущийОбъект.Заказ.Проведен Тогда
	
		Если Не СоздатьИПровестиКорректировкуЗаказа() Тогда
			
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;
	Иначе   // заказ не проведен (завис в состоянии "Ожидание ответа")
		ЗаполнЗаказ = ПолучитьЗаполненныйЗаказПокупателя();
		
		Если Не ПроведенияДокументов.ПровестиДокумент(ЗаполнЗаказ,,, РежимЗаписиДокумента.Проведение,) Тогда
			
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;

	//Если Не СоздатьИПровестиКорректировкуЗаказа() Тогда
	//	Отказ = Истина;
	//КонецЕсли;
	
	//ЭтоСтарт = Ложь;
	//ПараметрыЗаписи.Свойство("Старт", ЭтоСтарт);
	//
	//Если Объект.СразуВыполнитьПервуюЗадачу Тогда
	//	
	//	
	//	// Запишем и проведем заказ
	//	
	//	Если Не ПровестиЗаказ(ТекущийОбъект) Тогда
	//		Отказ = Истина;
	//		СразуВыполнитьЗадачу = Ложь;
	//		Возврат;
	//	КонецЕсли;
	//	
	//	СсылкаТекущегоПроцесса = ПолучитьСсылкуТекущегоОбъекта(ТекущийОбъект);
	//	
	//	// Запишем задачу формирования заказа
	//	
	//	НовЗадача = Задачи.ЗадачаПользователю.СоздатьЗадачу();
	//	НовЗадача.Дата			= ТекущаяДата();
	//	НовЗадача.ТочкаМаршрута = БизнесПроцессы.ИнтернетЗаявка.ТочкиМаршрута.ФормированиеЗаказа;
	//	НовЗадача.БизнесПроцесс = СсылкаТекущегоПроцесса;
	//	НовЗадача.Наименование	= "Создан заказ";
	//	НовЗадача.Выполнена 	= Истина;
	//	
	//	Попытка
	//		НовЗадача.Записать();
	//	Исключение
	//		стрОшибки = ОписаниеОшибки();
	//		Отказ = Истина;
	//		ОбщиеФункции.СообщитьТекст("Ошибка записи задачи формирования заказа
	//										|" + стрОшибки);
	//		СразуВыполнитьЗадачу = Ложь;
	//		Возврат;
	//	КонецПопытки;
	//	
	//	// Запишем задачу сборки заказа
	//	
	//	//НовЗадача = Задачи.ЗадачаПользователю.СоздатьЗадачу();
	//	//НовЗадача.Дата			= ТекущаяДата();
	//	//НовЗадача.ТочкаМаршрута = БизнесПроцессы.ЗаявкаПокупателя.ТочкиМаршрута.СборкаЗаказа;
	//	//НовЗадача.БизнесПроцесс = СсылкаТекущегоПроцесса;
	//	//НовЗадача.Наименование	= "Сборка нового заказа";
	//	//
	//	//Попытка
	//	//	НовЗадача.Записать();
	//	//Исключение
	//	//	стрОшибки = ОписаниеОшибки();
	//	//	Отказ = Истина;
	//	//	ОбщиеФункции.СообщитьТекст("Ошибка запуска задачи вложенной сборки
	//	//									|" + стрОшибки);
	//	//	СразуВыполнитьЗадачу = Ложь;
	//	//	Возврат;
	//	//КонецПопытки;
	//	//
	//	//// Запишем БП Сборки
	//	//
	//	//НовПроцесс = БизнесПроцессы.СборкаЗаказа.СоздатьБизнесПроцесс();
	//	//НовПроцесс.Дата 			= ТекущаяДата();
	//	//НовПроцесс.Заказ 			= Объект.Заказ;
	//	//НовПроцесс.Склад 			= Объект.Склад;
	//	//НовПроцесс.ЯчеистаяСборка 	= Объект.Склад.Ячеестый;
	//	//НовПроцесс.ВедущаяЗадача	= НовЗадача.Ссылка;
	//	//
	//	//Попытка
	//	//	
	//	//	НовПроцесс.Записать();
	//	//	НовПроцесс.Старт();
	//	//	
	//	//Исключение
	//	//	
	//	//	стрОшибки = ОписаниеОшибки();
	//	//	Отказ = Истина;
	//	//	СразуВыполнитьЗадачу = Ложь;
	//	//	ОбщиеФункции.СообщитьТекст("Ошибка запуска вложенного БП сборки
	//	//									|" + стрОшибки);
	//	//	Возврат;
	//	//	
	//	//КонецПопытки;
	//	
	//ИначеЕсли ЭтоСтарт = Истина Тогда
	//	
	//	// Запишем и проведем заказ
	//	
	//	Если Не ПровестиЗаказ(ТекущийОбъект) Тогда
	//		Отказ = Истина;
	//		Возврат;
	//	КонецЕсли;
	//	
	//ИначеЕсли ЭтоСтарт <> Истина Тогда
	//	
	//	// Запись черновика
	//	
	//	НовДокумент = ПолучитьЗаполненныйЗаказ();
	//	
	//	Если Не ПроведенияДокументов.ПровестиДокумент(НовДокумент,,,РежимЗаписиДокумента.Запись) Тогда
	//		Отказ = Истина;
	//		Возврат;
	//	КонецЕсли;
	//	
	//	ТекущийОбъект.Заказ = НовДокумент.Ссылка;
	//	
	//КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Не ЗначениеЗаполнено(Организация) Тогда Сообщить("Не заполнено поле Организация"); Отказ=Истина КонецЕсли;
	
	ЕстьСтарт = Ложь;
	ПараметрыЗаписи.Свойство("Старт", ЕстьСтарт);
			
КонецПроцедуры

#КонецОбласти

#Область Обработки_табличной_части

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	ФункцииФормДокументов.ОбновитьСтруктуруКолонокТовары(ЭтаФорма, СтруктураКолонокТовары, КэшируемыеФункции.ПолучитьРеквизитыДокумента("НеподтвержденнаяЗаявка"));	
	ФункцииФормДокументов.НоменклатураПриИзменении(
				Элементы.Товары, 
				СтруктураКолонокТовары,
				ТекущиеДанные,,,,
				ТекущиеДанные.Доставка > 0);
				
	Если Не ТекущиеДанные.ЦенаПоУмолчанию = ТекущиеДанные.Цена Тогда
		ТекущиеДанные.ЦенаПоУмолчанию = ТекущиеДанные.Цена КонецЕсли;
									
КонецПроцедуры
&НаКлиенте
Процедура КоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда	Возврат; КонецЕсли;
	
	ПересчитатьСтрокуТовара(ТекущиеДанные);
	
	ФункцииФормДокументов.ОбновитьСтруктуруКолонокТовары(ЭтаФорма, СтруктураКолонокТовары, КэшируемыеФункции.ПолучитьРеквизитыДокумента("НеподтвержденнаяЗаявка"));
	//ФункцииФормДокументов.КоличествоПриИзменении(Элементы.Товары, СтруктураКолонокТовары, ТекущиеДанные);
	
	ФункцииФормДокументов.КоличествоПриИзменении(Элементы.Товары, СтруктураКолонокТовары,,РазмещениеТоваров, Склад);
	
КонецПроцедуры
&НаКлиенте
Процедура ЦенаПриИзменении(Элемент)
	
	// При изменении цены по-умолчанию
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда	Возврат; КонецЕсли;
	
	ПересчитатьСтрокуТовара(ТекущиеДанные);
	
	ФункцииФормДокументов.ОбновитьСтруктуруКолонокТовары(ЭтаФорма, СтруктураКолонокТовары, КэшируемыеФункции.ПолучитьРеквизитыДокумента("НеподтвержденнаяЗаявка"));
	ФункцииФормДокументов.ЦенаПриИзменении(Элементы.Товары, СтруктураКолонокТовары, ТекущиеДанные);

КонецПроцедуры
&НаКлиенте
Процедура СуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда	Возврат; КонецЕсли;
	
	ФункцииФормДокументов.ОбновитьСтруктуруКолонокТовары(ЭтаФорма, СтруктураКолонокТовары, КэшируемыеФункции.ПолучитьРеквизитыДокумента("НеподтвержденнаяЗаявка"));
	ФункцииФормДокументов.СуммаПриИзменении(Элементы.Товары, СтруктураКолонокТовары, ТекущиеДанные, ТекущиеДанные.Доставка > 0);

КонецПроцедуры
&НаКлиенте
Процедура УпаковкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда	Возврат; КонецЕсли;
	
    ФункцииФормДокументов.ОбновитьСтруктуруКолонокТовары(ЭтаФорма, СтруктураКолонокТовары, КэшируемыеФункции.ПолучитьРеквизитыДокумента("НеподтвержденнаяЗаявка"));	
	ФункцииФормДокументов.УпаковкаПриИзменении(
			Элементы.Товары, 
			СтруктураКолонокТовары,
			ТекущиеДанные,,
			ТекущиеДанные.Доставка > 0);

КонецПроцедуры
&НаКлиенте
Процедура ТоварыДоставкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда	Возврат; КонецЕсли;
	
	ПересчитатьСтрокуТовара(ТекущиеДанные);
	
	ФункцииФормДокументов.ОбновитьСтруктуруКолонокТовары(ЭтаФорма, СтруктураКолонокТовары, КэшируемыеФункции.ПолучитьРеквизитыДокумента("НеподтвержденнаяЗаявка"));
 	ФункцииФормДокументов.ЦенаПриИзменении(Элементы.Товары, СтруктураКолонокТовары, ТекущиеДанные);
	
КонецПроцедуры

		
&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент)
	
	ФункцииФормДокументов.ОбновитьСтруктуруКолонокТовары(ЭтаФорма, СтруктураКолонокТовары, КэшируемыеФункции.ПолучитьРеквизитыДокумента("НеподтвержденнаяЗаявка"));
	ФункцииФормДокументов.СтавкаНДСПриИзменении(Элементы.Товары, СтруктураКолонокТовары);

КонецПроцедуры
&НаКлиенте
Процедура СуммаНДСПриИзменении(Элемент)
	
	ФункцииФормДокументов.ОбновитьСтруктуруКолонокТовары(ЭтаФорма, СтруктураКолонокТовары, КэшируемыеФункции.ПолучитьРеквизитыДокумента("НеподтвержденнаяЗаявка"));
	ФункцииФормДокументов.СуммаНДСПриИзменении(Элементы.Товары, СтруктураКолонокТовары);
	
КонецПроцедуры
&НаКлиенте
Процедура ПроцентРучнойСкидкиПриИзменении(Элемент)
	
    ФункцииФормДокументов.ОбновитьСтруктуруКолонокТовары(ЭтаФорма, СтруктураКолонокТовары, КэшируемыеФункции.ПолучитьРеквизитыДокумента("НеподтвержденнаяЗаявка"));	
	ФункцииФормДокументов.ПроцентРучнойСкидкиПриИзменении(Элементы.Товары, СтруктураКолонокТовары);

КонецПроцедуры
&НаКлиенте
Процедура СуммаРучнойСкидкиПриИзменении(Элемент)
	
    ФункцииФормДокументов.ОбновитьСтруктуруКолонокТовары(ЭтаФорма, СтруктураКолонокТовары, КэшируемыеФункции.ПолучитьРеквизитыДокумента("НеподтвержденнаяЗаявка"));	
	ФункцииФормДокументов.СуммаРучнойСкидкиПриИзменении(Элементы.Товары, СтруктураКолонокТовары);
 
КонецПроцедуры


&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	УправлениеВидимостьюДоступностью();
	
КонецПроцедуры
&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	УправлениеВидимостьюДоступностью();
	
КонецПроцедуры

&НаКлиенте
Процедура РазмещениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если СпособРазмещенияБезЗаказа Тогда
		ДиалогиСПользователем.НачалоВыбораРазмещения(ЭтаФорма, Элемент, Объект.Заказ, Склад, СтандартнаяОбработка) КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура РазмещениеОчистка(Элемент, СтандартнаяОбработка)
	
	Если СпособРазмещенияБезЗаказа Тогда
		ДиалогиСПользователем.ОчиститьРазмещениеВСтроке(Элементы.Товары.ТекущиеДанные, РазмещениеТоваров, СтандартнаяОбработка); КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПоказатьРазмещениеТоваров(Элемент)
	
	Элементы.РазмещениеТоваров.Видимость = Не Элементы.РазмещениеТоваров.Видимость;
	
КонецПроцедуры

#КонецОбласти

#Область Подбор

&НаСервере
Функция ПоместитьТоварыВХранилище(СтруктураКолонокТовары, ТолькоРабочие=Истина) 
	
	Если Товары.Итог("Доставка") Тогда
		Для Каждого Строка Из Товары Цикл Если Строка.Доставка Тогда
				
			Строка.Цена = Строка.ЦенаПоУмолчанию;
			Строка.Доставка = 0;
			//ФункцииФормДокументов.РассчитатьСуммыТабличныхЧастей(Строка, СтруктураКолонокТовары); КонецЕсли;
			ФункцииФормДокументов.РассчитатьСуммыСтрокиОтЦены(Строка, СтруктураКолонокТовары); КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат ПоместитьВоВременноеХранилище(
					?(ТолькоРабочие, РабочииТовары(,СтруктураКолонокТовары, Истина), Товары.Выгрузить()), 
					УникальныйИдентификатор);
КонецФункции
&НаКлиенте
Процедура ПодборВыполнить()
	ФункцииФормДокументов.ОбновитьСтруктуруКолонокТовары(ЭтаФорма, СтруктураКолонокТовары, КэшируемыеФункции.ПолучитьРеквизитыДокумента("НеподтвержденнаяЗаявка"));

	ИдентификаторВремени = ДиалогиСПользователем.НачалоЗамераВремени("Подбор.Открытие", Объект.Ссылка);
	
	ИмяТабличнойЧасти = "Товары";
	
	//ВозможностьДублейСтрок
	КоличествоВРаботе = Товары.Итог("КоличествоСобрано") + Товары.Итог("КоличествоОтгружено") + Товары.Итог("КоличествоОтменено");
	АдресТоваровВХранилище = ПоместитьТоварыВХранилище(СтруктураКолонокТовары,?(КоличествоВРаботе>0,Истина,Ложь));
	//АдресТоваровВХранилище = ПоместитьТоварыВХранилище(СтруктураКолонокТовары);
	
	
	ПараметрыПодбора = Новый Структура("АдресТоваровВХранилище", АдресТоваровВХранилище);
	//СтруктураКолонокТовары.ЕстьДоставка = Ложь;
	ПараметрыПодбора.Вставить("СтруктураКолонокТовары", СтруктураКолонокТовары);
	//ПараметрыПодбора.Вставить("ВидЗапроса", "ОстаткиНоменклатуры");
	//ПараметрыПодбора.Вставить("ВидыЗапросов", "СписокНоменклатуры");
	ПараметрыПодбора.Вставить("Контрагент", 		Контрагент); 	
	ПараметрыПодбора.Вставить("Склад", 			Склад);
	ПараметрыПодбора.Вставить("ТипЦен", 		ТипЦен);
   	ПараметрыПодбора.Вставить("Валюта", 		Валюта);
	ПараметрыПодбора.Вставить("ЦенаВключаетНДС", СуммаВключаетНДС);
	
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаПодбора", ПараметрыПодбора, Элементы.Товары);
	//СтруктураКолонокТовары.ЕстьДоставка = Истина;
	
	ДиалогиСПользователем.ОкончаниеЗамераВремени(ИдентификаторВремени);
	
КонецПроцедуры
&НаСервере
Процедура ПолучитьТоварыИзХранилища(АдресТоваровВХранилище)
	
	СклеитьТаблицыТоваров(ПолучитьИзВременногоХранилища(АдресТоваровВХранилище));
	
	Для Каждого Строка Из Товары Цикл
	
		Строка.ЦенаПоУмолчанию = Строка.Цена;
				
	КонецЦикла;
	
КонецПроцедуры
&НаКлиенте
Процедура ТоварыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение <> Неопределено Тогда		
		
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
			ПолучитьТоварыИзХранилища(ВыбранноеЗначение.Товары);		// получаем
			УдалитьИзВременногоХранилища(ВыбранноеЗначение.Товары); 	// заметаем следы
		Иначе
			ПолучитьТоварыИзХранилища(ВыбранноеЗначение);		// получаем
			УдалитьИзВременногоХранилища(ВыбранноеЗначение); 	// заметаем следы
		КонецЕсли;
			
		Модифицированность = Истина;
		УправлениеВидимостьюДоступностью();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// ИНФОРМАЦИЯ О ТОВАРЕ

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	// информация о товаре
	ОбработатьОтображениеИнформацииОТоваре();
	
КонецПроцедуры
//&НаСервере
//Процедура ОбработатьОтображениеИнформацииОТоваре() Экспорт
//	РаботаСНоменклатурой.ОбработатьОтображениеИнформацииОТоваре(ЭтаФорма);
//КонецПроцедуры
&НаКлиенте
Процедура ОбработатьОтображениеИнформацииОТоваре() Экспорт
	РаботаСНоменклатуройКлиент.ОбработатьОтображениеИнформацииОТоваре(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ИнфТовараТекстHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	РаботаСНоменклатуройКлиент.ИнфТовараТекстHTMLПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры
&НаКлиенте
Процедура ИнфТовараЗаголовокHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	РаботаСНоменклатуройКлиент.ИнфТовараЗаголовокHTMLПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры

 &НаКлиенте
Процедура ПоказатьСкрытьИнфОТоваре(Команда)
	РаботаСНоменклатуройКлиент.ПоказатьСкрытьИнфОТоваре(ЭтаФорма);
КонецПроцедуры
&НаКлиенте
Процедура НастройкаИнфОТоваре(Команда) 
	РаботаСНоменклатуройКлиент.НастройкаИнфОТоваре(ЭтаФорма);
КонецПроцедуры


// КОММЕНТАРИИ

&НаКлиенте
Процедура КомандаПоказатьКомментарий(Команда)
	ФункцииБизнесПроцессовКлиент.КомандаПоказатьКомментарий(ЭтаФорма);
КонецПроцедуры

 &НаСервере
Процедура УстановитьФильтрПоПартнеру()
	Если Контрагент.Пустая() Тогда
		НовыйМассив = Новый Массив();
		Элементы.Контрагент.СвязиПараметровВыбора = Новый ФиксированныйМассив(НовыйМассив);
	Иначе
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(Новый СвязьПараметраВыбора("Отбор.Контрагент", "Контрагент"));
		Элементы.Контрагент.СвязиПараметровВыбора = Новый ФиксированныйМассив(НовыйМассив);
		
	КонецЕсли;
КонецПроцедуры

// ПРИ ИЗМЕНЕНИИ ОСНОВНЫХ РЕКВИЗИТОВ
&НаСервере
Процедура ПриИзмененииРеквизитаВлияющегоНаТабличнуюЧасть(СтруктураКолонокТовары, ОбновитьСтруктуру = Истина, ПересчитатьЦену = Ложь)
	
	Если ОбновитьСтруктуру Тогда
		ФункцииФормДокументов.ОбновитьСтруктуруКолонокТовары(
				ЭтаФорма, 
				СтруктураКолонокТовары, 
				КэшируемыеФункции.ПолучитьРеквизитыДокумента("НеподтвержденнаяЗаявка"));
	КонецЕсли;
	/////////временный кусок//////////////////
	Если СтруктураКолонокТовары.УчитыватьНДС Тогда                                                                                                                                                                                                                                                //
		ДиалогиСПользователем.ОбработатьВыборСтавкиНДС(?(ПолучитьФункциональнуюОпцию("НемецкийУчет"),Перечисления.СтавкиНДС.НДС19,Перечисления.СтавкиНДС.НДС18), Новый Структура("Таблица, СтруктураКолонокТовары, ВыражениеФильтра", Товары, СтруктураКолонокТовары, "Не Строка.Отгружено"));    //
	ИначеЕсли НЕ СтруктураКолонокТовары.УчитыватьНДС Тогда                                                                                                                                                                                                                                        //
		ДиалогиСПользователем.ОбработатьВыборСтавкиНДС(Перечисления.СтавкиНДС.БезНДС, Новый Структура("Таблица, СтруктураКолонокТовары, ВыражениеФильтра", Товары, СтруктураКолонокТовары, "Не Строка.Отгружено"));                                                                                //
	конецЕсли;
	////////////////////////////////
	ФункцииФормДокументов.ПересчитатьСуммыТабличныхЧастей(Товары, СтруктураКолонокТовары, ПересчитатьЦену);
	
	//ФункцииФормДокументов.ОбновитьПодвал(ЭтаФорма, Элементы, ВсегоПоЗаказу, СтруктураКолонокТовары,, "ВсегоНДС", ВсегоНДС);
	//
	//
	//Всего = Товары.Итог("Всего");
	//ВсегоНДС = Товары.Итог("СуммаНДС");
	
КонецПроцедуры  

&НаКлиенте
Процедура СохранитьТекущиеЗначенияПараметров()
	
	// сохраняем текущие значения параметров
	
	СтруктураКолонокТовары.стТипЦен = ТипЦен;
	СтруктураКолонокТовары.стУчитыватьНДС = УчитыватьНДС;
	СтруктураКолонокТовары.стСуммаВключаетНДС = СтруктураКолонокТовары.СуммаВключаетНДС;
	СтруктураКолонокТовары.стВалюта = СтруктураКолонокТовары.Валюта;
	
КонецПроцедуры


&НаСервере
Процедура ПартнерПриИзмененииНаСервере(СтруктураКолонокТовары = Неопределено) 
	
	//Заказ = Объект.Заказ.ПолучитьОбъект();
	//Заказ.Партнер = Партнер;
	//ФункцииФормДокументов.ПартнерПриИзменении(Заказ);
	СтруктураКолонокТовары = ФункцииФормДокументов.ПолучитьСтруктуруКолонокТовары(Элементы.Товары, СуммаВключаетНДС, ТипЦен,,,Валюта,УчитыватьНДС,,,,,,Контрагент);       
	ФункцииФормДокументов.ПартнерПриИзменении(ЭтаФорма);
	//УстановитьФильтрПоПартнеру();
	
	Если СтруктураКолонокТовары <> Неопределено Тогда     
		//ФункцииФормДокументов.ОбновитьСтруктуруКолонокТовары(
		//		ЭтаФорма, 
		//		СтруктураКолонокТовары, 
		//		КэшируемыеФункции.ПолучитьРеквизитыДокумента("ЗаказПокупателя")); 	

        ПриИзмененииРеквизитаВлияющегоНаТабличнуюЧасть(СтруктураКолонокТовары); 		
		Если Товары.Количество() Тогда
			РаботаСНоменклатурой.ПересчитатьАкциюДляТоваров(Контрагент, ТипЦен, Товары, СтруктураКолонокТовары, Валюта, Ложь,,Истина); КонецЕсли;
	
	КонецЕсли;		    			
	
	ВариантДоставкиНов = ?(ЗначениеЗаполнено(Контрагент.ВариантДоставки), Контрагент.ВариантДоставки, ВариантДоставкиНов );
	ЗаЧейСчетДоставка  = ?(ЗначениеЗаполнено(Контрагент.ЗаЧейСчетДоставка), Контрагент.ЗаЧейСчетДоставка, ЗаЧейСчетДоставка );
	
	Грузоперевозчик = Партнер.ОсновнойГрузоперевозчик;
	
	ЗаполнитьРеквизитыДоставки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	
	стТипЦЕн = ТипЦен;
	
	ЗаполнитьПроцентАвтоматическойСкидки();
	ПартнерПриИзмененииНаСервере();
	ТипЦенПриИзменении(Элемент);
	
	//СтруктураКолонокТовары.ТипЦен = ТипЦен;
	//СтруктураКолонокТовары.УчитыватьНДС = УчитыватьНДС;
	//СтруктураКолонокТовары.ДисконтнаяКарта = ДисконтнаяКарта;
	//СтруктураКолонокТовары.Партнер = Партнер;
	//СтруктураКолонокТовары = ФункцииФормДокументов.ПолучитьСтруктуруКолонокТовары(Элементы.Товары, СуммаВключаетНДС, ТипЦен, , , Валюта, УчитыватьНДС);

	//ОбновитьТаблицуТоваров();
	//ПриИзмененииРеквизитаВлияющегоНаТабличнуюЧасть(СтруктураКолонокТовары,,стТипЦЕн <> ТипЦен);
	СохранитьТекущиеЗначенияПараметров();
	
    ФункцииФормДокументов.ОбновитьСтруктуруКолонокТовары(ЭтаФорма, СтруктураКолонокТовары, КэшируемыеФункции.ПолучитьРеквизитыДокумента("НеподтвержденнаяЗаявка"));

	ОбновитьИнформациюОДолге();
	
	Если ПартнерРаботаетПоПередаче(Контрагент) Тогда	
		ПоказатьВопрос(Новый ОписаниеОповещения("ВыборПередачаТовара", ЭтаФорма), "Для Контрагента выбран вид отгрузки - Перадача товара. Применить для данного заказа?", РежимДиалогаВопрос.ДаНет);
	Иначе
		ПередачаТовара = Ложь; Элементы.ГруппаВариантОтгрузки.Видимость = ПередачаТовара;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере(СтруктураКолонокТовары = Неопределено) 
	
	Партнер = Контрагент.Партнер;
	
	СтруктураКолонокТовары = ФункцииФормДокументов.ПолучитьСтруктуруКолонокТовары(Элементы.Товары, СуммаВключаетНДС, ТипЦен,,,Валюта,УчитыватьНДС,,,,,,Контрагент);       
	ФункцииФормДокументов.КонтрагентПриИзменении(ЭтаФорма);
	
	Если СтруктураКолонокТовары <> Неопределено Тогда     

        ПриИзмененииРеквизитаВлияющегоНаТабличнуюЧасть(СтруктураКолонокТовары); 
		
		Если Товары.Количество() Тогда
			РаботаСНоменклатурой.ПересчитатьАкциюДляТоваров(Контрагент, ТипЦен, Товары, СтруктураКолонокТовары, Валюта, Ложь,,Истина); 
		КонецЕсли;
	
	КонецЕсли;	
	
	
	ЗаполнитьРеквизитыДоставки();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	стТипЦЕн = ТипЦен;
		
	ЗаполнитьПроцентАвтоматическойСкидки();
	КонтрагентПриИзмененииНаСервере();
	ТипЦенПриИзменении(Элемент);
	
	СохранитьТекущиеЗначенияПараметров();
	
    ФункцииФормДокументов.ОбновитьСтруктуруКолонокТовары(ЭтаФорма, СтруктураКолонокТовары, КэшируемыеФункции.ПолучитьРеквизитыДокумента("НеподтвержденнаяЗаявка"));

	ОбновитьИнформациюОДолге();
	
	Если ПартнерРаботаетПоПередаче(Контрагент) Тогда	
		ПоказатьВопрос(Новый ОписаниеОповещения("ВыборПередачаТовара", ЭтаФорма), "Для Контрагента выбран вид отгрузки - Перадача товара. Применить для данного заказа?", РежимДиалогаВопрос.ДаНет);
	Иначе
		ПередачаТовара = Ложь; Элементы.ГруппаВариантОтгрузки.Видимость = ПередачаТовара;
	КонецЕсли;
	
	Грузополучатель = ФункцииФормДокументовСервер.ГрузополучательПриИзмененииРеквизита(Контрагент);
	МенеджерЗаказа = ФункцииФормДокументовСервер.МенеджерЗаказаПриИзмененииРеквизита(Контрагент,Грузополучатель);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыДоставки()
	
	ВариантДоставкиНов = ?(ЗначениеЗаполнено(Контрагент.ВариантДоставки), Контрагент.ВариантДоставки, ВариантДоставкиНов );
	ЗаЧейСчетДоставка  = ?(ЗначениеЗаполнено(Контрагент.ЗаЧейСчетДоставка), Контрагент.ЗаЧейСчетДоставка, ЗаЧейСчетДоставка );
	
	Грузоперевозчик = Партнер.ОсновнойГрузоперевозчик;
	
	//заполнение реквизитов доставки
	Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("Партнер",Партнер);
	Запрос.УстановитьПараметр("Контрагент",Контрагент);
	
	//Адрес доставки. Если единственный, то подставляем его.
	Запрос.Текст="Выбрать Представление из РегистрСведений.ПредставлениеКонтактнойИнформации где (Объект=&Контрагент) и Вид в иерархии(Значение(Справочник.ВидыКонтактнойИнформации.Адрес)) Упорядочить по ЗначениеПоУМолчанию Убыв";
	ТЗ=Запрос.Выполнить().Выгрузить();
	Если ТЗ.Количество()>0 Тогда
		АдресДоставкиНов = ТЗ[0].Представление;
	Иначе	
		АдресДоставкиНов = "";
	КонецЕсли;
	
	//Контактное лицо. Если одно, то подставляем его.
	Запрос.Текст="Выбрать Ссылка из Справочник.КонтактныеЛица ГДЕ Владелец=&Контрагент Упорядочить по ЗначениеПоУМолчанию Убыв";
	ТЗ=Запрос.Выполнить().Выгрузить();
	Если ТЗ.Количество()>0 Тогда
		КонтактноеЛицоДоставки = ТЗ[0].Ссылка;
	ИначеЕсли ТЗ.Количество()=0 и Контрагент.ЮрФизЛицо=Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		//если нет и это физ лицо, то создадим новое
		КЛ=Справочники.КонтактныеЛица.СоздатьЭлемент();
		КЛ.Владелец = Контрагент;
		КЛ.Наименование = Контрагент.Наименование;
		КЛ.Записать();
		КонтактноеЛицоДоставки = КЛ.Ссылка;
	Иначе	
		КонтактноеЛицоДоставки=ПредопределенноеЗначение("Справочник.КонтактныеЛица.ПустаяСсылка");
	КонецЕсли;
	
	//Телефон контактного лица. Сначала ищем в контактном лице, если один то подставляем.
	Если ЗначениеЗаполнено(КонтактноеЛицоДоставки) Тогда
		Запрос.УстановитьПараметр("КонтактноеЛицоДоставки",КонтактноеЛицоДоставки);
		Запрос.Текст="Выбрать Представление из РегистрСведений.ПредставлениеКонтактнойИнформации где Объект=&КонтактноеЛицоДоставки и Вид в иерархии(Значение(Справочник.ВидыКонтактнойИнформации.Телефон)) Упорядочить по ЗначениеПоУМолчанию Убыв";
		ТЗ=Запрос.Выполнить().Выгрузить();
		Если ТЗ.Количество()>0 Тогда
			ТелефонКонтактногоЛицаДоставки = ТЗ[0].Представление;
			
		Иначе			//Если нет, то ищем в Контрагенте и контрагенте. Если один, то подставляем.
			Запрос.Текст="Выбрать Представление из РегистрСведений.ПредставлениеКонтактнойИнформации где (Объект=&Контрагент) и Вид в иерархии(Значение(Справочник.ВидыКонтактнойИнформации.Телефон)) Упорядочить по ЗначениеПоУМолчанию Убыв";
			ТЗ=Запрос.Выполнить().Выгрузить();
			Если ТЗ.Количество()>0  Тогда
				ТелефонКонтактногоЛицаДоставки = ТЗ[0].Представление;
			Иначе	
				ТелефонКонтактногоЛицаДоставки = "";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	


&НаСервере
Функция ПартнерРаботаетПоПередаче(Контрагент)
	Возврат Контрагент.ПередачаТовара;
КонецФункции

&НаКлиенте
Процедура ВыборПередачаТовара(Результат, Параметры) Экспорт
	Если Результат <> Неопределено Тогда ПередачаТовара = Результат = КодВозвратаДиалога.Да; Элементы.ГруппаВариантОтгрузки.Видимость = ПередачаТовара; КонецЕсли;	
КонецПроцедуры


&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	ФункцииФормДокументов.ОрганизацияПриИзменении(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
//	СтруктураКолонокТовары.УчитыватьНДС = УчитыватьНДС;
	
	//СтруктураКолонокТовары = ФункцииФормДокументов.ПолучитьСтруктуруКолонокТовары(Элементы.Товары, СуммаВключаетНДС, ТипЦен, , , Валюта, УчитыватьНДС);

	//ОбновитьТаблицуТоваров();
	ПриИзмененииРеквизитаВлияющегоНаТабличнуюЧасть(СтруктураКолонокТовары);
//    СтруктураКолонокТовары.стУчитыватьНДС = УчитыватьНДС;

	ОбновитьИнформациюОДолге();

	Грузоотправитель = ФункцииФормДокументовСервер.ГрузополучательПриИзмененииРеквизита(Организация);
КонецПроцедуры

&НаСервере
Процедура ДобавитьТовар(Ссылка, СтруктураКолонокТовары)
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	Док.Номенклатура                        КАК Номенклатура,
		|	Док.Номенклатура.Код                    КАК Код,
		|	Док.Номенклатура.Артикул                КАК Артикул,
		|	ПОДСТРОКА(Док.Номенклатура.НаименованиеПолное,1, 100)     КАК НаименованиеПолное,
		|	Док.Упаковка							КАК Упаковка,
		|	Док.Цена                        	КАК Цена,
		|	СУММА(Док.КоличествоПриход)				КАК Количество,
		|	СУММА(Док.СуммаПриход)						КАК Сумма,
		|	Док.СтавкаНДС			        		КАК СтавкаНДС  
		|	
		|ИЗ
		|	РегистрНакопления.ЗаказыПокупателей.ОстаткиИОбороты(,&ДатаВыполнения,,,ЗаказПокупателя = &Ссылка) Док
		|СГРУППИРОВАТЬ ПО Док.Номенклатура, Док.Упаковка, Док.Цена, Док.СтавкаНДС");
		
  	ДатаВыполнения = ТекущаяДата();
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка.Заказ);
	Запрос.УстановитьПараметр("ДатаВыполнения", ДатаВыполнения);

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураПоиска = Новый Структура("Номенклатура, Цена, Упаковка");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
		Строки = Товары.НайтиСтроки(СтруктураПоиска);
		
				
		Если Не Строки.Количество() Тогда
			// Отработаем новую строку

			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
  			//ФункцииФормДокументов.РассчитатьСуммыТабличныхЧастей(НоваяСтрока, СтруктураКолонокТовары);
			ФункцииФормДокументов.РассчитатьСуммыСтрокиОтЦены(НоваяСтрока, СтруктураКолонокТовары);
		Иначе
		// Обработаем найденную
		
			Строка = Строки[0];
			Строка.Количество = Строка.Количество + Выборка.Количество;
			//ФункцииФормДокументов.РассчитатьСуммыТабличныхЧастей(Строка, СтруктураКолонокТовары);
			ФункцииФормДокументов.РассчитатьСуммыСтрокиОтЦены(Строка, СтруктураКолонокТовары)
		
		КонецЕсли;
		
	КонецЦикла;
	
	//Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//	|	Док.Номенклатура                        КАК Номенклатура,
	//	|	Док.Номенклатура.Код                    КАК Код,
	//	|	Док.Номенклатура.Артикул                КАК Артикул,
	//	|	Док.Номенклатура.НаименованиеПолное     КАК НаименованиеПолное,
	//	|	Док.Упаковка							КАК Упаковка,
	//	|	Док.Цена                        	КАК Цена,
	//	|	Док.КоличествоПриход				КАК Количество,
	//	|	Док.СуммаПриход						КАК Сумма,
	//	|	Док.СтавкаНДС			        		КАК СтавкаНДС  
	//	|	
	//	|ИЗ
	//	|	РегистрНакопления.ИнтернетЗаказПокупателя.ОстаткиИОбороты(,&ДатаВыполнения,,,ИнтернетЗаказ = &Ссылка) Док");
	//	
	//  ДатаВыполнения = ТекущаяДата();
	//
	//Запрос.УстановитьПараметр("Ссылка", Ссылка);
	//Запрос.УстановитьПараметр("ДатаВыполнения", ДатаВыполнения);

	//Выборка = Запрос.Выполнить().Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	
	//	СтруктураПоиска = Новый Структура("Номенклатура, Цена, Упаковка");
	//	ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
	//	Строки = Товары.НайтиСтроки(СтруктураПоиска);
	//	
	//			
	//	Если Не Строки.Количество() Тогда
	//		// Отработаем новую строку

	//		НоваяСтрока = Товары.Добавить(); 
	//		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	//						   
	//  		//ФункцииФормДокументов.РассчитатьСуммыТабличныхЧастей(НоваяСтрока, СтруктураКолонокТовары);
	//		ФункцииФормДокументов.РассчитатьСуммыСтрокиОтЦены(НоваяСтрока, СтруктураКолонокТовары);
	//		
	//	Иначе
	//	// Обработаем найденную
	//	
	//		Строка = Строки[0];
	//		Строка.Количество = Строка.Количество + Выборка.Количество;
	//		//ФункцииФормДокументов.РассчитатьСуммыТабличныхЧастей(Строка, СтруктураКолонокТовары);
	//		ФункцииФормДокументов.РассчитатьСуммыСтрокиОтЦены(Строка, СтруктураКолонокТовары);
	//	
	//	КонецЕсли;
	//	
	//КонецЦикла;
	
КонецПроцедуры	
	
&НаКлиенте
Процедура ЗаполнитьПоЗаказу(Команда)
	
	ВыбранноеЗначение = ОткрытьФорму("Документ.НеподтвержденнаяЗаявка.ФормаВыбора",,,,,,Новый ОписаниеОповещения("ОбработкаЗаполненияПоЗаказу",ЭтаФорма,));
КонецПроцедуры
&НаКлиенте
Процедура ОбработкаЗаполненияПоЗаказу(Результат, Параметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ДобавитьТовар(Результат, СтруктураКолонокТовары);
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
КонецПроцедуры

&НаКлиенте
Процедура ТипЦенПриИзменении(Элемент)
	
	СтруктураКолонокТовары.Вставить("ТипЦен", ТипЦен);
	
	Если ФункцииФормДокументов.ДиалогПриИзмененииТипаЦен(Товары.Количество(), СтруктураКолонокТовары, ТипЦен) Тогда
		
		ПриИзмененииРеквизитаВлияющегоНаТабличнуюЧасть(СтруктураКолонокТовары,, Истина);
		
	КонецЕсли;
	
	СтруктураКолонокТовары.Вставить("стТипЦен", ТипЦен);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗапрещеноВыбиратьТипЦенВДокументах(ВыбранноеЗначение)
	Возврат ФункцииФормДокументов.ЗапрещеноВыбиратьТипЦенВДокументах(ВыбранноеЗначение);
КонецФункции		

&НаКлиенте
Процедура ТипЦенОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ЗапрещеноВыбиратьТипЦенВДокументах(ВыбранноеЗначение) Тогда
		ПоказатьПредупреждение(,"Данный тип цен запрещен к выбору");
		СтандартнаяОбработка=Ложь;
	КонецЕсли;	
КонецПроцедуры
	

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	СтруктураКолонокТовары.Валюта = Валюта;
	
	Если ФункцииФормДокументов.ДиалогПриИзмененииВалюты(Товары.Количество(), СтруктураКолонокТовары, Валюта) Тогда
		
		ПриИзмененииРеквизитаВлияющегоНаТабличнуюЧасть(СтруктураКолонокТовары,, Истина);
		
	КонецЕсли;

	СтруктураКолонокТовары.стВалюта = СтруктураКолонокТовары.Валюта;

КонецПроцедуры

&НаКлиенте
Процедура СуммаВключаетНДСПриИзменении(Элемент)
	СтруктураКолонокТовары.СуммаВключаетНДС = СуммаВключаетНДС;
	
	Если ФункцииФормДокументов.ДиалогПриИзмененииСуммаВключаетНДС(СуммаВключаетНДС, Товары.Количество(), СтруктураКолонокТовары) Тогда
		
		ПриИзмененииРеквизитаВлияющегоНаТабличнуюЧасть(СтруктураКолонокТовары);
		
	КонецЕсли;

	СтруктураКолонокТовары.стСуммаВключаетНДС = СтруктураКолонокТовары.СуммаВключаетНДС;	

КонецПроцедуры



#Область Корзина

#Если Не ВебКлиент Тогда
&НаСервере
Функция ПоложитьВКорзинуНаСервере(ВыделенныеИндексы, ИмяКомпа, КолВКорзине)
	
	Возврат МодульКорзины.ПоложитьТоварВКорзину(Товары, ВыделенныеИндексы, ИмяКомпа, КолВКорзине);
	
КонецФункции
#КонецЕсли

#Если Не ВебКлиент Тогда
&НаКлиенте
Процедура ДобавитьВКорзину(Команда)
	
	ВыделенныеИндексы 	= МодульКорзины.ПолучитьВыделенныеСтрокиТоваров(Элементы.Товары, Товары);
	КолВКорзине 		= 0;
	КолТовара			= ВыделенныеИндексы.Количество();
	
	
	Если КолТовара Тогда
		
		Если ПоложитьВКорзинуНаСервере(ВыделенныеИндексы, ИмяКомпьютера(), КолВКорзине) Тогда
			МодульКорзины.ОповеститьОПомещенииТовара(КолТовара, КолВКорзине);
		КонецЕсли;
		
	Иначе
		
		МодульКорзины.ОповеститьЧтоНечегоДобавлять();
				
	КонецЕсли;
	
КонецПроцедуры
#КонецЕсли

#Если Не ВебКлиент Тогда
&НаСервере
Процедура ДобавитьИзКорзиныНаСервере(ИмяКомпа, СтруктураКолонокТовары, КолСтрок)
	
	МодульКорзины.ПолучитьТоварИзКорзины(Элементы.Товары, Товары, СтруктураКолонокТовары, ИмяКомпа, КолСтрок,,СпособРазмещенияБезЗаказа);
	
КонецПроцедуры
#КонецЕсли

#Если Не ВебКлиент Тогда
&НаКлиенте
Процедура ВставитьИзКорзины(Команда)
	
	КолСтрок = 0;
	ДобавитьИзКорзиныНаСервере(ИмяКомпьютера(), СтруктураКолонокТовары, КолСтрок);
	
	Если КолСтрок Тогда
		
		МодульКорзины.ОповеститьОВставкеТовараВДокумент(КолСтрок, Товары.Количество());
		
	Иначе
		
		МодульКорзины.ОповеститьЧтоНечегоДобавлять();
		
	КонецЕсли;
	
КонецПроцедуры
#КонецЕсли

#Если Не ВебКлиент Тогда
&НаКлиенте
Процедура РедактироватьТоварВКорзине(Команда)
	
	ОткрытьФорму("РегистрСведений.Корзина.Форма.Форма");
	
КонецПроцедуры
#КонецЕсли

#Если Не ВебКлиент Тогда
&НаСервере
Функция ОчиститьНаСервере(ИмяКомпа)
	
	Возврат МодульКорзины.ОчиститьКорзину(ИмяКомпа);
	
КонецФункции
#КонецЕсли

#Если Не ВебКлиент Тогда
&НаКлиенте
Процедура ОчиститьКорзину(Команда)
	
	Если ОчиститьНаСервере(ИмяКомпьютера()) Тогда
		
		МодульКорзины.ОповеститьЧтоКорзинаОчищена();
		
	КонецЕсли;
	
КонецПроцедуры
#КонецЕсли

#КонецОбласти

&НаКлиенте
Процедура СуммаДоставкиВключенаВТоварПриИзменении(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ВключитьДоставку(Команда)
	
	ФункцииФормДокументов.ОбновитьСтруктуруКолонокТовары(ЭтаФорма, СтруктураКолонокТовары, КэшируемыеФункции.ПолучитьРеквизитыДокумента("НеподтвержденнаяЗаявка"));

	ВвестиЧисло(СуммаДоставки, "Введите сумму доставки", 10, 2); 
	ВключитьДоставкуНаСервере(СтруктураКолонокТовары);
	УправлениеВидимостьюДоступностью();
КонецПроцедуры
&НаСервере
Процедура ВключитьДоставкуНаСервере(СтруктураКолонокТовары, Доставка = 0)
	
	Если Доставка = 0 Тогда
		Доставка = СуммаДоставки;
	КонецЕсли;
		
	// Найдем позицию, начиная с товара с меньшей стоимостью, у которой при делении Доставки на Количество товара будет целая дробная часть или хотя бы с разрядностью до сотых
	
	мин = 9999999999; ид = -1;
	
	Для Каждого Строка Из Товары Цикл Строка.Доставка = 0; Строка.Цена = Строка.ЦенаПоУмолчанию;
		Если Строка.Количество И Строка.Цена Тогда
			СтоимостьДоставки = Доставка/Строка.Количество;
			Если СтоимостьДоставки - Окр(СтоимостьДоставки, 2) = 0 И Строка.Цена < мин Тогда
				мин = Строка.Цена; ид = Строка.ПолучитьИдентификатор();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
			
	НайтиСтроку = Товары.НайтиПоИдентификатору(Ид) ;
	Если НайтиСтроку <> Неопределено Тогда
		
		НайтиСтроку.Доставка = Доставка;
		НайтиСтроку.Цена = НайтиСтроку.ЦенаПоУмолчанию + Доставка/НайтиСтроку.Количество;
 		ФункцииФормДокументов.ЦенаПриИзменении(Элементы.Товары, СтруктураКолонокТовары, НайтиСтроку);
		
		Возврат; КонецЕсли;
	
	Сообщить("Невозможно включить доставку в стоимость какой-либо позиции.");
	
КонецПроцедуры
&НаКлиенте
Процедура ПересчитатьСтрокуТовара(ТекущиеДанные)
	Если ТекущиеДанные.Количество = 0 Тогда
		ТекущиеДанные.Доставка = 0;
	Иначе
		СтоимостьДоставки = ТекущиеДанные.Доставка/ТекущиеДанные.Количество;
 		Если СтоимостьДоставки - Окр(СтоимостьДоставки, 2) <> 0 Тогда ТекущиеДанные.Доставка = 0; СтоимостьДоставки = 0; Сообщить("Невозможно включить доставку для текущей позиции."); КонецЕсли;
	КонецЕсли;
	
	ТекущиеДанные.Цена = ТекущиеДанные.ЦенаПоУмолчанию + СтоимостьДоставки;  		
	
КонецПроцедуры

//&НаСервере
//Процедура ПересчитатьСтрокуТовараНаСервере(ТекущиеДанные)
//	Если ТекущиеДанные.Количество = 0 Тогда
//		ТекущиеДанные.Доставка = 0;
//	Иначе
//		СтоимостьДоставки = ТекущиеДанные.Доставка/ТекущиеДанные.Количество;
// 		Если СтоимостьДоставки - Окр(СтоимостьДоставки, 2) <> 0 Тогда ТекущиеДанные.Доставка = 0; СтоимостьДоставки = 0; Сообщить("Невозможно включить доставку для текущей позиции."); КонецЕсли;
//	КонецЕсли;
//	
//	ТекущиеДанные.Цена = ТекущиеДанные.ЦенаПоУмолчанию + СтоимостьДоставки;  		
//КонецПроцедуры


&НаКлиенте
Процедура ДисконтнаяКартаПриИзменении(Элемент)
	
	// вставить проверку на владельца
	ЗаполнитьПроцентАвтоматическойСкидки();
	СтруктураКолонокТовары.Вставить("ДисконтнаяКарта", ДисконтнаяКарта);
	ПриИзмененииРеквизитаВлияющегоНаТабличнуюЧасть(СтруктураКолонокТовары);//ДисконтнаяКартаПриИзмененииНаСервере(СтруктураКолонокТовары);
	

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПроцентАвтоматическойСкидки()
	
	Для Каждого Строка Из Товары Цикл
		Строка.ПроцентАвтоматическойСкидки = РаботаСНоменклатурой.ПолучитьПроцентАвтоматическойСкидки(Строка.Номенклатура, Контрагент, ДисконтнаяКарта, Строка.Акция); 
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДоступностьРедактированияСТроки(текДанные, Отказ)
	
	Если текДанные.Отгружено Тогда
		
		//Отказ = Истина;
		ОбщиеФункции.СообщитьТекст("Товар уже отгружен, изменять его запрещено");
		
	ИначеЕсли текДанные.Собрано Тогда
		
		ИмяЭлемента = Элементы.Товары.ТекущийЭлемент.Имя;
		
		Если 	ИмяЭлемента = "Количество" Или 
				ИмяЭлемента = "Номенклатура" Или
				ИмяЭлемента = "Размещение" Или
				ИмяЭлемента = "Упаковка" Тогда
		
			//Отказ = Истина;
			ОбщиеФункции.СообщитьТекст("Товар уже собран, изменять его запрещено");
			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры
&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	ПроверитьДоступностьРедактированияСтроки(Элемент.ТекущиеДанные, Отказ);
	
КонецПроцедуры
&НаКлиенте
Процедура ТоварыПередНачаломИзменения(Элемент, Отказ)
	
	
	текДанные = Элемент.ТекущиеДанные;
	
	// запомним текущую строку
	
	мСтСтрокаРедактирования = Новый Структура("Номенклатура, Упаковка, Размещение, Количество",
										текДанные.Номенклатура, текДанные.Упаковка, текДанные.Размещение, текДанные.Количество);
	
	// Проверим
	
	ПроверитьДоступностьРедактированияСтроки(Элемент.ТекущиеДанные, Отказ);
	
КонецПроцедуры


#Область отбор_заказа_у_менеджера

&НаСервере
Функция ОтобратьУМенеджера()
	
	Возврат БизнесПроцессы.СборкаЗаказа.ОтобратьУМенеджера(Объект.Заказ);
	
КонецФункции
&НаКлиенте
Процедура ОтобратьЗаказУЛогиста(Команда)

	Если Вопрос("Отменить очередь сборки заказа у логиста, для того чтобы отредактировать заказ?",
			РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			
			Если ОтобратьУМенеджера() Тогда
				ПрочитатьРеквизиты();
				//ПеречитатьРеквизитыПоЗаказу();
				//УправлениеВидимостьюДоступностью(); 
			КонецЕсли; КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Автоматическое_снятие_резервов

&НаКлиенте
Процедура ПродлитьРезерв(Команда)
	
	Если ПродлитьРезервНа.Пустая() Тогда
		ПоказатьПредупреждение(,"Продлять на сколько?");
	Иначе
		Если ПродлитьРезервНаСервере() Тогда
			ОбновитьРезервНаСервереНепосредственно(); 
			Закрыть(); КонецЕсли; КонецЕсли;
	
КонецПроцедуры
&НаСервере
Функция ПродлитьРезервНаСервере()
	
	Запись = РегистрыСведений.ОтсрочкаСнятияРезервов.СоздатьМенеджерЗаписи();
	Запись.Период 				= ТекущаяДата();
	Запись.Заказ 				= Объект.Заказ;
	Запись.Ответсвенный 		= ПараметрыСеанса.ТекущийПользователь;
	Запись.ДатаСнятияРезерва 	= НачалоДня(ТекущаяДата()) + 86400 * ПродлитьРезервНа.Срок;
	
	Возврат ОбщиеФункции.ЗаписатьОбъектИСообщитьЕслиОшибка(Запись);
	
КонецФункции

&НаСервере
Функция ИнформацияПоРезервуПолученаИОбновленыЭлементы()
	
	СтруктураРезерва = ПолучитьИзВременногоХранилища(АдресИнфОРезерве);
	Если СтруктураРезерва = Неопределено Тогда
		Возврат Ложь;
		
	Иначе
		
		Если СтруктураРезерва.Состояние = Поток.СостояниеОшибка() Тогда
			ВызватьИсключение СтруктураРезерва.СтрОшибки; КонецЕсли;
		
		Если СтруктураРезерва.Результат.СтатусЗаказаПозволяет Тогда
		
			// Получим данные
			
			ДатаУстановкиРезерва = СтруктураРезерва.Результат.ДатаУстановкиРезерва;
			
			// Установим видимость
			
			Элементы.ГруппаРезервы.Видимость 			= ДатаУстановкиРезерва <> '00010101';
			Элементы.ГруппаПродлитьРезерв.Видимость 	= СтруктураРезерва.Результат.ВозможноПродление;
			
			Если СтруктураРезерва.Результат.ЕстьРезервНаСегодня Тогда
				НадписьРезервДействетДо	= ?(НачалоДня(СтруктураРезерва.Результат.ПоследнийДеньРезерва) > НачалоДня(ТекущаяДата()), Новый ФорматированнаяСтрока("Резерв действет до " + Формат(СтруктураРезерва.Результат.ПоследнийДеньРезерва, "ДЛФ=DD")), Новый ФорматированнаяСтрока("Сегодня резерв будет снят",,WebЦвета.Красный));
			Иначе
				НадписьРезервДействетДо	= Новый ФорматированнаяСтрока("Резерв действовал до " + Формат(СтруктураРезерва.Результат.ПоследнийДеньРезерва, "ДЛФ=DD"),,WebЦвета.ТемноСерый); КонецЕсли; КонецЕсли;
		
		Возврат Истина; КонецЕсли;

КонецФункции
&НаСервере
Процедура ОбновитьРезервНаСервереНепосредственно()
	
	// скроем все с глаз
	
	Элементы.ГруппаРезервы.Видимость 		= Ложь;
	Элементы.ГруппаПродлитьРезерв.Видимость = Ложь;
	
	// Обновим и пусть с видимостью режают там
	
	АдресИнфОРезерве = ПоместитьВоВременноеХранилище(Новый Структура("Состояние, Результат", Поток.СостояниеВыполнено(), Поток.ИнформацияОАвтоСнятияРезерва(Объект.Заказ)));
	ИнформацияПоРезервуПолученаИОбновленыЭлементы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИнфОРезервеПостоянно()

	Если ИнформацияПоРезервуПолученаИОбновленыЭлементы() Тогда
		ОтключитьОбработчикОжидания("ПолучитьИнфОРезервеПостоянно"); КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ПолучитьИнфОРезерве()
	
	Если Не ИнформацияПоРезервуПолученаИОбновленыЭлементы() Тогда
		ПодключитьОбработчикОжидания("ПолучитьИнфОРезервеПостоянно", 1) КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ОбновитьИнформациюОСнятииРезерва()
	
	АдресИнфОРезерве = Поток.ПолучитьИнформациюОВозможностиАвтоснятияРезерваТекПользователя(Объект.Заказ, УникальныйИдентификатор);
	ПодключитьОбработчикОжидания("ПолучитьИнфОРезерве", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРезерв(Команда)
	
	ОбновитьРезервНаСервереНепосредственно();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьАдресацию(Команда)
	
	СсылкаНаЗадачу = ФункцииБизнесПроцессов.ТекущаяЗадача(Объект.Ссылка);
	Если СсылкаНаЗадачу <> Неопределено Тогда
		ОткрытьФорму("Задача.ЗадачаПользователю.Форма.АдресацияЗадачи", Новый Структура("Ключ", СсылкаНаЗадачу), ЭтаФорма) КонецЕсли;
	

КонецПроцедуры

#КонецОбласти  

&НаКлиенте
Процедура ЗаписатьИЗакрытьЗакупитьНедостающие(Команда)
	ЗакупитьНедостающее = Истина;
	
	Попытка
		Записать();
	Исключение
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

Функция ЕстьТоварПодЗаказ()
	
	ТЗТоваров = ?(СпособРазмещенияБезЗаказа, РазмещениеТоваров, РабочииТовары(,СтруктураКолонокТовары));
	Для Каждого Строка Из ТЗТоваров Цикл Если ТипЗнч(Строка.Размещение) = Тип("Число") Тогда Возврат Истина; КонецЕсли; КонецЦикла;
	
	Возврат Ложь;	
	
КонецФункции


&НаКлиенте
Процедура Восстановить(Команда)
	Если СпособРазмещенияБезЗаказа Тогда
		ВосстановитьНаСервере();
		ЭтаФорма.Закрыть();
	Иначе	
		Сообщить("Заказ оформлен по старой системе резервирования. Восстановление не возможно");
	КонецЕсли;	

КонецПроцедуры


&НаСервере
Процедура ВосстановитьНаСервере()
	
	
	НачатьТранзакцию();

	//убираем признак завершенности БП
	БП = Объект.Ссылка;
	ОбъектБП = БП.ПолучитьОбъект();
	ОбъектБП.Завершен = Ложь;
	ОбъектБП.Записать();

	//после восстановление мы не можем поставить те же резервы, поскольку ситуация изменилась, поэтому мы не можем просто отменить закрывающую корректировку
	//необходимо очистить ТЧ Товары закрывающей корректировки, таким образом она только снимет резервы. Далее необходимо вручную заново их поставить
	//
	ЗапросКорректировки = Новый Запрос;
	ЗапросКорректировки.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	КорректировкаИнтернетЗаказа.Ссылка
	               |ИЗ
	               |	Документ.КорректировкаИнтернетЗаказа КАК КорректировкаИнтернетЗаказа
	               |ГДЕ
	               |	КорректировкаИнтернетЗаказа.Заказ = &Заказ
	               |	И КорректировкаИнтернетЗаказа.Проведен = ИСТИНА
	               |	И КорректировкаИнтернетЗаказа.ЭтоЗакрытиеЗаказа = ИСТИНА
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	КорректировкаИнтернетЗаказа.МоментВремени УБЫВ";
	ЗапросКорректировки.УстановитьПараметр("Заказ",Объект.Заказ);
	РезультатПоКорректировкам = ЗапросКорректировки.Выполнить().Выбрать();

	Если РезультатПоКорректировкам.Следующий() Тогда
		КорректировкаОтмены = РезультатПоКорректировкам.Ссылка; 
		ДокументОбъектКорректировкаОтмены = КорректировкаОтмены.ПолучитьОбъект();
		ДокументОбъектКорректировкаОтмены.Товары.Очистить();
		ДокументОбъектКорректировкаОтмены.Комментарий=ДокументОбъектКорректировкаОтмены.Комментарий+". Восстановлен "+ТекущаяДата(); 
		ДокументОбъектКорректировкаОтмены.Записать(РежимЗаписиДокумента.Проведение);
		

		//НоваяКорректировкаОтмены = КорректировкаОтмены.Скопировать();
		//Для каждого Стр из НоваяКорректировкаОтмены.Товары Цикл
		//	Стр.Количество = -Стр.Количество;
		//	Стр.Сумма      = -Стр.Сумма;
		//	Стр.СуммаНДС   = -Стр.СуммаНДС;
		//КонецЦикла;
		//НоваяКорректировкаОтмены.РазмещениеТоваров.Очистить();
		//НоваяКорректировкаОтмены.Дата = ТекущаяДата();
		//НоваяКорректировкаОтмены.Записать(РежимЗаписиДокумента.Проведение);

	КонецЕсли;	

	//найдем последнюю задачу и снимем признак выполнена
	ЗапросЗадачи = Новый Запрос;
	ЗапросЗадачи.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	                     |	ЗадачаПользователю.Ссылка
	                     |ИЗ
	                     |	Задача.ЗадачаПользователю КАК ЗадачаПользователю
	                     |ГДЕ
	                     |	ЗадачаПользователю.Заказ = &Заказ
	                     |	И ЗадачаПользователю.ПометкаУдаления = ЛОЖЬ
	                     |
	                     |УПОРЯДОЧИТЬ ПО
	                     |	ЗадачаПользователю.Дата УБЫВ";
	ЗапросЗадачи.УстановитьПараметр("Заказ",Объект.Заказ);
	РезультатПоЗадачам = ЗапросЗадачи.Выполнить().Выбрать();

	Если РезультатПоЗадачам.Следующий() Тогда
	ПоследняяЗадача = РезультатПоЗадачам.Ссылка;
	ОбъектПоследняяЗадача = ПоследняяЗадача.ПолучитьОбъект();
	ОбъектПоследняяЗадача.Выполнена = Ложь;
	ОбъектПоследняяЗадача.Записать();
	КонецЕсли;	

    ////////////////////////////////////////////////////////////////////////////////////////////////по старому начало
	//Отбор = Новый Структура("Заказ",Объект.Заказ);
	//ТекущееСостояниеБП = РегистрыСведений.СостоянияЗаказов.СрезПоследних(ТекущаяДата(),Отбор);
    //
	//// Создать набор записей
	//НаборЗаписей = РегистрыСведений.СостоянияЗаказов.СоздатьНаборЗаписей();
	//НаборЗаписей.Отбор.Заказ.Установить(Объект.Заказ);
	// 
	//// Добавить записи в созданный набор записей
	//Для каждого Стр из ТекущееСостояниеБП Цикл 
	//НоваяЗапись = НаборЗаписей.Добавить();
	//НоваяЗапись.Период        = ТекущаяДата();
	//НоваяЗапись.Заказ         = Объект.Заказ;
	//НоваяЗапись.Состояние     = ?(Стр.ПредСостояние = Неопределено,Перечисления.СостоянияЗаказа.Открыт,Стр.ПредСостояние);
	//НоваяЗапись.ПредПериод    = Стр.Период;
	//НоваяЗапись.ПредСостояние = Стр.Состояние;
	//КонецЦикла;
	// 
	//// Записать набор записей
	//НаборЗаписей.Записать(Ложь);
	//////////////////////////////////////////////////////////////////////////////////////////////////по старому Конец
	
	// по новому начало
    Отбор = Новый Структура("Заказ",Объект.Заказ);
	ТекущееСостояниеБП = РегистрыСведений.СостоянияЗаказов.СрезПоследних(ТекущаяДата(),Отбор);
    ПредСостояние = ТекущееСостояниеБП[0].ПредСостояние;
	Заказы.УстановитьСостояниеЗаказа(Объект.Заказ, ?(ПредСостояние = Неопределено,Перечисления.СостоянияЗаказа.Открыт,ПредСостояние));
	// по новому конец
	
	ЗафиксироватьТранзакцию(); 


КонецПроцедуры


&НаКлиенте
Процедура ЗаказПользовательИнтернетЭлектроннаяПочтаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("знКонтрагент", Контрагент);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриемЗначения",ЭтаФорма);	
	ОткрытьФорму("ОбщаяФорма.ВыборЭлектроннойПочты", ПараметрыФормы,,,,,ОписаниеОповещения,);
КонецПроцедуры
&НаКлиенте
Процедура ПриемЗначения(Результат,Параметры) Экспорт
		
Если Не Результат = Неопределено Тогда
	Прием = Результат;	
	АдресОтправкиПисьма = Результат.Кому;
	ЭтаФорма.Модифицированность = Истина;
	//Объект.АдресОтправкиПисьма = АдресОтправкиПисьма;
КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура АдресОтправкиПисьмаПриИзменении(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура БыстроПродатьСвое(Команда) //настя
	
	Если РаботаСНоменклатуройКлиент.ЕстьСтопПродажи(Товары) Тогда Возврат КонецЕсли;
	
	ИдентификаторВремени = ДиалогиСПользователем.НачалоЗамераВремени("ИнтернетЗаявка.БыстраяПродаж", Объект.Ссылка);
    	
	Если НЕ Записать() Тогда 
		Возврат; 
	КонецЕсли;
	
	Если ПроверитьРеквизитыЗаказа() Тогда
		
		// Сформируем реализацию на то что есть и не будем выполнять задачу
		// Перед этим сохраним заказ и корректировку если нужны изменения
		
		РеализацияСсылка 		= Неопределено;
	 	Если Не СохранитьКорректировкуИРеализациюОдноТРанзацией(РеализацияСсылка,Истина) Тогда 
			Возврат 
		КонецЕсли;
			
		ОткрытьФорму(Заказы.ПолучитьИмяФормы(РеализацияСсылка), Новый Структура("Ключ", РеализацияСсылка)); 
		Модифицированность = Ложь; 
		
		Закрыть(); 
		
		ДиалогиСПользователем.ОкончаниеЗамераВремени(ИдентификаторВремени, 10);

		Возврат;

				
	КонецЕсли;

		
КонецПроцедуры

&НаСервере
Процедура ПроверитьОтгрузку()  //настя
	//Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 ИСТИНА, ИнтернетЗаказ ИЗ РегистрНакопления.ИнтернетЗаказПокупателя.Остатки(,ИнтернетЗаказ = &Заказ)");
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 ИСТИНА, ЗаказПокупателя ИЗ РегистрНакопления.ЗаказыПокупателей.Остатки(,ЗаказПокупателя = &Заказ)");
	Запрос.УстановитьПараметр("Заказ", Объект.Заказ);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
	Заказы.УстановитьСостояниеЗаказа(Объект.Заказ, Перечисления.СостоянияЗаказа.Отгружен);	
	Если Не  СразуВыполнитьПервуюЗадачу(Истина) Тогда 
				Возврат; 
	КонецЕсли;
	КонецЕсли;
	 
КонецПроцедуры

&НаКлиенте
Процедура БыстроПродать(Команда)
		
	РеализацияСсылка 		= Неопределено;
	
	БыстраяПродажа 	= Ложь;
	
		
	// Результат = "Продать" Тогда   // Продать - Это быстрая продажа
		
		// Выполним задачу и установим флаг что это быстрая продажа БП и закроем его
		
		Если Не Объект.Стартован Тогда			
			Если СразуВыполнитьПервуюЗадачу(Истина) Тогда 
				Закрыть();
			КонецЕсли;
			
		Иначе 
			Если ВыполнитьЗадачуФормированияЗаказа(Истина, РеализацияСсылка) Тогда 
				ОткрытьФорму(Заказы.ПолучитьИмяФормы(РеализацияСсылка), Новый Структура("Ключ", РеализацияСсылка)); Закрыть(); 
			КонецЕсли; 
		КонецЕсли;
		
		Возврат;		
	
	// Запустим если новый или просто запишем если старый
	
	Если Не Объект.Стартован и Не Записать(Новый Структура("Старт", Истина)) Тогда 
		Возврат;
	ИначеЕсли Не Записать() Тогда 
		Возврат;
	КонецЕсли;
	
	// Сохраним изменения в заказе
	
	Если НЕ СохранитьИзмененияРеквизитовЗаказа() Тогда  
		Возврат; 
	КонецЕсли;
	
	// Закроем форму
	
	Модифицированность = Ложь;
	
	Если Открыта() Тогда 
		Если Вопрос("Закрыть форму заявки?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда 
		Закрыть();
	    КонецЕсли;
    КонецЕсли;

КонецПроцедуры

&НаСервере
Функция УстановитьСуществующемуПроцессуБыструюПродажу2()
	
	Процесс = Объект.Ссылка.ПолучитьОбъект();
	Процесс.ЭтоБыстраяПродажа = Истина;
	
	Попытка
		Процесс.Записать();
	Исключение
		стрОшибки = ОписаниеОшибки();
		ОбщиеФункции.СообщитьТекст("Ошибка записи быстрой продажи
										|" + стрОшибки);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции
&НаСервере
Функция ВыполнитьЗадачуФормированияЗаказа(БыстраяПродажа = Ложь, РеализацияСсылка = Неопределено, Экстренно = Ложь)
	
	СсылкаЗадачи = ФункцииБизнесПроцессов.ТекущаяЗадача(Объект.Ссылка);
	
	Если СсылкаЗадачи.ТочкаМаршрута <> БизнесПроцессы.ИнтернетЗаявка.ТочкиМаршрута.ОбработатьЗаказ 
	//	и  СсылкаЗадачи.ТочкаМаршрута <> БизнесПроцессы.ИнтернетЗаявка.ТочкиМаршрута.ОжиданиеОтвета 
		Тогда
		
		ОбщиеФункции.СообщитьТекст("Текущая задача не ""обработать заказ "". Выполнить задачу не возможно.");
		Возврат Ложь;
		
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Если 	БыстраяПродажа И НЕ УстановитьСуществующемуПроцессуБыструюПродажу2() Тогда ОтменитьТранзакцию(); Возврат Ложь;
	КонецЕсли;	
	
	Если Не СоздатьИПровестиКорректировкуЗаказа(Истина) Тогда
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецЕсли;
	
	Если 	БыстраяПродажа И НЕ СохранитьИПровестиРеализацию(Объект.Заказ, РеализацияСсылка, Истина, Экстренно, Ложь) Тогда ОтменитьТранзакцию(); Возврат Ложь;
	КонецЕсли;
	
	ЗадачаОбъект = СсылкаЗадачи.ПолучитьОбъект();
	ЗадачаОбъект.Комментарий = Объект.Комментарий;
	

	Попытка
		ЗадачаОбъект.ДополнительныеСвойства.Вставить("КонтрольАдресации", Ложь);
		ЗадачаОбъект.ВыполнитьЗадачу();
			Исключение
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецПопытки;

	ЗафиксироватьТранзакцию();
	
	Модифицированность = Ложь;
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ЗаказОбработан(Команда)
	
	ИдентификаторВремени = ДиалогиСПользователем.НачалоЗамераВремени("ИнтернетЗаявка.ОработкаЗаказа", Объект.Ссылка);
	
	Если НЕ Записать() Тогда Возврат; КонецЕсли;
	
//	Если АдресОтправкиПисьма.Пустая() Тогда
//		ОбщиеФункции.СообщитьТекст("Не заполнен адрес отправки письма","АдресОтправкиПисьма"); Возврат; КонецЕсли;
		
	Если ПроверитьРеквизитыЗаказа() Тогда
	
	ЗаказОбработанНаСервере(); 
	ДиалогиСПользователем.ОкончаниеЗамераВремени(ИдентификаторВремени, 10);
	ПрочитатьРеквизиты();
				
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаказОбработанНаСервере()
	
	//Нэти Исмаилов ИТ 23.03.2017 Начало
	//Если Объект.Заказ.ВидОплаты.kind_payment_code = "cash" Тогда   //вытащи из отправки при сборке
	//
	//	ТекстПисьма = "	Ваш заказ #" + СокрЛП(Объект.Заказ.Номер) + " готов к отгрузке.<BR>
	//	|Заказ можно забрать в магазине Гараж Тулс по адресу: " + СокрЛП(Объект.Заказ.Склад.Адрес) + ".<BR>
	//	|Для получения назовите номер заказа продавцу.<BR>";
	//	
	//	БизнесПроцессы.ИнтернетЗаявка.СформироватьПисьмо(Объект.Заказ,"Гараж Тулс. Готов заказ", ТекстПисьма, , , ,); 
	//	//Новый Структура("СтатусЗаказа", "В очереди на отгрузку")
	//	//СформироватьПисьмо(Действие, ТелоПисьма, ОткрытиеЗаказа = Ложь, СсылкаНаСчет = Ложь, ДеталиЗаказа = Истина, Параметры = Неопределено)
	//КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Заказ.МВЗ) Тогда
	
		ТекстПисьма = "	Ваш заказ #" + СокрЛП(Объект.Заказ.Номер) + " готов к отгрузке.<BR>" + 
			"Весь выбранный Вами товар есть в наличии и зарезервирован. Теперь вы можете перейти к оплате заказа." + 
			"В приложении счет для оплаты. После поступления оплаты на наш счет мы осуществим сборку и отгрузку заказа.<BR>";
		
		БизнесПроцессы.ИнтернетЗаявка.СформироватьПисьмо_Нов(Объект.Заказ, """Гараж Тулс"". Готов заказ", ТекстПисьма,,,,, "Готов к отгрузке");
		
	КонецЕсли;
	
	//Нэти Исмаилов ИТ 23.03.2017 Конец

	Если Не Заказы.УстановитьСостояниеЗаказа(Объект.Заказ, Перечисления.СостоянияЗаказа.Обработан) Тогда 
		Возврат; 
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаказ(Команда)
	
	 ИдентификаторВремени = ДиалогиСПользователем.НачалоЗамераВремени("ИнтернетЗаявка.Открытие", Объект.Ссылка);
	
	Если НЕ Записать() Тогда Возврат; КонецЕсли;
	
	Если ВыполнитьЗадачу("ОжиданиеОтвета") Тогда
		
		ДиалогиСПользователем.ОкончаниеЗамераВремени(ИдентификаторВремени, 10);
		
		Закрыть();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередачаТовараПриИзменении(Элемент)
	Элементы.ГруппаВариантОтгрузки.Видимость = ПередачаТовара;
КонецПроцедуры

&НаКлиенте
Процедура ОператорПриИзменении(Элемент)
	ОператорПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОператорПриИзмененииНаСервере()
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь",Оператор);
	Запрос.УстановитьПараметр("Настройка",ПланыВидовХарактеристик.НастройкиПользователя.ПоУмолчанию_Грузоотправитель);
	Запрос.Текст="ВЫБРАТЬ
	             |	ЗначенияНастроекПользователя.Значение 
	             |ИЗ
	             |	РегистрСведений.ЗначенияНастроекПользователя КАК ЗначенияНастроекПользователя
	             |ГДЕ
	             |	ЗначенияНастроекПользователя.Пользователь = &Пользователь
	             |	И ЗначенияНастроекПользователя.Настройка = &Настройка";
	Рез=Запрос.Выполнить();
	Если Не Рез.Пустой() Тогда
		а=Рез.Выгрузить()[0];
		Грузоотправитель = а.Значение;
	КонецЕсли;
	
КонецПроцедуры


#Область Меню_загрузить_табличные_данные

&НаКлиенте
Процедура ЗагрузитьВнешниеДанные(ИмяКоманды)
	
	АдресТоваровВХранилище = ПоместитьТоварыВХранилище(СтруктураКолонокТовары);
	
	ОткрытьФорму("Документ.ЗаказПокупателя.Форма.ЗагрузкаДанных", Новый Структура("Страница, СтруктураКолонокТовары, ИмяТаблицы, АдресТоваровВХранилище", ИмяКоманды, СтруктураКолонокТовары, "Товары", АдресТоваровВХранилище), Элементы.Товары);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеExcel(Команда)
	  ЗагрузитьВнешниеДанные(Команда.Имя);
  КонецПроцедуры
  
&НаКлиенте
Процедура ЗагрузитьДанныеТабличногоДокумента(Команда)
	  ЗагрузитьВнешниеДанные(Команда.Имя);
КонецПроцедуры
  
#КонецОбласти


#Область ВыборКонтактнойИнформации

&НаКлиенте
Процедура АдресДоставкиНовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	ОповещениеВыбора=Новый ОписаниеОповещения("ОповещениеОЗакрытииФормыВыбораАдреса",ЭтаФорма);
	МассивВидовКИ=ПолучитьМассивВидовКИ("Адрес");
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(Контрагент);
	МассивОбъектов.Добавить(Партнер);
	Отбор = Новый Структура("Объект,Вид", МассивОбъектов, МассивВидовКИ);
	Парам=Новый Структура("Отбор,ОсновнойОбъект",Отбор,Контрагент);
	ОткрытьФорму("РегистрСведений.ПредставлениеКонтактнойИнформации.Форма.ФормаВыбора", Парам,,,,,ОповещениеВыбора);
	
КонецПроцедуры


&НаКлиенте
Процедура ТелефонКонтактногоЛицаДоставкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	//Если Не ЗначениеЗаполнено(КонтактноеЛицоДоставки) Тогда
	//	ПоказатьОповещениеПользователя("Заполните сначала контактное лицо доставки");
	//	Возврат;
	//КонецЕсли;	
		
	СтандартнаяОбработка=Ложь;
	ОповещениеВыбора=Новый ОписаниеОповещения("ОповещениеОЗакрытииФормыВыбораТелефона",ЭтаФорма);
	МассивВидовКИ=ПолучитьМассивВидовКИ("Телефон");
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(Контрагент);
	МассивОбъектов.Добавить(Партнер);
	МассивОбъектов.Добавить(КонтактноеЛицоДоставки);
	Отбор = Новый Структура("Объект,Вид", МассивОбъектов, МассивВидовКИ);
	Парам=Новый Структура("Отбор,ОсновнойОбъект",Отбор,КонтактноеЛицоДоставки);
	ОткрытьФорму("РегистрСведений.ПредставлениеКонтактнойИнформации.Форма.ФормаВыбора", Парам,,,,,ОповещениеВыбора);
КонецПроцедуры


&НаСервереБезКонтекста
Функция ПолучитьМассивВидовКИ(Вид)
	Запрос=Новый Запрос;
	Запрос.Текст="выбрать ссылка из Справочник.ВидыКонтактнойИнформации ГДЕ Ссылка в иерархии(Значение(Справочник.ВидыКонтактнойИнформации."+Вид+"))";
	МассивВидовКИ=Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Возврат МассивВидовКИ;
КонецФункции	
	

&НаКлиенте 
Процедура ОповещениеОЗакрытииФормыВыбораАдреса(РезультатЗакрытия,ДополнительныеПараметры) Экспорт
	Если Не РезультатЗакрытия = Неопределено Тогда
		ВыборАдресаДоставкиНов(РезультатЗакрытия);
	КонецЕсли;	
КонецПроцедуры	

&НаКлиенте 
Процедура ОповещениеОЗакрытииФормыВыбораТелефона(РезультатЗакрытия,ДополнительныеПараметры) Экспорт
	Если Не РезультатЗакрытия = Неопределено Тогда
		ВыборТелефонаКонтактногоЛица(РезультатЗакрытия);
	КонецЕсли;	
КонецПроцедуры	

&НаСервере 
Процедура ВыборАдресаДоставкиНов(РезультатЗакрытия) Экспорт
	МЗ = РегистрыСведений.ПредставлениеКонтактнойИнформации.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МЗ,РезультатЗакрытия);
	МЗ.Прочитать();
	АдресДоставкиНов = МЗ.Представление;
КонецПроцедуры	

&НаСервере 
Процедура ВыборТелефонаКонтактногоЛица(РезультатЗакрытия) Экспорт
	МЗ = РегистрыСведений.ПредставлениеКонтактнойИнформации.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МЗ,РезультатЗакрытия);
	МЗ.Прочитать();
	ТелефонКонтактногоЛицаДоставки = МЗ.Представление;
КонецПроцедуры	


#КонецОбласти

&НаКлиенте
Процедура ВариантДоставкиНовПриИзменении(Элемент)
	Если ВариантДоставкиНов=ПредопределенноеЗначение("Перечисление.ВариантДоставки.СамовывозСНашегоСклада") Тогда
		Элементы.ЗаЧейСчетДоставка.Видимость=Ложь;
		Элементы.Грузоперевозчик.Видимость=Ложь;
	ИначеЕсли ВариантДоставкиНов=ПредопределенноеЗначение("Перечисление.ВариантДоставки.ДоставкаДоКлиента") Тогда
		Элементы.ЗаЧейСчетДоставка.Видимость=Истина;
		Элементы.Грузоперевозчик.Видимость=Истина;
	ИначеЕсли ВариантДоставкиНов=ПредопределенноеЗначение("Перечисление.ВариантДоставки.ДоставкаДоКлиентаНашимиСилами") Тогда
		Элементы.ЗаЧейСчетДоставка.Видимость=Истина;
		Элементы.Грузоперевозчик.Видимость=Ложь;
	ИначеЕсли ВариантДоставкиНов=ПредопределенноеЗначение("Перечисление.ВариантДоставки.ДоставкаДоГрузоперевозчика") Тогда
		Элементы.ЗаЧейСчетДоставка.Видимость=Истина;
		Элементы.Грузоперевозчик.Видимость=Истина;
	ИначеЕсли ВариантДоставкиНов=ПредопределенноеЗначение("Перечисление.ВариантДоставки.ДоставкаДоГрузоперевозчика") Тогда
		Элементы.ЗаЧейСчетДоставка.Видимость=Истина;
		Элементы.Грузоперевозчик.Видимость=Истина;
	КонецЕсли;	
		
КонецПроцедуры


#Область ПоискПосетителей

&НаКлиенте
Процедура НайтиПосетителяПоЕмейл(Команда)
	НайденныеПосетители=НайтиПосетителейНаСервере(АдресОтправкиПисьма);
	Оповещ = Новый ОписаниеОповещения("ОбработкаВыбораПосетителя",ЭтаФорма);
	ПоказатьВыборИзМеню(Оповещ,НайденныеПосетители,Элементы.КнопкаНайтиПосетителя)
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция найтиПосетителейНаСервере(Емейл)
	Запрос=Новый Запрос("Выбрать Ссылка из Справочник.ПользователиИнтернет ГДЕ ЭлектроннаяПочта = &Емейл");
	Запрос.УстановитьПараметр("Емейл",Емейл);
	Мас =  Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	СЗ=Новый СписокЗначений;
	СЗ.ЗагрузитьЗначения(Мас);
	Возврат СЗ;
КонецФункции	

&НаКлиенте
Процедура ОбработкаВыбораПосетителя(ВыбранныйЭлемент,Параметры) Экспорт
	Если Не ВыбранныйЭлемент=Неопределено Тогда
		ПользовательИнтернет=ВыбранныйЭлемент.Значение;
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Функция НайтиПосетителяПоКонтрагентуНаСервере(Контрагент)
	
	Запрос = Новый Запрос("Выбрать Ссылка из Справочник.ПользователиИнтернет ГДЕ Контрагент = &Контрагент");
	Запрос.УстановитьПараметр("Контрагент",Контрагент);
	Мас = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	СЗ = Новый СписокЗначений;
	СЗ.ЗагрузитьЗначения(Мас);
	Возврат СЗ;

КонецФункции

&НаКлиенте
Процедура НайтиПосетителяПоКонтрагенту(Команда)
	
	НайденныеПосетители = НайтиПосетителяПоКонтрагентуНаСервере(Контрагент);
	Оповещение = Новый ОписаниеОповещения("ОбработкаВыбораПосетителя",ЭтаФорма);
	ПоказатьВыборИзМеню(Оповещение,НайденныеПосетители,Элементы.НайтиПосетителяПоКонтрагенту)

КонецПроцедуры

#КонецОбласти


#Область Прикрепленные_файлы

&НаКлиенте
Процедура УдалитьПрикрепленныеФайлыНажатие(Элемент)
	
	ПрикрепленныеФайлыКлиент.УдалитьНажатие(Объект.Заказ, ЭтаФорма, Элемент);
	
КонецПроцедуры
&НаКлиенте
Процедура ПрикрепленныеФайлыНажатиеСкрепка(Элемент)
	
	ПрикрепленныеФайлыКлиент.НажатиеСкрепка(Объект.Заказ, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПрикрепленныйФайл(Элемент)
	
	ПрикрепленныеФайлыКлиент.ОткрытьПрикрепленныйФайл(Элемент.Имя);
	
КонецПроцедуры
&НаКлиенте
Процедура ПоказатьПрикрееленныеФайлы(Элемент)
	
	ПрикрепленныеФайлыКлиент.ПоказатьПрикрепленныеФайлы(Объект.Заказ, ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьПрикрепленныхФайловНаСервере()
	
	ПрикрепленныеФайлы.Иницилизировать(Объект.Заказ, ЭтаФорма);
	
КонецПроцедуры
&НаКлиенте
Процедура ОбновитьВидимостьПрикрепленныхФайлов() Экспорт
	
	ОбновитьВидимостьПрикрепленныхФайловНаСервере();
	
КонецПроцедуры


#КонецОбласти

#Область Оповещения

&НаКлиенте
Процедура УправлениеПодпискойОповещений(Элемент)
	
	СобытияКлиент.УправлениеПодпискойСФормыОбъектаНажатие(ЭтаФорма, Элемент, "Заказ", Объект.Заказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстПодпискиНажатие(Элемент)
	
	СобытияКлиент.ТекстПодпискиФормыОбъектаНажатие(ЭтаФорма, Элемент, Объект.Заказ);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТекстОповещенийНаСервере()
	
	События.ОбновитьТекстПодпискиНаФорме(ЭтаФорма, Объект.Заказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТекстОповещений() Экспорт
	
	ОбновитьТекстОповещенийНаСервере()
	
КонецПроцедуры
&НаКлиенте
Процедура ТекстПодпискиЗакрытиеФормы(РезЗакрытия, ДопПараметры) Экспорт
	
	ОбновитьТекстОповещенийНаСервере()
	
КонецПроцедуры

#КонецОбласти

#Область Остатки

&НаСервере
Функция ПолучитьСписокСкладовСОстатками()
	
	Возврат РаботаСНоменклатурой.ПолучитьСписокСкладовСОстатками(Товары.Выгрузить(,"Номенклатура").ВыгрузитьКолонку("Номенклатура"), Объект.Заказ);
	
КонецФункции
&НаКлиенте
Процедура Остатки(Команда)
	
	ПолучитьСписокСкладовСОстатками().ПоказатьОтметкуЭлементов(Новый ОписаниеОповещения("ОтмеченыСкладыОстатков", ЭтаФорма), "Выбор складов");
	
КонецПроцедуры
&НаСервере
Процедура ЗаполнитьОстатки(Склады)
	
	РаботаСНоменклатурой.ЗаполнитьОстатки(Склады, Товары.Выгрузить(,"Номенклатура").ВыгрузитьКолонку("Номенклатура"), Объект.Заказ, Товары);
	
КонецПроцедуры
&НаКлиенте
Процедура ОтмеченыСкладыОстатков(Список, ДопПараметры) Экспорт
	
	Если Список <> Неопределено Тогда
		
		Склады = КонвертацияТипов.ПолучитьОтмеченныеЗначенияСписка(Список);
		Если Склады.Количество() Тогда
		
			ЗаполнитьОстатки(Склады); КонецЕсли; КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузополучательПриИзменении(Элемент)
	МенеджерЗаказа = ФункцииФормДокументовСервер.МенеджерЗаказаПриИзмененииРеквизита(Контрагент,Грузополучатель);
КонецПроцедуры

#КонецОбласти