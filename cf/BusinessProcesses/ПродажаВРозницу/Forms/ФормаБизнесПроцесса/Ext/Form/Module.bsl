&НаКлиенте
Перем МассивКомментариев Экспорт;

// ОБНОВЛЕНИЕ

&НаСервере
Процедура УстановитьЗаголовок()
	
	Заголовок = ?(Не Объект.Стартован,
	                    "Открытие новой смены",
						?(Объект.Завершен, "Смена ", "Открытая смена ") + Формат(Объект.Дата,"ДЛФ=DD") + " (БП №" + Объект.Номер + ")");
	
КонецПроцедуры
&НаСервере
Процедура УправлениеВидимостьюДоступностью()
	
	текЗадача 	= ФункцииБизнесПроцессов.ТекущаяЗадача(Объект.Ссылка);
	ЭтоНовый 	= Объект.Ссылка.Пустая();
	Стартован 	= Объект.Стартован;
	СменаОткрыта 	= Не ЭтоНовый И текЗадача <> Неопределено И текЗадача.ТочкаМаршрута = БизнесПроцессы.ПродажаВРозницу.ТочкиМаршрута.ЗакрытиеСмены;
	СменаНеОткрыта	= ЭтоНовый или текЗадача <> Неопределено И текЗадача.ТочкаМаршрута = БизнесПроцессы.ПродажаВРозницу.ТочкиМаршрута.ОткрытиеСмены;
	
	Элементы.Касса.ТолькоПросмотр = Не СменаНеОткрыта;
		
	Элементы.КнопкаОткрытьСмену.Видимость	= СменаНеОткрыта;
	Элементы.КнопкаЗакрытьСмену.Видимость 	= СменаОткрыта;
	Элементы.КнопкаПробитьЧек.Видимость 	= СменаОткрыта;
	
	Элементы.КнопкаККТОткрытьСмену.Видимость	= ПродажаПоККТ И СменаОткрыта И НЕ ККТСменаОткрыта;
	Элементы.КнопкаККТЗакрытьСмену.Видимость	= ПродажаПоККТ И ККТСменаОткрыта И Объект.Завершен И НЕ ККТСменаЗакрыта;
	Элементы.ОтчетОТекущемСостоянииРасчетов.Видимость = ПродажаПоККТ И Объект.Ссылка.Пустая();
	
	Элементы.ГруппаКнопкиКассы.ТолькоПросмотр = Не СменаОткрыта;
	
КонецПроцедуры
&НаСервере
Процедура ПрочитатьРеквизиты()
	
	Если ОБъект.Ссылка.Пустая() Тогда
		// по-умолчанию
		Объект.Касса = ОбщиеФункции.НастройкаПользователя("ПоУмолчанию_Касса");		
	Иначе
		ФункцииБизнесПроцессов.ЗаполнитьДанные(ЭтаФорма, Объект.Ссылка);
	КонецЕсли;
	
	//+ККТ
	УстановитьПродажиПоККТ();
	//-ККТ
	
	УстановитьЗаголовок();
	Элементы.ДокументыПроцесса.Обновить();
	УправлениеВидимостьюДоступностью();
	
	// установим параметр
	
	ДокументыПроцесса.Параметры.УстановитьЗначениеПараметра("Ссылка", Объект.Ссылка);
	ДокументыПроцесса.Параметры.УстановитьЗначениеПараметра("ДокуметСуществует", НЕ Параметры.Ключ.Пустая());
	
	Модифицированность = Ложь;
	
КонецПроцедуры
&НаСервере
Процедура ОбновитьНаличностьВКассе()
	
	НаличностьВКассе = ДенежныеСредства.стрПолучитьПолучитьНаличностьВКассе(Объект.Касса, ?(Объект.Завершен, Объект.Дата, Неопределено));
	
КонецПроцедуры


// ТИПОВЫЕ

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ДокументыПроцесса.Параметры.УстановитьЗначениеПараметра("Ссылка", Объект.Ссылка);
	ДокументыПроцесса.Параметры.УстановитьЗначениеПараметра("ДокуметСуществует", Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
    // информация о товаре
	РаботаСНоменклатурой.ДобавитьОперативнуюИнформациюОТоваре(ЭтаФорма);
	// комментарии
	ФункцииБизнесПроцессов.ДобавитьРаботуСКомментариями(ЭтаФорма);

	ПрочитатьРеквизиты();
	
	// Узнаем скоко бабла
	
	ОбновитьНаличностьВКассе();
	
КонецПроцедуры
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// комментарии
	ФункцииБизнесПроцессовКлиент.ПолучитьМассивКомментариев(ЭтаФорма, Объект.Ссылка);
		
КонецПроцедуры
&НаКлиенте
Процедура ОбщиеРеквизитыНажатие(Элемент)
	
	ФункцииФормДокументов.ОткрытьОбщиеРеквизитыБП(ЭтаФорма);

КонецПроцедуры
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если 	Не Модифицированность И
			ИмяСобытия = СобытияСистемы.Событие_ПробитЧек() Тогда
		                
		ПрочитатьРеквизиты();
		ОбновитьНаличностьВКассе();	
		
	ИначеЕсли ИмяСобытия = СобытияСистемы.Событие_ИзмениласьНаличность() Тогда
		
		ОбновитьНаличностьВКассе();
		
	КонецЕсли;

КонецПроцедуры
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	СобытияСистемы.ОповеститьОЗаписиБизнесПроцесса(Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры


// ПОВЕДЕНИЕ

&НаСервере
Функция ЕстьНеЗакрытаяСмена()
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 	ИСТИНА 
	|ИЗ 		БизнесПроцесс.ПродажаВРозницу
	|ГДЕ	Касса = &Касса И
	|		Ссылка <> &Ссылка И
	|		ПометкаУдаления = ЛОЖЬ И
	|		Завершен = ЛОЖЬ
	|");
	
	Запрос.УстановитьПараметр("Касса", 	Объект.Касса);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции
&НаСервере
Функция ОткрытьСменуНаСервере()
	
	// Проверим чтобы заполнено было
	
	Отказ = Ложь;
	
	Если Объект.Касса.Пустая() Тогда
		ОбщиеФункции.СообщитьТекст("Не указана касса ККМ", "Объект.Касса", Объект);
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Проверим а можно ли
	
	Если ЕстьНеЗакрытаяСмена() Тогда
		ОбщиеФункции.СообщитьТекст("Не закрыта предыдущая смена,
								|используйте процесс запущенный раннее");
		Возврат Ложь;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	
	Если ТекОбъект.ЭтоНовый() Тогда
		
		// Запишем процесс
		
		Попытка
			ТекОбъект.Записать();
		Исключение
			стрОшикби = ОписаниеОшибки();
			ОтменитьТранзакцию();
			ОбщиеФункции.СообщитьТекст("Ошибка при записи процесса продажи в розницу
											|" + стрОшикби);
			Возврат Ложь;
		КонецПопытки;
		
		// Стартанем процесс
		
		Попытка
			ТекОбъект.Старт();
		Исключение
			стрОшикби = ОписаниеОшибки();
			ОтменитьТранзакцию();
			ОбщиеФункции.СообщитьТекст("Ошибка при старте процесса продажи в розницу
											|" + стрОшикби);
			Возврат Ложь;
		КонецПопытки;
		
		Ссылка = ТекОбъект.Ссылка;
		
		ЗначениеВРеквизитФормы(ТекОбъект, "Объект");
		
	Иначе
		
		Ссылка = Объект.Ссылка;
		
	КонецЕсли;
	
	// Получим задачу открытия смены и выполним ее
	
	текЗадача = ФункцииБизнесПроцессов.ТекущаяЗадача(Ссылка);
	Если текЗадача.ТочкаМаршрута <> БизнесПроцессы.ПродажаВРозницу.ТочкиМаршрута.ОткрытиеСмены Тогда
		
		ОбщиеФункции.СообщитьТекст("Не понятная задача. Должна быть открыть смену, а на самом деле другая");
		ОтменитьТранзакцию();
		Возврат Ложь;
		
	КонецЕсли;
	
	ЗадачаОбъект = текЗадача.ПолучитьОбъект();
	
	Попытка
		ЗадачаОбъект.ВыполнитьЗадачу();
	Исключение
		
		стрОшибки = ОписаниеОшибки();
		ОтменитьТранзакцию();
		ОбщиеФункции.СообщитьТекст("Ошибка выполнения задачи открытия
								|" + стрОшибки);
		Возврат Ложь;
		
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗакрытьСменуНаСервере()
	
	// Получим задачу открытия смены и выполним ее
	
	текЗадача = ФункцииБизнесПроцессов.ТекущаяЗадача(Объект.Ссылка);
	Если текЗадача.ТочкаМаршрута <> БизнесПроцессы.ПродажаВРозницу.ТочкиМаршрута.ЗакрытиеСмены Тогда
		
		ОбщиеФункции.СообщитьТекст("Не понятная задача. Должна быть закрыть смену, а на самом деле другая");
		Возврат Ложь;
		
	КонецЕсли;
	
	ЗадачаОбъект = текЗадача.ПолучитьОбъект();
	
	Попытка
		ЗадачаОбъект.ВыполнитьЗадачу();
	Исключение
		
		стрОшибки = ОписаниеОшибки();
		ОбщиеФункции.СообщитьТекст("Ошибка выполнения задачи закрытия
								|" + стрОшибки);
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// СОБЫТИЯ ЭЛЕМЕНТОВ

&НаКлиенте
Процедура ПробитьЧек(Команда)
	Если ПродажаПоККТ И НЕ ККТСменаОткрыта Тогда
		ПоказатьПредупреждение(,"ВНИМАНИЕ! На вашей кассе установлена продажа по Фискальному регистратору через 1С. Смена по данному документу не открыта. Продажи по нему запрещены. Устраните неисправности и нажмите кнопку ""ККТ Открыть смену"" или закройте здесь смену и создайте новый документ после устранения всех неисправностей");
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Документ.ЧекККМ.ФормаОбъекта", Новый Структура("Процесс, СуммаВключаетНДС", Объект.Ссылка, Истина), ЭтаФорма);
	
КонецПроцедуры
&НаКлиенте
Процедура ОткрытьСмену(Команда)

	Если ОткрытьСменуНаСервере() Тогда
		
		СобытияСистемы.ОповеститьОЗаписиБизнесПроцесса(Объект.Ссылка, ЭтаФорма);
		ПрочитатьРеквизиты();
		
		ККТОткрытьСмену(Неопределено);
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ЗакрытьСмену(Команда)
	
	Если 	Вопрос("Закрыть смену?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да И
			ЗакрытьСменуНаСервере() Тогда
			
		СобытияСистемы.ОповеститьОЗаписиБизнесПроцесса(Объект.Ссылка);
		
		ККТЗакрытьСмену(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриходСредств(Команда)
	
	ОткрытьФорму("Документ.ПриходныйКассовыйОрдер.ФормаОбъекта", Новый Структура("Процесс, Касса", Объект.Ссылка, Объект.Касса), ЭтаФорма);
	ОбновитьНаличностьВКассе();	
	
КонецПроцедуры
&НаКлиенте
Процедура РасходСредств(Команда)
	
	ОткрытьФорму("Документ.РасходныйКассовыйОрдер.ФормаОбъекта", Новый Структура("Процесс, Касса, Наличность", Объект.Ссылка, Объект.Касса, ДенежныеСредства.ПолучитьНаличностьВКассе(Объект.Касса, ?(Объект.Завершен, Объект.Дата, Неопределено))), ЭтаФорма);
	ОбновитьНаличностьВКассе();
	
КонецПроцедуры
&НаКлиенте
Процедура ПеремещенияДС(Команда)
	
	ОткрытьФорму("Документ.ПеремещениеДС.ФормаОбъекта", Новый Структура("Процесс, Касса, Наличность", Объект.Ссылка, Объект.Касса, ДенежныеСредства.ПолучитьНаличностьВКассе(Объект.Касса, ?(Объект.Завершен, Объект.Дата, Неопределено))), ЭтаФорма);
	ОбновитьНаличностьВКассе();
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаБанковскойКартой(Команда)
	
	ОткрытьФорму("Документ.ОплатаБанковскойКартой.ФормаОбъекта", Новый Структура("Процесс, Касса", Объект.Ссылка, Объект.Касса), ЭтаФорма);
	//ОбновитьНаличностьВКассе();

КонецПроцедуры

&НаКлиенте
Процедура КассаПриИзменении(Элемент)
	
	ОбновитьНаличностьВКассе();
	
	УстановитьПродажиПоККТ();
	УправлениеВидимостьюДоступностью();
	
КонецПроцедуры

// ОБРАБОТКИ ТАБЛИЧНОЙ ЧАСТИ


// ИНФОРМАЦИЯ О ТОВАРЕ

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	// информация о товаре
	ОбработатьОтображениеИнформацииОТоваре()	
	 	
КонецПроцедуры
&НаСервере
Процедура ОбработатьОтображениеИнформацииОТоваре() Экспорт
	РаботаСНоменклатурой.ОбработатьОтображениеИнформацииОТоваре(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ИнфТовараТекстHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	РаботаСНоменклатуройКлиент.ИнфТовараТекстHTMLПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры
&НаКлиенте
Процедура ИнфТовараЗаголовокHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	РаботаСНоменклатуройКлиент.ИнфТовараЗаголовокHTMLПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры

 &НаКлиенте
Процедура ПоказатьСкрытьИнфОТоваре(Команда)
	РаботаСНоменклатуройКлиент.ПоказатьСкрытьИнфОТоваре(ЭтаФорма);
КонецПроцедуры
&НаКлиенте
Процедура НастройкаИнфОТоваре(Команда) 
	РаботаСНоменклатуройКлиент.НастройкаИнфОТоваре(ЭтаФорма);
КонецПроцедуры

// КОММЕНТАРИИ

&НаКлиенте
Процедура КомандаПоказатьКомментарий(Команда)
	ФункцииБизнесПроцессовКлиент.КомандаПоказатьКомментарий(ЭтаФорма);
КонецПроцедуры

// ОТЧЕТ ПО ДС

&НаСервере 
Функция ПолучитьПользовательскиеНастройкиОтчета(ИмяОтчета, ПользовательскиеНастроки, НастройкиОтбора) 
	
	Отчет = Отчеты[ИмяОтчета].Создать();
	ПользовательскиеНастроки = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки; 
	НастройкиОтбора = Отчет.КомпоновщикНастроек.Настройки.Отбор;
	
КонецФункции 
&НаСервереБезКонтекста 
Процедура УстановитьЗначениеПользовательскойНастройки(Настройки, НастройкиОтбора = Неопределено, Имя, Значение, Использование = Истина)
	
	Если НастройкиОтбора <> Неопределено Тогда
		
		Для Каждого Элемент ИЗ НастройкиОтбора.Элементы Цикл
				
			Если	Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Имя) Тогда
					настройкаИД = Элемент.ИдентификаторПользовательскойНастройки;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого Элемент Из Настройки.Элементы Цикл
		Если НастройкиОтбора <> Неопределено И ТипЗнч(Элемент) = Тип("ЭлементОтбораКомпоновкиДанных") И Элемент.ИдентификаторПользовательскойНастройки = настройкаИД Тогда
			
				Элемент.ПравоеЗначение 	= Значение;
				Элемент.Использование 	= Использование;
		ИначеЕсли ТипЗнч(Элемент) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") И Элемент.Параметр = Новый ПараметрКомпоновкиДанных(Имя) Тогда
				Элемент.Значение 	= Значение;
				Элемент.Использование 	= Использование;

		КонецЕсли
	КонецЦикла;

КонецПроцедуры 
&НаКлиенте
Процедура ОтчетПоДС(Команда)
	
	ПараметрыОтчета = Новый Структура("СформироватьПриОткрытии, ПользовательскиеНастройки", Истина); 
	НастройкиОтбора = "";
	
	ПолучитьПользовательскиеНастройкиОтчета("ДвиженияДС", ПараметрыОтчета.ПользовательскиеНастройки, НастройкиОтбора); 

	УстановитьЗначениеПользовательскойНастройки(ПараметрыОтчета.ПользовательскиеНастройки, НастройкиОтбора, "Касса", Объект.Касса); 
	УстановитьЗначениеПользовательскойНастройки(ПараметрыОтчета.ПользовательскиеНастройки,, "НачалоПериода", 	НачалоДня(Объект.Дата));
	УстановитьЗначениеПользовательскойНастройки(ПараметрыОтчета.ПользовательскиеНастройки,, "КонецПериода", 	КонецДня(Объект.Дата)+1);
	
	ОткрытьФорму("Отчет.ДвиженияДС.Форма.ФормаОтчета", ПараметрыОтчета);
	
КонецПроцедуры
&НаКлиенте
Процедура ОтчетПоБезналу(Команда)
	
	ПараметрыОтчета = Новый Структура("СформироватьПриОткрытии, ПользовательскиеНастройки", Истина); 
	НастройкиОтбора = "";
	
	ПолучитьПользовательскиеНастройкиОтчета("ОплатаПоБанковскимКартам", ПараметрыОтчета.ПользовательскиеНастройки, НастройкиОтбора); 

	УстановитьЗначениеПользовательскойНастройки(ПараметрыОтчета.ПользовательскиеНастройки, НастройкиОтбора, "Касса", Объект.Касса);
	УстановитьЗначениеПользовательскойНастройки(ПараметрыОтчета.ПользовательскиеНастройки,, "НачалоПериода", 	НачалоДня(Объект.Дата));
	УстановитьЗначениеПользовательскойНастройки(ПараметрыОтчета.ПользовательскиеНастройки,, "КонецПериода", 	КонецДня(Объект.Дата));
	
	ОткрытьФорму("Отчет.ОплатаПоБанковскимКартам.Форма.ФормаОтчета", ПараметрыОтчета);
	

КонецПроцедуры

#Область ПечатьПроданного

&НаСервере
Функция ПолучитьТаблицуОстатков()
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 	Ост.Номенклатура, СУММА(Ост.КоличествоОстаток - ЕСТЬNULL(Рез.КоличествоОстаток, 0)) Количество, СУММА(ЕСТЬNULL(Рез.КоличествоОстаток, 0)) Резерв
	|ИЗ 		РегистрНакопления.ТоварыНаСкладах.Остатки(,Склад = &Склад И Номенклатура В(&Номенклатура)) Ост
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВРезерве.Остатки(,Размещение = &Склад И Номенклатура В(&Номенклатура)) Рез
	|ПО	Ост.Склад = Рез.Размещение И Ост.Номенклатура = Рез.Номенклатура
	|
	|СГРУППИРОВАТЬ ПО Ост.Номенклатура
	|");
	
	Запрос.УстановитьПараметр("Склад", Объект.Касса.Склад);
	Запрос.УстановитьПараметр("Номенклатура", Товары.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции
&НаСервере
Функция ПолучитьПроданногоНаСервере()
	
	Табл 	= Новый ТабличныйДокумент;
	Макет 	= БизнесПроцессы.ПродажаВРозницу.ПолучитьМакет("ПечатьПроданного");
	Остатки = ПолучитьТаблицуОстатков();
	
	ОбластьШапка 		= Макет.ПолучитьОбласть("Шапка");
	ОбластьЗагаловок 	= Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ОбластьЗагаловок2 	= Макет.ПолучитьОбласть("Заголовок2");
	ОбластьСтрока1 		= Макет.ПолучитьОбласть("Строка");
	ОбластьСтрока2 		= Макет.ПолучитьОбласть("Строка1");
	ОбластьИтого 		= Макет.ПолучитьОбласть("Итого");
	
	ОбластьШапка.Параметры.Номер = Объект.Номер;
	ОбластьШапка.Параметры.Дата = Объект.Дата;
	ОбластьШапка.Параметры.СостояниеПродажи = ?(Объект.Завершен, "смена закрыта", "смена не закрыта");
	ОбластьШапка.Параметры.Склад = Объект.Касса;
	
	Табл.Вывести(ОбластьШапка);
	Табл.Вывести(ОбластьЗагаловок);
	
	текТовары = Товары.Выгрузить();
	текТовары.Сортировать("Номенклатура");
	
	Ном = 0; ИтогоКоличество = 0; ИтогоСумма = 0;
	Для Каждого Строка Из текТовары Цикл Ном = Ном + 1;
		
		ОбластьСтрока = ?(Ном % 2, ОбластьСтрока1, ОбластьСтрока2);
		ОбластьСтрока.Параметры.Заполнить(Строка);
		
		стрОстатка		 				= Остатки.Найти(Строка.Номенклатура, "Номенклатура");
		ОбластьСтрока.Параметры.Остаток = ?(стрОстатка = Неопределено, 0, Строка(стрОстатка.Количество) + ?(стрОстатка.Резерв, " (" + стрОстатка.Резерв + ")", ""));
		ОбластьСтрока.Параметры.Номер 	= Ном;
		ОбластьСтрока.Параметры.Артикул 	= Строка.Номенклатура.Артикул;
		
		ИтогоКоличество = ИтогоКоличество + Строка.Количество;
		ИтогоСумма 		= ИтогоСумма + Строка.Сумма;
		
		Если Не Табл.ПроверитьВывод(ОбластьСтрока) Тогда 
			Табл.ВывестиГоризонтальныйРазделительСтраниц();
			Табл.Вывести(ОбластьЗагаловок2); КонецЕсли;
		
		Табл.Вывести(ОбластьСтрока); КонецЦикла;
	
	ОбластьИтого.Параметры.Количество 		= ИтогоКоличество;
	ОбластьИтого.Параметры.Сумма 			= ИтогоСумма;
	ОбластьИтого.Параметры.ДатаФормирования = ТекущаяДата();
	Табл.Вывести(ОбластьИтого);
	
	Возврат Табл;
	
КонецФункции
&НаКлиенте
Процедура ПечатьПроданного(Команда)
	
	Макет = ПолучитьПроданногоНаСервере();
	Макет.ОтображатьСетку = Ложь;
	Макет.ОтображатьЗаголовки = Ложь;
	
	Макет.Показать();
	
КонецПроцедуры



#КонецОбласти

#Область ККТ
&НаКлиенте
Процедура ОперацияЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЭтотОбъект.Доступность = Истина;
	
	//ТекстСообщения = ?(РезультатВыполнения.Результат, НСтр("ru='Операция успешно завершена.'"), РезультатВыполнения.ОписаниеОшибки);
	//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
	Если Параметры = ПредопределенноеЗначение("Перечисление.СтатусыКассовойСмены.Открыта") Тогда
		Если РезультатВыполнения.Результат Тогда
			ОписаниеКассовойСмены = КассовыеСменыВызовСервера.ОписаниеПоследнейКассовойСмены(РезультатВыполнения.ИдентификаторУстройства);
			Если ОписаниеКассовойСмены<>Неопределено Тогда
				Прочитать();
				Объект.КассоваяСмена = ОписаниеКассовойСмены.КассоваяСмена;
				Записать();
				УстановитьПродажиПоККТ();
			Иначе
				ПоказатьПредупреждение(,"Непредвиденная ошибка. Не удалось определить кассовую смену.");
			КонецЕсли;
			
			ККТСменаОткрыта = Истина;
			Элементы.КнопкаККТОткрытьСмену.Видимость = Ложь;
		Иначе
			ПрочитатьРеквизиты();
			ПоказатьПредупреждение(,"Не удалось открыть кассовую смену на ККТ. Устраните причину и нажмите кнопку ""ККТ Открыть Смену."""+Символы.ПС+Символы.ПС+"Техническая информация: "+РезультатВыполнения.ОписаниеОшибки);
		КонецЕсли;
	ИначеЕсли Параметры = ПредопределенноеЗначение("Перечисление.СтатусыКассовойСмены.Закрыта") Тогда
		Если РезультатВыполнения.Результат Тогда
			Закрыть();
		Иначе
			Прочитать();
			ПрочитатьРеквизиты();
			ПоказатьПредупреждение(,"Не удалось закрыть кассовую смену на ККТ. Устраните причину и нажмите кнопку ""ККТ Закрыть Смену."""+Символы.ПС+Символы.ПС+"Техническая информация: "+РезультатВыполнения.ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ККТЗакрытьСмену(Команда)
	//Если всё ок, то закрываем смену по ККТ
	Если ПродажаПоККТ И ККТСменаОткрыта И НЕ ККТСменаЗакрыта Тогда
		ОчиститьСообщения();
		ЭтотОбъект.Доступность = Ложь;
		
		ПараметрыОперации = МенеджерОборудованияКлиентСервер.ПараметрыОткрытияЗакрытияСмены();
		ПараметрыОперации.Кассир = НСтр("ru='"+глТекущийПользователь+"'");
		
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("ОперацияЗавершение", ЭтотОбъект, ПредопределенноеЗначение("Перечисление.СтатусыКассовойСмены.Закрыта"));
		МенеджерОборудованияКлиент.НачатьЗакрытиеСменыНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, ПараметрыОперации, ФискальноеУстройство, ТипОборудования, Объект.КассоваяСмена);
	Иначе
		Закрыть();
	КонецЕсли;
	//-ККТ
КонецПроцедуры

&НаКлиенте
Процедура ККТОткрытьСмену(Команда)
	//Если всё ок, то открываем смену по ККТ
	Если ПродажаПоККТ И НЕ ККТСменаОткрыта И НЕ ККТСменаЗакрыта Тогда
		ОчиститьСообщения();
		ЭтотОбъект.Доступность = Ложь;
		
		ПараметрыОперации = МенеджерОборудованияКлиентСервер.ПараметрыОткрытияЗакрытияСмены();
		ПараметрыОперации.Кассир = НСтр("ru='"+глТекущийПользователь+"'");
		
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("ОперацияЗавершение", ЭтотОбъект, ПредопределенноеЗначение("Перечисление.СтатусыКассовойСмены.Открыта"));
		МенеджерОборудованияКлиент.НачатьОткрытиеСменыНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, ПараметрыОперации);
	КонецЕсли;
	//-ККТ
КонецПроцедуры

&НаСервере
Процедура УстановитьПродажиПоККТ()
	ПродажаПоККТ = Объект.Касса.ПродажаПоККТ;
	ККТСменаОткрыта = НЕ Объект.КассоваяСмена.Пустая() И Объект.КассоваяСмена.НачалоКассовойСмены<>Дата(1,1,1);
	ККТСменаЗакрыта = Объект.КассоваяСмена.Статус = Перечисления.СтатусыКассовойСмены.Закрыта;
	ФискальноеУстройство = Объект.КассоваяСмена.ФискальноеУстройство;
	ТипОборудования = ФискальноеУстройство.ТипОборудования;
КонецПроцедуры

&НаКлиенте
Процедура ОтчетОТекущемСостоянииРасчетов(Команда)
	ЭтотОбъект.Доступность = Ложь;
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ОтчетОперацияЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьФормированиеОтчетаОТекущемСостоянииРасчетов(ОповещениеПриЗавершении, УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура ОтчетОперацияЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЭтотОбъект.Доступность = Истина;
	
	Если РезультатВыполнения.Результат Тогда
		ПоказатьОповещениеПользователя("Отчет снят");
	Иначе
		ПоказатьПредупреждение(,"Ошибка при снятии отчета: "+РезультатВыполнения.ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

